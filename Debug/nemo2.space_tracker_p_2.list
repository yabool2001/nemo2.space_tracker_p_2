
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bb8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ac  08012c78  08012c78  00022c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d24  08014d24  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014d24  08014d24  00024d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d2c  08014d2c  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d2c  08014d2c  00024d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d34  08014d34  00024d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014d38  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200006d8  08015410  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f44  08015410  00030f44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a150  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003adb  00000000  00000000  0004a893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  0004e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001347  00000000  00000000  0004fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d50  00000000  00000000  00050f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f434  00000000  00000000  00072caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb07e  00000000  00000000  000920e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007480  00000000  00000000  0015d164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001645e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012c5c 	.word	0x08012c5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012c5c 	.word	0x08012c5c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080147a8 	.word	0x080147a8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b089      	sub	sp, #36	; 0x24
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fda6 	bl	8004104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 fb46 	bl	8002c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fdd8 	bl	8003170 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fb98 	bl	8002cf4 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fc78 	bl	8002eb8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fc38 	bl	8002e3c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fcb2 	bl	8002f34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fcfe 	bl	8002fd0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fd4a 	bl	800306c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fd96 	bl	8003108 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  // Kod testowy do usunięcia
  char test[] = "1,300,A" ;
 80025dc:	003b      	movs	r3, r7
 80025de:	4ade      	ldr	r2, [pc, #888]	; (8002958 <main+0x3b0>)
 80025e0:	ca03      	ldmia	r2!, {r0, r1}
 80025e2:	c303      	stmia	r3!, {r0, r1}
  if ( my_tracker_api_is_cmd ( test ) )
 80025e4:	003b      	movs	r3, r7
 80025e6:	0018      	movs	r0, r3
 80025e8:	f008 fa1c 	bl	800aa24 <my_tracker_api_is_cmd>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d100      	bne.n	80025f2 <main+0x4a>
 80025f0:	e12c      	b.n	800284c <main+0x2a4>
  {
	  if ( my_tracker_api_parse_cmd ( &my_astro_cmd , test ) )
 80025f2:	003a      	movs	r2, r7
 80025f4:	4bd9      	ldr	r3, [pc, #868]	; (800295c <main+0x3b4>)
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f008 fa7d 	bl	800aaf8 <my_tracker_api_parse_cmd>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d100      	bne.n	8002604 <main+0x5c>
 8002602:	e123      	b.n	800284c <main+0x2a4>
	  {
		  switch ( my_astro_cmd.code )
 8002604:	4bd5      	ldr	r3, [pc, #852]	; (800295c <main+0x3b4>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d900      	bls.n	800260e <main+0x66>
 800260c:	e0f4      	b.n	80027f8 <main+0x250>
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	4bd3      	ldr	r3, [pc, #844]	; (8002960 <main+0x3b8>)
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	469f      	mov	pc, r3
		  {
		  	  case 1:
		  		  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 8002618:	4bd0      	ldr	r3, [pc, #832]	; (800295c <main+0x3b4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 ffd1 	bl	80035c4 <my_sys_change_watchdog_time_ths>
		  		  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8002622:	4bd0      	ldr	r3, [pc, #832]	; (8002964 <main+0x3bc>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	001c      	movs	r4, r3
 8002628:	4bcc      	ldr	r3, [pc, #816]	; (800295c <main+0x3b4>)
 800262a:	7a1b      	ldrb	r3, [r3, #8]
 800262c:	001d      	movs	r5, r3
 800262e:	4bcb      	ldr	r3, [pc, #812]	; (800295c <main+0x3b4>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	001a      	movs	r2, r3
 8002634:	4bc9      	ldr	r3, [pc, #804]	; (800295c <main+0x3b4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	49cb      	ldr	r1, [pc, #812]	; (8002968 <main+0x3c0>)
 800263a:	48cc      	ldr	r0, [pc, #816]	; (800296c <main+0x3c4>)
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9200      	str	r2, [sp, #0]
 8002640:	002b      	movs	r3, r5
 8002642:	0022      	movs	r2, r4
 8002644:	f009 fd30 	bl	800c0a8 <sprintf>
		  		  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002648:	4ac9      	ldr	r2, [pc, #804]	; (8002970 <main+0x3c8>)
 800264a:	49ca      	ldr	r1, [pc, #808]	; (8002974 <main+0x3cc>)
 800264c:	48ca      	ldr	r0, [pc, #808]	; (8002978 <main+0x3d0>)
 800264e:	4bc7      	ldr	r3, [pc, #796]	; (800296c <main+0x3c4>)
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	23b5      	movs	r3, #181	; 0xb5
 8002654:	f009 fd28 	bl	800c0a8 <sprintf>
		  		  send_debug_logs ( dbg_payload ) ;
 8002658:	4bc7      	ldr	r3, [pc, #796]	; (8002978 <main+0x3d0>)
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fe94 	bl	8003388 <send_debug_logs>
		  		  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002660:	4bc0      	ldr	r3, [pc, #768]	; (8002964 <main+0x3bc>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	b291      	uxth	r1, r2
 8002668:	4abe      	ldr	r2, [pc, #760]	; (8002964 <main+0x3bc>)
 800266a:	8011      	strh	r1, [r2, #0]
 800266c:	4abf      	ldr	r2, [pc, #764]	; (800296c <main+0x3c4>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f007 f8c7 	bl	8009804 <my_astro_add_payload_2_queue>
		  		  break ;
 8002676:	e0e9      	b.n	800284c <main+0x2a4>
		  	  case 2:
		  		  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 8002678:	4bb8      	ldr	r3, [pc, #736]	; (800295c <main+0x3b4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 ffbf 	bl	8003600 <my_sys_change_AlarmA_time>
		  		  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8002682:	4bb8      	ldr	r3, [pc, #736]	; (8002964 <main+0x3bc>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	001c      	movs	r4, r3
 8002688:	4bb4      	ldr	r3, [pc, #720]	; (800295c <main+0x3b4>)
 800268a:	7a1b      	ldrb	r3, [r3, #8]
 800268c:	001d      	movs	r5, r3
 800268e:	4bb3      	ldr	r3, [pc, #716]	; (800295c <main+0x3b4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	001a      	movs	r2, r3
 8002694:	4bb1      	ldr	r3, [pc, #708]	; (800295c <main+0x3b4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	49b3      	ldr	r1, [pc, #716]	; (8002968 <main+0x3c0>)
 800269a:	48b4      	ldr	r0, [pc, #720]	; (800296c <main+0x3c4>)
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	9200      	str	r2, [sp, #0]
 80026a0:	002b      	movs	r3, r5
 80026a2:	0022      	movs	r2, r4
 80026a4:	f009 fd00 	bl	800c0a8 <sprintf>
		  		  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80026a8:	4ab1      	ldr	r2, [pc, #708]	; (8002970 <main+0x3c8>)
 80026aa:	49b2      	ldr	r1, [pc, #712]	; (8002974 <main+0x3cc>)
 80026ac:	48b2      	ldr	r0, [pc, #712]	; (8002978 <main+0x3d0>)
 80026ae:	4baf      	ldr	r3, [pc, #700]	; (800296c <main+0x3c4>)
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	23bc      	movs	r3, #188	; 0xbc
 80026b4:	f009 fcf8 	bl	800c0a8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80026b8:	4baf      	ldr	r3, [pc, #700]	; (8002978 <main+0x3d0>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fe64 	bl	8003388 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80026c0:	4ba8      	ldr	r3, [pc, #672]	; (8002964 <main+0x3bc>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	b291      	uxth	r1, r2
 80026c8:	4aa6      	ldr	r2, [pc, #664]	; (8002964 <main+0x3bc>)
 80026ca:	8011      	strh	r1, [r2, #0]
 80026cc:	4aa7      	ldr	r2, [pc, #668]	; (800296c <main+0x3c4>)
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f007 f897 	bl	8009804 <my_astro_add_payload_2_queue>
				  break ;
 80026d6:	e0b9      	b.n	800284c <main+0x2a4>
		  	  case 3:
		  		  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 80026d8:	4ba0      	ldr	r3, [pc, #640]	; (800295c <main+0x3b4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 ffad 	bl	800363c <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80026e2:	4ba0      	ldr	r3, [pc, #640]	; (8002964 <main+0x3bc>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	001c      	movs	r4, r3
 80026e8:	4b9c      	ldr	r3, [pc, #624]	; (800295c <main+0x3b4>)
 80026ea:	7a1b      	ldrb	r3, [r3, #8]
 80026ec:	001d      	movs	r5, r3
 80026ee:	4b9b      	ldr	r3, [pc, #620]	; (800295c <main+0x3b4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	001a      	movs	r2, r3
 80026f4:	4b99      	ldr	r3, [pc, #612]	; (800295c <main+0x3b4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	499b      	ldr	r1, [pc, #620]	; (8002968 <main+0x3c0>)
 80026fa:	489c      	ldr	r0, [pc, #624]	; (800296c <main+0x3c4>)
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	002b      	movs	r3, r5
 8002702:	0022      	movs	r2, r4
 8002704:	f009 fcd0 	bl	800c0a8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002708:	4a99      	ldr	r2, [pc, #612]	; (8002970 <main+0x3c8>)
 800270a:	499a      	ldr	r1, [pc, #616]	; (8002974 <main+0x3cc>)
 800270c:	489a      	ldr	r0, [pc, #616]	; (8002978 <main+0x3d0>)
 800270e:	4b97      	ldr	r3, [pc, #604]	; (800296c <main+0x3c4>)
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	23c3      	movs	r3, #195	; 0xc3
 8002714:	f009 fcc8 	bl	800c0a8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8002718:	4b97      	ldr	r3, [pc, #604]	; (8002978 <main+0x3d0>)
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fe34 	bl	8003388 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002720:	4b90      	ldr	r3, [pc, #576]	; (8002964 <main+0x3bc>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	b291      	uxth	r1, r2
 8002728:	4a8e      	ldr	r2, [pc, #568]	; (8002964 <main+0x3bc>)
 800272a:	8011      	strh	r1, [r2, #0]
 800272c:	4a8f      	ldr	r2, [pc, #572]	; (800296c <main+0x3c4>)
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f007 f867 	bl	8009804 <my_astro_add_payload_2_queue>
				  break ;
 8002736:	e089      	b.n	800284c <main+0x2a4>
		  	  case 4:
		  		  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 8002738:	4b88      	ldr	r3, [pc, #544]	; (800295c <main+0x3b4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 ff99 	bl	8003674 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8002742:	4b88      	ldr	r3, [pc, #544]	; (8002964 <main+0x3bc>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	001c      	movs	r4, r3
 8002748:	4b84      	ldr	r3, [pc, #528]	; (800295c <main+0x3b4>)
 800274a:	7a1b      	ldrb	r3, [r3, #8]
 800274c:	001d      	movs	r5, r3
 800274e:	4b83      	ldr	r3, [pc, #524]	; (800295c <main+0x3b4>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	001a      	movs	r2, r3
 8002754:	4b81      	ldr	r3, [pc, #516]	; (800295c <main+0x3b4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4983      	ldr	r1, [pc, #524]	; (8002968 <main+0x3c0>)
 800275a:	4884      	ldr	r0, [pc, #528]	; (800296c <main+0x3c4>)
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	9200      	str	r2, [sp, #0]
 8002760:	002b      	movs	r3, r5
 8002762:	0022      	movs	r2, r4
 8002764:	f009 fca0 	bl	800c0a8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002768:	4a81      	ldr	r2, [pc, #516]	; (8002970 <main+0x3c8>)
 800276a:	4982      	ldr	r1, [pc, #520]	; (8002974 <main+0x3cc>)
 800276c:	4882      	ldr	r0, [pc, #520]	; (8002978 <main+0x3d0>)
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <main+0x3c4>)
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	23ca      	movs	r3, #202	; 0xca
 8002774:	f009 fc98 	bl	800c0a8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8002778:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <main+0x3d0>)
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fe04 	bl	8003388 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002780:	4b78      	ldr	r3, [pc, #480]	; (8002964 <main+0x3bc>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	b291      	uxth	r1, r2
 8002788:	4a76      	ldr	r2, [pc, #472]	; (8002964 <main+0x3bc>)
 800278a:	8011      	strh	r1, [r2, #0]
 800278c:	4a77      	ldr	r2, [pc, #476]	; (800296c <main+0x3c4>)
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f007 f837 	bl	8009804 <my_astro_add_payload_2_queue>
				  break ;
 8002796:	e059      	b.n	800284c <main+0x2a4>
		  	  case 5:
		  		  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <main+0x3b4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 ff85 	bl	80036ac <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80027a2:	4b70      	ldr	r3, [pc, #448]	; (8002964 <main+0x3bc>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	001c      	movs	r4, r3
 80027a8:	4b6c      	ldr	r3, [pc, #432]	; (800295c <main+0x3b4>)
 80027aa:	7a1b      	ldrb	r3, [r3, #8]
 80027ac:	001d      	movs	r5, r3
 80027ae:	4b6b      	ldr	r3, [pc, #428]	; (800295c <main+0x3b4>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	001a      	movs	r2, r3
 80027b4:	4b69      	ldr	r3, [pc, #420]	; (800295c <main+0x3b4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	496b      	ldr	r1, [pc, #428]	; (8002968 <main+0x3c0>)
 80027ba:	486c      	ldr	r0, [pc, #432]	; (800296c <main+0x3c4>)
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	002b      	movs	r3, r5
 80027c2:	0022      	movs	r2, r4
 80027c4:	f009 fc70 	bl	800c0a8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80027c8:	4a69      	ldr	r2, [pc, #420]	; (8002970 <main+0x3c8>)
 80027ca:	496a      	ldr	r1, [pc, #424]	; (8002974 <main+0x3cc>)
 80027cc:	486a      	ldr	r0, [pc, #424]	; (8002978 <main+0x3d0>)
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <main+0x3c4>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	23d1      	movs	r3, #209	; 0xd1
 80027d4:	f009 fc68 	bl	800c0a8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80027d8:	4b67      	ldr	r3, [pc, #412]	; (8002978 <main+0x3d0>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fdd4 	bl	8003388 <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027e0:	4b60      	ldr	r3, [pc, #384]	; (8002964 <main+0x3bc>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	b291      	uxth	r1, r2
 80027e8:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <main+0x3bc>)
 80027ea:	8011      	strh	r1, [r2, #0]
 80027ec:	4a5f      	ldr	r2, [pc, #380]	; (800296c <main+0x3c4>)
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f007 f807 	bl	8009804 <my_astro_add_payload_2_queue>
				  break ;
 80027f6:	e029      	b.n	800284c <main+0x2a4>
		  	  default:
		  		  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <main+0x3bc>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	001c      	movs	r4, r3
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <main+0x3b4>)
 8002800:	7a1b      	ldrb	r3, [r3, #8]
 8002802:	001d      	movs	r5, r3
 8002804:	4b55      	ldr	r3, [pc, #340]	; (800295c <main+0x3b4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	001a      	movs	r2, r3
 800280a:	4b54      	ldr	r3, [pc, #336]	; (800295c <main+0x3b4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4956      	ldr	r1, [pc, #344]	; (8002968 <main+0x3c0>)
 8002810:	4856      	ldr	r0, [pc, #344]	; (800296c <main+0x3c4>)
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	9200      	str	r2, [sp, #0]
 8002816:	002b      	movs	r3, r5
 8002818:	0022      	movs	r2, r4
 800281a:	f009 fc45 	bl	800c0a8 <sprintf>
		  		  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800281e:	4a54      	ldr	r2, [pc, #336]	; (8002970 <main+0x3c8>)
 8002820:	4954      	ldr	r1, [pc, #336]	; (8002974 <main+0x3cc>)
 8002822:	4855      	ldr	r0, [pc, #340]	; (8002978 <main+0x3d0>)
 8002824:	4b51      	ldr	r3, [pc, #324]	; (800296c <main+0x3c4>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	23d7      	movs	r3, #215	; 0xd7
 800282a:	f009 fc3d 	bl	800c0a8 <sprintf>
		  		  send_debug_logs ( dbg_payload ) ;
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <main+0x3d0>)
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fda9 	bl	8003388 <send_debug_logs>
		  		  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002836:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <main+0x3bc>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	b291      	uxth	r1, r2
 800283e:	4a49      	ldr	r2, [pc, #292]	; (8002964 <main+0x3bc>)
 8002840:	8011      	strh	r1, [r2, #0]
 8002842:	4a4a      	ldr	r2, [pc, #296]	; (800296c <main+0x3c4>)
 8002844:	0011      	movs	r1, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f006 ffdc 	bl	8009804 <my_astro_add_payload_2_queue>
	  }
  }



  send_debug_logs ( hello ) ;
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <main+0x3d4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fd99 	bl	8003388 <send_debug_logs>

  my_sys_init () ;
 8002856:	f000 fdc7 	bl	80033e8 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , sys_mode ) ;
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <main+0x3d8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	001a      	movs	r2, r3
 8002860:	4948      	ldr	r1, [pc, #288]	; (8002984 <main+0x3dc>)
 8002862:	4b45      	ldr	r3, [pc, #276]	; (8002978 <main+0x3d0>)
 8002864:	0018      	movs	r0, r3
 8002866:	f009 fc1f 	bl	800c0a8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <main+0x3d0>)
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fd8b 	bl	8003388 <send_debug_logs>

  my_tim_init () ;
 8002872:	f001 f849 	bl	8003908 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002876:	2002      	movs	r0, #2
 8002878:	f000 ff36 	bl	80036e8 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800287c:	f000 ff66 	bl	800374c <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <main+0x3e0>)
 8002882:	0018      	movs	r0, r3
 8002884:	f007 f838 	bl	80098f8 <my_gnss_acq_coordinates>
 8002888:	0003      	movs	r3, r0
 800288a:	001a      	movs	r2, r3
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <main+0x3e4>)
 800288e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002890:	f000 ff76 	bl	8003780 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <main+0x3e8>)
 8002896:	0018      	movs	r0, r3
 8002898:	f007 f9b4 	bl	8009c04 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <main+0x3e0>)
 800289e:	7c1b      	ldrb	r3, [r3, #16]
 80028a0:	001e      	movs	r6, r3
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <main+0x3e0>)
 80028a4:	689c      	ldr	r4, [r3, #8]
 80028a6:	68dd      	ldr	r5, [r3, #12]
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <main+0x3e0>)
 80028aa:	8a5b      	ldrh	r3, [r3, #18]
 80028ac:	4698      	mov	r8, r3
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <main+0x3e0>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	213c      	movs	r1, #60	; 0x3c
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7fd fc41 	bl	800013c <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <main+0x3c8>)
 80028be:	4935      	ldr	r1, [pc, #212]	; (8002994 <main+0x3ec>)
 80028c0:	482d      	ldr	r0, [pc, #180]	; (8002978 <main+0x3d0>)
 80028c2:	9305      	str	r3, [sp, #20]
 80028c4:	4643      	mov	r3, r8
 80028c6:	9304      	str	r3, [sp, #16]
 80028c8:	9402      	str	r4, [sp, #8]
 80028ca:	9503      	str	r5, [sp, #12]
 80028cc:	9601      	str	r6, [sp, #4]
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <main+0x3e8>)
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	23ef      	movs	r3, #239	; 0xef
 80028d4:	f009 fbe8 	bl	800c0a8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <main+0x3d0>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fd54 	bl	8003388 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <main+0x3e4>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4053      	eors	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d027      	beq.n	800293e <main+0x396>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <main+0x3f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0018      	movs	r0, r3
 80028f4:	f007 f9c8 	bl	8009c88 <my_rtc_set_alarm>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d020      	beq.n	800293e <main+0x396>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <main+0x3c8>)
 80028fe:	4927      	ldr	r1, [pc, #156]	; (800299c <main+0x3f4>)
 8002900:	481d      	ldr	r0, [pc, #116]	; (8002978 <main+0x3d0>)
 8002902:	23f5      	movs	r3, #245	; 0xf5
 8002904:	f009 fbd0 	bl	800c0a8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <main+0x3d0>)
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fd3c 	bl	8003388 <send_debug_logs>
		  my_tim_stop () ;
 8002910:	f001 f816 	bl	8003940 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <main+0x3f8>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 800291a:	f002 f8bb 	bl	8004a94 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <main+0x3e8>)
 8002920:	0018      	movs	r0, r3
 8002922:	f007 f96f 	bl	8009c04 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <main+0x3c8>)
 8002928:	491e      	ldr	r1, [pc, #120]	; (80029a4 <main+0x3fc>)
 800292a:	4813      	ldr	r0, [pc, #76]	; (8002978 <main+0x3d0>)
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <main+0x3e8>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	23fb      	movs	r3, #251	; 0xfb
 8002932:	f009 fbb9 	bl	800c0a8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <main+0x3d0>)
 8002938:	0018      	movs	r0, r3
 800293a:	f000 fd25 	bl	8003388 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 800293e:	f006 ff29 	bl	8009794 <my_astro_init>
 8002942:	0003      	movs	r3, r0
 8002944:	001a      	movs	r2, r3
 8002946:	2301      	movs	r3, #1
 8002948:	4053      	eors	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d038      	beq.n	80029c2 <main+0x41a>
	  my_sys_restart () ;
 8002950:	f000 fdd2 	bl	80034f8 <my_sys_restart>
 8002954:	e08f      	b.n	8002a76 <main+0x4ce>
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	08012dc0 	.word	0x08012dc0
 800295c:	20000adc 	.word	0x20000adc
 8002960:	080147e8 	.word	0x080147e8
 8002964:	20000a38 	.word	0x20000a38
 8002968:	08012ca4 	.word	0x08012ca4
 800296c:	20000a3c 	.word	0x20000a3c
 8002970:	08012cb4 	.word	0x08012cb4
 8002974:	08012cc8 	.word	0x08012cc8
 8002978:	20000b10 	.word	0x20000b10
 800297c:	20000000 	.word	0x20000000
 8002980:	20000a22 	.word	0x20000a22
 8002984:	08012cdc 	.word	0x08012cdc
 8002988:	20000ae8 	.word	0x20000ae8
 800298c:	20000b01 	.word	0x20000b01
 8002990:	20000a24 	.word	0x20000a24
 8002994:	08012cec 	.word	0x08012cec
 8002998:	2000000c 	.word	0x2000000c
 800299c:	08012d2c 	.word	0x08012d2c
 80029a0:	20000b00 	.word	0x20000b00
 80029a4:	08012d4c 	.word	0x08012d4c
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80029a8:	2383      	movs	r3, #131	; 0x83
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4a93      	ldr	r2, [pc, #588]	; (8002bfc <main+0x654>)
 80029ae:	4994      	ldr	r1, [pc, #592]	; (8002c00 <main+0x658>)
 80029b0:	4894      	ldr	r0, [pc, #592]	; (8002c04 <main+0x65c>)
 80029b2:	f009 fb79 	bl	800c0a8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80029b6:	4b93      	ldr	r3, [pc, #588]	; (8002c04 <main+0x65c>)
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fce5 	bl	8003388 <send_debug_logs>
		  my_astro_handle_evt () ;
 80029be:	f006 ff49 	bl	8009854 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80029c2:	f000 ff8f 	bl	80038e4 <my_astro_evt_pin>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d1ee      	bne.n	80029a8 <main+0x400>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 80029ca:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <main+0x660>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	4698      	mov	r8, r3
 80029d0:	4b8e      	ldr	r3, [pc, #568]	; (8002c0c <main+0x664>)
 80029d2:	689c      	ldr	r4, [r3, #8]
 80029d4:	68dd      	ldr	r5, [r3, #12]
 80029d6:	4b8d      	ldr	r3, [pc, #564]	; (8002c0c <main+0x664>)
 80029d8:	8a5b      	ldrh	r3, [r3, #18]
 80029da:	001e      	movs	r6, r3
 80029dc:	4b8b      	ldr	r3, [pc, #556]	; (8002c0c <main+0x664>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	213c      	movs	r1, #60	; 0x3c
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fd fbaa 	bl	800013c <__udivsi3>
 80029e8:	0003      	movs	r3, r0
 80029ea:	001a      	movs	r2, r3
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <main+0x668>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4988      	ldr	r1, [pc, #544]	; (8002c14 <main+0x66c>)
 80029f2:	4889      	ldr	r0, [pc, #548]	; (8002c18 <main+0x670>)
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	9203      	str	r2, [sp, #12]
 80029f8:	9602      	str	r6, [sp, #8]
 80029fa:	9400      	str	r4, [sp, #0]
 80029fc:	9501      	str	r5, [sp, #4]
 80029fe:	4642      	mov	r2, r8
 8002a00:	f009 fb52 	bl	800c0a8 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002a04:	230c      	movs	r3, #12
 8002a06:	33ff      	adds	r3, #255	; 0xff
 8002a08:	001c      	movs	r4, r3
 8002a0a:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <main+0x654>)
 8002a0c:	4983      	ldr	r1, [pc, #524]	; (8002c1c <main+0x674>)
 8002a0e:	487d      	ldr	r0, [pc, #500]	; (8002c04 <main+0x65c>)
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <main+0x670>)
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	0023      	movs	r3, r4
 8002a16:	f009 fb47 	bl	800c0a8 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <main+0x65c>)
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fcb3 	bl	8003388 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <main+0x664>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <main+0x664>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f006 ff53 	bl	80098d8 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002a32:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <main+0x660>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	b291      	uxth	r1, r2
 8002a3a:	4a73      	ldr	r2, [pc, #460]	; (8002c08 <main+0x660>)
 8002a3c:	8011      	strh	r1, [r2, #0]
 8002a3e:	4a76      	ldr	r2, [pc, #472]	; (8002c18 <main+0x670>)
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f006 fede 	bl	8009804 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002a48:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <main+0x678>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f007 f91b 	bl	8009c88 <my_rtc_set_alarm>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d00f      	beq.n	8002a76 <main+0x4ce>
	  {
		  my_sys_deepsleep () ;
 8002a56:	f000 fd73 	bl	8003540 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002a5a:	e00c      	b.n	8002a76 <main+0x4ce>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002a5c:	231e      	movs	r3, #30
 8002a5e:	33ff      	adds	r3, #255	; 0xff
 8002a60:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <main+0x654>)
 8002a62:	4967      	ldr	r1, [pc, #412]	; (8002c00 <main+0x658>)
 8002a64:	4867      	ldr	r0, [pc, #412]	; (8002c04 <main+0x65c>)
 8002a66:	f009 fb1f 	bl	800c0a8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002a6a:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <main+0x65c>)
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 fc8b 	bl	8003388 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002a72:	f006 feef 	bl	8009854 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002a76:	f000 ff35 	bl	80038e4 <my_astro_evt_pin>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d1ee      	bne.n	8002a5c <main+0x4b4>
	  }
	  if ( astro_rcv_cmd_flag )
 8002a7e:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <main+0x67c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d028      	beq.n	8002ad8 <main+0x530>
	  {
		  astro_rcv_cmd_flag = false ;
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <main+0x67c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
		  if ( my_tracker_api_is_cmd ( test ) )
 8002a8c:	003b      	movs	r3, r7
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f007 ffc8 	bl	800aa24 <my_tracker_api_is_cmd>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d01c      	beq.n	8002ad2 <main+0x52a>
		  {
			  if ( strstr ( my_astro_rcv_cmd , (char*) SYS_RESET_CMD ) )
 8002a98:	4a63      	ldr	r2, [pc, #396]	; (8002c28 <main+0x680>)
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <main+0x684>)
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f009 fc0d 	bl	800c2be <strstr>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d014      	beq.n	8002ad2 <main+0x52a>
			  {
				  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002aa8:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <main+0x688>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f007 f8aa 	bl	8009c04 <my_rtc_get_dt_s>
				  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002ab0:	232a      	movs	r3, #42	; 0x2a
 8002ab2:	33ff      	adds	r3, #255	; 0xff
 8002ab4:	001c      	movs	r4, r3
 8002ab6:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <main+0x654>)
 8002ab8:	495e      	ldr	r1, [pc, #376]	; (8002c34 <main+0x68c>)
 8002aba:	4852      	ldr	r0, [pc, #328]	; (8002c04 <main+0x65c>)
 8002abc:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <main+0x688>)
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	0023      	movs	r3, r4
 8002ac2:	f009 faf1 	bl	800c0a8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <main+0x65c>)
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 fc5d 	bl	8003388 <send_debug_logs>
				  HAL_NVIC_SystemReset () ;
 8002ace:	f001 fcd8 	bl	8004482 <HAL_NVIC_SystemReset>
			  }
		  }
		  my_astro_rcv_cmd[0] = 0 ;
 8002ad2:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <main+0x684>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002ad8:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <main+0x690>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d100      	bne.n	8002ae2 <main+0x53a>
 8002ae0:	e080      	b.n	8002be4 <main+0x63c>
	  {
		  my_rtc_alarm_flag = false ;
 8002ae2:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <main+0x690>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002ae8:	f000 fe30 	bl	800374c <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <main+0x664>)
 8002aee:	0018      	movs	r0, r3
 8002af0:	f006 ff02 	bl	80098f8 <my_gnss_acq_coordinates>
 8002af4:	0003      	movs	r3, r0
 8002af6:	001a      	movs	r2, r3
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <main+0x694>)
 8002afa:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002afc:	f000 fe40 	bl	8003780 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <main+0x688>)
 8002b02:	0018      	movs	r0, r3
 8002b04:	f007 f87e 	bl	8009c04 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002b08:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <main+0x664>)
 8002b0a:	7c1b      	ldrb	r3, [r3, #16]
 8002b0c:	4698      	mov	r8, r3
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <main+0x664>)
 8002b10:	689c      	ldr	r4, [r3, #8]
 8002b12:	68dd      	ldr	r5, [r3, #12]
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <main+0x664>)
 8002b16:	8a5b      	ldrh	r3, [r3, #18]
 8002b18:	4699      	mov	r9, r3
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <main+0x664>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	213c      	movs	r1, #60	; 0x3c
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fd fb0b 	bl	800013c <__udivsi3>
 8002b26:	0003      	movs	r3, r0
 8002b28:	469c      	mov	ip, r3
 8002b2a:	2338      	movs	r3, #56	; 0x38
 8002b2c:	33ff      	adds	r3, #255	; 0xff
 8002b2e:	001e      	movs	r6, r3
 8002b30:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <main+0x654>)
 8002b32:	4943      	ldr	r1, [pc, #268]	; (8002c40 <main+0x698>)
 8002b34:	4833      	ldr	r0, [pc, #204]	; (8002c04 <main+0x65c>)
 8002b36:	4663      	mov	r3, ip
 8002b38:	9305      	str	r3, [sp, #20]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	9304      	str	r3, [sp, #16]
 8002b3e:	9402      	str	r4, [sp, #8]
 8002b40:	9503      	str	r5, [sp, #12]
 8002b42:	4643      	mov	r3, r8
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <main+0x688>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	0033      	movs	r3, r6
 8002b4c:	f009 faac 	bl	800c0a8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <main+0x65c>)
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fc18 	bl	8003388 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <main+0x694>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d041      	beq.n	8002be4 <main+0x63c>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <main+0x664>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <main+0x664>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f006 feb4 	bl	80098d8 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <main+0x660>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	4698      	mov	r8, r3
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <main+0x664>)
 8002b78:	689c      	ldr	r4, [r3, #8]
 8002b7a:	68dd      	ldr	r5, [r3, #12]
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <main+0x664>)
 8002b7e:	8a5b      	ldrh	r3, [r3, #18]
 8002b80:	001e      	movs	r6, r3
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <main+0x664>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	213c      	movs	r1, #60	; 0x3c
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fd fad7 	bl	800013c <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	469c      	mov	ip, r3
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <main+0x664>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <main+0x664>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	492a      	ldr	r1, [pc, #168]	; (8002c44 <main+0x69c>)
 8002b9c:	481e      	ldr	r0, [pc, #120]	; (8002c18 <main+0x670>)
 8002b9e:	9305      	str	r3, [sp, #20]
 8002ba0:	9204      	str	r2, [sp, #16]
 8002ba2:	4663      	mov	r3, ip
 8002ba4:	9303      	str	r3, [sp, #12]
 8002ba6:	9602      	str	r6, [sp, #8]
 8002ba8:	9400      	str	r4, [sp, #0]
 8002baa:	9501      	str	r5, [sp, #4]
 8002bac:	4642      	mov	r2, r8
 8002bae:	f009 fa7b 	bl	800c0a8 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <main+0x660>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	b291      	uxth	r1, r2
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <main+0x660>)
 8002bbc:	8011      	strh	r1, [r2, #0]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <main+0x670>)
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f006 fe1e 	bl	8009804 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002bc8:	239f      	movs	r3, #159	; 0x9f
 8002bca:	005c      	lsls	r4, r3, #1
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <main+0x654>)
 8002bce:	4913      	ldr	r1, [pc, #76]	; (8002c1c <main+0x674>)
 8002bd0:	480c      	ldr	r0, [pc, #48]	; (8002c04 <main+0x65c>)
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <main+0x670>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	0023      	movs	r3, r4
 8002bd8:	f009 fa66 	bl	800c0a8 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <main+0x65c>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 fbd2 	bl	8003388 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <main+0x678>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f007 f84d 	bl	8009c88 <my_rtc_set_alarm>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d100      	bne.n	8002bf4 <main+0x64c>
 8002bf2:	e740      	b.n	8002a76 <main+0x4ce>
	  {
		  my_sys_deepsleep () ;
 8002bf4:	f000 fca4 	bl	8003540 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 8002bf8:	e73d      	b.n	8002a76 <main+0x4ce>
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	08012cb4 	.word	0x08012cb4
 8002c00:	08012d58 	.word	0x08012d58
 8002c04:	20000b10 	.word	0x20000b10
 8002c08:	20000a38 	.word	0x20000a38
 8002c0c:	20000ae8 	.word	0x20000ae8
 8002c10:	20000004 	.word	0x20000004
 8002c14:	08012d70 	.word	0x08012d70
 8002c18:	20000a3c 	.word	0x20000a3c
 8002c1c:	08012cc8 	.word	0x08012cc8
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	20000c0a 	.word	0x20000c0a
 8002c28:	08012d84 	.word	0x08012d84
 8002c2c:	20000c0c 	.word	0x20000c0c
 8002c30:	20000a24 	.word	0x20000a24
 8002c34:	08012d88 	.word	0x08012d88
 8002c38:	20000b00 	.word	0x20000b00
 8002c3c:	20000b01 	.word	0x20000b01
 8002c40:	08012cec 	.word	0x08012cec
 8002c44:	08012da8 	.word	0x08012da8

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b095      	sub	sp, #84	; 0x54
 8002c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	2414      	movs	r4, #20
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	0018      	movs	r0, r3
 8002c54:	233c      	movs	r3, #60	; 0x3c
 8002c56:	001a      	movs	r2, r3
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f009 fabb 	bl	800c1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	0018      	movs	r0, r3
 8002c62:	2310      	movs	r3, #16
 8002c64:	001a      	movs	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f009 fab4 	bl	800c1d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f001 ff29 	bl	8004ac8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c76:	f001 fec7 	bl	8004a08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <SystemClock_Config+0xa8>)
 8002c7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <SystemClock_Config+0xa8>)
 8002c80:	2118      	movs	r1, #24
 8002c82:	438a      	bics	r2, r1
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2206      	movs	r2, #6
 8002c8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2201      	movs	r2, #1
 8002c90:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	0052      	lsls	r2, r2, #1
 8002c98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f001 ff56 	bl	8004b60 <HAL_RCC_OscConfig>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002cb8:	f000 fe88 	bl	80039cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f002 faa1 	bl	8005220 <HAL_RCC_ClockConfig>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ce2:	f000 fe73 	bl	80039cc <Error_Handler>
  }
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b015      	add	sp, #84	; 0x54
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cfa:	232c      	movs	r3, #44	; 0x2c
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	2314      	movs	r3, #20
 8002d02:	001a      	movs	r2, r3
 8002d04:	2100      	movs	r1, #0
 8002d06:	f009 fa65 	bl	800c1d4 <memset>
  RTC_DateTypeDef sDate = {0};
 8002d0a:	2328      	movs	r3, #40	; 0x28
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002d12:	003b      	movs	r3, r7
 8002d14:	0018      	movs	r0, r3
 8002d16:	2328      	movs	r3, #40	; 0x28
 8002d18:	001a      	movs	r2, r3
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	f009 fa5a 	bl	800c1d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d22:	4a45      	ldr	r2, [pc, #276]	; (8002e38 <MX_RTC_Init+0x144>)
 8002d24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d2e:	227f      	movs	r2, #127	; 0x7f
 8002d30:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002d32:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d38:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	05d2      	lsls	r2, r2, #23
 8002d50:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f002 fe46 	bl	80059ec <HAL_RTC_Init>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002d64:	f000 fe32 	bl	80039cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2200      	movs	r2, #0
 8002d7a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2200      	movs	r2, #0
 8002d86:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d8e:	1879      	adds	r1, r7, r1
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <MX_RTC_Init+0x140>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	0018      	movs	r0, r3
 8002d96:	f002 fecb 	bl	8005b30 <HAL_RTC_SetTime>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002d9e:	f000 fe15 	bl	80039cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002da2:	2128      	movs	r1, #40	; 0x28
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2206      	movs	r2, #6
 8002da8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2201      	movs	r2, #1
 8002dae:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2201      	movs	r2, #1
 8002db4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002dbc:	1879      	adds	r1, r7, r1
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <MX_RTC_Init+0x140>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f002 ffb8 	bl	8005d38 <HAL_RTC_SetDate>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002dcc:	f000 fdfe 	bl	80039cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002dd0:	003b      	movs	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002ddc:	003b      	movs	r3, r7
 8002dde:	2200      	movs	r2, #0
 8002de0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002de2:	003b      	movs	r3, r7
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002de8:	003b      	movs	r3, r7
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002e00:	003b      	movs	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002e06:	003b      	movs	r3, r7
 8002e08:	2220      	movs	r2, #32
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002e0e:	003b      	movs	r3, r7
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0052      	lsls	r2, r2, #1
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e16:	0039      	movs	r1, r7
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_RTC_Init+0x140>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f003 f86b 	bl	8005ef8 <HAL_RTC_SetAlarm_IT>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002e26:	f000 fdd1 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b010      	add	sp, #64	; 0x40
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	200006f4 	.word	0x200006f4
 8002e38:	40002800 	.word	0x40002800

08002e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <MX_SPI1_Init+0x78>)
 8002e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e48:	2282      	movs	r2, #130	; 0x82
 8002e4a:	0052      	lsls	r2, r2, #1
 8002e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e56:	22e0      	movs	r2, #224	; 0xe0
 8002e58:	00d2      	lsls	r2, r2, #3
 8002e5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e96:	2208      	movs	r2, #8
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <MX_SPI1_Init+0x74>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f003 fb0b 	bl	80064b8 <HAL_SPI_Init>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ea6:	f000 fd91 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000720 	.word	0x20000720
 8002eb4:	40013000 	.word	0x40013000

08002eb8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f009 f984 	bl	800c1d4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <MX_TIM6_Init+0x70>)
 8002ed0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <MX_TIM6_Init+0x74>)
 8002ed6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <MX_TIM6_Init+0x78>)
 8002ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f003 fb9b 	bl	8006628 <HAL_TIM_Base_Init>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ef6:	f000 fd69 	bl	80039cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f06:	1d3a      	adds	r2, r7, #4
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_TIM6_Init+0x6c>)
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f003 fe33 	bl	8006b78 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002f16:	f000 fd59 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b004      	add	sp, #16
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20000784 	.word	0x20000784
 8002f28:	40001000 	.word	0x40001000
 8002f2c:	00003e7f 	.word	0x00003e7f
 8002f30:	000003e7 	.word	0x000003e7

08002f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <MX_USART1_UART_Init+0x98>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f3e:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f40:	22e1      	movs	r2, #225	; 0xe1
 8002f42:	0252      	lsls	r2, r2, #9
 8002f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f003 fe88 	bl	8006c94 <HAL_UART_Init>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f88:	f000 fd20 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	0018      	movs	r0, r3
 8002f92:	f004 fe63 	bl	8007c5c <HAL_UARTEx_SetTxFifoThreshold>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f9a:	f000 fd17 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f004 fe9a 	bl	8007cdc <HAL_UARTEx_SetRxFifoThreshold>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fac:	f000 fd0e 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <MX_USART1_UART_Init+0x94>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f004 fe18 	bl	8007be8 <HAL_UARTEx_DisableFifoMode>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f000 fd06 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	200007d0 	.word	0x200007d0
 8002fcc:	40013800 	.word	0x40013800

08002fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <MX_USART2_UART_Init+0x98>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002fdc:	22e1      	movs	r2, #225	; 0xe1
 8002fde:	0252      	lsls	r2, r2, #9
 8002fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8003008:	2200      	movs	r2, #0
 800300a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_USART2_UART_Init+0x94>)
 800300e:	2200      	movs	r2, #0
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <MX_USART2_UART_Init+0x94>)
 8003014:	2200      	movs	r2, #0
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <MX_USART2_UART_Init+0x94>)
 800301a:	0018      	movs	r0, r3
 800301c:	f003 fe3a 	bl	8006c94 <HAL_UART_Init>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d001      	beq.n	8003028 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003024:	f000 fcd2 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <MX_USART2_UART_Init+0x94>)
 800302a:	2100      	movs	r1, #0
 800302c:	0018      	movs	r0, r3
 800302e:	f004 fe15 	bl	8007c5c <HAL_UARTEx_SetTxFifoThreshold>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d001      	beq.n	800303a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003036:	f000 fcc9 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <MX_USART2_UART_Init+0x94>)
 800303c:	2100      	movs	r1, #0
 800303e:	0018      	movs	r0, r3
 8003040:	f004 fe4c 	bl	8007cdc <HAL_UARTEx_SetRxFifoThreshold>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d001      	beq.n	800304c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003048:	f000 fcc0 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <MX_USART2_UART_Init+0x94>)
 800304e:	0018      	movs	r0, r3
 8003050:	f004 fdca 	bl	8007be8 <HAL_UARTEx_DisableFifoMode>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003058:	f000 fcb8 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	20000864 	.word	0x20000864
 8003068:	40004400 	.word	0x40004400

0800306c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <MX_USART3_UART_Init+0x98>)
 8003074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003078:	2296      	movs	r2, #150	; 0x96
 800307a:	0192      	lsls	r2, r2, #6
 800307c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <MX_USART3_UART_Init+0x94>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <MX_USART3_UART_Init+0x94>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MX_USART3_UART_Init+0x94>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f003 fdec 	bl	8006c94 <HAL_UART_Init>
 80030bc:	1e03      	subs	r3, r0, #0
 80030be:	d001      	beq.n	80030c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030c0:	f000 fc84 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030c6:	2100      	movs	r1, #0
 80030c8:	0018      	movs	r0, r3
 80030ca:	f004 fdc7 	bl	8007c5c <HAL_UARTEx_SetTxFifoThreshold>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030d2:	f000 fc7b 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030d8:	2100      	movs	r1, #0
 80030da:	0018      	movs	r0, r3
 80030dc:	f004 fdfe 	bl	8007cdc <HAL_UARTEx_SetRxFifoThreshold>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d001      	beq.n	80030e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030e4:	f000 fc72 	bl	80039cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <MX_USART3_UART_Init+0x94>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f004 fd7c 	bl	8007be8 <HAL_UARTEx_DisableFifoMode>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80030f4:	f000 fc6a 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	200008f8 	.word	0x200008f8
 8003104:	40004800 	.word	0x40004800

08003108 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <MX_USART5_UART_Init+0x60>)
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <MX_USART5_UART_Init+0x64>)
 8003110:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003114:	2296      	movs	r2, #150	; 0x96
 8003116:	0192      	lsls	r2, r2, #6
 8003118:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_USART5_UART_Init+0x60>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_USART5_UART_Init+0x60>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_USART5_UART_Init+0x60>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_USART5_UART_Init+0x60>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <MX_USART5_UART_Init+0x60>)
 8003152:	0018      	movs	r0, r3
 8003154:	f003 fd9e 	bl	8006c94 <HAL_UART_Init>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 800315c:	f000 fc36 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	2000098c 	.word	0x2000098c
 800316c:	40005000 	.word	0x40005000

08003170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b08b      	sub	sp, #44	; 0x2c
 8003174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	2414      	movs	r4, #20
 8003178:	193b      	adds	r3, r7, r4
 800317a:	0018      	movs	r0, r3
 800317c:	2314      	movs	r3, #20
 800317e:	001a      	movs	r2, r3
 8003180:	2100      	movs	r1, #0
 8003182:	f009 f827 	bl	800c1d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <MX_GPIO_Init+0x200>)
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	4b79      	ldr	r3, [pc, #484]	; (8003370 <MX_GPIO_Init+0x200>)
 800318c:	2104      	movs	r1, #4
 800318e:	430a      	orrs	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
 8003192:	4b77      	ldr	r3, [pc, #476]	; (8003370 <MX_GPIO_Init+0x200>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	2204      	movs	r2, #4
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	4b74      	ldr	r3, [pc, #464]	; (8003370 <MX_GPIO_Init+0x200>)
 80031a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a2:	4b73      	ldr	r3, [pc, #460]	; (8003370 <MX_GPIO_Init+0x200>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
 80031aa:	4b71      	ldr	r3, [pc, #452]	; (8003370 <MX_GPIO_Init+0x200>)
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	2201      	movs	r2, #1
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <MX_GPIO_Init+0x200>)
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <MX_GPIO_Init+0x200>)
 80031bc:	2102      	movs	r1, #2
 80031be:	430a      	orrs	r2, r1
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
 80031c2:	4b6b      	ldr	r3, [pc, #428]	; (8003370 <MX_GPIO_Init+0x200>)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	2202      	movs	r2, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	4b68      	ldr	r3, [pc, #416]	; (8003370 <MX_GPIO_Init+0x200>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <MX_GPIO_Init+0x200>)
 80031d4:	2108      	movs	r1, #8
 80031d6:	430a      	orrs	r2, r1
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <MX_GPIO_Init+0x200>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	2208      	movs	r2, #8
 80031e0:	4013      	ands	r3, r2
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 80031e6:	23a0      	movs	r3, #160	; 0xa0
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	2200      	movs	r2, #0
 80031ec:	2110      	movs	r1, #16
 80031ee:	0018      	movs	r0, r3
 80031f0:	f001 fbb9 	bl	8004966 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 80031f4:	495f      	ldr	r1, [pc, #380]	; (8003374 <MX_GPIO_Init+0x204>)
 80031f6:	4b60      	ldr	r3, [pc, #384]	; (8003378 <MX_GPIO_Init+0x208>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	0018      	movs	r0, r3
 80031fc:	f001 fbb3 	bl	8004966 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	485c      	ldr	r0, [pc, #368]	; (8003378 <MX_GPIO_Init+0x208>)
 8003206:	2201      	movs	r2, #1
 8003208:	0019      	movs	r1, r3
 800320a:	f001 fbac 	bl	8004966 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 800320e:	4b5b      	ldr	r3, [pc, #364]	; (800337c <MX_GPIO_Init+0x20c>)
 8003210:	2200      	movs	r2, #0
 8003212:	2103      	movs	r1, #3
 8003214:	0018      	movs	r0, r3
 8003216:	f001 fba6 	bl	8004966 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 800321a:	193b      	adds	r3, r7, r4
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003220:	193b      	adds	r3, r7, r4
 8003222:	2288      	movs	r2, #136	; 0x88
 8003224:	0352      	lsls	r2, r2, #13
 8003226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	193b      	adds	r3, r7, r4
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 800322e:	193a      	adds	r2, r7, r4
 8003230:	23a0      	movs	r3, #160	; 0xa0
 8003232:	05db      	lsls	r3, r3, #23
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f001 f934 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 800323c:	193b      	adds	r3, r7, r4
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	193b      	adds	r3, r7, r4
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	193b      	adds	r3, r7, r4
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 800324e:	193a      	adds	r2, r7, r4
 8003250:	23a0      	movs	r3, #160	; 0xa0
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f001 f924 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 800325c:	193b      	adds	r3, r7, r4
 800325e:	2210      	movs	r2, #16
 8003260:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003262:	193b      	adds	r3, r7, r4
 8003264:	2201      	movs	r2, #1
 8003266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003274:	193a      	adds	r2, r7, r4
 8003276:	23a0      	movs	r3, #160	; 0xa0
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f001 f911 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8003282:	193b      	adds	r3, r7, r4
 8003284:	4a3e      	ldr	r2, [pc, #248]	; (8003380 <MX_GPIO_Init+0x210>)
 8003286:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003288:	193b      	adds	r3, r7, r4
 800328a:	2201      	movs	r2, #1
 800328c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	193b      	adds	r3, r7, r4
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	193b      	adds	r3, r7, r4
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329a:	193b      	adds	r3, r7, r4
 800329c:	4a36      	ldr	r2, [pc, #216]	; (8003378 <MX_GPIO_Init+0x208>)
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f001 f8ff 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 80032a6:	0021      	movs	r1, r4
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2288      	movs	r2, #136	; 0x88
 80032b2:	0352      	lsls	r2, r2, #13
 80032b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	000c      	movs	r4, r1
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <MX_GPIO_Init+0x208>)
 80032c2:	0019      	movs	r1, r3
 80032c4:	0010      	movs	r0, r2
 80032c6:	f001 f8ed 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80032ca:	0021      	movs	r1, r4
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0192      	lsls	r2, r2, #6
 80032d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80032d4:	000c      	movs	r4, r1
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	2211      	movs	r2, #17
 80032da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <MX_GPIO_Init+0x208>)
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f001 f8d8 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <MX_GPIO_Init+0x214>)
 80032f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	193b      	adds	r3, r7, r4
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	193b      	adds	r3, r7, r4
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <MX_GPIO_Init+0x208>)
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f001 f8c9 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2203      	movs	r2, #3
 8003316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	2201      	movs	r2, #1
 800331c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332a:	193b      	adds	r3, r7, r4
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <MX_GPIO_Init+0x20c>)
 800332e:	0019      	movs	r1, r3
 8003330:	0010      	movs	r0, r2
 8003332:	f001 f8b7 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003336:	0021      	movs	r1, r4
 8003338:	187b      	adds	r3, r7, r1
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	2200      	movs	r2, #0
 8003342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2201      	movs	r2, #1
 8003348:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800334a:	187b      	adds	r3, r7, r1
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <MX_GPIO_Init+0x20c>)
 800334e:	0019      	movs	r1, r3
 8003350:	0010      	movs	r0, r2
 8003352:	f001 f8a7 	bl	80044a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2100      	movs	r1, #0
 800335a:	2006      	movs	r0, #6
 800335c:	f001 f86c 	bl	8004438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003360:	2006      	movs	r0, #6
 8003362:	f001 f87e 	bl	8004462 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b00b      	add	sp, #44	; 0x2c
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40021000 	.word	0x40021000
 8003374:	0000a403 	.word	0x0000a403
 8003378:	50000400 	.word	0x50000400
 800337c:	50000c00 	.word	0x50000c00
 8003380:	00008c03 	.word	0x00008c03
 8003384:	00004040 	.word	0x00004040

08003388 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	0018      	movs	r0, r3
 8003394:	f7fc feb6 	bl	8000104 <strlen>
 8003398:	0003      	movs	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2bfa      	cmp	r3, #250	; 0xfa
 80033a0:	d908      	bls.n	80033b4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80033a2:	23fa      	movs	r3, #250	; 0xfa
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	490d      	ldr	r1, [pc, #52]	; (80033dc <send_debug_logs+0x54>)
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <send_debug_logs+0x58>)
 80033aa:	222a      	movs	r2, #42	; 0x2a
 80033ac:	f003 fd08 	bl	8006dc0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80033b0:	23fa      	movs	r3, #250	; 0xfa
 80033b2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	23fa      	movs	r3, #250	; 0xfa
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4808      	ldr	r0, [pc, #32]	; (80033e0 <send_debug_logs+0x58>)
 80033c0:	f003 fcfe 	bl	8006dc0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80033c4:	23fa      	movs	r3, #250	; 0xfa
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4906      	ldr	r1, [pc, #24]	; (80033e4 <send_debug_logs+0x5c>)
 80033ca:	4805      	ldr	r0, [pc, #20]	; (80033e0 <send_debug_logs+0x58>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	f003 fcf7 	bl	8006dc0 <HAL_UART_Transmit>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	08012dc8 	.word	0x08012dc8
 80033e0:	20000864 	.word	0x20000864
 80033e4:	08012df4 	.word	0x08012df4

080033e8 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <my_sys_init+0xf0>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <my_sys_init+0xf0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 80033f8:	4b38      	ldr	r3, [pc, #224]	; (80034dc <my_sys_init+0xf4>)
 80033fa:	2104      	movs	r1, #4
 80033fc:	0018      	movs	r0, r3
 80033fe:	f001 fa95 	bl	800492c <HAL_GPIO_ReadPin>
 8003402:	0003      	movs	r3, r0
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	4193      	sbcs	r3, r2
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <my_sys_init+0xf8>)
 800340c:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <my_sys_init+0xf4>)
 8003410:	2108      	movs	r1, #8
 8003412:	0018      	movs	r0, r3
 8003414:	f001 fa8a 	bl	800492c <HAL_GPIO_ReadPin>
 8003418:	0003      	movs	r3, r0
 800341a:	1e5a      	subs	r2, r3, #1
 800341c:	4193      	sbcs	r3, r2
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <my_sys_init+0xfc>)
 8003422:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <my_sys_init+0xf8>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	4053      	eors	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d013      	beq.n	800345a <my_sys_init+0x72>
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <my_sys_init+0xfc>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	4053      	eors	r3, r2
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <my_sys_init+0x100>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <my_sys_init+0x104>)
 8003448:	22e1      	movs	r2, #225	; 0xe1
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <my_sys_init+0x108>)
 8003450:	2278      	movs	r2, #120	; 0x78
 8003452:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <my_sys_init+0x10c>)
 8003456:	221e      	movs	r2, #30
 8003458:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <my_sys_init+0xf8>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d013      	beq.n	800348a <my_sys_init+0xa2>
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <my_sys_init+0xfc>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2201      	movs	r2, #1
 8003468:	4053      	eors	r3, r2
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <my_sys_init+0x100>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <my_sys_init+0x104>)
 8003478:	22e1      	movs	r2, #225	; 0xe1
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <my_sys_init+0x108>)
 8003480:	2278      	movs	r2, #120	; 0x78
 8003482:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <my_sys_init+0x10c>)
 8003486:	221e      	movs	r2, #30
 8003488:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <my_sys_init+0xf8>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	4053      	eors	r3, r2
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <my_sys_init+0xd4>
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <my_sys_init+0xfc>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00d      	beq.n	80034bc <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <my_sys_init+0x100>)
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <my_sys_init+0x104>)
 80034a8:	2296      	movs	r2, #150	; 0x96
 80034aa:	0052      	lsls	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <my_sys_init+0x108>)
 80034b0:	2296      	movs	r2, #150	; 0x96
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <my_sys_init+0x10c>)
 80034b8:	223c      	movs	r2, #60	; 0x3c
 80034ba:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <my_sys_init+0xf8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <my_sys_init+0xea>
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <my_sys_init+0xfc>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <my_sys_init+0x100>)
 80034ce:	2203      	movs	r2, #3
 80034d0:	701a      	strb	r2, [r3, #0]
	}
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000ae8 	.word	0x20000ae8
 80034dc:	50000c00 	.word	0x50000c00
 80034e0:	20000a20 	.word	0x20000a20
 80034e4:	20000a21 	.word	0x20000a21
 80034e8:	20000a22 	.word	0x20000a22
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	2000001a 	.word	0x2000001a
 80034f4:	2000001c 	.word	0x2000001c

080034f8 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <my_sys_restart+0x34>)
 8003500:	0018      	movs	r0, r3
 8003502:	f006 fb7f 	bl	8009c04 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003506:	4c0a      	ldr	r4, [pc, #40]	; (8003530 <my_sys_restart+0x38>)
 8003508:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <my_sys_restart+0x3c>)
 800350a:	490b      	ldr	r1, [pc, #44]	; (8003538 <my_sys_restart+0x40>)
 800350c:	480b      	ldr	r0, [pc, #44]	; (800353c <my_sys_restart+0x44>)
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <my_sys_restart+0x34>)
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	0023      	movs	r3, r4
 8003514:	f008 fdc8 	bl	800c0a8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <my_sys_restart+0x44>)
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff ff34 	bl	8003388 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 8003520:	f000 ffaf 	bl	8004482 <HAL_NVIC_SystemReset>
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b001      	add	sp, #4
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	20000a24 	.word	0x20000a24
 8003530:	00000373 	.word	0x00000373
 8003534:	08012cb4 	.word	0x08012cb4
 8003538:	08012d88 	.word	0x08012d88
 800353c:	20000b10 	.word	0x20000b10

08003540 <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <my_sys_deepsleep+0x64>)
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <my_sys_deepsleep+0x68>)
 800354a:	4918      	ldr	r1, [pc, #96]	; (80035ac <my_sys_deepsleep+0x6c>)
 800354c:	4818      	ldr	r0, [pc, #96]	; (80035b0 <my_sys_deepsleep+0x70>)
 800354e:	f008 fdab 	bl	800c0a8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <my_sys_deepsleep+0x70>)
 8003554:	0018      	movs	r0, r3
 8003556:	f7ff ff17 	bl	8003388 <send_debug_logs>
	my_tim_stop () ;
 800355a:	f000 f9f1 	bl	8003940 <my_tim_stop>
	HAL_SuspendTick () ;
 800355e:	f000 fe7b 	bl	8004258 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <my_sys_deepsleep+0x74>)
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	01db      	lsls	r3, r3, #7
 800356c:	2102      	movs	r1, #2
 800356e:	0018      	movs	r0, r3
 8003570:	f001 fa58 	bl	8004a24 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 8003574:	f000 fe7e 	bl	8004274 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <my_sys_deepsleep+0x78>)
 800357a:	0018      	movs	r0, r3
 800357c:	f006 fb42 	bl	8009c04 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003580:	4c0e      	ldr	r4, [pc, #56]	; (80035bc <my_sys_deepsleep+0x7c>)
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <my_sys_deepsleep+0x68>)
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <my_sys_deepsleep+0x80>)
 8003586:	480a      	ldr	r0, [pc, #40]	; (80035b0 <my_sys_deepsleep+0x70>)
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <my_sys_deepsleep+0x78>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	0023      	movs	r3, r4
 800358e:	f008 fd8b 	bl	800c0a8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <my_sys_deepsleep+0x70>)
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff fef7 	bl	8003388 <send_debug_logs>
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b001      	add	sp, #4
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	00000386 	.word	0x00000386
 80035a8:	08012cb4 	.word	0x08012cb4
 80035ac:	08012e18 	.word	0x08012e18
 80035b0:	20000b10 	.word	0x20000b10
 80035b4:	20000b00 	.word	0x20000b00
 80035b8:	20000a24 	.word	0x20000a24
 80035bc:	0000038e 	.word	0x0000038e
 80035c0:	08012e4c 	.word	0x08012e4c

080035c4 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	2396      	movs	r3, #150	; 0x96
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d30b      	bcc.n	80035ee <my_sys_change_watchdog_time_ths+0x2a>
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	23e1      	movs	r3, #225	; 0xe1
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	429a      	cmp	r2, r3
 80035de:	d806      	bhi.n	80035ee <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <my_sys_change_watchdog_time_ths+0x34>)
 80035e6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <my_sys_change_watchdog_time_ths+0x38>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	721a      	strb	r2, [r3, #8]
	}
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000008 	.word	0x20000008
 80035fc:	20000adc 	.word	0x20000adc

08003600 <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	2396      	movs	r3, #150	; 0x96
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	429a      	cmp	r2, r3
 8003610:	d309      	bcc.n	8003626 <my_sys_change_AlarmA_time+0x26>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <my_sys_change_AlarmA_time+0x30>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d805      	bhi.n	8003626 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <my_sys_change_AlarmA_time+0x34>)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <my_sys_change_AlarmA_time+0x38>)
 8003622:	2201      	movs	r2, #1
 8003624:	721a      	strb	r2, [r3, #8]
	}
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	0083d600 	.word	0x0083d600
 8003634:	2000000c 	.word	0x2000000c
 8003638:	20000adc 	.word	0x20000adc

0800363c <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b2c      	cmp	r3, #44	; 0x2c
 8003648:	d90b      	bls.n	8003662 <my_sys_change_fix_acq_ths+0x26>
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	2396      	movs	r3, #150	; 0x96
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d806      	bhi.n	8003662 <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b29a      	uxth	r2, r3
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <my_sys_change_fix_acq_ths+0x30>)
 800365a:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <my_sys_change_fix_acq_ths+0x34>)
 800365e:	2201      	movs	r2, #1
 8003660:	721a      	strb	r2, [r3, #8]
	}
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b002      	add	sp, #8
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	2000001a 	.word	0x2000001a
 8003670:	20000adc 	.word	0x20000adc

08003674 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b0e      	cmp	r3, #14
 8003680:	d90b      	bls.n	800369a <my_sys_change_min_tns_time_ths+0x26>
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	2396      	movs	r3, #150	; 0x96
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d806      	bhi.n	800369a <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	b29a      	uxth	r2, r3
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <my_sys_change_min_tns_time_ths+0x30>)
 8003692:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <my_sys_change_min_tns_time_ths+0x34>)
 8003696:	2201      	movs	r2, #1
 8003698:	721a      	strb	r2, [r3, #8]
	}
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	2000001c 	.word	0x2000001c
 80036a8:	20000adc 	.word	0x20000adc

080036ac <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <my_sys_change_pdop_ths+0x2a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d80a      	bhi.n	80036d6 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe fe9b 	bl	80023fc <__aeabi_ui2d>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	4905      	ldr	r1, [pc, #20]	; (80036e0 <my_sys_change_pdop_ths+0x34>)
 80036cc:	600a      	str	r2, [r1, #0]
 80036ce:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <my_sys_change_pdop_ths+0x38>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	721a      	strb	r2, [r3, #8]
	}
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000020 	.word	0x20000020
 80036e4:	20000adc 	.word	0x20000adc

080036e8 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	0002      	movs	r2, r0
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10e      	bne.n	800371a <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	4811      	ldr	r0, [pc, #68]	; (8003748 <my_ant_sw_pos+0x60>)
 8003702:	2200      	movs	r2, #0
 8003704:	0019      	movs	r1, r3
 8003706:	f001 f92e 	bl	8004966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	480e      	ldr	r0, [pc, #56]	; (8003748 <my_ant_sw_pos+0x60>)
 8003710:	2201      	movs	r2, #1
 8003712:	0019      	movs	r1, r3
 8003714:	f001 f927 	bl	8004966 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003718:	e011      	b.n	800373e <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d10d      	bne.n	800373e <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	4808      	ldr	r0, [pc, #32]	; (8003748 <my_ant_sw_pos+0x60>)
 8003728:	2201      	movs	r2, #1
 800372a:	0019      	movs	r1, r3
 800372c:	f001 f91b 	bl	8004966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4804      	ldr	r0, [pc, #16]	; (8003748 <my_ant_sw_pos+0x60>)
 8003736:	2200      	movs	r2, #0
 8003738:	0019      	movs	r1, r3
 800373a:	f001 f914 	bl	8004966 <HAL_GPIO_WritePin>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	50000400 	.word	0x50000400

0800374c <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff ffc9 	bl	80036e8 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	4808      	ldr	r0, [pc, #32]	; (800377c <my_gnss_sw_on+0x30>)
 800375c:	2201      	movs	r2, #1
 800375e:	0019      	movs	r1, r3
 8003760:	f001 f901 	bl	8004966 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	019b      	lsls	r3, r3, #6
 8003768:	4804      	ldr	r0, [pc, #16]	; (800377c <my_gnss_sw_on+0x30>)
 800376a:	2201      	movs	r2, #1
 800376c:	0019      	movs	r1, r3
 800376e:	f001 f8fa 	bl	8004966 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8003772:	f7ff fcc9 	bl	8003108 <MX_USART5_UART_Init>
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	50000400 	.word	0x50000400

08003780 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003784:	2002      	movs	r0, #2
 8003786:	f7ff ffaf 	bl	80036e8 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <my_gnss_sw_off+0x3c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d811      	bhi.n	80037b6 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	480a      	ldr	r0, [pc, #40]	; (80037c0 <my_gnss_sw_off+0x40>)
 8003798:	2200      	movs	r2, #0
 800379a:	0019      	movs	r1, r3
 800379c:	f001 f8e3 	bl	8004966 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	019b      	lsls	r3, r3, #6
 80037a4:	4806      	ldr	r0, [pc, #24]	; (80037c0 <my_gnss_sw_off+0x40>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	0019      	movs	r1, r3
 80037aa:	f001 f8dc 	bl	8004966 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <my_gnss_sw_off+0x44>)
 80037b0:	0018      	movs	r0, r3
 80037b2:	f003 fac5 	bl	8006d40 <HAL_UART_DeInit>
	}
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000a22 	.word	0x20000a22
 80037c0:	50000400 	.word	0x50000400
 80037c4:	2000098c 	.word	0x2000098c

080037c8 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	000a      	movs	r2, r1
 80037d2:	1cfb      	adds	r3, r7, #3
 80037d4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80037d6:	23fa      	movs	r3, #250	; 0xfa
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4809      	ldr	r0, [pc, #36]	; (8003804 <my_gnss_receive_byte+0x3c>)
 80037de:	2201      	movs	r2, #1
 80037e0:	f003 fb92 	bl	8006f08 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <my_gnss_receive_byte+0x40>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80037ec:	23fa      	movs	r3, #250	; 0xfa
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4806      	ldr	r0, [pc, #24]	; (800380c <my_gnss_receive_byte+0x44>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	f003 fae3 	bl	8006dc0 <HAL_UART_Transmit>
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	2000098c 	.word	0x2000098c
 8003808:	20000a22 	.word	0x20000a22
 800380c:	20000864 	.word	0x20000864

08003810 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <my_astronode_reset+0x30>)
 8003816:	2201      	movs	r2, #1
 8003818:	2102      	movs	r1, #2
 800381a:	0018      	movs	r0, r3
 800381c:	f001 f8a3 	bl	8004966 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003820:	2001      	movs	r0, #1
 8003822:	f000 fcf5 	bl	8004210 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <my_astronode_reset+0x30>)
 8003828:	2200      	movs	r2, #0
 800382a:	2102      	movs	r1, #2
 800382c:	0018      	movs	r0, r3
 800382e:	f001 f89a 	bl	8004966 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003832:	20fa      	movs	r0, #250	; 0xfa
 8003834:	f000 fcec 	bl	8004210 <HAL_Delay>
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	50000400 	.word	0x50000400

08003844 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <send_astronode_request+0x34>)
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff fd99 	bl	8003388 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff fd95 	bl	8003388 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b29a      	uxth	r2, r3
 8003862:	23fa      	movs	r3, #250	; 0xfa
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <send_astronode_request+0x38>)
 800386a:	f003 faa9 	bl	8006dc0 <HAL_UART_Transmit>
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	08012e78 	.word	0x08012e78
 800387c:	200008f8 	.word	0x200008f8

08003880 <get_systick>:
uint32_t get_systick ( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003884:	f000 fcba 	bl	80041fc <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	000a      	movs	r2, r1
 800389a:	1cbb      	adds	r3, r7, #2
 800389c:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800389e:	f7ff ffef 	bl	8003880 <get_systick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	1cba      	adds	r2, r7, #2
 80038aa:	8812      	ldrh	r2, [r2, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	419b      	sbcs	r3, r3
 80038b0:	425b      	negs	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4806      	ldr	r0, [pc, #24]	; (80038e0 <is_astronode_character_received+0x24>)
 80038c8:	2364      	movs	r3, #100	; 0x64
 80038ca:	2201      	movs	r2, #1
 80038cc:	f003 fb1c 	bl	8006f08 <HAL_UART_Receive>
 80038d0:	0003      	movs	r3, r0
 80038d2:	425a      	negs	r2, r3
 80038d4:	4153      	adcs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	200008f8 	.word	0x200008f8

080038e4 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <my_astro_evt_pin+0x20>)
 80038ea:	2104      	movs	r1, #4
 80038ec:	0018      	movs	r0, r3
 80038ee:	f001 f81d 	bl	800492c <HAL_GPIO_ReadPin>
 80038f2:	0003      	movs	r3, r0
 80038f4:	3b01      	subs	r3, #1
 80038f6:	425a      	negs	r2, r3
 80038f8:	4153      	adcs	r3, r2
 80038fa:	b2db      	uxtb	r3, r3
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	50000400 	.word	0x50000400

08003908 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <my_tim_init+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2202      	movs	r2, #2
 8003912:	4252      	negs	r2, r2
 8003914:	611a      	str	r2, [r3, #16]
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000784 	.word	0x20000784

08003920 <my_tim_start>:

void my_tim_start ()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <my_tim_start+0x18>)
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <my_tim_start+0x1c>)
 800392c:	0018      	movs	r0, r3
 800392e:	f002 fed3 	bl	80066d8 <HAL_TIM_Base_Start_IT>
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000c34 	.word	0x20000c34
 800393c:	20000784 	.word	0x20000784

08003940 <my_tim_stop>:

void my_tim_stop ()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <my_tim_stop+0x14>)
 8003946:	0018      	movs	r0, r3
 8003948:	f002 ff28 	bl	800679c <HAL_TIM_Base_Stop_IT>
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	20000784 	.word	0x20000784

08003958 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003974:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d901      	bls.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003982:	f7ff fdb9 	bl	80034f8 <my_sys_restart>
	}
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40001000 	.word	0x40001000
 8003994:	20000c34 	.word	0x20000c34
 8003998:	20000008 	.word	0x20000008

0800399c <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	20000b00 	.word	0x20000b00

080039b8 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	0002      	movs	r2, r0
 80039c0:	1dbb      	adds	r3, r7, #6
 80039c2:	801a      	strh	r2, [r3, #0]

}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d0:	b672      	cpsid	i
}
 80039d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <Error_Handler+0x8>
	...

080039d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_MspInit+0x4c>)
 80039e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_MspInit+0x4c>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_MspInit+0x4c>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_MspInit+0x4c>)
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_MspInit+0x4c>)
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	0549      	lsls	r1, r1, #21
 8003a00:	430a      	orrs	r2, r1
 8003a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <HAL_MspInit+0x4c>)
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	055b      	lsls	r3, r3, #21
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003a12:	23c0      	movs	r3, #192	; 0xc0
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fc3a 	bl	8004290 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b097      	sub	sp, #92	; 0x5c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a30:	240c      	movs	r4, #12
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	0018      	movs	r0, r3
 8003a36:	234c      	movs	r3, #76	; 0x4c
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f008 fbca 	bl	800c1d4 <memset>
  if(hrtc->Instance==RTC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_RTC_MspInit+0x84>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d12c      	bne.n	8003aa4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0292      	lsls	r2, r2, #10
 8003a50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	0052      	lsls	r2, r2, #1
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f001 fd89 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 8003a62:	1e03      	subs	r3, r0, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a66:	f7ff ffb1 	bl	80039cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RTC_MspInit+0x88>)
 8003a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RTC_MspInit+0x88>)
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0209      	lsls	r1, r1, #8
 8003a74:	430a      	orrs	r2, r1
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RTC_MspInit+0x88>)
 8003a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RTC_MspInit+0x88>)
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	00c9      	lsls	r1, r1, #3
 8003a82:	430a      	orrs	r2, r1
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RTC_MspInit+0x88>)
 8003a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	2103      	movs	r1, #3
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f000 fccd 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003a9e:	2002      	movs	r0, #2
 8003aa0:	f000 fcdf 	bl	8004462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b017      	add	sp, #92	; 0x5c
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	40002800 	.word	0x40002800
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b08b      	sub	sp, #44	; 0x2c
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	2414      	movs	r4, #20
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	2314      	movs	r3, #20
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f008 fb84 	bl	800c1d4 <memset>
  if(hspi->Instance==SPI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_SPI_MspInit+0x8c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d130      	bne.n	8003b38 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	0149      	lsls	r1, r1, #5
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_SPI_MspInit+0x90>)
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	22e0      	movs	r2, #224	; 0xe0
 8003b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2202      	movs	r2, #2
 8003b16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	2200      	movs	r2, #0
 8003b22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2a:	187a      	adds	r2, r7, r1
 8003b2c:	23a0      	movs	r3, #160	; 0xa0
 8003b2e:	05db      	lsls	r3, r3, #23
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 fcb6 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b00b      	add	sp, #44	; 0x2c
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	40013000 	.word	0x40013000
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_TIM_Base_MspInit+0x44>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d113      	bne.n	8003b82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_TIM_Base_MspInit+0x48>)
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_TIM_Base_MspInit+0x48>)
 8003b60:	2110      	movs	r1, #16
 8003b62:	430a      	orrs	r2, r1
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_TIM_Base_MspInit+0x48>)
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2102      	movs	r1, #2
 8003b76:	2011      	movs	r0, #17
 8003b78:	f000 fc5e 	bl	8004438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003b7c:	2011      	movs	r0, #17
 8003b7e:	f000 fc70 	bl	8004462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	40001000 	.word	0x40001000
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b0a3      	sub	sp, #140	; 0x8c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	2374      	movs	r3, #116	; 0x74
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	2314      	movs	r3, #20
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f008 fb14 	bl	800c1d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bac:	2428      	movs	r4, #40	; 0x28
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	234c      	movs	r3, #76	; 0x4c
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f008 fb0c 	bl	800c1d4 <memset>
  if(huart->Instance==USART1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a84      	ldr	r2, [pc, #528]	; (8003dd4 <HAL_UART_MspInit+0x240>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d140      	bne.n	8003c48 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bc6:	193b      	adds	r3, r7, r4
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003bcc:	193b      	adds	r3, r7, r4
 8003bce:	2200      	movs	r2, #0
 8003bd0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f001 fccd 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003bde:	f7ff fef5 	bl	80039cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	4b7c      	ldr	r3, [pc, #496]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	01c9      	lsls	r1, r1, #7
 8003bec:	430a      	orrs	r2, r1
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
 8003bf0:	4b79      	ldr	r3, [pc, #484]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	01db      	lsls	r3, r3, #7
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	4b76      	ldr	r3, [pc, #472]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	4b75      	ldr	r3, [pc, #468]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	430a      	orrs	r2, r1
 8003c08:	635a      	str	r2, [r3, #52]	; 0x34
 8003c0a:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4013      	ands	r3, r2
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003c16:	2174      	movs	r1, #116	; 0x74
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	22c0      	movs	r2, #192	; 0xc0
 8003c1c:	00d2      	lsls	r2, r2, #3
 8003c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2202      	movs	r2, #2
 8003c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2201      	movs	r2, #1
 8003c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c38:	187a      	adds	r2, r7, r1
 8003c3a:	23a0      	movs	r3, #160	; 0xa0
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fc2f 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003c46:	e0c0      	b.n	8003dca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_UART_MspInit+0x248>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d140      	bne.n	8003cd4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c52:	2128      	movs	r1, #40	; 0x28
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	2202      	movs	r2, #2
 8003c58:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	0018      	movs	r0, r3
 8003c64:	f001 fc86 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003c6c:	f7ff feae 	bl	80039cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	0289      	lsls	r1, r1, #10
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c7e:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	4013      	ands	r3, r2
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8c:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	430a      	orrs	r2, r1
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34
 8003c98:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003ca4:	2174      	movs	r1, #116	; 0x74
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	220c      	movs	r2, #12
 8003caa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	2202      	movs	r2, #2
 8003cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc4:	187a      	adds	r2, r7, r1
 8003cc6:	23a0      	movs	r3, #160	; 0xa0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 fbe9 	bl	80044a4 <HAL_GPIO_Init>
}
 8003cd2:	e07a      	b.n	8003dca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a41      	ldr	r2, [pc, #260]	; (8003de0 <HAL_UART_MspInit+0x24c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d140      	bne.n	8003d60 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cde:	2128      	movs	r1, #40	; 0x28
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2200      	movs	r2, #0
 8003cea:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f001 fc40 	bl	8005574 <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003cf8:	f7ff fe68 	bl	80039cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	02c9      	lsls	r1, r1, #11
 8003d06:	430a      	orrs	r2, r1
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	02db      	lsls	r3, r3, #11
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1c:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d1e:	2102      	movs	r1, #2
 8003d20:	430a      	orrs	r2, r1
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003d30:	2174      	movs	r1, #116	; 0x74
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	22c0      	movs	r2, #192	; 0xc0
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	2204      	movs	r2, #4
 8003d50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_UART_MspInit+0x250>)
 8003d56:	0019      	movs	r1, r3
 8003d58:	0010      	movs	r0, r2
 8003d5a:	f000 fba3 	bl	80044a4 <HAL_GPIO_Init>
}
 8003d5e:	e034      	b.n	8003dca <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a20      	ldr	r2, [pc, #128]	; (8003de8 <HAL_UART_MspInit+0x254>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d12f      	bne.n	8003dca <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	0049      	lsls	r1, r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34
 8003d92:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_UART_MspInit+0x244>)
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003d9e:	2174      	movs	r1, #116	; 0x74
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2218      	movs	r2, #24
 8003da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2202      	movs	r2, #2
 8003daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_UART_MspInit+0x250>)
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	f000 fb6d 	bl	80044a4 <HAL_GPIO_Init>
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b023      	add	sp, #140	; 0x8c
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	40004800 	.word	0x40004800
 8003de4:	50000400 	.word	0x50000400
 8003de8:	40005000 	.word	0x40005000

08003dec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <HAL_UART_MspDeInit+0xa4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10e      	bne.n	8003e1c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003dfe:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e04:	4924      	ldr	r1, [pc, #144]	; (8003e98 <HAL_UART_MspDeInit+0xac>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003e0a:	23c0      	movs	r3, #192	; 0xc0
 8003e0c:	00da      	lsls	r2, r3, #3
 8003e0e:	23a0      	movs	r3, #160	; 0xa0
 8003e10:	05db      	lsls	r3, r3, #23
 8003e12:	0011      	movs	r1, r2
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fcb1 	bl	800477c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003e1a:	e034      	b.n	8003e86 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_UART_MspDeInit+0xb0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10c      	bne.n	8003e40 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e2c:	491c      	ldr	r1, [pc, #112]	; (8003ea0 <HAL_UART_MspDeInit+0xb4>)
 8003e2e:	400a      	ands	r2, r1
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003e32:	23a0      	movs	r3, #160	; 0xa0
 8003e34:	05db      	lsls	r3, r3, #23
 8003e36:	210c      	movs	r1, #12
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 fc9f 	bl	800477c <HAL_GPIO_DeInit>
}
 8003e3e:	e022      	b.n	8003e86 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_UART_MspDeInit+0xb8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10d      	bne.n	8003e66 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e50:	4915      	ldr	r1, [pc, #84]	; (8003ea8 <HAL_UART_MspDeInit+0xbc>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003e56:	23c0      	movs	r3, #192	; 0xc0
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_UART_MspDeInit+0xc0>)
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0010      	movs	r0, r2
 8003e60:	f000 fc8c 	bl	800477c <HAL_GPIO_DeInit>
}
 8003e64:	e00f      	b.n	8003e86 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <HAL_UART_MspDeInit+0xc4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10a      	bne.n	8003e86 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_UART_MspDeInit+0xa8>)
 8003e76:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <HAL_UART_MspDeInit+0xc8>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_UART_MspDeInit+0xc0>)
 8003e7e:	2118      	movs	r1, #24
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fc7b 	bl	800477c <HAL_GPIO_DeInit>
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	ffffbfff 	.word	0xffffbfff
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	fffdffff 	.word	0xfffdffff
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	fffbffff 	.word	0xfffbffff
 8003eac:	50000400 	.word	0x50000400
 8003eb0:	40005000 	.word	0x40005000
 8003eb4:	fffffeff 	.word	0xfffffeff

08003eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ebc:	e7fe      	b.n	8003ebc <NMI_Handler+0x4>

08003ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec2:	e7fe      	b.n	8003ec2 <HardFault_Handler+0x4>

08003ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003edc:	f000 f97c 	bl	80041d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <RTC_TAMP_IRQHandler+0x14>)
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f002 f942 	bl	8006178 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	200006f4 	.word	0x200006f4

08003f00 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003f04:	2004      	movs	r0, #4
 8003f06:	f000 fd4b 	bl	80049a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003f16:	0018      	movs	r0, r3
 8003f18:	f002 fc6e 	bl	80067f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	20000784 	.word	0x20000784

08003f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  return 1;
 8003f2c:	2301      	movs	r3, #1
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_kill>:

int _kill(int pid, int sig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f3e:	f008 fa3d 	bl	800c3bc <__errno>
 8003f42:	0003      	movs	r3, r0
 8003f44:	2216      	movs	r2, #22
 8003f46:	601a      	str	r2, [r3, #0]
  return -1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_exit>:

void _exit (int status)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	425a      	negs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff ffe5 	bl	8003f34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f6a:	e7fe      	b.n	8003f6a <_exit+0x16>

08003f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e00a      	b.n	8003f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f7e:	e000      	b.n	8003f82 <_read+0x16>
 8003f80:	bf00      	nop
 8003f82:	0001      	movs	r1, r0
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	60ba      	str	r2, [r7, #8]
 8003f8a:	b2ca      	uxtb	r2, r1
 8003f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	dbf0      	blt.n	8003f7e <_read+0x12>
  }

  return len;
 8003f9c:	687b      	ldr	r3, [r7, #4]
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b006      	add	sp, #24
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e009      	b.n	8003fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	60ba      	str	r2, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	e000      	b.n	8003fc6 <_write+0x20>
 8003fc4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	dbf1      	blt.n	8003fb8 <_write+0x12>
  }
  return len;
 8003fd4:	687b      	ldr	r3, [r7, #4]
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b006      	add	sp, #24
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_close>:

int _close(int file)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	425b      	negs	r3, r3
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b002      	add	sp, #8
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0192      	lsls	r2, r2, #6
 8004002:	605a      	str	r2, [r3, #4]
  return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}

0800400e <_isatty>:

int _isatty(int file)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004016:	2301      	movs	r3, #1
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800402c:	2300      	movs	r3, #0
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b004      	add	sp, #16
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <_sbrk+0x5c>)
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <_sbrk+0x60>)
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <_sbrk+0x64>)
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <_sbrk+0x68>)
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <_sbrk+0x64>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d207      	bcs.n	8004078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004068:	f008 f9a8 	bl	800c3bc <__errno>
 800406c:	0003      	movs	r3, r0
 800406e:	220c      	movs	r2, #12
 8004070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004072:	2301      	movs	r3, #1
 8004074:	425b      	negs	r3, r3
 8004076:	e009      	b.n	800408c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <_sbrk+0x64>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <_sbrk+0x64>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	18d2      	adds	r2, r2, r3
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <_sbrk+0x64>)
 8004088:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800408a:	68fb      	ldr	r3, [r7, #12]
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b006      	add	sp, #24
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20024000 	.word	0x20024000
 8004098:	00000400 	.word	0x00000400
 800409c:	20000b04 	.word	0x20000b04
 80040a0:	20000f48 	.word	0x20000f48

080040a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040b4:	f7ff fff6 	bl	80040a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <LoopForever+0x6>)
  ldr r1, =_edata
 80040ba:	490d      	ldr	r1, [pc, #52]	; (80040f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040bc:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <LoopForever+0xe>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c0:	e002      	b.n	80040c8 <LoopCopyDataInit>

080040c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c6:	3304      	adds	r3, #4

080040c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040cc:	d3f9      	bcc.n	80040c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040d0:	4c0a      	ldr	r4, [pc, #40]	; (80040fc <LoopForever+0x16>)
  movs r3, #0
 80040d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d4:	e001      	b.n	80040da <LoopFillZerobss>

080040d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d8:	3204      	adds	r2, #4

080040da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040dc:	d3fb      	bcc.n	80040d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80040de:	f008 f973 	bl	800c3c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80040e2:	f7fe fa61 	bl	80025a8 <main>

080040e6 <LoopForever>:

LoopForever:
  b LoopForever
 80040e6:	e7fe      	b.n	80040e6 <LoopForever>
  ldr   r0, =_estack
 80040e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80040ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f0:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 80040f4:	08014d38 	.word	0x08014d38
  ldr r2, =_sbss
 80040f8:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80040fc:	20000f44 	.word	0x20000f44

08004100 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004100:	e7fe      	b.n	8004100 <ADC1_COMP_IRQHandler>
	...

08004104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_Init+0x3c>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_Init+0x3c>)
 8004116:	2180      	movs	r1, #128	; 0x80
 8004118:	0049      	lsls	r1, r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800411e:	2003      	movs	r0, #3
 8004120:	f000 f810 	bl	8004144 <HAL_InitTick>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d003      	beq.n	8004130 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e001      	b.n	8004134 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004130:	f7ff fc52 	bl	80039d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	781b      	ldrb	r3, [r3, #0]
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40022000 	.word	0x40022000

08004144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800414c:	230f      	movs	r3, #15
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_InitTick+0x88>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02b      	beq.n	80041b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_InitTick+0x8c>)
 800415e:	681c      	ldr	r4, [r3, #0]
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_InitTick+0x88>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	0019      	movs	r1, r3
 8004166:	23fa      	movs	r3, #250	; 0xfa
 8004168:	0098      	lsls	r0, r3, #2
 800416a:	f7fb ffe7 	bl	800013c <__udivsi3>
 800416e:	0003      	movs	r3, r0
 8004170:	0019      	movs	r1, r3
 8004172:	0020      	movs	r0, r4
 8004174:	f7fb ffe2 	bl	800013c <__udivsi3>
 8004178:	0003      	movs	r3, r0
 800417a:	0018      	movs	r0, r3
 800417c:	f000 f985 	bl	800448a <HAL_SYSTICK_Config>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d112      	bne.n	80041aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d80a      	bhi.n	80041a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	425b      	negs	r3, r3
 8004190:	2200      	movs	r2, #0
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f950 	bl	8004438 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_InitTick+0x90>)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e00d      	b.n	80041bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80041a0:	230f      	movs	r3, #15
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e008      	b.n	80041bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041aa:	230f      	movs	r3, #15
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e003      	b.n	80041bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b005      	add	sp, #20
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000018 	.word	0x20000018
 80041d0:	20000010 	.word	0x20000010
 80041d4:	20000014 	.word	0x20000014

080041d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_IncTick+0x1c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_IncTick+0x20>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	18d2      	adds	r2, r2, r3
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_IncTick+0x20>)
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	20000018 	.word	0x20000018
 80041f8:	20000b08 	.word	0x20000b08

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <HAL_GetTick+0x10>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000b08 	.word	0x20000b08

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff fff0 	bl	80041fc <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	001a      	movs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	f7ff ffe0 	bl	80041fc <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	20000018 	.word	0x20000018

08004258 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_SuspendTick+0x18>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_SuspendTick+0x18>)
 8004262:	2102      	movs	r1, #2
 8004264:	438a      	bics	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	e000e010 	.word	0xe000e010

08004274 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_ResumeTick+0x18>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_ResumeTick+0x18>)
 800427e:	2102      	movs	r1, #2
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	e000e010 	.word	0xe000e010

08004290 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800429e:	4013      	ands	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	40010000 	.word	0x40010000
 80042b8:	fffff9ff 	.word	0xfffff9ff

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	0002      	movs	r2, r0
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042c8:	1dfb      	adds	r3, r7, #7
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b7f      	cmp	r3, #127	; 0x7f
 80042ce:	d809      	bhi.n	80042e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	001a      	movs	r2, r3
 80042d6:	231f      	movs	r3, #31
 80042d8:	401a      	ands	r2, r3
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__NVIC_EnableIRQ+0x30>)
 80042dc:	2101      	movs	r1, #1
 80042de:	4091      	lsls	r1, r2
 80042e0:	000a      	movs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	e000e100 	.word	0xe000e100

080042f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	0002      	movs	r2, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	1dfb      	adds	r3, r7, #7
 80042fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b7f      	cmp	r3, #127	; 0x7f
 8004304:	d828      	bhi.n	8004358 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004306:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <__NVIC_SetPriority+0xd4>)
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b25b      	sxtb	r3, r3
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	33c0      	adds	r3, #192	; 0xc0
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	589b      	ldr	r3, [r3, r2]
 8004316:	1dfa      	adds	r2, r7, #7
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	0011      	movs	r1, r2
 800431c:	2203      	movs	r2, #3
 800431e:	400a      	ands	r2, r1
 8004320:	00d2      	lsls	r2, r2, #3
 8004322:	21ff      	movs	r1, #255	; 0xff
 8004324:	4091      	lsls	r1, r2
 8004326:	000a      	movs	r2, r1
 8004328:	43d2      	mvns	r2, r2
 800432a:	401a      	ands	r2, r3
 800432c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	22ff      	movs	r2, #255	; 0xff
 8004334:	401a      	ands	r2, r3
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	0018      	movs	r0, r3
 800433c:	2303      	movs	r3, #3
 800433e:	4003      	ands	r3, r0
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004344:	481f      	ldr	r0, [pc, #124]	; (80043c4 <__NVIC_SetPriority+0xd4>)
 8004346:	1dfb      	adds	r3, r7, #7
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b25b      	sxtb	r3, r3
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	430a      	orrs	r2, r1
 8004350:	33c0      	adds	r3, #192	; 0xc0
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004356:	e031      	b.n	80043bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <__NVIC_SetPriority+0xd8>)
 800435a:	1dfb      	adds	r3, r7, #7
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	0019      	movs	r1, r3
 8004360:	230f      	movs	r3, #15
 8004362:	400b      	ands	r3, r1
 8004364:	3b08      	subs	r3, #8
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3306      	adds	r3, #6
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	3304      	adds	r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1dfa      	adds	r2, r7, #7
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	0011      	movs	r1, r2
 8004378:	2203      	movs	r2, #3
 800437a:	400a      	ands	r2, r1
 800437c:	00d2      	lsls	r2, r2, #3
 800437e:	21ff      	movs	r1, #255	; 0xff
 8004380:	4091      	lsls	r1, r2
 8004382:	000a      	movs	r2, r1
 8004384:	43d2      	mvns	r2, r2
 8004386:	401a      	ands	r2, r3
 8004388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	22ff      	movs	r2, #255	; 0xff
 8004390:	401a      	ands	r2, r3
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	0018      	movs	r0, r3
 8004398:	2303      	movs	r3, #3
 800439a:	4003      	ands	r3, r0
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043a0:	4809      	ldr	r0, [pc, #36]	; (80043c8 <__NVIC_SetPriority+0xd8>)
 80043a2:	1dfb      	adds	r3, r7, #7
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	001c      	movs	r4, r3
 80043a8:	230f      	movs	r3, #15
 80043aa:	4023      	ands	r3, r4
 80043ac:	3b08      	subs	r3, #8
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	430a      	orrs	r2, r1
 80043b2:	3306      	adds	r3, #6
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	18c3      	adds	r3, r0, r3
 80043b8:	3304      	adds	r3, #4
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b003      	add	sp, #12
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	e000e100 	.word	0xe000e100
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043d0:	f3bf 8f4f 	dsb	sy
}
 80043d4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <__NVIC_SystemReset+0x1c>)
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <__NVIC_SystemReset+0x20>)
 80043da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80043dc:	f3bf 8f4f 	dsb	sy
}
 80043e0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	e7fd      	b.n	80043e2 <__NVIC_SystemReset+0x16>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	e000ed00 	.word	0xe000ed00
 80043ec:	05fa0004 	.word	0x05fa0004

080043f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	045b      	lsls	r3, r3, #17
 8004400:	429a      	cmp	r2, r3
 8004402:	d301      	bcc.n	8004408 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004404:	2301      	movs	r3, #1
 8004406:	e010      	b.n	800442a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <SysTick_Config+0x44>)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	3a01      	subs	r2, #1
 800440e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004410:	2301      	movs	r3, #1
 8004412:	425b      	negs	r3, r3
 8004414:	2103      	movs	r1, #3
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff ff6a 	bl	80042f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <SysTick_Config+0x44>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <SysTick_Config+0x44>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004428:	2300      	movs	r3, #0
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b002      	add	sp, #8
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	e000e010 	.word	0xe000e010

08004438 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	210f      	movs	r1, #15
 8004444:	187b      	adds	r3, r7, r1
 8004446:	1c02      	adds	r2, r0, #0
 8004448:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	187b      	adds	r3, r7, r1
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b25b      	sxtb	r3, r3
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f7ff ff4b 	bl	80042f0 <__NVIC_SetPriority>
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	0002      	movs	r2, r0
 800446a:	1dfb      	adds	r3, r7, #7
 800446c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446e:	1dfb      	adds	r3, r7, #7
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff ff21 	bl	80042bc <__NVIC_EnableIRQ>
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b002      	add	sp, #8
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004486:	f7ff ffa1 	bl	80043cc <__NVIC_SystemReset>

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff ffab 	bl	80043f0 <SysTick_Config>
 800449a:	0003      	movs	r3, r0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b2:	e14d      	b.n	8004750 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4091      	lsls	r1, r2
 80044be:	000a      	movs	r2, r1
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d100      	bne.n	80044cc <HAL_GPIO_Init+0x28>
 80044ca:	e13e      	b.n	800474a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d005      	beq.n	80044e4 <HAL_GPIO_Init+0x40>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	4013      	ands	r3, r2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d130      	bne.n	8004546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2203      	movs	r2, #3
 80044f0:	409a      	lsls	r2, r3
 80044f2:	0013      	movs	r3, r2
 80044f4:	43da      	mvns	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4013      	ands	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	0013      	movs	r3, r2
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800451a:	2201      	movs	r2, #1
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	409a      	lsls	r2, r3
 8004520:	0013      	movs	r3, r2
 8004522:	43da      	mvns	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	2201      	movs	r2, #1
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2203      	movs	r2, #3
 800454c:	4013      	ands	r3, r2
 800454e:	2b03      	cmp	r3, #3
 8004550:	d017      	beq.n	8004582 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	409a      	lsls	r2, r3
 8004560:	0013      	movs	r3, r2
 8004562:	43da      	mvns	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	409a      	lsls	r2, r3
 8004574:	0013      	movs	r3, r2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2203      	movs	r2, #3
 8004588:	4013      	ands	r3, r2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d123      	bne.n	80045d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	58d3      	ldr	r3, [r2, r3]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2207      	movs	r2, #7
 80045a0:	4013      	ands	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	220f      	movs	r2, #15
 80045a6:	409a      	lsls	r2, r3
 80045a8:	0013      	movs	r3, r2
 80045aa:	43da      	mvns	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2107      	movs	r1, #7
 80045ba:	400b      	ands	r3, r1
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	409a      	lsls	r2, r3
 80045c0:	0013      	movs	r3, r2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	08da      	lsrs	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3208      	adds	r2, #8
 80045d0:	0092      	lsls	r2, r2, #2
 80045d2:	6939      	ldr	r1, [r7, #16]
 80045d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	409a      	lsls	r2, r3
 80045e4:	0013      	movs	r3, r2
 80045e6:	43da      	mvns	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2203      	movs	r2, #3
 80045f4:	401a      	ands	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	409a      	lsls	r2, r3
 80045fc:	0013      	movs	r3, r2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	23c0      	movs	r3, #192	; 0xc0
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	4013      	ands	r3, r2
 8004614:	d100      	bne.n	8004618 <HAL_GPIO_Init+0x174>
 8004616:	e098      	b.n	800474a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004618:	4a53      	ldr	r2, [pc, #332]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	3318      	adds	r3, #24
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	589b      	ldr	r3, [r3, r2]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2203      	movs	r2, #3
 800462a:	4013      	ands	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	220f      	movs	r2, #15
 8004630:	409a      	lsls	r2, r3
 8004632:	0013      	movs	r3, r2
 8004634:	43da      	mvns	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	23a0      	movs	r3, #160	; 0xa0
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	429a      	cmp	r2, r3
 8004644:	d019      	beq.n	800467a <HAL_GPIO_Init+0x1d6>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a48      	ldr	r2, [pc, #288]	; (800476c <HAL_GPIO_Init+0x2c8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_GPIO_Init+0x1d2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a47      	ldr	r2, [pc, #284]	; (8004770 <HAL_GPIO_Init+0x2cc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_GPIO_Init+0x1ce>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a46      	ldr	r2, [pc, #280]	; (8004774 <HAL_GPIO_Init+0x2d0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_GPIO_Init+0x1ca>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a45      	ldr	r2, [pc, #276]	; (8004778 <HAL_GPIO_Init+0x2d4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_GPIO_Init+0x1c6>
 8004666:	2304      	movs	r3, #4
 8004668:	e008      	b.n	800467c <HAL_GPIO_Init+0x1d8>
 800466a:	2305      	movs	r3, #5
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x1d8>
 800466e:	2303      	movs	r3, #3
 8004670:	e004      	b.n	800467c <HAL_GPIO_Init+0x1d8>
 8004672:	2302      	movs	r3, #2
 8004674:	e002      	b.n	800467c <HAL_GPIO_Init+0x1d8>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x1d8>
 800467a:	2300      	movs	r3, #0
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	2103      	movs	r1, #3
 8004680:	400a      	ands	r2, r1
 8004682:	00d2      	lsls	r2, r2, #3
 8004684:	4093      	lsls	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800468c:	4936      	ldr	r1, [pc, #216]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3318      	adds	r3, #24
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800469a:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	43da      	mvns	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	035b      	lsls	r3, r3, #13
 80046b2:	4013      	ands	r3, r2
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046be:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43da      	mvns	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	039b      	lsls	r3, r3, #14
 80046dc:	4013      	ands	r3, r2
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 80046f0:	2384      	movs	r3, #132	; 0x84
 80046f2:	58d3      	ldr	r3, [r2, r3]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	4013      	ands	r3, r2
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004714:	4914      	ldr	r1, [pc, #80]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 8004716:	2284      	movs	r2, #132	; 0x84
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800471c:	4a12      	ldr	r2, [pc, #72]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	58d3      	ldr	r3, [r2, r3]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43da      	mvns	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	025b      	lsls	r3, r3, #9
 8004736:	4013      	ands	r3, r2
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004742:	4909      	ldr	r1, [pc, #36]	; (8004768 <HAL_GPIO_Init+0x2c4>)
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	3301      	adds	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	40da      	lsrs	r2, r3
 8004758:	1e13      	subs	r3, r2, #0
 800475a:	d000      	beq.n	800475e <HAL_GPIO_Init+0x2ba>
 800475c:	e6aa      	b.n	80044b4 <HAL_GPIO_Init+0x10>
  }
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b006      	add	sp, #24
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021800 	.word	0x40021800
 800476c:	50000400 	.word	0x50000400
 8004770:	50000800 	.word	0x50000800
 8004774:	50000c00 	.word	0x50000c00
 8004778:	50001000 	.word	0x50001000

0800477c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800478a:	e0ba      	b.n	8004902 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800478c:	2201      	movs	r2, #1
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	409a      	lsls	r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <HAL_GPIO_DeInit+0x24>
 800479e:	e0ad      	b.n	80048fc <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80047a0:	4a5d      	ldr	r2, [pc, #372]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3318      	adds	r3, #24
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	589b      	ldr	r3, [r3, r2]
 80047ac:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2203      	movs	r2, #3
 80047b2:	4013      	ands	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	220f      	movs	r2, #15
 80047b8:	409a      	lsls	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	23a0      	movs	r3, #160	; 0xa0
 80047c4:	05db      	lsls	r3, r3, #23
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d019      	beq.n	80047fe <HAL_GPIO_DeInit+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a53      	ldr	r2, [pc, #332]	; (800491c <HAL_GPIO_DeInit+0x1a0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_GPIO_DeInit+0x7e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a52      	ldr	r2, [pc, #328]	; (8004920 <HAL_GPIO_DeInit+0x1a4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00d      	beq.n	80047f6 <HAL_GPIO_DeInit+0x7a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a51      	ldr	r2, [pc, #324]	; (8004924 <HAL_GPIO_DeInit+0x1a8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_GPIO_DeInit+0x76>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a50      	ldr	r2, [pc, #320]	; (8004928 <HAL_GPIO_DeInit+0x1ac>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_GPIO_DeInit+0x72>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e008      	b.n	8004800 <HAL_GPIO_DeInit+0x84>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e006      	b.n	8004800 <HAL_GPIO_DeInit+0x84>
 80047f2:	2303      	movs	r3, #3
 80047f4:	e004      	b.n	8004800 <HAL_GPIO_DeInit+0x84>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_DeInit+0x84>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_GPIO_DeInit+0x84>
 80047fe:	2300      	movs	r3, #0
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	2103      	movs	r1, #3
 8004804:	400a      	ands	r2, r1
 8004806:	00d2      	lsls	r2, r2, #3
 8004808:	4093      	lsls	r3, r2
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	429a      	cmp	r2, r3
 800480e:	d136      	bne.n	800487e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004810:	4a41      	ldr	r2, [pc, #260]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	58d3      	ldr	r3, [r2, r3]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	43d2      	mvns	r2, r2
 800481a:	493f      	ldr	r1, [pc, #252]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 800481c:	4013      	ands	r3, r2
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004824:	2384      	movs	r3, #132	; 0x84
 8004826:	58d3      	ldr	r3, [r2, r3]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	43d2      	mvns	r2, r2
 800482c:	493a      	ldr	r1, [pc, #232]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 800482e:	4013      	ands	r3, r2
 8004830:	2284      	movs	r2, #132	; 0x84
 8004832:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004834:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	43d9      	mvns	r1, r3
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 800483e:	400a      	ands	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	43d9      	mvns	r1, r3
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 800484c:	400a      	ands	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2203      	movs	r2, #3
 8004854:	4013      	ands	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	220f      	movs	r2, #15
 800485a:	409a      	lsls	r2, r3
 800485c:	0013      	movs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004860:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	089b      	lsrs	r3, r3, #2
 8004866:	3318      	adds	r3, #24
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	589a      	ldr	r2, [r3, r2]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	43d9      	mvns	r1, r3
 8004870:	4829      	ldr	r0, [pc, #164]	; (8004918 <HAL_GPIO_DeInit+0x19c>)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	400a      	ands	r2, r1
 8004878:	3318      	adds	r3, #24
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2103      	movs	r1, #3
 8004888:	4099      	lsls	r1, r3
 800488a:	000b      	movs	r3, r1
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	58d3      	ldr	r3, [r2, r3]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	2107      	movs	r1, #7
 80048a2:	400a      	ands	r2, r1
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	210f      	movs	r1, #15
 80048a8:	4091      	lsls	r1, r2
 80048aa:	000a      	movs	r2, r1
 80048ac:	43d1      	mvns	r1, r2
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	08d2      	lsrs	r2, r2, #3
 80048b2:	4019      	ands	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	0052      	lsls	r2, r2, #1
 80048c4:	2103      	movs	r1, #3
 80048c6:	4091      	lsls	r1, r2
 80048c8:	000a      	movs	r2, r1
 80048ca:	43d2      	mvns	r2, r2
 80048cc:	401a      	ands	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2101      	movs	r1, #1
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4091      	lsls	r1, r2
 80048dc:	000a      	movs	r2, r1
 80048de:	43d2      	mvns	r2, r2
 80048e0:	401a      	ands	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	0052      	lsls	r2, r2, #1
 80048ee:	2103      	movs	r1, #3
 80048f0:	4091      	lsls	r1, r2
 80048f2:	000a      	movs	r2, r1
 80048f4:	43d2      	mvns	r2, r2
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3301      	adds	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	40da      	lsrs	r2, r3
 8004908:	1e13      	subs	r3, r2, #0
 800490a:	d000      	beq.n	800490e <HAL_GPIO_DeInit+0x192>
 800490c:	e73e      	b.n	800478c <HAL_GPIO_DeInit+0x10>
  }
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b006      	add	sp, #24
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021800 	.word	0x40021800
 800491c:	50000400 	.word	0x50000400
 8004920:	50000800 	.word	0x50000800
 8004924:	50000c00 	.word	0x50000c00
 8004928:	50001000 	.word	0x50001000

0800492c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	000a      	movs	r2, r1
 8004936:	1cbb      	adds	r3, r7, #2
 8004938:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	1cba      	adds	r2, r7, #2
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	4013      	ands	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004946:	230f      	movs	r3, #15
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e003      	b.n	8004958 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004950:	230f      	movs	r3, #15
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004958:	230f      	movs	r3, #15
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b004      	add	sp, #16
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	0008      	movs	r0, r1
 8004970:	0011      	movs	r1, r2
 8004972:	1cbb      	adds	r3, r7, #2
 8004974:	1c02      	adds	r2, r0, #0
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	1c7b      	adds	r3, r7, #1
 800497a:	1c0a      	adds	r2, r1, #0
 800497c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800497e:	1c7b      	adds	r3, r7, #1
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004986:	1cbb      	adds	r3, r7, #2
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800498e:	e003      	b.n	8004998 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004990:	1cbb      	adds	r3, r7, #2
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	0002      	movs	r2, r0
 80049a8:	1dbb      	adds	r3, r7, #6
 80049aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	1dba      	adds	r2, r7, #6
 80049b2:	8812      	ldrh	r2, [r2, #0]
 80049b4:	4013      	ands	r3, r2
 80049b6:	d008      	beq.n	80049ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049ba:	1dba      	adds	r2, r7, #6
 80049bc:	8812      	ldrh	r2, [r2, #0]
 80049be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80049c0:	1dbb      	adds	r3, r7, #6
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fe fff7 	bl	80039b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	1dba      	adds	r2, r7, #6
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	4013      	ands	r3, r2
 80049d4:	d008      	beq.n	80049e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049d8:	1dba      	adds	r2, r7, #6
 80049da:	8812      	ldrh	r2, [r2, #0]
 80049dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80049de:	1dbb      	adds	r3, r7, #6
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 f806 	bl	80049f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b002      	add	sp, #8
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021800 	.word	0x40021800

080049f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	0002      	movs	r2, r0
 80049fc:	1dbb      	adds	r3, r7, #6
 80049fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	0049      	lsls	r1, r1, #1
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40007000 	.word	0x40007000

08004a24 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	000a      	movs	r2, r1
 8004a2e:	1cfb      	adds	r3, r7, #3
 8004a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004a38:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <HAL_PWR_EnterSTOPMode+0x68>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	4393      	bics	r3, r2
 8004a40:	001a      	movs	r2, r3
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_PWR_EnterSTOPMode+0x68>)
 8004a44:	2101      	movs	r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e005      	b.n	8004a58 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_PWR_EnterSTOPMode+0x68>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <HAL_PWR_EnterSTOPMode+0x68>)
 8004a52:	2107      	movs	r1, #7
 8004a54:	438a      	bics	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a5e:	2104      	movs	r1, #4
 8004a60:	430a      	orrs	r2, r1
 8004a62:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004a64:	1cfb      	adds	r3, r7, #3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a6c:	bf30      	wfi
 8004a6e:	e002      	b.n	8004a76 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a70:	bf40      	sev
    __WFE();
 8004a72:	bf20      	wfe
    __WFE();
 8004a74:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	438a      	bics	r2, r1
 8004a80:	611a      	str	r2, [r3, #16]
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b002      	add	sp, #8
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2207      	movs	r2, #7
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004ab6:	bf30      	wfi
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11f      	bne.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	0013      	movs	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4912      	ldr	r1, [pc, #72]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fb fb1e 	bl	800013c <__udivsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b06:	e008      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e001      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e009      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	401a      	ands	r2, r3
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d0ed      	beq.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	0018      	movs	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b004      	add	sp, #16
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	fffff9ff 	.word	0xfffff9ff
 8004b40:	20000010 	.word	0x20000010
 8004b44:	000f4240 	.word	0x000f4240

08004b48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	23e0      	movs	r3, #224	; 0xe0
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	4013      	ands	r3, r2
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f000 fb50 	bl	8005214 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d100      	bne.n	8004b80 <HAL_RCC_OscConfig+0x20>
 8004b7e:	e07c      	b.n	8004c7a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b80:	4bc3      	ldr	r3, [pc, #780]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2238      	movs	r2, #56	; 0x38
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b8a:	4bc1      	ldr	r3, [pc, #772]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d102      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x40>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d002      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d10b      	bne.n	8004bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba6:	4bba      	ldr	r3, [pc, #744]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d062      	beq.n	8004c78 <HAL_RCC_OscConfig+0x118>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d15e      	bne.n	8004c78 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e32a      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_OscConfig+0x7a>
 8004bca:	4bb1      	ldr	r3, [pc, #708]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4bb0      	ldr	r3, [pc, #704]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0249      	lsls	r1, r1, #9
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e020      	b.n	8004c1c <HAL_RCC_OscConfig+0xbc>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	23a0      	movs	r3, #160	; 0xa0
 8004be0:	02db      	lsls	r3, r3, #11
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d10e      	bne.n	8004c04 <HAL_RCC_OscConfig+0xa4>
 8004be6:	4baa      	ldr	r3, [pc, #680]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4ba9      	ldr	r3, [pc, #676]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	02c9      	lsls	r1, r1, #11
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	4ba6      	ldr	r3, [pc, #664]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4ba5      	ldr	r3, [pc, #660]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0249      	lsls	r1, r1, #9
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xbc>
 8004c04:	4ba2      	ldr	r3, [pc, #648]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4ba1      	ldr	r3, [pc, #644]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c0a:	49a2      	ldr	r1, [pc, #648]	; (8004e94 <HAL_RCC_OscConfig+0x334>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	4b9f      	ldr	r3, [pc, #636]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b9e      	ldr	r3, [pc, #632]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c16:	49a0      	ldr	r1, [pc, #640]	; (8004e98 <HAL_RCC_OscConfig+0x338>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d014      	beq.n	8004c4e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7ff faea 	bl	80041fc <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2e:	f7ff fae5 	bl	80041fc <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b64      	cmp	r3, #100	; 0x64
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e2e9      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c40:	4b93      	ldr	r3, [pc, #588]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0xce>
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7ff fad5 	bl	80041fc <HAL_GetTick>
 8004c52:	0003      	movs	r3, r0
 8004c54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7ff fad0 	bl	80041fc <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e2d4      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c6a:	4b89      	ldr	r3, [pc, #548]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	029b      	lsls	r3, r3, #10
 8004c72:	4013      	ands	r3, r2
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0xf8>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d100      	bne.n	8004c86 <HAL_RCC_OscConfig+0x126>
 8004c84:	e099      	b.n	8004dba <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	4b82      	ldr	r3, [pc, #520]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2238      	movs	r2, #56	; 0x38
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c90:	4b7f      	ldr	r3, [pc, #508]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2203      	movs	r2, #3
 8004c96:	4013      	ands	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x146>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d002      	beq.n	8004cac <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d135      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cac:	4b78      	ldr	r3, [pc, #480]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x164>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e2a7      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b72      	ldr	r3, [pc, #456]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a74      	ldr	r2, [pc, #464]	; (8004e9c <HAL_RCC_OscConfig+0x33c>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	4b6e      	ldr	r3, [pc, #440]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d112      	bne.n	8004d06 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ce0:	4b6b      	ldr	r3, [pc, #428]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6e      	ldr	r2, [pc, #440]	; (8004ea0 <HAL_RCC_OscConfig+0x340>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	4b68      	ldr	r3, [pc, #416]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004cf4:	4b66      	ldr	r3, [pc, #408]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0adb      	lsrs	r3, r3, #11
 8004cfa:	2207      	movs	r2, #7
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	4a69      	ldr	r2, [pc, #420]	; (8004ea4 <HAL_RCC_OscConfig+0x344>)
 8004d00:	40da      	lsrs	r2, r3
 8004d02:	4b69      	ldr	r3, [pc, #420]	; (8004ea8 <HAL_RCC_OscConfig+0x348>)
 8004d04:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d06:	4b69      	ldr	r3, [pc, #420]	; (8004eac <HAL_RCC_OscConfig+0x34c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff fa1a 	bl	8004144 <HAL_InitTick>
 8004d10:	1e03      	subs	r3, r0, #0
 8004d12:	d051      	beq.n	8004db8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e27d      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d030      	beq.n	8004d82 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d20:	4b5b      	ldr	r3, [pc, #364]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5e      	ldr	r2, [pc, #376]	; (8004ea0 <HAL_RCC_OscConfig+0x340>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	4b58      	ldr	r3, [pc, #352]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004d34:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b55      	ldr	r3, [pc, #340]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d3a:	2180      	movs	r1, #128	; 0x80
 8004d3c:	0049      	lsls	r1, r1, #1
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7ff fa5b 	bl	80041fc <HAL_GetTick>
 8004d46:	0003      	movs	r3, r0
 8004d48:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7ff fa56 	bl	80041fc <HAL_GetTick>
 8004d50:	0002      	movs	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e25a      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5e:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4013      	ands	r3, r2
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4a4b      	ldr	r2, [pc, #300]	; (8004e9c <HAL_RCC_OscConfig+0x33c>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	e01b      	b.n	8004dba <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d82:	4b43      	ldr	r3, [pc, #268]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b42      	ldr	r3, [pc, #264]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004d88:	4949      	ldr	r1, [pc, #292]	; (8004eb0 <HAL_RCC_OscConfig+0x350>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7ff fa35 	bl	80041fc <HAL_GetTick>
 8004d92:	0003      	movs	r3, r0
 8004d94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d98:	f7ff fa30 	bl	80041fc <HAL_GetTick>
 8004d9c:	0002      	movs	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e234      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004daa:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4013      	ands	r3, r2
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x238>
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d047      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dc4:	4b32      	ldr	r3, [pc, #200]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2238      	movs	r2, #56	; 0x38
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	d10a      	bne.n	8004de6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004dd0:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d03c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2f4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d138      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e216      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004dee:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004df2:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004df4:	2101      	movs	r1, #1
 8004df6:	430a      	orrs	r2, r1
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7ff f9ff 	bl	80041fc <HAL_GetTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7ff f9fa 	bl	80041fc <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1fe      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d0f1      	beq.n	8004e04 <HAL_RCC_OscConfig+0x2a4>
 8004e20:	e018      	b.n	8004e54 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e28:	2101      	movs	r1, #1
 8004e2a:	438a      	bics	r2, r1
 8004e2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7ff f9e5 	bl	80041fc <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e38:	f7ff f9e0 	bl	80041fc <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e1e4      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d1f1      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <HAL_RCC_OscConfig+0x300>
 8004e5e:	e0c7      	b.n	8004ff0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e60:	231f      	movs	r3, #31
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2238      	movs	r2, #56	; 0x38
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d11f      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_OscConfig+0x330>)
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d100      	bne.n	8004e80 <HAL_RCC_OscConfig+0x320>
 8004e7e:	e0b7      	b.n	8004ff0 <HAL_RCC_OscConfig+0x490>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d000      	beq.n	8004e8a <HAL_RCC_OscConfig+0x32a>
 8004e88:	e0b2      	b.n	8004ff0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1c2      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	40021000 	.word	0x40021000
 8004e94:	fffeffff 	.word	0xfffeffff
 8004e98:	fffbffff 	.word	0xfffbffff
 8004e9c:	ffff80ff 	.word	0xffff80ff
 8004ea0:	ffffc7ff 	.word	0xffffc7ff
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	20000010 	.word	0x20000010
 8004eac:	20000014 	.word	0x20000014
 8004eb0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004eb4:	4bb5      	ldr	r3, [pc, #724]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	055b      	lsls	r3, r3, #21
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x364>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x366>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004eca:	4bb0      	ldr	r3, [pc, #704]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ece:	4baf      	ldr	r3, [pc, #700]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	0549      	lsls	r1, r1, #21
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ed8:	4bac      	ldr	r3, [pc, #688]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	055b      	lsls	r3, r3, #21
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004ee6:	231f      	movs	r3, #31
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eee:	4ba8      	ldr	r3, [pc, #672]	; (8005190 <HAL_RCC_OscConfig+0x630>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	; 0x80
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d11a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004efa:	4ba5      	ldr	r3, [pc, #660]	; (8005190 <HAL_RCC_OscConfig+0x630>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4ba4      	ldr	r3, [pc, #656]	; (8005190 <HAL_RCC_OscConfig+0x630>)
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	0049      	lsls	r1, r1, #1
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004f08:	f7ff f978 	bl	80041fc <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7ff f973 	bl	80041fc <HAL_GetTick>
 8004f16:	0002      	movs	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e177      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	4b9a      	ldr	r3, [pc, #616]	; (8005190 <HAL_RCC_OscConfig+0x630>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x3e6>
 8004f38:	4b94      	ldr	r3, [pc, #592]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f3c:	4b93      	ldr	r3, [pc, #588]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f3e:	2101      	movs	r1, #1
 8004f40:	430a      	orrs	r2, r1
 8004f42:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x420>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x408>
 8004f4e:	4b8f      	ldr	r3, [pc, #572]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f52:	4b8e      	ldr	r3, [pc, #568]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	430a      	orrs	r2, r1
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f5a:	4b8c      	ldr	r3, [pc, #560]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f5e:	4b8b      	ldr	r3, [pc, #556]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f60:	2101      	movs	r1, #1
 8004f62:	430a      	orrs	r2, r1
 8004f64:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x420>
 8004f68:	4b88      	ldr	r3, [pc, #544]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f6c:	4b87      	ldr	r3, [pc, #540]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f74:	4b85      	ldr	r3, [pc, #532]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f78:	4b84      	ldr	r3, [pc, #528]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004f7a:	2104      	movs	r1, #4
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d014      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7ff f938 	bl	80041fc <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f90:	e009      	b.n	8004fa6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7ff f933 	bl	80041fc <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	4a7d      	ldr	r2, [pc, #500]	; (8005194 <HAL_RCC_OscConfig+0x634>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e136      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa6:	4b79      	ldr	r3, [pc, #484]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	2202      	movs	r2, #2
 8004fac:	4013      	ands	r3, r2
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x432>
 8004fb0:	e013      	b.n	8004fda <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7ff f923 	bl	80041fc <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7ff f91e 	bl	80041fc <HAL_GetTick>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	4a73      	ldr	r2, [pc, #460]	; (8005194 <HAL_RCC_OscConfig+0x634>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e121      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fd0:	4b6e      	ldr	r3, [pc, #440]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004fda:	231f      	movs	r3, #31
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b69      	ldr	r3, [pc, #420]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8004fea:	496b      	ldr	r1, [pc, #428]	; (8005198 <HAL_RCC_OscConfig+0x638>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d039      	beq.n	800506e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	03c9      	lsls	r1, r1, #15
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7ff f8f4 	bl	80041fc <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501a:	f7ff f8ef 	bl	80041fc <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0f3      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800502c:	4b57      	ldr	r3, [pc, #348]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	4013      	ands	r3, r2
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x4ba>
 8005038:	e019      	b.n	800506e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800503a:	4b54      	ldr	r3, [pc, #336]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005040:	4956      	ldr	r1, [pc, #344]	; (800519c <HAL_RCC_OscConfig+0x63c>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7ff f8d9 	bl	80041fc <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7ff f8d4 	bl	80041fc <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e0d8      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005062:	4b4a      	ldr	r3, [pc, #296]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	4013      	ands	r3, r2
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d100      	bne.n	8005078 <HAL_RCC_OscConfig+0x518>
 8005076:	e0cc      	b.n	8005212 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005078:	4b44      	ldr	r3, [pc, #272]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2238      	movs	r2, #56	; 0x38
 800507e:	4013      	ands	r3, r2
 8005080:	2b10      	cmp	r3, #16
 8005082:	d100      	bne.n	8005086 <HAL_RCC_OscConfig+0x526>
 8005084:	e07b      	b.n	800517e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d156      	bne.n	800513c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b3e      	ldr	r3, [pc, #248]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005094:	4942      	ldr	r1, [pc, #264]	; (80051a0 <HAL_RCC_OscConfig+0x640>)
 8005096:	400a      	ands	r2, r1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7ff f8af 	bl	80041fc <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7ff f8aa 	bl	80041fc <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0ae      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b6:	4b35      	ldr	r3, [pc, #212]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	049b      	lsls	r3, r3, #18
 80050be:	4013      	ands	r3, r2
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c2:	4b32      	ldr	r3, [pc, #200]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <HAL_RCC_OscConfig+0x644>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	431a      	orrs	r2, r3
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 80050f2:	430a      	orrs	r2, r1
 80050f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	0449      	lsls	r1, r1, #17
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	0549      	lsls	r1, r1, #21
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7ff f873 	bl	80041fc <HAL_GetTick>
 8005116:	0003      	movs	r3, r0
 8005118:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7ff f86e 	bl	80041fc <HAL_GetTick>
 8005120:	0002      	movs	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e072      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	049b      	lsls	r3, r3, #18
 8005136:	4013      	ands	r3, r2
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x5bc>
 800513a:	e06a      	b.n	8005212 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005142:	4917      	ldr	r1, [pc, #92]	; (80051a0 <HAL_RCC_OscConfig+0x640>)
 8005144:	400a      	ands	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7ff f858 	bl	80041fc <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7ff f853 	bl	80041fc <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e057      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	049b      	lsls	r3, r3, #18
 800516c:	4013      	ands	r3, r2
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_OscConfig+0x62c>)
 8005176:	490c      	ldr	r1, [pc, #48]	; (80051a8 <HAL_RCC_OscConfig+0x648>)
 8005178:	400a      	ands	r2, r1
 800517a:	60da      	str	r2, [r3, #12]
 800517c:	e049      	b.n	8005212 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d112      	bne.n	80051ac <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e044      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
 8005194:	00001388 	.word	0x00001388
 8005198:	efffffff 	.word	0xefffffff
 800519c:	ffbfffff 	.word	0xffbfffff
 80051a0:	feffffff 	.word	0xfeffffff
 80051a4:	11c1808c 	.word	0x11c1808c
 80051a8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCC_OscConfig+0x6bc>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2203      	movs	r2, #3
 80051b6:	401a      	ands	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	429a      	cmp	r2, r3
 80051be:	d126      	bne.n	800520e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2270      	movs	r2, #112	; 0x70
 80051c4:	401a      	ands	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d11f      	bne.n	800520e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	23fe      	movs	r3, #254	; 0xfe
 80051d2:	01db      	lsls	r3, r3, #7
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d116      	bne.n	800520e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	23f8      	movs	r3, #248	; 0xf8
 80051e4:	039b      	lsls	r3, r3, #14
 80051e6:	401a      	ands	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d10e      	bne.n	800520e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	23e0      	movs	r3, #224	; 0xe0
 80051f4:	051b      	lsls	r3, r3, #20
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	0f5b      	lsrs	r3, r3, #29
 8005204:	075a      	lsls	r2, r3, #29
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b008      	add	sp, #32
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0e9      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005234:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2207      	movs	r2, #7
 800523a:	4013      	ands	r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d91e      	bls.n	8005280 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b73      	ldr	r3, [pc, #460]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2207      	movs	r2, #7
 8005248:	4393      	bics	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	4b70      	ldr	r3, [pc, #448]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005254:	f7fe ffd2 	bl	80041fc <HAL_GetTick>
 8005258:	0003      	movs	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800525c:	e009      	b.n	8005272 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525e:	f7fe ffcd 	bl	80041fc <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	4a6a      	ldr	r2, [pc, #424]	; (8005414 <HAL_RCC_ClockConfig+0x1f4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0ca      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005272:	4b67      	ldr	r3, [pc, #412]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2207      	movs	r2, #7
 8005278:	4013      	ands	r3, r2
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2202      	movs	r2, #2
 8005286:	4013      	ands	r3, r2
 8005288:	d015      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2204      	movs	r2, #4
 8005290:	4013      	ands	r3, r2
 8005292:	d006      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005294:	4b60      	ldr	r3, [pc, #384]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	4b5f      	ldr	r3, [pc, #380]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 800529a:	21e0      	movs	r1, #224	; 0xe0
 800529c:	01c9      	lsls	r1, r1, #7
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4a5d      	ldr	r2, [pc, #372]	; (800541c <HAL_RCC_ClockConfig+0x1fc>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	4013      	ands	r3, r2
 80052be:	d057      	beq.n	8005370 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	4013      	ands	r3, r2
 80052d2:	d12b      	bne.n	800532c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e097      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e0:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	049b      	lsls	r3, r3, #18
 80052e8:	4013      	ands	r3, r2
 80052ea:	d11f      	bne.n	800532c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e08b      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f8:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4013      	ands	r3, r2
 8005302:	d113      	bne.n	800532c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e07f      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d106      	bne.n	800531e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005310:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	2202      	movs	r2, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e074      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	2202      	movs	r2, #2
 8005324:	4013      	ands	r3, r2
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e06d      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800532c:	4b3a      	ldr	r3, [pc, #232]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2207      	movs	r2, #7
 8005332:	4393      	bics	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4b37      	ldr	r3, [pc, #220]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005340:	f7fe ff5c 	bl	80041fc <HAL_GetTick>
 8005344:	0003      	movs	r3, r0
 8005346:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005348:	e009      	b.n	800535e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534a:	f7fe ff57 	bl	80041fc <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <HAL_RCC_ClockConfig+0x1f4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e054      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2238      	movs	r2, #56	; 0x38
 8005364:	401a      	ands	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	429a      	cmp	r2, r3
 800536e:	d1ec      	bne.n	800534a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2207      	movs	r2, #7
 8005376:	4013      	ands	r3, r2
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d21e      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2207      	movs	r2, #7
 8005384:	4393      	bics	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	4b21      	ldr	r3, [pc, #132]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005390:	f7fe ff34 	bl	80041fc <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005398:	e009      	b.n	80053ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539a:	f7fe ff2f 	bl	80041fc <HAL_GetTick>
 800539e:	0002      	movs	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_RCC_ClockConfig+0x1f4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e02c      	b.n	8005408 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053ae:	4b18      	ldr	r3, [pc, #96]	; (8005410 <HAL_RCC_ClockConfig+0x1f0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2207      	movs	r2, #7
 80053b4:	4013      	ands	r3, r2
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1ee      	bne.n	800539a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2204      	movs	r2, #4
 80053c2:	4013      	ands	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <HAL_RCC_ClockConfig+0x200>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80053da:	f000 f829 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80053de:	0001      	movs	r1, r0
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <HAL_RCC_ClockConfig+0x1f8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	220f      	movs	r2, #15
 80053e8:	401a      	ands	r2, r3
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <HAL_RCC_ClockConfig+0x204>)
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	221f      	movs	r2, #31
 80053f2:	4013      	ands	r3, r2
 80053f4:	000a      	movs	r2, r1
 80053f6:	40da      	lsrs	r2, r3
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_ClockConfig+0x208>)
 80053fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCC_ClockConfig+0x20c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	0018      	movs	r0, r3
 8005402:	f7fe fe9f 	bl	8004144 <HAL_InitTick>
 8005406:	0003      	movs	r3, r0
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b004      	add	sp, #16
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40022000 	.word	0x40022000
 8005414:	00001388 	.word	0x00001388
 8005418:	40021000 	.word	0x40021000
 800541c:	fffff0ff 	.word	0xfffff0ff
 8005420:	ffff8fff 	.word	0xffff8fff
 8005424:	08014800 	.word	0x08014800
 8005428:	20000010 	.word	0x20000010
 800542c:	20000014 	.word	0x20000014

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005436:	4b3c      	ldr	r3, [pc, #240]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2238      	movs	r2, #56	; 0x38
 800543c:	4013      	ands	r3, r2
 800543e:	d10f      	bne.n	8005460 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0adb      	lsrs	r3, r3, #11
 8005446:	2207      	movs	r2, #7
 8005448:	4013      	ands	r3, r2
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	0013      	movs	r3, r2
 8005450:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	4835      	ldr	r0, [pc, #212]	; (800552c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005456:	f7fa fe71 	bl	800013c <__udivsi3>
 800545a:	0003      	movs	r3, r0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e05d      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005460:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2238      	movs	r2, #56	; 0x38
 8005466:	4013      	ands	r3, r2
 8005468:	2b08      	cmp	r3, #8
 800546a:	d102      	bne.n	8005472 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800546c:	4b30      	ldr	r3, [pc, #192]	; (8005530 <HAL_RCC_GetSysClockFreq+0x100>)
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e054      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005472:	4b2d      	ldr	r3, [pc, #180]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2238      	movs	r2, #56	; 0x38
 8005478:	4013      	ands	r3, r2
 800547a:	2b10      	cmp	r3, #16
 800547c:	d138      	bne.n	80054f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2203      	movs	r2, #3
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	2207      	movs	r2, #7
 8005490:	4013      	ands	r3, r2
 8005492:	3301      	adds	r3, #1
 8005494:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d10d      	bne.n	80054b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4824      	ldr	r0, [pc, #144]	; (8005530 <HAL_RCC_GetSysClockFreq+0x100>)
 80054a0:	f7fa fe4c 	bl	800013c <__udivsi3>
 80054a4:	0003      	movs	r3, r0
 80054a6:	0019      	movs	r1, r3
 80054a8:	4b1f      	ldr	r3, [pc, #124]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	227f      	movs	r2, #127	; 0x7f
 80054b0:	4013      	ands	r3, r2
 80054b2:	434b      	muls	r3, r1
 80054b4:	617b      	str	r3, [r7, #20]
        break;
 80054b6:	e00d      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	481c      	ldr	r0, [pc, #112]	; (800552c <HAL_RCC_GetSysClockFreq+0xfc>)
 80054bc:	f7fa fe3e 	bl	800013c <__udivsi3>
 80054c0:	0003      	movs	r3, r0
 80054c2:	0019      	movs	r1, r3
 80054c4:	4b18      	ldr	r3, [pc, #96]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	227f      	movs	r2, #127	; 0x7f
 80054cc:	4013      	ands	r3, r2
 80054ce:	434b      	muls	r3, r1
 80054d0:	617b      	str	r3, [r7, #20]
        break;
 80054d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	0f5b      	lsrs	r3, r3, #29
 80054da:	2207      	movs	r2, #7
 80054dc:	4013      	ands	r3, r2
 80054de:	3301      	adds	r3, #1
 80054e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	6978      	ldr	r0, [r7, #20]
 80054e6:	f7fa fe29 	bl	800013c <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e015      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2238      	movs	r2, #56	; 0x38
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d103      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e00b      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2238      	movs	r2, #56	; 0x38
 800550a:	4013      	ands	r3, r2
 800550c:	2b18      	cmp	r3, #24
 800550e:	d103      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005510:	23fa      	movs	r3, #250	; 0xfa
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e001      	b.n	800551c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800551c:	693b      	ldr	r3, [r7, #16]
}
 800551e:	0018      	movs	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	b006      	add	sp, #24
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	40021000 	.word	0x40021000
 800552c:	00f42400 	.word	0x00f42400
 8005530:	007a1200 	.word	0x007a1200

08005534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <HAL_RCC_GetHCLKFreq+0x10>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	20000010 	.word	0x20000010

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b5b0      	push	{r4, r5, r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800554c:	f7ff fff2 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005550:	0004      	movs	r4, r0
 8005552:	f7ff faf9 	bl	8004b48 <LL_RCC_GetAPB1Prescaler>
 8005556:	0003      	movs	r3, r0
 8005558:	0b1a      	lsrs	r2, r3, #12
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800555c:	0092      	lsls	r2, r2, #2
 800555e:	58d3      	ldr	r3, [r2, r3]
 8005560:	221f      	movs	r2, #31
 8005562:	4013      	ands	r3, r2
 8005564:	40dc      	lsrs	r4, r3
 8005566:	0023      	movs	r3, r4
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	bdb0      	pop	{r4, r5, r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	08014840 	.word	0x08014840

08005574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800557c:	2313      	movs	r3, #19
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005584:	2312      	movs	r3, #18
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	029b      	lsls	r3, r3, #10
 8005594:	4013      	ands	r3, r2
 8005596:	d100      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005598:	e0ad      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2011      	movs	r0, #17
 800559c:	183b      	adds	r3, r7, r0
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a2:	4b47      	ldr	r3, [pc, #284]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	055b      	lsls	r3, r3, #21
 80055aa:	4013      	ands	r3, r2
 80055ac:	d110      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b2:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	0549      	lsls	r1, r1, #21
 80055b8:	430a      	orrs	r2, r1
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80055bc:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	055b      	lsls	r3, r3, #21
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ca:	183b      	adds	r3, r7, r0
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d0:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80055d6:	2180      	movs	r1, #128	; 0x80
 80055d8:	0049      	lsls	r1, r1, #1
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055de:	f7fe fe0d 	bl	80041fc <HAL_GetTick>
 80055e2:	0003      	movs	r3, r0
 80055e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e6:	e00b      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e8:	f7fe fe08 	bl	80041fc <HAL_GetTick>
 80055ec:	0002      	movs	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d904      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80055f6:	2313      	movs	r3, #19
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	2203      	movs	r2, #3
 80055fc:	701a      	strb	r2, [r3, #0]
        break;
 80055fe:	e005      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4013      	ands	r3, r2
 800560a:	d0ed      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800560c:	2313      	movs	r3, #19
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d15e      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005616:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005618:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800561a:	23c0      	movs	r3, #192	; 0xc0
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4013      	ands	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	429a      	cmp	r2, r3
 8005630:	d014      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005632:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005638:	4013      	ands	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800563c:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800563e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005640:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	0249      	lsls	r1, r1, #9
 8005646:	430a      	orrs	r2, r1
 8005648:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800564a:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800564c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800564e:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005650:	491e      	ldr	r1, [pc, #120]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005652:	400a      	ands	r2, r1
 8005654:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005656:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2201      	movs	r2, #1
 8005660:	4013      	ands	r3, r2
 8005662:	d016      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fe fdca 	bl	80041fc <HAL_GetTick>
 8005668:	0003      	movs	r3, r0
 800566a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566c:	e00c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fe fdc5 	bl	80041fc <HAL_GetTick>
 8005672:	0002      	movs	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d904      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800567e:	2313      	movs	r3, #19
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	2203      	movs	r2, #3
 8005684:	701a      	strb	r2, [r3, #0]
            break;
 8005686:	e004      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	2202      	movs	r2, #2
 800568e:	4013      	ands	r3, r2
 8005690:	d0ed      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005692:	2313      	movs	r3, #19
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569c:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056ac:	430a      	orrs	r2, r1
 80056ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80056b0:	e016      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b2:	2312      	movs	r3, #18
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	2213      	movs	r2, #19
 80056b8:	18ba      	adds	r2, r7, r2
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e00f      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40007000 	.word	0x40007000
 80056c8:	fffffcff 	.word	0xfffffcff
 80056cc:	fffeffff 	.word	0xfffeffff
 80056d0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	2312      	movs	r3, #18
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2213      	movs	r2, #19
 80056da:	18ba      	adds	r2, r7, r2
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056e0:	2311      	movs	r3, #17
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4bb6      	ldr	r3, [pc, #728]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ee:	4bb5      	ldr	r3, [pc, #724]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056f0:	49b5      	ldr	r1, [pc, #724]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005700:	4bb0      	ldr	r3, [pc, #704]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	2203      	movs	r2, #3
 8005706:	4393      	bics	r3, r2
 8005708:	0019      	movs	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	4bad      	ldr	r3, [pc, #692]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005710:	430a      	orrs	r2, r1
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2202      	movs	r2, #2
 800571a:	4013      	ands	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800571e:	4ba9      	ldr	r3, [pc, #676]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	220c      	movs	r2, #12
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	4ba5      	ldr	r3, [pc, #660]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800572e:	430a      	orrs	r2, r1
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2204      	movs	r2, #4
 8005738:	4013      	ands	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800573c:	4ba1      	ldr	r3, [pc, #644]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	2230      	movs	r2, #48	; 0x30
 8005742:	4393      	bics	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	4b9e      	ldr	r3, [pc, #632]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800574c:	430a      	orrs	r2, r1
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2210      	movs	r2, #16
 8005756:	4013      	ands	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800575a:	4b9a      	ldr	r3, [pc, #616]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	4a9b      	ldr	r2, [pc, #620]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	4b96      	ldr	r3, [pc, #600]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800576a:	430a      	orrs	r2, r1
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	015b      	lsls	r3, r3, #5
 8005776:	4013      	ands	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800577a:	4b92      	ldr	r3, [pc, #584]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	4a94      	ldr	r2, [pc, #592]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005780:	4013      	ands	r3, r2
 8005782:	0019      	movs	r1, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	4b8e      	ldr	r3, [pc, #568]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800578a:	430a      	orrs	r2, r1
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4013      	ands	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579a:	4b8a      	ldr	r3, [pc, #552]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	4a8d      	ldr	r2, [pc, #564]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057a8:	4b86      	ldr	r3, [pc, #536]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057aa:	430a      	orrs	r2, r1
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4013      	ands	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057ba:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	4a86      	ldr	r2, [pc, #536]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	0019      	movs	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057ca:	430a      	orrs	r2, r1
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2220      	movs	r2, #32
 80057d4:	4013      	ands	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d8:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	4a7f      	ldr	r2, [pc, #508]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057de:	4013      	ands	r3, r2
 80057e0:	0019      	movs	r1, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	4b77      	ldr	r3, [pc, #476]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2240      	movs	r2, #64	; 0x40
 80057f2:	4013      	ands	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057f6:	4b73      	ldr	r3, [pc, #460]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	4a79      	ldr	r2, [pc, #484]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	0019      	movs	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	4b6f      	ldr	r3, [pc, #444]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005806:	430a      	orrs	r2, r1
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	01db      	lsls	r3, r3, #7
 8005812:	4013      	ands	r3, r2
 8005814:	d015      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005816:	4b6b      	ldr	r3, [pc, #428]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	0899      	lsrs	r1, r3, #2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005822:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005824:	430a      	orrs	r2, r1
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582c:	2380      	movs	r3, #128	; 0x80
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	429a      	cmp	r2, r3
 8005832:	d106      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005834:	4b63      	ldr	r3, [pc, #396]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	4b62      	ldr	r3, [pc, #392]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	0249      	lsls	r1, r1, #9
 800583e:	430a      	orrs	r2, r1
 8005840:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	4013      	ands	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800584e:	4b5d      	ldr	r3, [pc, #372]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	2240      	movs	r2, #64	; 0x40
 8005854:	4393      	bics	r3, r2
 8005856:	0019      	movs	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585c:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800585e:	430a      	orrs	r2, r1
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	039b      	lsls	r3, r3, #14
 800586a:	4013      	ands	r3, r2
 800586c:	d016      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800586e:	4b55      	ldr	r3, [pc, #340]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	4a5c      	ldr	r2, [pc, #368]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005874:	4013      	ands	r3, r2
 8005876:	0019      	movs	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587c:	4b51      	ldr	r3, [pc, #324]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800587e:	430a      	orrs	r2, r1
 8005880:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	03db      	lsls	r3, r3, #15
 800588a:	429a      	cmp	r2, r3
 800588c:	d106      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800588e:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	4b4c      	ldr	r3, [pc, #304]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	0449      	lsls	r1, r1, #17
 8005898:	430a      	orrs	r2, r1
 800589a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	03db      	lsls	r3, r3, #15
 80058a4:	4013      	ands	r3, r2
 80058a6:	d016      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80058a8:	4b46      	ldr	r3, [pc, #280]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	4a4e      	ldr	r2, [pc, #312]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b6:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058b8:	430a      	orrs	r2, r1
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	045b      	lsls	r3, r3, #17
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d106      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80058c8:	4b3e      	ldr	r3, [pc, #248]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	4b3d      	ldr	r3, [pc, #244]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	0449      	lsls	r1, r1, #17
 80058d2:	430a      	orrs	r2, r1
 80058d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4013      	ands	r3, r2
 80058e0:	d014      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80058e2:	4b38      	ldr	r3, [pc, #224]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	2203      	movs	r2, #3
 80058e8:	4393      	bics	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f2:	430a      	orrs	r2, r1
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d106      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	0249      	lsls	r1, r1, #9
 8005908:	430a      	orrs	r2, r1
 800590a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	019b      	lsls	r3, r3, #6
 8005914:	4013      	ands	r3, r2
 8005916:	d014      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	220c      	movs	r2, #12
 800591e:	4393      	bics	r3, r2
 8005920:	0019      	movs	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005928:	430a      	orrs	r2, r1
 800592a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b04      	cmp	r3, #4
 8005932:	d106      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	0249      	lsls	r1, r1, #9
 800593e:	430a      	orrs	r2, r1
 8005940:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	045b      	lsls	r3, r3, #17
 800594a:	4013      	ands	r3, r2
 800594c:	d016      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	4a22      	ldr	r2, [pc, #136]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005954:	4013      	ands	r3, r2
 8005956:	0019      	movs	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800595e:	430a      	orrs	r2, r1
 8005960:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	429a      	cmp	r2, r3
 800596c:	d106      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	0449      	lsls	r1, r1, #17
 8005978:	430a      	orrs	r2, r1
 800597a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	049b      	lsls	r3, r3, #18
 8005984:	4013      	ands	r3, r2
 8005986:	d016      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005988:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	4a10      	ldr	r2, [pc, #64]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005998:	430a      	orrs	r2, r1
 800599a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	0449      	lsls	r1, r1, #17
 80059b2:	430a      	orrs	r2, r1
 80059b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80059b6:	2312      	movs	r3, #18
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	781b      	ldrb	r3, [r3, #0]
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b006      	add	sp, #24
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	efffffff 	.word	0xefffffff
 80059cc:	fffff3ff 	.word	0xfffff3ff
 80059d0:	fffffcff 	.word	0xfffffcff
 80059d4:	fff3ffff 	.word	0xfff3ffff
 80059d8:	ffcfffff 	.word	0xffcfffff
 80059dc:	ffffcfff 	.word	0xffffcfff
 80059e0:	ffff3fff 	.word	0xffff3fff
 80059e4:	ffbfffff 	.word	0xffbfffff
 80059e8:	feffffff 	.word	0xfeffffff

080059ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059ec:	b5b0      	push	{r4, r5, r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059f4:	230f      	movs	r3, #15
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d100      	bne.n	8005a04 <HAL_RTC_Init+0x18>
 8005a02:	e08c      	b.n	8005b1e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2229      	movs	r2, #41	; 0x29
 8005a08:	5c9b      	ldrb	r3, [r3, r2]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2228      	movs	r2, #40	; 0x28
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2288      	movs	r2, #136	; 0x88
 8005a1c:	0212      	lsls	r2, r2, #8
 8005a1e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fe f800 	bl	8003a28 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2229      	movs	r2, #41	; 0x29
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2210      	movs	r2, #16
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d062      	beq.n	8005b04 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	22ca      	movs	r2, #202	; 0xca
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2253      	movs	r2, #83	; 0x53
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005a4e:	250f      	movs	r5, #15
 8005a50:	197c      	adds	r4, r7, r5
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fbf3 	bl	8006240 <RTC_EnterInitMode>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005a5e:	0028      	movs	r0, r5
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d12c      	bne.n	8005ac2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	492e      	ldr	r1, [pc, #184]	; (8005b2c <HAL_RTC_Init+0x140>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6912      	ldr	r2, [r2, #16]
 8005a9e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6919      	ldr	r1, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	041a      	lsls	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005ab4:	183c      	adds	r4, r7, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 fc03 	bl	80062c4 <RTC_ExitInitMode>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005ac2:	230f      	movs	r3, #15
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	00d2      	lsls	r2, r2, #3
 8005ad8:	08d2      	lsrs	r2, r2, #3
 8005ada:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	22ff      	movs	r2, #255	; 0xff
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
 8005b02:	e003      	b.n	8005b0c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005b0c:	230f      	movs	r3, #15
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2229      	movs	r2, #41	; 0x29
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005b1e:	230f      	movs	r3, #15
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781b      	ldrb	r3, [r3, #0]
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b004      	add	sp, #16
 8005b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b2c:	fb8fffbf 	.word	0xfb8fffbf

08005b30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b30:	b5b0      	push	{r4, r5, r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2228      	movs	r2, #40	; 0x28
 8005b40:	5c9b      	ldrb	r3, [r3, r2]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_RTC_SetTime+0x1a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e092      	b.n	8005c70 <HAL_RTC_SetTime+0x140>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2228      	movs	r2, #40	; 0x28
 8005b4e:	2101      	movs	r1, #1
 8005b50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2229      	movs	r2, #41	; 0x29
 8005b56:	2102      	movs	r1, #2
 8005b58:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ca      	movs	r2, #202	; 0xca
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2253      	movs	r2, #83	; 0x53
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b6a:	2513      	movs	r5, #19
 8005b6c:	197c      	adds	r4, r7, r5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 fb65 	bl	8006240 <RTC_EnterInitMode>
 8005b76:	0003      	movs	r3, r0
 8005b78:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005b7a:	197b      	adds	r3, r7, r5
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d162      	bne.n	8005c48 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d125      	bne.n	8005bd4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2240      	movs	r2, #64	; 0x40
 8005b90:	4013      	ands	r3, r2
 8005b92:	d102      	bne.n	8005b9a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 fbd4 	bl	800634c <RTC_ByteToBcd2>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 fbcd 	bl	800634c <RTC_ByteToBcd2>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bb6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	789b      	ldrb	r3, [r3, #2]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fbc5 	bl	800634c <RTC_ByteToBcd2>
 8005bc2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bc4:	0022      	movs	r2, r4
 8005bc6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	78db      	ldrb	r3, [r3, #3]
 8005bcc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e017      	b.n	8005c04 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d102      	bne.n	8005be6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2200      	movs	r2, #0
 8005be4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bf2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bf8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	491b      	ldr	r1, [pc, #108]	; (8005c78 <HAL_RTC_SetTime+0x148>)
 8005c0c:	400a      	ands	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4918      	ldr	r1, [pc, #96]	; (8005c7c <HAL_RTC_SetTime+0x14c>)
 8005c1c:	400a      	ands	r2, r1
 8005c1e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c38:	2313      	movs	r3, #19
 8005c3a:	18fc      	adds	r4, r7, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 fb40 	bl	80062c4 <RTC_ExitInitMode>
 8005c44:	0003      	movs	r3, r0
 8005c46:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	22ff      	movs	r2, #255	; 0xff
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005c50:	2313      	movs	r3, #19
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2229      	movs	r2, #41	; 0x29
 8005c5e:	2101      	movs	r1, #1
 8005c60:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2228      	movs	r2, #40	; 0x28
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]

  return status;
 8005c6a:	2313      	movs	r3, #19
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	781b      	ldrb	r3, [r3, #0]
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b006      	add	sp, #24
 8005c76:	bdb0      	pop	{r4, r5, r7, pc}
 8005c78:	007f7f7f 	.word	0x007f7f7f
 8005c7c:	fffbffff 	.word	0xfffbffff

08005c80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	045b      	lsls	r3, r3, #17
 8005c9e:	0c5a      	lsrs	r2, r3, #17
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <HAL_RTC_GetTime+0xb4>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	223f      	movs	r2, #63	; 0x3f
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	227f      	movs	r2, #127	; 0x7f
 8005cc8:	4013      	ands	r3, r2
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	227f      	movs	r2, #127	; 0x7f
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	0d9b      	lsrs	r3, r3, #22
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11a      	bne.n	8005d2a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 fb4f 	bl	800639c <RTC_Bcd2ToByte>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	001a      	movs	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fb46 	bl	800639c <RTC_Bcd2ToByte>
 8005d10:	0003      	movs	r3, r0
 8005d12:	001a      	movs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	789b      	ldrb	r3, [r3, #2]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 fb3d 	bl	800639c <RTC_Bcd2ToByte>
 8005d22:	0003      	movs	r3, r0
 8005d24:	001a      	movs	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b006      	add	sp, #24
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	007f7f7f 	.word	0x007f7f7f

08005d38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d38:	b5b0      	push	{r4, r5, r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2228      	movs	r2, #40	; 0x28
 8005d48:	5c9b      	ldrb	r3, [r3, r2]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_RTC_SetDate+0x1a>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e07e      	b.n	8005e50 <HAL_RTC_SetDate+0x118>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2228      	movs	r2, #40	; 0x28
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2229      	movs	r2, #41	; 0x29
 8005d5e:	2102      	movs	r1, #2
 8005d60:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10e      	bne.n	8005d86 <HAL_RTC_SetDate+0x4e>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	2310      	movs	r3, #16
 8005d70:	4013      	ands	r3, r2
 8005d72:	d008      	beq.n	8005d86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2210      	movs	r2, #16
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	330a      	adds	r3, #10
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11c      	bne.n	8005dc6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	78db      	ldrb	r3, [r3, #3]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fadb 	bl	800634c <RTC_ByteToBcd2>
 8005d96:	0003      	movs	r3, r0
 8005d98:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 fad4 	bl	800634c <RTC_ByteToBcd2>
 8005da4:	0003      	movs	r3, r0
 8005da6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005da8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	789b      	ldrb	r3, [r3, #2]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 facc 	bl	800634c <RTC_ByteToBcd2>
 8005db4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005db6:	0022      	movs	r2, r4
 8005db8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e00e      	b.n	8005de4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005dd2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005dd8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	22ca      	movs	r2, #202	; 0xca
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2253      	movs	r2, #83	; 0x53
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005df4:	2513      	movs	r5, #19
 8005df6:	197c      	adds	r4, r7, r5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fa20 	bl	8006240 <RTC_EnterInitMode>
 8005e00:	0003      	movs	r3, r0
 8005e02:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005e04:	0028      	movs	r0, r5
 8005e06:	183b      	adds	r3, r7, r0
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4910      	ldr	r1, [pc, #64]	; (8005e58 <HAL_RTC_SetDate+0x120>)
 8005e16:	400a      	ands	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e1a:	183c      	adds	r4, r7, r0
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fa50 	bl	80062c4 <RTC_ExitInitMode>
 8005e24:	0003      	movs	r3, r0
 8005e26:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	22ff      	movs	r2, #255	; 0xff
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005e30:	2313      	movs	r3, #19
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2229      	movs	r2, #41	; 0x29
 8005e3e:	2101      	movs	r1, #1
 8005e40:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2228      	movs	r2, #40	; 0x28
 8005e46:	2100      	movs	r1, #0
 8005e48:	5499      	strb	r1, [r3, r2]

  return status;
 8005e4a:	2313      	movs	r3, #19
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b006      	add	sp, #24
 8005e56:	bdb0      	pop	{r4, r5, r7, pc}
 8005e58:	00ffff3f 	.word	0x00ffff3f

08005e5c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_RTC_GetDate+0x98>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	0c1b      	lsrs	r3, r3, #16
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	221f      	movs	r2, #31
 8005e86:	4013      	ands	r3, r2
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	223f      	movs	r2, #63	; 0x3f
 8005e94:	4013      	ands	r3, r2
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	0b5b      	lsrs	r3, r3, #13
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11a      	bne.n	8005ee8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 fa70 	bl	800639c <RTC_Bcd2ToByte>
 8005ebc:	0003      	movs	r3, r0
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 fa67 	bl	800639c <RTC_Bcd2ToByte>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	789b      	ldrb	r3, [r3, #2]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 fa5e 	bl	800639c <RTC_Bcd2ToByte>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b006      	add	sp, #24
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	00ffff3f 	.word	0x00ffff3f

08005ef8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b089      	sub	sp, #36	; 0x24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2228      	movs	r2, #40	; 0x28
 8005f08:	5c9b      	ldrb	r3, [r3, r2]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_RTC_SetAlarm_IT+0x1a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e127      	b.n	8006162 <HAL_RTC_SetAlarm_IT+0x26a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2228      	movs	r2, #40	; 0x28
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2229      	movs	r2, #41	; 0x29
 8005f1e:	2102      	movs	r1, #2
 8005f20:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d136      	bne.n	8005f96 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	4013      	ands	r3, r2
 8005f32:	d102      	bne.n	8005f3a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 fa04 	bl	800634c <RTC_ByteToBcd2>
 8005f44:	0003      	movs	r3, r0
 8005f46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 f9fd 	bl	800634c <RTC_ByteToBcd2>
 8005f52:	0003      	movs	r3, r0
 8005f54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	789b      	ldrb	r3, [r3, #2]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 f9f5 	bl	800634c <RTC_ByteToBcd2>
 8005f62:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f64:	0022      	movs	r2, r4
 8005f66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	78db      	ldrb	r3, [r3, #3]
 8005f6c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2220      	movs	r2, #32
 8005f76:	5c9b      	ldrb	r3, [r3, r2]
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f000 f9e7 	bl	800634c <RTC_ByteToBcd2>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f82:	0022      	movs	r2, r4
 8005f84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e022      	b.n	8005fdc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2240      	movs	r2, #64	; 0x40
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d102      	bne.n	8005fa8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fb4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	5c5b      	ldrb	r3, [r3, r1]
 8005fca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005fcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005fd2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	22ca      	movs	r2, #202	; 0xca
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2253      	movs	r2, #83	; 0x53
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	429a      	cmp	r2, r3
 8006002:	d14c      	bne.n	800609e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4957      	ldr	r1, [pc, #348]	; (800616c <HAL_RTC_SetAlarm_IT+0x274>)
 8006010:	400a      	ands	r2, r1
 8006012:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2101      	movs	r1, #1
 8006020:	430a      	orrs	r2, r1
 8006022:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006024:	f7fe f8ea 	bl	80041fc <HAL_GetTick>
 8006028:	0003      	movs	r3, r0
 800602a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800602c:	e016      	b.n	800605c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800602e:	f7fe f8e5 	bl	80041fc <HAL_GetTick>
 8006032:	0002      	movs	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	23fa      	movs	r3, #250	; 0xfa
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	429a      	cmp	r2, r3
 800603e:	d90d      	bls.n	800605c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2229      	movs	r2, #41	; 0x29
 800604c:	2103      	movs	r1, #3
 800604e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2228      	movs	r2, #40	; 0x28
 8006054:	2100      	movs	r1, #0
 8006056:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e082      	b.n	8006162 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	4013      	ands	r3, r2
 8006066:	d0e2      	beq.n	800602e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	0049      	lsls	r1, r1, #1
 8006086:	430a      	orrs	r2, r1
 8006088:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2180      	movs	r1, #128	; 0x80
 8006096:	0149      	lsls	r1, r1, #5
 8006098:	430a      	orrs	r2, r1
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	e04b      	b.n	8006136 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4931      	ldr	r1, [pc, #196]	; (8006170 <HAL_RTC_SetAlarm_IT+0x278>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2102      	movs	r1, #2
 80060ba:	430a      	orrs	r2, r1
 80060bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80060be:	f7fe f89d 	bl	80041fc <HAL_GetTick>
 80060c2:	0003      	movs	r3, r0
 80060c4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060c6:	e016      	b.n	80060f6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060c8:	f7fe f898 	bl	80041fc <HAL_GetTick>
 80060cc:	0002      	movs	r2, r0
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	23fa      	movs	r3, #250	; 0xfa
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90d      	bls.n	80060f6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2229      	movs	r2, #41	; 0x29
 80060e6:	2103      	movs	r1, #3
 80060e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2228      	movs	r2, #40	; 0x28
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e035      	b.n	8006162 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	4013      	ands	r3, r2
 8006100:	d0e2      	beq.n	80060c8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	0089      	lsls	r1, r1, #2
 8006120:	430a      	orrs	r2, r1
 8006122:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	0189      	lsls	r1, r1, #6
 8006132:	430a      	orrs	r2, r1
 8006134:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006136:	4a0f      	ldr	r2, [pc, #60]	; (8006174 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	58d3      	ldr	r3, [r2, r3]
 800613c:	490d      	ldr	r1, [pc, #52]	; (8006174 <HAL_RTC_SetAlarm_IT+0x27c>)
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	0312      	lsls	r2, r2, #12
 8006142:	4313      	orrs	r3, r2
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	22ff      	movs	r2, #255	; 0xff
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2229      	movs	r2, #41	; 0x29
 8006154:	2101      	movs	r1, #1
 8006156:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2228      	movs	r2, #40	; 0x28
 800615c:	2100      	movs	r1, #0
 800615e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b009      	add	sp, #36	; 0x24
 8006168:	bd90      	pop	{r4, r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	fffffeff 	.word	0xfffffeff
 8006170:	fffffdff 	.word	0xfffffdff
 8006174:	40021800 	.word	0x40021800

08006178 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	015b      	lsls	r3, r3, #5
 800618a:	4013      	ands	r3, r2
 800618c:	d011      	beq.n	80061b2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006194:	2201      	movs	r2, #1
 8006196:	4013      	ands	r3, r2
 8006198:	d00b      	beq.n	80061b2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2101      	movs	r1, #1
 80061a6:	430a      	orrs	r2, r1
 80061a8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7fd fbf5 	bl	800399c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	019b      	lsls	r3, r3, #6
 80061bc:	4013      	ands	r3, r2
 80061be:	d011      	beq.n	80061e4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	2202      	movs	r2, #2
 80061c8:	4013      	ands	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2102      	movs	r1, #2
 80061d8:	430a      	orrs	r2, r1
 80061da:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0018      	movs	r0, r3
 80061e0:	f000 f961 	bl	80064a6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2229      	movs	r2, #41	; 0x29
 80061e8:	2101      	movs	r1, #1
 80061ea:	5499      	strb	r1, [r3, r2]
}
 80061ec:	46c0      	nop			; (mov r8, r8)
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b002      	add	sp, #8
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0e      	ldr	r2, [pc, #56]	; (800623c <HAL_RTC_WaitForSynchro+0x48>)
 8006202:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006204:	f7fd fffa 	bl	80041fc <HAL_GetTick>
 8006208:	0003      	movs	r3, r0
 800620a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800620c:	e00a      	b.n	8006224 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800620e:	f7fd fff5 	bl	80041fc <HAL_GetTick>
 8006212:	0002      	movs	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	23fa      	movs	r3, #250	; 0xfa
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	429a      	cmp	r2, r3
 800621e:	d901      	bls.n	8006224 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e006      	b.n	8006232 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	4013      	ands	r3, r2
 800622e:	d0ee      	beq.n	800620e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b004      	add	sp, #16
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	0001005f 	.word	0x0001005f

08006240 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006248:	230f      	movs	r3, #15
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	4013      	ands	r3, r2
 800625a:	d12c      	bne.n	80062b6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	430a      	orrs	r2, r1
 800626a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800626c:	f7fd ffc6 	bl	80041fc <HAL_GetTick>
 8006270:	0003      	movs	r3, r0
 8006272:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006274:	e014      	b.n	80062a0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006276:	f7fd ffc1 	bl	80041fc <HAL_GetTick>
 800627a:	0002      	movs	r2, r0
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	200f      	movs	r0, #15
 8006282:	183b      	adds	r3, r7, r0
 8006284:	1839      	adds	r1, r7, r0
 8006286:	7809      	ldrb	r1, [r1, #0]
 8006288:	7019      	strb	r1, [r3, #0]
 800628a:	23fa      	movs	r3, #250	; 0xfa
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	429a      	cmp	r2, r3
 8006290:	d906      	bls.n	80062a0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006292:	183b      	adds	r3, r7, r0
 8006294:	2203      	movs	r2, #3
 8006296:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2229      	movs	r2, #41	; 0x29
 800629c:	2103      	movs	r1, #3
 800629e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2240      	movs	r2, #64	; 0x40
 80062a8:	4013      	ands	r3, r2
 80062aa:	d104      	bne.n	80062b6 <RTC_EnterInitMode+0x76>
 80062ac:	230f      	movs	r3, #15
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d1df      	bne.n	8006276 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80062b6:	230f      	movs	r3, #15
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b004      	add	sp, #16
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062cc:	240f      	movs	r4, #15
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <RTC_ExitInitMode+0x84>)
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <RTC_ExitInitMode+0x84>)
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	438a      	bics	r2, r1
 80062de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <RTC_ExitInitMode+0x84>)
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	2220      	movs	r2, #32
 80062e6:	4013      	ands	r3, r2
 80062e8:	d10d      	bne.n	8006306 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7ff ff81 	bl	80061f4 <HAL_RTC_WaitForSynchro>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d021      	beq.n	800633a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2229      	movs	r2, #41	; 0x29
 80062fa:	2103      	movs	r1, #3
 80062fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80062fe:	193b      	adds	r3, r7, r4
 8006300:	2203      	movs	r2, #3
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e019      	b.n	800633a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <RTC_ExitInitMode+0x84>)
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <RTC_ExitInitMode+0x84>)
 800630c:	2120      	movs	r1, #32
 800630e:	438a      	bics	r2, r1
 8006310:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f7ff ff6d 	bl	80061f4 <HAL_RTC_WaitForSynchro>
 800631a:	1e03      	subs	r3, r0, #0
 800631c:	d007      	beq.n	800632e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2229      	movs	r2, #41	; 0x29
 8006322:	2103      	movs	r1, #3
 8006324:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006326:	230f      	movs	r3, #15
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2203      	movs	r2, #3
 800632c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <RTC_ExitInitMode+0x84>)
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <RTC_ExitInitMode+0x84>)
 8006334:	2120      	movs	r1, #32
 8006336:	430a      	orrs	r2, r1
 8006338:	619a      	str	r2, [r3, #24]
  }

  return status;
 800633a:	230f      	movs	r3, #15
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	781b      	ldrb	r3, [r3, #0]
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	b005      	add	sp, #20
 8006346:	bd90      	pop	{r4, r7, pc}
 8006348:	40002800 	.word	0x40002800

0800634c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	0002      	movs	r2, r0
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800635c:	230b      	movs	r3, #11
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	1dfa      	adds	r2, r7, #7
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006366:	e008      	b.n	800637a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800636e:	220b      	movs	r2, #11
 8006370:	18bb      	adds	r3, r7, r2
 8006372:	18ba      	adds	r2, r7, r2
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	3a0a      	subs	r2, #10
 8006378:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800637a:	210b      	movs	r1, #11
 800637c:	187b      	adds	r3, r7, r1
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b09      	cmp	r3, #9
 8006382:	d8f1      	bhi.n	8006368 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	b2da      	uxtb	r2, r3
 800638c:	187b      	adds	r3, r7, r1
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	4313      	orrs	r3, r2
 8006392:	b2db      	uxtb	r3, r3
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b004      	add	sp, #16
 800639a:	bd80      	pop	{r7, pc}

0800639c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	0002      	movs	r2, r0
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80063a8:	1dfb      	adds	r3, r7, #7
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	001a      	movs	r2, r3
 80063b2:	0013      	movs	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	1dfb      	adds	r3, r7, #7
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	210f      	movs	r1, #15
 80063c6:	400b      	ands	r3, r1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	18d3      	adds	r3, r2, r3
 80063cc:	b2db      	uxtb	r3, r3
}
 80063ce:	0018      	movs	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	b004      	add	sp, #16
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2228      	movs	r2, #40	; 0x28
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_RTCEx_EnableBypassShadow+0x16>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e024      	b.n	8006436 <HAL_RTCEx_EnableBypassShadow+0x60>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2228      	movs	r2, #40	; 0x28
 80063f0:	2101      	movs	r1, #1
 80063f2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2229      	movs	r2, #41	; 0x29
 80063f8:	2102      	movs	r1, #2
 80063fa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ca      	movs	r2, #202	; 0xca
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2253      	movs	r2, #83	; 0x53
 800640a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2120      	movs	r1, #32
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2229      	movs	r2, #41	; 0x29
 8006428:	2101      	movs	r1, #1
 800642a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2228      	movs	r2, #40	; 0x28
 8006430:	2100      	movs	r1, #0
 8006432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b002      	add	sp, #8
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2228      	movs	r2, #40	; 0x28
 800644a:	5c9b      	ldrb	r3, [r3, r2]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_RTCEx_DisableBypassShadow+0x16>
 8006450:	2302      	movs	r3, #2
 8006452:	e024      	b.n	800649e <HAL_RTCEx_DisableBypassShadow+0x60>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2228      	movs	r2, #40	; 0x28
 8006458:	2101      	movs	r1, #1
 800645a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2229      	movs	r2, #41	; 0x29
 8006460:	2102      	movs	r1, #2
 8006462:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	22ca      	movs	r2, #202	; 0xca
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2253      	movs	r2, #83	; 0x53
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	21df      	movs	r1, #223	; 0xdf
 8006480:	400a      	ands	r2, r1
 8006482:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	22ff      	movs	r2, #255	; 0xff
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2229      	movs	r2, #41	; 0x29
 8006490:	2101      	movs	r1, #1
 8006492:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2228      	movs	r2, #40	; 0x28
 8006498:	2100      	movs	r1, #0
 800649a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b002      	add	sp, #8
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b002      	add	sp, #8
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e0a8      	b.n	800661c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	2382      	movs	r3, #130	; 0x82
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d009      	beq.n	80064f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	61da      	str	r2, [r3, #28]
 80064e4:	e005      	b.n	80064f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	225d      	movs	r2, #93	; 0x5d
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	225c      	movs	r2, #92	; 0x5c
 8006508:	2100      	movs	r1, #0
 800650a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f7fd fad0 	bl	8003ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	225d      	movs	r2, #93	; 0x5d
 8006518:	2102      	movs	r1, #2
 800651a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2140      	movs	r1, #64	; 0x40
 8006528:	438a      	bics	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	23e0      	movs	r3, #224	; 0xe0
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	429a      	cmp	r2, r3
 8006536:	d902      	bls.n	800653e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	015b      	lsls	r3, r3, #5
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	23f0      	movs	r3, #240	; 0xf0
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	429a      	cmp	r2, r3
 800654e:	d008      	beq.n	8006562 <HAL_SPI_Init+0xaa>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	23e0      	movs	r3, #224	; 0xe0
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	429a      	cmp	r2, r3
 800655a:	d002      	beq.n	8006562 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	2382      	movs	r3, #130	; 0x82
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	401a      	ands	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	2384      	movs	r3, #132	; 0x84
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	400b      	ands	r3, r1
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2102      	movs	r1, #2
 800657e:	400b      	ands	r3, r1
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2101      	movs	r1, #1
 8006588:	400b      	ands	r3, r1
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6999      	ldr	r1, [r3, #24]
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	400b      	ands	r3, r1
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2138      	movs	r1, #56	; 0x38
 800659e:	400b      	ands	r3, r1
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	2180      	movs	r1, #128	; 0x80
 80065a8:	400b      	ands	r3, r1
 80065aa:	431a      	orrs	r2, r3
 80065ac:	0011      	movs	r1, r2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	401a      	ands	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	2204      	movs	r2, #4
 80065c8:	401a      	ands	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2110      	movs	r1, #16
 80065d0:	400b      	ands	r3, r1
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	2108      	movs	r1, #8
 80065da:	400b      	ands	r3, r1
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	23f0      	movs	r3, #240	; 0xf0
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	400b      	ands	r3, r1
 80065e8:	431a      	orrs	r2, r3
 80065ea:	0011      	movs	r1, r2
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	015b      	lsls	r3, r3, #5
 80065f2:	401a      	ands	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4907      	ldr	r1, [pc, #28]	; (8006624 <HAL_SPI_Init+0x16c>)
 8006608:	400a      	ands	r2, r1
 800660a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	225d      	movs	r2, #93	; 0x5d
 8006616:	2101      	movs	r1, #1
 8006618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	0018      	movs	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	b004      	add	sp, #16
 8006622:	bd80      	pop	{r7, pc}
 8006624:	fffff7ff 	.word	0xfffff7ff

08006628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e04a      	b.n	80066d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	223d      	movs	r2, #61	; 0x3d
 800663e:	5c9b      	ldrb	r3, [r3, r2]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d107      	bne.n	8006656 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	223c      	movs	r2, #60	; 0x3c
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f7fd fa79 	bl	8003b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223d      	movs	r2, #61	; 0x3d
 800665a:	2102      	movs	r1, #2
 800665c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	0019      	movs	r1, r3
 8006668:	0010      	movs	r0, r2
 800666a:	f000 f9ed 	bl	8006a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2248      	movs	r2, #72	; 0x48
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	223e      	movs	r2, #62	; 0x3e
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	223f      	movs	r2, #63	; 0x3f
 8006682:	2101      	movs	r1, #1
 8006684:	5499      	strb	r1, [r3, r2]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2241      	movs	r2, #65	; 0x41
 8006692:	2101      	movs	r1, #1
 8006694:	5499      	strb	r1, [r3, r2]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2242      	movs	r2, #66	; 0x42
 800669a:	2101      	movs	r1, #1
 800669c:	5499      	strb	r1, [r3, r2]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2243      	movs	r2, #67	; 0x43
 80066a2:	2101      	movs	r1, #1
 80066a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2244      	movs	r2, #68	; 0x44
 80066aa:	2101      	movs	r1, #1
 80066ac:	5499      	strb	r1, [r3, r2]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2245      	movs	r2, #69	; 0x45
 80066b2:	2101      	movs	r1, #1
 80066b4:	5499      	strb	r1, [r3, r2]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2246      	movs	r2, #70	; 0x46
 80066ba:	2101      	movs	r1, #1
 80066bc:	5499      	strb	r1, [r3, r2]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2247      	movs	r2, #71	; 0x47
 80066c2:	2101      	movs	r1, #1
 80066c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	223d      	movs	r2, #61	; 0x3d
 80066ca:	2101      	movs	r1, #1
 80066cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	223d      	movs	r2, #61	; 0x3d
 80066e4:	5c9b      	ldrb	r3, [r3, r2]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d001      	beq.n	80066f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e047      	b.n	8006780 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	223d      	movs	r2, #61	; 0x3d
 80066f4:	2102      	movs	r1, #2
 80066f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2101      	movs	r1, #1
 8006704:	430a      	orrs	r2, r1
 8006706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <HAL_TIM_Base_Start_IT+0xb0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d014      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x64>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	05db      	lsls	r3, r3, #23
 800671a:	429a      	cmp	r2, r3
 800671c:	d00e      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x64>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_TIM_Base_Start_IT+0xb4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d009      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x64>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a18      	ldr	r2, [pc, #96]	; (8006790 <HAL_TIM_Base_Start_IT+0xb8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d004      	beq.n	800673c <HAL_TIM_Base_Start_IT+0x64>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_TIM_Base_Start_IT+0xbc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d116      	bne.n	800676a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <HAL_TIM_Base_Start_IT+0xc0>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b06      	cmp	r3, #6
 800674c:	d016      	beq.n	800677c <HAL_TIM_Base_Start_IT+0xa4>
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	025b      	lsls	r3, r3, #9
 8006754:	429a      	cmp	r2, r3
 8006756:	d011      	beq.n	800677c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2101      	movs	r1, #1
 8006764:	430a      	orrs	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006768:	e008      	b.n	800677c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2101      	movs	r1, #1
 8006776:	430a      	orrs	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e000      	b.n	800677e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b004      	add	sp, #16
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40014000 	.word	0x40014000
 8006798:	00010007 	.word	0x00010007

0800679c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2101      	movs	r1, #1
 80067b0:	438a      	bics	r2, r1
 80067b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <HAL_TIM_Base_Stop_IT+0x54>)
 80067bc:	4013      	ands	r3, r2
 80067be:	d10d      	bne.n	80067dc <HAL_TIM_Base_Stop_IT+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <HAL_TIM_Base_Stop_IT+0x58>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_Base_Stop_IT+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2101      	movs	r1, #1
 80067d8:	438a      	bics	r2, r1
 80067da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	223d      	movs	r2, #61	; 0x3d
 80067e0:	2101      	movs	r1, #1
 80067e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	0018      	movs	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	00001111 	.word	0x00001111
 80067f4:	00000444 	.word	0x00000444

080067f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2202      	movs	r2, #2
 8006814:	4013      	ands	r3, r2
 8006816:	d021      	beq.n	800685c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2202      	movs	r2, #2
 800681c:	4013      	ands	r3, r2
 800681e:	d01d      	beq.n	800685c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2203      	movs	r2, #3
 8006826:	4252      	negs	r2, r2
 8006828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2203      	movs	r2, #3
 8006838:	4013      	ands	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	0018      	movs	r0, r3
 8006840:	f000 f8ea 	bl	8006a18 <HAL_TIM_IC_CaptureCallback>
 8006844:	e007      	b.n	8006856 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 f8dd 	bl	8006a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0018      	movs	r0, r3
 8006852:	f000 f8e9 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2204      	movs	r2, #4
 8006860:	4013      	ands	r3, r2
 8006862:	d022      	beq.n	80068aa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2204      	movs	r2, #4
 8006868:	4013      	ands	r3, r2
 800686a:	d01e      	beq.n	80068aa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2205      	movs	r2, #5
 8006872:	4252      	negs	r2, r2
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	23c0      	movs	r3, #192	; 0xc0
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4013      	ands	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0018      	movs	r0, r3
 800688e:	f000 f8c3 	bl	8006a18 <HAL_TIM_IC_CaptureCallback>
 8006892:	e007      	b.n	80068a4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 f8b6 	bl	8006a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 f8c2 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2208      	movs	r2, #8
 80068ae:	4013      	ands	r3, r2
 80068b0:	d021      	beq.n	80068f6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2208      	movs	r2, #8
 80068b6:	4013      	ands	r3, r2
 80068b8:	d01d      	beq.n	80068f6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2209      	movs	r2, #9
 80068c0:	4252      	negs	r2, r2
 80068c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2203      	movs	r2, #3
 80068d2:	4013      	ands	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 f89d 	bl	8006a18 <HAL_TIM_IC_CaptureCallback>
 80068de:	e007      	b.n	80068f0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f890 	bl	8006a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 f89c 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2210      	movs	r2, #16
 80068fa:	4013      	ands	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2210      	movs	r2, #16
 8006902:	4013      	ands	r3, r2
 8006904:	d01e      	beq.n	8006944 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2211      	movs	r2, #17
 800690c:	4252      	negs	r2, r2
 800690e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2208      	movs	r2, #8
 8006914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	23c0      	movs	r3, #192	; 0xc0
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4013      	ands	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 f876 	bl	8006a18 <HAL_TIM_IC_CaptureCallback>
 800692c:	e007      	b.n	800693e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 f869 	bl	8006a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f875 	bl	8006a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2201      	movs	r2, #1
 8006948:	4013      	ands	r3, r2
 800694a:	d00c      	beq.n	8006966 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	4013      	ands	r3, r2
 8006952:	d008      	beq.n	8006966 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2202      	movs	r2, #2
 800695a:	4252      	negs	r2, r2
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0018      	movs	r0, r3
 8006962:	f7fc fff9 	bl	8003958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2280      	movs	r2, #128	; 0x80
 800696a:	4013      	ands	r3, r2
 800696c:	d104      	bne.n	8006978 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	019b      	lsls	r3, r3, #6
 8006974:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006976:	d00b      	beq.n	8006990 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	4013      	ands	r3, r2
 800697e:	d007      	beq.n	8006990 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_TIM_IRQHandler+0x208>)
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f000 f972 	bl	8006c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4013      	ands	r3, r2
 8006998:	d00b      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2280      	movs	r2, #128	; 0x80
 800699e:	4013      	ands	r3, r2
 80069a0:	d007      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <HAL_TIM_IRQHandler+0x20c>)
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f969 	bl	8006c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	4013      	ands	r3, r2
 80069b8:	d00c      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2240      	movs	r2, #64	; 0x40
 80069be:	4013      	ands	r3, r2
 80069c0:	d008      	beq.n	80069d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2241      	movs	r2, #65	; 0x41
 80069c8:	4252      	negs	r2, r2
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 f832 	bl	8006a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2220      	movs	r2, #32
 80069d8:	4013      	ands	r3, r2
 80069da:	d00c      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	4013      	ands	r3, r2
 80069e2:	d008      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2221      	movs	r2, #33	; 0x21
 80069ea:	4252      	negs	r2, r2
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 f937 	bl	8006c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b004      	add	sp, #16
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	ffffdf7f 	.word	0xffffdf7f
 8006a04:	fffffeff 	.word	0xfffffeff

08006a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a20:	46c0      	nop			; (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b002      	add	sp, #8
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a30:	46c0      	nop			; (mov r8, r8)
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b002      	add	sp, #8
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b002      	add	sp, #8
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3f      	ldr	r2, [pc, #252]	; (8006b58 <TIM_Base_SetConfig+0x110>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00c      	beq.n	8006a7a <TIM_Base_SetConfig+0x32>
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	05db      	lsls	r3, r3, #23
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0x32>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0x32>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a3a      	ldr	r2, [pc, #232]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2270      	movs	r2, #112	; 0x70
 8006a7e:	4393      	bics	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <TIM_Base_SetConfig+0x110>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01c      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	05db      	lsls	r3, r3, #23
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d017      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <TIM_Base_SetConfig+0x114>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2d      	ldr	r2, [pc, #180]	; (8006b60 <TIM_Base_SetConfig+0x118>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <TIM_Base_SetConfig+0x11c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2b      	ldr	r2, [pc, #172]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x86>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a29      	ldr	r2, [pc, #164]	; (8006b70 <TIM_Base_SetConfig+0x128>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <TIM_Base_SetConfig+0x12c>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2280      	movs	r2, #128	; 0x80
 8006ae4:	4393      	bics	r3, r2
 8006ae6:	001a      	movs	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a13      	ldr	r2, [pc, #76]	; (8006b58 <TIM_Base_SetConfig+0x110>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00b      	beq.n	8006b26 <TIM_Base_SetConfig+0xde>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_Base_SetConfig+0x120>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d007      	beq.n	8006b26 <TIM_Base_SetConfig+0xde>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_Base_SetConfig+0x124>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_Base_SetConfig+0xde>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <TIM_Base_SetConfig+0x128>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d103      	bne.n	8006b2e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d106      	bne.n	8006b4e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2201      	movs	r2, #1
 8006b46:	4393      	bics	r3, r2
 8006b48:	001a      	movs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	611a      	str	r2, [r3, #16]
  }
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b004      	add	sp, #16
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40002000 	.word	0x40002000
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800
 8006b74:	fffffcff 	.word	0xfffffcff

08006b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223c      	movs	r2, #60	; 0x3c
 8006b86:	5c9b      	ldrb	r3, [r3, r2]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e05a      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	223c      	movs	r2, #60	; 0x3c
 8006b94:	2101      	movs	r1, #1
 8006b96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	223d      	movs	r2, #61	; 0x3d
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2270      	movs	r2, #112	; 0x70
 8006bd0:	4393      	bics	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d014      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	05db      	lsls	r3, r3, #23
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	4393      	bics	r3, r2
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	223d      	movs	r2, #61	; 0x3d
 8006c38:	2101      	movs	r1, #1
 8006c3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	223c      	movs	r2, #60	; 0x3c
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b004      	add	sp, #16
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	ff0fffff 	.word	0xff0fffff
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40014000 	.word	0x40014000

08006c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c6c:	46c0      	nop			; (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e046      	b.n	8006d34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2288      	movs	r2, #136	; 0x88
 8006caa:	589b      	ldr	r3, [r3, r2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d107      	bne.n	8006cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2284      	movs	r2, #132	; 0x84
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7fc ff6a 	bl	8003b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2288      	movs	r2, #136	; 0x88
 8006cc4:	2124      	movs	r1, #36	; 0x24
 8006cc6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	438a      	bics	r2, r1
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 fd4c 	bl	8007780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 f9f2 	bl	80070d4 <UART_SetConfig>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e01c      	b.n	8006d34 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	490d      	ldr	r1, [pc, #52]	; (8006d3c <HAL_UART_Init+0xa8>)
 8006d06:	400a      	ands	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	212a      	movs	r1, #42	; 0x2a
 8006d16:	438a      	bics	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	430a      	orrs	r2, r1
 8006d28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f000 fddb 	bl	80078e8 <UART_CheckIdleState>
 8006d32:	0003      	movs	r3, r0
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b002      	add	sp, #8
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	ffffb7ff 	.word	0xffffb7ff

08006d40 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e032      	b.n	8006db8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2288      	movs	r2, #136	; 0x88
 8006d56:	2124      	movs	r1, #36	; 0x24
 8006d58:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2101      	movs	r1, #1
 8006d66:	438a      	bics	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7fd f831 	bl	8003dec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2290      	movs	r2, #144	; 0x90
 8006d8e:	2100      	movs	r1, #0
 8006d90:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2288      	movs	r2, #136	; 0x88
 8006d96:	2100      	movs	r1, #0
 8006d98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	228c      	movs	r2, #140	; 0x8c
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2284      	movs	r2, #132	; 0x84
 8006db2:	2100      	movs	r1, #0
 8006db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	1dbb      	adds	r3, r7, #6
 8006dce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2288      	movs	r2, #136	; 0x88
 8006dd4:	589b      	ldr	r3, [r3, r2]
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d000      	beq.n	8006ddc <HAL_UART_Transmit+0x1c>
 8006dda:	e090      	b.n	8006efe <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_UART_Transmit+0x2a>
 8006de2:	1dbb      	adds	r3, r7, #6
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e088      	b.n	8006f00 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	2380      	movs	r3, #128	; 0x80
 8006df4:	015b      	lsls	r3, r3, #5
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d109      	bne.n	8006e0e <HAL_UART_Transmit+0x4e>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4013      	ands	r3, r2
 8006e08:	d001      	beq.n	8006e0e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e078      	b.n	8006f00 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2290      	movs	r2, #144	; 0x90
 8006e12:	2100      	movs	r1, #0
 8006e14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2288      	movs	r2, #136	; 0x88
 8006e1a:	2121      	movs	r1, #33	; 0x21
 8006e1c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e1e:	f7fd f9ed 	bl	80041fc <HAL_GetTick>
 8006e22:	0003      	movs	r3, r0
 8006e24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1dba      	adds	r2, r7, #6
 8006e2a:	2154      	movs	r1, #84	; 0x54
 8006e2c:	8812      	ldrh	r2, [r2, #0]
 8006e2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1dba      	adds	r2, r7, #6
 8006e34:	2156      	movs	r1, #86	; 0x56
 8006e36:	8812      	ldrh	r2, [r2, #0]
 8006e38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	015b      	lsls	r3, r3, #5
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d108      	bne.n	8006e58 <HAL_UART_Transmit+0x98>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e003      	b.n	8006e60 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e60:	e030      	b.n	8006ec4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	0013      	movs	r3, r2
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	f000 fde4 	bl	8007a3c <UART_WaitOnFlagUntilTimeout>
 8006e74:	1e03      	subs	r3, r0, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2288      	movs	r2, #136	; 0x88
 8006e7c:	2120      	movs	r1, #32
 8006e7e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e03d      	b.n	8006f00 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	001a      	movs	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	05d2      	lsls	r2, r2, #23
 8006e96:	0dd2      	lsrs	r2, r2, #23
 8006e98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e007      	b.n	8006eb2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2256      	movs	r2, #86	; 0x56
 8006eb6:	5a9b      	ldrh	r3, [r3, r2]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b299      	uxth	r1, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2256      	movs	r2, #86	; 0x56
 8006ec2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2256      	movs	r2, #86	; 0x56
 8006ec8:	5a9b      	ldrh	r3, [r3, r2]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1c8      	bne.n	8006e62 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	0013      	movs	r3, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	2140      	movs	r1, #64	; 0x40
 8006ede:	f000 fdad 	bl	8007a3c <UART_WaitOnFlagUntilTimeout>
 8006ee2:	1e03      	subs	r3, r0, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2288      	movs	r2, #136	; 0x88
 8006eea:	2120      	movs	r1, #32
 8006eec:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2288      	movs	r2, #136	; 0x88
 8006ef6:	2120      	movs	r1, #32
 8006ef8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b008      	add	sp, #32
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	1dbb      	adds	r3, r7, #6
 8006f16:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	228c      	movs	r2, #140	; 0x8c
 8006f1c:	589b      	ldr	r3, [r3, r2]
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d000      	beq.n	8006f24 <HAL_UART_Receive+0x1c>
 8006f22:	e0d0      	b.n	80070c6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_UART_Receive+0x2a>
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0c8      	b.n	80070c8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	2380      	movs	r3, #128	; 0x80
 8006f3c:	015b      	lsls	r3, r3, #5
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d109      	bne.n	8006f56 <HAL_UART_Receive+0x4e>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d001      	beq.n	8006f56 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e0b8      	b.n	80070c8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2290      	movs	r2, #144	; 0x90
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	228c      	movs	r2, #140	; 0x8c
 8006f62:	2122      	movs	r1, #34	; 0x22
 8006f64:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f6c:	f7fd f946 	bl	80041fc <HAL_GetTick>
 8006f70:	0003      	movs	r3, r0
 8006f72:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1dba      	adds	r2, r7, #6
 8006f78:	215c      	movs	r1, #92	; 0x5c
 8006f7a:	8812      	ldrh	r2, [r2, #0]
 8006f7c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1dba      	adds	r2, r7, #6
 8006f82:	215e      	movs	r1, #94	; 0x5e
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d10d      	bne.n	8006fb0 <HAL_UART_Receive+0xa8>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_UART_Receive+0x9e>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2260      	movs	r2, #96	; 0x60
 8006fa0:	494b      	ldr	r1, [pc, #300]	; (80070d0 <HAL_UART_Receive+0x1c8>)
 8006fa2:	5299      	strh	r1, [r3, r2]
 8006fa4:	e02e      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2260      	movs	r2, #96	; 0x60
 8006faa:	21ff      	movs	r1, #255	; 0xff
 8006fac:	5299      	strh	r1, [r3, r2]
 8006fae:	e029      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10d      	bne.n	8006fd4 <HAL_UART_Receive+0xcc>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <HAL_UART_Receive+0xc2>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2260      	movs	r2, #96	; 0x60
 8006fc4:	21ff      	movs	r1, #255	; 0xff
 8006fc6:	5299      	strh	r1, [r3, r2]
 8006fc8:	e01c      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2260      	movs	r2, #96	; 0x60
 8006fce:	217f      	movs	r1, #127	; 0x7f
 8006fd0:	5299      	strh	r1, [r3, r2]
 8006fd2:	e017      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	055b      	lsls	r3, r3, #21
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d10d      	bne.n	8006ffc <HAL_UART_Receive+0xf4>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_UART_Receive+0xea>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2260      	movs	r2, #96	; 0x60
 8006fec:	217f      	movs	r1, #127	; 0x7f
 8006fee:	5299      	strh	r1, [r3, r2]
 8006ff0:	e008      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2260      	movs	r2, #96	; 0x60
 8006ff6:	213f      	movs	r1, #63	; 0x3f
 8006ff8:	5299      	strh	r1, [r3, r2]
 8006ffa:	e003      	b.n	8007004 <HAL_UART_Receive+0xfc>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2260      	movs	r2, #96	; 0x60
 8007000:	2100      	movs	r1, #0
 8007002:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007004:	2312      	movs	r3, #18
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	2160      	movs	r1, #96	; 0x60
 800700c:	5a52      	ldrh	r2, [r2, r1]
 800700e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	015b      	lsls	r3, r3, #5
 8007018:	429a      	cmp	r2, r3
 800701a:	d108      	bne.n	800702e <HAL_UART_Receive+0x126>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e003      	b.n	8007036 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007036:	e03a      	b.n	80070ae <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	0013      	movs	r3, r2
 8007042:	2200      	movs	r2, #0
 8007044:	2120      	movs	r1, #32
 8007046:	f000 fcf9 	bl	8007a3c <UART_WaitOnFlagUntilTimeout>
 800704a:	1e03      	subs	r3, r0, #0
 800704c:	d005      	beq.n	800705a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	228c      	movs	r2, #140	; 0x8c
 8007052:	2120      	movs	r1, #32
 8007054:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e036      	b.n	80070c8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10e      	bne.n	800707e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	b29b      	uxth	r3, r3
 8007068:	2212      	movs	r2, #18
 800706a:	18ba      	adds	r2, r7, r2
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	4013      	ands	r3, r2
 8007070:	b29a      	uxth	r2, r3
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	3302      	adds	r3, #2
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e00e      	b.n	800709c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2212      	movs	r2, #18
 8007088:	18ba      	adds	r2, r7, r2
 800708a:	8812      	ldrh	r2, [r2, #0]
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	4013      	ands	r3, r2
 8007090:	b2da      	uxtb	r2, r3
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3301      	adds	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	225e      	movs	r2, #94	; 0x5e
 80070a0:	5a9b      	ldrh	r3, [r3, r2]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b299      	uxth	r1, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	225e      	movs	r2, #94	; 0x5e
 80070ac:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	225e      	movs	r2, #94	; 0x5e
 80070b2:	5a9b      	ldrh	r3, [r3, r2]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1be      	bne.n	8007038 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	228c      	movs	r2, #140	; 0x8c
 80070be:	2120      	movs	r1, #32
 80070c0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	0018      	movs	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b008      	add	sp, #32
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	000001ff 	.word	0x000001ff

080070d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b5b0      	push	{r4, r5, r7, lr}
 80070d6:	b090      	sub	sp, #64	; 0x40
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070dc:	231a      	movs	r3, #26
 80070de:	2220      	movs	r2, #32
 80070e0:	189b      	adds	r3, r3, r2
 80070e2:	19db      	adds	r3, r3, r7
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4ac1      	ldr	r2, [pc, #772]	; (800740c <UART_SetConfig+0x338>)
 8007108:	4013      	ands	r3, r2
 800710a:	0019      	movs	r1, r3
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	430b      	orrs	r3, r1
 8007114:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4abc      	ldr	r2, [pc, #752]	; (8007410 <UART_SetConfig+0x33c>)
 800711e:	4013      	ands	r3, r2
 8007120:	0018      	movs	r0, r3
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	68d9      	ldr	r1, [r3, #12]
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	0003      	movs	r3, r0
 800712c:	430b      	orrs	r3, r1
 800712e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4ab6      	ldr	r2, [pc, #728]	; (8007414 <UART_SetConfig+0x340>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <UART_SetConfig+0x80>
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4ab4      	ldr	r2, [pc, #720]	; (8007418 <UART_SetConfig+0x344>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007150:	4313      	orrs	r3, r2
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	4ab0      	ldr	r2, [pc, #704]	; (800741c <UART_SetConfig+0x348>)
 800715c:	4013      	ands	r3, r2
 800715e:	0019      	movs	r1, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007166:	430b      	orrs	r3, r1
 8007168:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	220f      	movs	r2, #15
 8007172:	4393      	bics	r3, r2
 8007174:	0018      	movs	r0, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	0003      	movs	r3, r0
 8007180:	430b      	orrs	r3, r1
 8007182:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4aa5      	ldr	r2, [pc, #660]	; (8007420 <UART_SetConfig+0x34c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d131      	bne.n	80071f2 <UART_SetConfig+0x11e>
 800718e:	4ba5      	ldr	r3, [pc, #660]	; (8007424 <UART_SetConfig+0x350>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	2203      	movs	r2, #3
 8007194:	4013      	ands	r3, r2
 8007196:	2b03      	cmp	r3, #3
 8007198:	d01d      	beq.n	80071d6 <UART_SetConfig+0x102>
 800719a:	d823      	bhi.n	80071e4 <UART_SetConfig+0x110>
 800719c:	2b02      	cmp	r3, #2
 800719e:	d00c      	beq.n	80071ba <UART_SetConfig+0xe6>
 80071a0:	d820      	bhi.n	80071e4 <UART_SetConfig+0x110>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <UART_SetConfig+0xd8>
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d00e      	beq.n	80071c8 <UART_SetConfig+0xf4>
 80071aa:	e01b      	b.n	80071e4 <UART_SetConfig+0x110>
 80071ac:	231b      	movs	r3, #27
 80071ae:	2220      	movs	r2, #32
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	19db      	adds	r3, r3, r7
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	e154      	b.n	8007464 <UART_SetConfig+0x390>
 80071ba:	231b      	movs	r3, #27
 80071bc:	2220      	movs	r2, #32
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	19db      	adds	r3, r3, r7
 80071c2:	2202      	movs	r2, #2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e14d      	b.n	8007464 <UART_SetConfig+0x390>
 80071c8:	231b      	movs	r3, #27
 80071ca:	2220      	movs	r2, #32
 80071cc:	189b      	adds	r3, r3, r2
 80071ce:	19db      	adds	r3, r3, r7
 80071d0:	2204      	movs	r2, #4
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	e146      	b.n	8007464 <UART_SetConfig+0x390>
 80071d6:	231b      	movs	r3, #27
 80071d8:	2220      	movs	r2, #32
 80071da:	189b      	adds	r3, r3, r2
 80071dc:	19db      	adds	r3, r3, r7
 80071de:	2208      	movs	r2, #8
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e13f      	b.n	8007464 <UART_SetConfig+0x390>
 80071e4:	231b      	movs	r3, #27
 80071e6:	2220      	movs	r2, #32
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	19db      	adds	r3, r3, r7
 80071ec:	2210      	movs	r2, #16
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e138      	b.n	8007464 <UART_SetConfig+0x390>
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a8c      	ldr	r2, [pc, #560]	; (8007428 <UART_SetConfig+0x354>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d131      	bne.n	8007260 <UART_SetConfig+0x18c>
 80071fc:	4b89      	ldr	r3, [pc, #548]	; (8007424 <UART_SetConfig+0x350>)
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	220c      	movs	r2, #12
 8007202:	4013      	ands	r3, r2
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d01d      	beq.n	8007244 <UART_SetConfig+0x170>
 8007208:	d823      	bhi.n	8007252 <UART_SetConfig+0x17e>
 800720a:	2b08      	cmp	r3, #8
 800720c:	d00c      	beq.n	8007228 <UART_SetConfig+0x154>
 800720e:	d820      	bhi.n	8007252 <UART_SetConfig+0x17e>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <UART_SetConfig+0x146>
 8007214:	2b04      	cmp	r3, #4
 8007216:	d00e      	beq.n	8007236 <UART_SetConfig+0x162>
 8007218:	e01b      	b.n	8007252 <UART_SetConfig+0x17e>
 800721a:	231b      	movs	r3, #27
 800721c:	2220      	movs	r2, #32
 800721e:	189b      	adds	r3, r3, r2
 8007220:	19db      	adds	r3, r3, r7
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e11d      	b.n	8007464 <UART_SetConfig+0x390>
 8007228:	231b      	movs	r3, #27
 800722a:	2220      	movs	r2, #32
 800722c:	189b      	adds	r3, r3, r2
 800722e:	19db      	adds	r3, r3, r7
 8007230:	2202      	movs	r2, #2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e116      	b.n	8007464 <UART_SetConfig+0x390>
 8007236:	231b      	movs	r3, #27
 8007238:	2220      	movs	r2, #32
 800723a:	189b      	adds	r3, r3, r2
 800723c:	19db      	adds	r3, r3, r7
 800723e:	2204      	movs	r2, #4
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	e10f      	b.n	8007464 <UART_SetConfig+0x390>
 8007244:	231b      	movs	r3, #27
 8007246:	2220      	movs	r2, #32
 8007248:	189b      	adds	r3, r3, r2
 800724a:	19db      	adds	r3, r3, r7
 800724c:	2208      	movs	r2, #8
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e108      	b.n	8007464 <UART_SetConfig+0x390>
 8007252:	231b      	movs	r3, #27
 8007254:	2220      	movs	r2, #32
 8007256:	189b      	adds	r3, r3, r2
 8007258:	19db      	adds	r3, r3, r7
 800725a:	2210      	movs	r2, #16
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e101      	b.n	8007464 <UART_SetConfig+0x390>
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a71      	ldr	r2, [pc, #452]	; (800742c <UART_SetConfig+0x358>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d131      	bne.n	80072ce <UART_SetConfig+0x1fa>
 800726a:	4b6e      	ldr	r3, [pc, #440]	; (8007424 <UART_SetConfig+0x350>)
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	2230      	movs	r2, #48	; 0x30
 8007270:	4013      	ands	r3, r2
 8007272:	2b30      	cmp	r3, #48	; 0x30
 8007274:	d01d      	beq.n	80072b2 <UART_SetConfig+0x1de>
 8007276:	d823      	bhi.n	80072c0 <UART_SetConfig+0x1ec>
 8007278:	2b20      	cmp	r3, #32
 800727a:	d00c      	beq.n	8007296 <UART_SetConfig+0x1c2>
 800727c:	d820      	bhi.n	80072c0 <UART_SetConfig+0x1ec>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <UART_SetConfig+0x1b4>
 8007282:	2b10      	cmp	r3, #16
 8007284:	d00e      	beq.n	80072a4 <UART_SetConfig+0x1d0>
 8007286:	e01b      	b.n	80072c0 <UART_SetConfig+0x1ec>
 8007288:	231b      	movs	r3, #27
 800728a:	2220      	movs	r2, #32
 800728c:	189b      	adds	r3, r3, r2
 800728e:	19db      	adds	r3, r3, r7
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e0e6      	b.n	8007464 <UART_SetConfig+0x390>
 8007296:	231b      	movs	r3, #27
 8007298:	2220      	movs	r2, #32
 800729a:	189b      	adds	r3, r3, r2
 800729c:	19db      	adds	r3, r3, r7
 800729e:	2202      	movs	r2, #2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e0df      	b.n	8007464 <UART_SetConfig+0x390>
 80072a4:	231b      	movs	r3, #27
 80072a6:	2220      	movs	r2, #32
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	19db      	adds	r3, r3, r7
 80072ac:	2204      	movs	r2, #4
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	e0d8      	b.n	8007464 <UART_SetConfig+0x390>
 80072b2:	231b      	movs	r3, #27
 80072b4:	2220      	movs	r2, #32
 80072b6:	189b      	adds	r3, r3, r2
 80072b8:	19db      	adds	r3, r3, r7
 80072ba:	2208      	movs	r2, #8
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e0d1      	b.n	8007464 <UART_SetConfig+0x390>
 80072c0:	231b      	movs	r3, #27
 80072c2:	2220      	movs	r2, #32
 80072c4:	189b      	adds	r3, r3, r2
 80072c6:	19db      	adds	r3, r3, r7
 80072c8:	2210      	movs	r2, #16
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	e0ca      	b.n	8007464 <UART_SetConfig+0x390>
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a57      	ldr	r2, [pc, #348]	; (8007430 <UART_SetConfig+0x35c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d106      	bne.n	80072e6 <UART_SetConfig+0x212>
 80072d8:	231b      	movs	r3, #27
 80072da:	2220      	movs	r2, #32
 80072dc:	189b      	adds	r3, r3, r2
 80072de:	19db      	adds	r3, r3, r7
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
 80072e4:	e0be      	b.n	8007464 <UART_SetConfig+0x390>
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a52      	ldr	r2, [pc, #328]	; (8007434 <UART_SetConfig+0x360>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d106      	bne.n	80072fe <UART_SetConfig+0x22a>
 80072f0:	231b      	movs	r3, #27
 80072f2:	2220      	movs	r2, #32
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	19db      	adds	r3, r3, r7
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e0b2      	b.n	8007464 <UART_SetConfig+0x390>
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a4d      	ldr	r2, [pc, #308]	; (8007438 <UART_SetConfig+0x364>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d106      	bne.n	8007316 <UART_SetConfig+0x242>
 8007308:	231b      	movs	r3, #27
 800730a:	2220      	movs	r2, #32
 800730c:	189b      	adds	r3, r3, r2
 800730e:	19db      	adds	r3, r3, r7
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	e0a6      	b.n	8007464 <UART_SetConfig+0x390>
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3e      	ldr	r2, [pc, #248]	; (8007414 <UART_SetConfig+0x340>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d13e      	bne.n	800739e <UART_SetConfig+0x2ca>
 8007320:	4b40      	ldr	r3, [pc, #256]	; (8007424 <UART_SetConfig+0x350>)
 8007322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007324:	23c0      	movs	r3, #192	; 0xc0
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	4013      	ands	r3, r2
 800732a:	22c0      	movs	r2, #192	; 0xc0
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	4293      	cmp	r3, r2
 8007330:	d027      	beq.n	8007382 <UART_SetConfig+0x2ae>
 8007332:	22c0      	movs	r2, #192	; 0xc0
 8007334:	0112      	lsls	r2, r2, #4
 8007336:	4293      	cmp	r3, r2
 8007338:	d82a      	bhi.n	8007390 <UART_SetConfig+0x2bc>
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	0112      	lsls	r2, r2, #4
 800733e:	4293      	cmp	r3, r2
 8007340:	d011      	beq.n	8007366 <UART_SetConfig+0x292>
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	0112      	lsls	r2, r2, #4
 8007346:	4293      	cmp	r3, r2
 8007348:	d822      	bhi.n	8007390 <UART_SetConfig+0x2bc>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <UART_SetConfig+0x284>
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	00d2      	lsls	r2, r2, #3
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <UART_SetConfig+0x2a0>
 8007356:	e01b      	b.n	8007390 <UART_SetConfig+0x2bc>
 8007358:	231b      	movs	r3, #27
 800735a:	2220      	movs	r2, #32
 800735c:	189b      	adds	r3, r3, r2
 800735e:	19db      	adds	r3, r3, r7
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e07e      	b.n	8007464 <UART_SetConfig+0x390>
 8007366:	231b      	movs	r3, #27
 8007368:	2220      	movs	r2, #32
 800736a:	189b      	adds	r3, r3, r2
 800736c:	19db      	adds	r3, r3, r7
 800736e:	2202      	movs	r2, #2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	e077      	b.n	8007464 <UART_SetConfig+0x390>
 8007374:	231b      	movs	r3, #27
 8007376:	2220      	movs	r2, #32
 8007378:	189b      	adds	r3, r3, r2
 800737a:	19db      	adds	r3, r3, r7
 800737c:	2204      	movs	r2, #4
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e070      	b.n	8007464 <UART_SetConfig+0x390>
 8007382:	231b      	movs	r3, #27
 8007384:	2220      	movs	r2, #32
 8007386:	189b      	adds	r3, r3, r2
 8007388:	19db      	adds	r3, r3, r7
 800738a:	2208      	movs	r2, #8
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e069      	b.n	8007464 <UART_SetConfig+0x390>
 8007390:	231b      	movs	r3, #27
 8007392:	2220      	movs	r2, #32
 8007394:	189b      	adds	r3, r3, r2
 8007396:	19db      	adds	r3, r3, r7
 8007398:	2210      	movs	r2, #16
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e062      	b.n	8007464 <UART_SetConfig+0x390>
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <UART_SetConfig+0x344>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d157      	bne.n	8007458 <UART_SetConfig+0x384>
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <UART_SetConfig+0x350>)
 80073aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ac:	23c0      	movs	r3, #192	; 0xc0
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4013      	ands	r3, r2
 80073b2:	22c0      	movs	r2, #192	; 0xc0
 80073b4:	0092      	lsls	r2, r2, #2
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d040      	beq.n	800743c <UART_SetConfig+0x368>
 80073ba:	22c0      	movs	r2, #192	; 0xc0
 80073bc:	0092      	lsls	r2, r2, #2
 80073be:	4293      	cmp	r3, r2
 80073c0:	d843      	bhi.n	800744a <UART_SetConfig+0x376>
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	0092      	lsls	r2, r2, #2
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d011      	beq.n	80073ee <UART_SetConfig+0x31a>
 80073ca:	2280      	movs	r2, #128	; 0x80
 80073cc:	0092      	lsls	r2, r2, #2
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d83b      	bhi.n	800744a <UART_SetConfig+0x376>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <UART_SetConfig+0x30c>
 80073d6:	2280      	movs	r2, #128	; 0x80
 80073d8:	0052      	lsls	r2, r2, #1
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <UART_SetConfig+0x328>
 80073de:	e034      	b.n	800744a <UART_SetConfig+0x376>
 80073e0:	231b      	movs	r3, #27
 80073e2:	2220      	movs	r2, #32
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	19db      	adds	r3, r3, r7
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e03a      	b.n	8007464 <UART_SetConfig+0x390>
 80073ee:	231b      	movs	r3, #27
 80073f0:	2220      	movs	r2, #32
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	19db      	adds	r3, r3, r7
 80073f6:	2202      	movs	r2, #2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e033      	b.n	8007464 <UART_SetConfig+0x390>
 80073fc:	231b      	movs	r3, #27
 80073fe:	2220      	movs	r2, #32
 8007400:	189b      	adds	r3, r3, r2
 8007402:	19db      	adds	r3, r3, r7
 8007404:	2204      	movs	r2, #4
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e02c      	b.n	8007464 <UART_SetConfig+0x390>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	cfff69f3 	.word	0xcfff69f3
 8007410:	ffffcfff 	.word	0xffffcfff
 8007414:	40008000 	.word	0x40008000
 8007418:	40008400 	.word	0x40008400
 800741c:	11fff4ff 	.word	0x11fff4ff
 8007420:	40013800 	.word	0x40013800
 8007424:	40021000 	.word	0x40021000
 8007428:	40004400 	.word	0x40004400
 800742c:	40004800 	.word	0x40004800
 8007430:	40004c00 	.word	0x40004c00
 8007434:	40005000 	.word	0x40005000
 8007438:	40013c00 	.word	0x40013c00
 800743c:	231b      	movs	r3, #27
 800743e:	2220      	movs	r2, #32
 8007440:	189b      	adds	r3, r3, r2
 8007442:	19db      	adds	r3, r3, r7
 8007444:	2208      	movs	r2, #8
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	e00c      	b.n	8007464 <UART_SetConfig+0x390>
 800744a:	231b      	movs	r3, #27
 800744c:	2220      	movs	r2, #32
 800744e:	189b      	adds	r3, r3, r2
 8007450:	19db      	adds	r3, r3, r7
 8007452:	2210      	movs	r2, #16
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e005      	b.n	8007464 <UART_SetConfig+0x390>
 8007458:	231b      	movs	r3, #27
 800745a:	2220      	movs	r2, #32
 800745c:	189b      	adds	r3, r3, r2
 800745e:	19db      	adds	r3, r3, r7
 8007460:	2210      	movs	r2, #16
 8007462:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4ac1      	ldr	r2, [pc, #772]	; (8007770 <UART_SetConfig+0x69c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d005      	beq.n	800747a <UART_SetConfig+0x3a6>
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4ac0      	ldr	r2, [pc, #768]	; (8007774 <UART_SetConfig+0x6a0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d000      	beq.n	800747a <UART_SetConfig+0x3a6>
 8007478:	e093      	b.n	80075a2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800747a:	231b      	movs	r3, #27
 800747c:	2220      	movs	r2, #32
 800747e:	189b      	adds	r3, r3, r2
 8007480:	19db      	adds	r3, r3, r7
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d015      	beq.n	80074b4 <UART_SetConfig+0x3e0>
 8007488:	dc18      	bgt.n	80074bc <UART_SetConfig+0x3e8>
 800748a:	2b04      	cmp	r3, #4
 800748c:	d00d      	beq.n	80074aa <UART_SetConfig+0x3d6>
 800748e:	dc15      	bgt.n	80074bc <UART_SetConfig+0x3e8>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <UART_SetConfig+0x3c6>
 8007494:	2b02      	cmp	r3, #2
 8007496:	d005      	beq.n	80074a4 <UART_SetConfig+0x3d0>
 8007498:	e010      	b.n	80074bc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800749a:	f7fe f855 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800749e:	0003      	movs	r3, r0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a2:	e014      	b.n	80074ce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a4:	4bb4      	ldr	r3, [pc, #720]	; (8007778 <UART_SetConfig+0x6a4>)
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a8:	e011      	b.n	80074ce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074aa:	f7fd ffc1 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80074ae:	0003      	movs	r3, r0
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074b2:	e00c      	b.n	80074ce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b4:	2380      	movs	r3, #128	; 0x80
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ba:	e008      	b.n	80074ce <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80074c0:	231a      	movs	r3, #26
 80074c2:	2220      	movs	r2, #32
 80074c4:	189b      	adds	r3, r3, r2
 80074c6:	19db      	adds	r3, r3, r7
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
        break;
 80074cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d100      	bne.n	80074d6 <UART_SetConfig+0x402>
 80074d4:	e135      	b.n	8007742 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074da:	4ba8      	ldr	r3, [pc, #672]	; (800777c <UART_SetConfig+0x6a8>)
 80074dc:	0052      	lsls	r2, r2, #1
 80074de:	5ad3      	ldrh	r3, [r2, r3]
 80074e0:	0019      	movs	r1, r3
 80074e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074e4:	f7f8 fe2a 	bl	800013c <__udivsi3>
 80074e8:	0003      	movs	r3, r0
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	0013      	movs	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d305      	bcc.n	8007508 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007504:	429a      	cmp	r2, r3
 8007506:	d906      	bls.n	8007516 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007508:	231a      	movs	r3, #26
 800750a:	2220      	movs	r2, #32
 800750c:	189b      	adds	r3, r3, r2
 800750e:	19db      	adds	r3, r3, r7
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e044      	b.n	80075a0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007522:	4b96      	ldr	r3, [pc, #600]	; (800777c <UART_SetConfig+0x6a8>)
 8007524:	0052      	lsls	r2, r2, #1
 8007526:	5ad3      	ldrh	r3, [r2, r3]
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	69b8      	ldr	r0, [r7, #24]
 8007534:	69f9      	ldr	r1, [r7, #28]
 8007536:	f7f8 ffb5 	bl	80004a4 <__aeabi_uldivmod>
 800753a:	0002      	movs	r2, r0
 800753c:	000b      	movs	r3, r1
 800753e:	0e11      	lsrs	r1, r2, #24
 8007540:	021d      	lsls	r5, r3, #8
 8007542:	430d      	orrs	r5, r1
 8007544:	0214      	lsls	r4, r2, #8
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	68f9      	ldr	r1, [r7, #12]
 8007556:	1900      	adds	r0, r0, r4
 8007558:	4169      	adcs	r1, r5
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	2300      	movs	r3, #0
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f7f8 ff9c 	bl	80004a4 <__aeabi_uldivmod>
 800756c:	0002      	movs	r2, r0
 800756e:	000b      	movs	r3, r1
 8007570:	0013      	movs	r3, r2
 8007572:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007576:	23c0      	movs	r3, #192	; 0xc0
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	429a      	cmp	r2, r3
 800757c:	d309      	bcc.n	8007592 <UART_SetConfig+0x4be>
 800757e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	035b      	lsls	r3, r3, #13
 8007584:	429a      	cmp	r2, r3
 8007586:	d204      	bcs.n	8007592 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758e:	60da      	str	r2, [r3, #12]
 8007590:	e006      	b.n	80075a0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007592:	231a      	movs	r3, #26
 8007594:	2220      	movs	r2, #32
 8007596:	189b      	adds	r3, r3, r2
 8007598:	19db      	adds	r3, r3, r7
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800759e:	e0d0      	b.n	8007742 <UART_SetConfig+0x66e>
 80075a0:	e0cf      	b.n	8007742 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	69da      	ldr	r2, [r3, #28]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d000      	beq.n	80075b0 <UART_SetConfig+0x4dc>
 80075ae:	e070      	b.n	8007692 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80075b0:	231b      	movs	r3, #27
 80075b2:	2220      	movs	r2, #32
 80075b4:	189b      	adds	r3, r3, r2
 80075b6:	19db      	adds	r3, r3, r7
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d015      	beq.n	80075ea <UART_SetConfig+0x516>
 80075be:	dc18      	bgt.n	80075f2 <UART_SetConfig+0x51e>
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d00d      	beq.n	80075e0 <UART_SetConfig+0x50c>
 80075c4:	dc15      	bgt.n	80075f2 <UART_SetConfig+0x51e>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <UART_SetConfig+0x4fc>
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d005      	beq.n	80075da <UART_SetConfig+0x506>
 80075ce:	e010      	b.n	80075f2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fd ffba 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 80075d4:	0003      	movs	r3, r0
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d8:	e014      	b.n	8007604 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075da:	4b67      	ldr	r3, [pc, #412]	; (8007778 <UART_SetConfig+0x6a4>)
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075de:	e011      	b.n	8007604 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e0:	f7fd ff26 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80075e4:	0003      	movs	r3, r0
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075e8:	e00c      	b.n	8007604 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075f0:	e008      	b.n	8007604 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075f6:	231a      	movs	r3, #26
 80075f8:	2220      	movs	r2, #32
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	19db      	adds	r3, r3, r7
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
        break;
 8007602:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	2b00      	cmp	r3, #0
 8007608:	d100      	bne.n	800760c <UART_SetConfig+0x538>
 800760a:	e09a      	b.n	8007742 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007610:	4b5a      	ldr	r3, [pc, #360]	; (800777c <UART_SetConfig+0x6a8>)
 8007612:	0052      	lsls	r2, r2, #1
 8007614:	5ad3      	ldrh	r3, [r2, r3]
 8007616:	0019      	movs	r1, r3
 8007618:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800761a:	f7f8 fd8f 	bl	800013c <__udivsi3>
 800761e:	0003      	movs	r3, r0
 8007620:	005a      	lsls	r2, r3, #1
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	18d2      	adds	r2, r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	0019      	movs	r1, r3
 8007630:	0010      	movs	r0, r2
 8007632:	f7f8 fd83 	bl	800013c <__udivsi3>
 8007636:	0003      	movs	r3, r0
 8007638:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b0f      	cmp	r3, #15
 800763e:	d921      	bls.n	8007684 <UART_SetConfig+0x5b0>
 8007640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007642:	2380      	movs	r3, #128	; 0x80
 8007644:	025b      	lsls	r3, r3, #9
 8007646:	429a      	cmp	r2, r3
 8007648:	d21c      	bcs.n	8007684 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	b29a      	uxth	r2, r3
 800764e:	200e      	movs	r0, #14
 8007650:	2420      	movs	r4, #32
 8007652:	1903      	adds	r3, r0, r4
 8007654:	19db      	adds	r3, r3, r7
 8007656:	210f      	movs	r1, #15
 8007658:	438a      	bics	r2, r1
 800765a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	2207      	movs	r2, #7
 8007664:	4013      	ands	r3, r2
 8007666:	b299      	uxth	r1, r3
 8007668:	1903      	adds	r3, r0, r4
 800766a:	19db      	adds	r3, r3, r7
 800766c:	1902      	adds	r2, r0, r4
 800766e:	19d2      	adds	r2, r2, r7
 8007670:	8812      	ldrh	r2, [r2, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	1902      	adds	r2, r0, r4
 800767c:	19d2      	adds	r2, r2, r7
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e05e      	b.n	8007742 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007684:	231a      	movs	r3, #26
 8007686:	2220      	movs	r2, #32
 8007688:	189b      	adds	r3, r3, r2
 800768a:	19db      	adds	r3, r3, r7
 800768c:	2201      	movs	r2, #1
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	e057      	b.n	8007742 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007692:	231b      	movs	r3, #27
 8007694:	2220      	movs	r2, #32
 8007696:	189b      	adds	r3, r3, r2
 8007698:	19db      	adds	r3, r3, r7
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d015      	beq.n	80076cc <UART_SetConfig+0x5f8>
 80076a0:	dc18      	bgt.n	80076d4 <UART_SetConfig+0x600>
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00d      	beq.n	80076c2 <UART_SetConfig+0x5ee>
 80076a6:	dc15      	bgt.n	80076d4 <UART_SetConfig+0x600>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <UART_SetConfig+0x5de>
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d005      	beq.n	80076bc <UART_SetConfig+0x5e8>
 80076b0:	e010      	b.n	80076d4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b2:	f7fd ff49 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 80076b6:	0003      	movs	r3, r0
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ba:	e014      	b.n	80076e6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076bc:	4b2e      	ldr	r3, [pc, #184]	; (8007778 <UART_SetConfig+0x6a4>)
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076c0:	e011      	b.n	80076e6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c2:	f7fd feb5 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80076c6:	0003      	movs	r3, r0
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ca:	e00c      	b.n	80076e6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d2:	e008      	b.n	80076e6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80076d8:	231a      	movs	r3, #26
 80076da:	2220      	movs	r2, #32
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	19db      	adds	r3, r3, r7
 80076e0:	2201      	movs	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
        break;
 80076e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d02a      	beq.n	8007742 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f0:	4b22      	ldr	r3, [pc, #136]	; (800777c <UART_SetConfig+0x6a8>)
 80076f2:	0052      	lsls	r2, r2, #1
 80076f4:	5ad3      	ldrh	r3, [r2, r3]
 80076f6:	0019      	movs	r1, r3
 80076f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076fa:	f7f8 fd1f 	bl	800013c <__udivsi3>
 80076fe:	0003      	movs	r3, r0
 8007700:	001a      	movs	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	18d2      	adds	r2, r2, r3
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	0019      	movs	r1, r3
 8007710:	0010      	movs	r0, r2
 8007712:	f7f8 fd13 	bl	800013c <__udivsi3>
 8007716:	0003      	movs	r3, r0
 8007718:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	2b0f      	cmp	r3, #15
 800771e:	d90a      	bls.n	8007736 <UART_SetConfig+0x662>
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	2380      	movs	r3, #128	; 0x80
 8007724:	025b      	lsls	r3, r3, #9
 8007726:	429a      	cmp	r2, r3
 8007728:	d205      	bcs.n	8007736 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	b29a      	uxth	r2, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e005      	b.n	8007742 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007736:	231a      	movs	r3, #26
 8007738:	2220      	movs	r2, #32
 800773a:	189b      	adds	r3, r3, r2
 800773c:	19db      	adds	r3, r3, r7
 800773e:	2201      	movs	r2, #1
 8007740:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	226a      	movs	r2, #106	; 0x6a
 8007746:	2101      	movs	r1, #1
 8007748:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2268      	movs	r2, #104	; 0x68
 800774e:	2101      	movs	r1, #1
 8007750:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	2200      	movs	r2, #0
 8007756:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	2200      	movs	r2, #0
 800775c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800775e:	231a      	movs	r3, #26
 8007760:	2220      	movs	r2, #32
 8007762:	189b      	adds	r3, r3, r2
 8007764:	19db      	adds	r3, r3, r7
 8007766:	781b      	ldrb	r3, [r3, #0]
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b010      	add	sp, #64	; 0x40
 800776e:	bdb0      	pop	{r4, r5, r7, pc}
 8007770:	40008000 	.word	0x40008000
 8007774:	40008400 	.word	0x40008400
 8007778:	00f42400 	.word	0x00f42400
 800777c:	08014860 	.word	0x08014860

08007780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	2208      	movs	r2, #8
 800778e:	4013      	ands	r3, r2
 8007790:	d00b      	beq.n	80077aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <UART_AdvFeatureConfig+0x144>)
 800779a:	4013      	ands	r3, r2
 800779c:	0019      	movs	r1, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	2201      	movs	r2, #1
 80077b0:	4013      	ands	r3, r2
 80077b2:	d00b      	beq.n	80077cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4a43      	ldr	r2, [pc, #268]	; (80078c8 <UART_AdvFeatureConfig+0x148>)
 80077bc:	4013      	ands	r3, r2
 80077be:	0019      	movs	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	2202      	movs	r2, #2
 80077d2:	4013      	ands	r3, r2
 80077d4:	d00b      	beq.n	80077ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4a3b      	ldr	r2, [pc, #236]	; (80078cc <UART_AdvFeatureConfig+0x14c>)
 80077de:	4013      	ands	r3, r2
 80077e0:	0019      	movs	r1, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	2204      	movs	r2, #4
 80077f4:	4013      	ands	r3, r2
 80077f6:	d00b      	beq.n	8007810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	4a34      	ldr	r2, [pc, #208]	; (80078d0 <UART_AdvFeatureConfig+0x150>)
 8007800:	4013      	ands	r3, r2
 8007802:	0019      	movs	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	2210      	movs	r2, #16
 8007816:	4013      	ands	r3, r2
 8007818:	d00b      	beq.n	8007832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4a2c      	ldr	r2, [pc, #176]	; (80078d4 <UART_AdvFeatureConfig+0x154>)
 8007822:	4013      	ands	r3, r2
 8007824:	0019      	movs	r1, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	2220      	movs	r2, #32
 8007838:	4013      	ands	r3, r2
 800783a:	d00b      	beq.n	8007854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	4a25      	ldr	r2, [pc, #148]	; (80078d8 <UART_AdvFeatureConfig+0x158>)
 8007844:	4013      	ands	r3, r2
 8007846:	0019      	movs	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	2240      	movs	r2, #64	; 0x40
 800785a:	4013      	ands	r3, r2
 800785c:	d01d      	beq.n	800789a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a1d      	ldr	r2, [pc, #116]	; (80078dc <UART_AdvFeatureConfig+0x15c>)
 8007866:	4013      	ands	r3, r2
 8007868:	0019      	movs	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	035b      	lsls	r3, r3, #13
 800787e:	429a      	cmp	r2, r3
 8007880:	d10b      	bne.n	800789a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a15      	ldr	r2, [pc, #84]	; (80078e0 <UART_AdvFeatureConfig+0x160>)
 800788a:	4013      	ands	r3, r2
 800788c:	0019      	movs	r1, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	2280      	movs	r2, #128	; 0x80
 80078a0:	4013      	ands	r3, r2
 80078a2:	d00b      	beq.n	80078bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4a0e      	ldr	r2, [pc, #56]	; (80078e4 <UART_AdvFeatureConfig+0x164>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	0019      	movs	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	605a      	str	r2, [r3, #4]
  }
}
 80078bc:	46c0      	nop			; (mov r8, r8)
 80078be:	46bd      	mov	sp, r7
 80078c0:	b002      	add	sp, #8
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	ffff7fff 	.word	0xffff7fff
 80078c8:	fffdffff 	.word	0xfffdffff
 80078cc:	fffeffff 	.word	0xfffeffff
 80078d0:	fffbffff 	.word	0xfffbffff
 80078d4:	ffffefff 	.word	0xffffefff
 80078d8:	ffffdfff 	.word	0xffffdfff
 80078dc:	ffefffff 	.word	0xffefffff
 80078e0:	ff9fffff 	.word	0xff9fffff
 80078e4:	fff7ffff 	.word	0xfff7ffff

080078e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b092      	sub	sp, #72	; 0x48
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2290      	movs	r2, #144	; 0x90
 80078f4:	2100      	movs	r1, #0
 80078f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078f8:	f7fc fc80 	bl	80041fc <HAL_GetTick>
 80078fc:	0003      	movs	r3, r0
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2208      	movs	r2, #8
 8007908:	4013      	ands	r3, r2
 800790a:	2b08      	cmp	r3, #8
 800790c:	d12d      	bne.n	800796a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	0391      	lsls	r1, r2, #14
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4a47      	ldr	r2, [pc, #284]	; (8007a34 <UART_CheckIdleState+0x14c>)
 8007918:	9200      	str	r2, [sp, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	f000 f88e 	bl	8007a3c <UART_WaitOnFlagUntilTimeout>
 8007920:	1e03      	subs	r3, r0, #0
 8007922:	d022      	beq.n	800796a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007924:	f3ef 8310 	mrs	r3, PRIMASK
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38
 800792e:	2301      	movs	r3, #1
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	f383 8810 	msr	PRIMASK, r3
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	438a      	bics	r2, r1
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	f383 8810 	msr	PRIMASK, r3
}
 8007954:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2288      	movs	r2, #136	; 0x88
 800795a:	2120      	movs	r1, #32
 800795c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2284      	movs	r2, #132	; 0x84
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e060      	b.n	8007a2c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2204      	movs	r2, #4
 8007972:	4013      	ands	r3, r2
 8007974:	2b04      	cmp	r3, #4
 8007976:	d146      	bne.n	8007a06 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	03d1      	lsls	r1, r2, #15
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <UART_CheckIdleState+0x14c>)
 8007982:	9200      	str	r2, [sp, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	f000 f859 	bl	8007a3c <UART_WaitOnFlagUntilTimeout>
 800798a:	1e03      	subs	r3, r0, #0
 800798c:	d03b      	beq.n	8007a06 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798e:	f3ef 8310 	mrs	r3, PRIMASK
 8007992:	60fb      	str	r3, [r7, #12]
  return(result);
 8007994:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
 8007998:	2301      	movs	r3, #1
 800799a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f383 8810 	msr	PRIMASK, r3
}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4922      	ldr	r1, [pc, #136]	; (8007a38 <UART_CheckIdleState+0x150>)
 80079b0:	400a      	ands	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f383 8810 	msr	PRIMASK, r3
}
 80079be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c0:	f3ef 8310 	mrs	r3, PRIMASK
 80079c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c8:	633b      	str	r3, [r7, #48]	; 0x30
 80079ca:	2301      	movs	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f383 8810 	msr	PRIMASK, r3
}
 80079d4:	46c0      	nop			; (mov r8, r8)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2101      	movs	r1, #1
 80079e2:	438a      	bics	r2, r1
 80079e4:	609a      	str	r2, [r3, #8]
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f383 8810 	msr	PRIMASK, r3
}
 80079f0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	228c      	movs	r2, #140	; 0x8c
 80079f6:	2120      	movs	r1, #32
 80079f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2284      	movs	r2, #132	; 0x84
 80079fe:	2100      	movs	r1, #0
 8007a00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e012      	b.n	8007a2c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2288      	movs	r2, #136	; 0x88
 8007a0a:	2120      	movs	r1, #32
 8007a0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	228c      	movs	r2, #140	; 0x8c
 8007a12:	2120      	movs	r1, #32
 8007a14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2284      	movs	r2, #132	; 0x84
 8007a26:	2100      	movs	r1, #0
 8007a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b010      	add	sp, #64	; 0x40
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	01ffffff 	.word	0x01ffffff
 8007a38:	fffffedf 	.word	0xfffffedf

08007a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	1dfb      	adds	r3, r7, #7
 8007a4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4c:	e051      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3301      	adds	r3, #1
 8007a52:	d04e      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a54:	f7fc fbd2 	bl	80041fc <HAL_GetTick>
 8007a58:	0002      	movs	r2, r0
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e051      	b.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2204      	movs	r2, #4
 8007a76:	4013      	ands	r3, r2
 8007a78:	d03b      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d038      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d035      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d111      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f000 f83c 	bl	8007b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2290      	movs	r2, #144	; 0x90
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2284      	movs	r2, #132	; 0x84
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e02c      	b.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69da      	ldr	r2, [r3, #28]
 8007abe:	2380      	movs	r3, #128	; 0x80
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d112      	bne.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2280      	movs	r2, #128	; 0x80
 8007ad2:	0112      	lsls	r2, r2, #4
 8007ad4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f000 f81f 	bl	8007b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2290      	movs	r2, #144	; 0x90
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2284      	movs	r2, #132	; 0x84
 8007aea:	2100      	movs	r1, #0
 8007aec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e00f      	b.n	8007b12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	425a      	negs	r2, r3
 8007b02:	4153      	adcs	r3, r2
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	001a      	movs	r2, r3
 8007b08:	1dfb      	adds	r3, r7, #7
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d09e      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b004      	add	sp, #16
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	; 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b24:	f3ef 8310 	mrs	r3, PRIMASK
 8007b28:	617b      	str	r3, [r7, #20]
  return(result);
 8007b2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2e:	2301      	movs	r3, #1
 8007b30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f383 8810 	msr	PRIMASK, r3
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4926      	ldr	r1, [pc, #152]	; (8007be0 <UART_EndRxTransfer+0xc4>)
 8007b46:	400a      	ands	r2, r1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f383 8810 	msr	PRIMASK, r3
}
 8007b54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b56:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5a:	623b      	str	r3, [r7, #32]
  return(result);
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b60:	2301      	movs	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	f383 8810 	msr	PRIMASK, r3
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	491b      	ldr	r1, [pc, #108]	; (8007be4 <UART_EndRxTransfer+0xc8>)
 8007b78:	400a      	ands	r2, r1
 8007b7a:	609a      	str	r2, [r3, #8]
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d118      	bne.n	8007bc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b90:	f3ef 8310 	mrs	r3, PRIMASK
 8007b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f383 8810 	msr	PRIMASK, r3
}
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2110      	movs	r1, #16
 8007bb2:	438a      	bics	r2, r1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	228c      	movs	r2, #140	; 0x8c
 8007bc6:	2120      	movs	r1, #32
 8007bc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b00e      	add	sp, #56	; 0x38
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	fffffedf 	.word	0xfffffedf
 8007be4:	effffffe 	.word	0xeffffffe

08007be8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2284      	movs	r2, #132	; 0x84
 8007bf4:	5c9b      	ldrb	r3, [r3, r2]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_UARTEx_DisableFifoMode+0x16>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e027      	b.n	8007c4e <HAL_UARTEx_DisableFifoMode+0x66>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2284      	movs	r2, #132	; 0x84
 8007c02:	2101      	movs	r1, #1
 8007c04:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2288      	movs	r2, #136	; 0x88
 8007c0a:	2124      	movs	r1, #36	; 0x24
 8007c0c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2101      	movs	r1, #1
 8007c22:	438a      	bics	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a0b      	ldr	r2, [pc, #44]	; (8007c58 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2288      	movs	r2, #136	; 0x88
 8007c40:	2120      	movs	r1, #32
 8007c42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2284      	movs	r2, #132	; 0x84
 8007c48:	2100      	movs	r1, #0
 8007c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b004      	add	sp, #16
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	dfffffff 	.word	0xdfffffff

08007c5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2284      	movs	r2, #132	; 0x84
 8007c6a:	5c9b      	ldrb	r3, [r3, r2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e02e      	b.n	8007cd2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2284      	movs	r2, #132	; 0x84
 8007c78:	2101      	movs	r1, #1
 8007c7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2288      	movs	r2, #136	; 0x88
 8007c80:	2124      	movs	r1, #36	; 0x24
 8007c82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2101      	movs	r1, #1
 8007c98:	438a      	bics	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	08d9      	lsrs	r1, r3, #3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f000 f854 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2288      	movs	r2, #136	; 0x88
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2284      	movs	r2, #132	; 0x84
 8007ccc:	2100      	movs	r1, #0
 8007cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b004      	add	sp, #16
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2284      	movs	r2, #132	; 0x84
 8007cea:	5c9b      	ldrb	r3, [r3, r2]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e02f      	b.n	8007d54 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2284      	movs	r2, #132	; 0x84
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2288      	movs	r2, #136	; 0x88
 8007d00:	2124      	movs	r1, #36	; 0x24
 8007d02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2101      	movs	r1, #1
 8007d18:	438a      	bics	r2, r1
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	4a0e      	ldr	r2, [pc, #56]	; (8007d5c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	0019      	movs	r1, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f000 f813 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2288      	movs	r2, #136	; 0x88
 8007d46:	2120      	movs	r1, #32
 8007d48:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2284      	movs	r2, #132	; 0x84
 8007d4e:	2100      	movs	r1, #0
 8007d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b004      	add	sp, #16
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	f1ffffff 	.word	0xf1ffffff

08007d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d108      	bne.n	8007d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	226a      	movs	r2, #106	; 0x6a
 8007d74:	2101      	movs	r1, #1
 8007d76:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2268      	movs	r2, #104	; 0x68
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d80:	e043      	b.n	8007e0a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d82:	260f      	movs	r6, #15
 8007d84:	19bb      	adds	r3, r7, r6
 8007d86:	2208      	movs	r2, #8
 8007d88:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d8a:	200e      	movs	r0, #14
 8007d8c:	183b      	adds	r3, r7, r0
 8007d8e:	2208      	movs	r2, #8
 8007d90:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	0e5b      	lsrs	r3, r3, #25
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	240d      	movs	r4, #13
 8007d9e:	193b      	adds	r3, r7, r4
 8007da0:	2107      	movs	r1, #7
 8007da2:	400a      	ands	r2, r1
 8007da4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0f5b      	lsrs	r3, r3, #29
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	250c      	movs	r5, #12
 8007db2:	197b      	adds	r3, r7, r5
 8007db4:	2107      	movs	r1, #7
 8007db6:	400a      	ands	r2, r1
 8007db8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dba:	183b      	adds	r3, r7, r0
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	197a      	adds	r2, r7, r5
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	4914      	ldr	r1, [pc, #80]	; (8007e14 <UARTEx_SetNbDataToProcess+0xb4>)
 8007dc4:	5c8a      	ldrb	r2, [r1, r2]
 8007dc6:	435a      	muls	r2, r3
 8007dc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dca:	197b      	adds	r3, r7, r5
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <UARTEx_SetNbDataToProcess+0xb8>)
 8007dd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dd2:	0019      	movs	r1, r3
 8007dd4:	f7f8 fa3c 	bl	8000250 <__divsi3>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	b299      	uxth	r1, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	226a      	movs	r2, #106	; 0x6a
 8007de0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007de2:	19bb      	adds	r3, r7, r6
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	193a      	adds	r2, r7, r4
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	490a      	ldr	r1, [pc, #40]	; (8007e14 <UARTEx_SetNbDataToProcess+0xb4>)
 8007dec:	5c8a      	ldrb	r2, [r1, r2]
 8007dee:	435a      	muls	r2, r3
 8007df0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007df2:	193b      	adds	r3, r7, r4
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	4a08      	ldr	r2, [pc, #32]	; (8007e18 <UARTEx_SetNbDataToProcess+0xb8>)
 8007df8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dfa:	0019      	movs	r1, r3
 8007dfc:	f7f8 fa28 	bl	8000250 <__divsi3>
 8007e00:	0003      	movs	r3, r0
 8007e02:	b299      	uxth	r1, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2268      	movs	r2, #104	; 0x68
 8007e08:	5299      	strh	r1, [r3, r2]
}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b005      	add	sp, #20
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	08014878 	.word	0x08014878
 8007e18:	08014880 	.word	0x08014880

08007e1c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b0e4      	sub	sp, #400	; 0x190
 8007e20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e22:	24c8      	movs	r4, #200	; 0xc8
 8007e24:	193b      	adds	r3, r7, r4
 8007e26:	0018      	movs	r0, r3
 8007e28:	23c6      	movs	r3, #198	; 0xc6
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	f004 f9d1 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <astronode_send_cfg_sr+0x64>)
 8007e34:	25c8      	movs	r5, #200	; 0xc8
 8007e36:	006d      	lsls	r5, r5, #1
 8007e38:	195b      	adds	r3, r3, r5
 8007e3a:	19db      	adds	r3, r3, r7
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	23c6      	movs	r3, #198	; 0xc6
 8007e40:	001a      	movs	r2, r3
 8007e42:	2100      	movs	r1, #0
 8007e44:	f004 f9c6 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007e48:	193b      	adds	r3, r7, r4
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007e4e:	003a      	movs	r2, r7
 8007e50:	193b      	adds	r3, r7, r4
 8007e52:	0011      	movs	r1, r2
 8007e54:	0018      	movs	r0, r3
 8007e56:	f001 fa87 	bl	8009368 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <astronode_send_cfg_sr+0x64>)
 8007e5c:	195b      	adds	r3, r3, r5
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b90      	cmp	r3, #144	; 0x90
 8007e64:	d104      	bne.n	8007e70 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007e66:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <astronode_send_cfg_sr+0x68>)
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f7fb fa8d 	bl	8003388 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007e6e:	e003      	b.n	8007e78 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <astronode_send_cfg_sr+0x6c>)
 8007e72:	0018      	movs	r0, r3
 8007e74:	f7fb fa88 	bl	8003388 <send_debug_logs>
}
 8007e78:	46c0      	nop			; (mov r8, r8)
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b064      	add	sp, #400	; 0x190
 8007e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e80:	fffffe70 	.word	0xfffffe70
 8007e84:	080132ac 	.word	0x080132ac
 8007e88:	080132e0 	.word	0x080132e0

08007e8c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b0e7      	sub	sp, #412	; 0x19c
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	0005      	movs	r5, r0
 8007e94:	000c      	movs	r4, r1
 8007e96:	0010      	movs	r0, r2
 8007e98:	0019      	movs	r1, r3
 8007e9a:	4b4b      	ldr	r3, [pc, #300]	; (8007fc8 <astronode_send_cfg_wr+0x13c>)
 8007e9c:	26cc      	movs	r6, #204	; 0xcc
 8007e9e:	0076      	lsls	r6, r6, #1
 8007ea0:	199b      	adds	r3, r3, r6
 8007ea2:	19db      	adds	r3, r3, r7
 8007ea4:	1c2a      	adds	r2, r5, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <astronode_send_cfg_wr+0x140>)
 8007eaa:	0035      	movs	r5, r6
 8007eac:	195b      	adds	r3, r3, r5
 8007eae:	19db      	adds	r3, r3, r7
 8007eb0:	1c22      	adds	r2, r4, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	4b46      	ldr	r3, [pc, #280]	; (8007fd0 <astronode_send_cfg_wr+0x144>)
 8007eb6:	002c      	movs	r4, r5
 8007eb8:	191b      	adds	r3, r3, r4
 8007eba:	19db      	adds	r3, r3, r7
 8007ebc:	1c02      	adds	r2, r0, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
 8007ec0:	4b44      	ldr	r3, [pc, #272]	; (8007fd4 <astronode_send_cfg_wr+0x148>)
 8007ec2:	191b      	adds	r3, r3, r4
 8007ec4:	19db      	adds	r3, r3, r7
 8007ec6:	1c0a      	adds	r2, r1, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007eca:	25d0      	movs	r5, #208	; 0xd0
 8007ecc:	197b      	adds	r3, r7, r5
 8007ece:	0018      	movs	r0, r3
 8007ed0:	23c6      	movs	r3, #198	; 0xc6
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f004 f97d 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8007eda:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <astronode_send_cfg_wr+0x14c>)
 8007edc:	191b      	adds	r3, r3, r4
 8007ede:	19db      	adds	r3, r3, r7
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	23c6      	movs	r3, #198	; 0xc6
 8007ee4:	001a      	movs	r2, r3
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	f004 f974 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007eec:	0029      	movs	r1, r5
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	2205      	movs	r2, #5
 8007ef2:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007ef4:	4b34      	ldr	r3, [pc, #208]	; (8007fc8 <astronode_send_cfg_wr+0x13c>)
 8007ef6:	191b      	adds	r3, r3, r4
 8007ef8:	19db      	adds	r3, r3, r7
 8007efa:	2200      	movs	r2, #0
 8007efc:	569a      	ldrsb	r2, [r3, r2]
 8007efe:	4b33      	ldr	r3, [pc, #204]	; (8007fcc <astronode_send_cfg_wr+0x140>)
 8007f00:	191b      	adds	r3, r3, r4
 8007f02:	19db      	adds	r3, r3, r7
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <astronode_send_cfg_wr+0x144>)
 8007f10:	191b      	adds	r3, r3, r4
 8007f12:	19db      	adds	r3, r3, r7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007f1e:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <astronode_send_cfg_wr+0x148>)
 8007f20:	191b      	adds	r3, r3, r4
 8007f22:	19db      	adds	r3, r3, r7
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007f30:	187b      	adds	r3, r7, r1
 8007f32:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007f34:	23d4      	movs	r3, #212	; 0xd4
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	2508      	movs	r5, #8
 8007f3a:	195b      	adds	r3, r3, r5
 8007f3c:	19db      	adds	r3, r3, r7
 8007f3e:	2200      	movs	r2, #0
 8007f40:	569a      	ldrsb	r2, [r3, r2]
 8007f42:	23d6      	movs	r3, #214	; 0xd6
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	195b      	adds	r3, r3, r5
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007f54:	23d8      	movs	r3, #216	; 0xd8
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	195b      	adds	r3, r3, r5
 8007f5a:	19db      	adds	r3, r3, r7
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	4313      	orrs	r3, r2
 8007f64:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007f66:	23da      	movs	r3, #218	; 0xda
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	195b      	adds	r3, r3, r5
 8007f6c:	19db      	adds	r3, r3, r7
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	4313      	orrs	r3, r2
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007f7a:	187b      	adds	r3, r7, r1
 8007f7c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007f7e:	0008      	movs	r0, r1
 8007f80:	187b      	adds	r3, r7, r1
 8007f82:	22c4      	movs	r2, #196	; 0xc4
 8007f84:	2103      	movs	r1, #3
 8007f86:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f88:	002b      	movs	r3, r5
 8007f8a:	18fa      	adds	r2, r7, r3
 8007f8c:	183b      	adds	r3, r7, r0
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f001 f9e9 	bl	8009368 <astronode_transport_send_receive>
 8007f96:	0003      	movs	r3, r0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10f      	bne.n	8007fbc <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <astronode_send_cfg_wr+0x14c>)
 8007f9e:	191b      	adds	r3, r3, r4
 8007fa0:	19db      	adds	r3, r3, r7
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b85      	cmp	r3, #133	; 0x85
 8007fa6:	d105      	bne.n	8007fb4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007fa8:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <astronode_send_cfg_wr+0x150>)
 8007faa:	0018      	movs	r0, r3
 8007fac:	f7fb f9ec 	bl	8003388 <send_debug_logs>
            return true ;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e004      	b.n	8007fbe <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <astronode_send_cfg_wr+0x154>)
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f7fb f9e6 	bl	8003388 <send_debug_logs>
        }
    }
    return false ;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b067      	add	sp, #412	; 0x19c
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	fffffe6f 	.word	0xfffffe6f
 8007fcc:	fffffe6e 	.word	0xfffffe6e
 8007fd0:	fffffe6d 	.word	0xfffffe6d
 8007fd4:	fffffe6c 	.word	0xfffffe6c
 8007fd8:	fffffe70 	.word	0xfffffe70
 8007fdc:	08013314 	.word	0x08013314
 8007fe0:	08013340 	.word	0x08013340

08007fe4 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe6:	b0ed      	sub	sp, #436	; 0x1b4
 8007fe8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007fea:	21c8      	movs	r1, #200	; 0xc8
 8007fec:	2318      	movs	r3, #24
 8007fee:	18cb      	adds	r3, r1, r3
 8007ff0:	19db      	adds	r3, r3, r7
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	23c6      	movs	r3, #198	; 0xc6
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	f004 f8eb 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8007ffe:	4b4a      	ldr	r3, [pc, #296]	; (8008128 <astronode_send_mgi_rr+0x144>)
 8008000:	26cc      	movs	r6, #204	; 0xcc
 8008002:	0076      	lsls	r6, r6, #1
 8008004:	199b      	adds	r3, r3, r6
 8008006:	2218      	movs	r2, #24
 8008008:	4694      	mov	ip, r2
 800800a:	44bc      	add	ip, r7
 800800c:	4463      	add	r3, ip
 800800e:	0018      	movs	r0, r3
 8008010:	23c6      	movs	r3, #198	; 0xc6
 8008012:	001a      	movs	r2, r3
 8008014:	2100      	movs	r1, #0
 8008016:	f004 f8dd 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800801a:	21c8      	movs	r1, #200	; 0xc8
 800801c:	2318      	movs	r3, #24
 800801e:	18cb      	adds	r3, r1, r3
 8008020:	19db      	adds	r3, r3, r7
 8008022:	2219      	movs	r2, #25
 8008024:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008026:	2318      	movs	r3, #24
 8008028:	18fa      	adds	r2, r7, r3
 800802a:	2318      	movs	r3, #24
 800802c:	18cb      	adds	r3, r1, r3
 800802e:	19db      	adds	r3, r3, r7
 8008030:	0011      	movs	r1, r2
 8008032:	0018      	movs	r0, r3
 8008034:	f001 f998 	bl	8009368 <astronode_transport_send_receive>
 8008038:	0003      	movs	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d16f      	bne.n	800811e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800803e:	4b3a      	ldr	r3, [pc, #232]	; (8008128 <astronode_send_mgi_rr+0x144>)
 8008040:	0032      	movs	r2, r6
 8008042:	189b      	adds	r3, r3, r2
 8008044:	2118      	movs	r1, #24
 8008046:	468c      	mov	ip, r1
 8008048:	44bc      	add	ip, r7
 800804a:	4463      	add	r3, ip
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b99      	cmp	r3, #153	; 0x99
 8008050:	d161      	bne.n	8008116 <astronode_send_mgi_rr+0x132>
        {
 8008052:	466b      	mov	r3, sp
 8008054:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008056:	4b34      	ldr	r3, [pc, #208]	; (8008128 <astronode_send_mgi_rr+0x144>)
 8008058:	189b      	adds	r3, r3, r2
 800805a:	2218      	movs	r2, #24
 800805c:	4694      	mov	ip, r2
 800805e:	44bc      	add	ip, r7
 8008060:	4463      	add	r3, ip
 8008062:	22c4      	movs	r2, #196	; 0xc4
 8008064:	5a9b      	ldrh	r3, [r3, r2]
 8008066:	001a      	movs	r2, r3
 8008068:	3a01      	subs	r2, #1
 800806a:	21ca      	movs	r1, #202	; 0xca
 800806c:	0049      	lsls	r1, r1, #1
 800806e:	2018      	movs	r0, #24
 8008070:	1809      	adds	r1, r1, r0
 8008072:	19c9      	adds	r1, r1, r7
 8008074:	600a      	str	r2, [r1, #0]
 8008076:	001c      	movs	r4, r3
 8008078:	2200      	movs	r2, #0
 800807a:	0015      	movs	r5, r2
 800807c:	0020      	movs	r0, r4
 800807e:	0029      	movs	r1, r5
 8008080:	0004      	movs	r4, r0
 8008082:	0f62      	lsrs	r2, r4, #29
 8008084:	000c      	movs	r4, r1
 8008086:	00e4      	lsls	r4, r4, #3
 8008088:	617c      	str	r4, [r7, #20]
 800808a:	697c      	ldr	r4, [r7, #20]
 800808c:	4314      	orrs	r4, r2
 800808e:	617c      	str	r4, [r7, #20]
 8008090:	0001      	movs	r1, r0
 8008092:	00c9      	lsls	r1, r1, #3
 8008094:	6139      	str	r1, [r7, #16]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	6838      	ldr	r0, [r7, #0]
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	0004      	movs	r4, r0
 80080a2:	0f62      	lsrs	r2, r4, #29
 80080a4:	000c      	movs	r4, r1
 80080a6:	00e4      	lsls	r4, r4, #3
 80080a8:	60fc      	str	r4, [r7, #12]
 80080aa:	68fc      	ldr	r4, [r7, #12]
 80080ac:	4314      	orrs	r4, r2
 80080ae:	60fc      	str	r4, [r7, #12]
 80080b0:	0001      	movs	r1, r0
 80080b2:	00ca      	lsls	r2, r1, #3
 80080b4:	60ba      	str	r2, [r7, #8]
 80080b6:	3307      	adds	r3, #7
 80080b8:	08db      	lsrs	r3, r3, #3
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4669      	mov	r1, sp
 80080be:	1acb      	subs	r3, r1, r3
 80080c0:	469d      	mov	sp, r3
 80080c2:	466b      	mov	r3, sp
 80080c4:	3300      	adds	r3, #0
 80080c6:	24c8      	movs	r4, #200	; 0xc8
 80080c8:	0064      	lsls	r4, r4, #1
 80080ca:	2218      	movs	r2, #24
 80080cc:	18a2      	adds	r2, r4, r2
 80080ce:	19d1      	adds	r1, r2, r7
 80080d0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <astronode_send_mgi_rr+0x148>)
 80080d4:	0018      	movs	r0, r3
 80080d6:	f7fb f957 	bl	8003388 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <astronode_send_mgi_rr+0x144>)
 80080dc:	22cc      	movs	r2, #204	; 0xcc
 80080de:	0052      	lsls	r2, r2, #1
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	2218      	movs	r2, #24
 80080e4:	4694      	mov	ip, r2
 80080e6:	44bc      	add	ip, r7
 80080e8:	4463      	add	r3, ip
 80080ea:	22c4      	movs	r2, #196	; 0xc4
 80080ec:	5a9b      	ldrh	r3, [r3, r2]
 80080ee:	0019      	movs	r1, r3
 80080f0:	2318      	movs	r3, #24
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	3301      	adds	r3, #1
 80080f6:	4a0e      	ldr	r2, [pc, #56]	; (8008130 <astronode_send_mgi_rr+0x14c>)
 80080f8:	2018      	movs	r0, #24
 80080fa:	1820      	adds	r0, r4, r0
 80080fc:	19c0      	adds	r0, r0, r7
 80080fe:	6800      	ldr	r0, [r0, #0]
 8008100:	f003 ff9e 	bl	800c040 <snprintf>
            send_debug_logs(guid);
 8008104:	2318      	movs	r3, #24
 8008106:	18e3      	adds	r3, r4, r3
 8008108:	19db      	adds	r3, r3, r7
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	0018      	movs	r0, r3
 800810e:	f7fb f93b 	bl	8003388 <send_debug_logs>
 8008112:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8008114:	e003      	b.n	800811e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <astronode_send_mgi_rr+0x150>)
 8008118:	0018      	movs	r0, r3
 800811a:	f7fb f935 	bl	8003388 <send_debug_logs>
}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	46bd      	mov	sp, r7
 8008122:	b06d      	add	sp, #436	; 0x1b4
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	fffffe68 	.word	0xfffffe68
 800812c:	080133cc 	.word	0x080133cc
 8008130:	080133dc 	.word	0x080133dc
 8008134:	080133e0 	.word	0x080133e0

08008138 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813a:	b0ed      	sub	sp, #436	; 0x1b4
 800813c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800813e:	21c8      	movs	r1, #200	; 0xc8
 8008140:	2318      	movs	r3, #24
 8008142:	18cb      	adds	r3, r1, r3
 8008144:	19db      	adds	r3, r3, r7
 8008146:	0018      	movs	r0, r3
 8008148:	23c6      	movs	r3, #198	; 0xc6
 800814a:	001a      	movs	r2, r3
 800814c:	2100      	movs	r1, #0
 800814e:	f004 f841 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008152:	4b4a      	ldr	r3, [pc, #296]	; (800827c <astronode_send_msn_rr+0x144>)
 8008154:	26cc      	movs	r6, #204	; 0xcc
 8008156:	0076      	lsls	r6, r6, #1
 8008158:	199b      	adds	r3, r3, r6
 800815a:	2218      	movs	r2, #24
 800815c:	4694      	mov	ip, r2
 800815e:	44bc      	add	ip, r7
 8008160:	4463      	add	r3, ip
 8008162:	0018      	movs	r0, r3
 8008164:	23c6      	movs	r3, #198	; 0xc6
 8008166:	001a      	movs	r2, r3
 8008168:	2100      	movs	r1, #0
 800816a:	f004 f833 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800816e:	21c8      	movs	r1, #200	; 0xc8
 8008170:	2318      	movs	r3, #24
 8008172:	18cb      	adds	r3, r1, r3
 8008174:	19db      	adds	r3, r3, r7
 8008176:	221a      	movs	r2, #26
 8008178:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800817a:	2318      	movs	r3, #24
 800817c:	18fa      	adds	r2, r7, r3
 800817e:	2318      	movs	r3, #24
 8008180:	18cb      	adds	r3, r1, r3
 8008182:	19db      	adds	r3, r3, r7
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f001 f8ee 	bl	8009368 <astronode_transport_send_receive>
 800818c:	0003      	movs	r3, r0
 800818e:	2b01      	cmp	r3, #1
 8008190:	d16f      	bne.n	8008272 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8008192:	4b3a      	ldr	r3, [pc, #232]	; (800827c <astronode_send_msn_rr+0x144>)
 8008194:	0032      	movs	r2, r6
 8008196:	189b      	adds	r3, r3, r2
 8008198:	2118      	movs	r1, #24
 800819a:	468c      	mov	ip, r1
 800819c:	44bc      	add	ip, r7
 800819e:	4463      	add	r3, ip
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b9a      	cmp	r3, #154	; 0x9a
 80081a4:	d161      	bne.n	800826a <astronode_send_msn_rr+0x132>
        {
 80081a6:	466b      	mov	r3, sp
 80081a8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80081aa:	4b34      	ldr	r3, [pc, #208]	; (800827c <astronode_send_msn_rr+0x144>)
 80081ac:	189b      	adds	r3, r3, r2
 80081ae:	2218      	movs	r2, #24
 80081b0:	4694      	mov	ip, r2
 80081b2:	44bc      	add	ip, r7
 80081b4:	4463      	add	r3, ip
 80081b6:	22c4      	movs	r2, #196	; 0xc4
 80081b8:	5a9b      	ldrh	r3, [r3, r2]
 80081ba:	001a      	movs	r2, r3
 80081bc:	3a01      	subs	r2, #1
 80081be:	21ca      	movs	r1, #202	; 0xca
 80081c0:	0049      	lsls	r1, r1, #1
 80081c2:	2018      	movs	r0, #24
 80081c4:	1809      	adds	r1, r1, r0
 80081c6:	19c9      	adds	r1, r1, r7
 80081c8:	600a      	str	r2, [r1, #0]
 80081ca:	001c      	movs	r4, r3
 80081cc:	2200      	movs	r2, #0
 80081ce:	0015      	movs	r5, r2
 80081d0:	0020      	movs	r0, r4
 80081d2:	0029      	movs	r1, r5
 80081d4:	0004      	movs	r4, r0
 80081d6:	0f62      	lsrs	r2, r4, #29
 80081d8:	000c      	movs	r4, r1
 80081da:	00e4      	lsls	r4, r4, #3
 80081dc:	617c      	str	r4, [r7, #20]
 80081de:	697c      	ldr	r4, [r7, #20]
 80081e0:	4314      	orrs	r4, r2
 80081e2:	617c      	str	r4, [r7, #20]
 80081e4:	0001      	movs	r1, r0
 80081e6:	00c9      	lsls	r1, r1, #3
 80081e8:	6139      	str	r1, [r7, #16]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	6838      	ldr	r0, [r7, #0]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	0004      	movs	r4, r0
 80081f6:	0f62      	lsrs	r2, r4, #29
 80081f8:	000c      	movs	r4, r1
 80081fa:	00e4      	lsls	r4, r4, #3
 80081fc:	60fc      	str	r4, [r7, #12]
 80081fe:	68fc      	ldr	r4, [r7, #12]
 8008200:	4314      	orrs	r4, r2
 8008202:	60fc      	str	r4, [r7, #12]
 8008204:	0001      	movs	r1, r0
 8008206:	00ca      	lsls	r2, r1, #3
 8008208:	60ba      	str	r2, [r7, #8]
 800820a:	3307      	adds	r3, #7
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4669      	mov	r1, sp
 8008212:	1acb      	subs	r3, r1, r3
 8008214:	469d      	mov	sp, r3
 8008216:	466b      	mov	r3, sp
 8008218:	3300      	adds	r3, #0
 800821a:	24c8      	movs	r4, #200	; 0xc8
 800821c:	0064      	lsls	r4, r4, #1
 800821e:	2218      	movs	r2, #24
 8008220:	18a2      	adds	r2, r4, r2
 8008222:	19d1      	adds	r1, r2, r7
 8008224:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8008226:	4b16      	ldr	r3, [pc, #88]	; (8008280 <astronode_send_msn_rr+0x148>)
 8008228:	0018      	movs	r0, r3
 800822a:	f7fb f8ad 	bl	8003388 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <astronode_send_msn_rr+0x144>)
 8008230:	22cc      	movs	r2, #204	; 0xcc
 8008232:	0052      	lsls	r2, r2, #1
 8008234:	189b      	adds	r3, r3, r2
 8008236:	2218      	movs	r2, #24
 8008238:	4694      	mov	ip, r2
 800823a:	44bc      	add	ip, r7
 800823c:	4463      	add	r3, ip
 800823e:	22c4      	movs	r2, #196	; 0xc4
 8008240:	5a9b      	ldrh	r3, [r3, r2]
 8008242:	0019      	movs	r1, r3
 8008244:	2318      	movs	r3, #24
 8008246:	18fb      	adds	r3, r7, r3
 8008248:	3301      	adds	r3, #1
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <astronode_send_msn_rr+0x14c>)
 800824c:	2018      	movs	r0, #24
 800824e:	1820      	adds	r0, r4, r0
 8008250:	19c0      	adds	r0, r0, r7
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	f003 fef4 	bl	800c040 <snprintf>
            send_debug_logs(serial_number);
 8008258:	2318      	movs	r3, #24
 800825a:	18e3      	adds	r3, r4, r3
 800825c:	19db      	adds	r3, r3, r7
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	0018      	movs	r0, r3
 8008262:	f7fb f891 	bl	8003388 <send_debug_logs>
 8008266:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008268:	e003      	b.n	8008272 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <astronode_send_msn_rr+0x150>)
 800826c:	0018      	movs	r0, r3
 800826e:	f7fb f88b 	bl	8003388 <send_debug_logs>
}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	46bd      	mov	sp, r7
 8008276:	b06d      	add	sp, #436	; 0x1b4
 8008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	fffffe68 	.word	0xfffffe68
 8008280:	080133fc 	.word	0x080133fc
 8008284:	080133dc 	.word	0x080133dc
 8008288:	08013418 	.word	0x08013418

0800828c <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 800828c:	b5b0      	push	{r4, r5, r7, lr}
 800828e:	b0e4      	sub	sp, #400	; 0x190
 8008290:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008292:	24c8      	movs	r4, #200	; 0xc8
 8008294:	193b      	adds	r3, r7, r4
 8008296:	0018      	movs	r0, r3
 8008298:	23c6      	movs	r3, #198	; 0xc6
 800829a:	001a      	movs	r2, r3
 800829c:	2100      	movs	r1, #0
 800829e:	f003 ff99 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 80082a2:	4b31      	ldr	r3, [pc, #196]	; (8008368 <astronode_send_evt_rr+0xdc>)
 80082a4:	25c8      	movs	r5, #200	; 0xc8
 80082a6:	006d      	lsls	r5, r5, #1
 80082a8:	195b      	adds	r3, r3, r5
 80082aa:	19db      	adds	r3, r3, r7
 80082ac:	0018      	movs	r0, r3
 80082ae:	23c6      	movs	r3, #198	; 0xc6
 80082b0:	001a      	movs	r2, r3
 80082b2:	2100      	movs	r1, #0
 80082b4:	f003 ff8e 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80082b8:	193b      	adds	r3, r7, r4
 80082ba:	2265      	movs	r2, #101	; 0x65
 80082bc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082be:	003a      	movs	r2, r7
 80082c0:	193b      	adds	r3, r7, r4
 80082c2:	0011      	movs	r1, r2
 80082c4:	0018      	movs	r0, r3
 80082c6:	f001 f84f 	bl	8009368 <astronode_transport_send_receive>
 80082ca:	0003      	movs	r3, r0
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d147      	bne.n	8008360 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <astronode_send_evt_rr+0xdc>)
 80082d2:	195b      	adds	r3, r3, r5
 80082d4:	19db      	adds	r3, r3, r7
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2be5      	cmp	r3, #229	; 0xe5
 80082da:	d141      	bne.n	8008360 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80082dc:	4b22      	ldr	r3, [pc, #136]	; (8008368 <astronode_send_evt_rr+0xdc>)
 80082de:	195b      	adds	r3, r3, r5
 80082e0:	19db      	adds	r3, r3, r7
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	001a      	movs	r2, r3
 80082e6:	2301      	movs	r3, #1
 80082e8:	4013      	ands	r3, r2
 80082ea:	d006      	beq.n	80082fa <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80082ec:	4b1f      	ldr	r3, [pc, #124]	; (800836c <astronode_send_evt_rr+0xe0>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80082f2:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <astronode_send_evt_rr+0xe4>)
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7fb f847 	bl	8003388 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80082fa:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <astronode_send_evt_rr+0xdc>)
 80082fc:	22c8      	movs	r2, #200	; 0xc8
 80082fe:	0052      	lsls	r2, r2, #1
 8008300:	189b      	adds	r3, r3, r2
 8008302:	19db      	adds	r3, r3, r7
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	001a      	movs	r2, r3
 8008308:	2302      	movs	r3, #2
 800830a:	4013      	ands	r3, r2
 800830c:	d006      	beq.n	800831c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800830e:	4b19      	ldr	r3, [pc, #100]	; (8008374 <astronode_send_evt_rr+0xe8>)
 8008310:	2201      	movs	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8008314:	4b18      	ldr	r3, [pc, #96]	; (8008378 <astronode_send_evt_rr+0xec>)
 8008316:	0018      	movs	r0, r3
 8008318:	f7fb f836 	bl	8003388 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 800831c:	4b12      	ldr	r3, [pc, #72]	; (8008368 <astronode_send_evt_rr+0xdc>)
 800831e:	22c8      	movs	r2, #200	; 0xc8
 8008320:	0052      	lsls	r2, r2, #1
 8008322:	189b      	adds	r3, r3, r2
 8008324:	19db      	adds	r3, r3, r7
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	001a      	movs	r2, r3
 800832a:	2304      	movs	r3, #4
 800832c:	4013      	ands	r3, r2
 800832e:	d006      	beq.n	800833e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008330:	4b12      	ldr	r3, [pc, #72]	; (800837c <astronode_send_evt_rr+0xf0>)
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <astronode_send_evt_rr+0xf4>)
 8008338:	0018      	movs	r0, r3
 800833a:	f7fb f825 	bl	8003388 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <astronode_send_evt_rr+0xdc>)
 8008340:	22c8      	movs	r2, #200	; 0xc8
 8008342:	0052      	lsls	r2, r2, #1
 8008344:	189b      	adds	r3, r3, r2
 8008346:	19db      	adds	r3, r3, r7
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	001a      	movs	r2, r3
 800834c:	2308      	movs	r3, #8
 800834e:	4013      	ands	r3, r2
 8008350:	d006      	beq.n	8008360 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <astronode_send_evt_rr+0xf8>)
 8008354:	2201      	movs	r2, #1
 8008356:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <astronode_send_evt_rr+0xfc>)
 800835a:	0018      	movs	r0, r3
 800835c:	f7fb f814 	bl	8003388 <send_debug_logs>
            }

        }
    }
}
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	b064      	add	sp, #400	; 0x190
 8008366:	bdb0      	pop	{r4, r5, r7, pc}
 8008368:	fffffe70 	.word	0xfffffe70
 800836c:	20000b0c 	.word	0x20000b0c
 8008370:	080134c0 	.word	0x080134c0
 8008374:	20000b0d 	.word	0x20000b0d
 8008378:	080134e4 	.word	0x080134e4
 800837c:	20000b0e 	.word	0x20000b0e
 8008380:	080134fc 	.word	0x080134fc
 8008384:	20000b0f 	.word	0x20000b0f
 8008388:	08013510 	.word	0x08013510

0800838c <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b0e7      	sub	sp, #412	; 0x19c
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008396:	24d0      	movs	r4, #208	; 0xd0
 8008398:	193b      	adds	r3, r7, r4
 800839a:	0018      	movs	r0, r3
 800839c:	23c6      	movs	r3, #198	; 0xc6
 800839e:	001a      	movs	r2, r3
 80083a0:	2100      	movs	r1, #0
 80083a2:	f003 ff17 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 80083a6:	4b56      	ldr	r3, [pc, #344]	; (8008500 <astronode_send_geo_wr+0x174>)
 80083a8:	26cc      	movs	r6, #204	; 0xcc
 80083aa:	0076      	lsls	r6, r6, #1
 80083ac:	199b      	adds	r3, r3, r6
 80083ae:	19db      	adds	r3, r3, r7
 80083b0:	0018      	movs	r0, r3
 80083b2:	23c6      	movs	r3, #198	; 0xc6
 80083b4:	001a      	movs	r2, r3
 80083b6:	2100      	movs	r1, #0
 80083b8:	f003 ff0c 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80083bc:	193b      	adds	r3, r7, r4
 80083be:	2235      	movs	r2, #53	; 0x35
 80083c0:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80083c2:	193b      	adds	r3, r7, r4
 80083c4:	22c4      	movs	r2, #196	; 0xc4
 80083c6:	5a9b      	ldrh	r3, [r3, r2]
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	b290      	uxth	r0, r2
 80083cc:	193a      	adds	r2, r7, r4
 80083ce:	21c4      	movs	r1, #196	; 0xc4
 80083d0:	5250      	strh	r0, [r2, r1]
 80083d2:	0019      	movs	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	193b      	adds	r3, r7, r4
 80083da:	185b      	adds	r3, r3, r1
 80083dc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	1218      	asrs	r0, r3, #8
 80083e2:	0025      	movs	r5, r4
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	22c4      	movs	r2, #196	; 0xc4
 80083e8:	5a9b      	ldrh	r3, [r3, r2]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	b294      	uxth	r4, r2
 80083ee:	197a      	adds	r2, r7, r5
 80083f0:	21c4      	movs	r1, #196	; 0xc4
 80083f2:	5254      	strh	r4, [r2, r1]
 80083f4:	0019      	movs	r1, r3
 80083f6:	b2c2      	uxtb	r2, r0
 80083f8:	002c      	movs	r4, r5
 80083fa:	193b      	adds	r3, r7, r4
 80083fc:	185b      	adds	r3, r3, r1
 80083fe:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	1418      	asrs	r0, r3, #16
 8008404:	0025      	movs	r5, r4
 8008406:	197b      	adds	r3, r7, r5
 8008408:	22c4      	movs	r2, #196	; 0xc4
 800840a:	5a9b      	ldrh	r3, [r3, r2]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	b294      	uxth	r4, r2
 8008410:	197a      	adds	r2, r7, r5
 8008412:	21c4      	movs	r1, #196	; 0xc4
 8008414:	5254      	strh	r4, [r2, r1]
 8008416:	0019      	movs	r1, r3
 8008418:	b2c2      	uxtb	r2, r0
 800841a:	002c      	movs	r4, r5
 800841c:	193b      	adds	r3, r7, r4
 800841e:	185b      	adds	r3, r3, r1
 8008420:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	1618      	asrs	r0, r3, #24
 8008426:	0025      	movs	r5, r4
 8008428:	197b      	adds	r3, r7, r5
 800842a:	22c4      	movs	r2, #196	; 0xc4
 800842c:	5a9b      	ldrh	r3, [r3, r2]
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	b294      	uxth	r4, r2
 8008432:	197a      	adds	r2, r7, r5
 8008434:	21c4      	movs	r1, #196	; 0xc4
 8008436:	5254      	strh	r4, [r2, r1]
 8008438:	0019      	movs	r1, r3
 800843a:	b2c2      	uxtb	r2, r0
 800843c:	002c      	movs	r4, r5
 800843e:	193b      	adds	r3, r7, r4
 8008440:	185b      	adds	r3, r3, r1
 8008442:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008444:	193b      	adds	r3, r7, r4
 8008446:	22c4      	movs	r2, #196	; 0xc4
 8008448:	5a9b      	ldrh	r3, [r3, r2]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	b290      	uxth	r0, r2
 800844e:	193a      	adds	r2, r7, r4
 8008450:	21c4      	movs	r1, #196	; 0xc4
 8008452:	5250      	strh	r0, [r2, r1]
 8008454:	0019      	movs	r1, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	193b      	adds	r3, r7, r4
 800845c:	185b      	adds	r3, r3, r1
 800845e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	1218      	asrs	r0, r3, #8
 8008464:	0025      	movs	r5, r4
 8008466:	197b      	adds	r3, r7, r5
 8008468:	22c4      	movs	r2, #196	; 0xc4
 800846a:	5a9b      	ldrh	r3, [r3, r2]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	b294      	uxth	r4, r2
 8008470:	197a      	adds	r2, r7, r5
 8008472:	21c4      	movs	r1, #196	; 0xc4
 8008474:	5254      	strh	r4, [r2, r1]
 8008476:	0019      	movs	r1, r3
 8008478:	b2c2      	uxtb	r2, r0
 800847a:	002c      	movs	r4, r5
 800847c:	193b      	adds	r3, r7, r4
 800847e:	185b      	adds	r3, r3, r1
 8008480:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	1418      	asrs	r0, r3, #16
 8008486:	0025      	movs	r5, r4
 8008488:	197b      	adds	r3, r7, r5
 800848a:	22c4      	movs	r2, #196	; 0xc4
 800848c:	5a9b      	ldrh	r3, [r3, r2]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	b294      	uxth	r4, r2
 8008492:	197a      	adds	r2, r7, r5
 8008494:	21c4      	movs	r1, #196	; 0xc4
 8008496:	5254      	strh	r4, [r2, r1]
 8008498:	0019      	movs	r1, r3
 800849a:	b2c2      	uxtb	r2, r0
 800849c:	002c      	movs	r4, r5
 800849e:	193b      	adds	r3, r7, r4
 80084a0:	185b      	adds	r3, r3, r1
 80084a2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	1618      	asrs	r0, r3, #24
 80084a8:	0025      	movs	r5, r4
 80084aa:	197b      	adds	r3, r7, r5
 80084ac:	22c4      	movs	r2, #196	; 0xc4
 80084ae:	5a9b      	ldrh	r3, [r3, r2]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	b294      	uxth	r4, r2
 80084b4:	197a      	adds	r2, r7, r5
 80084b6:	21c4      	movs	r1, #196	; 0xc4
 80084b8:	5254      	strh	r4, [r2, r1]
 80084ba:	0019      	movs	r1, r3
 80084bc:	b2c2      	uxtb	r2, r0
 80084be:	0028      	movs	r0, r5
 80084c0:	183b      	adds	r3, r7, r0
 80084c2:	185b      	adds	r3, r3, r1
 80084c4:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084c6:	2308      	movs	r3, #8
 80084c8:	18fa      	adds	r2, r7, r3
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	0011      	movs	r1, r2
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 ff4a 	bl	8009368 <astronode_transport_send_receive>
 80084d4:	0003      	movs	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d10e      	bne.n	80084f8 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <astronode_send_geo_wr+0x174>)
 80084dc:	199b      	adds	r3, r3, r6
 80084de:	19db      	adds	r3, r3, r7
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2bb5      	cmp	r3, #181	; 0xb5
 80084e4:	d104      	bne.n	80084f0 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <astronode_send_geo_wr+0x178>)
 80084e8:	0018      	movs	r0, r3
 80084ea:	f7fa ff4d 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80084ee:	e003      	b.n	80084f8 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <astronode_send_geo_wr+0x17c>)
 80084f2:	0018      	movs	r0, r3
 80084f4:	f7fa ff48 	bl	8003388 <send_debug_logs>
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b067      	add	sp, #412	; 0x19c
 80084fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008500:	fffffe70 	.word	0xfffffe70
 8008504:	08013524 	.word	0x08013524
 8008508:	08013550 	.word	0x08013550

0800850c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 800850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850e:	b0fd      	sub	sp, #500	; 0x1f4
 8008510:	af02      	add	r7, sp, #8
 8008512:	6039      	str	r1, [r7, #0]
 8008514:	0011      	movs	r1, r2
 8008516:	4b4c      	ldr	r3, [pc, #304]	; (8008648 <astronode_send_pld_er+0x13c>)
 8008518:	26f4      	movs	r6, #244	; 0xf4
 800851a:	0076      	lsls	r6, r6, #1
 800851c:	199b      	adds	r3, r3, r6
 800851e:	19db      	adds	r3, r3, r7
 8008520:	1c02      	adds	r2, r0, #0
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	4b49      	ldr	r3, [pc, #292]	; (800864c <astronode_send_pld_er+0x140>)
 8008526:	199b      	adds	r3, r3, r6
 8008528:	19db      	adds	r3, r3, r7
 800852a:	1c0a      	adds	r2, r1, #0
 800852c:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800852e:	2490      	movs	r4, #144	; 0x90
 8008530:	0064      	lsls	r4, r4, #1
 8008532:	193b      	adds	r3, r7, r4
 8008534:	0018      	movs	r0, r3
 8008536:	23c6      	movs	r3, #198	; 0xc6
 8008538:	001a      	movs	r2, r3
 800853a:	2100      	movs	r1, #0
 800853c:	f003 fe4a 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008540:	4b43      	ldr	r3, [pc, #268]	; (8008650 <astronode_send_pld_er+0x144>)
 8008542:	199b      	adds	r3, r3, r6
 8008544:	19db      	adds	r3, r3, r7
 8008546:	0018      	movs	r0, r3
 8008548:	23c6      	movs	r3, #198	; 0xc6
 800854a:	001a      	movs	r2, r3
 800854c:	2100      	movs	r1, #0
 800854e:	f003 fe41 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8008552:	193b      	adds	r3, r7, r4
 8008554:	2225      	movs	r2, #37	; 0x25
 8008556:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008558:	193b      	adds	r3, r7, r4
 800855a:	22c4      	movs	r2, #196	; 0xc4
 800855c:	5a9b      	ldrh	r3, [r3, r2]
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	b290      	uxth	r0, r2
 8008562:	193a      	adds	r2, r7, r4
 8008564:	21c4      	movs	r1, #196	; 0xc4
 8008566:	5250      	strh	r0, [r2, r1]
 8008568:	0019      	movs	r1, r3
 800856a:	4b37      	ldr	r3, [pc, #220]	; (8008648 <astronode_send_pld_er+0x13c>)
 800856c:	199b      	adds	r3, r3, r6
 800856e:	19db      	adds	r3, r3, r7
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	193b      	adds	r3, r7, r4
 8008576:	185b      	adds	r3, r3, r1
 8008578:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800857a:	4b33      	ldr	r3, [pc, #204]	; (8008648 <astronode_send_pld_er+0x13c>)
 800857c:	199b      	adds	r3, r3, r6
 800857e:	19db      	adds	r3, r3, r7
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	b298      	uxth	r0, r3
 8008586:	0025      	movs	r5, r4
 8008588:	197b      	adds	r3, r7, r5
 800858a:	22c4      	movs	r2, #196	; 0xc4
 800858c:	5a9b      	ldrh	r3, [r3, r2]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	b294      	uxth	r4, r2
 8008592:	197a      	adds	r2, r7, r5
 8008594:	21c4      	movs	r1, #196	; 0xc4
 8008596:	5254      	strh	r4, [r2, r1]
 8008598:	0019      	movs	r1, r3
 800859a:	b2c2      	uxtb	r2, r0
 800859c:	002c      	movs	r4, r5
 800859e:	193b      	adds	r3, r7, r4
 80085a0:	185b      	adds	r3, r3, r1
 80085a2:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	22c4      	movs	r2, #196	; 0xc4
 80085a8:	5a9b      	ldrh	r3, [r3, r2]
 80085aa:	001a      	movs	r2, r3
 80085ac:	193b      	adds	r3, r7, r4
 80085ae:	189b      	adds	r3, r3, r2
 80085b0:	1c58      	adds	r0, r3, #1
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <astronode_send_pld_er+0x140>)
 80085b4:	199b      	adds	r3, r3, r6
 80085b6:	19db      	adds	r3, r3, r7
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	0019      	movs	r1, r3
 80085be:	f003 ff36 	bl	800c42e <memcpy>
    request.payload_len = 2 + payload_length;
 80085c2:	4b22      	ldr	r3, [pc, #136]	; (800864c <astronode_send_pld_er+0x140>)
 80085c4:	199b      	adds	r3, r3, r6
 80085c6:	19db      	adds	r3, r3, r7
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	3302      	adds	r3, #2
 80085cc:	b299      	uxth	r1, r3
 80085ce:	193b      	adds	r3, r7, r4
 80085d0:	22c4      	movs	r2, #196	; 0xc4
 80085d2:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80085d4:	2358      	movs	r3, #88	; 0x58
 80085d6:	18fa      	adds	r2, r7, r3
 80085d8:	193b      	adds	r3, r7, r4
 80085da:	0011      	movs	r1, r2
 80085dc:	0018      	movs	r0, r3
 80085de:	f000 fec3 	bl	8009368 <astronode_transport_send_receive>
 80085e2:	0003      	movs	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d12a      	bne.n	800863e <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <astronode_send_pld_er+0x144>)
 80085ea:	199b      	adds	r3, r3, r6
 80085ec:	19db      	adds	r3, r3, r7
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2ba5      	cmp	r3, #165	; 0xa5
 80085f2:	d114      	bne.n	800861e <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80085f4:	4b14      	ldr	r3, [pc, #80]	; (8008648 <astronode_send_pld_er+0x13c>)
 80085f6:	199b      	adds	r3, r3, r6
 80085f8:	19db      	adds	r3, r3, r7
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	22ea      	movs	r2, #234	; 0xea
 80085fe:	32ff      	adds	r2, #255	; 0xff
 8008600:	0014      	movs	r4, r2
 8008602:	4a14      	ldr	r2, [pc, #80]	; (8008654 <astronode_send_pld_er+0x148>)
 8008604:	4914      	ldr	r1, [pc, #80]	; (8008658 <astronode_send_pld_er+0x14c>)
 8008606:	2508      	movs	r5, #8
 8008608:	1978      	adds	r0, r7, r5
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	0023      	movs	r3, r4
 800860e:	f003 fd4b 	bl	800c0a8 <sprintf>
            send_debug_logs ( s ) ;
 8008612:	197b      	adds	r3, r7, r5
 8008614:	0018      	movs	r0, r3
 8008616:	f7fa feb7 	bl	8003388 <send_debug_logs>
            return true ;
 800861a:	2301      	movs	r3, #1
 800861c:	e010      	b.n	8008640 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <astronode_send_pld_er+0x13c>)
 8008620:	22f4      	movs	r2, #244	; 0xf4
 8008622:	0052      	lsls	r2, r2, #1
 8008624:	189b      	adds	r3, r3, r2
 8008626:	19db      	adds	r3, r3, r7
 8008628:	881a      	ldrh	r2, [r3, #0]
 800862a:	490c      	ldr	r1, [pc, #48]	; (800865c <astronode_send_pld_er+0x150>)
 800862c:	2408      	movs	r4, #8
 800862e:	193b      	adds	r3, r7, r4
 8008630:	0018      	movs	r0, r3
 8008632:	f003 fd39 	bl	800c0a8 <sprintf>
            send_debug_logs ( s ) ;
 8008636:	193b      	adds	r3, r7, r4
 8008638:	0018      	movs	r0, r3
 800863a:	f7fa fea5 	bl	8003388 <send_debug_logs>
        }
    }
    return false ;
 800863e:	2300      	movs	r3, #0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b07b      	add	sp, #492	; 0x1ec
 8008646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008648:	fffffe1e 	.word	0xfffffe1e
 800864c:	fffffe1c 	.word	0xfffffe1c
 8008650:	fffffe70 	.word	0xfffffe70
 8008654:	080135c8 	.word	0x080135c8
 8008658:	080135f4 	.word	0x080135f4
 800865c:	08013610 	.word	0x08013610

08008660 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008660:	b5b0      	push	{r4, r5, r7, lr}
 8008662:	b0e4      	sub	sp, #400	; 0x190
 8008664:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008666:	24c8      	movs	r4, #200	; 0xc8
 8008668:	193b      	adds	r3, r7, r4
 800866a:	0018      	movs	r0, r3
 800866c:	23c6      	movs	r3, #198	; 0xc6
 800866e:	001a      	movs	r2, r3
 8008670:	2100      	movs	r1, #0
 8008672:	f003 fdaf 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008676:	4b15      	ldr	r3, [pc, #84]	; (80086cc <astronode_send_pld_fr+0x6c>)
 8008678:	25c8      	movs	r5, #200	; 0xc8
 800867a:	006d      	lsls	r5, r5, #1
 800867c:	195b      	adds	r3, r3, r5
 800867e:	19db      	adds	r3, r3, r7
 8008680:	0018      	movs	r0, r3
 8008682:	23c6      	movs	r3, #198	; 0xc6
 8008684:	001a      	movs	r2, r3
 8008686:	2100      	movs	r1, #0
 8008688:	f003 fda4 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800868c:	193b      	adds	r3, r7, r4
 800868e:	2227      	movs	r2, #39	; 0x27
 8008690:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008692:	003a      	movs	r2, r7
 8008694:	193b      	adds	r3, r7, r4
 8008696:	0011      	movs	r1, r2
 8008698:	0018      	movs	r0, r3
 800869a:	f000 fe65 	bl	8009368 <astronode_transport_send_receive>
 800869e:	0003      	movs	r3, r0
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d10e      	bne.n	80086c2 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80086a4:	4b09      	ldr	r3, [pc, #36]	; (80086cc <astronode_send_pld_fr+0x6c>)
 80086a6:	195b      	adds	r3, r3, r5
 80086a8:	19db      	adds	r3, r3, r7
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2ba7      	cmp	r3, #167	; 0xa7
 80086ae:	d104      	bne.n	80086ba <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <astronode_send_pld_fr+0x70>)
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7fa fe68 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80086b8:	e003      	b.n	80086c2 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <astronode_send_pld_fr+0x74>)
 80086bc:	0018      	movs	r0, r3
 80086be:	f7fa fe63 	bl	8003388 <send_debug_logs>
}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b064      	add	sp, #400	; 0x190
 80086c8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	fffffe70 	.word	0xfffffe70
 80086d0:	08013640 	.word	0x08013640
 80086d4:	08013678 	.word	0x08013678

080086d8 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80086d8:	b5b0      	push	{r4, r5, r7, lr}
 80086da:	b0e4      	sub	sp, #400	; 0x190
 80086dc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80086de:	24c8      	movs	r4, #200	; 0xc8
 80086e0:	193b      	adds	r3, r7, r4
 80086e2:	0018      	movs	r0, r3
 80086e4:	23c6      	movs	r3, #198	; 0xc6
 80086e6:	001a      	movs	r2, r3
 80086e8:	2100      	movs	r1, #0
 80086ea:	f003 fd73 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 80086ee:	4b16      	ldr	r3, [pc, #88]	; (8008748 <astronode_send_res_cr+0x70>)
 80086f0:	25c8      	movs	r5, #200	; 0xc8
 80086f2:	006d      	lsls	r5, r5, #1
 80086f4:	195b      	adds	r3, r3, r5
 80086f6:	19db      	adds	r3, r3, r7
 80086f8:	0018      	movs	r0, r3
 80086fa:	23c6      	movs	r3, #198	; 0xc6
 80086fc:	001a      	movs	r2, r3
 80086fe:	2100      	movs	r1, #0
 8008700:	f003 fd68 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008704:	193b      	adds	r3, r7, r4
 8008706:	2255      	movs	r2, #85	; 0x55
 8008708:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800870a:	003a      	movs	r2, r7
 800870c:	193b      	adds	r3, r7, r4
 800870e:	0011      	movs	r1, r2
 8008710:	0018      	movs	r0, r3
 8008712:	f000 fe29 	bl	8009368 <astronode_transport_send_receive>
 8008716:	0003      	movs	r3, r0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d111      	bne.n	8008740 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <astronode_send_res_cr+0x70>)
 800871e:	195b      	adds	r3, r3, r5
 8008720:	19db      	adds	r3, r3, r7
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2bd5      	cmp	r3, #213	; 0xd5
 8008726:	d107      	bne.n	8008738 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008728:	4b08      	ldr	r3, [pc, #32]	; (800874c <astronode_send_res_cr+0x74>)
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800872e:	4b08      	ldr	r3, [pc, #32]	; (8008750 <astronode_send_res_cr+0x78>)
 8008730:	0018      	movs	r0, r3
 8008732:	f7fa fe29 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008736:	e003      	b.n	8008740 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008738:	4b06      	ldr	r3, [pc, #24]	; (8008754 <astronode_send_res_cr+0x7c>)
 800873a:	0018      	movs	r0, r3
 800873c:	f7fa fe24 	bl	8003388 <send_debug_logs>
}
 8008740:	46c0      	nop			; (mov r8, r8)
 8008742:	46bd      	mov	sp, r7
 8008744:	b064      	add	sp, #400	; 0x190
 8008746:	bdb0      	pop	{r4, r5, r7, pc}
 8008748:	fffffe70 	.word	0xfffffe70
 800874c:	20000b0d 	.word	0x20000b0d
 8008750:	080136b4 	.word	0x080136b4
 8008754:	080136e8 	.word	0x080136e8

08008758 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008758:	b5b0      	push	{r4, r5, r7, lr}
 800875a:	b0fa      	sub	sp, #488	; 0x1e8
 800875c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800875e:	258e      	movs	r5, #142	; 0x8e
 8008760:	006d      	lsls	r5, r5, #1
 8008762:	197b      	adds	r3, r7, r5
 8008764:	0018      	movs	r0, r3
 8008766:	23c6      	movs	r3, #198	; 0xc6
 8008768:	001a      	movs	r2, r3
 800876a:	2100      	movs	r1, #0
 800876c:	f003 fd32 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0} ;
 8008770:	4b28      	ldr	r3, [pc, #160]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 8008772:	24f4      	movs	r4, #244	; 0xf4
 8008774:	0064      	lsls	r4, r4, #1
 8008776:	191b      	adds	r3, r3, r4
 8008778:	19db      	adds	r3, r3, r7
 800877a:	0018      	movs	r0, r3
 800877c:	23c6      	movs	r3, #198	; 0xc6
 800877e:	001a      	movs	r2, r3
 8008780:	2100      	movs	r1, #0
 8008782:	f003 fd27 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008786:	197b      	adds	r3, r7, r5
 8008788:	2217      	movs	r2, #23
 800878a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800878c:	2354      	movs	r3, #84	; 0x54
 800878e:	18fa      	adds	r2, r7, r3
 8008790:	197b      	adds	r3, r7, r5
 8008792:	0011      	movs	r1, r2
 8008794:	0018      	movs	r0, r3
 8008796:	f000 fde7 	bl	8009368 <astronode_transport_send_receive>
 800879a:	0003      	movs	r3, r0
 800879c:	2b01      	cmp	r3, #1
 800879e:	d133      	bne.n	8008808 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80087a0:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 80087a2:	0021      	movs	r1, r4
 80087a4:	185b      	adds	r3, r3, r1
 80087a6:	19db      	adds	r3, r3, r7
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b97      	cmp	r3, #151	; 0x97
 80087ac:	d128      	bne.n	8008800 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80087ae:	4b19      	ldr	r3, [pc, #100]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 80087b0:	185b      	adds	r3, r3, r1
 80087b2:	19db      	adds	r3, r3, r7
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80087b8:	4b16      	ldr	r3, [pc, #88]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 80087ba:	185b      	adds	r3, r3, r1
 80087bc:	19db      	adds	r3, r3, r7
 80087be:	789b      	ldrb	r3, [r3, #2]
 80087c0:	021b      	lsls	r3, r3, #8
 80087c2:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 80087c6:	185b      	adds	r3, r3, r1
 80087c8:	19db      	adds	r3, r3, r7
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80087d0:	4b10      	ldr	r3, [pc, #64]	; (8008814 <astronode_send_rtc_rr+0xbc>)
 80087d2:	185b      	adds	r3, r3, r1
 80087d4:	19db      	adds	r3, r3, r7
 80087d6:	791b      	ldrb	r3, [r3, #4]
 80087d8:	061b      	lsls	r3, r3, #24
 80087da:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80087dc:	24f2      	movs	r4, #242	; 0xf2
 80087de:	0064      	lsls	r4, r4, #1
 80087e0:	193a      	adds	r2, r7, r4
 80087e2:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80087e4:	193b      	adds	r3, r7, r4
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	490b      	ldr	r1, [pc, #44]	; (8008818 <astronode_send_rtc_rr+0xc0>)
 80087ea:	1d3b      	adds	r3, r7, #4
 80087ec:	0018      	movs	r0, r3
 80087ee:	f003 fc5b 	bl	800c0a8 <sprintf>
            send_debug_logs ( str ) ;
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	0018      	movs	r0, r3
 80087f6:	f7fa fdc7 	bl	8003388 <send_debug_logs>
            return rtc_time ;
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	e004      	b.n	800880a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <astronode_send_rtc_rr+0xc4>)
 8008802:	0018      	movs	r0, r3
 8008804:	f7fa fdc0 	bl	8003388 <send_debug_logs>
        }
    }
    return 0 ;
 8008808:	2300      	movs	r3, #0
}
 800880a:	0018      	movs	r0, r3
 800880c:	46bd      	mov	sp, r7
 800880e:	b07a      	add	sp, #488	; 0x1e8
 8008810:	bdb0      	pop	{r4, r5, r7, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	fffffe6c 	.word	0xfffffe6c
 8008818:	08013714 	.word	0x08013714
 800881c:	08013754 	.word	0x08013754

08008820 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008820:	b5b0      	push	{r4, r5, r7, lr}
 8008822:	b0f8      	sub	sp, #480	; 0x1e0
 8008824:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008826:	258c      	movs	r5, #140	; 0x8c
 8008828:	006d      	lsls	r5, r5, #1
 800882a:	197b      	adds	r3, r7, r5
 800882c:	0018      	movs	r0, r3
 800882e:	23c6      	movs	r3, #198	; 0xc6
 8008830:	001a      	movs	r2, r3
 8008832:	2100      	movs	r1, #0
 8008834:	f003 fcce 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008838:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <astronode_send_sak_rr+0xa0>)
 800883a:	24f0      	movs	r4, #240	; 0xf0
 800883c:	0064      	lsls	r4, r4, #1
 800883e:	191b      	adds	r3, r3, r4
 8008840:	19db      	adds	r3, r3, r7
 8008842:	0018      	movs	r0, r3
 8008844:	23c6      	movs	r3, #198	; 0xc6
 8008846:	001a      	movs	r2, r3
 8008848:	2100      	movs	r1, #0
 800884a:	f003 fcc3 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800884e:	197b      	adds	r3, r7, r5
 8008850:	2245      	movs	r2, #69	; 0x45
 8008852:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008854:	2350      	movs	r3, #80	; 0x50
 8008856:	18fa      	adds	r2, r7, r3
 8008858:	197b      	adds	r3, r7, r5
 800885a:	0011      	movs	r1, r2
 800885c:	0018      	movs	r0, r3
 800885e:	f000 fd83 	bl	8009368 <astronode_transport_send_receive>
 8008862:	0003      	movs	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d126      	bne.n	80088b6 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008868:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <astronode_send_sak_rr+0xa0>)
 800886a:	191b      	adds	r3, r3, r4
 800886c:	19db      	adds	r3, r3, r7
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2bc5      	cmp	r3, #197	; 0xc5
 8008872:	d11c      	bne.n	80088ae <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008874:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <astronode_send_sak_rr+0xa0>)
 8008876:	191b      	adds	r3, r3, r4
 8008878:	19db      	adds	r3, r3, r7
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	b299      	uxth	r1, r3
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <astronode_send_sak_rr+0xa0>)
 8008880:	191b      	adds	r3, r3, r4
 8008882:	19db      	adds	r3, r3, r7
 8008884:	789b      	ldrb	r3, [r3, #2]
 8008886:	b29b      	uxth	r3, r3
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b29a      	uxth	r2, r3
 800888c:	20ef      	movs	r0, #239	; 0xef
 800888e:	0040      	lsls	r0, r0, #1
 8008890:	183b      	adds	r3, r7, r0
 8008892:	188a      	adds	r2, r1, r2
 8008894:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008896:	183b      	adds	r3, r7, r0
 8008898:	881a      	ldrh	r2, [r3, #0]
 800889a:	490a      	ldr	r1, [pc, #40]	; (80088c4 <astronode_send_sak_rr+0xa4>)
 800889c:	003b      	movs	r3, r7
 800889e:	0018      	movs	r0, r3
 80088a0:	f003 fc02 	bl	800c0a8 <sprintf>
            send_debug_logs(str);
 80088a4:	003b      	movs	r3, r7
 80088a6:	0018      	movs	r0, r3
 80088a8:	f7fa fd6e 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80088ac:	e003      	b.n	80088b6 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <astronode_send_sak_rr+0xa8>)
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7fa fd69 	bl	8003388 <send_debug_logs>
}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	46bd      	mov	sp, r7
 80088ba:	b078      	add	sp, #480	; 0x1e0
 80088bc:	bdb0      	pop	{r4, r5, r7, pc}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	fffffe70 	.word	0xfffffe70
 80088c4:	08013770 	.word	0x08013770
 80088c8:	0801379c 	.word	0x0801379c

080088cc <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80088cc:	b5b0      	push	{r4, r5, r7, lr}
 80088ce:	b0e4      	sub	sp, #400	; 0x190
 80088d0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088d2:	24c8      	movs	r4, #200	; 0xc8
 80088d4:	193b      	adds	r3, r7, r4
 80088d6:	0018      	movs	r0, r3
 80088d8:	23c6      	movs	r3, #198	; 0xc6
 80088da:	001a      	movs	r2, r3
 80088dc:	2100      	movs	r1, #0
 80088de:	f003 fc79 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 80088e2:	4b16      	ldr	r3, [pc, #88]	; (800893c <astronode_send_sak_cr+0x70>)
 80088e4:	25c8      	movs	r5, #200	; 0xc8
 80088e6:	006d      	lsls	r5, r5, #1
 80088e8:	195b      	adds	r3, r3, r5
 80088ea:	19db      	adds	r3, r3, r7
 80088ec:	0018      	movs	r0, r3
 80088ee:	23c6      	movs	r3, #198	; 0xc6
 80088f0:	001a      	movs	r2, r3
 80088f2:	2100      	movs	r1, #0
 80088f4:	f003 fc6e 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80088f8:	193b      	adds	r3, r7, r4
 80088fa:	2246      	movs	r2, #70	; 0x46
 80088fc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088fe:	003a      	movs	r2, r7
 8008900:	193b      	adds	r3, r7, r4
 8008902:	0011      	movs	r1, r2
 8008904:	0018      	movs	r0, r3
 8008906:	f000 fd2f 	bl	8009368 <astronode_transport_send_receive>
 800890a:	0003      	movs	r3, r0
 800890c:	2b01      	cmp	r3, #1
 800890e:	d111      	bne.n	8008934 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <astronode_send_sak_cr+0x70>)
 8008912:	195b      	adds	r3, r3, r5
 8008914:	19db      	adds	r3, r3, r7
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2bc6      	cmp	r3, #198	; 0xc6
 800891a:	d107      	bne.n	800892c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800891c:	4b08      	ldr	r3, [pc, #32]	; (8008940 <astronode_send_sak_cr+0x74>)
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008922:	4b08      	ldr	r3, [pc, #32]	; (8008944 <astronode_send_sak_cr+0x78>)
 8008924:	0018      	movs	r0, r3
 8008926:	f7fa fd2f 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800892a:	e003      	b.n	8008934 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <astronode_send_sak_cr+0x7c>)
 800892e:	0018      	movs	r0, r3
 8008930:	f7fa fd2a 	bl	8003388 <send_debug_logs>
}
 8008934:	46c0      	nop			; (mov r8, r8)
 8008936:	46bd      	mov	sp, r7
 8008938:	b064      	add	sp, #400	; 0x190
 800893a:	bdb0      	pop	{r4, r5, r7, pc}
 800893c:	fffffe70 	.word	0xfffffe70
 8008940:	20000b0c 	.word	0x20000b0c
 8008944:	080137d0 	.word	0x080137d0
 8008948:	080137f8 	.word	0x080137f8

0800894c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800894c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894e:	b0ed      	sub	sp, #436	; 0x1b4
 8008950:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008952:	21c8      	movs	r1, #200	; 0xc8
 8008954:	2318      	movs	r3, #24
 8008956:	18cb      	adds	r3, r1, r3
 8008958:	19db      	adds	r3, r3, r7
 800895a:	0018      	movs	r0, r3
 800895c:	23c6      	movs	r3, #198	; 0xc6
 800895e:	001a      	movs	r2, r3
 8008960:	2100      	movs	r1, #0
 8008962:	f003 fc37 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008966:	4b4a      	ldr	r3, [pc, #296]	; (8008a90 <astronode_send_mpn_rr+0x144>)
 8008968:	26cc      	movs	r6, #204	; 0xcc
 800896a:	0076      	lsls	r6, r6, #1
 800896c:	199b      	adds	r3, r3, r6
 800896e:	2218      	movs	r2, #24
 8008970:	4694      	mov	ip, r2
 8008972:	44bc      	add	ip, r7
 8008974:	4463      	add	r3, ip
 8008976:	0018      	movs	r0, r3
 8008978:	23c6      	movs	r3, #198	; 0xc6
 800897a:	001a      	movs	r2, r3
 800897c:	2100      	movs	r1, #0
 800897e:	f003 fc29 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008982:	21c8      	movs	r1, #200	; 0xc8
 8008984:	2318      	movs	r3, #24
 8008986:	18cb      	adds	r3, r1, r3
 8008988:	19db      	adds	r3, r3, r7
 800898a:	221b      	movs	r2, #27
 800898c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800898e:	2318      	movs	r3, #24
 8008990:	18fa      	adds	r2, r7, r3
 8008992:	2318      	movs	r3, #24
 8008994:	18cb      	adds	r3, r1, r3
 8008996:	19db      	adds	r3, r3, r7
 8008998:	0011      	movs	r1, r2
 800899a:	0018      	movs	r0, r3
 800899c:	f000 fce4 	bl	8009368 <astronode_transport_send_receive>
 80089a0:	0003      	movs	r3, r0
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d16f      	bne.n	8008a86 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80089a6:	4b3a      	ldr	r3, [pc, #232]	; (8008a90 <astronode_send_mpn_rr+0x144>)
 80089a8:	0032      	movs	r2, r6
 80089aa:	189b      	adds	r3, r3, r2
 80089ac:	2118      	movs	r1, #24
 80089ae:	468c      	mov	ip, r1
 80089b0:	44bc      	add	ip, r7
 80089b2:	4463      	add	r3, ip
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b9b      	cmp	r3, #155	; 0x9b
 80089b8:	d161      	bne.n	8008a7e <astronode_send_mpn_rr+0x132>
        {
 80089ba:	466b      	mov	r3, sp
 80089bc:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 80089be:	4b34      	ldr	r3, [pc, #208]	; (8008a90 <astronode_send_mpn_rr+0x144>)
 80089c0:	189b      	adds	r3, r3, r2
 80089c2:	2218      	movs	r2, #24
 80089c4:	4694      	mov	ip, r2
 80089c6:	44bc      	add	ip, r7
 80089c8:	4463      	add	r3, ip
 80089ca:	22c4      	movs	r2, #196	; 0xc4
 80089cc:	5a9b      	ldrh	r3, [r3, r2]
 80089ce:	001a      	movs	r2, r3
 80089d0:	3a01      	subs	r2, #1
 80089d2:	21ca      	movs	r1, #202	; 0xca
 80089d4:	0049      	lsls	r1, r1, #1
 80089d6:	2018      	movs	r0, #24
 80089d8:	1809      	adds	r1, r1, r0
 80089da:	19c9      	adds	r1, r1, r7
 80089dc:	600a      	str	r2, [r1, #0]
 80089de:	001c      	movs	r4, r3
 80089e0:	2200      	movs	r2, #0
 80089e2:	0015      	movs	r5, r2
 80089e4:	0020      	movs	r0, r4
 80089e6:	0029      	movs	r1, r5
 80089e8:	0004      	movs	r4, r0
 80089ea:	0f62      	lsrs	r2, r4, #29
 80089ec:	000c      	movs	r4, r1
 80089ee:	00e4      	lsls	r4, r4, #3
 80089f0:	617c      	str	r4, [r7, #20]
 80089f2:	697c      	ldr	r4, [r7, #20]
 80089f4:	4314      	orrs	r4, r2
 80089f6:	617c      	str	r4, [r7, #20]
 80089f8:	0001      	movs	r1, r0
 80089fa:	00c9      	lsls	r1, r1, #3
 80089fc:	6139      	str	r1, [r7, #16]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	6838      	ldr	r0, [r7, #0]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	0004      	movs	r4, r0
 8008a0a:	0f62      	lsrs	r2, r4, #29
 8008a0c:	000c      	movs	r4, r1
 8008a0e:	00e4      	lsls	r4, r4, #3
 8008a10:	60fc      	str	r4, [r7, #12]
 8008a12:	68fc      	ldr	r4, [r7, #12]
 8008a14:	4314      	orrs	r4, r2
 8008a16:	60fc      	str	r4, [r7, #12]
 8008a18:	0001      	movs	r1, r0
 8008a1a:	00ca      	lsls	r2, r1, #3
 8008a1c:	60ba      	str	r2, [r7, #8]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	08db      	lsrs	r3, r3, #3
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4669      	mov	r1, sp
 8008a26:	1acb      	subs	r3, r1, r3
 8008a28:	469d      	mov	sp, r3
 8008a2a:	466b      	mov	r3, sp
 8008a2c:	3300      	adds	r3, #0
 8008a2e:	24c8      	movs	r4, #200	; 0xc8
 8008a30:	0064      	lsls	r4, r4, #1
 8008a32:	2218      	movs	r2, #24
 8008a34:	18a2      	adds	r2, r4, r2
 8008a36:	19d1      	adds	r1, r2, r7
 8008a38:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008a3a:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <astronode_send_mpn_rr+0x148>)
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fa fca3 	bl	8003388 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <astronode_send_mpn_rr+0x144>)
 8008a44:	22cc      	movs	r2, #204	; 0xcc
 8008a46:	0052      	lsls	r2, r2, #1
 8008a48:	189b      	adds	r3, r3, r2
 8008a4a:	2218      	movs	r2, #24
 8008a4c:	4694      	mov	ip, r2
 8008a4e:	44bc      	add	ip, r7
 8008a50:	4463      	add	r3, ip
 8008a52:	22c4      	movs	r2, #196	; 0xc4
 8008a54:	5a9b      	ldrh	r3, [r3, r2]
 8008a56:	0019      	movs	r1, r3
 8008a58:	2318      	movs	r3, #24
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	4a0e      	ldr	r2, [pc, #56]	; (8008a98 <astronode_send_mpn_rr+0x14c>)
 8008a60:	2018      	movs	r0, #24
 8008a62:	1820      	adds	r0, r4, r0
 8008a64:	19c0      	adds	r0, r0, r7
 8008a66:	6800      	ldr	r0, [r0, #0]
 8008a68:	f003 faea 	bl	800c040 <snprintf>
            send_debug_logs(product_number);
 8008a6c:	2318      	movs	r3, #24
 8008a6e:	18e3      	adds	r3, r4, r3
 8008a70:	19db      	adds	r3, r3, r7
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7fa fc87 	bl	8003388 <send_debug_logs>
 8008a7a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008a7c:	e003      	b.n	8008a86 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008a7e:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <astronode_send_mpn_rr+0x150>)
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7fa fc81 	bl	8003388 <send_debug_logs>
}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b06d      	add	sp, #436	; 0x1b4
 8008a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	fffffe68 	.word	0xfffffe68
 8008a94:	080138c0 	.word	0x080138c0
 8008a98:	080133dc 	.word	0x080133dc
 8008a9c:	08013418 	.word	0x08013418

08008aa0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b0e4      	sub	sp, #400	; 0x190
 8008aa4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008aa6:	24c8      	movs	r4, #200	; 0xc8
 8008aa8:	193b      	adds	r3, r7, r4
 8008aaa:	0018      	movs	r0, r3
 8008aac:	23c6      	movs	r3, #198	; 0xc6
 8008aae:	001a      	movs	r2, r3
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	f003 fb8f 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <astronode_send_cmd_cr+0x70>)
 8008ab8:	25c8      	movs	r5, #200	; 0xc8
 8008aba:	006d      	lsls	r5, r5, #1
 8008abc:	195b      	adds	r3, r3, r5
 8008abe:	19db      	adds	r3, r3, r7
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	23c6      	movs	r3, #198	; 0xc6
 8008ac4:	001a      	movs	r2, r3
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	f003 fb84 	bl	800c1d4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008acc:	193b      	adds	r3, r7, r4
 8008ace:	2248      	movs	r2, #72	; 0x48
 8008ad0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008ad2:	003a      	movs	r2, r7
 8008ad4:	193b      	adds	r3, r7, r4
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f000 fc45 	bl	8009368 <astronode_transport_send_receive>
 8008ade:	0003      	movs	r3, r0
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d111      	bne.n	8008b08 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <astronode_send_cmd_cr+0x70>)
 8008ae6:	195b      	adds	r3, r3, r5
 8008ae8:	19db      	adds	r3, r3, r7
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2bc8      	cmp	r3, #200	; 0xc8
 8008aee:	d107      	bne.n	8008b00 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008af0:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <astronode_send_cmd_cr+0x74>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008af6:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <astronode_send_cmd_cr+0x78>)
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7fa fc45 	bl	8003388 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008afe:	e003      	b.n	8008b08 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <astronode_send_cmd_cr+0x7c>)
 8008b02:	0018      	movs	r0, r3
 8008b04:	f7fa fc40 	bl	8003388 <send_debug_logs>
}
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b064      	add	sp, #400	; 0x190
 8008b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b10:	fffffe70 	.word	0xfffffe70
 8008b14:	20000b0e 	.word	0x20000b0e
 8008b18:	08013d10 	.word	0x08013d10
 8008b1c:	08013d34 	.word	0x08013d34

08008b20 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8008b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b22:	4cc6      	ldr	r4, [pc, #792]	; (8008e3c <astronode_send_cmd_rr+0x31c>)
 8008b24:	44a5      	add	sp, r4
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008b2a:	2190      	movs	r1, #144	; 0x90
 8008b2c:	0049      	lsls	r1, r1, #1
 8008b2e:	2318      	movs	r3, #24
 8008b30:	18cb      	adds	r3, r1, r3
 8008b32:	19db      	adds	r3, r3, r7
 8008b34:	0018      	movs	r0, r3
 8008b36:	23c6      	movs	r3, #198	; 0xc6
 8008b38:	001a      	movs	r2, r3
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f003 fb4a 	bl	800c1d4 <memset>
    astronode_app_msg_t answer = {0};
 8008b40:	4bbf      	ldr	r3, [pc, #764]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008b42:	26fc      	movs	r6, #252	; 0xfc
 8008b44:	0076      	lsls	r6, r6, #1
 8008b46:	199b      	adds	r3, r3, r6
 8008b48:	2218      	movs	r2, #24
 8008b4a:	4694      	mov	ip, r2
 8008b4c:	44bc      	add	ip, r7
 8008b4e:	4463      	add	r3, ip
 8008b50:	0018      	movs	r0, r3
 8008b52:	23c6      	movs	r3, #198	; 0xc6
 8008b54:	001a      	movs	r2, r3
 8008b56:	2100      	movs	r1, #0
 8008b58:	f003 fb3c 	bl	800c1d4 <memset>
    bool result = false ;
 8008b5c:	23f8      	movs	r3, #248	; 0xf8
 8008b5e:	33ff      	adds	r3, #255	; 0xff
 8008b60:	2218      	movs	r2, #24
 8008b62:	189b      	adds	r3, r3, r2
 8008b64:	19db      	adds	r3, r3, r7
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008b6a:	2190      	movs	r1, #144	; 0x90
 8008b6c:	0049      	lsls	r1, r1, #1
 8008b6e:	2318      	movs	r3, #24
 8008b70:	18cb      	adds	r3, r1, r3
 8008b72:	19db      	adds	r3, r3, r7
 8008b74:	2247      	movs	r2, #71	; 0x47
 8008b76:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008b78:	2258      	movs	r2, #88	; 0x58
 8008b7a:	2318      	movs	r3, #24
 8008b7c:	18d3      	adds	r3, r2, r3
 8008b7e:	19da      	adds	r2, r3, r7
 8008b80:	2318      	movs	r3, #24
 8008b82:	18cb      	adds	r3, r1, r3
 8008b84:	19db      	adds	r3, r3, r7
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f000 fbed 	bl	8009368 <astronode_transport_send_receive>
 8008b8e:	0003      	movs	r3, r0
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d000      	beq.n	8008b96 <astronode_send_cmd_rr+0x76>
 8008b94:	e146      	b.n	8008e24 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008b96:	4baa      	ldr	r3, [pc, #680]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008b98:	199a      	adds	r2, r3, r6
 8008b9a:	2318      	movs	r3, #24
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	18d3      	adds	r3, r2, r3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2bc7      	cmp	r3, #199	; 0xc7
 8008ba4:	d000      	beq.n	8008ba8 <astronode_send_cmd_rr+0x88>
 8008ba6:	e139      	b.n	8008e1c <astronode_send_cmd_rr+0x2fc>
        {
 8008ba8:	466b      	mov	r3, sp
 8008baa:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008bac:	4ba5      	ldr	r3, [pc, #660]	; (8008e44 <astronode_send_cmd_rr+0x324>)
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7fa fbea 	bl	8003388 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008bb4:	4ba2      	ldr	r3, [pc, #648]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008bb6:	21fc      	movs	r1, #252	; 0xfc
 8008bb8:	0049      	lsls	r1, r1, #1
 8008bba:	185a      	adds	r2, r3, r1
 8008bbc:	2318      	movs	r3, #24
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008bc6:	4b9e      	ldr	r3, [pc, #632]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008bc8:	1858      	adds	r0, r3, r1
 8008bca:	2318      	movs	r3, #24
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	18c3      	adds	r3, r0, r3
 8008bd0:	789b      	ldrb	r3, [r3, #2]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008bd6:	4b9a      	ldr	r3, [pc, #616]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008bd8:	1858      	adds	r0, r3, r1
 8008bda:	2318      	movs	r3, #24
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	18c3      	adds	r3, r0, r3
 8008be0:	78db      	ldrb	r3, [r3, #3]
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008be6:	4b96      	ldr	r3, [pc, #600]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008be8:	1858      	adds	r0, r3, r1
 8008bea:	2318      	movs	r3, #24
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	18c3      	adds	r3, r0, r3
 8008bf0:	791b      	ldrb	r3, [r3, #4]
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008bf6:	22f8      	movs	r2, #248	; 0xf8
 8008bf8:	0052      	lsls	r2, r2, #1
 8008bfa:	2118      	movs	r1, #24
 8008bfc:	1851      	adds	r1, r2, r1
 8008bfe:	19c8      	adds	r0, r1, r7
 8008c00:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008c02:	2318      	movs	r3, #24
 8008c04:	18d3      	adds	r3, r2, r3
 8008c06:	19da      	adds	r2, r3, r7
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	498f      	ldr	r1, [pc, #572]	; (8008e48 <astronode_send_cmd_rr+0x328>)
 8008c0c:	2008      	movs	r0, #8
 8008c0e:	2318      	movs	r3, #24
 8008c10:	18c3      	adds	r3, r0, r3
 8008c12:	19db      	adds	r3, r3, r7
 8008c14:	0018      	movs	r0, r3
 8008c16:	f003 fa47 	bl	800c0a8 <sprintf>
            send_debug_logs(str);
 8008c1a:	2008      	movs	r0, #8
 8008c1c:	2318      	movs	r3, #24
 8008c1e:	18c3      	adds	r3, r0, r3
 8008c20:	19db      	adds	r3, r3, r7
 8008c22:	0018      	movs	r0, r3
 8008c24:	f7fa fbb0 	bl	8003388 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008c28:	4b85      	ldr	r3, [pc, #532]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008c2a:	21fc      	movs	r1, #252	; 0xfc
 8008c2c:	0049      	lsls	r1, r1, #1
 8008c2e:	185a      	adds	r2, r3, r1
 8008c30:	2318      	movs	r3, #24
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	18d3      	adds	r3, r2, r3
 8008c36:	22c4      	movs	r2, #196	; 0xc4
 8008c38:	5a9b      	ldrh	r3, [r3, r2]
 8008c3a:	2b2c      	cmp	r3, #44	; 0x2c
 8008c3c:	d013      	beq.n	8008c66 <astronode_send_cmd_rr+0x146>
 8008c3e:	4b80      	ldr	r3, [pc, #512]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008c40:	185a      	adds	r2, r3, r1
 8008c42:	2318      	movs	r3, #24
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	22c4      	movs	r2, #196	; 0xc4
 8008c4a:	5a9b      	ldrh	r3, [r3, r2]
 8008c4c:	2b0c      	cmp	r3, #12
 8008c4e:	d00a      	beq.n	8008c66 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8008c50:	4b7e      	ldr	r3, [pc, #504]	; (8008e4c <astronode_send_cmd_rr+0x32c>)
 8008c52:	0018      	movs	r0, r3
 8008c54:	f7fa fb98 	bl	8003388 <send_debug_logs>
                return result ;
 8008c58:	23f8      	movs	r3, #248	; 0xf8
 8008c5a:	33ff      	adds	r3, #255	; 0xff
 8008c5c:	2218      	movs	r2, #24
 8008c5e:	189b      	adds	r3, r3, r2
 8008c60:	19db      	adds	r3, r3, r7
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	e0d8      	b.n	8008e18 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008c66:	4b76      	ldr	r3, [pc, #472]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008c68:	22fc      	movs	r2, #252	; 0xfc
 8008c6a:	0052      	lsls	r2, r2, #1
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	2218      	movs	r2, #24
 8008c70:	4694      	mov	ip, r2
 8008c72:	44bc      	add	ip, r7
 8008c74:	4463      	add	r3, ip
 8008c76:	22c4      	movs	r2, #196	; 0xc4
 8008c78:	5a9b      	ldrh	r3, [r3, r2]
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	21f6      	movs	r1, #246	; 0xf6
 8008c80:	0049      	lsls	r1, r1, #1
 8008c82:	2018      	movs	r0, #24
 8008c84:	1809      	adds	r1, r1, r0
 8008c86:	19c9      	adds	r1, r1, r7
 8008c88:	600a      	str	r2, [r1, #0]
 8008c8a:	001c      	movs	r4, r3
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	0015      	movs	r5, r2
 8008c90:	0020      	movs	r0, r4
 8008c92:	0029      	movs	r1, r5
 8008c94:	0004      	movs	r4, r0
 8008c96:	0f62      	lsrs	r2, r4, #29
 8008c98:	000c      	movs	r4, r1
 8008c9a:	00e4      	lsls	r4, r4, #3
 8008c9c:	617c      	str	r4, [r7, #20]
 8008c9e:	697c      	ldr	r4, [r7, #20]
 8008ca0:	4314      	orrs	r4, r2
 8008ca2:	617c      	str	r4, [r7, #20]
 8008ca4:	0001      	movs	r1, r0
 8008ca6:	00c9      	lsls	r1, r1, #3
 8008ca8:	6139      	str	r1, [r7, #16]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	2200      	movs	r2, #0
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	6838      	ldr	r0, [r7, #0]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	0004      	movs	r4, r0
 8008cb6:	0f62      	lsrs	r2, r4, #29
 8008cb8:	000c      	movs	r4, r1
 8008cba:	00e4      	lsls	r4, r4, #3
 8008cbc:	60fc      	str	r4, [r7, #12]
 8008cbe:	68fc      	ldr	r4, [r7, #12]
 8008cc0:	4314      	orrs	r4, r2
 8008cc2:	60fc      	str	r4, [r7, #12]
 8008cc4:	0001      	movs	r1, r0
 8008cc6:	00ca      	lsls	r2, r1, #3
 8008cc8:	60ba      	str	r2, [r7, #8]
 8008cca:	3307      	adds	r3, #7
 8008ccc:	08db      	lsrs	r3, r3, #3
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4669      	mov	r1, sp
 8008cd2:	1acb      	subs	r3, r1, r3
 8008cd4:	469d      	mov	sp, r3
 8008cd6:	466b      	mov	r3, sp
 8008cd8:	3300      	adds	r3, #0
 8008cda:	20f4      	movs	r0, #244	; 0xf4
 8008cdc:	0040      	lsls	r0, r0, #1
 8008cde:	2218      	movs	r2, #24
 8008ce0:	1882      	adds	r2, r0, r2
 8008ce2:	19d1      	adds	r1, r2, r7
 8008ce4:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008ce6:	4b56      	ldr	r3, [pc, #344]	; (8008e40 <astronode_send_cmd_rr+0x320>)
 8008ce8:	22fc      	movs	r2, #252	; 0xfc
 8008cea:	0052      	lsls	r2, r2, #1
 8008cec:	189b      	adds	r3, r3, r2
 8008cee:	2218      	movs	r2, #24
 8008cf0:	4694      	mov	ip, r2
 8008cf2:	44bc      	add	ip, r7
 8008cf4:	4463      	add	r3, ip
 8008cf6:	22c4      	movs	r2, #196	; 0xc4
 8008cf8:	5a9b      	ldrh	r3, [r3, r2]
 8008cfa:	3b03      	subs	r3, #3
 8008cfc:	0019      	movs	r1, r3
 8008cfe:	2358      	movs	r3, #88	; 0x58
 8008d00:	2218      	movs	r2, #24
 8008d02:	189b      	adds	r3, r3, r2
 8008d04:	19db      	adds	r3, r3, r7
 8008d06:	3305      	adds	r3, #5
 8008d08:	4a51      	ldr	r2, [pc, #324]	; (8008e50 <astronode_send_cmd_rr+0x330>)
 8008d0a:	2418      	movs	r4, #24
 8008d0c:	1900      	adds	r0, r0, r4
 8008d0e:	19c0      	adds	r0, r0, r7
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f003 f995 	bl	800c040 <snprintf>
 8008d16:	0002      	movs	r2, r0
 8008d18:	23f3      	movs	r3, #243	; 0xf3
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	2118      	movs	r1, #24
 8008d1e:	185b      	adds	r3, r3, r1
 8008d20:	19db      	adds	r3, r3, r7
 8008d22:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008d24:	23fb      	movs	r3, #251	; 0xfb
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	2218      	movs	r2, #24
 8008d2a:	189b      	adds	r3, r3, r2
 8008d2c:	19db      	adds	r3, r3, r7
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e037      	b.n	8008da4 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008d34:	23fb      	movs	r3, #251	; 0xfb
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	2218      	movs	r2, #24
 8008d3a:	189b      	adds	r3, r3, r2
 8008d3c:	19db      	adds	r3, r3, r7
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	22f4      	movs	r2, #244	; 0xf4
 8008d42:	0052      	lsls	r2, r2, #1
 8008d44:	2118      	movs	r1, #24
 8008d46:	1852      	adds	r2, r2, r1
 8008d48:	19d2      	adds	r2, r2, r7
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	4b40      	ldr	r3, [pc, #256]	; (8008e54 <astronode_send_cmd_rr+0x334>)
 8008d52:	18d3      	adds	r3, r2, r3
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	001a      	movs	r2, r3
 8008d58:	2397      	movs	r3, #151	; 0x97
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d105      	bne.n	8008d6a <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008d5e:	4b3e      	ldr	r3, [pc, #248]	; (8008e58 <astronode_send_cmd_rr+0x338>)
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7fa fb11 	bl	8003388 <send_debug_logs>
                    return false;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e056      	b.n	8008e18 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008d6a:	20fb      	movs	r0, #251	; 0xfb
 8008d6c:	0040      	lsls	r0, r0, #1
 8008d6e:	2318      	movs	r3, #24
 8008d70:	18c3      	adds	r3, r0, r3
 8008d72:	19db      	adds	r3, r3, r7
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	2318      	movs	r3, #24
 8008d78:	18c3      	adds	r3, r0, r3
 8008d7a:	19db      	adds	r3, r3, r7
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	69f9      	ldr	r1, [r7, #28]
 8008d80:	18cb      	adds	r3, r1, r3
 8008d82:	21f4      	movs	r1, #244	; 0xf4
 8008d84:	0049      	lsls	r1, r1, #1
 8008d86:	2418      	movs	r4, #24
 8008d88:	1909      	adds	r1, r1, r4
 8008d8a:	19c9      	adds	r1, r1, r7
 8008d8c:	6809      	ldr	r1, [r1, #0]
 8008d8e:	5c8a      	ldrb	r2, [r1, r2]
 8008d90:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008d92:	2318      	movs	r3, #24
 8008d94:	18c3      	adds	r3, r0, r3
 8008d96:	19db      	adds	r3, r3, r7
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	2318      	movs	r3, #24
 8008d9c:	18c3      	adds	r3, r0, r3
 8008d9e:	19db      	adds	r3, r3, r7
 8008da0:	3201      	adds	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	23fb      	movs	r3, #251	; 0xfb
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	2218      	movs	r2, #24
 8008daa:	189b      	adds	r3, r3, r2
 8008dac:	19db      	adds	r3, r3, r7
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	21f3      	movs	r1, #243	; 0xf3
 8008db4:	0049      	lsls	r1, r1, #1
 8008db6:	2218      	movs	r2, #24
 8008db8:	188a      	adds	r2, r1, r2
 8008dba:	19d2      	adds	r2, r2, r7
 8008dbc:	8812      	ldrh	r2, [r2, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d8b8      	bhi.n	8008d34 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8008dc2:	23f8      	movs	r3, #248	; 0xf8
 8008dc4:	33ff      	adds	r3, #255	; 0xff
 8008dc6:	2218      	movs	r2, #24
 8008dc8:	189b      	adds	r3, r3, r2
 8008dca:	19db      	adds	r3, r3, r7
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008dd0:	2318      	movs	r3, #24
 8008dd2:	18cb      	adds	r3, r1, r3
 8008dd4:	19db      	adds	r3, r3, r7
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	18d3      	adds	r3, r2, r3
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008de0:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <astronode_send_cmd_rr+0x33c>)
 8008de2:	0018      	movs	r0, r3
 8008de4:	f7fa fad0 	bl	8003388 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008de8:	2358      	movs	r3, #88	; 0x58
 8008dea:	2218      	movs	r2, #24
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	19db      	adds	r3, r3, r7
 8008df0:	1d5a      	adds	r2, r3, #5
 8008df2:	491b      	ldr	r1, [pc, #108]	; (8008e60 <astronode_send_cmd_rr+0x340>)
 8008df4:	24f4      	movs	r4, #244	; 0xf4
 8008df6:	0064      	lsls	r4, r4, #1
 8008df8:	2318      	movs	r3, #24
 8008dfa:	18e3      	adds	r3, r4, r3
 8008dfc:	19db      	adds	r3, r3, r7
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	0018      	movs	r0, r3
 8008e02:	f003 f951 	bl	800c0a8 <sprintf>
            send_debug_logs(command_content);
 8008e06:	2318      	movs	r3, #24
 8008e08:	18e3      	adds	r3, r4, r3
 8008e0a:	19db      	adds	r3, r3, r7
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	0018      	movs	r0, r3
 8008e10:	f7fa faba 	bl	8003388 <send_debug_logs>
 8008e14:	46b5      	mov	sp, r6
 8008e16:	e005      	b.n	8008e24 <astronode_send_cmd_rr+0x304>
                return result ;
 8008e18:	46b5      	mov	sp, r6
 8008e1a:	e009      	b.n	8008e30 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <astronode_send_cmd_rr+0x344>)
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7fa fab2 	bl	8003388 <send_debug_logs>
        }
    }
    return result ;
 8008e24:	23f8      	movs	r3, #248	; 0xf8
 8008e26:	33ff      	adds	r3, #255	; 0xff
 8008e28:	2218      	movs	r2, #24
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	19db      	adds	r3, r3, r7
 8008e2e:	781b      	ldrb	r3, [r3, #0]
}
 8008e30:	0018      	movs	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	2385      	movs	r3, #133	; 0x85
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	449d      	add	sp, r3
 8008e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3c:	fffffdec 	.word	0xfffffdec
 8008e40:	fffffe60 	.word	0xfffffe60
 8008e44:	08013d4c 	.word	0x08013d4c
 8008e48:	08013d68 	.word	0x08013d68
 8008e4c:	08013db8 	.word	0x08013db8
 8008e50:	080133dc 	.word	0x080133dc
 8008e54:	08014910 	.word	0x08014910
 8008e58:	08013dcc 	.word	0x08013dcc
 8008e5c:	08013df8 	.word	0x08013df8
 8008e60:	08013e10 	.word	0x08013e10
 8008e64:	08013e14 	.word	0x08013e14

08008e68 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <is_sak_available+0x10>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	20000b0c 	.word	0x20000b0c

08008e7c <is_astronode_reset>:

bool is_astronode_reset()
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <is_astronode_reset+0x10>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
}
 8008e84:	0018      	movs	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	20000b0d 	.word	0x20000b0d

08008e90 <is_command_available>:

bool is_command_available()
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <is_command_available+0x10>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
}
 8008e98:	0018      	movs	r0, r3
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	20000b0e 	.word	0x20000b0e

08008ea4 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	0002      	movs	r2, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	1dfb      	adds	r3, r7, #7
 8008eb0:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008eb2:	1dfb      	adds	r3, r7, #7
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8008eb8:	d90b      	bls.n	8008ed2 <ascii_to_value+0x2e>
 8008eba:	1dfb      	adds	r3, r7, #7
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b39      	cmp	r3, #57	; 0x39
 8008ec0:	d807      	bhi.n	8008ed2 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008ec2:	1dfb      	adds	r3, r7, #7
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	3b30      	subs	r3, #48	; 0x30
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	701a      	strb	r2, [r3, #0]
        return true;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e010      	b.n	8008ef4 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008ed2:	1dfb      	adds	r3, r7, #7
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d90b      	bls.n	8008ef2 <ascii_to_value+0x4e>
 8008eda:	1dfb      	adds	r3, r7, #7
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b46      	cmp	r3, #70	; 0x46
 8008ee0:	d807      	bhi.n	8008ef2 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008ee2:	1dfb      	adds	r3, r7, #7
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	3b37      	subs	r3, #55	; 0x37
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	701a      	strb	r2, [r3, #0]
        return true;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008ef2:	2300      	movs	r3, #0
    }
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b002      	add	sp, #8
 8008efa:	bd80      	pop	{r7, pc}

08008efc <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008f06:	250e      	movs	r5, #14
 8008f08:	197b      	adds	r3, r7, r5
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008f0e:	197b      	adds	r3, r7, r5
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	197a      	adds	r2, r7, r5
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	8011      	strh	r1, [r2, #0]
 8008f18:	001a      	movs	r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	189b      	adds	r3, r3, r2
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	260a      	movs	r6, #10
 8008f26:	19bc      	adds	r4, r7, r6
 8008f28:	4a44      	ldr	r2, [pc, #272]	; (800903c <astronode_create_request_transport+0x140>)
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f000 fa7d 	bl	800942c <calculate_crc>
 8008f32:	0003      	movs	r3, r0
 8008f34:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	1c58      	adds	r0, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	22c4      	movs	r2, #196	; 0xc4
 8008f3e:	5a99      	ldrh	r1, [r3, r2]
 8008f40:	19bc      	adds	r4, r7, r6
 8008f42:	19bb      	adds	r3, r7, r6
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	001a      	movs	r2, r3
 8008f48:	f000 fa70 	bl	800942c <calculate_crc>
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008f50:	19bb      	adds	r3, r7, r6
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	b21a      	sxth	r2, r3
 8008f58:	0031      	movs	r1, r6
 8008f5a:	19bb      	adds	r3, r7, r6
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	b21b      	sxth	r3, r3
 8008f64:	4313      	orrs	r3, r2
 8008f66:	b21a      	sxth	r2, r3
 8008f68:	187b      	adds	r3, r7, r1
 8008f6a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7818      	ldrb	r0, [r3, #0]
 8008f70:	197b      	adds	r3, r7, r5
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	18d3      	adds	r3, r2, r3
 8008f78:	0019      	movs	r1, r3
 8008f7a:	f000 fbeb 	bl	8009754 <uint8_to_ascii_buffer>
    index += 2;
 8008f7e:	197b      	adds	r3, r7, r5
 8008f80:	197a      	adds	r2, r7, r5
 8008f82:	8812      	ldrh	r2, [r2, #0]
 8008f84:	3202      	adds	r2, #2
 8008f86:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008f88:	230c      	movs	r3, #12
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	e017      	b.n	8008fc2 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008f92:	240c      	movs	r4, #12
 8008f94:	193b      	adds	r3, r7, r4
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	18d3      	adds	r3, r2, r3
 8008f9c:	7858      	ldrb	r0, [r3, #1]
 8008f9e:	250e      	movs	r5, #14
 8008fa0:	197b      	adds	r3, r7, r5
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	18d3      	adds	r3, r2, r3
 8008fa8:	0019      	movs	r1, r3
 8008faa:	f000 fbd3 	bl	8009754 <uint8_to_ascii_buffer>
        index += 2;
 8008fae:	197b      	adds	r3, r7, r5
 8008fb0:	197a      	adds	r2, r7, r5
 8008fb2:	8812      	ldrh	r2, [r2, #0]
 8008fb4:	3202      	adds	r2, #2
 8008fb6:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008fb8:	193b      	adds	r3, r7, r4
 8008fba:	881a      	ldrh	r2, [r3, #0]
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	3201      	adds	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	22c4      	movs	r2, #196	; 0xc4
 8008fc6:	5a9b      	ldrh	r3, [r3, r2]
 8008fc8:	220c      	movs	r2, #12
 8008fca:	18ba      	adds	r2, r7, r2
 8008fcc:	8812      	ldrh	r2, [r2, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d3df      	bcc.n	8008f92 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008fd2:	250a      	movs	r5, #10
 8008fd4:	197b      	adds	r3, r7, r5
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	0a1b      	lsrs	r3, r3, #8
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	b2d8      	uxtb	r0, r3
 8008fde:	240e      	movs	r4, #14
 8008fe0:	193b      	adds	r3, r7, r4
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	18d3      	adds	r3, r2, r3
 8008fe8:	0019      	movs	r1, r3
 8008fea:	f000 fbb3 	bl	8009754 <uint8_to_ascii_buffer>
    index += 2;
 8008fee:	0021      	movs	r1, r4
 8008ff0:	187b      	adds	r3, r7, r1
 8008ff2:	187a      	adds	r2, r7, r1
 8008ff4:	8812      	ldrh	r2, [r2, #0]
 8008ff6:	3202      	adds	r2, #2
 8008ff8:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008ffa:	197b      	adds	r3, r7, r5
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b2d8      	uxtb	r0, r3
 8009000:	000c      	movs	r4, r1
 8009002:	187b      	adds	r3, r7, r1
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	18d3      	adds	r3, r2, r3
 800900a:	0019      	movs	r1, r3
 800900c:	f000 fba2 	bl	8009754 <uint8_to_ascii_buffer>
    index += 2;
 8009010:	0020      	movs	r0, r4
 8009012:	183b      	adds	r3, r7, r0
 8009014:	183a      	adds	r2, r7, r0
 8009016:	8812      	ldrh	r2, [r2, #0]
 8009018:	3202      	adds	r2, #2
 800901a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 800901c:	183b      	adds	r3, r7, r0
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	183a      	adds	r2, r7, r0
 8009022:	1c59      	adds	r1, r3, #1
 8009024:	8011      	strh	r1, [r2, #0]
 8009026:	001a      	movs	r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	189b      	adds	r3, r3, r2
 800902c:	2203      	movs	r2, #3
 800902e:	701a      	strb	r2, [r3, #0]

    return index;
 8009030:	183b      	adds	r3, r7, r0
 8009032:	881b      	ldrh	r3, [r3, #0]
}
 8009034:	0018      	movs	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	b005      	add	sp, #20
 800903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903c:	0000ffff 	.word	0x0000ffff

08009040 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009042:	b089      	sub	sp, #36	; 0x24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	230a      	movs	r3, #10
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	1c0a      	adds	r2, r1, #0
 8009050:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d005      	beq.n	8009066 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800905a:	4bbd      	ldr	r3, [pc, #756]	; (8009350 <astronode_decode_answer_transport+0x310>)
 800905c:	0018      	movs	r0, r3
 800905e:	f7fa f993 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 8009062:	2300      	movs	r3, #0
 8009064:	e170      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8009066:	210a      	movs	r1, #10
 8009068:	187b      	adds	r3, r7, r1
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	2201      	movs	r2, #1
 800906e:	4013      	ands	r3, r2
 8009070:	b29b      	uxth	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <astronode_decode_answer_transport+0x3e>
 8009076:	187b      	adds	r3, r7, r1
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	2b07      	cmp	r3, #7
 800907c:	d805      	bhi.n	800908a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800907e:	4bb5      	ldr	r3, [pc, #724]	; (8009354 <astronode_decode_answer_transport+0x314>)
 8009080:	0018      	movs	r0, r3
 8009082:	f7fa f981 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 8009086:	2300      	movs	r3, #0
 8009088:	e15e      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800908a:	230a      	movs	r3, #10
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	3b08      	subs	r3, #8
 8009092:	2b00      	cmp	r3, #0
 8009094:	da00      	bge.n	8009098 <astronode_decode_answer_transport+0x58>
 8009096:	3301      	adds	r3, #1
 8009098:	105b      	asrs	r3, r3, #1
 800909a:	b299      	uxth	r1, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	22c4      	movs	r2, #196	; 0xc4
 80090a0:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80090a2:	230a      	movs	r3, #10
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	18d3      	adds	r3, r2, r3
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d005      	beq.n	80090c0 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80090b4:	4ba8      	ldr	r3, [pc, #672]	; (8009358 <astronode_decode_answer_transport+0x318>)
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7fa f966 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 80090bc:	2300      	movs	r3, #0
 80090be:	e143      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80090c0:	2117      	movs	r1, #23
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80090c8:	2416      	movs	r4, #22
 80090ca:	193b      	adds	r3, r7, r4
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	187a      	adds	r2, r7, r1
 80090d8:	0011      	movs	r1, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	f7ff fee2 	bl	8008ea4 <ascii_to_value>
 80090e0:	0003      	movs	r3, r0
 80090e2:	001a      	movs	r2, r3
 80090e4:	2301      	movs	r3, #1
 80090e6:	4053      	eors	r3, r2
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10e      	bne.n	800910c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3302      	adds	r3, #2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	193a      	adds	r2, r7, r4
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff fed3 	bl	8008ea4 <ascii_to_value>
 80090fe:	0003      	movs	r3, r0
 8009100:	001a      	movs	r2, r3
 8009102:	2301      	movs	r3, #1
 8009104:	4053      	eors	r3, r2
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800910c:	4b93      	ldr	r3, [pc, #588]	; (800935c <astronode_decode_answer_transport+0x31c>)
 800910e:	0018      	movs	r0, r3
 8009110:	f7fa f93a 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 8009114:	2300      	movs	r3, #0
 8009116:	e117      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8009118:	2317      	movs	r3, #23
 800911a:	18fb      	adds	r3, r7, r3
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	b2da      	uxtb	r2, r3
 8009122:	2316      	movs	r3, #22
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	18d3      	adds	r3, r2, r3
 800912a:	b2da      	uxtb	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009130:	231e      	movs	r3, #30
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	2203      	movs	r2, #3
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	231c      	movs	r3, #28
 800913a:	18fb      	adds	r3, r7, r3
 800913c:	2200      	movs	r2, #0
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	e045      	b.n	80091ce <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8009142:	241e      	movs	r4, #30
 8009144:	193b      	adds	r3, r7, r4
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2217      	movs	r2, #23
 8009150:	18ba      	adds	r2, r7, r2
 8009152:	0011      	movs	r1, r2
 8009154:	0018      	movs	r0, r3
 8009156:	f7ff fea5 	bl	8008ea4 <ascii_to_value>
 800915a:	0003      	movs	r3, r0
 800915c:	001a      	movs	r2, r3
 800915e:	2301      	movs	r3, #1
 8009160:	4053      	eors	r3, r2
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d112      	bne.n	800918e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009168:	193b      	adds	r3, r7, r4
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	18d3      	adds	r3, r2, r3
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2216      	movs	r2, #22
 8009176:	18ba      	adds	r2, r7, r2
 8009178:	0011      	movs	r1, r2
 800917a:	0018      	movs	r0, r3
 800917c:	f7ff fe92 	bl	8008ea4 <ascii_to_value>
 8009180:	0003      	movs	r3, r0
 8009182:	001a      	movs	r2, r3
 8009184:	2301      	movs	r3, #1
 8009186:	4053      	eors	r3, r2
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800918e:	4b73      	ldr	r3, [pc, #460]	; (800935c <astronode_decode_answer_transport+0x31c>)
 8009190:	0018      	movs	r0, r3
 8009192:	f7fa f8f9 	bl	8003388 <send_debug_logs>
            return RS_FAILURE;
 8009196:	2300      	movs	r3, #0
 8009198:	e0d6      	b.n	8009348 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800919a:	2317      	movs	r3, #23
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	011b      	lsls	r3, r3, #4
 80091a2:	b2d9      	uxtb	r1, r3
 80091a4:	2316      	movs	r3, #22
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	781a      	ldrb	r2, [r3, #0]
 80091aa:	201c      	movs	r0, #28
 80091ac:	183b      	adds	r3, r7, r0
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	1838      	adds	r0, r7, r0
 80091b2:	1c5c      	adds	r4, r3, #1
 80091b4:	8004      	strh	r4, [r0, #0]
 80091b6:	0018      	movs	r0, r3
 80091b8:	188b      	adds	r3, r1, r2
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	181b      	adds	r3, r3, r0
 80091c0:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80091c2:	221e      	movs	r2, #30
 80091c4:	18bb      	adds	r3, r7, r2
 80091c6:	18ba      	adds	r2, r7, r2
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	3202      	adds	r2, #2
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	231e      	movs	r3, #30
 80091d0:	18fb      	adds	r3, r7, r3
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	260a      	movs	r6, #10
 80091d6:	19bb      	adds	r3, r7, r6
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	3b05      	subs	r3, #5
 80091dc:	429a      	cmp	r2, r3
 80091de:	dbb0      	blt.n	8009142 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	251a      	movs	r5, #26
 80091e4:	197c      	adds	r4, r7, r5
 80091e6:	4a5e      	ldr	r2, [pc, #376]	; (8009360 <astronode_decode_answer_transport+0x320>)
 80091e8:	2101      	movs	r1, #1
 80091ea:	0018      	movs	r0, r3
 80091ec:	f000 f91e 	bl	800942c <calculate_crc>
 80091f0:	0003      	movs	r3, r0
 80091f2:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	1c58      	adds	r0, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	22c4      	movs	r2, #196	; 0xc4
 80091fc:	5a99      	ldrh	r1, [r3, r2]
 80091fe:	197c      	adds	r4, r7, r5
 8009200:	197b      	adds	r3, r7, r5
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	001a      	movs	r2, r3
 8009206:	f000 f911 	bl	800942c <calculate_crc>
 800920a:	0003      	movs	r3, r0
 800920c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800920e:	197b      	adds	r3, r7, r5
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	b21a      	sxth	r2, r3
 8009216:	0029      	movs	r1, r5
 8009218:	197b      	adds	r3, r7, r5
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	0a1b      	lsrs	r3, r3, #8
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21b      	sxth	r3, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	b21a      	sxth	r2, r3
 8009226:	187b      	adds	r3, r7, r1
 8009228:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800922a:	19bb      	adds	r3, r7, r6
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	3b05      	subs	r3, #5
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	18d3      	adds	r3, r2, r3
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2217      	movs	r2, #23
 8009238:	18ba      	adds	r2, r7, r2
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f7ff fe31 	bl	8008ea4 <ascii_to_value>
 8009242:	0003      	movs	r3, r0
 8009244:	001a      	movs	r2, r3
 8009246:	2301      	movs	r3, #1
 8009248:	4053      	eors	r3, r2
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d112      	bne.n	8009276 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8009250:	19bb      	adds	r3, r7, r6
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	3b04      	subs	r3, #4
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	18d3      	adds	r3, r2, r3
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2216      	movs	r2, #22
 800925e:	18ba      	adds	r2, r7, r2
 8009260:	0011      	movs	r1, r2
 8009262:	0018      	movs	r0, r3
 8009264:	f7ff fe1e 	bl	8008ea4 <ascii_to_value>
 8009268:	0003      	movs	r3, r0
 800926a:	001a      	movs	r2, r3
 800926c:	2301      	movs	r3, #1
 800926e:	4053      	eors	r3, r2
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009276:	4b39      	ldr	r3, [pc, #228]	; (800935c <astronode_decode_answer_transport+0x31c>)
 8009278:	0018      	movs	r0, r3
 800927a:	f7fa f885 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 800927e:	2300      	movs	r3, #0
 8009280:	e062      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8009282:	2017      	movs	r0, #23
 8009284:	183b      	adds	r3, r7, r0
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	031b      	lsls	r3, r3, #12
 800928c:	b299      	uxth	r1, r3
 800928e:	2416      	movs	r4, #22
 8009290:	193b      	adds	r3, r7, r4
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	b29a      	uxth	r2, r3
 800929a:	2318      	movs	r3, #24
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	188a      	adds	r2, r1, r2
 80092a0:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80092a2:	250a      	movs	r5, #10
 80092a4:	197b      	adds	r3, r7, r5
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	3b03      	subs	r3, #3
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	18d3      	adds	r3, r2, r3
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	183a      	adds	r2, r7, r0
 80092b2:	0011      	movs	r1, r2
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7ff fdf5 	bl	8008ea4 <ascii_to_value>
 80092ba:	0003      	movs	r3, r0
 80092bc:	001a      	movs	r2, r3
 80092be:	2301      	movs	r3, #1
 80092c0:	4053      	eors	r3, r2
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d111      	bne.n	80092ec <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80092c8:	197b      	adds	r3, r7, r5
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	3b02      	subs	r3, #2
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	18d3      	adds	r3, r2, r3
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	193a      	adds	r2, r7, r4
 80092d6:	0011      	movs	r1, r2
 80092d8:	0018      	movs	r0, r3
 80092da:	f7ff fde3 	bl	8008ea4 <ascii_to_value>
 80092de:	0003      	movs	r3, r0
 80092e0:	001a      	movs	r2, r3
 80092e2:	2301      	movs	r3, #1
 80092e4:	4053      	eors	r3, r2
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80092ec:	4b1b      	ldr	r3, [pc, #108]	; (800935c <astronode_decode_answer_transport+0x31c>)
 80092ee:	0018      	movs	r0, r3
 80092f0:	f7fa f84a 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e027      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80092f8:	2317      	movs	r3, #23
 80092fa:	18fb      	adds	r3, r7, r3
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	b29a      	uxth	r2, r3
 8009304:	2316      	movs	r3, #22
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	18d3      	adds	r3, r2, r3
 800930e:	b299      	uxth	r1, r3
 8009310:	2018      	movs	r0, #24
 8009312:	183b      	adds	r3, r7, r0
 8009314:	183a      	adds	r2, r7, r0
 8009316:	8812      	ldrh	r2, [r2, #0]
 8009318:	188a      	adds	r2, r1, r2
 800931a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800931c:	183a      	adds	r2, r7, r0
 800931e:	231a      	movs	r3, #26
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	8812      	ldrh	r2, [r2, #0]
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d005      	beq.n	8009336 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800932a:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <astronode_decode_answer_transport+0x324>)
 800932c:	0018      	movs	r0, r3
 800932e:	f7fa f82b 	bl	8003388 <send_debug_logs>
        return RS_FAILURE;
 8009332:	2300      	movs	r3, #0
 8009334:	e008      	b.n	8009348 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2bff      	cmp	r3, #255	; 0xff
 800933c:	d103      	bne.n	8009346 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	0018      	movs	r0, r3
 8009342:	f000 f8c3 	bl	80094cc <check_for_error>
    }

    return RS_SUCCESS;
 8009346:	2301      	movs	r3, #1
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b009      	add	sp, #36	; 0x24
 800934e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009350:	08013ea4 	.word	0x08013ea4
 8009354:	08013ef4 	.word	0x08013ef4
 8009358:	08013f44 	.word	0x08013f44
 800935c:	08013f94 	.word	0x08013f94
 8009360:	0000ffff 	.word	0x0000ffff
 8009364:	08013fe0 	.word	0x08013fe0

08009368 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800936a:	4c2b      	ldr	r4, [pc, #172]	; (8009418 <astronode_transport_send_receive+0xb0>)
 800936c:	44a5      	add	sp, r4
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009374:	4b29      	ldr	r3, [pc, #164]	; (800941c <astronode_transport_send_receive+0xb4>)
 8009376:	25ca      	movs	r5, #202	; 0xca
 8009378:	00ad      	lsls	r5, r5, #2
 800937a:	195b      	adds	r3, r3, r5
 800937c:	19db      	adds	r3, r3, r7
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	3304      	adds	r3, #4
 8009384:	22c4      	movs	r2, #196	; 0xc4
 8009386:	0052      	lsls	r2, r2, #1
 8009388:	2100      	movs	r1, #0
 800938a:	0018      	movs	r0, r3
 800938c:	f002 ff22 	bl	800c1d4 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <astronode_transport_send_receive+0xb8>)
 8009392:	195b      	adds	r3, r3, r5
 8009394:	19db      	adds	r3, r3, r7
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	3304      	adds	r3, #4
 800939c:	22c4      	movs	r2, #196	; 0xc4
 800939e:	0052      	lsls	r2, r2, #1
 80093a0:	2100      	movs	r1, #0
 80093a2:	0018      	movs	r0, r3
 80093a4:	f002 ff16 	bl	800c1d4 <memset>
    uint16_t answer_length =  0;
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <astronode_transport_send_receive+0xbc>)
 80093aa:	195b      	adds	r3, r3, r5
 80093ac:	19db      	adds	r3, r3, r7
 80093ae:	2200      	movs	r2, #0
 80093b0:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80093b2:	4e1d      	ldr	r6, [pc, #116]	; (8009428 <astronode_transport_send_receive+0xc0>)
 80093b4:	19bc      	adds	r4, r7, r6
 80093b6:	23cc      	movs	r3, #204	; 0xcc
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	18fa      	adds	r2, r7, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	0011      	movs	r1, r2
 80093c0:	0018      	movs	r0, r3
 80093c2:	f7ff fd9b 	bl	8008efc <astronode_create_request_transport>
 80093c6:	0003      	movs	r3, r0
 80093c8:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80093ca:	19bb      	adds	r3, r7, r6
 80093cc:	881a      	ldrh	r2, [r3, #0]
 80093ce:	23cc      	movs	r3, #204	; 0xcc
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	18fb      	adds	r3, r7, r3
 80093d4:	0011      	movs	r1, r2
 80093d6:	0018      	movs	r0, r3
 80093d8:	f7fa fa34 	bl	8003844 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80093dc:	230a      	movs	r3, #10
 80093de:	18fa      	adds	r2, r7, r3
 80093e0:	240c      	movs	r4, #12
 80093e2:	193b      	adds	r3, r7, r4
 80093e4:	0011      	movs	r1, r2
 80093e6:	0018      	movs	r0, r3
 80093e8:	f000 f92c 	bl	8009644 <receive_astronode_answer>
 80093ec:	0003      	movs	r3, r0
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10a      	bne.n	8009408 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80093f2:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <astronode_transport_send_receive+0xbc>)
 80093f4:	195b      	adds	r3, r3, r5
 80093f6:	19db      	adds	r3, r3, r7
 80093f8:	8819      	ldrh	r1, [r3, #0]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	193b      	adds	r3, r7, r4
 80093fe:	0018      	movs	r0, r3
 8009400:	f7ff fe1e 	bl	8009040 <astronode_decode_answer_transport>
 8009404:	0003      	movs	r3, r0
 8009406:	e000      	b.n	800940a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009408:	2300      	movs	r3, #0
    }
}
 800940a:	0018      	movs	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	23cb      	movs	r3, #203	; 0xcb
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	449d      	add	sp, r3
 8009414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	fffffcd4 	.word	0xfffffcd4
 800941c:	fffffe70 	.word	0xfffffe70
 8009420:	fffffce4 	.word	0xfffffce4
 8009424:	fffffce2 	.word	0xfffffce2
 8009428:	00000326 	.word	0x00000326

0800942c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	0008      	movs	r0, r1
 8009436:	0011      	movs	r1, r2
 8009438:	1cbb      	adds	r3, r7, #2
 800943a:	1c02      	adds	r2, r0, #0
 800943c:	801a      	strh	r2, [r3, #0]
 800943e:	003b      	movs	r3, r7
 8009440:	1c0a      	adds	r2, r1, #0
 8009442:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009444:	230e      	movs	r3, #14
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	003a      	movs	r2, r7
 800944a:	8812      	ldrh	r2, [r2, #0]
 800944c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800944e:	e02e      	b.n	80094ae <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009450:	240e      	movs	r4, #14
 8009452:	193b      	adds	r3, r7, r4
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	0a1b      	lsrs	r3, r3, #8
 8009458:	b299      	uxth	r1, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b29a      	uxth	r2, r3
 8009464:	200c      	movs	r0, #12
 8009466:	183b      	adds	r3, r7, r0
 8009468:	404a      	eors	r2, r1
 800946a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800946c:	183b      	adds	r3, r7, r0
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	b299      	uxth	r1, r3
 8009474:	183b      	adds	r3, r7, r0
 8009476:	183a      	adds	r2, r7, r0
 8009478:	8812      	ldrh	r2, [r2, #0]
 800947a:	404a      	eors	r2, r1
 800947c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800947e:	0021      	movs	r1, r4
 8009480:	187b      	adds	r3, r7, r1
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	b21a      	sxth	r2, r3
 8009488:	183b      	adds	r3, r7, r0
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	031b      	lsls	r3, r3, #12
 800948e:	b21b      	sxth	r3, r3
 8009490:	4053      	eors	r3, r2
 8009492:	b21a      	sxth	r2, r3
 8009494:	183b      	adds	r3, r7, r0
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	015b      	lsls	r3, r3, #5
 800949a:	b21b      	sxth	r3, r3
 800949c:	4053      	eors	r3, r2
 800949e:	b21a      	sxth	r2, r3
 80094a0:	183b      	adds	r3, r7, r0
 80094a2:	2000      	movs	r0, #0
 80094a4:	5e1b      	ldrsh	r3, [r3, r0]
 80094a6:	4053      	eors	r3, r2
 80094a8:	b21a      	sxth	r2, r3
 80094aa:	187b      	adds	r3, r7, r1
 80094ac:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80094ae:	1cbb      	adds	r3, r7, #2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	1cba      	adds	r2, r7, #2
 80094b4:	1e59      	subs	r1, r3, #1
 80094b6:	8011      	strh	r1, [r2, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1c9      	bne.n	8009450 <calculate_crc+0x24>
    }
    return crc;
 80094bc:	230e      	movs	r3, #14
 80094be:	18fb      	adds	r3, r7, r3
 80094c0:	881b      	ldrh	r3, [r3, #0]
}
 80094c2:	0018      	movs	r0, r3
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b005      	add	sp, #20
 80094c8:	bd90      	pop	{r4, r7, pc}
	...

080094cc <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	b299      	uxth	r1, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	789b      	ldrb	r3, [r3, #2]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	021b      	lsls	r3, r3, #8
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	200e      	movs	r0, #14
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	188a      	adds	r2, r1, r2
 80094ea:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80094ec:	183b      	adds	r3, r7, r0
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	4a40      	ldr	r2, [pc, #256]	; (80095f4 <check_for_error+0x128>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d100      	bne.n	80094f8 <check_for_error+0x2c>
 80094f6:	e06f      	b.n	80095d8 <check_for_error+0x10c>
 80094f8:	4a3e      	ldr	r2, [pc, #248]	; (80095f4 <check_for_error+0x128>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	dd00      	ble.n	8009500 <check_for_error+0x34>
 80094fe:	e070      	b.n	80095e2 <check_for_error+0x116>
 8009500:	4a3d      	ldr	r2, [pc, #244]	; (80095f8 <check_for_error+0x12c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d100      	bne.n	8009508 <check_for_error+0x3c>
 8009506:	e062      	b.n	80095ce <check_for_error+0x102>
 8009508:	4a3b      	ldr	r2, [pc, #236]	; (80095f8 <check_for_error+0x12c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	dd00      	ble.n	8009510 <check_for_error+0x44>
 800950e:	e068      	b.n	80095e2 <check_for_error+0x116>
 8009510:	4a3a      	ldr	r2, [pc, #232]	; (80095fc <check_for_error+0x130>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d056      	beq.n	80095c4 <check_for_error+0xf8>
 8009516:	4a39      	ldr	r2, [pc, #228]	; (80095fc <check_for_error+0x130>)
 8009518:	4293      	cmp	r3, r2
 800951a:	dd00      	ble.n	800951e <check_for_error+0x52>
 800951c:	e061      	b.n	80095e2 <check_for_error+0x116>
 800951e:	4a38      	ldr	r2, [pc, #224]	; (8009600 <check_for_error+0x134>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d04a      	beq.n	80095ba <check_for_error+0xee>
 8009524:	4a36      	ldr	r2, [pc, #216]	; (8009600 <check_for_error+0x134>)
 8009526:	4293      	cmp	r3, r2
 8009528:	dc5b      	bgt.n	80095e2 <check_for_error+0x116>
 800952a:	4a36      	ldr	r2, [pc, #216]	; (8009604 <check_for_error+0x138>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d03f      	beq.n	80095b0 <check_for_error+0xe4>
 8009530:	4a34      	ldr	r2, [pc, #208]	; (8009604 <check_for_error+0x138>)
 8009532:	4293      	cmp	r3, r2
 8009534:	dc55      	bgt.n	80095e2 <check_for_error+0x116>
 8009536:	4a34      	ldr	r2, [pc, #208]	; (8009608 <check_for_error+0x13c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d034      	beq.n	80095a6 <check_for_error+0xda>
 800953c:	4a32      	ldr	r2, [pc, #200]	; (8009608 <check_for_error+0x13c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	dc4f      	bgt.n	80095e2 <check_for_error+0x116>
 8009542:	4a32      	ldr	r2, [pc, #200]	; (800960c <check_for_error+0x140>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d029      	beq.n	800959c <check_for_error+0xd0>
 8009548:	4a30      	ldr	r2, [pc, #192]	; (800960c <check_for_error+0x140>)
 800954a:	4293      	cmp	r3, r2
 800954c:	dc49      	bgt.n	80095e2 <check_for_error+0x116>
 800954e:	4a30      	ldr	r2, [pc, #192]	; (8009610 <check_for_error+0x144>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d01e      	beq.n	8009592 <check_for_error+0xc6>
 8009554:	4a2e      	ldr	r2, [pc, #184]	; (8009610 <check_for_error+0x144>)
 8009556:	4293      	cmp	r3, r2
 8009558:	dc43      	bgt.n	80095e2 <check_for_error+0x116>
 800955a:	2222      	movs	r2, #34	; 0x22
 800955c:	32ff      	adds	r2, #255	; 0xff
 800955e:	4293      	cmp	r3, r2
 8009560:	d012      	beq.n	8009588 <check_for_error+0xbc>
 8009562:	2291      	movs	r2, #145	; 0x91
 8009564:	0052      	lsls	r2, r2, #1
 8009566:	4293      	cmp	r3, r2
 8009568:	da3b      	bge.n	80095e2 <check_for_error+0x116>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d002      	beq.n	8009574 <check_for_error+0xa8>
 800956e:	2b11      	cmp	r3, #17
 8009570:	d005      	beq.n	800957e <check_for_error+0xb2>
 8009572:	e036      	b.n	80095e2 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009574:	4b27      	ldr	r3, [pc, #156]	; (8009614 <check_for_error+0x148>)
 8009576:	0018      	movs	r0, r3
 8009578:	f7f9 ff06 	bl	8003388 <send_debug_logs>
            break;
 800957c:	e036      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800957e:	4b26      	ldr	r3, [pc, #152]	; (8009618 <check_for_error+0x14c>)
 8009580:	0018      	movs	r0, r3
 8009582:	f7f9 ff01 	bl	8003388 <send_debug_logs>
            break;
 8009586:	e031      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <check_for_error+0x150>)
 800958a:	0018      	movs	r0, r3
 800958c:	f7f9 fefc 	bl	8003388 <send_debug_logs>
            break;
 8009590:	e02c      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <check_for_error+0x154>)
 8009594:	0018      	movs	r0, r3
 8009596:	f7f9 fef7 	bl	8003388 <send_debug_logs>
            break;
 800959a:	e027      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800959c:	4b21      	ldr	r3, [pc, #132]	; (8009624 <check_for_error+0x158>)
 800959e:	0018      	movs	r0, r3
 80095a0:	f7f9 fef2 	bl	8003388 <send_debug_logs>
            break;
 80095a4:	e022      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80095a6:	4b20      	ldr	r3, [pc, #128]	; (8009628 <check_for_error+0x15c>)
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7f9 feed 	bl	8003388 <send_debug_logs>
            break;
 80095ae:	e01d      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80095b0:	4b1e      	ldr	r3, [pc, #120]	; (800962c <check_for_error+0x160>)
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7f9 fee8 	bl	8003388 <send_debug_logs>
            break;
 80095b8:	e018      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80095ba:	4b1d      	ldr	r3, [pc, #116]	; (8009630 <check_for_error+0x164>)
 80095bc:	0018      	movs	r0, r3
 80095be:	f7f9 fee3 	bl	8003388 <send_debug_logs>
            break;
 80095c2:	e013      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80095c4:	4b1b      	ldr	r3, [pc, #108]	; (8009634 <check_for_error+0x168>)
 80095c6:	0018      	movs	r0, r3
 80095c8:	f7f9 fede 	bl	8003388 <send_debug_logs>
            break;
 80095cc:	e00e      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80095ce:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <check_for_error+0x16c>)
 80095d0:	0018      	movs	r0, r3
 80095d2:	f7f9 fed9 	bl	8003388 <send_debug_logs>
            break;
 80095d6:	e009      	b.n	80095ec <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80095d8:	4b18      	ldr	r3, [pc, #96]	; (800963c <check_for_error+0x170>)
 80095da:	0018      	movs	r0, r3
 80095dc:	f7f9 fed4 	bl	8003388 <send_debug_logs>
            break;
 80095e0:	e004      	b.n	80095ec <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80095e2:	4b17      	ldr	r3, [pc, #92]	; (8009640 <check_for_error+0x174>)
 80095e4:	0018      	movs	r0, r3
 80095e6:	f7f9 fecf 	bl	8003388 <send_debug_logs>
            break;
 80095ea:	46c0      	nop			; (mov r8, r8)
    }
}
 80095ec:	46c0      	nop			; (mov r8, r8)
 80095ee:	46bd      	mov	sp, r7
 80095f0:	b004      	add	sp, #16
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	00004601 	.word	0x00004601
 80095f8:	00004501 	.word	0x00004501
 80095fc:	00003501 	.word	0x00003501
 8009600:	00002601 	.word	0x00002601
 8009604:	00002511 	.word	0x00002511
 8009608:	00002501 	.word	0x00002501
 800960c:	00000611 	.word	0x00000611
 8009610:	00000601 	.word	0x00000601
 8009614:	08014024 	.word	0x08014024
 8009618:	08014070 	.word	0x08014070
 800961c:	080140d4 	.word	0x080140d4
 8009620:	0801410c 	.word	0x0801410c
 8009624:	080141b0 	.word	0x080141b0
 8009628:	08014218 	.word	0x08014218
 800962c:	08014278 	.word	0x08014278
 8009630:	08014304 	.word	0x08014304
 8009634:	08014364 	.word	0x08014364
 8009638:	08014410 	.word	0x08014410
 800963c:	0801445c 	.word	0x0801445c
 8009640:	080144a4 	.word	0x080144a4

08009644 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009644:	b5b0      	push	{r4, r5, r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800964e:	230f      	movs	r3, #15
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009656:	2316      	movs	r3, #22
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2200      	movs	r2, #0
 800965c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800965e:	f7fa f90f 	bl	8003880 <get_systick>
 8009662:	0003      	movs	r3, r0
 8009664:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009666:	2315      	movs	r3, #21
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800966e:	e054      	b.n	800971a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009670:	4a34      	ldr	r2, [pc, #208]	; (8009744 <receive_astronode_answer+0x100>)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	0011      	movs	r1, r2
 8009676:	0018      	movs	r0, r3
 8009678:	f7fa f90a 	bl	8003890 <is_systick_timeout_over>
 800967c:	1e03      	subs	r3, r0, #0
 800967e:	d005      	beq.n	800968c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009680:	4b31      	ldr	r3, [pc, #196]	; (8009748 <receive_astronode_answer+0x104>)
 8009682:	0018      	movs	r0, r3
 8009684:	f7f9 fe80 	bl	8003388 <send_debug_logs>
            return RS_FAILURE;
 8009688:	2300      	movs	r3, #0
 800968a:	e057      	b.n	800973c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800968c:	250f      	movs	r5, #15
 800968e:	197b      	adds	r3, r7, r5
 8009690:	0018      	movs	r0, r3
 8009692:	f7fa f913 	bl	80038bc <is_astronode_character_received>
 8009696:	0003      	movs	r3, r0
 8009698:	0019      	movs	r1, r3
 800969a:	2016      	movs	r0, #22
 800969c:	183b      	adds	r3, r7, r0
 800969e:	183a      	adds	r2, r7, r0
 80096a0:	8812      	ldrh	r2, [r2, #0]
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	2415      	movs	r4, #21
 80096a6:	193b      	adds	r3, r7, r4
 80096a8:	193a      	adds	r2, r7, r4
 80096aa:	7812      	ldrb	r2, [r2, #0]
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	2900      	cmp	r1, #0
 80096b0:	d033      	beq.n	800971a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80096b2:	197b      	adds	r3, r7, r5
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d105      	bne.n	80096c6 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80096ba:	193b      	adds	r3, r7, r4
 80096bc:	2200      	movs	r2, #0
 80096be:	701a      	strb	r2, [r3, #0]
                length = 0;
 80096c0:	183b      	adds	r3, r7, r0
 80096c2:	2200      	movs	r2, #0
 80096c4:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80096c6:	2116      	movs	r1, #22
 80096c8:	187b      	adds	r3, r7, r1
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	18d3      	adds	r3, r2, r3
 80096d0:	220f      	movs	r2, #15
 80096d2:	18ba      	adds	r2, r7, r2
 80096d4:	7812      	ldrb	r2, [r2, #0]
 80096d6:	701a      	strb	r2, [r3, #0]
            length++;
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	881a      	ldrh	r2, [r3, #0]
 80096dc:	187b      	adds	r3, r7, r1
 80096de:	3201      	adds	r2, #1
 80096e0:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	2bb2      	cmp	r3, #178	; 0xb2
 80096e8:	d905      	bls.n	80096f6 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80096ea:	4b18      	ldr	r3, [pc, #96]	; (800974c <receive_astronode_answer+0x108>)
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7f9 fe4b 	bl	8003388 <send_debug_logs>
                return RS_FAILURE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e022      	b.n	800973c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80096f6:	230f      	movs	r3, #15
 80096f8:	18fb      	adds	r3, r7, r3
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d10c      	bne.n	800971a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009700:	2216      	movs	r2, #22
 8009702:	18bb      	adds	r3, r7, r2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d907      	bls.n	800971a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	18ba      	adds	r2, r7, r2
 800970e:	8812      	ldrh	r2, [r2, #0]
 8009710:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8009712:	2315      	movs	r3, #21
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	2201      	movs	r2, #1
 8009718:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800971a:	2315      	movs	r3, #21
 800971c:	18fb      	adds	r3, r7, r3
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2201      	movs	r2, #1
 8009722:	4053      	eors	r3, r2
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1a2      	bne.n	8009670 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <receive_astronode_answer+0x10c>)
 800972c:	0018      	movs	r0, r3
 800972e:	f7f9 fe2b 	bl	8003388 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	0018      	movs	r0, r3
 8009736:	f7f9 fe27 	bl	8003388 <send_debug_logs>

    return RS_SUCCESS;
 800973a:	2301      	movs	r3, #1
}
 800973c:	0018      	movs	r0, r3
 800973e:	46bd      	mov	sp, r7
 8009740:	b006      	add	sp, #24
 8009742:	bdb0      	pop	{r4, r5, r7, pc}
 8009744:	000005dc 	.word	0x000005dc
 8009748:	080144c8 	.word	0x080144c8
 800974c:	080144ec 	.word	0x080144ec
 8009750:	08014538 	.word	0x08014538

08009754 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	0002      	movs	r2, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	1dfb      	adds	r3, r7, #7
 8009760:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8009762:	1dfb      	adds	r3, r7, #7
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	091b      	lsrs	r3, r3, #4
 8009768:	b2db      	uxtb	r3, r3
 800976a:	001a      	movs	r2, r3
 800976c:	4b08      	ldr	r3, [pc, #32]	; (8009790 <uint8_to_ascii_buffer+0x3c>)
 800976e:	5c9a      	ldrb	r2, [r3, r2]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009774:	1dfb      	adds	r3, r7, #7
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	220f      	movs	r2, #15
 800977a:	401a      	ands	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	3301      	adds	r3, #1
 8009780:	4903      	ldr	r1, [pc, #12]	; (8009790 <uint8_to_ascii_buffer+0x3c>)
 8009782:	5c8a      	ldrb	r2, [r1, r2]
 8009784:	701a      	strb	r2, [r3, #0]
}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	46bd      	mov	sp, r7
 800978a:	b002      	add	sp, #8
 800978c:	bd80      	pop	{r7, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	08014888 	.word	0x08014888

08009794 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8009794:	b590      	push	{r4, r7, lr}
 8009796:	b087      	sub	sp, #28
 8009798:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800979a:	1dfb      	adds	r3, r7, #7
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80097a0:	e012      	b.n	80097c8 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80097a2:	f7fa f835 	bl	8003810 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80097a6:	1dfc      	adds	r4, r7, #7
 80097a8:	2300      	movs	r3, #0
 80097aa:	9303      	str	r3, [sp, #12]
 80097ac:	2301      	movs	r3, #1
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	2301      	movs	r3, #1
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	2301      	movs	r3, #1
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2300      	movs	r3, #0
 80097ba:	2201      	movs	r2, #1
 80097bc:	2101      	movs	r1, #1
 80097be:	2001      	movs	r0, #1
 80097c0:	f7fe fb64 	bl	8007e8c <astronode_send_cfg_wr>
 80097c4:	0003      	movs	r3, r0
 80097c6:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2201      	movs	r2, #1
 80097ce:	4053      	eors	r3, r2
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e5      	bne.n	80097a2 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80097d6:	1dfb      	adds	r3, r7, #7
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80097de:	f7fe ffbb 	bl	8008758 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80097e2:	f7fe fb1b 	bl	8007e1c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80097e6:	f7ff f8b1 	bl	800894c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80097ea:	f7fe fca5 	bl	8008138 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80097ee:	f7fe fbf9 	bl	8007fe4 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80097f2:	f7fe ff35 	bl	8008660 <astronode_send_pld_fr>
		return true ;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80097fa:	2300      	movs	r3, #0
	}
}
 80097fc:	0018      	movs	r0, r3
 80097fe:	46bd      	mov	sp, r7
 8009800:	b003      	add	sp, #12
 8009802:	bd90      	pop	{r4, r7, pc}

08009804 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	0002      	movs	r2, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	1dbb      	adds	r3, r7, #6
 8009810:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	0018      	movs	r0, r3
 8009816:	f7f6 fc75 	bl	8000104 <strlen>
 800981a:	0003      	movs	r3, r0
 800981c:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2ba0      	cmp	r3, #160	; 0xa0
 8009822:	d80b      	bhi.n	800983c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	b29a      	uxth	r2, r3
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	0018      	movs	r0, r3
 8009830:	f7fe fe6c 	bl	800850c <astronode_send_pld_er>
 8009834:	1e03      	subs	r3, r0, #0
 8009836:	d005      	beq.n	8009844 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009838:	2301      	movs	r3, #1
 800983a:	e004      	b.n	8009846 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <my_astro_add_payload_2_queue+0x4c>)
 800983e:	0018      	movs	r0, r3
 8009840:	f7f9 fda2 	bl	8003388 <send_debug_logs>
	}
	return false ;
 8009844:	2300      	movs	r3, #0
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	b004      	add	sp, #16
 800984c:	bd80      	pop	{r7, pc}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	08014564 	.word	0x08014564

08009854 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009858:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <my_astro_handle_evt+0x6c>)
 800985a:	0018      	movs	r0, r3
 800985c:	f7f9 fd94 	bl	8003388 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009860:	f7fe fd14 	bl	800828c <astronode_send_evt_rr>
	if (is_sak_available () )
 8009864:	f7ff fb00 	bl	8008e68 <is_sak_available>
 8009868:	1e03      	subs	r3, r0, #0
 800986a:	d007      	beq.n	800987c <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800986c:	f7fe ffd8 	bl	8008820 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009870:	f7ff f82c 	bl	80088cc <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009874:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <my_astro_handle_evt+0x70>)
 8009876:	0018      	movs	r0, r3
 8009878:	f7f9 fd86 	bl	8003388 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800987c:	f7ff fafe 	bl	8008e7c <is_astronode_reset>
 8009880:	1e03      	subs	r3, r0, #0
 8009882:	d005      	beq.n	8009890 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <my_astro_handle_evt+0x74>)
 8009886:	0018      	movs	r0, r3
 8009888:	f7f9 fd7e 	bl	8003388 <send_debug_logs>
	  astronode_send_res_cr () ;
 800988c:	f7fe ff24 	bl	80086d8 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009890:	f7ff fafe 	bl	8008e90 <is_command_available>
 8009894:	1e03      	subs	r3, r0, #0
 8009896:	d00e      	beq.n	80098b6 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009898:	4b0c      	ldr	r3, [pc, #48]	; (80098cc <my_astro_handle_evt+0x78>)
 800989a:	0018      	movs	r0, r3
 800989c:	f7f9 fd74 	bl	8003388 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 80098a0:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <my_astro_handle_evt+0x7c>)
 80098a2:	0018      	movs	r0, r3
 80098a4:	f7ff f93c 	bl	8008b20 <astronode_send_cmd_rr>
 80098a8:	1e03      	subs	r3, r0, #0
 80098aa:	d002      	beq.n	80098b2 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <my_astro_handle_evt+0x80>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 80098b2:	f7ff f8f5 	bl	8008aa0 <astronode_send_cmd_cr>
	}
	return true ;
 80098b6:	2301      	movs	r3, #1
}
 80098b8:	0018      	movs	r0, r3
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	080145cc 	.word	0x080145cc
 80098c4:	08014600 	.word	0x08014600
 80098c8:	08014644 	.word	0x08014644
 80098cc:	08014680 	.word	0x08014680
 80098d0:	20000c0c 	.word	0x20000c0c
 80098d4:	20000c0a 	.word	0x20000c0a

080098d8 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0011      	movs	r1, r2
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7fe fd4f 	bl	800838c <astronode_send_geo_wr>
}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	46bd      	mov	sp, r7
 80098f2:	b002      	add	sp, #8
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80098f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fa:	4ca5      	ldr	r4, [pc, #660]	; (8009b90 <my_gnss_acq_coordinates+0x298>)
 80098fc:	44a5      	add	sp, r4
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8009902:	4ba4      	ldr	r3, [pc, #656]	; (8009b94 <my_gnss_acq_coordinates+0x29c>)
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800990a:	4ba3      	ldr	r3, [pc, #652]	; (8009b98 <my_gnss_acq_coordinates+0x2a0>)
 800990c:	18fb      	adds	r3, r7, r3
 800990e:	2200      	movs	r2, #0
 8009910:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8009912:	4ba2      	ldr	r3, [pc, #648]	; (8009b9c <my_gnss_acq_coordinates+0x2a4>)
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800991a:	4ba1      	ldr	r3, [pc, #644]	; (8009ba0 <my_gnss_acq_coordinates+0x2a8>)
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009922:	4ba0      	ldr	r3, [pc, #640]	; (8009ba4 <my_gnss_acq_coordinates+0x2ac>)
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800992a:	4b9f      	ldr	r3, [pc, #636]	; (8009ba8 <my_gnss_acq_coordinates+0x2b0>)
 800992c:	2486      	movs	r4, #134	; 0x86
 800992e:	00a4      	lsls	r4, r4, #2
 8009930:	191b      	adds	r3, r3, r4
 8009932:	19db      	adds	r3, r3, r7
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	3304      	adds	r3, #4
 800993a:	22f6      	movs	r2, #246	; 0xf6
 800993c:	2100      	movs	r1, #0
 800993e:	0018      	movs	r0, r3
 8009940:	f002 fc48 	bl	800c1d4 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009944:	4b99      	ldr	r3, [pc, #612]	; (8009bac <my_gnss_acq_coordinates+0x2b4>)
 8009946:	191b      	adds	r3, r3, r4
 8009948:	19db      	adds	r3, r3, r7
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	22f6      	movs	r2, #246	; 0xf6
 8009952:	2100      	movs	r1, #0
 8009954:	0018      	movs	r0, r3
 8009956:	f002 fc3d 	bl	800c1d4 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800995a:	4b95      	ldr	r3, [pc, #596]	; (8009bb0 <my_gnss_acq_coordinates+0x2b8>)
 800995c:	2284      	movs	r2, #132	; 0x84
 800995e:	0092      	lsls	r2, r2, #2
 8009960:	18ba      	adds	r2, r7, r2
 8009962:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009964:	4b93      	ldr	r3, [pc, #588]	; (8009bb4 <my_gnss_acq_coordinates+0x2bc>)
 8009966:	2283      	movs	r2, #131	; 0x83
 8009968:	0092      	lsls	r2, r2, #2
 800996a:	18ba      	adds	r2, r7, r2
 800996c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800996e:	4b92      	ldr	r3, [pc, #584]	; (8009bb8 <my_gnss_acq_coordinates+0x2c0>)
 8009970:	2282      	movs	r2, #130	; 0x82
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	18ba      	adds	r2, r7, r2
 8009976:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009978:	4b90      	ldr	r3, [pc, #576]	; (8009bbc <my_gnss_acq_coordinates+0x2c4>)
 800997a:	2281      	movs	r2, #129	; 0x81
 800997c:	0092      	lsls	r2, r2, #2
 800997e:	18ba      	adds	r2, r7, r2
 8009980:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2230      	movs	r2, #48	; 0x30
 8009986:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	4b8c      	ldr	r3, [pc, #560]	; (8009bc0 <my_gnss_acq_coordinates+0x2c8>)
 800998e:	608a      	str	r2, [r1, #8]
 8009990:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009992:	f7f9 ffc5 	bl	8003920 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009996:	e0c4      	b.n	8009b22 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009998:	4c80      	ldr	r4, [pc, #512]	; (8009b9c <my_gnss_acq_coordinates+0x2a4>)
 800999a:	193b      	adds	r3, r7, r4
 800999c:	2101      	movs	r1, #1
 800999e:	0018      	movs	r0, r3
 80099a0:	f7f9 ff12 	bl	80037c8 <my_gnss_receive_byte>
		if ( rx_byte )
 80099a4:	0020      	movs	r0, r4
 80099a6:	183b      	adds	r3, r7, r0
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	4c7b      	ldr	r4, [pc, #492]	; (8009b98 <my_gnss_acq_coordinates+0x2a0>)
 80099ac:	193a      	adds	r2, r7, r4
 80099ae:	1939      	adds	r1, r7, r4
 80099b0:	7809      	ldrb	r1, [r1, #0]
 80099b2:	7011      	strb	r1, [r2, #0]
 80099b4:	4d7b      	ldr	r5, [pc, #492]	; (8009ba4 <my_gnss_acq_coordinates+0x2ac>)
 80099b6:	197a      	adds	r2, r7, r5
 80099b8:	1979      	adds	r1, r7, r5
 80099ba:	7809      	ldrb	r1, [r1, #0]
 80099bc:	7011      	strb	r1, [r2, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d100      	bne.n	80099c4 <my_gnss_acq_coordinates+0xcc>
 80099c2:	e0ae      	b.n	8009b22 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 80099c4:	4b76      	ldr	r3, [pc, #472]	; (8009ba0 <my_gnss_acq_coordinates+0x2a8>)
 80099c6:	18fa      	adds	r2, r7, r3
 80099c8:	2684      	movs	r6, #132	; 0x84
 80099ca:	0076      	lsls	r6, r6, #1
 80099cc:	19b9      	adds	r1, r7, r6
 80099ce:	183b      	adds	r3, r7, r0
 80099d0:	0018      	movs	r0, r3
 80099d2:	f000 fbf9 	bl	800a1c8 <my_nmea_message>
 80099d6:	0001      	movs	r1, r0
 80099d8:	193b      	adds	r3, r7, r4
 80099da:	193a      	adds	r2, r7, r4
 80099dc:	7812      	ldrb	r2, [r2, #0]
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	197b      	adds	r3, r7, r5
 80099e2:	197a      	adds	r2, r7, r5
 80099e4:	7812      	ldrb	r2, [r2, #0]
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	2902      	cmp	r1, #2
 80099ea:	d000      	beq.n	80099ee <my_gnss_acq_coordinates+0xf6>
 80099ec:	e099      	b.n	8009b22 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80099ee:	19bb      	adds	r3, r7, r6
 80099f0:	0018      	movs	r0, r3
 80099f2:	f000 fca9 	bl	800a348 <is_my_nmea_checksum_ok>
 80099f6:	0003      	movs	r3, r0
 80099f8:	0019      	movs	r1, r3
 80099fa:	193b      	adds	r3, r7, r4
 80099fc:	193a      	adds	r2, r7, r4
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	197b      	adds	r3, r7, r5
 8009a04:	197a      	adds	r2, r7, r5
 8009a06:	7812      	ldrb	r2, [r2, #0]
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d100      	bne.n	8009a10 <my_gnss_acq_coordinates+0x118>
 8009a0e:	e088      	b.n	8009b22 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 8009a10:	193b      	adds	r3, r7, r4
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2201      	movs	r2, #1
 8009a16:	4053      	eors	r3, r2
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d015      	beq.n	8009a4a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7c1b      	ldrb	r3, [r3, #16]
 8009a22:	2b33      	cmp	r3, #51	; 0x33
 8009a24:	d111      	bne.n	8009a4a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009a26:	2383      	movs	r3, #131	; 0x83
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	18fb      	adds	r3, r7, r3
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	19bb      	adds	r3, r7, r6
 8009a30:	0011      	movs	r1, r2
 8009a32:	0018      	movs	r0, r3
 8009a34:	f002 fc43 	bl	800c2be <strstr>
 8009a38:	1e03      	subs	r3, r0, #0
 8009a3a:	d006      	beq.n	8009a4a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009a3c:	19bb      	adds	r3, r7, r6
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f000 f9a6 	bl	8009d90 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009a44:	193b      	adds	r3, r7, r4
 8009a46:	2201      	movs	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009a4a:	2384      	movs	r3, #132	; 0x84
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	2484      	movs	r4, #132	; 0x84
 8009a54:	0064      	lsls	r4, r4, #1
 8009a56:	193b      	adds	r3, r7, r4
 8009a58:	0011      	movs	r1, r2
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f002 fc2f 	bl	800c2be <strstr>
 8009a60:	1e03      	subs	r3, r0, #0
 8009a62:	d012      	beq.n	8009a8a <my_gnss_acq_coordinates+0x192>
 8009a64:	4d4f      	ldr	r5, [pc, #316]	; (8009ba4 <my_gnss_acq_coordinates+0x2ac>)
 8009a66:	197b      	adds	r3, r7, r5
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d80d      	bhi.n	8009a8a <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 8009a6e:	4b55      	ldr	r3, [pc, #340]	; (8009bc4 <my_gnss_acq_coordinates+0x2cc>)
 8009a70:	881a      	ldrh	r2, [r3, #0]
 8009a72:	4b55      	ldr	r3, [pc, #340]	; (8009bc8 <my_gnss_acq_coordinates+0x2d0>)
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d85b      	bhi.n	8009b32 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009a7a:	193b      	adds	r3, r7, r4
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f000 fe09 	bl	800a694 <my_nmea_get_gsv_tns>
 8009a82:	0003      	movs	r3, r0
 8009a84:	001a      	movs	r2, r3
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 8009a8a:	2382      	movs	r3, #130	; 0x82
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	18fb      	adds	r3, r7, r3
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	2484      	movs	r4, #132	; 0x84
 8009a94:	0064      	lsls	r4, r4, #1
 8009a96:	193b      	adds	r3, r7, r4
 8009a98:	0011      	movs	r1, r2
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f002 fc0f 	bl	800c2be <strstr>
 8009aa0:	1e03      	subs	r3, r0, #0
 8009aa2:	d010      	beq.n	8009ac6 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009aa4:	193b      	adds	r3, r7, r4
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 fbfa 	bl	800a2a0 <get_my_nmea_gngsa_fixed_mode_s>
 8009aac:	0003      	movs	r3, r0
 8009aae:	001a      	movs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009ab4:	193b      	adds	r3, r7, r4
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f000 fbfd 	bl	800a2b6 <get_my_nmea_gngsa_pdop_d>
 8009abc:	0002      	movs	r2, r0
 8009abe:	000b      	movs	r3, r1
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	608a      	str	r2, [r1, #8]
 8009ac4:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009ac6:	2381      	movs	r3, #129	; 0x81
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	18fb      	adds	r3, r7, r3
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	2384      	movs	r3, #132	; 0x84
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	0011      	movs	r1, r2
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f002 fbf1 	bl	800c2be <strstr>
 8009adc:	1e03      	subs	r3, r0, #0
 8009ade:	d020      	beq.n	8009b22 <my_gnss_acq_coordinates+0x22a>
 8009ae0:	4b2d      	ldr	r3, [pc, #180]	; (8009b98 <my_gnss_acq_coordinates+0x2a0>)
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01b      	beq.n	8009b22 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	7c1b      	ldrb	r3, [r3, #16]
 8009aee:	2b33      	cmp	r3, #51	; 0x33
 8009af0:	d121      	bne.n	8009b36 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009af2:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <my_gnss_acq_coordinates+0x2b4>)
 8009af4:	2186      	movs	r1, #134	; 0x86
 8009af6:	0089      	lsls	r1, r1, #2
 8009af8:	185b      	adds	r3, r3, r1
 8009afa:	19da      	adds	r2, r3, r7
 8009afc:	4b2a      	ldr	r3, [pc, #168]	; (8009ba8 <my_gnss_acq_coordinates+0x2b0>)
 8009afe:	185b      	adds	r3, r3, r1
 8009b00:	19db      	adds	r3, r3, r7
 8009b02:	0010      	movs	r0, r2
 8009b04:	0019      	movs	r1, r3
 8009b06:	23fa      	movs	r3, #250	; 0xfa
 8009b08:	001a      	movs	r2, r3
 8009b0a:	f002 fc90 	bl	800c42e <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6898      	ldr	r0, [r3, #8]
 8009b12:	68d9      	ldr	r1, [r3, #12]
 8009b14:	4b2d      	ldr	r3, [pc, #180]	; (8009bcc <my_gnss_acq_coordinates+0x2d4>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f7f6 fca5 	bl	8000468 <__aeabi_dcmple>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d10b      	bne.n	8009b3a <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009b22:	4b28      	ldr	r3, [pc, #160]	; (8009bc4 <my_gnss_acq_coordinates+0x2cc>)
 8009b24:	881a      	ldrh	r2, [r3, #0]
 8009b26:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <my_gnss_acq_coordinates+0x2d8>)
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d200      	bcs.n	8009b30 <my_gnss_acq_coordinates+0x238>
 8009b2e:	e733      	b.n	8009998 <my_gnss_acq_coordinates+0xa0>
 8009b30:	e004      	b.n	8009b3c <my_gnss_acq_coordinates+0x244>
							break ;
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	e002      	b.n	8009b3c <my_gnss_acq_coordinates+0x244>
							break ;
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	e000      	b.n	8009b3c <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009b3a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009b3c:	f7f9 ff00 	bl	8003940 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <my_gnss_acq_coordinates+0x2b4>)
 8009b42:	2286      	movs	r2, #134	; 0x86
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	19db      	adds	r3, r3, r7
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	230c      	movs	r3, #12
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	0011      	movs	r1, r2
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f000 fcb1 	bl	800a4c0 <my_nmea_get_gngll_coordinates>
		r = true ;
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <my_gnss_acq_coordinates+0x29c>)
 8009b60:	18fb      	adds	r3, r7, r3
 8009b62:	2201      	movs	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009b66:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <my_gnss_acq_coordinates+0x2cc>)
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	4a14      	ldr	r2, [pc, #80]	; (8009bc4 <my_gnss_acq_coordinates+0x2cc>)
 8009b74:	8812      	ldrh	r2, [r2, #0]
 8009b76:	189a      	adds	r2, r3, r2
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	615a      	str	r2, [r3, #20]
	return r ;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <my_gnss_acq_coordinates+0x29c>)
 8009b7e:	18fb      	adds	r3, r7, r3
 8009b80:	781b      	ldrb	r3, [r3, #0]
}
 8009b82:	0018      	movs	r0, r3
 8009b84:	46bd      	mov	sp, r7
 8009b86:	2387      	movs	r3, #135	; 0x87
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	449d      	add	sp, r3
 8009b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	fffffde4 	.word	0xfffffde4
 8009b94:	00000217 	.word	0x00000217
 8009b98:	00000216 	.word	0x00000216
 8009b9c:	00000203 	.word	0x00000203
 8009ba0:	00000202 	.word	0x00000202
 8009ba4:	00000215 	.word	0x00000215
 8009ba8:	fffffef0 	.word	0xfffffef0
 8009bac:	fffffdf4 	.word	0xfffffdf4
 8009bb0:	080146c0 	.word	0x080146c0
 8009bb4:	080146c8 	.word	0x080146c8
 8009bb8:	080146d0 	.word	0x080146d0
 8009bbc:	080146d8 	.word	0x080146d8
 8009bc0:	408f4000 	.word	0x408f4000
 8009bc4:	20000c34 	.word	0x20000c34
 8009bc8:	2000001c 	.word	0x2000001c
 8009bcc:	20000020 	.word	0x20000020
 8009bd0:	2000001a 	.word	0x2000001a

08009bd4 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <my_rtc_get_dt+0x2c>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7fc f939 	bl	8005e5c <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <my_rtc_get_dt+0x2c>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f7fc f845 	bl	8005c80 <HAL_RTC_GetTime>
}
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b002      	add	sp, #8
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	200006f4 	.word	0x200006f4

08009c04 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	b08d      	sub	sp, #52	; 0x34
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009c0c:	2508      	movs	r5, #8
 8009c0e:	1979      	adds	r1, r7, r5
 8009c10:	4b1b      	ldr	r3, [pc, #108]	; (8009c80 <my_rtc_get_dt_s+0x7c>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	0018      	movs	r0, r3
 8009c16:	f7fc f833 	bl	8005c80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009c1a:	241c      	movs	r4, #28
 8009c1c:	1939      	adds	r1, r7, r4
 8009c1e:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <my_rtc_get_dt_s+0x7c>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	0018      	movs	r0, r3
 8009c24:	f7fc f91a 	bl	8005e5c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009c28:	0021      	movs	r1, r4
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	78db      	ldrb	r3, [r3, #3]
 8009c2e:	22fa      	movs	r2, #250	; 0xfa
 8009c30:	00d2      	lsls	r2, r2, #3
 8009c32:	189a      	adds	r2, r3, r2
 8009c34:	187b      	adds	r3, r7, r1
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	469c      	mov	ip, r3
 8009c3a:	187b      	adds	r3, r7, r1
 8009c3c:	789b      	ldrb	r3, [r3, #2]
 8009c3e:	001c      	movs	r4, r3
 8009c40:	0028      	movs	r0, r5
 8009c42:	183b      	adds	r3, r7, r0
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	001d      	movs	r5, r3
 8009c48:	183b      	adds	r3, r7, r0
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	001e      	movs	r6, r3
 8009c4e:	183b      	adds	r3, r7, r0
 8009c50:	789b      	ldrb	r3, [r3, #2]
 8009c52:	490c      	ldr	r1, [pc, #48]	; (8009c84 <my_rtc_get_dt_s+0x80>)
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	9602      	str	r6, [sp, #8]
 8009c5a:	9501      	str	r5, [sp, #4]
 8009c5c:	9400      	str	r4, [sp, #0]
 8009c5e:	4663      	mov	r3, ip
 8009c60:	f002 fa22 	bl	800c0a8 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009c64:	211c      	movs	r1, #28
 8009c66:	187b      	adds	r3, r7, r1
 8009c68:	78db      	ldrb	r3, [r3, #3]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	22fa      	movs	r2, #250	; 0xfa
 8009c6e:	00d2      	lsls	r2, r2, #3
 8009c70:	4694      	mov	ip, r2
 8009c72:	4463      	add	r3, ip
 8009c74:	b29b      	uxth	r3, r3
}
 8009c76:	0018      	movs	r0, r3
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	b009      	add	sp, #36	; 0x24
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	200006f4 	.word	0x200006f4
 8009c84:	08014728 	.word	0x08014728

08009c88 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c8a:	b0a9      	sub	sp, #164	; 0xa4
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009c90:	2434      	movs	r4, #52	; 0x34
 8009c92:	193a      	adds	r2, r7, r4
 8009c94:	2548      	movs	r5, #72	; 0x48
 8009c96:	197b      	adds	r3, r7, r5
 8009c98:	0011      	movs	r1, r2
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f7ff ff9a 	bl	8009bd4 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009ca0:	2680      	movs	r6, #128	; 0x80
 8009ca2:	19bb      	adds	r3, r7, r6
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f7ff ffad 	bl	8009c04 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009caa:	4a36      	ldr	r2, [pc, #216]	; (8009d84 <my_rtc_set_alarm+0xfc>)
 8009cac:	4936      	ldr	r1, [pc, #216]	; (8009d88 <my_rtc_set_alarm+0x100>)
 8009cae:	234c      	movs	r3, #76	; 0x4c
 8009cb0:	18f8      	adds	r0, r7, r3
 8009cb2:	19bb      	adds	r3, r7, r6
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	232d      	movs	r3, #45	; 0x2d
 8009cb8:	f002 f9f6 	bl	800c0a8 <sprintf>
	send_debug_logs ( m ) ;
 8009cbc:	234c      	movs	r3, #76	; 0x4c
 8009cbe:	18fb      	adds	r3, r7, r3
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f7f9 fb61 	bl	8003388 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009cc6:	193a      	adds	r2, r7, r4
 8009cc8:	197b      	adds	r3, r7, r5
 8009cca:	0011      	movs	r1, r2
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f000 f90d 	bl	8009eec <my_conv_rtc2timestamp>
 8009cd2:	0002      	movs	r2, r0
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	2094      	movs	r0, #148	; 0x94
 8009cda:	183a      	adds	r2, r7, r0
 8009cdc:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8009cde:	193a      	adds	r2, r7, r4
 8009ce0:	1979      	adds	r1, r7, r5
 8009ce2:	1838      	adds	r0, r7, r0
 8009ce4:	6803      	ldr	r3, [r0, #0]
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	f000 f974 	bl	8009fd4 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009cec:	193b      	adds	r3, r7, r4
 8009cee:	781a      	ldrb	r2, [r3, #0]
 8009cf0:	210c      	movs	r1, #12
 8009cf2:	187b      	adds	r3, r7, r1
 8009cf4:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009cf6:	193b      	adds	r3, r7, r4
 8009cf8:	785a      	ldrb	r2, [r3, #1]
 8009cfa:	187b      	adds	r3, r7, r1
 8009cfc:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8009cfe:	193b      	adds	r3, r7, r4
 8009d00:	789a      	ldrb	r2, [r3, #2]
 8009d02:	187b      	adds	r3, r7, r1
 8009d04:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009d06:	0008      	movs	r0, r1
 8009d08:	183b      	adds	r3, r7, r0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8009d0e:	183b      	adds	r3, r7, r0
 8009d10:	2200      	movs	r2, #0
 8009d12:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009d14:	183b      	adds	r3, r7, r0
 8009d16:	2200      	movs	r2, #0
 8009d18:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009d1a:	183b      	adds	r3, r7, r0
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009d20:	183b      	adds	r3, r7, r0
 8009d22:	2200      	movs	r2, #0
 8009d24:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009d26:	183b      	adds	r3, r7, r0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009d2c:	197b      	adds	r3, r7, r5
 8009d2e:	7899      	ldrb	r1, [r3, #2]
 8009d30:	183b      	adds	r3, r7, r0
 8009d32:	2220      	movs	r2, #32
 8009d34:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009d36:	183b      	adds	r3, r7, r0
 8009d38:	2280      	movs	r2, #128	; 0x80
 8009d3a:	0052      	lsls	r2, r2, #1
 8009d3c:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009d3e:	1839      	adds	r1, r7, r0
 8009d40:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <my_rtc_set_alarm+0x104>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7fc f8d7 	bl	8005ef8 <HAL_RTC_SetAlarm_IT>
 8009d4a:	1e03      	subs	r3, r0, #0
 8009d4c:	d114      	bne.n	8009d78 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009d4e:	19ba      	adds	r2, r7, r6
 8009d50:	1939      	adds	r1, r7, r4
 8009d52:	197b      	adds	r3, r7, r5
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 f9ff 	bl	800a158 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009d5a:	4a0a      	ldr	r2, [pc, #40]	; (8009d84 <my_rtc_set_alarm+0xfc>)
 8009d5c:	490a      	ldr	r1, [pc, #40]	; (8009d88 <my_rtc_set_alarm+0x100>)
 8009d5e:	244c      	movs	r4, #76	; 0x4c
 8009d60:	1938      	adds	r0, r7, r4
 8009d62:	19bb      	adds	r3, r7, r6
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	2341      	movs	r3, #65	; 0x41
 8009d68:	f002 f99e 	bl	800c0a8 <sprintf>
		send_debug_logs ( m ) ;
 8009d6c:	193b      	adds	r3, r7, r4
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f7f9 fb0a 	bl	8003388 <send_debug_logs>
		return true ;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	b027      	add	sp, #156	; 0x9c
 8009d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	08014748 	.word	0x08014748
 8009d88:	08014764 	.word	0x08014764
 8009d8c:	200006f4 	.word	0x200006f4

08009d90 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009d90:	b5b0      	push	{r4, r5, r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009d98:	2508      	movs	r5, #8
 8009d9a:	197b      	adds	r3, r7, r5
 8009d9c:	1cda      	adds	r2, r3, #3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	0011      	movs	r1, r2
 8009da2:	0018      	movs	r0, r3
 8009da4:	f000 fcae 	bl	800a704 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009da8:	197b      	adds	r3, r7, r5
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	0011      	movs	r1, r2
 8009db0:	0018      	movs	r0, r3
 8009db2:	f000 fce1 	bl	800a778 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009db6:	197b      	adds	r3, r7, r5
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	0011      	movs	r1, r2
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f000 fd14 	bl	800a7ec <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009dc4:	240c      	movs	r4, #12
 8009dc6:	193a      	adds	r2, r7, r4
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	0011      	movs	r1, r2
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f000 fd47 	bl	800a860 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009dd2:	193b      	adds	r3, r7, r4
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	0011      	movs	r1, r2
 8009dda:	0018      	movs	r0, r3
 8009ddc:	f000 fd7a 	bl	800a8d4 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009de0:	193b      	adds	r3, r7, r4
 8009de2:	1c9a      	adds	r2, r3, #2
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	0011      	movs	r1, r2
 8009de8:	0018      	movs	r0, r3
 8009dea:	f000 fdad 	bl	800a948 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009dee:	193b      	adds	r3, r7, r4
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	0011      	movs	r1, r2
 8009df6:	0018      	movs	r0, r3
 8009df8:	f000 fde0 	bl	800a9bc <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009dfc:	193b      	adds	r3, r7, r4
 8009dfe:	2200      	movs	r2, #0
 8009e00:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e02:	193b      	adds	r3, r7, r4
 8009e04:	2200      	movs	r2, #0
 8009e06:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009e08:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7fc fae3 	bl	80063d6 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009e10:	1939      	adds	r1, r7, r4
 8009e12:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	0018      	movs	r0, r3
 8009e18:	f7fb fe8a 	bl	8005b30 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009e1c:	1979      	adds	r1, r7, r5
 8009e1e:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7fb ff88 	bl	8005d38 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f7fc fb07 	bl	800643e <HAL_RTCEx_DisableBypassShadow>
}
 8009e30:	46c0      	nop			; (mov r8, r8)
 8009e32:	46bd      	mov	sp, r7
 8009e34:	b008      	add	sp, #32
 8009e36:	bdb0      	pop	{r4, r5, r7, pc}
 8009e38:	200006f4 	.word	0x200006f4

08009e3c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2100      	movs	r1, #0
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f001 feff 	bl	800bc4c <strtod>
 8009e4e:	0002      	movs	r2, r0
 8009e50:	000b      	movs	r3, r1
 8009e52:	60ba      	str	r2, [r7, #8]
 8009e54:	60fb      	str	r3, [r7, #12]
    return d ;
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	68fb      	ldr	r3, [r7, #12]
}
 8009e5a:	0010      	movs	r0, r2
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b004      	add	sp, #16
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	0008      	movs	r0, r1
 8009e6e:	0011      	movs	r1, r2
 8009e70:	1cfb      	adds	r3, r7, #3
 8009e72:	1c02      	adds	r2, r0, #0
 8009e74:	701a      	strb	r2, [r3, #0]
 8009e76:	1cbb      	adds	r3, r7, #2
 8009e78:	1c0a      	adds	r2, r1, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009e7c:	230f      	movs	r3, #15
 8009e7e:	18fb      	adds	r3, r7, r3
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009e84:	230e      	movs	r3, #14
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009e8c:	e01c      	b.n	8009ec8 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009e8e:	230f      	movs	r3, #15
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	18d3      	adds	r3, r2, r3
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	1cfa      	adds	r2, r7, #3
 8009e9c:	7812      	ldrb	r2, [r2, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d105      	bne.n	8009eae <my_find_char_position+0x4a>
			p++ ;
 8009ea2:	210e      	movs	r1, #14
 8009ea4:	187b      	adds	r3, r7, r1
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	3201      	adds	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009eae:	230e      	movs	r3, #14
 8009eb0:	18fa      	adds	r2, r7, r3
 8009eb2:	1cbb      	adds	r3, r7, #2
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d00e      	beq.n	8009eda <my_find_char_position+0x76>
			break ;
		i++ ;
 8009ebc:	210f      	movs	r1, #15
 8009ebe:	187b      	adds	r3, r7, r1
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	187b      	adds	r3, r7, r1
 8009ec4:	3201      	adds	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009ec8:	230f      	movs	r3, #15
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	18d3      	adds	r3, r2, r3
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1da      	bne.n	8009e8e <my_find_char_position+0x2a>
 8009ed8:	e000      	b.n	8009edc <my_find_char_position+0x78>
			break ;
 8009eda:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009edc:	230f      	movs	r3, #15
 8009ede:	18fb      	adds	r3, r7, r3
 8009ee0:	781b      	ldrb	r3, [r3, #0]
}
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	b004      	add	sp, #16
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	78db      	ldrb	r3, [r3, #3]
 8009efa:	22fa      	movs	r2, #250	; 0xfa
 8009efc:	00d2      	lsls	r2, r2, #3
 8009efe:	4694      	mov	ip, r2
 8009f00:	4463      	add	r3, ip
 8009f02:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	0013      	movs	r3, r2
 8009f08:	00db      	lsls	r3, r3, #3
 8009f0a:	189b      	adds	r3, r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	009a      	lsls	r2, r3, #2
 8009f12:	189a      	adds	r2, r3, r2
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	492c      	ldr	r1, [pc, #176]	; (8009fc8 <my_conv_rtc2timestamp+0xdc>)
 8009f18:	468c      	mov	ip, r1
 8009f1a:	4463      	add	r3, ip
 8009f1c:	089b      	lsrs	r3, r3, #2
 8009f1e:	18d3      	adds	r3, r2, r3
 8009f20:	4a2a      	ldr	r2, [pc, #168]	; (8009fcc <my_conv_rtc2timestamp+0xe0>)
 8009f22:	4694      	mov	ip, r2
 8009f24:	4463      	add	r3, ip
 8009f26:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009f28:	2300      	movs	r3, #0
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	e00a      	b.n	8009f44 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009f2e:	4a28      	ldr	r2, [pc, #160]	; (8009fd0 <my_conv_rtc2timestamp+0xe4>)
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	18d3      	adds	r3, r2, r3
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	001a      	movs	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	189b      	adds	r3, r3, r2
 8009f3c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3301      	adds	r3, #1
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	dbee      	blt.n	8009f2e <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d908      	bls.n	8009f6a <my_conv_rtc2timestamp+0x7e>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	f000 f8de 	bl	800a11c <my_conv_is_leap_year>
 8009f60:	1e03      	subs	r3, r0, #0
 8009f62:	d002      	beq.n	8009f6a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	3301      	adds	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	789b      	ldrb	r3, [r3, #2]
 8009f6e:	001a      	movs	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	18d3      	adds	r3, r2, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	0013      	movs	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	189b      	adds	r3, r3, r2
 8009f80:	011a      	lsls	r2, r3, #4
 8009f82:	1ad2      	subs	r2, r2, r3
 8009f84:	0113      	lsls	r3, r2, #4
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	01db      	lsls	r3, r3, #7
 8009f8a:	0019      	movs	r1, r3
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	001a      	movs	r2, r3
 8009f92:	0013      	movs	r3, r2
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	011a      	lsls	r2, r3, #4
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	0113      	lsls	r3, r2, #4
 8009f9e:	001a      	movs	r2, r3
 8009fa0:	0013      	movs	r3, r2
 8009fa2:	18ca      	adds	r2, r1, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	0019      	movs	r1, r3
 8009faa:	000b      	movs	r3, r1
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	1a5b      	subs	r3, r3, r1
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	7892      	ldrb	r2, [r2, #2]
 8009fb8:	189b      	adds	r3, r3, r2
 8009fba:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
}
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b006      	add	sp, #24
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	fffff84f 	.word	0xfffff84f
 8009fcc:	fff50736 	.word	0xfff50736
 8009fd0:	08014898 	.word	0x08014898

08009fd4 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b08b      	sub	sp, #44	; 0x2c
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	213c      	movs	r1, #60	; 0x3c
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f7f6 f92f 	bl	8000248 <__aeabi_uidivmod>
 8009fea:	000b      	movs	r3, r1
 8009fec:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	213c      	movs	r1, #60	; 0x3c
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f7f6 f8a2 	bl	800013c <__udivsi3>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	213c      	movs	r1, #60	; 0x3c
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7f6 f923 	bl	8000248 <__aeabi_uidivmod>
 800a002:	000b      	movs	r3, r1
 800a004:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	22e1      	movs	r2, #225	; 0xe1
 800a00a:	0111      	lsls	r1, r2, #4
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7f6 f895 	bl	800013c <__udivsi3>
 800a012:	0003      	movs	r3, r0
 800a014:	2118      	movs	r1, #24
 800a016:	0018      	movs	r0, r3
 800a018:	f7f6 f916 	bl	8000248 <__aeabi_uidivmod>
 800a01c:	000b      	movs	r3, r1
 800a01e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	493b      	ldr	r1, [pc, #236]	; (800a110 <my_conv_timestamp2rtc+0x13c>)
 800a024:	0018      	movs	r0, r3
 800a026:	f7f6 f889 	bl	800013c <__udivsi3>
 800a02a:	0003      	movs	r3, r0
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800a02e:	4b39      	ldr	r3, [pc, #228]	; (800a114 <my_conv_timestamp2rtc+0x140>)
 800a030:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a032:	e00d      	b.n	800a050 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	0018      	movs	r0, r3
 800a038:	f000 f870 	bl	800a11c <my_conv_is_leap_year>
 800a03c:	0003      	movs	r3, r0
 800a03e:	336e      	adds	r3, #110	; 0x6e
 800a040:	33ff      	adds	r3, #255	; 0xff
 800a042:	001a      	movs	r2, r3
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	3301      	adds	r3, #1
 800a04e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	0018      	movs	r0, r3
 800a054:	f000 f862 	bl	800a11c <my_conv_is_leap_year>
 800a058:	0003      	movs	r3, r0
 800a05a:	336e      	adds	r3, #110	; 0x6e
 800a05c:	33ff      	adds	r3, #255	; 0xff
 800a05e:	001a      	movs	r2, r3
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	4293      	cmp	r3, r2
 800a064:	d2e6      	bcs.n	800a034 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a066:	2300      	movs	r3, #0
 800a068:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a06a:	e018      	b.n	800a09e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a06c:	4b2a      	ldr	r3, [pc, #168]	; (800a118 <my_conv_timestamp2rtc+0x144>)
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	0052      	lsls	r2, r2, #1
 800a072:	5ad3      	ldrh	r3, [r2, r3]
 800a074:	001c      	movs	r4, r3
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d107      	bne.n	800a08c <my_conv_timestamp2rtc+0xb8>
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	0018      	movs	r0, r3
 800a080:	f000 f84c 	bl	800a11c <my_conv_is_leap_year>
 800a084:	1e03      	subs	r3, r0, #0
 800a086:	d001      	beq.n	800a08c <my_conv_timestamp2rtc+0xb8>
 800a088:	2301      	movs	r3, #1
 800a08a:	e000      	b.n	800a08e <my_conv_timestamp2rtc+0xba>
 800a08c:	2300      	movs	r3, #0
 800a08e:	191b      	adds	r3, r3, r4
 800a090:	001a      	movs	r2, r3
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3301      	adds	r3, #1
 800a09c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a09e:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <my_conv_timestamp2rtc+0x144>)
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	0052      	lsls	r2, r2, #1
 800a0a4:	5ad3      	ldrh	r3, [r2, r3]
 800a0a6:	001c      	movs	r4, r3
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d107      	bne.n	800a0be <my_conv_timestamp2rtc+0xea>
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f000 f833 	bl	800a11c <my_conv_is_leap_year>
 800a0b6:	1e03      	subs	r3, r0, #0
 800a0b8:	d001      	beq.n	800a0be <my_conv_timestamp2rtc+0xea>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e000      	b.n	800a0c0 <my_conv_timestamp2rtc+0xec>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	191b      	adds	r3, r3, r4
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d2d0      	bcs.n	800a06c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	3330      	adds	r3, #48	; 0x30
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	709a      	strb	r2, [r3, #2]
}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	46bd      	mov	sp, r7
 800a10a:	b00b      	add	sp, #44	; 0x2c
 800a10c:	bd90      	pop	{r4, r7, pc}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	00015180 	.word	0x00015180
 800a114:	000007b2 	.word	0x000007b2
 800a118:	080148a4 	.word	0x080148a4

0800a11c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2203      	movs	r2, #3
 800a128:	4013      	ands	r3, r2
 800a12a:	d106      	bne.n	800a13a <my_conv_is_leap_year+0x1e>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2164      	movs	r1, #100	; 0x64
 800a130:	0018      	movs	r0, r3
 800a132:	f7f6 f973 	bl	800041c <__aeabi_idivmod>
 800a136:	1e0b      	subs	r3, r1, #0
 800a138:	d107      	bne.n	800a14a <my_conv_is_leap_year+0x2e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	22c8      	movs	r2, #200	; 0xc8
 800a13e:	0051      	lsls	r1, r2, #1
 800a140:	0018      	movs	r0, r3
 800a142:	f7f6 f96b 	bl	800041c <__aeabi_idivmod>
 800a146:	1e0b      	subs	r3, r1, #0
 800a148:	d101      	bne.n	800a14e <my_conv_is_leap_year+0x32>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <my_conv_is_leap_year+0x34>
 800a14e:	2300      	movs	r3, #0
}
 800a150:	0018      	movs	r0, r3
 800a152:	46bd      	mov	sp, r7
 800a154:	b002      	add	sp, #8
 800a156:	bd80      	pop	{r7, pc}

0800a158 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800a158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a15a:	b089      	sub	sp, #36	; 0x24
 800a15c:	af04      	add	r7, sp, #16
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	78db      	ldrb	r3, [r3, #3]
 800a168:	22fa      	movs	r2, #250	; 0xfa
 800a16a:	00d2      	lsls	r2, r2, #3
 800a16c:	189a      	adds	r2, r3, r2
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	469c      	mov	ip, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	789b      	ldrb	r3, [r3, #2]
 800a178:	001c      	movs	r4, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	001d      	movs	r5, r3
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	001e      	movs	r6, r3
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	789b      	ldrb	r3, [r3, #2]
 800a18a:	4906      	ldr	r1, [pc, #24]	; (800a1a4 <my_conv_dt_2_dts+0x4c>)
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	9602      	str	r6, [sp, #8]
 800a192:	9501      	str	r5, [sp, #4]
 800a194:	9400      	str	r4, [sp, #0]
 800a196:	4663      	mov	r3, ip
 800a198:	f001 ff86 	bl	800c0a8 <sprintf>
}
 800a19c:	46c0      	nop			; (mov r8, r8)
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b005      	add	sp, #20
 800a1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a4:	08014770 	.word	0x08014770

0800a1a8 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800a1b0:	230c      	movs	r3, #12
 800a1b2:	18f9      	adds	r1, r7, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f001 fe71 	bl	800bea0 <strtoul>
 800a1be:	0003      	movs	r3, r0
}
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	b004      	add	sp, #16
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b24      	cmp	r3, #36	; 0x24
 800a1da:	d117      	bne.n	800a20c <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	b2d1      	uxtb	r1, r2
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	7011      	strb	r1, [r2, #0]
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	001a      	movs	r2, r3
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	189b      	adds	r3, r3, r2
 800a204:	2200      	movs	r2, #0
 800a206:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a208:	2300      	movs	r3, #0
 800a20a:	e045      	b.n	800a298 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b1f      	cmp	r3, #31
 800a212:	d907      	bls.n	800a224 <my_nmea_message+0x5c>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b7e      	cmp	r3, #126	; 0x7e
 800a21a:	d803      	bhi.n	800a224 <my_nmea_message+0x5c>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <my_nmea_message+0x64>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b0d      	cmp	r3, #13
 800a22a:	d114      	bne.n	800a256 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	b2d1      	uxtb	r1, r2
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7011      	strb	r1, [r2, #0]
 800a238:	001a      	movs	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	189b      	adds	r3, r3, r2
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	7812      	ldrb	r2, [r2, #0]
 800a242:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	001a      	movs	r2, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	189b      	adds	r3, r3, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a252:	2301      	movs	r3, #1
 800a254:	e020      	b.n	800a298 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b0a      	cmp	r3, #10
 800a25c:	d11a      	bne.n	800a294 <my_nmea_message+0xcc>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d916      	bls.n	800a294 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	001a      	movs	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b0d      	cmp	r3, #13
 800a280:	d108      	bne.n	800a294 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	001a      	movs	r2, r3
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	189b      	adds	r3, r3, r2
 800a28c:	2200      	movs	r2, #0
 800a28e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a290:	2302      	movs	r3, #2
 800a292:	e001      	b.n	800a298 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a294:	2301      	movs	r3, #1
 800a296:	425b      	negs	r3, r3
}
 800a298:	0018      	movs	r0, r3
 800a29a:	46bd      	mov	sp, r7
 800a29c:	b004      	add	sp, #16
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3309      	adds	r3, #9
 800a2ac:	781b      	ldrb	r3, [r3, #0]
}
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b002      	add	sp, #8
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a2b6:	b5b0      	push	{r4, r5, r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	220f      	movs	r2, #15
 800a2c2:	212c      	movs	r1, #44	; 0x2c
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f7ff fdcd 	bl	8009e64 <my_find_char_position>
 800a2ca:	0003      	movs	r3, r0
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	2517      	movs	r5, #23
 800a2d0:	197b      	adds	r3, r7, r5
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2210      	movs	r2, #16
 800a2da:	212c      	movs	r1, #44	; 0x2c
 800a2dc:	0018      	movs	r0, r3
 800a2de:	f7ff fdc1 	bl	8009e64 <my_find_char_position>
 800a2e2:	0003      	movs	r3, r0
 800a2e4:	0019      	movs	r1, r3
 800a2e6:	2416      	movs	r4, #22
 800a2e8:	193b      	adds	r3, r7, r4
 800a2ea:	197a      	adds	r2, r7, r5
 800a2ec:	7812      	ldrb	r2, [r2, #0]
 800a2ee:	1a8a      	subs	r2, r1, r2
 800a2f0:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a2f2:	193b      	adds	r3, r7, r4
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f000 fc45 	bl	800ab88 <malloc>
 800a2fe:	0003      	movs	r3, r0
 800a300:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a302:	197b      	adds	r3, r7, r5
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	18d1      	adds	r1, r2, r3
 800a30a:	193b      	adds	r3, r7, r4
 800a30c:	781a      	ldrb	r2, [r3, #0]
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	0018      	movs	r0, r3
 800a312:	f001 ff86 	bl	800c222 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a316:	193b      	adds	r3, r7, r4
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	18d3      	adds	r3, r2, r3
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	0018      	movs	r0, r3
 800a326:	f7ff fd89 	bl	8009e3c <my_string2double_conv>
 800a32a:	0002      	movs	r2, r0
 800a32c:	000b      	movs	r3, r1
 800a32e:	60ba      	str	r2, [r7, #8]
 800a330:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	0018      	movs	r0, r3
 800a336:	f000 fc31 	bl	800ab9c <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	68fb      	ldr	r3, [r7, #12]
}
 800a33e:	0010      	movs	r0, r2
 800a340:	0019      	movs	r1, r3
 800a342:	46bd      	mov	sp, r7
 800a344:	b006      	add	sp, #24
 800a346:	bdb0      	pop	{r4, r5, r7, pc}

0800a348 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a350:	230f      	movs	r3, #15
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	2200      	movs	r2, #0
 800a356:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a358:	230e      	movs	r3, #14
 800a35a:	18fb      	adds	r3, r7, r3
 800a35c:	2201      	movs	r2, #1
 800a35e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a360:	e00f      	b.n	800a382 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a362:	220e      	movs	r2, #14
 800a364:	18bb      	adds	r3, r7, r2
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	18ba      	adds	r2, r7, r2
 800a36a:	1c59      	adds	r1, r3, #1
 800a36c:	7011      	strb	r1, [r2, #0]
 800a36e:	001a      	movs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	189b      	adds	r3, r3, r2
 800a374:	7819      	ldrb	r1, [r3, #0]
 800a376:	220f      	movs	r2, #15
 800a378:	18bb      	adds	r3, r7, r2
 800a37a:	18ba      	adds	r2, r7, r2
 800a37c:	7812      	ldrb	r2, [r2, #0]
 800a37e:	404a      	eors	r2, r1
 800a380:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a382:	210e      	movs	r1, #14
 800a384:	187b      	adds	r3, r7, r1
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	18d3      	adds	r3, r2, r3
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b2a      	cmp	r3, #42	; 0x2a
 800a390:	d00a      	beq.n	800a3a8 <is_my_nmea_checksum_ok+0x60>
 800a392:	187b      	adds	r3, r7, r1
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <is_my_nmea_checksum_ok+0x60>
 800a3a0:	187b      	adds	r3, r7, r1
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1dc      	bne.n	800a362 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a3a8:	230f      	movs	r3, #15
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	781c      	ldrb	r4, [r3, #0]
 800a3ae:	210e      	movs	r1, #14
 800a3b0:	187b      	adds	r3, r7, r1
 800a3b2:	187a      	adds	r2, r7, r1
 800a3b4:	7812      	ldrb	r2, [r2, #0]
 800a3b6:	3201      	adds	r2, #1
 800a3b8:	701a      	strb	r2, [r3, #0]
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	18d3      	adds	r3, r2, r3
 800a3c2:	2210      	movs	r2, #16
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f001 fcd8 	bl	800bd7c <strtol>
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	1ae3      	subs	r3, r4, r3
 800a3d0:	425a      	negs	r2, r3
 800a3d2:	4153      	adcs	r3, r2
 800a3d4:	b2db      	uxtb	r3, r3
}
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	b005      	add	sp, #20
 800a3dc:	bd90      	pop	{r4, r7, pc}
	...

0800a3e0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a3e0:	b5b0      	push	{r4, r5, r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	000a      	movs	r2, r1
 800a3ea:	1cfb      	adds	r3, r7, #3
 800a3ec:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a3ee:	2308      	movs	r3, #8
 800a3f0:	18fa      	adds	r2, r7, r3
 800a3f2:	492f      	ldr	r1, [pc, #188]	; (800a4b0 <nmea2decimal+0xd0>)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f001 fe76 	bl	800c0e8 <sscanf>
    min = deg / 100 ;
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	4b2c      	ldr	r3, [pc, #176]	; (800a4b4 <nmea2decimal+0xd4>)
 800a404:	f7f6 fd38 	bl	8000e78 <__aeabi_ddiv>
 800a408:	0002      	movs	r2, r0
 800a40a:	000b      	movs	r3, r1
 800a40c:	613a      	str	r2, [r7, #16]
 800a40e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a410:	6938      	ldr	r0, [r7, #16]
 800a412:	6979      	ldr	r1, [r7, #20]
 800a414:	f7f7 ff8c 	bl	8002330 <__aeabi_d2iz>
 800a418:	0003      	movs	r3, r0
 800a41a:	0018      	movs	r0, r3
 800a41c:	f7f7 ffbe 	bl	800239c <__aeabi_i2d>
 800a420:	0002      	movs	r2, r0
 800a422:	000b      	movs	r3, r1
 800a424:	60ba      	str	r2, [r7, #8]
 800a426:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6938      	ldr	r0, [r7, #16]
 800a42e:	6979      	ldr	r1, [r7, #20]
 800a430:	f7f7 fbde 	bl	8001bf0 <__aeabi_dsub>
 800a434:	0002      	movs	r2, r0
 800a436:	000b      	movs	r3, r1
 800a438:	0010      	movs	r0, r2
 800a43a:	0019      	movs	r1, r3
 800a43c:	2200      	movs	r2, #0
 800a43e:	4b1e      	ldr	r3, [pc, #120]	; (800a4b8 <nmea2decimal+0xd8>)
 800a440:	f7f7 f914 	bl	800166c <__aeabi_dmul>
 800a444:	0002      	movs	r2, r0
 800a446:	000b      	movs	r3, r1
 800a448:	613a      	str	r2, [r7, #16]
 800a44a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a44c:	2200      	movs	r2, #0
 800a44e:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <nmea2decimal+0xdc>)
 800a450:	6938      	ldr	r0, [r7, #16]
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	f7f6 fd10 	bl	8000e78 <__aeabi_ddiv>
 800a458:	0002      	movs	r2, r0
 800a45a:	000b      	movs	r3, r1
 800a45c:	613a      	str	r2, [r7, #16]
 800a45e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a460:	1cfb      	adds	r3, r7, #3
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b53      	cmp	r3, #83	; 0x53
 800a466:	d003      	beq.n	800a470 <nmea2decimal+0x90>
 800a468:	1cfb      	adds	r3, r7, #3
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b57      	cmp	r3, #87	; 0x57
 800a46e:	d10e      	bne.n	800a48e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a470:	68b8      	ldr	r0, [r7, #8]
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f7f6 f99e 	bl	80007b8 <__aeabi_dadd>
 800a47c:	0002      	movs	r2, r0
 800a47e:	000b      	movs	r3, r1
 800a480:	0011      	movs	r1, r2
 800a482:	000c      	movs	r4, r1
 800a484:	2180      	movs	r1, #128	; 0x80
 800a486:	0609      	lsls	r1, r1, #24
 800a488:	4059      	eors	r1, r3
 800a48a:	000d      	movs	r5, r1
 800a48c:	e009      	b.n	800a4a2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a48e:	68b8      	ldr	r0, [r7, #8]
 800a490:	68f9      	ldr	r1, [r7, #12]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f7f6 f98f 	bl	80007b8 <__aeabi_dadd>
 800a49a:	0002      	movs	r2, r0
 800a49c:	000b      	movs	r3, r1
 800a49e:	0014      	movs	r4, r2
 800a4a0:	001d      	movs	r5, r3
}
 800a4a2:	0022      	movs	r2, r4
 800a4a4:	002b      	movs	r3, r5
 800a4a6:	0010      	movs	r0, r2
 800a4a8:	0019      	movs	r1, r3
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	b006      	add	sp, #24
 800a4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a4b0:	08014790 	.word	0x08014790
 800a4b4:	40590000 	.word	0x40590000
 800a4b8:	40240000 	.word	0x40240000
 800a4bc:	40180000 	.word	0x40180000

0800a4c0 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c2:	b08d      	sub	sp, #52	; 0x34
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	212c      	movs	r1, #44	; 0x2c
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f7ff fcc7 	bl	8009e64 <my_find_char_position>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	001a      	movs	r2, r3
 800a4da:	252f      	movs	r5, #47	; 0x2f
 800a4dc:	197b      	adds	r3, r7, r5
 800a4de:	3201      	adds	r2, #1
 800a4e0:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	212c      	movs	r1, #44	; 0x2c
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7ff fcbb 	bl	8009e64 <my_find_char_position>
 800a4ee:	0003      	movs	r3, r0
 800a4f0:	0019      	movs	r1, r3
 800a4f2:	242e      	movs	r4, #46	; 0x2e
 800a4f4:	193b      	adds	r3, r7, r4
 800a4f6:	197a      	adds	r2, r7, r5
 800a4f8:	7812      	ldrb	r2, [r2, #0]
 800a4fa:	1a8a      	subs	r2, r1, r2
 800a4fc:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a4fe:	193b      	adds	r3, r7, r4
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	0018      	movs	r0, r3
 800a506:	f000 fb3f 	bl	800ab88 <malloc>
 800a50a:	0003      	movs	r3, r0
 800a50c:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a50e:	197b      	adds	r3, r7, r5
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	18d1      	adds	r1, r2, r3
 800a516:	193b      	adds	r3, r7, r4
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	0018      	movs	r0, r3
 800a51e:	f001 fe80 	bl	800c222 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a522:	193b      	adds	r3, r7, r4
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a528:	18d3      	adds	r3, r2, r3
 800a52a:	2200      	movs	r2, #0
 800a52c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a52e:	197b      	adds	r3, r7, r5
 800a530:	781a      	ldrb	r2, [r3, #0]
 800a532:	193b      	adds	r3, r7, r4
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	18d3      	adds	r3, r2, r3
 800a538:	3301      	adds	r3, #1
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	18d2      	adds	r2, r2, r3
 800a53e:	2627      	movs	r6, #39	; 0x27
 800a540:	19bb      	adds	r3, r7, r6
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a546:	19bb      	adds	r3, r7, r6
 800a548:	781a      	ldrb	r2, [r3, #0]
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	0011      	movs	r1, r2
 800a54e:	0018      	movs	r0, r3
 800a550:	f7ff ff46 	bl	800a3e0 <nmea2decimal>
 800a554:	0002      	movs	r2, r0
 800a556:	000b      	movs	r3, r1
 800a558:	61ba      	str	r2, [r7, #24]
 800a55a:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	0018      	movs	r0, r3
 800a560:	f000 fb1c 	bl	800ab9c <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a564:	2200      	movs	r2, #0
 800a566:	4b49      	ldr	r3, [pc, #292]	; (800a68c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a568:	69b8      	ldr	r0, [r7, #24]
 800a56a:	69f9      	ldr	r1, [r7, #28]
 800a56c:	f7f7 f87e 	bl	800166c <__aeabi_dmul>
 800a570:	0002      	movs	r2, r0
 800a572:	000b      	movs	r3, r1
 800a574:	0010      	movs	r0, r2
 800a576:	0019      	movs	r1, r3
 800a578:	f008 fb24 	bl	8012bc4 <round>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b43      	ldr	r3, [pc, #268]	; (800a68c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a580:	f7f6 fc7a 	bl	8000e78 <__aeabi_ddiv>
 800a584:	0002      	movs	r2, r0
 800a586:	000b      	movs	r3, r1
 800a588:	61ba      	str	r2, [r7, #24]
 800a58a:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a58c:	2200      	movs	r2, #0
 800a58e:	4b40      	ldr	r3, [pc, #256]	; (800a690 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a590:	69b8      	ldr	r0, [r7, #24]
 800a592:	69f9      	ldr	r1, [r7, #28]
 800a594:	f7f7 f86a 	bl	800166c <__aeabi_dmul>
 800a598:	0002      	movs	r2, r0
 800a59a:	000b      	movs	r3, r1
 800a59c:	0010      	movs	r0, r2
 800a59e:	0019      	movs	r1, r3
 800a5a0:	f7f7 fec6 	bl	8002330 <__aeabi_d2iz>
 800a5a4:	0002      	movs	r2, r0
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	212c      	movs	r1, #44	; 0x2c
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7ff fc57 	bl	8009e64 <my_find_char_position>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	001a      	movs	r2, r3
 800a5ba:	197b      	adds	r3, r7, r5
 800a5bc:	3201      	adds	r2, #1
 800a5be:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	212c      	movs	r1, #44	; 0x2c
 800a5c6:	0018      	movs	r0, r3
 800a5c8:	f7ff fc4c 	bl	8009e64 <my_find_char_position>
 800a5cc:	0003      	movs	r3, r0
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	193b      	adds	r3, r7, r4
 800a5d2:	197a      	adds	r2, r7, r5
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	1a8a      	subs	r2, r1, r2
 800a5d8:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a5da:	193b      	adds	r3, r7, r4
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f000 fad1 	bl	800ab88 <malloc>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a5ea:	197b      	adds	r3, r7, r5
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	18d1      	adds	r1, r2, r3
 800a5f2:	193b      	adds	r3, r7, r4
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f001 fe12 	bl	800c222 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a5fe:	193b      	adds	r3, r7, r4
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	18d3      	adds	r3, r2, r3
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a60a:	197b      	adds	r3, r7, r5
 800a60c:	781a      	ldrb	r2, [r3, #0]
 800a60e:	193b      	adds	r3, r7, r4
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	18d3      	adds	r3, r2, r3
 800a614:	3301      	adds	r3, #1
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	18d2      	adds	r2, r2, r3
 800a61a:	19bb      	adds	r3, r7, r6
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a620:	19bb      	adds	r3, r7, r6
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	0011      	movs	r1, r2
 800a628:	0018      	movs	r0, r3
 800a62a:	f7ff fed9 	bl	800a3e0 <nmea2decimal>
 800a62e:	0002      	movs	r2, r0
 800a630:	000b      	movs	r3, r1
 800a632:	60ba      	str	r2, [r7, #8]
 800a634:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	0018      	movs	r0, r3
 800a63a:	f000 faaf 	bl	800ab9c <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a63e:	2200      	movs	r2, #0
 800a640:	4b12      	ldr	r3, [pc, #72]	; (800a68c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a642:	68b8      	ldr	r0, [r7, #8]
 800a644:	68f9      	ldr	r1, [r7, #12]
 800a646:	f7f7 f811 	bl	800166c <__aeabi_dmul>
 800a64a:	0002      	movs	r2, r0
 800a64c:	000b      	movs	r3, r1
 800a64e:	0010      	movs	r0, r2
 800a650:	0019      	movs	r1, r3
 800a652:	f008 fab7 	bl	8012bc4 <round>
 800a656:	2200      	movs	r2, #0
 800a658:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a65a:	f7f6 fc0d 	bl	8000e78 <__aeabi_ddiv>
 800a65e:	0002      	movs	r2, r0
 800a660:	000b      	movs	r3, r1
 800a662:	60ba      	str	r2, [r7, #8]
 800a664:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a666:	2200      	movs	r2, #0
 800a668:	4b09      	ldr	r3, [pc, #36]	; (800a690 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	68f9      	ldr	r1, [r7, #12]
 800a66e:	f7f6 fffd 	bl	800166c <__aeabi_dmul>
 800a672:	0002      	movs	r2, r0
 800a674:	000b      	movs	r3, r1
 800a676:	0010      	movs	r0, r2
 800a678:	0019      	movs	r1, r3
 800a67a:	f7f7 fe59 	bl	8002330 <__aeabi_d2iz>
 800a67e:	0002      	movs	r2, r0
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	605a      	str	r2, [r3, #4]
}
 800a684:	46c0      	nop			; (mov r8, r8)
 800a686:	46bd      	mov	sp, r7
 800a688:	b00d      	add	sp, #52	; 0x34
 800a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a68c:	412e8480 	.word	0x412e8480
 800a690:	416312d0 	.word	0x416312d0

0800a694 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a694:	b5b0      	push	{r4, r5, r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a69c:	240e      	movs	r4, #14
 800a69e:	193b      	adds	r3, r7, r4
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	212c      	movs	r1, #44	; 0x2c
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f7ff fbda 	bl	8009e64 <my_find_char_position>
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	001a      	movs	r2, r3
 800a6b4:	2517      	movs	r5, #23
 800a6b6:	197b      	adds	r3, r7, r5
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a6bc:	2003      	movs	r0, #3
 800a6be:	f000 fa63 	bl	800ab88 <malloc>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a6c6:	197b      	adds	r3, r7, r5
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	18d1      	adds	r1, r2, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f001 fda5 	bl	800c222 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3302      	adds	r3, #2
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a6e0:	193a      	adds	r2, r7, r4
 800a6e2:	4907      	ldr	r1, [pc, #28]	; (800a700 <my_nmea_get_gsv_tns+0x6c>)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f001 fcfe 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f000 fa54 	bl	800ab9c <free>
	return tns ;
 800a6f4:	193b      	adds	r3, r7, r4
 800a6f6:	881b      	ldrh	r3, [r3, #0]
}
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	b006      	add	sp, #24
 800a6fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a700:	0801479c 	.word	0x0801479c

0800a704 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2209      	movs	r2, #9
 800a712:	212c      	movs	r1, #44	; 0x2c
 800a714:	0018      	movs	r0, r3
 800a716:	f7ff fba5 	bl	8009e64 <my_find_char_position>
 800a71a:	0003      	movs	r3, r0
 800a71c:	001a      	movs	r2, r3
 800a71e:	2417      	movs	r4, #23
 800a720:	193b      	adds	r3, r7, r4
 800a722:	3205      	adds	r2, #5
 800a724:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a726:	2003      	movs	r0, #3
 800a728:	f000 fa2e 	bl	800ab88 <malloc>
 800a72c:	0003      	movs	r3, r0
 800a72e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a730:	193b      	adds	r3, r7, r4
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	18d1      	adds	r1, r2, r3
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2202      	movs	r2, #2
 800a73c:	0018      	movs	r0, r3
 800a73e:	f001 fd70 	bl	800c222 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	3302      	adds	r3, #2
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a74a:	240e      	movs	r4, #14
 800a74c:	193a      	adds	r2, r7, r4
 800a74e:	4909      	ldr	r1, [pc, #36]	; (800a774 <my_nmea_get_rmc_date_yy+0x70>)
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	0018      	movs	r0, r3
 800a754:	f001 fcc8 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	0018      	movs	r0, r3
 800a75c:	f000 fa1e 	bl	800ab9c <free>
	*yy = (uint8_t) temp ;
 800a760:	193b      	adds	r3, r7, r4
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b2da      	uxtb	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	701a      	strb	r2, [r3, #0]

}
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b007      	add	sp, #28
 800a770:	bd90      	pop	{r4, r7, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	0801479c 	.word	0x0801479c

0800a778 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2209      	movs	r2, #9
 800a786:	212c      	movs	r1, #44	; 0x2c
 800a788:	0018      	movs	r0, r3
 800a78a:	f7ff fb6b 	bl	8009e64 <my_find_char_position>
 800a78e:	0003      	movs	r3, r0
 800a790:	001a      	movs	r2, r3
 800a792:	2417      	movs	r4, #23
 800a794:	193b      	adds	r3, r7, r4
 800a796:	3203      	adds	r2, #3
 800a798:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a79a:	2003      	movs	r0, #3
 800a79c:	f000 f9f4 	bl	800ab88 <malloc>
 800a7a0:	0003      	movs	r3, r0
 800a7a2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a7a4:	193b      	adds	r3, r7, r4
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	18d1      	adds	r1, r2, r3
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f001 fd36 	bl	800c222 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	3302      	adds	r3, #2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a7be:	240e      	movs	r4, #14
 800a7c0:	193a      	adds	r2, r7, r4
 800a7c2:	4909      	ldr	r1, [pc, #36]	; (800a7e8 <my_nmea_get_rmc_date_mm+0x70>)
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f001 fc8e 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f000 f9e4 	bl	800ab9c <free>
	*mm = (uint8_t) temp ;
 800a7d4:	193b      	adds	r3, r7, r4
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	701a      	strb	r2, [r3, #0]

}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	b007      	add	sp, #28
 800a7e4:	bd90      	pop	{r4, r7, pc}
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	0801479c 	.word	0x0801479c

0800a7ec <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2209      	movs	r2, #9
 800a7fa:	212c      	movs	r1, #44	; 0x2c
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	f7ff fb31 	bl	8009e64 <my_find_char_position>
 800a802:	0003      	movs	r3, r0
 800a804:	001a      	movs	r2, r3
 800a806:	2417      	movs	r4, #23
 800a808:	193b      	adds	r3, r7, r4
 800a80a:	3201      	adds	r2, #1
 800a80c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a80e:	2003      	movs	r0, #3
 800a810:	f000 f9ba 	bl	800ab88 <malloc>
 800a814:	0003      	movs	r3, r0
 800a816:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a818:	193b      	adds	r3, r7, r4
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	18d1      	adds	r1, r2, r3
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2202      	movs	r2, #2
 800a824:	0018      	movs	r0, r3
 800a826:	f001 fcfc 	bl	800c222 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	3302      	adds	r3, #2
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a832:	240e      	movs	r4, #14
 800a834:	193a      	adds	r2, r7, r4
 800a836:	4909      	ldr	r1, [pc, #36]	; (800a85c <my_nmea_get_rmc_date_dd+0x70>)
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	0018      	movs	r0, r3
 800a83c:	f001 fc54 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	0018      	movs	r0, r3
 800a844:	f000 f9aa 	bl	800ab9c <free>
	*dd = (uint8_t) temp ;
 800a848:	193b      	adds	r3, r7, r4
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	701a      	strb	r2, [r3, #0]

}
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	46bd      	mov	sp, r7
 800a856:	b007      	add	sp, #28
 800a858:	bd90      	pop	{r4, r7, pc}
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	0801479c 	.word	0x0801479c

0800a860 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b087      	sub	sp, #28
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	212c      	movs	r1, #44	; 0x2c
 800a870:	0018      	movs	r0, r3
 800a872:	f7ff faf7 	bl	8009e64 <my_find_char_position>
 800a876:	0003      	movs	r3, r0
 800a878:	001a      	movs	r2, r3
 800a87a:	2417      	movs	r4, #23
 800a87c:	193b      	adds	r3, r7, r4
 800a87e:	3201      	adds	r2, #1
 800a880:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a882:	2003      	movs	r0, #3
 800a884:	f000 f980 	bl	800ab88 <malloc>
 800a888:	0003      	movs	r3, r0
 800a88a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a88c:	193b      	adds	r3, r7, r4
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	18d1      	adds	r1, r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	2202      	movs	r2, #2
 800a898:	0018      	movs	r0, r3
 800a89a:	f001 fcc2 	bl	800c222 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a8a6:	240e      	movs	r4, #14
 800a8a8:	193a      	adds	r2, r7, r4
 800a8aa:	4909      	ldr	r1, [pc, #36]	; (800a8d0 <my_nmea_get_rmc_utc_hh+0x70>)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f001 fc1a 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f000 f970 	bl	800ab9c <free>
	*hh = (uint8_t) temp ;
 800a8bc:	193b      	adds	r3, r7, r4
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	701a      	strb	r2, [r3, #0]

}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b007      	add	sp, #28
 800a8cc:	bd90      	pop	{r4, r7, pc}
 800a8ce:	46c0      	nop			; (mov r8, r8)
 800a8d0:	0801479c 	.word	0x0801479c

0800a8d4 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a8d4:	b590      	push	{r4, r7, lr}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	212c      	movs	r1, #44	; 0x2c
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f7ff fabd 	bl	8009e64 <my_find_char_position>
 800a8ea:	0003      	movs	r3, r0
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	2417      	movs	r4, #23
 800a8f0:	193b      	adds	r3, r7, r4
 800a8f2:	3203      	adds	r2, #3
 800a8f4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a8f6:	2003      	movs	r0, #3
 800a8f8:	f000 f946 	bl	800ab88 <malloc>
 800a8fc:	0003      	movs	r3, r0
 800a8fe:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a900:	193b      	adds	r3, r7, r4
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	18d1      	adds	r1, r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	2202      	movs	r2, #2
 800a90c:	0018      	movs	r0, r3
 800a90e:	f001 fc88 	bl	800c222 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	3302      	adds	r3, #2
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a91a:	240e      	movs	r4, #14
 800a91c:	193a      	adds	r2, r7, r4
 800a91e:	4909      	ldr	r1, [pc, #36]	; (800a944 <my_nmea_get_rmc_utc_mm+0x70>)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	0018      	movs	r0, r3
 800a924:	f001 fbe0 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	0018      	movs	r0, r3
 800a92c:	f000 f936 	bl	800ab9c <free>
	*mm = (uint8_t) temp ;
 800a930:	193b      	adds	r3, r7, r4
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	701a      	strb	r2, [r3, #0]

}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	46bd      	mov	sp, r7
 800a93e:	b007      	add	sp, #28
 800a940:	bd90      	pop	{r4, r7, pc}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	0801479c 	.word	0x0801479c

0800a948 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	212c      	movs	r1, #44	; 0x2c
 800a958:	0018      	movs	r0, r3
 800a95a:	f7ff fa83 	bl	8009e64 <my_find_char_position>
 800a95e:	0003      	movs	r3, r0
 800a960:	001a      	movs	r2, r3
 800a962:	2417      	movs	r4, #23
 800a964:	193b      	adds	r3, r7, r4
 800a966:	3205      	adds	r2, #5
 800a968:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a96a:	2003      	movs	r0, #3
 800a96c:	f000 f90c 	bl	800ab88 <malloc>
 800a970:	0003      	movs	r3, r0
 800a972:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a974:	193b      	adds	r3, r7, r4
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	18d1      	adds	r1, r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2202      	movs	r2, #2
 800a980:	0018      	movs	r0, r3
 800a982:	f001 fc4e 	bl	800c222 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	3302      	adds	r3, #2
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a98e:	240e      	movs	r4, #14
 800a990:	193a      	adds	r2, r7, r4
 800a992:	4909      	ldr	r1, [pc, #36]	; (800a9b8 <my_nmea_get_rmc_utc_ss+0x70>)
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	0018      	movs	r0, r3
 800a998:	f001 fba6 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f000 f8fc 	bl	800ab9c <free>
	*ss = (uint8_t) temp ;
 800a9a4:	193b      	adds	r3, r7, r4
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	701a      	strb	r2, [r3, #0]

}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	b007      	add	sp, #28
 800a9b4:	bd90      	pop	{r4, r7, pc}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	0801479c 	.word	0x0801479c

0800a9bc <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	212c      	movs	r1, #44	; 0x2c
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f7ff fa49 	bl	8009e64 <my_find_char_position>
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	001a      	movs	r2, r3
 800a9d6:	240f      	movs	r4, #15
 800a9d8:	193b      	adds	r3, r7, r4
 800a9da:	3208      	adds	r2, #8
 800a9dc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a9de:	2004      	movs	r0, #4
 800a9e0:	f000 f8d2 	bl	800ab88 <malloc>
 800a9e4:	0003      	movs	r3, r0
 800a9e6:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a9e8:	193b      	adds	r3, r7, r4
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	18d1      	adds	r1, r2, r3
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2203      	movs	r2, #3
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f001 fc14 	bl	800c222 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3303      	adds	r3, #3
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	4906      	ldr	r1, [pc, #24]	; (800aa20 <my_nmea_get_rmc_utc_sss+0x64>)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	0018      	movs	r0, r3
 800aa0a:	f001 fb6d 	bl	800c0e8 <sscanf>
	free ( s ) ;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	0018      	movs	r0, r3
 800aa12:	f000 f8c3 	bl	800ab9c <free>
}
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b005      	add	sp, #20
 800aa1c:	bd90      	pop	{r4, r7, pc}
 800aa1e:	46c0      	nop			; (mov r8, r8)
 800aa20:	080147a0 	.word	0x080147a0

0800aa24 <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( const char* c )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f7f5 fb68 	bl	8000104 <strlen>
 800aa34:	0003      	movs	r3, r0
 800aa36:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800aa38:	2317      	movs	r3, #23
 800aa3a:	18fb      	adds	r3, r7, r3
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800aa40:	2316      	movs	r3, #22
 800aa42:	18fb      	adds	r3, r7, r3
 800aa44:	2200      	movs	r2, #0
 800aa46:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d902      	bls.n	800aa54 <my_tracker_api_is_cmd+0x30>
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2b09      	cmp	r3, #9
 800aa52:	d901      	bls.n	800aa58 <my_tracker_api_is_cmd+0x34>
		return false ;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e04b      	b.n	800aaf0 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800aa58:	2317      	movs	r3, #23
 800aa5a:	18fb      	adds	r3, r7, r3
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	e025      	b.n	800aaae <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800aa62:	2317      	movs	r3, #23
 800aa64:	18fb      	adds	r3, r7, r3
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	18d3      	adds	r3, r2, r3
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b2c      	cmp	r3, #44	; 0x2c
 800aa70:	d106      	bne.n	800aa80 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800aa72:	2116      	movs	r1, #22
 800aa74:	187b      	adds	r3, r7, r1
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	187b      	adds	r3, r7, r1
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e010      	b.n	800aaa2 <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800aa80:	2117      	movs	r1, #23
 800aa82:	187b      	adds	r3, r7, r1
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	18d3      	adds	r3, r2, r3
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b2f      	cmp	r3, #47	; 0x2f
 800aa8e:	d906      	bls.n	800aa9e <my_tracker_api_is_cmd+0x7a>
 800aa90:	187b      	adds	r3, r7, r1
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	18d3      	adds	r3, r2, r3
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b39      	cmp	r3, #57	; 0x39
 800aa9c:	d901      	bls.n	800aaa2 <my_tracker_api_is_cmd+0x7e>
			return false;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e026      	b.n	800aaf0 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800aaa2:	2117      	movs	r1, #23
 800aaa4:	187b      	adds	r3, r7, r1
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	187b      	adds	r3, r7, r1
 800aaaa:	3201      	adds	r2, #1
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	2317      	movs	r3, #23
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d8d3      	bhi.n	800aa62 <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800aaba:	2316      	movs	r3, #22
 800aabc:	18fb      	adds	r3, r7, r3
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d901      	bls.n	800aac8 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e013      	b.n	800aaf0 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	212c      	movs	r1, #44	; 0x2c
 800aacc:	0018      	movs	r0, r3
 800aace:	f001 fb89 	bl	800c1e4 <strchr>
 800aad2:	0003      	movs	r3, r0
 800aad4:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d802      	bhi.n	800aaea <my_tracker_api_is_cmd+0xc6>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <my_tracker_api_is_cmd+0xca>
		return false ;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e000      	b.n	800aaf0 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800aaee:	2301      	movs	r3, #1
}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b006      	add	sp, #24
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800ab14:	4a1b      	ldr	r2, [pc, #108]	; (800ab84 <my_tracker_api_parse_cmd+0x8c>)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	0011      	movs	r1, r2
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f001 fb96 	bl	800c24c <strtok>
 800ab20:	0003      	movs	r3, r0
 800ab22:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	0018      	movs	r0, r3
 800ab28:	f7ff fb3e 	bl	800a1a8 <my_conv_string_2_uint32_t>
 800ab2c:	0003      	movs	r3, r0
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800ab34:	4b13      	ldr	r3, [pc, #76]	; (800ab84 <my_tracker_api_parse_cmd+0x8c>)
 800ab36:	0019      	movs	r1, r3
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f001 fb87 	bl	800c24c <strtok>
 800ab3e:	0003      	movs	r3, r0
 800ab40:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	0018      	movs	r0, r3
 800ab46:	f7ff fb2f 	bl	800a1a8 <my_conv_string_2_uint32_t>
 800ab4a:	0002      	movs	r2, r0
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800ab50:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <my_tracker_api_parse_cmd+0x8c>)
 800ab52:	0019      	movs	r1, r3
 800ab54:	2000      	movs	r0, #0
 800ab56:	f001 fb79 	bl	800c24c <strtok>
 800ab5a:	0003      	movs	r3, r0
 800ab5c:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || cmd->value == 0 || tok != NULL )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d006      	beq.n	800ab74 <my_tracker_api_parse_cmd+0x7c>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <my_tracker_api_parse_cmd+0x7c>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <my_tracker_api_parse_cmd+0x80>
		return false ;
 800ab74:	2300      	movs	r3, #0
 800ab76:	e000      	b.n	800ab7a <my_tracker_api_parse_cmd+0x82>
	else
		return true ;
 800ab78:	2301      	movs	r3, #1
}
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	b004      	add	sp, #16
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	080147a4 	.word	0x080147a4

0800ab88 <malloc>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4b03      	ldr	r3, [pc, #12]	; (800ab98 <malloc+0x10>)
 800ab8c:	0001      	movs	r1, r0
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	f000 f80e 	bl	800abb0 <_malloc_r>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	200006d0 	.word	0x200006d0

0800ab9c <free>:
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	4b03      	ldr	r3, [pc, #12]	; (800abac <free+0x10>)
 800aba0:	0001      	movs	r1, r0
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f001 fcbe 	bl	800c524 <_free_r>
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	200006d0 	.word	0x200006d0

0800abb0 <_malloc_r>:
 800abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb2:	000d      	movs	r5, r1
 800abb4:	b087      	sub	sp, #28
 800abb6:	350b      	adds	r5, #11
 800abb8:	9001      	str	r0, [sp, #4]
 800abba:	2d16      	cmp	r5, #22
 800abbc:	d908      	bls.n	800abd0 <_malloc_r+0x20>
 800abbe:	2207      	movs	r2, #7
 800abc0:	4395      	bics	r5, r2
 800abc2:	d506      	bpl.n	800abd2 <_malloc_r+0x22>
 800abc4:	230c      	movs	r3, #12
 800abc6:	9a01      	ldr	r2, [sp, #4]
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	2000      	movs	r0, #0
 800abcc:	b007      	add	sp, #28
 800abce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd0:	2510      	movs	r5, #16
 800abd2:	42a9      	cmp	r1, r5
 800abd4:	d8f6      	bhi.n	800abc4 <_malloc_r+0x14>
 800abd6:	9801      	ldr	r0, [sp, #4]
 800abd8:	f000 f9fe 	bl	800afd8 <__malloc_lock>
 800abdc:	23fc      	movs	r3, #252	; 0xfc
 800abde:	4ebe      	ldr	r6, [pc, #760]	; (800aed8 <_malloc_r+0x328>)
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	429d      	cmp	r5, r3
 800abe4:	d219      	bcs.n	800ac1a <_malloc_r+0x6a>
 800abe6:	002a      	movs	r2, r5
 800abe8:	3208      	adds	r2, #8
 800abea:	18b2      	adds	r2, r6, r2
 800abec:	0011      	movs	r1, r2
 800abee:	6854      	ldr	r4, [r2, #4]
 800abf0:	3908      	subs	r1, #8
 800abf2:	08eb      	lsrs	r3, r5, #3
 800abf4:	428c      	cmp	r4, r1
 800abf6:	d103      	bne.n	800ac00 <_malloc_r+0x50>
 800abf8:	68d4      	ldr	r4, [r2, #12]
 800abfa:	3302      	adds	r3, #2
 800abfc:	42a2      	cmp	r2, r4
 800abfe:	d022      	beq.n	800ac46 <_malloc_r+0x96>
 800ac00:	2203      	movs	r2, #3
 800ac02:	6863      	ldr	r3, [r4, #4]
 800ac04:	68a1      	ldr	r1, [r4, #8]
 800ac06:	4393      	bics	r3, r2
 800ac08:	68e2      	ldr	r2, [r4, #12]
 800ac0a:	18e3      	adds	r3, r4, r3
 800ac0c:	60ca      	str	r2, [r1, #12]
 800ac0e:	6091      	str	r1, [r2, #8]
 800ac10:	2201      	movs	r2, #1
 800ac12:	6859      	ldr	r1, [r3, #4]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	605a      	str	r2, [r3, #4]
 800ac18:	e02a      	b.n	800ac70 <_malloc_r+0xc0>
 800ac1a:	233f      	movs	r3, #63	; 0x3f
 800ac1c:	0a6a      	lsrs	r2, r5, #9
 800ac1e:	d003      	beq.n	800ac28 <_malloc_r+0x78>
 800ac20:	2a04      	cmp	r2, #4
 800ac22:	d82b      	bhi.n	800ac7c <_malloc_r+0xcc>
 800ac24:	09ab      	lsrs	r3, r5, #6
 800ac26:	3338      	adds	r3, #56	; 0x38
 800ac28:	2203      	movs	r2, #3
 800ac2a:	4694      	mov	ip, r2
 800ac2c:	00d9      	lsls	r1, r3, #3
 800ac2e:	1989      	adds	r1, r1, r6
 800ac30:	68cc      	ldr	r4, [r1, #12]
 800ac32:	428c      	cmp	r4, r1
 800ac34:	d006      	beq.n	800ac44 <_malloc_r+0x94>
 800ac36:	4660      	mov	r0, ip
 800ac38:	6862      	ldr	r2, [r4, #4]
 800ac3a:	4382      	bics	r2, r0
 800ac3c:	1b57      	subs	r7, r2, r5
 800ac3e:	2f0f      	cmp	r7, #15
 800ac40:	dd34      	ble.n	800acac <_malloc_r+0xfc>
 800ac42:	3b01      	subs	r3, #1
 800ac44:	3301      	adds	r3, #1
 800ac46:	6934      	ldr	r4, [r6, #16]
 800ac48:	49a4      	ldr	r1, [pc, #656]	; (800aedc <_malloc_r+0x32c>)
 800ac4a:	428c      	cmp	r4, r1
 800ac4c:	d055      	beq.n	800acfa <_malloc_r+0x14a>
 800ac4e:	2003      	movs	r0, #3
 800ac50:	6862      	ldr	r2, [r4, #4]
 800ac52:	4382      	bics	r2, r0
 800ac54:	1b50      	subs	r0, r2, r5
 800ac56:	280f      	cmp	r0, #15
 800ac58:	dd36      	ble.n	800acc8 <_malloc_r+0x118>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	1967      	adds	r7, r4, r5
 800ac5e:	431d      	orrs	r5, r3
 800ac60:	4303      	orrs	r3, r0
 800ac62:	6065      	str	r5, [r4, #4]
 800ac64:	6177      	str	r7, [r6, #20]
 800ac66:	6137      	str	r7, [r6, #16]
 800ac68:	60f9      	str	r1, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	50a0      	str	r0, [r4, r2]
 800ac70:	9801      	ldr	r0, [sp, #4]
 800ac72:	f000 f9b9 	bl	800afe8 <__malloc_unlock>
 800ac76:	0020      	movs	r0, r4
 800ac78:	3008      	adds	r0, #8
 800ac7a:	e7a7      	b.n	800abcc <_malloc_r+0x1c>
 800ac7c:	2a14      	cmp	r2, #20
 800ac7e:	d802      	bhi.n	800ac86 <_malloc_r+0xd6>
 800ac80:	0013      	movs	r3, r2
 800ac82:	335b      	adds	r3, #91	; 0x5b
 800ac84:	e7d0      	b.n	800ac28 <_malloc_r+0x78>
 800ac86:	2a54      	cmp	r2, #84	; 0x54
 800ac88:	d802      	bhi.n	800ac90 <_malloc_r+0xe0>
 800ac8a:	0b2b      	lsrs	r3, r5, #12
 800ac8c:	336e      	adds	r3, #110	; 0x6e
 800ac8e:	e7cb      	b.n	800ac28 <_malloc_r+0x78>
 800ac90:	23aa      	movs	r3, #170	; 0xaa
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d802      	bhi.n	800ac9e <_malloc_r+0xee>
 800ac98:	0beb      	lsrs	r3, r5, #15
 800ac9a:	3377      	adds	r3, #119	; 0x77
 800ac9c:	e7c4      	b.n	800ac28 <_malloc_r+0x78>
 800ac9e:	4990      	ldr	r1, [pc, #576]	; (800aee0 <_malloc_r+0x330>)
 800aca0:	237e      	movs	r3, #126	; 0x7e
 800aca2:	428a      	cmp	r2, r1
 800aca4:	d8c0      	bhi.n	800ac28 <_malloc_r+0x78>
 800aca6:	0cab      	lsrs	r3, r5, #18
 800aca8:	337c      	adds	r3, #124	; 0x7c
 800acaa:	e7bd      	b.n	800ac28 <_malloc_r+0x78>
 800acac:	68e0      	ldr	r0, [r4, #12]
 800acae:	2f00      	cmp	r7, #0
 800acb0:	db08      	blt.n	800acc4 <_malloc_r+0x114>
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	60d8      	str	r0, [r3, #12]
 800acb6:	6083      	str	r3, [r0, #8]
 800acb8:	2301      	movs	r3, #1
 800acba:	18a2      	adds	r2, r4, r2
 800acbc:	6851      	ldr	r1, [r2, #4]
 800acbe:	430b      	orrs	r3, r1
 800acc0:	6053      	str	r3, [r2, #4]
 800acc2:	e7d5      	b.n	800ac70 <_malloc_r+0xc0>
 800acc4:	0004      	movs	r4, r0
 800acc6:	e7b4      	b.n	800ac32 <_malloc_r+0x82>
 800acc8:	6171      	str	r1, [r6, #20]
 800acca:	6131      	str	r1, [r6, #16]
 800accc:	2800      	cmp	r0, #0
 800acce:	daf3      	bge.n	800acb8 <_malloc_r+0x108>
 800acd0:	6871      	ldr	r1, [r6, #4]
 800acd2:	468c      	mov	ip, r1
 800acd4:	2180      	movs	r1, #128	; 0x80
 800acd6:	0089      	lsls	r1, r1, #2
 800acd8:	428a      	cmp	r2, r1
 800acda:	d300      	bcc.n	800acde <_malloc_r+0x12e>
 800acdc:	e08c      	b.n	800adf8 <_malloc_r+0x248>
 800acde:	08d1      	lsrs	r1, r2, #3
 800ace0:	0950      	lsrs	r0, r2, #5
 800ace2:	2201      	movs	r2, #1
 800ace4:	4082      	lsls	r2, r0
 800ace6:	4660      	mov	r0, ip
 800ace8:	4302      	orrs	r2, r0
 800acea:	6072      	str	r2, [r6, #4]
 800acec:	00ca      	lsls	r2, r1, #3
 800acee:	1992      	adds	r2, r2, r6
 800acf0:	6891      	ldr	r1, [r2, #8]
 800acf2:	60e2      	str	r2, [r4, #12]
 800acf4:	60a1      	str	r1, [r4, #8]
 800acf6:	6094      	str	r4, [r2, #8]
 800acf8:	60cc      	str	r4, [r1, #12]
 800acfa:	2201      	movs	r2, #1
 800acfc:	4876      	ldr	r0, [pc, #472]	; (800aed8 <_malloc_r+0x328>)
 800acfe:	1099      	asrs	r1, r3, #2
 800ad00:	408a      	lsls	r2, r1
 800ad02:	6841      	ldr	r1, [r0, #4]
 800ad04:	4291      	cmp	r1, r2
 800ad06:	d328      	bcc.n	800ad5a <_malloc_r+0x1aa>
 800ad08:	420a      	tst	r2, r1
 800ad0a:	d105      	bne.n	800ad18 <_malloc_r+0x168>
 800ad0c:	2403      	movs	r4, #3
 800ad0e:	43a3      	bics	r3, r4
 800ad10:	0052      	lsls	r2, r2, #1
 800ad12:	3304      	adds	r3, #4
 800ad14:	420a      	tst	r2, r1
 800ad16:	d0fb      	beq.n	800ad10 <_malloc_r+0x160>
 800ad18:	496f      	ldr	r1, [pc, #444]	; (800aed8 <_malloc_r+0x328>)
 800ad1a:	9104      	str	r1, [sp, #16]
 800ad1c:	00d9      	lsls	r1, r3, #3
 800ad1e:	1841      	adds	r1, r0, r1
 800ad20:	468c      	mov	ip, r1
 800ad22:	000f      	movs	r7, r1
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	68fc      	ldr	r4, [r7, #12]
 800ad28:	42bc      	cmp	r4, r7
 800ad2a:	d000      	beq.n	800ad2e <_malloc_r+0x17e>
 800ad2c:	e09b      	b.n	800ae66 <_malloc_r+0x2b6>
 800ad2e:	2403      	movs	r4, #3
 800ad30:	9902      	ldr	r1, [sp, #8]
 800ad32:	3708      	adds	r7, #8
 800ad34:	3101      	adds	r1, #1
 800ad36:	9102      	str	r1, [sp, #8]
 800ad38:	4221      	tst	r1, r4
 800ad3a:	d1f4      	bne.n	800ad26 <_malloc_r+0x176>
 800ad3c:	2103      	movs	r1, #3
 800ad3e:	420b      	tst	r3, r1
 800ad40:	d000      	beq.n	800ad44 <_malloc_r+0x194>
 800ad42:	e0b7      	b.n	800aeb4 <_malloc_r+0x304>
 800ad44:	6843      	ldr	r3, [r0, #4]
 800ad46:	4393      	bics	r3, r2
 800ad48:	6043      	str	r3, [r0, #4]
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	0052      	lsls	r2, r2, #1
 800ad4e:	6859      	ldr	r1, [r3, #4]
 800ad50:	4291      	cmp	r1, r2
 800ad52:	d302      	bcc.n	800ad5a <_malloc_r+0x1aa>
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	d000      	beq.n	800ad5a <_malloc_r+0x1aa>
 800ad58:	e0bb      	b.n	800aed2 <_malloc_r+0x322>
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	6883      	ldr	r3, [r0, #8]
 800ad5e:	9302      	str	r3, [sp, #8]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	4393      	bics	r3, r2
 800ad64:	9303      	str	r3, [sp, #12]
 800ad66:	42ab      	cmp	r3, r5
 800ad68:	d303      	bcc.n	800ad72 <_malloc_r+0x1c2>
 800ad6a:	1b59      	subs	r1, r3, r5
 800ad6c:	290f      	cmp	r1, #15
 800ad6e:	dd00      	ble.n	800ad72 <_malloc_r+0x1c2>
 800ad70:	e123      	b.n	800afba <_malloc_r+0x40a>
 800ad72:	9b02      	ldr	r3, [sp, #8]
 800ad74:	9a03      	ldr	r2, [sp, #12]
 800ad76:	2008      	movs	r0, #8
 800ad78:	189e      	adds	r6, r3, r2
 800ad7a:	4b5a      	ldr	r3, [pc, #360]	; (800aee4 <_malloc_r+0x334>)
 800ad7c:	681f      	ldr	r7, [r3, #0]
 800ad7e:	f001 fb4b 	bl	800c418 <sysconf>
 800ad82:	4b59      	ldr	r3, [pc, #356]	; (800aee8 <_malloc_r+0x338>)
 800ad84:	3710      	adds	r7, #16
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	197f      	adds	r7, r7, r5
 800ad8a:	9004      	str	r0, [sp, #16]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	d003      	beq.n	800ad98 <_malloc_r+0x1e8>
 800ad90:	1e7b      	subs	r3, r7, #1
 800ad92:	181b      	adds	r3, r3, r0
 800ad94:	4247      	negs	r7, r0
 800ad96:	401f      	ands	r7, r3
 800ad98:	0039      	movs	r1, r7
 800ad9a:	9801      	ldr	r0, [sp, #4]
 800ad9c:	f001 fae8 	bl	800c370 <_sbrk_r>
 800ada0:	0004      	movs	r4, r0
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d100      	bne.n	800ada8 <_malloc_r+0x1f8>
 800ada6:	e0de      	b.n	800af66 <_malloc_r+0x3b6>
 800ada8:	4286      	cmp	r6, r0
 800adaa:	d904      	bls.n	800adb6 <_malloc_r+0x206>
 800adac:	4b4a      	ldr	r3, [pc, #296]	; (800aed8 <_malloc_r+0x328>)
 800adae:	9a02      	ldr	r2, [sp, #8]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d000      	beq.n	800adb6 <_malloc_r+0x206>
 800adb4:	e0d7      	b.n	800af66 <_malloc_r+0x3b6>
 800adb6:	4a4d      	ldr	r2, [pc, #308]	; (800aeec <_malloc_r+0x33c>)
 800adb8:	6813      	ldr	r3, [r2, #0]
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	9a04      	ldr	r2, [sp, #16]
 800adc0:	3a01      	subs	r2, #1
 800adc2:	42a6      	cmp	r6, r4
 800adc4:	d000      	beq.n	800adc8 <_malloc_r+0x218>
 800adc6:	e097      	b.n	800aef8 <_malloc_r+0x348>
 800adc8:	4216      	tst	r6, r2
 800adca:	d000      	beq.n	800adce <_malloc_r+0x21e>
 800adcc:	e094      	b.n	800aef8 <_malloc_r+0x348>
 800adce:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <_malloc_r+0x328>)
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	19df      	adds	r7, r3, r7
 800add6:	2301      	movs	r3, #1
 800add8:	433b      	orrs	r3, r7
 800adda:	6053      	str	r3, [r2, #4]
 800addc:	4b43      	ldr	r3, [pc, #268]	; (800aeec <_malloc_r+0x33c>)
 800adde:	4a44      	ldr	r2, [pc, #272]	; (800aef0 <_malloc_r+0x340>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6811      	ldr	r1, [r2, #0]
 800ade4:	428b      	cmp	r3, r1
 800ade6:	d900      	bls.n	800adea <_malloc_r+0x23a>
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	4a42      	ldr	r2, [pc, #264]	; (800aef4 <_malloc_r+0x344>)
 800adec:	6811      	ldr	r1, [r2, #0]
 800adee:	428b      	cmp	r3, r1
 800adf0:	d800      	bhi.n	800adf4 <_malloc_r+0x244>
 800adf2:	e0b8      	b.n	800af66 <_malloc_r+0x3b6>
 800adf4:	6013      	str	r3, [r2, #0]
 800adf6:	e0b6      	b.n	800af66 <_malloc_r+0x3b6>
 800adf8:	0a50      	lsrs	r0, r2, #9
 800adfa:	2804      	cmp	r0, #4
 800adfc:	d811      	bhi.n	800ae22 <_malloc_r+0x272>
 800adfe:	0991      	lsrs	r1, r2, #6
 800ae00:	3138      	adds	r1, #56	; 0x38
 800ae02:	00cf      	lsls	r7, r1, #3
 800ae04:	19bf      	adds	r7, r7, r6
 800ae06:	68b8      	ldr	r0, [r7, #8]
 800ae08:	4287      	cmp	r7, r0
 800ae0a:	d125      	bne.n	800ae58 <_malloc_r+0x2a8>
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	1089      	asrs	r1, r1, #2
 800ae10:	408a      	lsls	r2, r1
 800ae12:	4661      	mov	r1, ip
 800ae14:	430a      	orrs	r2, r1
 800ae16:	6072      	str	r2, [r6, #4]
 800ae18:	60e7      	str	r7, [r4, #12]
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	60bc      	str	r4, [r7, #8]
 800ae1e:	60c4      	str	r4, [r0, #12]
 800ae20:	e76b      	b.n	800acfa <_malloc_r+0x14a>
 800ae22:	2814      	cmp	r0, #20
 800ae24:	d802      	bhi.n	800ae2c <_malloc_r+0x27c>
 800ae26:	0001      	movs	r1, r0
 800ae28:	315b      	adds	r1, #91	; 0x5b
 800ae2a:	e7ea      	b.n	800ae02 <_malloc_r+0x252>
 800ae2c:	2854      	cmp	r0, #84	; 0x54
 800ae2e:	d802      	bhi.n	800ae36 <_malloc_r+0x286>
 800ae30:	0b11      	lsrs	r1, r2, #12
 800ae32:	316e      	adds	r1, #110	; 0x6e
 800ae34:	e7e5      	b.n	800ae02 <_malloc_r+0x252>
 800ae36:	21aa      	movs	r1, #170	; 0xaa
 800ae38:	0049      	lsls	r1, r1, #1
 800ae3a:	4288      	cmp	r0, r1
 800ae3c:	d802      	bhi.n	800ae44 <_malloc_r+0x294>
 800ae3e:	0bd1      	lsrs	r1, r2, #15
 800ae40:	3177      	adds	r1, #119	; 0x77
 800ae42:	e7de      	b.n	800ae02 <_malloc_r+0x252>
 800ae44:	4f26      	ldr	r7, [pc, #152]	; (800aee0 <_malloc_r+0x330>)
 800ae46:	217e      	movs	r1, #126	; 0x7e
 800ae48:	42b8      	cmp	r0, r7
 800ae4a:	d8da      	bhi.n	800ae02 <_malloc_r+0x252>
 800ae4c:	0c91      	lsrs	r1, r2, #18
 800ae4e:	317c      	adds	r1, #124	; 0x7c
 800ae50:	e7d7      	b.n	800ae02 <_malloc_r+0x252>
 800ae52:	6880      	ldr	r0, [r0, #8]
 800ae54:	4287      	cmp	r7, r0
 800ae56:	d004      	beq.n	800ae62 <_malloc_r+0x2b2>
 800ae58:	2603      	movs	r6, #3
 800ae5a:	6841      	ldr	r1, [r0, #4]
 800ae5c:	43b1      	bics	r1, r6
 800ae5e:	4291      	cmp	r1, r2
 800ae60:	d8f7      	bhi.n	800ae52 <_malloc_r+0x2a2>
 800ae62:	68c7      	ldr	r7, [r0, #12]
 800ae64:	e7d8      	b.n	800ae18 <_malloc_r+0x268>
 800ae66:	2603      	movs	r6, #3
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	43b1      	bics	r1, r6
 800ae6c:	9103      	str	r1, [sp, #12]
 800ae6e:	68e6      	ldr	r6, [r4, #12]
 800ae70:	1b49      	subs	r1, r1, r5
 800ae72:	290f      	cmp	r1, #15
 800ae74:	dd10      	ble.n	800ae98 <_malloc_r+0x2e8>
 800ae76:	2201      	movs	r2, #1
 800ae78:	1963      	adds	r3, r4, r5
 800ae7a:	4315      	orrs	r5, r2
 800ae7c:	6065      	str	r5, [r4, #4]
 800ae7e:	68a5      	ldr	r5, [r4, #8]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	60ee      	str	r6, [r5, #12]
 800ae84:	60b5      	str	r5, [r6, #8]
 800ae86:	6143      	str	r3, [r0, #20]
 800ae88:	6103      	str	r3, [r0, #16]
 800ae8a:	4814      	ldr	r0, [pc, #80]	; (800aedc <_malloc_r+0x32c>)
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	60d8      	str	r0, [r3, #12]
 800ae90:	6098      	str	r0, [r3, #8]
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	50e1      	str	r1, [r4, r3]
 800ae96:	e6eb      	b.n	800ac70 <_malloc_r+0xc0>
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	db09      	blt.n	800aeb0 <_malloc_r+0x300>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	18e1      	adds	r1, r4, r3
 800aea0:	2301      	movs	r3, #1
 800aea2:	684a      	ldr	r2, [r1, #4]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	604b      	str	r3, [r1, #4]
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	60de      	str	r6, [r3, #12]
 800aeac:	60b3      	str	r3, [r6, #8]
 800aeae:	e6df      	b.n	800ac70 <_malloc_r+0xc0>
 800aeb0:	0034      	movs	r4, r6
 800aeb2:	e739      	b.n	800ad28 <_malloc_r+0x178>
 800aeb4:	2108      	movs	r1, #8
 800aeb6:	4249      	negs	r1, r1
 800aeb8:	448c      	add	ip, r1
 800aeba:	4661      	mov	r1, ip
 800aebc:	6889      	ldr	r1, [r1, #8]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	4561      	cmp	r1, ip
 800aec2:	d100      	bne.n	800aec6 <_malloc_r+0x316>
 800aec4:	e73a      	b.n	800ad3c <_malloc_r+0x18c>
 800aec6:	e740      	b.n	800ad4a <_malloc_r+0x19a>
 800aec8:	3304      	adds	r3, #4
 800aeca:	0052      	lsls	r2, r2, #1
 800aecc:	420a      	tst	r2, r1
 800aece:	d0fb      	beq.n	800aec8 <_malloc_r+0x318>
 800aed0:	e724      	b.n	800ad1c <_malloc_r+0x16c>
 800aed2:	9b02      	ldr	r3, [sp, #8]
 800aed4:	e7fa      	b.n	800aecc <_malloc_r+0x31c>
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	20000028 	.word	0x20000028
 800aedc:	20000030 	.word	0x20000030
 800aee0:	00000554 	.word	0x00000554
 800aee4:	20000c68 	.word	0x20000c68
 800aee8:	20000430 	.word	0x20000430
 800aeec:	20000c38 	.word	0x20000c38
 800aef0:	20000c60 	.word	0x20000c60
 800aef4:	20000c64 	.word	0x20000c64
 800aef8:	4934      	ldr	r1, [pc, #208]	; (800afcc <_malloc_r+0x41c>)
 800aefa:	6808      	ldr	r0, [r1, #0]
 800aefc:	3001      	adds	r0, #1
 800aefe:	d140      	bne.n	800af82 <_malloc_r+0x3d2>
 800af00:	600c      	str	r4, [r1, #0]
 800af02:	2107      	movs	r1, #7
 800af04:	0026      	movs	r6, r4
 800af06:	2300      	movs	r3, #0
 800af08:	400e      	ands	r6, r1
 800af0a:	420c      	tst	r4, r1
 800af0c:	d002      	beq.n	800af14 <_malloc_r+0x364>
 800af0e:	3308      	adds	r3, #8
 800af10:	1b9b      	subs	r3, r3, r6
 800af12:	18e4      	adds	r4, r4, r3
 800af14:	19e1      	adds	r1, r4, r7
 800af16:	9105      	str	r1, [sp, #20]
 800af18:	9f05      	ldr	r7, [sp, #20]
 800af1a:	9904      	ldr	r1, [sp, #16]
 800af1c:	4017      	ands	r7, r2
 800af1e:	18cb      	adds	r3, r1, r3
 800af20:	1bdf      	subs	r7, r3, r7
 800af22:	4017      	ands	r7, r2
 800af24:	0039      	movs	r1, r7
 800af26:	9801      	ldr	r0, [sp, #4]
 800af28:	f001 fa22 	bl	800c370 <_sbrk_r>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d107      	bne.n	800af40 <_malloc_r+0x390>
 800af30:	1e37      	subs	r7, r6, #0
 800af32:	9805      	ldr	r0, [sp, #20]
 800af34:	d004      	beq.n	800af40 <_malloc_r+0x390>
 800af36:	0030      	movs	r0, r6
 800af38:	2700      	movs	r7, #0
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	3808      	subs	r0, #8
 800af3e:	1818      	adds	r0, r3, r0
 800af40:	4a23      	ldr	r2, [pc, #140]	; (800afd0 <_malloc_r+0x420>)
 800af42:	1b00      	subs	r0, r0, r4
 800af44:	6813      	ldr	r3, [r2, #0]
 800af46:	19c0      	adds	r0, r0, r7
 800af48:	19db      	adds	r3, r3, r7
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	2201      	movs	r2, #1
 800af4e:	4b21      	ldr	r3, [pc, #132]	; (800afd4 <_malloc_r+0x424>)
 800af50:	9902      	ldr	r1, [sp, #8]
 800af52:	4310      	orrs	r0, r2
 800af54:	609c      	str	r4, [r3, #8]
 800af56:	6060      	str	r0, [r4, #4]
 800af58:	4299      	cmp	r1, r3
 800af5a:	d100      	bne.n	800af5e <_malloc_r+0x3ae>
 800af5c:	e73e      	b.n	800addc <_malloc_r+0x22c>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	2b0f      	cmp	r3, #15
 800af62:	d813      	bhi.n	800af8c <_malloc_r+0x3dc>
 800af64:	6062      	str	r2, [r4, #4]
 800af66:	2203      	movs	r2, #3
 800af68:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <_malloc_r+0x424>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	4393      	bics	r3, r2
 800af70:	1b59      	subs	r1, r3, r5
 800af72:	42ab      	cmp	r3, r5
 800af74:	d301      	bcc.n	800af7a <_malloc_r+0x3ca>
 800af76:	290f      	cmp	r1, #15
 800af78:	dc1f      	bgt.n	800afba <_malloc_r+0x40a>
 800af7a:	9801      	ldr	r0, [sp, #4]
 800af7c:	f000 f834 	bl	800afe8 <__malloc_unlock>
 800af80:	e623      	b.n	800abca <_malloc_r+0x1a>
 800af82:	4913      	ldr	r1, [pc, #76]	; (800afd0 <_malloc_r+0x420>)
 800af84:	1ba6      	subs	r6, r4, r6
 800af86:	18f6      	adds	r6, r6, r3
 800af88:	600e      	str	r6, [r1, #0]
 800af8a:	e7ba      	b.n	800af02 <_malloc_r+0x352>
 800af8c:	2107      	movs	r1, #7
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	3b0c      	subs	r3, #12
 800af92:	438b      	bics	r3, r1
 800af94:	9902      	ldr	r1, [sp, #8]
 800af96:	6849      	ldr	r1, [r1, #4]
 800af98:	400a      	ands	r2, r1
 800af9a:	9902      	ldr	r1, [sp, #8]
 800af9c:	431a      	orrs	r2, r3
 800af9e:	604a      	str	r2, [r1, #4]
 800afa0:	18ca      	adds	r2, r1, r3
 800afa2:	2105      	movs	r1, #5
 800afa4:	6051      	str	r1, [r2, #4]
 800afa6:	6091      	str	r1, [r2, #8]
 800afa8:	2b0f      	cmp	r3, #15
 800afaa:	d800      	bhi.n	800afae <_malloc_r+0x3fe>
 800afac:	e716      	b.n	800addc <_malloc_r+0x22c>
 800afae:	9902      	ldr	r1, [sp, #8]
 800afb0:	9801      	ldr	r0, [sp, #4]
 800afb2:	3108      	adds	r1, #8
 800afb4:	f001 fab6 	bl	800c524 <_free_r>
 800afb8:	e710      	b.n	800addc <_malloc_r+0x22c>
 800afba:	2201      	movs	r2, #1
 800afbc:	0013      	movs	r3, r2
 800afbe:	4805      	ldr	r0, [pc, #20]	; (800afd4 <_malloc_r+0x424>)
 800afc0:	432b      	orrs	r3, r5
 800afc2:	6884      	ldr	r4, [r0, #8]
 800afc4:	6063      	str	r3, [r4, #4]
 800afc6:	1963      	adds	r3, r4, r5
 800afc8:	6083      	str	r3, [r0, #8]
 800afca:	e623      	b.n	800ac14 <_malloc_r+0x64>
 800afcc:	20000430 	.word	0x20000430
 800afd0:	20000c38 	.word	0x20000c38
 800afd4:	20000028 	.word	0x20000028

0800afd8 <__malloc_lock>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	4802      	ldr	r0, [pc, #8]	; (800afe4 <__malloc_lock+0xc>)
 800afdc:	f001 fa1a 	bl	800c414 <__retarget_lock_acquire_recursive>
 800afe0:	bd10      	pop	{r4, pc}
 800afe2:	46c0      	nop			; (mov r8, r8)
 800afe4:	20000dad 	.word	0x20000dad

0800afe8 <__malloc_unlock>:
 800afe8:	b510      	push	{r4, lr}
 800afea:	4802      	ldr	r0, [pc, #8]	; (800aff4 <__malloc_unlock+0xc>)
 800afec:	f001 fa13 	bl	800c416 <__retarget_lock_release_recursive>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	20000dad 	.word	0x20000dad

0800aff8 <sulp>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	0016      	movs	r6, r2
 800affc:	000d      	movs	r5, r1
 800affe:	f002 f9e7 	bl	800d3d0 <__ulp>
 800b002:	2e00      	cmp	r6, #0
 800b004:	d00d      	beq.n	800b022 <sulp+0x2a>
 800b006:	236b      	movs	r3, #107	; 0x6b
 800b008:	006a      	lsls	r2, r5, #1
 800b00a:	0d52      	lsrs	r2, r2, #21
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dd07      	ble.n	800b022 <sulp+0x2a>
 800b012:	2400      	movs	r4, #0
 800b014:	4a03      	ldr	r2, [pc, #12]	; (800b024 <sulp+0x2c>)
 800b016:	051b      	lsls	r3, r3, #20
 800b018:	189d      	adds	r5, r3, r2
 800b01a:	002b      	movs	r3, r5
 800b01c:	0022      	movs	r2, r4
 800b01e:	f7f6 fb25 	bl	800166c <__aeabi_dmul>
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	3ff00000 	.word	0x3ff00000

0800b028 <_strtod_l>:
 800b028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02a:	b0a1      	sub	sp, #132	; 0x84
 800b02c:	9219      	str	r2, [sp, #100]	; 0x64
 800b02e:	2200      	movs	r2, #0
 800b030:	2600      	movs	r6, #0
 800b032:	2700      	movs	r7, #0
 800b034:	9004      	str	r0, [sp, #16]
 800b036:	9107      	str	r1, [sp, #28]
 800b038:	921c      	str	r2, [sp, #112]	; 0x70
 800b03a:	911b      	str	r1, [sp, #108]	; 0x6c
 800b03c:	780a      	ldrb	r2, [r1, #0]
 800b03e:	2a2b      	cmp	r2, #43	; 0x2b
 800b040:	d055      	beq.n	800b0ee <_strtod_l+0xc6>
 800b042:	d841      	bhi.n	800b0c8 <_strtod_l+0xa0>
 800b044:	2a0d      	cmp	r2, #13
 800b046:	d83b      	bhi.n	800b0c0 <_strtod_l+0x98>
 800b048:	2a08      	cmp	r2, #8
 800b04a:	d83b      	bhi.n	800b0c4 <_strtod_l+0x9c>
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	d044      	beq.n	800b0da <_strtod_l+0xb2>
 800b050:	2200      	movs	r2, #0
 800b052:	920f      	str	r2, [sp, #60]	; 0x3c
 800b054:	2100      	movs	r1, #0
 800b056:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b058:	9109      	str	r1, [sp, #36]	; 0x24
 800b05a:	782a      	ldrb	r2, [r5, #0]
 800b05c:	2a30      	cmp	r2, #48	; 0x30
 800b05e:	d000      	beq.n	800b062 <_strtod_l+0x3a>
 800b060:	e085      	b.n	800b16e <_strtod_l+0x146>
 800b062:	786a      	ldrb	r2, [r5, #1]
 800b064:	3120      	adds	r1, #32
 800b066:	438a      	bics	r2, r1
 800b068:	2a58      	cmp	r2, #88	; 0x58
 800b06a:	d000      	beq.n	800b06e <_strtod_l+0x46>
 800b06c:	e075      	b.n	800b15a <_strtod_l+0x132>
 800b06e:	9302      	str	r3, [sp, #8]
 800b070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b072:	4a97      	ldr	r2, [pc, #604]	; (800b2d0 <_strtod_l+0x2a8>)
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	ab1c      	add	r3, sp, #112	; 0x70
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	9804      	ldr	r0, [sp, #16]
 800b07c:	ab1d      	add	r3, sp, #116	; 0x74
 800b07e:	a91b      	add	r1, sp, #108	; 0x6c
 800b080:	f001 fb6c 	bl	800c75c <__gethex>
 800b084:	230f      	movs	r3, #15
 800b086:	0002      	movs	r2, r0
 800b088:	401a      	ands	r2, r3
 800b08a:	0004      	movs	r4, r0
 800b08c:	9205      	str	r2, [sp, #20]
 800b08e:	4218      	tst	r0, r3
 800b090:	d005      	beq.n	800b09e <_strtod_l+0x76>
 800b092:	2a06      	cmp	r2, #6
 800b094:	d12d      	bne.n	800b0f2 <_strtod_l+0xca>
 800b096:	1c6b      	adds	r3, r5, #1
 800b098:	931b      	str	r3, [sp, #108]	; 0x6c
 800b09a:	2300      	movs	r3, #0
 800b09c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b09e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <_strtod_l+0x82>
 800b0a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01b      	beq.n	800b0e8 <_strtod_l+0xc0>
 800b0b0:	2380      	movs	r3, #128	; 0x80
 800b0b2:	0032      	movs	r2, r6
 800b0b4:	061b      	lsls	r3, r3, #24
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	0010      	movs	r0, r2
 800b0ba:	0019      	movs	r1, r3
 800b0bc:	b021      	add	sp, #132	; 0x84
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c0:	2a20      	cmp	r2, #32
 800b0c2:	d1c5      	bne.n	800b050 <_strtod_l+0x28>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	e7b8      	b.n	800b03a <_strtod_l+0x12>
 800b0c8:	2a2d      	cmp	r2, #45	; 0x2d
 800b0ca:	d1c1      	bne.n	800b050 <_strtod_l+0x28>
 800b0cc:	3a2c      	subs	r2, #44	; 0x2c
 800b0ce:	920f      	str	r2, [sp, #60]	; 0x3c
 800b0d0:	1c4a      	adds	r2, r1, #1
 800b0d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0d4:	784a      	ldrb	r2, [r1, #1]
 800b0d6:	2a00      	cmp	r2, #0
 800b0d8:	d1bc      	bne.n	800b054 <_strtod_l+0x2c>
 800b0da:	9b07      	ldr	r3, [sp, #28]
 800b0dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0de:	2300      	movs	r3, #0
 800b0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1dd      	bne.n	800b0a4 <_strtod_l+0x7c>
 800b0e8:	0032      	movs	r2, r6
 800b0ea:	003b      	movs	r3, r7
 800b0ec:	e7e4      	b.n	800b0b8 <_strtod_l+0x90>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	e7ed      	b.n	800b0ce <_strtod_l+0xa6>
 800b0f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0f4:	2a00      	cmp	r2, #0
 800b0f6:	d007      	beq.n	800b108 <_strtod_l+0xe0>
 800b0f8:	2135      	movs	r1, #53	; 0x35
 800b0fa:	a81e      	add	r0, sp, #120	; 0x78
 800b0fc:	f002 fa59 	bl	800d5b2 <__copybits>
 800b100:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b102:	9804      	ldr	r0, [sp, #16]
 800b104:	f001 fe56 	bl	800cdb4 <_Bfree>
 800b108:	9805      	ldr	r0, [sp, #20]
 800b10a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b10c:	3801      	subs	r0, #1
 800b10e:	2804      	cmp	r0, #4
 800b110:	d806      	bhi.n	800b120 <_strtod_l+0xf8>
 800b112:	f7f4 ffff 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b116:	0312      	.short	0x0312
 800b118:	1e1c      	.short	0x1e1c
 800b11a:	12          	.byte	0x12
 800b11b:	00          	.byte	0x00
 800b11c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b11e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b120:	05e4      	lsls	r4, r4, #23
 800b122:	d502      	bpl.n	800b12a <_strtod_l+0x102>
 800b124:	2380      	movs	r3, #128	; 0x80
 800b126:	061b      	lsls	r3, r3, #24
 800b128:	431f      	orrs	r7, r3
 800b12a:	4b6a      	ldr	r3, [pc, #424]	; (800b2d4 <_strtod_l+0x2ac>)
 800b12c:	423b      	tst	r3, r7
 800b12e:	d1b6      	bne.n	800b09e <_strtod_l+0x76>
 800b130:	f001 f944 	bl	800c3bc <__errno>
 800b134:	2322      	movs	r3, #34	; 0x22
 800b136:	6003      	str	r3, [r0, #0]
 800b138:	e7b1      	b.n	800b09e <_strtod_l+0x76>
 800b13a:	4967      	ldr	r1, [pc, #412]	; (800b2d8 <_strtod_l+0x2b0>)
 800b13c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b13e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b140:	400a      	ands	r2, r1
 800b142:	4966      	ldr	r1, [pc, #408]	; (800b2dc <_strtod_l+0x2b4>)
 800b144:	185b      	adds	r3, r3, r1
 800b146:	051b      	lsls	r3, r3, #20
 800b148:	431a      	orrs	r2, r3
 800b14a:	0017      	movs	r7, r2
 800b14c:	e7e8      	b.n	800b120 <_strtod_l+0xf8>
 800b14e:	4f61      	ldr	r7, [pc, #388]	; (800b2d4 <_strtod_l+0x2ac>)
 800b150:	e7e6      	b.n	800b120 <_strtod_l+0xf8>
 800b152:	2601      	movs	r6, #1
 800b154:	4f62      	ldr	r7, [pc, #392]	; (800b2e0 <_strtod_l+0x2b8>)
 800b156:	4276      	negs	r6, r6
 800b158:	e7e2      	b.n	800b120 <_strtod_l+0xf8>
 800b15a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	2b30      	cmp	r3, #48	; 0x30
 800b164:	d0f9      	beq.n	800b15a <_strtod_l+0x132>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d099      	beq.n	800b09e <_strtod_l+0x76>
 800b16a:	2301      	movs	r3, #1
 800b16c:	9309      	str	r3, [sp, #36]	; 0x24
 800b16e:	2500      	movs	r5, #0
 800b170:	220a      	movs	r2, #10
 800b172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b174:	950d      	str	r5, [sp, #52]	; 0x34
 800b176:	9310      	str	r3, [sp, #64]	; 0x40
 800b178:	9508      	str	r5, [sp, #32]
 800b17a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b17c:	7804      	ldrb	r4, [r0, #0]
 800b17e:	0023      	movs	r3, r4
 800b180:	3b30      	subs	r3, #48	; 0x30
 800b182:	b2d9      	uxtb	r1, r3
 800b184:	2909      	cmp	r1, #9
 800b186:	d927      	bls.n	800b1d8 <_strtod_l+0x1b0>
 800b188:	2201      	movs	r2, #1
 800b18a:	4956      	ldr	r1, [pc, #344]	; (800b2e4 <_strtod_l+0x2bc>)
 800b18c:	f001 f838 	bl	800c200 <strncmp>
 800b190:	2800      	cmp	r0, #0
 800b192:	d031      	beq.n	800b1f8 <_strtod_l+0x1d0>
 800b194:	2000      	movs	r0, #0
 800b196:	0023      	movs	r3, r4
 800b198:	4684      	mov	ip, r0
 800b19a:	9a08      	ldr	r2, [sp, #32]
 800b19c:	900c      	str	r0, [sp, #48]	; 0x30
 800b19e:	9205      	str	r2, [sp, #20]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	0019      	movs	r1, r3
 800b1a4:	4391      	bics	r1, r2
 800b1a6:	000a      	movs	r2, r1
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	9106      	str	r1, [sp, #24]
 800b1ac:	2a45      	cmp	r2, #69	; 0x45
 800b1ae:	d000      	beq.n	800b1b2 <_strtod_l+0x18a>
 800b1b0:	e0c2      	b.n	800b338 <_strtod_l+0x310>
 800b1b2:	9b05      	ldr	r3, [sp, #20]
 800b1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b6:	4303      	orrs	r3, r0
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	428b      	cmp	r3, r1
 800b1bc:	d08d      	beq.n	800b0da <_strtod_l+0xb2>
 800b1be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1c0:	9307      	str	r3, [sp, #28]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1c6:	9b07      	ldr	r3, [sp, #28]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b2b      	cmp	r3, #43	; 0x2b
 800b1cc:	d071      	beq.n	800b2b2 <_strtod_l+0x28a>
 800b1ce:	000c      	movs	r4, r1
 800b1d0:	2b2d      	cmp	r3, #45	; 0x2d
 800b1d2:	d174      	bne.n	800b2be <_strtod_l+0x296>
 800b1d4:	2401      	movs	r4, #1
 800b1d6:	e06d      	b.n	800b2b4 <_strtod_l+0x28c>
 800b1d8:	9908      	ldr	r1, [sp, #32]
 800b1da:	2908      	cmp	r1, #8
 800b1dc:	dc09      	bgt.n	800b1f2 <_strtod_l+0x1ca>
 800b1de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1e0:	4351      	muls	r1, r2
 800b1e2:	185b      	adds	r3, r3, r1
 800b1e4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	9308      	str	r3, [sp, #32]
 800b1ee:	901b      	str	r0, [sp, #108]	; 0x6c
 800b1f0:	e7c3      	b.n	800b17a <_strtod_l+0x152>
 800b1f2:	4355      	muls	r5, r2
 800b1f4:	195d      	adds	r5, r3, r5
 800b1f6:	e7f6      	b.n	800b1e6 <_strtod_l+0x1be>
 800b1f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1fe:	9a08      	ldr	r2, [sp, #32]
 800b200:	785b      	ldrb	r3, [r3, #1]
 800b202:	2a00      	cmp	r2, #0
 800b204:	d03a      	beq.n	800b27c <_strtod_l+0x254>
 800b206:	900c      	str	r0, [sp, #48]	; 0x30
 800b208:	9205      	str	r2, [sp, #20]
 800b20a:	001a      	movs	r2, r3
 800b20c:	3a30      	subs	r2, #48	; 0x30
 800b20e:	2a09      	cmp	r2, #9
 800b210:	d912      	bls.n	800b238 <_strtod_l+0x210>
 800b212:	2201      	movs	r2, #1
 800b214:	4694      	mov	ip, r2
 800b216:	e7c3      	b.n	800b1a0 <_strtod_l+0x178>
 800b218:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b21a:	3001      	adds	r0, #1
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b220:	785b      	ldrb	r3, [r3, #1]
 800b222:	2b30      	cmp	r3, #48	; 0x30
 800b224:	d0f8      	beq.n	800b218 <_strtod_l+0x1f0>
 800b226:	001a      	movs	r2, r3
 800b228:	3a31      	subs	r2, #49	; 0x31
 800b22a:	2a08      	cmp	r2, #8
 800b22c:	d83c      	bhi.n	800b2a8 <_strtod_l+0x280>
 800b22e:	900c      	str	r0, [sp, #48]	; 0x30
 800b230:	2000      	movs	r0, #0
 800b232:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b234:	9005      	str	r0, [sp, #20]
 800b236:	9210      	str	r2, [sp, #64]	; 0x40
 800b238:	001a      	movs	r2, r3
 800b23a:	1c41      	adds	r1, r0, #1
 800b23c:	3a30      	subs	r2, #48	; 0x30
 800b23e:	2b30      	cmp	r3, #48	; 0x30
 800b240:	d016      	beq.n	800b270 <_strtod_l+0x248>
 800b242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b244:	185b      	adds	r3, r3, r1
 800b246:	930c      	str	r3, [sp, #48]	; 0x30
 800b248:	9b05      	ldr	r3, [sp, #20]
 800b24a:	210a      	movs	r1, #10
 800b24c:	469c      	mov	ip, r3
 800b24e:	4484      	add	ip, r0
 800b250:	4563      	cmp	r3, ip
 800b252:	d115      	bne.n	800b280 <_strtod_l+0x258>
 800b254:	9905      	ldr	r1, [sp, #20]
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	3101      	adds	r1, #1
 800b25a:	1809      	adds	r1, r1, r0
 800b25c:	181b      	adds	r3, r3, r0
 800b25e:	9105      	str	r1, [sp, #20]
 800b260:	2b08      	cmp	r3, #8
 800b262:	dc19      	bgt.n	800b298 <_strtod_l+0x270>
 800b264:	230a      	movs	r3, #10
 800b266:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b268:	434b      	muls	r3, r1
 800b26a:	2100      	movs	r1, #0
 800b26c:	18d3      	adds	r3, r2, r3
 800b26e:	930d      	str	r3, [sp, #52]	; 0x34
 800b270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b272:	0008      	movs	r0, r1
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	921b      	str	r2, [sp, #108]	; 0x6c
 800b278:	785b      	ldrb	r3, [r3, #1]
 800b27a:	e7c6      	b.n	800b20a <_strtod_l+0x1e2>
 800b27c:	9808      	ldr	r0, [sp, #32]
 800b27e:	e7d0      	b.n	800b222 <_strtod_l+0x1fa>
 800b280:	1c5c      	adds	r4, r3, #1
 800b282:	2b08      	cmp	r3, #8
 800b284:	dc04      	bgt.n	800b290 <_strtod_l+0x268>
 800b286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b288:	434b      	muls	r3, r1
 800b28a:	930d      	str	r3, [sp, #52]	; 0x34
 800b28c:	0023      	movs	r3, r4
 800b28e:	e7df      	b.n	800b250 <_strtod_l+0x228>
 800b290:	2c10      	cmp	r4, #16
 800b292:	dcfb      	bgt.n	800b28c <_strtod_l+0x264>
 800b294:	434d      	muls	r5, r1
 800b296:	e7f9      	b.n	800b28c <_strtod_l+0x264>
 800b298:	9b05      	ldr	r3, [sp, #20]
 800b29a:	2100      	movs	r1, #0
 800b29c:	2b10      	cmp	r3, #16
 800b29e:	dce7      	bgt.n	800b270 <_strtod_l+0x248>
 800b2a0:	230a      	movs	r3, #10
 800b2a2:	435d      	muls	r5, r3
 800b2a4:	1955      	adds	r5, r2, r5
 800b2a6:	e7e3      	b.n	800b270 <_strtod_l+0x248>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	920c      	str	r2, [sp, #48]	; 0x30
 800b2ac:	9205      	str	r2, [sp, #20]
 800b2ae:	3201      	adds	r2, #1
 800b2b0:	e7b0      	b.n	800b214 <_strtod_l+0x1ec>
 800b2b2:	2400      	movs	r4, #0
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ba:	9b07      	ldr	r3, [sp, #28]
 800b2bc:	789b      	ldrb	r3, [r3, #2]
 800b2be:	001a      	movs	r2, r3
 800b2c0:	3a30      	subs	r2, #48	; 0x30
 800b2c2:	2a09      	cmp	r2, #9
 800b2c4:	d914      	bls.n	800b2f0 <_strtod_l+0x2c8>
 800b2c6:	9a07      	ldr	r2, [sp, #28]
 800b2c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	e033      	b.n	800b336 <_strtod_l+0x30e>
 800b2ce:	46c0      	nop			; (mov r8, r8)
 800b2d0:	080148c0 	.word	0x080148c0
 800b2d4:	7ff00000 	.word	0x7ff00000
 800b2d8:	ffefffff 	.word	0xffefffff
 800b2dc:	00000433 	.word	0x00000433
 800b2e0:	7fffffff 	.word	0x7fffffff
 800b2e4:	080148bc 	.word	0x080148bc
 800b2e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	2b30      	cmp	r3, #48	; 0x30
 800b2f2:	d0f9      	beq.n	800b2e8 <_strtod_l+0x2c0>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	9206      	str	r2, [sp, #24]
 800b2f8:	001a      	movs	r2, r3
 800b2fa:	3a31      	subs	r2, #49	; 0x31
 800b2fc:	2a08      	cmp	r2, #8
 800b2fe:	d81b      	bhi.n	800b338 <_strtod_l+0x310>
 800b300:	3b30      	subs	r3, #48	; 0x30
 800b302:	930e      	str	r3, [sp, #56]	; 0x38
 800b304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b306:	9306      	str	r3, [sp, #24]
 800b308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b30a:	1c59      	adds	r1, r3, #1
 800b30c:	911b      	str	r1, [sp, #108]	; 0x6c
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	001a      	movs	r2, r3
 800b312:	3a30      	subs	r2, #48	; 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d93a      	bls.n	800b38e <_strtod_l+0x366>
 800b318:	9a06      	ldr	r2, [sp, #24]
 800b31a:	1a8a      	subs	r2, r1, r2
 800b31c:	49b2      	ldr	r1, [pc, #712]	; (800b5e8 <_strtod_l+0x5c0>)
 800b31e:	9106      	str	r1, [sp, #24]
 800b320:	2a08      	cmp	r2, #8
 800b322:	dc04      	bgt.n	800b32e <_strtod_l+0x306>
 800b324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b326:	9206      	str	r2, [sp, #24]
 800b328:	428a      	cmp	r2, r1
 800b32a:	dd00      	ble.n	800b32e <_strtod_l+0x306>
 800b32c:	9106      	str	r1, [sp, #24]
 800b32e:	2c00      	cmp	r4, #0
 800b330:	d002      	beq.n	800b338 <_strtod_l+0x310>
 800b332:	9a06      	ldr	r2, [sp, #24]
 800b334:	4252      	negs	r2, r2
 800b336:	9206      	str	r2, [sp, #24]
 800b338:	9a05      	ldr	r2, [sp, #20]
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d14d      	bne.n	800b3da <_strtod_l+0x3b2>
 800b33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b340:	4310      	orrs	r0, r2
 800b342:	d000      	beq.n	800b346 <_strtod_l+0x31e>
 800b344:	e6ab      	b.n	800b09e <_strtod_l+0x76>
 800b346:	4662      	mov	r2, ip
 800b348:	2a00      	cmp	r2, #0
 800b34a:	d000      	beq.n	800b34e <_strtod_l+0x326>
 800b34c:	e6c5      	b.n	800b0da <_strtod_l+0xb2>
 800b34e:	2b69      	cmp	r3, #105	; 0x69
 800b350:	d027      	beq.n	800b3a2 <_strtod_l+0x37a>
 800b352:	dc23      	bgt.n	800b39c <_strtod_l+0x374>
 800b354:	2b49      	cmp	r3, #73	; 0x49
 800b356:	d024      	beq.n	800b3a2 <_strtod_l+0x37a>
 800b358:	2b4e      	cmp	r3, #78	; 0x4e
 800b35a:	d000      	beq.n	800b35e <_strtod_l+0x336>
 800b35c:	e6bd      	b.n	800b0da <_strtod_l+0xb2>
 800b35e:	49a3      	ldr	r1, [pc, #652]	; (800b5ec <_strtod_l+0x5c4>)
 800b360:	a81b      	add	r0, sp, #108	; 0x6c
 800b362:	f001 fc31 	bl	800cbc8 <__match>
 800b366:	2800      	cmp	r0, #0
 800b368:	d100      	bne.n	800b36c <_strtod_l+0x344>
 800b36a:	e6b6      	b.n	800b0da <_strtod_l+0xb2>
 800b36c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b28      	cmp	r3, #40	; 0x28
 800b372:	d12c      	bne.n	800b3ce <_strtod_l+0x3a6>
 800b374:	499e      	ldr	r1, [pc, #632]	; (800b5f0 <_strtod_l+0x5c8>)
 800b376:	aa1e      	add	r2, sp, #120	; 0x78
 800b378:	a81b      	add	r0, sp, #108	; 0x6c
 800b37a:	f001 fc39 	bl	800cbf0 <__hexnan>
 800b37e:	2805      	cmp	r0, #5
 800b380:	d125      	bne.n	800b3ce <_strtod_l+0x3a6>
 800b382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b384:	4a9b      	ldr	r2, [pc, #620]	; (800b5f4 <_strtod_l+0x5cc>)
 800b386:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b388:	431a      	orrs	r2, r3
 800b38a:	0017      	movs	r7, r2
 800b38c:	e687      	b.n	800b09e <_strtod_l+0x76>
 800b38e:	220a      	movs	r2, #10
 800b390:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b392:	434a      	muls	r2, r1
 800b394:	18d2      	adds	r2, r2, r3
 800b396:	3a30      	subs	r2, #48	; 0x30
 800b398:	920e      	str	r2, [sp, #56]	; 0x38
 800b39a:	e7b5      	b.n	800b308 <_strtod_l+0x2e0>
 800b39c:	2b6e      	cmp	r3, #110	; 0x6e
 800b39e:	d0de      	beq.n	800b35e <_strtod_l+0x336>
 800b3a0:	e69b      	b.n	800b0da <_strtod_l+0xb2>
 800b3a2:	4995      	ldr	r1, [pc, #596]	; (800b5f8 <_strtod_l+0x5d0>)
 800b3a4:	a81b      	add	r0, sp, #108	; 0x6c
 800b3a6:	f001 fc0f 	bl	800cbc8 <__match>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d100      	bne.n	800b3b0 <_strtod_l+0x388>
 800b3ae:	e694      	b.n	800b0da <_strtod_l+0xb2>
 800b3b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3b2:	4992      	ldr	r1, [pc, #584]	; (800b5fc <_strtod_l+0x5d4>)
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	a81b      	add	r0, sp, #108	; 0x6c
 800b3b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3ba:	f001 fc05 	bl	800cbc8 <__match>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d102      	bne.n	800b3c8 <_strtod_l+0x3a0>
 800b3c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3c8:	2600      	movs	r6, #0
 800b3ca:	4f8a      	ldr	r7, [pc, #552]	; (800b5f4 <_strtod_l+0x5cc>)
 800b3cc:	e667      	b.n	800b09e <_strtod_l+0x76>
 800b3ce:	488c      	ldr	r0, [pc, #560]	; (800b600 <_strtod_l+0x5d8>)
 800b3d0:	f001 f836 	bl	800c440 <nan>
 800b3d4:	0006      	movs	r6, r0
 800b3d6:	000f      	movs	r7, r1
 800b3d8:	e661      	b.n	800b09e <_strtod_l+0x76>
 800b3da:	9b06      	ldr	r3, [sp, #24]
 800b3dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <_strtod_l+0x3c4>
 800b3e8:	9b05      	ldr	r3, [sp, #20]
 800b3ea:	9308      	str	r3, [sp, #32]
 800b3ec:	9c05      	ldr	r4, [sp, #20]
 800b3ee:	2c10      	cmp	r4, #16
 800b3f0:	dd00      	ble.n	800b3f4 <_strtod_l+0x3cc>
 800b3f2:	2410      	movs	r4, #16
 800b3f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3f6:	f7f7 f801 	bl	80023fc <__aeabi_ui2d>
 800b3fa:	9b05      	ldr	r3, [sp, #20]
 800b3fc:	0006      	movs	r6, r0
 800b3fe:	000f      	movs	r7, r1
 800b400:	2b09      	cmp	r3, #9
 800b402:	dd15      	ble.n	800b430 <_strtod_l+0x408>
 800b404:	0022      	movs	r2, r4
 800b406:	4b7f      	ldr	r3, [pc, #508]	; (800b604 <_strtod_l+0x5dc>)
 800b408:	3a09      	subs	r2, #9
 800b40a:	00d2      	lsls	r2, r2, #3
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	f7f6 f92b 	bl	800166c <__aeabi_dmul>
 800b416:	0006      	movs	r6, r0
 800b418:	0028      	movs	r0, r5
 800b41a:	000f      	movs	r7, r1
 800b41c:	f7f6 ffee 	bl	80023fc <__aeabi_ui2d>
 800b420:	0002      	movs	r2, r0
 800b422:	000b      	movs	r3, r1
 800b424:	0030      	movs	r0, r6
 800b426:	0039      	movs	r1, r7
 800b428:	f7f5 f9c6 	bl	80007b8 <__aeabi_dadd>
 800b42c:	0006      	movs	r6, r0
 800b42e:	000f      	movs	r7, r1
 800b430:	9b05      	ldr	r3, [sp, #20]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	dc39      	bgt.n	800b4aa <_strtod_l+0x482>
 800b436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d100      	bne.n	800b43e <_strtod_l+0x416>
 800b43c:	e62f      	b.n	800b09e <_strtod_l+0x76>
 800b43e:	dd24      	ble.n	800b48a <_strtod_l+0x462>
 800b440:	2b16      	cmp	r3, #22
 800b442:	dc09      	bgt.n	800b458 <_strtod_l+0x430>
 800b444:	496f      	ldr	r1, [pc, #444]	; (800b604 <_strtod_l+0x5dc>)
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	18c9      	adds	r1, r1, r3
 800b44a:	0032      	movs	r2, r6
 800b44c:	6808      	ldr	r0, [r1, #0]
 800b44e:	6849      	ldr	r1, [r1, #4]
 800b450:	003b      	movs	r3, r7
 800b452:	f7f6 f90b 	bl	800166c <__aeabi_dmul>
 800b456:	e7bd      	b.n	800b3d4 <_strtod_l+0x3ac>
 800b458:	2325      	movs	r3, #37	; 0x25
 800b45a:	9a05      	ldr	r2, [sp, #20]
 800b45c:	1a9b      	subs	r3, r3, r2
 800b45e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b460:	4293      	cmp	r3, r2
 800b462:	db22      	blt.n	800b4aa <_strtod_l+0x482>
 800b464:	240f      	movs	r4, #15
 800b466:	9b05      	ldr	r3, [sp, #20]
 800b468:	4d66      	ldr	r5, [pc, #408]	; (800b604 <_strtod_l+0x5dc>)
 800b46a:	1ae4      	subs	r4, r4, r3
 800b46c:	00e1      	lsls	r1, r4, #3
 800b46e:	1869      	adds	r1, r5, r1
 800b470:	0032      	movs	r2, r6
 800b472:	6808      	ldr	r0, [r1, #0]
 800b474:	6849      	ldr	r1, [r1, #4]
 800b476:	003b      	movs	r3, r7
 800b478:	f7f6 f8f8 	bl	800166c <__aeabi_dmul>
 800b47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47e:	1b1c      	subs	r4, r3, r4
 800b480:	00e4      	lsls	r4, r4, #3
 800b482:	192d      	adds	r5, r5, r4
 800b484:	682a      	ldr	r2, [r5, #0]
 800b486:	686b      	ldr	r3, [r5, #4]
 800b488:	e7e3      	b.n	800b452 <_strtod_l+0x42a>
 800b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48c:	3316      	adds	r3, #22
 800b48e:	db0c      	blt.n	800b4aa <_strtod_l+0x482>
 800b490:	9906      	ldr	r1, [sp, #24]
 800b492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b494:	4b5b      	ldr	r3, [pc, #364]	; (800b604 <_strtod_l+0x5dc>)
 800b496:	1a52      	subs	r2, r2, r1
 800b498:	00d2      	lsls	r2, r2, #3
 800b49a:	189b      	adds	r3, r3, r2
 800b49c:	0030      	movs	r0, r6
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	0039      	movs	r1, r7
 800b4a4:	f7f5 fce8 	bl	8000e78 <__aeabi_ddiv>
 800b4a8:	e794      	b.n	800b3d4 <_strtod_l+0x3ac>
 800b4aa:	9b05      	ldr	r3, [sp, #20]
 800b4ac:	1b1c      	subs	r4, r3, r4
 800b4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b0:	18e4      	adds	r4, r4, r3
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	dd72      	ble.n	800b59c <_strtod_l+0x574>
 800b4b6:	220f      	movs	r2, #15
 800b4b8:	0023      	movs	r3, r4
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	4214      	tst	r4, r2
 800b4be:	d00a      	beq.n	800b4d6 <_strtod_l+0x4ae>
 800b4c0:	4950      	ldr	r1, [pc, #320]	; (800b604 <_strtod_l+0x5dc>)
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	18c9      	adds	r1, r1, r3
 800b4c6:	0032      	movs	r2, r6
 800b4c8:	6808      	ldr	r0, [r1, #0]
 800b4ca:	6849      	ldr	r1, [r1, #4]
 800b4cc:	003b      	movs	r3, r7
 800b4ce:	f7f6 f8cd 	bl	800166c <__aeabi_dmul>
 800b4d2:	0006      	movs	r6, r0
 800b4d4:	000f      	movs	r7, r1
 800b4d6:	230f      	movs	r3, #15
 800b4d8:	439c      	bics	r4, r3
 800b4da:	d04a      	beq.n	800b572 <_strtod_l+0x54a>
 800b4dc:	3326      	adds	r3, #38	; 0x26
 800b4de:	33ff      	adds	r3, #255	; 0xff
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	dd22      	ble.n	800b52a <_strtod_l+0x502>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9305      	str	r3, [sp, #20]
 800b4e8:	9306      	str	r3, [sp, #24]
 800b4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b4ec:	9308      	str	r3, [sp, #32]
 800b4ee:	2322      	movs	r3, #34	; 0x22
 800b4f0:	2600      	movs	r6, #0
 800b4f2:	9a04      	ldr	r2, [sp, #16]
 800b4f4:	4f3f      	ldr	r7, [pc, #252]	; (800b5f4 <_strtod_l+0x5cc>)
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4fa:	42b3      	cmp	r3, r6
 800b4fc:	d100      	bne.n	800b500 <_strtod_l+0x4d8>
 800b4fe:	e5ce      	b.n	800b09e <_strtod_l+0x76>
 800b500:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b502:	9804      	ldr	r0, [sp, #16]
 800b504:	f001 fc56 	bl	800cdb4 <_Bfree>
 800b508:	9908      	ldr	r1, [sp, #32]
 800b50a:	9804      	ldr	r0, [sp, #16]
 800b50c:	f001 fc52 	bl	800cdb4 <_Bfree>
 800b510:	9906      	ldr	r1, [sp, #24]
 800b512:	9804      	ldr	r0, [sp, #16]
 800b514:	f001 fc4e 	bl	800cdb4 <_Bfree>
 800b518:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b51a:	9804      	ldr	r0, [sp, #16]
 800b51c:	f001 fc4a 	bl	800cdb4 <_Bfree>
 800b520:	9905      	ldr	r1, [sp, #20]
 800b522:	9804      	ldr	r0, [sp, #16]
 800b524:	f001 fc46 	bl	800cdb4 <_Bfree>
 800b528:	e5b9      	b.n	800b09e <_strtod_l+0x76>
 800b52a:	2300      	movs	r3, #0
 800b52c:	0030      	movs	r0, r6
 800b52e:	0039      	movs	r1, r7
 800b530:	4d35      	ldr	r5, [pc, #212]	; (800b608 <_strtod_l+0x5e0>)
 800b532:	1124      	asrs	r4, r4, #4
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	2c01      	cmp	r4, #1
 800b538:	dc1e      	bgt.n	800b578 <_strtod_l+0x550>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <_strtod_l+0x51a>
 800b53e:	0006      	movs	r6, r0
 800b540:	000f      	movs	r7, r1
 800b542:	4b32      	ldr	r3, [pc, #200]	; (800b60c <_strtod_l+0x5e4>)
 800b544:	9a07      	ldr	r2, [sp, #28]
 800b546:	18ff      	adds	r7, r7, r3
 800b548:	4b2f      	ldr	r3, [pc, #188]	; (800b608 <_strtod_l+0x5e0>)
 800b54a:	00d2      	lsls	r2, r2, #3
 800b54c:	189d      	adds	r5, r3, r2
 800b54e:	6828      	ldr	r0, [r5, #0]
 800b550:	6869      	ldr	r1, [r5, #4]
 800b552:	0032      	movs	r2, r6
 800b554:	003b      	movs	r3, r7
 800b556:	f7f6 f889 	bl	800166c <__aeabi_dmul>
 800b55a:	4b26      	ldr	r3, [pc, #152]	; (800b5f4 <_strtod_l+0x5cc>)
 800b55c:	4a2c      	ldr	r2, [pc, #176]	; (800b610 <_strtod_l+0x5e8>)
 800b55e:	0006      	movs	r6, r0
 800b560:	400b      	ands	r3, r1
 800b562:	4293      	cmp	r3, r2
 800b564:	d8be      	bhi.n	800b4e4 <_strtod_l+0x4bc>
 800b566:	4a2b      	ldr	r2, [pc, #172]	; (800b614 <_strtod_l+0x5ec>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d913      	bls.n	800b594 <_strtod_l+0x56c>
 800b56c:	2601      	movs	r6, #1
 800b56e:	4f2a      	ldr	r7, [pc, #168]	; (800b618 <_strtod_l+0x5f0>)
 800b570:	4276      	negs	r6, r6
 800b572:	2300      	movs	r3, #0
 800b574:	9307      	str	r3, [sp, #28]
 800b576:	e088      	b.n	800b68a <_strtod_l+0x662>
 800b578:	2201      	movs	r2, #1
 800b57a:	4214      	tst	r4, r2
 800b57c:	d004      	beq.n	800b588 <_strtod_l+0x560>
 800b57e:	682a      	ldr	r2, [r5, #0]
 800b580:	686b      	ldr	r3, [r5, #4]
 800b582:	f7f6 f873 	bl	800166c <__aeabi_dmul>
 800b586:	2301      	movs	r3, #1
 800b588:	9a07      	ldr	r2, [sp, #28]
 800b58a:	1064      	asrs	r4, r4, #1
 800b58c:	3201      	adds	r2, #1
 800b58e:	9207      	str	r2, [sp, #28]
 800b590:	3508      	adds	r5, #8
 800b592:	e7d0      	b.n	800b536 <_strtod_l+0x50e>
 800b594:	23d4      	movs	r3, #212	; 0xd4
 800b596:	049b      	lsls	r3, r3, #18
 800b598:	18cf      	adds	r7, r1, r3
 800b59a:	e7ea      	b.n	800b572 <_strtod_l+0x54a>
 800b59c:	2c00      	cmp	r4, #0
 800b59e:	d0e8      	beq.n	800b572 <_strtod_l+0x54a>
 800b5a0:	4264      	negs	r4, r4
 800b5a2:	230f      	movs	r3, #15
 800b5a4:	0022      	movs	r2, r4
 800b5a6:	401a      	ands	r2, r3
 800b5a8:	421c      	tst	r4, r3
 800b5aa:	d00a      	beq.n	800b5c2 <_strtod_l+0x59a>
 800b5ac:	4b15      	ldr	r3, [pc, #84]	; (800b604 <_strtod_l+0x5dc>)
 800b5ae:	00d2      	lsls	r2, r2, #3
 800b5b0:	189b      	adds	r3, r3, r2
 800b5b2:	0030      	movs	r0, r6
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	0039      	movs	r1, r7
 800b5ba:	f7f5 fc5d 	bl	8000e78 <__aeabi_ddiv>
 800b5be:	0006      	movs	r6, r0
 800b5c0:	000f      	movs	r7, r1
 800b5c2:	1124      	asrs	r4, r4, #4
 800b5c4:	d0d5      	beq.n	800b572 <_strtod_l+0x54a>
 800b5c6:	2c1f      	cmp	r4, #31
 800b5c8:	dd28      	ble.n	800b61c <_strtod_l+0x5f4>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	9306      	str	r3, [sp, #24]
 800b5d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b5d2:	9308      	str	r3, [sp, #32]
 800b5d4:	2322      	movs	r3, #34	; 0x22
 800b5d6:	9a04      	ldr	r2, [sp, #16]
 800b5d8:	2600      	movs	r6, #0
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5de:	2700      	movs	r7, #0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d18d      	bne.n	800b500 <_strtod_l+0x4d8>
 800b5e4:	e55b      	b.n	800b09e <_strtod_l+0x76>
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	00004e1f 	.word	0x00004e1f
 800b5ec:	08014bf1 	.word	0x08014bf1
 800b5f0:	080148d4 	.word	0x080148d4
 800b5f4:	7ff00000 	.word	0x7ff00000
 800b5f8:	08014be9 	.word	0x08014be9
 800b5fc:	08014c9f 	.word	0x08014c9f
 800b600:	08014c9b 	.word	0x08014c9b
 800b604:	08014b10 	.word	0x08014b10
 800b608:	08014ae8 	.word	0x08014ae8
 800b60c:	fcb00000 	.word	0xfcb00000
 800b610:	7ca00000 	.word	0x7ca00000
 800b614:	7c900000 	.word	0x7c900000
 800b618:	7fefffff 	.word	0x7fefffff
 800b61c:	2310      	movs	r3, #16
 800b61e:	0022      	movs	r2, r4
 800b620:	401a      	ands	r2, r3
 800b622:	9207      	str	r2, [sp, #28]
 800b624:	421c      	tst	r4, r3
 800b626:	d001      	beq.n	800b62c <_strtod_l+0x604>
 800b628:	335a      	adds	r3, #90	; 0x5a
 800b62a:	9307      	str	r3, [sp, #28]
 800b62c:	0030      	movs	r0, r6
 800b62e:	0039      	movs	r1, r7
 800b630:	2300      	movs	r3, #0
 800b632:	4dc4      	ldr	r5, [pc, #784]	; (800b944 <_strtod_l+0x91c>)
 800b634:	2201      	movs	r2, #1
 800b636:	4214      	tst	r4, r2
 800b638:	d004      	beq.n	800b644 <_strtod_l+0x61c>
 800b63a:	682a      	ldr	r2, [r5, #0]
 800b63c:	686b      	ldr	r3, [r5, #4]
 800b63e:	f7f6 f815 	bl	800166c <__aeabi_dmul>
 800b642:	2301      	movs	r3, #1
 800b644:	1064      	asrs	r4, r4, #1
 800b646:	3508      	adds	r5, #8
 800b648:	2c00      	cmp	r4, #0
 800b64a:	d1f3      	bne.n	800b634 <_strtod_l+0x60c>
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <_strtod_l+0x62c>
 800b650:	0006      	movs	r6, r0
 800b652:	000f      	movs	r7, r1
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00f      	beq.n	800b67a <_strtod_l+0x652>
 800b65a:	236b      	movs	r3, #107	; 0x6b
 800b65c:	007a      	lsls	r2, r7, #1
 800b65e:	0d52      	lsrs	r2, r2, #21
 800b660:	0039      	movs	r1, r7
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd08      	ble.n	800b67a <_strtod_l+0x652>
 800b668:	2b1f      	cmp	r3, #31
 800b66a:	dc00      	bgt.n	800b66e <_strtod_l+0x646>
 800b66c:	e121      	b.n	800b8b2 <_strtod_l+0x88a>
 800b66e:	2600      	movs	r6, #0
 800b670:	2b34      	cmp	r3, #52	; 0x34
 800b672:	dc00      	bgt.n	800b676 <_strtod_l+0x64e>
 800b674:	e116      	b.n	800b8a4 <_strtod_l+0x87c>
 800b676:	27dc      	movs	r7, #220	; 0xdc
 800b678:	04bf      	lsls	r7, r7, #18
 800b67a:	2200      	movs	r2, #0
 800b67c:	2300      	movs	r3, #0
 800b67e:	0030      	movs	r0, r6
 800b680:	0039      	movs	r1, r7
 800b682:	f7f4 fee1 	bl	8000448 <__aeabi_dcmpeq>
 800b686:	2800      	cmp	r0, #0
 800b688:	d19f      	bne.n	800b5ca <_strtod_l+0x5a2>
 800b68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68c:	9a08      	ldr	r2, [sp, #32]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b692:	9b05      	ldr	r3, [sp, #20]
 800b694:	9804      	ldr	r0, [sp, #16]
 800b696:	f001 fbdb 	bl	800ce50 <__s2b>
 800b69a:	900d      	str	r0, [sp, #52]	; 0x34
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d100      	bne.n	800b6a2 <_strtod_l+0x67a>
 800b6a0:	e720      	b.n	800b4e4 <_strtod_l+0x4bc>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a4:	9906      	ldr	r1, [sp, #24]
 800b6a6:	17da      	asrs	r2, r3, #31
 800b6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6aa:	1a5b      	subs	r3, r3, r1
 800b6ac:	401a      	ands	r2, r3
 800b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b0:	9215      	str	r2, [sp, #84]	; 0x54
 800b6b2:	43db      	mvns	r3, r3
 800b6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b6:	17db      	asrs	r3, r3, #31
 800b6b8:	401a      	ands	r2, r3
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9218      	str	r2, [sp, #96]	; 0x60
 800b6be:	9305      	str	r3, [sp, #20]
 800b6c0:	9306      	str	r3, [sp, #24]
 800b6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c4:	9804      	ldr	r0, [sp, #16]
 800b6c6:	6859      	ldr	r1, [r3, #4]
 800b6c8:	f001 fb4c 	bl	800cd64 <_Balloc>
 800b6cc:	9008      	str	r0, [sp, #32]
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d100      	bne.n	800b6d4 <_strtod_l+0x6ac>
 800b6d2:	e70c      	b.n	800b4ee <_strtod_l+0x4c6>
 800b6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d6:	300c      	adds	r0, #12
 800b6d8:	0019      	movs	r1, r3
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	310c      	adds	r1, #12
 800b6de:	3202      	adds	r2, #2
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	f000 fea4 	bl	800c42e <memcpy>
 800b6e6:	ab1e      	add	r3, sp, #120	; 0x78
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	0032      	movs	r2, r6
 800b6f0:	003b      	movs	r3, r7
 800b6f2:	9804      	ldr	r0, [sp, #16]
 800b6f4:	9610      	str	r6, [sp, #64]	; 0x40
 800b6f6:	9711      	str	r7, [sp, #68]	; 0x44
 800b6f8:	f001 fed2 	bl	800d4a0 <__d2b>
 800b6fc:	901c      	str	r0, [sp, #112]	; 0x70
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d100      	bne.n	800b704 <_strtod_l+0x6dc>
 800b702:	e6f4      	b.n	800b4ee <_strtod_l+0x4c6>
 800b704:	2101      	movs	r1, #1
 800b706:	9804      	ldr	r0, [sp, #16]
 800b708:	f001 fc36 	bl	800cf78 <__i2b>
 800b70c:	9006      	str	r0, [sp, #24]
 800b70e:	2800      	cmp	r0, #0
 800b710:	d100      	bne.n	800b714 <_strtod_l+0x6ec>
 800b712:	e6ec      	b.n	800b4ee <_strtod_l+0x4c6>
 800b714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b716:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b718:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b71a:	1ad4      	subs	r4, r2, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	db01      	blt.n	800b724 <_strtod_l+0x6fc>
 800b720:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b722:	195d      	adds	r5, r3, r5
 800b724:	9907      	ldr	r1, [sp, #28]
 800b726:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b728:	1a5b      	subs	r3, r3, r1
 800b72a:	2136      	movs	r1, #54	; 0x36
 800b72c:	189b      	adds	r3, r3, r2
 800b72e:	1a8a      	subs	r2, r1, r2
 800b730:	4985      	ldr	r1, [pc, #532]	; (800b948 <_strtod_l+0x920>)
 800b732:	2001      	movs	r0, #1
 800b734:	468c      	mov	ip, r1
 800b736:	2100      	movs	r1, #0
 800b738:	3b01      	subs	r3, #1
 800b73a:	9114      	str	r1, [sp, #80]	; 0x50
 800b73c:	9012      	str	r0, [sp, #72]	; 0x48
 800b73e:	4563      	cmp	r3, ip
 800b740:	da07      	bge.n	800b752 <_strtod_l+0x72a>
 800b742:	4661      	mov	r1, ip
 800b744:	1ac9      	subs	r1, r1, r3
 800b746:	1a52      	subs	r2, r2, r1
 800b748:	291f      	cmp	r1, #31
 800b74a:	dd00      	ble.n	800b74e <_strtod_l+0x726>
 800b74c:	e0b6      	b.n	800b8bc <_strtod_l+0x894>
 800b74e:	4088      	lsls	r0, r1
 800b750:	9012      	str	r0, [sp, #72]	; 0x48
 800b752:	18ab      	adds	r3, r5, r2
 800b754:	930c      	str	r3, [sp, #48]	; 0x30
 800b756:	18a4      	adds	r4, r4, r2
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b75c:	191c      	adds	r4, r3, r4
 800b75e:	002b      	movs	r3, r5
 800b760:	4295      	cmp	r5, r2
 800b762:	dd00      	ble.n	800b766 <_strtod_l+0x73e>
 800b764:	0013      	movs	r3, r2
 800b766:	42a3      	cmp	r3, r4
 800b768:	dd00      	ble.n	800b76c <_strtod_l+0x744>
 800b76a:	0023      	movs	r3, r4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd04      	ble.n	800b77a <_strtod_l+0x752>
 800b770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b772:	1ae4      	subs	r4, r4, r3
 800b774:	1ad2      	subs	r2, r2, r3
 800b776:	920c      	str	r2, [sp, #48]	; 0x30
 800b778:	1aed      	subs	r5, r5, r3
 800b77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	dd17      	ble.n	800b7b0 <_strtod_l+0x788>
 800b780:	001a      	movs	r2, r3
 800b782:	9906      	ldr	r1, [sp, #24]
 800b784:	9804      	ldr	r0, [sp, #16]
 800b786:	f001 fcbf 	bl	800d108 <__pow5mult>
 800b78a:	9006      	str	r0, [sp, #24]
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d100      	bne.n	800b792 <_strtod_l+0x76a>
 800b790:	e6ad      	b.n	800b4ee <_strtod_l+0x4c6>
 800b792:	0001      	movs	r1, r0
 800b794:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b796:	9804      	ldr	r0, [sp, #16]
 800b798:	f001 fc06 	bl	800cfa8 <__multiply>
 800b79c:	900e      	str	r0, [sp, #56]	; 0x38
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d100      	bne.n	800b7a4 <_strtod_l+0x77c>
 800b7a2:	e6a4      	b.n	800b4ee <_strtod_l+0x4c6>
 800b7a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7a6:	9804      	ldr	r0, [sp, #16]
 800b7a8:	f001 fb04 	bl	800cdb4 <_Bfree>
 800b7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7ae:	931c      	str	r3, [sp, #112]	; 0x70
 800b7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	dd00      	ble.n	800b7b8 <_strtod_l+0x790>
 800b7b6:	e087      	b.n	800b8c8 <_strtod_l+0x8a0>
 800b7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dd08      	ble.n	800b7d0 <_strtod_l+0x7a8>
 800b7be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b7c0:	9908      	ldr	r1, [sp, #32]
 800b7c2:	9804      	ldr	r0, [sp, #16]
 800b7c4:	f001 fca0 	bl	800d108 <__pow5mult>
 800b7c8:	9008      	str	r0, [sp, #32]
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d100      	bne.n	800b7d0 <_strtod_l+0x7a8>
 800b7ce:	e68e      	b.n	800b4ee <_strtod_l+0x4c6>
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	dd08      	ble.n	800b7e6 <_strtod_l+0x7be>
 800b7d4:	0022      	movs	r2, r4
 800b7d6:	9908      	ldr	r1, [sp, #32]
 800b7d8:	9804      	ldr	r0, [sp, #16]
 800b7da:	f001 fcd7 	bl	800d18c <__lshift>
 800b7de:	9008      	str	r0, [sp, #32]
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d100      	bne.n	800b7e6 <_strtod_l+0x7be>
 800b7e4:	e683      	b.n	800b4ee <_strtod_l+0x4c6>
 800b7e6:	2d00      	cmp	r5, #0
 800b7e8:	dd08      	ble.n	800b7fc <_strtod_l+0x7d4>
 800b7ea:	002a      	movs	r2, r5
 800b7ec:	9906      	ldr	r1, [sp, #24]
 800b7ee:	9804      	ldr	r0, [sp, #16]
 800b7f0:	f001 fccc 	bl	800d18c <__lshift>
 800b7f4:	9006      	str	r0, [sp, #24]
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d100      	bne.n	800b7fc <_strtod_l+0x7d4>
 800b7fa:	e678      	b.n	800b4ee <_strtod_l+0x4c6>
 800b7fc:	9a08      	ldr	r2, [sp, #32]
 800b7fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b800:	9804      	ldr	r0, [sp, #16]
 800b802:	f001 fd4d 	bl	800d2a0 <__mdiff>
 800b806:	9005      	str	r0, [sp, #20]
 800b808:	2800      	cmp	r0, #0
 800b80a:	d100      	bne.n	800b80e <_strtod_l+0x7e6>
 800b80c:	e66f      	b.n	800b4ee <_strtod_l+0x4c6>
 800b80e:	2200      	movs	r2, #0
 800b810:	68c3      	ldr	r3, [r0, #12]
 800b812:	9906      	ldr	r1, [sp, #24]
 800b814:	60c2      	str	r2, [r0, #12]
 800b816:	930c      	str	r3, [sp, #48]	; 0x30
 800b818:	f001 fd26 	bl	800d268 <__mcmp>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	da5d      	bge.n	800b8dc <_strtod_l+0x8b4>
 800b820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b822:	4333      	orrs	r3, r6
 800b824:	d000      	beq.n	800b828 <_strtod_l+0x800>
 800b826:	e088      	b.n	800b93a <_strtod_l+0x912>
 800b828:	033b      	lsls	r3, r7, #12
 800b82a:	d000      	beq.n	800b82e <_strtod_l+0x806>
 800b82c:	e085      	b.n	800b93a <_strtod_l+0x912>
 800b82e:	22d6      	movs	r2, #214	; 0xd6
 800b830:	4b46      	ldr	r3, [pc, #280]	; (800b94c <_strtod_l+0x924>)
 800b832:	04d2      	lsls	r2, r2, #19
 800b834:	403b      	ands	r3, r7
 800b836:	4293      	cmp	r3, r2
 800b838:	d97f      	bls.n	800b93a <_strtod_l+0x912>
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d103      	bne.n	800b84a <_strtod_l+0x822>
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b01      	cmp	r3, #1
 800b848:	dd77      	ble.n	800b93a <_strtod_l+0x912>
 800b84a:	9905      	ldr	r1, [sp, #20]
 800b84c:	2201      	movs	r2, #1
 800b84e:	9804      	ldr	r0, [sp, #16]
 800b850:	f001 fc9c 	bl	800d18c <__lshift>
 800b854:	9906      	ldr	r1, [sp, #24]
 800b856:	9005      	str	r0, [sp, #20]
 800b858:	f001 fd06 	bl	800d268 <__mcmp>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	dd6c      	ble.n	800b93a <_strtod_l+0x912>
 800b860:	9907      	ldr	r1, [sp, #28]
 800b862:	003b      	movs	r3, r7
 800b864:	4a39      	ldr	r2, [pc, #228]	; (800b94c <_strtod_l+0x924>)
 800b866:	2900      	cmp	r1, #0
 800b868:	d100      	bne.n	800b86c <_strtod_l+0x844>
 800b86a:	e094      	b.n	800b996 <_strtod_l+0x96e>
 800b86c:	0011      	movs	r1, r2
 800b86e:	20d6      	movs	r0, #214	; 0xd6
 800b870:	4039      	ands	r1, r7
 800b872:	04c0      	lsls	r0, r0, #19
 800b874:	4281      	cmp	r1, r0
 800b876:	dd00      	ble.n	800b87a <_strtod_l+0x852>
 800b878:	e08d      	b.n	800b996 <_strtod_l+0x96e>
 800b87a:	23dc      	movs	r3, #220	; 0xdc
 800b87c:	049b      	lsls	r3, r3, #18
 800b87e:	4299      	cmp	r1, r3
 800b880:	dc00      	bgt.n	800b884 <_strtod_l+0x85c>
 800b882:	e6a7      	b.n	800b5d4 <_strtod_l+0x5ac>
 800b884:	0030      	movs	r0, r6
 800b886:	0039      	movs	r1, r7
 800b888:	4b31      	ldr	r3, [pc, #196]	; (800b950 <_strtod_l+0x928>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	f7f5 feee 	bl	800166c <__aeabi_dmul>
 800b890:	4b2e      	ldr	r3, [pc, #184]	; (800b94c <_strtod_l+0x924>)
 800b892:	0006      	movs	r6, r0
 800b894:	000f      	movs	r7, r1
 800b896:	420b      	tst	r3, r1
 800b898:	d000      	beq.n	800b89c <_strtod_l+0x874>
 800b89a:	e631      	b.n	800b500 <_strtod_l+0x4d8>
 800b89c:	2322      	movs	r3, #34	; 0x22
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	e62d      	b.n	800b500 <_strtod_l+0x4d8>
 800b8a4:	234b      	movs	r3, #75	; 0x4b
 800b8a6:	1a9a      	subs	r2, r3, r2
 800b8a8:	3b4c      	subs	r3, #76	; 0x4c
 800b8aa:	4093      	lsls	r3, r2
 800b8ac:	4019      	ands	r1, r3
 800b8ae:	000f      	movs	r7, r1
 800b8b0:	e6e3      	b.n	800b67a <_strtod_l+0x652>
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	4252      	negs	r2, r2
 800b8b6:	409a      	lsls	r2, r3
 800b8b8:	4016      	ands	r6, r2
 800b8ba:	e6de      	b.n	800b67a <_strtod_l+0x652>
 800b8bc:	4925      	ldr	r1, [pc, #148]	; (800b954 <_strtod_l+0x92c>)
 800b8be:	1acb      	subs	r3, r1, r3
 800b8c0:	0001      	movs	r1, r0
 800b8c2:	4099      	lsls	r1, r3
 800b8c4:	9114      	str	r1, [sp, #80]	; 0x50
 800b8c6:	e743      	b.n	800b750 <_strtod_l+0x728>
 800b8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8cc:	9804      	ldr	r0, [sp, #16]
 800b8ce:	f001 fc5d 	bl	800d18c <__lshift>
 800b8d2:	901c      	str	r0, [sp, #112]	; 0x70
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d000      	beq.n	800b8da <_strtod_l+0x8b2>
 800b8d8:	e76e      	b.n	800b7b8 <_strtod_l+0x790>
 800b8da:	e608      	b.n	800b4ee <_strtod_l+0x4c6>
 800b8dc:	970e      	str	r7, [sp, #56]	; 0x38
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d177      	bne.n	800b9d2 <_strtod_l+0x9aa>
 800b8e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8e4:	033b      	lsls	r3, r7, #12
 800b8e6:	0b1b      	lsrs	r3, r3, #12
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	d039      	beq.n	800b960 <_strtod_l+0x938>
 800b8ec:	4a1a      	ldr	r2, [pc, #104]	; (800b958 <_strtod_l+0x930>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d139      	bne.n	800b966 <_strtod_l+0x93e>
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	4249      	negs	r1, r1
 800b8f8:	0032      	movs	r2, r6
 800b8fa:	0008      	movs	r0, r1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <_strtod_l+0x8f0>
 800b900:	24d4      	movs	r4, #212	; 0xd4
 800b902:	4b12      	ldr	r3, [pc, #72]	; (800b94c <_strtod_l+0x924>)
 800b904:	0008      	movs	r0, r1
 800b906:	403b      	ands	r3, r7
 800b908:	04e4      	lsls	r4, r4, #19
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	d804      	bhi.n	800b918 <_strtod_l+0x8f0>
 800b90e:	306c      	adds	r0, #108	; 0x6c
 800b910:	0d1b      	lsrs	r3, r3, #20
 800b912:	1ac3      	subs	r3, r0, r3
 800b914:	4099      	lsls	r1, r3
 800b916:	0008      	movs	r0, r1
 800b918:	4282      	cmp	r2, r0
 800b91a:	d124      	bne.n	800b966 <_strtod_l+0x93e>
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <_strtod_l+0x934>)
 800b91e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b920:	4299      	cmp	r1, r3
 800b922:	d102      	bne.n	800b92a <_strtod_l+0x902>
 800b924:	3201      	adds	r2, #1
 800b926:	d100      	bne.n	800b92a <_strtod_l+0x902>
 800b928:	e5e1      	b.n	800b4ee <_strtod_l+0x4c6>
 800b92a:	4b08      	ldr	r3, [pc, #32]	; (800b94c <_strtod_l+0x924>)
 800b92c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92e:	2600      	movs	r6, #0
 800b930:	401a      	ands	r2, r3
 800b932:	0013      	movs	r3, r2
 800b934:	2280      	movs	r2, #128	; 0x80
 800b936:	0352      	lsls	r2, r2, #13
 800b938:	189f      	adds	r7, r3, r2
 800b93a:	9b07      	ldr	r3, [sp, #28]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1a1      	bne.n	800b884 <_strtod_l+0x85c>
 800b940:	e5de      	b.n	800b500 <_strtod_l+0x4d8>
 800b942:	46c0      	nop			; (mov r8, r8)
 800b944:	080148e8 	.word	0x080148e8
 800b948:	fffffc02 	.word	0xfffffc02
 800b94c:	7ff00000 	.word	0x7ff00000
 800b950:	39500000 	.word	0x39500000
 800b954:	fffffbe2 	.word	0xfffffbe2
 800b958:	000fffff 	.word	0x000fffff
 800b95c:	7fefffff 	.word	0x7fefffff
 800b960:	4333      	orrs	r3, r6
 800b962:	d100      	bne.n	800b966 <_strtod_l+0x93e>
 800b964:	e77c      	b.n	800b860 <_strtod_l+0x838>
 800b966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d01d      	beq.n	800b9a8 <_strtod_l+0x980>
 800b96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b96e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b970:	4213      	tst	r3, r2
 800b972:	d0e2      	beq.n	800b93a <_strtod_l+0x912>
 800b974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b976:	0030      	movs	r0, r6
 800b978:	0039      	movs	r1, r7
 800b97a:	9a07      	ldr	r2, [sp, #28]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d017      	beq.n	800b9b0 <_strtod_l+0x988>
 800b980:	f7ff fb3a 	bl	800aff8 <sulp>
 800b984:	0002      	movs	r2, r0
 800b986:	000b      	movs	r3, r1
 800b988:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b98a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b98c:	f7f4 ff14 	bl	80007b8 <__aeabi_dadd>
 800b990:	0006      	movs	r6, r0
 800b992:	000f      	movs	r7, r1
 800b994:	e7d1      	b.n	800b93a <_strtod_l+0x912>
 800b996:	2601      	movs	r6, #1
 800b998:	4013      	ands	r3, r2
 800b99a:	4a98      	ldr	r2, [pc, #608]	; (800bbfc <_strtod_l+0xbd4>)
 800b99c:	4276      	negs	r6, r6
 800b99e:	189b      	adds	r3, r3, r2
 800b9a0:	4a97      	ldr	r2, [pc, #604]	; (800bc00 <_strtod_l+0xbd8>)
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	0017      	movs	r7, r2
 800b9a6:	e7c8      	b.n	800b93a <_strtod_l+0x912>
 800b9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9aa:	4233      	tst	r3, r6
 800b9ac:	d0c5      	beq.n	800b93a <_strtod_l+0x912>
 800b9ae:	e7e1      	b.n	800b974 <_strtod_l+0x94c>
 800b9b0:	f7ff fb22 	bl	800aff8 <sulp>
 800b9b4:	0002      	movs	r2, r0
 800b9b6:	000b      	movs	r3, r1
 800b9b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b9ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b9bc:	f7f6 f918 	bl	8001bf0 <__aeabi_dsub>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	0006      	movs	r6, r0
 800b9c6:	000f      	movs	r7, r1
 800b9c8:	f7f4 fd3e 	bl	8000448 <__aeabi_dcmpeq>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0b4      	beq.n	800b93a <_strtod_l+0x912>
 800b9d0:	e600      	b.n	800b5d4 <_strtod_l+0x5ac>
 800b9d2:	9906      	ldr	r1, [sp, #24]
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	f001 fdc3 	bl	800d560 <__ratio>
 800b9da:	2380      	movs	r3, #128	; 0x80
 800b9dc:	2200      	movs	r2, #0
 800b9de:	05db      	lsls	r3, r3, #23
 800b9e0:	0004      	movs	r4, r0
 800b9e2:	000d      	movs	r5, r1
 800b9e4:	f7f4 fd40 	bl	8000468 <__aeabi_dcmple>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d06d      	beq.n	800bac8 <_strtod_l+0xaa0>
 800b9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d000      	beq.n	800b9f4 <_strtod_l+0x9cc>
 800b9f2:	e07e      	b.n	800baf2 <_strtod_l+0xaca>
 800b9f4:	2e00      	cmp	r6, #0
 800b9f6:	d158      	bne.n	800baaa <_strtod_l+0xa82>
 800b9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9fa:	031b      	lsls	r3, r3, #12
 800b9fc:	d000      	beq.n	800ba00 <_strtod_l+0x9d8>
 800b9fe:	e07f      	b.n	800bb00 <_strtod_l+0xad8>
 800ba00:	2200      	movs	r2, #0
 800ba02:	0020      	movs	r0, r4
 800ba04:	0029      	movs	r1, r5
 800ba06:	4b7f      	ldr	r3, [pc, #508]	; (800bc04 <_strtod_l+0xbdc>)
 800ba08:	f7f4 fd24 	bl	8000454 <__aeabi_dcmplt>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d158      	bne.n	800bac2 <_strtod_l+0xa9a>
 800ba10:	0020      	movs	r0, r4
 800ba12:	0029      	movs	r1, r5
 800ba14:	2200      	movs	r2, #0
 800ba16:	4b7c      	ldr	r3, [pc, #496]	; (800bc08 <_strtod_l+0xbe0>)
 800ba18:	f7f5 fe28 	bl	800166c <__aeabi_dmul>
 800ba1c:	0004      	movs	r4, r0
 800ba1e:	000d      	movs	r5, r1
 800ba20:	2380      	movs	r3, #128	; 0x80
 800ba22:	061b      	lsls	r3, r3, #24
 800ba24:	940a      	str	r4, [sp, #40]	; 0x28
 800ba26:	18eb      	adds	r3, r5, r3
 800ba28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba2e:	9212      	str	r2, [sp, #72]	; 0x48
 800ba30:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba32:	4a76      	ldr	r2, [pc, #472]	; (800bc0c <_strtod_l+0xbe4>)
 800ba34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba36:	4013      	ands	r3, r2
 800ba38:	9314      	str	r3, [sp, #80]	; 0x50
 800ba3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba3c:	4b74      	ldr	r3, [pc, #464]	; (800bc10 <_strtod_l+0xbe8>)
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d000      	beq.n	800ba44 <_strtod_l+0xa1c>
 800ba42:	e091      	b.n	800bb68 <_strtod_l+0xb40>
 800ba44:	4a73      	ldr	r2, [pc, #460]	; (800bc14 <_strtod_l+0xbec>)
 800ba46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba48:	4694      	mov	ip, r2
 800ba4a:	4463      	add	r3, ip
 800ba4c:	001f      	movs	r7, r3
 800ba4e:	0030      	movs	r0, r6
 800ba50:	0019      	movs	r1, r3
 800ba52:	f001 fcbd 	bl	800d3d0 <__ulp>
 800ba56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba5a:	f7f5 fe07 	bl	800166c <__aeabi_dmul>
 800ba5e:	0032      	movs	r2, r6
 800ba60:	003b      	movs	r3, r7
 800ba62:	f7f4 fea9 	bl	80007b8 <__aeabi_dadd>
 800ba66:	4a69      	ldr	r2, [pc, #420]	; (800bc0c <_strtod_l+0xbe4>)
 800ba68:	4b6b      	ldr	r3, [pc, #428]	; (800bc18 <_strtod_l+0xbf0>)
 800ba6a:	0006      	movs	r6, r0
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d949      	bls.n	800bb06 <_strtod_l+0xade>
 800ba72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba74:	4b69      	ldr	r3, [pc, #420]	; (800bc1c <_strtod_l+0xbf4>)
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d103      	bne.n	800ba82 <_strtod_l+0xa5a>
 800ba7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	d100      	bne.n	800ba82 <_strtod_l+0xa5a>
 800ba80:	e535      	b.n	800b4ee <_strtod_l+0x4c6>
 800ba82:	2601      	movs	r6, #1
 800ba84:	4f65      	ldr	r7, [pc, #404]	; (800bc1c <_strtod_l+0xbf4>)
 800ba86:	4276      	negs	r6, r6
 800ba88:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba8a:	9804      	ldr	r0, [sp, #16]
 800ba8c:	f001 f992 	bl	800cdb4 <_Bfree>
 800ba90:	9908      	ldr	r1, [sp, #32]
 800ba92:	9804      	ldr	r0, [sp, #16]
 800ba94:	f001 f98e 	bl	800cdb4 <_Bfree>
 800ba98:	9906      	ldr	r1, [sp, #24]
 800ba9a:	9804      	ldr	r0, [sp, #16]
 800ba9c:	f001 f98a 	bl	800cdb4 <_Bfree>
 800baa0:	9905      	ldr	r1, [sp, #20]
 800baa2:	9804      	ldr	r0, [sp, #16]
 800baa4:	f001 f986 	bl	800cdb4 <_Bfree>
 800baa8:	e60b      	b.n	800b6c2 <_strtod_l+0x69a>
 800baaa:	2e01      	cmp	r6, #1
 800baac:	d103      	bne.n	800bab6 <_strtod_l+0xa8e>
 800baae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d100      	bne.n	800bab6 <_strtod_l+0xa8e>
 800bab4:	e58e      	b.n	800b5d4 <_strtod_l+0x5ac>
 800bab6:	2300      	movs	r3, #0
 800bab8:	4c59      	ldr	r4, [pc, #356]	; (800bc20 <_strtod_l+0xbf8>)
 800baba:	930a      	str	r3, [sp, #40]	; 0x28
 800babc:	940b      	str	r4, [sp, #44]	; 0x2c
 800babe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bac0:	e01c      	b.n	800bafc <_strtod_l+0xad4>
 800bac2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bac4:	4d50      	ldr	r5, [pc, #320]	; (800bc08 <_strtod_l+0xbe0>)
 800bac6:	e7ab      	b.n	800ba20 <_strtod_l+0x9f8>
 800bac8:	2200      	movs	r2, #0
 800baca:	0020      	movs	r0, r4
 800bacc:	0029      	movs	r1, r5
 800bace:	4b4e      	ldr	r3, [pc, #312]	; (800bc08 <_strtod_l+0xbe0>)
 800bad0:	f7f5 fdcc 	bl	800166c <__aeabi_dmul>
 800bad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bad6:	0004      	movs	r4, r0
 800bad8:	000b      	movs	r3, r1
 800bada:	000d      	movs	r5, r1
 800badc:	2a00      	cmp	r2, #0
 800bade:	d104      	bne.n	800baea <_strtod_l+0xac2>
 800bae0:	2280      	movs	r2, #128	; 0x80
 800bae2:	0612      	lsls	r2, r2, #24
 800bae4:	900a      	str	r0, [sp, #40]	; 0x28
 800bae6:	188b      	adds	r3, r1, r2
 800bae8:	e79e      	b.n	800ba28 <_strtod_l+0xa00>
 800baea:	0002      	movs	r2, r0
 800baec:	920a      	str	r2, [sp, #40]	; 0x28
 800baee:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf0:	e79b      	b.n	800ba2a <_strtod_l+0xa02>
 800baf2:	2300      	movs	r3, #0
 800baf4:	4c43      	ldr	r4, [pc, #268]	; (800bc04 <_strtod_l+0xbdc>)
 800baf6:	930a      	str	r3, [sp, #40]	; 0x28
 800baf8:	940b      	str	r4, [sp, #44]	; 0x2c
 800bafa:	2400      	movs	r4, #0
 800bafc:	4d41      	ldr	r5, [pc, #260]	; (800bc04 <_strtod_l+0xbdc>)
 800bafe:	e794      	b.n	800ba2a <_strtod_l+0xa02>
 800bb00:	2300      	movs	r3, #0
 800bb02:	4c47      	ldr	r4, [pc, #284]	; (800bc20 <_strtod_l+0xbf8>)
 800bb04:	e7f7      	b.n	800baf6 <_strtod_l+0xace>
 800bb06:	23d4      	movs	r3, #212	; 0xd4
 800bb08:	049b      	lsls	r3, r3, #18
 800bb0a:	18cf      	adds	r7, r1, r3
 800bb0c:	9b07      	ldr	r3, [sp, #28]
 800bb0e:	970e      	str	r7, [sp, #56]	; 0x38
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1b9      	bne.n	800ba88 <_strtod_l+0xa60>
 800bb14:	4b3d      	ldr	r3, [pc, #244]	; (800bc0c <_strtod_l+0xbe4>)
 800bb16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb18:	403b      	ands	r3, r7
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d1b4      	bne.n	800ba88 <_strtod_l+0xa60>
 800bb1e:	0020      	movs	r0, r4
 800bb20:	0029      	movs	r1, r5
 800bb22:	f7f4 fd2b 	bl	800057c <__aeabi_d2lz>
 800bb26:	f7f4 fd65 	bl	80005f4 <__aeabi_l2d>
 800bb2a:	0002      	movs	r2, r0
 800bb2c:	000b      	movs	r3, r1
 800bb2e:	0020      	movs	r0, r4
 800bb30:	0029      	movs	r1, r5
 800bb32:	f7f6 f85d 	bl	8001bf0 <__aeabi_dsub>
 800bb36:	033b      	lsls	r3, r7, #12
 800bb38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb3a:	0b1b      	lsrs	r3, r3, #12
 800bb3c:	4333      	orrs	r3, r6
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	0004      	movs	r4, r0
 800bb42:	000d      	movs	r5, r1
 800bb44:	4a37      	ldr	r2, [pc, #220]	; (800bc24 <_strtod_l+0xbfc>)
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d054      	beq.n	800bbf4 <_strtod_l+0xbcc>
 800bb4a:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <_strtod_l+0xc00>)
 800bb4c:	f7f4 fc82 	bl	8000454 <__aeabi_dcmplt>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d000      	beq.n	800bb56 <_strtod_l+0xb2e>
 800bb54:	e4d4      	b.n	800b500 <_strtod_l+0x4d8>
 800bb56:	0020      	movs	r0, r4
 800bb58:	0029      	movs	r1, r5
 800bb5a:	4a34      	ldr	r2, [pc, #208]	; (800bc2c <_strtod_l+0xc04>)
 800bb5c:	4b2a      	ldr	r3, [pc, #168]	; (800bc08 <_strtod_l+0xbe0>)
 800bb5e:	f7f4 fc8d 	bl	800047c <__aeabi_dcmpgt>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d090      	beq.n	800ba88 <_strtod_l+0xa60>
 800bb66:	e4cb      	b.n	800b500 <_strtod_l+0x4d8>
 800bb68:	9b07      	ldr	r3, [sp, #28]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d02b      	beq.n	800bbc6 <_strtod_l+0xb9e>
 800bb6e:	23d4      	movs	r3, #212	; 0xd4
 800bb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb72:	04db      	lsls	r3, r3, #19
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d826      	bhi.n	800bbc6 <_strtod_l+0xb9e>
 800bb78:	0020      	movs	r0, r4
 800bb7a:	0029      	movs	r1, r5
 800bb7c:	4a2c      	ldr	r2, [pc, #176]	; (800bc30 <_strtod_l+0xc08>)
 800bb7e:	4b2d      	ldr	r3, [pc, #180]	; (800bc34 <_strtod_l+0xc0c>)
 800bb80:	f7f4 fc72 	bl	8000468 <__aeabi_dcmple>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d017      	beq.n	800bbb8 <_strtod_l+0xb90>
 800bb88:	0020      	movs	r0, r4
 800bb8a:	0029      	movs	r1, r5
 800bb8c:	f7f4 fcd8 	bl	8000540 <__aeabi_d2uiz>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d100      	bne.n	800bb96 <_strtod_l+0xb6e>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f7f6 fc31 	bl	80023fc <__aeabi_ui2d>
 800bb9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb9c:	0004      	movs	r4, r0
 800bb9e:	000b      	movs	r3, r1
 800bba0:	000d      	movs	r5, r1
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	d122      	bne.n	800bbec <_strtod_l+0xbc4>
 800bba6:	2280      	movs	r2, #128	; 0x80
 800bba8:	0612      	lsls	r2, r2, #24
 800bbaa:	188b      	adds	r3, r1, r2
 800bbac:	9016      	str	r0, [sp, #88]	; 0x58
 800bbae:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bbb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbb4:	9212      	str	r2, [sp, #72]	; 0x48
 800bbb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbb8:	22d6      	movs	r2, #214	; 0xd6
 800bbba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bbbc:	04d2      	lsls	r2, r2, #19
 800bbbe:	189b      	adds	r3, r3, r2
 800bbc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbc2:	1a9b      	subs	r3, r3, r2
 800bbc4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bbc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bbca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bbcc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bbce:	f001 fbff 	bl	800d3d0 <__ulp>
 800bbd2:	0002      	movs	r2, r0
 800bbd4:	000b      	movs	r3, r1
 800bbd6:	0030      	movs	r0, r6
 800bbd8:	0039      	movs	r1, r7
 800bbda:	f7f5 fd47 	bl	800166c <__aeabi_dmul>
 800bbde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbe2:	f7f4 fde9 	bl	80007b8 <__aeabi_dadd>
 800bbe6:	0006      	movs	r6, r0
 800bbe8:	000f      	movs	r7, r1
 800bbea:	e78f      	b.n	800bb0c <_strtod_l+0xae4>
 800bbec:	0002      	movs	r2, r0
 800bbee:	9216      	str	r2, [sp, #88]	; 0x58
 800bbf0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbf2:	e7dd      	b.n	800bbb0 <_strtod_l+0xb88>
 800bbf4:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <_strtod_l+0xc10>)
 800bbf6:	f7f4 fc2d 	bl	8000454 <__aeabi_dcmplt>
 800bbfa:	e7b2      	b.n	800bb62 <_strtod_l+0xb3a>
 800bbfc:	fff00000 	.word	0xfff00000
 800bc00:	000fffff 	.word	0x000fffff
 800bc04:	3ff00000 	.word	0x3ff00000
 800bc08:	3fe00000 	.word	0x3fe00000
 800bc0c:	7ff00000 	.word	0x7ff00000
 800bc10:	7fe00000 	.word	0x7fe00000
 800bc14:	fcb00000 	.word	0xfcb00000
 800bc18:	7c9fffff 	.word	0x7c9fffff
 800bc1c:	7fefffff 	.word	0x7fefffff
 800bc20:	bff00000 	.word	0xbff00000
 800bc24:	94a03595 	.word	0x94a03595
 800bc28:	3fdfffff 	.word	0x3fdfffff
 800bc2c:	35afe535 	.word	0x35afe535
 800bc30:	ffc00000 	.word	0xffc00000
 800bc34:	41dfffff 	.word	0x41dfffff
 800bc38:	3fcfffff 	.word	0x3fcfffff

0800bc3c <_strtod_r>:
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	4b02      	ldr	r3, [pc, #8]	; (800bc48 <_strtod_r+0xc>)
 800bc40:	f7ff f9f2 	bl	800b028 <_strtod_l>
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	20000444 	.word	0x20000444

0800bc4c <strtod>:
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	4c04      	ldr	r4, [pc, #16]	; (800bc60 <strtod+0x14>)
 800bc50:	000a      	movs	r2, r1
 800bc52:	0001      	movs	r1, r0
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <strtod+0x18>)
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	f7ff f9e6 	bl	800b028 <_strtod_l>
 800bc5c:	bd10      	pop	{r4, pc}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	200006d0 	.word	0x200006d0
 800bc64:	20000444 	.word	0x20000444

0800bc68 <_strtol_l.constprop.0>:
 800bc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	001e      	movs	r6, r3
 800bc6e:	9005      	str	r0, [sp, #20]
 800bc70:	9101      	str	r1, [sp, #4]
 800bc72:	9202      	str	r2, [sp, #8]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d048      	beq.n	800bd0a <_strtol_l.constprop.0+0xa2>
 800bc78:	000b      	movs	r3, r1
 800bc7a:	2e24      	cmp	r6, #36	; 0x24
 800bc7c:	d845      	bhi.n	800bd0a <_strtol_l.constprop.0+0xa2>
 800bc7e:	4a3b      	ldr	r2, [pc, #236]	; (800bd6c <_strtol_l.constprop.0+0x104>)
 800bc80:	2108      	movs	r1, #8
 800bc82:	4694      	mov	ip, r2
 800bc84:	001a      	movs	r2, r3
 800bc86:	4660      	mov	r0, ip
 800bc88:	7814      	ldrb	r4, [r2, #0]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	5d00      	ldrb	r0, [r0, r4]
 800bc8e:	001d      	movs	r5, r3
 800bc90:	0007      	movs	r7, r0
 800bc92:	400f      	ands	r7, r1
 800bc94:	4208      	tst	r0, r1
 800bc96:	d1f5      	bne.n	800bc84 <_strtol_l.constprop.0+0x1c>
 800bc98:	2c2d      	cmp	r4, #45	; 0x2d
 800bc9a:	d13d      	bne.n	800bd18 <_strtol_l.constprop.0+0xb0>
 800bc9c:	2701      	movs	r7, #1
 800bc9e:	781c      	ldrb	r4, [r3, #0]
 800bca0:	1c95      	adds	r5, r2, #2
 800bca2:	2e00      	cmp	r6, #0
 800bca4:	d05e      	beq.n	800bd64 <_strtol_l.constprop.0+0xfc>
 800bca6:	2e10      	cmp	r6, #16
 800bca8:	d109      	bne.n	800bcbe <_strtol_l.constprop.0+0x56>
 800bcaa:	2c30      	cmp	r4, #48	; 0x30
 800bcac:	d107      	bne.n	800bcbe <_strtol_l.constprop.0+0x56>
 800bcae:	2220      	movs	r2, #32
 800bcb0:	782b      	ldrb	r3, [r5, #0]
 800bcb2:	4393      	bics	r3, r2
 800bcb4:	2b58      	cmp	r3, #88	; 0x58
 800bcb6:	d150      	bne.n	800bd5a <_strtol_l.constprop.0+0xf2>
 800bcb8:	2610      	movs	r6, #16
 800bcba:	786c      	ldrb	r4, [r5, #1]
 800bcbc:	3502      	adds	r5, #2
 800bcbe:	4b2c      	ldr	r3, [pc, #176]	; (800bd70 <_strtol_l.constprop.0+0x108>)
 800bcc0:	0031      	movs	r1, r6
 800bcc2:	18fb      	adds	r3, r7, r3
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	9303      	str	r3, [sp, #12]
 800bcc8:	f7f4 fabe 	bl	8000248 <__aeabi_uidivmod>
 800bccc:	2200      	movs	r2, #0
 800bcce:	9104      	str	r1, [sp, #16]
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	4684      	mov	ip, r0
 800bcd4:	0010      	movs	r0, r2
 800bcd6:	4249      	negs	r1, r1
 800bcd8:	0023      	movs	r3, r4
 800bcda:	3b30      	subs	r3, #48	; 0x30
 800bcdc:	2b09      	cmp	r3, #9
 800bcde:	d903      	bls.n	800bce8 <_strtol_l.constprop.0+0x80>
 800bce0:	3b11      	subs	r3, #17
 800bce2:	2b19      	cmp	r3, #25
 800bce4:	d81d      	bhi.n	800bd22 <_strtol_l.constprop.0+0xba>
 800bce6:	330a      	adds	r3, #10
 800bce8:	429e      	cmp	r6, r3
 800bcea:	dd1e      	ble.n	800bd2a <_strtol_l.constprop.0+0xc2>
 800bcec:	1c54      	adds	r4, r2, #1
 800bcee:	d009      	beq.n	800bd04 <_strtol_l.constprop.0+0x9c>
 800bcf0:	000a      	movs	r2, r1
 800bcf2:	4584      	cmp	ip, r0
 800bcf4:	d306      	bcc.n	800bd04 <_strtol_l.constprop.0+0x9c>
 800bcf6:	d102      	bne.n	800bcfe <_strtol_l.constprop.0+0x96>
 800bcf8:	9c04      	ldr	r4, [sp, #16]
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	db02      	blt.n	800bd04 <_strtol_l.constprop.0+0x9c>
 800bcfe:	2201      	movs	r2, #1
 800bd00:	4370      	muls	r0, r6
 800bd02:	1818      	adds	r0, r3, r0
 800bd04:	782c      	ldrb	r4, [r5, #0]
 800bd06:	3501      	adds	r5, #1
 800bd08:	e7e6      	b.n	800bcd8 <_strtol_l.constprop.0+0x70>
 800bd0a:	f000 fb57 	bl	800c3bc <__errno>
 800bd0e:	2316      	movs	r3, #22
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	2000      	movs	r0, #0
 800bd14:	b007      	add	sp, #28
 800bd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd18:	2c2b      	cmp	r4, #43	; 0x2b
 800bd1a:	d1c2      	bne.n	800bca2 <_strtol_l.constprop.0+0x3a>
 800bd1c:	781c      	ldrb	r4, [r3, #0]
 800bd1e:	1c95      	adds	r5, r2, #2
 800bd20:	e7bf      	b.n	800bca2 <_strtol_l.constprop.0+0x3a>
 800bd22:	0023      	movs	r3, r4
 800bd24:	3b61      	subs	r3, #97	; 0x61
 800bd26:	2b19      	cmp	r3, #25
 800bd28:	d9dd      	bls.n	800bce6 <_strtol_l.constprop.0+0x7e>
 800bd2a:	1c53      	adds	r3, r2, #1
 800bd2c:	d109      	bne.n	800bd42 <_strtol_l.constprop.0+0xda>
 800bd2e:	2322      	movs	r3, #34	; 0x22
 800bd30:	9a05      	ldr	r2, [sp, #20]
 800bd32:	9803      	ldr	r0, [sp, #12]
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	9b02      	ldr	r3, [sp, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0eb      	beq.n	800bd14 <_strtol_l.constprop.0+0xac>
 800bd3c:	1e6b      	subs	r3, r5, #1
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	e007      	b.n	800bd52 <_strtol_l.constprop.0+0xea>
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	d000      	beq.n	800bd48 <_strtol_l.constprop.0+0xe0>
 800bd46:	4240      	negs	r0, r0
 800bd48:	9b02      	ldr	r3, [sp, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0e2      	beq.n	800bd14 <_strtol_l.constprop.0+0xac>
 800bd4e:	2a00      	cmp	r2, #0
 800bd50:	d1f4      	bne.n	800bd3c <_strtol_l.constprop.0+0xd4>
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	9a01      	ldr	r2, [sp, #4]
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e7dc      	b.n	800bd14 <_strtol_l.constprop.0+0xac>
 800bd5a:	2430      	movs	r4, #48	; 0x30
 800bd5c:	2e00      	cmp	r6, #0
 800bd5e:	d1ae      	bne.n	800bcbe <_strtol_l.constprop.0+0x56>
 800bd60:	3608      	adds	r6, #8
 800bd62:	e7ac      	b.n	800bcbe <_strtol_l.constprop.0+0x56>
 800bd64:	2c30      	cmp	r4, #48	; 0x30
 800bd66:	d0a2      	beq.n	800bcae <_strtol_l.constprop.0+0x46>
 800bd68:	260a      	movs	r6, #10
 800bd6a:	e7a8      	b.n	800bcbe <_strtol_l.constprop.0+0x56>
 800bd6c:	08014911 	.word	0x08014911
 800bd70:	7fffffff 	.word	0x7fffffff

0800bd74 <_strtol_r>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	f7ff ff77 	bl	800bc68 <_strtol_l.constprop.0>
 800bd7a:	bd10      	pop	{r4, pc}

0800bd7c <strtol>:
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	4c04      	ldr	r4, [pc, #16]	; (800bd90 <strtol+0x14>)
 800bd80:	0013      	movs	r3, r2
 800bd82:	000a      	movs	r2, r1
 800bd84:	0001      	movs	r1, r0
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	f7ff ff6e 	bl	800bc68 <_strtol_l.constprop.0>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	200006d0 	.word	0x200006d0

0800bd94 <_strtoul_l.constprop.0>:
 800bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd96:	b087      	sub	sp, #28
 800bd98:	9202      	str	r2, [sp, #8]
 800bd9a:	4a3e      	ldr	r2, [pc, #248]	; (800be94 <_strtoul_l.constprop.0+0x100>)
 800bd9c:	001e      	movs	r6, r3
 800bd9e:	9101      	str	r1, [sp, #4]
 800bda0:	000b      	movs	r3, r1
 800bda2:	4694      	mov	ip, r2
 800bda4:	2108      	movs	r1, #8
 800bda6:	9005      	str	r0, [sp, #20]
 800bda8:	001a      	movs	r2, r3
 800bdaa:	4660      	mov	r0, ip
 800bdac:	7814      	ldrb	r4, [r2, #0]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	5d00      	ldrb	r0, [r0, r4]
 800bdb2:	001d      	movs	r5, r3
 800bdb4:	0007      	movs	r7, r0
 800bdb6:	400f      	ands	r7, r1
 800bdb8:	4208      	tst	r0, r1
 800bdba:	d1f5      	bne.n	800bda8 <_strtoul_l.constprop.0+0x14>
 800bdbc:	2c2d      	cmp	r4, #45	; 0x2d
 800bdbe:	d13d      	bne.n	800be3c <_strtoul_l.constprop.0+0xa8>
 800bdc0:	2701      	movs	r7, #1
 800bdc2:	781c      	ldrb	r4, [r3, #0]
 800bdc4:	1c95      	adds	r5, r2, #2
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d05f      	beq.n	800be8a <_strtoul_l.constprop.0+0xf6>
 800bdca:	2e10      	cmp	r6, #16
 800bdcc:	d109      	bne.n	800bde2 <_strtoul_l.constprop.0+0x4e>
 800bdce:	2c30      	cmp	r4, #48	; 0x30
 800bdd0:	d107      	bne.n	800bde2 <_strtoul_l.constprop.0+0x4e>
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	782b      	ldrb	r3, [r5, #0]
 800bdd6:	4393      	bics	r3, r2
 800bdd8:	2b58      	cmp	r3, #88	; 0x58
 800bdda:	d151      	bne.n	800be80 <_strtoul_l.constprop.0+0xec>
 800bddc:	2610      	movs	r6, #16
 800bdde:	786c      	ldrb	r4, [r5, #1]
 800bde0:	3502      	adds	r5, #2
 800bde2:	2001      	movs	r0, #1
 800bde4:	0031      	movs	r1, r6
 800bde6:	4240      	negs	r0, r0
 800bde8:	f7f4 f9a8 	bl	800013c <__udivsi3>
 800bdec:	9003      	str	r0, [sp, #12]
 800bdee:	2001      	movs	r0, #1
 800bdf0:	0031      	movs	r1, r6
 800bdf2:	4240      	negs	r0, r0
 800bdf4:	f7f4 fa28 	bl	8000248 <__aeabi_uidivmod>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	9104      	str	r1, [sp, #16]
 800bdfe:	2101      	movs	r1, #1
 800be00:	0018      	movs	r0, r3
 800be02:	4694      	mov	ip, r2
 800be04:	4249      	negs	r1, r1
 800be06:	0022      	movs	r2, r4
 800be08:	3a30      	subs	r2, #48	; 0x30
 800be0a:	2a09      	cmp	r2, #9
 800be0c:	d903      	bls.n	800be16 <_strtoul_l.constprop.0+0x82>
 800be0e:	3a11      	subs	r2, #17
 800be10:	2a19      	cmp	r2, #25
 800be12:	d818      	bhi.n	800be46 <_strtoul_l.constprop.0+0xb2>
 800be14:	320a      	adds	r2, #10
 800be16:	4296      	cmp	r6, r2
 800be18:	dd19      	ble.n	800be4e <_strtoul_l.constprop.0+0xba>
 800be1a:	1c5c      	adds	r4, r3, #1
 800be1c:	d00b      	beq.n	800be36 <_strtoul_l.constprop.0+0xa2>
 800be1e:	9c03      	ldr	r4, [sp, #12]
 800be20:	000b      	movs	r3, r1
 800be22:	4284      	cmp	r4, r0
 800be24:	d307      	bcc.n	800be36 <_strtoul_l.constprop.0+0xa2>
 800be26:	d103      	bne.n	800be30 <_strtoul_l.constprop.0+0x9c>
 800be28:	9c04      	ldr	r4, [sp, #16]
 800be2a:	000b      	movs	r3, r1
 800be2c:	4294      	cmp	r4, r2
 800be2e:	db02      	blt.n	800be36 <_strtoul_l.constprop.0+0xa2>
 800be30:	4663      	mov	r3, ip
 800be32:	4370      	muls	r0, r6
 800be34:	1810      	adds	r0, r2, r0
 800be36:	782c      	ldrb	r4, [r5, #0]
 800be38:	3501      	adds	r5, #1
 800be3a:	e7e4      	b.n	800be06 <_strtoul_l.constprop.0+0x72>
 800be3c:	2c2b      	cmp	r4, #43	; 0x2b
 800be3e:	d1c2      	bne.n	800bdc6 <_strtoul_l.constprop.0+0x32>
 800be40:	781c      	ldrb	r4, [r3, #0]
 800be42:	1c95      	adds	r5, r2, #2
 800be44:	e7bf      	b.n	800bdc6 <_strtoul_l.constprop.0+0x32>
 800be46:	0022      	movs	r2, r4
 800be48:	3a61      	subs	r2, #97	; 0x61
 800be4a:	2a19      	cmp	r2, #25
 800be4c:	d9e2      	bls.n	800be14 <_strtoul_l.constprop.0+0x80>
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	d108      	bne.n	800be64 <_strtoul_l.constprop.0+0xd0>
 800be52:	2222      	movs	r2, #34	; 0x22
 800be54:	9905      	ldr	r1, [sp, #20]
 800be56:	0018      	movs	r0, r3
 800be58:	600a      	str	r2, [r1, #0]
 800be5a:	9a02      	ldr	r2, [sp, #8]
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	d109      	bne.n	800be74 <_strtoul_l.constprop.0+0xe0>
 800be60:	b007      	add	sp, #28
 800be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be64:	2f00      	cmp	r7, #0
 800be66:	d000      	beq.n	800be6a <_strtoul_l.constprop.0+0xd6>
 800be68:	4240      	negs	r0, r0
 800be6a:	9a02      	ldr	r2, [sp, #8]
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	d0f7      	beq.n	800be60 <_strtoul_l.constprop.0+0xcc>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <_strtoul_l.constprop.0+0xe4>
 800be74:	1e6b      	subs	r3, r5, #1
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	9b02      	ldr	r3, [sp, #8]
 800be7a:	9a01      	ldr	r2, [sp, #4]
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	e7ef      	b.n	800be60 <_strtoul_l.constprop.0+0xcc>
 800be80:	2430      	movs	r4, #48	; 0x30
 800be82:	2e00      	cmp	r6, #0
 800be84:	d1ad      	bne.n	800bde2 <_strtoul_l.constprop.0+0x4e>
 800be86:	3608      	adds	r6, #8
 800be88:	e7ab      	b.n	800bde2 <_strtoul_l.constprop.0+0x4e>
 800be8a:	2c30      	cmp	r4, #48	; 0x30
 800be8c:	d0a1      	beq.n	800bdd2 <_strtoul_l.constprop.0+0x3e>
 800be8e:	260a      	movs	r6, #10
 800be90:	e7a7      	b.n	800bde2 <_strtoul_l.constprop.0+0x4e>
 800be92:	46c0      	nop			; (mov r8, r8)
 800be94:	08014911 	.word	0x08014911

0800be98 <_strtoul_r>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	f7ff ff7b 	bl	800bd94 <_strtoul_l.constprop.0>
 800be9e:	bd10      	pop	{r4, pc}

0800bea0 <strtoul>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	4c04      	ldr	r4, [pc, #16]	; (800beb4 <strtoul+0x14>)
 800bea4:	0013      	movs	r3, r2
 800bea6:	000a      	movs	r2, r1
 800bea8:	0001      	movs	r1, r0
 800beaa:	6820      	ldr	r0, [r4, #0]
 800beac:	f7ff ff72 	bl	800bd94 <_strtoul_l.constprop.0>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	200006d0 	.word	0x200006d0

0800beb8 <std>:
 800beb8:	2300      	movs	r3, #0
 800beba:	b510      	push	{r4, lr}
 800bebc:	0004      	movs	r4, r0
 800bebe:	6003      	str	r3, [r0, #0]
 800bec0:	6043      	str	r3, [r0, #4]
 800bec2:	6083      	str	r3, [r0, #8]
 800bec4:	8181      	strh	r1, [r0, #12]
 800bec6:	6643      	str	r3, [r0, #100]	; 0x64
 800bec8:	81c2      	strh	r2, [r0, #14]
 800beca:	6103      	str	r3, [r0, #16]
 800becc:	6143      	str	r3, [r0, #20]
 800bece:	6183      	str	r3, [r0, #24]
 800bed0:	0019      	movs	r1, r3
 800bed2:	2208      	movs	r2, #8
 800bed4:	305c      	adds	r0, #92	; 0x5c
 800bed6:	f000 f97d 	bl	800c1d4 <memset>
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <std+0x50>)
 800bedc:	61e4      	str	r4, [r4, #28]
 800bede:	6223      	str	r3, [r4, #32]
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <std+0x54>)
 800bee2:	6263      	str	r3, [r4, #36]	; 0x24
 800bee4:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <std+0x58>)
 800bee6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bee8:	4b0a      	ldr	r3, [pc, #40]	; (800bf14 <std+0x5c>)
 800beea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <std+0x60>)
 800beee:	429c      	cmp	r4, r3
 800bef0:	d005      	beq.n	800befe <std+0x46>
 800bef2:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <std+0x64>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d002      	beq.n	800befe <std+0x46>
 800bef8:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <std+0x68>)
 800befa:	429c      	cmp	r4, r3
 800befc:	d103      	bne.n	800bf06 <std+0x4e>
 800befe:	0020      	movs	r0, r4
 800bf00:	3058      	adds	r0, #88	; 0x58
 800bf02:	f000 fa85 	bl	800c410 <__retarget_lock_init_recursive>
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	0800c139 	.word	0x0800c139
 800bf0c:	0800c165 	.word	0x0800c165
 800bf10:	0800c19d 	.word	0x0800c19d
 800bf14:	0800c1c9 	.word	0x0800c1c9
 800bf18:	20000c6c 	.word	0x20000c6c
 800bf1c:	20000cd4 	.word	0x20000cd4
 800bf20:	20000d3c 	.word	0x20000d3c

0800bf24 <stdio_exit_handler>:
 800bf24:	b510      	push	{r4, lr}
 800bf26:	4a03      	ldr	r2, [pc, #12]	; (800bf34 <stdio_exit_handler+0x10>)
 800bf28:	4903      	ldr	r1, [pc, #12]	; (800bf38 <stdio_exit_handler+0x14>)
 800bf2a:	4804      	ldr	r0, [pc, #16]	; (800bf3c <stdio_exit_handler+0x18>)
 800bf2c:	f000 f86c 	bl	800c008 <_fwalk_sglue>
 800bf30:	bd10      	pop	{r4, pc}
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	20000438 	.word	0x20000438
 800bf38:	0800ff11 	.word	0x0800ff11
 800bf3c:	200005b0 	.word	0x200005b0

0800bf40 <cleanup_stdio>:
 800bf40:	6841      	ldr	r1, [r0, #4]
 800bf42:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <cleanup_stdio+0x30>)
 800bf44:	b510      	push	{r4, lr}
 800bf46:	0004      	movs	r4, r0
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	d001      	beq.n	800bf50 <cleanup_stdio+0x10>
 800bf4c:	f003 ffe0 	bl	800ff10 <_fclose_r>
 800bf50:	68a1      	ldr	r1, [r4, #8]
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <cleanup_stdio+0x34>)
 800bf54:	4299      	cmp	r1, r3
 800bf56:	d002      	beq.n	800bf5e <cleanup_stdio+0x1e>
 800bf58:	0020      	movs	r0, r4
 800bf5a:	f003 ffd9 	bl	800ff10 <_fclose_r>
 800bf5e:	68e1      	ldr	r1, [r4, #12]
 800bf60:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <cleanup_stdio+0x38>)
 800bf62:	4299      	cmp	r1, r3
 800bf64:	d002      	beq.n	800bf6c <cleanup_stdio+0x2c>
 800bf66:	0020      	movs	r0, r4
 800bf68:	f003 ffd2 	bl	800ff10 <_fclose_r>
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	20000c6c 	.word	0x20000c6c
 800bf74:	20000cd4 	.word	0x20000cd4
 800bf78:	20000d3c 	.word	0x20000d3c

0800bf7c <global_stdio_init.part.0>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <global_stdio_init.part.0+0x28>)
 800bf80:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <global_stdio_init.part.0+0x2c>)
 800bf82:	2104      	movs	r1, #4
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	4809      	ldr	r0, [pc, #36]	; (800bfac <global_stdio_init.part.0+0x30>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f7ff ff95 	bl	800beb8 <std>
 800bf8e:	2201      	movs	r2, #1
 800bf90:	2109      	movs	r1, #9
 800bf92:	4807      	ldr	r0, [pc, #28]	; (800bfb0 <global_stdio_init.part.0+0x34>)
 800bf94:	f7ff ff90 	bl	800beb8 <std>
 800bf98:	2202      	movs	r2, #2
 800bf9a:	2112      	movs	r1, #18
 800bf9c:	4805      	ldr	r0, [pc, #20]	; (800bfb4 <global_stdio_init.part.0+0x38>)
 800bf9e:	f7ff ff8b 	bl	800beb8 <std>
 800bfa2:	bd10      	pop	{r4, pc}
 800bfa4:	20000da4 	.word	0x20000da4
 800bfa8:	0800bf25 	.word	0x0800bf25
 800bfac:	20000c6c 	.word	0x20000c6c
 800bfb0:	20000cd4 	.word	0x20000cd4
 800bfb4:	20000d3c 	.word	0x20000d3c

0800bfb8 <__sfp_lock_acquire>:
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	4802      	ldr	r0, [pc, #8]	; (800bfc4 <__sfp_lock_acquire+0xc>)
 800bfbc:	f000 fa2a 	bl	800c414 <__retarget_lock_acquire_recursive>
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	20000dae 	.word	0x20000dae

0800bfc8 <__sfp_lock_release>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	4802      	ldr	r0, [pc, #8]	; (800bfd4 <__sfp_lock_release+0xc>)
 800bfcc:	f000 fa23 	bl	800c416 <__retarget_lock_release_recursive>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	20000dae 	.word	0x20000dae

0800bfd8 <__sinit>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	0004      	movs	r4, r0
 800bfdc:	f7ff ffec 	bl	800bfb8 <__sfp_lock_acquire>
 800bfe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d002      	beq.n	800bfec <__sinit+0x14>
 800bfe6:	f7ff ffef 	bl	800bfc8 <__sfp_lock_release>
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	4b04      	ldr	r3, [pc, #16]	; (800c000 <__sinit+0x28>)
 800bfee:	6363      	str	r3, [r4, #52]	; 0x34
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <__sinit+0x2c>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1f6      	bne.n	800bfe6 <__sinit+0xe>
 800bff8:	f7ff ffc0 	bl	800bf7c <global_stdio_init.part.0>
 800bffc:	e7f3      	b.n	800bfe6 <__sinit+0xe>
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	0800bf41 	.word	0x0800bf41
 800c004:	20000da4 	.word	0x20000da4

0800c008 <_fwalk_sglue>:
 800c008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c00a:	0014      	movs	r4, r2
 800c00c:	2600      	movs	r6, #0
 800c00e:	9000      	str	r0, [sp, #0]
 800c010:	9101      	str	r1, [sp, #4]
 800c012:	68a5      	ldr	r5, [r4, #8]
 800c014:	6867      	ldr	r7, [r4, #4]
 800c016:	3f01      	subs	r7, #1
 800c018:	d504      	bpl.n	800c024 <_fwalk_sglue+0x1c>
 800c01a:	6824      	ldr	r4, [r4, #0]
 800c01c:	2c00      	cmp	r4, #0
 800c01e:	d1f8      	bne.n	800c012 <_fwalk_sglue+0xa>
 800c020:	0030      	movs	r0, r6
 800c022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c024:	89ab      	ldrh	r3, [r5, #12]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d908      	bls.n	800c03c <_fwalk_sglue+0x34>
 800c02a:	220e      	movs	r2, #14
 800c02c:	5eab      	ldrsh	r3, [r5, r2]
 800c02e:	3301      	adds	r3, #1
 800c030:	d004      	beq.n	800c03c <_fwalk_sglue+0x34>
 800c032:	0029      	movs	r1, r5
 800c034:	9800      	ldr	r0, [sp, #0]
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	4798      	blx	r3
 800c03a:	4306      	orrs	r6, r0
 800c03c:	3568      	adds	r5, #104	; 0x68
 800c03e:	e7ea      	b.n	800c016 <_fwalk_sglue+0xe>

0800c040 <snprintf>:
 800c040:	b40c      	push	{r2, r3}
 800c042:	b530      	push	{r4, r5, lr}
 800c044:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <snprintf+0x64>)
 800c046:	000c      	movs	r4, r1
 800c048:	681d      	ldr	r5, [r3, #0]
 800c04a:	b09d      	sub	sp, #116	; 0x74
 800c04c:	2900      	cmp	r1, #0
 800c04e:	da08      	bge.n	800c062 <snprintf+0x22>
 800c050:	238b      	movs	r3, #139	; 0x8b
 800c052:	2001      	movs	r0, #1
 800c054:	602b      	str	r3, [r5, #0]
 800c056:	4240      	negs	r0, r0
 800c058:	b01d      	add	sp, #116	; 0x74
 800c05a:	bc30      	pop	{r4, r5}
 800c05c:	bc08      	pop	{r3}
 800c05e:	b002      	add	sp, #8
 800c060:	4718      	bx	r3
 800c062:	2382      	movs	r3, #130	; 0x82
 800c064:	466a      	mov	r2, sp
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	8293      	strh	r3, [r2, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	9002      	str	r0, [sp, #8]
 800c06e:	9006      	str	r0, [sp, #24]
 800c070:	4299      	cmp	r1, r3
 800c072:	d000      	beq.n	800c076 <snprintf+0x36>
 800c074:	1e4b      	subs	r3, r1, #1
 800c076:	9304      	str	r3, [sp, #16]
 800c078:	9307      	str	r3, [sp, #28]
 800c07a:	2301      	movs	r3, #1
 800c07c:	466a      	mov	r2, sp
 800c07e:	425b      	negs	r3, r3
 800c080:	82d3      	strh	r3, [r2, #22]
 800c082:	0028      	movs	r0, r5
 800c084:	ab21      	add	r3, sp, #132	; 0x84
 800c086:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c088:	a902      	add	r1, sp, #8
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	f001 fae2 	bl	800d654 <_svfprintf_r>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	da01      	bge.n	800c098 <snprintf+0x58>
 800c094:	238b      	movs	r3, #139	; 0x8b
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	2c00      	cmp	r4, #0
 800c09a:	d0dd      	beq.n	800c058 <snprintf+0x18>
 800c09c:	2200      	movs	r2, #0
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	701a      	strb	r2, [r3, #0]
 800c0a2:	e7d9      	b.n	800c058 <snprintf+0x18>
 800c0a4:	200006d0 	.word	0x200006d0

0800c0a8 <sprintf>:
 800c0a8:	b40e      	push	{r1, r2, r3}
 800c0aa:	b500      	push	{lr}
 800c0ac:	490b      	ldr	r1, [pc, #44]	; (800c0dc <sprintf+0x34>)
 800c0ae:	b09c      	sub	sp, #112	; 0x70
 800c0b0:	ab1d      	add	r3, sp, #116	; 0x74
 800c0b2:	9002      	str	r0, [sp, #8]
 800c0b4:	9006      	str	r0, [sp, #24]
 800c0b6:	9107      	str	r1, [sp, #28]
 800c0b8:	9104      	str	r1, [sp, #16]
 800c0ba:	4809      	ldr	r0, [pc, #36]	; (800c0e0 <sprintf+0x38>)
 800c0bc:	4909      	ldr	r1, [pc, #36]	; (800c0e4 <sprintf+0x3c>)
 800c0be:	cb04      	ldmia	r3!, {r2}
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	6800      	ldr	r0, [r0, #0]
 800c0c4:	a902      	add	r1, sp, #8
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	f001 fac4 	bl	800d654 <_svfprintf_r>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	b01c      	add	sp, #112	; 0x70
 800c0d4:	bc08      	pop	{r3}
 800c0d6:	b003      	add	sp, #12
 800c0d8:	4718      	bx	r3
 800c0da:	46c0      	nop			; (mov r8, r8)
 800c0dc:	7fffffff 	.word	0x7fffffff
 800c0e0:	200006d0 	.word	0x200006d0
 800c0e4:	ffff0208 	.word	0xffff0208

0800c0e8 <sscanf>:
 800c0e8:	b40e      	push	{r1, r2, r3}
 800c0ea:	b530      	push	{r4, r5, lr}
 800c0ec:	2381      	movs	r3, #129	; 0x81
 800c0ee:	b09c      	sub	sp, #112	; 0x70
 800c0f0:	466a      	mov	r2, sp
 800c0f2:	ac1f      	add	r4, sp, #124	; 0x7c
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	cc20      	ldmia	r4!, {r5}
 800c0f8:	8293      	strh	r3, [r2, #20]
 800c0fa:	9002      	str	r0, [sp, #8]
 800c0fc:	9006      	str	r0, [sp, #24]
 800c0fe:	f7f4 f801 	bl	8000104 <strlen>
 800c102:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <sscanf+0x48>)
 800c104:	466a      	mov	r2, sp
 800c106:	930a      	str	r3, [sp, #40]	; 0x28
 800c108:	2300      	movs	r3, #0
 800c10a:	9003      	str	r0, [sp, #12]
 800c10c:	9007      	str	r0, [sp, #28]
 800c10e:	4809      	ldr	r0, [pc, #36]	; (800c134 <sscanf+0x4c>)
 800c110:	930e      	str	r3, [sp, #56]	; 0x38
 800c112:	9313      	str	r3, [sp, #76]	; 0x4c
 800c114:	3b01      	subs	r3, #1
 800c116:	82d3      	strh	r3, [r2, #22]
 800c118:	a902      	add	r1, sp, #8
 800c11a:	0023      	movs	r3, r4
 800c11c:	002a      	movs	r2, r5
 800c11e:	6800      	ldr	r0, [r0, #0]
 800c120:	9401      	str	r4, [sp, #4]
 800c122:	f002 fcd9 	bl	800ead8 <__ssvfscanf_r>
 800c126:	b01c      	add	sp, #112	; 0x70
 800c128:	bc30      	pop	{r4, r5}
 800c12a:	bc08      	pop	{r3}
 800c12c:	b003      	add	sp, #12
 800c12e:	4718      	bx	r3
 800c130:	0800c161 	.word	0x0800c161
 800c134:	200006d0 	.word	0x200006d0

0800c138 <__sread>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	000c      	movs	r4, r1
 800c13c:	250e      	movs	r5, #14
 800c13e:	5f49      	ldrsh	r1, [r1, r5]
 800c140:	f000 f902 	bl	800c348 <_read_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	db03      	blt.n	800c150 <__sread+0x18>
 800c148:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c14a:	181b      	adds	r3, r3, r0
 800c14c:	6523      	str	r3, [r4, #80]	; 0x50
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	4a02      	ldr	r2, [pc, #8]	; (800c15c <__sread+0x24>)
 800c154:	4013      	ands	r3, r2
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	e7f9      	b.n	800c14e <__sread+0x16>
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	ffffefff 	.word	0xffffefff

0800c160 <__seofread>:
 800c160:	2000      	movs	r0, #0
 800c162:	4770      	bx	lr

0800c164 <__swrite>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	001f      	movs	r7, r3
 800c168:	898b      	ldrh	r3, [r1, #12]
 800c16a:	0005      	movs	r5, r0
 800c16c:	000c      	movs	r4, r1
 800c16e:	0016      	movs	r6, r2
 800c170:	05db      	lsls	r3, r3, #23
 800c172:	d505      	bpl.n	800c180 <__swrite+0x1c>
 800c174:	230e      	movs	r3, #14
 800c176:	5ec9      	ldrsh	r1, [r1, r3]
 800c178:	2200      	movs	r2, #0
 800c17a:	2302      	movs	r3, #2
 800c17c:	f000 f8d0 	bl	800c320 <_lseek_r>
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	4a05      	ldr	r2, [pc, #20]	; (800c198 <__swrite+0x34>)
 800c184:	0028      	movs	r0, r5
 800c186:	4013      	ands	r3, r2
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	0032      	movs	r2, r6
 800c18c:	230e      	movs	r3, #14
 800c18e:	5ee1      	ldrsh	r1, [r4, r3]
 800c190:	003b      	movs	r3, r7
 800c192:	f000 f8ff 	bl	800c394 <_write_r>
 800c196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c198:	ffffefff 	.word	0xffffefff

0800c19c <__sseek>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	000c      	movs	r4, r1
 800c1a0:	250e      	movs	r5, #14
 800c1a2:	5f49      	ldrsh	r1, [r1, r5]
 800c1a4:	f000 f8bc 	bl	800c320 <_lseek_r>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	1c42      	adds	r2, r0, #1
 800c1ac:	d103      	bne.n	800c1b6 <__sseek+0x1a>
 800c1ae:	4a05      	ldr	r2, [pc, #20]	; (800c1c4 <__sseek+0x28>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}
 800c1b6:	2280      	movs	r2, #128	; 0x80
 800c1b8:	0152      	lsls	r2, r2, #5
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	6520      	str	r0, [r4, #80]	; 0x50
 800c1c0:	e7f8      	b.n	800c1b4 <__sseek+0x18>
 800c1c2:	46c0      	nop			; (mov r8, r8)
 800c1c4:	ffffefff 	.word	0xffffefff

0800c1c8 <__sclose>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	230e      	movs	r3, #14
 800c1cc:	5ec9      	ldrsh	r1, [r1, r3]
 800c1ce:	f000 f895 	bl	800c2fc <_close_r>
 800c1d2:	bd10      	pop	{r4, pc}

0800c1d4 <memset>:
 800c1d4:	0003      	movs	r3, r0
 800c1d6:	1882      	adds	r2, r0, r2
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d100      	bne.n	800c1de <memset+0xa>
 800c1dc:	4770      	bx	lr
 800c1de:	7019      	strb	r1, [r3, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	e7f9      	b.n	800c1d8 <memset+0x4>

0800c1e4 <strchr>:
 800c1e4:	b2c9      	uxtb	r1, r1
 800c1e6:	7803      	ldrb	r3, [r0, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <strchr+0x12>
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	d100      	bne.n	800c1f2 <strchr+0xe>
 800c1f0:	4770      	bx	lr
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	e7f7      	b.n	800c1e6 <strchr+0x2>
 800c1f6:	424b      	negs	r3, r1
 800c1f8:	4159      	adcs	r1, r3
 800c1fa:	4249      	negs	r1, r1
 800c1fc:	4008      	ands	r0, r1
 800c1fe:	e7f7      	b.n	800c1f0 <strchr+0xc>

0800c200 <strncmp>:
 800c200:	b530      	push	{r4, r5, lr}
 800c202:	0005      	movs	r5, r0
 800c204:	1e10      	subs	r0, r2, #0
 800c206:	d00b      	beq.n	800c220 <strncmp+0x20>
 800c208:	2400      	movs	r4, #0
 800c20a:	3a01      	subs	r2, #1
 800c20c:	5d2b      	ldrb	r3, [r5, r4]
 800c20e:	5d08      	ldrb	r0, [r1, r4]
 800c210:	4283      	cmp	r3, r0
 800c212:	d104      	bne.n	800c21e <strncmp+0x1e>
 800c214:	42a2      	cmp	r2, r4
 800c216:	d002      	beq.n	800c21e <strncmp+0x1e>
 800c218:	3401      	adds	r4, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1f6      	bne.n	800c20c <strncmp+0xc>
 800c21e:	1a18      	subs	r0, r3, r0
 800c220:	bd30      	pop	{r4, r5, pc}

0800c222 <strncpy>:
 800c222:	0003      	movs	r3, r0
 800c224:	b530      	push	{r4, r5, lr}
 800c226:	001d      	movs	r5, r3
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d006      	beq.n	800c23a <strncpy+0x18>
 800c22c:	780c      	ldrb	r4, [r1, #0]
 800c22e:	3a01      	subs	r2, #1
 800c230:	3301      	adds	r3, #1
 800c232:	702c      	strb	r4, [r5, #0]
 800c234:	3101      	adds	r1, #1
 800c236:	2c00      	cmp	r4, #0
 800c238:	d1f5      	bne.n	800c226 <strncpy+0x4>
 800c23a:	2100      	movs	r1, #0
 800c23c:	189a      	adds	r2, r3, r2
 800c23e:	4293      	cmp	r3, r2
 800c240:	d100      	bne.n	800c244 <strncpy+0x22>
 800c242:	bd30      	pop	{r4, r5, pc}
 800c244:	7019      	strb	r1, [r3, #0]
 800c246:	3301      	adds	r3, #1
 800c248:	e7f9      	b.n	800c23e <strncpy+0x1c>
	...

0800c24c <strtok>:
 800c24c:	4b03      	ldr	r3, [pc, #12]	; (800c25c <strtok+0x10>)
 800c24e:	b510      	push	{r4, lr}
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	2301      	movs	r3, #1
 800c254:	3250      	adds	r2, #80	; 0x50
 800c256:	f000 f803 	bl	800c260 <__strtok_r>
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	200006d0 	.word	0x200006d0

0800c260 <__strtok_r>:
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	2800      	cmp	r0, #0
 800c264:	d102      	bne.n	800c26c <__strtok_r+0xc>
 800c266:	6810      	ldr	r0, [r2, #0]
 800c268:	2800      	cmp	r0, #0
 800c26a:	d013      	beq.n	800c294 <__strtok_r+0x34>
 800c26c:	0004      	movs	r4, r0
 800c26e:	0020      	movs	r0, r4
 800c270:	000e      	movs	r6, r1
 800c272:	7805      	ldrb	r5, [r0, #0]
 800c274:	3401      	adds	r4, #1
 800c276:	7837      	ldrb	r7, [r6, #0]
 800c278:	2f00      	cmp	r7, #0
 800c27a:	d104      	bne.n	800c286 <__strtok_r+0x26>
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	d10f      	bne.n	800c2a0 <__strtok_r+0x40>
 800c280:	0028      	movs	r0, r5
 800c282:	6015      	str	r5, [r2, #0]
 800c284:	e006      	b.n	800c294 <__strtok_r+0x34>
 800c286:	3601      	adds	r6, #1
 800c288:	42bd      	cmp	r5, r7
 800c28a:	d1f4      	bne.n	800c276 <__strtok_r+0x16>
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1ee      	bne.n	800c26e <__strtok_r+0xe>
 800c290:	6014      	str	r4, [r2, #0]
 800c292:	7003      	strb	r3, [r0, #0]
 800c294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c296:	002f      	movs	r7, r5
 800c298:	e00f      	b.n	800c2ba <__strtok_r+0x5a>
 800c29a:	3301      	adds	r3, #1
 800c29c:	2e00      	cmp	r6, #0
 800c29e:	d104      	bne.n	800c2aa <__strtok_r+0x4a>
 800c2a0:	0023      	movs	r3, r4
 800c2a2:	3401      	adds	r4, #1
 800c2a4:	781d      	ldrb	r5, [r3, #0]
 800c2a6:	0027      	movs	r7, r4
 800c2a8:	000b      	movs	r3, r1
 800c2aa:	781e      	ldrb	r6, [r3, #0]
 800c2ac:	42b5      	cmp	r5, r6
 800c2ae:	d1f4      	bne.n	800c29a <__strtok_r+0x3a>
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	d0f0      	beq.n	800c296 <__strtok_r+0x36>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	3c01      	subs	r4, #1
 800c2b8:	7023      	strb	r3, [r4, #0]
 800c2ba:	6017      	str	r7, [r2, #0]
 800c2bc:	e7ea      	b.n	800c294 <__strtok_r+0x34>

0800c2be <strstr>:
 800c2be:	780a      	ldrb	r2, [r1, #0]
 800c2c0:	b530      	push	{r4, r5, lr}
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d10c      	bne.n	800c2e0 <strstr+0x22>
 800c2c6:	bd30      	pop	{r4, r5, pc}
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d108      	bne.n	800c2de <strstr+0x20>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	5ccc      	ldrb	r4, [r1, r3]
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d0f8      	beq.n	800c2c6 <strstr+0x8>
 800c2d4:	5cc5      	ldrb	r5, [r0, r3]
 800c2d6:	42a5      	cmp	r5, r4
 800c2d8:	d101      	bne.n	800c2de <strstr+0x20>
 800c2da:	3301      	adds	r3, #1
 800c2dc:	e7f7      	b.n	800c2ce <strstr+0x10>
 800c2de:	3001      	adds	r0, #1
 800c2e0:	7803      	ldrb	r3, [r0, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <strstr+0xa>
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	e7ed      	b.n	800c2c6 <strstr+0x8>
	...

0800c2ec <__locale_mb_cur_max>:
 800c2ec:	2294      	movs	r2, #148	; 0x94
 800c2ee:	4b02      	ldr	r3, [pc, #8]	; (800c2f8 <__locale_mb_cur_max+0xc>)
 800c2f0:	0052      	lsls	r2, r2, #1
 800c2f2:	5c98      	ldrb	r0, [r3, r2]
 800c2f4:	4770      	bx	lr
 800c2f6:	46c0      	nop			; (mov r8, r8)
 800c2f8:	20000444 	.word	0x20000444

0800c2fc <_close_r>:
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	b570      	push	{r4, r5, r6, lr}
 800c300:	4d06      	ldr	r5, [pc, #24]	; (800c31c <_close_r+0x20>)
 800c302:	0004      	movs	r4, r0
 800c304:	0008      	movs	r0, r1
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	f7f7 fe69 	bl	8003fde <_close>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	d103      	bne.n	800c318 <_close_r+0x1c>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d000      	beq.n	800c318 <_close_r+0x1c>
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	bd70      	pop	{r4, r5, r6, pc}
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	20000da8 	.word	0x20000da8

0800c320 <_lseek_r>:
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	0004      	movs	r4, r0
 800c324:	0008      	movs	r0, r1
 800c326:	0011      	movs	r1, r2
 800c328:	001a      	movs	r2, r3
 800c32a:	2300      	movs	r3, #0
 800c32c:	4d05      	ldr	r5, [pc, #20]	; (800c344 <_lseek_r+0x24>)
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	f7f7 fe76 	bl	8004020 <_lseek>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d103      	bne.n	800c340 <_lseek_r+0x20>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d000      	beq.n	800c340 <_lseek_r+0x20>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20000da8 	.word	0x20000da8

0800c348 <_read_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	0004      	movs	r4, r0
 800c34c:	0008      	movs	r0, r1
 800c34e:	0011      	movs	r1, r2
 800c350:	001a      	movs	r2, r3
 800c352:	2300      	movs	r3, #0
 800c354:	4d05      	ldr	r5, [pc, #20]	; (800c36c <_read_r+0x24>)
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f7 fe08 	bl	8003f6c <_read>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d103      	bne.n	800c368 <_read_r+0x20>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d000      	beq.n	800c368 <_read_r+0x20>
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	46c0      	nop			; (mov r8, r8)
 800c36c:	20000da8 	.word	0x20000da8

0800c370 <_sbrk_r>:
 800c370:	2300      	movs	r3, #0
 800c372:	b570      	push	{r4, r5, r6, lr}
 800c374:	4d06      	ldr	r5, [pc, #24]	; (800c390 <_sbrk_r+0x20>)
 800c376:	0004      	movs	r4, r0
 800c378:	0008      	movs	r0, r1
 800c37a:	602b      	str	r3, [r5, #0]
 800c37c:	f7f7 fe5c 	bl	8004038 <_sbrk>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d103      	bne.n	800c38c <_sbrk_r+0x1c>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d000      	beq.n	800c38c <_sbrk_r+0x1c>
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	20000da8 	.word	0x20000da8

0800c394 <_write_r>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	0004      	movs	r4, r0
 800c398:	0008      	movs	r0, r1
 800c39a:	0011      	movs	r1, r2
 800c39c:	001a      	movs	r2, r3
 800c39e:	2300      	movs	r3, #0
 800c3a0:	4d05      	ldr	r5, [pc, #20]	; (800c3b8 <_write_r+0x24>)
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f7 fdff 	bl	8003fa6 <_write>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d103      	bne.n	800c3b4 <_write_r+0x20>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d000      	beq.n	800c3b4 <_write_r+0x20>
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}
 800c3b6:	46c0      	nop			; (mov r8, r8)
 800c3b8:	20000da8 	.word	0x20000da8

0800c3bc <__errno>:
 800c3bc:	4b01      	ldr	r3, [pc, #4]	; (800c3c4 <__errno+0x8>)
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	4770      	bx	lr
 800c3c2:	46c0      	nop			; (mov r8, r8)
 800c3c4:	200006d0 	.word	0x200006d0

0800c3c8 <__libc_init_array>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	2600      	movs	r6, #0
 800c3cc:	4c0c      	ldr	r4, [pc, #48]	; (800c400 <__libc_init_array+0x38>)
 800c3ce:	4d0d      	ldr	r5, [pc, #52]	; (800c404 <__libc_init_array+0x3c>)
 800c3d0:	1b64      	subs	r4, r4, r5
 800c3d2:	10a4      	asrs	r4, r4, #2
 800c3d4:	42a6      	cmp	r6, r4
 800c3d6:	d109      	bne.n	800c3ec <__libc_init_array+0x24>
 800c3d8:	2600      	movs	r6, #0
 800c3da:	f006 fc3f 	bl	8012c5c <_init>
 800c3de:	4c0a      	ldr	r4, [pc, #40]	; (800c408 <__libc_init_array+0x40>)
 800c3e0:	4d0a      	ldr	r5, [pc, #40]	; (800c40c <__libc_init_array+0x44>)
 800c3e2:	1b64      	subs	r4, r4, r5
 800c3e4:	10a4      	asrs	r4, r4, #2
 800c3e6:	42a6      	cmp	r6, r4
 800c3e8:	d105      	bne.n	800c3f6 <__libc_init_array+0x2e>
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	00b3      	lsls	r3, r6, #2
 800c3ee:	58eb      	ldr	r3, [r5, r3]
 800c3f0:	4798      	blx	r3
 800c3f2:	3601      	adds	r6, #1
 800c3f4:	e7ee      	b.n	800c3d4 <__libc_init_array+0xc>
 800c3f6:	00b3      	lsls	r3, r6, #2
 800c3f8:	58eb      	ldr	r3, [r5, r3]
 800c3fa:	4798      	blx	r3
 800c3fc:	3601      	adds	r6, #1
 800c3fe:	e7f2      	b.n	800c3e6 <__libc_init_array+0x1e>
 800c400:	08014d2c 	.word	0x08014d2c
 800c404:	08014d2c 	.word	0x08014d2c
 800c408:	08014d34 	.word	0x08014d34
 800c40c:	08014d2c 	.word	0x08014d2c

0800c410 <__retarget_lock_init_recursive>:
 800c410:	4770      	bx	lr

0800c412 <__retarget_lock_close_recursive>:
 800c412:	4770      	bx	lr

0800c414 <__retarget_lock_acquire_recursive>:
 800c414:	4770      	bx	lr

0800c416 <__retarget_lock_release_recursive>:
 800c416:	4770      	bx	lr

0800c418 <sysconf>:
 800c418:	2380      	movs	r3, #128	; 0x80
 800c41a:	b510      	push	{r4, lr}
 800c41c:	2808      	cmp	r0, #8
 800c41e:	d004      	beq.n	800c42a <sysconf+0x12>
 800c420:	f7ff ffcc 	bl	800c3bc <__errno>
 800c424:	2316      	movs	r3, #22
 800c426:	6003      	str	r3, [r0, #0]
 800c428:	3b17      	subs	r3, #23
 800c42a:	0018      	movs	r0, r3
 800c42c:	bd10      	pop	{r4, pc}

0800c42e <memcpy>:
 800c42e:	2300      	movs	r3, #0
 800c430:	b510      	push	{r4, lr}
 800c432:	429a      	cmp	r2, r3
 800c434:	d100      	bne.n	800c438 <memcpy+0xa>
 800c436:	bd10      	pop	{r4, pc}
 800c438:	5ccc      	ldrb	r4, [r1, r3]
 800c43a:	54c4      	strb	r4, [r0, r3]
 800c43c:	3301      	adds	r3, #1
 800c43e:	e7f8      	b.n	800c432 <memcpy+0x4>

0800c440 <nan>:
 800c440:	2000      	movs	r0, #0
 800c442:	4901      	ldr	r1, [pc, #4]	; (800c448 <nan+0x8>)
 800c444:	4770      	bx	lr
 800c446:	46c0      	nop			; (mov r8, r8)
 800c448:	7ff80000 	.word	0x7ff80000

0800c44c <nanf>:
 800c44c:	4800      	ldr	r0, [pc, #0]	; (800c450 <nanf+0x4>)
 800c44e:	4770      	bx	lr
 800c450:	7fc00000 	.word	0x7fc00000

0800c454 <register_fini>:
 800c454:	4b03      	ldr	r3, [pc, #12]	; (800c464 <register_fini+0x10>)
 800c456:	b510      	push	{r4, lr}
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <register_fini+0xe>
 800c45c:	4802      	ldr	r0, [pc, #8]	; (800c468 <register_fini+0x14>)
 800c45e:	f000 f805 	bl	800c46c <atexit>
 800c462:	bd10      	pop	{r4, pc}
 800c464:	00000000 	.word	0x00000000
 800c468:	080101c9 	.word	0x080101c9

0800c46c <atexit>:
 800c46c:	2300      	movs	r3, #0
 800c46e:	b510      	push	{r4, lr}
 800c470:	0001      	movs	r1, r0
 800c472:	001a      	movs	r2, r3
 800c474:	0018      	movs	r0, r3
 800c476:	f003 fef9 	bl	801026c <__register_exitproc>
 800c47a:	bd10      	pop	{r4, pc}

0800c47c <_malloc_trim_r>:
 800c47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c47e:	0004      	movs	r4, r0
 800c480:	2008      	movs	r0, #8
 800c482:	000d      	movs	r5, r1
 800c484:	f7ff ffc8 	bl	800c418 <sysconf>
 800c488:	0006      	movs	r6, r0
 800c48a:	0020      	movs	r0, r4
 800c48c:	f7fe fda4 	bl	800afd8 <__malloc_lock>
 800c490:	2203      	movs	r2, #3
 800c492:	4f21      	ldr	r7, [pc, #132]	; (800c518 <_malloc_trim_r+0x9c>)
 800c494:	0031      	movs	r1, r6
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4393      	bics	r3, r2
 800c49c:	1b58      	subs	r0, r3, r5
 800c49e:	3811      	subs	r0, #17
 800c4a0:	1980      	adds	r0, r0, r6
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	f7f3 fe4a 	bl	800013c <__udivsi3>
 800c4a8:	1e45      	subs	r5, r0, #1
 800c4aa:	4375      	muls	r5, r6
 800c4ac:	42ae      	cmp	r6, r5
 800c4ae:	dd04      	ble.n	800c4ba <_malloc_trim_r+0x3e>
 800c4b0:	0020      	movs	r0, r4
 800c4b2:	f7fe fd99 	bl	800afe8 <__malloc_unlock>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	0020      	movs	r0, r4
 800c4be:	f7ff ff57 	bl	800c370 <_sbrk_r>
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	9a01      	ldr	r2, [sp, #4]
 800c4c6:	189b      	adds	r3, r3, r2
 800c4c8:	4298      	cmp	r0, r3
 800c4ca:	d1f1      	bne.n	800c4b0 <_malloc_trim_r+0x34>
 800c4cc:	0020      	movs	r0, r4
 800c4ce:	4269      	negs	r1, r5
 800c4d0:	f7ff ff4e 	bl	800c370 <_sbrk_r>
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	d110      	bne.n	800c4fa <_malloc_trim_r+0x7e>
 800c4d8:	2100      	movs	r1, #0
 800c4da:	0020      	movs	r0, r4
 800c4dc:	f7ff ff48 	bl	800c370 <_sbrk_r>
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	1a81      	subs	r1, r0, r2
 800c4e4:	290f      	cmp	r1, #15
 800c4e6:	dde3      	ble.n	800c4b0 <_malloc_trim_r+0x34>
 800c4e8:	4d0c      	ldr	r5, [pc, #48]	; (800c51c <_malloc_trim_r+0xa0>)
 800c4ea:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <_malloc_trim_r+0xa4>)
 800c4ec:	682d      	ldr	r5, [r5, #0]
 800c4ee:	1b40      	subs	r0, r0, r5
 800c4f0:	6018      	str	r0, [r3, #0]
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	6053      	str	r3, [r2, #4]
 800c4f8:	e7da      	b.n	800c4b0 <_malloc_trim_r+0x34>
 800c4fa:	2601      	movs	r6, #1
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	1b5b      	subs	r3, r3, r5
 800c502:	4333      	orrs	r3, r6
 800c504:	6053      	str	r3, [r2, #4]
 800c506:	4a06      	ldr	r2, [pc, #24]	; (800c520 <_malloc_trim_r+0xa4>)
 800c508:	0020      	movs	r0, r4
 800c50a:	6813      	ldr	r3, [r2, #0]
 800c50c:	1b5b      	subs	r3, r3, r5
 800c50e:	6013      	str	r3, [r2, #0]
 800c510:	f7fe fd6a 	bl	800afe8 <__malloc_unlock>
 800c514:	0030      	movs	r0, r6
 800c516:	e7cf      	b.n	800c4b8 <_malloc_trim_r+0x3c>
 800c518:	20000028 	.word	0x20000028
 800c51c:	20000430 	.word	0x20000430
 800c520:	20000c38 	.word	0x20000c38

0800c524 <_free_r>:
 800c524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c526:	1e0d      	subs	r5, r1, #0
 800c528:	9001      	str	r0, [sp, #4]
 800c52a:	d02d      	beq.n	800c588 <_free_r+0x64>
 800c52c:	f7fe fd54 	bl	800afd8 <__malloc_lock>
 800c530:	2301      	movs	r3, #1
 800c532:	0029      	movs	r1, r5
 800c534:	469c      	mov	ip, r3
 800c536:	3908      	subs	r1, #8
 800c538:	684f      	ldr	r7, [r1, #4]
 800c53a:	4662      	mov	r2, ip
 800c53c:	003b      	movs	r3, r7
 800c53e:	4664      	mov	r4, ip
 800c540:	4393      	bics	r3, r2
 800c542:	18c8      	adds	r0, r1, r3
 800c544:	6845      	ldr	r5, [r0, #4]
 800c546:	3202      	adds	r2, #2
 800c548:	4395      	bics	r5, r2
 800c54a:	4a4a      	ldr	r2, [pc, #296]	; (800c674 <_free_r+0x150>)
 800c54c:	4027      	ands	r7, r4
 800c54e:	6896      	ldr	r6, [r2, #8]
 800c550:	4286      	cmp	r6, r0
 800c552:	d11a      	bne.n	800c58a <_free_r+0x66>
 800c554:	195b      	adds	r3, r3, r5
 800c556:	2f00      	cmp	r7, #0
 800c558:	d106      	bne.n	800c568 <_free_r+0x44>
 800c55a:	6808      	ldr	r0, [r1, #0]
 800c55c:	1a09      	subs	r1, r1, r0
 800c55e:	688d      	ldr	r5, [r1, #8]
 800c560:	181b      	adds	r3, r3, r0
 800c562:	68c8      	ldr	r0, [r1, #12]
 800c564:	60e8      	str	r0, [r5, #12]
 800c566:	6085      	str	r5, [r0, #8]
 800c568:	2001      	movs	r0, #1
 800c56a:	4318      	orrs	r0, r3
 800c56c:	6048      	str	r0, [r1, #4]
 800c56e:	6091      	str	r1, [r2, #8]
 800c570:	4a41      	ldr	r2, [pc, #260]	; (800c678 <_free_r+0x154>)
 800c572:	6812      	ldr	r2, [r2, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d804      	bhi.n	800c582 <_free_r+0x5e>
 800c578:	4b40      	ldr	r3, [pc, #256]	; (800c67c <_free_r+0x158>)
 800c57a:	9801      	ldr	r0, [sp, #4]
 800c57c:	6819      	ldr	r1, [r3, #0]
 800c57e:	f7ff ff7d 	bl	800c47c <_malloc_trim_r>
 800c582:	9801      	ldr	r0, [sp, #4]
 800c584:	f7fe fd30 	bl	800afe8 <__malloc_unlock>
 800c588:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c58a:	2600      	movs	r6, #0
 800c58c:	6045      	str	r5, [r0, #4]
 800c58e:	42b7      	cmp	r7, r6
 800c590:	d109      	bne.n	800c5a6 <_free_r+0x82>
 800c592:	680f      	ldr	r7, [r1, #0]
 800c594:	4c3a      	ldr	r4, [pc, #232]	; (800c680 <_free_r+0x15c>)
 800c596:	1bc9      	subs	r1, r1, r7
 800c598:	19db      	adds	r3, r3, r7
 800c59a:	688f      	ldr	r7, [r1, #8]
 800c59c:	42a7      	cmp	r7, r4
 800c59e:	d02c      	beq.n	800c5fa <_free_r+0xd6>
 800c5a0:	68cc      	ldr	r4, [r1, #12]
 800c5a2:	60fc      	str	r4, [r7, #12]
 800c5a4:	60a7      	str	r7, [r4, #8]
 800c5a6:	1947      	adds	r7, r0, r5
 800c5a8:	687c      	ldr	r4, [r7, #4]
 800c5aa:	2701      	movs	r7, #1
 800c5ac:	423c      	tst	r4, r7
 800c5ae:	d10b      	bne.n	800c5c8 <_free_r+0xa4>
 800c5b0:	195b      	adds	r3, r3, r5
 800c5b2:	6885      	ldr	r5, [r0, #8]
 800c5b4:	2e00      	cmp	r6, #0
 800c5b6:	d122      	bne.n	800c5fe <_free_r+0xda>
 800c5b8:	4c31      	ldr	r4, [pc, #196]	; (800c680 <_free_r+0x15c>)
 800c5ba:	42a5      	cmp	r5, r4
 800c5bc:	d11f      	bne.n	800c5fe <_free_r+0xda>
 800c5be:	003e      	movs	r6, r7
 800c5c0:	6151      	str	r1, [r2, #20]
 800c5c2:	6111      	str	r1, [r2, #16]
 800c5c4:	60cd      	str	r5, [r1, #12]
 800c5c6:	608d      	str	r5, [r1, #8]
 800c5c8:	2501      	movs	r5, #1
 800c5ca:	0028      	movs	r0, r5
 800c5cc:	4318      	orrs	r0, r3
 800c5ce:	6048      	str	r0, [r1, #4]
 800c5d0:	50cb      	str	r3, [r1, r3]
 800c5d2:	2e00      	cmp	r6, #0
 800c5d4:	d1d5      	bne.n	800c582 <_free_r+0x5e>
 800c5d6:	2080      	movs	r0, #128	; 0x80
 800c5d8:	0080      	lsls	r0, r0, #2
 800c5da:	4283      	cmp	r3, r0
 800c5dc:	d213      	bcs.n	800c606 <_free_r+0xe2>
 800c5de:	08d8      	lsrs	r0, r3, #3
 800c5e0:	095b      	lsrs	r3, r3, #5
 800c5e2:	409d      	lsls	r5, r3
 800c5e4:	6853      	ldr	r3, [r2, #4]
 800c5e6:	431d      	orrs	r5, r3
 800c5e8:	00c3      	lsls	r3, r0, #3
 800c5ea:	189b      	adds	r3, r3, r2
 800c5ec:	6055      	str	r5, [r2, #4]
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	60cb      	str	r3, [r1, #12]
 800c5f2:	608a      	str	r2, [r1, #8]
 800c5f4:	6099      	str	r1, [r3, #8]
 800c5f6:	60d1      	str	r1, [r2, #12]
 800c5f8:	e7c3      	b.n	800c582 <_free_r+0x5e>
 800c5fa:	4666      	mov	r6, ip
 800c5fc:	e7d3      	b.n	800c5a6 <_free_r+0x82>
 800c5fe:	68c0      	ldr	r0, [r0, #12]
 800c600:	60e8      	str	r0, [r5, #12]
 800c602:	6085      	str	r5, [r0, #8]
 800c604:	e7e0      	b.n	800c5c8 <_free_r+0xa4>
 800c606:	0a5d      	lsrs	r5, r3, #9
 800c608:	2d04      	cmp	r5, #4
 800c60a:	d812      	bhi.n	800c632 <_free_r+0x10e>
 800c60c:	0998      	lsrs	r0, r3, #6
 800c60e:	3038      	adds	r0, #56	; 0x38
 800c610:	00c6      	lsls	r6, r0, #3
 800c612:	18b6      	adds	r6, r6, r2
 800c614:	68b5      	ldr	r5, [r6, #8]
 800c616:	2703      	movs	r7, #3
 800c618:	42ae      	cmp	r6, r5
 800c61a:	d125      	bne.n	800c668 <_free_r+0x144>
 800c61c:	2301      	movs	r3, #1
 800c61e:	1080      	asrs	r0, r0, #2
 800c620:	4083      	lsls	r3, r0
 800c622:	6850      	ldr	r0, [r2, #4]
 800c624:	4303      	orrs	r3, r0
 800c626:	6053      	str	r3, [r2, #4]
 800c628:	60ce      	str	r6, [r1, #12]
 800c62a:	608d      	str	r5, [r1, #8]
 800c62c:	60b1      	str	r1, [r6, #8]
 800c62e:	60e9      	str	r1, [r5, #12]
 800c630:	e7a7      	b.n	800c582 <_free_r+0x5e>
 800c632:	2d14      	cmp	r5, #20
 800c634:	d802      	bhi.n	800c63c <_free_r+0x118>
 800c636:	0028      	movs	r0, r5
 800c638:	305b      	adds	r0, #91	; 0x5b
 800c63a:	e7e9      	b.n	800c610 <_free_r+0xec>
 800c63c:	2d54      	cmp	r5, #84	; 0x54
 800c63e:	d802      	bhi.n	800c646 <_free_r+0x122>
 800c640:	0b18      	lsrs	r0, r3, #12
 800c642:	306e      	adds	r0, #110	; 0x6e
 800c644:	e7e4      	b.n	800c610 <_free_r+0xec>
 800c646:	20aa      	movs	r0, #170	; 0xaa
 800c648:	0040      	lsls	r0, r0, #1
 800c64a:	4285      	cmp	r5, r0
 800c64c:	d802      	bhi.n	800c654 <_free_r+0x130>
 800c64e:	0bd8      	lsrs	r0, r3, #15
 800c650:	3077      	adds	r0, #119	; 0x77
 800c652:	e7dd      	b.n	800c610 <_free_r+0xec>
 800c654:	4e0b      	ldr	r6, [pc, #44]	; (800c684 <_free_r+0x160>)
 800c656:	207e      	movs	r0, #126	; 0x7e
 800c658:	42b5      	cmp	r5, r6
 800c65a:	d8d9      	bhi.n	800c610 <_free_r+0xec>
 800c65c:	0c98      	lsrs	r0, r3, #18
 800c65e:	307c      	adds	r0, #124	; 0x7c
 800c660:	e7d6      	b.n	800c610 <_free_r+0xec>
 800c662:	68ad      	ldr	r5, [r5, #8]
 800c664:	42ae      	cmp	r6, r5
 800c666:	d003      	beq.n	800c670 <_free_r+0x14c>
 800c668:	686a      	ldr	r2, [r5, #4]
 800c66a:	43ba      	bics	r2, r7
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d8f8      	bhi.n	800c662 <_free_r+0x13e>
 800c670:	68ee      	ldr	r6, [r5, #12]
 800c672:	e7d9      	b.n	800c628 <_free_r+0x104>
 800c674:	20000028 	.word	0x20000028
 800c678:	20000434 	.word	0x20000434
 800c67c:	20000c68 	.word	0x20000c68
 800c680:	20000030 	.word	0x20000030
 800c684:	00000554 	.word	0x00000554

0800c688 <rshift>:
 800c688:	0002      	movs	r2, r0
 800c68a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c68c:	6904      	ldr	r4, [r0, #16]
 800c68e:	114b      	asrs	r3, r1, #5
 800c690:	b085      	sub	sp, #20
 800c692:	3214      	adds	r2, #20
 800c694:	9302      	str	r3, [sp, #8]
 800c696:	114d      	asrs	r5, r1, #5
 800c698:	0013      	movs	r3, r2
 800c69a:	42ac      	cmp	r4, r5
 800c69c:	dd32      	ble.n	800c704 <rshift+0x7c>
 800c69e:	261f      	movs	r6, #31
 800c6a0:	000f      	movs	r7, r1
 800c6a2:	114b      	asrs	r3, r1, #5
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	00a5      	lsls	r5, r4, #2
 800c6a8:	18d3      	adds	r3, r2, r3
 800c6aa:	4037      	ands	r7, r6
 800c6ac:	1955      	adds	r5, r2, r5
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	9701      	str	r7, [sp, #4]
 800c6b2:	4231      	tst	r1, r6
 800c6b4:	d10d      	bne.n	800c6d2 <rshift+0x4a>
 800c6b6:	0016      	movs	r6, r2
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	428d      	cmp	r5, r1
 800c6bc:	d836      	bhi.n	800c72c <rshift+0xa4>
 800c6be:	9900      	ldr	r1, [sp, #0]
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	3903      	subs	r1, #3
 800c6c4:	428d      	cmp	r5, r1
 800c6c6:	d302      	bcc.n	800c6ce <rshift+0x46>
 800c6c8:	9b02      	ldr	r3, [sp, #8]
 800c6ca:	1ae4      	subs	r4, r4, r3
 800c6cc:	00a3      	lsls	r3, r4, #2
 800c6ce:	18d3      	adds	r3, r2, r3
 800c6d0:	e018      	b.n	800c704 <rshift+0x7c>
 800c6d2:	2120      	movs	r1, #32
 800c6d4:	9e01      	ldr	r6, [sp, #4]
 800c6d6:	9f01      	ldr	r7, [sp, #4]
 800c6d8:	1b89      	subs	r1, r1, r6
 800c6da:	9e00      	ldr	r6, [sp, #0]
 800c6dc:	9103      	str	r1, [sp, #12]
 800c6de:	ce02      	ldmia	r6!, {r1}
 800c6e0:	4694      	mov	ip, r2
 800c6e2:	40f9      	lsrs	r1, r7
 800c6e4:	42b5      	cmp	r5, r6
 800c6e6:	d816      	bhi.n	800c716 <rshift+0x8e>
 800c6e8:	9e00      	ldr	r6, [sp, #0]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	3601      	adds	r6, #1
 800c6ee:	42b5      	cmp	r5, r6
 800c6f0:	d303      	bcc.n	800c6fa <rshift+0x72>
 800c6f2:	9b02      	ldr	r3, [sp, #8]
 800c6f4:	1ae3      	subs	r3, r4, r3
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	3b04      	subs	r3, #4
 800c6fa:	18d3      	adds	r3, r2, r3
 800c6fc:	6019      	str	r1, [r3, #0]
 800c6fe:	2900      	cmp	r1, #0
 800c700:	d000      	beq.n	800c704 <rshift+0x7c>
 800c702:	3304      	adds	r3, #4
 800c704:	1a99      	subs	r1, r3, r2
 800c706:	1089      	asrs	r1, r1, #2
 800c708:	6101      	str	r1, [r0, #16]
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d101      	bne.n	800c712 <rshift+0x8a>
 800c70e:	2300      	movs	r3, #0
 800c710:	6143      	str	r3, [r0, #20]
 800c712:	b005      	add	sp, #20
 800c714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c716:	6837      	ldr	r7, [r6, #0]
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	409f      	lsls	r7, r3
 800c71c:	430f      	orrs	r7, r1
 800c71e:	4661      	mov	r1, ip
 800c720:	c180      	stmia	r1!, {r7}
 800c722:	468c      	mov	ip, r1
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	ce02      	ldmia	r6!, {r1}
 800c728:	40d9      	lsrs	r1, r3
 800c72a:	e7db      	b.n	800c6e4 <rshift+0x5c>
 800c72c:	c980      	ldmia	r1!, {r7}
 800c72e:	c680      	stmia	r6!, {r7}
 800c730:	e7c3      	b.n	800c6ba <rshift+0x32>

0800c732 <__hexdig_fun>:
 800c732:	0002      	movs	r2, r0
 800c734:	3a30      	subs	r2, #48	; 0x30
 800c736:	0003      	movs	r3, r0
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d802      	bhi.n	800c742 <__hexdig_fun+0x10>
 800c73c:	3b20      	subs	r3, #32
 800c73e:	b2d8      	uxtb	r0, r3
 800c740:	4770      	bx	lr
 800c742:	0002      	movs	r2, r0
 800c744:	3a61      	subs	r2, #97	; 0x61
 800c746:	2a05      	cmp	r2, #5
 800c748:	d801      	bhi.n	800c74e <__hexdig_fun+0x1c>
 800c74a:	3b47      	subs	r3, #71	; 0x47
 800c74c:	e7f7      	b.n	800c73e <__hexdig_fun+0xc>
 800c74e:	001a      	movs	r2, r3
 800c750:	3a41      	subs	r2, #65	; 0x41
 800c752:	2000      	movs	r0, #0
 800c754:	2a05      	cmp	r2, #5
 800c756:	d8f3      	bhi.n	800c740 <__hexdig_fun+0xe>
 800c758:	3b27      	subs	r3, #39	; 0x27
 800c75a:	e7f0      	b.n	800c73e <__hexdig_fun+0xc>

0800c75c <__gethex>:
 800c75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75e:	b089      	sub	sp, #36	; 0x24
 800c760:	9307      	str	r3, [sp, #28]
 800c762:	2302      	movs	r3, #2
 800c764:	9201      	str	r2, [sp, #4]
 800c766:	680a      	ldr	r2, [r1, #0]
 800c768:	425b      	negs	r3, r3
 800c76a:	9003      	str	r0, [sp, #12]
 800c76c:	9106      	str	r1, [sp, #24]
 800c76e:	1c96      	adds	r6, r2, #2
 800c770:	1a9b      	subs	r3, r3, r2
 800c772:	199a      	adds	r2, r3, r6
 800c774:	9600      	str	r6, [sp, #0]
 800c776:	9205      	str	r2, [sp, #20]
 800c778:	9a00      	ldr	r2, [sp, #0]
 800c77a:	3601      	adds	r6, #1
 800c77c:	7810      	ldrb	r0, [r2, #0]
 800c77e:	2830      	cmp	r0, #48	; 0x30
 800c780:	d0f7      	beq.n	800c772 <__gethex+0x16>
 800c782:	f7ff ffd6 	bl	800c732 <__hexdig_fun>
 800c786:	2300      	movs	r3, #0
 800c788:	001d      	movs	r5, r3
 800c78a:	9302      	str	r3, [sp, #8]
 800c78c:	4298      	cmp	r0, r3
 800c78e:	d11d      	bne.n	800c7cc <__gethex+0x70>
 800c790:	2201      	movs	r2, #1
 800c792:	49a6      	ldr	r1, [pc, #664]	; (800ca2c <__gethex+0x2d0>)
 800c794:	9800      	ldr	r0, [sp, #0]
 800c796:	f7ff fd33 	bl	800c200 <strncmp>
 800c79a:	0007      	movs	r7, r0
 800c79c:	42a8      	cmp	r0, r5
 800c79e:	d169      	bne.n	800c874 <__gethex+0x118>
 800c7a0:	9b00      	ldr	r3, [sp, #0]
 800c7a2:	0034      	movs	r4, r6
 800c7a4:	7858      	ldrb	r0, [r3, #1]
 800c7a6:	f7ff ffc4 	bl	800c732 <__hexdig_fun>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	42a8      	cmp	r0, r5
 800c7b0:	d02f      	beq.n	800c812 <__gethex+0xb6>
 800c7b2:	9600      	str	r6, [sp, #0]
 800c7b4:	9b00      	ldr	r3, [sp, #0]
 800c7b6:	7818      	ldrb	r0, [r3, #0]
 800c7b8:	2830      	cmp	r0, #48	; 0x30
 800c7ba:	d009      	beq.n	800c7d0 <__gethex+0x74>
 800c7bc:	f7ff ffb9 	bl	800c732 <__hexdig_fun>
 800c7c0:	4242      	negs	r2, r0
 800c7c2:	4142      	adcs	r2, r0
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	0035      	movs	r5, r6
 800c7c8:	9202      	str	r2, [sp, #8]
 800c7ca:	9305      	str	r3, [sp, #20]
 800c7cc:	9c00      	ldr	r4, [sp, #0]
 800c7ce:	e004      	b.n	800c7da <__gethex+0x7e>
 800c7d0:	9b00      	ldr	r3, [sp, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	e7ed      	b.n	800c7b4 <__gethex+0x58>
 800c7d8:	3401      	adds	r4, #1
 800c7da:	7820      	ldrb	r0, [r4, #0]
 800c7dc:	f7ff ffa9 	bl	800c732 <__hexdig_fun>
 800c7e0:	1e07      	subs	r7, r0, #0
 800c7e2:	d1f9      	bne.n	800c7d8 <__gethex+0x7c>
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	0020      	movs	r0, r4
 800c7e8:	4990      	ldr	r1, [pc, #576]	; (800ca2c <__gethex+0x2d0>)
 800c7ea:	f7ff fd09 	bl	800c200 <strncmp>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d10d      	bne.n	800c80e <__gethex+0xb2>
 800c7f2:	2d00      	cmp	r5, #0
 800c7f4:	d106      	bne.n	800c804 <__gethex+0xa8>
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	0025      	movs	r5, r4
 800c7fa:	7820      	ldrb	r0, [r4, #0]
 800c7fc:	f7ff ff99 	bl	800c732 <__hexdig_fun>
 800c800:	2800      	cmp	r0, #0
 800c802:	d102      	bne.n	800c80a <__gethex+0xae>
 800c804:	1b2d      	subs	r5, r5, r4
 800c806:	00af      	lsls	r7, r5, #2
 800c808:	e003      	b.n	800c812 <__gethex+0xb6>
 800c80a:	3401      	adds	r4, #1
 800c80c:	e7f5      	b.n	800c7fa <__gethex+0x9e>
 800c80e:	2d00      	cmp	r5, #0
 800c810:	d1f8      	bne.n	800c804 <__gethex+0xa8>
 800c812:	2220      	movs	r2, #32
 800c814:	7823      	ldrb	r3, [r4, #0]
 800c816:	0026      	movs	r6, r4
 800c818:	4393      	bics	r3, r2
 800c81a:	2b50      	cmp	r3, #80	; 0x50
 800c81c:	d11d      	bne.n	800c85a <__gethex+0xfe>
 800c81e:	7863      	ldrb	r3, [r4, #1]
 800c820:	2b2b      	cmp	r3, #43	; 0x2b
 800c822:	d02c      	beq.n	800c87e <__gethex+0x122>
 800c824:	2b2d      	cmp	r3, #45	; 0x2d
 800c826:	d02e      	beq.n	800c886 <__gethex+0x12a>
 800c828:	2300      	movs	r3, #0
 800c82a:	1c66      	adds	r6, r4, #1
 800c82c:	9304      	str	r3, [sp, #16]
 800c82e:	7830      	ldrb	r0, [r6, #0]
 800c830:	f7ff ff7f 	bl	800c732 <__hexdig_fun>
 800c834:	1e43      	subs	r3, r0, #1
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b18      	cmp	r3, #24
 800c83a:	d82b      	bhi.n	800c894 <__gethex+0x138>
 800c83c:	3810      	subs	r0, #16
 800c83e:	0005      	movs	r5, r0
 800c840:	7870      	ldrb	r0, [r6, #1]
 800c842:	f7ff ff76 	bl	800c732 <__hexdig_fun>
 800c846:	1e43      	subs	r3, r0, #1
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	3601      	adds	r6, #1
 800c84c:	2b18      	cmp	r3, #24
 800c84e:	d91c      	bls.n	800c88a <__gethex+0x12e>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d000      	beq.n	800c858 <__gethex+0xfc>
 800c856:	426d      	negs	r5, r5
 800c858:	197f      	adds	r7, r7, r5
 800c85a:	9b06      	ldr	r3, [sp, #24]
 800c85c:	601e      	str	r6, [r3, #0]
 800c85e:	9b02      	ldr	r3, [sp, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d019      	beq.n	800c898 <__gethex+0x13c>
 800c864:	2600      	movs	r6, #0
 800c866:	9b05      	ldr	r3, [sp, #20]
 800c868:	42b3      	cmp	r3, r6
 800c86a:	d100      	bne.n	800c86e <__gethex+0x112>
 800c86c:	3606      	adds	r6, #6
 800c86e:	0030      	movs	r0, r6
 800c870:	b009      	add	sp, #36	; 0x24
 800c872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c874:	2301      	movs	r3, #1
 800c876:	2700      	movs	r7, #0
 800c878:	9c00      	ldr	r4, [sp, #0]
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	e7c9      	b.n	800c812 <__gethex+0xb6>
 800c87e:	2300      	movs	r3, #0
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	1ca6      	adds	r6, r4, #2
 800c884:	e7d3      	b.n	800c82e <__gethex+0xd2>
 800c886:	2301      	movs	r3, #1
 800c888:	e7fa      	b.n	800c880 <__gethex+0x124>
 800c88a:	230a      	movs	r3, #10
 800c88c:	435d      	muls	r5, r3
 800c88e:	182d      	adds	r5, r5, r0
 800c890:	3d10      	subs	r5, #16
 800c892:	e7d5      	b.n	800c840 <__gethex+0xe4>
 800c894:	0026      	movs	r6, r4
 800c896:	e7e0      	b.n	800c85a <__gethex+0xfe>
 800c898:	9b00      	ldr	r3, [sp, #0]
 800c89a:	9902      	ldr	r1, [sp, #8]
 800c89c:	1ae3      	subs	r3, r4, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	2b07      	cmp	r3, #7
 800c8a2:	dc0a      	bgt.n	800c8ba <__gethex+0x15e>
 800c8a4:	9803      	ldr	r0, [sp, #12]
 800c8a6:	f000 fa5d 	bl	800cd64 <_Balloc>
 800c8aa:	1e05      	subs	r5, r0, #0
 800c8ac:	d108      	bne.n	800c8c0 <__gethex+0x164>
 800c8ae:	002a      	movs	r2, r5
 800c8b0:	21e4      	movs	r1, #228	; 0xe4
 800c8b2:	4b5f      	ldr	r3, [pc, #380]	; (800ca30 <__gethex+0x2d4>)
 800c8b4:	485f      	ldr	r0, [pc, #380]	; (800ca34 <__gethex+0x2d8>)
 800c8b6:	f003 fd19 	bl	80102ec <__assert_func>
 800c8ba:	3101      	adds	r1, #1
 800c8bc:	105b      	asrs	r3, r3, #1
 800c8be:	e7ef      	b.n	800c8a0 <__gethex+0x144>
 800c8c0:	0003      	movs	r3, r0
 800c8c2:	3314      	adds	r3, #20
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	001e      	movs	r6, r3
 800c8cc:	9304      	str	r3, [sp, #16]
 800c8ce:	9b00      	ldr	r3, [sp, #0]
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	d33f      	bcc.n	800c954 <__gethex+0x1f8>
 800c8d4:	9c05      	ldr	r4, [sp, #20]
 800c8d6:	9b02      	ldr	r3, [sp, #8]
 800c8d8:	c440      	stmia	r4!, {r6}
 800c8da:	1ae4      	subs	r4, r4, r3
 800c8dc:	10a4      	asrs	r4, r4, #2
 800c8de:	0030      	movs	r0, r6
 800c8e0:	612c      	str	r4, [r5, #16]
 800c8e2:	f000 fb01 	bl	800cee8 <__hi0bits>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	0164      	lsls	r4, r4, #5
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	1a26      	subs	r6, r4, r0
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	dd51      	ble.n	800c998 <__gethex+0x23c>
 800c8f4:	1af6      	subs	r6, r6, r3
 800c8f6:	0031      	movs	r1, r6
 800c8f8:	0028      	movs	r0, r5
 800c8fa:	f000 fe7b 	bl	800d5f4 <__any_on>
 800c8fe:	1e04      	subs	r4, r0, #0
 800c900:	d016      	beq.n	800c930 <__gethex+0x1d4>
 800c902:	2401      	movs	r4, #1
 800c904:	231f      	movs	r3, #31
 800c906:	0020      	movs	r0, r4
 800c908:	1e72      	subs	r2, r6, #1
 800c90a:	4013      	ands	r3, r2
 800c90c:	4098      	lsls	r0, r3
 800c90e:	0003      	movs	r3, r0
 800c910:	1151      	asrs	r1, r2, #5
 800c912:	9802      	ldr	r0, [sp, #8]
 800c914:	0089      	lsls	r1, r1, #2
 800c916:	5809      	ldr	r1, [r1, r0]
 800c918:	4219      	tst	r1, r3
 800c91a:	d009      	beq.n	800c930 <__gethex+0x1d4>
 800c91c:	42a2      	cmp	r2, r4
 800c91e:	dd06      	ble.n	800c92e <__gethex+0x1d2>
 800c920:	0028      	movs	r0, r5
 800c922:	1eb1      	subs	r1, r6, #2
 800c924:	f000 fe66 	bl	800d5f4 <__any_on>
 800c928:	3402      	adds	r4, #2
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d100      	bne.n	800c930 <__gethex+0x1d4>
 800c92e:	2402      	movs	r4, #2
 800c930:	0031      	movs	r1, r6
 800c932:	0028      	movs	r0, r5
 800c934:	f7ff fea8 	bl	800c688 <rshift>
 800c938:	19bf      	adds	r7, r7, r6
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	42bb      	cmp	r3, r7
 800c940:	da3a      	bge.n	800c9b8 <__gethex+0x25c>
 800c942:	0029      	movs	r1, r5
 800c944:	9803      	ldr	r0, [sp, #12]
 800c946:	f000 fa35 	bl	800cdb4 <_Bfree>
 800c94a:	2300      	movs	r3, #0
 800c94c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c94e:	26a3      	movs	r6, #163	; 0xa3
 800c950:	6013      	str	r3, [r2, #0]
 800c952:	e78c      	b.n	800c86e <__gethex+0x112>
 800c954:	3c01      	subs	r4, #1
 800c956:	7823      	ldrb	r3, [r4, #0]
 800c958:	2b2e      	cmp	r3, #46	; 0x2e
 800c95a:	d012      	beq.n	800c982 <__gethex+0x226>
 800c95c:	9b04      	ldr	r3, [sp, #16]
 800c95e:	2b20      	cmp	r3, #32
 800c960:	d104      	bne.n	800c96c <__gethex+0x210>
 800c962:	9b05      	ldr	r3, [sp, #20]
 800c964:	c340      	stmia	r3!, {r6}
 800c966:	2600      	movs	r6, #0
 800c968:	9305      	str	r3, [sp, #20]
 800c96a:	9604      	str	r6, [sp, #16]
 800c96c:	7820      	ldrb	r0, [r4, #0]
 800c96e:	f7ff fee0 	bl	800c732 <__hexdig_fun>
 800c972:	230f      	movs	r3, #15
 800c974:	4018      	ands	r0, r3
 800c976:	9b04      	ldr	r3, [sp, #16]
 800c978:	4098      	lsls	r0, r3
 800c97a:	3304      	adds	r3, #4
 800c97c:	4306      	orrs	r6, r0
 800c97e:	9304      	str	r3, [sp, #16]
 800c980:	e7a5      	b.n	800c8ce <__gethex+0x172>
 800c982:	9b00      	ldr	r3, [sp, #0]
 800c984:	42a3      	cmp	r3, r4
 800c986:	d8e9      	bhi.n	800c95c <__gethex+0x200>
 800c988:	2201      	movs	r2, #1
 800c98a:	0020      	movs	r0, r4
 800c98c:	4927      	ldr	r1, [pc, #156]	; (800ca2c <__gethex+0x2d0>)
 800c98e:	f7ff fc37 	bl	800c200 <strncmp>
 800c992:	2800      	cmp	r0, #0
 800c994:	d1e2      	bne.n	800c95c <__gethex+0x200>
 800c996:	e79a      	b.n	800c8ce <__gethex+0x172>
 800c998:	9b00      	ldr	r3, [sp, #0]
 800c99a:	2400      	movs	r4, #0
 800c99c:	429e      	cmp	r6, r3
 800c99e:	dacc      	bge.n	800c93a <__gethex+0x1de>
 800c9a0:	1b9e      	subs	r6, r3, r6
 800c9a2:	0029      	movs	r1, r5
 800c9a4:	0032      	movs	r2, r6
 800c9a6:	9803      	ldr	r0, [sp, #12]
 800c9a8:	f000 fbf0 	bl	800d18c <__lshift>
 800c9ac:	0003      	movs	r3, r0
 800c9ae:	3314      	adds	r3, #20
 800c9b0:	0005      	movs	r5, r0
 800c9b2:	1bbf      	subs	r7, r7, r6
 800c9b4:	9302      	str	r3, [sp, #8]
 800c9b6:	e7c0      	b.n	800c93a <__gethex+0x1de>
 800c9b8:	9b01      	ldr	r3, [sp, #4]
 800c9ba:	685e      	ldr	r6, [r3, #4]
 800c9bc:	42be      	cmp	r6, r7
 800c9be:	dd70      	ble.n	800caa2 <__gethex+0x346>
 800c9c0:	9b00      	ldr	r3, [sp, #0]
 800c9c2:	1bf6      	subs	r6, r6, r7
 800c9c4:	42b3      	cmp	r3, r6
 800c9c6:	dc37      	bgt.n	800ca38 <__gethex+0x2dc>
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d024      	beq.n	800ca1a <__gethex+0x2be>
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d026      	beq.n	800ca22 <__gethex+0x2c6>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d117      	bne.n	800ca08 <__gethex+0x2ac>
 800c9d8:	9b00      	ldr	r3, [sp, #0]
 800c9da:	42b3      	cmp	r3, r6
 800c9dc:	d114      	bne.n	800ca08 <__gethex+0x2ac>
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d10b      	bne.n	800c9fa <__gethex+0x29e>
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	9a07      	ldr	r2, [sp, #28]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	2662      	movs	r6, #98	; 0x62
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	9a02      	ldr	r2, [sp, #8]
 800c9f0:	612b      	str	r3, [r5, #16]
 800c9f2:	6013      	str	r3, [r2, #0]
 800c9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f6:	601d      	str	r5, [r3, #0]
 800c9f8:	e739      	b.n	800c86e <__gethex+0x112>
 800c9fa:	9900      	ldr	r1, [sp, #0]
 800c9fc:	0028      	movs	r0, r5
 800c9fe:	3901      	subs	r1, #1
 800ca00:	f000 fdf8 	bl	800d5f4 <__any_on>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d1ec      	bne.n	800c9e2 <__gethex+0x286>
 800ca08:	0029      	movs	r1, r5
 800ca0a:	9803      	ldr	r0, [sp, #12]
 800ca0c:	f000 f9d2 	bl	800cdb4 <_Bfree>
 800ca10:	2300      	movs	r3, #0
 800ca12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca14:	2650      	movs	r6, #80	; 0x50
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	e729      	b.n	800c86e <__gethex+0x112>
 800ca1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1f3      	bne.n	800ca08 <__gethex+0x2ac>
 800ca20:	e7df      	b.n	800c9e2 <__gethex+0x286>
 800ca22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1dc      	bne.n	800c9e2 <__gethex+0x286>
 800ca28:	e7ee      	b.n	800ca08 <__gethex+0x2ac>
 800ca2a:	46c0      	nop			; (mov r8, r8)
 800ca2c:	080148bc 	.word	0x080148bc
 800ca30:	08014a19 	.word	0x08014a19
 800ca34:	08014a2a 	.word	0x08014a2a
 800ca38:	1e77      	subs	r7, r6, #1
 800ca3a:	2c00      	cmp	r4, #0
 800ca3c:	d12f      	bne.n	800ca9e <__gethex+0x342>
 800ca3e:	2f00      	cmp	r7, #0
 800ca40:	d004      	beq.n	800ca4c <__gethex+0x2f0>
 800ca42:	0039      	movs	r1, r7
 800ca44:	0028      	movs	r0, r5
 800ca46:	f000 fdd5 	bl	800d5f4 <__any_on>
 800ca4a:	0004      	movs	r4, r0
 800ca4c:	231f      	movs	r3, #31
 800ca4e:	117a      	asrs	r2, r7, #5
 800ca50:	401f      	ands	r7, r3
 800ca52:	3b1e      	subs	r3, #30
 800ca54:	40bb      	lsls	r3, r7
 800ca56:	9902      	ldr	r1, [sp, #8]
 800ca58:	0092      	lsls	r2, r2, #2
 800ca5a:	5852      	ldr	r2, [r2, r1]
 800ca5c:	421a      	tst	r2, r3
 800ca5e:	d001      	beq.n	800ca64 <__gethex+0x308>
 800ca60:	2302      	movs	r3, #2
 800ca62:	431c      	orrs	r4, r3
 800ca64:	9b00      	ldr	r3, [sp, #0]
 800ca66:	0031      	movs	r1, r6
 800ca68:	1b9b      	subs	r3, r3, r6
 800ca6a:	2602      	movs	r6, #2
 800ca6c:	0028      	movs	r0, r5
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	f7ff fe0a 	bl	800c688 <rshift>
 800ca74:	9b01      	ldr	r3, [sp, #4]
 800ca76:	685f      	ldr	r7, [r3, #4]
 800ca78:	2c00      	cmp	r4, #0
 800ca7a:	d041      	beq.n	800cb00 <__gethex+0x3a4>
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d010      	beq.n	800caa6 <__gethex+0x34a>
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d012      	beq.n	800caae <__gethex+0x352>
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d106      	bne.n	800ca9a <__gethex+0x33e>
 800ca8c:	07a2      	lsls	r2, r4, #30
 800ca8e:	d504      	bpl.n	800ca9a <__gethex+0x33e>
 800ca90:	9a02      	ldr	r2, [sp, #8]
 800ca92:	6812      	ldr	r2, [r2, #0]
 800ca94:	4314      	orrs	r4, r2
 800ca96:	421c      	tst	r4, r3
 800ca98:	d10c      	bne.n	800cab4 <__gethex+0x358>
 800ca9a:	2310      	movs	r3, #16
 800ca9c:	e02f      	b.n	800cafe <__gethex+0x3a2>
 800ca9e:	2401      	movs	r4, #1
 800caa0:	e7d4      	b.n	800ca4c <__gethex+0x2f0>
 800caa2:	2601      	movs	r6, #1
 800caa4:	e7e8      	b.n	800ca78 <__gethex+0x31c>
 800caa6:	2301      	movs	r3, #1
 800caa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	930f      	str	r3, [sp, #60]	; 0x3c
 800caae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0f2      	beq.n	800ca9a <__gethex+0x33e>
 800cab4:	692b      	ldr	r3, [r5, #16]
 800cab6:	2000      	movs	r0, #0
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	002b      	movs	r3, r5
 800cac0:	9a04      	ldr	r2, [sp, #16]
 800cac2:	3314      	adds	r3, #20
 800cac4:	1899      	adds	r1, r3, r2
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	1c54      	adds	r4, r2, #1
 800caca:	d01e      	beq.n	800cb0a <__gethex+0x3ae>
 800cacc:	3201      	adds	r2, #1
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	002b      	movs	r3, r5
 800cad2:	3314      	adds	r3, #20
 800cad4:	2e02      	cmp	r6, #2
 800cad6:	d141      	bne.n	800cb5c <__gethex+0x400>
 800cad8:	9a01      	ldr	r2, [sp, #4]
 800cada:	9900      	ldr	r1, [sp, #0]
 800cadc:	6812      	ldr	r2, [r2, #0]
 800cade:	3a01      	subs	r2, #1
 800cae0:	428a      	cmp	r2, r1
 800cae2:	d10b      	bne.n	800cafc <__gethex+0x3a0>
 800cae4:	221f      	movs	r2, #31
 800cae6:	9800      	ldr	r0, [sp, #0]
 800cae8:	1149      	asrs	r1, r1, #5
 800caea:	4002      	ands	r2, r0
 800caec:	2001      	movs	r0, #1
 800caee:	0004      	movs	r4, r0
 800caf0:	4094      	lsls	r4, r2
 800caf2:	0089      	lsls	r1, r1, #2
 800caf4:	58cb      	ldr	r3, [r1, r3]
 800caf6:	4223      	tst	r3, r4
 800caf8:	d000      	beq.n	800cafc <__gethex+0x3a0>
 800cafa:	2601      	movs	r6, #1
 800cafc:	2320      	movs	r3, #32
 800cafe:	431e      	orrs	r6, r3
 800cb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb02:	601d      	str	r5, [r3, #0]
 800cb04:	9b07      	ldr	r3, [sp, #28]
 800cb06:	601f      	str	r7, [r3, #0]
 800cb08:	e6b1      	b.n	800c86e <__gethex+0x112>
 800cb0a:	c301      	stmia	r3!, {r0}
 800cb0c:	4299      	cmp	r1, r3
 800cb0e:	d8da      	bhi.n	800cac6 <__gethex+0x36a>
 800cb10:	68ab      	ldr	r3, [r5, #8]
 800cb12:	9a02      	ldr	r2, [sp, #8]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	db18      	blt.n	800cb4a <__gethex+0x3ee>
 800cb18:	6869      	ldr	r1, [r5, #4]
 800cb1a:	9803      	ldr	r0, [sp, #12]
 800cb1c:	3101      	adds	r1, #1
 800cb1e:	f000 f921 	bl	800cd64 <_Balloc>
 800cb22:	1e04      	subs	r4, r0, #0
 800cb24:	d104      	bne.n	800cb30 <__gethex+0x3d4>
 800cb26:	0022      	movs	r2, r4
 800cb28:	2184      	movs	r1, #132	; 0x84
 800cb2a:	4b1c      	ldr	r3, [pc, #112]	; (800cb9c <__gethex+0x440>)
 800cb2c:	481c      	ldr	r0, [pc, #112]	; (800cba0 <__gethex+0x444>)
 800cb2e:	e6c2      	b.n	800c8b6 <__gethex+0x15a>
 800cb30:	0029      	movs	r1, r5
 800cb32:	692a      	ldr	r2, [r5, #16]
 800cb34:	310c      	adds	r1, #12
 800cb36:	3202      	adds	r2, #2
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	300c      	adds	r0, #12
 800cb3c:	f7ff fc77 	bl	800c42e <memcpy>
 800cb40:	0029      	movs	r1, r5
 800cb42:	9803      	ldr	r0, [sp, #12]
 800cb44:	f000 f936 	bl	800cdb4 <_Bfree>
 800cb48:	0025      	movs	r5, r4
 800cb4a:	692b      	ldr	r3, [r5, #16]
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	612a      	str	r2, [r5, #16]
 800cb50:	2201      	movs	r2, #1
 800cb52:	3304      	adds	r3, #4
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	18eb      	adds	r3, r5, r3
 800cb58:	605a      	str	r2, [r3, #4]
 800cb5a:	e7b9      	b.n	800cad0 <__gethex+0x374>
 800cb5c:	692a      	ldr	r2, [r5, #16]
 800cb5e:	9902      	ldr	r1, [sp, #8]
 800cb60:	428a      	cmp	r2, r1
 800cb62:	dd09      	ble.n	800cb78 <__gethex+0x41c>
 800cb64:	2101      	movs	r1, #1
 800cb66:	0028      	movs	r0, r5
 800cb68:	f7ff fd8e 	bl	800c688 <rshift>
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	3701      	adds	r7, #1
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	42bb      	cmp	r3, r7
 800cb74:	dac1      	bge.n	800cafa <__gethex+0x39e>
 800cb76:	e6e4      	b.n	800c942 <__gethex+0x1e6>
 800cb78:	221f      	movs	r2, #31
 800cb7a:	9c00      	ldr	r4, [sp, #0]
 800cb7c:	9900      	ldr	r1, [sp, #0]
 800cb7e:	2601      	movs	r6, #1
 800cb80:	4014      	ands	r4, r2
 800cb82:	4211      	tst	r1, r2
 800cb84:	d0ba      	beq.n	800cafc <__gethex+0x3a0>
 800cb86:	9a04      	ldr	r2, [sp, #16]
 800cb88:	189b      	adds	r3, r3, r2
 800cb8a:	3b04      	subs	r3, #4
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	f000 f9ab 	bl	800cee8 <__hi0bits>
 800cb92:	2320      	movs	r3, #32
 800cb94:	1b1b      	subs	r3, r3, r4
 800cb96:	4298      	cmp	r0, r3
 800cb98:	dbe4      	blt.n	800cb64 <__gethex+0x408>
 800cb9a:	e7af      	b.n	800cafc <__gethex+0x3a0>
 800cb9c:	08014a19 	.word	0x08014a19
 800cba0:	08014a2a 	.word	0x08014a2a

0800cba4 <L_shift>:
 800cba4:	2308      	movs	r3, #8
 800cba6:	b570      	push	{r4, r5, r6, lr}
 800cba8:	2520      	movs	r5, #32
 800cbaa:	1a9a      	subs	r2, r3, r2
 800cbac:	0092      	lsls	r2, r2, #2
 800cbae:	1aad      	subs	r5, r5, r2
 800cbb0:	6843      	ldr	r3, [r0, #4]
 800cbb2:	6804      	ldr	r4, [r0, #0]
 800cbb4:	001e      	movs	r6, r3
 800cbb6:	40ae      	lsls	r6, r5
 800cbb8:	40d3      	lsrs	r3, r2
 800cbba:	4334      	orrs	r4, r6
 800cbbc:	6004      	str	r4, [r0, #0]
 800cbbe:	6043      	str	r3, [r0, #4]
 800cbc0:	3004      	adds	r0, #4
 800cbc2:	4288      	cmp	r0, r1
 800cbc4:	d3f4      	bcc.n	800cbb0 <L_shift+0xc>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__match>:
 800cbc8:	b530      	push	{r4, r5, lr}
 800cbca:	6803      	ldr	r3, [r0, #0]
 800cbcc:	780c      	ldrb	r4, [r1, #0]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	d102      	bne.n	800cbda <__match+0x12>
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	bd30      	pop	{r4, r5, pc}
 800cbda:	781a      	ldrb	r2, [r3, #0]
 800cbdc:	0015      	movs	r5, r2
 800cbde:	3d41      	subs	r5, #65	; 0x41
 800cbe0:	2d19      	cmp	r5, #25
 800cbe2:	d800      	bhi.n	800cbe6 <__match+0x1e>
 800cbe4:	3220      	adds	r2, #32
 800cbe6:	3101      	adds	r1, #1
 800cbe8:	42a2      	cmp	r2, r4
 800cbea:	d0ef      	beq.n	800cbcc <__match+0x4>
 800cbec:	2000      	movs	r0, #0
 800cbee:	e7f3      	b.n	800cbd8 <__match+0x10>

0800cbf0 <__hexnan>:
 800cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf2:	680b      	ldr	r3, [r1, #0]
 800cbf4:	b08b      	sub	sp, #44	; 0x2c
 800cbf6:	9201      	str	r2, [sp, #4]
 800cbf8:	9901      	ldr	r1, [sp, #4]
 800cbfa:	115a      	asrs	r2, r3, #5
 800cbfc:	0092      	lsls	r2, r2, #2
 800cbfe:	188a      	adds	r2, r1, r2
 800cc00:	9202      	str	r2, [sp, #8]
 800cc02:	0019      	movs	r1, r3
 800cc04:	221f      	movs	r2, #31
 800cc06:	4011      	ands	r1, r2
 800cc08:	9008      	str	r0, [sp, #32]
 800cc0a:	9106      	str	r1, [sp, #24]
 800cc0c:	4213      	tst	r3, r2
 800cc0e:	d002      	beq.n	800cc16 <__hexnan+0x26>
 800cc10:	9b02      	ldr	r3, [sp, #8]
 800cc12:	3304      	adds	r3, #4
 800cc14:	9302      	str	r3, [sp, #8]
 800cc16:	9b02      	ldr	r3, [sp, #8]
 800cc18:	2500      	movs	r5, #0
 800cc1a:	1f1f      	subs	r7, r3, #4
 800cc1c:	003e      	movs	r6, r7
 800cc1e:	003c      	movs	r4, r7
 800cc20:	9b08      	ldr	r3, [sp, #32]
 800cc22:	603d      	str	r5, [r7, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	9507      	str	r5, [sp, #28]
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	9503      	str	r5, [sp, #12]
 800cc2c:	9b05      	ldr	r3, [sp, #20]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	9309      	str	r3, [sp, #36]	; 0x24
 800cc32:	9b05      	ldr	r3, [sp, #20]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d028      	beq.n	800cc8e <__hexnan+0x9e>
 800cc3c:	9804      	ldr	r0, [sp, #16]
 800cc3e:	f7ff fd78 	bl	800c732 <__hexdig_fun>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d154      	bne.n	800ccf0 <__hexnan+0x100>
 800cc46:	9b04      	ldr	r3, [sp, #16]
 800cc48:	2b20      	cmp	r3, #32
 800cc4a:	d819      	bhi.n	800cc80 <__hexnan+0x90>
 800cc4c:	9b03      	ldr	r3, [sp, #12]
 800cc4e:	9a07      	ldr	r2, [sp, #28]
 800cc50:	4293      	cmp	r3, r2
 800cc52:	dd12      	ble.n	800cc7a <__hexnan+0x8a>
 800cc54:	42b4      	cmp	r4, r6
 800cc56:	d206      	bcs.n	800cc66 <__hexnan+0x76>
 800cc58:	2d07      	cmp	r5, #7
 800cc5a:	dc04      	bgt.n	800cc66 <__hexnan+0x76>
 800cc5c:	002a      	movs	r2, r5
 800cc5e:	0031      	movs	r1, r6
 800cc60:	0020      	movs	r0, r4
 800cc62:	f7ff ff9f 	bl	800cba4 <L_shift>
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	2508      	movs	r5, #8
 800cc6a:	429c      	cmp	r4, r3
 800cc6c:	d905      	bls.n	800cc7a <__hexnan+0x8a>
 800cc6e:	1f26      	subs	r6, r4, #4
 800cc70:	2500      	movs	r5, #0
 800cc72:	0034      	movs	r4, r6
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	6035      	str	r5, [r6, #0]
 800cc78:	9307      	str	r3, [sp, #28]
 800cc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7c:	9305      	str	r3, [sp, #20]
 800cc7e:	e7d5      	b.n	800cc2c <__hexnan+0x3c>
 800cc80:	9b04      	ldr	r3, [sp, #16]
 800cc82:	2b29      	cmp	r3, #41	; 0x29
 800cc84:	d159      	bne.n	800cd3a <__hexnan+0x14a>
 800cc86:	9b05      	ldr	r3, [sp, #20]
 800cc88:	9a08      	ldr	r2, [sp, #32]
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d052      	beq.n	800cd3a <__hexnan+0x14a>
 800cc94:	42b4      	cmp	r4, r6
 800cc96:	d206      	bcs.n	800cca6 <__hexnan+0xb6>
 800cc98:	2d07      	cmp	r5, #7
 800cc9a:	dc04      	bgt.n	800cca6 <__hexnan+0xb6>
 800cc9c:	002a      	movs	r2, r5
 800cc9e:	0031      	movs	r1, r6
 800cca0:	0020      	movs	r0, r4
 800cca2:	f7ff ff7f 	bl	800cba4 <L_shift>
 800cca6:	9b01      	ldr	r3, [sp, #4]
 800cca8:	429c      	cmp	r4, r3
 800ccaa:	d935      	bls.n	800cd18 <__hexnan+0x128>
 800ccac:	001a      	movs	r2, r3
 800ccae:	0023      	movs	r3, r4
 800ccb0:	cb02      	ldmia	r3!, {r1}
 800ccb2:	c202      	stmia	r2!, {r1}
 800ccb4:	429f      	cmp	r7, r3
 800ccb6:	d2fb      	bcs.n	800ccb0 <__hexnan+0xc0>
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	1c62      	adds	r2, r4, #1
 800ccbc:	1ed9      	subs	r1, r3, #3
 800ccbe:	2304      	movs	r3, #4
 800ccc0:	4291      	cmp	r1, r2
 800ccc2:	d305      	bcc.n	800ccd0 <__hexnan+0xe0>
 800ccc4:	9b02      	ldr	r3, [sp, #8]
 800ccc6:	3b04      	subs	r3, #4
 800ccc8:	1b1b      	subs	r3, r3, r4
 800ccca:	089b      	lsrs	r3, r3, #2
 800cccc:	3301      	adds	r3, #1
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	9a01      	ldr	r2, [sp, #4]
 800ccd2:	18d3      	adds	r3, r2, r3
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	c304      	stmia	r3!, {r2}
 800ccd8:	429f      	cmp	r7, r3
 800ccda:	d2fc      	bcs.n	800ccd6 <__hexnan+0xe6>
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d104      	bne.n	800ccec <__hexnan+0xfc>
 800cce2:	9b01      	ldr	r3, [sp, #4]
 800cce4:	429f      	cmp	r7, r3
 800cce6:	d126      	bne.n	800cd36 <__hexnan+0x146>
 800cce8:	2301      	movs	r3, #1
 800ccea:	603b      	str	r3, [r7, #0]
 800ccec:	2005      	movs	r0, #5
 800ccee:	e025      	b.n	800cd3c <__hexnan+0x14c>
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	3501      	adds	r5, #1
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	9303      	str	r3, [sp, #12]
 800ccf8:	2d08      	cmp	r5, #8
 800ccfa:	dd06      	ble.n	800cd0a <__hexnan+0x11a>
 800ccfc:	9b01      	ldr	r3, [sp, #4]
 800ccfe:	429c      	cmp	r4, r3
 800cd00:	d9bb      	bls.n	800cc7a <__hexnan+0x8a>
 800cd02:	2300      	movs	r3, #0
 800cd04:	2501      	movs	r5, #1
 800cd06:	3c04      	subs	r4, #4
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	220f      	movs	r2, #15
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	4010      	ands	r0, r2
 800cd10:	011b      	lsls	r3, r3, #4
 800cd12:	4303      	orrs	r3, r0
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	e7b0      	b.n	800cc7a <__hexnan+0x8a>
 800cd18:	9b06      	ldr	r3, [sp, #24]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0de      	beq.n	800ccdc <__hexnan+0xec>
 800cd1e:	2320      	movs	r3, #32
 800cd20:	9a06      	ldr	r2, [sp, #24]
 800cd22:	9902      	ldr	r1, [sp, #8]
 800cd24:	1a9b      	subs	r3, r3, r2
 800cd26:	2201      	movs	r2, #1
 800cd28:	4252      	negs	r2, r2
 800cd2a:	40da      	lsrs	r2, r3
 800cd2c:	3904      	subs	r1, #4
 800cd2e:	680b      	ldr	r3, [r1, #0]
 800cd30:	4013      	ands	r3, r2
 800cd32:	600b      	str	r3, [r1, #0]
 800cd34:	e7d2      	b.n	800ccdc <__hexnan+0xec>
 800cd36:	3f04      	subs	r7, #4
 800cd38:	e7d0      	b.n	800ccdc <__hexnan+0xec>
 800cd3a:	2004      	movs	r0, #4
 800cd3c:	b00b      	add	sp, #44	; 0x2c
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd40 <__ascii_mbtowc>:
 800cd40:	b082      	sub	sp, #8
 800cd42:	2900      	cmp	r1, #0
 800cd44:	d100      	bne.n	800cd48 <__ascii_mbtowc+0x8>
 800cd46:	a901      	add	r1, sp, #4
 800cd48:	1e10      	subs	r0, r2, #0
 800cd4a:	d006      	beq.n	800cd5a <__ascii_mbtowc+0x1a>
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d006      	beq.n	800cd5e <__ascii_mbtowc+0x1e>
 800cd50:	7813      	ldrb	r3, [r2, #0]
 800cd52:	600b      	str	r3, [r1, #0]
 800cd54:	7810      	ldrb	r0, [r2, #0]
 800cd56:	1e43      	subs	r3, r0, #1
 800cd58:	4198      	sbcs	r0, r3
 800cd5a:	b002      	add	sp, #8
 800cd5c:	4770      	bx	lr
 800cd5e:	2002      	movs	r0, #2
 800cd60:	4240      	negs	r0, r0
 800cd62:	e7fa      	b.n	800cd5a <__ascii_mbtowc+0x1a>

0800cd64 <_Balloc>:
 800cd64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cd66:	b570      	push	{r4, r5, r6, lr}
 800cd68:	0006      	movs	r6, r0
 800cd6a:	000c      	movs	r4, r1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d012      	beq.n	800cd96 <_Balloc+0x32>
 800cd70:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800cd72:	00a2      	lsls	r2, r4, #2
 800cd74:	189b      	adds	r3, r3, r2
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d115      	bne.n	800cda8 <_Balloc+0x44>
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	000d      	movs	r5, r1
 800cd80:	40a5      	lsls	r5, r4
 800cd82:	1d6a      	adds	r2, r5, #5
 800cd84:	0030      	movs	r0, r6
 800cd86:	0092      	lsls	r2, r2, #2
 800cd88:	f003 face 	bl	8010328 <_calloc_r>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d009      	beq.n	800cda4 <_Balloc+0x40>
 800cd90:	6044      	str	r4, [r0, #4]
 800cd92:	6085      	str	r5, [r0, #8]
 800cd94:	e00a      	b.n	800cdac <_Balloc+0x48>
 800cd96:	2221      	movs	r2, #33	; 0x21
 800cd98:	2104      	movs	r1, #4
 800cd9a:	f003 fac5 	bl	8010328 <_calloc_r>
 800cd9e:	6470      	str	r0, [r6, #68]	; 0x44
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d1e5      	bne.n	800cd70 <_Balloc+0xc>
 800cda4:	2000      	movs	r0, #0
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	6802      	ldr	r2, [r0, #0]
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	6103      	str	r3, [r0, #16]
 800cdb0:	60c3      	str	r3, [r0, #12]
 800cdb2:	e7f8      	b.n	800cda6 <_Balloc+0x42>

0800cdb4 <_Bfree>:
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	d006      	beq.n	800cdc6 <_Bfree+0x12>
 800cdb8:	684a      	ldr	r2, [r1, #4]
 800cdba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cdbc:	0092      	lsls	r2, r2, #2
 800cdbe:	189b      	adds	r3, r3, r2
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	600a      	str	r2, [r1, #0]
 800cdc4:	6019      	str	r1, [r3, #0]
 800cdc6:	4770      	bx	lr

0800cdc8 <__multadd>:
 800cdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdca:	000e      	movs	r6, r1
 800cdcc:	9001      	str	r0, [sp, #4]
 800cdce:	000c      	movs	r4, r1
 800cdd0:	001d      	movs	r5, r3
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	690f      	ldr	r7, [r1, #16]
 800cdd6:	3614      	adds	r6, #20
 800cdd8:	6833      	ldr	r3, [r6, #0]
 800cdda:	3001      	adds	r0, #1
 800cddc:	b299      	uxth	r1, r3
 800cdde:	4351      	muls	r1, r2
 800cde0:	0c1b      	lsrs	r3, r3, #16
 800cde2:	4353      	muls	r3, r2
 800cde4:	1949      	adds	r1, r1, r5
 800cde6:	0c0d      	lsrs	r5, r1, #16
 800cde8:	195b      	adds	r3, r3, r5
 800cdea:	0c1d      	lsrs	r5, r3, #16
 800cdec:	b289      	uxth	r1, r1
 800cdee:	041b      	lsls	r3, r3, #16
 800cdf0:	185b      	adds	r3, r3, r1
 800cdf2:	c608      	stmia	r6!, {r3}
 800cdf4:	4287      	cmp	r7, r0
 800cdf6:	dcef      	bgt.n	800cdd8 <__multadd+0x10>
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	d022      	beq.n	800ce42 <__multadd+0x7a>
 800cdfc:	68a3      	ldr	r3, [r4, #8]
 800cdfe:	42bb      	cmp	r3, r7
 800ce00:	dc19      	bgt.n	800ce36 <__multadd+0x6e>
 800ce02:	6861      	ldr	r1, [r4, #4]
 800ce04:	9801      	ldr	r0, [sp, #4]
 800ce06:	3101      	adds	r1, #1
 800ce08:	f7ff ffac 	bl	800cd64 <_Balloc>
 800ce0c:	1e06      	subs	r6, r0, #0
 800ce0e:	d105      	bne.n	800ce1c <__multadd+0x54>
 800ce10:	0032      	movs	r2, r6
 800ce12:	21ba      	movs	r1, #186	; 0xba
 800ce14:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <__multadd+0x80>)
 800ce16:	480d      	ldr	r0, [pc, #52]	; (800ce4c <__multadd+0x84>)
 800ce18:	f003 fa68 	bl	80102ec <__assert_func>
 800ce1c:	0021      	movs	r1, r4
 800ce1e:	6922      	ldr	r2, [r4, #16]
 800ce20:	310c      	adds	r1, #12
 800ce22:	3202      	adds	r2, #2
 800ce24:	0092      	lsls	r2, r2, #2
 800ce26:	300c      	adds	r0, #12
 800ce28:	f7ff fb01 	bl	800c42e <memcpy>
 800ce2c:	0021      	movs	r1, r4
 800ce2e:	9801      	ldr	r0, [sp, #4]
 800ce30:	f7ff ffc0 	bl	800cdb4 <_Bfree>
 800ce34:	0034      	movs	r4, r6
 800ce36:	1d3b      	adds	r3, r7, #4
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	18e3      	adds	r3, r4, r3
 800ce3c:	605d      	str	r5, [r3, #4]
 800ce3e:	1c7b      	adds	r3, r7, #1
 800ce40:	6123      	str	r3, [r4, #16]
 800ce42:	0020      	movs	r0, r4
 800ce44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	08014a19 	.word	0x08014a19
 800ce4c:	08014a8a 	.word	0x08014a8a

0800ce50 <__s2b>:
 800ce50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce52:	0006      	movs	r6, r0
 800ce54:	0018      	movs	r0, r3
 800ce56:	000c      	movs	r4, r1
 800ce58:	3008      	adds	r0, #8
 800ce5a:	2109      	movs	r1, #9
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	0015      	movs	r5, r2
 800ce60:	f7f3 f9f6 	bl	8000250 <__divsi3>
 800ce64:	2301      	movs	r3, #1
 800ce66:	2100      	movs	r1, #0
 800ce68:	4283      	cmp	r3, r0
 800ce6a:	db0a      	blt.n	800ce82 <__s2b+0x32>
 800ce6c:	0030      	movs	r0, r6
 800ce6e:	f7ff ff79 	bl	800cd64 <_Balloc>
 800ce72:	1e01      	subs	r1, r0, #0
 800ce74:	d108      	bne.n	800ce88 <__s2b+0x38>
 800ce76:	000a      	movs	r2, r1
 800ce78:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <__s2b+0x90>)
 800ce7a:	481a      	ldr	r0, [pc, #104]	; (800cee4 <__s2b+0x94>)
 800ce7c:	31d3      	adds	r1, #211	; 0xd3
 800ce7e:	f003 fa35 	bl	80102ec <__assert_func>
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	3101      	adds	r1, #1
 800ce86:	e7ef      	b.n	800ce68 <__s2b+0x18>
 800ce88:	9b08      	ldr	r3, [sp, #32]
 800ce8a:	6143      	str	r3, [r0, #20]
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	6103      	str	r3, [r0, #16]
 800ce90:	2d09      	cmp	r5, #9
 800ce92:	dd18      	ble.n	800cec6 <__s2b+0x76>
 800ce94:	0023      	movs	r3, r4
 800ce96:	3309      	adds	r3, #9
 800ce98:	001f      	movs	r7, r3
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	1964      	adds	r4, r4, r5
 800ce9e:	783b      	ldrb	r3, [r7, #0]
 800cea0:	220a      	movs	r2, #10
 800cea2:	0030      	movs	r0, r6
 800cea4:	3b30      	subs	r3, #48	; 0x30
 800cea6:	f7ff ff8f 	bl	800cdc8 <__multadd>
 800ceaa:	3701      	adds	r7, #1
 800ceac:	0001      	movs	r1, r0
 800ceae:	42a7      	cmp	r7, r4
 800ceb0:	d1f5      	bne.n	800ce9e <__s2b+0x4e>
 800ceb2:	002c      	movs	r4, r5
 800ceb4:	9b00      	ldr	r3, [sp, #0]
 800ceb6:	3c08      	subs	r4, #8
 800ceb8:	191c      	adds	r4, r3, r4
 800ceba:	002f      	movs	r7, r5
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	429f      	cmp	r7, r3
 800cec0:	db04      	blt.n	800cecc <__s2b+0x7c>
 800cec2:	0008      	movs	r0, r1
 800cec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cec6:	2509      	movs	r5, #9
 800cec8:	340a      	adds	r4, #10
 800ceca:	e7f6      	b.n	800ceba <__s2b+0x6a>
 800cecc:	1b63      	subs	r3, r4, r5
 800cece:	5ddb      	ldrb	r3, [r3, r7]
 800ced0:	220a      	movs	r2, #10
 800ced2:	0030      	movs	r0, r6
 800ced4:	3b30      	subs	r3, #48	; 0x30
 800ced6:	f7ff ff77 	bl	800cdc8 <__multadd>
 800ceda:	3701      	adds	r7, #1
 800cedc:	0001      	movs	r1, r0
 800cede:	e7ed      	b.n	800cebc <__s2b+0x6c>
 800cee0:	08014a19 	.word	0x08014a19
 800cee4:	08014a8a 	.word	0x08014a8a

0800cee8 <__hi0bits>:
 800cee8:	0003      	movs	r3, r0
 800ceea:	0c02      	lsrs	r2, r0, #16
 800ceec:	2000      	movs	r0, #0
 800ceee:	4282      	cmp	r2, r0
 800cef0:	d101      	bne.n	800cef6 <__hi0bits+0xe>
 800cef2:	041b      	lsls	r3, r3, #16
 800cef4:	3010      	adds	r0, #16
 800cef6:	0e1a      	lsrs	r2, r3, #24
 800cef8:	d101      	bne.n	800cefe <__hi0bits+0x16>
 800cefa:	3008      	adds	r0, #8
 800cefc:	021b      	lsls	r3, r3, #8
 800cefe:	0f1a      	lsrs	r2, r3, #28
 800cf00:	d101      	bne.n	800cf06 <__hi0bits+0x1e>
 800cf02:	3004      	adds	r0, #4
 800cf04:	011b      	lsls	r3, r3, #4
 800cf06:	0f9a      	lsrs	r2, r3, #30
 800cf08:	d101      	bne.n	800cf0e <__hi0bits+0x26>
 800cf0a:	3002      	adds	r0, #2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	db03      	blt.n	800cf1a <__hi0bits+0x32>
 800cf12:	3001      	adds	r0, #1
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	d400      	bmi.n	800cf1a <__hi0bits+0x32>
 800cf18:	2020      	movs	r0, #32
 800cf1a:	4770      	bx	lr

0800cf1c <__lo0bits>:
 800cf1c:	6803      	ldr	r3, [r0, #0]
 800cf1e:	0001      	movs	r1, r0
 800cf20:	2207      	movs	r2, #7
 800cf22:	0018      	movs	r0, r3
 800cf24:	4010      	ands	r0, r2
 800cf26:	4213      	tst	r3, r2
 800cf28:	d00d      	beq.n	800cf46 <__lo0bits+0x2a>
 800cf2a:	3a06      	subs	r2, #6
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	4213      	tst	r3, r2
 800cf30:	d105      	bne.n	800cf3e <__lo0bits+0x22>
 800cf32:	3002      	adds	r0, #2
 800cf34:	4203      	tst	r3, r0
 800cf36:	d003      	beq.n	800cf40 <__lo0bits+0x24>
 800cf38:	40d3      	lsrs	r3, r2
 800cf3a:	0010      	movs	r0, r2
 800cf3c:	600b      	str	r3, [r1, #0]
 800cf3e:	4770      	bx	lr
 800cf40:	089b      	lsrs	r3, r3, #2
 800cf42:	600b      	str	r3, [r1, #0]
 800cf44:	e7fb      	b.n	800cf3e <__lo0bits+0x22>
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	d101      	bne.n	800cf50 <__lo0bits+0x34>
 800cf4c:	2010      	movs	r0, #16
 800cf4e:	0c1b      	lsrs	r3, r3, #16
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	2a00      	cmp	r2, #0
 800cf54:	d101      	bne.n	800cf5a <__lo0bits+0x3e>
 800cf56:	3008      	adds	r0, #8
 800cf58:	0a1b      	lsrs	r3, r3, #8
 800cf5a:	071a      	lsls	r2, r3, #28
 800cf5c:	d101      	bne.n	800cf62 <__lo0bits+0x46>
 800cf5e:	3004      	adds	r0, #4
 800cf60:	091b      	lsrs	r3, r3, #4
 800cf62:	079a      	lsls	r2, r3, #30
 800cf64:	d101      	bne.n	800cf6a <__lo0bits+0x4e>
 800cf66:	3002      	adds	r0, #2
 800cf68:	089b      	lsrs	r3, r3, #2
 800cf6a:	07da      	lsls	r2, r3, #31
 800cf6c:	d4e9      	bmi.n	800cf42 <__lo0bits+0x26>
 800cf6e:	3001      	adds	r0, #1
 800cf70:	085b      	lsrs	r3, r3, #1
 800cf72:	d1e6      	bne.n	800cf42 <__lo0bits+0x26>
 800cf74:	2020      	movs	r0, #32
 800cf76:	e7e2      	b.n	800cf3e <__lo0bits+0x22>

0800cf78 <__i2b>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	000c      	movs	r4, r1
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	f7ff fef1 	bl	800cd64 <_Balloc>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d107      	bne.n	800cf96 <__i2b+0x1e>
 800cf86:	2146      	movs	r1, #70	; 0x46
 800cf88:	4c05      	ldr	r4, [pc, #20]	; (800cfa0 <__i2b+0x28>)
 800cf8a:	0002      	movs	r2, r0
 800cf8c:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <__i2b+0x2c>)
 800cf8e:	0020      	movs	r0, r4
 800cf90:	31ff      	adds	r1, #255	; 0xff
 800cf92:	f003 f9ab 	bl	80102ec <__assert_func>
 800cf96:	2301      	movs	r3, #1
 800cf98:	6144      	str	r4, [r0, #20]
 800cf9a:	6103      	str	r3, [r0, #16]
 800cf9c:	bd10      	pop	{r4, pc}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	08014a8a 	.word	0x08014a8a
 800cfa4:	08014a19 	.word	0x08014a19

0800cfa8 <__multiply>:
 800cfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfaa:	0015      	movs	r5, r2
 800cfac:	690a      	ldr	r2, [r1, #16]
 800cfae:	692b      	ldr	r3, [r5, #16]
 800cfb0:	000c      	movs	r4, r1
 800cfb2:	b08b      	sub	sp, #44	; 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	da01      	bge.n	800cfbc <__multiply+0x14>
 800cfb8:	002c      	movs	r4, r5
 800cfba:	000d      	movs	r5, r1
 800cfbc:	6927      	ldr	r7, [r4, #16]
 800cfbe:	692e      	ldr	r6, [r5, #16]
 800cfc0:	6861      	ldr	r1, [r4, #4]
 800cfc2:	19bb      	adds	r3, r7, r6
 800cfc4:	9303      	str	r3, [sp, #12]
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	19ba      	adds	r2, r7, r6
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	da00      	bge.n	800cfd0 <__multiply+0x28>
 800cfce:	3101      	adds	r1, #1
 800cfd0:	f7ff fec8 	bl	800cd64 <_Balloc>
 800cfd4:	9002      	str	r0, [sp, #8]
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d106      	bne.n	800cfe8 <__multiply+0x40>
 800cfda:	21b1      	movs	r1, #177	; 0xb1
 800cfdc:	4b48      	ldr	r3, [pc, #288]	; (800d100 <__multiply+0x158>)
 800cfde:	4849      	ldr	r0, [pc, #292]	; (800d104 <__multiply+0x15c>)
 800cfe0:	9a02      	ldr	r2, [sp, #8]
 800cfe2:	0049      	lsls	r1, r1, #1
 800cfe4:	f003 f982 	bl	80102ec <__assert_func>
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	2200      	movs	r2, #0
 800cfec:	3314      	adds	r3, #20
 800cfee:	469c      	mov	ip, r3
 800cff0:	19bb      	adds	r3, r7, r6
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4463      	add	r3, ip
 800cff6:	9304      	str	r3, [sp, #16]
 800cff8:	4663      	mov	r3, ip
 800cffa:	9904      	ldr	r1, [sp, #16]
 800cffc:	428b      	cmp	r3, r1
 800cffe:	d32a      	bcc.n	800d056 <__multiply+0xae>
 800d000:	0023      	movs	r3, r4
 800d002:	00bf      	lsls	r7, r7, #2
 800d004:	3314      	adds	r3, #20
 800d006:	3514      	adds	r5, #20
 800d008:	9308      	str	r3, [sp, #32]
 800d00a:	00b6      	lsls	r6, r6, #2
 800d00c:	19db      	adds	r3, r3, r7
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	19ab      	adds	r3, r5, r6
 800d012:	9309      	str	r3, [sp, #36]	; 0x24
 800d014:	2304      	movs	r3, #4
 800d016:	9306      	str	r3, [sp, #24]
 800d018:	0023      	movs	r3, r4
 800d01a:	9a05      	ldr	r2, [sp, #20]
 800d01c:	3315      	adds	r3, #21
 800d01e:	9501      	str	r5, [sp, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d305      	bcc.n	800d030 <__multiply+0x88>
 800d024:	1b13      	subs	r3, r2, r4
 800d026:	3b15      	subs	r3, #21
 800d028:	089b      	lsrs	r3, r3, #2
 800d02a:	3301      	adds	r3, #1
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	9306      	str	r3, [sp, #24]
 800d030:	9b01      	ldr	r3, [sp, #4]
 800d032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d034:	4293      	cmp	r3, r2
 800d036:	d310      	bcc.n	800d05a <__multiply+0xb2>
 800d038:	9b03      	ldr	r3, [sp, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dd05      	ble.n	800d04a <__multiply+0xa2>
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	3b04      	subs	r3, #4
 800d042:	9304      	str	r3, [sp, #16]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d056      	beq.n	800d0f8 <__multiply+0x150>
 800d04a:	9b02      	ldr	r3, [sp, #8]
 800d04c:	9a03      	ldr	r2, [sp, #12]
 800d04e:	0018      	movs	r0, r3
 800d050:	611a      	str	r2, [r3, #16]
 800d052:	b00b      	add	sp, #44	; 0x2c
 800d054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d056:	c304      	stmia	r3!, {r2}
 800d058:	e7cf      	b.n	800cffa <__multiply+0x52>
 800d05a:	9b01      	ldr	r3, [sp, #4]
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	b280      	uxth	r0, r0
 800d060:	2800      	cmp	r0, #0
 800d062:	d01e      	beq.n	800d0a2 <__multiply+0xfa>
 800d064:	4667      	mov	r7, ip
 800d066:	2500      	movs	r5, #0
 800d068:	9e08      	ldr	r6, [sp, #32]
 800d06a:	ce02      	ldmia	r6!, {r1}
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	9307      	str	r3, [sp, #28]
 800d070:	b28b      	uxth	r3, r1
 800d072:	4343      	muls	r3, r0
 800d074:	001a      	movs	r2, r3
 800d076:	466b      	mov	r3, sp
 800d078:	8b9b      	ldrh	r3, [r3, #28]
 800d07a:	18d3      	adds	r3, r2, r3
 800d07c:	195b      	adds	r3, r3, r5
 800d07e:	0c0d      	lsrs	r5, r1, #16
 800d080:	4345      	muls	r5, r0
 800d082:	9a07      	ldr	r2, [sp, #28]
 800d084:	0c11      	lsrs	r1, r2, #16
 800d086:	1869      	adds	r1, r5, r1
 800d088:	0c1a      	lsrs	r2, r3, #16
 800d08a:	188a      	adds	r2, r1, r2
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	0c15      	lsrs	r5, r2, #16
 800d090:	0412      	lsls	r2, r2, #16
 800d092:	431a      	orrs	r2, r3
 800d094:	9b05      	ldr	r3, [sp, #20]
 800d096:	c704      	stmia	r7!, {r2}
 800d098:	42b3      	cmp	r3, r6
 800d09a:	d8e6      	bhi.n	800d06a <__multiply+0xc2>
 800d09c:	4663      	mov	r3, ip
 800d09e:	9a06      	ldr	r2, [sp, #24]
 800d0a0:	509d      	str	r5, [r3, r2]
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	6818      	ldr	r0, [r3, #0]
 800d0a6:	0c00      	lsrs	r0, r0, #16
 800d0a8:	d020      	beq.n	800d0ec <__multiply+0x144>
 800d0aa:	4663      	mov	r3, ip
 800d0ac:	0025      	movs	r5, r4
 800d0ae:	4661      	mov	r1, ip
 800d0b0:	2700      	movs	r7, #0
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3514      	adds	r5, #20
 800d0b6:	682a      	ldr	r2, [r5, #0]
 800d0b8:	680e      	ldr	r6, [r1, #0]
 800d0ba:	b292      	uxth	r2, r2
 800d0bc:	4342      	muls	r2, r0
 800d0be:	0c36      	lsrs	r6, r6, #16
 800d0c0:	1992      	adds	r2, r2, r6
 800d0c2:	19d2      	adds	r2, r2, r7
 800d0c4:	0416      	lsls	r6, r2, #16
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	431e      	orrs	r6, r3
 800d0ca:	600e      	str	r6, [r1, #0]
 800d0cc:	cd40      	ldmia	r5!, {r6}
 800d0ce:	684b      	ldr	r3, [r1, #4]
 800d0d0:	0c36      	lsrs	r6, r6, #16
 800d0d2:	4346      	muls	r6, r0
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	0c12      	lsrs	r2, r2, #16
 800d0d8:	18f3      	adds	r3, r6, r3
 800d0da:	189b      	adds	r3, r3, r2
 800d0dc:	9a05      	ldr	r2, [sp, #20]
 800d0de:	0c1f      	lsrs	r7, r3, #16
 800d0e0:	3104      	adds	r1, #4
 800d0e2:	42aa      	cmp	r2, r5
 800d0e4:	d8e7      	bhi.n	800d0b6 <__multiply+0x10e>
 800d0e6:	4662      	mov	r2, ip
 800d0e8:	9906      	ldr	r1, [sp, #24]
 800d0ea:	5053      	str	r3, [r2, r1]
 800d0ec:	9b01      	ldr	r3, [sp, #4]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	449c      	add	ip, r3
 800d0f6:	e79b      	b.n	800d030 <__multiply+0x88>
 800d0f8:	9b03      	ldr	r3, [sp, #12]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	e79b      	b.n	800d038 <__multiply+0x90>
 800d100:	08014a19 	.word	0x08014a19
 800d104:	08014a8a 	.word	0x08014a8a

0800d108 <__pow5mult>:
 800d108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d10a:	2303      	movs	r3, #3
 800d10c:	0015      	movs	r5, r2
 800d10e:	0007      	movs	r7, r0
 800d110:	000e      	movs	r6, r1
 800d112:	401a      	ands	r2, r3
 800d114:	421d      	tst	r5, r3
 800d116:	d008      	beq.n	800d12a <__pow5mult+0x22>
 800d118:	491a      	ldr	r1, [pc, #104]	; (800d184 <__pow5mult+0x7c>)
 800d11a:	3a01      	subs	r2, #1
 800d11c:	0092      	lsls	r2, r2, #2
 800d11e:	5852      	ldr	r2, [r2, r1]
 800d120:	2300      	movs	r3, #0
 800d122:	0031      	movs	r1, r6
 800d124:	f7ff fe50 	bl	800cdc8 <__multadd>
 800d128:	0006      	movs	r6, r0
 800d12a:	10ad      	asrs	r5, r5, #2
 800d12c:	d027      	beq.n	800d17e <__pow5mult+0x76>
 800d12e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d130:	2c00      	cmp	r4, #0
 800d132:	d107      	bne.n	800d144 <__pow5mult+0x3c>
 800d134:	0038      	movs	r0, r7
 800d136:	4914      	ldr	r1, [pc, #80]	; (800d188 <__pow5mult+0x80>)
 800d138:	f7ff ff1e 	bl	800cf78 <__i2b>
 800d13c:	2300      	movs	r3, #0
 800d13e:	0004      	movs	r4, r0
 800d140:	6438      	str	r0, [r7, #64]	; 0x40
 800d142:	6003      	str	r3, [r0, #0]
 800d144:	2301      	movs	r3, #1
 800d146:	421d      	tst	r5, r3
 800d148:	d00a      	beq.n	800d160 <__pow5mult+0x58>
 800d14a:	0031      	movs	r1, r6
 800d14c:	0022      	movs	r2, r4
 800d14e:	0038      	movs	r0, r7
 800d150:	f7ff ff2a 	bl	800cfa8 <__multiply>
 800d154:	0031      	movs	r1, r6
 800d156:	9001      	str	r0, [sp, #4]
 800d158:	0038      	movs	r0, r7
 800d15a:	f7ff fe2b 	bl	800cdb4 <_Bfree>
 800d15e:	9e01      	ldr	r6, [sp, #4]
 800d160:	106d      	asrs	r5, r5, #1
 800d162:	d00c      	beq.n	800d17e <__pow5mult+0x76>
 800d164:	6820      	ldr	r0, [r4, #0]
 800d166:	2800      	cmp	r0, #0
 800d168:	d107      	bne.n	800d17a <__pow5mult+0x72>
 800d16a:	0022      	movs	r2, r4
 800d16c:	0021      	movs	r1, r4
 800d16e:	0038      	movs	r0, r7
 800d170:	f7ff ff1a 	bl	800cfa8 <__multiply>
 800d174:	2300      	movs	r3, #0
 800d176:	6020      	str	r0, [r4, #0]
 800d178:	6003      	str	r3, [r0, #0]
 800d17a:	0004      	movs	r4, r0
 800d17c:	e7e2      	b.n	800d144 <__pow5mult+0x3c>
 800d17e:	0030      	movs	r0, r6
 800d180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	08014bd8 	.word	0x08014bd8
 800d188:	00000271 	.word	0x00000271

0800d18c <__lshift>:
 800d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d18e:	000c      	movs	r4, r1
 800d190:	0017      	movs	r7, r2
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	1155      	asrs	r5, r2, #5
 800d196:	b087      	sub	sp, #28
 800d198:	18eb      	adds	r3, r5, r3
 800d19a:	9302      	str	r3, [sp, #8]
 800d19c:	3301      	adds	r3, #1
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	6849      	ldr	r1, [r1, #4]
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	9004      	str	r0, [sp, #16]
 800d1a6:	9a01      	ldr	r2, [sp, #4]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	db10      	blt.n	800d1ce <__lshift+0x42>
 800d1ac:	9804      	ldr	r0, [sp, #16]
 800d1ae:	f7ff fdd9 	bl	800cd64 <_Balloc>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	0002      	movs	r2, r0
 800d1b6:	0006      	movs	r6, r0
 800d1b8:	0019      	movs	r1, r3
 800d1ba:	3214      	adds	r2, #20
 800d1bc:	4298      	cmp	r0, r3
 800d1be:	d10c      	bne.n	800d1da <__lshift+0x4e>
 800d1c0:	31df      	adds	r1, #223	; 0xdf
 800d1c2:	0032      	movs	r2, r6
 800d1c4:	4b26      	ldr	r3, [pc, #152]	; (800d260 <__lshift+0xd4>)
 800d1c6:	4827      	ldr	r0, [pc, #156]	; (800d264 <__lshift+0xd8>)
 800d1c8:	31ff      	adds	r1, #255	; 0xff
 800d1ca:	f003 f88f 	bl	80102ec <__assert_func>
 800d1ce:	3101      	adds	r1, #1
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	e7e8      	b.n	800d1a6 <__lshift+0x1a>
 800d1d4:	0098      	lsls	r0, r3, #2
 800d1d6:	5011      	str	r1, [r2, r0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	42ab      	cmp	r3, r5
 800d1dc:	dbfa      	blt.n	800d1d4 <__lshift+0x48>
 800d1de:	43eb      	mvns	r3, r5
 800d1e0:	17db      	asrs	r3, r3, #31
 800d1e2:	401d      	ands	r5, r3
 800d1e4:	211f      	movs	r1, #31
 800d1e6:	0023      	movs	r3, r4
 800d1e8:	0038      	movs	r0, r7
 800d1ea:	00ad      	lsls	r5, r5, #2
 800d1ec:	1955      	adds	r5, r2, r5
 800d1ee:	6922      	ldr	r2, [r4, #16]
 800d1f0:	3314      	adds	r3, #20
 800d1f2:	0092      	lsls	r2, r2, #2
 800d1f4:	4008      	ands	r0, r1
 800d1f6:	4684      	mov	ip, r0
 800d1f8:	189a      	adds	r2, r3, r2
 800d1fa:	420f      	tst	r7, r1
 800d1fc:	d02a      	beq.n	800d254 <__lshift+0xc8>
 800d1fe:	3101      	adds	r1, #1
 800d200:	1a09      	subs	r1, r1, r0
 800d202:	9105      	str	r1, [sp, #20]
 800d204:	2100      	movs	r1, #0
 800d206:	9503      	str	r5, [sp, #12]
 800d208:	4667      	mov	r7, ip
 800d20a:	6818      	ldr	r0, [r3, #0]
 800d20c:	40b8      	lsls	r0, r7
 800d20e:	4308      	orrs	r0, r1
 800d210:	9903      	ldr	r1, [sp, #12]
 800d212:	c101      	stmia	r1!, {r0}
 800d214:	9103      	str	r1, [sp, #12]
 800d216:	9805      	ldr	r0, [sp, #20]
 800d218:	cb02      	ldmia	r3!, {r1}
 800d21a:	40c1      	lsrs	r1, r0
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d8f3      	bhi.n	800d208 <__lshift+0x7c>
 800d220:	0020      	movs	r0, r4
 800d222:	3015      	adds	r0, #21
 800d224:	2304      	movs	r3, #4
 800d226:	4282      	cmp	r2, r0
 800d228:	d304      	bcc.n	800d234 <__lshift+0xa8>
 800d22a:	1b13      	subs	r3, r2, r4
 800d22c:	3b15      	subs	r3, #21
 800d22e:	089b      	lsrs	r3, r3, #2
 800d230:	3301      	adds	r3, #1
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	50e9      	str	r1, [r5, r3]
 800d236:	2900      	cmp	r1, #0
 800d238:	d002      	beq.n	800d240 <__lshift+0xb4>
 800d23a:	9b02      	ldr	r3, [sp, #8]
 800d23c:	3302      	adds	r3, #2
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	9b01      	ldr	r3, [sp, #4]
 800d242:	9804      	ldr	r0, [sp, #16]
 800d244:	3b01      	subs	r3, #1
 800d246:	0021      	movs	r1, r4
 800d248:	6133      	str	r3, [r6, #16]
 800d24a:	f7ff fdb3 	bl	800cdb4 <_Bfree>
 800d24e:	0030      	movs	r0, r6
 800d250:	b007      	add	sp, #28
 800d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d254:	cb02      	ldmia	r3!, {r1}
 800d256:	c502      	stmia	r5!, {r1}
 800d258:	429a      	cmp	r2, r3
 800d25a:	d8fb      	bhi.n	800d254 <__lshift+0xc8>
 800d25c:	e7f0      	b.n	800d240 <__lshift+0xb4>
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	08014a19 	.word	0x08014a19
 800d264:	08014a8a 	.word	0x08014a8a

0800d268 <__mcmp>:
 800d268:	b530      	push	{r4, r5, lr}
 800d26a:	690b      	ldr	r3, [r1, #16]
 800d26c:	6904      	ldr	r4, [r0, #16]
 800d26e:	0002      	movs	r2, r0
 800d270:	1ae0      	subs	r0, r4, r3
 800d272:	429c      	cmp	r4, r3
 800d274:	d10e      	bne.n	800d294 <__mcmp+0x2c>
 800d276:	3214      	adds	r2, #20
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	3114      	adds	r1, #20
 800d27c:	0014      	movs	r4, r2
 800d27e:	18c9      	adds	r1, r1, r3
 800d280:	18d2      	adds	r2, r2, r3
 800d282:	3a04      	subs	r2, #4
 800d284:	3904      	subs	r1, #4
 800d286:	6815      	ldr	r5, [r2, #0]
 800d288:	680b      	ldr	r3, [r1, #0]
 800d28a:	429d      	cmp	r5, r3
 800d28c:	d003      	beq.n	800d296 <__mcmp+0x2e>
 800d28e:	2001      	movs	r0, #1
 800d290:	429d      	cmp	r5, r3
 800d292:	d303      	bcc.n	800d29c <__mcmp+0x34>
 800d294:	bd30      	pop	{r4, r5, pc}
 800d296:	4294      	cmp	r4, r2
 800d298:	d3f3      	bcc.n	800d282 <__mcmp+0x1a>
 800d29a:	e7fb      	b.n	800d294 <__mcmp+0x2c>
 800d29c:	4240      	negs	r0, r0
 800d29e:	e7f9      	b.n	800d294 <__mcmp+0x2c>

0800d2a0 <__mdiff>:
 800d2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a2:	000e      	movs	r6, r1
 800d2a4:	0007      	movs	r7, r0
 800d2a6:	0011      	movs	r1, r2
 800d2a8:	0030      	movs	r0, r6
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	0014      	movs	r4, r2
 800d2ae:	f7ff ffdb 	bl	800d268 <__mcmp>
 800d2b2:	1e05      	subs	r5, r0, #0
 800d2b4:	d110      	bne.n	800d2d8 <__mdiff+0x38>
 800d2b6:	0001      	movs	r1, r0
 800d2b8:	0038      	movs	r0, r7
 800d2ba:	f7ff fd53 	bl	800cd64 <_Balloc>
 800d2be:	1e02      	subs	r2, r0, #0
 800d2c0:	d104      	bne.n	800d2cc <__mdiff+0x2c>
 800d2c2:	4b3f      	ldr	r3, [pc, #252]	; (800d3c0 <__mdiff+0x120>)
 800d2c4:	483f      	ldr	r0, [pc, #252]	; (800d3c4 <__mdiff+0x124>)
 800d2c6:	4940      	ldr	r1, [pc, #256]	; (800d3c8 <__mdiff+0x128>)
 800d2c8:	f003 f810 	bl	80102ec <__assert_func>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	6145      	str	r5, [r0, #20]
 800d2d0:	6103      	str	r3, [r0, #16]
 800d2d2:	0010      	movs	r0, r2
 800d2d4:	b007      	add	sp, #28
 800d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d8:	2301      	movs	r3, #1
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	db04      	blt.n	800d2ea <__mdiff+0x4a>
 800d2e0:	0023      	movs	r3, r4
 800d2e2:	0034      	movs	r4, r6
 800d2e4:	001e      	movs	r6, r3
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	9301      	str	r3, [sp, #4]
 800d2ea:	0038      	movs	r0, r7
 800d2ec:	6861      	ldr	r1, [r4, #4]
 800d2ee:	f7ff fd39 	bl	800cd64 <_Balloc>
 800d2f2:	1e02      	subs	r2, r0, #0
 800d2f4:	d103      	bne.n	800d2fe <__mdiff+0x5e>
 800d2f6:	4b32      	ldr	r3, [pc, #200]	; (800d3c0 <__mdiff+0x120>)
 800d2f8:	4832      	ldr	r0, [pc, #200]	; (800d3c4 <__mdiff+0x124>)
 800d2fa:	4934      	ldr	r1, [pc, #208]	; (800d3cc <__mdiff+0x12c>)
 800d2fc:	e7e4      	b.n	800d2c8 <__mdiff+0x28>
 800d2fe:	9b01      	ldr	r3, [sp, #4]
 800d300:	2700      	movs	r7, #0
 800d302:	60c3      	str	r3, [r0, #12]
 800d304:	6920      	ldr	r0, [r4, #16]
 800d306:	3414      	adds	r4, #20
 800d308:	0083      	lsls	r3, r0, #2
 800d30a:	18e3      	adds	r3, r4, r3
 800d30c:	0021      	movs	r1, r4
 800d30e:	9401      	str	r4, [sp, #4]
 800d310:	0034      	movs	r4, r6
 800d312:	9302      	str	r3, [sp, #8]
 800d314:	6933      	ldr	r3, [r6, #16]
 800d316:	3414      	adds	r4, #20
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	18e3      	adds	r3, r4, r3
 800d31c:	9303      	str	r3, [sp, #12]
 800d31e:	0013      	movs	r3, r2
 800d320:	3314      	adds	r3, #20
 800d322:	469c      	mov	ip, r3
 800d324:	9305      	str	r3, [sp, #20]
 800d326:	9104      	str	r1, [sp, #16]
 800d328:	9b04      	ldr	r3, [sp, #16]
 800d32a:	cc02      	ldmia	r4!, {r1}
 800d32c:	cb20      	ldmia	r3!, {r5}
 800d32e:	9304      	str	r3, [sp, #16]
 800d330:	b2ab      	uxth	r3, r5
 800d332:	19df      	adds	r7, r3, r7
 800d334:	b28b      	uxth	r3, r1
 800d336:	1afb      	subs	r3, r7, r3
 800d338:	0c09      	lsrs	r1, r1, #16
 800d33a:	0c2d      	lsrs	r5, r5, #16
 800d33c:	1a6d      	subs	r5, r5, r1
 800d33e:	1419      	asrs	r1, r3, #16
 800d340:	1869      	adds	r1, r5, r1
 800d342:	b29b      	uxth	r3, r3
 800d344:	140f      	asrs	r7, r1, #16
 800d346:	0409      	lsls	r1, r1, #16
 800d348:	4319      	orrs	r1, r3
 800d34a:	4663      	mov	r3, ip
 800d34c:	c302      	stmia	r3!, {r1}
 800d34e:	469c      	mov	ip, r3
 800d350:	9b03      	ldr	r3, [sp, #12]
 800d352:	42a3      	cmp	r3, r4
 800d354:	d8e8      	bhi.n	800d328 <__mdiff+0x88>
 800d356:	0031      	movs	r1, r6
 800d358:	9c03      	ldr	r4, [sp, #12]
 800d35a:	3115      	adds	r1, #21
 800d35c:	2304      	movs	r3, #4
 800d35e:	428c      	cmp	r4, r1
 800d360:	d304      	bcc.n	800d36c <__mdiff+0xcc>
 800d362:	1ba3      	subs	r3, r4, r6
 800d364:	3b15      	subs	r3, #21
 800d366:	089b      	lsrs	r3, r3, #2
 800d368:	3301      	adds	r3, #1
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	9901      	ldr	r1, [sp, #4]
 800d36e:	18cd      	adds	r5, r1, r3
 800d370:	9905      	ldr	r1, [sp, #20]
 800d372:	002e      	movs	r6, r5
 800d374:	18cb      	adds	r3, r1, r3
 800d376:	469c      	mov	ip, r3
 800d378:	9902      	ldr	r1, [sp, #8]
 800d37a:	428e      	cmp	r6, r1
 800d37c:	d310      	bcc.n	800d3a0 <__mdiff+0x100>
 800d37e:	9e02      	ldr	r6, [sp, #8]
 800d380:	1ee9      	subs	r1, r5, #3
 800d382:	2400      	movs	r4, #0
 800d384:	428e      	cmp	r6, r1
 800d386:	d304      	bcc.n	800d392 <__mdiff+0xf2>
 800d388:	0031      	movs	r1, r6
 800d38a:	3103      	adds	r1, #3
 800d38c:	1b49      	subs	r1, r1, r5
 800d38e:	0889      	lsrs	r1, r1, #2
 800d390:	008c      	lsls	r4, r1, #2
 800d392:	191b      	adds	r3, r3, r4
 800d394:	3b04      	subs	r3, #4
 800d396:	6819      	ldr	r1, [r3, #0]
 800d398:	2900      	cmp	r1, #0
 800d39a:	d00f      	beq.n	800d3bc <__mdiff+0x11c>
 800d39c:	6110      	str	r0, [r2, #16]
 800d39e:	e798      	b.n	800d2d2 <__mdiff+0x32>
 800d3a0:	ce02      	ldmia	r6!, {r1}
 800d3a2:	b28c      	uxth	r4, r1
 800d3a4:	19e4      	adds	r4, r4, r7
 800d3a6:	0c0f      	lsrs	r7, r1, #16
 800d3a8:	1421      	asrs	r1, r4, #16
 800d3aa:	1879      	adds	r1, r7, r1
 800d3ac:	b2a4      	uxth	r4, r4
 800d3ae:	140f      	asrs	r7, r1, #16
 800d3b0:	0409      	lsls	r1, r1, #16
 800d3b2:	4321      	orrs	r1, r4
 800d3b4:	4664      	mov	r4, ip
 800d3b6:	c402      	stmia	r4!, {r1}
 800d3b8:	46a4      	mov	ip, r4
 800d3ba:	e7dd      	b.n	800d378 <__mdiff+0xd8>
 800d3bc:	3801      	subs	r0, #1
 800d3be:	e7e9      	b.n	800d394 <__mdiff+0xf4>
 800d3c0:	08014a19 	.word	0x08014a19
 800d3c4:	08014a8a 	.word	0x08014a8a
 800d3c8:	00000237 	.word	0x00000237
 800d3cc:	00000245 	.word	0x00000245

0800d3d0 <__ulp>:
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <__ulp+0x30>)
 800d3d4:	4019      	ands	r1, r3
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <__ulp+0x34>)
 800d3d8:	18c9      	adds	r1, r1, r3
 800d3da:	4281      	cmp	r1, r0
 800d3dc:	dc06      	bgt.n	800d3ec <__ulp+0x1c>
 800d3de:	4249      	negs	r1, r1
 800d3e0:	150b      	asrs	r3, r1, #20
 800d3e2:	2b13      	cmp	r3, #19
 800d3e4:	dc03      	bgt.n	800d3ee <__ulp+0x1e>
 800d3e6:	2180      	movs	r1, #128	; 0x80
 800d3e8:	0309      	lsls	r1, r1, #12
 800d3ea:	4119      	asrs	r1, r3
 800d3ec:	4770      	bx	lr
 800d3ee:	3b14      	subs	r3, #20
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	2b1e      	cmp	r3, #30
 800d3f4:	dc02      	bgt.n	800d3fc <__ulp+0x2c>
 800d3f6:	2080      	movs	r0, #128	; 0x80
 800d3f8:	0600      	lsls	r0, r0, #24
 800d3fa:	40d8      	lsrs	r0, r3
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	e7f5      	b.n	800d3ec <__ulp+0x1c>
 800d400:	7ff00000 	.word	0x7ff00000
 800d404:	fcc00000 	.word	0xfcc00000

0800d408 <__b2d>:
 800d408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d40a:	0006      	movs	r6, r0
 800d40c:	6903      	ldr	r3, [r0, #16]
 800d40e:	3614      	adds	r6, #20
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	18f3      	adds	r3, r6, r3
 800d414:	1f1d      	subs	r5, r3, #4
 800d416:	682c      	ldr	r4, [r5, #0]
 800d418:	000f      	movs	r7, r1
 800d41a:	0020      	movs	r0, r4
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	f7ff fd63 	bl	800cee8 <__hi0bits>
 800d422:	2220      	movs	r2, #32
 800d424:	1a12      	subs	r2, r2, r0
 800d426:	603a      	str	r2, [r7, #0]
 800d428:	0003      	movs	r3, r0
 800d42a:	4a1c      	ldr	r2, [pc, #112]	; (800d49c <__b2d+0x94>)
 800d42c:	280a      	cmp	r0, #10
 800d42e:	dc15      	bgt.n	800d45c <__b2d+0x54>
 800d430:	210b      	movs	r1, #11
 800d432:	0027      	movs	r7, r4
 800d434:	1a09      	subs	r1, r1, r0
 800d436:	40cf      	lsrs	r7, r1
 800d438:	433a      	orrs	r2, r7
 800d43a:	468c      	mov	ip, r1
 800d43c:	0011      	movs	r1, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	42ae      	cmp	r6, r5
 800d442:	d202      	bcs.n	800d44a <__b2d+0x42>
 800d444:	9a01      	ldr	r2, [sp, #4]
 800d446:	3a08      	subs	r2, #8
 800d448:	6812      	ldr	r2, [r2, #0]
 800d44a:	3315      	adds	r3, #21
 800d44c:	409c      	lsls	r4, r3
 800d44e:	4663      	mov	r3, ip
 800d450:	0027      	movs	r7, r4
 800d452:	40da      	lsrs	r2, r3
 800d454:	4317      	orrs	r7, r2
 800d456:	0038      	movs	r0, r7
 800d458:	b003      	add	sp, #12
 800d45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d45c:	2700      	movs	r7, #0
 800d45e:	42ae      	cmp	r6, r5
 800d460:	d202      	bcs.n	800d468 <__b2d+0x60>
 800d462:	9d01      	ldr	r5, [sp, #4]
 800d464:	3d08      	subs	r5, #8
 800d466:	682f      	ldr	r7, [r5, #0]
 800d468:	210b      	movs	r1, #11
 800d46a:	4249      	negs	r1, r1
 800d46c:	468c      	mov	ip, r1
 800d46e:	449c      	add	ip, r3
 800d470:	2b0b      	cmp	r3, #11
 800d472:	d010      	beq.n	800d496 <__b2d+0x8e>
 800d474:	4661      	mov	r1, ip
 800d476:	2320      	movs	r3, #32
 800d478:	408c      	lsls	r4, r1
 800d47a:	1a5b      	subs	r3, r3, r1
 800d47c:	0039      	movs	r1, r7
 800d47e:	40d9      	lsrs	r1, r3
 800d480:	430c      	orrs	r4, r1
 800d482:	4322      	orrs	r2, r4
 800d484:	0011      	movs	r1, r2
 800d486:	2200      	movs	r2, #0
 800d488:	42b5      	cmp	r5, r6
 800d48a:	d901      	bls.n	800d490 <__b2d+0x88>
 800d48c:	3d04      	subs	r5, #4
 800d48e:	682a      	ldr	r2, [r5, #0]
 800d490:	4664      	mov	r4, ip
 800d492:	40a7      	lsls	r7, r4
 800d494:	e7dd      	b.n	800d452 <__b2d+0x4a>
 800d496:	4322      	orrs	r2, r4
 800d498:	0011      	movs	r1, r2
 800d49a:	e7dc      	b.n	800d456 <__b2d+0x4e>
 800d49c:	3ff00000 	.word	0x3ff00000

0800d4a0 <__d2b>:
 800d4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	0014      	movs	r4, r2
 800d4a6:	001d      	movs	r5, r3
 800d4a8:	9f08      	ldr	r7, [sp, #32]
 800d4aa:	f7ff fc5b 	bl	800cd64 <_Balloc>
 800d4ae:	1e06      	subs	r6, r0, #0
 800d4b0:	d105      	bne.n	800d4be <__d2b+0x1e>
 800d4b2:	0032      	movs	r2, r6
 800d4b4:	4b24      	ldr	r3, [pc, #144]	; (800d548 <__d2b+0xa8>)
 800d4b6:	4825      	ldr	r0, [pc, #148]	; (800d54c <__d2b+0xac>)
 800d4b8:	4925      	ldr	r1, [pc, #148]	; (800d550 <__d2b+0xb0>)
 800d4ba:	f002 ff17 	bl	80102ec <__assert_func>
 800d4be:	032b      	lsls	r3, r5, #12
 800d4c0:	006d      	lsls	r5, r5, #1
 800d4c2:	0b1b      	lsrs	r3, r3, #12
 800d4c4:	0d6d      	lsrs	r5, r5, #21
 800d4c6:	d125      	bne.n	800d514 <__d2b+0x74>
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	2c00      	cmp	r4, #0
 800d4cc:	d028      	beq.n	800d520 <__d2b+0x80>
 800d4ce:	4668      	mov	r0, sp
 800d4d0:	9400      	str	r4, [sp, #0]
 800d4d2:	f7ff fd23 	bl	800cf1c <__lo0bits>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	9900      	ldr	r1, [sp, #0]
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d01e      	beq.n	800d51c <__d2b+0x7c>
 800d4de:	2220      	movs	r2, #32
 800d4e0:	001c      	movs	r4, r3
 800d4e2:	1a12      	subs	r2, r2, r0
 800d4e4:	4094      	lsls	r4, r2
 800d4e6:	0022      	movs	r2, r4
 800d4e8:	40c3      	lsrs	r3, r0
 800d4ea:	430a      	orrs	r2, r1
 800d4ec:	6172      	str	r2, [r6, #20]
 800d4ee:	9301      	str	r3, [sp, #4]
 800d4f0:	9c01      	ldr	r4, [sp, #4]
 800d4f2:	61b4      	str	r4, [r6, #24]
 800d4f4:	1e63      	subs	r3, r4, #1
 800d4f6:	419c      	sbcs	r4, r3
 800d4f8:	3401      	adds	r4, #1
 800d4fa:	6134      	str	r4, [r6, #16]
 800d4fc:	2d00      	cmp	r5, #0
 800d4fe:	d017      	beq.n	800d530 <__d2b+0x90>
 800d500:	2435      	movs	r4, #53	; 0x35
 800d502:	4b14      	ldr	r3, [pc, #80]	; (800d554 <__d2b+0xb4>)
 800d504:	18ed      	adds	r5, r5, r3
 800d506:	182d      	adds	r5, r5, r0
 800d508:	603d      	str	r5, [r7, #0]
 800d50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50c:	1a24      	subs	r4, r4, r0
 800d50e:	601c      	str	r4, [r3, #0]
 800d510:	0030      	movs	r0, r6
 800d512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d514:	2280      	movs	r2, #128	; 0x80
 800d516:	0352      	lsls	r2, r2, #13
 800d518:	4313      	orrs	r3, r2
 800d51a:	e7d5      	b.n	800d4c8 <__d2b+0x28>
 800d51c:	6171      	str	r1, [r6, #20]
 800d51e:	e7e7      	b.n	800d4f0 <__d2b+0x50>
 800d520:	a801      	add	r0, sp, #4
 800d522:	f7ff fcfb 	bl	800cf1c <__lo0bits>
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	2401      	movs	r4, #1
 800d52a:	6173      	str	r3, [r6, #20]
 800d52c:	3020      	adds	r0, #32
 800d52e:	e7e4      	b.n	800d4fa <__d2b+0x5a>
 800d530:	4b09      	ldr	r3, [pc, #36]	; (800d558 <__d2b+0xb8>)
 800d532:	18c0      	adds	r0, r0, r3
 800d534:	4b09      	ldr	r3, [pc, #36]	; (800d55c <__d2b+0xbc>)
 800d536:	6038      	str	r0, [r7, #0]
 800d538:	18e3      	adds	r3, r4, r3
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	18f3      	adds	r3, r6, r3
 800d53e:	6958      	ldr	r0, [r3, #20]
 800d540:	f7ff fcd2 	bl	800cee8 <__hi0bits>
 800d544:	0164      	lsls	r4, r4, #5
 800d546:	e7e0      	b.n	800d50a <__d2b+0x6a>
 800d548:	08014a19 	.word	0x08014a19
 800d54c:	08014a8a 	.word	0x08014a8a
 800d550:	0000030f 	.word	0x0000030f
 800d554:	fffffbcd 	.word	0xfffffbcd
 800d558:	fffffbce 	.word	0xfffffbce
 800d55c:	3fffffff 	.word	0x3fffffff

0800d560 <__ratio>:
 800d560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d562:	b087      	sub	sp, #28
 800d564:	000f      	movs	r7, r1
 800d566:	a904      	add	r1, sp, #16
 800d568:	0006      	movs	r6, r0
 800d56a:	f7ff ff4d 	bl	800d408 <__b2d>
 800d56e:	9000      	str	r0, [sp, #0]
 800d570:	9101      	str	r1, [sp, #4]
 800d572:	9c00      	ldr	r4, [sp, #0]
 800d574:	9d01      	ldr	r5, [sp, #4]
 800d576:	0038      	movs	r0, r7
 800d578:	a905      	add	r1, sp, #20
 800d57a:	f7ff ff45 	bl	800d408 <__b2d>
 800d57e:	9002      	str	r0, [sp, #8]
 800d580:	9103      	str	r1, [sp, #12]
 800d582:	9a02      	ldr	r2, [sp, #8]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	6930      	ldr	r0, [r6, #16]
 800d588:	6939      	ldr	r1, [r7, #16]
 800d58a:	9e04      	ldr	r6, [sp, #16]
 800d58c:	1a40      	subs	r0, r0, r1
 800d58e:	9905      	ldr	r1, [sp, #20]
 800d590:	0140      	lsls	r0, r0, #5
 800d592:	1a71      	subs	r1, r6, r1
 800d594:	1841      	adds	r1, r0, r1
 800d596:	0508      	lsls	r0, r1, #20
 800d598:	2900      	cmp	r1, #0
 800d59a:	dd07      	ble.n	800d5ac <__ratio+0x4c>
 800d59c:	9901      	ldr	r1, [sp, #4]
 800d59e:	1845      	adds	r5, r0, r1
 800d5a0:	0020      	movs	r0, r4
 800d5a2:	0029      	movs	r1, r5
 800d5a4:	f7f3 fc68 	bl	8000e78 <__aeabi_ddiv>
 800d5a8:	b007      	add	sp, #28
 800d5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ac:	9903      	ldr	r1, [sp, #12]
 800d5ae:	1a0b      	subs	r3, r1, r0
 800d5b0:	e7f6      	b.n	800d5a0 <__ratio+0x40>

0800d5b2 <__copybits>:
 800d5b2:	b570      	push	{r4, r5, r6, lr}
 800d5b4:	0014      	movs	r4, r2
 800d5b6:	0005      	movs	r5, r0
 800d5b8:	3901      	subs	r1, #1
 800d5ba:	6913      	ldr	r3, [r2, #16]
 800d5bc:	1149      	asrs	r1, r1, #5
 800d5be:	3101      	adds	r1, #1
 800d5c0:	0089      	lsls	r1, r1, #2
 800d5c2:	3414      	adds	r4, #20
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	1841      	adds	r1, r0, r1
 800d5c8:	18e3      	adds	r3, r4, r3
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	d80d      	bhi.n	800d5ea <__copybits+0x38>
 800d5ce:	0014      	movs	r4, r2
 800d5d0:	3411      	adds	r4, #17
 800d5d2:	2500      	movs	r5, #0
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	d803      	bhi.n	800d5e0 <__copybits+0x2e>
 800d5d8:	1a9b      	subs	r3, r3, r2
 800d5da:	3b11      	subs	r3, #17
 800d5dc:	089b      	lsrs	r3, r3, #2
 800d5de:	009d      	lsls	r5, r3, #2
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	1940      	adds	r0, r0, r5
 800d5e4:	4281      	cmp	r1, r0
 800d5e6:	d803      	bhi.n	800d5f0 <__copybits+0x3e>
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ea:	cc40      	ldmia	r4!, {r6}
 800d5ec:	c540      	stmia	r5!, {r6}
 800d5ee:	e7ec      	b.n	800d5ca <__copybits+0x18>
 800d5f0:	c008      	stmia	r0!, {r3}
 800d5f2:	e7f7      	b.n	800d5e4 <__copybits+0x32>

0800d5f4 <__any_on>:
 800d5f4:	0002      	movs	r2, r0
 800d5f6:	6900      	ldr	r0, [r0, #16]
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	3214      	adds	r2, #20
 800d5fc:	114b      	asrs	r3, r1, #5
 800d5fe:	4298      	cmp	r0, r3
 800d600:	db13      	blt.n	800d62a <__any_on+0x36>
 800d602:	dd0c      	ble.n	800d61e <__any_on+0x2a>
 800d604:	241f      	movs	r4, #31
 800d606:	0008      	movs	r0, r1
 800d608:	4020      	ands	r0, r4
 800d60a:	4221      	tst	r1, r4
 800d60c:	d007      	beq.n	800d61e <__any_on+0x2a>
 800d60e:	0099      	lsls	r1, r3, #2
 800d610:	588c      	ldr	r4, [r1, r2]
 800d612:	0021      	movs	r1, r4
 800d614:	40c1      	lsrs	r1, r0
 800d616:	4081      	lsls	r1, r0
 800d618:	2001      	movs	r0, #1
 800d61a:	428c      	cmp	r4, r1
 800d61c:	d104      	bne.n	800d628 <__any_on+0x34>
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	18d3      	adds	r3, r2, r3
 800d622:	4293      	cmp	r3, r2
 800d624:	d803      	bhi.n	800d62e <__any_on+0x3a>
 800d626:	2000      	movs	r0, #0
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	0003      	movs	r3, r0
 800d62c:	e7f7      	b.n	800d61e <__any_on+0x2a>
 800d62e:	3b04      	subs	r3, #4
 800d630:	6819      	ldr	r1, [r3, #0]
 800d632:	2900      	cmp	r1, #0
 800d634:	d0f5      	beq.n	800d622 <__any_on+0x2e>
 800d636:	2001      	movs	r0, #1
 800d638:	e7f6      	b.n	800d628 <__any_on+0x34>

0800d63a <__ascii_wctomb>:
 800d63a:	0003      	movs	r3, r0
 800d63c:	1e08      	subs	r0, r1, #0
 800d63e:	d005      	beq.n	800d64c <__ascii_wctomb+0x12>
 800d640:	2aff      	cmp	r2, #255	; 0xff
 800d642:	d904      	bls.n	800d64e <__ascii_wctomb+0x14>
 800d644:	228a      	movs	r2, #138	; 0x8a
 800d646:	2001      	movs	r0, #1
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	4240      	negs	r0, r0
 800d64c:	4770      	bx	lr
 800d64e:	2001      	movs	r0, #1
 800d650:	700a      	strb	r2, [r1, #0]
 800d652:	e7fb      	b.n	800d64c <__ascii_wctomb+0x12>

0800d654 <_svfprintf_r>:
 800d654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d656:	b0d9      	sub	sp, #356	; 0x164
 800d658:	001c      	movs	r4, r3
 800d65a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d65c:	9208      	str	r2, [sp, #32]
 800d65e:	900a      	str	r0, [sp, #40]	; 0x28
 800d660:	f002 fdae 	bl	80101c0 <_localeconv_r>
 800d664:	6803      	ldr	r3, [r0, #0]
 800d666:	0018      	movs	r0, r3
 800d668:	931c      	str	r3, [sp, #112]	; 0x70
 800d66a:	f7f2 fd4b 	bl	8000104 <strlen>
 800d66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d670:	9016      	str	r0, [sp, #88]	; 0x58
 800d672:	899b      	ldrh	r3, [r3, #12]
 800d674:	061b      	lsls	r3, r3, #24
 800d676:	d517      	bpl.n	800d6a8 <_svfprintf_r+0x54>
 800d678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d113      	bne.n	800d6a8 <_svfprintf_r+0x54>
 800d680:	2140      	movs	r1, #64	; 0x40
 800d682:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d684:	f7fd fa94 	bl	800abb0 <_malloc_r>
 800d688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d68a:	6018      	str	r0, [r3, #0]
 800d68c:	6118      	str	r0, [r3, #16]
 800d68e:	2800      	cmp	r0, #0
 800d690:	d107      	bne.n	800d6a2 <_svfprintf_r+0x4e>
 800d692:	230c      	movs	r3, #12
 800d694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d696:	6013      	str	r3, [r2, #0]
 800d698:	3b0d      	subs	r3, #13
 800d69a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d69c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d69e:	b059      	add	sp, #356	; 0x164
 800d6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a2:	2340      	movs	r3, #64	; 0x40
 800d6a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6a6:	6153      	str	r3, [r2, #20]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6b0:	930e      	str	r3, [sp, #56]	; 0x38
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9214      	str	r2, [sp, #80]	; 0x50
 800d6b6:	9315      	str	r3, [sp, #84]	; 0x54
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	af2f      	add	r7, sp, #188	; 0xbc
 800d6bc:	972c      	str	r7, [sp, #176]	; 0xb0
 800d6be:	931f      	str	r3, [sp, #124]	; 0x7c
 800d6c0:	931e      	str	r3, [sp, #120]	; 0x78
 800d6c2:	9312      	str	r3, [sp, #72]	; 0x48
 800d6c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d6c6:	931d      	str	r3, [sp, #116]	; 0x74
 800d6c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6ca:	9d08      	ldr	r5, [sp, #32]
 800d6cc:	782b      	ldrb	r3, [r5, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <_svfprintf_r+0x84>
 800d6d2:	2b25      	cmp	r3, #37	; 0x25
 800d6d4:	d000      	beq.n	800d6d8 <_svfprintf_r+0x84>
 800d6d6:	e091      	b.n	800d7fc <_svfprintf_r+0x1a8>
 800d6d8:	9b08      	ldr	r3, [sp, #32]
 800d6da:	1aee      	subs	r6, r5, r3
 800d6dc:	429d      	cmp	r5, r3
 800d6de:	d016      	beq.n	800d70e <_svfprintf_r+0xba>
 800d6e0:	603b      	str	r3, [r7, #0]
 800d6e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d6e4:	607e      	str	r6, [r7, #4]
 800d6e6:	199b      	adds	r3, r3, r6
 800d6e8:	932e      	str	r3, [sp, #184]	; 0xb8
 800d6ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800d6f2:	2b07      	cmp	r3, #7
 800d6f4:	dd08      	ble.n	800d708 <_svfprintf_r+0xb4>
 800d6f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800d6fc:	f004 f83a 	bl	8011774 <__ssprint_r>
 800d700:	2800      	cmp	r0, #0
 800d702:	d000      	beq.n	800d706 <_svfprintf_r+0xb2>
 800d704:	e1cf      	b.n	800daa6 <_svfprintf_r+0x452>
 800d706:	af2f      	add	r7, sp, #188	; 0xbc
 800d708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d70a:	199b      	adds	r3, r3, r6
 800d70c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d70e:	782b      	ldrb	r3, [r5, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <_svfprintf_r+0xc4>
 800d714:	f001 f99e 	bl	800ea54 <_svfprintf_r+0x1400>
 800d718:	221b      	movs	r2, #27
 800d71a:	2300      	movs	r3, #0
 800d71c:	a91e      	add	r1, sp, #120	; 0x78
 800d71e:	1852      	adds	r2, r2, r1
 800d720:	7013      	strb	r3, [r2, #0]
 800d722:	2201      	movs	r2, #1
 800d724:	001e      	movs	r6, r3
 800d726:	4252      	negs	r2, r2
 800d728:	3501      	adds	r5, #1
 800d72a:	9209      	str	r2, [sp, #36]	; 0x24
 800d72c:	9318      	str	r3, [sp, #96]	; 0x60
 800d72e:	1c6b      	adds	r3, r5, #1
 800d730:	9313      	str	r3, [sp, #76]	; 0x4c
 800d732:	782b      	ldrb	r3, [r5, #0]
 800d734:	930f      	str	r3, [sp, #60]	; 0x3c
 800d736:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d738:	3820      	subs	r0, #32
 800d73a:	285a      	cmp	r0, #90	; 0x5a
 800d73c:	d901      	bls.n	800d742 <_svfprintf_r+0xee>
 800d73e:	f000 fe20 	bl	800e382 <_svfprintf_r+0xd2e>
 800d742:	f7f2 fcf1 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d746:	0078      	.short	0x0078
 800d748:	061e061e 	.word	0x061e061e
 800d74c:	061e0082 	.word	0x061e0082
 800d750:	061e061e 	.word	0x061e061e
 800d754:	061e005d 	.word	0x061e005d
 800d758:	0084061e 	.word	0x0084061e
 800d75c:	061e008c 	.word	0x061e008c
 800d760:	0091008a 	.word	0x0091008a
 800d764:	00b2061e 	.word	0x00b2061e
 800d768:	00b400b4 	.word	0x00b400b4
 800d76c:	00b400b4 	.word	0x00b400b4
 800d770:	00b400b4 	.word	0x00b400b4
 800d774:	00b400b4 	.word	0x00b400b4
 800d778:	061e00b4 	.word	0x061e00b4
 800d77c:	061e061e 	.word	0x061e061e
 800d780:	061e061e 	.word	0x061e061e
 800d784:	061e061e 	.word	0x061e061e
 800d788:	061e013b 	.word	0x061e013b
 800d78c:	00f400e0 	.word	0x00f400e0
 800d790:	013b013b 	.word	0x013b013b
 800d794:	061e013b 	.word	0x061e013b
 800d798:	061e061e 	.word	0x061e061e
 800d79c:	00c7061e 	.word	0x00c7061e
 800d7a0:	061e061e 	.word	0x061e061e
 800d7a4:	061e04c7 	.word	0x061e04c7
 800d7a8:	061e061e 	.word	0x061e061e
 800d7ac:	061e050a 	.word	0x061e050a
 800d7b0:	061e052a 	.word	0x061e052a
 800d7b4:	055c061e 	.word	0x055c061e
 800d7b8:	061e061e 	.word	0x061e061e
 800d7bc:	061e061e 	.word	0x061e061e
 800d7c0:	061e061e 	.word	0x061e061e
 800d7c4:	061e061e 	.word	0x061e061e
 800d7c8:	061e013b 	.word	0x061e013b
 800d7cc:	00f600e0 	.word	0x00f600e0
 800d7d0:	013b013b 	.word	0x013b013b
 800d7d4:	00c9013b 	.word	0x00c9013b
 800d7d8:	00dc00f6 	.word	0x00dc00f6
 800d7dc:	00d5061e 	.word	0x00d5061e
 800d7e0:	04a7061e 	.word	0x04a7061e
 800d7e4:	04fa04c9 	.word	0x04fa04c9
 800d7e8:	061e00dc 	.word	0x061e00dc
 800d7ec:	0080050a 	.word	0x0080050a
 800d7f0:	061e052c 	.word	0x061e052c
 800d7f4:	057c061e 	.word	0x057c061e
 800d7f8:	0080061e 	.word	0x0080061e
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	e765      	b.n	800d6cc <_svfprintf_r+0x78>
 800d800:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d802:	f002 fcdd 	bl	80101c0 <_localeconv_r>
 800d806:	6843      	ldr	r3, [r0, #4]
 800d808:	0018      	movs	r0, r3
 800d80a:	931d      	str	r3, [sp, #116]	; 0x74
 800d80c:	f7f2 fc7a 	bl	8000104 <strlen>
 800d810:	901b      	str	r0, [sp, #108]	; 0x6c
 800d812:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d814:	f002 fcd4 	bl	80101c0 <_localeconv_r>
 800d818:	6883      	ldr	r3, [r0, #8]
 800d81a:	9312      	str	r3, [sp, #72]	; 0x48
 800d81c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d011      	beq.n	800d846 <_svfprintf_r+0x1f2>
 800d822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00e      	beq.n	800d846 <_svfprintf_r+0x1f2>
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00b      	beq.n	800d846 <_svfprintf_r+0x1f2>
 800d82e:	2380      	movs	r3, #128	; 0x80
 800d830:	00db      	lsls	r3, r3, #3
 800d832:	431e      	orrs	r6, r3
 800d834:	e007      	b.n	800d846 <_svfprintf_r+0x1f2>
 800d836:	231b      	movs	r3, #27
 800d838:	aa1e      	add	r2, sp, #120	; 0x78
 800d83a:	189b      	adds	r3, r3, r2
 800d83c:	781a      	ldrb	r2, [r3, #0]
 800d83e:	2a00      	cmp	r2, #0
 800d840:	d101      	bne.n	800d846 <_svfprintf_r+0x1f2>
 800d842:	3220      	adds	r2, #32
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d848:	e771      	b.n	800d72e <_svfprintf_r+0xda>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e7f1      	b.n	800d832 <_svfprintf_r+0x1de>
 800d84e:	cc08      	ldmia	r4!, {r3}
 800d850:	9318      	str	r3, [sp, #96]	; 0x60
 800d852:	2b00      	cmp	r3, #0
 800d854:	daf7      	bge.n	800d846 <_svfprintf_r+0x1f2>
 800d856:	425b      	negs	r3, r3
 800d858:	9318      	str	r3, [sp, #96]	; 0x60
 800d85a:	2304      	movs	r3, #4
 800d85c:	e7e9      	b.n	800d832 <_svfprintf_r+0x1de>
 800d85e:	231b      	movs	r3, #27
 800d860:	aa1e      	add	r2, sp, #120	; 0x78
 800d862:	189b      	adds	r3, r3, r2
 800d864:	222b      	movs	r2, #43	; 0x2b
 800d866:	e7ed      	b.n	800d844 <_svfprintf_r+0x1f0>
 800d868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d86a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	3301      	adds	r3, #1
 800d870:	920f      	str	r2, [sp, #60]	; 0x3c
 800d872:	2a2a      	cmp	r2, #42	; 0x2a
 800d874:	d010      	beq.n	800d898 <_svfprintf_r+0x244>
 800d876:	2200      	movs	r2, #0
 800d878:	9209      	str	r2, [sp, #36]	; 0x24
 800d87a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d87c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d87e:	3a30      	subs	r2, #48	; 0x30
 800d880:	2a09      	cmp	r2, #9
 800d882:	d900      	bls.n	800d886 <_svfprintf_r+0x232>
 800d884:	e757      	b.n	800d736 <_svfprintf_r+0xe2>
 800d886:	200a      	movs	r0, #10
 800d888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d88a:	4341      	muls	r1, r0
 800d88c:	188a      	adds	r2, r1, r2
 800d88e:	9209      	str	r2, [sp, #36]	; 0x24
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	3301      	adds	r3, #1
 800d894:	920f      	str	r2, [sp, #60]	; 0x3c
 800d896:	e7f0      	b.n	800d87a <_svfprintf_r+0x226>
 800d898:	cc04      	ldmia	r4!, {r2}
 800d89a:	9209      	str	r2, [sp, #36]	; 0x24
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	da02      	bge.n	800d8a6 <_svfprintf_r+0x252>
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	4252      	negs	r2, r2
 800d8a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d8a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8a8:	e7cd      	b.n	800d846 <_svfprintf_r+0x1f2>
 800d8aa:	2380      	movs	r3, #128	; 0x80
 800d8ac:	e7c1      	b.n	800d832 <_svfprintf_r+0x1de>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8b2:	9218      	str	r2, [sp, #96]	; 0x60
 800d8b4:	210a      	movs	r1, #10
 800d8b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8b8:	434a      	muls	r2, r1
 800d8ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8bc:	3930      	subs	r1, #48	; 0x30
 800d8be:	188a      	adds	r2, r1, r2
 800d8c0:	9218      	str	r2, [sp, #96]	; 0x60
 800d8c2:	001a      	movs	r2, r3
 800d8c4:	7812      	ldrb	r2, [r2, #0]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d8ca:	3a30      	subs	r2, #48	; 0x30
 800d8cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8ce:	2a09      	cmp	r2, #9
 800d8d0:	d9f0      	bls.n	800d8b4 <_svfprintf_r+0x260>
 800d8d2:	e730      	b.n	800d736 <_svfprintf_r+0xe2>
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	e7ac      	b.n	800d832 <_svfprintf_r+0x1de>
 800d8d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	2b68      	cmp	r3, #104	; 0x68
 800d8de:	d105      	bne.n	800d8ec <_svfprintf_r+0x298>
 800d8e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8e6:	2380      	movs	r3, #128	; 0x80
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	e7a2      	b.n	800d832 <_svfprintf_r+0x1de>
 800d8ec:	2340      	movs	r3, #64	; 0x40
 800d8ee:	e7a0      	b.n	800d832 <_svfprintf_r+0x1de>
 800d8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b6c      	cmp	r3, #108	; 0x6c
 800d8f6:	d104      	bne.n	800d902 <_svfprintf_r+0x2ae>
 800d8f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8fe:	2320      	movs	r3, #32
 800d900:	e797      	b.n	800d832 <_svfprintf_r+0x1de>
 800d902:	2310      	movs	r3, #16
 800d904:	e795      	b.n	800d832 <_svfprintf_r+0x1de>
 800d906:	0021      	movs	r1, r4
 800d908:	c904      	ldmia	r1!, {r2}
 800d90a:	ab3f      	add	r3, sp, #252	; 0xfc
 800d90c:	910d      	str	r1, [sp, #52]	; 0x34
 800d90e:	211b      	movs	r1, #27
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	2200      	movs	r2, #0
 800d914:	a81e      	add	r0, sp, #120	; 0x78
 800d916:	1809      	adds	r1, r1, r0
 800d918:	700a      	strb	r2, [r1, #0]
 800d91a:	920c      	str	r2, [sp, #48]	; 0x30
 800d91c:	3201      	adds	r2, #1
 800d91e:	9209      	str	r2, [sp, #36]	; 0x24
 800d920:	2200      	movs	r2, #0
 800d922:	9308      	str	r3, [sp, #32]
 800d924:	0015      	movs	r5, r2
 800d926:	9219      	str	r2, [sp, #100]	; 0x64
 800d928:	9210      	str	r2, [sp, #64]	; 0x40
 800d92a:	9211      	str	r2, [sp, #68]	; 0x44
 800d92c:	e1f1      	b.n	800dd12 <_svfprintf_r+0x6be>
 800d92e:	2310      	movs	r3, #16
 800d930:	431e      	orrs	r6, r3
 800d932:	06b3      	lsls	r3, r6, #26
 800d934:	d531      	bpl.n	800d99a <_svfprintf_r+0x346>
 800d936:	2307      	movs	r3, #7
 800d938:	3407      	adds	r4, #7
 800d93a:	439c      	bics	r4, r3
 800d93c:	0022      	movs	r2, r4
 800d93e:	ca18      	ldmia	r2!, {r3, r4}
 800d940:	9306      	str	r3, [sp, #24]
 800d942:	9407      	str	r4, [sp, #28]
 800d944:	920d      	str	r2, [sp, #52]	; 0x34
 800d946:	9a07      	ldr	r2, [sp, #28]
 800d948:	2301      	movs	r3, #1
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	da0b      	bge.n	800d966 <_svfprintf_r+0x312>
 800d94e:	9c06      	ldr	r4, [sp, #24]
 800d950:	9d07      	ldr	r5, [sp, #28]
 800d952:	2200      	movs	r2, #0
 800d954:	4261      	negs	r1, r4
 800d956:	41aa      	sbcs	r2, r5
 800d958:	9106      	str	r1, [sp, #24]
 800d95a:	9207      	str	r2, [sp, #28]
 800d95c:	221b      	movs	r2, #27
 800d95e:	a91e      	add	r1, sp, #120	; 0x78
 800d960:	1852      	adds	r2, r2, r1
 800d962:	212d      	movs	r1, #45	; 0x2d
 800d964:	7011      	strb	r1, [r2, #0]
 800d966:	9907      	ldr	r1, [sp, #28]
 800d968:	9a06      	ldr	r2, [sp, #24]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d96e:	3101      	adds	r1, #1
 800d970:	d101      	bne.n	800d976 <_svfprintf_r+0x322>
 800d972:	f001 f87b 	bl	800ea6c <_svfprintf_r+0x1418>
 800d976:	2180      	movs	r1, #128	; 0x80
 800d978:	0034      	movs	r4, r6
 800d97a:	438c      	bics	r4, r1
 800d97c:	2a00      	cmp	r2, #0
 800d97e:	d001      	beq.n	800d984 <_svfprintf_r+0x330>
 800d980:	f001 f879 	bl	800ea76 <_svfprintf_r+0x1422>
 800d984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d986:	2a00      	cmp	r2, #0
 800d988:	d101      	bne.n	800d98e <_svfprintf_r+0x33a>
 800d98a:	f000 fcef 	bl	800e36c <_svfprintf_r+0xd18>
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d001      	beq.n	800d996 <_svfprintf_r+0x342>
 800d992:	f001 f874 	bl	800ea7e <_svfprintf_r+0x142a>
 800d996:	f000 fc79 	bl	800e28c <_svfprintf_r+0xc38>
 800d99a:	0022      	movs	r2, r4
 800d99c:	ca08      	ldmia	r2!, {r3}
 800d99e:	920d      	str	r2, [sp, #52]	; 0x34
 800d9a0:	06f2      	lsls	r2, r6, #27
 800d9a2:	d503      	bpl.n	800d9ac <_svfprintf_r+0x358>
 800d9a4:	9306      	str	r3, [sp, #24]
 800d9a6:	17db      	asrs	r3, r3, #31
 800d9a8:	9307      	str	r3, [sp, #28]
 800d9aa:	e7cc      	b.n	800d946 <_svfprintf_r+0x2f2>
 800d9ac:	0672      	lsls	r2, r6, #25
 800d9ae:	d501      	bpl.n	800d9b4 <_svfprintf_r+0x360>
 800d9b0:	b21b      	sxth	r3, r3
 800d9b2:	e7f7      	b.n	800d9a4 <_svfprintf_r+0x350>
 800d9b4:	05b2      	lsls	r2, r6, #22
 800d9b6:	d5f5      	bpl.n	800d9a4 <_svfprintf_r+0x350>
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	e7f3      	b.n	800d9a4 <_svfprintf_r+0x350>
 800d9bc:	2307      	movs	r3, #7
 800d9be:	3407      	adds	r4, #7
 800d9c0:	439c      	bics	r4, r3
 800d9c2:	0022      	movs	r2, r4
 800d9c4:	ca18      	ldmia	r2!, {r3, r4}
 800d9c6:	920d      	str	r2, [sp, #52]	; 0x34
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	9314      	str	r3, [sp, #80]	; 0x50
 800d9cc:	9415      	str	r4, [sp, #84]	; 0x54
 800d9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d9d2:	005c      	lsls	r4, r3, #1
 800d9d4:	0864      	lsrs	r4, r4, #1
 800d9d6:	0028      	movs	r0, r5
 800d9d8:	0021      	movs	r1, r4
 800d9da:	4b3e      	ldr	r3, [pc, #248]	; (800dad4 <_svfprintf_r+0x480>)
 800d9dc:	4252      	negs	r2, r2
 800d9de:	f7f4 fc89 	bl	80022f4 <__aeabi_dcmpun>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d126      	bne.n	800da34 <_svfprintf_r+0x3e0>
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	0028      	movs	r0, r5
 800d9ea:	0021      	movs	r1, r4
 800d9ec:	4b39      	ldr	r3, [pc, #228]	; (800dad4 <_svfprintf_r+0x480>)
 800d9ee:	4252      	negs	r2, r2
 800d9f0:	f7f2 fd3a 	bl	8000468 <__aeabi_dcmple>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d11d      	bne.n	800da34 <_svfprintf_r+0x3e0>
 800d9f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d9fa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2300      	movs	r3, #0
 800da00:	f7f2 fd28 	bl	8000454 <__aeabi_dcmplt>
 800da04:	2800      	cmp	r0, #0
 800da06:	d004      	beq.n	800da12 <_svfprintf_r+0x3be>
 800da08:	231b      	movs	r3, #27
 800da0a:	aa1e      	add	r2, sp, #120	; 0x78
 800da0c:	189b      	adds	r3, r3, r2
 800da0e:	222d      	movs	r2, #45	; 0x2d
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	4b31      	ldr	r3, [pc, #196]	; (800dad8 <_svfprintf_r+0x484>)
 800da14:	9308      	str	r3, [sp, #32]
 800da16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da18:	2b47      	cmp	r3, #71	; 0x47
 800da1a:	dd01      	ble.n	800da20 <_svfprintf_r+0x3cc>
 800da1c:	4b2f      	ldr	r3, [pc, #188]	; (800dadc <_svfprintf_r+0x488>)
 800da1e:	9308      	str	r3, [sp, #32]
 800da20:	2380      	movs	r3, #128	; 0x80
 800da22:	439e      	bics	r6, r3
 800da24:	2300      	movs	r3, #0
 800da26:	930c      	str	r3, [sp, #48]	; 0x30
 800da28:	3303      	adds	r3, #3
 800da2a:	9309      	str	r3, [sp, #36]	; 0x24
 800da2c:	2300      	movs	r3, #0
 800da2e:	9319      	str	r3, [sp, #100]	; 0x64
 800da30:	f000 fc78 	bl	800e324 <_svfprintf_r+0xcd0>
 800da34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da38:	0010      	movs	r0, r2
 800da3a:	0019      	movs	r1, r3
 800da3c:	f7f4 fc5a 	bl	80022f4 <__aeabi_dcmpun>
 800da40:	2800      	cmp	r0, #0
 800da42:	d00e      	beq.n	800da62 <_svfprintf_r+0x40e>
 800da44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da46:	2b00      	cmp	r3, #0
 800da48:	da04      	bge.n	800da54 <_svfprintf_r+0x400>
 800da4a:	231b      	movs	r3, #27
 800da4c:	aa1e      	add	r2, sp, #120	; 0x78
 800da4e:	189b      	adds	r3, r3, r2
 800da50:	222d      	movs	r2, #45	; 0x2d
 800da52:	701a      	strb	r2, [r3, #0]
 800da54:	4b22      	ldr	r3, [pc, #136]	; (800dae0 <_svfprintf_r+0x48c>)
 800da56:	9308      	str	r3, [sp, #32]
 800da58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da5a:	2b47      	cmp	r3, #71	; 0x47
 800da5c:	dde0      	ble.n	800da20 <_svfprintf_r+0x3cc>
 800da5e:	4b21      	ldr	r3, [pc, #132]	; (800dae4 <_svfprintf_r+0x490>)
 800da60:	e7dd      	b.n	800da1e <_svfprintf_r+0x3ca>
 800da62:	2320      	movs	r3, #32
 800da64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da66:	439a      	bics	r2, r3
 800da68:	9210      	str	r2, [sp, #64]	; 0x40
 800da6a:	2a41      	cmp	r2, #65	; 0x41
 800da6c:	d123      	bne.n	800dab6 <_svfprintf_r+0x462>
 800da6e:	2230      	movs	r2, #48	; 0x30
 800da70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da72:	ab25      	add	r3, sp, #148	; 0x94
 800da74:	701a      	strb	r2, [r3, #0]
 800da76:	3248      	adds	r2, #72	; 0x48
 800da78:	2961      	cmp	r1, #97	; 0x61
 800da7a:	d000      	beq.n	800da7e <_svfprintf_r+0x42a>
 800da7c:	3a20      	subs	r2, #32
 800da7e:	705a      	strb	r2, [r3, #1]
 800da80:	2302      	movs	r3, #2
 800da82:	431e      	orrs	r6, r3
 800da84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da86:	2b63      	cmp	r3, #99	; 0x63
 800da88:	dd2e      	ble.n	800dae8 <_svfprintf_r+0x494>
 800da8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da8c:	1c59      	adds	r1, r3, #1
 800da8e:	f7fd f88f 	bl	800abb0 <_malloc_r>
 800da92:	9008      	str	r0, [sp, #32]
 800da94:	2800      	cmp	r0, #0
 800da96:	d000      	beq.n	800da9a <_svfprintf_r+0x446>
 800da98:	e216      	b.n	800dec8 <_svfprintf_r+0x874>
 800da9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da9c:	899a      	ldrh	r2, [r3, #12]
 800da9e:	2340      	movs	r3, #64	; 0x40
 800daa0:	4313      	orrs	r3, r2
 800daa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daa4:	8193      	strh	r3, [r2, #12]
 800daa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa8:	899b      	ldrh	r3, [r3, #12]
 800daaa:	065b      	lsls	r3, r3, #25
 800daac:	d400      	bmi.n	800dab0 <_svfprintf_r+0x45c>
 800daae:	e5f5      	b.n	800d69c <_svfprintf_r+0x48>
 800dab0:	2301      	movs	r3, #1
 800dab2:	425b      	negs	r3, r3
 800dab4:	e5f1      	b.n	800d69a <_svfprintf_r+0x46>
 800dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab8:	900c      	str	r0, [sp, #48]	; 0x30
 800daba:	3301      	adds	r3, #1
 800dabc:	d100      	bne.n	800dac0 <_svfprintf_r+0x46c>
 800dabe:	e206      	b.n	800dece <_svfprintf_r+0x87a>
 800dac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dac2:	2b47      	cmp	r3, #71	; 0x47
 800dac4:	d114      	bne.n	800daf0 <_svfprintf_r+0x49c>
 800dac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d111      	bne.n	800daf0 <_svfprintf_r+0x49c>
 800dacc:	3301      	adds	r3, #1
 800dace:	9309      	str	r3, [sp, #36]	; 0x24
 800dad0:	e00e      	b.n	800daf0 <_svfprintf_r+0x49c>
 800dad2:	46c0      	nop			; (mov r8, r8)
 800dad4:	7fefffff 	.word	0x7fefffff
 800dad8:	08014be4 	.word	0x08014be4
 800dadc:	08014be8 	.word	0x08014be8
 800dae0:	08014bec 	.word	0x08014bec
 800dae4:	08014bf0 	.word	0x08014bf0
 800dae8:	2300      	movs	r3, #0
 800daea:	930c      	str	r3, [sp, #48]	; 0x30
 800daec:	ab3f      	add	r3, sp, #252	; 0xfc
 800daee:	9308      	str	r3, [sp, #32]
 800daf0:	2380      	movs	r3, #128	; 0x80
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	4333      	orrs	r3, r6
 800daf6:	931a      	str	r3, [sp, #104]	; 0x68
 800daf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dafa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	db00      	blt.n	800db02 <_svfprintf_r+0x4ae>
 800db00:	e1e7      	b.n	800ded2 <_svfprintf_r+0x87e>
 800db02:	2280      	movs	r2, #128	; 0x80
 800db04:	0612      	lsls	r2, r2, #24
 800db06:	4694      	mov	ip, r2
 800db08:	4463      	add	r3, ip
 800db0a:	930e      	str	r3, [sp, #56]	; 0x38
 800db0c:	232d      	movs	r3, #45	; 0x2d
 800db0e:	9322      	str	r3, [sp, #136]	; 0x88
 800db10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db12:	2b41      	cmp	r3, #65	; 0x41
 800db14:	d000      	beq.n	800db18 <_svfprintf_r+0x4c4>
 800db16:	e1f5      	b.n	800df04 <_svfprintf_r+0x8b0>
 800db18:	0028      	movs	r0, r5
 800db1a:	aa26      	add	r2, sp, #152	; 0x98
 800db1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db1e:	f002 fb73 	bl	8010208 <frexp>
 800db22:	23ff      	movs	r3, #255	; 0xff
 800db24:	2200      	movs	r2, #0
 800db26:	059b      	lsls	r3, r3, #22
 800db28:	f7f3 fda0 	bl	800166c <__aeabi_dmul>
 800db2c:	2200      	movs	r2, #0
 800db2e:	2300      	movs	r3, #0
 800db30:	0004      	movs	r4, r0
 800db32:	000d      	movs	r5, r1
 800db34:	f7f2 fc88 	bl	8000448 <__aeabi_dcmpeq>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d001      	beq.n	800db40 <_svfprintf_r+0x4ec>
 800db3c:	2301      	movs	r3, #1
 800db3e:	9326      	str	r3, [sp, #152]	; 0x98
 800db40:	4bda      	ldr	r3, [pc, #872]	; (800deac <_svfprintf_r+0x858>)
 800db42:	9319      	str	r3, [sp, #100]	; 0x64
 800db44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db46:	2b61      	cmp	r3, #97	; 0x61
 800db48:	d001      	beq.n	800db4e <_svfprintf_r+0x4fa>
 800db4a:	4bd9      	ldr	r3, [pc, #868]	; (800deb0 <_svfprintf_r+0x85c>)
 800db4c:	9319      	str	r3, [sp, #100]	; 0x64
 800db4e:	9b08      	ldr	r3, [sp, #32]
 800db50:	930e      	str	r3, [sp, #56]	; 0x38
 800db52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db54:	3b01      	subs	r3, #1
 800db56:	9311      	str	r3, [sp, #68]	; 0x44
 800db58:	2200      	movs	r2, #0
 800db5a:	4bd6      	ldr	r3, [pc, #856]	; (800deb4 <_svfprintf_r+0x860>)
 800db5c:	0020      	movs	r0, r4
 800db5e:	0029      	movs	r1, r5
 800db60:	f7f3 fd84 	bl	800166c <__aeabi_dmul>
 800db64:	000d      	movs	r5, r1
 800db66:	0004      	movs	r4, r0
 800db68:	f7f4 fbe2 	bl	8002330 <__aeabi_d2iz>
 800db6c:	9021      	str	r0, [sp, #132]	; 0x84
 800db6e:	f7f4 fc15 	bl	800239c <__aeabi_i2d>
 800db72:	0002      	movs	r2, r0
 800db74:	000b      	movs	r3, r1
 800db76:	0020      	movs	r0, r4
 800db78:	0029      	movs	r1, r5
 800db7a:	f7f4 f839 	bl	8001bf0 <__aeabi_dsub>
 800db7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db80:	000d      	movs	r5, r1
 800db82:	001a      	movs	r2, r3
 800db84:	3201      	adds	r2, #1
 800db86:	9921      	ldr	r1, [sp, #132]	; 0x84
 800db88:	920e      	str	r2, [sp, #56]	; 0x38
 800db8a:	9223      	str	r2, [sp, #140]	; 0x8c
 800db8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db8e:	0004      	movs	r4, r0
 800db90:	5c52      	ldrb	r2, [r2, r1]
 800db92:	701a      	strb	r2, [r3, #0]
 800db94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db96:	9320      	str	r3, [sp, #128]	; 0x80
 800db98:	3301      	adds	r3, #1
 800db9a:	d00a      	beq.n	800dbb2 <_svfprintf_r+0x55e>
 800db9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db9e:	2200      	movs	r2, #0
 800dba0:	3b01      	subs	r3, #1
 800dba2:	9311      	str	r3, [sp, #68]	; 0x44
 800dba4:	0020      	movs	r0, r4
 800dba6:	2300      	movs	r3, #0
 800dba8:	0029      	movs	r1, r5
 800dbaa:	f7f2 fc4d 	bl	8000448 <__aeabi_dcmpeq>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0d2      	beq.n	800db58 <_svfprintf_r+0x504>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	0020      	movs	r0, r4
 800dbb6:	0029      	movs	r1, r5
 800dbb8:	4bbf      	ldr	r3, [pc, #764]	; (800deb8 <_svfprintf_r+0x864>)
 800dbba:	f7f2 fc5f 	bl	800047c <__aeabi_dcmpgt>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d10c      	bne.n	800dbdc <_svfprintf_r+0x588>
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	0020      	movs	r0, r4
 800dbc6:	0029      	movs	r1, r5
 800dbc8:	4bbb      	ldr	r3, [pc, #748]	; (800deb8 <_svfprintf_r+0x864>)
 800dbca:	f7f2 fc3d 	bl	8000448 <__aeabi_dcmpeq>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d100      	bne.n	800dbd4 <_svfprintf_r+0x580>
 800dbd2:	e191      	b.n	800def8 <_svfprintf_r+0x8a4>
 800dbd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbd6:	07db      	lsls	r3, r3, #31
 800dbd8:	d400      	bmi.n	800dbdc <_svfprintf_r+0x588>
 800dbda:	e18d      	b.n	800def8 <_svfprintf_r+0x8a4>
 800dbdc:	2030      	movs	r0, #48	; 0x30
 800dbde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbe0:	932a      	str	r3, [sp, #168]	; 0xa8
 800dbe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbe4:	7bdb      	ldrb	r3, [r3, #15]
 800dbe6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dbe8:	3a01      	subs	r2, #1
 800dbea:	922a      	str	r2, [sp, #168]	; 0xa8
 800dbec:	7811      	ldrb	r1, [r2, #0]
 800dbee:	4299      	cmp	r1, r3
 800dbf0:	d100      	bne.n	800dbf4 <_svfprintf_r+0x5a0>
 800dbf2:	e171      	b.n	800ded8 <_svfprintf_r+0x884>
 800dbf4:	1c4b      	adds	r3, r1, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2939      	cmp	r1, #57	; 0x39
 800dbfa:	d101      	bne.n	800dc00 <_svfprintf_r+0x5ac>
 800dbfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbfe:	7a9b      	ldrb	r3, [r3, #10]
 800dc00:	7013      	strb	r3, [r2, #0]
 800dc02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc04:	9a08      	ldr	r2, [sp, #32]
 800dc06:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dc08:	1a9b      	subs	r3, r3, r2
 800dc0a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc0e:	2b47      	cmp	r3, #71	; 0x47
 800dc10:	d000      	beq.n	800dc14 <_svfprintf_r+0x5c0>
 800dc12:	e1c4      	b.n	800df9e <_svfprintf_r+0x94a>
 800dc14:	1ceb      	adds	r3, r5, #3
 800dc16:	db03      	blt.n	800dc20 <_svfprintf_r+0x5cc>
 800dc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1a:	42ab      	cmp	r3, r5
 800dc1c:	db00      	blt.n	800dc20 <_svfprintf_r+0x5cc>
 800dc1e:	e1e6      	b.n	800dfee <_svfprintf_r+0x99a>
 800dc20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc22:	3b02      	subs	r3, #2
 800dc24:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc26:	223c      	movs	r2, #60	; 0x3c
 800dc28:	466b      	mov	r3, sp
 800dc2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc2c:	189b      	adds	r3, r3, r2
 800dc2e:	1e6c      	subs	r4, r5, #1
 800dc30:	3a1c      	subs	r2, #28
 800dc32:	2000      	movs	r0, #0
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	9426      	str	r4, [sp, #152]	; 0x98
 800dc38:	4391      	bics	r1, r2
 800dc3a:	2941      	cmp	r1, #65	; 0x41
 800dc3c:	d102      	bne.n	800dc44 <_svfprintf_r+0x5f0>
 800dc3e:	330f      	adds	r3, #15
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	3001      	adds	r0, #1
 800dc44:	a928      	add	r1, sp, #160	; 0xa0
 800dc46:	700b      	strb	r3, [r1, #0]
 800dc48:	232b      	movs	r3, #43	; 0x2b
 800dc4a:	2c00      	cmp	r4, #0
 800dc4c:	da02      	bge.n	800dc54 <_svfprintf_r+0x600>
 800dc4e:	2401      	movs	r4, #1
 800dc50:	3302      	adds	r3, #2
 800dc52:	1b64      	subs	r4, r4, r5
 800dc54:	704b      	strb	r3, [r1, #1]
 800dc56:	2c09      	cmp	r4, #9
 800dc58:	dc00      	bgt.n	800dc5c <_svfprintf_r+0x608>
 800dc5a:	e1ba      	b.n	800dfd2 <_svfprintf_r+0x97e>
 800dc5c:	2337      	movs	r3, #55	; 0x37
 800dc5e:	250a      	movs	r5, #10
 800dc60:	aa1e      	add	r2, sp, #120	; 0x78
 800dc62:	189b      	adds	r3, r3, r2
 800dc64:	9310      	str	r3, [sp, #64]	; 0x40
 800dc66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc68:	0020      	movs	r0, r4
 800dc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc6c:	0029      	movs	r1, r5
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	9310      	str	r3, [sp, #64]	; 0x40
 800dc72:	f7f2 fbd3 	bl	800041c <__aeabi_idivmod>
 800dc76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc78:	3130      	adds	r1, #48	; 0x30
 800dc7a:	7019      	strb	r1, [r3, #0]
 800dc7c:	0020      	movs	r0, r4
 800dc7e:	0029      	movs	r1, r5
 800dc80:	9411      	str	r4, [sp, #68]	; 0x44
 800dc82:	f7f2 fae5 	bl	8000250 <__divsi3>
 800dc86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc88:	0004      	movs	r4, r0
 800dc8a:	2b63      	cmp	r3, #99	; 0x63
 800dc8c:	dceb      	bgt.n	800dc66 <_svfprintf_r+0x612>
 800dc8e:	222a      	movs	r2, #42	; 0x2a
 800dc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc92:	a81e      	add	r0, sp, #120	; 0x78
 800dc94:	1e99      	subs	r1, r3, #2
 800dc96:	1812      	adds	r2, r2, r0
 800dc98:	2037      	movs	r0, #55	; 0x37
 800dc9a:	000b      	movs	r3, r1
 800dc9c:	3430      	adds	r4, #48	; 0x30
 800dc9e:	700c      	strb	r4, [r1, #0]
 800dca0:	ac1e      	add	r4, sp, #120	; 0x78
 800dca2:	1900      	adds	r0, r0, r4
 800dca4:	4283      	cmp	r3, r0
 800dca6:	d200      	bcs.n	800dcaa <_svfprintf_r+0x656>
 800dca8:	e18e      	b.n	800dfc8 <_svfprintf_r+0x974>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	4281      	cmp	r1, r0
 800dcae:	d804      	bhi.n	800dcba <_svfprintf_r+0x666>
 800dcb0:	aa1e      	add	r2, sp, #120	; 0x78
 800dcb2:	3339      	adds	r3, #57	; 0x39
 800dcb4:	189b      	adds	r3, r3, r2
 800dcb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcb8:	1a9b      	subs	r3, r3, r2
 800dcba:	222a      	movs	r2, #42	; 0x2a
 800dcbc:	a91e      	add	r1, sp, #120	; 0x78
 800dcbe:	1852      	adds	r2, r2, r1
 800dcc0:	18d3      	adds	r3, r2, r3
 800dcc2:	aa28      	add	r2, sp, #160	; 0xa0
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	931e      	str	r3, [sp, #120]	; 0x78
 800dcc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dcca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dccc:	4694      	mov	ip, r2
 800dcce:	4463      	add	r3, ip
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	dc01      	bgt.n	800dcdc <_svfprintf_r+0x688>
 800dcd8:	07f3      	lsls	r3, r6, #31
 800dcda:	d504      	bpl.n	800dce6 <_svfprintf_r+0x692>
 800dcdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce0:	4694      	mov	ip, r2
 800dce2:	4463      	add	r3, ip
 800dce4:	9309      	str	r3, [sp, #36]	; 0x24
 800dce6:	2280      	movs	r2, #128	; 0x80
 800dce8:	4b74      	ldr	r3, [pc, #464]	; (800debc <_svfprintf_r+0x868>)
 800dcea:	0052      	lsls	r2, r2, #1
 800dcec:	4033      	ands	r3, r6
 800dcee:	431a      	orrs	r2, r3
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	001d      	movs	r5, r3
 800dcf4:	921a      	str	r2, [sp, #104]	; 0x68
 800dcf6:	9310      	str	r3, [sp, #64]	; 0x40
 800dcf8:	9311      	str	r3, [sp, #68]	; 0x44
 800dcfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcfc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dcfe:	9319      	str	r3, [sp, #100]	; 0x64
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d006      	beq.n	800dd12 <_svfprintf_r+0x6be>
 800dd04:	231b      	movs	r3, #27
 800dd06:	aa1e      	add	r2, sp, #120	; 0x78
 800dd08:	189b      	adds	r3, r3, r2
 800dd0a:	222d      	movs	r2, #45	; 0x2d
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9319      	str	r3, [sp, #100]	; 0x64
 800dd12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd16:	931a      	str	r3, [sp, #104]	; 0x68
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	da00      	bge.n	800dd1e <_svfprintf_r+0x6ca>
 800dd1c:	921a      	str	r2, [sp, #104]	; 0x68
 800dd1e:	231b      	movs	r3, #27
 800dd20:	aa1e      	add	r2, sp, #120	; 0x78
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	1e5a      	subs	r2, r3, #1
 800dd28:	4193      	sbcs	r3, r2
 800dd2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd2c:	18d3      	adds	r3, r2, r3
 800dd2e:	931a      	str	r3, [sp, #104]	; 0x68
 800dd30:	0032      	movs	r2, r6
 800dd32:	2302      	movs	r3, #2
 800dd34:	401a      	ands	r2, r3
 800dd36:	9220      	str	r2, [sp, #128]	; 0x80
 800dd38:	421e      	tst	r6, r3
 800dd3a:	d002      	beq.n	800dd42 <_svfprintf_r+0x6ee>
 800dd3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dd3e:	3302      	adds	r3, #2
 800dd40:	931a      	str	r3, [sp, #104]	; 0x68
 800dd42:	2384      	movs	r3, #132	; 0x84
 800dd44:	0032      	movs	r2, r6
 800dd46:	401a      	ands	r2, r3
 800dd48:	9221      	str	r2, [sp, #132]	; 0x84
 800dd4a:	421e      	tst	r6, r3
 800dd4c:	d11f      	bne.n	800dd8e <_svfprintf_r+0x73a>
 800dd4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd52:	1a9c      	subs	r4, r3, r2
 800dd54:	2c00      	cmp	r4, #0
 800dd56:	dd1a      	ble.n	800dd8e <_svfprintf_r+0x73a>
 800dd58:	0039      	movs	r1, r7
 800dd5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd5c:	4858      	ldr	r0, [pc, #352]	; (800dec0 <_svfprintf_r+0x86c>)
 800dd5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd60:	3301      	adds	r3, #1
 800dd62:	3108      	adds	r1, #8
 800dd64:	6038      	str	r0, [r7, #0]
 800dd66:	2c10      	cmp	r4, #16
 800dd68:	dd00      	ble.n	800dd6c <_svfprintf_r+0x718>
 800dd6a:	e31c      	b.n	800e3a6 <_svfprintf_r+0xd52>
 800dd6c:	607c      	str	r4, [r7, #4]
 800dd6e:	18a4      	adds	r4, r4, r2
 800dd70:	000f      	movs	r7, r1
 800dd72:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd74:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd76:	2b07      	cmp	r3, #7
 800dd78:	dd09      	ble.n	800dd8e <_svfprintf_r+0x73a>
 800dd7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd7e:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd80:	f003 fcf8 	bl	8011774 <__ssprint_r>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d001      	beq.n	800dd8c <_svfprintf_r+0x738>
 800dd88:	f000 fe43 	bl	800ea12 <_svfprintf_r+0x13be>
 800dd8c:	af2f      	add	r7, sp, #188	; 0xbc
 800dd8e:	221b      	movs	r2, #27
 800dd90:	a91e      	add	r1, sp, #120	; 0x78
 800dd92:	1852      	adds	r2, r2, r1
 800dd94:	7811      	ldrb	r1, [r2, #0]
 800dd96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	d014      	beq.n	800ddc6 <_svfprintf_r+0x772>
 800dd9c:	603a      	str	r2, [r7, #0]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	189b      	adds	r3, r3, r2
 800dda2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dda4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	189b      	adds	r3, r3, r2
 800ddaa:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddac:	3708      	adds	r7, #8
 800ddae:	2b07      	cmp	r3, #7
 800ddb0:	dd09      	ble.n	800ddc6 <_svfprintf_r+0x772>
 800ddb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddb8:	f003 fcdc 	bl	8011774 <__ssprint_r>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d001      	beq.n	800ddc4 <_svfprintf_r+0x770>
 800ddc0:	f000 fe27 	bl	800ea12 <_svfprintf_r+0x13be>
 800ddc4:	af2f      	add	r7, sp, #188	; 0xbc
 800ddc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ddc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ddca:	2a00      	cmp	r2, #0
 800ddcc:	d015      	beq.n	800ddfa <_svfprintf_r+0x7a6>
 800ddce:	aa25      	add	r2, sp, #148	; 0x94
 800ddd0:	603a      	str	r2, [r7, #0]
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	189b      	adds	r3, r3, r2
 800ddd6:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	3301      	adds	r3, #1
 800ddde:	932d      	str	r3, [sp, #180]	; 0xb4
 800dde0:	3708      	adds	r7, #8
 800dde2:	2b07      	cmp	r3, #7
 800dde4:	dd09      	ble.n	800ddfa <_svfprintf_r+0x7a6>
 800dde6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dde8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddea:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddec:	f003 fcc2 	bl	8011774 <__ssprint_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d001      	beq.n	800ddf8 <_svfprintf_r+0x7a4>
 800ddf4:	f000 fe0d 	bl	800ea12 <_svfprintf_r+0x13be>
 800ddf8:	af2f      	add	r7, sp, #188	; 0xbc
 800ddfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddfc:	2b80      	cmp	r3, #128	; 0x80
 800ddfe:	d11f      	bne.n	800de40 <_svfprintf_r+0x7ec>
 800de00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de04:	1a9c      	subs	r4, r3, r2
 800de06:	2c00      	cmp	r4, #0
 800de08:	dd1a      	ble.n	800de40 <_svfprintf_r+0x7ec>
 800de0a:	0039      	movs	r1, r7
 800de0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de0e:	482d      	ldr	r0, [pc, #180]	; (800dec4 <_svfprintf_r+0x870>)
 800de10:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de12:	3301      	adds	r3, #1
 800de14:	3108      	adds	r1, #8
 800de16:	6038      	str	r0, [r7, #0]
 800de18:	2c10      	cmp	r4, #16
 800de1a:	dd00      	ble.n	800de1e <_svfprintf_r+0x7ca>
 800de1c:	e2d6      	b.n	800e3cc <_svfprintf_r+0xd78>
 800de1e:	607c      	str	r4, [r7, #4]
 800de20:	18a4      	adds	r4, r4, r2
 800de22:	000f      	movs	r7, r1
 800de24:	942e      	str	r4, [sp, #184]	; 0xb8
 800de26:	932d      	str	r3, [sp, #180]	; 0xb4
 800de28:	2b07      	cmp	r3, #7
 800de2a:	dd09      	ble.n	800de40 <_svfprintf_r+0x7ec>
 800de2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de30:	aa2c      	add	r2, sp, #176	; 0xb0
 800de32:	f003 fc9f 	bl	8011774 <__ssprint_r>
 800de36:	2800      	cmp	r0, #0
 800de38:	d001      	beq.n	800de3e <_svfprintf_r+0x7ea>
 800de3a:	f000 fdea 	bl	800ea12 <_svfprintf_r+0x13be>
 800de3e:	af2f      	add	r7, sp, #188	; 0xbc
 800de40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de44:	1a9c      	subs	r4, r3, r2
 800de46:	2c00      	cmp	r4, #0
 800de48:	dd1a      	ble.n	800de80 <_svfprintf_r+0x82c>
 800de4a:	0039      	movs	r1, r7
 800de4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de4e:	481d      	ldr	r0, [pc, #116]	; (800dec4 <_svfprintf_r+0x870>)
 800de50:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de52:	3301      	adds	r3, #1
 800de54:	3108      	adds	r1, #8
 800de56:	6038      	str	r0, [r7, #0]
 800de58:	2c10      	cmp	r4, #16
 800de5a:	dd00      	ble.n	800de5e <_svfprintf_r+0x80a>
 800de5c:	e2c9      	b.n	800e3f2 <_svfprintf_r+0xd9e>
 800de5e:	18a2      	adds	r2, r4, r2
 800de60:	607c      	str	r4, [r7, #4]
 800de62:	922e      	str	r2, [sp, #184]	; 0xb8
 800de64:	000f      	movs	r7, r1
 800de66:	932d      	str	r3, [sp, #180]	; 0xb4
 800de68:	2b07      	cmp	r3, #7
 800de6a:	dd09      	ble.n	800de80 <_svfprintf_r+0x82c>
 800de6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de70:	aa2c      	add	r2, sp, #176	; 0xb0
 800de72:	f003 fc7f 	bl	8011774 <__ssprint_r>
 800de76:	2800      	cmp	r0, #0
 800de78:	d001      	beq.n	800de7e <_svfprintf_r+0x82a>
 800de7a:	f000 fdca 	bl	800ea12 <_svfprintf_r+0x13be>
 800de7e:	af2f      	add	r7, sp, #188	; 0xbc
 800de80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de82:	9319      	str	r3, [sp, #100]	; 0x64
 800de84:	05f3      	lsls	r3, r6, #23
 800de86:	d500      	bpl.n	800de8a <_svfprintf_r+0x836>
 800de88:	e2ce      	b.n	800e428 <_svfprintf_r+0xdd4>
 800de8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	4694      	mov	ip, r2
 800de90:	603b      	str	r3, [r7, #0]
 800de92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de94:	607b      	str	r3, [r7, #4]
 800de96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de98:	4463      	add	r3, ip
 800de9a:	932e      	str	r3, [sp, #184]	; 0xb8
 800de9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de9e:	3301      	adds	r3, #1
 800dea0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dea2:	2b07      	cmp	r3, #7
 800dea4:	dd00      	ble.n	800dea8 <_svfprintf_r+0x854>
 800dea6:	e3a3      	b.n	800e5f0 <_svfprintf_r+0xf9c>
 800dea8:	3708      	adds	r7, #8
 800deaa:	e301      	b.n	800e4b0 <_svfprintf_r+0xe5c>
 800deac:	08014bf4 	.word	0x08014bf4
 800deb0:	08014c05 	.word	0x08014c05
 800deb4:	40300000 	.word	0x40300000
 800deb8:	3fe00000 	.word	0x3fe00000
 800debc:	fffffbff 	.word	0xfffffbff
 800dec0:	08014c18 	.word	0x08014c18
 800dec4:	08014c28 	.word	0x08014c28
 800dec8:	9b08      	ldr	r3, [sp, #32]
 800deca:	930c      	str	r3, [sp, #48]	; 0x30
 800decc:	e610      	b.n	800daf0 <_svfprintf_r+0x49c>
 800dece:	2306      	movs	r3, #6
 800ded0:	e5fd      	b.n	800dace <_svfprintf_r+0x47a>
 800ded2:	930e      	str	r3, [sp, #56]	; 0x38
 800ded4:	2300      	movs	r3, #0
 800ded6:	e61a      	b.n	800db0e <_svfprintf_r+0x4ba>
 800ded8:	7010      	strb	r0, [r2, #0]
 800deda:	e684      	b.n	800dbe6 <_svfprintf_r+0x592>
 800dedc:	7018      	strb	r0, [r3, #0]
 800dede:	3301      	adds	r3, #1
 800dee0:	1aca      	subs	r2, r1, r3
 800dee2:	d5fb      	bpl.n	800dedc <_svfprintf_r+0x888>
 800dee4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dee6:	2300      	movs	r3, #0
 800dee8:	3201      	adds	r2, #1
 800deea:	db01      	blt.n	800def0 <_svfprintf_r+0x89c>
 800deec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800deee:	3301      	adds	r3, #1
 800def0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800def2:	18d3      	adds	r3, r2, r3
 800def4:	9323      	str	r3, [sp, #140]	; 0x8c
 800def6:	e684      	b.n	800dc02 <_svfprintf_r+0x5ae>
 800def8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800defa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800defc:	2030      	movs	r0, #48	; 0x30
 800defe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df00:	1851      	adds	r1, r2, r1
 800df02:	e7ed      	b.n	800dee0 <_svfprintf_r+0x88c>
 800df04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df06:	2303      	movs	r3, #3
 800df08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df0a:	2a46      	cmp	r2, #70	; 0x46
 800df0c:	d006      	beq.n	800df1c <_svfprintf_r+0x8c8>
 800df0e:	0014      	movs	r4, r2
 800df10:	3c45      	subs	r4, #69	; 0x45
 800df12:	4262      	negs	r2, r4
 800df14:	4154      	adcs	r4, r2
 800df16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df18:	3b01      	subs	r3, #1
 800df1a:	1914      	adds	r4, r2, r4
 800df1c:	aa2a      	add	r2, sp, #168	; 0xa8
 800df1e:	9204      	str	r2, [sp, #16]
 800df20:	aa27      	add	r2, sp, #156	; 0x9c
 800df22:	9203      	str	r2, [sp, #12]
 800df24:	aa26      	add	r2, sp, #152	; 0x98
 800df26:	9202      	str	r2, [sp, #8]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	002a      	movs	r2, r5
 800df2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df30:	9401      	str	r4, [sp, #4]
 800df32:	f002 fad7 	bl	80104e4 <_dtoa_r>
 800df36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df38:	9008      	str	r0, [sp, #32]
 800df3a:	2b47      	cmp	r3, #71	; 0x47
 800df3c:	d103      	bne.n	800df46 <_svfprintf_r+0x8f2>
 800df3e:	07f3      	lsls	r3, r6, #31
 800df40:	d401      	bmi.n	800df46 <_svfprintf_r+0x8f2>
 800df42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800df44:	e65e      	b.n	800dc04 <_svfprintf_r+0x5b0>
 800df46:	9b08      	ldr	r3, [sp, #32]
 800df48:	191b      	adds	r3, r3, r4
 800df4a:	9311      	str	r3, [sp, #68]	; 0x44
 800df4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df4e:	2b46      	cmp	r3, #70	; 0x46
 800df50:	d112      	bne.n	800df78 <_svfprintf_r+0x924>
 800df52:	9b08      	ldr	r3, [sp, #32]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	2b30      	cmp	r3, #48	; 0x30
 800df58:	d10a      	bne.n	800df70 <_svfprintf_r+0x91c>
 800df5a:	2200      	movs	r2, #0
 800df5c:	2300      	movs	r3, #0
 800df5e:	0028      	movs	r0, r5
 800df60:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df62:	f7f2 fa71 	bl	8000448 <__aeabi_dcmpeq>
 800df66:	2800      	cmp	r0, #0
 800df68:	d102      	bne.n	800df70 <_svfprintf_r+0x91c>
 800df6a:	2301      	movs	r3, #1
 800df6c:	1b1b      	subs	r3, r3, r4
 800df6e:	9326      	str	r3, [sp, #152]	; 0x98
 800df70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df74:	18d3      	adds	r3, r2, r3
 800df76:	9311      	str	r3, [sp, #68]	; 0x44
 800df78:	2200      	movs	r2, #0
 800df7a:	2300      	movs	r3, #0
 800df7c:	0028      	movs	r0, r5
 800df7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df80:	f7f2 fa62 	bl	8000448 <__aeabi_dcmpeq>
 800df84:	2800      	cmp	r0, #0
 800df86:	d001      	beq.n	800df8c <_svfprintf_r+0x938>
 800df88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df8a:	932a      	str	r3, [sp, #168]	; 0xa8
 800df8c:	2230      	movs	r2, #48	; 0x30
 800df8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800df90:	9911      	ldr	r1, [sp, #68]	; 0x44
 800df92:	4299      	cmp	r1, r3
 800df94:	d9d5      	bls.n	800df42 <_svfprintf_r+0x8ee>
 800df96:	1c59      	adds	r1, r3, #1
 800df98:	912a      	str	r1, [sp, #168]	; 0xa8
 800df9a:	701a      	strb	r2, [r3, #0]
 800df9c:	e7f7      	b.n	800df8e <_svfprintf_r+0x93a>
 800df9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfa0:	2b46      	cmp	r3, #70	; 0x46
 800dfa2:	d000      	beq.n	800dfa6 <_svfprintf_r+0x952>
 800dfa4:	e63f      	b.n	800dc26 <_svfprintf_r+0x5d2>
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	0033      	movs	r3, r6
 800dfaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfac:	4013      	ands	r3, r2
 800dfae:	430b      	orrs	r3, r1
 800dfb0:	2d00      	cmp	r5, #0
 800dfb2:	dd2c      	ble.n	800e00e <_svfprintf_r+0x9ba>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d046      	beq.n	800e046 <_svfprintf_r+0x9f2>
 800dfb8:	000a      	movs	r2, r1
 800dfba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfbc:	18eb      	adds	r3, r5, r3
 800dfbe:	18d3      	adds	r3, r2, r3
 800dfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc2:	2366      	movs	r3, #102	; 0x66
 800dfc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfc6:	e030      	b.n	800e02a <_svfprintf_r+0x9d6>
 800dfc8:	781c      	ldrb	r4, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	7014      	strb	r4, [r2, #0]
 800dfce:	3201      	adds	r2, #1
 800dfd0:	e668      	b.n	800dca4 <_svfprintf_r+0x650>
 800dfd2:	222a      	movs	r2, #42	; 0x2a
 800dfd4:	ab1e      	add	r3, sp, #120	; 0x78
 800dfd6:	18d2      	adds	r2, r2, r3
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d104      	bne.n	800dfe6 <_svfprintf_r+0x992>
 800dfdc:	2330      	movs	r3, #48	; 0x30
 800dfde:	222b      	movs	r2, #43	; 0x2b
 800dfe0:	708b      	strb	r3, [r1, #2]
 800dfe2:	ab1e      	add	r3, sp, #120	; 0x78
 800dfe4:	18d2      	adds	r2, r2, r3
 800dfe6:	3430      	adds	r4, #48	; 0x30
 800dfe8:	1c53      	adds	r3, r2, #1
 800dfea:	7014      	strb	r4, [r2, #0]
 800dfec:	e669      	b.n	800dcc2 <_svfprintf_r+0x66e>
 800dfee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	dd12      	ble.n	800e01a <_svfprintf_r+0x9c6>
 800dff4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dff8:	4694      	mov	ip, r2
 800dffa:	4463      	add	r3, ip
 800dffc:	9309      	str	r3, [sp, #36]	; 0x24
 800dffe:	2367      	movs	r3, #103	; 0x67
 800e000:	930f      	str	r3, [sp, #60]	; 0x3c
 800e002:	2d00      	cmp	r5, #0
 800e004:	dc11      	bgt.n	800e02a <_svfprintf_r+0x9d6>
 800e006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e008:	1b5b      	subs	r3, r3, r5
 800e00a:	3301      	adds	r3, #1
 800e00c:	e00c      	b.n	800e028 <_svfprintf_r+0x9d4>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d01b      	beq.n	800e04a <_svfprintf_r+0x9f6>
 800e012:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e016:	3301      	adds	r3, #1
 800e018:	e7d1      	b.n	800dfbe <_svfprintf_r+0x96a>
 800e01a:	2367      	movs	r3, #103	; 0x67
 800e01c:	9509      	str	r5, [sp, #36]	; 0x24
 800e01e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e020:	07f3      	lsls	r3, r6, #31
 800e022:	d502      	bpl.n	800e02a <_svfprintf_r+0x9d6>
 800e024:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e026:	18eb      	adds	r3, r5, r3
 800e028:	9309      	str	r3, [sp, #36]	; 0x24
 800e02a:	2380      	movs	r3, #128	; 0x80
 800e02c:	0032      	movs	r2, r6
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	401a      	ands	r2, r3
 800e032:	9211      	str	r2, [sp, #68]	; 0x44
 800e034:	2200      	movs	r2, #0
 800e036:	9210      	str	r2, [sp, #64]	; 0x40
 800e038:	421e      	tst	r6, r3
 800e03a:	d100      	bne.n	800e03e <_svfprintf_r+0x9ea>
 800e03c:	e65d      	b.n	800dcfa <_svfprintf_r+0x6a6>
 800e03e:	4295      	cmp	r5, r2
 800e040:	dc25      	bgt.n	800e08e <_svfprintf_r+0xa3a>
 800e042:	9211      	str	r2, [sp, #68]	; 0x44
 800e044:	e659      	b.n	800dcfa <_svfprintf_r+0x6a6>
 800e046:	9509      	str	r5, [sp, #36]	; 0x24
 800e048:	e7bb      	b.n	800dfc2 <_svfprintf_r+0x96e>
 800e04a:	2366      	movs	r3, #102	; 0x66
 800e04c:	9209      	str	r2, [sp, #36]	; 0x24
 800e04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e050:	e7eb      	b.n	800e02a <_svfprintf_r+0x9d6>
 800e052:	42ab      	cmp	r3, r5
 800e054:	da0e      	bge.n	800e074 <_svfprintf_r+0xa20>
 800e056:	1aed      	subs	r5, r5, r3
 800e058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d012      	beq.n	800e086 <_svfprintf_r+0xa32>
 800e060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e062:	3301      	adds	r3, #1
 800e064:	9311      	str	r3, [sp, #68]	; 0x44
 800e066:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e068:	3301      	adds	r3, #1
 800e06a:	9312      	str	r3, [sp, #72]	; 0x48
 800e06c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	2bff      	cmp	r3, #255	; 0xff
 800e072:	d1ee      	bne.n	800e052 <_svfprintf_r+0x9fe>
 800e074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e078:	189b      	adds	r3, r3, r2
 800e07a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e07c:	4353      	muls	r3, r2
 800e07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e080:	189b      	adds	r3, r3, r2
 800e082:	9309      	str	r3, [sp, #36]	; 0x24
 800e084:	e639      	b.n	800dcfa <_svfprintf_r+0x6a6>
 800e086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e088:	3301      	adds	r3, #1
 800e08a:	9310      	str	r3, [sp, #64]	; 0x40
 800e08c:	e7ee      	b.n	800e06c <_svfprintf_r+0xa18>
 800e08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e090:	9311      	str	r3, [sp, #68]	; 0x44
 800e092:	e7eb      	b.n	800e06c <_svfprintf_r+0xa18>
 800e094:	1d23      	adds	r3, r4, #4
 800e096:	930d      	str	r3, [sp, #52]	; 0x34
 800e098:	06b3      	lsls	r3, r6, #26
 800e09a:	d509      	bpl.n	800e0b0 <_svfprintf_r+0xa5c>
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	17d2      	asrs	r2, r2, #31
 800e0a4:	605a      	str	r2, [r3, #4]
 800e0a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e0aa:	9308      	str	r3, [sp, #32]
 800e0ac:	f7ff fb0d 	bl	800d6ca <_svfprintf_r+0x76>
 800e0b0:	06f3      	lsls	r3, r6, #27
 800e0b2:	d503      	bpl.n	800e0bc <_svfprintf_r+0xa68>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e7f4      	b.n	800e0a6 <_svfprintf_r+0xa52>
 800e0bc:	0673      	lsls	r3, r6, #25
 800e0be:	d503      	bpl.n	800e0c8 <_svfprintf_r+0xa74>
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0c4:	801a      	strh	r2, [r3, #0]
 800e0c6:	e7ee      	b.n	800e0a6 <_svfprintf_r+0xa52>
 800e0c8:	05b6      	lsls	r6, r6, #22
 800e0ca:	d5f3      	bpl.n	800e0b4 <_svfprintf_r+0xa60>
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0d0:	701a      	strb	r2, [r3, #0]
 800e0d2:	e7e8      	b.n	800e0a6 <_svfprintf_r+0xa52>
 800e0d4:	2310      	movs	r3, #16
 800e0d6:	431e      	orrs	r6, r3
 800e0d8:	2320      	movs	r3, #32
 800e0da:	0030      	movs	r0, r6
 800e0dc:	4018      	ands	r0, r3
 800e0de:	421e      	tst	r6, r3
 800e0e0:	d00f      	beq.n	800e102 <_svfprintf_r+0xaae>
 800e0e2:	3b19      	subs	r3, #25
 800e0e4:	3407      	adds	r4, #7
 800e0e6:	439c      	bics	r4, r3
 800e0e8:	0022      	movs	r2, r4
 800e0ea:	ca18      	ldmia	r2!, {r3, r4}
 800e0ec:	9306      	str	r3, [sp, #24]
 800e0ee:	9407      	str	r4, [sp, #28]
 800e0f0:	920d      	str	r2, [sp, #52]	; 0x34
 800e0f2:	4bc9      	ldr	r3, [pc, #804]	; (800e418 <_svfprintf_r+0xdc4>)
 800e0f4:	401e      	ands	r6, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	221b      	movs	r2, #27
 800e0fa:	a91e      	add	r1, sp, #120	; 0x78
 800e0fc:	1852      	adds	r2, r2, r1
 800e0fe:	2100      	movs	r1, #0
 800e100:	e430      	b.n	800d964 <_svfprintf_r+0x310>
 800e102:	0022      	movs	r2, r4
 800e104:	ca08      	ldmia	r2!, {r3}
 800e106:	0031      	movs	r1, r6
 800e108:	920d      	str	r2, [sp, #52]	; 0x34
 800e10a:	2210      	movs	r2, #16
 800e10c:	4011      	ands	r1, r2
 800e10e:	4216      	tst	r6, r2
 800e110:	d002      	beq.n	800e118 <_svfprintf_r+0xac4>
 800e112:	9306      	str	r3, [sp, #24]
 800e114:	9007      	str	r0, [sp, #28]
 800e116:	e7ec      	b.n	800e0f2 <_svfprintf_r+0xa9e>
 800e118:	2240      	movs	r2, #64	; 0x40
 800e11a:	0030      	movs	r0, r6
 800e11c:	4010      	ands	r0, r2
 800e11e:	4216      	tst	r6, r2
 800e120:	d003      	beq.n	800e12a <_svfprintf_r+0xad6>
 800e122:	b29b      	uxth	r3, r3
 800e124:	9306      	str	r3, [sp, #24]
 800e126:	9107      	str	r1, [sp, #28]
 800e128:	e7e3      	b.n	800e0f2 <_svfprintf_r+0xa9e>
 800e12a:	2280      	movs	r2, #128	; 0x80
 800e12c:	0031      	movs	r1, r6
 800e12e:	0092      	lsls	r2, r2, #2
 800e130:	4011      	ands	r1, r2
 800e132:	4216      	tst	r6, r2
 800e134:	d0f6      	beq.n	800e124 <_svfprintf_r+0xad0>
 800e136:	b2db      	uxtb	r3, r3
 800e138:	e7eb      	b.n	800e112 <_svfprintf_r+0xabe>
 800e13a:	0023      	movs	r3, r4
 800e13c:	cb04      	ldmia	r3!, {r2}
 800e13e:	49b7      	ldr	r1, [pc, #732]	; (800e41c <_svfprintf_r+0xdc8>)
 800e140:	9206      	str	r2, [sp, #24]
 800e142:	aa25      	add	r2, sp, #148	; 0x94
 800e144:	8011      	strh	r1, [r2, #0]
 800e146:	4ab6      	ldr	r2, [pc, #728]	; (800e420 <_svfprintf_r+0xdcc>)
 800e148:	930d      	str	r3, [sp, #52]	; 0x34
 800e14a:	2300      	movs	r3, #0
 800e14c:	921f      	str	r2, [sp, #124]	; 0x7c
 800e14e:	2278      	movs	r2, #120	; 0x78
 800e150:	9307      	str	r3, [sp, #28]
 800e152:	3302      	adds	r3, #2
 800e154:	431e      	orrs	r6, r3
 800e156:	920f      	str	r2, [sp, #60]	; 0x3c
 800e158:	e7ce      	b.n	800e0f8 <_svfprintf_r+0xaa4>
 800e15a:	0023      	movs	r3, r4
 800e15c:	cb04      	ldmia	r3!, {r2}
 800e15e:	2400      	movs	r4, #0
 800e160:	930d      	str	r3, [sp, #52]	; 0x34
 800e162:	231b      	movs	r3, #27
 800e164:	9208      	str	r2, [sp, #32]
 800e166:	aa1e      	add	r2, sp, #120	; 0x78
 800e168:	189b      	adds	r3, r3, r2
 800e16a:	701c      	strb	r4, [r3, #0]
 800e16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16e:	3301      	adds	r3, #1
 800e170:	d00e      	beq.n	800e190 <_svfprintf_r+0xb3c>
 800e172:	0021      	movs	r1, r4
 800e174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e176:	9808      	ldr	r0, [sp, #32]
 800e178:	f002 f83a 	bl	80101f0 <memchr>
 800e17c:	900c      	str	r0, [sp, #48]	; 0x30
 800e17e:	42a0      	cmp	r0, r4
 800e180:	d100      	bne.n	800e184 <_svfprintf_r+0xb30>
 800e182:	e10d      	b.n	800e3a0 <_svfprintf_r+0xd4c>
 800e184:	9a08      	ldr	r2, [sp, #32]
 800e186:	1a83      	subs	r3, r0, r2
 800e188:	9309      	str	r3, [sp, #36]	; 0x24
 800e18a:	0023      	movs	r3, r4
 800e18c:	940c      	str	r4, [sp, #48]	; 0x30
 800e18e:	e44e      	b.n	800da2e <_svfprintf_r+0x3da>
 800e190:	9808      	ldr	r0, [sp, #32]
 800e192:	f7f1 ffb7 	bl	8000104 <strlen>
 800e196:	9009      	str	r0, [sp, #36]	; 0x24
 800e198:	e7f7      	b.n	800e18a <_svfprintf_r+0xb36>
 800e19a:	2310      	movs	r3, #16
 800e19c:	431e      	orrs	r6, r3
 800e19e:	2320      	movs	r3, #32
 800e1a0:	0030      	movs	r0, r6
 800e1a2:	4018      	ands	r0, r3
 800e1a4:	421e      	tst	r6, r3
 800e1a6:	d009      	beq.n	800e1bc <_svfprintf_r+0xb68>
 800e1a8:	3b19      	subs	r3, #25
 800e1aa:	3407      	adds	r4, #7
 800e1ac:	439c      	bics	r4, r3
 800e1ae:	0022      	movs	r2, r4
 800e1b0:	ca18      	ldmia	r2!, {r3, r4}
 800e1b2:	9306      	str	r3, [sp, #24]
 800e1b4:	9407      	str	r4, [sp, #28]
 800e1b6:	920d      	str	r2, [sp, #52]	; 0x34
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e79d      	b.n	800e0f8 <_svfprintf_r+0xaa4>
 800e1bc:	0023      	movs	r3, r4
 800e1be:	cb04      	ldmia	r3!, {r2}
 800e1c0:	0031      	movs	r1, r6
 800e1c2:	930d      	str	r3, [sp, #52]	; 0x34
 800e1c4:	2310      	movs	r3, #16
 800e1c6:	4019      	ands	r1, r3
 800e1c8:	421e      	tst	r6, r3
 800e1ca:	d003      	beq.n	800e1d4 <_svfprintf_r+0xb80>
 800e1cc:	9206      	str	r2, [sp, #24]
 800e1ce:	9007      	str	r0, [sp, #28]
 800e1d0:	3b0f      	subs	r3, #15
 800e1d2:	e791      	b.n	800e0f8 <_svfprintf_r+0xaa4>
 800e1d4:	2340      	movs	r3, #64	; 0x40
 800e1d6:	0030      	movs	r0, r6
 800e1d8:	4018      	ands	r0, r3
 800e1da:	421e      	tst	r6, r3
 800e1dc:	d003      	beq.n	800e1e6 <_svfprintf_r+0xb92>
 800e1de:	b293      	uxth	r3, r2
 800e1e0:	9306      	str	r3, [sp, #24]
 800e1e2:	9107      	str	r1, [sp, #28]
 800e1e4:	e7e8      	b.n	800e1b8 <_svfprintf_r+0xb64>
 800e1e6:	2380      	movs	r3, #128	; 0x80
 800e1e8:	0031      	movs	r1, r6
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4019      	ands	r1, r3
 800e1ee:	421e      	tst	r6, r3
 800e1f0:	d003      	beq.n	800e1fa <_svfprintf_r+0xba6>
 800e1f2:	b2d3      	uxtb	r3, r2
 800e1f4:	9306      	str	r3, [sp, #24]
 800e1f6:	9007      	str	r0, [sp, #28]
 800e1f8:	e7de      	b.n	800e1b8 <_svfprintf_r+0xb64>
 800e1fa:	9206      	str	r2, [sp, #24]
 800e1fc:	e7f1      	b.n	800e1e2 <_svfprintf_r+0xb8e>
 800e1fe:	4b89      	ldr	r3, [pc, #548]	; (800e424 <_svfprintf_r+0xdd0>)
 800e200:	0030      	movs	r0, r6
 800e202:	931f      	str	r3, [sp, #124]	; 0x7c
 800e204:	2320      	movs	r3, #32
 800e206:	4018      	ands	r0, r3
 800e208:	421e      	tst	r6, r3
 800e20a:	d01a      	beq.n	800e242 <_svfprintf_r+0xbee>
 800e20c:	3b19      	subs	r3, #25
 800e20e:	3407      	adds	r4, #7
 800e210:	439c      	bics	r4, r3
 800e212:	0022      	movs	r2, r4
 800e214:	ca18      	ldmia	r2!, {r3, r4}
 800e216:	9306      	str	r3, [sp, #24]
 800e218:	9407      	str	r4, [sp, #28]
 800e21a:	920d      	str	r2, [sp, #52]	; 0x34
 800e21c:	07f3      	lsls	r3, r6, #31
 800e21e:	d50a      	bpl.n	800e236 <_svfprintf_r+0xbe2>
 800e220:	9b06      	ldr	r3, [sp, #24]
 800e222:	9a07      	ldr	r2, [sp, #28]
 800e224:	4313      	orrs	r3, r2
 800e226:	d006      	beq.n	800e236 <_svfprintf_r+0xbe2>
 800e228:	2230      	movs	r2, #48	; 0x30
 800e22a:	ab25      	add	r3, sp, #148	; 0x94
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e230:	705a      	strb	r2, [r3, #1]
 800e232:	2302      	movs	r3, #2
 800e234:	431e      	orrs	r6, r3
 800e236:	4b78      	ldr	r3, [pc, #480]	; (800e418 <_svfprintf_r+0xdc4>)
 800e238:	401e      	ands	r6, r3
 800e23a:	2302      	movs	r3, #2
 800e23c:	e75c      	b.n	800e0f8 <_svfprintf_r+0xaa4>
 800e23e:	4b78      	ldr	r3, [pc, #480]	; (800e420 <_svfprintf_r+0xdcc>)
 800e240:	e7de      	b.n	800e200 <_svfprintf_r+0xbac>
 800e242:	0023      	movs	r3, r4
 800e244:	cb04      	ldmia	r3!, {r2}
 800e246:	0031      	movs	r1, r6
 800e248:	930d      	str	r3, [sp, #52]	; 0x34
 800e24a:	2310      	movs	r3, #16
 800e24c:	4019      	ands	r1, r3
 800e24e:	421e      	tst	r6, r3
 800e250:	d002      	beq.n	800e258 <_svfprintf_r+0xc04>
 800e252:	9206      	str	r2, [sp, #24]
 800e254:	9007      	str	r0, [sp, #28]
 800e256:	e7e1      	b.n	800e21c <_svfprintf_r+0xbc8>
 800e258:	2340      	movs	r3, #64	; 0x40
 800e25a:	0030      	movs	r0, r6
 800e25c:	4018      	ands	r0, r3
 800e25e:	421e      	tst	r6, r3
 800e260:	d003      	beq.n	800e26a <_svfprintf_r+0xc16>
 800e262:	b293      	uxth	r3, r2
 800e264:	9306      	str	r3, [sp, #24]
 800e266:	9107      	str	r1, [sp, #28]
 800e268:	e7d8      	b.n	800e21c <_svfprintf_r+0xbc8>
 800e26a:	2380      	movs	r3, #128	; 0x80
 800e26c:	0031      	movs	r1, r6
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4019      	ands	r1, r3
 800e272:	421e      	tst	r6, r3
 800e274:	d002      	beq.n	800e27c <_svfprintf_r+0xc28>
 800e276:	b2d3      	uxtb	r3, r2
 800e278:	9306      	str	r3, [sp, #24]
 800e27a:	e7eb      	b.n	800e254 <_svfprintf_r+0xc00>
 800e27c:	9206      	str	r2, [sp, #24]
 800e27e:	e7f2      	b.n	800e266 <_svfprintf_r+0xc12>
 800e280:	9b07      	ldr	r3, [sp, #28]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10a      	bne.n	800e29c <_svfprintf_r+0xc48>
 800e286:	9b06      	ldr	r3, [sp, #24]
 800e288:	2b09      	cmp	r3, #9
 800e28a:	d807      	bhi.n	800e29c <_svfprintf_r+0xc48>
 800e28c:	23e7      	movs	r3, #231	; 0xe7
 800e28e:	aa1e      	add	r2, sp, #120	; 0x78
 800e290:	189b      	adds	r3, r3, r2
 800e292:	9a06      	ldr	r2, [sp, #24]
 800e294:	3230      	adds	r2, #48	; 0x30
 800e296:	701a      	strb	r2, [r3, #0]
 800e298:	f000 fc18 	bl	800eacc <_svfprintf_r+0x1478>
 800e29c:	2680      	movs	r6, #128	; 0x80
 800e29e:	2300      	movs	r3, #0
 800e2a0:	00f6      	lsls	r6, r6, #3
 800e2a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e2a4:	ad58      	add	r5, sp, #352	; 0x160
 800e2a6:	4026      	ands	r6, r4
 800e2a8:	220a      	movs	r2, #10
 800e2aa:	9806      	ldr	r0, [sp, #24]
 800e2ac:	9907      	ldr	r1, [sp, #28]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f7f2 f8f8 	bl	80004a4 <__aeabi_uldivmod>
 800e2b4:	1e6b      	subs	r3, r5, #1
 800e2b6:	3230      	adds	r2, #48	; 0x30
 800e2b8:	9308      	str	r3, [sp, #32]
 800e2ba:	701a      	strb	r2, [r3, #0]
 800e2bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2be:	900c      	str	r0, [sp, #48]	; 0x30
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	9110      	str	r1, [sp, #64]	; 0x40
 800e2c4:	930e      	str	r3, [sp, #56]	; 0x38
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	d01d      	beq.n	800e306 <_svfprintf_r+0xcb2>
 800e2ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d118      	bne.n	800e306 <_svfprintf_r+0xcb2>
 800e2d4:	2aff      	cmp	r2, #255	; 0xff
 800e2d6:	d016      	beq.n	800e306 <_svfprintf_r+0xcb2>
 800e2d8:	9b07      	ldr	r3, [sp, #28]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d102      	bne.n	800e2e4 <_svfprintf_r+0xc90>
 800e2de:	9b06      	ldr	r3, [sp, #24]
 800e2e0:	2b09      	cmp	r3, #9
 800e2e2:	d910      	bls.n	800e306 <_svfprintf_r+0xcb2>
 800e2e4:	9b08      	ldr	r3, [sp, #32]
 800e2e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e2e8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e2ea:	1a9b      	subs	r3, r3, r2
 800e2ec:	0018      	movs	r0, r3
 800e2ee:	9308      	str	r3, [sp, #32]
 800e2f0:	f7fd ff97 	bl	800c222 <strncpy>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2f8:	920e      	str	r2, [sp, #56]	; 0x38
 800e2fa:	785b      	ldrb	r3, [r3, #1]
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	4193      	sbcs	r3, r2
 800e300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e302:	18d3      	adds	r3, r2, r3
 800e304:	9312      	str	r3, [sp, #72]	; 0x48
 800e306:	9b07      	ldr	r3, [sp, #28]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10f      	bne.n	800e32c <_svfprintf_r+0xcd8>
 800e30c:	9b06      	ldr	r3, [sp, #24]
 800e30e:	2b09      	cmp	r3, #9
 800e310:	d80c      	bhi.n	800e32c <_svfprintf_r+0xcd8>
 800e312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e314:	9a08      	ldr	r2, [sp, #32]
 800e316:	9319      	str	r3, [sp, #100]	; 0x64
 800e318:	ab58      	add	r3, sp, #352	; 0x160
 800e31a:	1a9b      	subs	r3, r3, r2
 800e31c:	9309      	str	r3, [sp, #36]	; 0x24
 800e31e:	2300      	movs	r3, #0
 800e320:	0026      	movs	r6, r4
 800e322:	930c      	str	r3, [sp, #48]	; 0x30
 800e324:	001d      	movs	r5, r3
 800e326:	9310      	str	r3, [sp, #64]	; 0x40
 800e328:	9311      	str	r3, [sp, #68]	; 0x44
 800e32a:	e4f2      	b.n	800dd12 <_svfprintf_r+0x6be>
 800e32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e32e:	9d08      	ldr	r5, [sp, #32]
 800e330:	9306      	str	r3, [sp, #24]
 800e332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e334:	9307      	str	r3, [sp, #28]
 800e336:	e7b7      	b.n	800e2a8 <_svfprintf_r+0xc54>
 800e338:	200f      	movs	r0, #15
 800e33a:	ab58      	add	r3, sp, #352	; 0x160
 800e33c:	9308      	str	r3, [sp, #32]
 800e33e:	9b08      	ldr	r3, [sp, #32]
 800e340:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e342:	3b01      	subs	r3, #1
 800e344:	9308      	str	r3, [sp, #32]
 800e346:	9b06      	ldr	r3, [sp, #24]
 800e348:	4003      	ands	r3, r0
 800e34a:	5cd3      	ldrb	r3, [r2, r3]
 800e34c:	9a08      	ldr	r2, [sp, #32]
 800e34e:	7013      	strb	r3, [r2, #0]
 800e350:	9b07      	ldr	r3, [sp, #28]
 800e352:	0719      	lsls	r1, r3, #28
 800e354:	9b06      	ldr	r3, [sp, #24]
 800e356:	091a      	lsrs	r2, r3, #4
 800e358:	9b07      	ldr	r3, [sp, #28]
 800e35a:	4311      	orrs	r1, r2
 800e35c:	091b      	lsrs	r3, r3, #4
 800e35e:	9307      	str	r3, [sp, #28]
 800e360:	000b      	movs	r3, r1
 800e362:	9a07      	ldr	r2, [sp, #28]
 800e364:	9106      	str	r1, [sp, #24]
 800e366:	4313      	orrs	r3, r2
 800e368:	d1e9      	bne.n	800e33e <_svfprintf_r+0xcea>
 800e36a:	e7d2      	b.n	800e312 <_svfprintf_r+0xcbe>
 800e36c:	aa58      	add	r2, sp, #352	; 0x160
 800e36e:	9208      	str	r2, [sp, #32]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1ce      	bne.n	800e312 <_svfprintf_r+0xcbe>
 800e374:	07f6      	lsls	r6, r6, #31
 800e376:	d5cc      	bpl.n	800e312 <_svfprintf_r+0xcbe>
 800e378:	aa1e      	add	r2, sp, #120	; 0x78
 800e37a:	33e7      	adds	r3, #231	; 0xe7
 800e37c:	189b      	adds	r3, r3, r2
 800e37e:	2230      	movs	r2, #48	; 0x30
 800e380:	e789      	b.n	800e296 <_svfprintf_r+0xc42>
 800e382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e384:	2b00      	cmp	r3, #0
 800e386:	d100      	bne.n	800e38a <_svfprintf_r+0xd36>
 800e388:	e364      	b.n	800ea54 <_svfprintf_r+0x1400>
 800e38a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e38c:	211b      	movs	r1, #27
 800e38e:	ab3f      	add	r3, sp, #252	; 0xfc
 800e390:	701a      	strb	r2, [r3, #0]
 800e392:	2200      	movs	r2, #0
 800e394:	a81e      	add	r0, sp, #120	; 0x78
 800e396:	1809      	adds	r1, r1, r0
 800e398:	700a      	strb	r2, [r1, #0]
 800e39a:	940d      	str	r4, [sp, #52]	; 0x34
 800e39c:	f7ff fabd 	bl	800d91a <_svfprintf_r+0x2c6>
 800e3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3a2:	f7ff fb44 	bl	800da2e <_svfprintf_r+0x3da>
 800e3a6:	2010      	movs	r0, #16
 800e3a8:	1812      	adds	r2, r2, r0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3b0:	2b07      	cmp	r3, #7
 800e3b2:	dd08      	ble.n	800e3c6 <_svfprintf_r+0xd72>
 800e3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3ba:	f003 f9db 	bl	8011774 <__ssprint_r>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d000      	beq.n	800e3c4 <_svfprintf_r+0xd70>
 800e3c2:	e326      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e3c4:	a92f      	add	r1, sp, #188	; 0xbc
 800e3c6:	000f      	movs	r7, r1
 800e3c8:	3c10      	subs	r4, #16
 800e3ca:	e4c5      	b.n	800dd58 <_svfprintf_r+0x704>
 800e3cc:	2010      	movs	r0, #16
 800e3ce:	1812      	adds	r2, r2, r0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3d6:	2b07      	cmp	r3, #7
 800e3d8:	dd08      	ble.n	800e3ec <_svfprintf_r+0xd98>
 800e3da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3de:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3e0:	f003 f9c8 	bl	8011774 <__ssprint_r>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d000      	beq.n	800e3ea <_svfprintf_r+0xd96>
 800e3e8:	e313      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e3ea:	a92f      	add	r1, sp, #188	; 0xbc
 800e3ec:	000f      	movs	r7, r1
 800e3ee:	3c10      	subs	r4, #16
 800e3f0:	e50b      	b.n	800de0a <_svfprintf_r+0x7b6>
 800e3f2:	2010      	movs	r0, #16
 800e3f4:	1812      	adds	r2, r2, r0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	dd08      	ble.n	800e412 <_svfprintf_r+0xdbe>
 800e400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e402:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e404:	aa2c      	add	r2, sp, #176	; 0xb0
 800e406:	f003 f9b5 	bl	8011774 <__ssprint_r>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d000      	beq.n	800e410 <_svfprintf_r+0xdbc>
 800e40e:	e300      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e410:	a92f      	add	r1, sp, #188	; 0xbc
 800e412:	000f      	movs	r7, r1
 800e414:	3c10      	subs	r4, #16
 800e416:	e518      	b.n	800de4a <_svfprintf_r+0x7f6>
 800e418:	fffffbff 	.word	0xfffffbff
 800e41c:	00007830 	.word	0x00007830
 800e420:	08014bf4 	.word	0x08014bf4
 800e424:	08014c05 	.word	0x08014c05
 800e428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e42a:	2b65      	cmp	r3, #101	; 0x65
 800e42c:	dc00      	bgt.n	800e430 <_svfprintf_r+0xddc>
 800e42e:	e241      	b.n	800e8b4 <_svfprintf_r+0x1260>
 800e430:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e432:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e434:	2200      	movs	r2, #0
 800e436:	2300      	movs	r3, #0
 800e438:	f7f2 f806 	bl	8000448 <__aeabi_dcmpeq>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d077      	beq.n	800e530 <_svfprintf_r+0xedc>
 800e440:	4bca      	ldr	r3, [pc, #808]	; (800e76c <_svfprintf_r+0x1118>)
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	2301      	movs	r3, #1
 800e446:	607b      	str	r3, [r7, #4]
 800e448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e44a:	3708      	adds	r7, #8
 800e44c:	3301      	adds	r3, #1
 800e44e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e450:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e452:	3301      	adds	r3, #1
 800e454:	932d      	str	r3, [sp, #180]	; 0xb4
 800e456:	2b07      	cmp	r3, #7
 800e458:	dd08      	ble.n	800e46c <_svfprintf_r+0xe18>
 800e45a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e45c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e45e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e460:	f003 f988 	bl	8011774 <__ssprint_r>
 800e464:	2800      	cmp	r0, #0
 800e466:	d000      	beq.n	800e46a <_svfprintf_r+0xe16>
 800e468:	e2d3      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e46a:	af2f      	add	r7, sp, #188	; 0xbc
 800e46c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e46e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e470:	4293      	cmp	r3, r2
 800e472:	db01      	blt.n	800e478 <_svfprintf_r+0xe24>
 800e474:	07f3      	lsls	r3, r6, #31
 800e476:	d51b      	bpl.n	800e4b0 <_svfprintf_r+0xe5c>
 800e478:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e47a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e47c:	603b      	str	r3, [r7, #0]
 800e47e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e480:	607b      	str	r3, [r7, #4]
 800e482:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e484:	3708      	adds	r7, #8
 800e486:	189b      	adds	r3, r3, r2
 800e488:	932e      	str	r3, [sp, #184]	; 0xb8
 800e48a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e48c:	3301      	adds	r3, #1
 800e48e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e490:	2b07      	cmp	r3, #7
 800e492:	dd08      	ble.n	800e4a6 <_svfprintf_r+0xe52>
 800e494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e496:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e498:	aa2c      	add	r2, sp, #176	; 0xb0
 800e49a:	f003 f96b 	bl	8011774 <__ssprint_r>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d000      	beq.n	800e4a4 <_svfprintf_r+0xe50>
 800e4a2:	e2b6      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e4a4:	af2f      	add	r7, sp, #188	; 0xbc
 800e4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4a8:	2510      	movs	r5, #16
 800e4aa:	1e5c      	subs	r4, r3, #1
 800e4ac:	2c00      	cmp	r4, #0
 800e4ae:	dc2e      	bgt.n	800e50e <_svfprintf_r+0xeba>
 800e4b0:	0776      	lsls	r6, r6, #29
 800e4b2:	d500      	bpl.n	800e4b6 <_svfprintf_r+0xe62>
 800e4b4:	e290      	b.n	800e9d8 <_svfprintf_r+0x1384>
 800e4b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e4b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	da00      	bge.n	800e4c0 <_svfprintf_r+0xe6c>
 800e4be:	0013      	movs	r3, r2
 800e4c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4c2:	18d3      	adds	r3, r2, r3
 800e4c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e4c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d007      	beq.n	800e4dc <_svfprintf_r+0xe88>
 800e4cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4d2:	f003 f94f 	bl	8011774 <__ssprint_r>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d000      	beq.n	800e4dc <_svfprintf_r+0xe88>
 800e4da:	e29a      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d000      	beq.n	800e4e8 <_svfprintf_r+0xe94>
 800e4e6:	e2b0      	b.n	800ea4a <_svfprintf_r+0x13f6>
 800e4e8:	af2f      	add	r7, sp, #188	; 0xbc
 800e4ea:	e5dc      	b.n	800e0a6 <_svfprintf_r+0xa52>
 800e4ec:	3210      	adds	r2, #16
 800e4ee:	607d      	str	r5, [r7, #4]
 800e4f0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4f4:	2b07      	cmp	r3, #7
 800e4f6:	dd08      	ble.n	800e50a <_svfprintf_r+0xeb6>
 800e4f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4fc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4fe:	f003 f939 	bl	8011774 <__ssprint_r>
 800e502:	2800      	cmp	r0, #0
 800e504:	d000      	beq.n	800e508 <_svfprintf_r+0xeb4>
 800e506:	e284      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e508:	a92f      	add	r1, sp, #188	; 0xbc
 800e50a:	000f      	movs	r7, r1
 800e50c:	3c10      	subs	r4, #16
 800e50e:	0039      	movs	r1, r7
 800e510:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e512:	4897      	ldr	r0, [pc, #604]	; (800e770 <_svfprintf_r+0x111c>)
 800e514:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e516:	3301      	adds	r3, #1
 800e518:	3108      	adds	r1, #8
 800e51a:	6038      	str	r0, [r7, #0]
 800e51c:	2c10      	cmp	r4, #16
 800e51e:	dce5      	bgt.n	800e4ec <_svfprintf_r+0xe98>
 800e520:	607c      	str	r4, [r7, #4]
 800e522:	18a4      	adds	r4, r4, r2
 800e524:	942e      	str	r4, [sp, #184]	; 0xb8
 800e526:	000f      	movs	r7, r1
 800e528:	932d      	str	r3, [sp, #180]	; 0xb4
 800e52a:	2b07      	cmp	r3, #7
 800e52c:	ddc0      	ble.n	800e4b0 <_svfprintf_r+0xe5c>
 800e52e:	e05f      	b.n	800e5f0 <_svfprintf_r+0xf9c>
 800e530:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e532:	2b00      	cmp	r3, #0
 800e534:	dc78      	bgt.n	800e628 <_svfprintf_r+0xfd4>
 800e536:	4b8d      	ldr	r3, [pc, #564]	; (800e76c <_svfprintf_r+0x1118>)
 800e538:	603b      	str	r3, [r7, #0]
 800e53a:	2301      	movs	r3, #1
 800e53c:	607b      	str	r3, [r7, #4]
 800e53e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e540:	3708      	adds	r7, #8
 800e542:	3301      	adds	r3, #1
 800e544:	932e      	str	r3, [sp, #184]	; 0xb8
 800e546:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e548:	3301      	adds	r3, #1
 800e54a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e54c:	2b07      	cmp	r3, #7
 800e54e:	dd08      	ble.n	800e562 <_svfprintf_r+0xf0e>
 800e550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e552:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e554:	aa2c      	add	r2, sp, #176	; 0xb0
 800e556:	f003 f90d 	bl	8011774 <__ssprint_r>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d000      	beq.n	800e560 <_svfprintf_r+0xf0c>
 800e55e:	e258      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e560:	af2f      	add	r7, sp, #188	; 0xbc
 800e562:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e564:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e566:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e568:	430b      	orrs	r3, r1
 800e56a:	2101      	movs	r1, #1
 800e56c:	4031      	ands	r1, r6
 800e56e:	430b      	orrs	r3, r1
 800e570:	d09e      	beq.n	800e4b0 <_svfprintf_r+0xe5c>
 800e572:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e574:	603b      	str	r3, [r7, #0]
 800e576:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e578:	607b      	str	r3, [r7, #4]
 800e57a:	189a      	adds	r2, r3, r2
 800e57c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e57e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e580:	3301      	adds	r3, #1
 800e582:	932d      	str	r3, [sp, #180]	; 0xb4
 800e584:	3708      	adds	r7, #8
 800e586:	2b07      	cmp	r3, #7
 800e588:	dd08      	ble.n	800e59c <_svfprintf_r+0xf48>
 800e58a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e58c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e58e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e590:	f003 f8f0 	bl	8011774 <__ssprint_r>
 800e594:	2800      	cmp	r0, #0
 800e596:	d000      	beq.n	800e59a <_svfprintf_r+0xf46>
 800e598:	e23b      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e59a:	af2f      	add	r7, sp, #188	; 0xbc
 800e59c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e59e:	2c00      	cmp	r4, #0
 800e5a0:	da19      	bge.n	800e5d6 <_svfprintf_r+0xf82>
 800e5a2:	0038      	movs	r0, r7
 800e5a4:	2510      	movs	r5, #16
 800e5a6:	4264      	negs	r4, r4
 800e5a8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e5aa:	4a71      	ldr	r2, [pc, #452]	; (800e770 <_svfprintf_r+0x111c>)
 800e5ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5ae:	3101      	adds	r1, #1
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	6002      	str	r2, [r0, #0]
 800e5b4:	2c10      	cmp	r4, #16
 800e5b6:	dc25      	bgt.n	800e604 <_svfprintf_r+0xfb0>
 800e5b8:	6044      	str	r4, [r0, #4]
 800e5ba:	18e4      	adds	r4, r4, r3
 800e5bc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e5be:	912d      	str	r1, [sp, #180]	; 0xb4
 800e5c0:	2907      	cmp	r1, #7
 800e5c2:	dd08      	ble.n	800e5d6 <_svfprintf_r+0xf82>
 800e5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5ca:	f003 f8d3 	bl	8011774 <__ssprint_r>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d000      	beq.n	800e5d4 <_svfprintf_r+0xf80>
 800e5d2:	e21e      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e5d4:	af2f      	add	r7, sp, #188	; 0xbc
 800e5d6:	9b08      	ldr	r3, [sp, #32]
 800e5d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5da:	603b      	str	r3, [r7, #0]
 800e5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5de:	18d2      	adds	r2, r2, r3
 800e5e0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	3201      	adds	r2, #1
 800e5e8:	922d      	str	r2, [sp, #180]	; 0xb4
 800e5ea:	2a07      	cmp	r2, #7
 800e5ec:	dc00      	bgt.n	800e5f0 <_svfprintf_r+0xf9c>
 800e5ee:	e45b      	b.n	800dea8 <_svfprintf_r+0x854>
 800e5f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5f6:	f003 f8bd 	bl	8011774 <__ssprint_r>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d000      	beq.n	800e600 <_svfprintf_r+0xfac>
 800e5fe:	e208      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e600:	af2f      	add	r7, sp, #188	; 0xbc
 800e602:	e755      	b.n	800e4b0 <_svfprintf_r+0xe5c>
 800e604:	3310      	adds	r3, #16
 800e606:	6045      	str	r5, [r0, #4]
 800e608:	932e      	str	r3, [sp, #184]	; 0xb8
 800e60a:	912d      	str	r1, [sp, #180]	; 0xb4
 800e60c:	2907      	cmp	r1, #7
 800e60e:	dd08      	ble.n	800e622 <_svfprintf_r+0xfce>
 800e610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e612:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e614:	aa2c      	add	r2, sp, #176	; 0xb0
 800e616:	f003 f8ad 	bl	8011774 <__ssprint_r>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d000      	beq.n	800e620 <_svfprintf_r+0xfcc>
 800e61e:	e1f8      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e620:	af2f      	add	r7, sp, #188	; 0xbc
 800e622:	0038      	movs	r0, r7
 800e624:	3c10      	subs	r4, #16
 800e626:	e7bf      	b.n	800e5a8 <_svfprintf_r+0xf54>
 800e628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e62a:	002c      	movs	r4, r5
 800e62c:	429d      	cmp	r5, r3
 800e62e:	dd00      	ble.n	800e632 <_svfprintf_r+0xfde>
 800e630:	001c      	movs	r4, r3
 800e632:	2c00      	cmp	r4, #0
 800e634:	dd14      	ble.n	800e660 <_svfprintf_r+0x100c>
 800e636:	9b08      	ldr	r3, [sp, #32]
 800e638:	607c      	str	r4, [r7, #4]
 800e63a:	603b      	str	r3, [r7, #0]
 800e63c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e63e:	3708      	adds	r7, #8
 800e640:	18e3      	adds	r3, r4, r3
 800e642:	932e      	str	r3, [sp, #184]	; 0xb8
 800e644:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e646:	3301      	adds	r3, #1
 800e648:	932d      	str	r3, [sp, #180]	; 0xb4
 800e64a:	2b07      	cmp	r3, #7
 800e64c:	dd08      	ble.n	800e660 <_svfprintf_r+0x100c>
 800e64e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e650:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e652:	aa2c      	add	r2, sp, #176	; 0xb0
 800e654:	f003 f88e 	bl	8011774 <__ssprint_r>
 800e658:	2800      	cmp	r0, #0
 800e65a:	d000      	beq.n	800e65e <_svfprintf_r+0x100a>
 800e65c:	e1d9      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e65e:	af2f      	add	r7, sp, #188	; 0xbc
 800e660:	43e3      	mvns	r3, r4
 800e662:	17db      	asrs	r3, r3, #31
 800e664:	401c      	ands	r4, r3
 800e666:	1b2c      	subs	r4, r5, r4
 800e668:	2c00      	cmp	r4, #0
 800e66a:	dd18      	ble.n	800e69e <_svfprintf_r+0x104a>
 800e66c:	0039      	movs	r1, r7
 800e66e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e670:	483f      	ldr	r0, [pc, #252]	; (800e770 <_svfprintf_r+0x111c>)
 800e672:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e674:	3301      	adds	r3, #1
 800e676:	3108      	adds	r1, #8
 800e678:	6038      	str	r0, [r7, #0]
 800e67a:	2c10      	cmp	r4, #16
 800e67c:	dc7a      	bgt.n	800e774 <_svfprintf_r+0x1120>
 800e67e:	607c      	str	r4, [r7, #4]
 800e680:	18a4      	adds	r4, r4, r2
 800e682:	000f      	movs	r7, r1
 800e684:	942e      	str	r4, [sp, #184]	; 0xb8
 800e686:	932d      	str	r3, [sp, #180]	; 0xb4
 800e688:	2b07      	cmp	r3, #7
 800e68a:	dd08      	ble.n	800e69e <_svfprintf_r+0x104a>
 800e68c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e68e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e690:	aa2c      	add	r2, sp, #176	; 0xb0
 800e692:	f003 f86f 	bl	8011774 <__ssprint_r>
 800e696:	2800      	cmp	r0, #0
 800e698:	d000      	beq.n	800e69c <_svfprintf_r+0x1048>
 800e69a:	e1ba      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e69c:	af2f      	add	r7, sp, #188	; 0xbc
 800e69e:	9b08      	ldr	r3, [sp, #32]
 800e6a0:	195d      	adds	r5, r3, r5
 800e6a2:	0573      	lsls	r3, r6, #21
 800e6a4:	d50b      	bpl.n	800e6be <_svfprintf_r+0x106a>
 800e6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d176      	bne.n	800e79a <_svfprintf_r+0x1146>
 800e6ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d176      	bne.n	800e7a0 <_svfprintf_r+0x114c>
 800e6b2:	9b08      	ldr	r3, [sp, #32]
 800e6b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6b6:	189b      	adds	r3, r3, r2
 800e6b8:	429d      	cmp	r5, r3
 800e6ba:	d900      	bls.n	800e6be <_svfprintf_r+0x106a>
 800e6bc:	001d      	movs	r5, r3
 800e6be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	db01      	blt.n	800e6ca <_svfprintf_r+0x1076>
 800e6c6:	07f3      	lsls	r3, r6, #31
 800e6c8:	d516      	bpl.n	800e6f8 <_svfprintf_r+0x10a4>
 800e6ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e6ce:	603b      	str	r3, [r7, #0]
 800e6d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	189b      	adds	r3, r3, r2
 800e6da:	932e      	str	r3, [sp, #184]	; 0xb8
 800e6dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6de:	3301      	adds	r3, #1
 800e6e0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6e2:	2b07      	cmp	r3, #7
 800e6e4:	dd08      	ble.n	800e6f8 <_svfprintf_r+0x10a4>
 800e6e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6ea:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6ec:	f003 f842 	bl	8011774 <__ssprint_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d000      	beq.n	800e6f6 <_svfprintf_r+0x10a2>
 800e6f4:	e18d      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e6f6:	af2f      	add	r7, sp, #188	; 0xbc
 800e6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	4694      	mov	ip, r2
 800e6fe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e700:	4463      	add	r3, ip
 800e702:	1b5b      	subs	r3, r3, r5
 800e704:	1b14      	subs	r4, r2, r4
 800e706:	429c      	cmp	r4, r3
 800e708:	dd00      	ble.n	800e70c <_svfprintf_r+0x10b8>
 800e70a:	001c      	movs	r4, r3
 800e70c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e70e:	2c00      	cmp	r4, #0
 800e710:	dd12      	ble.n	800e738 <_svfprintf_r+0x10e4>
 800e712:	18e3      	adds	r3, r4, r3
 800e714:	932e      	str	r3, [sp, #184]	; 0xb8
 800e716:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e718:	603d      	str	r5, [r7, #0]
 800e71a:	3301      	adds	r3, #1
 800e71c:	607c      	str	r4, [r7, #4]
 800e71e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e720:	3708      	adds	r7, #8
 800e722:	2b07      	cmp	r3, #7
 800e724:	dd08      	ble.n	800e738 <_svfprintf_r+0x10e4>
 800e726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e728:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e72a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e72c:	f003 f822 	bl	8011774 <__ssprint_r>
 800e730:	2800      	cmp	r0, #0
 800e732:	d000      	beq.n	800e736 <_svfprintf_r+0x10e2>
 800e734:	e16d      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e736:	af2f      	add	r7, sp, #188	; 0xbc
 800e738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e73c:	2510      	movs	r5, #16
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	43e2      	mvns	r2, r4
 800e742:	17d2      	asrs	r2, r2, #31
 800e744:	4014      	ands	r4, r2
 800e746:	1b1c      	subs	r4, r3, r4
 800e748:	2c00      	cmp	r4, #0
 800e74a:	dc00      	bgt.n	800e74e <_svfprintf_r+0x10fa>
 800e74c:	e6b0      	b.n	800e4b0 <_svfprintf_r+0xe5c>
 800e74e:	0039      	movs	r1, r7
 800e750:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e752:	4807      	ldr	r0, [pc, #28]	; (800e770 <_svfprintf_r+0x111c>)
 800e754:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e756:	3301      	adds	r3, #1
 800e758:	3108      	adds	r1, #8
 800e75a:	6038      	str	r0, [r7, #0]
 800e75c:	2c10      	cmp	r4, #16
 800e75e:	dd00      	ble.n	800e762 <_svfprintf_r+0x110e>
 800e760:	e096      	b.n	800e890 <_svfprintf_r+0x123c>
 800e762:	1912      	adds	r2, r2, r4
 800e764:	607c      	str	r4, [r7, #4]
 800e766:	922e      	str	r2, [sp, #184]	; 0xb8
 800e768:	e6dd      	b.n	800e526 <_svfprintf_r+0xed2>
 800e76a:	46c0      	nop			; (mov r8, r8)
 800e76c:	08014c16 	.word	0x08014c16
 800e770:	08014c28 	.word	0x08014c28
 800e774:	2010      	movs	r0, #16
 800e776:	1812      	adds	r2, r2, r0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e77c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e77e:	2b07      	cmp	r3, #7
 800e780:	dd08      	ble.n	800e794 <_svfprintf_r+0x1140>
 800e782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e784:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e786:	aa2c      	add	r2, sp, #176	; 0xb0
 800e788:	f002 fff4 	bl	8011774 <__ssprint_r>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d000      	beq.n	800e792 <_svfprintf_r+0x113e>
 800e790:	e13f      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e792:	a92f      	add	r1, sp, #188	; 0xbc
 800e794:	000f      	movs	r7, r1
 800e796:	3c10      	subs	r4, #16
 800e798:	e768      	b.n	800e66c <_svfprintf_r+0x1018>
 800e79a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d05d      	beq.n	800e85c <_svfprintf_r+0x1208>
 800e7a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	9310      	str	r3, [sp, #64]	; 0x40
 800e7a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7ae:	607b      	str	r3, [r7, #4]
 800e7b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	189b      	adds	r3, r3, r2
 800e7b6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7be:	2b07      	cmp	r3, #7
 800e7c0:	dd08      	ble.n	800e7d4 <_svfprintf_r+0x1180>
 800e7c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7c8:	f002 ffd4 	bl	8011774 <__ssprint_r>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d000      	beq.n	800e7d2 <_svfprintf_r+0x117e>
 800e7d0:	e11f      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e7d2:	af2f      	add	r7, sp, #188	; 0xbc
 800e7d4:	9b08      	ldr	r3, [sp, #32]
 800e7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7d8:	189c      	adds	r4, r3, r2
 800e7da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7dc:	1b64      	subs	r4, r4, r5
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	429c      	cmp	r4, r3
 800e7e2:	dd00      	ble.n	800e7e6 <_svfprintf_r+0x1192>
 800e7e4:	001c      	movs	r4, r3
 800e7e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e7e8:	2c00      	cmp	r4, #0
 800e7ea:	dd12      	ble.n	800e812 <_svfprintf_r+0x11be>
 800e7ec:	18e3      	adds	r3, r4, r3
 800e7ee:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7f2:	603d      	str	r5, [r7, #0]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	607c      	str	r4, [r7, #4]
 800e7f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	2b07      	cmp	r3, #7
 800e7fe:	dd08      	ble.n	800e812 <_svfprintf_r+0x11be>
 800e800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e802:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e804:	aa2c      	add	r2, sp, #176	; 0xb0
 800e806:	f002 ffb5 	bl	8011774 <__ssprint_r>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d000      	beq.n	800e810 <_svfprintf_r+0x11bc>
 800e80e:	e100      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e810:	af2f      	add	r7, sp, #188	; 0xbc
 800e812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e814:	781a      	ldrb	r2, [r3, #0]
 800e816:	43e3      	mvns	r3, r4
 800e818:	17db      	asrs	r3, r3, #31
 800e81a:	401c      	ands	r4, r3
 800e81c:	1b14      	subs	r4, r2, r4
 800e81e:	2c00      	cmp	r4, #0
 800e820:	dd18      	ble.n	800e854 <_svfprintf_r+0x1200>
 800e822:	0039      	movs	r1, r7
 800e824:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e826:	48aa      	ldr	r0, [pc, #680]	; (800ead0 <_svfprintf_r+0x147c>)
 800e828:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e82a:	3301      	adds	r3, #1
 800e82c:	3108      	adds	r1, #8
 800e82e:	6038      	str	r0, [r7, #0]
 800e830:	2c10      	cmp	r4, #16
 800e832:	dc1a      	bgt.n	800e86a <_svfprintf_r+0x1216>
 800e834:	1912      	adds	r2, r2, r4
 800e836:	607c      	str	r4, [r7, #4]
 800e838:	922e      	str	r2, [sp, #184]	; 0xb8
 800e83a:	000f      	movs	r7, r1
 800e83c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e83e:	2b07      	cmp	r3, #7
 800e840:	dd08      	ble.n	800e854 <_svfprintf_r+0x1200>
 800e842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e844:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e846:	aa2c      	add	r2, sp, #176	; 0xb0
 800e848:	f002 ff94 	bl	8011774 <__ssprint_r>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d000      	beq.n	800e852 <_svfprintf_r+0x11fe>
 800e850:	e0df      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e852:	af2f      	add	r7, sp, #188	; 0xbc
 800e854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	18ed      	adds	r5, r5, r3
 800e85a:	e724      	b.n	800e6a6 <_svfprintf_r+0x1052>
 800e85c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e85e:	3b01      	subs	r3, #1
 800e860:	9312      	str	r3, [sp, #72]	; 0x48
 800e862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e864:	3b01      	subs	r3, #1
 800e866:	9311      	str	r3, [sp, #68]	; 0x44
 800e868:	e79d      	b.n	800e7a6 <_svfprintf_r+0x1152>
 800e86a:	2010      	movs	r0, #16
 800e86c:	1812      	adds	r2, r2, r0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	922e      	str	r2, [sp, #184]	; 0xb8
 800e872:	932d      	str	r3, [sp, #180]	; 0xb4
 800e874:	2b07      	cmp	r3, #7
 800e876:	dd08      	ble.n	800e88a <_svfprintf_r+0x1236>
 800e878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e87a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e87c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e87e:	f002 ff79 	bl	8011774 <__ssprint_r>
 800e882:	2800      	cmp	r0, #0
 800e884:	d000      	beq.n	800e888 <_svfprintf_r+0x1234>
 800e886:	e0c4      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e888:	a92f      	add	r1, sp, #188	; 0xbc
 800e88a:	000f      	movs	r7, r1
 800e88c:	3c10      	subs	r4, #16
 800e88e:	e7c8      	b.n	800e822 <_svfprintf_r+0x11ce>
 800e890:	3210      	adds	r2, #16
 800e892:	607d      	str	r5, [r7, #4]
 800e894:	922e      	str	r2, [sp, #184]	; 0xb8
 800e896:	932d      	str	r3, [sp, #180]	; 0xb4
 800e898:	2b07      	cmp	r3, #7
 800e89a:	dd08      	ble.n	800e8ae <_svfprintf_r+0x125a>
 800e89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e89e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8a0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8a2:	f002 ff67 	bl	8011774 <__ssprint_r>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d000      	beq.n	800e8ac <_svfprintf_r+0x1258>
 800e8aa:	e0b2      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e8ac:	a92f      	add	r1, sp, #188	; 0xbc
 800e8ae:	000f      	movs	r7, r1
 800e8b0:	3c10      	subs	r4, #16
 800e8b2:	e74c      	b.n	800e74e <_svfprintf_r+0x10fa>
 800e8b4:	003c      	movs	r4, r7
 800e8b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e8b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8bc:	3101      	adds	r1, #1
 800e8be:	3301      	adds	r3, #1
 800e8c0:	3408      	adds	r4, #8
 800e8c2:	2a01      	cmp	r2, #1
 800e8c4:	dc03      	bgt.n	800e8ce <_svfprintf_r+0x127a>
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	4216      	tst	r6, r2
 800e8ca:	d100      	bne.n	800e8ce <_svfprintf_r+0x127a>
 800e8cc:	e07f      	b.n	800e9ce <_svfprintf_r+0x137a>
 800e8ce:	9a08      	ldr	r2, [sp, #32]
 800e8d0:	912e      	str	r1, [sp, #184]	; 0xb8
 800e8d2:	603a      	str	r2, [r7, #0]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8d8:	607a      	str	r2, [r7, #4]
 800e8da:	2b07      	cmp	r3, #7
 800e8dc:	dd08      	ble.n	800e8f0 <_svfprintf_r+0x129c>
 800e8de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8e4:	f002 ff46 	bl	8011774 <__ssprint_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d000      	beq.n	800e8ee <_svfprintf_r+0x129a>
 800e8ec:	e091      	b.n	800ea12 <_svfprintf_r+0x13be>
 800e8ee:	ac2f      	add	r4, sp, #188	; 0xbc
 800e8f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8fc:	3408      	adds	r4, #8
 800e8fe:	189b      	adds	r3, r3, r2
 800e900:	932e      	str	r3, [sp, #184]	; 0xb8
 800e902:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e904:	3301      	adds	r3, #1
 800e906:	932d      	str	r3, [sp, #180]	; 0xb4
 800e908:	2b07      	cmp	r3, #7
 800e90a:	dd07      	ble.n	800e91c <_svfprintf_r+0x12c8>
 800e90c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e90e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e910:	aa2c      	add	r2, sp, #176	; 0xb0
 800e912:	f002 ff2f 	bl	8011774 <__ssprint_r>
 800e916:	2800      	cmp	r0, #0
 800e918:	d17b      	bne.n	800ea12 <_svfprintf_r+0x13be>
 800e91a:	ac2f      	add	r4, sp, #188	; 0xbc
 800e91c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e91e:	2200      	movs	r2, #0
 800e920:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e922:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e924:	9309      	str	r3, [sp, #36]	; 0x24
 800e926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e928:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e92a:	1e5d      	subs	r5, r3, #1
 800e92c:	2300      	movs	r3, #0
 800e92e:	f7f1 fd8b 	bl	8000448 <__aeabi_dcmpeq>
 800e932:	2800      	cmp	r0, #0
 800e934:	d126      	bne.n	800e984 <_svfprintf_r+0x1330>
 800e936:	9b08      	ldr	r3, [sp, #32]
 800e938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e93a:	3301      	adds	r3, #1
 800e93c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	1e7b      	subs	r3, r7, #1
 800e942:	3201      	adds	r2, #1
 800e944:	185b      	adds	r3, r3, r1
 800e946:	6065      	str	r5, [r4, #4]
 800e948:	932e      	str	r3, [sp, #184]	; 0xb8
 800e94a:	922d      	str	r2, [sp, #180]	; 0xb4
 800e94c:	3408      	adds	r4, #8
 800e94e:	2a07      	cmp	r2, #7
 800e950:	dd07      	ble.n	800e962 <_svfprintf_r+0x130e>
 800e952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e954:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e956:	aa2c      	add	r2, sp, #176	; 0xb0
 800e958:	f002 ff0c 	bl	8011774 <__ssprint_r>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d158      	bne.n	800ea12 <_svfprintf_r+0x13be>
 800e960:	ac2f      	add	r4, sp, #188	; 0xbc
 800e962:	ab28      	add	r3, sp, #160	; 0xa0
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e968:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e96a:	6063      	str	r3, [r4, #4]
 800e96c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e96e:	189b      	adds	r3, r3, r2
 800e970:	932e      	str	r3, [sp, #184]	; 0xb8
 800e972:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e974:	3301      	adds	r3, #1
 800e976:	932d      	str	r3, [sp, #180]	; 0xb4
 800e978:	2b07      	cmp	r3, #7
 800e97a:	dd00      	ble.n	800e97e <_svfprintf_r+0x132a>
 800e97c:	e638      	b.n	800e5f0 <_svfprintf_r+0xf9c>
 800e97e:	3408      	adds	r4, #8
 800e980:	0027      	movs	r7, r4
 800e982:	e595      	b.n	800e4b0 <_svfprintf_r+0xe5c>
 800e984:	2710      	movs	r7, #16
 800e986:	2d00      	cmp	r5, #0
 800e988:	ddeb      	ble.n	800e962 <_svfprintf_r+0x130e>
 800e98a:	0021      	movs	r1, r4
 800e98c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e98e:	4850      	ldr	r0, [pc, #320]	; (800ead0 <_svfprintf_r+0x147c>)
 800e990:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e992:	3301      	adds	r3, #1
 800e994:	3108      	adds	r1, #8
 800e996:	6020      	str	r0, [r4, #0]
 800e998:	2d10      	cmp	r5, #16
 800e99a:	dc07      	bgt.n	800e9ac <_svfprintf_r+0x1358>
 800e99c:	6065      	str	r5, [r4, #4]
 800e99e:	000c      	movs	r4, r1
 800e9a0:	18ad      	adds	r5, r5, r2
 800e9a2:	952e      	str	r5, [sp, #184]	; 0xb8
 800e9a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9a6:	2b07      	cmp	r3, #7
 800e9a8:	dddb      	ble.n	800e962 <_svfprintf_r+0x130e>
 800e9aa:	e7d2      	b.n	800e952 <_svfprintf_r+0x12fe>
 800e9ac:	3210      	adds	r2, #16
 800e9ae:	6067      	str	r7, [r4, #4]
 800e9b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9b4:	2b07      	cmp	r3, #7
 800e9b6:	dd07      	ble.n	800e9c8 <_svfprintf_r+0x1374>
 800e9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9be:	f002 fed9 	bl	8011774 <__ssprint_r>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d125      	bne.n	800ea12 <_svfprintf_r+0x13be>
 800e9c6:	a92f      	add	r1, sp, #188	; 0xbc
 800e9c8:	000c      	movs	r4, r1
 800e9ca:	3d10      	subs	r5, #16
 800e9cc:	e7dd      	b.n	800e98a <_svfprintf_r+0x1336>
 800e9ce:	9808      	ldr	r0, [sp, #32]
 800e9d0:	912e      	str	r1, [sp, #184]	; 0xb8
 800e9d2:	c705      	stmia	r7!, {r0, r2}
 800e9d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9d6:	e7e6      	b.n	800e9a6 <_svfprintf_r+0x1352>
 800e9d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e9dc:	2510      	movs	r5, #16
 800e9de:	1a9c      	subs	r4, r3, r2
 800e9e0:	2c00      	cmp	r4, #0
 800e9e2:	dc00      	bgt.n	800e9e6 <_svfprintf_r+0x1392>
 800e9e4:	e567      	b.n	800e4b6 <_svfprintf_r+0xe62>
 800e9e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9e8:	493a      	ldr	r1, [pc, #232]	; (800ead4 <_svfprintf_r+0x1480>)
 800e9ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	6039      	str	r1, [r7, #0]
 800e9f0:	2c10      	cmp	r4, #16
 800e9f2:	dc19      	bgt.n	800ea28 <_svfprintf_r+0x13d4>
 800e9f4:	607c      	str	r4, [r7, #4]
 800e9f6:	18a4      	adds	r4, r4, r2
 800e9f8:	942e      	str	r4, [sp, #184]	; 0xb8
 800e9fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9fc:	2b07      	cmp	r3, #7
 800e9fe:	dc00      	bgt.n	800ea02 <_svfprintf_r+0x13ae>
 800ea00:	e559      	b.n	800e4b6 <_svfprintf_r+0xe62>
 800ea02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea06:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea08:	f002 feb4 	bl	8011774 <__ssprint_r>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d100      	bne.n	800ea12 <_svfprintf_r+0x13be>
 800ea10:	e551      	b.n	800e4b6 <_svfprintf_r+0xe62>
 800ea12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d101      	bne.n	800ea1c <_svfprintf_r+0x13c8>
 800ea18:	f7ff f845 	bl	800daa6 <_svfprintf_r+0x452>
 800ea1c:	0019      	movs	r1, r3
 800ea1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea20:	f7fd fd80 	bl	800c524 <_free_r>
 800ea24:	f7ff f83f 	bl	800daa6 <_svfprintf_r+0x452>
 800ea28:	3210      	adds	r2, #16
 800ea2a:	607d      	str	r5, [r7, #4]
 800ea2c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ea2e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea30:	3708      	adds	r7, #8
 800ea32:	2b07      	cmp	r3, #7
 800ea34:	dd07      	ble.n	800ea46 <_svfprintf_r+0x13f2>
 800ea36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea3a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea3c:	f002 fe9a 	bl	8011774 <__ssprint_r>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d1e6      	bne.n	800ea12 <_svfprintf_r+0x13be>
 800ea44:	af2f      	add	r7, sp, #188	; 0xbc
 800ea46:	3c10      	subs	r4, #16
 800ea48:	e7cd      	b.n	800e9e6 <_svfprintf_r+0x1392>
 800ea4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea4e:	f7fd fd69 	bl	800c524 <_free_r>
 800ea52:	e549      	b.n	800e4e8 <_svfprintf_r+0xe94>
 800ea54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d101      	bne.n	800ea5e <_svfprintf_r+0x140a>
 800ea5a:	f7ff f824 	bl	800daa6 <_svfprintf_r+0x452>
 800ea5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea62:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea64:	f002 fe86 	bl	8011774 <__ssprint_r>
 800ea68:	f7ff f81d 	bl	800daa6 <_svfprintf_r+0x452>
 800ea6c:	0034      	movs	r4, r6
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	d101      	bne.n	800ea76 <_svfprintf_r+0x1422>
 800ea72:	f7fe ff8c 	bl	800d98e <_svfprintf_r+0x33a>
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d101      	bne.n	800ea7e <_svfprintf_r+0x142a>
 800ea7a:	f7ff fc01 	bl	800e280 <_svfprintf_r+0xc2c>
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d100      	bne.n	800ea84 <_svfprintf_r+0x1430>
 800ea82:	e459      	b.n	800e338 <_svfprintf_r+0xce4>
 800ea84:	2507      	movs	r5, #7
 800ea86:	ab58      	add	r3, sp, #352	; 0x160
 800ea88:	9308      	str	r3, [sp, #32]
 800ea8a:	9a08      	ldr	r2, [sp, #32]
 800ea8c:	0013      	movs	r3, r2
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	9308      	str	r3, [sp, #32]
 800ea92:	9b06      	ldr	r3, [sp, #24]
 800ea94:	9908      	ldr	r1, [sp, #32]
 800ea96:	402b      	ands	r3, r5
 800ea98:	3330      	adds	r3, #48	; 0x30
 800ea9a:	700b      	strb	r3, [r1, #0]
 800ea9c:	9907      	ldr	r1, [sp, #28]
 800ea9e:	074e      	lsls	r6, r1, #29
 800eaa0:	9906      	ldr	r1, [sp, #24]
 800eaa2:	08c8      	lsrs	r0, r1, #3
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	4306      	orrs	r6, r0
 800eaa8:	08c9      	lsrs	r1, r1, #3
 800eaaa:	9107      	str	r1, [sp, #28]
 800eaac:	0031      	movs	r1, r6
 800eaae:	9807      	ldr	r0, [sp, #28]
 800eab0:	9606      	str	r6, [sp, #24]
 800eab2:	4301      	orrs	r1, r0
 800eab4:	d1e9      	bne.n	800ea8a <_svfprintf_r+0x1436>
 800eab6:	07e1      	lsls	r1, r4, #31
 800eab8:	d400      	bmi.n	800eabc <_svfprintf_r+0x1468>
 800eaba:	e42a      	b.n	800e312 <_svfprintf_r+0xcbe>
 800eabc:	2b30      	cmp	r3, #48	; 0x30
 800eabe:	d100      	bne.n	800eac2 <_svfprintf_r+0x146e>
 800eac0:	e427      	b.n	800e312 <_svfprintf_r+0xcbe>
 800eac2:	2130      	movs	r1, #48	; 0x30
 800eac4:	9b08      	ldr	r3, [sp, #32]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	7019      	strb	r1, [r3, #0]
 800eaca:	1e93      	subs	r3, r2, #2
 800eacc:	9308      	str	r3, [sp, #32]
 800eace:	e420      	b.n	800e312 <_svfprintf_r+0xcbe>
 800ead0:	08014c28 	.word	0x08014c28
 800ead4:	08014c18 	.word	0x08014c18

0800ead8 <__ssvfscanf_r>:
 800ead8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eada:	4ca7      	ldr	r4, [pc, #668]	; (800ed78 <__ssvfscanf_r+0x2a0>)
 800eadc:	44a5      	add	sp, r4
 800eade:	af02      	add	r7, sp, #8
 800eae0:	633b      	str	r3, [r7, #48]	; 0x30
 800eae2:	000b      	movs	r3, r1
 800eae4:	6378      	str	r0, [r7, #52]	; 0x34
 800eae6:	6479      	str	r1, [r7, #68]	; 0x44
 800eae8:	61ba      	str	r2, [r7, #24]
 800eaea:	220c      	movs	r2, #12
 800eaec:	5e9a      	ldrsh	r2, [r3, r2]
 800eaee:	2380      	movs	r3, #128	; 0x80
 800eaf0:	019b      	lsls	r3, r3, #6
 800eaf2:	421a      	tst	r2, r3
 800eaf4:	d105      	bne.n	800eb02 <__ssvfscanf_r+0x2a>
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	818b      	strh	r3, [r1, #12]
 800eafa:	4aa0      	ldr	r2, [pc, #640]	; (800ed7c <__ssvfscanf_r+0x2a4>)
 800eafc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eafe:	4013      	ands	r3, r2
 800eb00:	664b      	str	r3, [r1, #100]	; 0x64
 800eb02:	2300      	movs	r3, #0
 800eb04:	617b      	str	r3, [r7, #20]
 800eb06:	643b      	str	r3, [r7, #64]	; 0x40
 800eb08:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb0a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	3201      	adds	r2, #1
 800eb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb1a:	61ba      	str	r2, [r7, #24]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d100      	bne.n	800eb22 <__ssvfscanf_r+0x4a>
 800eb20:	e0d7      	b.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800eb22:	2608      	movs	r6, #8
 800eb24:	2108      	movs	r1, #8
 800eb26:	4a96      	ldr	r2, [pc, #600]	; (800ed80 <__ssvfscanf_r+0x2a8>)
 800eb28:	5cd2      	ldrb	r2, [r2, r3]
 800eb2a:	4016      	ands	r6, r2
 800eb2c:	420a      	tst	r2, r1
 800eb2e:	d01d      	beq.n	800eb6c <__ssvfscanf_r+0x94>
 800eb30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dd12      	ble.n	800eb5e <__ssvfscanf_r+0x86>
 800eb38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb3a:	4991      	ldr	r1, [pc, #580]	; (800ed80 <__ssvfscanf_r+0x2a8>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	781a      	ldrb	r2, [r3, #0]
 800eb40:	5c8a      	ldrb	r2, [r1, r2]
 800eb42:	2108      	movs	r1, #8
 800eb44:	420a      	tst	r2, r1
 800eb46:	d0e3      	beq.n	800eb10 <__ssvfscanf_r+0x38>
 800eb48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb4c:	3201      	adds	r2, #1
 800eb4e:	63ba      	str	r2, [r7, #56]	; 0x38
 800eb50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb52:	3301      	adds	r3, #1
 800eb54:	6852      	ldr	r2, [r2, #4]
 800eb56:	600b      	str	r3, [r1, #0]
 800eb58:	3a01      	subs	r2, #1
 800eb5a:	604a      	str	r2, [r1, #4]
 800eb5c:	e7e8      	b.n	800eb30 <__ssvfscanf_r+0x58>
 800eb5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb62:	f002 fec7 	bl	80118f4 <__ssrefill_r>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d0e6      	beq.n	800eb38 <__ssvfscanf_r+0x60>
 800eb6a:	e7d1      	b.n	800eb10 <__ssvfscanf_r+0x38>
 800eb6c:	2b25      	cmp	r3, #37	; 0x25
 800eb6e:	d165      	bne.n	800ec3c <__ssvfscanf_r+0x164>
 800eb70:	250a      	movs	r5, #10
 800eb72:	2480      	movs	r4, #128	; 0x80
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	63fe      	str	r6, [r7, #60]	; 0x3c
 800eb78:	3b16      	subs	r3, #22
 800eb7a:	69b9      	ldr	r1, [r7, #24]
 800eb7c:	3101      	adds	r1, #1
 800eb7e:	61b9      	str	r1, [r7, #24]
 800eb80:	7811      	ldrb	r1, [r2, #0]
 800eb82:	0008      	movs	r0, r1
 800eb84:	3825      	subs	r0, #37	; 0x25
 800eb86:	2855      	cmp	r0, #85	; 0x55
 800eb88:	d900      	bls.n	800eb8c <__ssvfscanf_r+0xb4>
 800eb8a:	e170      	b.n	800ee6e <__ssvfscanf_r+0x396>
 800eb8c:	f7f1 facc 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eb90:	016f0056 	.word	0x016f0056
 800eb94:	016f016f 	.word	0x016f016f
 800eb98:	0081016f 	.word	0x0081016f
 800eb9c:	016f016f 	.word	0x016f016f
 800eba0:	016f016f 	.word	0x016f016f
 800eba4:	00b8016f 	.word	0x00b8016f
 800eba8:	00b800b8 	.word	0x00b800b8
 800ebac:	00b800b8 	.word	0x00b800b8
 800ebb0:	00b800b8 	.word	0x00b800b8
 800ebb4:	00b800b8 	.word	0x00b800b8
 800ebb8:	016f00b8 	.word	0x016f00b8
 800ebbc:	016f016f 	.word	0x016f016f
 800ebc0:	016f016f 	.word	0x016f016f
 800ebc4:	016f016f 	.word	0x016f016f
 800ebc8:	016f00d8 	.word	0x016f00d8
 800ebcc:	00c1010a 	.word	0x00c1010a
 800ebd0:	00d800d8 	.word	0x00d800d8
 800ebd4:	016f00d8 	.word	0x016f00d8
 800ebd8:	016f016f 	.word	0x016f016f
 800ebdc:	009f016f 	.word	0x009f016f
 800ebe0:	016f016f 	.word	0x016f016f
 800ebe4:	016f00c9 	.word	0x016f00c9
 800ebe8:	016f016f 	.word	0x016f016f
 800ebec:	016f00f0 	.word	0x016f00f0
 800ebf0:	016f016f 	.word	0x016f016f
 800ebf4:	00d1016f 	.word	0x00d1016f
 800ebf8:	016f016f 	.word	0x016f016f
 800ebfc:	016f00fe 	.word	0x016f00fe
 800ec00:	016f016f 	.word	0x016f016f
 800ec04:	016f016f 	.word	0x016f016f
 800ec08:	016f00d8 	.word	0x016f00d8
 800ec0c:	00c3010c 	.word	0x00c3010c
 800ec10:	00d800d8 	.word	0x00d800d8
 800ec14:	009400d8 	.word	0x009400d8
 800ec18:	009f012f 	.word	0x009f012f
 800ec1c:	0088016f 	.word	0x0088016f
 800ec20:	011200a9 	.word	0x011200a9
 800ec24:	011000cb 	.word	0x011000cb
 800ec28:	016f016f 	.word	0x016f016f
 800ec2c:	00a600f2 	.word	0x00a600f2
 800ec30:	016f00cf 	.word	0x016f00cf
 800ec34:	00d1016f 	.word	0x00d1016f
 800ec38:	00a6016f 	.word	0x00a6016f
 800ec3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	dd12      	ble.n	800ec6a <__ssvfscanf_r+0x192>
 800ec44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3a01      	subs	r2, #1
 800ec4c:	7819      	ldrb	r1, [r3, #0]
 800ec4e:	7812      	ldrb	r2, [r2, #0]
 800ec50:	4291      	cmp	r1, r2
 800ec52:	d13e      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ec54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec58:	6852      	ldr	r2, [r2, #4]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	600b      	str	r3, [r1, #0]
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	3a01      	subs	r2, #1
 800ec62:	604a      	str	r2, [r1, #4]
 800ec64:	3301      	adds	r3, #1
 800ec66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec68:	e752      	b.n	800eb10 <__ssvfscanf_r+0x38>
 800ec6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec6e:	f002 fe41 	bl	80118f4 <__ssrefill_r>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0e6      	beq.n	800ec44 <__ssvfscanf_r+0x16c>
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d003      	beq.n	800ec84 <__ssvfscanf_r+0x1ac>
 800ec7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec7e:	899b      	ldrh	r3, [r3, #12]
 800ec80:	065b      	lsls	r3, r3, #25
 800ec82:	d526      	bpl.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ec84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d000      	beq.n	800ec8c <__ssvfscanf_r+0x1b4>
 800ec8a:	e0f6      	b.n	800ee7a <__ssvfscanf_r+0x3a2>
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec90:	e104      	b.n	800ee9c <__ssvfscanf_r+0x3c4>
 800ec92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec94:	4332      	orrs	r2, r6
 800ec96:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec98:	d11b      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ec9a:	2610      	movs	r6, #16
 800ec9c:	69ba      	ldr	r2, [r7, #24]
 800ec9e:	e76c      	b.n	800eb7a <__ssvfscanf_r+0xa2>
 800eca0:	421e      	tst	r6, r3
 800eca2:	d116      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800eca4:	7851      	ldrb	r1, [r2, #1]
 800eca6:	296c      	cmp	r1, #108	; 0x6c
 800eca8:	d103      	bne.n	800ecb2 <__ssvfscanf_r+0x1da>
 800ecaa:	3202      	adds	r2, #2
 800ecac:	61ba      	str	r2, [r7, #24]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	e000      	b.n	800ecb4 <__ssvfscanf_r+0x1dc>
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	4316      	orrs	r6, r2
 800ecb6:	e7f1      	b.n	800ec9c <__ssvfscanf_r+0x1c4>
 800ecb8:	421e      	tst	r6, r3
 800ecba:	d10a      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ecbc:	7851      	ldrb	r1, [r2, #1]
 800ecbe:	2968      	cmp	r1, #104	; 0x68
 800ecc0:	d103      	bne.n	800ecca <__ssvfscanf_r+0x1f2>
 800ecc2:	3202      	adds	r2, #2
 800ecc4:	61ba      	str	r2, [r7, #24]
 800ecc6:	2208      	movs	r2, #8
 800ecc8:	e7f4      	b.n	800ecb4 <__ssvfscanf_r+0x1dc>
 800ecca:	2204      	movs	r2, #4
 800eccc:	e7f2      	b.n	800ecb4 <__ssvfscanf_r+0x1dc>
 800ecce:	421e      	tst	r6, r3
 800ecd0:	d0ed      	beq.n	800ecae <__ssvfscanf_r+0x1d6>
 800ecd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d000      	beq.n	800ecda <__ssvfscanf_r+0x202>
 800ecd8:	e0da      	b.n	800ee90 <__ssvfscanf_r+0x3b8>
 800ecda:	e0df      	b.n	800ee9c <__ssvfscanf_r+0x3c4>
 800ecdc:	421e      	tst	r6, r3
 800ecde:	d0dd      	beq.n	800ec9c <__ssvfscanf_r+0x1c4>
 800ece0:	e7f7      	b.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ece2:	228f      	movs	r2, #143	; 0x8f
 800ece4:	218f      	movs	r1, #143	; 0x8f
 800ece6:	4032      	ands	r2, r6
 800ece8:	420e      	tst	r6, r1
 800ecea:	d1f2      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ecec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ecee:	2900      	cmp	r1, #0
 800ecf0:	d104      	bne.n	800ecfc <__ssvfscanf_r+0x224>
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	a902      	add	r1, sp, #8
 800ecf6:	6439      	str	r1, [r7, #64]	; 0x40
 800ecf8:	600a      	str	r2, [r1, #0]
 800ecfa:	604a      	str	r2, [r1, #4]
 800ecfc:	4326      	orrs	r6, r4
 800ecfe:	e7cd      	b.n	800ec9c <__ssvfscanf_r+0x1c4>
 800ed00:	228f      	movs	r2, #143	; 0x8f
 800ed02:	4216      	tst	r6, r2
 800ed04:	d1e5      	bne.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800ed06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed08:	436a      	muls	r2, r5
 800ed0a:	3a30      	subs	r2, #48	; 0x30
 800ed0c:	188a      	adds	r2, r1, r2
 800ed0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ed10:	e7c4      	b.n	800ec9c <__ssvfscanf_r+0x1c4>
 800ed12:	2301      	movs	r3, #1
 800ed14:	431e      	orrs	r6, r3
 800ed16:	4b1b      	ldr	r3, [pc, #108]	; (800ed84 <__ssvfscanf_r+0x2ac>)
 800ed18:	617b      	str	r3, [r7, #20]
 800ed1a:	230a      	movs	r3, #10
 800ed1c:	2403      	movs	r4, #3
 800ed1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed20:	e00f      	b.n	800ed42 <__ssvfscanf_r+0x26a>
 800ed22:	2301      	movs	r3, #1
 800ed24:	431e      	orrs	r6, r3
 800ed26:	4b18      	ldr	r3, [pc, #96]	; (800ed88 <__ssvfscanf_r+0x2b0>)
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	2308      	movs	r3, #8
 800ed2c:	e7f6      	b.n	800ed1c <__ssvfscanf_r+0x244>
 800ed2e:	4b16      	ldr	r3, [pc, #88]	; (800ed88 <__ssvfscanf_r+0x2b0>)
 800ed30:	e7f2      	b.n	800ed18 <__ssvfscanf_r+0x240>
 800ed32:	2380      	movs	r3, #128	; 0x80
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	431e      	orrs	r6, r3
 800ed38:	4b13      	ldr	r3, [pc, #76]	; (800ed88 <__ssvfscanf_r+0x2b0>)
 800ed3a:	617b      	str	r3, [r7, #20]
 800ed3c:	2310      	movs	r3, #16
 800ed3e:	e7ed      	b.n	800ed1c <__ssvfscanf_r+0x244>
 800ed40:	2404      	movs	r4, #4
 800ed42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	dd55      	ble.n	800edf6 <__ssvfscanf_r+0x31e>
 800ed4a:	0673      	lsls	r3, r6, #25
 800ed4c:	d407      	bmi.n	800ed5e <__ssvfscanf_r+0x286>
 800ed4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed50:	490b      	ldr	r1, [pc, #44]	; (800ed80 <__ssvfscanf_r+0x2a8>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	781a      	ldrb	r2, [r3, #0]
 800ed56:	5c8a      	ldrb	r2, [r1, r2]
 800ed58:	2108      	movs	r1, #8
 800ed5a:	420a      	tst	r2, r1
 800ed5c:	d152      	bne.n	800ee04 <__ssvfscanf_r+0x32c>
 800ed5e:	1e60      	subs	r0, r4, #1
 800ed60:	2803      	cmp	r0, #3
 800ed62:	d863      	bhi.n	800ee2c <__ssvfscanf_r+0x354>
 800ed64:	f7f1 f9e0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ed68:	03bd01da 	.word	0x03bd01da
 800ed6c:	068a0579 	.word	0x068a0579
 800ed70:	2301      	movs	r3, #1
 800ed72:	431e      	orrs	r6, r3
 800ed74:	2402      	movs	r4, #2
 800ed76:	e7e4      	b.n	800ed42 <__ssvfscanf_r+0x26a>
 800ed78:	fffffd34 	.word	0xfffffd34
 800ed7c:	ffffdfff 	.word	0xffffdfff
 800ed80:	08014911 	.word	0x08014911
 800ed84:	0800bd75 	.word	0x0800bd75
 800ed88:	0800be99 	.word	0x0800be99
 800ed8c:	2248      	movs	r2, #72	; 0x48
 800ed8e:	2318      	movs	r3, #24
 800ed90:	189b      	adds	r3, r3, r2
 800ed92:	19d8      	adds	r0, r3, r7
 800ed94:	69b9      	ldr	r1, [r7, #24]
 800ed96:	f001 f9d7 	bl	8010148 <__sccl>
 800ed9a:	2340      	movs	r3, #64	; 0x40
 800ed9c:	2401      	movs	r4, #1
 800ed9e:	61b8      	str	r0, [r7, #24]
 800eda0:	431e      	orrs	r6, r3
 800eda2:	e7ce      	b.n	800ed42 <__ssvfscanf_r+0x26a>
 800eda4:	2301      	movs	r3, #1
 800eda6:	431e      	orrs	r6, r3
 800eda8:	2340      	movs	r3, #64	; 0x40
 800edaa:	2400      	movs	r4, #0
 800edac:	431e      	orrs	r6, r3
 800edae:	e7c8      	b.n	800ed42 <__ssvfscanf_r+0x26a>
 800edb0:	2388      	movs	r3, #136	; 0x88
 800edb2:	e7bf      	b.n	800ed34 <__ssvfscanf_r+0x25c>
 800edb4:	06f3      	lsls	r3, r6, #27
 800edb6:	d500      	bpl.n	800edba <__ssvfscanf_r+0x2e2>
 800edb8:	e6aa      	b.n	800eb10 <__ssvfscanf_r+0x38>
 800edba:	2108      	movs	r1, #8
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	cb04      	ldmia	r3!, {r2}
 800edc0:	420e      	tst	r6, r1
 800edc2:	d003      	beq.n	800edcc <__ssvfscanf_r+0x2f4>
 800edc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edc6:	7011      	strb	r1, [r2, #0]
 800edc8:	633b      	str	r3, [r7, #48]	; 0x30
 800edca:	e6a1      	b.n	800eb10 <__ssvfscanf_r+0x38>
 800edcc:	0771      	lsls	r1, r6, #29
 800edce:	d502      	bpl.n	800edd6 <__ssvfscanf_r+0x2fe>
 800edd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edd2:	8011      	strh	r1, [r2, #0]
 800edd4:	e7f8      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800edd6:	07f1      	lsls	r1, r6, #31
 800edd8:	d502      	bpl.n	800ede0 <__ssvfscanf_r+0x308>
 800edda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eddc:	6011      	str	r1, [r2, #0]
 800edde:	e7f3      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800ede0:	07b6      	lsls	r6, r6, #30
 800ede2:	d5fa      	bpl.n	800edda <__ssvfscanf_r+0x302>
 800ede4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ede6:	6011      	str	r1, [r2, #0]
 800ede8:	17c9      	asrs	r1, r1, #31
 800edea:	6051      	str	r1, [r2, #4]
 800edec:	e7ec      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800edee:	4ba2      	ldr	r3, [pc, #648]	; (800f078 <__ssvfscanf_r+0x5a0>)
 800edf0:	617b      	str	r3, [r7, #20]
 800edf2:	2300      	movs	r3, #0
 800edf4:	e792      	b.n	800ed1c <__ssvfscanf_r+0x244>
 800edf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edfa:	f002 fd7b 	bl	80118f4 <__ssrefill_r>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d0a3      	beq.n	800ed4a <__ssvfscanf_r+0x272>
 800ee02:	e738      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800ee04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee08:	3201      	adds	r2, #1
 800ee0a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee0e:	6852      	ldr	r2, [r2, #4]
 800ee10:	3a01      	subs	r2, #1
 800ee12:	604a      	str	r2, [r1, #4]
 800ee14:	2a00      	cmp	r2, #0
 800ee16:	dd02      	ble.n	800ee1e <__ssvfscanf_r+0x346>
 800ee18:	3301      	adds	r3, #1
 800ee1a:	600b      	str	r3, [r1, #0]
 800ee1c:	e797      	b.n	800ed4e <__ssvfscanf_r+0x276>
 800ee1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee22:	f002 fd67 	bl	80118f4 <__ssrefill_r>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d091      	beq.n	800ed4e <__ssvfscanf_r+0x276>
 800ee2a:	e724      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800ee2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee2e:	2301      	movs	r3, #1
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	d100      	bne.n	800ee36 <__ssvfscanf_r+0x35e>
 800ee34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee36:	2210      	movs	r2, #16
 800ee38:	0034      	movs	r4, r6
 800ee3a:	4032      	ands	r2, r6
 800ee3c:	623a      	str	r2, [r7, #32]
 800ee3e:	401c      	ands	r4, r3
 800ee40:	421e      	tst	r6, r3
 800ee42:	d100      	bne.n	800ee46 <__ssvfscanf_r+0x36e>
 800ee44:	e0f3      	b.n	800f02e <__ssvfscanf_r+0x556>
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	d000      	beq.n	800ee4c <__ssvfscanf_r+0x374>
 800ee4a:	e0b6      	b.n	800efba <__ssvfscanf_r+0x4e2>
 800ee4c:	2080      	movs	r0, #128	; 0x80
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	cb10      	ldmia	r3!, {r4}
 800ee52:	613b      	str	r3, [r7, #16]
 800ee54:	4206      	tst	r6, r0
 800ee56:	d100      	bne.n	800ee5a <__ssvfscanf_r+0x382>
 800ee58:	e0b7      	b.n	800efca <__ssvfscanf_r+0x4f2>
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	d007      	beq.n	800ee6e <__ssvfscanf_r+0x396>
 800ee5e:	f7fb fe93 	bl	800ab88 <malloc>
 800ee62:	6338      	str	r0, [r7, #48]	; 0x30
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d11f      	bne.n	800eea8 <__ssvfscanf_r+0x3d0>
 800ee68:	2301      	movs	r3, #1
 800ee6a:	425b      	negs	r3, r3
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d013      	beq.n	800ee9c <__ssvfscanf_r+0x3c4>
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	3301      	adds	r3, #1
 800ee78:	d10a      	bne.n	800ee90 <__ssvfscanf_r+0x3b8>
 800ee7a:	2400      	movs	r4, #0
 800ee7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee7e:	681d      	ldr	r5, [r3, #0]
 800ee80:	88db      	ldrh	r3, [r3, #6]
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	dd01      	ble.n	800ee8a <__ssvfscanf_r+0x3b2>
 800ee86:	f001 f82a 	bl	800fede <__ssvfscanf_r+0x1406>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	425b      	negs	r3, r3
 800ee8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee92:	6818      	ldr	r0, [r3, #0]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d001      	beq.n	800ee9c <__ssvfscanf_r+0x3c4>
 800ee98:	f7fb fe80 	bl	800ab9c <free>
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eea0:	23b1      	movs	r3, #177	; 0xb1
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	449d      	add	sp, r3
 800eea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeae:	88de      	ldrh	r6, [r3, #6]
 800eeb0:	889d      	ldrh	r5, [r3, #4]
 800eeb2:	42ae      	cmp	r6, r5
 800eeb4:	d30e      	bcc.n	800eed4 <__ssvfscanf_r+0x3fc>
 800eeb6:	4b71      	ldr	r3, [pc, #452]	; (800f07c <__ssvfscanf_r+0x5a4>)
 800eeb8:	429d      	cmp	r5, r3
 800eeba:	d8d5      	bhi.n	800ee68 <__ssvfscanf_r+0x390>
 800eebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eebe:	3508      	adds	r5, #8
 800eec0:	b2ad      	uxth	r5, r5
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	00a9      	lsls	r1, r5, #2
 800eec6:	f002 f901 	bl	80110cc <realloc>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0cc      	beq.n	800ee68 <__ssvfscanf_r+0x390>
 800eece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed0:	6018      	str	r0, [r3, #0]
 800eed2:	809d      	strh	r5, [r3, #4]
 800eed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed6:	1c72      	adds	r2, r6, #1
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	00b6      	lsls	r6, r6, #2
 800eedc:	50f4      	str	r4, [r6, r3]
 800eede:	2320      	movs	r3, #32
 800eee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eee2:	0026      	movs	r6, r4
 800eee4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eee6:	80ca      	strh	r2, [r1, #6]
 800eee8:	61fb      	str	r3, [r7, #28]
 800eeea:	2500      	movs	r5, #0
 800eeec:	f7fd f9fe 	bl	800c2ec <__locale_mb_cur_max>
 800eef0:	42a8      	cmp	r0, r5
 800eef2:	d100      	bne.n	800eef6 <__ssvfscanf_r+0x41e>
 800eef4:	e6bf      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800eef6:	1c6a      	adds	r2, r5, #1
 800eef8:	60fa      	str	r2, [r7, #12]
 800eefa:	228c      	movs	r2, #140	; 0x8c
 800eefc:	2048      	movs	r0, #72	; 0x48
 800eefe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef00:	0052      	lsls	r2, r2, #1
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	1812      	adds	r2, r2, r0
 800ef06:	7819      	ldrb	r1, [r3, #0]
 800ef08:	19d2      	adds	r2, r2, r7
 800ef0a:	5551      	strb	r1, [r2, r5]
 800ef0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef10:	6852      	ldr	r2, [r2, #4]
 800ef12:	3301      	adds	r3, #1
 800ef14:	600b      	str	r3, [r1, #0]
 800ef16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef18:	3a01      	subs	r2, #1
 800ef1a:	604a      	str	r2, [r1, #4]
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d102      	bne.n	800ef26 <__ssvfscanf_r+0x44e>
 800ef20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef22:	2b04      	cmp	r3, #4
 800ef24:	d007      	beq.n	800ef36 <__ssvfscanf_r+0x45e>
 800ef26:	2048      	movs	r0, #72	; 0x48
 800ef28:	2310      	movs	r3, #16
 800ef2a:	181b      	adds	r3, r3, r0
 800ef2c:	2208      	movs	r2, #8
 800ef2e:	2100      	movs	r1, #0
 800ef30:	19d8      	adds	r0, r3, r7
 800ef32:	f7fd f94f 	bl	800c1d4 <memset>
 800ef36:	2148      	movs	r1, #72	; 0x48
 800ef38:	2310      	movs	r3, #16
 800ef3a:	228c      	movs	r2, #140	; 0x8c
 800ef3c:	185b      	adds	r3, r3, r1
 800ef3e:	0052      	lsls	r2, r2, #1
 800ef40:	19db      	adds	r3, r3, r7
 800ef42:	1852      	adds	r2, r2, r1
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	0021      	movs	r1, r4
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef4c:	19d2      	adds	r2, r2, r7
 800ef4e:	f002 fbd1 	bl	80116f4 <_mbrtowc_r>
 800ef52:	0003      	movs	r3, r0
 800ef54:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef56:	3301      	adds	r3, #1
 800ef58:	d100      	bne.n	800ef5c <__ssvfscanf_r+0x484>
 800ef5a:	e68c      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d139      	bne.n	800efd4 <__ssvfscanf_r+0x4fc>
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d100      	bne.n	800ef68 <__ssvfscanf_r+0x490>
 800ef66:	6023      	str	r3, [r4, #0]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	4694      	mov	ip, r2
 800ef6e:	4463      	add	r3, ip
 800ef70:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d102      	bne.n	800ef7e <__ssvfscanf_r+0x4a6>
 800ef78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef7a:	2b04      	cmp	r3, #4
 800ef7c:	d002      	beq.n	800ef84 <__ssvfscanf_r+0x4ac>
 800ef7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef80:	3b01      	subs	r3, #1
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d115      	bne.n	800efb6 <__ssvfscanf_r+0x4de>
 800ef8a:	2e00      	cmp	r6, #0
 800ef8c:	d012      	beq.n	800efb4 <__ssvfscanf_r+0x4dc>
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	69fa      	ldr	r2, [r7, #28]
 800ef92:	1ae5      	subs	r5, r4, r3
 800ef94:	10ab      	asrs	r3, r5, #2
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d30c      	bcc.n	800efb4 <__ssvfscanf_r+0x4dc>
 800ef9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef9c:	00d1      	lsls	r1, r2, #3
 800ef9e:	f002 f895 	bl	80110cc <realloc>
 800efa2:	6338      	str	r0, [r7, #48]	; 0x30
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d100      	bne.n	800efaa <__ssvfscanf_r+0x4d2>
 800efa8:	e75e      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	1944      	adds	r4, r0, r5
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	6030      	str	r0, [r6, #0]
 800efb2:	61fb      	str	r3, [r7, #28]
 800efb4:	3404      	adds	r4, #4
 800efb6:	2500      	movs	r5, #0
 800efb8:	e010      	b.n	800efdc <__ssvfscanf_r+0x504>
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	2300      	movs	r3, #0
 800efc0:	001e      	movs	r6, r3
 800efc2:	001c      	movs	r4, r3
 800efc4:	61fb      	str	r3, [r7, #28]
 800efc6:	633b      	str	r3, [r7, #48]	; 0x30
 800efc8:	e78f      	b.n	800eeea <__ssvfscanf_r+0x412>
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	001e      	movs	r6, r3
 800efce:	61fb      	str	r3, [r7, #28]
 800efd0:	633b      	str	r3, [r7, #48]	; 0x30
 800efd2:	e78a      	b.n	800eeea <__ssvfscanf_r+0x412>
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd6:	68fd      	ldr	r5, [r7, #12]
 800efd8:	3302      	adds	r3, #2
 800efda:	d1c5      	bne.n	800ef68 <__ssvfscanf_r+0x490>
 800efdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	dc12      	bgt.n	800f00a <__ssvfscanf_r+0x532>
 800efe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efe6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efe8:	f002 fc84 	bl	80118f4 <__ssrefill_r>
 800efec:	2800      	cmp	r0, #0
 800efee:	d00c      	beq.n	800f00a <__ssvfscanf_r+0x532>
 800eff0:	2d00      	cmp	r5, #0
 800eff2:	d000      	beq.n	800eff6 <__ssvfscanf_r+0x51e>
 800eff4:	e63f      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800eff6:	2e00      	cmp	r6, #0
 800eff8:	d10c      	bne.n	800f014 <__ssvfscanf_r+0x53c>
 800effa:	6a3b      	ldr	r3, [r7, #32]
 800effc:	425a      	negs	r2, r3
 800effe:	4153      	adcs	r3, r2
 800f000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f002:	18d3      	adds	r3, r2, r3
 800f004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	e6de      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d000      	beq.n	800f012 <__ssvfscanf_r+0x53a>
 800f010:	e76c      	b.n	800eeec <__ssvfscanf_r+0x414>
 800f012:	e7f0      	b.n	800eff6 <__ssvfscanf_r+0x51e>
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	69fa      	ldr	r2, [r7, #28]
 800f018:	1ae1      	subs	r1, r4, r3
 800f01a:	108b      	asrs	r3, r1, #2
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d9ec      	bls.n	800effa <__ssvfscanf_r+0x522>
 800f020:	6830      	ldr	r0, [r6, #0]
 800f022:	f002 f853 	bl	80110cc <realloc>
 800f026:	2800      	cmp	r0, #0
 800f028:	d0e7      	beq.n	800effa <__ssvfscanf_r+0x522>
 800f02a:	6030      	str	r0, [r6, #0]
 800f02c:	e7e5      	b.n	800effa <__ssvfscanf_r+0x522>
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d025      	beq.n	800f080 <__ssvfscanf_r+0x5a8>
 800f034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f03c:	6812      	ldr	r2, [r2, #0]
 800f03e:	4299      	cmp	r1, r3
 800f040:	dd11      	ble.n	800f066 <__ssvfscanf_r+0x58e>
 800f042:	1ac9      	subs	r1, r1, r3
 800f044:	18d2      	adds	r2, r2, r3
 800f046:	18e4      	adds	r4, r4, r3
 800f048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f04a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f04c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f04e:	0019      	movs	r1, r3
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	f002 fc4f 	bl	80118f4 <__ssrefill_r>
 800f056:	2800      	cmp	r0, #0
 800f058:	d0ec      	beq.n	800f034 <__ssvfscanf_r+0x55c>
 800f05a:	2c00      	cmp	r4, #0
 800f05c:	d100      	bne.n	800f060 <__ssvfscanf_r+0x588>
 800f05e:	e60a      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	191b      	adds	r3, r3, r4
 800f064:	e5ff      	b.n	800ec66 <__ssvfscanf_r+0x18e>
 800f066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f068:	1a5b      	subs	r3, r3, r1
 800f06a:	1864      	adds	r4, r4, r1
 800f06c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f06e:	604b      	str	r3, [r1, #4]
 800f070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f072:	18d2      	adds	r2, r2, r3
 800f074:	600a      	str	r2, [r1, #0]
 800f076:	e7f3      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f078:	0800bd75 	.word	0x0800bd75
 800f07c:	0000fff6 	.word	0x0000fff6
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	0034      	movs	r4, r6
 800f084:	cb20      	ldmia	r3!, {r5}
 800f086:	633b      	str	r3, [r7, #48]	; 0x30
 800f088:	2380      	movs	r3, #128	; 0x80
 800f08a:	401c      	ands	r4, r3
 800f08c:	421e      	tst	r6, r3
 800f08e:	d028      	beq.n	800f0e2 <__ssvfscanf_r+0x60a>
 800f090:	2d00      	cmp	r5, #0
 800f092:	d100      	bne.n	800f096 <__ssvfscanf_r+0x5be>
 800f094:	e61d      	b.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800f096:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f098:	f7fb fd76 	bl	800ab88 <malloc>
 800f09c:	6238      	str	r0, [r7, #32]
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d100      	bne.n	800f0a4 <__ssvfscanf_r+0x5cc>
 800f0a2:	e5ef      	b.n	800ec84 <__ssvfscanf_r+0x1ac>
 800f0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a6:	6028      	str	r0, [r5, #0]
 800f0a8:	88de      	ldrh	r6, [r3, #6]
 800f0aa:	889c      	ldrh	r4, [r3, #4]
 800f0ac:	6818      	ldr	r0, [r3, #0]
 800f0ae:	42a6      	cmp	r6, r4
 800f0b0:	d30e      	bcc.n	800f0d0 <__ssvfscanf_r+0x5f8>
 800f0b2:	4bbf      	ldr	r3, [pc, #764]	; (800f3b0 <__ssvfscanf_r+0x8d8>)
 800f0b4:	429c      	cmp	r4, r3
 800f0b6:	d900      	bls.n	800f0ba <__ssvfscanf_r+0x5e2>
 800f0b8:	e6df      	b.n	800ee7a <__ssvfscanf_r+0x3a2>
 800f0ba:	3408      	adds	r4, #8
 800f0bc:	b2a4      	uxth	r4, r4
 800f0be:	00a1      	lsls	r1, r4, #2
 800f0c0:	f002 f804 	bl	80110cc <realloc>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d100      	bne.n	800f0ca <__ssvfscanf_r+0x5f2>
 800f0c8:	e6d7      	b.n	800ee7a <__ssvfscanf_r+0x3a2>
 800f0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0cc:	6018      	str	r0, [r3, #0]
 800f0ce:	809c      	strh	r4, [r3, #4]
 800f0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0d2:	1c72      	adds	r2, r6, #1
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0d8:	00b6      	lsls	r6, r6, #2
 800f0da:	002c      	movs	r4, r5
 800f0dc:	50f5      	str	r5, [r6, r3]
 800f0de:	6a3d      	ldr	r5, [r7, #32]
 800f0e0:	80ca      	strh	r2, [r1, #6]
 800f0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e4:	0029      	movs	r1, r5
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0ee:	f002 fc20 	bl	8011932 <_sfread_r>
 800f0f2:	1e05      	subs	r5, r0, #0
 800f0f4:	d100      	bne.n	800f0f8 <__ssvfscanf_r+0x620>
 800f0f6:	e5be      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800f0f8:	2c00      	cmp	r4, #0
 800f0fa:	d009      	beq.n	800f110 <__ssvfscanf_r+0x638>
 800f0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fe:	4283      	cmp	r3, r0
 800f100:	d906      	bls.n	800f110 <__ssvfscanf_r+0x638>
 800f102:	0001      	movs	r1, r0
 800f104:	6820      	ldr	r0, [r4, #0]
 800f106:	f001 ffe1 	bl	80110cc <realloc>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d000      	beq.n	800f110 <__ssvfscanf_r+0x638>
 800f10e:	6020      	str	r0, [r4, #0]
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	195b      	adds	r3, r3, r5
 800f114:	63bb      	str	r3, [r7, #56]	; 0x38
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	3301      	adds	r3, #1
 800f11a:	e4f8      	b.n	800eb0e <__ssvfscanf_r+0x36>
 800f11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d101      	bne.n	800f126 <__ssvfscanf_r+0x64e>
 800f122:	3b01      	subs	r3, #1
 800f124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f126:	2210      	movs	r2, #16
 800f128:	2301      	movs	r3, #1
 800f12a:	0034      	movs	r4, r6
 800f12c:	4032      	ands	r2, r6
 800f12e:	401c      	ands	r4, r3
 800f130:	623a      	str	r2, [r7, #32]
 800f132:	421e      	tst	r6, r3
 800f134:	d100      	bne.n	800f138 <__ssvfscanf_r+0x660>
 800f136:	e116      	b.n	800f366 <__ssvfscanf_r+0x88e>
 800f138:	2a00      	cmp	r2, #0
 800f13a:	d000      	beq.n	800f13e <__ssvfscanf_r+0x666>
 800f13c:	e0b0      	b.n	800f2a0 <__ssvfscanf_r+0x7c8>
 800f13e:	2080      	movs	r0, #128	; 0x80
 800f140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f142:	cb10      	ldmia	r3!, {r4}
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	4206      	tst	r6, r0
 800f148:	d100      	bne.n	800f14c <__ssvfscanf_r+0x674>
 800f14a:	e0b2      	b.n	800f2b2 <__ssvfscanf_r+0x7da>
 800f14c:	2c00      	cmp	r4, #0
 800f14e:	d100      	bne.n	800f152 <__ssvfscanf_r+0x67a>
 800f150:	e68d      	b.n	800ee6e <__ssvfscanf_r+0x396>
 800f152:	f7fb fd19 	bl	800ab88 <malloc>
 800f156:	6338      	str	r0, [r7, #48]	; 0x30
 800f158:	2800      	cmp	r0, #0
 800f15a:	d100      	bne.n	800f15e <__ssvfscanf_r+0x686>
 800f15c:	e684      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f164:	88de      	ldrh	r6, [r3, #6]
 800f166:	889d      	ldrh	r5, [r3, #4]
 800f168:	42ae      	cmp	r6, r5
 800f16a:	d310      	bcc.n	800f18e <__ssvfscanf_r+0x6b6>
 800f16c:	4b90      	ldr	r3, [pc, #576]	; (800f3b0 <__ssvfscanf_r+0x8d8>)
 800f16e:	429d      	cmp	r5, r3
 800f170:	d900      	bls.n	800f174 <__ssvfscanf_r+0x69c>
 800f172:	e679      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f176:	3508      	adds	r5, #8
 800f178:	b2ad      	uxth	r5, r5
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	00a9      	lsls	r1, r5, #2
 800f17e:	f001 ffa5 	bl	80110cc <realloc>
 800f182:	2800      	cmp	r0, #0
 800f184:	d100      	bne.n	800f188 <__ssvfscanf_r+0x6b0>
 800f186:	e66f      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f18a:	6018      	str	r0, [r3, #0]
 800f18c:	809d      	strh	r5, [r3, #4]
 800f18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f190:	1c72      	adds	r2, r6, #1
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	00b6      	lsls	r6, r6, #2
 800f196:	50f4      	str	r4, [r6, r3]
 800f198:	2320      	movs	r3, #32
 800f19a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f19c:	0026      	movs	r6, r4
 800f19e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f1a0:	80ca      	strh	r2, [r1, #6]
 800f1a2:	613b      	str	r3, [r7, #16]
 800f1a4:	2500      	movs	r5, #0
 800f1a6:	f7fd f8a1 	bl	800c2ec <__locale_mb_cur_max>
 800f1aa:	42a8      	cmp	r0, r5
 800f1ac:	d100      	bne.n	800f1b0 <__ssvfscanf_r+0x6d8>
 800f1ae:	e562      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800f1b0:	1c6a      	adds	r2, r5, #1
 800f1b2:	61fa      	str	r2, [r7, #28]
 800f1b4:	228c      	movs	r2, #140	; 0x8c
 800f1b6:	2048      	movs	r0, #72	; 0x48
 800f1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ba:	0052      	lsls	r2, r2, #1
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	1812      	adds	r2, r2, r0
 800f1c0:	7819      	ldrb	r1, [r3, #0]
 800f1c2:	19d2      	adds	r2, r2, r7
 800f1c4:	5551      	strb	r1, [r2, r5]
 800f1c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1ca:	6852      	ldr	r2, [r2, #4]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	600b      	str	r3, [r1, #0]
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	3a01      	subs	r2, #1
 800f1d4:	604a      	str	r2, [r1, #4]
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d102      	bne.n	800f1e0 <__ssvfscanf_r+0x708>
 800f1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1dc:	2b04      	cmp	r3, #4
 800f1de:	d006      	beq.n	800f1ee <__ssvfscanf_r+0x716>
 800f1e0:	2048      	movs	r0, #72	; 0x48
 800f1e2:	2208      	movs	r2, #8
 800f1e4:	1813      	adds	r3, r2, r0
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	19d8      	adds	r0, r3, r7
 800f1ea:	f7fc fff3 	bl	800c1d4 <memset>
 800f1ee:	2148      	movs	r1, #72	; 0x48
 800f1f0:	2308      	movs	r3, #8
 800f1f2:	228c      	movs	r2, #140	; 0x8c
 800f1f4:	185b      	adds	r3, r3, r1
 800f1f6:	0052      	lsls	r2, r2, #1
 800f1f8:	19db      	adds	r3, r3, r7
 800f1fa:	1852      	adds	r2, r2, r1
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	0021      	movs	r1, r4
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f204:	19d2      	adds	r2, r2, r7
 800f206:	f002 fa75 	bl	80116f4 <_mbrtowc_r>
 800f20a:	0003      	movs	r3, r0
 800f20c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f20e:	3301      	adds	r3, #1
 800f210:	d100      	bne.n	800f214 <__ssvfscanf_r+0x73c>
 800f212:	e530      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800f214:	2800      	cmp	r0, #0
 800f216:	d151      	bne.n	800f2bc <__ssvfscanf_r+0x7e4>
 800f218:	6020      	str	r0, [r4, #0]
 800f21a:	2301      	movs	r3, #1
 800f21c:	6825      	ldr	r5, [r4, #0]
 800f21e:	425b      	negs	r3, r3
 800f220:	1c6a      	adds	r2, r5, #1
 800f222:	d01a      	beq.n	800f25a <__ssvfscanf_r+0x782>
 800f224:	2048      	movs	r0, #72	; 0x48
 800f226:	3311      	adds	r3, #17
 800f228:	181b      	adds	r3, r3, r0
 800f22a:	2208      	movs	r2, #8
 800f22c:	2100      	movs	r1, #0
 800f22e:	19d8      	adds	r0, r3, r7
 800f230:	f7fc ffd0 	bl	800c1d4 <memset>
 800f234:	4b5f      	ldr	r3, [pc, #380]	; (800f3b4 <__ssvfscanf_r+0x8dc>)
 800f236:	2148      	movs	r1, #72	; 0x48
 800f238:	33e0      	adds	r3, #224	; 0xe0
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	2310      	movs	r3, #16
 800f23e:	4694      	mov	ip, r2
 800f240:	185b      	adds	r3, r3, r1
 800f242:	002a      	movs	r2, r5
 800f244:	19db      	adds	r3, r3, r7
 800f246:	4665      	mov	r5, ip
 800f248:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f24a:	1879      	adds	r1, r7, r1
 800f24c:	47a8      	blx	r5
 800f24e:	2300      	movs	r3, #0
 800f250:	2801      	cmp	r0, #1
 800f252:	d102      	bne.n	800f25a <__ssvfscanf_r+0x782>
 800f254:	3348      	adds	r3, #72	; 0x48
 800f256:	18fb      	adds	r3, r7, r3
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2218      	movs	r2, #24
 800f25c:	2148      	movs	r1, #72	; 0x48
 800f25e:	1852      	adds	r2, r2, r1
 800f260:	19d2      	adds	r2, r2, r7
 800f262:	5cd3      	ldrb	r3, [r2, r3]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d149      	bne.n	800f2fc <__ssvfscanf_r+0x824>
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d137      	bne.n	800f2de <__ssvfscanf_r+0x806>
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d113      	bne.n	800f29c <__ssvfscanf_r+0x7c4>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	2e00      	cmp	r6, #0
 800f278:	d00d      	beq.n	800f296 <__ssvfscanf_r+0x7be>
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	1ae4      	subs	r4, r4, r3
 800f280:	10a3      	asrs	r3, r4, #2
 800f282:	3301      	adds	r3, #1
 800f284:	429a      	cmp	r2, r3
 800f286:	d906      	bls.n	800f296 <__ssvfscanf_r+0x7be>
 800f288:	6830      	ldr	r0, [r6, #0]
 800f28a:	1d21      	adds	r1, r4, #4
 800f28c:	f001 ff1e 	bl	80110cc <realloc>
 800f290:	2800      	cmp	r0, #0
 800f292:	d000      	beq.n	800f296 <__ssvfscanf_r+0x7be>
 800f294:	6030      	str	r0, [r6, #0]
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	3301      	adds	r3, #1
 800f29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	e593      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	001e      	movs	r6, r3
 800f2a8:	613b      	str	r3, [r7, #16]
 800f2aa:	633b      	str	r3, [r7, #48]	; 0x30
 800f2ac:	334c      	adds	r3, #76	; 0x4c
 800f2ae:	18fc      	adds	r4, r7, r3
 800f2b0:	e778      	b.n	800f1a4 <__ssvfscanf_r+0x6cc>
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	001e      	movs	r6, r3
 800f2b6:	613b      	str	r3, [r7, #16]
 800f2b8:	633b      	str	r3, [r7, #48]	; 0x30
 800f2ba:	e773      	b.n	800f1a4 <__ssvfscanf_r+0x6cc>
 800f2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2be:	69fd      	ldr	r5, [r7, #28]
 800f2c0:	3302      	adds	r3, #2
 800f2c2:	d1aa      	bne.n	800f21a <__ssvfscanf_r+0x742>
 800f2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dc47      	bgt.n	800f35c <__ssvfscanf_r+0x884>
 800f2cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2d0:	f002 fb10 	bl	80118f4 <__ssrefill_r>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d041      	beq.n	800f35c <__ssvfscanf_r+0x884>
 800f2d8:	2d00      	cmp	r5, #0
 800f2da:	d0c8      	beq.n	800f26e <__ssvfscanf_r+0x796>
 800f2dc:	e4cb      	b.n	800ec76 <__ssvfscanf_r+0x19e>
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	2248      	movs	r2, #72	; 0x48
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	61fb      	str	r3, [r7, #28]
 800f2e6:	238c      	movs	r3, #140	; 0x8c
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	189b      	adds	r3, r3, r2
 800f2ec:	69fa      	ldr	r2, [r7, #28]
 800f2ee:	19db      	adds	r3, r3, r7
 800f2f0:	5cd1      	ldrb	r1, [r2, r3]
 800f2f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2f6:	f002 fac1 	bl	801187c <_sungetc_r>
 800f2fa:	e7b5      	b.n	800f268 <__ssvfscanf_r+0x790>
 800f2fc:	69fa      	ldr	r2, [r7, #28]
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f300:	4694      	mov	ip, r2
 800f302:	4463      	add	r3, ip
 800f304:	63bb      	str	r3, [r7, #56]	; 0x38
 800f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f308:	2b03      	cmp	r3, #3
 800f30a:	d102      	bne.n	800f312 <__ssvfscanf_r+0x83a>
 800f30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30e:	2b04      	cmp	r3, #4
 800f310:	d002      	beq.n	800f318 <__ssvfscanf_r+0x840>
 800f312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f314:	3b01      	subs	r3, #1
 800f316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d11a      	bne.n	800f354 <__ssvfscanf_r+0x87c>
 800f31e:	3404      	adds	r4, #4
 800f320:	2e00      	cmp	r6, #0
 800f322:	d019      	beq.n	800f358 <__ssvfscanf_r+0x880>
 800f324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	1ae3      	subs	r3, r4, r3
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	6a3d      	ldr	r5, [r7, #32]
 800f32e:	109b      	asrs	r3, r3, #2
 800f330:	4293      	cmp	r3, r2
 800f332:	d3c7      	bcc.n	800f2c4 <__ssvfscanf_r+0x7ec>
 800f334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f336:	00d1      	lsls	r1, r2, #3
 800f338:	f001 fec8 	bl	80110cc <realloc>
 800f33c:	6338      	str	r0, [r7, #48]	; 0x30
 800f33e:	2800      	cmp	r0, #0
 800f340:	d100      	bne.n	800f344 <__ssvfscanf_r+0x86c>
 800f342:	e591      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f344:	4684      	mov	ip, r0
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	69fc      	ldr	r4, [r7, #28]
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	4464      	add	r4, ip
 800f34e:	6030      	str	r0, [r6, #0]
 800f350:	613b      	str	r3, [r7, #16]
 800f352:	e7b7      	b.n	800f2c4 <__ssvfscanf_r+0x7ec>
 800f354:	2500      	movs	r5, #0
 800f356:	e7b5      	b.n	800f2c4 <__ssvfscanf_r+0x7ec>
 800f358:	0035      	movs	r5, r6
 800f35a:	e7b3      	b.n	800f2c4 <__ssvfscanf_r+0x7ec>
 800f35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d000      	beq.n	800f364 <__ssvfscanf_r+0x88c>
 800f362:	e720      	b.n	800f1a6 <__ssvfscanf_r+0x6ce>
 800f364:	e783      	b.n	800f26e <__ssvfscanf_r+0x796>
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d025      	beq.n	800f3b8 <__ssvfscanf_r+0x8e0>
 800f36c:	2118      	movs	r1, #24
 800f36e:	2048      	movs	r0, #72	; 0x48
 800f370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f372:	1809      	adds	r1, r1, r0
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	19c9      	adds	r1, r1, r7
 800f378:	781a      	ldrb	r2, [r3, #0]
 800f37a:	5c8a      	ldrb	r2, [r1, r2]
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	d103      	bne.n	800f388 <__ssvfscanf_r+0x8b0>
 800f380:	2c00      	cmp	r4, #0
 800f382:	d000      	beq.n	800f386 <__ssvfscanf_r+0x8ae>
 800f384:	e66c      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f386:	e4a4      	b.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800f388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f38a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f38c:	6852      	ldr	r2, [r2, #4]
 800f38e:	3301      	adds	r3, #1
 800f390:	600b      	str	r3, [r1, #0]
 800f392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f394:	3a01      	subs	r2, #1
 800f396:	3401      	adds	r4, #1
 800f398:	604a      	str	r2, [r1, #4]
 800f39a:	429c      	cmp	r4, r3
 800f39c:	d100      	bne.n	800f3a0 <__ssvfscanf_r+0x8c8>
 800f39e:	e65f      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f3a0:	2a00      	cmp	r2, #0
 800f3a2:	dce3      	bgt.n	800f36c <__ssvfscanf_r+0x894>
 800f3a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3a6:	f002 faa5 	bl	80118f4 <__ssrefill_r>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d0de      	beq.n	800f36c <__ssvfscanf_r+0x894>
 800f3ae:	e657      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f3b0:	0000fff6 	.word	0x0000fff6
 800f3b4:	20000444 	.word	0x20000444
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	0032      	movs	r2, r6
 800f3bc:	cb20      	ldmia	r3!, {r5}
 800f3be:	61fb      	str	r3, [r7, #28]
 800f3c0:	2380      	movs	r3, #128	; 0x80
 800f3c2:	401a      	ands	r2, r3
 800f3c4:	421e      	tst	r6, r3
 800f3c6:	d100      	bne.n	800f3ca <__ssvfscanf_r+0x8f2>
 800f3c8:	e086      	b.n	800f4d8 <__ssvfscanf_r+0xa00>
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	d100      	bne.n	800f3d0 <__ssvfscanf_r+0x8f8>
 800f3ce:	e480      	b.n	800ecd2 <__ssvfscanf_r+0x1fa>
 800f3d0:	2020      	movs	r0, #32
 800f3d2:	f7fb fbd9 	bl	800ab88 <malloc>
 800f3d6:	6338      	str	r0, [r7, #48]	; 0x30
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d100      	bne.n	800f3de <__ssvfscanf_r+0x906>
 800f3dc:	e452      	b.n	800ec84 <__ssvfscanf_r+0x1ac>
 800f3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e0:	6028      	str	r0, [r5, #0]
 800f3e2:	88de      	ldrh	r6, [r3, #6]
 800f3e4:	889c      	ldrh	r4, [r3, #4]
 800f3e6:	6818      	ldr	r0, [r3, #0]
 800f3e8:	42a6      	cmp	r6, r4
 800f3ea:	d30e      	bcc.n	800f40a <__ssvfscanf_r+0x932>
 800f3ec:	4bc3      	ldr	r3, [pc, #780]	; (800f6fc <__ssvfscanf_r+0xc24>)
 800f3ee:	429c      	cmp	r4, r3
 800f3f0:	d900      	bls.n	800f3f4 <__ssvfscanf_r+0x91c>
 800f3f2:	e542      	b.n	800ee7a <__ssvfscanf_r+0x3a2>
 800f3f4:	3408      	adds	r4, #8
 800f3f6:	b2a4      	uxth	r4, r4
 800f3f8:	00a1      	lsls	r1, r4, #2
 800f3fa:	f001 fe67 	bl	80110cc <realloc>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d100      	bne.n	800f404 <__ssvfscanf_r+0x92c>
 800f402:	e53a      	b.n	800ee7a <__ssvfscanf_r+0x3a2>
 800f404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f406:	6018      	str	r0, [r3, #0]
 800f408:	809c      	strh	r4, [r3, #4]
 800f40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f40c:	1c72      	adds	r2, r6, #1
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	00b6      	lsls	r6, r6, #2
 800f412:	50f5      	str	r5, [r6, r3]
 800f414:	2320      	movs	r3, #32
 800f416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f418:	002e      	movs	r6, r5
 800f41a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f41c:	80ca      	strh	r2, [r1, #6]
 800f41e:	623b      	str	r3, [r7, #32]
 800f420:	002c      	movs	r4, r5
 800f422:	2118      	movs	r1, #24
 800f424:	2048      	movs	r0, #72	; 0x48
 800f426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f428:	1809      	adds	r1, r1, r0
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	19c9      	adds	r1, r1, r7
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	5c8a      	ldrb	r2, [r1, r2]
 800f432:	2a00      	cmp	r2, #0
 800f434:	d101      	bne.n	800f43a <__ssvfscanf_r+0x962>
 800f436:	633d      	str	r5, [r7, #48]	; 0x30
 800f438:	e031      	b.n	800f49e <__ssvfscanf_r+0x9c6>
 800f43a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f43c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f43e:	6852      	ldr	r2, [r2, #4]
 800f440:	3a01      	subs	r2, #1
 800f442:	604a      	str	r2, [r1, #4]
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	600a      	str	r2, [r1, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	1c6a      	adds	r2, r5, #1
 800f44c:	633a      	str	r2, [r7, #48]	; 0x30
 800f44e:	702b      	strb	r3, [r5, #0]
 800f450:	2e00      	cmp	r6, #0
 800f452:	d010      	beq.n	800f476 <__ssvfscanf_r+0x99e>
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	1b15      	subs	r5, r2, r4
 800f458:	429d      	cmp	r5, r3
 800f45a:	d30c      	bcc.n	800f476 <__ssvfscanf_r+0x99e>
 800f45c:	005b      	lsls	r3, r3, #1
 800f45e:	0020      	movs	r0, r4
 800f460:	0019      	movs	r1, r3
 800f462:	623b      	str	r3, [r7, #32]
 800f464:	f001 fe32 	bl	80110cc <realloc>
 800f468:	1e04      	subs	r4, r0, #0
 800f46a:	d101      	bne.n	800f470 <__ssvfscanf_r+0x998>
 800f46c:	f7ff fc0a 	bl	800ec84 <__ssvfscanf_r+0x1ac>
 800f470:	1943      	adds	r3, r0, r5
 800f472:	633b      	str	r3, [r7, #48]	; 0x30
 800f474:	6030      	str	r0, [r6, #0]
 800f476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f478:	3b01      	subs	r3, #1
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00e      	beq.n	800f49e <__ssvfscanf_r+0x9c6>
 800f480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	dc2a      	bgt.n	800f4de <__ssvfscanf_r+0xa06>
 800f488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f48a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f48c:	f002 fa32 	bl	80118f4 <__ssrefill_r>
 800f490:	2800      	cmp	r0, #0
 800f492:	d024      	beq.n	800f4de <__ssvfscanf_r+0xa06>
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	42a3      	cmp	r3, r4
 800f498:	d101      	bne.n	800f49e <__ssvfscanf_r+0x9c6>
 800f49a:	f7ff fbec 	bl	800ec76 <__ssvfscanf_r+0x19e>
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	1b1d      	subs	r5, r3, r4
 800f4a2:	42a3      	cmp	r3, r4
 800f4a4:	d101      	bne.n	800f4aa <__ssvfscanf_r+0x9d2>
 800f4a6:	f7ff fc14 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ae:	7013      	strb	r3, [r2, #0]
 800f4b0:	429e      	cmp	r6, r3
 800f4b2:	d009      	beq.n	800f4c8 <__ssvfscanf_r+0x9f0>
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	1c69      	adds	r1, r5, #1
 800f4b8:	428b      	cmp	r3, r1
 800f4ba:	d905      	bls.n	800f4c8 <__ssvfscanf_r+0x9f0>
 800f4bc:	6830      	ldr	r0, [r6, #0]
 800f4be:	f001 fe05 	bl	80110cc <realloc>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d000      	beq.n	800f4c8 <__ssvfscanf_r+0x9f0>
 800f4c6:	6030      	str	r0, [r6, #0]
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	195b      	adds	r3, r3, r5
 800f4d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	e477      	b.n	800edc8 <__ssvfscanf_r+0x2f0>
 800f4d8:	0016      	movs	r6, r2
 800f4da:	623a      	str	r2, [r7, #32]
 800f4dc:	e7a0      	b.n	800f420 <__ssvfscanf_r+0x948>
 800f4de:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f4e0:	e79f      	b.n	800f422 <__ssvfscanf_r+0x94a>
 800f4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <__ssvfscanf_r+0xa14>
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4ec:	2210      	movs	r2, #16
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	0034      	movs	r4, r6
 800f4f2:	4032      	ands	r2, r6
 800f4f4:	401c      	ands	r4, r3
 800f4f6:	61fa      	str	r2, [r7, #28]
 800f4f8:	421e      	tst	r6, r3
 800f4fa:	d100      	bne.n	800f4fe <__ssvfscanf_r+0xa26>
 800f4fc:	e102      	b.n	800f704 <__ssvfscanf_r+0xc2c>
 800f4fe:	2a00      	cmp	r2, #0
 800f500:	d000      	beq.n	800f504 <__ssvfscanf_r+0xa2c>
 800f502:	e09f      	b.n	800f644 <__ssvfscanf_r+0xb6c>
 800f504:	2080      	movs	r0, #128	; 0x80
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	cb10      	ldmia	r3!, {r4}
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	4206      	tst	r6, r0
 800f50e:	d100      	bne.n	800f512 <__ssvfscanf_r+0xa3a>
 800f510:	e0a1      	b.n	800f656 <__ssvfscanf_r+0xb7e>
 800f512:	2c00      	cmp	r4, #0
 800f514:	d100      	bne.n	800f518 <__ssvfscanf_r+0xa40>
 800f516:	e4aa      	b.n	800ee6e <__ssvfscanf_r+0x396>
 800f518:	f7fb fb36 	bl	800ab88 <malloc>
 800f51c:	6338      	str	r0, [r7, #48]	; 0x30
 800f51e:	2800      	cmp	r0, #0
 800f520:	d100      	bne.n	800f524 <__ssvfscanf_r+0xa4c>
 800f522:	e4a1      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f526:	6023      	str	r3, [r4, #0]
 800f528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f52a:	88de      	ldrh	r6, [r3, #6]
 800f52c:	889d      	ldrh	r5, [r3, #4]
 800f52e:	42ae      	cmp	r6, r5
 800f530:	d310      	bcc.n	800f554 <__ssvfscanf_r+0xa7c>
 800f532:	4b72      	ldr	r3, [pc, #456]	; (800f6fc <__ssvfscanf_r+0xc24>)
 800f534:	429d      	cmp	r5, r3
 800f536:	d900      	bls.n	800f53a <__ssvfscanf_r+0xa62>
 800f538:	e496      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f53c:	3508      	adds	r5, #8
 800f53e:	b2ad      	uxth	r5, r5
 800f540:	6818      	ldr	r0, [r3, #0]
 800f542:	00a9      	lsls	r1, r5, #2
 800f544:	f001 fdc2 	bl	80110cc <realloc>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d100      	bne.n	800f54e <__ssvfscanf_r+0xa76>
 800f54c:	e48c      	b.n	800ee68 <__ssvfscanf_r+0x390>
 800f54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f550:	6018      	str	r0, [r3, #0]
 800f552:	809d      	strh	r5, [r3, #4]
 800f554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f556:	1c72      	adds	r2, r6, #1
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	00b6      	lsls	r6, r6, #2
 800f55c:	50f4      	str	r4, [r6, r3]
 800f55e:	2320      	movs	r3, #32
 800f560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f562:	0025      	movs	r5, r4
 800f564:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f566:	80ca      	strh	r2, [r1, #6]
 800f568:	613b      	str	r3, [r7, #16]
 800f56a:	2300      	movs	r3, #0
 800f56c:	623b      	str	r3, [r7, #32]
 800f56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f570:	4a63      	ldr	r2, [pc, #396]	; (800f700 <__ssvfscanf_r+0xc28>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	5cd3      	ldrb	r3, [r2, r3]
 800f578:	2208      	movs	r2, #8
 800f57a:	4213      	tst	r3, r2
 800f57c:	d149      	bne.n	800f612 <__ssvfscanf_r+0xb3a>
 800f57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f580:	2b00      	cmp	r3, #0
 800f582:	d046      	beq.n	800f612 <__ssvfscanf_r+0xb3a>
 800f584:	f7fc feb2 	bl	800c2ec <__locale_mb_cur_max>
 800f588:	6a3b      	ldr	r3, [r7, #32]
 800f58a:	4298      	cmp	r0, r3
 800f58c:	d101      	bne.n	800f592 <__ssvfscanf_r+0xaba>
 800f58e:	f7ff fb72 	bl	800ec76 <__ssvfscanf_r+0x19e>
 800f592:	6a3a      	ldr	r2, [r7, #32]
 800f594:	2048      	movs	r0, #72	; 0x48
 800f596:	1c56      	adds	r6, r2, #1
 800f598:	228c      	movs	r2, #140	; 0x8c
 800f59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59c:	0052      	lsls	r2, r2, #1
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	1812      	adds	r2, r2, r0
 800f5a2:	7819      	ldrb	r1, [r3, #0]
 800f5a4:	6a38      	ldr	r0, [r7, #32]
 800f5a6:	19d2      	adds	r2, r2, r7
 800f5a8:	5411      	strb	r1, [r2, r0]
 800f5aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5ae:	6852      	ldr	r2, [r2, #4]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	600b      	str	r3, [r1, #0]
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	3a01      	subs	r2, #1
 800f5b8:	604a      	str	r2, [r1, #4]
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d102      	bne.n	800f5c4 <__ssvfscanf_r+0xaec>
 800f5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5c0:	2b04      	cmp	r3, #4
 800f5c2:	d007      	beq.n	800f5d4 <__ssvfscanf_r+0xafc>
 800f5c4:	2048      	movs	r0, #72	; 0x48
 800f5c6:	2310      	movs	r3, #16
 800f5c8:	181b      	adds	r3, r3, r0
 800f5ca:	2208      	movs	r2, #8
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	19d8      	adds	r0, r3, r7
 800f5d0:	f7fc fe00 	bl	800c1d4 <memset>
 800f5d4:	2148      	movs	r1, #72	; 0x48
 800f5d6:	2310      	movs	r3, #16
 800f5d8:	228c      	movs	r2, #140	; 0x8c
 800f5da:	185b      	adds	r3, r3, r1
 800f5dc:	0052      	lsls	r2, r2, #1
 800f5de:	19db      	adds	r3, r3, r7
 800f5e0:	1852      	adds	r2, r2, r1
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	0021      	movs	r1, r4
 800f5e6:	0033      	movs	r3, r6
 800f5e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5ea:	19d2      	adds	r2, r2, r7
 800f5ec:	f002 f882 	bl	80116f4 <_mbrtowc_r>
 800f5f0:	0003      	movs	r3, r0
 800f5f2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	d101      	bne.n	800f5fc <__ssvfscanf_r+0xb24>
 800f5f8:	f7ff fb3d 	bl	800ec76 <__ssvfscanf_r+0x19e>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d12f      	bne.n	800f660 <__ssvfscanf_r+0xb88>
 800f600:	6020      	str	r0, [r4, #0]
 800f602:	6820      	ldr	r0, [r4, #0]
 800f604:	f002 f894 	bl	8011730 <iswspace>
 800f608:	6238      	str	r0, [r7, #32]
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d04a      	beq.n	800f6a4 <__ssvfscanf_r+0xbcc>
 800f60e:	2e00      	cmp	r6, #0
 800f610:	d13c      	bne.n	800f68c <__ssvfscanf_r+0xbb4>
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d000      	beq.n	800f61a <__ssvfscanf_r+0xb42>
 800f618:	e640      	b.n	800f29c <__ssvfscanf_r+0x7c4>
 800f61a:	6023      	str	r3, [r4, #0]
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	d100      	bne.n	800f622 <__ssvfscanf_r+0xb4a>
 800f620:	e639      	b.n	800f296 <__ssvfscanf_r+0x7be>
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	1ae4      	subs	r4, r4, r3
 800f628:	10a3      	asrs	r3, r4, #2
 800f62a:	3301      	adds	r3, #1
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d800      	bhi.n	800f632 <__ssvfscanf_r+0xb5a>
 800f630:	e631      	b.n	800f296 <__ssvfscanf_r+0x7be>
 800f632:	6828      	ldr	r0, [r5, #0]
 800f634:	1d21      	adds	r1, r4, #4
 800f636:	f001 fd49 	bl	80110cc <realloc>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d100      	bne.n	800f640 <__ssvfscanf_r+0xb68>
 800f63e:	e62a      	b.n	800f296 <__ssvfscanf_r+0x7be>
 800f640:	6028      	str	r0, [r5, #0]
 800f642:	e628      	b.n	800f296 <__ssvfscanf_r+0x7be>
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	2300      	movs	r3, #0
 800f64a:	001d      	movs	r5, r3
 800f64c:	613b      	str	r3, [r7, #16]
 800f64e:	633b      	str	r3, [r7, #48]	; 0x30
 800f650:	334c      	adds	r3, #76	; 0x4c
 800f652:	18fc      	adds	r4, r7, r3
 800f654:	e789      	b.n	800f56a <__ssvfscanf_r+0xa92>
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	001d      	movs	r5, r3
 800f65a:	613b      	str	r3, [r7, #16]
 800f65c:	633b      	str	r3, [r7, #48]	; 0x30
 800f65e:	e784      	b.n	800f56a <__ssvfscanf_r+0xa92>
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f662:	623e      	str	r6, [r7, #32]
 800f664:	3302      	adds	r3, #2
 800f666:	d1cc      	bne.n	800f602 <__ssvfscanf_r+0xb2a>
 800f668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	dd00      	ble.n	800f672 <__ssvfscanf_r+0xb9a>
 800f670:	e77d      	b.n	800f56e <__ssvfscanf_r+0xa96>
 800f672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f674:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f676:	f002 f93d 	bl	80118f4 <__ssrefill_r>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d100      	bne.n	800f680 <__ssvfscanf_r+0xba8>
 800f67e:	e776      	b.n	800f56e <__ssvfscanf_r+0xa96>
 800f680:	6a3b      	ldr	r3, [r7, #32]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <__ssvfscanf_r+0xbb2>
 800f686:	f7ff faf6 	bl	800ec76 <__ssvfscanf_r+0x19e>
 800f68a:	e7c2      	b.n	800f612 <__ssvfscanf_r+0xb3a>
 800f68c:	238c      	movs	r3, #140	; 0x8c
 800f68e:	2248      	movs	r2, #72	; 0x48
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	189b      	adds	r3, r3, r2
 800f694:	3e01      	subs	r6, #1
 800f696:	19db      	adds	r3, r3, r7
 800f698:	5cf1      	ldrb	r1, [r6, r3]
 800f69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f69c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f69e:	f002 f8ed 	bl	801187c <_sungetc_r>
 800f6a2:	e7b4      	b.n	800f60e <__ssvfscanf_r+0xb36>
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	199b      	adds	r3, r3, r6
 800f6a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d102      	bne.n	800f6b6 <__ssvfscanf_r+0xbde>
 800f6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6b2:	2b04      	cmp	r3, #4
 800f6b4:	d002      	beq.n	800f6bc <__ssvfscanf_r+0xbe4>
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1d2      	bne.n	800f668 <__ssvfscanf_r+0xb90>
 800f6c2:	3404      	adds	r4, #4
 800f6c4:	2d00      	cmp	r5, #0
 800f6c6:	d016      	beq.n	800f6f6 <__ssvfscanf_r+0xc1e>
 800f6c8:	69fa      	ldr	r2, [r7, #28]
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6cc:	623a      	str	r2, [r7, #32]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	1ae6      	subs	r6, r4, r3
 800f6d2:	10b3      	asrs	r3, r6, #2
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d3c7      	bcc.n	800f668 <__ssvfscanf_r+0xb90>
 800f6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6da:	00d1      	lsls	r1, r2, #3
 800f6dc:	f001 fcf6 	bl	80110cc <realloc>
 800f6e0:	6338      	str	r0, [r7, #48]	; 0x30
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d101      	bne.n	800f6ea <__ssvfscanf_r+0xc12>
 800f6e6:	f7ff fbbf 	bl	800ee68 <__ssvfscanf_r+0x390>
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	1984      	adds	r4, r0, r6
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	6028      	str	r0, [r5, #0]
 800f6f2:	613b      	str	r3, [r7, #16]
 800f6f4:	e7b8      	b.n	800f668 <__ssvfscanf_r+0xb90>
 800f6f6:	623d      	str	r5, [r7, #32]
 800f6f8:	e7b6      	b.n	800f668 <__ssvfscanf_r+0xb90>
 800f6fa:	46c0      	nop			; (mov r8, r8)
 800f6fc:	0000fff6 	.word	0x0000fff6
 800f700:	08014911 	.word	0x08014911
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d01c      	beq.n	800f744 <__ssvfscanf_r+0xc6c>
 800f70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f70c:	49bf      	ldr	r1, [pc, #764]	; (800fa0c <__ssvfscanf_r+0xf34>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	781a      	ldrb	r2, [r3, #0]
 800f712:	5c8a      	ldrb	r2, [r1, r2]
 800f714:	2108      	movs	r1, #8
 800f716:	420a      	tst	r2, r1
 800f718:	d000      	beq.n	800f71c <__ssvfscanf_r+0xc44>
 800f71a:	e4a1      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f71c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f71e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f720:	6852      	ldr	r2, [r2, #4]
 800f722:	3301      	adds	r3, #1
 800f724:	600b      	str	r3, [r1, #0]
 800f726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f728:	3a01      	subs	r2, #1
 800f72a:	3401      	adds	r4, #1
 800f72c:	604a      	str	r2, [r1, #4]
 800f72e:	429c      	cmp	r4, r3
 800f730:	d100      	bne.n	800f734 <__ssvfscanf_r+0xc5c>
 800f732:	e495      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f734:	2a00      	cmp	r2, #0
 800f736:	dce8      	bgt.n	800f70a <__ssvfscanf_r+0xc32>
 800f738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f73a:	f002 f8db 	bl	80118f4 <__ssrefill_r>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d0e3      	beq.n	800f70a <__ssvfscanf_r+0xc32>
 800f742:	e48d      	b.n	800f060 <__ssvfscanf_r+0x588>
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	0032      	movs	r2, r6
 800f748:	cb10      	ldmia	r3!, {r4}
 800f74a:	61fb      	str	r3, [r7, #28]
 800f74c:	2380      	movs	r3, #128	; 0x80
 800f74e:	401a      	ands	r2, r3
 800f750:	421e      	tst	r6, r3
 800f752:	d039      	beq.n	800f7c8 <__ssvfscanf_r+0xcf0>
 800f754:	2c00      	cmp	r4, #0
 800f756:	d101      	bne.n	800f75c <__ssvfscanf_r+0xc84>
 800f758:	f7ff fabb 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800f75c:	2020      	movs	r0, #32
 800f75e:	f7fb fa13 	bl	800ab88 <malloc>
 800f762:	6338      	str	r0, [r7, #48]	; 0x30
 800f764:	2800      	cmp	r0, #0
 800f766:	d101      	bne.n	800f76c <__ssvfscanf_r+0xc94>
 800f768:	f7ff fa8c 	bl	800ec84 <__ssvfscanf_r+0x1ac>
 800f76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76e:	6020      	str	r0, [r4, #0]
 800f770:	88de      	ldrh	r6, [r3, #6]
 800f772:	889d      	ldrh	r5, [r3, #4]
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	42ae      	cmp	r6, r5
 800f778:	d310      	bcc.n	800f79c <__ssvfscanf_r+0xcc4>
 800f77a:	4ba5      	ldr	r3, [pc, #660]	; (800fa10 <__ssvfscanf_r+0xf38>)
 800f77c:	429d      	cmp	r5, r3
 800f77e:	d901      	bls.n	800f784 <__ssvfscanf_r+0xcac>
 800f780:	f7ff fb7b 	bl	800ee7a <__ssvfscanf_r+0x3a2>
 800f784:	3508      	adds	r5, #8
 800f786:	b2ad      	uxth	r5, r5
 800f788:	00a9      	lsls	r1, r5, #2
 800f78a:	f001 fc9f 	bl	80110cc <realloc>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d101      	bne.n	800f796 <__ssvfscanf_r+0xcbe>
 800f792:	f7ff fb72 	bl	800ee7a <__ssvfscanf_r+0x3a2>
 800f796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f798:	6018      	str	r0, [r3, #0]
 800f79a:	809d      	strh	r5, [r3, #4]
 800f79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79e:	1c72      	adds	r2, r6, #1
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	00b6      	lsls	r6, r6, #2
 800f7a4:	50f4      	str	r4, [r6, r3]
 800f7a6:	2320      	movs	r3, #32
 800f7a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7aa:	0026      	movs	r6, r4
 800f7ac:	80ca      	strh	r2, [r1, #6]
 800f7ae:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f7b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f7b2:	0025      	movs	r5, r4
 800f7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7b6:	4995      	ldr	r1, [pc, #596]	; (800fa0c <__ssvfscanf_r+0xf34>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	781a      	ldrb	r2, [r3, #0]
 800f7bc:	5c8a      	ldrb	r2, [r1, r2]
 800f7be:	2108      	movs	r1, #8
 800f7c0:	420a      	tst	r2, r1
 800f7c2:	d004      	beq.n	800f7ce <__ssvfscanf_r+0xcf6>
 800f7c4:	623c      	str	r4, [r7, #32]
 800f7c6:	e031      	b.n	800f82c <__ssvfscanf_r+0xd54>
 800f7c8:	0016      	movs	r6, r2
 800f7ca:	633a      	str	r2, [r7, #48]	; 0x30
 800f7cc:	e7f1      	b.n	800f7b2 <__ssvfscanf_r+0xcda>
 800f7ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7d2:	6852      	ldr	r2, [r2, #4]
 800f7d4:	3a01      	subs	r2, #1
 800f7d6:	604a      	str	r2, [r1, #4]
 800f7d8:	1c5a      	adds	r2, r3, #1
 800f7da:	600a      	str	r2, [r1, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	1c62      	adds	r2, r4, #1
 800f7e0:	623a      	str	r2, [r7, #32]
 800f7e2:	7023      	strb	r3, [r4, #0]
 800f7e4:	2e00      	cmp	r6, #0
 800f7e6:	d010      	beq.n	800f80a <__ssvfscanf_r+0xd32>
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ea:	1b54      	subs	r4, r2, r5
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	d30c      	bcc.n	800f80a <__ssvfscanf_r+0xd32>
 800f7f0:	005b      	lsls	r3, r3, #1
 800f7f2:	0028      	movs	r0, r5
 800f7f4:	0019      	movs	r1, r3
 800f7f6:	633b      	str	r3, [r7, #48]	; 0x30
 800f7f8:	f001 fc68 	bl	80110cc <realloc>
 800f7fc:	1e05      	subs	r5, r0, #0
 800f7fe:	d101      	bne.n	800f804 <__ssvfscanf_r+0xd2c>
 800f800:	f7ff fa40 	bl	800ec84 <__ssvfscanf_r+0x1ac>
 800f804:	1903      	adds	r3, r0, r4
 800f806:	623b      	str	r3, [r7, #32]
 800f808:	6030      	str	r0, [r6, #0]
 800f80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80c:	3b01      	subs	r3, #1
 800f80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00b      	beq.n	800f82c <__ssvfscanf_r+0xd54>
 800f814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dd01      	ble.n	800f820 <__ssvfscanf_r+0xd48>
 800f81c:	6a3c      	ldr	r4, [r7, #32]
 800f81e:	e7c9      	b.n	800f7b4 <__ssvfscanf_r+0xcdc>
 800f820:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f824:	f002 f866 	bl	80118f4 <__ssrefill_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d0f7      	beq.n	800f81c <__ssvfscanf_r+0xd44>
 800f82c:	2300      	movs	r3, #0
 800f82e:	6a3a      	ldr	r2, [r7, #32]
 800f830:	7013      	strb	r3, [r2, #0]
 800f832:	1b55      	subs	r5, r2, r5
 800f834:	2e00      	cmp	r6, #0
 800f836:	d009      	beq.n	800f84c <__ssvfscanf_r+0xd74>
 800f838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83a:	1c69      	adds	r1, r5, #1
 800f83c:	428b      	cmp	r3, r1
 800f83e:	d905      	bls.n	800f84c <__ssvfscanf_r+0xd74>
 800f840:	6830      	ldr	r0, [r6, #0]
 800f842:	f001 fc43 	bl	80110cc <realloc>
 800f846:	2800      	cmp	r0, #0
 800f848:	d000      	beq.n	800f84c <__ssvfscanf_r+0xd74>
 800f84a:	6030      	str	r0, [r6, #0]
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	195b      	adds	r3, r3, r5
 800f850:	63bb      	str	r3, [r7, #56]	; 0x38
 800f852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f854:	3301      	adds	r3, #1
 800f856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f858:	e63c      	b.n	800f4d4 <__ssvfscanf_r+0x9fc>
 800f85a:	22ae      	movs	r2, #174	; 0xae
 800f85c:	2100      	movs	r1, #0
 800f85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f860:	0052      	lsls	r2, r2, #1
 800f862:	3b01      	subs	r3, #1
 800f864:	6239      	str	r1, [r7, #32]
 800f866:	4293      	cmp	r3, r2
 800f868:	d906      	bls.n	800f878 <__ssvfscanf_r+0xda0>
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	3b5e      	subs	r3, #94	; 0x5e
 800f86e:	3bff      	subs	r3, #255	; 0xff
 800f870:	623b      	str	r3, [r7, #32]
 800f872:	235e      	movs	r3, #94	; 0x5e
 800f874:	33ff      	adds	r3, #255	; 0xff
 800f876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f878:	24d8      	movs	r4, #216	; 0xd8
 800f87a:	2300      	movs	r3, #0
 800f87c:	2248      	movs	r2, #72	; 0x48
 800f87e:	0124      	lsls	r4, r4, #4
 800f880:	4334      	orrs	r4, r6
 800f882:	2680      	movs	r6, #128	; 0x80
 800f884:	61fb      	str	r3, [r7, #28]
 800f886:	3319      	adds	r3, #25
 800f888:	33ff      	adds	r3, #255	; 0xff
 800f88a:	189b      	adds	r3, r3, r2
 800f88c:	19dd      	adds	r5, r3, r7
 800f88e:	00b6      	lsls	r6, r6, #2
 800f890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	7813      	ldrb	r3, [r2, #0]
 800f896:	2b39      	cmp	r3, #57	; 0x39
 800f898:	d80f      	bhi.n	800f8ba <__ssvfscanf_r+0xde2>
 800f89a:	2b2a      	cmp	r3, #42	; 0x2a
 800f89c:	d91b      	bls.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f89e:	0018      	movs	r0, r3
 800f8a0:	382b      	subs	r0, #43	; 0x2b
 800f8a2:	280e      	cmp	r0, #14
 800f8a4:	d817      	bhi.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f8a6:	f7f0 fc35 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f8aa:	168f      	.short	0x168f
 800f8ac:	5416168f 	.word	0x5416168f
 800f8b0:	80808080 	.word	0x80808080
 800f8b4:	87808080 	.word	0x87808080
 800f8b8:	87          	.byte	0x87
 800f8b9:	00          	.byte	0x00
 800f8ba:	2b66      	cmp	r3, #102	; 0x66
 800f8bc:	d83a      	bhi.n	800f934 <__ssvfscanf_r+0xe5c>
 800f8be:	2b60      	cmp	r3, #96	; 0x60
 800f8c0:	d803      	bhi.n	800f8ca <__ssvfscanf_r+0xdf2>
 800f8c2:	2b46      	cmp	r3, #70	; 0x46
 800f8c4:	d805      	bhi.n	800f8d2 <__ssvfscanf_r+0xdfa>
 800f8c6:	2b40      	cmp	r3, #64	; 0x40
 800f8c8:	d905      	bls.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f8ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8cc:	290a      	cmp	r1, #10
 800f8ce:	dc71      	bgt.n	800f9b4 <__ssvfscanf_r+0xedc>
 800f8d0:	e001      	b.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f8d2:	2b58      	cmp	r3, #88	; 0x58
 800f8d4:	d030      	beq.n	800f938 <__ssvfscanf_r+0xe60>
 800f8d6:	05e3      	lsls	r3, r4, #23
 800f8d8:	d515      	bpl.n	800f906 <__ssvfscanf_r+0xe2e>
 800f8da:	238c      	movs	r3, #140	; 0x8c
 800f8dc:	2248      	movs	r2, #72	; 0x48
 800f8de:	005b      	lsls	r3, r3, #1
 800f8e0:	189b      	adds	r3, r3, r2
 800f8e2:	19db      	adds	r3, r3, r7
 800f8e4:	429d      	cmp	r5, r3
 800f8e6:	d905      	bls.n	800f8f4 <__ssvfscanf_r+0xe1c>
 800f8e8:	3d01      	subs	r5, #1
 800f8ea:	7829      	ldrb	r1, [r5, #0]
 800f8ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8f0:	f001 ffc4 	bl	801187c <_sungetc_r>
 800f8f4:	238c      	movs	r3, #140	; 0x8c
 800f8f6:	2248      	movs	r2, #72	; 0x48
 800f8f8:	005b      	lsls	r3, r3, #1
 800f8fa:	189b      	adds	r3, r3, r2
 800f8fc:	19db      	adds	r3, r3, r7
 800f8fe:	429d      	cmp	r5, r3
 800f900:	d101      	bne.n	800f906 <__ssvfscanf_r+0xe2e>
 800f902:	f7ff f9e6 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800f906:	2310      	movs	r3, #16
 800f908:	0022      	movs	r2, r4
 800f90a:	401a      	ands	r2, r3
 800f90c:	421c      	tst	r4, r3
 800f90e:	d171      	bne.n	800f9f4 <__ssvfscanf_r+0xf1c>
 800f910:	218c      	movs	r1, #140	; 0x8c
 800f912:	2048      	movs	r0, #72	; 0x48
 800f914:	0049      	lsls	r1, r1, #1
 800f916:	1809      	adds	r1, r1, r0
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	697e      	ldr	r6, [r7, #20]
 800f91c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f91e:	19c9      	adds	r1, r1, r7
 800f920:	702a      	strb	r2, [r5, #0]
 800f922:	47b0      	blx	r6
 800f924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f926:	1d1e      	adds	r6, r3, #4
 800f928:	06a3      	lsls	r3, r4, #26
 800f92a:	d559      	bpl.n	800f9e0 <__ssvfscanf_r+0xf08>
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	6018      	str	r0, [r3, #0]
 800f932:	e05b      	b.n	800f9ec <__ssvfscanf_r+0xf14>
 800f934:	2b78      	cmp	r3, #120	; 0x78
 800f936:	d1ce      	bne.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f938:	21c0      	movs	r1, #192	; 0xc0
 800f93a:	00c9      	lsls	r1, r1, #3
 800f93c:	4021      	ands	r1, r4
 800f93e:	42b1      	cmp	r1, r6
 800f940:	d1c9      	bne.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f942:	4934      	ldr	r1, [pc, #208]	; (800fa14 <__ssvfscanf_r+0xf3c>)
 800f944:	4021      	ands	r1, r4
 800f946:	24a0      	movs	r4, #160	; 0xa0
 800f948:	00e4      	lsls	r4, r4, #3
 800f94a:	430c      	orrs	r4, r1
 800f94c:	2110      	movs	r1, #16
 800f94e:	6279      	str	r1, [r7, #36]	; 0x24
 800f950:	e00b      	b.n	800f96a <__ssvfscanf_r+0xe92>
 800f952:	0521      	lsls	r1, r4, #20
 800f954:	d509      	bpl.n	800f96a <__ssvfscanf_r+0xe92>
 800f956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f958:	2900      	cmp	r1, #0
 800f95a:	d102      	bne.n	800f962 <__ssvfscanf_r+0xe8a>
 800f95c:	3108      	adds	r1, #8
 800f95e:	4334      	orrs	r4, r6
 800f960:	6279      	str	r1, [r7, #36]	; 0x24
 800f962:	0561      	lsls	r1, r4, #21
 800f964:	d504      	bpl.n	800f970 <__ssvfscanf_r+0xe98>
 800f966:	492c      	ldr	r1, [pc, #176]	; (800fa18 <__ssvfscanf_r+0xf40>)
 800f968:	400c      	ands	r4, r1
 800f96a:	702b      	strb	r3, [r5, #0]
 800f96c:	3501      	adds	r5, #1
 800f96e:	e00c      	b.n	800f98a <__ssvfscanf_r+0xeb2>
 800f970:	4b2a      	ldr	r3, [pc, #168]	; (800fa1c <__ssvfscanf_r+0xf44>)
 800f972:	401c      	ands	r4, r3
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d004      	beq.n	800f984 <__ssvfscanf_r+0xeac>
 800f97a:	3b01      	subs	r3, #1
 800f97c:	623b      	str	r3, [r7, #32]
 800f97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f980:	3301      	adds	r3, #1
 800f982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	3301      	adds	r3, #1
 800f988:	61fb      	str	r3, [r7, #28]
 800f98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	3b01      	subs	r3, #1
 800f992:	604b      	str	r3, [r1, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	dd1c      	ble.n	800f9d2 <__ssvfscanf_r+0xefa>
 800f998:	3201      	adds	r2, #1
 800f99a:	600a      	str	r2, [r1, #0]
 800f99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d000      	beq.n	800f9a8 <__ssvfscanf_r+0xed0>
 800f9a6:	e773      	b.n	800f890 <__ssvfscanf_r+0xdb8>
 800f9a8:	e795      	b.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f9aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ac:	491c      	ldr	r1, [pc, #112]	; (800fa20 <__ssvfscanf_r+0xf48>)
 800f9ae:	0040      	lsls	r0, r0, #1
 800f9b0:	5e41      	ldrsh	r1, [r0, r1]
 800f9b2:	6279      	str	r1, [r7, #36]	; 0x24
 800f9b4:	491b      	ldr	r1, [pc, #108]	; (800fa24 <__ssvfscanf_r+0xf4c>)
 800f9b6:	e7d7      	b.n	800f968 <__ssvfscanf_r+0xe90>
 800f9b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ba:	4919      	ldr	r1, [pc, #100]	; (800fa20 <__ssvfscanf_r+0xf48>)
 800f9bc:	0040      	lsls	r0, r0, #1
 800f9be:	5e41      	ldrsh	r1, [r0, r1]
 800f9c0:	6279      	str	r1, [r7, #36]	; 0x24
 800f9c2:	2908      	cmp	r1, #8
 800f9c4:	dcf6      	bgt.n	800f9b4 <__ssvfscanf_r+0xedc>
 800f9c6:	e786      	b.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f9c8:	2180      	movs	r1, #128	; 0x80
 800f9ca:	420c      	tst	r4, r1
 800f9cc:	d083      	beq.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f9ce:	438c      	bics	r4, r1
 800f9d0:	e7cb      	b.n	800f96a <__ssvfscanf_r+0xe92>
 800f9d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9d6:	f001 ff8d 	bl	80118f4 <__ssrefill_r>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d0de      	beq.n	800f99c <__ssvfscanf_r+0xec4>
 800f9de:	e77a      	b.n	800f8d6 <__ssvfscanf_r+0xdfe>
 800f9e0:	2308      	movs	r3, #8
 800f9e2:	421c      	tst	r4, r3
 800f9e4:	d020      	beq.n	800fa28 <__ssvfscanf_r+0xf50>
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	7018      	strb	r0, [r3, #0]
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	633e      	str	r6, [r7, #48]	; 0x30
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9f4:	238c      	movs	r3, #140	; 0x8c
 800f9f6:	2248      	movs	r2, #72	; 0x48
 800f9f8:	005b      	lsls	r3, r3, #1
 800f9fa:	189b      	adds	r3, r3, r2
 800f9fc:	19db      	adds	r3, r3, r7
 800f9fe:	1aed      	subs	r5, r5, r3
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	18ed      	adds	r5, r5, r3
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	195b      	adds	r3, r3, r5
 800fa08:	f7ff f92d 	bl	800ec66 <__ssvfscanf_r+0x18e>
 800fa0c:	08014911 	.word	0x08014911
 800fa10:	0000fff6 	.word	0x0000fff6
 800fa14:	fffffdff 	.word	0xfffffdff
 800fa18:	fffffa7f 	.word	0xfffffa7f
 800fa1c:	fffffc7f 	.word	0xfffffc7f
 800fa20:	08014c3e 	.word	0x08014c3e
 800fa24:	fffff47f 	.word	0xfffff47f
 800fa28:	0763      	lsls	r3, r4, #29
 800fa2a:	d503      	bpl.n	800fa34 <__ssvfscanf_r+0xf5c>
 800fa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	8018      	strh	r0, [r3, #0]
 800fa32:	e7db      	b.n	800f9ec <__ssvfscanf_r+0xf14>
 800fa34:	2301      	movs	r3, #1
 800fa36:	0022      	movs	r2, r4
 800fa38:	401a      	ands	r2, r3
 800fa3a:	421c      	tst	r4, r3
 800fa3c:	d000      	beq.n	800fa40 <__ssvfscanf_r+0xf68>
 800fa3e:	e775      	b.n	800f92c <__ssvfscanf_r+0xe54>
 800fa40:	07a4      	lsls	r4, r4, #30
 800fa42:	d400      	bmi.n	800fa46 <__ssvfscanf_r+0xf6e>
 800fa44:	e772      	b.n	800f92c <__ssvfscanf_r+0xe54>
 800fa46:	4ba8      	ldr	r3, [pc, #672]	; (800fce8 <__ssvfscanf_r+0x1210>)
 800fa48:	6979      	ldr	r1, [r7, #20]
 800fa4a:	4299      	cmp	r1, r3
 800fa4c:	d10c      	bne.n	800fa68 <__ssvfscanf_r+0xf90>
 800fa4e:	218c      	movs	r1, #140	; 0x8c
 800fa50:	2048      	movs	r0, #72	; 0x48
 800fa52:	0049      	lsls	r1, r1, #1
 800fa54:	1809      	adds	r1, r1, r0
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa5a:	19c9      	adds	r1, r1, r7
 800fa5c:	f001 fe46 	bl	80116ec <_strtoull_r>
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	c303      	stmia	r3!, {r0, r1}
 800fa66:	e7c1      	b.n	800f9ec <__ssvfscanf_r+0xf14>
 800fa68:	218c      	movs	r1, #140	; 0x8c
 800fa6a:	2048      	movs	r0, #72	; 0x48
 800fa6c:	0049      	lsls	r1, r1, #1
 800fa6e:	1809      	adds	r1, r1, r0
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa74:	19c9      	adds	r1, r1, r7
 800fa76:	f001 fd87 	bl	8011588 <_strtoll_r>
 800fa7a:	e7f1      	b.n	800fa60 <__ssvfscanf_r+0xf88>
 800fa7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa7e:	f000 fb9f 	bl	80101c0 <_localeconv_r>
 800fa82:	22ae      	movs	r2, #174	; 0xae
 800fa84:	2100      	movs	r1, #0
 800fa86:	6803      	ldr	r3, [r0, #0]
 800fa88:	0052      	lsls	r2, r2, #1
 800fa8a:	603b      	str	r3, [r7, #0]
 800fa8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa8e:	60f9      	str	r1, [r7, #12]
 800fa90:	3b01      	subs	r3, #1
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d906      	bls.n	800faa4 <__ssvfscanf_r+0xfcc>
 800fa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa98:	3b5e      	subs	r3, #94	; 0x5e
 800fa9a:	3bff      	subs	r3, #255	; 0xff
 800fa9c:	60fb      	str	r3, [r7, #12]
 800fa9e:	235e      	movs	r3, #94	; 0x5e
 800faa0:	33ff      	adds	r3, #255	; 0xff
 800faa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faa4:	23f0      	movs	r3, #240	; 0xf0
 800faa6:	00db      	lsls	r3, r3, #3
 800faa8:	431e      	orrs	r6, r3
 800faaa:	238c      	movs	r3, #140	; 0x8c
 800faac:	2248      	movs	r2, #72	; 0x48
 800faae:	2400      	movs	r4, #0
 800fab0:	005b      	lsls	r3, r3, #1
 800fab2:	189b      	adds	r3, r3, r2
 800fab4:	623c      	str	r4, [r7, #32]
 800fab6:	607c      	str	r4, [r7, #4]
 800fab8:	60bc      	str	r4, [r7, #8]
 800faba:	61fc      	str	r4, [r7, #28]
 800fabc:	613c      	str	r4, [r7, #16]
 800fabe:	19dd      	adds	r5, r3, r7
 800fac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	781a      	ldrb	r2, [r3, #0]
 800fac6:	0010      	movs	r0, r2
 800fac8:	382b      	subs	r0, #43	; 0x2b
 800faca:	284e      	cmp	r0, #78	; 0x4e
 800facc:	d900      	bls.n	800fad0 <__ssvfscanf_r+0xff8>
 800face:	e133      	b.n	800fd38 <__ssvfscanf_r+0x1260>
 800fad0:	f7f0 fb2a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fad4:	0132009b 	.word	0x0132009b
 800fad8:	0132009b 	.word	0x0132009b
 800fadc:	004f0132 	.word	0x004f0132
 800fae0:	00720072 	.word	0x00720072
 800fae4:	00720072 	.word	0x00720072
 800fae8:	00720072 	.word	0x00720072
 800faec:	00720072 	.word	0x00720072
 800faf0:	01320072 	.word	0x01320072
 800faf4:	01320132 	.word	0x01320132
 800faf8:	01320132 	.word	0x01320132
 800fafc:	01320132 	.word	0x01320132
 800fb00:	007b00bc 	.word	0x007b00bc
 800fb04:	007b007b 	.word	0x007b007b
 800fb08:	00f7012f 	.word	0x00f7012f
 800fb0c:	01320132 	.word	0x01320132
 800fb10:	013200e3 	.word	0x013200e3
 800fb14:	01320132 	.word	0x01320132
 800fb18:	00a00132 	.word	0x00a00132
 800fb1c:	01120132 	.word	0x01120132
 800fb20:	01320132 	.word	0x01320132
 800fb24:	01010132 	.word	0x01010132
 800fb28:	01320132 	.word	0x01320132
 800fb2c:	00820132 	.word	0x00820132
 800fb30:	01320105 	.word	0x01320105
 800fb34:	01320132 	.word	0x01320132
 800fb38:	01320132 	.word	0x01320132
 800fb3c:	01320132 	.word	0x01320132
 800fb40:	007b00bc 	.word	0x007b00bc
 800fb44:	007b007b 	.word	0x007b007b
 800fb48:	00f7012f 	.word	0x00f7012f
 800fb4c:	01320132 	.word	0x01320132
 800fb50:	013200e3 	.word	0x013200e3
 800fb54:	01320132 	.word	0x01320132
 800fb58:	00a00132 	.word	0x00a00132
 800fb5c:	01120132 	.word	0x01120132
 800fb60:	01320132 	.word	0x01320132
 800fb64:	01010132 	.word	0x01010132
 800fb68:	01320132 	.word	0x01320132
 800fb6c:	00820132 	.word	0x00820132
 800fb70:	0105      	.short	0x0105
 800fb72:	05f1      	lsls	r1, r6, #23
 800fb74:	d520      	bpl.n	800fbb8 <__ssvfscanf_r+0x10e0>
 800fb76:	2280      	movs	r2, #128	; 0x80
 800fb78:	4396      	bics	r6, r2
 800fb7a:	69fa      	ldr	r2, [r7, #28]
 800fb7c:	3201      	adds	r2, #1
 800fb7e:	61fa      	str	r2, [r7, #28]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	d004      	beq.n	800fb90 <__ssvfscanf_r+0x10b8>
 800fb86:	3a01      	subs	r2, #1
 800fb88:	60fa      	str	r2, [r7, #12]
 800fb8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb8c:	3201      	adds	r2, #1
 800fb8e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fb90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb94:	3a01      	subs	r2, #1
 800fb96:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb9a:	3201      	adds	r2, #1
 800fb9c:	63ba      	str	r2, [r7, #56]	; 0x38
 800fb9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fba0:	6852      	ldr	r2, [r2, #4]
 800fba2:	3a01      	subs	r2, #1
 800fba4:	604a      	str	r2, [r1, #4]
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	dc00      	bgt.n	800fbac <__ssvfscanf_r+0x10d4>
 800fbaa:	e0d6      	b.n	800fd5a <__ssvfscanf_r+0x1282>
 800fbac:	3301      	adds	r3, #1
 800fbae:	600b      	str	r3, [r1, #0]
 800fbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d184      	bne.n	800fac0 <__ssvfscanf_r+0xfe8>
 800fbb6:	e057      	b.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbb8:	6a39      	ldr	r1, [r7, #32]
 800fbba:	1909      	adds	r1, r1, r4
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	d153      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbc0:	494a      	ldr	r1, [pc, #296]	; (800fcec <__ssvfscanf_r+0x1214>)
 800fbc2:	400e      	ands	r6, r1
 800fbc4:	702a      	strb	r2, [r5, #0]
 800fbc6:	3501      	adds	r5, #1
 800fbc8:	e7e2      	b.n	800fb90 <__ssvfscanf_r+0x10b8>
 800fbca:	0531      	lsls	r1, r6, #20
 800fbcc:	d54c      	bpl.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbce:	6a39      	ldr	r1, [r7, #32]
 800fbd0:	1909      	adds	r1, r1, r4
 800fbd2:	2900      	cmp	r1, #0
 800fbd4:	d040      	beq.n	800fc58 <__ssvfscanf_r+0x1180>
 800fbd6:	e047      	b.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbd8:	2198      	movs	r1, #152	; 0x98
 800fbda:	2080      	movs	r0, #128	; 0x80
 800fbdc:	0109      	lsls	r1, r1, #4
 800fbde:	4031      	ands	r1, r6
 800fbe0:	0040      	lsls	r0, r0, #1
 800fbe2:	4281      	cmp	r1, r0
 800fbe4:	d140      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbe6:	69f9      	ldr	r1, [r7, #28]
 800fbe8:	2901      	cmp	r1, #1
 800fbea:	d13d      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fbec:	2080      	movs	r0, #128	; 0x80
 800fbee:	4940      	ldr	r1, [pc, #256]	; (800fcf0 <__ssvfscanf_r+0x1218>)
 800fbf0:	0100      	lsls	r0, r0, #4
 800fbf2:	400e      	ands	r6, r1
 800fbf4:	3132      	adds	r1, #50	; 0x32
 800fbf6:	31ff      	adds	r1, #255	; 0xff
 800fbf8:	7029      	strb	r1, [r5, #0]
 800fbfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbfc:	4306      	orrs	r6, r0
 800fbfe:	3901      	subs	r1, #1
 800fc00:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fc02:	3501      	adds	r5, #1
 800fc04:	2100      	movs	r1, #0
 800fc06:	61f9      	str	r1, [r7, #28]
 800fc08:	e7dc      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fc0a:	2180      	movs	r1, #128	; 0x80
 800fc0c:	420e      	tst	r6, r1
 800fc0e:	d02b      	beq.n	800fc68 <__ssvfscanf_r+0x1190>
 800fc10:	438e      	bics	r6, r1
 800fc12:	e7d7      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fc14:	6a39      	ldr	r1, [r7, #32]
 800fc16:	2900      	cmp	r1, #0
 800fc18:	d10d      	bne.n	800fc36 <__ssvfscanf_r+0x115e>
 800fc1a:	69f9      	ldr	r1, [r7, #28]
 800fc1c:	2900      	cmp	r1, #0
 800fc1e:	d10e      	bne.n	800fc3e <__ssvfscanf_r+0x1166>
 800fc20:	21e0      	movs	r1, #224	; 0xe0
 800fc22:	0030      	movs	r0, r6
 800fc24:	00c9      	lsls	r1, r1, #3
 800fc26:	4008      	ands	r0, r1
 800fc28:	4288      	cmp	r0, r1
 800fc2a:	d108      	bne.n	800fc3e <__ssvfscanf_r+0x1166>
 800fc2c:	4931      	ldr	r1, [pc, #196]	; (800fcf4 <__ssvfscanf_r+0x121c>)
 800fc2e:	400e      	ands	r6, r1
 800fc30:	2101      	movs	r1, #1
 800fc32:	6239      	str	r1, [r7, #32]
 800fc34:	e7c6      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fc36:	6a39      	ldr	r1, [r7, #32]
 800fc38:	2902      	cmp	r1, #2
 800fc3a:	d100      	bne.n	800fc3e <__ssvfscanf_r+0x1166>
 800fc3c:	e089      	b.n	800fd52 <__ssvfscanf_r+0x127a>
 800fc3e:	2c01      	cmp	r4, #1
 800fc40:	d001      	beq.n	800fc46 <__ssvfscanf_r+0x116e>
 800fc42:	2c04      	cmp	r4, #4
 800fc44:	d110      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fc46:	3401      	adds	r4, #1
 800fc48:	b2e4      	uxtb	r4, r4
 800fc4a:	e7bb      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fc4c:	0531      	lsls	r1, r6, #20
 800fc4e:	d508      	bpl.n	800fc62 <__ssvfscanf_r+0x118a>
 800fc50:	6a39      	ldr	r1, [r7, #32]
 800fc52:	1909      	adds	r1, r1, r4
 800fc54:	2900      	cmp	r1, #0
 800fc56:	d104      	bne.n	800fc62 <__ssvfscanf_r+0x118a>
 800fc58:	4824      	ldr	r0, [pc, #144]	; (800fcec <__ssvfscanf_r+0x1214>)
 800fc5a:	000c      	movs	r4, r1
 800fc5c:	4006      	ands	r6, r0
 800fc5e:	6239      	str	r1, [r7, #32]
 800fc60:	e7b0      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fc62:	6a39      	ldr	r1, [r7, #32]
 800fc64:	2901      	cmp	r1, #1
 800fc66:	d076      	beq.n	800fd56 <__ssvfscanf_r+0x127e>
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d001      	beq.n	800fc72 <__ssvfscanf_r+0x119a>
 800fc6e:	4b20      	ldr	r3, [pc, #128]	; (800fcf0 <__ssvfscanf_r+0x1218>)
 800fc70:	401e      	ands	r6, r3
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	3b01      	subs	r3, #1
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d877      	bhi.n	800fd6a <__ssvfscanf_r+0x1292>
 800fc7a:	238c      	movs	r3, #140	; 0x8c
 800fc7c:	2248      	movs	r2, #72	; 0x48
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	189b      	adds	r3, r3, r2
 800fc82:	19db      	adds	r3, r3, r7
 800fc84:	429d      	cmp	r5, r3
 800fc86:	d801      	bhi.n	800fc8c <__ssvfscanf_r+0x11b4>
 800fc88:	f7ff f823 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800fc8c:	3d01      	subs	r5, #1
 800fc8e:	7829      	ldrb	r1, [r5, #0]
 800fc90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc94:	f001 fdf2 	bl	801187c <_sungetc_r>
 800fc98:	e7ef      	b.n	800fc7a <__ssvfscanf_r+0x11a2>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	d10c      	bne.n	800fcb8 <__ssvfscanf_r+0x11e0>
 800fc9e:	69f9      	ldr	r1, [r7, #28]
 800fca0:	2900      	cmp	r1, #0
 800fca2:	d1e4      	bne.n	800fc6e <__ssvfscanf_r+0x1196>
 800fca4:	21e0      	movs	r1, #224	; 0xe0
 800fca6:	0030      	movs	r0, r6
 800fca8:	00c9      	lsls	r1, r1, #3
 800fcaa:	4008      	ands	r0, r1
 800fcac:	4288      	cmp	r0, r1
 800fcae:	d1e0      	bne.n	800fc72 <__ssvfscanf_r+0x119a>
 800fcb0:	4910      	ldr	r1, [pc, #64]	; (800fcf4 <__ssvfscanf_r+0x121c>)
 800fcb2:	3401      	adds	r4, #1
 800fcb4:	400e      	ands	r6, r1
 800fcb6:	e785      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fcb8:	20fd      	movs	r0, #253	; 0xfd
 800fcba:	1ee1      	subs	r1, r4, #3
 800fcbc:	4201      	tst	r1, r0
 800fcbe:	d1d3      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fcc0:	e7c1      	b.n	800fc46 <__ssvfscanf_r+0x116e>
 800fcc2:	0531      	lsls	r1, r6, #20
 800fcc4:	d503      	bpl.n	800fcce <__ssvfscanf_r+0x11f6>
 800fcc6:	6a39      	ldr	r1, [r7, #32]
 800fcc8:	1909      	adds	r1, r1, r4
 800fcca:	2900      	cmp	r1, #0
 800fccc:	d0c4      	beq.n	800fc58 <__ssvfscanf_r+0x1180>
 800fcce:	2c02      	cmp	r4, #2
 800fcd0:	d1ca      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fcd2:	2403      	movs	r4, #3
 800fcd4:	e776      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fcd6:	2c06      	cmp	r4, #6
 800fcd8:	d1c6      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fcda:	2407      	movs	r4, #7
 800fcdc:	e772      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fcde:	2c07      	cmp	r4, #7
 800fce0:	d1c2      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fce2:	2408      	movs	r4, #8
 800fce4:	e76e      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	0800be99 	.word	0x0800be99
 800fcec:	fffffe7f 	.word	0xfffffe7f
 800fcf0:	fffffeff 	.word	0xfffffeff
 800fcf4:	fffff87f 	.word	0xfffff87f
 800fcf8:	0531      	lsls	r1, r6, #20
 800fcfa:	d5b5      	bpl.n	800fc68 <__ssvfscanf_r+0x1190>
 800fcfc:	21a0      	movs	r1, #160	; 0xa0
 800fcfe:	2080      	movs	r0, #128	; 0x80
 800fd00:	00c9      	lsls	r1, r1, #3
 800fd02:	00c0      	lsls	r0, r0, #3
 800fd04:	4031      	ands	r1, r6
 800fd06:	4281      	cmp	r1, r0
 800fd08:	d004      	beq.n	800fd14 <__ssvfscanf_r+0x123c>
 800fd0a:	4206      	tst	r6, r0
 800fd0c:	d0ac      	beq.n	800fc68 <__ssvfscanf_r+0x1190>
 800fd0e:	69f9      	ldr	r1, [r7, #28]
 800fd10:	2900      	cmp	r1, #0
 800fd12:	d0ae      	beq.n	800fc72 <__ssvfscanf_r+0x119a>
 800fd14:	2180      	movs	r1, #128	; 0x80
 800fd16:	0089      	lsls	r1, r1, #2
 800fd18:	420e      	tst	r6, r1
 800fd1a:	d104      	bne.n	800fd26 <__ssvfscanf_r+0x124e>
 800fd1c:	69f9      	ldr	r1, [r7, #28]
 800fd1e:	6938      	ldr	r0, [r7, #16]
 800fd20:	607d      	str	r5, [r7, #4]
 800fd22:	1a09      	subs	r1, r1, r0
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	20c0      	movs	r0, #192	; 0xc0
 800fd28:	4973      	ldr	r1, [pc, #460]	; (800fef8 <__ssvfscanf_r+0x1420>)
 800fd2a:	0040      	lsls	r0, r0, #1
 800fd2c:	400e      	ands	r6, r1
 800fd2e:	4306      	orrs	r6, r0
 800fd30:	e768      	b.n	800fc04 <__ssvfscanf_r+0x112c>
 800fd32:	0531      	lsls	r1, r6, #20
 800fd34:	d5e2      	bpl.n	800fcfc <__ssvfscanf_r+0x1224>
 800fd36:	e74a      	b.n	800fbce <__ssvfscanf_r+0x10f6>
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	7809      	ldrb	r1, [r1, #0]
 800fd3c:	4291      	cmp	r1, r2
 800fd3e:	d193      	bne.n	800fc68 <__ssvfscanf_r+0x1190>
 800fd40:	2180      	movs	r1, #128	; 0x80
 800fd42:	0089      	lsls	r1, r1, #2
 800fd44:	420e      	tst	r6, r1
 800fd46:	d08f      	beq.n	800fc68 <__ssvfscanf_r+0x1190>
 800fd48:	496c      	ldr	r1, [pc, #432]	; (800fefc <__ssvfscanf_r+0x1424>)
 800fd4a:	400e      	ands	r6, r1
 800fd4c:	69f9      	ldr	r1, [r7, #28]
 800fd4e:	6139      	str	r1, [r7, #16]
 800fd50:	e738      	b.n	800fbc4 <__ssvfscanf_r+0x10ec>
 800fd52:	2103      	movs	r1, #3
 800fd54:	e76d      	b.n	800fc32 <__ssvfscanf_r+0x115a>
 800fd56:	2102      	movs	r1, #2
 800fd58:	e76b      	b.n	800fc32 <__ssvfscanf_r+0x115a>
 800fd5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd5e:	f001 fdc9 	bl	80118f4 <__ssrefill_r>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d100      	bne.n	800fd68 <__ssvfscanf_r+0x1290>
 800fd66:	e723      	b.n	800fbb0 <__ssvfscanf_r+0x10d8>
 800fd68:	e77e      	b.n	800fc68 <__ssvfscanf_r+0x1190>
 800fd6a:	1e63      	subs	r3, r4, #1
 800fd6c:	2b06      	cmp	r3, #6
 800fd6e:	d825      	bhi.n	800fdbc <__ssvfscanf_r+0x12e4>
 800fd70:	2c02      	cmp	r4, #2
 800fd72:	d837      	bhi.n	800fde4 <__ssvfscanf_r+0x130c>
 800fd74:	238c      	movs	r3, #140	; 0x8c
 800fd76:	2248      	movs	r2, #72	; 0x48
 800fd78:	005b      	lsls	r3, r3, #1
 800fd7a:	189b      	adds	r3, r3, r2
 800fd7c:	19db      	adds	r3, r3, r7
 800fd7e:	429d      	cmp	r5, r3
 800fd80:	d801      	bhi.n	800fd86 <__ssvfscanf_r+0x12ae>
 800fd82:	f7fe ffa6 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800fd86:	3d01      	subs	r5, #1
 800fd88:	7829      	ldrb	r1, [r5, #0]
 800fd8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd8e:	f001 fd75 	bl	801187c <_sungetc_r>
 800fd92:	e7ef      	b.n	800fd74 <__ssvfscanf_r+0x129c>
 800fd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	7819      	ldrb	r1, [r3, #0]
 800fd9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fda0:	f001 fd6c 	bl	801187c <_sungetc_r>
 800fda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda6:	6a3a      	ldr	r2, [r7, #32]
 800fda8:	189b      	adds	r3, r3, r2
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b03      	cmp	r3, #3
 800fdae:	d8f1      	bhi.n	800fd94 <__ssvfscanf_r+0x12bc>
 800fdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb2:	3c03      	subs	r4, #3
 800fdb4:	b2e4      	uxtb	r4, r4
 800fdb6:	1b1b      	subs	r3, r3, r4
 800fdb8:	1b2d      	subs	r5, r5, r4
 800fdba:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdbc:	05f3      	lsls	r3, r6, #23
 800fdbe:	d52f      	bpl.n	800fe20 <__ssvfscanf_r+0x1348>
 800fdc0:	0573      	lsls	r3, r6, #21
 800fdc2:	d514      	bpl.n	800fdee <__ssvfscanf_r+0x1316>
 800fdc4:	238c      	movs	r3, #140	; 0x8c
 800fdc6:	2248      	movs	r2, #72	; 0x48
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	189b      	adds	r3, r3, r2
 800fdcc:	19db      	adds	r3, r3, r7
 800fdce:	429d      	cmp	r5, r3
 800fdd0:	d801      	bhi.n	800fdd6 <__ssvfscanf_r+0x12fe>
 800fdd2:	f7fe ff7e 	bl	800ecd2 <__ssvfscanf_r+0x1fa>
 800fdd6:	3d01      	subs	r5, #1
 800fdd8:	7829      	ldrb	r1, [r5, #0]
 800fdda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdde:	f001 fd4d 	bl	801187c <_sungetc_r>
 800fde2:	e7ef      	b.n	800fdc4 <__ssvfscanf_r+0x12ec>
 800fde4:	1b63      	subs	r3, r4, r5
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fdea:	623b      	str	r3, [r7, #32]
 800fdec:	e7da      	b.n	800fda4 <__ssvfscanf_r+0x12cc>
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	1e6c      	subs	r4, r5, #1
 800fdf2:	7821      	ldrb	r1, [r4, #0]
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdf8:	2965      	cmp	r1, #101	; 0x65
 800fdfa:	d00a      	beq.n	800fe12 <__ssvfscanf_r+0x133a>
 800fdfc:	2945      	cmp	r1, #69	; 0x45
 800fdfe:	d008      	beq.n	800fe12 <__ssvfscanf_r+0x133a>
 800fe00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe04:	f001 fd3a 	bl	801187c <_sungetc_r>
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	1eac      	subs	r4, r5, #2
 800fe0c:	3b02      	subs	r3, #2
 800fe0e:	7821      	ldrb	r1, [r4, #0]
 800fe10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe12:	0025      	movs	r5, r4
 800fe14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe18:	f001 fd30 	bl	801187c <_sungetc_r>
 800fe1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe20:	2310      	movs	r3, #16
 800fe22:	0032      	movs	r2, r6
 800fe24:	401a      	ands	r2, r3
 800fe26:	421e      	tst	r6, r3
 800fe28:	d001      	beq.n	800fe2e <__ssvfscanf_r+0x1356>
 800fe2a:	f7fe fe71 	bl	800eb10 <__ssvfscanf_r+0x38>
 800fe2e:	23c0      	movs	r3, #192	; 0xc0
 800fe30:	2180      	movs	r1, #128	; 0x80
 800fe32:	00db      	lsls	r3, r3, #3
 800fe34:	702a      	strb	r2, [r5, #0]
 800fe36:	4033      	ands	r3, r6
 800fe38:	00c9      	lsls	r1, r1, #3
 800fe3a:	428b      	cmp	r3, r1
 800fe3c:	d11f      	bne.n	800fe7e <__ssvfscanf_r+0x13a6>
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	69fa      	ldr	r2, [r7, #28]
 800fe42:	69f9      	ldr	r1, [r7, #28]
 800fe44:	1a9a      	subs	r2, r3, r2
 800fe46:	428b      	cmp	r3, r1
 800fe48:	d125      	bne.n	800fe96 <__ssvfscanf_r+0x13be>
 800fe4a:	238c      	movs	r3, #140	; 0x8c
 800fe4c:	2148      	movs	r1, #72	; 0x48
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	185b      	adds	r3, r3, r1
 800fe52:	19d9      	adds	r1, r3, r7
 800fe54:	2200      	movs	r2, #0
 800fe56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe58:	f7fb fef0 	bl	800bc3c <_strtod_r>
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5e:	0004      	movs	r4, r0
 800fe60:	3304      	adds	r3, #4
 800fe62:	000d      	movs	r5, r1
 800fe64:	623b      	str	r3, [r7, #32]
 800fe66:	07f3      	lsls	r3, r6, #31
 800fe68:	d523      	bpl.n	800feb2 <__ssvfscanf_r+0x13da>
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	601c      	str	r4, [r3, #0]
 800fe70:	605d      	str	r5, [r3, #4]
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	3301      	adds	r3, #1
 800fe76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe78:	6a3b      	ldr	r3, [r7, #32]
 800fe7a:	f7fe ffa5 	bl	800edc8 <__ssvfscanf_r+0x2f0>
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d0e2      	beq.n	800fe4a <__ssvfscanf_r+0x1372>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe88:	1c59      	adds	r1, r3, #1
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	f7fb ff72 	bl	800bd74 <_strtol_r>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	687d      	ldr	r5, [r7, #4]
 800fe94:	1ac2      	subs	r2, r0, r3
 800fe96:	2148      	movs	r1, #72	; 0x48
 800fe98:	4b19      	ldr	r3, [pc, #100]	; (800ff00 <__ssvfscanf_r+0x1428>)
 800fe9a:	185b      	adds	r3, r3, r1
 800fe9c:	19db      	adds	r3, r3, r7
 800fe9e:	429d      	cmp	r5, r3
 800fea0:	d302      	bcc.n	800fea8 <__ssvfscanf_r+0x13d0>
 800fea2:	4b18      	ldr	r3, [pc, #96]	; (800ff04 <__ssvfscanf_r+0x142c>)
 800fea4:	185b      	adds	r3, r3, r1
 800fea6:	19dd      	adds	r5, r3, r7
 800fea8:	0028      	movs	r0, r5
 800feaa:	4917      	ldr	r1, [pc, #92]	; (800ff08 <__ssvfscanf_r+0x1430>)
 800feac:	f7fc f8fc 	bl	800c0a8 <sprintf>
 800feb0:	e7cb      	b.n	800fe4a <__ssvfscanf_r+0x1372>
 800feb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feb8:	07b6      	lsls	r6, r6, #30
 800feba:	d4d8      	bmi.n	800fe6e <__ssvfscanf_r+0x1396>
 800febc:	0002      	movs	r2, r0
 800febe:	000b      	movs	r3, r1
 800fec0:	f7f2 fa18 	bl	80022f4 <__aeabi_dcmpun>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d005      	beq.n	800fed4 <__ssvfscanf_r+0x13fc>
 800fec8:	4810      	ldr	r0, [pc, #64]	; (800ff0c <__ssvfscanf_r+0x1434>)
 800feca:	f7fc fabf 	bl	800c44c <nanf>
 800fece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed0:	6018      	str	r0, [r3, #0]
 800fed2:	e7ce      	b.n	800fe72 <__ssvfscanf_r+0x139a>
 800fed4:	0020      	movs	r0, r4
 800fed6:	0029      	movs	r1, r5
 800fed8:	f7f2 fab6 	bl	8002448 <__aeabi_d2f>
 800fedc:	e7f7      	b.n	800fece <__ssvfscanf_r+0x13f6>
 800fede:	00a3      	lsls	r3, r4, #2
 800fee0:	18ed      	adds	r5, r5, r3
 800fee2:	682b      	ldr	r3, [r5, #0]
 800fee4:	3401      	adds	r4, #1
 800fee6:	6818      	ldr	r0, [r3, #0]
 800fee8:	f7fa fe58 	bl	800ab9c <free>
 800feec:	2200      	movs	r2, #0
 800feee:	682b      	ldr	r3, [r5, #0]
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	f7fe ffc3 	bl	800ee7c <__ssvfscanf_r+0x3a4>
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	fffff07f 	.word	0xfffff07f
 800fefc:	fffffd7f 	.word	0xfffffd7f
 800ff00:	0000026b 	.word	0x0000026b
 800ff04:	0000026a 	.word	0x0000026a
 800ff08:	08014c38 	.word	0x08014c38
 800ff0c:	08014c9b 	.word	0x08014c9b

0800ff10 <_fclose_r>:
 800ff10:	b570      	push	{r4, r5, r6, lr}
 800ff12:	0005      	movs	r5, r0
 800ff14:	1e0c      	subs	r4, r1, #0
 800ff16:	d102      	bne.n	800ff1e <_fclose_r+0xe>
 800ff18:	2600      	movs	r6, #0
 800ff1a:	0030      	movs	r0, r6
 800ff1c:	bd70      	pop	{r4, r5, r6, pc}
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d004      	beq.n	800ff2c <_fclose_r+0x1c>
 800ff22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <_fclose_r+0x1c>
 800ff28:	f7fc f856 	bl	800bfd8 <__sinit>
 800ff2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff2e:	07db      	lsls	r3, r3, #31
 800ff30:	d405      	bmi.n	800ff3e <_fclose_r+0x2e>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	059b      	lsls	r3, r3, #22
 800ff36:	d402      	bmi.n	800ff3e <_fclose_r+0x2e>
 800ff38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff3a:	f7fc fa6b 	bl	800c414 <__retarget_lock_acquire_recursive>
 800ff3e:	220c      	movs	r2, #12
 800ff40:	5ea3      	ldrsh	r3, [r4, r2]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d109      	bne.n	800ff5a <_fclose_r+0x4a>
 800ff46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff48:	3301      	adds	r3, #1
 800ff4a:	0016      	movs	r6, r2
 800ff4c:	401e      	ands	r6, r3
 800ff4e:	421a      	tst	r2, r3
 800ff50:	d1e2      	bne.n	800ff18 <_fclose_r+0x8>
 800ff52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff54:	f7fc fa5f 	bl	800c416 <__retarget_lock_release_recursive>
 800ff58:	e7df      	b.n	800ff1a <_fclose_r+0xa>
 800ff5a:	0021      	movs	r1, r4
 800ff5c:	0028      	movs	r0, r5
 800ff5e:	f000 f837 	bl	800ffd0 <__sflush_r>
 800ff62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff64:	0006      	movs	r6, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <_fclose_r+0x68>
 800ff6a:	0028      	movs	r0, r5
 800ff6c:	69e1      	ldr	r1, [r4, #28]
 800ff6e:	4798      	blx	r3
 800ff70:	2800      	cmp	r0, #0
 800ff72:	da01      	bge.n	800ff78 <_fclose_r+0x68>
 800ff74:	2601      	movs	r6, #1
 800ff76:	4276      	negs	r6, r6
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	061b      	lsls	r3, r3, #24
 800ff7c:	d503      	bpl.n	800ff86 <_fclose_r+0x76>
 800ff7e:	0028      	movs	r0, r5
 800ff80:	6921      	ldr	r1, [r4, #16]
 800ff82:	f7fc facf 	bl	800c524 <_free_r>
 800ff86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ff88:	2900      	cmp	r1, #0
 800ff8a:	d008      	beq.n	800ff9e <_fclose_r+0x8e>
 800ff8c:	0023      	movs	r3, r4
 800ff8e:	3340      	adds	r3, #64	; 0x40
 800ff90:	4299      	cmp	r1, r3
 800ff92:	d002      	beq.n	800ff9a <_fclose_r+0x8a>
 800ff94:	0028      	movs	r0, r5
 800ff96:	f7fc fac5 	bl	800c524 <_free_r>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	6323      	str	r3, [r4, #48]	; 0x30
 800ff9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ffa0:	2900      	cmp	r1, #0
 800ffa2:	d004      	beq.n	800ffae <_fclose_r+0x9e>
 800ffa4:	0028      	movs	r0, r5
 800ffa6:	f7fc fabd 	bl	800c524 <_free_r>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	6463      	str	r3, [r4, #68]	; 0x44
 800ffae:	f7fc f803 	bl	800bfb8 <__sfp_lock_acquire>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	81a3      	strh	r3, [r4, #12]
 800ffb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffb8:	07db      	lsls	r3, r3, #31
 800ffba:	d402      	bmi.n	800ffc2 <_fclose_r+0xb2>
 800ffbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffbe:	f7fc fa2a 	bl	800c416 <__retarget_lock_release_recursive>
 800ffc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffc4:	f7fc fa25 	bl	800c412 <__retarget_lock_close_recursive>
 800ffc8:	f7fb fffe 	bl	800bfc8 <__sfp_lock_release>
 800ffcc:	e7a5      	b.n	800ff1a <_fclose_r+0xa>
	...

0800ffd0 <__sflush_r>:
 800ffd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffd2:	230c      	movs	r3, #12
 800ffd4:	5eca      	ldrsh	r2, [r1, r3]
 800ffd6:	000c      	movs	r4, r1
 800ffd8:	0005      	movs	r5, r0
 800ffda:	b291      	uxth	r1, r2
 800ffdc:	0713      	lsls	r3, r2, #28
 800ffde:	d464      	bmi.n	80100aa <__sflush_r+0xda>
 800ffe0:	2380      	movs	r3, #128	; 0x80
 800ffe2:	011b      	lsls	r3, r3, #4
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	6862      	ldr	r2, [r4, #4]
 800ffe8:	81a3      	strh	r3, [r4, #12]
 800ffea:	2a00      	cmp	r2, #0
 800ffec:	dc04      	bgt.n	800fff8 <__sflush_r+0x28>
 800ffee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fff0:	2a00      	cmp	r2, #0
 800fff2:	dc01      	bgt.n	800fff8 <__sflush_r+0x28>
 800fff4:	2000      	movs	r0, #0
 800fff6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fff8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fffa:	2f00      	cmp	r7, #0
 800fffc:	d0fa      	beq.n	800fff4 <__sflush_r+0x24>
 800fffe:	2200      	movs	r2, #0
 8010000:	2080      	movs	r0, #128	; 0x80
 8010002:	682e      	ldr	r6, [r5, #0]
 8010004:	602a      	str	r2, [r5, #0]
 8010006:	001a      	movs	r2, r3
 8010008:	0140      	lsls	r0, r0, #5
 801000a:	69e1      	ldr	r1, [r4, #28]
 801000c:	4002      	ands	r2, r0
 801000e:	4203      	tst	r3, r0
 8010010:	d038      	beq.n	8010084 <__sflush_r+0xb4>
 8010012:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	075b      	lsls	r3, r3, #29
 8010018:	d506      	bpl.n	8010028 <__sflush_r+0x58>
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	1ac0      	subs	r0, r0, r3
 801001e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <__sflush_r+0x58>
 8010024:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010026:	1ac0      	subs	r0, r0, r3
 8010028:	0002      	movs	r2, r0
 801002a:	2300      	movs	r3, #0
 801002c:	0028      	movs	r0, r5
 801002e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010030:	69e1      	ldr	r1, [r4, #28]
 8010032:	47b8      	blx	r7
 8010034:	89a2      	ldrh	r2, [r4, #12]
 8010036:	1c43      	adds	r3, r0, #1
 8010038:	d106      	bne.n	8010048 <__sflush_r+0x78>
 801003a:	6829      	ldr	r1, [r5, #0]
 801003c:	291d      	cmp	r1, #29
 801003e:	d830      	bhi.n	80100a2 <__sflush_r+0xd2>
 8010040:	4b2c      	ldr	r3, [pc, #176]	; (80100f4 <__sflush_r+0x124>)
 8010042:	410b      	asrs	r3, r1
 8010044:	07db      	lsls	r3, r3, #31
 8010046:	d42c      	bmi.n	80100a2 <__sflush_r+0xd2>
 8010048:	4b2b      	ldr	r3, [pc, #172]	; (80100f8 <__sflush_r+0x128>)
 801004a:	4013      	ands	r3, r2
 801004c:	2200      	movs	r2, #0
 801004e:	6062      	str	r2, [r4, #4]
 8010050:	6922      	ldr	r2, [r4, #16]
 8010052:	b21b      	sxth	r3, r3
 8010054:	81a3      	strh	r3, [r4, #12]
 8010056:	6022      	str	r2, [r4, #0]
 8010058:	04db      	lsls	r3, r3, #19
 801005a:	d505      	bpl.n	8010068 <__sflush_r+0x98>
 801005c:	1c43      	adds	r3, r0, #1
 801005e:	d102      	bne.n	8010066 <__sflush_r+0x96>
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d100      	bne.n	8010068 <__sflush_r+0x98>
 8010066:	6520      	str	r0, [r4, #80]	; 0x50
 8010068:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801006a:	602e      	str	r6, [r5, #0]
 801006c:	2900      	cmp	r1, #0
 801006e:	d0c1      	beq.n	800fff4 <__sflush_r+0x24>
 8010070:	0023      	movs	r3, r4
 8010072:	3340      	adds	r3, #64	; 0x40
 8010074:	4299      	cmp	r1, r3
 8010076:	d002      	beq.n	801007e <__sflush_r+0xae>
 8010078:	0028      	movs	r0, r5
 801007a:	f7fc fa53 	bl	800c524 <_free_r>
 801007e:	2000      	movs	r0, #0
 8010080:	6320      	str	r0, [r4, #48]	; 0x30
 8010082:	e7b8      	b.n	800fff6 <__sflush_r+0x26>
 8010084:	2301      	movs	r3, #1
 8010086:	0028      	movs	r0, r5
 8010088:	47b8      	blx	r7
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	d1c2      	bne.n	8010014 <__sflush_r+0x44>
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d0bf      	beq.n	8010014 <__sflush_r+0x44>
 8010094:	2b1d      	cmp	r3, #29
 8010096:	d001      	beq.n	801009c <__sflush_r+0xcc>
 8010098:	2b16      	cmp	r3, #22
 801009a:	d101      	bne.n	80100a0 <__sflush_r+0xd0>
 801009c:	602e      	str	r6, [r5, #0]
 801009e:	e7a9      	b.n	800fff4 <__sflush_r+0x24>
 80100a0:	89a2      	ldrh	r2, [r4, #12]
 80100a2:	2340      	movs	r3, #64	; 0x40
 80100a4:	4313      	orrs	r3, r2
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	e7a5      	b.n	800fff6 <__sflush_r+0x26>
 80100aa:	6926      	ldr	r6, [r4, #16]
 80100ac:	2e00      	cmp	r6, #0
 80100ae:	d0a1      	beq.n	800fff4 <__sflush_r+0x24>
 80100b0:	6827      	ldr	r7, [r4, #0]
 80100b2:	6026      	str	r6, [r4, #0]
 80100b4:	1bbb      	subs	r3, r7, r6
 80100b6:	9301      	str	r3, [sp, #4]
 80100b8:	2300      	movs	r3, #0
 80100ba:	0789      	lsls	r1, r1, #30
 80100bc:	d100      	bne.n	80100c0 <__sflush_r+0xf0>
 80100be:	6963      	ldr	r3, [r4, #20]
 80100c0:	60a3      	str	r3, [r4, #8]
 80100c2:	9b01      	ldr	r3, [sp, #4]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	dc00      	bgt.n	80100ca <__sflush_r+0xfa>
 80100c8:	e794      	b.n	800fff4 <__sflush_r+0x24>
 80100ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100cc:	0032      	movs	r2, r6
 80100ce:	001f      	movs	r7, r3
 80100d0:	0028      	movs	r0, r5
 80100d2:	9b01      	ldr	r3, [sp, #4]
 80100d4:	69e1      	ldr	r1, [r4, #28]
 80100d6:	47b8      	blx	r7
 80100d8:	2800      	cmp	r0, #0
 80100da:	dc06      	bgt.n	80100ea <__sflush_r+0x11a>
 80100dc:	2340      	movs	r3, #64	; 0x40
 80100de:	2001      	movs	r0, #1
 80100e0:	89a2      	ldrh	r2, [r4, #12]
 80100e2:	4240      	negs	r0, r0
 80100e4:	4313      	orrs	r3, r2
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	e785      	b.n	800fff6 <__sflush_r+0x26>
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	1836      	adds	r6, r6, r0
 80100ee:	1a1b      	subs	r3, r3, r0
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	e7e6      	b.n	80100c2 <__sflush_r+0xf2>
 80100f4:	dfbffffe 	.word	0xdfbffffe
 80100f8:	fffff7ff 	.word	0xfffff7ff

080100fc <_fflush_r>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	0005      	movs	r5, r0
 8010100:	000c      	movs	r4, r1
 8010102:	2800      	cmp	r0, #0
 8010104:	d004      	beq.n	8010110 <_fflush_r+0x14>
 8010106:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010108:	2b00      	cmp	r3, #0
 801010a:	d101      	bne.n	8010110 <_fflush_r+0x14>
 801010c:	f7fb ff64 	bl	800bfd8 <__sinit>
 8010110:	220c      	movs	r2, #12
 8010112:	5ea3      	ldrsh	r3, [r4, r2]
 8010114:	1e1e      	subs	r6, r3, #0
 8010116:	d015      	beq.n	8010144 <_fflush_r+0x48>
 8010118:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801011a:	07d2      	lsls	r2, r2, #31
 801011c:	d404      	bmi.n	8010128 <_fflush_r+0x2c>
 801011e:	059b      	lsls	r3, r3, #22
 8010120:	d402      	bmi.n	8010128 <_fflush_r+0x2c>
 8010122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010124:	f7fc f976 	bl	800c414 <__retarget_lock_acquire_recursive>
 8010128:	0021      	movs	r1, r4
 801012a:	0028      	movs	r0, r5
 801012c:	f7ff ff50 	bl	800ffd0 <__sflush_r>
 8010130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010132:	0006      	movs	r6, r0
 8010134:	07db      	lsls	r3, r3, #31
 8010136:	d405      	bmi.n	8010144 <_fflush_r+0x48>
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	059b      	lsls	r3, r3, #22
 801013c:	d402      	bmi.n	8010144 <_fflush_r+0x48>
 801013e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010140:	f7fc f969 	bl	800c416 <__retarget_lock_release_recursive>
 8010144:	0030      	movs	r0, r6
 8010146:	bd70      	pop	{r4, r5, r6, pc}

08010148 <__sccl>:
 8010148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801014a:	780b      	ldrb	r3, [r1, #0]
 801014c:	0004      	movs	r4, r0
 801014e:	2b5e      	cmp	r3, #94	; 0x5e
 8010150:	d019      	beq.n	8010186 <__sccl+0x3e>
 8010152:	2200      	movs	r2, #0
 8010154:	1c4d      	adds	r5, r1, #1
 8010156:	0021      	movs	r1, r4
 8010158:	1c60      	adds	r0, r4, #1
 801015a:	30ff      	adds	r0, #255	; 0xff
 801015c:	700a      	strb	r2, [r1, #0]
 801015e:	3101      	adds	r1, #1
 8010160:	4281      	cmp	r1, r0
 8010162:	d1fb      	bne.n	801015c <__sccl+0x14>
 8010164:	1e68      	subs	r0, r5, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00c      	beq.n	8010184 <__sccl+0x3c>
 801016a:	2101      	movs	r1, #1
 801016c:	262d      	movs	r6, #45	; 0x2d
 801016e:	404a      	eors	r2, r1
 8010170:	0028      	movs	r0, r5
 8010172:	54e2      	strb	r2, [r4, r3]
 8010174:	7801      	ldrb	r1, [r0, #0]
 8010176:	1c45      	adds	r5, r0, #1
 8010178:	292d      	cmp	r1, #45	; 0x2d
 801017a:	d00c      	beq.n	8010196 <__sccl+0x4e>
 801017c:	295d      	cmp	r1, #93	; 0x5d
 801017e:	d01d      	beq.n	80101bc <__sccl+0x74>
 8010180:	2900      	cmp	r1, #0
 8010182:	d104      	bne.n	801018e <__sccl+0x46>
 8010184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010186:	2201      	movs	r2, #1
 8010188:	784b      	ldrb	r3, [r1, #1]
 801018a:	1c8d      	adds	r5, r1, #2
 801018c:	e7e3      	b.n	8010156 <__sccl+0xe>
 801018e:	000b      	movs	r3, r1
 8010190:	e7ee      	b.n	8010170 <__sccl+0x28>
 8010192:	0033      	movs	r3, r6
 8010194:	e7ec      	b.n	8010170 <__sccl+0x28>
 8010196:	7841      	ldrb	r1, [r0, #1]
 8010198:	295d      	cmp	r1, #93	; 0x5d
 801019a:	d0fa      	beq.n	8010192 <__sccl+0x4a>
 801019c:	428b      	cmp	r3, r1
 801019e:	dcf8      	bgt.n	8010192 <__sccl+0x4a>
 80101a0:	001d      	movs	r5, r3
 80101a2:	3002      	adds	r0, #2
 80101a4:	3501      	adds	r5, #1
 80101a6:	5562      	strb	r2, [r4, r5]
 80101a8:	42a9      	cmp	r1, r5
 80101aa:	dcfb      	bgt.n	80101a4 <__sccl+0x5c>
 80101ac:	2500      	movs	r5, #0
 80101ae:	1c5f      	adds	r7, r3, #1
 80101b0:	428b      	cmp	r3, r1
 80101b2:	da01      	bge.n	80101b8 <__sccl+0x70>
 80101b4:	1acd      	subs	r5, r1, r3
 80101b6:	3d01      	subs	r5, #1
 80101b8:	197b      	adds	r3, r7, r5
 80101ba:	e7db      	b.n	8010174 <__sccl+0x2c>
 80101bc:	0028      	movs	r0, r5
 80101be:	e7e1      	b.n	8010184 <__sccl+0x3c>

080101c0 <_localeconv_r>:
 80101c0:	4800      	ldr	r0, [pc, #0]	; (80101c4 <_localeconv_r+0x4>)
 80101c2:	4770      	bx	lr
 80101c4:	20000534 	.word	0x20000534

080101c8 <__libc_fini_array>:
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	4c07      	ldr	r4, [pc, #28]	; (80101e8 <__libc_fini_array+0x20>)
 80101cc:	4d07      	ldr	r5, [pc, #28]	; (80101ec <__libc_fini_array+0x24>)
 80101ce:	1b64      	subs	r4, r4, r5
 80101d0:	10a4      	asrs	r4, r4, #2
 80101d2:	2c00      	cmp	r4, #0
 80101d4:	d102      	bne.n	80101dc <__libc_fini_array+0x14>
 80101d6:	f002 fd47 	bl	8012c68 <_fini>
 80101da:	bd70      	pop	{r4, r5, r6, pc}
 80101dc:	3c01      	subs	r4, #1
 80101de:	00a3      	lsls	r3, r4, #2
 80101e0:	58eb      	ldr	r3, [r5, r3]
 80101e2:	4798      	blx	r3
 80101e4:	e7f5      	b.n	80101d2 <__libc_fini_array+0xa>
 80101e6:	46c0      	nop			; (mov r8, r8)
 80101e8:	08014d38 	.word	0x08014d38
 80101ec:	08014d34 	.word	0x08014d34

080101f0 <memchr>:
 80101f0:	b2c9      	uxtb	r1, r1
 80101f2:	1882      	adds	r2, r0, r2
 80101f4:	4290      	cmp	r0, r2
 80101f6:	d101      	bne.n	80101fc <memchr+0xc>
 80101f8:	2000      	movs	r0, #0
 80101fa:	4770      	bx	lr
 80101fc:	7803      	ldrb	r3, [r0, #0]
 80101fe:	428b      	cmp	r3, r1
 8010200:	d0fb      	beq.n	80101fa <memchr+0xa>
 8010202:	3001      	adds	r0, #1
 8010204:	e7f6      	b.n	80101f4 <memchr+0x4>
	...

08010208 <frexp>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	0014      	movs	r4, r2
 801020c:	2500      	movs	r5, #0
 801020e:	6025      	str	r5, [r4, #0]
 8010210:	4d10      	ldr	r5, [pc, #64]	; (8010254 <frexp+0x4c>)
 8010212:	004b      	lsls	r3, r1, #1
 8010214:	000a      	movs	r2, r1
 8010216:	085b      	lsrs	r3, r3, #1
 8010218:	42ab      	cmp	r3, r5
 801021a:	dc1a      	bgt.n	8010252 <frexp+0x4a>
 801021c:	001d      	movs	r5, r3
 801021e:	4305      	orrs	r5, r0
 8010220:	d017      	beq.n	8010252 <frexp+0x4a>
 8010222:	4d0d      	ldr	r5, [pc, #52]	; (8010258 <frexp+0x50>)
 8010224:	4229      	tst	r1, r5
 8010226:	d109      	bne.n	801023c <frexp+0x34>
 8010228:	2200      	movs	r2, #0
 801022a:	4b0c      	ldr	r3, [pc, #48]	; (801025c <frexp+0x54>)
 801022c:	f7f1 fa1e 	bl	800166c <__aeabi_dmul>
 8010230:	2536      	movs	r5, #54	; 0x36
 8010232:	000a      	movs	r2, r1
 8010234:	004b      	lsls	r3, r1, #1
 8010236:	426d      	negs	r5, r5
 8010238:	085b      	lsrs	r3, r3, #1
 801023a:	6025      	str	r5, [r4, #0]
 801023c:	4d08      	ldr	r5, [pc, #32]	; (8010260 <frexp+0x58>)
 801023e:	151b      	asrs	r3, r3, #20
 8010240:	195b      	adds	r3, r3, r5
 8010242:	6825      	ldr	r5, [r4, #0]
 8010244:	18eb      	adds	r3, r5, r3
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	4b06      	ldr	r3, [pc, #24]	; (8010264 <frexp+0x5c>)
 801024a:	401a      	ands	r2, r3
 801024c:	4b06      	ldr	r3, [pc, #24]	; (8010268 <frexp+0x60>)
 801024e:	4313      	orrs	r3, r2
 8010250:	0019      	movs	r1, r3
 8010252:	bd70      	pop	{r4, r5, r6, pc}
 8010254:	7fefffff 	.word	0x7fefffff
 8010258:	7ff00000 	.word	0x7ff00000
 801025c:	43500000 	.word	0x43500000
 8010260:	fffffc02 	.word	0xfffffc02
 8010264:	800fffff 	.word	0x800fffff
 8010268:	3fe00000 	.word	0x3fe00000

0801026c <__register_exitproc>:
 801026c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801026e:	4f1c      	ldr	r7, [pc, #112]	; (80102e0 <__register_exitproc+0x74>)
 8010270:	0004      	movs	r4, r0
 8010272:	6838      	ldr	r0, [r7, #0]
 8010274:	0016      	movs	r6, r2
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	9100      	str	r1, [sp, #0]
 801027a:	f7fc f8cb 	bl	800c414 <__retarget_lock_acquire_recursive>
 801027e:	4a19      	ldr	r2, [pc, #100]	; (80102e4 <__register_exitproc+0x78>)
 8010280:	6813      	ldr	r3, [r2, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d101      	bne.n	801028a <__register_exitproc+0x1e>
 8010286:	4b18      	ldr	r3, [pc, #96]	; (80102e8 <__register_exitproc+0x7c>)
 8010288:	6013      	str	r3, [r2, #0]
 801028a:	685a      	ldr	r2, [r3, #4]
 801028c:	6838      	ldr	r0, [r7, #0]
 801028e:	2a1f      	cmp	r2, #31
 8010290:	dd04      	ble.n	801029c <__register_exitproc+0x30>
 8010292:	f7fc f8c0 	bl	800c416 <__retarget_lock_release_recursive>
 8010296:	2001      	movs	r0, #1
 8010298:	4240      	negs	r0, r0
 801029a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801029c:	2c00      	cmp	r4, #0
 801029e:	d014      	beq.n	80102ca <__register_exitproc+0x5e>
 80102a0:	0091      	lsls	r1, r2, #2
 80102a2:	1859      	adds	r1, r3, r1
 80102a4:	000f      	movs	r7, r1
 80102a6:	3788      	adds	r7, #136	; 0x88
 80102a8:	603e      	str	r6, [r7, #0]
 80102aa:	2701      	movs	r7, #1
 80102ac:	001e      	movs	r6, r3
 80102ae:	4097      	lsls	r7, r2
 80102b0:	3685      	adds	r6, #133	; 0x85
 80102b2:	36ff      	adds	r6, #255	; 0xff
 80102b4:	6875      	ldr	r5, [r6, #4]
 80102b6:	31fc      	adds	r1, #252	; 0xfc
 80102b8:	433d      	orrs	r5, r7
 80102ba:	6075      	str	r5, [r6, #4]
 80102bc:	9d01      	ldr	r5, [sp, #4]
 80102be:	60cd      	str	r5, [r1, #12]
 80102c0:	2c02      	cmp	r4, #2
 80102c2:	d102      	bne.n	80102ca <__register_exitproc+0x5e>
 80102c4:	68b1      	ldr	r1, [r6, #8]
 80102c6:	4339      	orrs	r1, r7
 80102c8:	60b1      	str	r1, [r6, #8]
 80102ca:	1c51      	adds	r1, r2, #1
 80102cc:	6059      	str	r1, [r3, #4]
 80102ce:	3202      	adds	r2, #2
 80102d0:	9900      	ldr	r1, [sp, #0]
 80102d2:	0092      	lsls	r2, r2, #2
 80102d4:	50d1      	str	r1, [r2, r3]
 80102d6:	f7fc f89e 	bl	800c416 <__retarget_lock_release_recursive>
 80102da:	2000      	movs	r0, #0
 80102dc:	e7dd      	b.n	801029a <__register_exitproc+0x2e>
 80102de:	46c0      	nop			; (mov r8, r8)
 80102e0:	200006d4 	.word	0x200006d4
 80102e4:	20000db0 	.word	0x20000db0
 80102e8:	20000db4 	.word	0x20000db4

080102ec <__assert_func>:
 80102ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80102ee:	0014      	movs	r4, r2
 80102f0:	001a      	movs	r2, r3
 80102f2:	4b09      	ldr	r3, [pc, #36]	; (8010318 <__assert_func+0x2c>)
 80102f4:	0005      	movs	r5, r0
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	000e      	movs	r6, r1
 80102fa:	68d8      	ldr	r0, [r3, #12]
 80102fc:	4b07      	ldr	r3, [pc, #28]	; (801031c <__assert_func+0x30>)
 80102fe:	2c00      	cmp	r4, #0
 8010300:	d101      	bne.n	8010306 <__assert_func+0x1a>
 8010302:	4b07      	ldr	r3, [pc, #28]	; (8010320 <__assert_func+0x34>)
 8010304:	001c      	movs	r4, r3
 8010306:	4907      	ldr	r1, [pc, #28]	; (8010324 <__assert_func+0x38>)
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	9402      	str	r4, [sp, #8]
 801030c:	002b      	movs	r3, r5
 801030e:	9600      	str	r6, [sp, #0]
 8010310:	f001 fa20 	bl	8011754 <fiprintf>
 8010314:	f002 fb08 	bl	8012928 <abort>
 8010318:	200006d0 	.word	0x200006d0
 801031c:	08014c60 	.word	0x08014c60
 8010320:	08014c9b 	.word	0x08014c9b
 8010324:	08014c6d 	.word	0x08014c6d

08010328 <_calloc_r>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	2400      	movs	r4, #0
 801032c:	0c0b      	lsrs	r3, r1, #16
 801032e:	0c16      	lsrs	r6, r2, #16
 8010330:	42a3      	cmp	r3, r4
 8010332:	d133      	bne.n	801039c <_calloc_r+0x74>
 8010334:	42a6      	cmp	r6, r4
 8010336:	d121      	bne.n	801037c <_calloc_r+0x54>
 8010338:	b28b      	uxth	r3, r1
 801033a:	b291      	uxth	r1, r2
 801033c:	4359      	muls	r1, r3
 801033e:	f7fa fc37 	bl	800abb0 <_malloc_r>
 8010342:	1e05      	subs	r5, r0, #0
 8010344:	d033      	beq.n	80103ae <_calloc_r+0x86>
 8010346:	0003      	movs	r3, r0
 8010348:	3b08      	subs	r3, #8
 801034a:	685a      	ldr	r2, [r3, #4]
 801034c:	2303      	movs	r3, #3
 801034e:	439a      	bics	r2, r3
 8010350:	3a04      	subs	r2, #4
 8010352:	2a24      	cmp	r2, #36	; 0x24
 8010354:	d832      	bhi.n	80103bc <_calloc_r+0x94>
 8010356:	0003      	movs	r3, r0
 8010358:	2a13      	cmp	r2, #19
 801035a:	d90a      	bls.n	8010372 <_calloc_r+0x4a>
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	6044      	str	r4, [r0, #4]
 8010360:	3308      	adds	r3, #8
 8010362:	2a1b      	cmp	r2, #27
 8010364:	d905      	bls.n	8010372 <_calloc_r+0x4a>
 8010366:	6084      	str	r4, [r0, #8]
 8010368:	60c4      	str	r4, [r0, #12]
 801036a:	2a24      	cmp	r2, #36	; 0x24
 801036c:	d021      	beq.n	80103b2 <_calloc_r+0x8a>
 801036e:	0003      	movs	r3, r0
 8010370:	3310      	adds	r3, #16
 8010372:	2200      	movs	r2, #0
 8010374:	601a      	str	r2, [r3, #0]
 8010376:	605a      	str	r2, [r3, #4]
 8010378:	609a      	str	r2, [r3, #8]
 801037a:	e018      	b.n	80103ae <_calloc_r+0x86>
 801037c:	1c33      	adds	r3, r6, #0
 801037e:	1c0d      	adds	r5, r1, #0
 8010380:	b289      	uxth	r1, r1
 8010382:	b292      	uxth	r2, r2
 8010384:	434a      	muls	r2, r1
 8010386:	b2ad      	uxth	r5, r5
 8010388:	b299      	uxth	r1, r3
 801038a:	4369      	muls	r1, r5
 801038c:	0c13      	lsrs	r3, r2, #16
 801038e:	18c9      	adds	r1, r1, r3
 8010390:	0c0b      	lsrs	r3, r1, #16
 8010392:	d107      	bne.n	80103a4 <_calloc_r+0x7c>
 8010394:	0409      	lsls	r1, r1, #16
 8010396:	b292      	uxth	r2, r2
 8010398:	4311      	orrs	r1, r2
 801039a:	e7d0      	b.n	801033e <_calloc_r+0x16>
 801039c:	2e00      	cmp	r6, #0
 801039e:	d101      	bne.n	80103a4 <_calloc_r+0x7c>
 80103a0:	1c15      	adds	r5, r2, #0
 80103a2:	e7ed      	b.n	8010380 <_calloc_r+0x58>
 80103a4:	f7fc f80a 	bl	800c3bc <__errno>
 80103a8:	230c      	movs	r3, #12
 80103aa:	2500      	movs	r5, #0
 80103ac:	6003      	str	r3, [r0, #0]
 80103ae:	0028      	movs	r0, r5
 80103b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b2:	0003      	movs	r3, r0
 80103b4:	6104      	str	r4, [r0, #16]
 80103b6:	3318      	adds	r3, #24
 80103b8:	6144      	str	r4, [r0, #20]
 80103ba:	e7da      	b.n	8010372 <_calloc_r+0x4a>
 80103bc:	2100      	movs	r1, #0
 80103be:	f7fb ff09 	bl	800c1d4 <memset>
 80103c2:	e7f4      	b.n	80103ae <_calloc_r+0x86>

080103c4 <quorem>:
 80103c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103c6:	6902      	ldr	r2, [r0, #16]
 80103c8:	690b      	ldr	r3, [r1, #16]
 80103ca:	b089      	sub	sp, #36	; 0x24
 80103cc:	0007      	movs	r7, r0
 80103ce:	9104      	str	r1, [sp, #16]
 80103d0:	2000      	movs	r0, #0
 80103d2:	429a      	cmp	r2, r3
 80103d4:	db69      	blt.n	80104aa <quorem+0xe6>
 80103d6:	3b01      	subs	r3, #1
 80103d8:	009c      	lsls	r4, r3, #2
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	000b      	movs	r3, r1
 80103de:	3314      	adds	r3, #20
 80103e0:	9306      	str	r3, [sp, #24]
 80103e2:	191b      	adds	r3, r3, r4
 80103e4:	9305      	str	r3, [sp, #20]
 80103e6:	003b      	movs	r3, r7
 80103e8:	3314      	adds	r3, #20
 80103ea:	9303      	str	r3, [sp, #12]
 80103ec:	191c      	adds	r4, r3, r4
 80103ee:	9b05      	ldr	r3, [sp, #20]
 80103f0:	6826      	ldr	r6, [r4, #0]
 80103f2:	681d      	ldr	r5, [r3, #0]
 80103f4:	0030      	movs	r0, r6
 80103f6:	3501      	adds	r5, #1
 80103f8:	0029      	movs	r1, r5
 80103fa:	f7ef fe9f 	bl	800013c <__udivsi3>
 80103fe:	9002      	str	r0, [sp, #8]
 8010400:	42ae      	cmp	r6, r5
 8010402:	d329      	bcc.n	8010458 <quorem+0x94>
 8010404:	9b06      	ldr	r3, [sp, #24]
 8010406:	2600      	movs	r6, #0
 8010408:	469c      	mov	ip, r3
 801040a:	9d03      	ldr	r5, [sp, #12]
 801040c:	9606      	str	r6, [sp, #24]
 801040e:	4662      	mov	r2, ip
 8010410:	ca08      	ldmia	r2!, {r3}
 8010412:	6828      	ldr	r0, [r5, #0]
 8010414:	4694      	mov	ip, r2
 8010416:	9a02      	ldr	r2, [sp, #8]
 8010418:	b299      	uxth	r1, r3
 801041a:	4351      	muls	r1, r2
 801041c:	0c1b      	lsrs	r3, r3, #16
 801041e:	4353      	muls	r3, r2
 8010420:	1989      	adds	r1, r1, r6
 8010422:	0c0a      	lsrs	r2, r1, #16
 8010424:	189b      	adds	r3, r3, r2
 8010426:	9307      	str	r3, [sp, #28]
 8010428:	0c1e      	lsrs	r6, r3, #16
 801042a:	9b06      	ldr	r3, [sp, #24]
 801042c:	b282      	uxth	r2, r0
 801042e:	18d2      	adds	r2, r2, r3
 8010430:	466b      	mov	r3, sp
 8010432:	b289      	uxth	r1, r1
 8010434:	8b9b      	ldrh	r3, [r3, #28]
 8010436:	1a52      	subs	r2, r2, r1
 8010438:	0c01      	lsrs	r1, r0, #16
 801043a:	1ac9      	subs	r1, r1, r3
 801043c:	1413      	asrs	r3, r2, #16
 801043e:	18cb      	adds	r3, r1, r3
 8010440:	1419      	asrs	r1, r3, #16
 8010442:	b292      	uxth	r2, r2
 8010444:	041b      	lsls	r3, r3, #16
 8010446:	4313      	orrs	r3, r2
 8010448:	c508      	stmia	r5!, {r3}
 801044a:	9b05      	ldr	r3, [sp, #20]
 801044c:	9106      	str	r1, [sp, #24]
 801044e:	4563      	cmp	r3, ip
 8010450:	d2dd      	bcs.n	801040e <quorem+0x4a>
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d030      	beq.n	80104ba <quorem+0xf6>
 8010458:	0038      	movs	r0, r7
 801045a:	9904      	ldr	r1, [sp, #16]
 801045c:	f7fc ff04 	bl	800d268 <__mcmp>
 8010460:	2800      	cmp	r0, #0
 8010462:	db21      	blt.n	80104a8 <quorem+0xe4>
 8010464:	0038      	movs	r0, r7
 8010466:	2600      	movs	r6, #0
 8010468:	9b02      	ldr	r3, [sp, #8]
 801046a:	9c04      	ldr	r4, [sp, #16]
 801046c:	3301      	adds	r3, #1
 801046e:	9302      	str	r3, [sp, #8]
 8010470:	3014      	adds	r0, #20
 8010472:	3414      	adds	r4, #20
 8010474:	6803      	ldr	r3, [r0, #0]
 8010476:	cc02      	ldmia	r4!, {r1}
 8010478:	b29d      	uxth	r5, r3
 801047a:	19ad      	adds	r5, r5, r6
 801047c:	b28a      	uxth	r2, r1
 801047e:	1aaa      	subs	r2, r5, r2
 8010480:	0c09      	lsrs	r1, r1, #16
 8010482:	0c1b      	lsrs	r3, r3, #16
 8010484:	1a5b      	subs	r3, r3, r1
 8010486:	1411      	asrs	r1, r2, #16
 8010488:	185b      	adds	r3, r3, r1
 801048a:	141e      	asrs	r6, r3, #16
 801048c:	b292      	uxth	r2, r2
 801048e:	041b      	lsls	r3, r3, #16
 8010490:	4313      	orrs	r3, r2
 8010492:	c008      	stmia	r0!, {r3}
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	42a3      	cmp	r3, r4
 8010498:	d2ec      	bcs.n	8010474 <quorem+0xb0>
 801049a:	9b01      	ldr	r3, [sp, #4]
 801049c:	9a03      	ldr	r2, [sp, #12]
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	18d3      	adds	r3, r2, r3
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	d015      	beq.n	80104d4 <quorem+0x110>
 80104a8:	9802      	ldr	r0, [sp, #8]
 80104aa:	b009      	add	sp, #36	; 0x24
 80104ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d106      	bne.n	80104c2 <quorem+0xfe>
 80104b4:	9b01      	ldr	r3, [sp, #4]
 80104b6:	3b01      	subs	r3, #1
 80104b8:	9301      	str	r3, [sp, #4]
 80104ba:	9b03      	ldr	r3, [sp, #12]
 80104bc:	3c04      	subs	r4, #4
 80104be:	42a3      	cmp	r3, r4
 80104c0:	d3f5      	bcc.n	80104ae <quorem+0xea>
 80104c2:	9b01      	ldr	r3, [sp, #4]
 80104c4:	613b      	str	r3, [r7, #16]
 80104c6:	e7c7      	b.n	8010458 <quorem+0x94>
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	d106      	bne.n	80104dc <quorem+0x118>
 80104ce:	9a01      	ldr	r2, [sp, #4]
 80104d0:	3a01      	subs	r2, #1
 80104d2:	9201      	str	r2, [sp, #4]
 80104d4:	9a03      	ldr	r2, [sp, #12]
 80104d6:	3b04      	subs	r3, #4
 80104d8:	429a      	cmp	r2, r3
 80104da:	d3f5      	bcc.n	80104c8 <quorem+0x104>
 80104dc:	9b01      	ldr	r3, [sp, #4]
 80104de:	613b      	str	r3, [r7, #16]
 80104e0:	e7e2      	b.n	80104a8 <quorem+0xe4>
	...

080104e4 <_dtoa_r>:
 80104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e6:	0014      	movs	r4, r2
 80104e8:	001d      	movs	r5, r3
 80104ea:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80104ec:	b09d      	sub	sp, #116	; 0x74
 80104ee:	9408      	str	r4, [sp, #32]
 80104f0:	9509      	str	r5, [sp, #36]	; 0x24
 80104f2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80104f4:	9004      	str	r0, [sp, #16]
 80104f6:	2900      	cmp	r1, #0
 80104f8:	d009      	beq.n	801050e <_dtoa_r+0x2a>
 80104fa:	2301      	movs	r3, #1
 80104fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80104fe:	4093      	lsls	r3, r2
 8010500:	604a      	str	r2, [r1, #4]
 8010502:	608b      	str	r3, [r1, #8]
 8010504:	f7fc fc56 	bl	800cdb4 <_Bfree>
 8010508:	2300      	movs	r3, #0
 801050a:	9a04      	ldr	r2, [sp, #16]
 801050c:	6393      	str	r3, [r2, #56]	; 0x38
 801050e:	2d00      	cmp	r5, #0
 8010510:	da1e      	bge.n	8010550 <_dtoa_r+0x6c>
 8010512:	2301      	movs	r3, #1
 8010514:	6033      	str	r3, [r6, #0]
 8010516:	006b      	lsls	r3, r5, #1
 8010518:	085b      	lsrs	r3, r3, #1
 801051a:	9309      	str	r3, [sp, #36]	; 0x24
 801051c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801051e:	4bb5      	ldr	r3, [pc, #724]	; (80107f4 <_dtoa_r+0x310>)
 8010520:	4ab4      	ldr	r2, [pc, #720]	; (80107f4 <_dtoa_r+0x310>)
 8010522:	403b      	ands	r3, r7
 8010524:	4293      	cmp	r3, r2
 8010526:	d116      	bne.n	8010556 <_dtoa_r+0x72>
 8010528:	4bb3      	ldr	r3, [pc, #716]	; (80107f8 <_dtoa_r+0x314>)
 801052a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	033b      	lsls	r3, r7, #12
 8010530:	0b1b      	lsrs	r3, r3, #12
 8010532:	4323      	orrs	r3, r4
 8010534:	d101      	bne.n	801053a <_dtoa_r+0x56>
 8010536:	f000 fdb2 	bl	801109e <_dtoa_r+0xbba>
 801053a:	4bb0      	ldr	r3, [pc, #704]	; (80107fc <_dtoa_r+0x318>)
 801053c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801053e:	9306      	str	r3, [sp, #24]
 8010540:	2a00      	cmp	r2, #0
 8010542:	d002      	beq.n	801054a <_dtoa_r+0x66>
 8010544:	4bae      	ldr	r3, [pc, #696]	; (8010800 <_dtoa_r+0x31c>)
 8010546:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010548:	6013      	str	r3, [r2, #0]
 801054a:	9806      	ldr	r0, [sp, #24]
 801054c:	b01d      	add	sp, #116	; 0x74
 801054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010550:	2300      	movs	r3, #0
 8010552:	6033      	str	r3, [r6, #0]
 8010554:	e7e2      	b.n	801051c <_dtoa_r+0x38>
 8010556:	9a08      	ldr	r2, [sp, #32]
 8010558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801055a:	9210      	str	r2, [sp, #64]	; 0x40
 801055c:	9311      	str	r3, [sp, #68]	; 0x44
 801055e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010560:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010562:	2200      	movs	r2, #0
 8010564:	2300      	movs	r3, #0
 8010566:	f7ef ff6f 	bl	8000448 <__aeabi_dcmpeq>
 801056a:	1e06      	subs	r6, r0, #0
 801056c:	d009      	beq.n	8010582 <_dtoa_r+0x9e>
 801056e:	2301      	movs	r3, #1
 8010570:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010572:	6013      	str	r3, [r2, #0]
 8010574:	4ba3      	ldr	r3, [pc, #652]	; (8010804 <_dtoa_r+0x320>)
 8010576:	9306      	str	r3, [sp, #24]
 8010578:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801057a:	2b00      	cmp	r3, #0
 801057c:	d0e5      	beq.n	801054a <_dtoa_r+0x66>
 801057e:	4ba2      	ldr	r3, [pc, #648]	; (8010808 <_dtoa_r+0x324>)
 8010580:	e7e1      	b.n	8010546 <_dtoa_r+0x62>
 8010582:	ab1a      	add	r3, sp, #104	; 0x68
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	ab1b      	add	r3, sp, #108	; 0x6c
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	9804      	ldr	r0, [sp, #16]
 801058c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801058e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010590:	f7fc ff86 	bl	800d4a0 <__d2b>
 8010594:	007a      	lsls	r2, r7, #1
 8010596:	9005      	str	r0, [sp, #20]
 8010598:	0d52      	lsrs	r2, r2, #21
 801059a:	d100      	bne.n	801059e <_dtoa_r+0xba>
 801059c:	e07b      	b.n	8010696 <_dtoa_r+0x1b2>
 801059e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105a0:	9617      	str	r6, [sp, #92]	; 0x5c
 80105a2:	0319      	lsls	r1, r3, #12
 80105a4:	4b99      	ldr	r3, [pc, #612]	; (801080c <_dtoa_r+0x328>)
 80105a6:	0b09      	lsrs	r1, r1, #12
 80105a8:	430b      	orrs	r3, r1
 80105aa:	4999      	ldr	r1, [pc, #612]	; (8010810 <_dtoa_r+0x32c>)
 80105ac:	1857      	adds	r7, r2, r1
 80105ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80105b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80105b2:	0019      	movs	r1, r3
 80105b4:	2200      	movs	r2, #0
 80105b6:	4b97      	ldr	r3, [pc, #604]	; (8010814 <_dtoa_r+0x330>)
 80105b8:	f7f1 fb1a 	bl	8001bf0 <__aeabi_dsub>
 80105bc:	4a96      	ldr	r2, [pc, #600]	; (8010818 <_dtoa_r+0x334>)
 80105be:	4b97      	ldr	r3, [pc, #604]	; (801081c <_dtoa_r+0x338>)
 80105c0:	f7f1 f854 	bl	800166c <__aeabi_dmul>
 80105c4:	4a96      	ldr	r2, [pc, #600]	; (8010820 <_dtoa_r+0x33c>)
 80105c6:	4b97      	ldr	r3, [pc, #604]	; (8010824 <_dtoa_r+0x340>)
 80105c8:	f7f0 f8f6 	bl	80007b8 <__aeabi_dadd>
 80105cc:	0004      	movs	r4, r0
 80105ce:	0038      	movs	r0, r7
 80105d0:	000d      	movs	r5, r1
 80105d2:	f7f1 fee3 	bl	800239c <__aeabi_i2d>
 80105d6:	4a94      	ldr	r2, [pc, #592]	; (8010828 <_dtoa_r+0x344>)
 80105d8:	4b94      	ldr	r3, [pc, #592]	; (801082c <_dtoa_r+0x348>)
 80105da:	f7f1 f847 	bl	800166c <__aeabi_dmul>
 80105de:	0002      	movs	r2, r0
 80105e0:	000b      	movs	r3, r1
 80105e2:	0020      	movs	r0, r4
 80105e4:	0029      	movs	r1, r5
 80105e6:	f7f0 f8e7 	bl	80007b8 <__aeabi_dadd>
 80105ea:	0004      	movs	r4, r0
 80105ec:	000d      	movs	r5, r1
 80105ee:	f7f1 fe9f 	bl	8002330 <__aeabi_d2iz>
 80105f2:	2200      	movs	r2, #0
 80105f4:	9003      	str	r0, [sp, #12]
 80105f6:	2300      	movs	r3, #0
 80105f8:	0020      	movs	r0, r4
 80105fa:	0029      	movs	r1, r5
 80105fc:	f7ef ff2a 	bl	8000454 <__aeabi_dcmplt>
 8010600:	2800      	cmp	r0, #0
 8010602:	d00b      	beq.n	801061c <_dtoa_r+0x138>
 8010604:	9803      	ldr	r0, [sp, #12]
 8010606:	f7f1 fec9 	bl	800239c <__aeabi_i2d>
 801060a:	002b      	movs	r3, r5
 801060c:	0022      	movs	r2, r4
 801060e:	f7ef ff1b 	bl	8000448 <__aeabi_dcmpeq>
 8010612:	4243      	negs	r3, r0
 8010614:	4158      	adcs	r0, r3
 8010616:	9b03      	ldr	r3, [sp, #12]
 8010618:	1a1b      	subs	r3, r3, r0
 801061a:	9303      	str	r3, [sp, #12]
 801061c:	2301      	movs	r3, #1
 801061e:	9316      	str	r3, [sp, #88]	; 0x58
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	2b16      	cmp	r3, #22
 8010624:	d810      	bhi.n	8010648 <_dtoa_r+0x164>
 8010626:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010628:	9911      	ldr	r1, [sp, #68]	; 0x44
 801062a:	9a03      	ldr	r2, [sp, #12]
 801062c:	4b80      	ldr	r3, [pc, #512]	; (8010830 <_dtoa_r+0x34c>)
 801062e:	00d2      	lsls	r2, r2, #3
 8010630:	189b      	adds	r3, r3, r2
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f7ef ff0d 	bl	8000454 <__aeabi_dcmplt>
 801063a:	2800      	cmp	r0, #0
 801063c:	d047      	beq.n	80106ce <_dtoa_r+0x1ea>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	3b01      	subs	r3, #1
 8010642:	9303      	str	r3, [sp, #12]
 8010644:	2300      	movs	r3, #0
 8010646:	9316      	str	r3, [sp, #88]	; 0x58
 8010648:	2200      	movs	r2, #0
 801064a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801064c:	920a      	str	r2, [sp, #40]	; 0x28
 801064e:	1bdb      	subs	r3, r3, r7
 8010650:	1e5a      	subs	r2, r3, #1
 8010652:	d53e      	bpl.n	80106d2 <_dtoa_r+0x1ee>
 8010654:	2201      	movs	r2, #1
 8010656:	1ad3      	subs	r3, r2, r3
 8010658:	930a      	str	r3, [sp, #40]	; 0x28
 801065a:	2300      	movs	r3, #0
 801065c:	930c      	str	r3, [sp, #48]	; 0x30
 801065e:	9b03      	ldr	r3, [sp, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	db38      	blt.n	80106d6 <_dtoa_r+0x1f2>
 8010664:	9a03      	ldr	r2, [sp, #12]
 8010666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010668:	4694      	mov	ip, r2
 801066a:	4463      	add	r3, ip
 801066c:	930c      	str	r3, [sp, #48]	; 0x30
 801066e:	2300      	movs	r3, #0
 8010670:	9213      	str	r2, [sp, #76]	; 0x4c
 8010672:	930d      	str	r3, [sp, #52]	; 0x34
 8010674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010676:	2401      	movs	r4, #1
 8010678:	2b09      	cmp	r3, #9
 801067a:	d867      	bhi.n	801074c <_dtoa_r+0x268>
 801067c:	2b05      	cmp	r3, #5
 801067e:	dd02      	ble.n	8010686 <_dtoa_r+0x1a2>
 8010680:	2400      	movs	r4, #0
 8010682:	3b04      	subs	r3, #4
 8010684:	9322      	str	r3, [sp, #136]	; 0x88
 8010686:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010688:	1e98      	subs	r0, r3, #2
 801068a:	2803      	cmp	r0, #3
 801068c:	d867      	bhi.n	801075e <_dtoa_r+0x27a>
 801068e:	f7ef fd41 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010692:	3a2b      	.short	0x3a2b
 8010694:	5b38      	.short	0x5b38
 8010696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010698:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801069a:	18f6      	adds	r6, r6, r3
 801069c:	4b65      	ldr	r3, [pc, #404]	; (8010834 <_dtoa_r+0x350>)
 801069e:	18f2      	adds	r2, r6, r3
 80106a0:	2a20      	cmp	r2, #32
 80106a2:	dd0f      	ble.n	80106c4 <_dtoa_r+0x1e0>
 80106a4:	2340      	movs	r3, #64	; 0x40
 80106a6:	1a9b      	subs	r3, r3, r2
 80106a8:	409f      	lsls	r7, r3
 80106aa:	4b63      	ldr	r3, [pc, #396]	; (8010838 <_dtoa_r+0x354>)
 80106ac:	0038      	movs	r0, r7
 80106ae:	18f3      	adds	r3, r6, r3
 80106b0:	40dc      	lsrs	r4, r3
 80106b2:	4320      	orrs	r0, r4
 80106b4:	f7f1 fea2 	bl	80023fc <__aeabi_ui2d>
 80106b8:	2201      	movs	r2, #1
 80106ba:	4b60      	ldr	r3, [pc, #384]	; (801083c <_dtoa_r+0x358>)
 80106bc:	1e77      	subs	r7, r6, #1
 80106be:	18cb      	adds	r3, r1, r3
 80106c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80106c2:	e776      	b.n	80105b2 <_dtoa_r+0xce>
 80106c4:	2320      	movs	r3, #32
 80106c6:	0020      	movs	r0, r4
 80106c8:	1a9b      	subs	r3, r3, r2
 80106ca:	4098      	lsls	r0, r3
 80106cc:	e7f2      	b.n	80106b4 <_dtoa_r+0x1d0>
 80106ce:	9016      	str	r0, [sp, #88]	; 0x58
 80106d0:	e7ba      	b.n	8010648 <_dtoa_r+0x164>
 80106d2:	920c      	str	r2, [sp, #48]	; 0x30
 80106d4:	e7c3      	b.n	801065e <_dtoa_r+0x17a>
 80106d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d8:	9a03      	ldr	r2, [sp, #12]
 80106da:	1a9b      	subs	r3, r3, r2
 80106dc:	930a      	str	r3, [sp, #40]	; 0x28
 80106de:	4253      	negs	r3, r2
 80106e0:	930d      	str	r3, [sp, #52]	; 0x34
 80106e2:	2300      	movs	r3, #0
 80106e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80106e6:	e7c5      	b.n	8010674 <_dtoa_r+0x190>
 80106e8:	2300      	movs	r3, #0
 80106ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80106ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80106ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80106f0:	9307      	str	r3, [sp, #28]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	dc13      	bgt.n	801071e <_dtoa_r+0x23a>
 80106f6:	2301      	movs	r3, #1
 80106f8:	001a      	movs	r2, r3
 80106fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80106fc:	9307      	str	r3, [sp, #28]
 80106fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8010700:	e00d      	b.n	801071e <_dtoa_r+0x23a>
 8010702:	2301      	movs	r3, #1
 8010704:	e7f1      	b.n	80106ea <_dtoa_r+0x206>
 8010706:	2300      	movs	r3, #0
 8010708:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801070a:	930f      	str	r3, [sp, #60]	; 0x3c
 801070c:	4694      	mov	ip, r2
 801070e:	9b03      	ldr	r3, [sp, #12]
 8010710:	4463      	add	r3, ip
 8010712:	930b      	str	r3, [sp, #44]	; 0x2c
 8010714:	3301      	adds	r3, #1
 8010716:	9307      	str	r3, [sp, #28]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dc00      	bgt.n	801071e <_dtoa_r+0x23a>
 801071c:	2301      	movs	r3, #1
 801071e:	2100      	movs	r1, #0
 8010720:	2204      	movs	r2, #4
 8010722:	0010      	movs	r0, r2
 8010724:	3014      	adds	r0, #20
 8010726:	4298      	cmp	r0, r3
 8010728:	d91d      	bls.n	8010766 <_dtoa_r+0x282>
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	0018      	movs	r0, r3
 801072e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010730:	f7fc fb18 	bl	800cd64 <_Balloc>
 8010734:	9006      	str	r0, [sp, #24]
 8010736:	2800      	cmp	r0, #0
 8010738:	d118      	bne.n	801076c <_dtoa_r+0x288>
 801073a:	21b0      	movs	r1, #176	; 0xb0
 801073c:	4b40      	ldr	r3, [pc, #256]	; (8010840 <_dtoa_r+0x35c>)
 801073e:	4841      	ldr	r0, [pc, #260]	; (8010844 <_dtoa_r+0x360>)
 8010740:	9a06      	ldr	r2, [sp, #24]
 8010742:	31ff      	adds	r1, #255	; 0xff
 8010744:	f7ff fdd2 	bl	80102ec <__assert_func>
 8010748:	2301      	movs	r3, #1
 801074a:	e7dd      	b.n	8010708 <_dtoa_r+0x224>
 801074c:	2300      	movs	r3, #0
 801074e:	940f      	str	r4, [sp, #60]	; 0x3c
 8010750:	9322      	str	r3, [sp, #136]	; 0x88
 8010752:	3b01      	subs	r3, #1
 8010754:	930b      	str	r3, [sp, #44]	; 0x2c
 8010756:	9307      	str	r3, [sp, #28]
 8010758:	2200      	movs	r2, #0
 801075a:	3313      	adds	r3, #19
 801075c:	e7cf      	b.n	80106fe <_dtoa_r+0x21a>
 801075e:	2301      	movs	r3, #1
 8010760:	930f      	str	r3, [sp, #60]	; 0x3c
 8010762:	3b02      	subs	r3, #2
 8010764:	e7f6      	b.n	8010754 <_dtoa_r+0x270>
 8010766:	3101      	adds	r1, #1
 8010768:	0052      	lsls	r2, r2, #1
 801076a:	e7da      	b.n	8010722 <_dtoa_r+0x23e>
 801076c:	9b04      	ldr	r3, [sp, #16]
 801076e:	9a06      	ldr	r2, [sp, #24]
 8010770:	639a      	str	r2, [r3, #56]	; 0x38
 8010772:	9b07      	ldr	r3, [sp, #28]
 8010774:	2b0e      	cmp	r3, #14
 8010776:	d900      	bls.n	801077a <_dtoa_r+0x296>
 8010778:	e0e3      	b.n	8010942 <_dtoa_r+0x45e>
 801077a:	2c00      	cmp	r4, #0
 801077c:	d100      	bne.n	8010780 <_dtoa_r+0x29c>
 801077e:	e0e0      	b.n	8010942 <_dtoa_r+0x45e>
 8010780:	9b03      	ldr	r3, [sp, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	dd62      	ble.n	801084c <_dtoa_r+0x368>
 8010786:	210f      	movs	r1, #15
 8010788:	9a03      	ldr	r2, [sp, #12]
 801078a:	4b29      	ldr	r3, [pc, #164]	; (8010830 <_dtoa_r+0x34c>)
 801078c:	400a      	ands	r2, r1
 801078e:	00d2      	lsls	r2, r2, #3
 8010790:	189b      	adds	r3, r3, r2
 8010792:	681e      	ldr	r6, [r3, #0]
 8010794:	685f      	ldr	r7, [r3, #4]
 8010796:	9b03      	ldr	r3, [sp, #12]
 8010798:	2402      	movs	r4, #2
 801079a:	111d      	asrs	r5, r3, #4
 801079c:	05db      	lsls	r3, r3, #23
 801079e:	d50a      	bpl.n	80107b6 <_dtoa_r+0x2d2>
 80107a0:	4b29      	ldr	r3, [pc, #164]	; (8010848 <_dtoa_r+0x364>)
 80107a2:	400d      	ands	r5, r1
 80107a4:	6a1a      	ldr	r2, [r3, #32]
 80107a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80107aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80107ac:	f7f0 fb64 	bl	8000e78 <__aeabi_ddiv>
 80107b0:	9008      	str	r0, [sp, #32]
 80107b2:	9109      	str	r1, [sp, #36]	; 0x24
 80107b4:	3401      	adds	r4, #1
 80107b6:	4b24      	ldr	r3, [pc, #144]	; (8010848 <_dtoa_r+0x364>)
 80107b8:	930e      	str	r3, [sp, #56]	; 0x38
 80107ba:	2d00      	cmp	r5, #0
 80107bc:	d108      	bne.n	80107d0 <_dtoa_r+0x2ec>
 80107be:	9808      	ldr	r0, [sp, #32]
 80107c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107c2:	0032      	movs	r2, r6
 80107c4:	003b      	movs	r3, r7
 80107c6:	f7f0 fb57 	bl	8000e78 <__aeabi_ddiv>
 80107ca:	9008      	str	r0, [sp, #32]
 80107cc:	9109      	str	r1, [sp, #36]	; 0x24
 80107ce:	e058      	b.n	8010882 <_dtoa_r+0x39e>
 80107d0:	2301      	movs	r3, #1
 80107d2:	421d      	tst	r5, r3
 80107d4:	d009      	beq.n	80107ea <_dtoa_r+0x306>
 80107d6:	18e4      	adds	r4, r4, r3
 80107d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107da:	0030      	movs	r0, r6
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	0039      	movs	r1, r7
 80107e2:	f7f0 ff43 	bl	800166c <__aeabi_dmul>
 80107e6:	0006      	movs	r6, r0
 80107e8:	000f      	movs	r7, r1
 80107ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107ec:	106d      	asrs	r5, r5, #1
 80107ee:	3308      	adds	r3, #8
 80107f0:	e7e2      	b.n	80107b8 <_dtoa_r+0x2d4>
 80107f2:	46c0      	nop			; (mov r8, r8)
 80107f4:	7ff00000 	.word	0x7ff00000
 80107f8:	0000270f 	.word	0x0000270f
 80107fc:	08014ca5 	.word	0x08014ca5
 8010800:	08014ca8 	.word	0x08014ca8
 8010804:	08014c16 	.word	0x08014c16
 8010808:	08014c17 	.word	0x08014c17
 801080c:	3ff00000 	.word	0x3ff00000
 8010810:	fffffc01 	.word	0xfffffc01
 8010814:	3ff80000 	.word	0x3ff80000
 8010818:	636f4361 	.word	0x636f4361
 801081c:	3fd287a7 	.word	0x3fd287a7
 8010820:	8b60c8b3 	.word	0x8b60c8b3
 8010824:	3fc68a28 	.word	0x3fc68a28
 8010828:	509f79fb 	.word	0x509f79fb
 801082c:	3fd34413 	.word	0x3fd34413
 8010830:	08014b10 	.word	0x08014b10
 8010834:	00000432 	.word	0x00000432
 8010838:	00000412 	.word	0x00000412
 801083c:	fe100000 	.word	0xfe100000
 8010840:	08014a19 	.word	0x08014a19
 8010844:	08014ca9 	.word	0x08014ca9
 8010848:	08014ae8 	.word	0x08014ae8
 801084c:	9b03      	ldr	r3, [sp, #12]
 801084e:	2402      	movs	r4, #2
 8010850:	2b00      	cmp	r3, #0
 8010852:	d016      	beq.n	8010882 <_dtoa_r+0x39e>
 8010854:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010856:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010858:	220f      	movs	r2, #15
 801085a:	425d      	negs	r5, r3
 801085c:	402a      	ands	r2, r5
 801085e:	4bdd      	ldr	r3, [pc, #884]	; (8010bd4 <_dtoa_r+0x6f0>)
 8010860:	00d2      	lsls	r2, r2, #3
 8010862:	189b      	adds	r3, r3, r2
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	f7f0 ff00 	bl	800166c <__aeabi_dmul>
 801086c:	2701      	movs	r7, #1
 801086e:	2300      	movs	r3, #0
 8010870:	9008      	str	r0, [sp, #32]
 8010872:	9109      	str	r1, [sp, #36]	; 0x24
 8010874:	4ed8      	ldr	r6, [pc, #864]	; (8010bd8 <_dtoa_r+0x6f4>)
 8010876:	112d      	asrs	r5, r5, #4
 8010878:	2d00      	cmp	r5, #0
 801087a:	d000      	beq.n	801087e <_dtoa_r+0x39a>
 801087c:	e091      	b.n	80109a2 <_dtoa_r+0x4be>
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1a3      	bne.n	80107ca <_dtoa_r+0x2e6>
 8010882:	9e08      	ldr	r6, [sp, #32]
 8010884:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010888:	2b00      	cmp	r3, #0
 801088a:	d100      	bne.n	801088e <_dtoa_r+0x3aa>
 801088c:	e094      	b.n	80109b8 <_dtoa_r+0x4d4>
 801088e:	2200      	movs	r2, #0
 8010890:	0030      	movs	r0, r6
 8010892:	0039      	movs	r1, r7
 8010894:	4bd1      	ldr	r3, [pc, #836]	; (8010bdc <_dtoa_r+0x6f8>)
 8010896:	f7ef fddd 	bl	8000454 <__aeabi_dcmplt>
 801089a:	2800      	cmp	r0, #0
 801089c:	d100      	bne.n	80108a0 <_dtoa_r+0x3bc>
 801089e:	e08b      	b.n	80109b8 <_dtoa_r+0x4d4>
 80108a0:	9b07      	ldr	r3, [sp, #28]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d100      	bne.n	80108a8 <_dtoa_r+0x3c4>
 80108a6:	e087      	b.n	80109b8 <_dtoa_r+0x4d4>
 80108a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	dd45      	ble.n	801093a <_dtoa_r+0x456>
 80108ae:	9b03      	ldr	r3, [sp, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	3b01      	subs	r3, #1
 80108b4:	930e      	str	r3, [sp, #56]	; 0x38
 80108b6:	0030      	movs	r0, r6
 80108b8:	4bc9      	ldr	r3, [pc, #804]	; (8010be0 <_dtoa_r+0x6fc>)
 80108ba:	0039      	movs	r1, r7
 80108bc:	f7f0 fed6 	bl	800166c <__aeabi_dmul>
 80108c0:	9008      	str	r0, [sp, #32]
 80108c2:	9109      	str	r1, [sp, #36]	; 0x24
 80108c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c6:	3401      	adds	r4, #1
 80108c8:	0020      	movs	r0, r4
 80108ca:	9e08      	ldr	r6, [sp, #32]
 80108cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80108ce:	9312      	str	r3, [sp, #72]	; 0x48
 80108d0:	f7f1 fd64 	bl	800239c <__aeabi_i2d>
 80108d4:	0032      	movs	r2, r6
 80108d6:	003b      	movs	r3, r7
 80108d8:	f7f0 fec8 	bl	800166c <__aeabi_dmul>
 80108dc:	2200      	movs	r2, #0
 80108de:	4bc1      	ldr	r3, [pc, #772]	; (8010be4 <_dtoa_r+0x700>)
 80108e0:	f7ef ff6a 	bl	80007b8 <__aeabi_dadd>
 80108e4:	4ac0      	ldr	r2, [pc, #768]	; (8010be8 <_dtoa_r+0x704>)
 80108e6:	9014      	str	r0, [sp, #80]	; 0x50
 80108e8:	9115      	str	r1, [sp, #84]	; 0x54
 80108ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80108ee:	4694      	mov	ip, r2
 80108f0:	9308      	str	r3, [sp, #32]
 80108f2:	9409      	str	r4, [sp, #36]	; 0x24
 80108f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108f6:	4463      	add	r3, ip
 80108f8:	9318      	str	r3, [sp, #96]	; 0x60
 80108fa:	9309      	str	r3, [sp, #36]	; 0x24
 80108fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d15e      	bne.n	80109c0 <_dtoa_r+0x4dc>
 8010902:	2200      	movs	r2, #0
 8010904:	4bb9      	ldr	r3, [pc, #740]	; (8010bec <_dtoa_r+0x708>)
 8010906:	0030      	movs	r0, r6
 8010908:	0039      	movs	r1, r7
 801090a:	f7f1 f971 	bl	8001bf0 <__aeabi_dsub>
 801090e:	9a08      	ldr	r2, [sp, #32]
 8010910:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010912:	0004      	movs	r4, r0
 8010914:	000d      	movs	r5, r1
 8010916:	f7ef fdb1 	bl	800047c <__aeabi_dcmpgt>
 801091a:	2800      	cmp	r0, #0
 801091c:	d000      	beq.n	8010920 <_dtoa_r+0x43c>
 801091e:	e2b3      	b.n	8010e88 <_dtoa_r+0x9a4>
 8010920:	48b3      	ldr	r0, [pc, #716]	; (8010bf0 <_dtoa_r+0x70c>)
 8010922:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010924:	4684      	mov	ip, r0
 8010926:	4461      	add	r1, ip
 8010928:	000b      	movs	r3, r1
 801092a:	0020      	movs	r0, r4
 801092c:	0029      	movs	r1, r5
 801092e:	9a08      	ldr	r2, [sp, #32]
 8010930:	f7ef fd90 	bl	8000454 <__aeabi_dcmplt>
 8010934:	2800      	cmp	r0, #0
 8010936:	d000      	beq.n	801093a <_dtoa_r+0x456>
 8010938:	e2a3      	b.n	8010e82 <_dtoa_r+0x99e>
 801093a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801093c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801093e:	9308      	str	r3, [sp, #32]
 8010940:	9409      	str	r4, [sp, #36]	; 0x24
 8010942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010944:	2b00      	cmp	r3, #0
 8010946:	da00      	bge.n	801094a <_dtoa_r+0x466>
 8010948:	e179      	b.n	8010c3e <_dtoa_r+0x75a>
 801094a:	9a03      	ldr	r2, [sp, #12]
 801094c:	2a0e      	cmp	r2, #14
 801094e:	dd00      	ble.n	8010952 <_dtoa_r+0x46e>
 8010950:	e175      	b.n	8010c3e <_dtoa_r+0x75a>
 8010952:	4ba0      	ldr	r3, [pc, #640]	; (8010bd4 <_dtoa_r+0x6f0>)
 8010954:	00d2      	lsls	r2, r2, #3
 8010956:	189b      	adds	r3, r3, r2
 8010958:	681e      	ldr	r6, [r3, #0]
 801095a:	685f      	ldr	r7, [r3, #4]
 801095c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801095e:	2b00      	cmp	r3, #0
 8010960:	db00      	blt.n	8010964 <_dtoa_r+0x480>
 8010962:	e0e5      	b.n	8010b30 <_dtoa_r+0x64c>
 8010964:	9b07      	ldr	r3, [sp, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	dd00      	ble.n	801096c <_dtoa_r+0x488>
 801096a:	e0e1      	b.n	8010b30 <_dtoa_r+0x64c>
 801096c:	d000      	beq.n	8010970 <_dtoa_r+0x48c>
 801096e:	e288      	b.n	8010e82 <_dtoa_r+0x99e>
 8010970:	2200      	movs	r2, #0
 8010972:	0030      	movs	r0, r6
 8010974:	0039      	movs	r1, r7
 8010976:	4b9d      	ldr	r3, [pc, #628]	; (8010bec <_dtoa_r+0x708>)
 8010978:	f7f0 fe78 	bl	800166c <__aeabi_dmul>
 801097c:	9a08      	ldr	r2, [sp, #32]
 801097e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010980:	f7ef fd86 	bl	8000490 <__aeabi_dcmpge>
 8010984:	9e07      	ldr	r6, [sp, #28]
 8010986:	0037      	movs	r7, r6
 8010988:	2800      	cmp	r0, #0
 801098a:	d000      	beq.n	801098e <_dtoa_r+0x4aa>
 801098c:	e25f      	b.n	8010e4e <_dtoa_r+0x96a>
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	9a06      	ldr	r2, [sp, #24]
 8010992:	3301      	adds	r3, #1
 8010994:	9308      	str	r3, [sp, #32]
 8010996:	2331      	movs	r3, #49	; 0x31
 8010998:	7013      	strb	r3, [r2, #0]
 801099a:	9b03      	ldr	r3, [sp, #12]
 801099c:	3301      	adds	r3, #1
 801099e:	9303      	str	r3, [sp, #12]
 80109a0:	e25a      	b.n	8010e58 <_dtoa_r+0x974>
 80109a2:	423d      	tst	r5, r7
 80109a4:	d005      	beq.n	80109b2 <_dtoa_r+0x4ce>
 80109a6:	6832      	ldr	r2, [r6, #0]
 80109a8:	6873      	ldr	r3, [r6, #4]
 80109aa:	f7f0 fe5f 	bl	800166c <__aeabi_dmul>
 80109ae:	003b      	movs	r3, r7
 80109b0:	3401      	adds	r4, #1
 80109b2:	106d      	asrs	r5, r5, #1
 80109b4:	3608      	adds	r6, #8
 80109b6:	e75f      	b.n	8010878 <_dtoa_r+0x394>
 80109b8:	9b03      	ldr	r3, [sp, #12]
 80109ba:	930e      	str	r3, [sp, #56]	; 0x38
 80109bc:	9b07      	ldr	r3, [sp, #28]
 80109be:	e783      	b.n	80108c8 <_dtoa_r+0x3e4>
 80109c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80109c2:	4b84      	ldr	r3, [pc, #528]	; (8010bd4 <_dtoa_r+0x6f0>)
 80109c4:	3a01      	subs	r2, #1
 80109c6:	00d2      	lsls	r2, r2, #3
 80109c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109ca:	189b      	adds	r3, r3, r2
 80109cc:	9c08      	ldr	r4, [sp, #32]
 80109ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	2900      	cmp	r1, #0
 80109d6:	d051      	beq.n	8010a7c <_dtoa_r+0x598>
 80109d8:	2000      	movs	r0, #0
 80109da:	4986      	ldr	r1, [pc, #536]	; (8010bf4 <_dtoa_r+0x710>)
 80109dc:	f7f0 fa4c 	bl	8000e78 <__aeabi_ddiv>
 80109e0:	0022      	movs	r2, r4
 80109e2:	002b      	movs	r3, r5
 80109e4:	f7f1 f904 	bl	8001bf0 <__aeabi_dsub>
 80109e8:	9a06      	ldr	r2, [sp, #24]
 80109ea:	0004      	movs	r4, r0
 80109ec:	4694      	mov	ip, r2
 80109ee:	000d      	movs	r5, r1
 80109f0:	9b06      	ldr	r3, [sp, #24]
 80109f2:	9314      	str	r3, [sp, #80]	; 0x50
 80109f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109f6:	4463      	add	r3, ip
 80109f8:	9318      	str	r3, [sp, #96]	; 0x60
 80109fa:	0039      	movs	r1, r7
 80109fc:	0030      	movs	r0, r6
 80109fe:	f7f1 fc97 	bl	8002330 <__aeabi_d2iz>
 8010a02:	9012      	str	r0, [sp, #72]	; 0x48
 8010a04:	f7f1 fcca 	bl	800239c <__aeabi_i2d>
 8010a08:	0002      	movs	r2, r0
 8010a0a:	000b      	movs	r3, r1
 8010a0c:	0030      	movs	r0, r6
 8010a0e:	0039      	movs	r1, r7
 8010a10:	f7f1 f8ee 	bl	8001bf0 <__aeabi_dsub>
 8010a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a18:	3301      	adds	r3, #1
 8010a1a:	9308      	str	r3, [sp, #32]
 8010a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a1e:	0006      	movs	r6, r0
 8010a20:	3330      	adds	r3, #48	; 0x30
 8010a22:	7013      	strb	r3, [r2, #0]
 8010a24:	0022      	movs	r2, r4
 8010a26:	002b      	movs	r3, r5
 8010a28:	000f      	movs	r7, r1
 8010a2a:	f7ef fd13 	bl	8000454 <__aeabi_dcmplt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d174      	bne.n	8010b1c <_dtoa_r+0x638>
 8010a32:	0032      	movs	r2, r6
 8010a34:	003b      	movs	r3, r7
 8010a36:	2000      	movs	r0, #0
 8010a38:	4968      	ldr	r1, [pc, #416]	; (8010bdc <_dtoa_r+0x6f8>)
 8010a3a:	f7f1 f8d9 	bl	8001bf0 <__aeabi_dsub>
 8010a3e:	0022      	movs	r2, r4
 8010a40:	002b      	movs	r3, r5
 8010a42:	f7ef fd07 	bl	8000454 <__aeabi_dcmplt>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d000      	beq.n	8010a4c <_dtoa_r+0x568>
 8010a4a:	e0d7      	b.n	8010bfc <_dtoa_r+0x718>
 8010a4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a4e:	9a08      	ldr	r2, [sp, #32]
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d100      	bne.n	8010a56 <_dtoa_r+0x572>
 8010a54:	e771      	b.n	801093a <_dtoa_r+0x456>
 8010a56:	2200      	movs	r2, #0
 8010a58:	0020      	movs	r0, r4
 8010a5a:	0029      	movs	r1, r5
 8010a5c:	4b60      	ldr	r3, [pc, #384]	; (8010be0 <_dtoa_r+0x6fc>)
 8010a5e:	f7f0 fe05 	bl	800166c <__aeabi_dmul>
 8010a62:	4b5f      	ldr	r3, [pc, #380]	; (8010be0 <_dtoa_r+0x6fc>)
 8010a64:	0004      	movs	r4, r0
 8010a66:	000d      	movs	r5, r1
 8010a68:	0030      	movs	r0, r6
 8010a6a:	0039      	movs	r1, r7
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f7f0 fdfd 	bl	800166c <__aeabi_dmul>
 8010a72:	9b08      	ldr	r3, [sp, #32]
 8010a74:	0006      	movs	r6, r0
 8010a76:	000f      	movs	r7, r1
 8010a78:	9314      	str	r3, [sp, #80]	; 0x50
 8010a7a:	e7be      	b.n	80109fa <_dtoa_r+0x516>
 8010a7c:	0020      	movs	r0, r4
 8010a7e:	0029      	movs	r1, r5
 8010a80:	f7f0 fdf4 	bl	800166c <__aeabi_dmul>
 8010a84:	9a06      	ldr	r2, [sp, #24]
 8010a86:	9b06      	ldr	r3, [sp, #24]
 8010a88:	4694      	mov	ip, r2
 8010a8a:	9308      	str	r3, [sp, #32]
 8010a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a8e:	9014      	str	r0, [sp, #80]	; 0x50
 8010a90:	9115      	str	r1, [sp, #84]	; 0x54
 8010a92:	4463      	add	r3, ip
 8010a94:	9319      	str	r3, [sp, #100]	; 0x64
 8010a96:	0030      	movs	r0, r6
 8010a98:	0039      	movs	r1, r7
 8010a9a:	f7f1 fc49 	bl	8002330 <__aeabi_d2iz>
 8010a9e:	9018      	str	r0, [sp, #96]	; 0x60
 8010aa0:	f7f1 fc7c 	bl	800239c <__aeabi_i2d>
 8010aa4:	0002      	movs	r2, r0
 8010aa6:	000b      	movs	r3, r1
 8010aa8:	0030      	movs	r0, r6
 8010aaa:	0039      	movs	r1, r7
 8010aac:	f7f1 f8a0 	bl	8001bf0 <__aeabi_dsub>
 8010ab0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010ab2:	9b08      	ldr	r3, [sp, #32]
 8010ab4:	3630      	adds	r6, #48	; 0x30
 8010ab6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010ab8:	701e      	strb	r6, [r3, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	0004      	movs	r4, r0
 8010abe:	000d      	movs	r5, r1
 8010ac0:	9308      	str	r3, [sp, #32]
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d12d      	bne.n	8010b22 <_dtoa_r+0x63e>
 8010ac6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010ac8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010aca:	9a06      	ldr	r2, [sp, #24]
 8010acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ace:	4694      	mov	ip, r2
 8010ad0:	4463      	add	r3, ip
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	9308      	str	r3, [sp, #32]
 8010ad6:	4b47      	ldr	r3, [pc, #284]	; (8010bf4 <_dtoa_r+0x710>)
 8010ad8:	f7ef fe6e 	bl	80007b8 <__aeabi_dadd>
 8010adc:	0002      	movs	r2, r0
 8010ade:	000b      	movs	r3, r1
 8010ae0:	0020      	movs	r0, r4
 8010ae2:	0029      	movs	r1, r5
 8010ae4:	f7ef fcca 	bl	800047c <__aeabi_dcmpgt>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	d000      	beq.n	8010aee <_dtoa_r+0x60a>
 8010aec:	e086      	b.n	8010bfc <_dtoa_r+0x718>
 8010aee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010af2:	2000      	movs	r0, #0
 8010af4:	493f      	ldr	r1, [pc, #252]	; (8010bf4 <_dtoa_r+0x710>)
 8010af6:	f7f1 f87b 	bl	8001bf0 <__aeabi_dsub>
 8010afa:	0002      	movs	r2, r0
 8010afc:	000b      	movs	r3, r1
 8010afe:	0020      	movs	r0, r4
 8010b00:	0029      	movs	r1, r5
 8010b02:	f7ef fca7 	bl	8000454 <__aeabi_dcmplt>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d100      	bne.n	8010b0c <_dtoa_r+0x628>
 8010b0a:	e716      	b.n	801093a <_dtoa_r+0x456>
 8010b0c:	9b08      	ldr	r3, [sp, #32]
 8010b0e:	001a      	movs	r2, r3
 8010b10:	3a01      	subs	r2, #1
 8010b12:	9208      	str	r2, [sp, #32]
 8010b14:	7812      	ldrb	r2, [r2, #0]
 8010b16:	2a30      	cmp	r2, #48	; 0x30
 8010b18:	d0f8      	beq.n	8010b0c <_dtoa_r+0x628>
 8010b1a:	9308      	str	r3, [sp, #32]
 8010b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b1e:	9303      	str	r3, [sp, #12]
 8010b20:	e046      	b.n	8010bb0 <_dtoa_r+0x6cc>
 8010b22:	2200      	movs	r2, #0
 8010b24:	4b2e      	ldr	r3, [pc, #184]	; (8010be0 <_dtoa_r+0x6fc>)
 8010b26:	f7f0 fda1 	bl	800166c <__aeabi_dmul>
 8010b2a:	0006      	movs	r6, r0
 8010b2c:	000f      	movs	r7, r1
 8010b2e:	e7b2      	b.n	8010a96 <_dtoa_r+0x5b2>
 8010b30:	9b06      	ldr	r3, [sp, #24]
 8010b32:	9a06      	ldr	r2, [sp, #24]
 8010b34:	930a      	str	r3, [sp, #40]	; 0x28
 8010b36:	9b07      	ldr	r3, [sp, #28]
 8010b38:	9c08      	ldr	r4, [sp, #32]
 8010b3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	189b      	adds	r3, r3, r2
 8010b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b42:	0032      	movs	r2, r6
 8010b44:	003b      	movs	r3, r7
 8010b46:	0020      	movs	r0, r4
 8010b48:	0029      	movs	r1, r5
 8010b4a:	f7f0 f995 	bl	8000e78 <__aeabi_ddiv>
 8010b4e:	f7f1 fbef 	bl	8002330 <__aeabi_d2iz>
 8010b52:	9007      	str	r0, [sp, #28]
 8010b54:	f7f1 fc22 	bl	800239c <__aeabi_i2d>
 8010b58:	0032      	movs	r2, r6
 8010b5a:	003b      	movs	r3, r7
 8010b5c:	f7f0 fd86 	bl	800166c <__aeabi_dmul>
 8010b60:	0002      	movs	r2, r0
 8010b62:	000b      	movs	r3, r1
 8010b64:	0020      	movs	r0, r4
 8010b66:	0029      	movs	r1, r5
 8010b68:	f7f1 f842 	bl	8001bf0 <__aeabi_dsub>
 8010b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b6e:	001a      	movs	r2, r3
 8010b70:	3201      	adds	r2, #1
 8010b72:	920a      	str	r2, [sp, #40]	; 0x28
 8010b74:	9208      	str	r2, [sp, #32]
 8010b76:	9a07      	ldr	r2, [sp, #28]
 8010b78:	3230      	adds	r2, #48	; 0x30
 8010b7a:	701a      	strb	r2, [r3, #0]
 8010b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d14f      	bne.n	8010c22 <_dtoa_r+0x73e>
 8010b82:	0002      	movs	r2, r0
 8010b84:	000b      	movs	r3, r1
 8010b86:	f7ef fe17 	bl	80007b8 <__aeabi_dadd>
 8010b8a:	0032      	movs	r2, r6
 8010b8c:	003b      	movs	r3, r7
 8010b8e:	0004      	movs	r4, r0
 8010b90:	000d      	movs	r5, r1
 8010b92:	f7ef fc73 	bl	800047c <__aeabi_dcmpgt>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d12e      	bne.n	8010bf8 <_dtoa_r+0x714>
 8010b9a:	0032      	movs	r2, r6
 8010b9c:	003b      	movs	r3, r7
 8010b9e:	0020      	movs	r0, r4
 8010ba0:	0029      	movs	r1, r5
 8010ba2:	f7ef fc51 	bl	8000448 <__aeabi_dcmpeq>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d002      	beq.n	8010bb0 <_dtoa_r+0x6cc>
 8010baa:	9b07      	ldr	r3, [sp, #28]
 8010bac:	07de      	lsls	r6, r3, #31
 8010bae:	d423      	bmi.n	8010bf8 <_dtoa_r+0x714>
 8010bb0:	9905      	ldr	r1, [sp, #20]
 8010bb2:	9804      	ldr	r0, [sp, #16]
 8010bb4:	f7fc f8fe 	bl	800cdb4 <_Bfree>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	9a08      	ldr	r2, [sp, #32]
 8010bbc:	7013      	strb	r3, [r2, #0]
 8010bbe:	9b03      	ldr	r3, [sp, #12]
 8010bc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	6013      	str	r3, [r2, #0]
 8010bc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d100      	bne.n	8010bce <_dtoa_r+0x6ea>
 8010bcc:	e4bd      	b.n	801054a <_dtoa_r+0x66>
 8010bce:	9a08      	ldr	r2, [sp, #32]
 8010bd0:	601a      	str	r2, [r3, #0]
 8010bd2:	e4ba      	b.n	801054a <_dtoa_r+0x66>
 8010bd4:	08014b10 	.word	0x08014b10
 8010bd8:	08014ae8 	.word	0x08014ae8
 8010bdc:	3ff00000 	.word	0x3ff00000
 8010be0:	40240000 	.word	0x40240000
 8010be4:	401c0000 	.word	0x401c0000
 8010be8:	fcc00000 	.word	0xfcc00000
 8010bec:	40140000 	.word	0x40140000
 8010bf0:	7cc00000 	.word	0x7cc00000
 8010bf4:	3fe00000 	.word	0x3fe00000
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8010bfc:	9b08      	ldr	r3, [sp, #32]
 8010bfe:	9308      	str	r3, [sp, #32]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	781a      	ldrb	r2, [r3, #0]
 8010c04:	2a39      	cmp	r2, #57	; 0x39
 8010c06:	d108      	bne.n	8010c1a <_dtoa_r+0x736>
 8010c08:	9a06      	ldr	r2, [sp, #24]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d1f7      	bne.n	8010bfe <_dtoa_r+0x71a>
 8010c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c10:	9906      	ldr	r1, [sp, #24]
 8010c12:	3201      	adds	r2, #1
 8010c14:	920e      	str	r2, [sp, #56]	; 0x38
 8010c16:	2230      	movs	r2, #48	; 0x30
 8010c18:	700a      	strb	r2, [r1, #0]
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	3201      	adds	r2, #1
 8010c1e:	701a      	strb	r2, [r3, #0]
 8010c20:	e77c      	b.n	8010b1c <_dtoa_r+0x638>
 8010c22:	2200      	movs	r2, #0
 8010c24:	4ba9      	ldr	r3, [pc, #676]	; (8010ecc <_dtoa_r+0x9e8>)
 8010c26:	f7f0 fd21 	bl	800166c <__aeabi_dmul>
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	0004      	movs	r4, r0
 8010c30:	000d      	movs	r5, r1
 8010c32:	f7ef fc09 	bl	8000448 <__aeabi_dcmpeq>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d100      	bne.n	8010c3c <_dtoa_r+0x758>
 8010c3a:	e782      	b.n	8010b42 <_dtoa_r+0x65e>
 8010c3c:	e7b8      	b.n	8010bb0 <_dtoa_r+0x6cc>
 8010c3e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010c40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010c42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010c44:	2f00      	cmp	r7, #0
 8010c46:	d012      	beq.n	8010c6e <_dtoa_r+0x78a>
 8010c48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c4a:	2a01      	cmp	r2, #1
 8010c4c:	dc6e      	bgt.n	8010d2c <_dtoa_r+0x848>
 8010c4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010c50:	2a00      	cmp	r2, #0
 8010c52:	d065      	beq.n	8010d20 <_dtoa_r+0x83c>
 8010c54:	4a9e      	ldr	r2, [pc, #632]	; (8010ed0 <_dtoa_r+0x9ec>)
 8010c56:	189b      	adds	r3, r3, r2
 8010c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c5a:	2101      	movs	r1, #1
 8010c5c:	18d2      	adds	r2, r2, r3
 8010c5e:	920a      	str	r2, [sp, #40]	; 0x28
 8010c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c62:	9804      	ldr	r0, [sp, #16]
 8010c64:	18d3      	adds	r3, r2, r3
 8010c66:	930c      	str	r3, [sp, #48]	; 0x30
 8010c68:	f7fc f986 	bl	800cf78 <__i2b>
 8010c6c:	0007      	movs	r7, r0
 8010c6e:	2c00      	cmp	r4, #0
 8010c70:	d00e      	beq.n	8010c90 <_dtoa_r+0x7ac>
 8010c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd0b      	ble.n	8010c90 <_dtoa_r+0x7ac>
 8010c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c7a:	0023      	movs	r3, r4
 8010c7c:	4294      	cmp	r4, r2
 8010c7e:	dd00      	ble.n	8010c82 <_dtoa_r+0x79e>
 8010c80:	0013      	movs	r3, r2
 8010c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c84:	1ae4      	subs	r4, r4, r3
 8010c86:	1ad2      	subs	r2, r2, r3
 8010c88:	920a      	str	r2, [sp, #40]	; 0x28
 8010c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d01e      	beq.n	8010cd4 <_dtoa_r+0x7f0>
 8010c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d05c      	beq.n	8010d56 <_dtoa_r+0x872>
 8010c9c:	2d00      	cmp	r5, #0
 8010c9e:	dd10      	ble.n	8010cc2 <_dtoa_r+0x7de>
 8010ca0:	0039      	movs	r1, r7
 8010ca2:	002a      	movs	r2, r5
 8010ca4:	9804      	ldr	r0, [sp, #16]
 8010ca6:	f7fc fa2f 	bl	800d108 <__pow5mult>
 8010caa:	9a05      	ldr	r2, [sp, #20]
 8010cac:	0001      	movs	r1, r0
 8010cae:	0007      	movs	r7, r0
 8010cb0:	9804      	ldr	r0, [sp, #16]
 8010cb2:	f7fc f979 	bl	800cfa8 <__multiply>
 8010cb6:	0006      	movs	r6, r0
 8010cb8:	9905      	ldr	r1, [sp, #20]
 8010cba:	9804      	ldr	r0, [sp, #16]
 8010cbc:	f7fc f87a 	bl	800cdb4 <_Bfree>
 8010cc0:	9605      	str	r6, [sp, #20]
 8010cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cc4:	1b5a      	subs	r2, r3, r5
 8010cc6:	42ab      	cmp	r3, r5
 8010cc8:	d004      	beq.n	8010cd4 <_dtoa_r+0x7f0>
 8010cca:	9905      	ldr	r1, [sp, #20]
 8010ccc:	9804      	ldr	r0, [sp, #16]
 8010cce:	f7fc fa1b 	bl	800d108 <__pow5mult>
 8010cd2:	9005      	str	r0, [sp, #20]
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	9804      	ldr	r0, [sp, #16]
 8010cd8:	f7fc f94e 	bl	800cf78 <__i2b>
 8010cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010cde:	0006      	movs	r6, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	dd3a      	ble.n	8010d5a <_dtoa_r+0x876>
 8010ce4:	001a      	movs	r2, r3
 8010ce6:	0001      	movs	r1, r0
 8010ce8:	9804      	ldr	r0, [sp, #16]
 8010cea:	f7fc fa0d 	bl	800d108 <__pow5mult>
 8010cee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010cf0:	0006      	movs	r6, r0
 8010cf2:	2500      	movs	r5, #0
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	dc38      	bgt.n	8010d6a <_dtoa_r+0x886>
 8010cf8:	2500      	movs	r5, #0
 8010cfa:	9b08      	ldr	r3, [sp, #32]
 8010cfc:	42ab      	cmp	r3, r5
 8010cfe:	d130      	bne.n	8010d62 <_dtoa_r+0x87e>
 8010d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d02:	031b      	lsls	r3, r3, #12
 8010d04:	42ab      	cmp	r3, r5
 8010d06:	d12c      	bne.n	8010d62 <_dtoa_r+0x87e>
 8010d08:	4b72      	ldr	r3, [pc, #456]	; (8010ed4 <_dtoa_r+0x9f0>)
 8010d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d0c:	4213      	tst	r3, r2
 8010d0e:	d028      	beq.n	8010d62 <_dtoa_r+0x87e>
 8010d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d12:	3501      	adds	r5, #1
 8010d14:	3301      	adds	r3, #1
 8010d16:	930a      	str	r3, [sp, #40]	; 0x28
 8010d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8010d1e:	e020      	b.n	8010d62 <_dtoa_r+0x87e>
 8010d20:	2336      	movs	r3, #54	; 0x36
 8010d22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d28:	1a9b      	subs	r3, r3, r2
 8010d2a:	e795      	b.n	8010c58 <_dtoa_r+0x774>
 8010d2c:	9b07      	ldr	r3, [sp, #28]
 8010d2e:	1e5d      	subs	r5, r3, #1
 8010d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d32:	42ab      	cmp	r3, r5
 8010d34:	db07      	blt.n	8010d46 <_dtoa_r+0x862>
 8010d36:	1b5d      	subs	r5, r3, r5
 8010d38:	9b07      	ldr	r3, [sp, #28]
 8010d3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	da8b      	bge.n	8010c58 <_dtoa_r+0x774>
 8010d40:	1ae4      	subs	r4, r4, r3
 8010d42:	2300      	movs	r3, #0
 8010d44:	e788      	b.n	8010c58 <_dtoa_r+0x774>
 8010d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d4a:	1aeb      	subs	r3, r5, r3
 8010d4c:	18d3      	adds	r3, r2, r3
 8010d4e:	950d      	str	r5, [sp, #52]	; 0x34
 8010d50:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d52:	2500      	movs	r5, #0
 8010d54:	e7f0      	b.n	8010d38 <_dtoa_r+0x854>
 8010d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d58:	e7b7      	b.n	8010cca <_dtoa_r+0x7e6>
 8010d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d5c:	2500      	movs	r5, #0
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	ddca      	ble.n	8010cf8 <_dtoa_r+0x814>
 8010d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d64:	2001      	movs	r0, #1
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d008      	beq.n	8010d7c <_dtoa_r+0x898>
 8010d6a:	6933      	ldr	r3, [r6, #16]
 8010d6c:	3303      	adds	r3, #3
 8010d6e:	009b      	lsls	r3, r3, #2
 8010d70:	18f3      	adds	r3, r6, r3
 8010d72:	6858      	ldr	r0, [r3, #4]
 8010d74:	f7fc f8b8 	bl	800cee8 <__hi0bits>
 8010d78:	2320      	movs	r3, #32
 8010d7a:	1a18      	subs	r0, r3, r0
 8010d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d7e:	1818      	adds	r0, r3, r0
 8010d80:	0002      	movs	r2, r0
 8010d82:	231f      	movs	r3, #31
 8010d84:	401a      	ands	r2, r3
 8010d86:	4218      	tst	r0, r3
 8010d88:	d047      	beq.n	8010e1a <_dtoa_r+0x936>
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	dd3f      	ble.n	8010e12 <_dtoa_r+0x92e>
 8010d92:	231c      	movs	r3, #28
 8010d94:	1a9b      	subs	r3, r3, r2
 8010d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d98:	18e4      	adds	r4, r4, r3
 8010d9a:	18d2      	adds	r2, r2, r3
 8010d9c:	920a      	str	r2, [sp, #40]	; 0x28
 8010d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010da0:	18d3      	adds	r3, r2, r3
 8010da2:	930c      	str	r3, [sp, #48]	; 0x30
 8010da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	dd05      	ble.n	8010db6 <_dtoa_r+0x8d2>
 8010daa:	001a      	movs	r2, r3
 8010dac:	9905      	ldr	r1, [sp, #20]
 8010dae:	9804      	ldr	r0, [sp, #16]
 8010db0:	f7fc f9ec 	bl	800d18c <__lshift>
 8010db4:	9005      	str	r0, [sp, #20]
 8010db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dd05      	ble.n	8010dc8 <_dtoa_r+0x8e4>
 8010dbc:	0031      	movs	r1, r6
 8010dbe:	001a      	movs	r2, r3
 8010dc0:	9804      	ldr	r0, [sp, #16]
 8010dc2:	f7fc f9e3 	bl	800d18c <__lshift>
 8010dc6:	0006      	movs	r6, r0
 8010dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d027      	beq.n	8010e1e <_dtoa_r+0x93a>
 8010dce:	0031      	movs	r1, r6
 8010dd0:	9805      	ldr	r0, [sp, #20]
 8010dd2:	f7fc fa49 	bl	800d268 <__mcmp>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	da21      	bge.n	8010e1e <_dtoa_r+0x93a>
 8010dda:	9b03      	ldr	r3, [sp, #12]
 8010ddc:	220a      	movs	r2, #10
 8010dde:	3b01      	subs	r3, #1
 8010de0:	9303      	str	r3, [sp, #12]
 8010de2:	9905      	ldr	r1, [sp, #20]
 8010de4:	2300      	movs	r3, #0
 8010de6:	9804      	ldr	r0, [sp, #16]
 8010de8:	f7fb ffee 	bl	800cdc8 <__multadd>
 8010dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dee:	9005      	str	r0, [sp, #20]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d100      	bne.n	8010df6 <_dtoa_r+0x912>
 8010df4:	e15d      	b.n	80110b2 <_dtoa_r+0xbce>
 8010df6:	2300      	movs	r3, #0
 8010df8:	0039      	movs	r1, r7
 8010dfa:	220a      	movs	r2, #10
 8010dfc:	9804      	ldr	r0, [sp, #16]
 8010dfe:	f7fb ffe3 	bl	800cdc8 <__multadd>
 8010e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e04:	0007      	movs	r7, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	dc49      	bgt.n	8010e9e <_dtoa_r+0x9ba>
 8010e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	dc0e      	bgt.n	8010e2e <_dtoa_r+0x94a>
 8010e10:	e045      	b.n	8010e9e <_dtoa_r+0x9ba>
 8010e12:	2b04      	cmp	r3, #4
 8010e14:	d0c6      	beq.n	8010da4 <_dtoa_r+0x8c0>
 8010e16:	331c      	adds	r3, #28
 8010e18:	e7bd      	b.n	8010d96 <_dtoa_r+0x8b2>
 8010e1a:	0013      	movs	r3, r2
 8010e1c:	e7fb      	b.n	8010e16 <_dtoa_r+0x932>
 8010e1e:	9b07      	ldr	r3, [sp, #28]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	dc36      	bgt.n	8010e92 <_dtoa_r+0x9ae>
 8010e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	dd33      	ble.n	8010e92 <_dtoa_r+0x9ae>
 8010e2a:	9b07      	ldr	r3, [sp, #28]
 8010e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10c      	bne.n	8010e4e <_dtoa_r+0x96a>
 8010e34:	0031      	movs	r1, r6
 8010e36:	2205      	movs	r2, #5
 8010e38:	9804      	ldr	r0, [sp, #16]
 8010e3a:	f7fb ffc5 	bl	800cdc8 <__multadd>
 8010e3e:	0006      	movs	r6, r0
 8010e40:	0001      	movs	r1, r0
 8010e42:	9805      	ldr	r0, [sp, #20]
 8010e44:	f7fc fa10 	bl	800d268 <__mcmp>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	dd00      	ble.n	8010e4e <_dtoa_r+0x96a>
 8010e4c:	e59f      	b.n	801098e <_dtoa_r+0x4aa>
 8010e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010e50:	43db      	mvns	r3, r3
 8010e52:	9303      	str	r3, [sp, #12]
 8010e54:	9b06      	ldr	r3, [sp, #24]
 8010e56:	9308      	str	r3, [sp, #32]
 8010e58:	2500      	movs	r5, #0
 8010e5a:	0031      	movs	r1, r6
 8010e5c:	9804      	ldr	r0, [sp, #16]
 8010e5e:	f7fb ffa9 	bl	800cdb4 <_Bfree>
 8010e62:	2f00      	cmp	r7, #0
 8010e64:	d100      	bne.n	8010e68 <_dtoa_r+0x984>
 8010e66:	e6a3      	b.n	8010bb0 <_dtoa_r+0x6cc>
 8010e68:	2d00      	cmp	r5, #0
 8010e6a:	d005      	beq.n	8010e78 <_dtoa_r+0x994>
 8010e6c:	42bd      	cmp	r5, r7
 8010e6e:	d003      	beq.n	8010e78 <_dtoa_r+0x994>
 8010e70:	0029      	movs	r1, r5
 8010e72:	9804      	ldr	r0, [sp, #16]
 8010e74:	f7fb ff9e 	bl	800cdb4 <_Bfree>
 8010e78:	0039      	movs	r1, r7
 8010e7a:	9804      	ldr	r0, [sp, #16]
 8010e7c:	f7fb ff9a 	bl	800cdb4 <_Bfree>
 8010e80:	e696      	b.n	8010bb0 <_dtoa_r+0x6cc>
 8010e82:	2600      	movs	r6, #0
 8010e84:	0037      	movs	r7, r6
 8010e86:	e7e2      	b.n	8010e4e <_dtoa_r+0x96a>
 8010e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e8a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010e8c:	9303      	str	r3, [sp, #12]
 8010e8e:	0037      	movs	r7, r6
 8010e90:	e57d      	b.n	801098e <_dtoa_r+0x4aa>
 8010e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d100      	bne.n	8010e9a <_dtoa_r+0x9b6>
 8010e98:	e0c3      	b.n	8011022 <_dtoa_r+0xb3e>
 8010e9a:	9b07      	ldr	r3, [sp, #28]
 8010e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e9e:	2c00      	cmp	r4, #0
 8010ea0:	dd05      	ble.n	8010eae <_dtoa_r+0x9ca>
 8010ea2:	0039      	movs	r1, r7
 8010ea4:	0022      	movs	r2, r4
 8010ea6:	9804      	ldr	r0, [sp, #16]
 8010ea8:	f7fc f970 	bl	800d18c <__lshift>
 8010eac:	0007      	movs	r7, r0
 8010eae:	0038      	movs	r0, r7
 8010eb0:	2d00      	cmp	r5, #0
 8010eb2:	d024      	beq.n	8010efe <_dtoa_r+0xa1a>
 8010eb4:	6879      	ldr	r1, [r7, #4]
 8010eb6:	9804      	ldr	r0, [sp, #16]
 8010eb8:	f7fb ff54 	bl	800cd64 <_Balloc>
 8010ebc:	1e04      	subs	r4, r0, #0
 8010ebe:	d111      	bne.n	8010ee4 <_dtoa_r+0xa00>
 8010ec0:	0022      	movs	r2, r4
 8010ec2:	4b05      	ldr	r3, [pc, #20]	; (8010ed8 <_dtoa_r+0x9f4>)
 8010ec4:	4805      	ldr	r0, [pc, #20]	; (8010edc <_dtoa_r+0x9f8>)
 8010ec6:	4906      	ldr	r1, [pc, #24]	; (8010ee0 <_dtoa_r+0x9fc>)
 8010ec8:	e43c      	b.n	8010744 <_dtoa_r+0x260>
 8010eca:	46c0      	nop			; (mov r8, r8)
 8010ecc:	40240000 	.word	0x40240000
 8010ed0:	00000433 	.word	0x00000433
 8010ed4:	7ff00000 	.word	0x7ff00000
 8010ed8:	08014a19 	.word	0x08014a19
 8010edc:	08014ca9 	.word	0x08014ca9
 8010ee0:	000002ef 	.word	0x000002ef
 8010ee4:	0039      	movs	r1, r7
 8010ee6:	693a      	ldr	r2, [r7, #16]
 8010ee8:	310c      	adds	r1, #12
 8010eea:	3202      	adds	r2, #2
 8010eec:	0092      	lsls	r2, r2, #2
 8010eee:	300c      	adds	r0, #12
 8010ef0:	f7fb fa9d 	bl	800c42e <memcpy>
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	0021      	movs	r1, r4
 8010ef8:	9804      	ldr	r0, [sp, #16]
 8010efa:	f7fc f947 	bl	800d18c <__lshift>
 8010efe:	9b06      	ldr	r3, [sp, #24]
 8010f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f02:	9307      	str	r3, [sp, #28]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	189b      	adds	r3, r3, r2
 8010f08:	2201      	movs	r2, #1
 8010f0a:	003d      	movs	r5, r7
 8010f0c:	0007      	movs	r7, r0
 8010f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8010f10:	9b08      	ldr	r3, [sp, #32]
 8010f12:	4013      	ands	r3, r2
 8010f14:	930d      	str	r3, [sp, #52]	; 0x34
 8010f16:	0031      	movs	r1, r6
 8010f18:	9805      	ldr	r0, [sp, #20]
 8010f1a:	f7ff fa53 	bl	80103c4 <quorem>
 8010f1e:	0029      	movs	r1, r5
 8010f20:	0004      	movs	r4, r0
 8010f22:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f24:	9805      	ldr	r0, [sp, #20]
 8010f26:	f7fc f99f 	bl	800d268 <__mcmp>
 8010f2a:	003a      	movs	r2, r7
 8010f2c:	900c      	str	r0, [sp, #48]	; 0x30
 8010f2e:	0031      	movs	r1, r6
 8010f30:	9804      	ldr	r0, [sp, #16]
 8010f32:	f7fc f9b5 	bl	800d2a0 <__mdiff>
 8010f36:	2201      	movs	r2, #1
 8010f38:	68c3      	ldr	r3, [r0, #12]
 8010f3a:	3430      	adds	r4, #48	; 0x30
 8010f3c:	9008      	str	r0, [sp, #32]
 8010f3e:	920a      	str	r2, [sp, #40]	; 0x28
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d104      	bne.n	8010f4e <_dtoa_r+0xa6a>
 8010f44:	0001      	movs	r1, r0
 8010f46:	9805      	ldr	r0, [sp, #20]
 8010f48:	f7fc f98e 	bl	800d268 <__mcmp>
 8010f4c:	900a      	str	r0, [sp, #40]	; 0x28
 8010f4e:	9908      	ldr	r1, [sp, #32]
 8010f50:	9804      	ldr	r0, [sp, #16]
 8010f52:	f7fb ff2f 	bl	800cdb4 <_Bfree>
 8010f56:	9b07      	ldr	r3, [sp, #28]
 8010f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	9308      	str	r3, [sp, #32]
 8010f5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f60:	4313      	orrs	r3, r2
 8010f62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f64:	4313      	orrs	r3, r2
 8010f66:	d109      	bne.n	8010f7c <_dtoa_r+0xa98>
 8010f68:	2c39      	cmp	r4, #57	; 0x39
 8010f6a:	d022      	beq.n	8010fb2 <_dtoa_r+0xace>
 8010f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	dd01      	ble.n	8010f76 <_dtoa_r+0xa92>
 8010f72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010f74:	3431      	adds	r4, #49	; 0x31
 8010f76:	9b07      	ldr	r3, [sp, #28]
 8010f78:	701c      	strb	r4, [r3, #0]
 8010f7a:	e76e      	b.n	8010e5a <_dtoa_r+0x976>
 8010f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	db04      	blt.n	8010f8c <_dtoa_r+0xaa8>
 8010f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010f84:	4313      	orrs	r3, r2
 8010f86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	d11e      	bne.n	8010fca <_dtoa_r+0xae6>
 8010f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	ddf1      	ble.n	8010f76 <_dtoa_r+0xa92>
 8010f92:	9905      	ldr	r1, [sp, #20]
 8010f94:	2201      	movs	r2, #1
 8010f96:	9804      	ldr	r0, [sp, #16]
 8010f98:	f7fc f8f8 	bl	800d18c <__lshift>
 8010f9c:	0031      	movs	r1, r6
 8010f9e:	9005      	str	r0, [sp, #20]
 8010fa0:	f7fc f962 	bl	800d268 <__mcmp>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	dc02      	bgt.n	8010fae <_dtoa_r+0xaca>
 8010fa8:	d1e5      	bne.n	8010f76 <_dtoa_r+0xa92>
 8010faa:	07e3      	lsls	r3, r4, #31
 8010fac:	d5e3      	bpl.n	8010f76 <_dtoa_r+0xa92>
 8010fae:	2c39      	cmp	r4, #57	; 0x39
 8010fb0:	d1df      	bne.n	8010f72 <_dtoa_r+0xa8e>
 8010fb2:	2339      	movs	r3, #57	; 0x39
 8010fb4:	9a07      	ldr	r2, [sp, #28]
 8010fb6:	7013      	strb	r3, [r2, #0]
 8010fb8:	9b08      	ldr	r3, [sp, #32]
 8010fba:	9308      	str	r3, [sp, #32]
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	781a      	ldrb	r2, [r3, #0]
 8010fc0:	2a39      	cmp	r2, #57	; 0x39
 8010fc2:	d063      	beq.n	801108c <_dtoa_r+0xba8>
 8010fc4:	3201      	adds	r2, #1
 8010fc6:	701a      	strb	r2, [r3, #0]
 8010fc8:	e747      	b.n	8010e5a <_dtoa_r+0x976>
 8010fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dd03      	ble.n	8010fd8 <_dtoa_r+0xaf4>
 8010fd0:	2c39      	cmp	r4, #57	; 0x39
 8010fd2:	d0ee      	beq.n	8010fb2 <_dtoa_r+0xace>
 8010fd4:	3401      	adds	r4, #1
 8010fd6:	e7ce      	b.n	8010f76 <_dtoa_r+0xa92>
 8010fd8:	9b07      	ldr	r3, [sp, #28]
 8010fda:	9a07      	ldr	r2, [sp, #28]
 8010fdc:	701c      	strb	r4, [r3, #0]
 8010fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d03e      	beq.n	8011062 <_dtoa_r+0xb7e>
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	220a      	movs	r2, #10
 8010fe8:	9905      	ldr	r1, [sp, #20]
 8010fea:	9804      	ldr	r0, [sp, #16]
 8010fec:	f7fb feec 	bl	800cdc8 <__multadd>
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	9005      	str	r0, [sp, #20]
 8010ff4:	220a      	movs	r2, #10
 8010ff6:	0029      	movs	r1, r5
 8010ff8:	9804      	ldr	r0, [sp, #16]
 8010ffa:	42bd      	cmp	r5, r7
 8010ffc:	d106      	bne.n	801100c <_dtoa_r+0xb28>
 8010ffe:	f7fb fee3 	bl	800cdc8 <__multadd>
 8011002:	0005      	movs	r5, r0
 8011004:	0007      	movs	r7, r0
 8011006:	9b08      	ldr	r3, [sp, #32]
 8011008:	9307      	str	r3, [sp, #28]
 801100a:	e784      	b.n	8010f16 <_dtoa_r+0xa32>
 801100c:	f7fb fedc 	bl	800cdc8 <__multadd>
 8011010:	0039      	movs	r1, r7
 8011012:	0005      	movs	r5, r0
 8011014:	2300      	movs	r3, #0
 8011016:	220a      	movs	r2, #10
 8011018:	9804      	ldr	r0, [sp, #16]
 801101a:	f7fb fed5 	bl	800cdc8 <__multadd>
 801101e:	0007      	movs	r7, r0
 8011020:	e7f1      	b.n	8011006 <_dtoa_r+0xb22>
 8011022:	9b07      	ldr	r3, [sp, #28]
 8011024:	930b      	str	r3, [sp, #44]	; 0x2c
 8011026:	2500      	movs	r5, #0
 8011028:	0031      	movs	r1, r6
 801102a:	9805      	ldr	r0, [sp, #20]
 801102c:	f7ff f9ca 	bl	80103c4 <quorem>
 8011030:	9b06      	ldr	r3, [sp, #24]
 8011032:	3030      	adds	r0, #48	; 0x30
 8011034:	5558      	strb	r0, [r3, r5]
 8011036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011038:	3501      	adds	r5, #1
 801103a:	0004      	movs	r4, r0
 801103c:	42ab      	cmp	r3, r5
 801103e:	dd07      	ble.n	8011050 <_dtoa_r+0xb6c>
 8011040:	2300      	movs	r3, #0
 8011042:	220a      	movs	r2, #10
 8011044:	9905      	ldr	r1, [sp, #20]
 8011046:	9804      	ldr	r0, [sp, #16]
 8011048:	f7fb febe 	bl	800cdc8 <__multadd>
 801104c:	9005      	str	r0, [sp, #20]
 801104e:	e7eb      	b.n	8011028 <_dtoa_r+0xb44>
 8011050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011052:	2301      	movs	r3, #1
 8011054:	2a00      	cmp	r2, #0
 8011056:	dd00      	ble.n	801105a <_dtoa_r+0xb76>
 8011058:	0013      	movs	r3, r2
 801105a:	2500      	movs	r5, #0
 801105c:	9a06      	ldr	r2, [sp, #24]
 801105e:	18d3      	adds	r3, r2, r3
 8011060:	9308      	str	r3, [sp, #32]
 8011062:	9905      	ldr	r1, [sp, #20]
 8011064:	2201      	movs	r2, #1
 8011066:	9804      	ldr	r0, [sp, #16]
 8011068:	f7fc f890 	bl	800d18c <__lshift>
 801106c:	0031      	movs	r1, r6
 801106e:	9005      	str	r0, [sp, #20]
 8011070:	f7fc f8fa 	bl	800d268 <__mcmp>
 8011074:	2800      	cmp	r0, #0
 8011076:	dc9f      	bgt.n	8010fb8 <_dtoa_r+0xad4>
 8011078:	d101      	bne.n	801107e <_dtoa_r+0xb9a>
 801107a:	07e4      	lsls	r4, r4, #31
 801107c:	d49c      	bmi.n	8010fb8 <_dtoa_r+0xad4>
 801107e:	9b08      	ldr	r3, [sp, #32]
 8011080:	9308      	str	r3, [sp, #32]
 8011082:	3b01      	subs	r3, #1
 8011084:	781a      	ldrb	r2, [r3, #0]
 8011086:	2a30      	cmp	r2, #48	; 0x30
 8011088:	d0fa      	beq.n	8011080 <_dtoa_r+0xb9c>
 801108a:	e6e6      	b.n	8010e5a <_dtoa_r+0x976>
 801108c:	9a06      	ldr	r2, [sp, #24]
 801108e:	429a      	cmp	r2, r3
 8011090:	d193      	bne.n	8010fba <_dtoa_r+0xad6>
 8011092:	9b03      	ldr	r3, [sp, #12]
 8011094:	3301      	adds	r3, #1
 8011096:	9303      	str	r3, [sp, #12]
 8011098:	2331      	movs	r3, #49	; 0x31
 801109a:	7013      	strb	r3, [r2, #0]
 801109c:	e6dd      	b.n	8010e5a <_dtoa_r+0x976>
 801109e:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <_dtoa_r+0xbe0>)
 80110a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80110a2:	9306      	str	r3, [sp, #24]
 80110a4:	4b08      	ldr	r3, [pc, #32]	; (80110c8 <_dtoa_r+0xbe4>)
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	d001      	beq.n	80110ae <_dtoa_r+0xbca>
 80110aa:	f7ff fa4c 	bl	8010546 <_dtoa_r+0x62>
 80110ae:	f7ff fa4c 	bl	801054a <_dtoa_r+0x66>
 80110b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	dcb6      	bgt.n	8011026 <_dtoa_r+0xb42>
 80110b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80110ba:	2b02      	cmp	r3, #2
 80110bc:	dd00      	ble.n	80110c0 <_dtoa_r+0xbdc>
 80110be:	e6b6      	b.n	8010e2e <_dtoa_r+0x94a>
 80110c0:	e7b1      	b.n	8011026 <_dtoa_r+0xb42>
 80110c2:	46c0      	nop			; (mov r8, r8)
 80110c4:	08014c9c 	.word	0x08014c9c
 80110c8:	08014ca4 	.word	0x08014ca4

080110cc <realloc>:
 80110cc:	b510      	push	{r4, lr}
 80110ce:	4b03      	ldr	r3, [pc, #12]	; (80110dc <realloc+0x10>)
 80110d0:	000a      	movs	r2, r1
 80110d2:	0001      	movs	r1, r0
 80110d4:	6818      	ldr	r0, [r3, #0]
 80110d6:	f000 f803 	bl	80110e0 <_realloc_r>
 80110da:	bd10      	pop	{r4, pc}
 80110dc:	200006d0 	.word	0x200006d0

080110e0 <_realloc_r>:
 80110e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110e2:	b087      	sub	sp, #28
 80110e4:	1e0c      	subs	r4, r1, #0
 80110e6:	9001      	str	r0, [sp, #4]
 80110e8:	9205      	str	r2, [sp, #20]
 80110ea:	d106      	bne.n	80110fa <_realloc_r+0x1a>
 80110ec:	0011      	movs	r1, r2
 80110ee:	f7f9 fd5f 	bl	800abb0 <_malloc_r>
 80110f2:	0007      	movs	r7, r0
 80110f4:	0038      	movs	r0, r7
 80110f6:	b007      	add	sp, #28
 80110f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110fa:	9801      	ldr	r0, [sp, #4]
 80110fc:	f7f9 ff6c 	bl	800afd8 <__malloc_lock>
 8011100:	0023      	movs	r3, r4
 8011102:	3b08      	subs	r3, #8
 8011104:	685f      	ldr	r7, [r3, #4]
 8011106:	9304      	str	r3, [sp, #16]
 8011108:	9b05      	ldr	r3, [sp, #20]
 801110a:	330b      	adds	r3, #11
 801110c:	2b16      	cmp	r3, #22
 801110e:	d908      	bls.n	8011122 <_realloc_r+0x42>
 8011110:	2207      	movs	r2, #7
 8011112:	4393      	bics	r3, r2
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	d506      	bpl.n	8011126 <_realloc_r+0x46>
 8011118:	230c      	movs	r3, #12
 801111a:	9a01      	ldr	r2, [sp, #4]
 801111c:	2700      	movs	r7, #0
 801111e:	6013      	str	r3, [r2, #0]
 8011120:	e7e8      	b.n	80110f4 <_realloc_r+0x14>
 8011122:	2310      	movs	r3, #16
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	9b00      	ldr	r3, [sp, #0]
 8011128:	9a05      	ldr	r2, [sp, #20]
 801112a:	4293      	cmp	r3, r2
 801112c:	d3f4      	bcc.n	8011118 <_realloc_r+0x38>
 801112e:	9b04      	ldr	r3, [sp, #16]
 8011130:	003a      	movs	r2, r7
 8011132:	9302      	str	r3, [sp, #8]
 8011134:	2303      	movs	r3, #3
 8011136:	439a      	bics	r2, r3
 8011138:	9b00      	ldr	r3, [sp, #0]
 801113a:	9203      	str	r2, [sp, #12]
 801113c:	4293      	cmp	r3, r2
 801113e:	dc00      	bgt.n	8011142 <_realloc_r+0x62>
 8011140:	e169      	b.n	8011416 <_realloc_r+0x336>
 8011142:	9b04      	ldr	r3, [sp, #16]
 8011144:	48b8      	ldr	r0, [pc, #736]	; (8011428 <_realloc_r+0x348>)
 8011146:	189b      	adds	r3, r3, r2
 8011148:	6882      	ldr	r2, [r0, #8]
 801114a:	4694      	mov	ip, r2
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	459c      	cmp	ip, r3
 8011150:	d006      	beq.n	8011160 <_realloc_r+0x80>
 8011152:	2501      	movs	r5, #1
 8011154:	0011      	movs	r1, r2
 8011156:	43a9      	bics	r1, r5
 8011158:	1859      	adds	r1, r3, r1
 801115a:	6849      	ldr	r1, [r1, #4]
 801115c:	4229      	tst	r1, r5
 801115e:	d144      	bne.n	80111ea <_realloc_r+0x10a>
 8011160:	2103      	movs	r1, #3
 8011162:	438a      	bics	r2, r1
 8011164:	9903      	ldr	r1, [sp, #12]
 8011166:	188e      	adds	r6, r1, r2
 8011168:	9900      	ldr	r1, [sp, #0]
 801116a:	459c      	cmp	ip, r3
 801116c:	d117      	bne.n	801119e <_realloc_r+0xbe>
 801116e:	3110      	adds	r1, #16
 8011170:	42b1      	cmp	r1, r6
 8011172:	dc3c      	bgt.n	80111ee <_realloc_r+0x10e>
 8011174:	9a00      	ldr	r2, [sp, #0]
 8011176:	2101      	movs	r1, #1
 8011178:	4694      	mov	ip, r2
 801117a:	1ab6      	subs	r6, r6, r2
 801117c:	0022      	movs	r2, r4
 801117e:	9b04      	ldr	r3, [sp, #16]
 8011180:	430e      	orrs	r6, r1
 8011182:	4463      	add	r3, ip
 8011184:	6083      	str	r3, [r0, #8]
 8011186:	3a08      	subs	r2, #8
 8011188:	605e      	str	r6, [r3, #4]
 801118a:	6853      	ldr	r3, [r2, #4]
 801118c:	9801      	ldr	r0, [sp, #4]
 801118e:	400b      	ands	r3, r1
 8011190:	4661      	mov	r1, ip
 8011192:	430b      	orrs	r3, r1
 8011194:	6053      	str	r3, [r2, #4]
 8011196:	f7f9 ff27 	bl	800afe8 <__malloc_unlock>
 801119a:	0027      	movs	r7, r4
 801119c:	e7aa      	b.n	80110f4 <_realloc_r+0x14>
 801119e:	42b1      	cmp	r1, r6
 80111a0:	dc25      	bgt.n	80111ee <_realloc_r+0x10e>
 80111a2:	68da      	ldr	r2, [r3, #12]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	60da      	str	r2, [r3, #12]
 80111a8:	6093      	str	r3, [r2, #8]
 80111aa:	9b00      	ldr	r3, [sp, #0]
 80111ac:	9a02      	ldr	r2, [sp, #8]
 80111ae:	1af4      	subs	r4, r6, r3
 80111b0:	9b02      	ldr	r3, [sp, #8]
 80111b2:	1992      	adds	r2, r2, r6
 80111b4:	6858      	ldr	r0, [r3, #4]
 80111b6:	2301      	movs	r3, #1
 80111b8:	4018      	ands	r0, r3
 80111ba:	2c0f      	cmp	r4, #15
 80111bc:	d800      	bhi.n	80111c0 <_realloc_r+0xe0>
 80111be:	e12c      	b.n	801141a <_realloc_r+0x33a>
 80111c0:	9d00      	ldr	r5, [sp, #0]
 80111c2:	9902      	ldr	r1, [sp, #8]
 80111c4:	4328      	orrs	r0, r5
 80111c6:	1949      	adds	r1, r1, r5
 80111c8:	9d02      	ldr	r5, [sp, #8]
 80111ca:	431c      	orrs	r4, r3
 80111cc:	6068      	str	r0, [r5, #4]
 80111ce:	604c      	str	r4, [r1, #4]
 80111d0:	6850      	ldr	r0, [r2, #4]
 80111d2:	3108      	adds	r1, #8
 80111d4:	4303      	orrs	r3, r0
 80111d6:	6053      	str	r3, [r2, #4]
 80111d8:	9801      	ldr	r0, [sp, #4]
 80111da:	f7fb f9a3 	bl	800c524 <_free_r>
 80111de:	9801      	ldr	r0, [sp, #4]
 80111e0:	f7f9 ff02 	bl	800afe8 <__malloc_unlock>
 80111e4:	9f02      	ldr	r7, [sp, #8]
 80111e6:	3708      	adds	r7, #8
 80111e8:	e784      	b.n	80110f4 <_realloc_r+0x14>
 80111ea:	2200      	movs	r2, #0
 80111ec:	0013      	movs	r3, r2
 80111ee:	07ff      	lsls	r7, r7, #31
 80111f0:	d500      	bpl.n	80111f4 <_realloc_r+0x114>
 80111f2:	e0c6      	b.n	8011382 <_realloc_r+0x2a2>
 80111f4:	0021      	movs	r1, r4
 80111f6:	2003      	movs	r0, #3
 80111f8:	3908      	subs	r1, #8
 80111fa:	680d      	ldr	r5, [r1, #0]
 80111fc:	9904      	ldr	r1, [sp, #16]
 80111fe:	1b4d      	subs	r5, r1, r5
 8011200:	6869      	ldr	r1, [r5, #4]
 8011202:	4381      	bics	r1, r0
 8011204:	9803      	ldr	r0, [sp, #12]
 8011206:	180f      	adds	r7, r1, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d100      	bne.n	801120e <_realloc_r+0x12e>
 801120c:	e084      	b.n	8011318 <_realloc_r+0x238>
 801120e:	19d6      	adds	r6, r2, r7
 8011210:	459c      	cmp	ip, r3
 8011212:	d148      	bne.n	80112a6 <_realloc_r+0x1c6>
 8011214:	9b00      	ldr	r3, [sp, #0]
 8011216:	3310      	adds	r3, #16
 8011218:	42b3      	cmp	r3, r6
 801121a:	dc7d      	bgt.n	8011318 <_realloc_r+0x238>
 801121c:	68aa      	ldr	r2, [r5, #8]
 801121e:	68eb      	ldr	r3, [r5, #12]
 8011220:	002f      	movs	r7, r5
 8011222:	60d3      	str	r3, [r2, #12]
 8011224:	609a      	str	r2, [r3, #8]
 8011226:	0002      	movs	r2, r0
 8011228:	3a04      	subs	r2, #4
 801122a:	3708      	adds	r7, #8
 801122c:	2a24      	cmp	r2, #36	; 0x24
 801122e:	d835      	bhi.n	801129c <_realloc_r+0x1bc>
 8011230:	003b      	movs	r3, r7
 8011232:	2a13      	cmp	r2, #19
 8011234:	d908      	bls.n	8011248 <_realloc_r+0x168>
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	60ab      	str	r3, [r5, #8]
 801123a:	6863      	ldr	r3, [r4, #4]
 801123c:	60eb      	str	r3, [r5, #12]
 801123e:	2a1b      	cmp	r2, #27
 8011240:	d81a      	bhi.n	8011278 <_realloc_r+0x198>
 8011242:	002b      	movs	r3, r5
 8011244:	3408      	adds	r4, #8
 8011246:	3310      	adds	r3, #16
 8011248:	6822      	ldr	r2, [r4, #0]
 801124a:	601a      	str	r2, [r3, #0]
 801124c:	6862      	ldr	r2, [r4, #4]
 801124e:	605a      	str	r2, [r3, #4]
 8011250:	68a2      	ldr	r2, [r4, #8]
 8011252:	609a      	str	r2, [r3, #8]
 8011254:	9b00      	ldr	r3, [sp, #0]
 8011256:	4a74      	ldr	r2, [pc, #464]	; (8011428 <_realloc_r+0x348>)
 8011258:	18eb      	adds	r3, r5, r3
 801125a:	6093      	str	r3, [r2, #8]
 801125c:	9a00      	ldr	r2, [sp, #0]
 801125e:	1ab6      	subs	r6, r6, r2
 8011260:	2201      	movs	r2, #1
 8011262:	4316      	orrs	r6, r2
 8011264:	605e      	str	r6, [r3, #4]
 8011266:	686b      	ldr	r3, [r5, #4]
 8011268:	4013      	ands	r3, r2
 801126a:	9a00      	ldr	r2, [sp, #0]
 801126c:	4313      	orrs	r3, r2
 801126e:	606b      	str	r3, [r5, #4]
 8011270:	9801      	ldr	r0, [sp, #4]
 8011272:	f7f9 feb9 	bl	800afe8 <__malloc_unlock>
 8011276:	e73d      	b.n	80110f4 <_realloc_r+0x14>
 8011278:	68a3      	ldr	r3, [r4, #8]
 801127a:	612b      	str	r3, [r5, #16]
 801127c:	68e3      	ldr	r3, [r4, #12]
 801127e:	616b      	str	r3, [r5, #20]
 8011280:	2a24      	cmp	r2, #36	; 0x24
 8011282:	d003      	beq.n	801128c <_realloc_r+0x1ac>
 8011284:	002b      	movs	r3, r5
 8011286:	3410      	adds	r4, #16
 8011288:	3318      	adds	r3, #24
 801128a:	e7dd      	b.n	8011248 <_realloc_r+0x168>
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	61ab      	str	r3, [r5, #24]
 8011290:	002b      	movs	r3, r5
 8011292:	6962      	ldr	r2, [r4, #20]
 8011294:	3320      	adds	r3, #32
 8011296:	61ea      	str	r2, [r5, #28]
 8011298:	3418      	adds	r4, #24
 801129a:	e7d5      	b.n	8011248 <_realloc_r+0x168>
 801129c:	0021      	movs	r1, r4
 801129e:	0038      	movs	r0, r7
 80112a0:	f001 fb2f 	bl	8012902 <memmove>
 80112a4:	e7d6      	b.n	8011254 <_realloc_r+0x174>
 80112a6:	9a00      	ldr	r2, [sp, #0]
 80112a8:	42b2      	cmp	r2, r6
 80112aa:	dc35      	bgt.n	8011318 <_realloc_r+0x238>
 80112ac:	0028      	movs	r0, r5
 80112ae:	68da      	ldr	r2, [r3, #12]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	3008      	adds	r0, #8
 80112b4:	60da      	str	r2, [r3, #12]
 80112b6:	6093      	str	r3, [r2, #8]
 80112b8:	68aa      	ldr	r2, [r5, #8]
 80112ba:	68eb      	ldr	r3, [r5, #12]
 80112bc:	60d3      	str	r3, [r2, #12]
 80112be:	609a      	str	r2, [r3, #8]
 80112c0:	9a03      	ldr	r2, [sp, #12]
 80112c2:	3a04      	subs	r2, #4
 80112c4:	2a24      	cmp	r2, #36	; 0x24
 80112c6:	d823      	bhi.n	8011310 <_realloc_r+0x230>
 80112c8:	2a13      	cmp	r2, #19
 80112ca:	d907      	bls.n	80112dc <_realloc_r+0x1fc>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	60ab      	str	r3, [r5, #8]
 80112d0:	6863      	ldr	r3, [r4, #4]
 80112d2:	60eb      	str	r3, [r5, #12]
 80112d4:	2a1b      	cmp	r2, #27
 80112d6:	d809      	bhi.n	80112ec <_realloc_r+0x20c>
 80112d8:	3408      	adds	r4, #8
 80112da:	3008      	adds	r0, #8
 80112dc:	6823      	ldr	r3, [r4, #0]
 80112de:	6003      	str	r3, [r0, #0]
 80112e0:	6863      	ldr	r3, [r4, #4]
 80112e2:	6043      	str	r3, [r0, #4]
 80112e4:	68a3      	ldr	r3, [r4, #8]
 80112e6:	6083      	str	r3, [r0, #8]
 80112e8:	9502      	str	r5, [sp, #8]
 80112ea:	e75e      	b.n	80111aa <_realloc_r+0xca>
 80112ec:	68a3      	ldr	r3, [r4, #8]
 80112ee:	612b      	str	r3, [r5, #16]
 80112f0:	68e3      	ldr	r3, [r4, #12]
 80112f2:	616b      	str	r3, [r5, #20]
 80112f4:	2a24      	cmp	r2, #36	; 0x24
 80112f6:	d003      	beq.n	8011300 <_realloc_r+0x220>
 80112f8:	0028      	movs	r0, r5
 80112fa:	3410      	adds	r4, #16
 80112fc:	3018      	adds	r0, #24
 80112fe:	e7ed      	b.n	80112dc <_realloc_r+0x1fc>
 8011300:	0028      	movs	r0, r5
 8011302:	6923      	ldr	r3, [r4, #16]
 8011304:	3020      	adds	r0, #32
 8011306:	61ab      	str	r3, [r5, #24]
 8011308:	6963      	ldr	r3, [r4, #20]
 801130a:	3418      	adds	r4, #24
 801130c:	61eb      	str	r3, [r5, #28]
 801130e:	e7e5      	b.n	80112dc <_realloc_r+0x1fc>
 8011310:	0021      	movs	r1, r4
 8011312:	f001 faf6 	bl	8012902 <memmove>
 8011316:	e7e7      	b.n	80112e8 <_realloc_r+0x208>
 8011318:	9b00      	ldr	r3, [sp, #0]
 801131a:	42bb      	cmp	r3, r7
 801131c:	dc31      	bgt.n	8011382 <_realloc_r+0x2a2>
 801131e:	0028      	movs	r0, r5
 8011320:	68aa      	ldr	r2, [r5, #8]
 8011322:	68eb      	ldr	r3, [r5, #12]
 8011324:	3008      	adds	r0, #8
 8011326:	60d3      	str	r3, [r2, #12]
 8011328:	609a      	str	r2, [r3, #8]
 801132a:	9a03      	ldr	r2, [sp, #12]
 801132c:	3a04      	subs	r2, #4
 801132e:	2a24      	cmp	r2, #36	; 0x24
 8011330:	d823      	bhi.n	801137a <_realloc_r+0x29a>
 8011332:	2a13      	cmp	r2, #19
 8011334:	d907      	bls.n	8011346 <_realloc_r+0x266>
 8011336:	6823      	ldr	r3, [r4, #0]
 8011338:	60ab      	str	r3, [r5, #8]
 801133a:	6863      	ldr	r3, [r4, #4]
 801133c:	60eb      	str	r3, [r5, #12]
 801133e:	2a1b      	cmp	r2, #27
 8011340:	d809      	bhi.n	8011356 <_realloc_r+0x276>
 8011342:	3408      	adds	r4, #8
 8011344:	3008      	adds	r0, #8
 8011346:	6823      	ldr	r3, [r4, #0]
 8011348:	6003      	str	r3, [r0, #0]
 801134a:	6863      	ldr	r3, [r4, #4]
 801134c:	6043      	str	r3, [r0, #4]
 801134e:	68a3      	ldr	r3, [r4, #8]
 8011350:	6083      	str	r3, [r0, #8]
 8011352:	003e      	movs	r6, r7
 8011354:	e7c8      	b.n	80112e8 <_realloc_r+0x208>
 8011356:	68a3      	ldr	r3, [r4, #8]
 8011358:	612b      	str	r3, [r5, #16]
 801135a:	68e3      	ldr	r3, [r4, #12]
 801135c:	616b      	str	r3, [r5, #20]
 801135e:	2a24      	cmp	r2, #36	; 0x24
 8011360:	d003      	beq.n	801136a <_realloc_r+0x28a>
 8011362:	0028      	movs	r0, r5
 8011364:	3410      	adds	r4, #16
 8011366:	3018      	adds	r0, #24
 8011368:	e7ed      	b.n	8011346 <_realloc_r+0x266>
 801136a:	0028      	movs	r0, r5
 801136c:	6923      	ldr	r3, [r4, #16]
 801136e:	3020      	adds	r0, #32
 8011370:	61ab      	str	r3, [r5, #24]
 8011372:	6963      	ldr	r3, [r4, #20]
 8011374:	3418      	adds	r4, #24
 8011376:	61eb      	str	r3, [r5, #28]
 8011378:	e7e5      	b.n	8011346 <_realloc_r+0x266>
 801137a:	0021      	movs	r1, r4
 801137c:	f001 fac1 	bl	8012902 <memmove>
 8011380:	e7e7      	b.n	8011352 <_realloc_r+0x272>
 8011382:	9905      	ldr	r1, [sp, #20]
 8011384:	9801      	ldr	r0, [sp, #4]
 8011386:	f7f9 fc13 	bl	800abb0 <_malloc_r>
 801138a:	1e07      	subs	r7, r0, #0
 801138c:	d100      	bne.n	8011390 <_realloc_r+0x2b0>
 801138e:	e76f      	b.n	8011270 <_realloc_r+0x190>
 8011390:	0023      	movs	r3, r4
 8011392:	2201      	movs	r2, #1
 8011394:	3b08      	subs	r3, #8
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	4393      	bics	r3, r2
 801139a:	9a04      	ldr	r2, [sp, #16]
 801139c:	18d3      	adds	r3, r2, r3
 801139e:	0002      	movs	r2, r0
 80113a0:	3a08      	subs	r2, #8
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d105      	bne.n	80113b2 <_realloc_r+0x2d2>
 80113a6:	685e      	ldr	r6, [r3, #4]
 80113a8:	2303      	movs	r3, #3
 80113aa:	439e      	bics	r6, r3
 80113ac:	9b03      	ldr	r3, [sp, #12]
 80113ae:	18f6      	adds	r6, r6, r3
 80113b0:	e6fb      	b.n	80111aa <_realloc_r+0xca>
 80113b2:	9a03      	ldr	r2, [sp, #12]
 80113b4:	3a04      	subs	r2, #4
 80113b6:	2a24      	cmp	r2, #36	; 0x24
 80113b8:	d829      	bhi.n	801140e <_realloc_r+0x32e>
 80113ba:	0003      	movs	r3, r0
 80113bc:	0021      	movs	r1, r4
 80113be:	2a13      	cmp	r2, #19
 80113c0:	d908      	bls.n	80113d4 <_realloc_r+0x2f4>
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	6003      	str	r3, [r0, #0]
 80113c6:	6863      	ldr	r3, [r4, #4]
 80113c8:	6043      	str	r3, [r0, #4]
 80113ca:	2a1b      	cmp	r2, #27
 80113cc:	d80d      	bhi.n	80113ea <_realloc_r+0x30a>
 80113ce:	0003      	movs	r3, r0
 80113d0:	3108      	adds	r1, #8
 80113d2:	3308      	adds	r3, #8
 80113d4:	680a      	ldr	r2, [r1, #0]
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	684a      	ldr	r2, [r1, #4]
 80113da:	605a      	str	r2, [r3, #4]
 80113dc:	688a      	ldr	r2, [r1, #8]
 80113de:	609a      	str	r2, [r3, #8]
 80113e0:	0021      	movs	r1, r4
 80113e2:	9801      	ldr	r0, [sp, #4]
 80113e4:	f7fb f89e 	bl	800c524 <_free_r>
 80113e8:	e742      	b.n	8011270 <_realloc_r+0x190>
 80113ea:	68a3      	ldr	r3, [r4, #8]
 80113ec:	6083      	str	r3, [r0, #8]
 80113ee:	68e3      	ldr	r3, [r4, #12]
 80113f0:	60c3      	str	r3, [r0, #12]
 80113f2:	2a24      	cmp	r2, #36	; 0x24
 80113f4:	d003      	beq.n	80113fe <_realloc_r+0x31e>
 80113f6:	0003      	movs	r3, r0
 80113f8:	3110      	adds	r1, #16
 80113fa:	3310      	adds	r3, #16
 80113fc:	e7ea      	b.n	80113d4 <_realloc_r+0x2f4>
 80113fe:	6923      	ldr	r3, [r4, #16]
 8011400:	3118      	adds	r1, #24
 8011402:	6103      	str	r3, [r0, #16]
 8011404:	0003      	movs	r3, r0
 8011406:	6962      	ldr	r2, [r4, #20]
 8011408:	3318      	adds	r3, #24
 801140a:	6142      	str	r2, [r0, #20]
 801140c:	e7e2      	b.n	80113d4 <_realloc_r+0x2f4>
 801140e:	0021      	movs	r1, r4
 8011410:	f001 fa77 	bl	8012902 <memmove>
 8011414:	e7e4      	b.n	80113e0 <_realloc_r+0x300>
 8011416:	9e03      	ldr	r6, [sp, #12]
 8011418:	e6c7      	b.n	80111aa <_realloc_r+0xca>
 801141a:	9902      	ldr	r1, [sp, #8]
 801141c:	4306      	orrs	r6, r0
 801141e:	604e      	str	r6, [r1, #4]
 8011420:	6851      	ldr	r1, [r2, #4]
 8011422:	430b      	orrs	r3, r1
 8011424:	6053      	str	r3, [r2, #4]
 8011426:	e6da      	b.n	80111de <_realloc_r+0xfe>
 8011428:	20000028 	.word	0x20000028

0801142c <_strtoll_l.constprop.0>:
 801142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142e:	b08d      	sub	sp, #52	; 0x34
 8011430:	9203      	str	r2, [sp, #12]
 8011432:	4a53      	ldr	r2, [pc, #332]	; (8011580 <_strtoll_l.constprop.0+0x154>)
 8011434:	001e      	movs	r6, r3
 8011436:	9102      	str	r1, [sp, #8]
 8011438:	000b      	movs	r3, r1
 801143a:	4694      	mov	ip, r2
 801143c:	2108      	movs	r1, #8
 801143e:	900a      	str	r0, [sp, #40]	; 0x28
 8011440:	001a      	movs	r2, r3
 8011442:	4660      	mov	r0, ip
 8011444:	7814      	ldrb	r4, [r2, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	5d00      	ldrb	r0, [r0, r4]
 801144a:	001d      	movs	r5, r3
 801144c:	0007      	movs	r7, r0
 801144e:	400f      	ands	r7, r1
 8011450:	4208      	tst	r0, r1
 8011452:	d1f5      	bne.n	8011440 <_strtoll_l.constprop.0+0x14>
 8011454:	2c2d      	cmp	r4, #45	; 0x2d
 8011456:	d153      	bne.n	8011500 <_strtoll_l.constprop.0+0xd4>
 8011458:	781c      	ldrb	r4, [r3, #0]
 801145a:	2301      	movs	r3, #1
 801145c:	1c95      	adds	r5, r2, #2
 801145e:	9301      	str	r3, [sp, #4]
 8011460:	2e00      	cmp	r6, #0
 8011462:	d100      	bne.n	8011466 <_strtoll_l.constprop.0+0x3a>
 8011464:	e086      	b.n	8011574 <_strtoll_l.constprop.0+0x148>
 8011466:	2e10      	cmp	r6, #16
 8011468:	d10a      	bne.n	8011480 <_strtoll_l.constprop.0+0x54>
 801146a:	2c30      	cmp	r4, #48	; 0x30
 801146c:	d108      	bne.n	8011480 <_strtoll_l.constprop.0+0x54>
 801146e:	2220      	movs	r2, #32
 8011470:	782b      	ldrb	r3, [r5, #0]
 8011472:	4393      	bics	r3, r2
 8011474:	2b58      	cmp	r3, #88	; 0x58
 8011476:	d000      	beq.n	801147a <_strtoll_l.constprop.0+0x4e>
 8011478:	e076      	b.n	8011568 <_strtoll_l.constprop.0+0x13c>
 801147a:	2610      	movs	r6, #16
 801147c:	786c      	ldrb	r4, [r5, #1]
 801147e:	3502      	adds	r5, #2
 8011480:	2001      	movs	r0, #1
 8011482:	2300      	movs	r3, #0
 8011484:	493f      	ldr	r1, [pc, #252]	; (8011584 <_strtoll_l.constprop.0+0x158>)
 8011486:	9a01      	ldr	r2, [sp, #4]
 8011488:	4240      	negs	r0, r0
 801148a:	1812      	adds	r2, r2, r0
 801148c:	414b      	adcs	r3, r1
 801148e:	9204      	str	r2, [sp, #16]
 8011490:	9305      	str	r3, [sp, #20]
 8011492:	9804      	ldr	r0, [sp, #16]
 8011494:	9905      	ldr	r1, [sp, #20]
 8011496:	17f3      	asrs	r3, r6, #31
 8011498:	0032      	movs	r2, r6
 801149a:	930b      	str	r3, [sp, #44]	; 0x2c
 801149c:	f7ef f802 	bl	80004a4 <__aeabi_uldivmod>
 80114a0:	2300      	movs	r3, #0
 80114a2:	000f      	movs	r7, r1
 80114a4:	9008      	str	r0, [sp, #32]
 80114a6:	2100      	movs	r1, #0
 80114a8:	2000      	movs	r0, #0
 80114aa:	9209      	str	r2, [sp, #36]	; 0x24
 80114ac:	0022      	movs	r2, r4
 80114ae:	3a30      	subs	r2, #48	; 0x30
 80114b0:	2a09      	cmp	r2, #9
 80114b2:	d82b      	bhi.n	801150c <_strtoll_l.constprop.0+0xe0>
 80114b4:	0014      	movs	r4, r2
 80114b6:	42a6      	cmp	r6, r4
 80114b8:	dd37      	ble.n	801152a <_strtoll_l.constprop.0+0xfe>
 80114ba:	1c5a      	adds	r2, r3, #1
 80114bc:	d01d      	beq.n	80114fa <_strtoll_l.constprop.0+0xce>
 80114be:	42b9      	cmp	r1, r7
 80114c0:	d830      	bhi.n	8011524 <_strtoll_l.constprop.0+0xf8>
 80114c2:	d102      	bne.n	80114ca <_strtoll_l.constprop.0+0x9e>
 80114c4:	9b08      	ldr	r3, [sp, #32]
 80114c6:	4298      	cmp	r0, r3
 80114c8:	d82c      	bhi.n	8011524 <_strtoll_l.constprop.0+0xf8>
 80114ca:	9b08      	ldr	r3, [sp, #32]
 80114cc:	4283      	cmp	r3, r0
 80114ce:	d106      	bne.n	80114de <_strtoll_l.constprop.0+0xb2>
 80114d0:	428f      	cmp	r7, r1
 80114d2:	d104      	bne.n	80114de <_strtoll_l.constprop.0+0xb2>
 80114d4:	2301      	movs	r3, #1
 80114d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114d8:	425b      	negs	r3, r3
 80114da:	42a2      	cmp	r2, r4
 80114dc:	db0d      	blt.n	80114fa <_strtoll_l.constprop.0+0xce>
 80114de:	000b      	movs	r3, r1
 80114e0:	0002      	movs	r2, r0
 80114e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80114e4:	0030      	movs	r0, r6
 80114e6:	f7ee fffd 	bl	80004e4 <__aeabi_lmul>
 80114ea:	17e3      	asrs	r3, r4, #31
 80114ec:	9406      	str	r4, [sp, #24]
 80114ee:	9307      	str	r3, [sp, #28]
 80114f0:	9b06      	ldr	r3, [sp, #24]
 80114f2:	9c07      	ldr	r4, [sp, #28]
 80114f4:	18c0      	adds	r0, r0, r3
 80114f6:	4161      	adcs	r1, r4
 80114f8:	2301      	movs	r3, #1
 80114fa:	782c      	ldrb	r4, [r5, #0]
 80114fc:	3501      	adds	r5, #1
 80114fe:	e7d5      	b.n	80114ac <_strtoll_l.constprop.0+0x80>
 8011500:	9701      	str	r7, [sp, #4]
 8011502:	2c2b      	cmp	r4, #43	; 0x2b
 8011504:	d1ac      	bne.n	8011460 <_strtoll_l.constprop.0+0x34>
 8011506:	781c      	ldrb	r4, [r3, #0]
 8011508:	1c95      	adds	r5, r2, #2
 801150a:	e7a9      	b.n	8011460 <_strtoll_l.constprop.0+0x34>
 801150c:	0022      	movs	r2, r4
 801150e:	3a41      	subs	r2, #65	; 0x41
 8011510:	2a19      	cmp	r2, #25
 8011512:	d801      	bhi.n	8011518 <_strtoll_l.constprop.0+0xec>
 8011514:	3c37      	subs	r4, #55	; 0x37
 8011516:	e7ce      	b.n	80114b6 <_strtoll_l.constprop.0+0x8a>
 8011518:	0022      	movs	r2, r4
 801151a:	3a61      	subs	r2, #97	; 0x61
 801151c:	2a19      	cmp	r2, #25
 801151e:	d804      	bhi.n	801152a <_strtoll_l.constprop.0+0xfe>
 8011520:	3c57      	subs	r4, #87	; 0x57
 8011522:	e7c8      	b.n	80114b6 <_strtoll_l.constprop.0+0x8a>
 8011524:	2301      	movs	r3, #1
 8011526:	425b      	negs	r3, r3
 8011528:	e7e7      	b.n	80114fa <_strtoll_l.constprop.0+0xce>
 801152a:	1c5a      	adds	r2, r3, #1
 801152c:	d109      	bne.n	8011542 <_strtoll_l.constprop.0+0x116>
 801152e:	9804      	ldr	r0, [sp, #16]
 8011530:	9905      	ldr	r1, [sp, #20]
 8011532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011534:	3323      	adds	r3, #35	; 0x23
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	9b03      	ldr	r3, [sp, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10e      	bne.n	801155c <_strtoll_l.constprop.0+0x130>
 801153e:	b00d      	add	sp, #52	; 0x34
 8011540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011542:	9a01      	ldr	r2, [sp, #4]
 8011544:	2a00      	cmp	r2, #0
 8011546:	d004      	beq.n	8011552 <_strtoll_l.constprop.0+0x126>
 8011548:	0006      	movs	r6, r0
 801154a:	000f      	movs	r7, r1
 801154c:	2100      	movs	r1, #0
 801154e:	4270      	negs	r0, r6
 8011550:	41b9      	sbcs	r1, r7
 8011552:	9a03      	ldr	r2, [sp, #12]
 8011554:	2a00      	cmp	r2, #0
 8011556:	d0f2      	beq.n	801153e <_strtoll_l.constprop.0+0x112>
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <_strtoll_l.constprop.0+0x134>
 801155c:	1e6b      	subs	r3, r5, #1
 801155e:	9302      	str	r3, [sp, #8]
 8011560:	9b03      	ldr	r3, [sp, #12]
 8011562:	9a02      	ldr	r2, [sp, #8]
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	e7ea      	b.n	801153e <_strtoll_l.constprop.0+0x112>
 8011568:	2430      	movs	r4, #48	; 0x30
 801156a:	2e00      	cmp	r6, #0
 801156c:	d000      	beq.n	8011570 <_strtoll_l.constprop.0+0x144>
 801156e:	e787      	b.n	8011480 <_strtoll_l.constprop.0+0x54>
 8011570:	3608      	adds	r6, #8
 8011572:	e785      	b.n	8011480 <_strtoll_l.constprop.0+0x54>
 8011574:	2c30      	cmp	r4, #48	; 0x30
 8011576:	d100      	bne.n	801157a <_strtoll_l.constprop.0+0x14e>
 8011578:	e779      	b.n	801146e <_strtoll_l.constprop.0+0x42>
 801157a:	260a      	movs	r6, #10
 801157c:	e780      	b.n	8011480 <_strtoll_l.constprop.0+0x54>
 801157e:	46c0      	nop			; (mov r8, r8)
 8011580:	08014911 	.word	0x08014911
 8011584:	7fffffff 	.word	0x7fffffff

08011588 <_strtoll_r>:
 8011588:	b510      	push	{r4, lr}
 801158a:	f7ff ff4f 	bl	801142c <_strtoll_l.constprop.0>
 801158e:	bd10      	pop	{r4, pc}

08011590 <_strtoull_l.constprop.0>:
 8011590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011592:	b08b      	sub	sp, #44	; 0x2c
 8011594:	9202      	str	r2, [sp, #8]
 8011596:	4a54      	ldr	r2, [pc, #336]	; (80116e8 <_strtoull_l.constprop.0+0x158>)
 8011598:	001e      	movs	r6, r3
 801159a:	9101      	str	r1, [sp, #4]
 801159c:	000b      	movs	r3, r1
 801159e:	4694      	mov	ip, r2
 80115a0:	2108      	movs	r1, #8
 80115a2:	9009      	str	r0, [sp, #36]	; 0x24
 80115a4:	001a      	movs	r2, r3
 80115a6:	4660      	mov	r0, ip
 80115a8:	7814      	ldrb	r4, [r2, #0]
 80115aa:	3301      	adds	r3, #1
 80115ac:	5d00      	ldrb	r0, [r0, r4]
 80115ae:	001d      	movs	r5, r3
 80115b0:	0007      	movs	r7, r0
 80115b2:	400f      	ands	r7, r1
 80115b4:	4208      	tst	r0, r1
 80115b6:	d1f5      	bne.n	80115a4 <_strtoull_l.constprop.0+0x14>
 80115b8:	2c2d      	cmp	r4, #45	; 0x2d
 80115ba:	d154      	bne.n	8011666 <_strtoull_l.constprop.0+0xd6>
 80115bc:	781c      	ldrb	r4, [r3, #0]
 80115be:	2301      	movs	r3, #1
 80115c0:	1c95      	adds	r5, r2, #2
 80115c2:	9306      	str	r3, [sp, #24]
 80115c4:	2e00      	cmp	r6, #0
 80115c6:	d100      	bne.n	80115ca <_strtoull_l.constprop.0+0x3a>
 80115c8:	e088      	b.n	80116dc <_strtoull_l.constprop.0+0x14c>
 80115ca:	2e10      	cmp	r6, #16
 80115cc:	d10a      	bne.n	80115e4 <_strtoull_l.constprop.0+0x54>
 80115ce:	2c30      	cmp	r4, #48	; 0x30
 80115d0:	d108      	bne.n	80115e4 <_strtoull_l.constprop.0+0x54>
 80115d2:	2220      	movs	r2, #32
 80115d4:	782b      	ldrb	r3, [r5, #0]
 80115d6:	4393      	bics	r3, r2
 80115d8:	2b58      	cmp	r3, #88	; 0x58
 80115da:	d000      	beq.n	80115de <_strtoull_l.constprop.0+0x4e>
 80115dc:	e078      	b.n	80116d0 <_strtoull_l.constprop.0+0x140>
 80115de:	2610      	movs	r6, #16
 80115e0:	786c      	ldrb	r4, [r5, #1]
 80115e2:	3502      	adds	r5, #2
 80115e4:	17f7      	asrs	r7, r6, #31
 80115e6:	0032      	movs	r2, r6
 80115e8:	003b      	movs	r3, r7
 80115ea:	2001      	movs	r0, #1
 80115ec:	4240      	negs	r0, r0
 80115ee:	17c1      	asrs	r1, r0, #31
 80115f0:	f7ee ff58 	bl	80004a4 <__aeabi_uldivmod>
 80115f4:	0032      	movs	r2, r6
 80115f6:	9007      	str	r0, [sp, #28]
 80115f8:	9103      	str	r1, [sp, #12]
 80115fa:	003b      	movs	r3, r7
 80115fc:	2001      	movs	r0, #1
 80115fe:	4240      	negs	r0, r0
 8011600:	17c1      	asrs	r1, r0, #31
 8011602:	f7ee ff4f 	bl	80004a4 <__aeabi_uldivmod>
 8011606:	2300      	movs	r3, #0
 8011608:	2000      	movs	r0, #0
 801160a:	2100      	movs	r1, #0
 801160c:	9208      	str	r2, [sp, #32]
 801160e:	0022      	movs	r2, r4
 8011610:	3a30      	subs	r2, #48	; 0x30
 8011612:	2a09      	cmp	r2, #9
 8011614:	d82d      	bhi.n	8011672 <_strtoull_l.constprop.0+0xe2>
 8011616:	0014      	movs	r4, r2
 8011618:	42a6      	cmp	r6, r4
 801161a:	dd39      	ble.n	8011690 <_strtoull_l.constprop.0+0x100>
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	d01f      	beq.n	8011660 <_strtoull_l.constprop.0+0xd0>
 8011620:	9b03      	ldr	r3, [sp, #12]
 8011622:	4299      	cmp	r1, r3
 8011624:	d831      	bhi.n	801168a <_strtoull_l.constprop.0+0xfa>
 8011626:	d102      	bne.n	801162e <_strtoull_l.constprop.0+0x9e>
 8011628:	9b07      	ldr	r3, [sp, #28]
 801162a:	4298      	cmp	r0, r3
 801162c:	d82d      	bhi.n	801168a <_strtoull_l.constprop.0+0xfa>
 801162e:	9b07      	ldr	r3, [sp, #28]
 8011630:	4283      	cmp	r3, r0
 8011632:	d107      	bne.n	8011644 <_strtoull_l.constprop.0+0xb4>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	428b      	cmp	r3, r1
 8011638:	d104      	bne.n	8011644 <_strtoull_l.constprop.0+0xb4>
 801163a:	2301      	movs	r3, #1
 801163c:	9a08      	ldr	r2, [sp, #32]
 801163e:	425b      	negs	r3, r3
 8011640:	42a2      	cmp	r2, r4
 8011642:	db0d      	blt.n	8011660 <_strtoull_l.constprop.0+0xd0>
 8011644:	000b      	movs	r3, r1
 8011646:	0002      	movs	r2, r0
 8011648:	0039      	movs	r1, r7
 801164a:	0030      	movs	r0, r6
 801164c:	f7ee ff4a 	bl	80004e4 <__aeabi_lmul>
 8011650:	17e3      	asrs	r3, r4, #31
 8011652:	9404      	str	r4, [sp, #16]
 8011654:	9305      	str	r3, [sp, #20]
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	9c05      	ldr	r4, [sp, #20]
 801165a:	18c0      	adds	r0, r0, r3
 801165c:	4161      	adcs	r1, r4
 801165e:	2301      	movs	r3, #1
 8011660:	782c      	ldrb	r4, [r5, #0]
 8011662:	3501      	adds	r5, #1
 8011664:	e7d3      	b.n	801160e <_strtoull_l.constprop.0+0x7e>
 8011666:	9706      	str	r7, [sp, #24]
 8011668:	2c2b      	cmp	r4, #43	; 0x2b
 801166a:	d1ab      	bne.n	80115c4 <_strtoull_l.constprop.0+0x34>
 801166c:	781c      	ldrb	r4, [r3, #0]
 801166e:	1c95      	adds	r5, r2, #2
 8011670:	e7a8      	b.n	80115c4 <_strtoull_l.constprop.0+0x34>
 8011672:	0022      	movs	r2, r4
 8011674:	3a41      	subs	r2, #65	; 0x41
 8011676:	2a19      	cmp	r2, #25
 8011678:	d801      	bhi.n	801167e <_strtoull_l.constprop.0+0xee>
 801167a:	3c37      	subs	r4, #55	; 0x37
 801167c:	e7cc      	b.n	8011618 <_strtoull_l.constprop.0+0x88>
 801167e:	0022      	movs	r2, r4
 8011680:	3a61      	subs	r2, #97	; 0x61
 8011682:	2a19      	cmp	r2, #25
 8011684:	d804      	bhi.n	8011690 <_strtoull_l.constprop.0+0x100>
 8011686:	3c57      	subs	r4, #87	; 0x57
 8011688:	e7c6      	b.n	8011618 <_strtoull_l.constprop.0+0x88>
 801168a:	2301      	movs	r3, #1
 801168c:	425b      	negs	r3, r3
 801168e:	e7e7      	b.n	8011660 <_strtoull_l.constprop.0+0xd0>
 8011690:	1c5a      	adds	r2, r3, #1
 8011692:	d10a      	bne.n	80116aa <_strtoull_l.constprop.0+0x11a>
 8011694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011696:	3323      	adds	r3, #35	; 0x23
 8011698:	6013      	str	r3, [r2, #0]
 801169a:	9b02      	ldr	r3, [sp, #8]
 801169c:	2001      	movs	r0, #1
 801169e:	4240      	negs	r0, r0
 80116a0:	17c1      	asrs	r1, r0, #31
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10e      	bne.n	80116c4 <_strtoull_l.constprop.0+0x134>
 80116a6:	b00b      	add	sp, #44	; 0x2c
 80116a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116aa:	9a06      	ldr	r2, [sp, #24]
 80116ac:	2a00      	cmp	r2, #0
 80116ae:	d004      	beq.n	80116ba <_strtoull_l.constprop.0+0x12a>
 80116b0:	0006      	movs	r6, r0
 80116b2:	000f      	movs	r7, r1
 80116b4:	2100      	movs	r1, #0
 80116b6:	4270      	negs	r0, r6
 80116b8:	41b9      	sbcs	r1, r7
 80116ba:	9a02      	ldr	r2, [sp, #8]
 80116bc:	2a00      	cmp	r2, #0
 80116be:	d0f2      	beq.n	80116a6 <_strtoull_l.constprop.0+0x116>
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <_strtoull_l.constprop.0+0x138>
 80116c4:	1e6b      	subs	r3, r5, #1
 80116c6:	9301      	str	r3, [sp, #4]
 80116c8:	9b02      	ldr	r3, [sp, #8]
 80116ca:	9a01      	ldr	r2, [sp, #4]
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	e7ea      	b.n	80116a6 <_strtoull_l.constprop.0+0x116>
 80116d0:	2430      	movs	r4, #48	; 0x30
 80116d2:	2e00      	cmp	r6, #0
 80116d4:	d000      	beq.n	80116d8 <_strtoull_l.constprop.0+0x148>
 80116d6:	e785      	b.n	80115e4 <_strtoull_l.constprop.0+0x54>
 80116d8:	3608      	adds	r6, #8
 80116da:	e783      	b.n	80115e4 <_strtoull_l.constprop.0+0x54>
 80116dc:	2c30      	cmp	r4, #48	; 0x30
 80116de:	d100      	bne.n	80116e2 <_strtoull_l.constprop.0+0x152>
 80116e0:	e777      	b.n	80115d2 <_strtoull_l.constprop.0+0x42>
 80116e2:	260a      	movs	r6, #10
 80116e4:	e77e      	b.n	80115e4 <_strtoull_l.constprop.0+0x54>
 80116e6:	46c0      	nop			; (mov r8, r8)
 80116e8:	08014911 	.word	0x08014911

080116ec <_strtoull_r>:
 80116ec:	b510      	push	{r4, lr}
 80116ee:	f7ff ff4f 	bl	8011590 <_strtoull_l.constprop.0>
 80116f2:	bd10      	pop	{r4, pc}

080116f4 <_mbrtowc_r>:
 80116f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116f6:	0004      	movs	r4, r0
 80116f8:	0010      	movs	r0, r2
 80116fa:	4a0b      	ldr	r2, [pc, #44]	; (8011728 <_mbrtowc_r+0x34>)
 80116fc:	9d06      	ldr	r5, [sp, #24]
 80116fe:	32e4      	adds	r2, #228	; 0xe4
 8011700:	6816      	ldr	r6, [r2, #0]
 8011702:	2800      	cmp	r0, #0
 8011704:	d10c      	bne.n	8011720 <_mbrtowc_r+0x2c>
 8011706:	2301      	movs	r3, #1
 8011708:	0001      	movs	r1, r0
 801170a:	4a08      	ldr	r2, [pc, #32]	; (801172c <_mbrtowc_r+0x38>)
 801170c:	9500      	str	r5, [sp, #0]
 801170e:	0020      	movs	r0, r4
 8011710:	47b0      	blx	r6
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	d103      	bne.n	801171e <_mbrtowc_r+0x2a>
 8011716:	2300      	movs	r3, #0
 8011718:	602b      	str	r3, [r5, #0]
 801171a:	338a      	adds	r3, #138	; 0x8a
 801171c:	6023      	str	r3, [r4, #0]
 801171e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011720:	0002      	movs	r2, r0
 8011722:	9500      	str	r5, [sp, #0]
 8011724:	e7f3      	b.n	801170e <_mbrtowc_r+0x1a>
 8011726:	46c0      	nop			; (mov r8, r8)
 8011728:	20000444 	.word	0x20000444
 801172c:	08014c9b 	.word	0x08014c9b

08011730 <iswspace>:
 8011730:	b510      	push	{r4, lr}
 8011732:	2100      	movs	r1, #0
 8011734:	f000 f802 	bl	801173c <iswspace_l>
 8011738:	bd10      	pop	{r4, pc}
	...

0801173c <iswspace_l>:
 801173c:	0003      	movs	r3, r0
 801173e:	2000      	movs	r0, #0
 8011740:	2bff      	cmp	r3, #255	; 0xff
 8011742:	d803      	bhi.n	801174c <iswspace_l+0x10>
 8011744:	4a02      	ldr	r2, [pc, #8]	; (8011750 <iswspace_l+0x14>)
 8011746:	5cd0      	ldrb	r0, [r2, r3]
 8011748:	2308      	movs	r3, #8
 801174a:	4018      	ands	r0, r3
 801174c:	4770      	bx	lr
 801174e:	46c0      	nop			; (mov r8, r8)
 8011750:	08014911 	.word	0x08014911

08011754 <fiprintf>:
 8011754:	b40e      	push	{r1, r2, r3}
 8011756:	b517      	push	{r0, r1, r2, r4, lr}
 8011758:	4c05      	ldr	r4, [pc, #20]	; (8011770 <fiprintf+0x1c>)
 801175a:	ab05      	add	r3, sp, #20
 801175c:	cb04      	ldmia	r3!, {r2}
 801175e:	0001      	movs	r1, r0
 8011760:	6820      	ldr	r0, [r4, #0]
 8011762:	9301      	str	r3, [sp, #4]
 8011764:	f000 f954 	bl	8011a10 <_vfiprintf_r>
 8011768:	bc1e      	pop	{r1, r2, r3, r4}
 801176a:	bc08      	pop	{r3}
 801176c:	b003      	add	sp, #12
 801176e:	4718      	bx	r3
 8011770:	200006d0 	.word	0x200006d0

08011774 <__ssprint_r>:
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	6813      	ldr	r3, [r2, #0]
 8011778:	b087      	sub	sp, #28
 801177a:	0017      	movs	r7, r2
 801177c:	9303      	str	r3, [sp, #12]
 801177e:	6893      	ldr	r3, [r2, #8]
 8011780:	2200      	movs	r2, #0
 8011782:	000c      	movs	r4, r1
 8011784:	9005      	str	r0, [sp, #20]
 8011786:	9202      	str	r2, [sp, #8]
 8011788:	9201      	str	r2, [sp, #4]
 801178a:	4293      	cmp	r3, r2
 801178c:	d10d      	bne.n	80117aa <__ssprint_r+0x36>
 801178e:	2000      	movs	r0, #0
 8011790:	2300      	movs	r3, #0
 8011792:	607b      	str	r3, [r7, #4]
 8011794:	b007      	add	sp, #28
 8011796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011798:	9b03      	ldr	r3, [sp, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	9302      	str	r3, [sp, #8]
 801179e:	9b03      	ldr	r3, [sp, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	9b03      	ldr	r3, [sp, #12]
 80117a6:	3308      	adds	r3, #8
 80117a8:	9303      	str	r3, [sp, #12]
 80117aa:	9a01      	ldr	r2, [sp, #4]
 80117ac:	68a6      	ldr	r6, [r4, #8]
 80117ae:	6823      	ldr	r3, [r4, #0]
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	d0f1      	beq.n	8011798 <__ssprint_r+0x24>
 80117b4:	42b2      	cmp	r2, r6
 80117b6:	d32e      	bcc.n	8011816 <__ssprint_r+0xa2>
 80117b8:	2190      	movs	r1, #144	; 0x90
 80117ba:	89a2      	ldrh	r2, [r4, #12]
 80117bc:	00c9      	lsls	r1, r1, #3
 80117be:	420a      	tst	r2, r1
 80117c0:	d029      	beq.n	8011816 <__ssprint_r+0xa2>
 80117c2:	2003      	movs	r0, #3
 80117c4:	6921      	ldr	r1, [r4, #16]
 80117c6:	1a5b      	subs	r3, r3, r1
 80117c8:	9304      	str	r3, [sp, #16]
 80117ca:	6963      	ldr	r3, [r4, #20]
 80117cc:	4343      	muls	r3, r0
 80117ce:	0fdd      	lsrs	r5, r3, #31
 80117d0:	18ed      	adds	r5, r5, r3
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	9801      	ldr	r0, [sp, #4]
 80117d6:	3301      	adds	r3, #1
 80117d8:	181b      	adds	r3, r3, r0
 80117da:	106d      	asrs	r5, r5, #1
 80117dc:	42ab      	cmp	r3, r5
 80117de:	d900      	bls.n	80117e2 <__ssprint_r+0x6e>
 80117e0:	001d      	movs	r5, r3
 80117e2:	0552      	lsls	r2, r2, #21
 80117e4:	d532      	bpl.n	801184c <__ssprint_r+0xd8>
 80117e6:	0029      	movs	r1, r5
 80117e8:	9805      	ldr	r0, [sp, #20]
 80117ea:	f7f9 f9e1 	bl	800abb0 <_malloc_r>
 80117ee:	1e06      	subs	r6, r0, #0
 80117f0:	d036      	beq.n	8011860 <__ssprint_r+0xec>
 80117f2:	9a04      	ldr	r2, [sp, #16]
 80117f4:	6921      	ldr	r1, [r4, #16]
 80117f6:	f7fa fe1a 	bl	800c42e <memcpy>
 80117fa:	89a2      	ldrh	r2, [r4, #12]
 80117fc:	4b1e      	ldr	r3, [pc, #120]	; (8011878 <__ssprint_r+0x104>)
 80117fe:	401a      	ands	r2, r3
 8011800:	2380      	movs	r3, #128	; 0x80
 8011802:	4313      	orrs	r3, r2
 8011804:	81a3      	strh	r3, [r4, #12]
 8011806:	9b04      	ldr	r3, [sp, #16]
 8011808:	6126      	str	r6, [r4, #16]
 801180a:	18f6      	adds	r6, r6, r3
 801180c:	6026      	str	r6, [r4, #0]
 801180e:	6165      	str	r5, [r4, #20]
 8011810:	9e01      	ldr	r6, [sp, #4]
 8011812:	1aed      	subs	r5, r5, r3
 8011814:	60a5      	str	r5, [r4, #8]
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	429e      	cmp	r6, r3
 801181a:	d900      	bls.n	801181e <__ssprint_r+0xaa>
 801181c:	001e      	movs	r6, r3
 801181e:	0032      	movs	r2, r6
 8011820:	9902      	ldr	r1, [sp, #8]
 8011822:	6820      	ldr	r0, [r4, #0]
 8011824:	f001 f86d 	bl	8012902 <memmove>
 8011828:	9a01      	ldr	r2, [sp, #4]
 801182a:	68a3      	ldr	r3, [r4, #8]
 801182c:	4694      	mov	ip, r2
 801182e:	1b9b      	subs	r3, r3, r6
 8011830:	60a3      	str	r3, [r4, #8]
 8011832:	6823      	ldr	r3, [r4, #0]
 8011834:	199b      	adds	r3, r3, r6
 8011836:	6023      	str	r3, [r4, #0]
 8011838:	9b02      	ldr	r3, [sp, #8]
 801183a:	4463      	add	r3, ip
 801183c:	9302      	str	r3, [sp, #8]
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	1a9b      	subs	r3, r3, r2
 8011842:	60bb      	str	r3, [r7, #8]
 8011844:	d0a3      	beq.n	801178e <__ssprint_r+0x1a>
 8011846:	2300      	movs	r3, #0
 8011848:	9301      	str	r3, [sp, #4]
 801184a:	e7ae      	b.n	80117aa <__ssprint_r+0x36>
 801184c:	002a      	movs	r2, r5
 801184e:	9805      	ldr	r0, [sp, #20]
 8011850:	f7ff fc46 	bl	80110e0 <_realloc_r>
 8011854:	1e06      	subs	r6, r0, #0
 8011856:	d1d6      	bne.n	8011806 <__ssprint_r+0x92>
 8011858:	6921      	ldr	r1, [r4, #16]
 801185a:	9805      	ldr	r0, [sp, #20]
 801185c:	f7fa fe62 	bl	800c524 <_free_r>
 8011860:	230c      	movs	r3, #12
 8011862:	9a05      	ldr	r2, [sp, #20]
 8011864:	2001      	movs	r0, #1
 8011866:	6013      	str	r3, [r2, #0]
 8011868:	89a2      	ldrh	r2, [r4, #12]
 801186a:	3334      	adds	r3, #52	; 0x34
 801186c:	4313      	orrs	r3, r2
 801186e:	81a3      	strh	r3, [r4, #12]
 8011870:	2300      	movs	r3, #0
 8011872:	4240      	negs	r0, r0
 8011874:	60bb      	str	r3, [r7, #8]
 8011876:	e78b      	b.n	8011790 <__ssprint_r+0x1c>
 8011878:	fffffb7f 	.word	0xfffffb7f

0801187c <_sungetc_r>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	0014      	movs	r4, r2
 8011880:	1c4b      	adds	r3, r1, #1
 8011882:	d103      	bne.n	801188c <_sungetc_r+0x10>
 8011884:	2501      	movs	r5, #1
 8011886:	426d      	negs	r5, r5
 8011888:	0028      	movs	r0, r5
 801188a:	bd70      	pop	{r4, r5, r6, pc}
 801188c:	8993      	ldrh	r3, [r2, #12]
 801188e:	2220      	movs	r2, #32
 8011890:	4393      	bics	r3, r2
 8011892:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011894:	81a3      	strh	r3, [r4, #12]
 8011896:	b2ce      	uxtb	r6, r1
 8011898:	6863      	ldr	r3, [r4, #4]
 801189a:	b2cd      	uxtb	r5, r1
 801189c:	2a00      	cmp	r2, #0
 801189e:	d010      	beq.n	80118c2 <_sungetc_r+0x46>
 80118a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80118a2:	429a      	cmp	r2, r3
 80118a4:	dd07      	ble.n	80118b6 <_sungetc_r+0x3a>
 80118a6:	6823      	ldr	r3, [r4, #0]
 80118a8:	3b01      	subs	r3, #1
 80118aa:	6023      	str	r3, [r4, #0]
 80118ac:	701e      	strb	r6, [r3, #0]
 80118ae:	6863      	ldr	r3, [r4, #4]
 80118b0:	3301      	adds	r3, #1
 80118b2:	6063      	str	r3, [r4, #4]
 80118b4:	e7e8      	b.n	8011888 <_sungetc_r+0xc>
 80118b6:	0021      	movs	r1, r4
 80118b8:	f000 ff1a 	bl	80126f0 <__submore>
 80118bc:	2800      	cmp	r0, #0
 80118be:	d0f2      	beq.n	80118a6 <_sungetc_r+0x2a>
 80118c0:	e7e0      	b.n	8011884 <_sungetc_r+0x8>
 80118c2:	6921      	ldr	r1, [r4, #16]
 80118c4:	6822      	ldr	r2, [r4, #0]
 80118c6:	2900      	cmp	r1, #0
 80118c8:	d007      	beq.n	80118da <_sungetc_r+0x5e>
 80118ca:	4291      	cmp	r1, r2
 80118cc:	d205      	bcs.n	80118da <_sungetc_r+0x5e>
 80118ce:	1e51      	subs	r1, r2, #1
 80118d0:	7808      	ldrb	r0, [r1, #0]
 80118d2:	42a8      	cmp	r0, r5
 80118d4:	d101      	bne.n	80118da <_sungetc_r+0x5e>
 80118d6:	6021      	str	r1, [r4, #0]
 80118d8:	e7ea      	b.n	80118b0 <_sungetc_r+0x34>
 80118da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80118dc:	0023      	movs	r3, r4
 80118de:	3340      	adds	r3, #64	; 0x40
 80118e0:	6323      	str	r3, [r4, #48]	; 0x30
 80118e2:	2303      	movs	r3, #3
 80118e4:	6363      	str	r3, [r4, #52]	; 0x34
 80118e6:	0023      	movs	r3, r4
 80118e8:	3342      	adds	r3, #66	; 0x42
 80118ea:	63a2      	str	r2, [r4, #56]	; 0x38
 80118ec:	701e      	strb	r6, [r3, #0]
 80118ee:	6023      	str	r3, [r4, #0]
 80118f0:	2301      	movs	r3, #1
 80118f2:	e7de      	b.n	80118b2 <_sungetc_r+0x36>

080118f4 <__ssrefill_r>:
 80118f4:	b510      	push	{r4, lr}
 80118f6:	000c      	movs	r4, r1
 80118f8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80118fa:	2900      	cmp	r1, #0
 80118fc:	d00e      	beq.n	801191c <__ssrefill_r+0x28>
 80118fe:	0023      	movs	r3, r4
 8011900:	3340      	adds	r3, #64	; 0x40
 8011902:	4299      	cmp	r1, r3
 8011904:	d001      	beq.n	801190a <__ssrefill_r+0x16>
 8011906:	f7fa fe0d 	bl	800c524 <_free_r>
 801190a:	2000      	movs	r0, #0
 801190c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801190e:	6320      	str	r0, [r4, #48]	; 0x30
 8011910:	6063      	str	r3, [r4, #4]
 8011912:	4283      	cmp	r3, r0
 8011914:	d002      	beq.n	801191c <__ssrefill_r+0x28>
 8011916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	bd10      	pop	{r4, pc}
 801191c:	6923      	ldr	r3, [r4, #16]
 801191e:	2001      	movs	r0, #1
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	2300      	movs	r3, #0
 8011924:	89a2      	ldrh	r2, [r4, #12]
 8011926:	6063      	str	r3, [r4, #4]
 8011928:	3320      	adds	r3, #32
 801192a:	4313      	orrs	r3, r2
 801192c:	81a3      	strh	r3, [r4, #12]
 801192e:	4240      	negs	r0, r0
 8011930:	e7f3      	b.n	801191a <__ssrefill_r+0x26>

08011932 <_sfread_r>:
 8011932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011934:	0014      	movs	r4, r2
 8011936:	435c      	muls	r4, r3
 8011938:	b087      	sub	sp, #28
 801193a:	1e26      	subs	r6, r4, #0
 801193c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801193e:	9005      	str	r0, [sp, #20]
 8011940:	9101      	str	r1, [sp, #4]
 8011942:	9202      	str	r2, [sp, #8]
 8011944:	9303      	str	r3, [sp, #12]
 8011946:	d11e      	bne.n	8011986 <_sfread_r+0x54>
 8011948:	0020      	movs	r0, r4
 801194a:	b007      	add	sp, #28
 801194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801194e:	003a      	movs	r2, r7
 8011950:	9801      	ldr	r0, [sp, #4]
 8011952:	f7fa fd6c 	bl	800c42e <memcpy>
 8011956:	682b      	ldr	r3, [r5, #0]
 8011958:	0029      	movs	r1, r5
 801195a:	19db      	adds	r3, r3, r7
 801195c:	602b      	str	r3, [r5, #0]
 801195e:	2300      	movs	r3, #0
 8011960:	606b      	str	r3, [r5, #4]
 8011962:	9b01      	ldr	r3, [sp, #4]
 8011964:	9805      	ldr	r0, [sp, #20]
 8011966:	19db      	adds	r3, r3, r7
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	1bf3      	subs	r3, r6, r7
 801196c:	9304      	str	r3, [sp, #16]
 801196e:	f7ff ffc1 	bl	80118f4 <__ssrefill_r>
 8011972:	2800      	cmp	r0, #0
 8011974:	d006      	beq.n	8011984 <_sfread_r+0x52>
 8011976:	193c      	adds	r4, r7, r4
 8011978:	1ba0      	subs	r0, r4, r6
 801197a:	9902      	ldr	r1, [sp, #8]
 801197c:	f7ee fbde 	bl	800013c <__udivsi3>
 8011980:	0004      	movs	r4, r0
 8011982:	e7e1      	b.n	8011948 <_sfread_r+0x16>
 8011984:	9e04      	ldr	r6, [sp, #16]
 8011986:	686f      	ldr	r7, [r5, #4]
 8011988:	6829      	ldr	r1, [r5, #0]
 801198a:	42b7      	cmp	r7, r6
 801198c:	d3df      	bcc.n	801194e <_sfread_r+0x1c>
 801198e:	0032      	movs	r2, r6
 8011990:	9801      	ldr	r0, [sp, #4]
 8011992:	f7fa fd4c 	bl	800c42e <memcpy>
 8011996:	686b      	ldr	r3, [r5, #4]
 8011998:	9c03      	ldr	r4, [sp, #12]
 801199a:	1b9b      	subs	r3, r3, r6
 801199c:	606b      	str	r3, [r5, #4]
 801199e:	682b      	ldr	r3, [r5, #0]
 80119a0:	199b      	adds	r3, r3, r6
 80119a2:	602b      	str	r3, [r5, #0]
 80119a4:	e7d0      	b.n	8011948 <_sfread_r+0x16>

080119a6 <__sprint_r>:
 80119a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119a8:	6893      	ldr	r3, [r2, #8]
 80119aa:	b085      	sub	sp, #20
 80119ac:	9001      	str	r0, [sp, #4]
 80119ae:	000d      	movs	r5, r1
 80119b0:	0014      	movs	r4, r2
 80119b2:	1e18      	subs	r0, r3, #0
 80119b4:	d018      	beq.n	80119e8 <__sprint_r+0x42>
 80119b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80119b8:	049b      	lsls	r3, r3, #18
 80119ba:	d524      	bpl.n	8011a06 <__sprint_r+0x60>
 80119bc:	6817      	ldr	r7, [r2, #0]
 80119be:	2600      	movs	r6, #0
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	9302      	str	r3, [sp, #8]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	089b      	lsrs	r3, r3, #2
 80119ca:	9303      	str	r3, [sp, #12]
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	42b3      	cmp	r3, r6
 80119d0:	dc0e      	bgt.n	80119f0 <__sprint_r+0x4a>
 80119d2:	2203      	movs	r2, #3
 80119d4:	9b00      	ldr	r3, [sp, #0]
 80119d6:	68a0      	ldr	r0, [r4, #8]
 80119d8:	4393      	bics	r3, r2
 80119da:	1ac0      	subs	r0, r0, r3
 80119dc:	60a0      	str	r0, [r4, #8]
 80119de:	3708      	adds	r7, #8
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1ec      	bne.n	80119be <__sprint_r+0x18>
 80119e4:	2300      	movs	r3, #0
 80119e6:	60a3      	str	r3, [r4, #8]
 80119e8:	2300      	movs	r3, #0
 80119ea:	6063      	str	r3, [r4, #4]
 80119ec:	b005      	add	sp, #20
 80119ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119f0:	9902      	ldr	r1, [sp, #8]
 80119f2:	00b3      	lsls	r3, r6, #2
 80119f4:	58c9      	ldr	r1, [r1, r3]
 80119f6:	002a      	movs	r2, r5
 80119f8:	9801      	ldr	r0, [sp, #4]
 80119fa:	f000 ff59 	bl	80128b0 <_fputwc_r>
 80119fe:	1c43      	adds	r3, r0, #1
 8011a00:	d0f0      	beq.n	80119e4 <__sprint_r+0x3e>
 8011a02:	3601      	adds	r6, #1
 8011a04:	e7e2      	b.n	80119cc <__sprint_r+0x26>
 8011a06:	9801      	ldr	r0, [sp, #4]
 8011a08:	f000 fd14 	bl	8012434 <__sfvwrite_r>
 8011a0c:	e7ea      	b.n	80119e4 <__sprint_r+0x3e>
	...

08011a10 <_vfiprintf_r>:
 8011a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a12:	b0c1      	sub	sp, #260	; 0x104
 8011a14:	001c      	movs	r4, r3
 8011a16:	001f      	movs	r7, r3
 8011a18:	9006      	str	r0, [sp, #24]
 8011a1a:	9103      	str	r1, [sp, #12]
 8011a1c:	9207      	str	r2, [sp, #28]
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d004      	beq.n	8011a2c <_vfiprintf_r+0x1c>
 8011a22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <_vfiprintf_r+0x1c>
 8011a28:	f7fa fad6 	bl	800bfd8 <__sinit>
 8011a2c:	9b03      	ldr	r3, [sp, #12]
 8011a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a30:	07db      	lsls	r3, r3, #31
 8011a32:	d407      	bmi.n	8011a44 <_vfiprintf_r+0x34>
 8011a34:	9b03      	ldr	r3, [sp, #12]
 8011a36:	899b      	ldrh	r3, [r3, #12]
 8011a38:	059b      	lsls	r3, r3, #22
 8011a3a:	d403      	bmi.n	8011a44 <_vfiprintf_r+0x34>
 8011a3c:	9b03      	ldr	r3, [sp, #12]
 8011a3e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011a40:	f7fa fce8 	bl	800c414 <__retarget_lock_acquire_recursive>
 8011a44:	9b03      	ldr	r3, [sp, #12]
 8011a46:	220c      	movs	r2, #12
 8011a48:	5e9a      	ldrsh	r2, [r3, r2]
 8011a4a:	2380      	movs	r3, #128	; 0x80
 8011a4c:	019b      	lsls	r3, r3, #6
 8011a4e:	421a      	tst	r2, r3
 8011a50:	d107      	bne.n	8011a62 <_vfiprintf_r+0x52>
 8011a52:	4313      	orrs	r3, r2
 8011a54:	9a03      	ldr	r2, [sp, #12]
 8011a56:	8193      	strh	r3, [r2, #12]
 8011a58:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011a5a:	4aa3      	ldr	r2, [pc, #652]	; (8011ce8 <_vfiprintf_r+0x2d8>)
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	9a03      	ldr	r2, [sp, #12]
 8011a60:	6653      	str	r3, [r2, #100]	; 0x64
 8011a62:	9b03      	ldr	r3, [sp, #12]
 8011a64:	899b      	ldrh	r3, [r3, #12]
 8011a66:	071b      	lsls	r3, r3, #28
 8011a68:	d503      	bpl.n	8011a72 <_vfiprintf_r+0x62>
 8011a6a:	9b03      	ldr	r3, [sp, #12]
 8011a6c:	691b      	ldr	r3, [r3, #16]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d118      	bne.n	8011aa4 <_vfiprintf_r+0x94>
 8011a72:	9903      	ldr	r1, [sp, #12]
 8011a74:	9806      	ldr	r0, [sp, #24]
 8011a76:	f000 fe79 	bl	801276c <__swsetup_r>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d012      	beq.n	8011aa4 <_vfiprintf_r+0x94>
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a82:	07db      	lsls	r3, r3, #31
 8011a84:	d505      	bpl.n	8011a92 <_vfiprintf_r+0x82>
 8011a86:	2301      	movs	r3, #1
 8011a88:	425b      	negs	r3, r3
 8011a8a:	9308      	str	r3, [sp, #32]
 8011a8c:	9808      	ldr	r0, [sp, #32]
 8011a8e:	b041      	add	sp, #260	; 0x104
 8011a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a92:	9b03      	ldr	r3, [sp, #12]
 8011a94:	899b      	ldrh	r3, [r3, #12]
 8011a96:	059b      	lsls	r3, r3, #22
 8011a98:	d4f5      	bmi.n	8011a86 <_vfiprintf_r+0x76>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011a9e:	f7fa fcba 	bl	800c416 <__retarget_lock_release_recursive>
 8011aa2:	e7f0      	b.n	8011a86 <_vfiprintf_r+0x76>
 8011aa4:	221a      	movs	r2, #26
 8011aa6:	9b03      	ldr	r3, [sp, #12]
 8011aa8:	899b      	ldrh	r3, [r3, #12]
 8011aaa:	401a      	ands	r2, r3
 8011aac:	2a0a      	cmp	r2, #10
 8011aae:	d116      	bne.n	8011ade <_vfiprintf_r+0xce>
 8011ab0:	9a03      	ldr	r2, [sp, #12]
 8011ab2:	210e      	movs	r1, #14
 8011ab4:	5e52      	ldrsh	r2, [r2, r1]
 8011ab6:	2a00      	cmp	r2, #0
 8011ab8:	db11      	blt.n	8011ade <_vfiprintf_r+0xce>
 8011aba:	9a03      	ldr	r2, [sp, #12]
 8011abc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011abe:	07d2      	lsls	r2, r2, #31
 8011ac0:	d405      	bmi.n	8011ace <_vfiprintf_r+0xbe>
 8011ac2:	059b      	lsls	r3, r3, #22
 8011ac4:	d403      	bmi.n	8011ace <_vfiprintf_r+0xbe>
 8011ac6:	9b03      	ldr	r3, [sp, #12]
 8011ac8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011aca:	f7fa fca4 	bl	800c416 <__retarget_lock_release_recursive>
 8011ace:	0023      	movs	r3, r4
 8011ad0:	9a07      	ldr	r2, [sp, #28]
 8011ad2:	9903      	ldr	r1, [sp, #12]
 8011ad4:	9806      	ldr	r0, [sp, #24]
 8011ad6:	f000 fc69 	bl	80123ac <__sbprintf>
 8011ada:	9008      	str	r0, [sp, #32]
 8011adc:	e7d6      	b.n	8011a8c <_vfiprintf_r+0x7c>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	ad17      	add	r5, sp, #92	; 0x5c
 8011ae2:	9514      	str	r5, [sp, #80]	; 0x50
 8011ae4:	9316      	str	r3, [sp, #88]	; 0x58
 8011ae6:	9315      	str	r3, [sp, #84]	; 0x54
 8011ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8011aea:	930d      	str	r3, [sp, #52]	; 0x34
 8011aec:	930e      	str	r3, [sp, #56]	; 0x38
 8011aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8011af0:	9308      	str	r3, [sp, #32]
 8011af2:	9c07      	ldr	r4, [sp, #28]
 8011af4:	7823      	ldrb	r3, [r4, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d002      	beq.n	8011b00 <_vfiprintf_r+0xf0>
 8011afa:	2b25      	cmp	r3, #37	; 0x25
 8011afc:	d000      	beq.n	8011b00 <_vfiprintf_r+0xf0>
 8011afe:	e08d      	b.n	8011c1c <_vfiprintf_r+0x20c>
 8011b00:	9b07      	ldr	r3, [sp, #28]
 8011b02:	1ae6      	subs	r6, r4, r3
 8011b04:	429c      	cmp	r4, r3
 8011b06:	d016      	beq.n	8011b36 <_vfiprintf_r+0x126>
 8011b08:	602b      	str	r3, [r5, #0]
 8011b0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011b0c:	606e      	str	r6, [r5, #4]
 8011b0e:	199b      	adds	r3, r3, r6
 8011b10:	9316      	str	r3, [sp, #88]	; 0x58
 8011b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b14:	3508      	adds	r5, #8
 8011b16:	3301      	adds	r3, #1
 8011b18:	9315      	str	r3, [sp, #84]	; 0x54
 8011b1a:	2b07      	cmp	r3, #7
 8011b1c:	dd08      	ble.n	8011b30 <_vfiprintf_r+0x120>
 8011b1e:	9903      	ldr	r1, [sp, #12]
 8011b20:	9806      	ldr	r0, [sp, #24]
 8011b22:	aa14      	add	r2, sp, #80	; 0x50
 8011b24:	f7ff ff3f 	bl	80119a6 <__sprint_r>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d000      	beq.n	8011b2e <_vfiprintf_r+0x11e>
 8011b2c:	e3d9      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011b2e:	ad17      	add	r5, sp, #92	; 0x5c
 8011b30:	9b08      	ldr	r3, [sp, #32]
 8011b32:	199b      	adds	r3, r3, r6
 8011b34:	9308      	str	r3, [sp, #32]
 8011b36:	7823      	ldrb	r3, [r4, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d101      	bne.n	8011b40 <_vfiprintf_r+0x130>
 8011b3c:	f000 fbf6 	bl	801232c <_vfiprintf_r+0x91c>
 8011b40:	2200      	movs	r2, #0
 8011b42:	a912      	add	r1, sp, #72	; 0x48
 8011b44:	70ca      	strb	r2, [r1, #3]
 8011b46:	2101      	movs	r1, #1
 8011b48:	1c63      	adds	r3, r4, #1
 8011b4a:	0014      	movs	r4, r2
 8011b4c:	4249      	negs	r1, r1
 8011b4e:	9105      	str	r1, [sp, #20]
 8011b50:	9209      	str	r2, [sp, #36]	; 0x24
 8011b52:	1c5a      	adds	r2, r3, #1
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	9207      	str	r2, [sp, #28]
 8011b58:	0018      	movs	r0, r3
 8011b5a:	3820      	subs	r0, #32
 8011b5c:	285a      	cmp	r0, #90	; 0x5a
 8011b5e:	d900      	bls.n	8011b62 <_vfiprintf_r+0x152>
 8011b60:	e362      	b.n	8012228 <_vfiprintf_r+0x818>
 8011b62:	f7ee fae1 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011b66:	0078      	.short	0x0078
 8011b68:	03610361 	.word	0x03610361
 8011b6c:	03610081 	.word	0x03610081
 8011b70:	03610361 	.word	0x03610361
 8011b74:	0361005d 	.word	0x0361005d
 8011b78:	00830361 	.word	0x00830361
 8011b7c:	0361008b 	.word	0x0361008b
 8011b80:	008f0089 	.word	0x008f0089
 8011b84:	00ad0361 	.word	0x00ad0361
 8011b88:	00af00af 	.word	0x00af00af
 8011b8c:	00af00af 	.word	0x00af00af
 8011b90:	00af00af 	.word	0x00af00af
 8011b94:	00af00af 	.word	0x00af00af
 8011b98:	036100af 	.word	0x036100af
 8011b9c:	03610361 	.word	0x03610361
 8011ba0:	03610361 	.word	0x03610361
 8011ba4:	03610361 	.word	0x03610361
 8011ba8:	03610361 	.word	0x03610361
 8011bac:	00e600da 	.word	0x00e600da
 8011bb0:	03610361 	.word	0x03610361
 8011bb4:	03610361 	.word	0x03610361
 8011bb8:	03610361 	.word	0x03610361
 8011bbc:	03610361 	.word	0x03610361
 8011bc0:	03610361 	.word	0x03610361
 8011bc4:	03610143 	.word	0x03610143
 8011bc8:	03610361 	.word	0x03610361
 8011bcc:	03610182 	.word	0x03610182
 8011bd0:	0361027c 	.word	0x0361027c
 8011bd4:	02ae0361 	.word	0x02ae0361
 8011bd8:	03610361 	.word	0x03610361
 8011bdc:	03610361 	.word	0x03610361
 8011be0:	03610361 	.word	0x03610361
 8011be4:	03610361 	.word	0x03610361
 8011be8:	03610361 	.word	0x03610361
 8011bec:	00e800da 	.word	0x00e800da
 8011bf0:	03610361 	.word	0x03610361
 8011bf4:	00c30361 	.word	0x00c30361
 8011bf8:	00d600e8 	.word	0x00d600e8
 8011bfc:	00cf0361 	.word	0x00cf0361
 8011c00:	01260361 	.word	0x01260361
 8011c04:	01740145 	.word	0x01740145
 8011c08:	036100d6 	.word	0x036100d6
 8011c0c:	007f0182 	.word	0x007f0182
 8011c10:	0361027e 	.word	0x0361027e
 8011c14:	02cd0361 	.word	0x02cd0361
 8011c18:	007f0361 	.word	0x007f0361
 8011c1c:	3401      	adds	r4, #1
 8011c1e:	e769      	b.n	8011af4 <_vfiprintf_r+0xe4>
 8011c20:	9806      	ldr	r0, [sp, #24]
 8011c22:	f7fe facd 	bl	80101c0 <_localeconv_r>
 8011c26:	6843      	ldr	r3, [r0, #4]
 8011c28:	0018      	movs	r0, r3
 8011c2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c2c:	f7ee fa6a 	bl	8000104 <strlen>
 8011c30:	900e      	str	r0, [sp, #56]	; 0x38
 8011c32:	9806      	ldr	r0, [sp, #24]
 8011c34:	f7fe fac4 	bl	80101c0 <_localeconv_r>
 8011c38:	6883      	ldr	r3, [r0, #8]
 8011c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8011c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d010      	beq.n	8011c64 <_vfiprintf_r+0x254>
 8011c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00d      	beq.n	8011c64 <_vfiprintf_r+0x254>
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00a      	beq.n	8011c64 <_vfiprintf_r+0x254>
 8011c4e:	2380      	movs	r3, #128	; 0x80
 8011c50:	00db      	lsls	r3, r3, #3
 8011c52:	431c      	orrs	r4, r3
 8011c54:	e006      	b.n	8011c64 <_vfiprintf_r+0x254>
 8011c56:	ab12      	add	r3, sp, #72	; 0x48
 8011c58:	78da      	ldrb	r2, [r3, #3]
 8011c5a:	3303      	adds	r3, #3
 8011c5c:	2a00      	cmp	r2, #0
 8011c5e:	d101      	bne.n	8011c64 <_vfiprintf_r+0x254>
 8011c60:	3220      	adds	r2, #32
 8011c62:	701a      	strb	r2, [r3, #0]
 8011c64:	9b07      	ldr	r3, [sp, #28]
 8011c66:	e774      	b.n	8011b52 <_vfiprintf_r+0x142>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e7f2      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011c6c:	cf08      	ldmia	r7!, {r3}
 8011c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	daf7      	bge.n	8011c64 <_vfiprintf_r+0x254>
 8011c74:	425b      	negs	r3, r3
 8011c76:	9309      	str	r3, [sp, #36]	; 0x24
 8011c78:	2304      	movs	r3, #4
 8011c7a:	e7ea      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011c7c:	222b      	movs	r2, #43	; 0x2b
 8011c7e:	ab12      	add	r3, sp, #72	; 0x48
 8011c80:	70da      	strb	r2, [r3, #3]
 8011c82:	e7ef      	b.n	8011c64 <_vfiprintf_r+0x254>
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	1c5a      	adds	r2, r3, #1
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c8c:	d00f      	beq.n	8011cae <_vfiprintf_r+0x29e>
 8011c8e:	2100      	movs	r1, #0
 8011c90:	9105      	str	r1, [sp, #20]
 8011c92:	0019      	movs	r1, r3
 8011c94:	3930      	subs	r1, #48	; 0x30
 8011c96:	9207      	str	r2, [sp, #28]
 8011c98:	2909      	cmp	r1, #9
 8011c9a:	d900      	bls.n	8011c9e <_vfiprintf_r+0x28e>
 8011c9c:	e75c      	b.n	8011b58 <_vfiprintf_r+0x148>
 8011c9e:	200a      	movs	r0, #10
 8011ca0:	9b05      	ldr	r3, [sp, #20]
 8011ca2:	4343      	muls	r3, r0
 8011ca4:	185b      	adds	r3, r3, r1
 8011ca6:	9305      	str	r3, [sp, #20]
 8011ca8:	7813      	ldrb	r3, [r2, #0]
 8011caa:	3201      	adds	r2, #1
 8011cac:	e7f1      	b.n	8011c92 <_vfiprintf_r+0x282>
 8011cae:	cf08      	ldmia	r7!, {r3}
 8011cb0:	9305      	str	r3, [sp, #20]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	da02      	bge.n	8011cbc <_vfiprintf_r+0x2ac>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	425b      	negs	r3, r3
 8011cba:	9305      	str	r3, [sp, #20]
 8011cbc:	9207      	str	r2, [sp, #28]
 8011cbe:	e7d1      	b.n	8011c64 <_vfiprintf_r+0x254>
 8011cc0:	2380      	movs	r3, #128	; 0x80
 8011cc2:	e7c6      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	9a07      	ldr	r2, [sp, #28]
 8011cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8011cca:	200a      	movs	r0, #10
 8011ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cce:	3b30      	subs	r3, #48	; 0x30
 8011cd0:	4341      	muls	r1, r0
 8011cd2:	185b      	adds	r3, r3, r1
 8011cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd6:	0013      	movs	r3, r2
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	3201      	adds	r2, #1
 8011cdc:	0019      	movs	r1, r3
 8011cde:	3930      	subs	r1, #48	; 0x30
 8011ce0:	9207      	str	r2, [sp, #28]
 8011ce2:	2909      	cmp	r1, #9
 8011ce4:	d9f1      	bls.n	8011cca <_vfiprintf_r+0x2ba>
 8011ce6:	e737      	b.n	8011b58 <_vfiprintf_r+0x148>
 8011ce8:	ffffdfff 	.word	0xffffdfff
 8011cec:	9b07      	ldr	r3, [sp, #28]
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	2b68      	cmp	r3, #104	; 0x68
 8011cf2:	d105      	bne.n	8011d00 <_vfiprintf_r+0x2f0>
 8011cf4:	9b07      	ldr	r3, [sp, #28]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	9307      	str	r3, [sp, #28]
 8011cfa:	2380      	movs	r3, #128	; 0x80
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	e7a8      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011d00:	2340      	movs	r3, #64	; 0x40
 8011d02:	e7a6      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011d04:	9b07      	ldr	r3, [sp, #28]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	2b6c      	cmp	r3, #108	; 0x6c
 8011d0a:	d104      	bne.n	8011d16 <_vfiprintf_r+0x306>
 8011d0c:	9b07      	ldr	r3, [sp, #28]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	9307      	str	r3, [sp, #28]
 8011d12:	2320      	movs	r3, #32
 8011d14:	e79d      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011d16:	2310      	movs	r3, #16
 8011d18:	e79b      	b.n	8011c52 <_vfiprintf_r+0x242>
 8011d1a:	003a      	movs	r2, r7
 8011d1c:	ca08      	ldmia	r2!, {r3}
 8011d1e:	ae27      	add	r6, sp, #156	; 0x9c
 8011d20:	7033      	strb	r3, [r6, #0]
 8011d22:	2300      	movs	r3, #0
 8011d24:	9204      	str	r2, [sp, #16]
 8011d26:	aa12      	add	r2, sp, #72	; 0x48
 8011d28:	70d3      	strb	r3, [r2, #3]
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d2e:	9205      	str	r2, [sp, #20]
 8011d30:	e0b0      	b.n	8011e94 <_vfiprintf_r+0x484>
 8011d32:	2310      	movs	r3, #16
 8011d34:	431c      	orrs	r4, r3
 8011d36:	06a3      	lsls	r3, r4, #26
 8011d38:	d52a      	bpl.n	8011d90 <_vfiprintf_r+0x380>
 8011d3a:	2307      	movs	r3, #7
 8011d3c:	3707      	adds	r7, #7
 8011d3e:	439f      	bics	r7, r3
 8011d40:	0039      	movs	r1, r7
 8011d42:	c90c      	ldmia	r1!, {r2, r3}
 8011d44:	9200      	str	r2, [sp, #0]
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	9104      	str	r1, [sp, #16]
 8011d4a:	9a01      	ldr	r2, [sp, #4]
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	2a00      	cmp	r2, #0
 8011d50:	da09      	bge.n	8011d66 <_vfiprintf_r+0x356>
 8011d52:	9e00      	ldr	r6, [sp, #0]
 8011d54:	9f01      	ldr	r7, [sp, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	4271      	negs	r1, r6
 8011d5a:	41ba      	sbcs	r2, r7
 8011d5c:	9100      	str	r1, [sp, #0]
 8011d5e:	9201      	str	r2, [sp, #4]
 8011d60:	212d      	movs	r1, #45	; 0x2d
 8011d62:	aa12      	add	r2, sp, #72	; 0x48
 8011d64:	70d1      	strb	r1, [r2, #3]
 8011d66:	9901      	ldr	r1, [sp, #4]
 8011d68:	9a00      	ldr	r2, [sp, #0]
 8011d6a:	430a      	orrs	r2, r1
 8011d6c:	9905      	ldr	r1, [sp, #20]
 8011d6e:	3101      	adds	r1, #1
 8011d70:	d100      	bne.n	8011d74 <_vfiprintf_r+0x364>
 8011d72:	e2e9      	b.n	8012348 <_vfiprintf_r+0x938>
 8011d74:	2180      	movs	r1, #128	; 0x80
 8011d76:	0027      	movs	r7, r4
 8011d78:	438f      	bics	r7, r1
 8011d7a:	2a00      	cmp	r2, #0
 8011d7c:	d000      	beq.n	8011d80 <_vfiprintf_r+0x370>
 8011d7e:	e2e7      	b.n	8012350 <_vfiprintf_r+0x940>
 8011d80:	9a05      	ldr	r2, [sp, #20]
 8011d82:	2a00      	cmp	r2, #0
 8011d84:	d100      	bne.n	8011d88 <_vfiprintf_r+0x378>
 8011d86:	e243      	b.n	8012210 <_vfiprintf_r+0x800>
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d000      	beq.n	8011d8e <_vfiprintf_r+0x37e>
 8011d8c:	e2e3      	b.n	8012356 <_vfiprintf_r+0x946>
 8011d8e:	e1e7      	b.n	8012160 <_vfiprintf_r+0x750>
 8011d90:	003a      	movs	r2, r7
 8011d92:	ca08      	ldmia	r2!, {r3}
 8011d94:	9204      	str	r2, [sp, #16]
 8011d96:	06e2      	lsls	r2, r4, #27
 8011d98:	d503      	bpl.n	8011da2 <_vfiprintf_r+0x392>
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	17db      	asrs	r3, r3, #31
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	e7d3      	b.n	8011d4a <_vfiprintf_r+0x33a>
 8011da2:	0662      	lsls	r2, r4, #25
 8011da4:	d501      	bpl.n	8011daa <_vfiprintf_r+0x39a>
 8011da6:	b21b      	sxth	r3, r3
 8011da8:	e7f7      	b.n	8011d9a <_vfiprintf_r+0x38a>
 8011daa:	05a2      	lsls	r2, r4, #22
 8011dac:	d5f5      	bpl.n	8011d9a <_vfiprintf_r+0x38a>
 8011dae:	b25b      	sxtb	r3, r3
 8011db0:	e7f3      	b.n	8011d9a <_vfiprintf_r+0x38a>
 8011db2:	1d3b      	adds	r3, r7, #4
 8011db4:	9304      	str	r3, [sp, #16]
 8011db6:	06a3      	lsls	r3, r4, #26
 8011db8:	d506      	bpl.n	8011dc8 <_vfiprintf_r+0x3b8>
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	9a08      	ldr	r2, [sp, #32]
 8011dbe:	601a      	str	r2, [r3, #0]
 8011dc0:	17d2      	asrs	r2, r2, #31
 8011dc2:	605a      	str	r2, [r3, #4]
 8011dc4:	9f04      	ldr	r7, [sp, #16]
 8011dc6:	e694      	b.n	8011af2 <_vfiprintf_r+0xe2>
 8011dc8:	06e3      	lsls	r3, r4, #27
 8011dca:	d503      	bpl.n	8011dd4 <_vfiprintf_r+0x3c4>
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	9a08      	ldr	r2, [sp, #32]
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	e7f7      	b.n	8011dc4 <_vfiprintf_r+0x3b4>
 8011dd4:	0663      	lsls	r3, r4, #25
 8011dd6:	d503      	bpl.n	8011de0 <_vfiprintf_r+0x3d0>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	9a08      	ldr	r2, [sp, #32]
 8011ddc:	801a      	strh	r2, [r3, #0]
 8011dde:	e7f1      	b.n	8011dc4 <_vfiprintf_r+0x3b4>
 8011de0:	05a4      	lsls	r4, r4, #22
 8011de2:	d5f3      	bpl.n	8011dcc <_vfiprintf_r+0x3bc>
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	9a08      	ldr	r2, [sp, #32]
 8011de8:	701a      	strb	r2, [r3, #0]
 8011dea:	e7eb      	b.n	8011dc4 <_vfiprintf_r+0x3b4>
 8011dec:	2310      	movs	r3, #16
 8011dee:	431c      	orrs	r4, r3
 8011df0:	2320      	movs	r3, #32
 8011df2:	0020      	movs	r0, r4
 8011df4:	4018      	ands	r0, r3
 8011df6:	421c      	tst	r4, r3
 8011df8:	d00d      	beq.n	8011e16 <_vfiprintf_r+0x406>
 8011dfa:	3b19      	subs	r3, #25
 8011dfc:	3707      	adds	r7, #7
 8011dfe:	439f      	bics	r7, r3
 8011e00:	0039      	movs	r1, r7
 8011e02:	c90c      	ldmia	r1!, {r2, r3}
 8011e04:	9200      	str	r2, [sp, #0]
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	9104      	str	r1, [sp, #16]
 8011e0a:	4bcc      	ldr	r3, [pc, #816]	; (801213c <_vfiprintf_r+0x72c>)
 8011e0c:	401c      	ands	r4, r3
 8011e0e:	2300      	movs	r3, #0
 8011e10:	2100      	movs	r1, #0
 8011e12:	aa12      	add	r2, sp, #72	; 0x48
 8011e14:	e7a6      	b.n	8011d64 <_vfiprintf_r+0x354>
 8011e16:	003a      	movs	r2, r7
 8011e18:	ca08      	ldmia	r2!, {r3}
 8011e1a:	0021      	movs	r1, r4
 8011e1c:	9204      	str	r2, [sp, #16]
 8011e1e:	2210      	movs	r2, #16
 8011e20:	4011      	ands	r1, r2
 8011e22:	4214      	tst	r4, r2
 8011e24:	d002      	beq.n	8011e2c <_vfiprintf_r+0x41c>
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	9001      	str	r0, [sp, #4]
 8011e2a:	e7ee      	b.n	8011e0a <_vfiprintf_r+0x3fa>
 8011e2c:	2240      	movs	r2, #64	; 0x40
 8011e2e:	0020      	movs	r0, r4
 8011e30:	4010      	ands	r0, r2
 8011e32:	4214      	tst	r4, r2
 8011e34:	d003      	beq.n	8011e3e <_vfiprintf_r+0x42e>
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	9101      	str	r1, [sp, #4]
 8011e3c:	e7e5      	b.n	8011e0a <_vfiprintf_r+0x3fa>
 8011e3e:	2280      	movs	r2, #128	; 0x80
 8011e40:	0021      	movs	r1, r4
 8011e42:	0092      	lsls	r2, r2, #2
 8011e44:	4011      	ands	r1, r2
 8011e46:	4214      	tst	r4, r2
 8011e48:	d0f6      	beq.n	8011e38 <_vfiprintf_r+0x428>
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	e7eb      	b.n	8011e26 <_vfiprintf_r+0x416>
 8011e4e:	003b      	movs	r3, r7
 8011e50:	cb04      	ldmia	r3!, {r2}
 8011e52:	49bb      	ldr	r1, [pc, #748]	; (8012140 <_vfiprintf_r+0x730>)
 8011e54:	9304      	str	r3, [sp, #16]
 8011e56:	2300      	movs	r3, #0
 8011e58:	9200      	str	r2, [sp, #0]
 8011e5a:	aa13      	add	r2, sp, #76	; 0x4c
 8011e5c:	8011      	strh	r1, [r2, #0]
 8011e5e:	4ab9      	ldr	r2, [pc, #740]	; (8012144 <_vfiprintf_r+0x734>)
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	3302      	adds	r3, #2
 8011e64:	431c      	orrs	r4, r3
 8011e66:	920c      	str	r2, [sp, #48]	; 0x30
 8011e68:	e7d2      	b.n	8011e10 <_vfiprintf_r+0x400>
 8011e6a:	003b      	movs	r3, r7
 8011e6c:	2700      	movs	r7, #0
 8011e6e:	cb40      	ldmia	r3!, {r6}
 8011e70:	9304      	str	r3, [sp, #16]
 8011e72:	ab12      	add	r3, sp, #72	; 0x48
 8011e74:	70df      	strb	r7, [r3, #3]
 8011e76:	9b05      	ldr	r3, [sp, #20]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	d100      	bne.n	8011e7e <_vfiprintf_r+0x46e>
 8011e7c:	e0ea      	b.n	8012054 <_vfiprintf_r+0x644>
 8011e7e:	0039      	movs	r1, r7
 8011e80:	0030      	movs	r0, r6
 8011e82:	9a05      	ldr	r2, [sp, #20]
 8011e84:	f7fe f9b4 	bl	80101f0 <memchr>
 8011e88:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e8a:	42b8      	cmp	r0, r7
 8011e8c:	d002      	beq.n	8011e94 <_vfiprintf_r+0x484>
 8011e8e:	1b83      	subs	r3, r0, r6
 8011e90:	9305      	str	r3, [sp, #20]
 8011e92:	970b      	str	r7, [sp, #44]	; 0x2c
 8011e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e96:	9a05      	ldr	r2, [sp, #20]
 8011e98:	930a      	str	r3, [sp, #40]	; 0x28
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	da00      	bge.n	8011ea0 <_vfiprintf_r+0x490>
 8011e9e:	920a      	str	r2, [sp, #40]	; 0x28
 8011ea0:	ab12      	add	r3, sp, #72	; 0x48
 8011ea2:	3303      	adds	r3, #3
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	1e5a      	subs	r2, r3, #1
 8011ea8:	4193      	sbcs	r3, r2
 8011eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eac:	18d3      	adds	r3, r2, r3
 8011eae:	930a      	str	r3, [sp, #40]	; 0x28
 8011eb0:	0022      	movs	r2, r4
 8011eb2:	2302      	movs	r3, #2
 8011eb4:	401a      	ands	r2, r3
 8011eb6:	9210      	str	r2, [sp, #64]	; 0x40
 8011eb8:	421c      	tst	r4, r3
 8011eba:	d002      	beq.n	8011ec2 <_vfiprintf_r+0x4b2>
 8011ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ebe:	3302      	adds	r3, #2
 8011ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ec2:	2384      	movs	r3, #132	; 0x84
 8011ec4:	0022      	movs	r2, r4
 8011ec6:	401a      	ands	r2, r3
 8011ec8:	9211      	str	r2, [sp, #68]	; 0x44
 8011eca:	421c      	tst	r4, r3
 8011ecc:	d11e      	bne.n	8011f0c <_vfiprintf_r+0x4fc>
 8011ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ed2:	1a9f      	subs	r7, r3, r2
 8011ed4:	2f00      	cmp	r7, #0
 8011ed6:	dd19      	ble.n	8011f0c <_vfiprintf_r+0x4fc>
 8011ed8:	0029      	movs	r1, r5
 8011eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011edc:	489a      	ldr	r0, [pc, #616]	; (8012148 <_vfiprintf_r+0x738>)
 8011ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	3108      	adds	r1, #8
 8011ee4:	6028      	str	r0, [r5, #0]
 8011ee6:	2f10      	cmp	r7, #16
 8011ee8:	dd00      	ble.n	8011eec <_vfiprintf_r+0x4dc>
 8011eea:	e1a7      	b.n	801223c <_vfiprintf_r+0x82c>
 8011eec:	606f      	str	r7, [r5, #4]
 8011eee:	18bf      	adds	r7, r7, r2
 8011ef0:	000d      	movs	r5, r1
 8011ef2:	9716      	str	r7, [sp, #88]	; 0x58
 8011ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8011ef6:	2b07      	cmp	r3, #7
 8011ef8:	dd08      	ble.n	8011f0c <_vfiprintf_r+0x4fc>
 8011efa:	9903      	ldr	r1, [sp, #12]
 8011efc:	9806      	ldr	r0, [sp, #24]
 8011efe:	aa14      	add	r2, sp, #80	; 0x50
 8011f00:	f7ff fd51 	bl	80119a6 <__sprint_r>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	d000      	beq.n	8011f0a <_vfiprintf_r+0x4fa>
 8011f08:	e1eb      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011f0a:	ad17      	add	r5, sp, #92	; 0x5c
 8011f0c:	a912      	add	r1, sp, #72	; 0x48
 8011f0e:	78c8      	ldrb	r0, [r1, #3]
 8011f10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f14:	3103      	adds	r1, #3
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d012      	beq.n	8011f40 <_vfiprintf_r+0x530>
 8011f1a:	6029      	str	r1, [r5, #0]
 8011f1c:	2101      	movs	r1, #1
 8011f1e:	3301      	adds	r3, #1
 8011f20:	1852      	adds	r2, r2, r1
 8011f22:	6069      	str	r1, [r5, #4]
 8011f24:	9216      	str	r2, [sp, #88]	; 0x58
 8011f26:	9315      	str	r3, [sp, #84]	; 0x54
 8011f28:	3508      	adds	r5, #8
 8011f2a:	2b07      	cmp	r3, #7
 8011f2c:	dd08      	ble.n	8011f40 <_vfiprintf_r+0x530>
 8011f2e:	9903      	ldr	r1, [sp, #12]
 8011f30:	9806      	ldr	r0, [sp, #24]
 8011f32:	aa14      	add	r2, sp, #80	; 0x50
 8011f34:	f7ff fd37 	bl	80119a6 <__sprint_r>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d000      	beq.n	8011f3e <_vfiprintf_r+0x52e>
 8011f3c:	e1d1      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011f3e:	ad17      	add	r5, sp, #92	; 0x5c
 8011f40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011f42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f46:	2900      	cmp	r1, #0
 8011f48:	d013      	beq.n	8011f72 <_vfiprintf_r+0x562>
 8011f4a:	a913      	add	r1, sp, #76	; 0x4c
 8011f4c:	6029      	str	r1, [r5, #0]
 8011f4e:	2102      	movs	r1, #2
 8011f50:	3301      	adds	r3, #1
 8011f52:	1852      	adds	r2, r2, r1
 8011f54:	6069      	str	r1, [r5, #4]
 8011f56:	9216      	str	r2, [sp, #88]	; 0x58
 8011f58:	9315      	str	r3, [sp, #84]	; 0x54
 8011f5a:	3508      	adds	r5, #8
 8011f5c:	2b07      	cmp	r3, #7
 8011f5e:	dd08      	ble.n	8011f72 <_vfiprintf_r+0x562>
 8011f60:	9903      	ldr	r1, [sp, #12]
 8011f62:	9806      	ldr	r0, [sp, #24]
 8011f64:	aa14      	add	r2, sp, #80	; 0x50
 8011f66:	f7ff fd1e 	bl	80119a6 <__sprint_r>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d000      	beq.n	8011f70 <_vfiprintf_r+0x560>
 8011f6e:	e1b8      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011f70:	ad17      	add	r5, sp, #92	; 0x5c
 8011f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f74:	2b80      	cmp	r3, #128	; 0x80
 8011f76:	d11e      	bne.n	8011fb6 <_vfiprintf_r+0x5a6>
 8011f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f7c:	1a9f      	subs	r7, r3, r2
 8011f7e:	2f00      	cmp	r7, #0
 8011f80:	dd19      	ble.n	8011fb6 <_vfiprintf_r+0x5a6>
 8011f82:	0029      	movs	r1, r5
 8011f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f86:	4871      	ldr	r0, [pc, #452]	; (801214c <_vfiprintf_r+0x73c>)
 8011f88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	3108      	adds	r1, #8
 8011f8e:	6028      	str	r0, [r5, #0]
 8011f90:	2f10      	cmp	r7, #16
 8011f92:	dd00      	ble.n	8011f96 <_vfiprintf_r+0x586>
 8011f94:	e164      	b.n	8012260 <_vfiprintf_r+0x850>
 8011f96:	606f      	str	r7, [r5, #4]
 8011f98:	18bf      	adds	r7, r7, r2
 8011f9a:	000d      	movs	r5, r1
 8011f9c:	9716      	str	r7, [sp, #88]	; 0x58
 8011f9e:	9315      	str	r3, [sp, #84]	; 0x54
 8011fa0:	2b07      	cmp	r3, #7
 8011fa2:	dd08      	ble.n	8011fb6 <_vfiprintf_r+0x5a6>
 8011fa4:	9903      	ldr	r1, [sp, #12]
 8011fa6:	9806      	ldr	r0, [sp, #24]
 8011fa8:	aa14      	add	r2, sp, #80	; 0x50
 8011faa:	f7ff fcfc 	bl	80119a6 <__sprint_r>
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d000      	beq.n	8011fb4 <_vfiprintf_r+0x5a4>
 8011fb2:	e196      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011fb4:	ad17      	add	r5, sp, #92	; 0x5c
 8011fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fb8:	9a05      	ldr	r2, [sp, #20]
 8011fba:	1a9f      	subs	r7, r3, r2
 8011fbc:	2f00      	cmp	r7, #0
 8011fbe:	dd19      	ble.n	8011ff4 <_vfiprintf_r+0x5e4>
 8011fc0:	0029      	movs	r1, r5
 8011fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fc4:	4861      	ldr	r0, [pc, #388]	; (801214c <_vfiprintf_r+0x73c>)
 8011fc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011fc8:	3301      	adds	r3, #1
 8011fca:	3108      	adds	r1, #8
 8011fcc:	6028      	str	r0, [r5, #0]
 8011fce:	2f10      	cmp	r7, #16
 8011fd0:	dd00      	ble.n	8011fd4 <_vfiprintf_r+0x5c4>
 8011fd2:	e157      	b.n	8012284 <_vfiprintf_r+0x874>
 8011fd4:	606f      	str	r7, [r5, #4]
 8011fd6:	18bf      	adds	r7, r7, r2
 8011fd8:	000d      	movs	r5, r1
 8011fda:	9716      	str	r7, [sp, #88]	; 0x58
 8011fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8011fde:	2b07      	cmp	r3, #7
 8011fe0:	dd08      	ble.n	8011ff4 <_vfiprintf_r+0x5e4>
 8011fe2:	9903      	ldr	r1, [sp, #12]
 8011fe4:	9806      	ldr	r0, [sp, #24]
 8011fe6:	aa14      	add	r2, sp, #80	; 0x50
 8011fe8:	f7ff fcdd 	bl	80119a6 <__sprint_r>
 8011fec:	2800      	cmp	r0, #0
 8011fee:	d000      	beq.n	8011ff2 <_vfiprintf_r+0x5e2>
 8011ff0:	e177      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8011ff2:	ad17      	add	r5, sp, #92	; 0x5c
 8011ff4:	9b05      	ldr	r3, [sp, #20]
 8011ff6:	9a05      	ldr	r2, [sp, #20]
 8011ff8:	606b      	str	r3, [r5, #4]
 8011ffa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ffc:	602e      	str	r6, [r5, #0]
 8011ffe:	189b      	adds	r3, r3, r2
 8012000:	9316      	str	r3, [sp, #88]	; 0x58
 8012002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012004:	3508      	adds	r5, #8
 8012006:	3301      	adds	r3, #1
 8012008:	9315      	str	r3, [sp, #84]	; 0x54
 801200a:	2b07      	cmp	r3, #7
 801200c:	dd08      	ble.n	8012020 <_vfiprintf_r+0x610>
 801200e:	9903      	ldr	r1, [sp, #12]
 8012010:	9806      	ldr	r0, [sp, #24]
 8012012:	aa14      	add	r2, sp, #80	; 0x50
 8012014:	f7ff fcc7 	bl	80119a6 <__sprint_r>
 8012018:	2800      	cmp	r0, #0
 801201a:	d000      	beq.n	801201e <_vfiprintf_r+0x60e>
 801201c:	e161      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 801201e:	ad17      	add	r5, sp, #92	; 0x5c
 8012020:	0764      	lsls	r4, r4, #29
 8012022:	d500      	bpl.n	8012026 <_vfiprintf_r+0x616>
 8012024:	e140      	b.n	80122a8 <_vfiprintf_r+0x898>
 8012026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801202a:	4293      	cmp	r3, r2
 801202c:	da00      	bge.n	8012030 <_vfiprintf_r+0x620>
 801202e:	0013      	movs	r3, r2
 8012030:	9a08      	ldr	r2, [sp, #32]
 8012032:	18d3      	adds	r3, r2, r3
 8012034:	9308      	str	r3, [sp, #32]
 8012036:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012038:	2b00      	cmp	r3, #0
 801203a:	d007      	beq.n	801204c <_vfiprintf_r+0x63c>
 801203c:	9903      	ldr	r1, [sp, #12]
 801203e:	9806      	ldr	r0, [sp, #24]
 8012040:	aa14      	add	r2, sp, #80	; 0x50
 8012042:	f7ff fcb0 	bl	80119a6 <__sprint_r>
 8012046:	2800      	cmp	r0, #0
 8012048:	d000      	beq.n	801204c <_vfiprintf_r+0x63c>
 801204a:	e14a      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 801204c:	2300      	movs	r3, #0
 801204e:	ad17      	add	r5, sp, #92	; 0x5c
 8012050:	9315      	str	r3, [sp, #84]	; 0x54
 8012052:	e6b7      	b.n	8011dc4 <_vfiprintf_r+0x3b4>
 8012054:	0030      	movs	r0, r6
 8012056:	f7ee f855 	bl	8000104 <strlen>
 801205a:	9005      	str	r0, [sp, #20]
 801205c:	e719      	b.n	8011e92 <_vfiprintf_r+0x482>
 801205e:	2310      	movs	r3, #16
 8012060:	431c      	orrs	r4, r3
 8012062:	2320      	movs	r3, #32
 8012064:	0020      	movs	r0, r4
 8012066:	4018      	ands	r0, r3
 8012068:	421c      	tst	r4, r3
 801206a:	d009      	beq.n	8012080 <_vfiprintf_r+0x670>
 801206c:	3b19      	subs	r3, #25
 801206e:	3707      	adds	r7, #7
 8012070:	439f      	bics	r7, r3
 8012072:	0039      	movs	r1, r7
 8012074:	c90c      	ldmia	r1!, {r2, r3}
 8012076:	9200      	str	r2, [sp, #0]
 8012078:	9301      	str	r3, [sp, #4]
 801207a:	9104      	str	r1, [sp, #16]
 801207c:	2301      	movs	r3, #1
 801207e:	e6c7      	b.n	8011e10 <_vfiprintf_r+0x400>
 8012080:	003b      	movs	r3, r7
 8012082:	cb04      	ldmia	r3!, {r2}
 8012084:	0021      	movs	r1, r4
 8012086:	9304      	str	r3, [sp, #16]
 8012088:	2310      	movs	r3, #16
 801208a:	4019      	ands	r1, r3
 801208c:	421c      	tst	r4, r3
 801208e:	d003      	beq.n	8012098 <_vfiprintf_r+0x688>
 8012090:	9200      	str	r2, [sp, #0]
 8012092:	9001      	str	r0, [sp, #4]
 8012094:	3b0f      	subs	r3, #15
 8012096:	e6bb      	b.n	8011e10 <_vfiprintf_r+0x400>
 8012098:	2340      	movs	r3, #64	; 0x40
 801209a:	0020      	movs	r0, r4
 801209c:	4018      	ands	r0, r3
 801209e:	421c      	tst	r4, r3
 80120a0:	d003      	beq.n	80120aa <_vfiprintf_r+0x69a>
 80120a2:	b293      	uxth	r3, r2
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	9101      	str	r1, [sp, #4]
 80120a8:	e7e8      	b.n	801207c <_vfiprintf_r+0x66c>
 80120aa:	2380      	movs	r3, #128	; 0x80
 80120ac:	0021      	movs	r1, r4
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	4019      	ands	r1, r3
 80120b2:	421c      	tst	r4, r3
 80120b4:	d003      	beq.n	80120be <_vfiprintf_r+0x6ae>
 80120b6:	b2d3      	uxtb	r3, r2
 80120b8:	9300      	str	r3, [sp, #0]
 80120ba:	9001      	str	r0, [sp, #4]
 80120bc:	e7de      	b.n	801207c <_vfiprintf_r+0x66c>
 80120be:	9200      	str	r2, [sp, #0]
 80120c0:	e7f1      	b.n	80120a6 <_vfiprintf_r+0x696>
 80120c2:	4a23      	ldr	r2, [pc, #140]	; (8012150 <_vfiprintf_r+0x740>)
 80120c4:	0020      	movs	r0, r4
 80120c6:	920c      	str	r2, [sp, #48]	; 0x30
 80120c8:	2220      	movs	r2, #32
 80120ca:	4010      	ands	r0, r2
 80120cc:	4214      	tst	r4, r2
 80120ce:	d019      	beq.n	8012104 <_vfiprintf_r+0x6f4>
 80120d0:	3a19      	subs	r2, #25
 80120d2:	3707      	adds	r7, #7
 80120d4:	4397      	bics	r7, r2
 80120d6:	0038      	movs	r0, r7
 80120d8:	c806      	ldmia	r0!, {r1, r2}
 80120da:	9100      	str	r1, [sp, #0]
 80120dc:	9201      	str	r2, [sp, #4]
 80120de:	9004      	str	r0, [sp, #16]
 80120e0:	07e2      	lsls	r2, r4, #31
 80120e2:	d509      	bpl.n	80120f8 <_vfiprintf_r+0x6e8>
 80120e4:	9a00      	ldr	r2, [sp, #0]
 80120e6:	9901      	ldr	r1, [sp, #4]
 80120e8:	430a      	orrs	r2, r1
 80120ea:	d005      	beq.n	80120f8 <_vfiprintf_r+0x6e8>
 80120ec:	aa13      	add	r2, sp, #76	; 0x4c
 80120ee:	2130      	movs	r1, #48	; 0x30
 80120f0:	7053      	strb	r3, [r2, #1]
 80120f2:	2302      	movs	r3, #2
 80120f4:	7011      	strb	r1, [r2, #0]
 80120f6:	431c      	orrs	r4, r3
 80120f8:	4b10      	ldr	r3, [pc, #64]	; (801213c <_vfiprintf_r+0x72c>)
 80120fa:	401c      	ands	r4, r3
 80120fc:	2302      	movs	r3, #2
 80120fe:	e687      	b.n	8011e10 <_vfiprintf_r+0x400>
 8012100:	4a10      	ldr	r2, [pc, #64]	; (8012144 <_vfiprintf_r+0x734>)
 8012102:	e7df      	b.n	80120c4 <_vfiprintf_r+0x6b4>
 8012104:	0039      	movs	r1, r7
 8012106:	c904      	ldmia	r1!, {r2}
 8012108:	0026      	movs	r6, r4
 801210a:	9104      	str	r1, [sp, #16]
 801210c:	2110      	movs	r1, #16
 801210e:	400e      	ands	r6, r1
 8012110:	420c      	tst	r4, r1
 8012112:	d002      	beq.n	801211a <_vfiprintf_r+0x70a>
 8012114:	9200      	str	r2, [sp, #0]
 8012116:	9001      	str	r0, [sp, #4]
 8012118:	e7e2      	b.n	80120e0 <_vfiprintf_r+0x6d0>
 801211a:	2140      	movs	r1, #64	; 0x40
 801211c:	0020      	movs	r0, r4
 801211e:	4008      	ands	r0, r1
 8012120:	420c      	tst	r4, r1
 8012122:	d003      	beq.n	801212c <_vfiprintf_r+0x71c>
 8012124:	b292      	uxth	r2, r2
 8012126:	9200      	str	r2, [sp, #0]
 8012128:	9601      	str	r6, [sp, #4]
 801212a:	e7d9      	b.n	80120e0 <_vfiprintf_r+0x6d0>
 801212c:	2180      	movs	r1, #128	; 0x80
 801212e:	0026      	movs	r6, r4
 8012130:	0089      	lsls	r1, r1, #2
 8012132:	400e      	ands	r6, r1
 8012134:	420c      	tst	r4, r1
 8012136:	d0f6      	beq.n	8012126 <_vfiprintf_r+0x716>
 8012138:	b2d2      	uxtb	r2, r2
 801213a:	e7eb      	b.n	8012114 <_vfiprintf_r+0x704>
 801213c:	fffffbff 	.word	0xfffffbff
 8012140:	00007830 	.word	0x00007830
 8012144:	08014bf4 	.word	0x08014bf4
 8012148:	08014d01 	.word	0x08014d01
 801214c:	08014d11 	.word	0x08014d11
 8012150:	08014c05 	.word	0x08014c05
 8012154:	9b01      	ldr	r3, [sp, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d109      	bne.n	801216e <_vfiprintf_r+0x75e>
 801215a:	9b00      	ldr	r3, [sp, #0]
 801215c:	2b09      	cmp	r3, #9
 801215e:	d806      	bhi.n	801216e <_vfiprintf_r+0x75e>
 8012160:	26b7      	movs	r6, #183	; 0xb7
 8012162:	ab12      	add	r3, sp, #72	; 0x48
 8012164:	18f6      	adds	r6, r6, r3
 8012166:	9b00      	ldr	r3, [sp, #0]
 8012168:	3330      	adds	r3, #48	; 0x30
 801216a:	7033      	strb	r3, [r6, #0]
 801216c:	e115      	b.n	801239a <_vfiprintf_r+0x98a>
 801216e:	2380      	movs	r3, #128	; 0x80
 8012170:	2400      	movs	r4, #0
 8012172:	00db      	lsls	r3, r3, #3
 8012174:	403b      	ands	r3, r7
 8012176:	ae40      	add	r6, sp, #256	; 0x100
 8012178:	930a      	str	r3, [sp, #40]	; 0x28
 801217a:	220a      	movs	r2, #10
 801217c:	9800      	ldr	r0, [sp, #0]
 801217e:	9901      	ldr	r1, [sp, #4]
 8012180:	2300      	movs	r3, #0
 8012182:	f7ee f98f 	bl	80004a4 <__aeabi_uldivmod>
 8012186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012188:	3e01      	subs	r6, #1
 801218a:	3230      	adds	r2, #48	; 0x30
 801218c:	900b      	str	r0, [sp, #44]	; 0x2c
 801218e:	9110      	str	r1, [sp, #64]	; 0x40
 8012190:	7032      	strb	r2, [r6, #0]
 8012192:	3401      	adds	r4, #1
 8012194:	2b00      	cmp	r3, #0
 8012196:	d01a      	beq.n	80121ce <_vfiprintf_r+0x7be>
 8012198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	42a3      	cmp	r3, r4
 801219e:	d116      	bne.n	80121ce <_vfiprintf_r+0x7be>
 80121a0:	2cff      	cmp	r4, #255	; 0xff
 80121a2:	d014      	beq.n	80121ce <_vfiprintf_r+0x7be>
 80121a4:	9b01      	ldr	r3, [sp, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <_vfiprintf_r+0x7a0>
 80121aa:	9b00      	ldr	r3, [sp, #0]
 80121ac:	2b09      	cmp	r3, #9
 80121ae:	d90e      	bls.n	80121ce <_vfiprintf_r+0x7be>
 80121b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80121b4:	1af6      	subs	r6, r6, r3
 80121b6:	001a      	movs	r2, r3
 80121b8:	0030      	movs	r0, r6
 80121ba:	f7fa f832 	bl	800c222 <strncpy>
 80121be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121c0:	2400      	movs	r4, #0
 80121c2:	785b      	ldrb	r3, [r3, #1]
 80121c4:	1e5a      	subs	r2, r3, #1
 80121c6:	4193      	sbcs	r3, r2
 80121c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121ca:	18d3      	adds	r3, r2, r3
 80121cc:	930d      	str	r3, [sp, #52]	; 0x34
 80121ce:	9b01      	ldr	r3, [sp, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <_vfiprintf_r+0x7cc>
 80121d4:	9b00      	ldr	r3, [sp, #0]
 80121d6:	2b09      	cmp	r3, #9
 80121d8:	d800      	bhi.n	80121dc <_vfiprintf_r+0x7cc>
 80121da:	e0de      	b.n	801239a <_vfiprintf_r+0x98a>
 80121dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	e7c9      	b.n	801217a <_vfiprintf_r+0x76a>
 80121e6:	200f      	movs	r0, #15
 80121e8:	9b00      	ldr	r3, [sp, #0]
 80121ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121ec:	4003      	ands	r3, r0
 80121ee:	5cd3      	ldrb	r3, [r2, r3]
 80121f0:	3e01      	subs	r6, #1
 80121f2:	7033      	strb	r3, [r6, #0]
 80121f4:	9b01      	ldr	r3, [sp, #4]
 80121f6:	0719      	lsls	r1, r3, #28
 80121f8:	9b00      	ldr	r3, [sp, #0]
 80121fa:	091a      	lsrs	r2, r3, #4
 80121fc:	9b01      	ldr	r3, [sp, #4]
 80121fe:	4311      	orrs	r1, r2
 8012200:	091b      	lsrs	r3, r3, #4
 8012202:	9301      	str	r3, [sp, #4]
 8012204:	000b      	movs	r3, r1
 8012206:	9a01      	ldr	r2, [sp, #4]
 8012208:	9100      	str	r1, [sp, #0]
 801220a:	4313      	orrs	r3, r2
 801220c:	d1ec      	bne.n	80121e8 <_vfiprintf_r+0x7d8>
 801220e:	e0c4      	b.n	801239a <_vfiprintf_r+0x98a>
 8012210:	ae40      	add	r6, sp, #256	; 0x100
 8012212:	2b00      	cmp	r3, #0
 8012214:	d000      	beq.n	8012218 <_vfiprintf_r+0x808>
 8012216:	e0c0      	b.n	801239a <_vfiprintf_r+0x98a>
 8012218:	07e4      	lsls	r4, r4, #31
 801221a:	d400      	bmi.n	801221e <_vfiprintf_r+0x80e>
 801221c:	e0bd      	b.n	801239a <_vfiprintf_r+0x98a>
 801221e:	26b7      	movs	r6, #183	; 0xb7
 8012220:	ab12      	add	r3, sp, #72	; 0x48
 8012222:	18f6      	adds	r6, r6, r3
 8012224:	2330      	movs	r3, #48	; 0x30
 8012226:	e7a0      	b.n	801216a <_vfiprintf_r+0x75a>
 8012228:	2b00      	cmp	r3, #0
 801222a:	d100      	bne.n	801222e <_vfiprintf_r+0x81e>
 801222c:	e07e      	b.n	801232c <_vfiprintf_r+0x91c>
 801222e:	ae27      	add	r6, sp, #156	; 0x9c
 8012230:	7033      	strb	r3, [r6, #0]
 8012232:	2300      	movs	r3, #0
 8012234:	aa12      	add	r2, sp, #72	; 0x48
 8012236:	70d3      	strb	r3, [r2, #3]
 8012238:	9704      	str	r7, [sp, #16]
 801223a:	e576      	b.n	8011d2a <_vfiprintf_r+0x31a>
 801223c:	2010      	movs	r0, #16
 801223e:	1812      	adds	r2, r2, r0
 8012240:	6068      	str	r0, [r5, #4]
 8012242:	9216      	str	r2, [sp, #88]	; 0x58
 8012244:	9315      	str	r3, [sp, #84]	; 0x54
 8012246:	2b07      	cmp	r3, #7
 8012248:	dd07      	ble.n	801225a <_vfiprintf_r+0x84a>
 801224a:	9903      	ldr	r1, [sp, #12]
 801224c:	9806      	ldr	r0, [sp, #24]
 801224e:	aa14      	add	r2, sp, #80	; 0x50
 8012250:	f7ff fba9 	bl	80119a6 <__sprint_r>
 8012254:	2800      	cmp	r0, #0
 8012256:	d144      	bne.n	80122e2 <_vfiprintf_r+0x8d2>
 8012258:	a917      	add	r1, sp, #92	; 0x5c
 801225a:	000d      	movs	r5, r1
 801225c:	3f10      	subs	r7, #16
 801225e:	e63b      	b.n	8011ed8 <_vfiprintf_r+0x4c8>
 8012260:	2010      	movs	r0, #16
 8012262:	1812      	adds	r2, r2, r0
 8012264:	6068      	str	r0, [r5, #4]
 8012266:	9216      	str	r2, [sp, #88]	; 0x58
 8012268:	9315      	str	r3, [sp, #84]	; 0x54
 801226a:	2b07      	cmp	r3, #7
 801226c:	dd07      	ble.n	801227e <_vfiprintf_r+0x86e>
 801226e:	9903      	ldr	r1, [sp, #12]
 8012270:	9806      	ldr	r0, [sp, #24]
 8012272:	aa14      	add	r2, sp, #80	; 0x50
 8012274:	f7ff fb97 	bl	80119a6 <__sprint_r>
 8012278:	2800      	cmp	r0, #0
 801227a:	d132      	bne.n	80122e2 <_vfiprintf_r+0x8d2>
 801227c:	a917      	add	r1, sp, #92	; 0x5c
 801227e:	000d      	movs	r5, r1
 8012280:	3f10      	subs	r7, #16
 8012282:	e67e      	b.n	8011f82 <_vfiprintf_r+0x572>
 8012284:	2010      	movs	r0, #16
 8012286:	1812      	adds	r2, r2, r0
 8012288:	6068      	str	r0, [r5, #4]
 801228a:	9216      	str	r2, [sp, #88]	; 0x58
 801228c:	9315      	str	r3, [sp, #84]	; 0x54
 801228e:	2b07      	cmp	r3, #7
 8012290:	dd07      	ble.n	80122a2 <_vfiprintf_r+0x892>
 8012292:	9903      	ldr	r1, [sp, #12]
 8012294:	9806      	ldr	r0, [sp, #24]
 8012296:	aa14      	add	r2, sp, #80	; 0x50
 8012298:	f7ff fb85 	bl	80119a6 <__sprint_r>
 801229c:	2800      	cmp	r0, #0
 801229e:	d120      	bne.n	80122e2 <_vfiprintf_r+0x8d2>
 80122a0:	a917      	add	r1, sp, #92	; 0x5c
 80122a2:	000d      	movs	r5, r1
 80122a4:	3f10      	subs	r7, #16
 80122a6:	e68b      	b.n	8011fc0 <_vfiprintf_r+0x5b0>
 80122a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122ac:	2610      	movs	r6, #16
 80122ae:	1a9c      	subs	r4, r3, r2
 80122b0:	2c00      	cmp	r4, #0
 80122b2:	dc00      	bgt.n	80122b6 <_vfiprintf_r+0x8a6>
 80122b4:	e6b7      	b.n	8012026 <_vfiprintf_r+0x616>
 80122b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80122b8:	4a3b      	ldr	r2, [pc, #236]	; (80123a8 <_vfiprintf_r+0x998>)
 80122ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80122bc:	3101      	adds	r1, #1
 80122be:	602a      	str	r2, [r5, #0]
 80122c0:	2c10      	cmp	r4, #16
 80122c2:	dc22      	bgt.n	801230a <_vfiprintf_r+0x8fa>
 80122c4:	606c      	str	r4, [r5, #4]
 80122c6:	18e4      	adds	r4, r4, r3
 80122c8:	9416      	str	r4, [sp, #88]	; 0x58
 80122ca:	9115      	str	r1, [sp, #84]	; 0x54
 80122cc:	2907      	cmp	r1, #7
 80122ce:	dc00      	bgt.n	80122d2 <_vfiprintf_r+0x8c2>
 80122d0:	e6a9      	b.n	8012026 <_vfiprintf_r+0x616>
 80122d2:	9903      	ldr	r1, [sp, #12]
 80122d4:	9806      	ldr	r0, [sp, #24]
 80122d6:	aa14      	add	r2, sp, #80	; 0x50
 80122d8:	f7ff fb65 	bl	80119a6 <__sprint_r>
 80122dc:	2800      	cmp	r0, #0
 80122de:	d100      	bne.n	80122e2 <_vfiprintf_r+0x8d2>
 80122e0:	e6a1      	b.n	8012026 <_vfiprintf_r+0x616>
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122e6:	07db      	lsls	r3, r3, #31
 80122e8:	d407      	bmi.n	80122fa <_vfiprintf_r+0x8ea>
 80122ea:	9b03      	ldr	r3, [sp, #12]
 80122ec:	899b      	ldrh	r3, [r3, #12]
 80122ee:	059b      	lsls	r3, r3, #22
 80122f0:	d403      	bmi.n	80122fa <_vfiprintf_r+0x8ea>
 80122f2:	9b03      	ldr	r3, [sp, #12]
 80122f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80122f6:	f7fa f88e 	bl	800c416 <__retarget_lock_release_recursive>
 80122fa:	9b03      	ldr	r3, [sp, #12]
 80122fc:	899b      	ldrh	r3, [r3, #12]
 80122fe:	065b      	lsls	r3, r3, #25
 8012300:	d401      	bmi.n	8012306 <_vfiprintf_r+0x8f6>
 8012302:	f7ff fbc3 	bl	8011a8c <_vfiprintf_r+0x7c>
 8012306:	f7ff fbbe 	bl	8011a86 <_vfiprintf_r+0x76>
 801230a:	3310      	adds	r3, #16
 801230c:	606e      	str	r6, [r5, #4]
 801230e:	9316      	str	r3, [sp, #88]	; 0x58
 8012310:	9115      	str	r1, [sp, #84]	; 0x54
 8012312:	3508      	adds	r5, #8
 8012314:	2907      	cmp	r1, #7
 8012316:	dd07      	ble.n	8012328 <_vfiprintf_r+0x918>
 8012318:	9903      	ldr	r1, [sp, #12]
 801231a:	9806      	ldr	r0, [sp, #24]
 801231c:	aa14      	add	r2, sp, #80	; 0x50
 801231e:	f7ff fb42 	bl	80119a6 <__sprint_r>
 8012322:	2800      	cmp	r0, #0
 8012324:	d1dd      	bne.n	80122e2 <_vfiprintf_r+0x8d2>
 8012326:	ad17      	add	r5, sp, #92	; 0x5c
 8012328:	3c10      	subs	r4, #16
 801232a:	e7c4      	b.n	80122b6 <_vfiprintf_r+0x8a6>
 801232c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801232e:	2b00      	cmp	r3, #0
 8012330:	d102      	bne.n	8012338 <_vfiprintf_r+0x928>
 8012332:	2300      	movs	r3, #0
 8012334:	9315      	str	r3, [sp, #84]	; 0x54
 8012336:	e7d4      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8012338:	9903      	ldr	r1, [sp, #12]
 801233a:	9806      	ldr	r0, [sp, #24]
 801233c:	aa14      	add	r2, sp, #80	; 0x50
 801233e:	f7ff fb32 	bl	80119a6 <__sprint_r>
 8012342:	2800      	cmp	r0, #0
 8012344:	d0f5      	beq.n	8012332 <_vfiprintf_r+0x922>
 8012346:	e7cc      	b.n	80122e2 <_vfiprintf_r+0x8d2>
 8012348:	0027      	movs	r7, r4
 801234a:	2a00      	cmp	r2, #0
 801234c:	d100      	bne.n	8012350 <_vfiprintf_r+0x940>
 801234e:	e51b      	b.n	8011d88 <_vfiprintf_r+0x378>
 8012350:	2b01      	cmp	r3, #1
 8012352:	d100      	bne.n	8012356 <_vfiprintf_r+0x946>
 8012354:	e6fe      	b.n	8012154 <_vfiprintf_r+0x744>
 8012356:	ae40      	add	r6, sp, #256	; 0x100
 8012358:	2b02      	cmp	r3, #2
 801235a:	d100      	bne.n	801235e <_vfiprintf_r+0x94e>
 801235c:	e743      	b.n	80121e6 <_vfiprintf_r+0x7d6>
 801235e:	2307      	movs	r3, #7
 8012360:	469c      	mov	ip, r3
 8012362:	4663      	mov	r3, ip
 8012364:	9900      	ldr	r1, [sp, #0]
 8012366:	0032      	movs	r2, r6
 8012368:	400b      	ands	r3, r1
 801236a:	9901      	ldr	r1, [sp, #4]
 801236c:	3e01      	subs	r6, #1
 801236e:	074c      	lsls	r4, r1, #29
 8012370:	9900      	ldr	r1, [sp, #0]
 8012372:	3330      	adds	r3, #48	; 0x30
 8012374:	08c8      	lsrs	r0, r1, #3
 8012376:	9901      	ldr	r1, [sp, #4]
 8012378:	4304      	orrs	r4, r0
 801237a:	08c9      	lsrs	r1, r1, #3
 801237c:	9101      	str	r1, [sp, #4]
 801237e:	0021      	movs	r1, r4
 8012380:	9801      	ldr	r0, [sp, #4]
 8012382:	7033      	strb	r3, [r6, #0]
 8012384:	9400      	str	r4, [sp, #0]
 8012386:	4301      	orrs	r1, r0
 8012388:	d1eb      	bne.n	8012362 <_vfiprintf_r+0x952>
 801238a:	07f9      	lsls	r1, r7, #31
 801238c:	d505      	bpl.n	801239a <_vfiprintf_r+0x98a>
 801238e:	2b30      	cmp	r3, #48	; 0x30
 8012390:	d003      	beq.n	801239a <_vfiprintf_r+0x98a>
 8012392:	2330      	movs	r3, #48	; 0x30
 8012394:	3e01      	subs	r6, #1
 8012396:	7033      	strb	r3, [r6, #0]
 8012398:	1e96      	subs	r6, r2, #2
 801239a:	9b05      	ldr	r3, [sp, #20]
 801239c:	003c      	movs	r4, r7
 801239e:	930b      	str	r3, [sp, #44]	; 0x2c
 80123a0:	ab40      	add	r3, sp, #256	; 0x100
 80123a2:	1b9b      	subs	r3, r3, r6
 80123a4:	9305      	str	r3, [sp, #20]
 80123a6:	e575      	b.n	8011e94 <_vfiprintf_r+0x484>
 80123a8:	08014d01 	.word	0x08014d01

080123ac <__sbprintf>:
 80123ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ae:	0015      	movs	r5, r2
 80123b0:	2202      	movs	r2, #2
 80123b2:	4c1e      	ldr	r4, [pc, #120]	; (801242c <__sbprintf+0x80>)
 80123b4:	001f      	movs	r7, r3
 80123b6:	898b      	ldrh	r3, [r1, #12]
 80123b8:	44a5      	add	sp, r4
 80123ba:	4393      	bics	r3, r2
 80123bc:	466a      	mov	r2, sp
 80123be:	8193      	strh	r3, [r2, #12]
 80123c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80123c2:	0006      	movs	r6, r0
 80123c4:	9319      	str	r3, [sp, #100]	; 0x64
 80123c6:	89cb      	ldrh	r3, [r1, #14]
 80123c8:	a816      	add	r0, sp, #88	; 0x58
 80123ca:	81d3      	strh	r3, [r2, #14]
 80123cc:	69cb      	ldr	r3, [r1, #28]
 80123ce:	000c      	movs	r4, r1
 80123d0:	9307      	str	r3, [sp, #28]
 80123d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80123d4:	9309      	str	r3, [sp, #36]	; 0x24
 80123d6:	ab1a      	add	r3, sp, #104	; 0x68
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	9304      	str	r3, [sp, #16]
 80123dc:	2380      	movs	r3, #128	; 0x80
 80123de:	00db      	lsls	r3, r3, #3
 80123e0:	9302      	str	r3, [sp, #8]
 80123e2:	9305      	str	r3, [sp, #20]
 80123e4:	2300      	movs	r3, #0
 80123e6:	9306      	str	r3, [sp, #24]
 80123e8:	f7fa f812 	bl	800c410 <__retarget_lock_init_recursive>
 80123ec:	002a      	movs	r2, r5
 80123ee:	003b      	movs	r3, r7
 80123f0:	4669      	mov	r1, sp
 80123f2:	0030      	movs	r0, r6
 80123f4:	f7ff fb0c 	bl	8011a10 <_vfiprintf_r>
 80123f8:	1e05      	subs	r5, r0, #0
 80123fa:	db07      	blt.n	801240c <__sbprintf+0x60>
 80123fc:	4669      	mov	r1, sp
 80123fe:	0030      	movs	r0, r6
 8012400:	f7fd fe7c 	bl	80100fc <_fflush_r>
 8012404:	2800      	cmp	r0, #0
 8012406:	d001      	beq.n	801240c <__sbprintf+0x60>
 8012408:	2501      	movs	r5, #1
 801240a:	426d      	negs	r5, r5
 801240c:	466b      	mov	r3, sp
 801240e:	899a      	ldrh	r2, [r3, #12]
 8012410:	2340      	movs	r3, #64	; 0x40
 8012412:	421a      	tst	r2, r3
 8012414:	d002      	beq.n	801241c <__sbprintf+0x70>
 8012416:	89a2      	ldrh	r2, [r4, #12]
 8012418:	4313      	orrs	r3, r2
 801241a:	81a3      	strh	r3, [r4, #12]
 801241c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801241e:	f7f9 fff8 	bl	800c412 <__retarget_lock_close_recursive>
 8012422:	0028      	movs	r0, r5
 8012424:	4b02      	ldr	r3, [pc, #8]	; (8012430 <__sbprintf+0x84>)
 8012426:	449d      	add	sp, r3
 8012428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801242a:	46c0      	nop			; (mov r8, r8)
 801242c:	fffffb94 	.word	0xfffffb94
 8012430:	0000046c 	.word	0x0000046c

08012434 <__sfvwrite_r>:
 8012434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012436:	6893      	ldr	r3, [r2, #8]
 8012438:	b087      	sub	sp, #28
 801243a:	000c      	movs	r4, r1
 801243c:	9002      	str	r0, [sp, #8]
 801243e:	9204      	str	r2, [sp, #16]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d102      	bne.n	801244a <__sfvwrite_r+0x16>
 8012444:	2000      	movs	r0, #0
 8012446:	b007      	add	sp, #28
 8012448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801244a:	898b      	ldrh	r3, [r1, #12]
 801244c:	071b      	lsls	r3, r3, #28
 801244e:	d557      	bpl.n	8012500 <__sfvwrite_r+0xcc>
 8012450:	690b      	ldr	r3, [r1, #16]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d054      	beq.n	8012500 <__sfvwrite_r+0xcc>
 8012456:	9b04      	ldr	r3, [sp, #16]
 8012458:	2202      	movs	r2, #2
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	9301      	str	r3, [sp, #4]
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	001f      	movs	r7, r3
 8012462:	4017      	ands	r7, r2
 8012464:	4213      	tst	r3, r2
 8012466:	d171      	bne.n	801254c <__sfvwrite_r+0x118>
 8012468:	2201      	movs	r2, #1
 801246a:	2101      	movs	r1, #1
 801246c:	401a      	ands	r2, r3
 801246e:	420b      	tst	r3, r1
 8012470:	d100      	bne.n	8012474 <__sfvwrite_r+0x40>
 8012472:	e0a5      	b.n	80125c0 <__sfvwrite_r+0x18c>
 8012474:	0038      	movs	r0, r7
 8012476:	003e      	movs	r6, r7
 8012478:	9703      	str	r7, [sp, #12]
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d100      	bne.n	8012482 <__sfvwrite_r+0x4e>
 8012480:	e10b      	b.n	801269a <__sfvwrite_r+0x266>
 8012482:	2800      	cmp	r0, #0
 8012484:	d10a      	bne.n	801249c <__sfvwrite_r+0x68>
 8012486:	001a      	movs	r2, r3
 8012488:	210a      	movs	r1, #10
 801248a:	0030      	movs	r0, r6
 801248c:	f7fd feb0 	bl	80101f0 <memchr>
 8012490:	9b03      	ldr	r3, [sp, #12]
 8012492:	1c5f      	adds	r7, r3, #1
 8012494:	2800      	cmp	r0, #0
 8012496:	d001      	beq.n	801249c <__sfvwrite_r+0x68>
 8012498:	3001      	adds	r0, #1
 801249a:	1b87      	subs	r7, r0, r6
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	9705      	str	r7, [sp, #20]
 80124a0:	429f      	cmp	r7, r3
 80124a2:	d900      	bls.n	80124a6 <__sfvwrite_r+0x72>
 80124a4:	9305      	str	r3, [sp, #20]
 80124a6:	6820      	ldr	r0, [r4, #0]
 80124a8:	6922      	ldr	r2, [r4, #16]
 80124aa:	68a5      	ldr	r5, [r4, #8]
 80124ac:	6963      	ldr	r3, [r4, #20]
 80124ae:	4290      	cmp	r0, r2
 80124b0:	d800      	bhi.n	80124b4 <__sfvwrite_r+0x80>
 80124b2:	e0fb      	b.n	80126ac <__sfvwrite_r+0x278>
 80124b4:	9a05      	ldr	r2, [sp, #20]
 80124b6:	18ed      	adds	r5, r5, r3
 80124b8:	42aa      	cmp	r2, r5
 80124ba:	dc00      	bgt.n	80124be <__sfvwrite_r+0x8a>
 80124bc:	e0f6      	b.n	80126ac <__sfvwrite_r+0x278>
 80124be:	0031      	movs	r1, r6
 80124c0:	002a      	movs	r2, r5
 80124c2:	f000 fa1e 	bl	8012902 <memmove>
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	0021      	movs	r1, r4
 80124ca:	195b      	adds	r3, r3, r5
 80124cc:	9802      	ldr	r0, [sp, #8]
 80124ce:	6023      	str	r3, [r4, #0]
 80124d0:	f7fd fe14 	bl	80100fc <_fflush_r>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d16e      	bne.n	80125b6 <__sfvwrite_r+0x182>
 80124d8:	2001      	movs	r0, #1
 80124da:	1b7f      	subs	r7, r7, r5
 80124dc:	d105      	bne.n	80124ea <__sfvwrite_r+0xb6>
 80124de:	0021      	movs	r1, r4
 80124e0:	9802      	ldr	r0, [sp, #8]
 80124e2:	f7fd fe0b 	bl	80100fc <_fflush_r>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d165      	bne.n	80125b6 <__sfvwrite_r+0x182>
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	9a04      	ldr	r2, [sp, #16]
 80124ee:	1b5b      	subs	r3, r3, r5
 80124f0:	9303      	str	r3, [sp, #12]
 80124f2:	9b04      	ldr	r3, [sp, #16]
 80124f4:	1976      	adds	r6, r6, r5
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	1b5b      	subs	r3, r3, r5
 80124fa:	6093      	str	r3, [r2, #8]
 80124fc:	d1bd      	bne.n	801247a <__sfvwrite_r+0x46>
 80124fe:	e7a1      	b.n	8012444 <__sfvwrite_r+0x10>
 8012500:	0021      	movs	r1, r4
 8012502:	9802      	ldr	r0, [sp, #8]
 8012504:	f000 f932 	bl	801276c <__swsetup_r>
 8012508:	2800      	cmp	r0, #0
 801250a:	d0a4      	beq.n	8012456 <__sfvwrite_r+0x22>
 801250c:	2001      	movs	r0, #1
 801250e:	4240      	negs	r0, r0
 8012510:	e799      	b.n	8012446 <__sfvwrite_r+0x12>
 8012512:	9b01      	ldr	r3, [sp, #4]
 8012514:	681e      	ldr	r6, [r3, #0]
 8012516:	685d      	ldr	r5, [r3, #4]
 8012518:	3308      	adds	r3, #8
 801251a:	9301      	str	r3, [sp, #4]
 801251c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801251e:	69e1      	ldr	r1, [r4, #28]
 8012520:	2d00      	cmp	r5, #0
 8012522:	d0f6      	beq.n	8012512 <__sfvwrite_r+0xde>
 8012524:	4a6e      	ldr	r2, [pc, #440]	; (80126e0 <__sfvwrite_r+0x2ac>)
 8012526:	002b      	movs	r3, r5
 8012528:	4295      	cmp	r5, r2
 801252a:	d900      	bls.n	801252e <__sfvwrite_r+0xfa>
 801252c:	0013      	movs	r3, r2
 801252e:	0032      	movs	r2, r6
 8012530:	9802      	ldr	r0, [sp, #8]
 8012532:	47b8      	blx	r7
 8012534:	2800      	cmp	r0, #0
 8012536:	dd3e      	ble.n	80125b6 <__sfvwrite_r+0x182>
 8012538:	9b04      	ldr	r3, [sp, #16]
 801253a:	9a04      	ldr	r2, [sp, #16]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	1836      	adds	r6, r6, r0
 8012540:	1a1b      	subs	r3, r3, r0
 8012542:	1a2d      	subs	r5, r5, r0
 8012544:	6093      	str	r3, [r2, #8]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1e8      	bne.n	801251c <__sfvwrite_r+0xe8>
 801254a:	e77b      	b.n	8012444 <__sfvwrite_r+0x10>
 801254c:	2600      	movs	r6, #0
 801254e:	0035      	movs	r5, r6
 8012550:	e7e4      	b.n	801251c <__sfvwrite_r+0xe8>
 8012552:	9b01      	ldr	r3, [sp, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	9303      	str	r3, [sp, #12]
 8012558:	9b01      	ldr	r3, [sp, #4]
 801255a:	685d      	ldr	r5, [r3, #4]
 801255c:	3308      	adds	r3, #8
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	220c      	movs	r2, #12
 8012562:	5ea3      	ldrsh	r3, [r4, r2]
 8012564:	6820      	ldr	r0, [r4, #0]
 8012566:	68a6      	ldr	r6, [r4, #8]
 8012568:	2d00      	cmp	r5, #0
 801256a:	d0f2      	beq.n	8012552 <__sfvwrite_r+0x11e>
 801256c:	2180      	movs	r1, #128	; 0x80
 801256e:	0089      	lsls	r1, r1, #2
 8012570:	b29a      	uxth	r2, r3
 8012572:	420b      	tst	r3, r1
 8012574:	d062      	beq.n	801263c <__sfvwrite_r+0x208>
 8012576:	42ae      	cmp	r6, r5
 8012578:	d837      	bhi.n	80125ea <__sfvwrite_r+0x1b6>
 801257a:	2390      	movs	r3, #144	; 0x90
 801257c:	00db      	lsls	r3, r3, #3
 801257e:	421a      	tst	r2, r3
 8012580:	d033      	beq.n	80125ea <__sfvwrite_r+0x1b6>
 8012582:	6921      	ldr	r1, [r4, #16]
 8012584:	1a43      	subs	r3, r0, r1
 8012586:	2003      	movs	r0, #3
 8012588:	9305      	str	r3, [sp, #20]
 801258a:	6963      	ldr	r3, [r4, #20]
 801258c:	4343      	muls	r3, r0
 801258e:	0fdf      	lsrs	r7, r3, #31
 8012590:	18ff      	adds	r7, r7, r3
 8012592:	9b05      	ldr	r3, [sp, #20]
 8012594:	107f      	asrs	r7, r7, #1
 8012596:	3301      	adds	r3, #1
 8012598:	195b      	adds	r3, r3, r5
 801259a:	42bb      	cmp	r3, r7
 801259c:	d900      	bls.n	80125a0 <__sfvwrite_r+0x16c>
 801259e:	001f      	movs	r7, r3
 80125a0:	0552      	lsls	r2, r2, #21
 80125a2:	d53c      	bpl.n	801261e <__sfvwrite_r+0x1ea>
 80125a4:	0039      	movs	r1, r7
 80125a6:	9802      	ldr	r0, [sp, #8]
 80125a8:	f7f8 fb02 	bl	800abb0 <_malloc_r>
 80125ac:	1e06      	subs	r6, r0, #0
 80125ae:	d10a      	bne.n	80125c6 <__sfvwrite_r+0x192>
 80125b0:	230c      	movs	r3, #12
 80125b2:	9a02      	ldr	r2, [sp, #8]
 80125b4:	6013      	str	r3, [r2, #0]
 80125b6:	2340      	movs	r3, #64	; 0x40
 80125b8:	89a2      	ldrh	r2, [r4, #12]
 80125ba:	4313      	orrs	r3, r2
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	e7a5      	b.n	801250c <__sfvwrite_r+0xd8>
 80125c0:	0015      	movs	r5, r2
 80125c2:	9203      	str	r2, [sp, #12]
 80125c4:	e7cc      	b.n	8012560 <__sfvwrite_r+0x12c>
 80125c6:	9a05      	ldr	r2, [sp, #20]
 80125c8:	6921      	ldr	r1, [r4, #16]
 80125ca:	f7f9 ff30 	bl	800c42e <memcpy>
 80125ce:	89a2      	ldrh	r2, [r4, #12]
 80125d0:	4b44      	ldr	r3, [pc, #272]	; (80126e4 <__sfvwrite_r+0x2b0>)
 80125d2:	401a      	ands	r2, r3
 80125d4:	2380      	movs	r3, #128	; 0x80
 80125d6:	4313      	orrs	r3, r2
 80125d8:	81a3      	strh	r3, [r4, #12]
 80125da:	9b05      	ldr	r3, [sp, #20]
 80125dc:	6126      	str	r6, [r4, #16]
 80125de:	18f6      	adds	r6, r6, r3
 80125e0:	6026      	str	r6, [r4, #0]
 80125e2:	002e      	movs	r6, r5
 80125e4:	6167      	str	r7, [r4, #20]
 80125e6:	1aff      	subs	r7, r7, r3
 80125e8:	60a7      	str	r7, [r4, #8]
 80125ea:	002f      	movs	r7, r5
 80125ec:	42ae      	cmp	r6, r5
 80125ee:	d900      	bls.n	80125f2 <__sfvwrite_r+0x1be>
 80125f0:	002e      	movs	r6, r5
 80125f2:	0032      	movs	r2, r6
 80125f4:	9903      	ldr	r1, [sp, #12]
 80125f6:	6820      	ldr	r0, [r4, #0]
 80125f8:	f000 f983 	bl	8012902 <memmove>
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	1b9b      	subs	r3, r3, r6
 8012600:	60a3      	str	r3, [r4, #8]
 8012602:	6823      	ldr	r3, [r4, #0]
 8012604:	199b      	adds	r3, r3, r6
 8012606:	6023      	str	r3, [r4, #0]
 8012608:	9b03      	ldr	r3, [sp, #12]
 801260a:	9a04      	ldr	r2, [sp, #16]
 801260c:	19db      	adds	r3, r3, r7
 801260e:	9303      	str	r3, [sp, #12]
 8012610:	9b04      	ldr	r3, [sp, #16]
 8012612:	1bed      	subs	r5, r5, r7
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	1bdb      	subs	r3, r3, r7
 8012618:	6093      	str	r3, [r2, #8]
 801261a:	d1a1      	bne.n	8012560 <__sfvwrite_r+0x12c>
 801261c:	e712      	b.n	8012444 <__sfvwrite_r+0x10>
 801261e:	003a      	movs	r2, r7
 8012620:	9802      	ldr	r0, [sp, #8]
 8012622:	f7fe fd5d 	bl	80110e0 <_realloc_r>
 8012626:	1e06      	subs	r6, r0, #0
 8012628:	d1d7      	bne.n	80125da <__sfvwrite_r+0x1a6>
 801262a:	6921      	ldr	r1, [r4, #16]
 801262c:	9802      	ldr	r0, [sp, #8]
 801262e:	f7f9 ff79 	bl	800c524 <_free_r>
 8012632:	2280      	movs	r2, #128	; 0x80
 8012634:	89a3      	ldrh	r3, [r4, #12]
 8012636:	4393      	bics	r3, r2
 8012638:	81a3      	strh	r3, [r4, #12]
 801263a:	e7b9      	b.n	80125b0 <__sfvwrite_r+0x17c>
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	4283      	cmp	r3, r0
 8012640:	d302      	bcc.n	8012648 <__sfvwrite_r+0x214>
 8012642:	6967      	ldr	r7, [r4, #20]
 8012644:	42af      	cmp	r7, r5
 8012646:	d916      	bls.n	8012676 <__sfvwrite_r+0x242>
 8012648:	42ae      	cmp	r6, r5
 801264a:	d900      	bls.n	801264e <__sfvwrite_r+0x21a>
 801264c:	002e      	movs	r6, r5
 801264e:	0032      	movs	r2, r6
 8012650:	9903      	ldr	r1, [sp, #12]
 8012652:	f000 f956 	bl	8012902 <memmove>
 8012656:	68a3      	ldr	r3, [r4, #8]
 8012658:	6822      	ldr	r2, [r4, #0]
 801265a:	1b9b      	subs	r3, r3, r6
 801265c:	1992      	adds	r2, r2, r6
 801265e:	0037      	movs	r7, r6
 8012660:	60a3      	str	r3, [r4, #8]
 8012662:	6022      	str	r2, [r4, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1cf      	bne.n	8012608 <__sfvwrite_r+0x1d4>
 8012668:	0021      	movs	r1, r4
 801266a:	9802      	ldr	r0, [sp, #8]
 801266c:	f7fd fd46 	bl	80100fc <_fflush_r>
 8012670:	2800      	cmp	r0, #0
 8012672:	d0c9      	beq.n	8012608 <__sfvwrite_r+0x1d4>
 8012674:	e79f      	b.n	80125b6 <__sfvwrite_r+0x182>
 8012676:	4b1c      	ldr	r3, [pc, #112]	; (80126e8 <__sfvwrite_r+0x2b4>)
 8012678:	0028      	movs	r0, r5
 801267a:	429d      	cmp	r5, r3
 801267c:	d900      	bls.n	8012680 <__sfvwrite_r+0x24c>
 801267e:	481b      	ldr	r0, [pc, #108]	; (80126ec <__sfvwrite_r+0x2b8>)
 8012680:	0039      	movs	r1, r7
 8012682:	f7ed fde5 	bl	8000250 <__divsi3>
 8012686:	003b      	movs	r3, r7
 8012688:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801268a:	4343      	muls	r3, r0
 801268c:	9a03      	ldr	r2, [sp, #12]
 801268e:	69e1      	ldr	r1, [r4, #28]
 8012690:	9802      	ldr	r0, [sp, #8]
 8012692:	47b0      	blx	r6
 8012694:	1e07      	subs	r7, r0, #0
 8012696:	dcb7      	bgt.n	8012608 <__sfvwrite_r+0x1d4>
 8012698:	e78d      	b.n	80125b6 <__sfvwrite_r+0x182>
 801269a:	9b01      	ldr	r3, [sp, #4]
 801269c:	2000      	movs	r0, #0
 801269e:	681e      	ldr	r6, [r3, #0]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	9303      	str	r3, [sp, #12]
 80126a4:	9b01      	ldr	r3, [sp, #4]
 80126a6:	3308      	adds	r3, #8
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	e6e6      	b.n	801247a <__sfvwrite_r+0x46>
 80126ac:	9a05      	ldr	r2, [sp, #20]
 80126ae:	4293      	cmp	r3, r2
 80126b0:	dc08      	bgt.n	80126c4 <__sfvwrite_r+0x290>
 80126b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80126b4:	0032      	movs	r2, r6
 80126b6:	69e1      	ldr	r1, [r4, #28]
 80126b8:	9802      	ldr	r0, [sp, #8]
 80126ba:	47a8      	blx	r5
 80126bc:	1e05      	subs	r5, r0, #0
 80126be:	dd00      	ble.n	80126c2 <__sfvwrite_r+0x28e>
 80126c0:	e70a      	b.n	80124d8 <__sfvwrite_r+0xa4>
 80126c2:	e778      	b.n	80125b6 <__sfvwrite_r+0x182>
 80126c4:	9a05      	ldr	r2, [sp, #20]
 80126c6:	0031      	movs	r1, r6
 80126c8:	f000 f91b 	bl	8012902 <memmove>
 80126cc:	9a05      	ldr	r2, [sp, #20]
 80126ce:	68a3      	ldr	r3, [r4, #8]
 80126d0:	0015      	movs	r5, r2
 80126d2:	1a9b      	subs	r3, r3, r2
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	189b      	adds	r3, r3, r2
 80126da:	6023      	str	r3, [r4, #0]
 80126dc:	e6fc      	b.n	80124d8 <__sfvwrite_r+0xa4>
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	7ffffc00 	.word	0x7ffffc00
 80126e4:	fffffb7f 	.word	0xfffffb7f
 80126e8:	7ffffffe 	.word	0x7ffffffe
 80126ec:	7fffffff 	.word	0x7fffffff

080126f0 <__submore>:
 80126f0:	000b      	movs	r3, r1
 80126f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126f4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80126f6:	3340      	adds	r3, #64	; 0x40
 80126f8:	000c      	movs	r4, r1
 80126fa:	429d      	cmp	r5, r3
 80126fc:	d11c      	bne.n	8012738 <__submore+0x48>
 80126fe:	2680      	movs	r6, #128	; 0x80
 8012700:	00f6      	lsls	r6, r6, #3
 8012702:	0031      	movs	r1, r6
 8012704:	f7f8 fa54 	bl	800abb0 <_malloc_r>
 8012708:	2800      	cmp	r0, #0
 801270a:	d102      	bne.n	8012712 <__submore+0x22>
 801270c:	2001      	movs	r0, #1
 801270e:	4240      	negs	r0, r0
 8012710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012712:	0023      	movs	r3, r4
 8012714:	6320      	str	r0, [r4, #48]	; 0x30
 8012716:	6366      	str	r6, [r4, #52]	; 0x34
 8012718:	3342      	adds	r3, #66	; 0x42
 801271a:	781a      	ldrb	r2, [r3, #0]
 801271c:	4b10      	ldr	r3, [pc, #64]	; (8012760 <__submore+0x70>)
 801271e:	54c2      	strb	r2, [r0, r3]
 8012720:	0023      	movs	r3, r4
 8012722:	3341      	adds	r3, #65	; 0x41
 8012724:	781a      	ldrb	r2, [r3, #0]
 8012726:	4b0f      	ldr	r3, [pc, #60]	; (8012764 <__submore+0x74>)
 8012728:	54c2      	strb	r2, [r0, r3]
 801272a:	782a      	ldrb	r2, [r5, #0]
 801272c:	4b0e      	ldr	r3, [pc, #56]	; (8012768 <__submore+0x78>)
 801272e:	54c2      	strb	r2, [r0, r3]
 8012730:	18c0      	adds	r0, r0, r3
 8012732:	6020      	str	r0, [r4, #0]
 8012734:	2000      	movs	r0, #0
 8012736:	e7eb      	b.n	8012710 <__submore+0x20>
 8012738:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801273a:	0029      	movs	r1, r5
 801273c:	0073      	lsls	r3, r6, #1
 801273e:	001a      	movs	r2, r3
 8012740:	9301      	str	r3, [sp, #4]
 8012742:	f7fe fccd 	bl	80110e0 <_realloc_r>
 8012746:	1e05      	subs	r5, r0, #0
 8012748:	d0e0      	beq.n	801270c <__submore+0x1c>
 801274a:	1987      	adds	r7, r0, r6
 801274c:	0001      	movs	r1, r0
 801274e:	0032      	movs	r2, r6
 8012750:	0038      	movs	r0, r7
 8012752:	f7f9 fe6c 	bl	800c42e <memcpy>
 8012756:	9b01      	ldr	r3, [sp, #4]
 8012758:	6027      	str	r7, [r4, #0]
 801275a:	6325      	str	r5, [r4, #48]	; 0x30
 801275c:	6363      	str	r3, [r4, #52]	; 0x34
 801275e:	e7e9      	b.n	8012734 <__submore+0x44>
 8012760:	000003ff 	.word	0x000003ff
 8012764:	000003fe 	.word	0x000003fe
 8012768:	000003fd 	.word	0x000003fd

0801276c <__swsetup_r>:
 801276c:	4b30      	ldr	r3, [pc, #192]	; (8012830 <__swsetup_r+0xc4>)
 801276e:	b570      	push	{r4, r5, r6, lr}
 8012770:	0005      	movs	r5, r0
 8012772:	6818      	ldr	r0, [r3, #0]
 8012774:	000c      	movs	r4, r1
 8012776:	2800      	cmp	r0, #0
 8012778:	d004      	beq.n	8012784 <__swsetup_r+0x18>
 801277a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801277c:	2b00      	cmp	r3, #0
 801277e:	d101      	bne.n	8012784 <__swsetup_r+0x18>
 8012780:	f7f9 fc2a 	bl	800bfd8 <__sinit>
 8012784:	230c      	movs	r3, #12
 8012786:	5ee2      	ldrsh	r2, [r4, r3]
 8012788:	b293      	uxth	r3, r2
 801278a:	0711      	lsls	r1, r2, #28
 801278c:	d423      	bmi.n	80127d6 <__swsetup_r+0x6a>
 801278e:	06d9      	lsls	r1, r3, #27
 8012790:	d407      	bmi.n	80127a2 <__swsetup_r+0x36>
 8012792:	2309      	movs	r3, #9
 8012794:	2001      	movs	r0, #1
 8012796:	602b      	str	r3, [r5, #0]
 8012798:	3337      	adds	r3, #55	; 0x37
 801279a:	4313      	orrs	r3, r2
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	4240      	negs	r0, r0
 80127a0:	bd70      	pop	{r4, r5, r6, pc}
 80127a2:	075b      	lsls	r3, r3, #29
 80127a4:	d513      	bpl.n	80127ce <__swsetup_r+0x62>
 80127a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80127a8:	2900      	cmp	r1, #0
 80127aa:	d008      	beq.n	80127be <__swsetup_r+0x52>
 80127ac:	0023      	movs	r3, r4
 80127ae:	3340      	adds	r3, #64	; 0x40
 80127b0:	4299      	cmp	r1, r3
 80127b2:	d002      	beq.n	80127ba <__swsetup_r+0x4e>
 80127b4:	0028      	movs	r0, r5
 80127b6:	f7f9 feb5 	bl	800c524 <_free_r>
 80127ba:	2300      	movs	r3, #0
 80127bc:	6323      	str	r3, [r4, #48]	; 0x30
 80127be:	2224      	movs	r2, #36	; 0x24
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	4393      	bics	r3, r2
 80127c4:	81a3      	strh	r3, [r4, #12]
 80127c6:	2300      	movs	r3, #0
 80127c8:	6063      	str	r3, [r4, #4]
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	2308      	movs	r3, #8
 80127d0:	89a2      	ldrh	r2, [r4, #12]
 80127d2:	4313      	orrs	r3, r2
 80127d4:	81a3      	strh	r3, [r4, #12]
 80127d6:	6923      	ldr	r3, [r4, #16]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d10b      	bne.n	80127f4 <__swsetup_r+0x88>
 80127dc:	21a0      	movs	r1, #160	; 0xa0
 80127de:	2280      	movs	r2, #128	; 0x80
 80127e0:	89a3      	ldrh	r3, [r4, #12]
 80127e2:	0089      	lsls	r1, r1, #2
 80127e4:	0092      	lsls	r2, r2, #2
 80127e6:	400b      	ands	r3, r1
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d003      	beq.n	80127f4 <__swsetup_r+0x88>
 80127ec:	0021      	movs	r1, r4
 80127ee:	0028      	movs	r0, r5
 80127f0:	f000 f8e8 	bl	80129c4 <__smakebuf_r>
 80127f4:	220c      	movs	r2, #12
 80127f6:	5ea3      	ldrsh	r3, [r4, r2]
 80127f8:	2001      	movs	r0, #1
 80127fa:	001a      	movs	r2, r3
 80127fc:	b299      	uxth	r1, r3
 80127fe:	4002      	ands	r2, r0
 8012800:	4203      	tst	r3, r0
 8012802:	d00f      	beq.n	8012824 <__swsetup_r+0xb8>
 8012804:	2200      	movs	r2, #0
 8012806:	60a2      	str	r2, [r4, #8]
 8012808:	6962      	ldr	r2, [r4, #20]
 801280a:	4252      	negs	r2, r2
 801280c:	61a2      	str	r2, [r4, #24]
 801280e:	2000      	movs	r0, #0
 8012810:	6922      	ldr	r2, [r4, #16]
 8012812:	4282      	cmp	r2, r0
 8012814:	d1c4      	bne.n	80127a0 <__swsetup_r+0x34>
 8012816:	0609      	lsls	r1, r1, #24
 8012818:	d5c2      	bpl.n	80127a0 <__swsetup_r+0x34>
 801281a:	2240      	movs	r2, #64	; 0x40
 801281c:	4313      	orrs	r3, r2
 801281e:	81a3      	strh	r3, [r4, #12]
 8012820:	3801      	subs	r0, #1
 8012822:	e7bd      	b.n	80127a0 <__swsetup_r+0x34>
 8012824:	0788      	lsls	r0, r1, #30
 8012826:	d400      	bmi.n	801282a <__swsetup_r+0xbe>
 8012828:	6962      	ldr	r2, [r4, #20]
 801282a:	60a2      	str	r2, [r4, #8]
 801282c:	e7ef      	b.n	801280e <__swsetup_r+0xa2>
 801282e:	46c0      	nop			; (mov r8, r8)
 8012830:	200006d0 	.word	0x200006d0

08012834 <__fputwc>:
 8012834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012836:	b085      	sub	sp, #20
 8012838:	000e      	movs	r6, r1
 801283a:	0015      	movs	r5, r2
 801283c:	9001      	str	r0, [sp, #4]
 801283e:	f7f9 fd55 	bl	800c2ec <__locale_mb_cur_max>
 8012842:	0004      	movs	r4, r0
 8012844:	2801      	cmp	r0, #1
 8012846:	d119      	bne.n	801287c <__fputwc+0x48>
 8012848:	1e73      	subs	r3, r6, #1
 801284a:	2bfe      	cmp	r3, #254	; 0xfe
 801284c:	d816      	bhi.n	801287c <__fputwc+0x48>
 801284e:	ab02      	add	r3, sp, #8
 8012850:	711e      	strb	r6, [r3, #4]
 8012852:	2700      	movs	r7, #0
 8012854:	42a7      	cmp	r7, r4
 8012856:	d020      	beq.n	801289a <__fputwc+0x66>
 8012858:	ab03      	add	r3, sp, #12
 801285a:	5dd9      	ldrb	r1, [r3, r7]
 801285c:	68ab      	ldr	r3, [r5, #8]
 801285e:	3b01      	subs	r3, #1
 8012860:	60ab      	str	r3, [r5, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	da04      	bge.n	8012870 <__fputwc+0x3c>
 8012866:	69aa      	ldr	r2, [r5, #24]
 8012868:	4293      	cmp	r3, r2
 801286a:	db19      	blt.n	80128a0 <__fputwc+0x6c>
 801286c:	290a      	cmp	r1, #10
 801286e:	d017      	beq.n	80128a0 <__fputwc+0x6c>
 8012870:	682b      	ldr	r3, [r5, #0]
 8012872:	1c5a      	adds	r2, r3, #1
 8012874:	602a      	str	r2, [r5, #0]
 8012876:	7019      	strb	r1, [r3, #0]
 8012878:	3701      	adds	r7, #1
 801287a:	e7eb      	b.n	8012854 <__fputwc+0x20>
 801287c:	002b      	movs	r3, r5
 801287e:	0032      	movs	r2, r6
 8012880:	9801      	ldr	r0, [sp, #4]
 8012882:	335c      	adds	r3, #92	; 0x5c
 8012884:	a903      	add	r1, sp, #12
 8012886:	f000 f857 	bl	8012938 <_wcrtomb_r>
 801288a:	0004      	movs	r4, r0
 801288c:	1c43      	adds	r3, r0, #1
 801288e:	d1e0      	bne.n	8012852 <__fputwc+0x1e>
 8012890:	2340      	movs	r3, #64	; 0x40
 8012892:	0006      	movs	r6, r0
 8012894:	89aa      	ldrh	r2, [r5, #12]
 8012896:	4313      	orrs	r3, r2
 8012898:	81ab      	strh	r3, [r5, #12]
 801289a:	0030      	movs	r0, r6
 801289c:	b005      	add	sp, #20
 801289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128a0:	002a      	movs	r2, r5
 80128a2:	9801      	ldr	r0, [sp, #4]
 80128a4:	f000 f8cc 	bl	8012a40 <__swbuf_r>
 80128a8:	1c43      	adds	r3, r0, #1
 80128aa:	d1e5      	bne.n	8012878 <__fputwc+0x44>
 80128ac:	0006      	movs	r6, r0
 80128ae:	e7f4      	b.n	801289a <__fputwc+0x66>

080128b0 <_fputwc_r>:
 80128b0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80128b2:	b570      	push	{r4, r5, r6, lr}
 80128b4:	0005      	movs	r5, r0
 80128b6:	000e      	movs	r6, r1
 80128b8:	0014      	movs	r4, r2
 80128ba:	07db      	lsls	r3, r3, #31
 80128bc:	d405      	bmi.n	80128ca <_fputwc_r+0x1a>
 80128be:	8993      	ldrh	r3, [r2, #12]
 80128c0:	059b      	lsls	r3, r3, #22
 80128c2:	d402      	bmi.n	80128ca <_fputwc_r+0x1a>
 80128c4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80128c6:	f7f9 fda5 	bl	800c414 <__retarget_lock_acquire_recursive>
 80128ca:	230c      	movs	r3, #12
 80128cc:	5ee2      	ldrsh	r2, [r4, r3]
 80128ce:	2380      	movs	r3, #128	; 0x80
 80128d0:	019b      	lsls	r3, r3, #6
 80128d2:	421a      	tst	r2, r3
 80128d4:	d104      	bne.n	80128e0 <_fputwc_r+0x30>
 80128d6:	431a      	orrs	r2, r3
 80128d8:	81a2      	strh	r2, [r4, #12]
 80128da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128dc:	4313      	orrs	r3, r2
 80128de:	6663      	str	r3, [r4, #100]	; 0x64
 80128e0:	0028      	movs	r0, r5
 80128e2:	0022      	movs	r2, r4
 80128e4:	0031      	movs	r1, r6
 80128e6:	f7ff ffa5 	bl	8012834 <__fputwc>
 80128ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128ec:	0005      	movs	r5, r0
 80128ee:	07db      	lsls	r3, r3, #31
 80128f0:	d405      	bmi.n	80128fe <_fputwc_r+0x4e>
 80128f2:	89a3      	ldrh	r3, [r4, #12]
 80128f4:	059b      	lsls	r3, r3, #22
 80128f6:	d402      	bmi.n	80128fe <_fputwc_r+0x4e>
 80128f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128fa:	f7f9 fd8c 	bl	800c416 <__retarget_lock_release_recursive>
 80128fe:	0028      	movs	r0, r5
 8012900:	bd70      	pop	{r4, r5, r6, pc}

08012902 <memmove>:
 8012902:	b510      	push	{r4, lr}
 8012904:	4288      	cmp	r0, r1
 8012906:	d902      	bls.n	801290e <memmove+0xc>
 8012908:	188b      	adds	r3, r1, r2
 801290a:	4298      	cmp	r0, r3
 801290c:	d303      	bcc.n	8012916 <memmove+0x14>
 801290e:	2300      	movs	r3, #0
 8012910:	e007      	b.n	8012922 <memmove+0x20>
 8012912:	5c8b      	ldrb	r3, [r1, r2]
 8012914:	5483      	strb	r3, [r0, r2]
 8012916:	3a01      	subs	r2, #1
 8012918:	d2fb      	bcs.n	8012912 <memmove+0x10>
 801291a:	bd10      	pop	{r4, pc}
 801291c:	5ccc      	ldrb	r4, [r1, r3]
 801291e:	54c4      	strb	r4, [r0, r3]
 8012920:	3301      	adds	r3, #1
 8012922:	429a      	cmp	r2, r3
 8012924:	d1fa      	bne.n	801291c <memmove+0x1a>
 8012926:	e7f8      	b.n	801291a <memmove+0x18>

08012928 <abort>:
 8012928:	2006      	movs	r0, #6
 801292a:	b510      	push	{r4, lr}
 801292c:	f000 f906 	bl	8012b3c <raise>
 8012930:	2001      	movs	r0, #1
 8012932:	f7f1 fb0f 	bl	8003f54 <_exit>
	...

08012938 <_wcrtomb_r>:
 8012938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801293a:	001d      	movs	r5, r3
 801293c:	4b09      	ldr	r3, [pc, #36]	; (8012964 <_wcrtomb_r+0x2c>)
 801293e:	0004      	movs	r4, r0
 8012940:	33e0      	adds	r3, #224	; 0xe0
 8012942:	681e      	ldr	r6, [r3, #0]
 8012944:	002b      	movs	r3, r5
 8012946:	2900      	cmp	r1, #0
 8012948:	d101      	bne.n	801294e <_wcrtomb_r+0x16>
 801294a:	000a      	movs	r2, r1
 801294c:	a901      	add	r1, sp, #4
 801294e:	0020      	movs	r0, r4
 8012950:	47b0      	blx	r6
 8012952:	1c43      	adds	r3, r0, #1
 8012954:	d103      	bne.n	801295e <_wcrtomb_r+0x26>
 8012956:	2300      	movs	r3, #0
 8012958:	602b      	str	r3, [r5, #0]
 801295a:	338a      	adds	r3, #138	; 0x8a
 801295c:	6023      	str	r3, [r4, #0]
 801295e:	b004      	add	sp, #16
 8012960:	bd70      	pop	{r4, r5, r6, pc}
 8012962:	46c0      	nop			; (mov r8, r8)
 8012964:	20000444 	.word	0x20000444

08012968 <__swhatbuf_r>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	000e      	movs	r6, r1
 801296c:	001d      	movs	r5, r3
 801296e:	230e      	movs	r3, #14
 8012970:	5ec9      	ldrsh	r1, [r1, r3]
 8012972:	0014      	movs	r4, r2
 8012974:	b096      	sub	sp, #88	; 0x58
 8012976:	2900      	cmp	r1, #0
 8012978:	da09      	bge.n	801298e <__swhatbuf_r+0x26>
 801297a:	89b2      	ldrh	r2, [r6, #12]
 801297c:	2380      	movs	r3, #128	; 0x80
 801297e:	0011      	movs	r1, r2
 8012980:	4019      	ands	r1, r3
 8012982:	421a      	tst	r2, r3
 8012984:	d018      	beq.n	80129b8 <__swhatbuf_r+0x50>
 8012986:	2100      	movs	r1, #0
 8012988:	3b40      	subs	r3, #64	; 0x40
 801298a:	0008      	movs	r0, r1
 801298c:	e010      	b.n	80129b0 <__swhatbuf_r+0x48>
 801298e:	466a      	mov	r2, sp
 8012990:	f000 f8de 	bl	8012b50 <_fstat_r>
 8012994:	2800      	cmp	r0, #0
 8012996:	dbf0      	blt.n	801297a <__swhatbuf_r+0x12>
 8012998:	23f0      	movs	r3, #240	; 0xf0
 801299a:	9901      	ldr	r1, [sp, #4]
 801299c:	021b      	lsls	r3, r3, #8
 801299e:	4019      	ands	r1, r3
 80129a0:	4b07      	ldr	r3, [pc, #28]	; (80129c0 <__swhatbuf_r+0x58>)
 80129a2:	2080      	movs	r0, #128	; 0x80
 80129a4:	18c9      	adds	r1, r1, r3
 80129a6:	424b      	negs	r3, r1
 80129a8:	4159      	adcs	r1, r3
 80129aa:	2380      	movs	r3, #128	; 0x80
 80129ac:	0100      	lsls	r0, r0, #4
 80129ae:	00db      	lsls	r3, r3, #3
 80129b0:	6029      	str	r1, [r5, #0]
 80129b2:	6023      	str	r3, [r4, #0]
 80129b4:	b016      	add	sp, #88	; 0x58
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	2380      	movs	r3, #128	; 0x80
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	e7e5      	b.n	801298a <__swhatbuf_r+0x22>
 80129be:	46c0      	nop			; (mov r8, r8)
 80129c0:	ffffe000 	.word	0xffffe000

080129c4 <__smakebuf_r>:
 80129c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129c6:	2602      	movs	r6, #2
 80129c8:	898b      	ldrh	r3, [r1, #12]
 80129ca:	0005      	movs	r5, r0
 80129cc:	000c      	movs	r4, r1
 80129ce:	4233      	tst	r3, r6
 80129d0:	d006      	beq.n	80129e0 <__smakebuf_r+0x1c>
 80129d2:	0023      	movs	r3, r4
 80129d4:	3343      	adds	r3, #67	; 0x43
 80129d6:	6023      	str	r3, [r4, #0]
 80129d8:	6123      	str	r3, [r4, #16]
 80129da:	2301      	movs	r3, #1
 80129dc:	6163      	str	r3, [r4, #20]
 80129de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80129e0:	466a      	mov	r2, sp
 80129e2:	ab01      	add	r3, sp, #4
 80129e4:	f7ff ffc0 	bl	8012968 <__swhatbuf_r>
 80129e8:	9900      	ldr	r1, [sp, #0]
 80129ea:	0007      	movs	r7, r0
 80129ec:	0028      	movs	r0, r5
 80129ee:	f7f8 f8df 	bl	800abb0 <_malloc_r>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d108      	bne.n	8012a08 <__smakebuf_r+0x44>
 80129f6:	220c      	movs	r2, #12
 80129f8:	5ea3      	ldrsh	r3, [r4, r2]
 80129fa:	059a      	lsls	r2, r3, #22
 80129fc:	d4ef      	bmi.n	80129de <__smakebuf_r+0x1a>
 80129fe:	2203      	movs	r2, #3
 8012a00:	4393      	bics	r3, r2
 8012a02:	431e      	orrs	r6, r3
 8012a04:	81a6      	strh	r6, [r4, #12]
 8012a06:	e7e4      	b.n	80129d2 <__smakebuf_r+0xe>
 8012a08:	2380      	movs	r3, #128	; 0x80
 8012a0a:	89a2      	ldrh	r2, [r4, #12]
 8012a0c:	6020      	str	r0, [r4, #0]
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	81a3      	strh	r3, [r4, #12]
 8012a12:	9b00      	ldr	r3, [sp, #0]
 8012a14:	6120      	str	r0, [r4, #16]
 8012a16:	6163      	str	r3, [r4, #20]
 8012a18:	9b01      	ldr	r3, [sp, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00c      	beq.n	8012a38 <__smakebuf_r+0x74>
 8012a1e:	0028      	movs	r0, r5
 8012a20:	230e      	movs	r3, #14
 8012a22:	5ee1      	ldrsh	r1, [r4, r3]
 8012a24:	f000 f8a6 	bl	8012b74 <_isatty_r>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d005      	beq.n	8012a38 <__smakebuf_r+0x74>
 8012a2c:	2303      	movs	r3, #3
 8012a2e:	89a2      	ldrh	r2, [r4, #12]
 8012a30:	439a      	bics	r2, r3
 8012a32:	3b02      	subs	r3, #2
 8012a34:	4313      	orrs	r3, r2
 8012a36:	81a3      	strh	r3, [r4, #12]
 8012a38:	89a3      	ldrh	r3, [r4, #12]
 8012a3a:	433b      	orrs	r3, r7
 8012a3c:	81a3      	strh	r3, [r4, #12]
 8012a3e:	e7ce      	b.n	80129de <__smakebuf_r+0x1a>

08012a40 <__swbuf_r>:
 8012a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a42:	0006      	movs	r6, r0
 8012a44:	000d      	movs	r5, r1
 8012a46:	0014      	movs	r4, r2
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	d004      	beq.n	8012a56 <__swbuf_r+0x16>
 8012a4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <__swbuf_r+0x16>
 8012a52:	f7f9 fac1 	bl	800bfd8 <__sinit>
 8012a56:	69a3      	ldr	r3, [r4, #24]
 8012a58:	60a3      	str	r3, [r4, #8]
 8012a5a:	89a3      	ldrh	r3, [r4, #12]
 8012a5c:	071b      	lsls	r3, r3, #28
 8012a5e:	d52e      	bpl.n	8012abe <__swbuf_r+0x7e>
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d02b      	beq.n	8012abe <__swbuf_r+0x7e>
 8012a66:	230c      	movs	r3, #12
 8012a68:	5ee2      	ldrsh	r2, [r4, r3]
 8012a6a:	2380      	movs	r3, #128	; 0x80
 8012a6c:	019b      	lsls	r3, r3, #6
 8012a6e:	b2ef      	uxtb	r7, r5
 8012a70:	b2ed      	uxtb	r5, r5
 8012a72:	421a      	tst	r2, r3
 8012a74:	d02c      	beq.n	8012ad0 <__swbuf_r+0x90>
 8012a76:	6923      	ldr	r3, [r4, #16]
 8012a78:	6820      	ldr	r0, [r4, #0]
 8012a7a:	1ac0      	subs	r0, r0, r3
 8012a7c:	6963      	ldr	r3, [r4, #20]
 8012a7e:	4283      	cmp	r3, r0
 8012a80:	dc05      	bgt.n	8012a8e <__swbuf_r+0x4e>
 8012a82:	0021      	movs	r1, r4
 8012a84:	0030      	movs	r0, r6
 8012a86:	f7fd fb39 	bl	80100fc <_fflush_r>
 8012a8a:	2800      	cmp	r0, #0
 8012a8c:	d11d      	bne.n	8012aca <__swbuf_r+0x8a>
 8012a8e:	68a3      	ldr	r3, [r4, #8]
 8012a90:	3001      	adds	r0, #1
 8012a92:	3b01      	subs	r3, #1
 8012a94:	60a3      	str	r3, [r4, #8]
 8012a96:	6823      	ldr	r3, [r4, #0]
 8012a98:	1c5a      	adds	r2, r3, #1
 8012a9a:	6022      	str	r2, [r4, #0]
 8012a9c:	701f      	strb	r7, [r3, #0]
 8012a9e:	6963      	ldr	r3, [r4, #20]
 8012aa0:	4283      	cmp	r3, r0
 8012aa2:	d004      	beq.n	8012aae <__swbuf_r+0x6e>
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	07db      	lsls	r3, r3, #31
 8012aa8:	d507      	bpl.n	8012aba <__swbuf_r+0x7a>
 8012aaa:	2d0a      	cmp	r5, #10
 8012aac:	d105      	bne.n	8012aba <__swbuf_r+0x7a>
 8012aae:	0021      	movs	r1, r4
 8012ab0:	0030      	movs	r0, r6
 8012ab2:	f7fd fb23 	bl	80100fc <_fflush_r>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d107      	bne.n	8012aca <__swbuf_r+0x8a>
 8012aba:	0028      	movs	r0, r5
 8012abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012abe:	0021      	movs	r1, r4
 8012ac0:	0030      	movs	r0, r6
 8012ac2:	f7ff fe53 	bl	801276c <__swsetup_r>
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	d0cd      	beq.n	8012a66 <__swbuf_r+0x26>
 8012aca:	2501      	movs	r5, #1
 8012acc:	426d      	negs	r5, r5
 8012ace:	e7f4      	b.n	8012aba <__swbuf_r+0x7a>
 8012ad0:	4313      	orrs	r3, r2
 8012ad2:	81a3      	strh	r3, [r4, #12]
 8012ad4:	4a02      	ldr	r2, [pc, #8]	; (8012ae0 <__swbuf_r+0xa0>)
 8012ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ad8:	4013      	ands	r3, r2
 8012ada:	6663      	str	r3, [r4, #100]	; 0x64
 8012adc:	e7cb      	b.n	8012a76 <__swbuf_r+0x36>
 8012ade:	46c0      	nop			; (mov r8, r8)
 8012ae0:	ffffdfff 	.word	0xffffdfff

08012ae4 <_raise_r>:
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	0004      	movs	r4, r0
 8012ae8:	000d      	movs	r5, r1
 8012aea:	291f      	cmp	r1, #31
 8012aec:	d904      	bls.n	8012af8 <_raise_r+0x14>
 8012aee:	2316      	movs	r3, #22
 8012af0:	6003      	str	r3, [r0, #0]
 8012af2:	2001      	movs	r0, #1
 8012af4:	4240      	negs	r0, r0
 8012af6:	bd70      	pop	{r4, r5, r6, pc}
 8012af8:	0003      	movs	r3, r0
 8012afa:	33fc      	adds	r3, #252	; 0xfc
 8012afc:	69db      	ldr	r3, [r3, #28]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d004      	beq.n	8012b0c <_raise_r+0x28>
 8012b02:	008a      	lsls	r2, r1, #2
 8012b04:	189b      	adds	r3, r3, r2
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	2a00      	cmp	r2, #0
 8012b0a:	d108      	bne.n	8012b1e <_raise_r+0x3a>
 8012b0c:	0020      	movs	r0, r4
 8012b0e:	f000 f855 	bl	8012bbc <_getpid_r>
 8012b12:	002a      	movs	r2, r5
 8012b14:	0001      	movs	r1, r0
 8012b16:	0020      	movs	r0, r4
 8012b18:	f000 f83e 	bl	8012b98 <_kill_r>
 8012b1c:	e7eb      	b.n	8012af6 <_raise_r+0x12>
 8012b1e:	2000      	movs	r0, #0
 8012b20:	2a01      	cmp	r2, #1
 8012b22:	d0e8      	beq.n	8012af6 <_raise_r+0x12>
 8012b24:	1c51      	adds	r1, r2, #1
 8012b26:	d103      	bne.n	8012b30 <_raise_r+0x4c>
 8012b28:	2316      	movs	r3, #22
 8012b2a:	3001      	adds	r0, #1
 8012b2c:	6023      	str	r3, [r4, #0]
 8012b2e:	e7e2      	b.n	8012af6 <_raise_r+0x12>
 8012b30:	2400      	movs	r4, #0
 8012b32:	0028      	movs	r0, r5
 8012b34:	601c      	str	r4, [r3, #0]
 8012b36:	4790      	blx	r2
 8012b38:	0020      	movs	r0, r4
 8012b3a:	e7dc      	b.n	8012af6 <_raise_r+0x12>

08012b3c <raise>:
 8012b3c:	b510      	push	{r4, lr}
 8012b3e:	4b03      	ldr	r3, [pc, #12]	; (8012b4c <raise+0x10>)
 8012b40:	0001      	movs	r1, r0
 8012b42:	6818      	ldr	r0, [r3, #0]
 8012b44:	f7ff ffce 	bl	8012ae4 <_raise_r>
 8012b48:	bd10      	pop	{r4, pc}
 8012b4a:	46c0      	nop			; (mov r8, r8)
 8012b4c:	200006d0 	.word	0x200006d0

08012b50 <_fstat_r>:
 8012b50:	2300      	movs	r3, #0
 8012b52:	b570      	push	{r4, r5, r6, lr}
 8012b54:	4d06      	ldr	r5, [pc, #24]	; (8012b70 <_fstat_r+0x20>)
 8012b56:	0004      	movs	r4, r0
 8012b58:	0008      	movs	r0, r1
 8012b5a:	0011      	movs	r1, r2
 8012b5c:	602b      	str	r3, [r5, #0]
 8012b5e:	f7f1 fa48 	bl	8003ff2 <_fstat>
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	d103      	bne.n	8012b6e <_fstat_r+0x1e>
 8012b66:	682b      	ldr	r3, [r5, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d000      	beq.n	8012b6e <_fstat_r+0x1e>
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	20000da8 	.word	0x20000da8

08012b74 <_isatty_r>:
 8012b74:	2300      	movs	r3, #0
 8012b76:	b570      	push	{r4, r5, r6, lr}
 8012b78:	4d06      	ldr	r5, [pc, #24]	; (8012b94 <_isatty_r+0x20>)
 8012b7a:	0004      	movs	r4, r0
 8012b7c:	0008      	movs	r0, r1
 8012b7e:	602b      	str	r3, [r5, #0]
 8012b80:	f7f1 fa45 	bl	800400e <_isatty>
 8012b84:	1c43      	adds	r3, r0, #1
 8012b86:	d103      	bne.n	8012b90 <_isatty_r+0x1c>
 8012b88:	682b      	ldr	r3, [r5, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d000      	beq.n	8012b90 <_isatty_r+0x1c>
 8012b8e:	6023      	str	r3, [r4, #0]
 8012b90:	bd70      	pop	{r4, r5, r6, pc}
 8012b92:	46c0      	nop			; (mov r8, r8)
 8012b94:	20000da8 	.word	0x20000da8

08012b98 <_kill_r>:
 8012b98:	2300      	movs	r3, #0
 8012b9a:	b570      	push	{r4, r5, r6, lr}
 8012b9c:	4d06      	ldr	r5, [pc, #24]	; (8012bb8 <_kill_r+0x20>)
 8012b9e:	0004      	movs	r4, r0
 8012ba0:	0008      	movs	r0, r1
 8012ba2:	0011      	movs	r1, r2
 8012ba4:	602b      	str	r3, [r5, #0]
 8012ba6:	f7f1 f9c5 	bl	8003f34 <_kill>
 8012baa:	1c43      	adds	r3, r0, #1
 8012bac:	d103      	bne.n	8012bb6 <_kill_r+0x1e>
 8012bae:	682b      	ldr	r3, [r5, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d000      	beq.n	8012bb6 <_kill_r+0x1e>
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	bd70      	pop	{r4, r5, r6, pc}
 8012bb8:	20000da8 	.word	0x20000da8

08012bbc <_getpid_r>:
 8012bbc:	b510      	push	{r4, lr}
 8012bbe:	f7f1 f9b3 	bl	8003f28 <_getpid>
 8012bc2:	bd10      	pop	{r4, pc}

08012bc4 <round>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	004a      	lsls	r2, r1, #1
 8012bc8:	000d      	movs	r5, r1
 8012bca:	4920      	ldr	r1, [pc, #128]	; (8012c4c <round+0x88>)
 8012bcc:	0d52      	lsrs	r2, r2, #21
 8012bce:	1851      	adds	r1, r2, r1
 8012bd0:	0006      	movs	r6, r0
 8012bd2:	2913      	cmp	r1, #19
 8012bd4:	dc18      	bgt.n	8012c08 <round+0x44>
 8012bd6:	2900      	cmp	r1, #0
 8012bd8:	da09      	bge.n	8012bee <round+0x2a>
 8012bda:	0feb      	lsrs	r3, r5, #31
 8012bdc:	2200      	movs	r2, #0
 8012bde:	07db      	lsls	r3, r3, #31
 8012be0:	3101      	adds	r1, #1
 8012be2:	d101      	bne.n	8012be8 <round+0x24>
 8012be4:	491a      	ldr	r1, [pc, #104]	; (8012c50 <round+0x8c>)
 8012be6:	430b      	orrs	r3, r1
 8012be8:	0019      	movs	r1, r3
 8012bea:	0010      	movs	r0, r2
 8012bec:	e017      	b.n	8012c1e <round+0x5a>
 8012bee:	4c19      	ldr	r4, [pc, #100]	; (8012c54 <round+0x90>)
 8012bf0:	410c      	asrs	r4, r1
 8012bf2:	0022      	movs	r2, r4
 8012bf4:	402a      	ands	r2, r5
 8012bf6:	4302      	orrs	r2, r0
 8012bf8:	d013      	beq.n	8012c22 <round+0x5e>
 8012bfa:	2280      	movs	r2, #128	; 0x80
 8012bfc:	0312      	lsls	r2, r2, #12
 8012bfe:	410a      	asrs	r2, r1
 8012c00:	1953      	adds	r3, r2, r5
 8012c02:	43a3      	bics	r3, r4
 8012c04:	2200      	movs	r2, #0
 8012c06:	e7ef      	b.n	8012be8 <round+0x24>
 8012c08:	2933      	cmp	r1, #51	; 0x33
 8012c0a:	dd0d      	ble.n	8012c28 <round+0x64>
 8012c0c:	2380      	movs	r3, #128	; 0x80
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	4299      	cmp	r1, r3
 8012c12:	d106      	bne.n	8012c22 <round+0x5e>
 8012c14:	0002      	movs	r2, r0
 8012c16:	002b      	movs	r3, r5
 8012c18:	0029      	movs	r1, r5
 8012c1a:	f7ed fdcd 	bl	80007b8 <__aeabi_dadd>
 8012c1e:	0006      	movs	r6, r0
 8012c20:	000d      	movs	r5, r1
 8012c22:	0030      	movs	r0, r6
 8012c24:	0029      	movs	r1, r5
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	4c0b      	ldr	r4, [pc, #44]	; (8012c58 <round+0x94>)
 8012c2a:	1912      	adds	r2, r2, r4
 8012c2c:	2401      	movs	r4, #1
 8012c2e:	4264      	negs	r4, r4
 8012c30:	40d4      	lsrs	r4, r2
 8012c32:	4220      	tst	r0, r4
 8012c34:	d0f5      	beq.n	8012c22 <round+0x5e>
 8012c36:	2233      	movs	r2, #51	; 0x33
 8012c38:	1a51      	subs	r1, r2, r1
 8012c3a:	3a32      	subs	r2, #50	; 0x32
 8012c3c:	408a      	lsls	r2, r1
 8012c3e:	1812      	adds	r2, r2, r0
 8012c40:	4282      	cmp	r2, r0
 8012c42:	4180      	sbcs	r0, r0
 8012c44:	4240      	negs	r0, r0
 8012c46:	182b      	adds	r3, r5, r0
 8012c48:	43a2      	bics	r2, r4
 8012c4a:	e7cd      	b.n	8012be8 <round+0x24>
 8012c4c:	fffffc01 	.word	0xfffffc01
 8012c50:	3ff00000 	.word	0x3ff00000
 8012c54:	000fffff 	.word	0x000fffff
 8012c58:	fffffbed 	.word	0xfffffbed

08012c5c <_init>:
 8012c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c5e:	46c0      	nop			; (mov r8, r8)
 8012c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c62:	bc08      	pop	{r3}
 8012c64:	469e      	mov	lr, r3
 8012c66:	4770      	bx	lr

08012c68 <_fini>:
 8012c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6a:	46c0      	nop			; (mov r8, r8)
 8012c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c6e:	bc08      	pop	{r3}
 8012c70:	469e      	mov	lr, r3
 8012c72:	4770      	bx	lr
