
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800ba68  0800ba68  0001ba68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c01c  0800c01c  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c01c  0800c01c  0001c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c024  0800c024  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c024  0800c024  0001c024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c02c  0800c02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800c030  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200006c0  0800c6f0  000206c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800c6f0  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fc3  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a3  00000000  00000000  000376ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001097  00000000  00000000  0003bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb2b  00000000  00000000  0003cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ec9  00000000  00000000  0005c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c790b  00000000  00000000  00076773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f7c  00000000  00000000  0013e080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00143ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ba4c 	.word	0x0800ba4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800ba4c 	.word	0x0800ba4c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800bbc4 	.word	0x0800bbc4
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 f814 	bl	8003390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f844 	bl	80023f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 fad6 	bl	800291c <MX_GPIO_Init>
  MX_RTC_Init();
 8002370:	f000 f896 	bl	80024a0 <MX_RTC_Init>
  MX_TIM6_Init();
 8002374:	f000 f976 	bl	8002664 <MX_TIM6_Init>
  MX_SPI1_Init();
 8002378:	f000 f936 	bl	80025e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800237c:	f000 f9b0 	bl	80026e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002380:	f000 f9fc 	bl	800277c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002384:	f000 fa48 	bl	8002818 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8002388:	f000 fa94 	bl	80028b4 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <main+0x88>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fbc7 	bl	8002b24 <send_debug_logs>
  //HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;

  my_tim_init () ;
 8002396:	f000 fc7f 	bl	8002c98 <my_tim_init>
  my_gnss_sw_on () ;
 800239a:	f000 fc41 	bl	8002c20 <my_gnss_sw_on>
  my_tim_start () ;
 800239e:	f000 fc87 	bl	8002cb0 <my_tim_start>
  //my_gnss_get_utc () ;
  my_gnss_log ( &fix3d ) ;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <main+0x8c>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f004 fc67 	bl	8006c78 <my_gnss_log>
  my_tim_stop () ;
 80023aa:	f000 fc91 	bl	8002cd0 <my_tim_stop>
  //my_gnss_sw_off () ;

  if ( !is_system_initialized () )
 80023ae:	f000 fbe9 	bl	8002b84 <is_system_initialized>
 80023b2:	0003      	movs	r3, r0
 80023b4:	001a      	movs	r2, r3
 80023b6:	2301      	movs	r3, #1
 80023b8:	4053      	eors	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d011      	beq.n	80023e4 <main+0x84>
  {
	  my_gnss_sw_on () ;
 80023c0:	f000 fc2e 	bl	8002c20 <my_gnss_sw_on>
	  my_tim_start () ;
 80023c4:	f000 fc74 	bl	8002cb0 <my_tim_start>
	  //my_gnss_get_utc () ;
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <main+0x8c>)
 80023ca:	0018      	movs	r0, r3
 80023cc:	f004 fc12 	bl	8006bf4 <my_gnss_acq_coordinates>
	  my_tim_stop () ;
 80023d0:	f000 fc7e 	bl	8002cd0 <my_tim_stop>
	  //my_gnss_sw_off () ;
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <main+0x90>)
 80023d6:	0018      	movs	r0, r3
 80023d8:	f004 fc6a 	bl	8006cb0 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <main+0x90>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 fba0 	bl	8002b24 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <main+0x84>
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000a20 	.word	0x20000a20
 80023f0:	20000a08 	.word	0x20000a08

080023f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b095      	sub	sp, #84	; 0x54
 80023f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fa:	2414      	movs	r4, #20
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	0018      	movs	r0, r3
 8002400:	233c      	movs	r3, #60	; 0x3c
 8002402:	001a      	movs	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	f004 ffe9 	bl	80073dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	0018      	movs	r0, r3
 800240e:	2310      	movs	r3, #16
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f004 ffe2 	bl	80073dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	0018      	movs	r0, r3
 800241e:	f001 fadf 	bl	80039e0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002422:	f001 facf 	bl	80039c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <SystemClock_Config+0xa8>)
 8002428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <SystemClock_Config+0xa8>)
 800242c:	2118      	movs	r1, #24
 800242e:	438a      	bics	r2, r1
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002432:	193b      	adds	r3, r7, r4
 8002434:	2206      	movs	r2, #6
 8002436:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002438:	193b      	adds	r3, r7, r4
 800243a:	2201      	movs	r2, #1
 800243c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	0052      	lsls	r2, r2, #1
 8002444:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002446:	193b      	adds	r3, r7, r4
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002458:	193b      	adds	r3, r7, r4
 800245a:	0018      	movs	r0, r3
 800245c:	f001 fb0c 	bl	8003a78 <HAL_RCC_OscConfig>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002464:	f000 fc66 	bl	8002d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2207      	movs	r2, #7
 800246c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2100      	movs	r1, #0
 8002484:	0018      	movs	r0, r3
 8002486:	f001 fe57 	bl	8004138 <HAL_RCC_ClockConfig>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800248e:	f000 fc51 	bl	8002d34 <Error_Handler>
  }
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b015      	add	sp, #84	; 0x54
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40021000 	.word	0x40021000

080024a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b090      	sub	sp, #64	; 0x40
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024a6:	232c      	movs	r3, #44	; 0x2c
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	0018      	movs	r0, r3
 80024ac:	2314      	movs	r3, #20
 80024ae:	001a      	movs	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f004 ff93 	bl	80073dc <memset>
  RTC_DateTypeDef sDate = {0};
 80024b6:	2328      	movs	r3, #40	; 0x28
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80024be:	003b      	movs	r3, r7
 80024c0:	0018      	movs	r0, r3
 80024c2:	2328      	movs	r3, #40	; 0x28
 80024c4:	001a      	movs	r2, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	f004 ff88 	bl	80073dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024cc:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <MX_RTC_Init+0x140>)
 80024ce:	4a45      	ldr	r2, [pc, #276]	; (80025e4 <MX_RTC_Init+0x144>)
 80024d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <MX_RTC_Init+0x140>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <MX_RTC_Init+0x140>)
 80024da:	227f      	movs	r2, #127	; 0x7f
 80024dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <MX_RTC_Init+0x140>)
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024e4:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <MX_RTC_Init+0x140>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <MX_RTC_Init+0x140>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <MX_RTC_Init+0x140>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <MX_RTC_Init+0x140>)
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	05d2      	lsls	r2, r2, #23
 80024fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <MX_RTC_Init+0x140>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <MX_RTC_Init+0x140>)
 8002506:	0018      	movs	r0, r3
 8002508:	f002 f9fc 	bl	8004904 <HAL_RTC_Init>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002510:	f000 fc10 	bl	8002d34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002528:	187b      	adds	r3, r7, r1
 800252a:	2200      	movs	r2, #0
 800252c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800253a:	1879      	adds	r1, r7, r1
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <MX_RTC_Init+0x140>)
 800253e:	2201      	movs	r2, #1
 8002540:	0018      	movs	r0, r3
 8002542:	f002 fa81 	bl	8004a48 <HAL_RTC_SetTime>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800254a:	f000 fbf3 	bl	8002d34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800254e:	2128      	movs	r1, #40	; 0x28
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2206      	movs	r2, #6
 8002554:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2201      	movs	r2, #1
 800255a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2201      	movs	r2, #1
 8002560:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002568:	1879      	adds	r1, r7, r1
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <MX_RTC_Init+0x140>)
 800256c:	2201      	movs	r2, #1
 800256e:	0018      	movs	r0, r3
 8002570:	f002 fb6e 	bl	8004c50 <HAL_RTC_SetDate>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002578:	f000 fbdc 	bl	8002d34 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800257c:	003b      	movs	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002582:	003b      	movs	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002588:	003b      	movs	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800258e:	003b      	movs	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002594:	003b      	movs	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800259a:	003b      	movs	r3, r7
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025a0:	003b      	movs	r3, r7
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80025a6:	003b      	movs	r3, r7
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025ac:	003b      	movs	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80025b2:	003b      	movs	r3, r7
 80025b4:	2220      	movs	r2, #32
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80025ba:	003b      	movs	r3, r7
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025c2:	0039      	movs	r1, r7
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_RTC_Init+0x140>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	0018      	movs	r0, r3
 80025ca:	f002 fc21 	bl	8004e10 <HAL_RTC_SetAlarm_IT>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80025d2:	f000 fbaf 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b010      	add	sp, #64	; 0x40
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	200006dc 	.word	0x200006dc
 80025e4:	40002800 	.word	0x40002800

080025e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_SPI1_Init+0x74>)
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <MX_SPI1_Init+0x78>)
 80025f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <MX_SPI1_Init+0x74>)
 80025f4:	2282      	movs	r2, #130	; 0x82
 80025f6:	0052      	lsls	r2, r2, #1
 80025f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_SPI1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_SPI1_Init+0x74>)
 8002602:	22e0      	movs	r2, #224	; 0xe0
 8002604:	00d2      	lsls	r2, r2, #3
 8002606:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <MX_SPI1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <MX_SPI1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_SPI1_Init+0x74>)
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_SPI1_Init+0x74>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_SPI1_Init+0x74>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_SPI1_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_SPI1_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_SPI1_Init+0x74>)
 8002636:	2207      	movs	r2, #7
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_SPI1_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_SPI1_Init+0x74>)
 8002642:	2208      	movs	r2, #8
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <MX_SPI1_Init+0x74>)
 8002648:	0018      	movs	r0, r3
 800264a:	f002 fe61 	bl	8005310 <HAL_SPI_Init>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002652:	f000 fb6f 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000708 	.word	0x20000708
 8002660:	40013000 	.word	0x40013000

08002664 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	0018      	movs	r0, r3
 800266e:	230c      	movs	r3, #12
 8002670:	001a      	movs	r2, r3
 8002672:	2100      	movs	r1, #0
 8002674:	f004 feb2 	bl	80073dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_TIM6_Init+0x6c>)
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <MX_TIM6_Init+0x70>)
 800267c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_TIM6_Init+0x6c>)
 8002680:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <MX_TIM6_Init+0x74>)
 8002682:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_TIM6_Init+0x6c>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_TIM6_Init+0x6c>)
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <MX_TIM6_Init+0x78>)
 800268e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_TIM6_Init+0x6c>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_TIM6_Init+0x6c>)
 8002698:	0018      	movs	r0, r3
 800269a:	f002 fef1 	bl	8005480 <HAL_TIM_Base_Init>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80026a2:	f000 fb47 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_TIM6_Init+0x6c>)
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f003 f989 	bl	80059d0 <HAL_TIMEx_MasterConfigSynchronization>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80026c2:	f000 fb37 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	2000076c 	.word	0x2000076c
 80026d4:	40001000 	.word	0x40001000
 80026d8:	00003e7f 	.word	0x00003e7f
 80026dc:	000003e7 	.word	0x000003e7

080026e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <MX_USART1_UART_Init+0x94>)
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <MX_USART1_UART_Init+0x98>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_USART1_UART_Init+0x94>)
 80026ec:	22e1      	movs	r2, #225	; 0xe1
 80026ee:	0252      	lsls	r2, r2, #9
 80026f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <MX_USART1_UART_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <MX_USART1_UART_Init+0x94>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <MX_USART1_UART_Init+0x94>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <MX_USART1_UART_Init+0x94>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <MX_USART1_UART_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_USART1_UART_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_USART1_UART_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800272a:	0018      	movs	r0, r3
 800272c:	f003 f9de 	bl	8005aec <HAL_UART_Init>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d001      	beq.n	8002738 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002734:	f000 fafe 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800273a:	2100      	movs	r1, #0
 800273c:	0018      	movs	r0, r3
 800273e:	f004 f979 	bl	8006a34 <HAL_UARTEx_SetTxFifoThreshold>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d001      	beq.n	800274a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002746:	f000 faf5 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800274c:	2100      	movs	r1, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f004 f9b0 	bl	8006ab4 <HAL_UARTEx_SetRxFifoThreshold>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d001      	beq.n	800275c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002758:	f000 faec 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <MX_USART1_UART_Init+0x94>)
 800275e:	0018      	movs	r0, r3
 8002760:	f004 f92e 	bl	80069c0 <HAL_UARTEx_DisableFifoMode>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002768:	f000 fae4 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	200007b8 	.word	0x200007b8
 8002778:	40013800 	.word	0x40013800

0800277c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <MX_USART2_UART_Init+0x94>)
 8002782:	4a24      	ldr	r2, [pc, #144]	; (8002814 <MX_USART2_UART_Init+0x98>)
 8002784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <MX_USART2_UART_Init+0x94>)
 8002788:	22e1      	movs	r2, #225	; 0xe1
 800278a:	0292      	lsls	r2, r2, #10
 800278c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <MX_USART2_UART_Init+0x94>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <MX_USART2_UART_Init+0x94>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <MX_USART2_UART_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f003 f990 	bl	8005aec <HAL_UART_Init>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027d0:	f000 fab0 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	0018      	movs	r0, r3
 80027da:	f004 f92b 	bl	8006a34 <HAL_UARTEx_SetTxFifoThreshold>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027e2:	f000 faa7 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027e8:	2100      	movs	r1, #0
 80027ea:	0018      	movs	r0, r3
 80027ec:	f004 f962 	bl	8006ab4 <HAL_UARTEx_SetRxFifoThreshold>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027f4:	f000 fa9e 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <MX_USART2_UART_Init+0x94>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f004 f8e0 	bl	80069c0 <HAL_UARTEx_DisableFifoMode>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002804:	f000 fa96 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	2000084c 	.word	0x2000084c
 8002814:	40004400 	.word	0x40004400

08002818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <MX_USART3_UART_Init+0x94>)
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <MX_USART3_UART_Init+0x98>)
 8002820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002824:	2296      	movs	r2, #150	; 0x96
 8002826:	0192      	lsls	r2, r2, #6
 8002828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <MX_USART3_UART_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_USART3_UART_Init+0x94>)
 800283e:	220c      	movs	r2, #12
 8002840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_USART3_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <MX_USART3_UART_Init+0x94>)
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002862:	0018      	movs	r0, r3
 8002864:	f003 f942 	bl	8005aec <HAL_UART_Init>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d001      	beq.n	8002870 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800286c:	f000 fa62 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002872:	2100      	movs	r1, #0
 8002874:	0018      	movs	r0, r3
 8002876:	f004 f8dd 	bl	8006a34 <HAL_UARTEx_SetTxFifoThreshold>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d001      	beq.n	8002882 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800287e:	f000 fa59 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002884:	2100      	movs	r1, #0
 8002886:	0018      	movs	r0, r3
 8002888:	f004 f914 	bl	8006ab4 <HAL_UARTEx_SetRxFifoThreshold>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002890:	f000 fa50 	bl	8002d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <MX_USART3_UART_Init+0x94>)
 8002896:	0018      	movs	r0, r3
 8002898:	f004 f892 	bl	80069c0 <HAL_UARTEx_DisableFifoMode>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d001      	beq.n	80028a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028a0:	f000 fa48 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	200008e0 	.word	0x200008e0
 80028b0:	40004800 	.word	0x40004800

080028b4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <MX_USART5_UART_Init+0x64>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028c0:	22e1      	movs	r2, #225	; 0xe1
 80028c2:	0252      	lsls	r2, r2, #9
 80028c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <MX_USART5_UART_Init+0x60>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f003 f8f4 	bl	8005aec <HAL_UART_Init>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002908:	f000 fa14 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	20000974 	.word	0x20000974
 8002918:	40005000 	.word	0x40005000

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	2414      	movs	r4, #20
 8002924:	193b      	adds	r3, r7, r4
 8002926:	0018      	movs	r0, r3
 8002928:	2314      	movs	r3, #20
 800292a:	001a      	movs	r2, r3
 800292c:	2100      	movs	r1, #0
 800292e:	f004 fd55 	bl	80073dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002938:	2104      	movs	r1, #4
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b69      	ldr	r3, [pc, #420]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002968:	2102      	movs	r1, #2
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002980:	2108      	movs	r1, #8
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <MX_GPIO_Init+0x1f0>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	2208      	movs	r2, #8
 800298c:	4013      	ands	r3, r2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002992:	23a0      	movs	r3, #160	; 0xa0
 8002994:	05db      	lsls	r3, r3, #23
 8002996:	2200      	movs	r2, #0
 8002998:	2110      	movs	r1, #16
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fff4 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 80029a0:	495b      	ldr	r1, [pc, #364]	; (8002b10 <MX_GPIO_Init+0x1f4>)
 80029a2:	4b5c      	ldr	r3, [pc, #368]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 ffee 	bl	8003988 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4858      	ldr	r0, [pc, #352]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	0019      	movs	r1, r3
 80029b6:	f000 ffe7 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 80029ba:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <MX_GPIO_Init+0x1fc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	2103      	movs	r1, #3
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 ffe1 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2288      	movs	r2, #136	; 0x88
 80029d0:	0352      	lsls	r2, r2, #13
 80029d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 80029da:	193a      	adds	r2, r7, r4
 80029dc:	23a0      	movs	r3, #160	; 0xa0
 80029de:	05db      	lsls	r3, r3, #23
 80029e0:	0011      	movs	r1, r2
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 fe64 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 80029fa:	193a      	adds	r2, r7, r4
 80029fc:	23a0      	movs	r3, #160	; 0xa0
 80029fe:	05db      	lsls	r3, r3, #23
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fe54 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2201      	movs	r2, #1
 8002a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002a20:	193a      	adds	r2, r7, r4
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	0011      	movs	r1, r2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 fe41 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <MX_GPIO_Init+0x200>)
 8002a32:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	2201      	movs	r2, #1
 8002a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f000 fe2f 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002a52:	0021      	movs	r1, r4
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2288      	movs	r2, #136	; 0x88
 8002a5e:	0352      	lsls	r2, r2, #13
 8002a60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	000c      	movs	r4, r1
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f000 fe1d 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002a76:	0021      	movs	r1, r4
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0192      	lsls	r2, r2, #6
 8002a7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002a80:	000c      	movs	r4, r1
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2211      	movs	r2, #17
 8002a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 8002a98:	0019      	movs	r1, r3
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	f000 fe08 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <MX_GPIO_Init+0x204>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <MX_GPIO_Init+0x1f8>)
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f000 fdf9 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <MX_GPIO_Init+0x1fc>)
 8002ada:	0019      	movs	r1, r3
 8002adc:	0010      	movs	r0, r2
 8002ade:	f000 fde7 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002ae2:	0021      	movs	r1, r4
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <MX_GPIO_Init+0x1fc>)
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f000 fdd7 	bl	80036b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00b      	add	sp, #44	; 0x2c
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	0000a403 	.word	0x0000a403
 8002b14:	50000400 	.word	0x50000400
 8002b18:	50000c00 	.word	0x50000c00
 8002b1c:	00008c03 	.word	0x00008c03
 8002b20:	00004040 	.word	0x00004040

08002b24 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd fae8 	bl	8000104 <strlen>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2bfa      	cmp	r3, #250	; 0xfa
 8002b3c:	d908      	bls.n	8002b50 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002b3e:	23fa      	movs	r3, #250	; 0xfa
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	490d      	ldr	r1, [pc, #52]	; (8002b78 <send_debug_logs+0x54>)
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <send_debug_logs+0x58>)
 8002b46:	222a      	movs	r2, #42	; 0x2a
 8002b48:	f003 f826 	bl	8005b98 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002b4c:	23fa      	movs	r3, #250	; 0xfa
 8002b4e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	23fa      	movs	r3, #250	; 0xfa
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4808      	ldr	r0, [pc, #32]	; (8002b7c <send_debug_logs+0x58>)
 8002b5c:	f003 f81c 	bl	8005b98 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002b60:	23fa      	movs	r3, #250	; 0xfa
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4906      	ldr	r1, [pc, #24]	; (8002b80 <send_debug_logs+0x5c>)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <send_debug_logs+0x58>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f003 f815 	bl	8005b98 <HAL_UART_Transmit>
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	0800ba90 	.word	0x0800ba90
 8002b7c:	2000084c 	.word	0x2000084c
 8002b80:	0800babc 	.word	0x0800babc

08002b84 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002b8a:	1dbc      	adds	r4, r7, #6
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <is_system_initialized+0x34>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f004 f88e 	bl	8006cb0 <my_rtc_get_dt_s>
 8002b94:	0003      	movs	r3, r0
 8002b96:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <is_system_initialized+0x34>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff ffc2 	bl	8002b24 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	8819      	ldrh	r1, [r3, #0]
 8002ba4:	23fd      	movs	r3, #253	; 0xfd
 8002ba6:	00da      	lsls	r2, r3, #3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4291      	cmp	r1, r2
 8002bac:	415b      	adcs	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b003      	add	sp, #12
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	20000a08 	.word	0x20000a08

08002bbc <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10e      	bne.n	8002bee <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4811      	ldr	r0, [pc, #68]	; (8002c1c <my_ant_sw_pos+0x60>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	0019      	movs	r1, r3
 8002bda:	f000 fed5 	bl	8003988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	480e      	ldr	r0, [pc, #56]	; (8002c1c <my_ant_sw_pos+0x60>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	0019      	movs	r1, r3
 8002be8:	f000 fece 	bl	8003988 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002bec:	e011      	b.n	8002c12 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002bee:	1dfb      	adds	r3, r7, #7
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d10d      	bne.n	8002c12 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	4808      	ldr	r0, [pc, #32]	; (8002c1c <my_ant_sw_pos+0x60>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	0019      	movs	r1, r3
 8002c00:	f000 fec2 	bl	8003988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <my_ant_sw_pos+0x60>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	f000 febb 	bl	8003988 <HAL_GPIO_WritePin>
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	50000400 	.word	0x50000400

08002c20 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff ffc9 	bl	8002bbc <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	4808      	ldr	r0, [pc, #32]	; (8002c50 <my_gnss_sw_on+0x30>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	0019      	movs	r1, r3
 8002c34:	f000 fea8 	bl	8003988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	019b      	lsls	r3, r3, #6
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <my_gnss_sw_on+0x30>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	0019      	movs	r1, r3
 8002c42:	f000 fea1 	bl	8003988 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002c46:	f7ff fe35 	bl	80028b4 <MX_USART5_UART_Init>
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	50000400 	.word	0x50000400

08002c54 <my_gnss_receive_byte>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &HUART_GNSS ) ;

}
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	1cfb      	adds	r3, r7, #3
 8002c60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002c62:	23fa      	movs	r3, #250	; 0xfa
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4809      	ldr	r0, [pc, #36]	; (8002c90 <my_gnss_receive_byte+0x3c>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f003 f838 	bl	8005ce0 <HAL_UART_Receive>
	if ( verbose )
 8002c70:	1cfb      	adds	r3, r7, #3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002c78:	23fa      	movs	r3, #250	; 0xfa
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <my_gnss_receive_byte+0x40>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	f002 ff89 	bl	8005b98 <HAL_UART_Transmit>
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000974 	.word	0x20000974
 8002c94:	2000084c 	.word	0x2000084c

08002c98 <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <my_tim_init+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4252      	negs	r2, r2
 8002ca4:	611a      	str	r2, [r3, #16]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000076c 	.word	0x2000076c

08002cb0 <my_tim_start>:

void my_tim_start ()
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <my_tim_start+0x18>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <my_tim_start+0x1c>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f002 fc37 	bl	8005530 <HAL_TIM_Base_Start_IT>
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000a38 	.word	0x20000a38
 8002ccc:	2000076c 	.word	0x2000076c

08002cd0 <my_tim_stop>:

void my_tim_stop ()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <my_tim_stop+0x14>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f002 fc8c 	bl	80055f4 <HAL_TIM_Base_Stop_IT>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	2000076c 	.word	0x2000076c

08002ce8 <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d111      	bne.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d04:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	2396      	movs	r3, #150	; 0x96
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d905      	bls.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff ff05 	bl	8002b24 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002d1a:	f000 fcb8 	bl	800368e <HAL_NVIC_SystemReset>
		}
	}
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40001000 	.word	0x40001000
 8002d2c:	20000a38 	.word	0x20000a38
 8002d30:	0800baec 	.word	0x0800baec

08002d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <Error_Handler+0x8>
	...

08002d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	0549      	lsls	r1, r1, #21
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_MspInit+0x4c>)
 8002d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	055b      	lsls	r3, r3, #21
 8002d74:	4013      	ands	r3, r2
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002d7a:	23c0      	movs	r3, #192	; 0xc0
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fb8c 	bl	800349c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b097      	sub	sp, #92	; 0x5c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d98:	240c      	movs	r4, #12
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	234c      	movs	r3, #76	; 0x4c
 8002da0:	001a      	movs	r2, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	f004 fb1a 	bl	80073dc <memset>
  if(hrtc->Instance==RTC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_RTC_MspInit+0x84>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12c      	bne.n	8002e0c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	0292      	lsls	r2, r2, #10
 8002db8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0052      	lsls	r2, r2, #1
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc2:	193b      	adds	r3, r7, r4
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f001 fb61 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002dce:	f7ff ffb1 	bl	8002d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_RTC_MspInit+0x88>)
 8002dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RTC_MspInit+0x88>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0209      	lsls	r1, r1, #8
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RTC_MspInit+0x88>)
 8002de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RTC_MspInit+0x88>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	00c9      	lsls	r1, r1, #3
 8002dea:	430a      	orrs	r2, r1
 8002dec:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RTC_MspInit+0x88>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2103      	movs	r1, #3
 8002e00:	2002      	movs	r0, #2
 8002e02:	f000 fc1f 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002e06:	2002      	movs	r0, #2
 8002e08:	f000 fc31 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b017      	add	sp, #92	; 0x5c
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	40002800 	.word	0x40002800
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08b      	sub	sp, #44	; 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	2414      	movs	r4, #20
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	0018      	movs	r0, r3
 8002e2a:	2314      	movs	r3, #20
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	2100      	movs	r1, #0
 8002e30:	f004 fad4 	bl	80073dc <memset>
  if(hspi->Instance==SPI1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <HAL_SPI_MspInit+0x8c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d130      	bne.n	8002ea0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0149      	lsls	r1, r1, #5
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	015b      	lsls	r3, r3, #5
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	430a      	orrs	r2, r1
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_SPI_MspInit+0x90>)
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8002e72:	0021      	movs	r1, r4
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	22e0      	movs	r2, #224	; 0xe0
 8002e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	187a      	adds	r2, r7, r1
 8002e94:	23a0      	movs	r3, #160	; 0xa0
 8002e96:	05db      	lsls	r3, r3, #23
 8002e98:	0011      	movs	r1, r2
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 fc08 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b00b      	add	sp, #44	; 0x2c
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	40013000 	.word	0x40013000
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_TIM_Base_MspInit+0x44>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d113      	bne.n	8002eea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_TIM_Base_MspInit+0x48>)
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_TIM_Base_MspInit+0x48>)
 8002ec8:	2110      	movs	r1, #16
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_TIM_Base_MspInit+0x48>)
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2102      	movs	r1, #2
 8002ede:	2011      	movs	r0, #17
 8002ee0:	f000 fbb0 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002ee4:	2011      	movs	r0, #17
 8002ee6:	f000 fbc2 	bl	800366e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b004      	add	sp, #16
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40001000 	.word	0x40001000
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b0a3      	sub	sp, #140	; 0x8c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	2374      	movs	r3, #116	; 0x74
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	0018      	movs	r0, r3
 8002f0a:	2314      	movs	r3, #20
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	2100      	movs	r1, #0
 8002f10:	f004 fa64 	bl	80073dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f14:	2428      	movs	r4, #40	; 0x28
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	0018      	movs	r0, r3
 8002f1a:	234c      	movs	r3, #76	; 0x4c
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f004 fa5c 	bl	80073dc <memset>
  if(huart->Instance==USART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a84      	ldr	r2, [pc, #528]	; (800313c <HAL_UART_MspInit+0x240>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d140      	bne.n	8002fb0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 faa5 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f46:	f7ff fef5 	bl	8002d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	01c9      	lsls	r1, r1, #7
 8002f54:	430a      	orrs	r2, r1
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
 8002f58:	4b79      	ldr	r3, [pc, #484]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	01db      	lsls	r3, r3, #7
 8002f60:	4013      	ands	r3, r2
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6a:	4b75      	ldr	r3, [pc, #468]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8002f7e:	2174      	movs	r1, #116	; 0x74
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	22c0      	movs	r2, #192	; 0xc0
 8002f84:	00d2      	lsls	r2, r2, #3
 8002f86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	187b      	adds	r3, r7, r1
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	187a      	adds	r2, r7, r1
 8002fa2:	23a0      	movs	r3, #160	; 0xa0
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fb81 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002fae:	e0c0      	b.n	8003132 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a63      	ldr	r2, [pc, #396]	; (8003144 <HAL_UART_MspInit+0x248>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d140      	bne.n	800303c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fba:	2128      	movs	r1, #40	; 0x28
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 fa5e 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8002fd4:	f7ff feae 	bl	8002d34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0289      	lsls	r1, r1, #10
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fe6:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	4b52      	ldr	r3, [pc, #328]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff8:	4b51      	ldr	r3, [pc, #324]	; (8003140 <HAL_UART_MspInit+0x244>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8003000:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_UART_MspInit+0x244>)
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	2201      	movs	r2, #1
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800300c:	2174      	movs	r1, #116	; 0x74
 800300e:	187b      	adds	r3, r7, r1
 8003010:	220c      	movs	r2, #12
 8003012:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2202      	movs	r2, #2
 8003018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	187b      	adds	r3, r7, r1
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2201      	movs	r2, #1
 800302a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	187a      	adds	r2, r7, r1
 800302e:	23a0      	movs	r3, #160	; 0xa0
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f000 fb3b 	bl	80036b0 <HAL_GPIO_Init>
}
 800303a:	e07a      	b.n	8003132 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a41      	ldr	r2, [pc, #260]	; (8003148 <HAL_UART_MspInit+0x24c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d140      	bne.n	80030c8 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003046:	2128      	movs	r1, #40	; 0x28
 8003048:	187b      	adds	r3, r7, r1
 800304a:	2204      	movs	r2, #4
 800304c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800304e:	187b      	adds	r3, r7, r1
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003054:	187b      	adds	r3, r7, r1
 8003056:	0018      	movs	r0, r3
 8003058:	f001 fa18 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003060:	f7ff fe68 	bl	8002d34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_UART_MspInit+0x244>)
 8003066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_UART_MspInit+0x244>)
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	02c9      	lsls	r1, r1, #11
 800306e:	430a      	orrs	r2, r1
 8003070:	63da      	str	r2, [r3, #60]	; 0x3c
 8003072:	4b33      	ldr	r3, [pc, #204]	; (8003140 <HAL_UART_MspInit+0x244>)
 8003074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	02db      	lsls	r3, r3, #11
 800307a:	4013      	ands	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_UART_MspInit+0x244>)
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_UART_MspInit+0x244>)
 8003086:	2102      	movs	r1, #2
 8003088:	430a      	orrs	r2, r1
 800308a:	635a      	str	r2, [r3, #52]	; 0x34
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_UART_MspInit+0x244>)
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	2202      	movs	r2, #2
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003098:	2174      	movs	r1, #116	; 0x74
 800309a:	187b      	adds	r3, r7, r1
 800309c:	22c0      	movs	r2, #192	; 0xc0
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	2202      	movs	r2, #2
 80030a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2204      	movs	r2, #4
 80030b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_UART_MspInit+0x250>)
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f000 faf5 	bl	80036b0 <HAL_GPIO_Init>
}
 80030c6:	e034      	b.n	8003132 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a20      	ldr	r2, [pc, #128]	; (8003150 <HAL_UART_MspInit+0x254>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12f      	bne.n	8003132 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	0049      	lsls	r1, r1, #1
 80030dc:	430a      	orrs	r2, r1
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030f4:	2102      	movs	r1, #2
 80030f6:	430a      	orrs	r2, r1
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_UART_MspInit+0x244>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	2202      	movs	r2, #2
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003106:	2174      	movs	r1, #116	; 0x74
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2218      	movs	r2, #24
 800310c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	187b      	adds	r3, r7, r1
 8003110:	2202      	movs	r2, #2
 8003112:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2200      	movs	r2, #0
 800311e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2203      	movs	r2, #3
 8003124:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003126:	187b      	adds	r3, r7, r1
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_UART_MspInit+0x250>)
 800312a:	0019      	movs	r1, r3
 800312c:	0010      	movs	r0, r2
 800312e:	f000 fabf 	bl	80036b0 <HAL_GPIO_Init>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b023      	add	sp, #140	; 0x8c
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40013800 	.word	0x40013800
 8003140:	40021000 	.word	0x40021000
 8003144:	40004400 	.word	0x40004400
 8003148:	40004800 	.word	0x40004800
 800314c:	50000400 	.word	0x50000400
 8003150:	40005000 	.word	0x40005000

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003158:	e7fe      	b.n	8003158 <NMI_Handler+0x4>

0800315a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003178:	f000 f974 	bl	8003464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <RTC_TAMP_IRQHandler+0x14>)
 800318a:	0018      	movs	r0, r3
 800318c:	f001 ff80 	bl	8005090 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	200006dc 	.word	0x200006dc

0800319c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80031a2:	0018      	movs	r0, r3
 80031a4:	f002 fa54 	bl	8005650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	2000076c 	.word	0x2000076c

080031b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_kill>:

int _kill(int pid, int sig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ca:	f004 f98b 	bl	80074e4 <__errno>
 80031ce:	0003      	movs	r3, r0
 80031d0:	2216      	movs	r2, #22
 80031d2:	601a      	str	r2, [r3, #0]
  return -1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	425b      	negs	r3, r3
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <_exit>:

void _exit (int status)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031e8:	2301      	movs	r3, #1
 80031ea:	425a      	negs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0011      	movs	r1, r2
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff ffe5 	bl	80031c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031f6:	e7fe      	b.n	80031f6 <_exit+0x16>

080031f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e00a      	b.n	8003220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800320a:	e000      	b.n	800320e <_read+0x16>
 800320c:	bf00      	nop
 800320e:	0001      	movs	r1, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	60ba      	str	r2, [r7, #8]
 8003216:	b2ca      	uxtb	r2, r1
 8003218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	dbf0      	blt.n	800320a <_read+0x12>
  }

  return len;
 8003228:	687b      	ldr	r3, [r7, #4]
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}

08003232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e009      	b.n	8003258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	0018      	movs	r0, r3
 800324e:	e000      	b.n	8003252 <_write+0x20>
 8003250:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	dbf1      	blt.n	8003244 <_write+0x12>
  }
  return len;
 8003260:	687b      	ldr	r3, [r7, #4]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}

0800326a <_close>:

int _close(int file)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003272:	2301      	movs	r3, #1
 8003274:	425b      	negs	r3, r3
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}

0800327e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	0192      	lsls	r2, r2, #6
 800328e:	605a      	str	r2, [r3, #4]
  return 0;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}

0800329a <_isatty>:

int _isatty(int file)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <_sbrk+0x5c>)
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_sbrk+0x60>)
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_sbrk+0x64>)
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <_sbrk+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	18d3      	adds	r3, r2, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f4:	f004 f8f6 	bl	80074e4 <__errno>
 80032f8:	0003      	movs	r3, r0
 80032fa:	220c      	movs	r2, #12
 80032fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032fe:	2301      	movs	r3, #1
 8003300:	425b      	negs	r3, r3
 8003302:	e009      	b.n	8003318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <_sbrk+0x64>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <_sbrk+0x64>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	18d2      	adds	r2, r2, r3
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <_sbrk+0x64>)
 8003314:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b006      	add	sp, #24
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20024000 	.word	0x20024000
 8003324:	00000400 	.word	0x00000400
 8003328:	20000a30 	.word	0x20000a30
 800332c:	20000d48 	.word	0x20000d48

08003330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800333c:	480d      	ldr	r0, [pc, #52]	; (8003374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800333e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003340:	f7ff fff6 	bl	8003330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <LoopForever+0x6>)
  ldr r1, =_edata
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <LoopForever+0xe>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800334c:	e002      	b.n	8003354 <LoopCopyDataInit>

0800334e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003352:	3304      	adds	r3, #4

08003354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003358:	d3f9      	bcc.n	800334e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800335c:	4c0a      	ldr	r4, [pc, #40]	; (8003388 <LoopForever+0x16>)
  movs r3, #0
 800335e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003360:	e001      	b.n	8003366 <LoopFillZerobss>

08003362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003364:	3204      	adds	r2, #4

08003366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003368:	d3fb      	bcc.n	8003362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800336a:	f004 f8c1 	bl	80074f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800336e:	f7fe fff7 	bl	8002360 <main>

08003372 <LoopForever>:

LoopForever:
  b LoopForever
 8003372:	e7fe      	b.n	8003372 <LoopForever>
  ldr   r0, =_estack
 8003374:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800337c:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 8003380:	0800c030 	.word	0x0800c030
  ldr r2, =_sbss
 8003384:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 8003388:	20000d48 	.word	0x20000d48

0800338c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC1_COMP_IRQHandler>
	...

08003390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_Init+0x3c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_Init+0x3c>)
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	0049      	lsls	r1, r1, #1
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033aa:	2003      	movs	r0, #3
 80033ac:	f000 f810 	bl	80033d0 <HAL_InitTick>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d003      	beq.n	80033bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e001      	b.n	80033c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80033bc:	f7ff fcc0 	bl	8002d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40022000 	.word	0x40022000

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033d8:	230f      	movs	r3, #15
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_InitTick+0x88>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02b      	beq.n	8003440 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_InitTick+0x8c>)
 80033ea:	681c      	ldr	r4, [r3, #0]
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_InitTick+0x88>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	0019      	movs	r1, r3
 80033f2:	23fa      	movs	r3, #250	; 0xfa
 80033f4:	0098      	lsls	r0, r3, #2
 80033f6:	f7fc fea1 	bl	800013c <__udivsi3>
 80033fa:	0003      	movs	r3, r0
 80033fc:	0019      	movs	r1, r3
 80033fe:	0020      	movs	r0, r4
 8003400:	f7fc fe9c 	bl	800013c <__udivsi3>
 8003404:	0003      	movs	r3, r0
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f945 	bl	8003696 <HAL_SYSTICK_Config>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d112      	bne.n	8003436 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d80a      	bhi.n	800342c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	2301      	movs	r3, #1
 800341a:	425b      	negs	r3, r3
 800341c:	2200      	movs	r2, #0
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f910 	bl	8003644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_InitTick+0x90>)
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e00d      	b.n	8003448 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800342c:	230f      	movs	r3, #15
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e008      	b.n	8003448 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e003      	b.n	8003448 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003440:	230f      	movs	r3, #15
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b005      	add	sp, #20
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	2000000c 	.word	0x2000000c
 800345c:	20000004 	.word	0x20000004
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_IncTick+0x1c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	001a      	movs	r2, r3
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_IncTick+0x20>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_IncTick+0x20>)
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	2000000c 	.word	0x2000000c
 8003484:	20000a34 	.word	0x20000a34

08003488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <HAL_GetTick+0x10>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	20000a34 	.word	0x20000a34

0800349c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a06      	ldr	r2, [pc, #24]	; (80034c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	40010000 	.word	0x40010000
 80034c4:	fffff9ff 	.word	0xfffff9ff

080034c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	0002      	movs	r2, r0
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b7f      	cmp	r3, #127	; 0x7f
 80034da:	d809      	bhi.n	80034f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	001a      	movs	r2, r3
 80034e2:	231f      	movs	r3, #31
 80034e4:	401a      	ands	r2, r3
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_EnableIRQ+0x30>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	4091      	lsls	r1, r2
 80034ec:	000a      	movs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	e000e100 	.word	0xe000e100

080034fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	0002      	movs	r2, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b7f      	cmp	r3, #127	; 0x7f
 8003510:	d828      	bhi.n	8003564 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003512:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <__NVIC_SetPriority+0xd4>)
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b25b      	sxtb	r3, r3
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	33c0      	adds	r3, #192	; 0xc0
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	589b      	ldr	r3, [r3, r2]
 8003522:	1dfa      	adds	r2, r7, #7
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	0011      	movs	r1, r2
 8003528:	2203      	movs	r2, #3
 800352a:	400a      	ands	r2, r1
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	21ff      	movs	r1, #255	; 0xff
 8003530:	4091      	lsls	r1, r2
 8003532:	000a      	movs	r2, r1
 8003534:	43d2      	mvns	r2, r2
 8003536:	401a      	ands	r2, r3
 8003538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	22ff      	movs	r2, #255	; 0xff
 8003540:	401a      	ands	r2, r3
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	0018      	movs	r0, r3
 8003548:	2303      	movs	r3, #3
 800354a:	4003      	ands	r3, r0
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003550:	481f      	ldr	r0, [pc, #124]	; (80035d0 <__NVIC_SetPriority+0xd4>)
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b25b      	sxtb	r3, r3
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	430a      	orrs	r2, r1
 800355c:	33c0      	adds	r3, #192	; 0xc0
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003562:	e031      	b.n	80035c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <__NVIC_SetPriority+0xd8>)
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	0019      	movs	r1, r3
 800356c:	230f      	movs	r3, #15
 800356e:	400b      	ands	r3, r1
 8003570:	3b08      	subs	r3, #8
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3306      	adds	r3, #6
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	18d3      	adds	r3, r2, r3
 800357a:	3304      	adds	r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1dfa      	adds	r2, r7, #7
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	0011      	movs	r1, r2
 8003584:	2203      	movs	r2, #3
 8003586:	400a      	ands	r2, r1
 8003588:	00d2      	lsls	r2, r2, #3
 800358a:	21ff      	movs	r1, #255	; 0xff
 800358c:	4091      	lsls	r1, r2
 800358e:	000a      	movs	r2, r1
 8003590:	43d2      	mvns	r2, r2
 8003592:	401a      	ands	r2, r3
 8003594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	019b      	lsls	r3, r3, #6
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	401a      	ands	r2, r3
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	0018      	movs	r0, r3
 80035a4:	2303      	movs	r3, #3
 80035a6:	4003      	ands	r3, r0
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035ac:	4809      	ldr	r0, [pc, #36]	; (80035d4 <__NVIC_SetPriority+0xd8>)
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	001c      	movs	r4, r3
 80035b4:	230f      	movs	r3, #15
 80035b6:	4023      	ands	r3, r4
 80035b8:	3b08      	subs	r3, #8
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	430a      	orrs	r2, r1
 80035be:	3306      	adds	r3, #6
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	18c3      	adds	r3, r0, r3
 80035c4:	3304      	adds	r3, #4
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b003      	add	sp, #12
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035dc:	f3bf 8f4f 	dsb	sy
}
 80035e0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_SystemReset+0x1c>)
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <__NVIC_SystemReset+0x20>)
 80035e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80035e8:	f3bf 8f4f 	dsb	sy
}
 80035ec:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	e7fd      	b.n	80035ee <__NVIC_SystemReset+0x16>
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	e000ed00 	.word	0xe000ed00
 80035f8:	05fa0004 	.word	0x05fa0004

080035fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	045b      	lsls	r3, r3, #17
 800360c:	429a      	cmp	r2, r3
 800360e:	d301      	bcc.n	8003614 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003610:	2301      	movs	r3, #1
 8003612:	e010      	b.n	8003636 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <SysTick_Config+0x44>)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	3a01      	subs	r2, #1
 800361a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361c:	2301      	movs	r3, #1
 800361e:	425b      	negs	r3, r3
 8003620:	2103      	movs	r1, #3
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff ff6a 	bl	80034fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <SysTick_Config+0x44>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SysTick_Config+0x44>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	e000e010 	.word	0xe000e010

08003644 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	210f      	movs	r1, #15
 8003650:	187b      	adds	r3, r7, r1
 8003652:	1c02      	adds	r2, r0, #0
 8003654:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	187b      	adds	r3, r7, r1
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b25b      	sxtb	r3, r3
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff ff4b 	bl	80034fc <__NVIC_SetPriority>
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	0002      	movs	r2, r0
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b25b      	sxtb	r3, r3
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff ff21 	bl	80034c8 <__NVIC_EnableIRQ>
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003692:	f7ff ffa1 	bl	80035d8 <__NVIC_SystemReset>

08003696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ffab 	bl	80035fc <SysTick_Config>
 80036a6:	0003      	movs	r3, r0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036be:	e14d      	b.n	800395c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2101      	movs	r1, #1
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4091      	lsls	r1, r2
 80036ca:	000a      	movs	r2, r1
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <HAL_GPIO_Init+0x28>
 80036d6:	e13e      	b.n	8003956 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	4013      	ands	r3, r2
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d005      	beq.n	80036f0 <HAL_GPIO_Init+0x40>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d130      	bne.n	8003752 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	409a      	lsls	r2, r3
 80036fe:	0013      	movs	r3, r2
 8003700:	43da      	mvns	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	409a      	lsls	r2, r3
 8003712:	0013      	movs	r3, r2
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003726:	2201      	movs	r2, #1
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
 800372c:	0013      	movs	r3, r2
 800372e:	43da      	mvns	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	2201      	movs	r2, #1
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
 8003744:	0013      	movs	r3, r2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2203      	movs	r2, #3
 8003758:	4013      	ands	r3, r2
 800375a:	2b03      	cmp	r3, #3
 800375c:	d017      	beq.n	800378e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	43da      	mvns	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	0013      	movs	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2203      	movs	r2, #3
 8003794:	4013      	ands	r3, r2
 8003796:	2b02      	cmp	r3, #2
 8003798:	d123      	bne.n	80037e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	08da      	lsrs	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	0092      	lsls	r2, r2, #2
 80037a4:	58d3      	ldr	r3, [r2, r3]
 80037a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	220f      	movs	r2, #15
 80037b2:	409a      	lsls	r2, r3
 80037b4:	0013      	movs	r3, r2
 80037b6:	43da      	mvns	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2107      	movs	r1, #7
 80037c6:	400b      	ands	r3, r1
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	409a      	lsls	r2, r3
 80037cc:	0013      	movs	r3, r2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	6939      	ldr	r1, [r7, #16]
 80037e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	43da      	mvns	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2203      	movs	r2, #3
 8003800:	401a      	ands	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	23c0      	movs	r3, #192	; 0xc0
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	4013      	ands	r3, r2
 8003820:	d100      	bne.n	8003824 <HAL_GPIO_Init+0x174>
 8003822:	e098      	b.n	8003956 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003824:	4a53      	ldr	r2, [pc, #332]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3318      	adds	r3, #24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	589b      	ldr	r3, [r3, r2]
 8003830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2203      	movs	r2, #3
 8003836:	4013      	ands	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	220f      	movs	r2, #15
 800383c:	409a      	lsls	r2, r3
 800383e:	0013      	movs	r3, r2
 8003840:	43da      	mvns	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	23a0      	movs	r3, #160	; 0xa0
 800384c:	05db      	lsls	r3, r3, #23
 800384e:	429a      	cmp	r2, r3
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x1d6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a48      	ldr	r2, [pc, #288]	; (8003978 <HAL_GPIO_Init+0x2c8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x1d2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a47      	ldr	r2, [pc, #284]	; (800397c <HAL_GPIO_Init+0x2cc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x1ce>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x1ca>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_GPIO_Init+0x2d4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x1c6>
 8003872:	2304      	movs	r3, #4
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x1d8>
 8003876:	2305      	movs	r3, #5
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x1d8>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x1d8>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x1d8>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x1d8>
 8003886:	2300      	movs	r3, #0
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	2103      	movs	r1, #3
 800388c:	400a      	ands	r2, r1
 800388e:	00d2      	lsls	r2, r2, #3
 8003890:	4093      	lsls	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003898:	4936      	ldr	r1, [pc, #216]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3318      	adds	r3, #24
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43da      	mvns	r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	035b      	lsls	r3, r3, #13
 80038be:	4013      	ands	r3, r2
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43da      	mvns	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	039b      	lsls	r3, r3, #14
 80038e8:	4013      	ands	r3, r2
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 80038fc:	2384      	movs	r3, #132	; 0x84
 80038fe:	58d3      	ldr	r3, [r2, r3]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43da      	mvns	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	4013      	ands	r3, r2
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003920:	4914      	ldr	r1, [pc, #80]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 8003922:	2284      	movs	r2, #132	; 0x84
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003928:	4a12      	ldr	r2, [pc, #72]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	58d3      	ldr	r3, [r2, r3]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	43da      	mvns	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	4013      	ands	r3, r2
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800394e:	4909      	ldr	r1, [pc, #36]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3301      	adds	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	40da      	lsrs	r2, r3
 8003964:	1e13      	subs	r3, r2, #0
 8003966:	d000      	beq.n	800396a <HAL_GPIO_Init+0x2ba>
 8003968:	e6aa      	b.n	80036c0 <HAL_GPIO_Init+0x10>
  }
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b006      	add	sp, #24
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021800 	.word	0x40021800
 8003978:	50000400 	.word	0x50000400
 800397c:	50000800 	.word	0x50000800
 8003980:	50000c00 	.word	0x50000c00
 8003984:	50001000 	.word	0x50001000

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	0008      	movs	r0, r1
 8003992:	0011      	movs	r1, r2
 8003994:	1cbb      	adds	r3, r7, #2
 8003996:	1c02      	adds	r2, r0, #0
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	1c7b      	adds	r3, r7, #1
 800399c:	1c0a      	adds	r2, r1, #0
 800399e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a0:	1c7b      	adds	r3, r7, #1
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a8:	1cbb      	adds	r3, r7, #2
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039b0:	e003      	b.n	80039ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039b2:	1cbb      	adds	r3, r7, #2
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	0049      	lsls	r1, r1, #1
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40007000 	.word	0x40007000

080039e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d11f      	bne.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	0013      	movs	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	189b      	adds	r3, r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4912      	ldr	r1, [pc, #72]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7fc fb92 	bl	800013c <__udivsi3>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a1e:	e008      	b.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e001      	b.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e009      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0ed      	beq.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40007000 	.word	0x40007000
 8003a54:	fffff9ff 	.word	0xfffff9ff
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	000f4240 	.word	0x000f4240

08003a60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	23e0      	movs	r3, #224	; 0xe0
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4013      	ands	r3, r2
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f000 fb50 	bl	800412c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	4013      	ands	r3, r2
 8003a94:	d100      	bne.n	8003a98 <HAL_RCC_OscConfig+0x20>
 8003a96:	e07c      	b.n	8003b92 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a98:	4bc3      	ldr	r3, [pc, #780]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2238      	movs	r2, #56	; 0x38
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa2:	4bc1      	ldr	r3, [pc, #772]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x40>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d002      	beq.n	8003abe <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abe:	4bba      	ldr	r3, [pc, #744]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d062      	beq.n	8003b90 <HAL_RCC_OscConfig+0x118>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d15e      	bne.n	8003b90 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e32a      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	025b      	lsls	r3, r3, #9
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_OscConfig+0x7a>
 8003ae2:	4bb1      	ldr	r3, [pc, #708]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4bb0      	ldr	r3, [pc, #704]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003ae8:	2180      	movs	r1, #128	; 0x80
 8003aea:	0249      	lsls	r1, r1, #9
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e020      	b.n	8003b34 <HAL_RCC_OscConfig+0xbc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	23a0      	movs	r3, #160	; 0xa0
 8003af8:	02db      	lsls	r3, r3, #11
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10e      	bne.n	8003b1c <HAL_RCC_OscConfig+0xa4>
 8003afe:	4baa      	ldr	r3, [pc, #680]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4ba9      	ldr	r3, [pc, #676]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	02c9      	lsls	r1, r1, #11
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	4ba6      	ldr	r3, [pc, #664]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4ba5      	ldr	r3, [pc, #660]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0249      	lsls	r1, r1, #9
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xbc>
 8003b1c:	4ba2      	ldr	r3, [pc, #648]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4ba1      	ldr	r3, [pc, #644]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b22:	49a2      	ldr	r1, [pc, #648]	; (8003dac <HAL_RCC_OscConfig+0x334>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	4b9f      	ldr	r3, [pc, #636]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b2e:	49a0      	ldr	r1, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x338>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d014      	beq.n	8003b66 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7ff fca4 	bl	8003488 <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b46:	f7ff fc9f 	bl	8003488 <HAL_GetTick>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e2e9      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b58:	4b93      	ldr	r3, [pc, #588]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	4013      	ands	r3, r2
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0xce>
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7ff fc8f 	bl	8003488 <HAL_GetTick>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7ff fc8a 	bl	8003488 <HAL_GetTick>
 8003b74:	0002      	movs	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e2d4      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b82:	4b89      	ldr	r3, [pc, #548]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	029b      	lsls	r3, r3, #10
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0xf8>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2202      	movs	r2, #2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <HAL_RCC_OscConfig+0x126>
 8003b9c:	e099      	b.n	8003cd2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b82      	ldr	r3, [pc, #520]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2238      	movs	r2, #56	; 0x38
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b7f      	ldr	r3, [pc, #508]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2203      	movs	r2, #3
 8003bae:	4013      	ands	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d102      	bne.n	8003bbe <HAL_RCC_OscConfig+0x146>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d135      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x164>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e2a7      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a74      	ldr	r2, [pc, #464]	; (8003db4 <HAL_RCC_OscConfig+0x33c>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d112      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bf8:	4b6b      	ldr	r3, [pc, #428]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_RCC_OscConfig+0x340>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c0c:	4b66      	ldr	r3, [pc, #408]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0adb      	lsrs	r3, r3, #11
 8003c12:	2207      	movs	r2, #7
 8003c14:	4013      	ands	r3, r2
 8003c16:	4a69      	ldr	r2, [pc, #420]	; (8003dbc <HAL_RCC_OscConfig+0x344>)
 8003c18:	40da      	lsrs	r2, r3
 8003c1a:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <HAL_RCC_OscConfig+0x348>)
 8003c1c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c1e:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <HAL_RCC_OscConfig+0x34c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7ff fbd4 	bl	80033d0 <HAL_InitTick>
 8003c28:	1e03      	subs	r3, r0, #0
 8003c2a:	d051      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e27d      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d030      	beq.n	8003c9a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c38:	4b5b      	ldr	r3, [pc, #364]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5e      	ldr	r2, [pc, #376]	; (8003db8 <HAL_RCC_OscConfig+0x340>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	4b58      	ldr	r3, [pc, #352]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b55      	ldr	r3, [pc, #340]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	0049      	lsls	r1, r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7ff fc15 	bl	8003488 <HAL_GetTick>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7ff fc10 	bl	8003488 <HAL_GetTick>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e25a      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c76:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a4b      	ldr	r2, [pc, #300]	; (8003db4 <HAL_RCC_OscConfig+0x33c>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	021a      	lsls	r2, r3, #8
 8003c92:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e01b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003ca0:	4949      	ldr	r1, [pc, #292]	; (8003dc8 <HAL_RCC_OscConfig+0x350>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7ff fbef 	bl	8003488 <HAL_GetTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7ff fbea 	bl	8003488 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e234      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x238>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d047      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003cdc:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2238      	movs	r2, #56	; 0x38
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b18      	cmp	r3, #24
 8003ce6:	d10a      	bne.n	8003cfe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	2202      	movs	r2, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d03c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2f4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d138      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e216      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d019      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d0a:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7ff fbb9 	bl	8003488 <HAL_GetTick>
 8003d16:	0003      	movs	r3, r0
 8003d18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7ff fbb4 	bl	8003488 <HAL_GetTick>
 8003d20:	0002      	movs	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1fe      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d0f1      	beq.n	8003d1c <HAL_RCC_OscConfig+0x2a4>
 8003d38:	e018      	b.n	8003d6c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	438a      	bics	r2, r1
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7ff fb9f 	bl	8003488 <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7ff fb9a 	bl	8003488 <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1e4      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d66:	2202      	movs	r2, #2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d1f1      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2204      	movs	r2, #4
 8003d72:	4013      	ands	r3, r2
 8003d74:	d100      	bne.n	8003d78 <HAL_RCC_OscConfig+0x300>
 8003d76:	e0c7      	b.n	8003f08 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d78:	231f      	movs	r3, #31
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2238      	movs	r2, #56	; 0x38
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d11f      	bne.n	8003dcc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_RCC_OscConfig+0x330>)
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2202      	movs	r2, #2
 8003d92:	4013      	ands	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_RCC_OscConfig+0x320>
 8003d96:	e0b7      	b.n	8003f08 <HAL_RCC_OscConfig+0x490>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d000      	beq.n	8003da2 <HAL_RCC_OscConfig+0x32a>
 8003da0:	e0b2      	b.n	8003f08 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c2      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	40021000 	.word	0x40021000
 8003dac:	fffeffff 	.word	0xfffeffff
 8003db0:	fffbffff 	.word	0xfffbffff
 8003db4:	ffff80ff 	.word	0xffff80ff
 8003db8:	ffffc7ff 	.word	0xffffc7ff
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dcc:	4bb5      	ldr	r3, [pc, #724]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	055b      	lsls	r3, r3, #21
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_OscConfig+0x364>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x366>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4bb0      	ldr	r3, [pc, #704]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de6:	4baf      	ldr	r3, [pc, #700]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	0549      	lsls	r1, r1, #21
 8003dec:	430a      	orrs	r2, r1
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003df0:	4bac      	ldr	r3, [pc, #688]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	055b      	lsls	r3, r3, #21
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003dfe:	231f      	movs	r3, #31
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e06:	4ba8      	ldr	r3, [pc, #672]	; (80040a8 <HAL_RCC_OscConfig+0x630>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4ba5      	ldr	r3, [pc, #660]	; (80040a8 <HAL_RCC_OscConfig+0x630>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4ba4      	ldr	r3, [pc, #656]	; (80040a8 <HAL_RCC_OscConfig+0x630>)
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	0049      	lsls	r1, r1, #1
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e20:	f7ff fb32 	bl	8003488 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7ff fb2d 	bl	8003488 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e177      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3c:	4b9a      	ldr	r3, [pc, #616]	; (80040a8 <HAL_RCC_OscConfig+0x630>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3e6>
 8003e50:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e54:	4b93      	ldr	r3, [pc, #588]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e56:	2101      	movs	r1, #1
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x420>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x408>
 8003e66:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e72:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e76:	4b8b      	ldr	r3, [pc, #556]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x420>
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e84:	4b87      	ldr	r3, [pc, #540]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	438a      	bics	r2, r1
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e8c:	4b85      	ldr	r3, [pc, #532]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e90:	4b84      	ldr	r3, [pc, #528]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003e92:	2104      	movs	r1, #4
 8003e94:	438a      	bics	r2, r1
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d014      	beq.n	8003eca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7ff faf2 	bl	8003488 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea8:	e009      	b.n	8003ebe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7ff faed 	bl	8003488 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	4a7d      	ldr	r2, [pc, #500]	; (80040ac <HAL_RCC_OscConfig+0x634>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e136      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebe:	4b79      	ldr	r3, [pc, #484]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x432>
 8003ec8:	e013      	b.n	8003ef2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7ff fadd 	bl	8003488 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7ff fad8 	bl	8003488 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	4a73      	ldr	r2, [pc, #460]	; (80040ac <HAL_RCC_OscConfig+0x634>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e121      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee8:	4b6e      	ldr	r3, [pc, #440]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ef2:	231f      	movs	r3, #31
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b69      	ldr	r3, [pc, #420]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f02:	496b      	ldr	r1, [pc, #428]	; (80040b0 <HAL_RCC_OscConfig+0x638>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d039      	beq.n	8003f86 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f1a:	4b62      	ldr	r3, [pc, #392]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	03c9      	lsls	r1, r1, #15
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7ff faae 	bl	8003488 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f32:	f7ff faa9 	bl	8003488 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0f3      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f44:	4b57      	ldr	r3, [pc, #348]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x4ba>
 8003f50:	e019      	b.n	8003f86 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f52:	4b54      	ldr	r3, [pc, #336]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f58:	4956      	ldr	r1, [pc, #344]	; (80040b4 <HAL_RCC_OscConfig+0x63c>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7ff fa93 	bl	8003488 <HAL_GetTick>
 8003f62:	0003      	movs	r3, r0
 8003f64:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f68:	f7ff fa8e 	bl	8003488 <HAL_GetTick>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0d8      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	4013      	ands	r3, r2
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d100      	bne.n	8003f90 <HAL_RCC_OscConfig+0x518>
 8003f8e:	e0cc      	b.n	800412a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f90:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2238      	movs	r2, #56	; 0x38
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d100      	bne.n	8003f9e <HAL_RCC_OscConfig+0x526>
 8003f9c:	e07b      	b.n	8004096 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d156      	bne.n	8004054 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003fac:	4942      	ldr	r1, [pc, #264]	; (80040b8 <HAL_RCC_OscConfig+0x640>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7ff fa69 	bl	8003488 <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7ff fa64 	bl	8003488 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0ae      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fce:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	049b      	lsls	r3, r3, #18
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fda:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4a37      	ldr	r2, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x644>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	431a      	orrs	r2, r3
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800400a:	430a      	orrs	r2, r1
 800400c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400e:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0449      	lsls	r1, r1, #17
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	0549      	lsls	r1, r1, #21
 8004026:	430a      	orrs	r2, r1
 8004028:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402a:	f7ff fa2d 	bl	8003488 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7ff fa28 	bl	8003488 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e072      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	4013      	ands	r3, r2
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x5bc>
 8004052:	e06a      	b.n	800412a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800405a:	4917      	ldr	r1, [pc, #92]	; (80040b8 <HAL_RCC_OscConfig+0x640>)
 800405c:	400a      	ands	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7ff fa12 	bl	8003488 <HAL_GetTick>
 8004064:	0003      	movs	r3, r0
 8004066:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7ff fa0d 	bl	8003488 <HAL_GetTick>
 800406e:	0002      	movs	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e057      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	049b      	lsls	r3, r3, #18
 8004084:	4013      	ands	r3, r2
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x62c>)
 800408e:	490c      	ldr	r1, [pc, #48]	; (80040c0 <HAL_RCC_OscConfig+0x648>)
 8004090:	400a      	ands	r2, r1
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	e049      	b.n	800412a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d112      	bne.n	80040c4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e044      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	00001388 	.word	0x00001388
 80040b0:	efffffff 	.word	0xefffffff
 80040b4:	ffbfffff 	.word	0xffbfffff
 80040b8:	feffffff 	.word	0xfeffffff
 80040bc:	11c1808c 	.word	0x11c1808c
 80040c0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x6bc>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2203      	movs	r2, #3
 80040ce:	401a      	ands	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d126      	bne.n	8004126 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2270      	movs	r2, #112	; 0x70
 80040dc:	401a      	ands	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11f      	bne.n	8004126 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	23fe      	movs	r3, #254	; 0xfe
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d116      	bne.n	8004126 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	23f8      	movs	r3, #248	; 0xf8
 80040fc:	039b      	lsls	r3, r3, #14
 80040fe:	401a      	ands	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d10e      	bne.n	8004126 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	23e0      	movs	r3, #224	; 0xe0
 800410c:	051b      	lsls	r3, r3, #20
 800410e:	401a      	ands	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	0f5b      	lsrs	r3, r3, #29
 800411c:	075a      	lsls	r2, r3, #29
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b008      	add	sp, #32
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000

08004138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0e9      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2207      	movs	r2, #7
 8004152:	4013      	ands	r3, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d91e      	bls.n	8004198 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b73      	ldr	r3, [pc, #460]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2207      	movs	r2, #7
 8004160:	4393      	bics	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	4b70      	ldr	r3, [pc, #448]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800416c:	f7ff f98c 	bl	8003488 <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004174:	e009      	b.n	800418a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004176:	f7ff f987 	bl	8003488 <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	4a6a      	ldr	r2, [pc, #424]	; (800432c <HAL_RCC_ClockConfig+0x1f4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0ca      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800418a:	4b67      	ldr	r3, [pc, #412]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2207      	movs	r2, #7
 8004190:	4013      	ands	r3, r2
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d1ee      	bne.n	8004176 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d015      	beq.n	80041ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2204      	movs	r2, #4
 80041a8:	4013      	ands	r3, r2
 80041aa:	d006      	beq.n	80041ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041ac:	4b60      	ldr	r3, [pc, #384]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b5f      	ldr	r3, [pc, #380]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	21e0      	movs	r1, #224	; 0xe0
 80041b4:	01c9      	lsls	r1, r1, #7
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_RCC_ClockConfig+0x1fc>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	0019      	movs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d057      	beq.n	8004288 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	4013      	ands	r3, r2
 80041ea:	d12b      	bne.n	8004244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e097      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f8:	4b4d      	ldr	r3, [pc, #308]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	049b      	lsls	r3, r3, #18
 8004200:	4013      	ands	r3, r2
 8004202:	d11f      	bne.n	8004244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e08b      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004210:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4013      	ands	r3, r2
 800421a:	d113      	bne.n	8004244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e07f      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d106      	bne.n	8004236 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 800422a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422c:	2202      	movs	r2, #2
 800422e:	4013      	ands	r3, r2
 8004230:	d108      	bne.n	8004244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e074      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	2202      	movs	r2, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e06d      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004244:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2207      	movs	r2, #7
 800424a:	4393      	bics	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7ff f916 	bl	8003488 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	e009      	b.n	8004276 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004262:	f7ff f911 	bl	8003488 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <HAL_RCC_ClockConfig+0x1f4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e054      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2238      	movs	r2, #56	; 0x38
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	429a      	cmp	r2, r3
 8004286:	d1ec      	bne.n	8004262 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2207      	movs	r2, #7
 800428e:	4013      	ands	r3, r2
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d21e      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2207      	movs	r2, #7
 800429c:	4393      	bics	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	4b21      	ldr	r3, [pc, #132]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042a8:	f7ff f8ee 	bl	8003488 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042b0:	e009      	b.n	80042c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b2:	f7ff f8e9 	bl	8003488 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_RCC_ClockConfig+0x1f4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e02c      	b.n	8004320 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2207      	movs	r2, #7
 80042cc:	4013      	ands	r3, r2
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1ee      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2204      	movs	r2, #4
 80042da:	4013      	ands	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_RCC_ClockConfig+0x200>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042f2:	f000 f829 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 80042f6:	0001      	movs	r1, r0
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCC_ClockConfig+0x1f8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	220f      	movs	r2, #15
 8004300:	401a      	ands	r2, r3
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCC_ClockConfig+0x204>)
 8004304:	0092      	lsls	r2, r2, #2
 8004306:	58d3      	ldr	r3, [r2, r3]
 8004308:	221f      	movs	r2, #31
 800430a:	4013      	ands	r3, r2
 800430c:	000a      	movs	r2, r1
 800430e:	40da      	lsrs	r2, r3
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_ClockConfig+0x208>)
 8004312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_ClockConfig+0x20c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff f859 	bl	80033d0 <HAL_InitTick>
 800431e:	0003      	movs	r3, r0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b004      	add	sp, #16
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40022000 	.word	0x40022000
 800432c:	00001388 	.word	0x00001388
 8004330:	40021000 	.word	0x40021000
 8004334:	fffff0ff 	.word	0xfffff0ff
 8004338:	ffff8fff 	.word	0xffff8fff
 800433c:	0800bc04 	.word	0x0800bc04
 8004340:	20000004 	.word	0x20000004
 8004344:	20000008 	.word	0x20000008

08004348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2238      	movs	r2, #56	; 0x38
 8004354:	4013      	ands	r3, r2
 8004356:	d10f      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004358:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0adb      	lsrs	r3, r3, #11
 800435e:	2207      	movs	r2, #7
 8004360:	4013      	ands	r3, r2
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	0013      	movs	r3, r2
 8004368:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	4835      	ldr	r0, [pc, #212]	; (8004444 <HAL_RCC_GetSysClockFreq+0xfc>)
 800436e:	f7fb fee5 	bl	800013c <__udivsi3>
 8004372:	0003      	movs	r3, r0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e05d      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2238      	movs	r2, #56	; 0x38
 800437e:	4013      	ands	r3, r2
 8004380:	2b08      	cmp	r3, #8
 8004382:	d102      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_RCC_GetSysClockFreq+0x100>)
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e054      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800438a:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2238      	movs	r2, #56	; 0x38
 8004390:	4013      	ands	r3, r2
 8004392:	2b10      	cmp	r3, #16
 8004394:	d138      	bne.n	8004408 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2203      	movs	r2, #3
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b27      	ldr	r3, [pc, #156]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	2207      	movs	r2, #7
 80043a8:	4013      	ands	r3, r2
 80043aa:	3301      	adds	r3, #1
 80043ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4824      	ldr	r0, [pc, #144]	; (8004448 <HAL_RCC_GetSysClockFreq+0x100>)
 80043b8:	f7fb fec0 	bl	800013c <__udivsi3>
 80043bc:	0003      	movs	r3, r0
 80043be:	0019      	movs	r1, r3
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	227f      	movs	r2, #127	; 0x7f
 80043c8:	4013      	ands	r3, r2
 80043ca:	434b      	muls	r3, r1
 80043cc:	617b      	str	r3, [r7, #20]
        break;
 80043ce:	e00d      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	481c      	ldr	r0, [pc, #112]	; (8004444 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043d4:	f7fb feb2 	bl	800013c <__udivsi3>
 80043d8:	0003      	movs	r3, r0
 80043da:	0019      	movs	r1, r3
 80043dc:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	227f      	movs	r2, #127	; 0x7f
 80043e4:	4013      	ands	r3, r2
 80043e6:	434b      	muls	r3, r1
 80043e8:	617b      	str	r3, [r7, #20]
        break;
 80043ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0f5b      	lsrs	r3, r3, #29
 80043f2:	2207      	movs	r2, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f7fb fe9d 	bl	800013c <__udivsi3>
 8004402:	0003      	movs	r3, r0
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e015      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2238      	movs	r2, #56	; 0x38
 800440e:	4013      	ands	r3, r2
 8004410:	2b20      	cmp	r3, #32
 8004412:	d103      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2238      	movs	r2, #56	; 0x38
 8004422:	4013      	ands	r3, r2
 8004424:	2b18      	cmp	r3, #24
 8004426:	d103      	bne.n	8004430 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004428:	23fa      	movs	r3, #250	; 0xfa
 800442a:	01db      	lsls	r3, r3, #7
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e001      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004434:	693b      	ldr	r3, [r7, #16]
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b006      	add	sp, #24
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	40021000 	.word	0x40021000
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <HAL_RCC_GetHCLKFreq+0x10>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004464:	f7ff fff2 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004468:	0004      	movs	r4, r0
 800446a:	f7ff faf9 	bl	8003a60 <LL_RCC_GetAPB1Prescaler>
 800446e:	0003      	movs	r3, r0
 8004470:	0b1a      	lsrs	r2, r3, #12
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004474:	0092      	lsls	r2, r2, #2
 8004476:	58d3      	ldr	r3, [r2, r3]
 8004478:	221f      	movs	r2, #31
 800447a:	4013      	ands	r3, r2
 800447c:	40dc      	lsrs	r4, r3
 800447e:	0023      	movs	r3, r4
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	bdb0      	pop	{r4, r5, r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	0800bc44 	.word	0x0800bc44

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004494:	2313      	movs	r3, #19
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800449c:	2312      	movs	r3, #18
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	4013      	ands	r3, r2
 80044ae:	d100      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044b0:	e0ad      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2011      	movs	r0, #17
 80044b4:	183b      	adds	r3, r7, r0
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	055b      	lsls	r3, r3, #21
 80044c2:	4013      	ands	r3, r2
 80044c4:	d110      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ca:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	0549      	lsls	r1, r1, #21
 80044d0:	430a      	orrs	r2, r1
 80044d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	055b      	lsls	r3, r3, #21
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e2:	183b      	adds	r3, r7, r0
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e8:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	0049      	lsls	r1, r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044f6:	f7fe ffc7 	bl	8003488 <HAL_GetTick>
 80044fa:	0003      	movs	r3, r0
 80044fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044fe:	e00b      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fe ffc2 	bl	8003488 <HAL_GetTick>
 8004504:	0002      	movs	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d904      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800450e:	2313      	movs	r3, #19
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2203      	movs	r2, #3
 8004514:	701a      	strb	r2, [r3, #0]
        break;
 8004516:	e005      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d0ed      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004524:	2313      	movs	r3, #19
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d15e      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004532:	23c0      	movs	r3, #192	; 0xc0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4013      	ands	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d019      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	d014      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800454c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454e:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004550:	4013      	ands	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004558:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	0249      	lsls	r1, r1, #9
 800455e:	430a      	orrs	r2, r1
 8004560:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004568:	491e      	ldr	r1, [pc, #120]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800456a:	400a      	ands	r2, r1
 800456c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2201      	movs	r2, #1
 8004578:	4013      	ands	r3, r2
 800457a:	d016      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fe ff84 	bl	8003488 <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004584:	e00c      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe ff7f 	bl	8003488 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d904      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004596:	2313      	movs	r3, #19
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2203      	movs	r2, #3
 800459c:	701a      	strb	r2, [r3, #0]
            break;
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	d0ed      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045aa:	2313      	movs	r3, #19
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045c8:	e016      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ca:	2312      	movs	r3, #18
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2213      	movs	r2, #19
 80045d0:	18ba      	adds	r2, r7, r2
 80045d2:	7812      	ldrb	r2, [r2, #0]
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e00f      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	fffffcff 	.word	0xfffffcff
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	2312      	movs	r3, #18
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2213      	movs	r2, #19
 80045f2:	18ba      	adds	r2, r7, r2
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045f8:	2311      	movs	r3, #17
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4bb6      	ldr	r3, [pc, #728]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004606:	4bb5      	ldr	r3, [pc, #724]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004608:	49b5      	ldr	r1, [pc, #724]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800460a:	400a      	ands	r2, r1
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2201      	movs	r2, #1
 8004614:	4013      	ands	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004618:	4bb0      	ldr	r3, [pc, #704]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	2203      	movs	r2, #3
 800461e:	4393      	bics	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4bad      	ldr	r3, [pc, #692]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004628:	430a      	orrs	r2, r1
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2202      	movs	r2, #2
 8004632:	4013      	ands	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004636:	4ba9      	ldr	r3, [pc, #676]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	220c      	movs	r2, #12
 800463c:	4393      	bics	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	4ba5      	ldr	r3, [pc, #660]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004646:	430a      	orrs	r2, r1
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2204      	movs	r2, #4
 8004650:	4013      	ands	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	2230      	movs	r2, #48	; 0x30
 800465a:	4393      	bics	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	4b9e      	ldr	r3, [pc, #632]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004664:	430a      	orrs	r2, r1
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	4013      	ands	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004672:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	4a9b      	ldr	r2, [pc, #620]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	4b96      	ldr	r3, [pc, #600]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004682:	430a      	orrs	r2, r1
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	015b      	lsls	r3, r3, #5
 800468e:	4013      	ands	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004692:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	4a94      	ldr	r2, [pc, #592]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	4b8e      	ldr	r3, [pc, #568]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4013      	ands	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046b2:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	4a8d      	ldr	r2, [pc, #564]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	0019      	movs	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c0:	4b86      	ldr	r3, [pc, #536]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046c2:	430a      	orrs	r2, r1
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4013      	ands	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046d2:	4b82      	ldr	r3, [pc, #520]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	4a86      	ldr	r2, [pc, #536]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80046d8:	4013      	ands	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2220      	movs	r2, #32
 80046ec:	4013      	ands	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f0:	4b7a      	ldr	r3, [pc, #488]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	4a7f      	ldr	r2, [pc, #508]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	4b77      	ldr	r3, [pc, #476]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004700:	430a      	orrs	r2, r1
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	4013      	ands	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800470e:	4b73      	ldr	r3, [pc, #460]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	4a79      	ldr	r2, [pc, #484]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800471e:	430a      	orrs	r2, r1
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	01db      	lsls	r3, r3, #7
 800472a:	4013      	ands	r3, r2
 800472c:	d015      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800472e:	4b6b      	ldr	r3, [pc, #428]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	0899      	lsrs	r1, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473a:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800473c:	430a      	orrs	r2, r1
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	429a      	cmp	r2, r3
 800474a:	d106      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800474c:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	0249      	lsls	r1, r1, #9
 8004756:	430a      	orrs	r2, r1
 8004758:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	031b      	lsls	r3, r3, #12
 8004762:	4013      	ands	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004766:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	2240      	movs	r2, #64	; 0x40
 800476c:	4393      	bics	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004776:	430a      	orrs	r2, r1
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	039b      	lsls	r3, r3, #14
 8004782:	4013      	ands	r3, r2
 8004784:	d016      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004786:	4b55      	ldr	r3, [pc, #340]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	4a5c      	ldr	r2, [pc, #368]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800478c:	4013      	ands	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004796:	430a      	orrs	r2, r1
 8004798:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	03db      	lsls	r3, r3, #15
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d106      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047a6:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0449      	lsls	r1, r1, #17
 80047b0:	430a      	orrs	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	03db      	lsls	r3, r3, #15
 80047bc:	4013      	ands	r3, r2
 80047be:	d016      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047c0:	4b46      	ldr	r3, [pc, #280]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	4a4e      	ldr	r2, [pc, #312]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	0019      	movs	r1, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047d0:	430a      	orrs	r2, r1
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	045b      	lsls	r3, r3, #17
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047e0:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	0449      	lsls	r1, r1, #17
 80047ea:	430a      	orrs	r2, r1
 80047ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4013      	ands	r3, r2
 80047f8:	d014      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047fa:	4b38      	ldr	r3, [pc, #224]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	2203      	movs	r2, #3
 8004800:	4393      	bics	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800480a:	430a      	orrs	r2, r1
 800480c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d106      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b30      	ldr	r3, [pc, #192]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	0249      	lsls	r1, r1, #9
 8004820:	430a      	orrs	r2, r1
 8004822:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	019b      	lsls	r3, r3, #6
 800482c:	4013      	ands	r3, r2
 800482e:	d014      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	220c      	movs	r2, #12
 8004836:	4393      	bics	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004840:	430a      	orrs	r2, r1
 8004842:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b04      	cmp	r3, #4
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	0249      	lsls	r1, r1, #9
 8004856:	430a      	orrs	r2, r1
 8004858:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	045b      	lsls	r3, r3, #17
 8004862:	4013      	ands	r3, r2
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004866:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004876:	430a      	orrs	r2, r1
 8004878:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	429a      	cmp	r2, r3
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	0449      	lsls	r1, r1, #17
 8004890:	430a      	orrs	r2, r1
 8004892:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	049b      	lsls	r3, r3, #18
 800489c:	4013      	ands	r3, r2
 800489e:	d016      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	4a10      	ldr	r2, [pc, #64]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	429a      	cmp	r2, r3
 80048be:	d106      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	0449      	lsls	r1, r1, #17
 80048ca:	430a      	orrs	r2, r1
 80048cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048ce:	2312      	movs	r3, #18
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	781b      	ldrb	r3, [r3, #0]
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b006      	add	sp, #24
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	efffffff 	.word	0xefffffff
 80048e4:	fffff3ff 	.word	0xfffff3ff
 80048e8:	fffffcff 	.word	0xfffffcff
 80048ec:	fff3ffff 	.word	0xfff3ffff
 80048f0:	ffcfffff 	.word	0xffcfffff
 80048f4:	ffffcfff 	.word	0xffffcfff
 80048f8:	ffff3fff 	.word	0xffff3fff
 80048fc:	ffbfffff 	.word	0xffbfffff
 8004900:	feffffff 	.word	0xfeffffff

08004904 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800490c:	230f      	movs	r3, #15
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d100      	bne.n	800491c <HAL_RTC_Init+0x18>
 800491a:	e08c      	b.n	8004a36 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2229      	movs	r2, #41	; 0x29
 8004920:	5c9b      	ldrb	r3, [r3, r2]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2228      	movs	r2, #40	; 0x28
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2288      	movs	r2, #136	; 0x88
 8004934:	0212      	lsls	r2, r2, #8
 8004936:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f7fe fa28 	bl	8002d90 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2229      	movs	r2, #41	; 0x29
 8004944:	2102      	movs	r1, #2
 8004946:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2210      	movs	r2, #16
 8004950:	4013      	ands	r3, r2
 8004952:	2b10      	cmp	r3, #16
 8004954:	d062      	beq.n	8004a1c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	22ca      	movs	r2, #202	; 0xca
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2253      	movs	r2, #83	; 0x53
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004966:	250f      	movs	r5, #15
 8004968:	197c      	adds	r4, r7, r5
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fbfb 	bl	8005168 <RTC_EnterInitMode>
 8004972:	0003      	movs	r3, r0
 8004974:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004976:	0028      	movs	r0, r5
 8004978:	183b      	adds	r3, r7, r0
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d12c      	bne.n	80049da <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	492e      	ldr	r1, [pc, #184]	; (8004a44 <HAL_RTC_Init+0x140>)
 800498c:	400a      	ands	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6912      	ldr	r2, [r2, #16]
 80049b6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6919      	ldr	r1, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	041a      	lsls	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80049cc:	183c      	adds	r4, r7, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 fc0b 	bl	80051ec <RTC_ExitInitMode>
 80049d6:	0003      	movs	r3, r0
 80049d8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80049da:	230f      	movs	r3, #15
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	00d2      	lsls	r2, r2, #3
 80049f0:	08d2      	lsrs	r2, r2, #3
 80049f2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	22ff      	movs	r2, #255	; 0xff
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
 8004a1a:	e003      	b.n	8004a24 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004a1c:	230f      	movs	r3, #15
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004a24:	230f      	movs	r3, #15
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2229      	movs	r2, #41	; 0x29
 8004a32:	2101      	movs	r1, #1
 8004a34:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004a36:	230f      	movs	r3, #15
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	781b      	ldrb	r3, [r3, #0]
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bdb0      	pop	{r4, r5, r7, pc}
 8004a44:	fb8fffbf 	.word	0xfb8fffbf

08004a48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2228      	movs	r2, #40	; 0x28
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_RTC_SetTime+0x1a>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e092      	b.n	8004b88 <HAL_RTC_SetTime+0x140>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2228      	movs	r2, #40	; 0x28
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2229      	movs	r2, #41	; 0x29
 8004a6e:	2102      	movs	r1, #2
 8004a70:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	22ca      	movs	r2, #202	; 0xca
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2253      	movs	r2, #83	; 0x53
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a82:	2513      	movs	r5, #19
 8004a84:	197c      	adds	r4, r7, r5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 fb6d 	bl	8005168 <RTC_EnterInitMode>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004a92:	197b      	adds	r3, r7, r5
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d162      	bne.n	8004b60 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d125      	bne.n	8004aec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d102      	bne.n	8004ab2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 fbdc 	bl	8005274 <RTC_ByteToBcd2>
 8004abc:	0003      	movs	r3, r0
 8004abe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 fbd5 	bl	8005274 <RTC_ByteToBcd2>
 8004aca:	0003      	movs	r3, r0
 8004acc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ace:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	789b      	ldrb	r3, [r3, #2]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fbcd 	bl	8005274 <RTC_ByteToBcd2>
 8004ada:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004adc:	0022      	movs	r2, r4
 8004ade:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	78db      	ldrb	r3, [r3, #3]
 8004ae4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e017      	b.n	8004b1c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2240      	movs	r2, #64	; 0x40
 8004af4:	4013      	ands	r3, r2
 8004af6:	d102      	bne.n	8004afe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b0a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b10:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	491b      	ldr	r1, [pc, #108]	; (8004b90 <HAL_RTC_SetTime+0x148>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4918      	ldr	r1, [pc, #96]	; (8004b94 <HAL_RTC_SetTime+0x14c>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b50:	2313      	movs	r3, #19
 8004b52:	18fc      	adds	r4, r7, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fb48 	bl	80051ec <RTC_ExitInitMode>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004b68:	2313      	movs	r3, #19
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2229      	movs	r2, #41	; 0x29
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2228      	movs	r2, #40	; 0x28
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return status;
 8004b82:	2313      	movs	r3, #19
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	781b      	ldrb	r3, [r3, #0]
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b006      	add	sp, #24
 8004b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b90:	007f7f7f 	.word	0x007f7f7f
 8004b94:	fffbffff 	.word	0xfffbffff

08004b98 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	045b      	lsls	r3, r3, #17
 8004bb6:	0c5a      	lsrs	r2, r3, #17
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <HAL_RTC_GetTime+0xb4>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	223f      	movs	r2, #63	; 0x3f
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	227f      	movs	r2, #127	; 0x7f
 8004be0:	4013      	ands	r3, r2
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	227f      	movs	r2, #127	; 0x7f
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	0d9b      	lsrs	r3, r3, #22
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11a      	bne.n	8004c42 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 fb57 	bl	80052c4 <RTC_Bcd2ToByte>
 8004c16:	0003      	movs	r3, r0
 8004c18:	001a      	movs	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 fb4e 	bl	80052c4 <RTC_Bcd2ToByte>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	001a      	movs	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	789b      	ldrb	r3, [r3, #2]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 fb45 	bl	80052c4 <RTC_Bcd2ToByte>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b006      	add	sp, #24
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	007f7f7f 	.word	0x007f7f7f

08004c50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c50:	b5b0      	push	{r4, r5, r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2228      	movs	r2, #40	; 0x28
 8004c60:	5c9b      	ldrb	r3, [r3, r2]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RTC_SetDate+0x1a>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e07e      	b.n	8004d68 <HAL_RTC_SetDate+0x118>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2228      	movs	r2, #40	; 0x28
 8004c6e:	2101      	movs	r1, #1
 8004c70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2229      	movs	r2, #41	; 0x29
 8004c76:	2102      	movs	r1, #2
 8004c78:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RTC_SetDate+0x4e>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	001a      	movs	r2, r3
 8004c86:	2310      	movs	r3, #16
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d008      	beq.n	8004c9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2210      	movs	r2, #16
 8004c92:	4393      	bics	r3, r2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	330a      	adds	r3, #10
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11c      	bne.n	8004cde <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fae3 	bl	8005274 <RTC_ByteToBcd2>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 fadc 	bl	8005274 <RTC_ByteToBcd2>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cc0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	789b      	ldrb	r3, [r3, #2]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 fad4 	bl	8005274 <RTC_ByteToBcd2>
 8004ccc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cce:	0022      	movs	r2, r4
 8004cd0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e00e      	b.n	8004cfc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004cf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	22ca      	movs	r2, #202	; 0xca
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2253      	movs	r2, #83	; 0x53
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d0c:	2513      	movs	r5, #19
 8004d0e:	197c      	adds	r4, r7, r5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 fa28 	bl	8005168 <RTC_EnterInitMode>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	183b      	adds	r3, r7, r0
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10c      	bne.n	8004d40 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4910      	ldr	r1, [pc, #64]	; (8004d70 <HAL_RTC_SetDate+0x120>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d32:	183c      	adds	r4, r7, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 fa58 	bl	80051ec <RTC_ExitInitMode>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004d48:	2313      	movs	r3, #19
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2229      	movs	r2, #41	; 0x29
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2228      	movs	r2, #40	; 0x28
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

  return status;
 8004d62:	2313      	movs	r3, #19
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	781b      	ldrb	r3, [r3, #0]
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b006      	add	sp, #24
 8004d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d70:	00ffff3f 	.word	0x00ffff3f

08004d74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <HAL_RTC_GetDate+0x98>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	221f      	movs	r2, #31
 8004d9e:	4013      	ands	r3, r2
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	223f      	movs	r2, #63	; 0x3f
 8004dac:	4013      	ands	r3, r2
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	0b5b      	lsrs	r3, r3, #13
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2207      	movs	r2, #7
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11a      	bne.n	8004e00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 fa78 	bl	80052c4 <RTC_Bcd2ToByte>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 fa6f 	bl	80052c4 <RTC_Bcd2ToByte>
 8004de6:	0003      	movs	r3, r0
 8004de8:	001a      	movs	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	789b      	ldrb	r3, [r3, #2]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 fa66 	bl	80052c4 <RTC_Bcd2ToByte>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b006      	add	sp, #24
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	00ffff3f 	.word	0x00ffff3f

08004e10 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2228      	movs	r2, #40	; 0x28
 8004e20:	5c9b      	ldrb	r3, [r3, r2]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_RTC_SetAlarm_IT+0x1a>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e127      	b.n	800507a <HAL_RTC_SetAlarm_IT+0x26a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2228      	movs	r2, #40	; 0x28
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2229      	movs	r2, #41	; 0x29
 8004e36:	2102      	movs	r1, #2
 8004e38:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d136      	bne.n	8004eae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fa0c 	bl	8005274 <RTC_ByteToBcd2>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fa05 	bl	8005274 <RTC_ByteToBcd2>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e6e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	789b      	ldrb	r3, [r3, #2]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f9fd 	bl	8005274 <RTC_ByteToBcd2>
 8004e7a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e7c:	0022      	movs	r2, r4
 8004e7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	78db      	ldrb	r3, [r3, #3]
 8004e84:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e86:	431a      	orrs	r2, r3
 8004e88:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	5c9b      	ldrb	r3, [r3, r2]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f000 f9ef 	bl	8005274 <RTC_ByteToBcd2>
 8004e96:	0003      	movs	r3, r0
 8004e98:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e9a:	0022      	movs	r2, r4
 8004e9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ea2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e022      	b.n	8004ef4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2240      	movs	r2, #64	; 0x40
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ecc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ed2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004eda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2120      	movs	r1, #32
 8004ee0:	5c5b      	ldrb	r3, [r3, r1]
 8004ee2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ee4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004eea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	22ca      	movs	r2, #202	; 0xca
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2253      	movs	r2, #83	; 0x53
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d14c      	bne.n	8004fb6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4957      	ldr	r1, [pc, #348]	; (8005084 <HAL_RTC_SetAlarm_IT+0x274>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2101      	movs	r1, #1
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004f3c:	f7fe faa4 	bl	8003488 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f44:	e016      	b.n	8004f74 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f46:	f7fe fa9f 	bl	8003488 <HAL_GetTick>
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	23fa      	movs	r3, #250	; 0xfa
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d90d      	bls.n	8004f74 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2229      	movs	r2, #41	; 0x29
 8004f64:	2103      	movs	r1, #3
 8004f66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2228      	movs	r2, #40	; 0x28
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e082      	b.n	800507a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d0e2      	beq.n	8004f46 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	0049      	lsls	r1, r1, #1
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	0149      	lsls	r1, r1, #5
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	e04b      	b.n	800504e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4931      	ldr	r1, [pc, #196]	; (8005088 <HAL_RTC_SetAlarm_IT+0x278>)
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004fd6:	f7fe fa57 	bl	8003488 <HAL_GetTick>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004fde:	e016      	b.n	800500e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fe0:	f7fe fa52 	bl	8003488 <HAL_GetTick>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	1ad2      	subs	r2, r2, r3
 8004fea:	23fa      	movs	r3, #250	; 0xfa
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d90d      	bls.n	800500e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	22ff      	movs	r2, #255	; 0xff
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2229      	movs	r2, #41	; 0x29
 8004ffe:	2103      	movs	r1, #3
 8005000:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2228      	movs	r2, #40	; 0x28
 8005006:	2100      	movs	r1, #0
 8005008:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e035      	b.n	800507a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2202      	movs	r2, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d0e2      	beq.n	8004fe0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2180      	movs	r1, #128	; 0x80
 8005036:	0089      	lsls	r1, r1, #2
 8005038:	430a      	orrs	r2, r1
 800503a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	0189      	lsls	r1, r1, #6
 800504a:	430a      	orrs	r2, r1
 800504c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800504e:	4a0f      	ldr	r2, [pc, #60]	; (800508c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	58d3      	ldr	r3, [r2, r3]
 8005054:	490d      	ldr	r1, [pc, #52]	; (800508c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005056:	2280      	movs	r2, #128	; 0x80
 8005058:	0312      	lsls	r2, r2, #12
 800505a:	4313      	orrs	r3, r2
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2229      	movs	r2, #41	; 0x29
 800506c:	2101      	movs	r1, #1
 800506e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2228      	movs	r2, #40	; 0x28
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b009      	add	sp, #36	; 0x24
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	fffffeff 	.word	0xfffffeff
 8005088:	fffffdff 	.word	0xfffffdff
 800508c:	40021800 	.word	0x40021800

08005090 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	015b      	lsls	r3, r3, #5
 80050a2:	4013      	ands	r3, r2
 80050a4:	d011      	beq.n	80050ca <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	2201      	movs	r2, #1
 80050ae:	4013      	ands	r3, r2
 80050b0:	d00b      	beq.n	80050ca <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	430a      	orrs	r2, r1
 80050c0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f821 	bl	800510c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	019b      	lsls	r3, r3, #6
 80050d4:	4013      	ands	r3, r2
 80050d6:	d011      	beq.n	80050fc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	d00b      	beq.n	80050fc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2102      	movs	r1, #2
 80050f0:	430a      	orrs	r2, r1
 80050f2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f901 	bl	80052fe <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2229      	movs	r2, #41	; 0x29
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <HAL_RTC_WaitForSynchro+0x48>)
 800512a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800512c:	f7fe f9ac 	bl	8003488 <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005134:	e00a      	b.n	800514c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005136:	f7fe f9a7 	bl	8003488 <HAL_GetTick>
 800513a:	0002      	movs	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	23fa      	movs	r3, #250	; 0xfa
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d901      	bls.n	800514c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e006      	b.n	800515a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	4013      	ands	r3, r2
 8005156:	d0ee      	beq.n	8005136 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	0001005f 	.word	0x0001005f

08005168 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005170:	230f      	movs	r3, #15
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2240      	movs	r2, #64	; 0x40
 8005180:	4013      	ands	r3, r2
 8005182:	d12c      	bne.n	80051de <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	430a      	orrs	r2, r1
 8005192:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005194:	f7fe f978 	bl	8003488 <HAL_GetTick>
 8005198:	0003      	movs	r3, r0
 800519a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800519c:	e014      	b.n	80051c8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800519e:	f7fe f973 	bl	8003488 <HAL_GetTick>
 80051a2:	0002      	movs	r2, r0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	200f      	movs	r0, #15
 80051aa:	183b      	adds	r3, r7, r0
 80051ac:	1839      	adds	r1, r7, r0
 80051ae:	7809      	ldrb	r1, [r1, #0]
 80051b0:	7019      	strb	r1, [r3, #0]
 80051b2:	23fa      	movs	r3, #250	; 0xfa
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d906      	bls.n	80051c8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80051ba:	183b      	adds	r3, r7, r0
 80051bc:	2203      	movs	r2, #3
 80051be:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2229      	movs	r2, #41	; 0x29
 80051c4:	2103      	movs	r1, #3
 80051c6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	4013      	ands	r3, r2
 80051d2:	d104      	bne.n	80051de <RTC_EnterInitMode+0x76>
 80051d4:	230f      	movs	r3, #15
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d1df      	bne.n	800519e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80051de:	230f      	movs	r3, #15
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	781b      	ldrb	r3, [r3, #0]
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b004      	add	sp, #16
 80051ea:	bd80      	pop	{r7, pc}

080051ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	240f      	movs	r4, #15
 80051f6:	193b      	adds	r3, r7, r4
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051fc:	4b1c      	ldr	r3, [pc, #112]	; (8005270 <RTC_ExitInitMode+0x84>)
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <RTC_ExitInitMode+0x84>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	438a      	bics	r2, r1
 8005206:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <RTC_ExitInitMode+0x84>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2220      	movs	r2, #32
 800520e:	4013      	ands	r3, r2
 8005210:	d10d      	bne.n	800522e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff ff81 	bl	800511c <HAL_RTC_WaitForSynchro>
 800521a:	1e03      	subs	r3, r0, #0
 800521c:	d021      	beq.n	8005262 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2229      	movs	r2, #41	; 0x29
 8005222:	2103      	movs	r1, #3
 8005224:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005226:	193b      	adds	r3, r7, r4
 8005228:	2203      	movs	r2, #3
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e019      	b.n	8005262 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <RTC_ExitInitMode+0x84>)
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <RTC_ExitInitMode+0x84>)
 8005234:	2120      	movs	r1, #32
 8005236:	438a      	bics	r2, r1
 8005238:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0018      	movs	r0, r3
 800523e:	f7ff ff6d 	bl	800511c <HAL_RTC_WaitForSynchro>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d007      	beq.n	8005256 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2229      	movs	r2, #41	; 0x29
 800524a:	2103      	movs	r1, #3
 800524c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800524e:	230f      	movs	r3, #15
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	2203      	movs	r2, #3
 8005254:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <RTC_ExitInitMode+0x84>)
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <RTC_ExitInitMode+0x84>)
 800525c:	2120      	movs	r1, #32
 800525e:	430a      	orrs	r2, r1
 8005260:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005262:	230f      	movs	r3, #15
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b005      	add	sp, #20
 800526e:	bd90      	pop	{r4, r7, pc}
 8005270:	40002800 	.word	0x40002800

08005274 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	0002      	movs	r2, r0
 800527c:	1dfb      	adds	r3, r7, #7
 800527e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005284:	230b      	movs	r3, #11
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	1dfa      	adds	r2, r7, #7
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800528e:	e008      	b.n	80052a2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005296:	220b      	movs	r2, #11
 8005298:	18bb      	adds	r3, r7, r2
 800529a:	18ba      	adds	r2, r7, r2
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	3a0a      	subs	r2, #10
 80052a0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80052a2:	210b      	movs	r1, #11
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b09      	cmp	r3, #9
 80052aa:	d8f1      	bhi.n	8005290 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	b2db      	uxtb	r3, r3
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	0002      	movs	r2, r0
 80052cc:	1dfb      	adds	r3, r7, #7
 80052ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052d0:	1dfb      	adds	r3, r7, #7
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	001a      	movs	r2, r3
 80052da:	0013      	movs	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	210f      	movs	r1, #15
 80052ee:	400b      	ands	r3, r1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	b2db      	uxtb	r3, r3
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b004      	add	sp, #16
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e0a8      	b.n	8005474 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	2382      	movs	r3, #130	; 0x82
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	429a      	cmp	r2, r3
 8005334:	d009      	beq.n	800534a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	61da      	str	r2, [r3, #28]
 800533c:	e005      	b.n	800534a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	225d      	movs	r2, #93	; 0x5d
 8005354:	5c9b      	ldrb	r3, [r3, r2]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	225c      	movs	r2, #92	; 0x5c
 8005360:	2100      	movs	r1, #0
 8005362:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f7fd fd58 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	225d      	movs	r2, #93	; 0x5d
 8005370:	2102      	movs	r1, #2
 8005372:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2140      	movs	r1, #64	; 0x40
 8005380:	438a      	bics	r2, r1
 8005382:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	23e0      	movs	r3, #224	; 0xe0
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	429a      	cmp	r2, r3
 800538e:	d902      	bls.n	8005396 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	015b      	lsls	r3, r3, #5
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	23f0      	movs	r3, #240	; 0xf0
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d008      	beq.n	80053ba <HAL_SPI_Init+0xaa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	23e0      	movs	r3, #224	; 0xe0
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d002      	beq.n	80053ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	2382      	movs	r3, #130	; 0x82
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	401a      	ands	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6899      	ldr	r1, [r3, #8]
 80053c8:	2384      	movs	r3, #132	; 0x84
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	400b      	ands	r3, r1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2102      	movs	r1, #2
 80053d6:	400b      	ands	r3, r1
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2101      	movs	r1, #1
 80053e0:	400b      	ands	r3, r1
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6999      	ldr	r1, [r3, #24]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	400b      	ands	r3, r1
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	2138      	movs	r1, #56	; 0x38
 80053f6:	400b      	ands	r3, r1
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	400b      	ands	r3, r1
 8005402:	431a      	orrs	r2, r3
 8005404:	0011      	movs	r1, r2
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800540a:	2380      	movs	r3, #128	; 0x80
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	2204      	movs	r2, #4
 8005420:	401a      	ands	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2110      	movs	r1, #16
 8005428:	400b      	ands	r3, r1
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	2108      	movs	r1, #8
 8005432:	400b      	ands	r3, r1
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68d9      	ldr	r1, [r3, #12]
 800543a:	23f0      	movs	r3, #240	; 0xf0
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	400b      	ands	r3, r1
 8005440:	431a      	orrs	r2, r3
 8005442:	0011      	movs	r1, r2
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	015b      	lsls	r3, r3, #5
 800544a:	401a      	ands	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4907      	ldr	r1, [pc, #28]	; (800547c <HAL_SPI_Init+0x16c>)
 8005460:	400a      	ands	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	225d      	movs	r2, #93	; 0x5d
 800546e:	2101      	movs	r1, #1
 8005470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b004      	add	sp, #16
 800547a:	bd80      	pop	{r7, pc}
 800547c:	fffff7ff 	.word	0xfffff7ff

08005480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e04a      	b.n	8005528 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223d      	movs	r2, #61	; 0x3d
 8005496:	5c9b      	ldrb	r3, [r3, r2]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223c      	movs	r2, #60	; 0x3c
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7fd fd01 	bl	8002eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223d      	movs	r2, #61	; 0x3d
 80054b2:	2102      	movs	r1, #2
 80054b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	0019      	movs	r1, r3
 80054c0:	0010      	movs	r0, r2
 80054c2:	f000 f9ed 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2248      	movs	r2, #72	; 0x48
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223e      	movs	r2, #62	; 0x3e
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223f      	movs	r2, #63	; 0x3f
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2241      	movs	r2, #65	; 0x41
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2242      	movs	r2, #66	; 0x42
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2243      	movs	r2, #67	; 0x43
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2244      	movs	r2, #68	; 0x44
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2245      	movs	r2, #69	; 0x45
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2246      	movs	r2, #70	; 0x46
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2247      	movs	r2, #71	; 0x47
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	223d      	movs	r2, #61	; 0x3d
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	223d      	movs	r2, #61	; 0x3d
 800553c:	5c9b      	ldrb	r3, [r3, r2]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e047      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	223d      	movs	r2, #61	; 0x3d
 800554c:	2102      	movs	r1, #2
 800554e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d014      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x64>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	05db      	lsls	r3, r3, #23
 8005572:	429a      	cmp	r2, r3
 8005574:	d00e      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x64>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x64>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x64>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_TIM_Base_Start_IT+0xbc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d116      	bne.n	80055c2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d016      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0xa4>
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	025b      	lsls	r3, r3, #9
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d011      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2101      	movs	r1, #1
 80055bc:	430a      	orrs	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c0:	e008      	b.n	80055d4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2101      	movs	r1, #1
 80055ce:	430a      	orrs	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e000      	b.n	80055d6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b004      	add	sp, #16
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40014000 	.word	0x40014000
 80055f0:	00010007 	.word	0x00010007

080055f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2101      	movs	r1, #1
 8005608:	438a      	bics	r2, r1
 800560a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <HAL_TIM_Base_Stop_IT+0x54>)
 8005614:	4013      	ands	r3, r2
 8005616:	d10d      	bne.n	8005634 <HAL_TIM_Base_Stop_IT+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a0b      	ldr	r2, [pc, #44]	; (800564c <HAL_TIM_Base_Stop_IT+0x58>)
 8005620:	4013      	ands	r3, r2
 8005622:	d107      	bne.n	8005634 <HAL_TIM_Base_Stop_IT+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2101      	movs	r1, #1
 8005630:	438a      	bics	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223d      	movs	r2, #61	; 0x3d
 8005638:	2101      	movs	r1, #1
 800563a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b002      	add	sp, #8
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	00001111 	.word	0x00001111
 800564c:	00000444 	.word	0x00000444

08005650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2202      	movs	r2, #2
 800566c:	4013      	ands	r3, r2
 800566e:	d021      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2203      	movs	r2, #3
 800567e:	4252      	negs	r2, r2
 8005680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2203      	movs	r2, #3
 8005690:	4013      	ands	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 f8ea 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 800569c:	e007      	b.n	80056ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 f8dd 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f8e9 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2204      	movs	r2, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2204      	movs	r2, #4
 80056c0:	4013      	ands	r3, r2
 80056c2:	d01e      	beq.n	8005702 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2205      	movs	r2, #5
 80056ca:	4252      	negs	r2, r2
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	23c0      	movs	r3, #192	; 0xc0
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4013      	ands	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f8c3 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80056ea:	e007      	b.n	80056fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	0018      	movs	r0, r3
 80056f0:	f000 f8b6 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 f8c2 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2208      	movs	r2, #8
 8005706:	4013      	ands	r3, r2
 8005708:	d021      	beq.n	800574e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2208      	movs	r2, #8
 800570e:	4013      	ands	r3, r2
 8005710:	d01d      	beq.n	800574e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2209      	movs	r2, #9
 8005718:	4252      	negs	r2, r2
 800571a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2204      	movs	r2, #4
 8005720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	2203      	movs	r2, #3
 800572a:	4013      	ands	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f89d 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005736:	e007      	b.n	8005748 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f890 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f000 f89c 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2210      	movs	r2, #16
 8005752:	4013      	ands	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2210      	movs	r2, #16
 800575a:	4013      	ands	r3, r2
 800575c:	d01e      	beq.n	800579c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2211      	movs	r2, #17
 8005764:	4252      	negs	r2, r2
 8005766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2208      	movs	r2, #8
 800576c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	23c0      	movs	r3, #192	; 0xc0
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4013      	ands	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 f876 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005784:	e007      	b.n	8005796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f000 f869 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f875 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	d00c      	beq.n	80057be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	d008      	beq.n	80057be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2202      	movs	r2, #2
 80057b2:	4252      	negs	r2, r2
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fd fa95 	bl	8002ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	4013      	ands	r3, r2
 80057c4:	d104      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	019b      	lsls	r3, r3, #6
 80057cc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057ce:	d00b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	4013      	ands	r3, r2
 80057d6:	d007      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <HAL_TIM_IRQHandler+0x208>)
 80057de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 f972 	bl	8005acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4013      	ands	r3, r2
 80057f0:	d00b      	beq.n	800580a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2280      	movs	r2, #128	; 0x80
 80057f6:	4013      	ands	r3, r2
 80057f8:	d007      	beq.n	800580a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <HAL_TIM_IRQHandler+0x20c>)
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f000 f969 	bl	8005adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2240      	movs	r2, #64	; 0x40
 800580e:	4013      	ands	r3, r2
 8005810:	d00c      	beq.n	800582c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2240      	movs	r2, #64	; 0x40
 8005816:	4013      	ands	r3, r2
 8005818:	d008      	beq.n	800582c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2241      	movs	r2, #65	; 0x41
 8005820:	4252      	negs	r2, r2
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f832 	bl	8005890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2220      	movs	r2, #32
 8005830:	4013      	ands	r3, r2
 8005832:	d00c      	beq.n	800584e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	4013      	ands	r3, r2
 800583a:	d008      	beq.n	800584e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2221      	movs	r2, #33	; 0x21
 8005842:	4252      	negs	r2, r2
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f000 f937 	bl	8005abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	ffffdf7f 	.word	0xffffdf7f
 800585c:	fffffeff 	.word	0xfffffeff

08005860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b002      	add	sp, #8
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b002      	add	sp, #8
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3f      	ldr	r2, [pc, #252]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00c      	beq.n	80058d2 <TIM_Base_SetConfig+0x32>
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	05db      	lsls	r3, r3, #23
 80058be:	429a      	cmp	r2, r3
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x32>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x32>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a3a      	ldr	r2, [pc, #232]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2270      	movs	r2, #112	; 0x70
 80058d6:	4393      	bics	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a32      	ldr	r2, [pc, #200]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01c      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	05db      	lsls	r3, r3, #23
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d017      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2e      	ldr	r2, [pc, #184]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_Base_SetConfig+0x86>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a29      	ldr	r2, [pc, #164]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a28      	ldr	r2, [pc, #160]	; (80059cc <TIM_Base_SetConfig+0x12c>)
 800592a:	4013      	ands	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	4393      	bics	r3, r2
 800593e:	001a      	movs	r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <TIM_Base_SetConfig+0x110>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0xde>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0xde>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0xde>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d103      	bne.n	8005986 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2201      	movs	r2, #1
 8005992:	4013      	ands	r3, r2
 8005994:	2b01      	cmp	r3, #1
 8005996:	d106      	bne.n	80059a6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2201      	movs	r2, #1
 800599e:	4393      	bics	r3, r2
 80059a0:	001a      	movs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]
  }
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40002000 	.word	0x40002000
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800
 80059cc:	fffffcff 	.word	0xfffffcff

080059d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	223c      	movs	r2, #60	; 0x3c
 80059de:	5c9b      	ldrb	r3, [r3, r2]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e05a      	b.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	223c      	movs	r2, #60	; 0x3c
 80059ec:	2101      	movs	r1, #1
 80059ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	223d      	movs	r2, #61	; 0x3d
 80059f4:	2102      	movs	r1, #2
 80059f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2270      	movs	r2, #112	; 0x70
 8005a28:	4393      	bics	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d014      	beq.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	05db      	lsls	r3, r3, #23
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d00e      	beq.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10c      	bne.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	4393      	bics	r3, r2
 8005a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	223d      	movs	r2, #61	; 0x3d
 8005a90:	2101      	movs	r1, #1
 8005a92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	223c      	movs	r2, #60	; 0x3c
 8005a98:	2100      	movs	r1, #0
 8005a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	ff0fffff 	.word	0xff0fffff
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40014000 	.word	0x40014000

08005abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e046      	b.n	8005b8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2288      	movs	r2, #136	; 0x88
 8005b02:	589b      	ldr	r3, [r3, r2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d107      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2284      	movs	r2, #132	; 0x84
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7fd f9f2 	bl	8002efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2288      	movs	r2, #136	; 0x88
 8005b1c:	2124      	movs	r1, #36	; 0x24
 8005b1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	438a      	bics	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fd0c 	bl	8006558 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f9b2 	bl	8005eac <UART_SetConfig>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e01c      	b.n	8005b8c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	490d      	ldr	r1, [pc, #52]	; (8005b94 <HAL_UART_Init+0xa8>)
 8005b5e:	400a      	ands	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	212a      	movs	r1, #42	; 0x2a
 8005b6e:	438a      	bics	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 fd9b 	bl	80066c0 <UART_CheckIdleState>
 8005b8a:	0003      	movs	r3, r0
}
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	ffffb7ff 	.word	0xffffb7ff

08005b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	1dbb      	adds	r3, r7, #6
 8005ba6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2288      	movs	r2, #136	; 0x88
 8005bac:	589b      	ldr	r3, [r3, r2]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d000      	beq.n	8005bb4 <HAL_UART_Transmit+0x1c>
 8005bb2:	e090      	b.n	8005cd6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_UART_Transmit+0x2a>
 8005bba:	1dbb      	adds	r3, r7, #6
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e088      	b.n	8005cd8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	015b      	lsls	r3, r3, #5
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d109      	bne.n	8005be6 <HAL_UART_Transmit+0x4e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d105      	bne.n	8005be6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4013      	ands	r3, r2
 8005be0:	d001      	beq.n	8005be6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e078      	b.n	8005cd8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2290      	movs	r2, #144	; 0x90
 8005bea:	2100      	movs	r1, #0
 8005bec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2288      	movs	r2, #136	; 0x88
 8005bf2:	2121      	movs	r1, #33	; 0x21
 8005bf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fd fc47 	bl	8003488 <HAL_GetTick>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1dba      	adds	r2, r7, #6
 8005c02:	2154      	movs	r1, #84	; 0x54
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1dba      	adds	r2, r7, #6
 8005c0c:	2156      	movs	r1, #86	; 0x56
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	015b      	lsls	r3, r3, #5
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x98>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c38:	e030      	b.n	8005c9c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	0013      	movs	r3, r2
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	f000 fde4 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	1e03      	subs	r3, r0, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2288      	movs	r2, #136	; 0x88
 8005c54:	2120      	movs	r1, #32
 8005c56:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e03d      	b.n	8005cd8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	001a      	movs	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	05d2      	lsls	r2, r2, #23
 8005c6e:	0dd2      	lsrs	r2, r2, #23
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3302      	adds	r3, #2
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e007      	b.n	8005c8a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2256      	movs	r2, #86	; 0x56
 8005c8e:	5a9b      	ldrh	r3, [r3, r2]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b299      	uxth	r1, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2256      	movs	r2, #86	; 0x56
 8005c9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2256      	movs	r2, #86	; 0x56
 8005ca0:	5a9b      	ldrh	r3, [r3, r2]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1c8      	bne.n	8005c3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	0013      	movs	r3, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	f000 fdad 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2288      	movs	r2, #136	; 0x88
 8005cc2:	2120      	movs	r1, #32
 8005cc4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e006      	b.n	8005cd8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2288      	movs	r2, #136	; 0x88
 8005cce:	2120      	movs	r1, #32
 8005cd0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b008      	add	sp, #32
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	1dbb      	adds	r3, r7, #6
 8005cee:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	228c      	movs	r2, #140	; 0x8c
 8005cf4:	589b      	ldr	r3, [r3, r2]
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d000      	beq.n	8005cfc <HAL_UART_Receive+0x1c>
 8005cfa:	e0d0      	b.n	8005e9e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_UART_Receive+0x2a>
 8005d02:	1dbb      	adds	r3, r7, #6
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0c8      	b.n	8005ea0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	015b      	lsls	r3, r3, #5
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d109      	bne.n	8005d2e <HAL_UART_Receive+0x4e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2201      	movs	r2, #1
 8005d26:	4013      	ands	r3, r2
 8005d28:	d001      	beq.n	8005d2e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e0b8      	b.n	8005ea0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2290      	movs	r2, #144	; 0x90
 8005d32:	2100      	movs	r1, #0
 8005d34:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	228c      	movs	r2, #140	; 0x8c
 8005d3a:	2122      	movs	r1, #34	; 0x22
 8005d3c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d44:	f7fd fba0 	bl	8003488 <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1dba      	adds	r2, r7, #6
 8005d50:	215c      	movs	r1, #92	; 0x5c
 8005d52:	8812      	ldrh	r2, [r2, #0]
 8005d54:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1dba      	adds	r2, r7, #6
 8005d5a:	215e      	movs	r1, #94	; 0x5e
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	015b      	lsls	r3, r3, #5
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d10d      	bne.n	8005d88 <HAL_UART_Receive+0xa8>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <HAL_UART_Receive+0x9e>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2260      	movs	r2, #96	; 0x60
 8005d78:	494b      	ldr	r1, [pc, #300]	; (8005ea8 <HAL_UART_Receive+0x1c8>)
 8005d7a:	5299      	strh	r1, [r3, r2]
 8005d7c:	e02e      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2260      	movs	r2, #96	; 0x60
 8005d82:	21ff      	movs	r1, #255	; 0xff
 8005d84:	5299      	strh	r1, [r3, r2]
 8005d86:	e029      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10d      	bne.n	8005dac <HAL_UART_Receive+0xcc>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <HAL_UART_Receive+0xc2>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2260      	movs	r2, #96	; 0x60
 8005d9c:	21ff      	movs	r1, #255	; 0xff
 8005d9e:	5299      	strh	r1, [r3, r2]
 8005da0:	e01c      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2260      	movs	r2, #96	; 0x60
 8005da6:	217f      	movs	r1, #127	; 0x7f
 8005da8:	5299      	strh	r1, [r3, r2]
 8005daa:	e017      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	2380      	movs	r3, #128	; 0x80
 8005db2:	055b      	lsls	r3, r3, #21
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10d      	bne.n	8005dd4 <HAL_UART_Receive+0xf4>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <HAL_UART_Receive+0xea>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2260      	movs	r2, #96	; 0x60
 8005dc4:	217f      	movs	r1, #127	; 0x7f
 8005dc6:	5299      	strh	r1, [r3, r2]
 8005dc8:	e008      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2260      	movs	r2, #96	; 0x60
 8005dce:	213f      	movs	r1, #63	; 0x3f
 8005dd0:	5299      	strh	r1, [r3, r2]
 8005dd2:	e003      	b.n	8005ddc <HAL_UART_Receive+0xfc>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2260      	movs	r2, #96	; 0x60
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005ddc:	2312      	movs	r3, #18
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	2160      	movs	r1, #96	; 0x60
 8005de4:	5a52      	ldrh	r2, [r2, r1]
 8005de6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d108      	bne.n	8005e06 <HAL_UART_Receive+0x126>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e003      	b.n	8005e0e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e0e:	e03a      	b.n	8005e86 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	0013      	movs	r3, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	f000 fcf9 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	228c      	movs	r2, #140	; 0x8c
 8005e2a:	2120      	movs	r1, #32
 8005e2c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e036      	b.n	8005ea0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10e      	bne.n	8005e56 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2212      	movs	r2, #18
 8005e42:	18ba      	adds	r2, r7, r2
 8005e44:	8812      	ldrh	r2, [r2, #0]
 8005e46:	4013      	ands	r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	3302      	adds	r3, #2
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00e      	b.n	8005e74 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2212      	movs	r2, #18
 8005e60:	18ba      	adds	r2, r7, r2
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	4013      	ands	r3, r2
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	225e      	movs	r2, #94	; 0x5e
 8005e78:	5a9b      	ldrh	r3, [r3, r2]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b299      	uxth	r1, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	225e      	movs	r2, #94	; 0x5e
 8005e84:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	225e      	movs	r2, #94	; 0x5e
 8005e8a:	5a9b      	ldrh	r3, [r3, r2]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1be      	bne.n	8005e10 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	228c      	movs	r2, #140	; 0x8c
 8005e96:	2120      	movs	r1, #32
 8005e98:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b008      	add	sp, #32
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	000001ff 	.word	0x000001ff

08005eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eac:	b5b0      	push	{r4, r5, r7, lr}
 8005eae:	b090      	sub	sp, #64	; 0x40
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eb4:	231a      	movs	r3, #26
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	189b      	adds	r3, r3, r2
 8005eba:	19db      	adds	r3, r3, r7
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4ac1      	ldr	r2, [pc, #772]	; (80061e4 <UART_SetConfig+0x338>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4abc      	ldr	r2, [pc, #752]	; (80061e8 <UART_SetConfig+0x33c>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0018      	movs	r0, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	68d9      	ldr	r1, [r3, #12]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	0003      	movs	r3, r0
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4ab6      	ldr	r2, [pc, #728]	; (80061ec <UART_SetConfig+0x340>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <UART_SetConfig+0x80>
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4ab4      	ldr	r2, [pc, #720]	; (80061f0 <UART_SetConfig+0x344>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4ab0      	ldr	r2, [pc, #704]	; (80061f4 <UART_SetConfig+0x348>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	0019      	movs	r1, r3
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	220f      	movs	r2, #15
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	0003      	movs	r3, r0
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4aa5      	ldr	r2, [pc, #660]	; (80061f8 <UART_SetConfig+0x34c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d131      	bne.n	8005fca <UART_SetConfig+0x11e>
 8005f66:	4ba5      	ldr	r3, [pc, #660]	; (80061fc <UART_SetConfig+0x350>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d01d      	beq.n	8005fae <UART_SetConfig+0x102>
 8005f72:	d823      	bhi.n	8005fbc <UART_SetConfig+0x110>
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d00c      	beq.n	8005f92 <UART_SetConfig+0xe6>
 8005f78:	d820      	bhi.n	8005fbc <UART_SetConfig+0x110>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <UART_SetConfig+0xd8>
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d00e      	beq.n	8005fa0 <UART_SetConfig+0xf4>
 8005f82:	e01b      	b.n	8005fbc <UART_SetConfig+0x110>
 8005f84:	231b      	movs	r3, #27
 8005f86:	2220      	movs	r2, #32
 8005f88:	189b      	adds	r3, r3, r2
 8005f8a:	19db      	adds	r3, r3, r7
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e154      	b.n	800623c <UART_SetConfig+0x390>
 8005f92:	231b      	movs	r3, #27
 8005f94:	2220      	movs	r2, #32
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	19db      	adds	r3, r3, r7
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e14d      	b.n	800623c <UART_SetConfig+0x390>
 8005fa0:	231b      	movs	r3, #27
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	19db      	adds	r3, r3, r7
 8005fa8:	2204      	movs	r2, #4
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	e146      	b.n	800623c <UART_SetConfig+0x390>
 8005fae:	231b      	movs	r3, #27
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	19db      	adds	r3, r3, r7
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e13f      	b.n	800623c <UART_SetConfig+0x390>
 8005fbc:	231b      	movs	r3, #27
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	19db      	adds	r3, r3, r7
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e138      	b.n	800623c <UART_SetConfig+0x390>
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a8c      	ldr	r2, [pc, #560]	; (8006200 <UART_SetConfig+0x354>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d131      	bne.n	8006038 <UART_SetConfig+0x18c>
 8005fd4:	4b89      	ldr	r3, [pc, #548]	; (80061fc <UART_SetConfig+0x350>)
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	220c      	movs	r2, #12
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d01d      	beq.n	800601c <UART_SetConfig+0x170>
 8005fe0:	d823      	bhi.n	800602a <UART_SetConfig+0x17e>
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d00c      	beq.n	8006000 <UART_SetConfig+0x154>
 8005fe6:	d820      	bhi.n	800602a <UART_SetConfig+0x17e>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <UART_SetConfig+0x146>
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d00e      	beq.n	800600e <UART_SetConfig+0x162>
 8005ff0:	e01b      	b.n	800602a <UART_SetConfig+0x17e>
 8005ff2:	231b      	movs	r3, #27
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	19db      	adds	r3, r3, r7
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e11d      	b.n	800623c <UART_SetConfig+0x390>
 8006000:	231b      	movs	r3, #27
 8006002:	2220      	movs	r2, #32
 8006004:	189b      	adds	r3, r3, r2
 8006006:	19db      	adds	r3, r3, r7
 8006008:	2202      	movs	r2, #2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e116      	b.n	800623c <UART_SetConfig+0x390>
 800600e:	231b      	movs	r3, #27
 8006010:	2220      	movs	r2, #32
 8006012:	189b      	adds	r3, r3, r2
 8006014:	19db      	adds	r3, r3, r7
 8006016:	2204      	movs	r2, #4
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e10f      	b.n	800623c <UART_SetConfig+0x390>
 800601c:	231b      	movs	r3, #27
 800601e:	2220      	movs	r2, #32
 8006020:	189b      	adds	r3, r3, r2
 8006022:	19db      	adds	r3, r3, r7
 8006024:	2208      	movs	r2, #8
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e108      	b.n	800623c <UART_SetConfig+0x390>
 800602a:	231b      	movs	r3, #27
 800602c:	2220      	movs	r2, #32
 800602e:	189b      	adds	r3, r3, r2
 8006030:	19db      	adds	r3, r3, r7
 8006032:	2210      	movs	r2, #16
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e101      	b.n	800623c <UART_SetConfig+0x390>
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a71      	ldr	r2, [pc, #452]	; (8006204 <UART_SetConfig+0x358>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d131      	bne.n	80060a6 <UART_SetConfig+0x1fa>
 8006042:	4b6e      	ldr	r3, [pc, #440]	; (80061fc <UART_SetConfig+0x350>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	2230      	movs	r2, #48	; 0x30
 8006048:	4013      	ands	r3, r2
 800604a:	2b30      	cmp	r3, #48	; 0x30
 800604c:	d01d      	beq.n	800608a <UART_SetConfig+0x1de>
 800604e:	d823      	bhi.n	8006098 <UART_SetConfig+0x1ec>
 8006050:	2b20      	cmp	r3, #32
 8006052:	d00c      	beq.n	800606e <UART_SetConfig+0x1c2>
 8006054:	d820      	bhi.n	8006098 <UART_SetConfig+0x1ec>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <UART_SetConfig+0x1b4>
 800605a:	2b10      	cmp	r3, #16
 800605c:	d00e      	beq.n	800607c <UART_SetConfig+0x1d0>
 800605e:	e01b      	b.n	8006098 <UART_SetConfig+0x1ec>
 8006060:	231b      	movs	r3, #27
 8006062:	2220      	movs	r2, #32
 8006064:	189b      	adds	r3, r3, r2
 8006066:	19db      	adds	r3, r3, r7
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e0e6      	b.n	800623c <UART_SetConfig+0x390>
 800606e:	231b      	movs	r3, #27
 8006070:	2220      	movs	r2, #32
 8006072:	189b      	adds	r3, r3, r2
 8006074:	19db      	adds	r3, r3, r7
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e0df      	b.n	800623c <UART_SetConfig+0x390>
 800607c:	231b      	movs	r3, #27
 800607e:	2220      	movs	r2, #32
 8006080:	189b      	adds	r3, r3, r2
 8006082:	19db      	adds	r3, r3, r7
 8006084:	2204      	movs	r2, #4
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e0d8      	b.n	800623c <UART_SetConfig+0x390>
 800608a:	231b      	movs	r3, #27
 800608c:	2220      	movs	r2, #32
 800608e:	189b      	adds	r3, r3, r2
 8006090:	19db      	adds	r3, r3, r7
 8006092:	2208      	movs	r2, #8
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e0d1      	b.n	800623c <UART_SetConfig+0x390>
 8006098:	231b      	movs	r3, #27
 800609a:	2220      	movs	r2, #32
 800609c:	189b      	adds	r3, r3, r2
 800609e:	19db      	adds	r3, r3, r7
 80060a0:	2210      	movs	r2, #16
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	e0ca      	b.n	800623c <UART_SetConfig+0x390>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a57      	ldr	r2, [pc, #348]	; (8006208 <UART_SetConfig+0x35c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d106      	bne.n	80060be <UART_SetConfig+0x212>
 80060b0:	231b      	movs	r3, #27
 80060b2:	2220      	movs	r2, #32
 80060b4:	189b      	adds	r3, r3, r2
 80060b6:	19db      	adds	r3, r3, r7
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e0be      	b.n	800623c <UART_SetConfig+0x390>
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a52      	ldr	r2, [pc, #328]	; (800620c <UART_SetConfig+0x360>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d106      	bne.n	80060d6 <UART_SetConfig+0x22a>
 80060c8:	231b      	movs	r3, #27
 80060ca:	2220      	movs	r2, #32
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	19db      	adds	r3, r3, r7
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e0b2      	b.n	800623c <UART_SetConfig+0x390>
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a4d      	ldr	r2, [pc, #308]	; (8006210 <UART_SetConfig+0x364>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d106      	bne.n	80060ee <UART_SetConfig+0x242>
 80060e0:	231b      	movs	r3, #27
 80060e2:	2220      	movs	r2, #32
 80060e4:	189b      	adds	r3, r3, r2
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e0a6      	b.n	800623c <UART_SetConfig+0x390>
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3e      	ldr	r2, [pc, #248]	; (80061ec <UART_SetConfig+0x340>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d13e      	bne.n	8006176 <UART_SetConfig+0x2ca>
 80060f8:	4b40      	ldr	r3, [pc, #256]	; (80061fc <UART_SetConfig+0x350>)
 80060fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fc:	23c0      	movs	r3, #192	; 0xc0
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4013      	ands	r3, r2
 8006102:	22c0      	movs	r2, #192	; 0xc0
 8006104:	0112      	lsls	r2, r2, #4
 8006106:	4293      	cmp	r3, r2
 8006108:	d027      	beq.n	800615a <UART_SetConfig+0x2ae>
 800610a:	22c0      	movs	r2, #192	; 0xc0
 800610c:	0112      	lsls	r2, r2, #4
 800610e:	4293      	cmp	r3, r2
 8006110:	d82a      	bhi.n	8006168 <UART_SetConfig+0x2bc>
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	0112      	lsls	r2, r2, #4
 8006116:	4293      	cmp	r3, r2
 8006118:	d011      	beq.n	800613e <UART_SetConfig+0x292>
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	4293      	cmp	r3, r2
 8006120:	d822      	bhi.n	8006168 <UART_SetConfig+0x2bc>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <UART_SetConfig+0x284>
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	00d2      	lsls	r2, r2, #3
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <UART_SetConfig+0x2a0>
 800612e:	e01b      	b.n	8006168 <UART_SetConfig+0x2bc>
 8006130:	231b      	movs	r3, #27
 8006132:	2220      	movs	r2, #32
 8006134:	189b      	adds	r3, r3, r2
 8006136:	19db      	adds	r3, r3, r7
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e07e      	b.n	800623c <UART_SetConfig+0x390>
 800613e:	231b      	movs	r3, #27
 8006140:	2220      	movs	r2, #32
 8006142:	189b      	adds	r3, r3, r2
 8006144:	19db      	adds	r3, r3, r7
 8006146:	2202      	movs	r2, #2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e077      	b.n	800623c <UART_SetConfig+0x390>
 800614c:	231b      	movs	r3, #27
 800614e:	2220      	movs	r2, #32
 8006150:	189b      	adds	r3, r3, r2
 8006152:	19db      	adds	r3, r3, r7
 8006154:	2204      	movs	r2, #4
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e070      	b.n	800623c <UART_SetConfig+0x390>
 800615a:	231b      	movs	r3, #27
 800615c:	2220      	movs	r2, #32
 800615e:	189b      	adds	r3, r3, r2
 8006160:	19db      	adds	r3, r3, r7
 8006162:	2208      	movs	r2, #8
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e069      	b.n	800623c <UART_SetConfig+0x390>
 8006168:	231b      	movs	r3, #27
 800616a:	2220      	movs	r2, #32
 800616c:	189b      	adds	r3, r3, r2
 800616e:	19db      	adds	r3, r3, r7
 8006170:	2210      	movs	r2, #16
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e062      	b.n	800623c <UART_SetConfig+0x390>
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <UART_SetConfig+0x344>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d157      	bne.n	8006230 <UART_SetConfig+0x384>
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <UART_SetConfig+0x350>)
 8006182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006184:	23c0      	movs	r3, #192	; 0xc0
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4013      	ands	r3, r2
 800618a:	22c0      	movs	r2, #192	; 0xc0
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	4293      	cmp	r3, r2
 8006190:	d040      	beq.n	8006214 <UART_SetConfig+0x368>
 8006192:	22c0      	movs	r2, #192	; 0xc0
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	4293      	cmp	r3, r2
 8006198:	d843      	bhi.n	8006222 <UART_SetConfig+0x376>
 800619a:	2280      	movs	r2, #128	; 0x80
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	4293      	cmp	r3, r2
 80061a0:	d011      	beq.n	80061c6 <UART_SetConfig+0x31a>
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	0092      	lsls	r2, r2, #2
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d83b      	bhi.n	8006222 <UART_SetConfig+0x376>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <UART_SetConfig+0x30c>
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	0052      	lsls	r2, r2, #1
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <UART_SetConfig+0x328>
 80061b6:	e034      	b.n	8006222 <UART_SetConfig+0x376>
 80061b8:	231b      	movs	r3, #27
 80061ba:	2220      	movs	r2, #32
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e03a      	b.n	800623c <UART_SetConfig+0x390>
 80061c6:	231b      	movs	r3, #27
 80061c8:	2220      	movs	r2, #32
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	19db      	adds	r3, r3, r7
 80061ce:	2202      	movs	r2, #2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	e033      	b.n	800623c <UART_SetConfig+0x390>
 80061d4:	231b      	movs	r3, #27
 80061d6:	2220      	movs	r2, #32
 80061d8:	189b      	adds	r3, r3, r2
 80061da:	19db      	adds	r3, r3, r7
 80061dc:	2204      	movs	r2, #4
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e02c      	b.n	800623c <UART_SetConfig+0x390>
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	cfff69f3 	.word	0xcfff69f3
 80061e8:	ffffcfff 	.word	0xffffcfff
 80061ec:	40008000 	.word	0x40008000
 80061f0:	40008400 	.word	0x40008400
 80061f4:	11fff4ff 	.word	0x11fff4ff
 80061f8:	40013800 	.word	0x40013800
 80061fc:	40021000 	.word	0x40021000
 8006200:	40004400 	.word	0x40004400
 8006204:	40004800 	.word	0x40004800
 8006208:	40004c00 	.word	0x40004c00
 800620c:	40005000 	.word	0x40005000
 8006210:	40013c00 	.word	0x40013c00
 8006214:	231b      	movs	r3, #27
 8006216:	2220      	movs	r2, #32
 8006218:	189b      	adds	r3, r3, r2
 800621a:	19db      	adds	r3, r3, r7
 800621c:	2208      	movs	r2, #8
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e00c      	b.n	800623c <UART_SetConfig+0x390>
 8006222:	231b      	movs	r3, #27
 8006224:	2220      	movs	r2, #32
 8006226:	189b      	adds	r3, r3, r2
 8006228:	19db      	adds	r3, r3, r7
 800622a:	2210      	movs	r2, #16
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e005      	b.n	800623c <UART_SetConfig+0x390>
 8006230:	231b      	movs	r3, #27
 8006232:	2220      	movs	r2, #32
 8006234:	189b      	adds	r3, r3, r2
 8006236:	19db      	adds	r3, r3, r7
 8006238:	2210      	movs	r2, #16
 800623a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4ac1      	ldr	r2, [pc, #772]	; (8006548 <UART_SetConfig+0x69c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d005      	beq.n	8006252 <UART_SetConfig+0x3a6>
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4ac0      	ldr	r2, [pc, #768]	; (800654c <UART_SetConfig+0x6a0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d000      	beq.n	8006252 <UART_SetConfig+0x3a6>
 8006250:	e093      	b.n	800637a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006252:	231b      	movs	r3, #27
 8006254:	2220      	movs	r2, #32
 8006256:	189b      	adds	r3, r3, r2
 8006258:	19db      	adds	r3, r3, r7
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d015      	beq.n	800628c <UART_SetConfig+0x3e0>
 8006260:	dc18      	bgt.n	8006294 <UART_SetConfig+0x3e8>
 8006262:	2b04      	cmp	r3, #4
 8006264:	d00d      	beq.n	8006282 <UART_SetConfig+0x3d6>
 8006266:	dc15      	bgt.n	8006294 <UART_SetConfig+0x3e8>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <UART_SetConfig+0x3c6>
 800626c:	2b02      	cmp	r3, #2
 800626e:	d005      	beq.n	800627c <UART_SetConfig+0x3d0>
 8006270:	e010      	b.n	8006294 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006272:	f7fe f8f5 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006276:	0003      	movs	r3, r0
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800627a:	e014      	b.n	80062a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800627c:	4bb4      	ldr	r3, [pc, #720]	; (8006550 <UART_SetConfig+0x6a4>)
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006280:	e011      	b.n	80062a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006282:	f7fe f861 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8006286:	0003      	movs	r3, r0
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800628a:	e00c      	b.n	80062a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006292:	e008      	b.n	80062a6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006298:	231a      	movs	r3, #26
 800629a:	2220      	movs	r2, #32
 800629c:	189b      	adds	r3, r3, r2
 800629e:	19db      	adds	r3, r3, r7
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
        break;
 80062a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d100      	bne.n	80062ae <UART_SetConfig+0x402>
 80062ac:	e135      	b.n	800651a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b2:	4ba8      	ldr	r3, [pc, #672]	; (8006554 <UART_SetConfig+0x6a8>)
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	5ad3      	ldrh	r3, [r2, r3]
 80062b8:	0019      	movs	r1, r3
 80062ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062bc:	f7f9 ff3e 	bl	800013c <__udivsi3>
 80062c0:	0003      	movs	r3, r0
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	0013      	movs	r3, r2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	189b      	adds	r3, r3, r2
 80062ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d305      	bcc.n	80062e0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062dc:	429a      	cmp	r2, r3
 80062de:	d906      	bls.n	80062ee <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80062e0:	231a      	movs	r3, #26
 80062e2:	2220      	movs	r2, #32
 80062e4:	189b      	adds	r3, r3, r2
 80062e6:	19db      	adds	r3, r3, r7
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e044      	b.n	8006378 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fa:	4b96      	ldr	r3, [pc, #600]	; (8006554 <UART_SetConfig+0x6a8>)
 80062fc:	0052      	lsls	r2, r2, #1
 80062fe:	5ad3      	ldrh	r3, [r2, r3]
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	69b8      	ldr	r0, [r7, #24]
 800630c:	69f9      	ldr	r1, [r7, #28]
 800630e:	f7fa f8c9 	bl	80004a4 <__aeabi_uldivmod>
 8006312:	0002      	movs	r2, r0
 8006314:	000b      	movs	r3, r1
 8006316:	0e11      	lsrs	r1, r2, #24
 8006318:	021d      	lsls	r5, r3, #8
 800631a:	430d      	orrs	r5, r1
 800631c:	0214      	lsls	r4, r2, #8
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	1900      	adds	r0, r0, r4
 8006330:	4169      	adcs	r1, r5
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	2300      	movs	r3, #0
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f7fa f8b0 	bl	80004a4 <__aeabi_uldivmod>
 8006344:	0002      	movs	r2, r0
 8006346:	000b      	movs	r3, r1
 8006348:	0013      	movs	r3, r2
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	23c0      	movs	r3, #192	; 0xc0
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	429a      	cmp	r2, r3
 8006354:	d309      	bcc.n	800636a <UART_SetConfig+0x4be>
 8006356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	035b      	lsls	r3, r3, #13
 800635c:	429a      	cmp	r2, r3
 800635e:	d204      	bcs.n	800636a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	60da      	str	r2, [r3, #12]
 8006368:	e006      	b.n	8006378 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800636a:	231a      	movs	r3, #26
 800636c:	2220      	movs	r2, #32
 800636e:	189b      	adds	r3, r3, r2
 8006370:	19db      	adds	r3, r3, r7
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006376:	e0d0      	b.n	800651a <UART_SetConfig+0x66e>
 8006378:	e0cf      	b.n	800651a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	429a      	cmp	r2, r3
 8006384:	d000      	beq.n	8006388 <UART_SetConfig+0x4dc>
 8006386:	e070      	b.n	800646a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006388:	231b      	movs	r3, #27
 800638a:	2220      	movs	r2, #32
 800638c:	189b      	adds	r3, r3, r2
 800638e:	19db      	adds	r3, r3, r7
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b08      	cmp	r3, #8
 8006394:	d015      	beq.n	80063c2 <UART_SetConfig+0x516>
 8006396:	dc18      	bgt.n	80063ca <UART_SetConfig+0x51e>
 8006398:	2b04      	cmp	r3, #4
 800639a:	d00d      	beq.n	80063b8 <UART_SetConfig+0x50c>
 800639c:	dc15      	bgt.n	80063ca <UART_SetConfig+0x51e>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <UART_SetConfig+0x4fc>
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d005      	beq.n	80063b2 <UART_SetConfig+0x506>
 80063a6:	e010      	b.n	80063ca <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe f85a 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80063ac:	0003      	movs	r3, r0
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063b0:	e014      	b.n	80063dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b2:	4b67      	ldr	r3, [pc, #412]	; (8006550 <UART_SetConfig+0x6a4>)
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063b6:	e011      	b.n	80063dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b8:	f7fd ffc6 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 80063bc:	0003      	movs	r3, r0
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063c0:	e00c      	b.n	80063dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063c8:	e008      	b.n	80063dc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80063ce:	231a      	movs	r3, #26
 80063d0:	2220      	movs	r2, #32
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	19db      	adds	r3, r3, r7
 80063d6:	2201      	movs	r2, #1
 80063d8:	701a      	strb	r2, [r3, #0]
        break;
 80063da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d100      	bne.n	80063e4 <UART_SetConfig+0x538>
 80063e2:	e09a      	b.n	800651a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <UART_SetConfig+0x6a8>)
 80063ea:	0052      	lsls	r2, r2, #1
 80063ec:	5ad3      	ldrh	r3, [r2, r3]
 80063ee:	0019      	movs	r1, r3
 80063f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063f2:	f7f9 fea3 	bl	800013c <__udivsi3>
 80063f6:	0003      	movs	r3, r0
 80063f8:	005a      	lsls	r2, r3, #1
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	18d2      	adds	r2, r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	0019      	movs	r1, r3
 8006408:	0010      	movs	r0, r2
 800640a:	f7f9 fe97 	bl	800013c <__udivsi3>
 800640e:	0003      	movs	r3, r0
 8006410:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2b0f      	cmp	r3, #15
 8006416:	d921      	bls.n	800645c <UART_SetConfig+0x5b0>
 8006418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	025b      	lsls	r3, r3, #9
 800641e:	429a      	cmp	r2, r3
 8006420:	d21c      	bcs.n	800645c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	b29a      	uxth	r2, r3
 8006426:	200e      	movs	r0, #14
 8006428:	2420      	movs	r4, #32
 800642a:	1903      	adds	r3, r0, r4
 800642c:	19db      	adds	r3, r3, r7
 800642e:	210f      	movs	r1, #15
 8006430:	438a      	bics	r2, r1
 8006432:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	2207      	movs	r2, #7
 800643c:	4013      	ands	r3, r2
 800643e:	b299      	uxth	r1, r3
 8006440:	1903      	adds	r3, r0, r4
 8006442:	19db      	adds	r3, r3, r7
 8006444:	1902      	adds	r2, r0, r4
 8006446:	19d2      	adds	r2, r2, r7
 8006448:	8812      	ldrh	r2, [r2, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	1902      	adds	r2, r0, r4
 8006454:	19d2      	adds	r2, r2, r7
 8006456:	8812      	ldrh	r2, [r2, #0]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e05e      	b.n	800651a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800645c:	231a      	movs	r3, #26
 800645e:	2220      	movs	r2, #32
 8006460:	189b      	adds	r3, r3, r2
 8006462:	19db      	adds	r3, r3, r7
 8006464:	2201      	movs	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e057      	b.n	800651a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800646a:	231b      	movs	r3, #27
 800646c:	2220      	movs	r2, #32
 800646e:	189b      	adds	r3, r3, r2
 8006470:	19db      	adds	r3, r3, r7
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d015      	beq.n	80064a4 <UART_SetConfig+0x5f8>
 8006478:	dc18      	bgt.n	80064ac <UART_SetConfig+0x600>
 800647a:	2b04      	cmp	r3, #4
 800647c:	d00d      	beq.n	800649a <UART_SetConfig+0x5ee>
 800647e:	dc15      	bgt.n	80064ac <UART_SetConfig+0x600>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <UART_SetConfig+0x5de>
 8006484:	2b02      	cmp	r3, #2
 8006486:	d005      	beq.n	8006494 <UART_SetConfig+0x5e8>
 8006488:	e010      	b.n	80064ac <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648a:	f7fd ffe9 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 800648e:	0003      	movs	r3, r0
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006492:	e014      	b.n	80064be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006494:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <UART_SetConfig+0x6a4>)
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006498:	e011      	b.n	80064be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649a:	f7fd ff55 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 800649e:	0003      	movs	r3, r0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064a2:	e00c      	b.n	80064be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064aa:	e008      	b.n	80064be <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80064b0:	231a      	movs	r3, #26
 80064b2:	2220      	movs	r2, #32
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	19db      	adds	r3, r3, r7
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
        break;
 80064bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02a      	beq.n	800651a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c8:	4b22      	ldr	r3, [pc, #136]	; (8006554 <UART_SetConfig+0x6a8>)
 80064ca:	0052      	lsls	r2, r2, #1
 80064cc:	5ad3      	ldrh	r3, [r2, r3]
 80064ce:	0019      	movs	r1, r3
 80064d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064d2:	f7f9 fe33 	bl	800013c <__udivsi3>
 80064d6:	0003      	movs	r3, r0
 80064d8:	001a      	movs	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	18d2      	adds	r2, r2, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	0019      	movs	r1, r3
 80064e8:	0010      	movs	r0, r2
 80064ea:	f7f9 fe27 	bl	800013c <__udivsi3>
 80064ee:	0003      	movs	r3, r0
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d90a      	bls.n	800650e <UART_SetConfig+0x662>
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	025b      	lsls	r3, r3, #9
 80064fe:	429a      	cmp	r2, r3
 8006500:	d205      	bcs.n	800650e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	b29a      	uxth	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e005      	b.n	800651a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800650e:	231a      	movs	r3, #26
 8006510:	2220      	movs	r2, #32
 8006512:	189b      	adds	r3, r3, r2
 8006514:	19db      	adds	r3, r3, r7
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	226a      	movs	r2, #106	; 0x6a
 800651e:	2101      	movs	r1, #1
 8006520:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	2268      	movs	r2, #104	; 0x68
 8006526:	2101      	movs	r1, #1
 8006528:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2200      	movs	r2, #0
 800652e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	2200      	movs	r2, #0
 8006534:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006536:	231a      	movs	r3, #26
 8006538:	2220      	movs	r2, #32
 800653a:	189b      	adds	r3, r3, r2
 800653c:	19db      	adds	r3, r3, r7
 800653e:	781b      	ldrb	r3, [r3, #0]
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b010      	add	sp, #64	; 0x40
 8006546:	bdb0      	pop	{r4, r5, r7, pc}
 8006548:	40008000 	.word	0x40008000
 800654c:	40008400 	.word	0x40008400
 8006550:	00f42400 	.word	0x00f42400
 8006554:	0800bc64 	.word	0x0800bc64

08006558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	2208      	movs	r2, #8
 8006566:	4013      	ands	r3, r2
 8006568:	d00b      	beq.n	8006582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a4a      	ldr	r2, [pc, #296]	; (800669c <UART_AdvFeatureConfig+0x144>)
 8006572:	4013      	ands	r3, r2
 8006574:	0019      	movs	r1, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	2201      	movs	r2, #1
 8006588:	4013      	ands	r3, r2
 800658a:	d00b      	beq.n	80065a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4a43      	ldr	r2, [pc, #268]	; (80066a0 <UART_AdvFeatureConfig+0x148>)
 8006594:	4013      	ands	r3, r2
 8006596:	0019      	movs	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	2202      	movs	r2, #2
 80065aa:	4013      	ands	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <UART_AdvFeatureConfig+0x14c>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	0019      	movs	r1, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	2204      	movs	r2, #4
 80065cc:	4013      	ands	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <UART_AdvFeatureConfig+0x150>)
 80065d8:	4013      	ands	r3, r2
 80065da:	0019      	movs	r1, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	2210      	movs	r2, #16
 80065ee:	4013      	ands	r3, r2
 80065f0:	d00b      	beq.n	800660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <UART_AdvFeatureConfig+0x154>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	0019      	movs	r1, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	2220      	movs	r2, #32
 8006610:	4013      	ands	r3, r2
 8006612:	d00b      	beq.n	800662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <UART_AdvFeatureConfig+0x158>)
 800661c:	4013      	ands	r3, r2
 800661e:	0019      	movs	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	2240      	movs	r2, #64	; 0x40
 8006632:	4013      	ands	r3, r2
 8006634:	d01d      	beq.n	8006672 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <UART_AdvFeatureConfig+0x15c>)
 800663e:	4013      	ands	r3, r2
 8006640:	0019      	movs	r1, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	035b      	lsls	r3, r3, #13
 8006656:	429a      	cmp	r2, r3
 8006658:	d10b      	bne.n	8006672 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <UART_AdvFeatureConfig+0x160>)
 8006662:	4013      	ands	r3, r2
 8006664:	0019      	movs	r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	4013      	ands	r3, r2
 800667a:	d00b      	beq.n	8006694 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4a0e      	ldr	r2, [pc, #56]	; (80066bc <UART_AdvFeatureConfig+0x164>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	ffff7fff 	.word	0xffff7fff
 80066a0:	fffdffff 	.word	0xfffdffff
 80066a4:	fffeffff 	.word	0xfffeffff
 80066a8:	fffbffff 	.word	0xfffbffff
 80066ac:	ffffefff 	.word	0xffffefff
 80066b0:	ffffdfff 	.word	0xffffdfff
 80066b4:	ffefffff 	.word	0xffefffff
 80066b8:	ff9fffff 	.word	0xff9fffff
 80066bc:	fff7ffff 	.word	0xfff7ffff

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b092      	sub	sp, #72	; 0x48
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2290      	movs	r2, #144	; 0x90
 80066cc:	2100      	movs	r1, #0
 80066ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fc feda 	bl	8003488 <HAL_GetTick>
 80066d4:	0003      	movs	r3, r0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2208      	movs	r2, #8
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d12d      	bne.n	8006742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e8:	2280      	movs	r2, #128	; 0x80
 80066ea:	0391      	lsls	r1, r2, #14
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4a47      	ldr	r2, [pc, #284]	; (800680c <UART_CheckIdleState+0x14c>)
 80066f0:	9200      	str	r2, [sp, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f000 f88e 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 80066f8:	1e03      	subs	r3, r0, #0
 80066fa:	d022      	beq.n	8006742 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006704:	63bb      	str	r3, [r7, #56]	; 0x38
 8006706:	2301      	movs	r3, #1
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2180      	movs	r1, #128	; 0x80
 800671e:	438a      	bics	r2, r1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	f383 8810 	msr	PRIMASK, r3
}
 800672c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2288      	movs	r2, #136	; 0x88
 8006732:	2120      	movs	r1, #32
 8006734:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2284      	movs	r2, #132	; 0x84
 800673a:	2100      	movs	r1, #0
 800673c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e060      	b.n	8006804 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2204      	movs	r2, #4
 800674a:	4013      	ands	r3, r2
 800674c:	2b04      	cmp	r3, #4
 800674e:	d146      	bne.n	80067de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	03d1      	lsls	r1, r2, #15
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4a2c      	ldr	r2, [pc, #176]	; (800680c <UART_CheckIdleState+0x14c>)
 800675a:	9200      	str	r2, [sp, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	f000 f859 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8006762:	1e03      	subs	r3, r0, #0
 8006764:	d03b      	beq.n	80067de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006766:	f3ef 8310 	mrs	r3, PRIMASK
 800676a:	60fb      	str	r3, [r7, #12]
  return(result);
 800676c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
 8006770:	2301      	movs	r3, #1
 8006772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f383 8810 	msr	PRIMASK, r3
}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4922      	ldr	r1, [pc, #136]	; (8006810 <UART_CheckIdleState+0x150>)
 8006788:	400a      	ands	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f383 8810 	msr	PRIMASK, r3
}
 8006796:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006798:	f3ef 8310 	mrs	r3, PRIMASK
 800679c:	61bb      	str	r3, [r7, #24]
  return(result);
 800679e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
 80067a2:	2301      	movs	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f383 8810 	msr	PRIMASK, r3
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2101      	movs	r1, #1
 80067ba:	438a      	bics	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	f383 8810 	msr	PRIMASK, r3
}
 80067c8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	228c      	movs	r2, #140	; 0x8c
 80067ce:	2120      	movs	r1, #32
 80067d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2284      	movs	r2, #132	; 0x84
 80067d6:	2100      	movs	r1, #0
 80067d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e012      	b.n	8006804 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2288      	movs	r2, #136	; 0x88
 80067e2:	2120      	movs	r1, #32
 80067e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	228c      	movs	r2, #140	; 0x8c
 80067ea:	2120      	movs	r1, #32
 80067ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2284      	movs	r2, #132	; 0x84
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b010      	add	sp, #64	; 0x40
 800680a:	bd80      	pop	{r7, pc}
 800680c:	01ffffff 	.word	0x01ffffff
 8006810:	fffffedf 	.word	0xfffffedf

08006814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	e051      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	3301      	adds	r3, #1
 800682a:	d04e      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682c:	f7fc fe2c 	bl	8003488 <HAL_GetTick>
 8006830:	0002      	movs	r2, r0
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	429a      	cmp	r2, r3
 800683a:	d302      	bcc.n	8006842 <UART_WaitOnFlagUntilTimeout+0x2e>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e051      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2204      	movs	r2, #4
 800684e:	4013      	ands	r3, r2
 8006850:	d03b      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b80      	cmp	r3, #128	; 0x80
 8006856:	d038      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d035      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2208      	movs	r2, #8
 8006866:	4013      	ands	r3, r2
 8006868:	2b08      	cmp	r3, #8
 800686a:	d111      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 f83c 	bl	80068f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2290      	movs	r2, #144	; 0x90
 8006880:	2108      	movs	r1, #8
 8006882:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2284      	movs	r2, #132	; 0x84
 8006888:	2100      	movs	r1, #0
 800688a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e02c      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	2380      	movs	r3, #128	; 0x80
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	401a      	ands	r2, r3
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d112      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	0112      	lsls	r2, r2, #4
 80068ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 f81f 	bl	80068f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2290      	movs	r2, #144	; 0x90
 80068ba:	2120      	movs	r1, #32
 80068bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2284      	movs	r2, #132	; 0x84
 80068c2:	2100      	movs	r1, #0
 80068c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	4013      	ands	r3, r2
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	425a      	negs	r2, r3
 80068da:	4153      	adcs	r3, r2
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	001a      	movs	r2, r3
 80068e0:	1dfb      	adds	r3, r7, #7
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d09e      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b004      	add	sp, #16
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08e      	sub	sp, #56	; 0x38
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006900:	617b      	str	r3, [r7, #20]
  return(result);
 8006902:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
 8006906:	2301      	movs	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f383 8810 	msr	PRIMASK, r3
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4926      	ldr	r1, [pc, #152]	; (80069b8 <UART_EndRxTransfer+0xc4>)
 800691e:	400a      	ands	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f383 8810 	msr	PRIMASK, r3
}
 800692c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800692e:	f3ef 8310 	mrs	r3, PRIMASK
 8006932:	623b      	str	r3, [r7, #32]
  return(result);
 8006934:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
 8006938:	2301      	movs	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	f383 8810 	msr	PRIMASK, r3
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	491b      	ldr	r1, [pc, #108]	; (80069bc <UART_EndRxTransfer+0xc8>)
 8006950:	400a      	ands	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	f383 8810 	msr	PRIMASK, r3
}
 800695e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d118      	bne.n	800699a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006968:	f3ef 8310 	mrs	r3, PRIMASK
 800696c:	60bb      	str	r3, [r7, #8]
  return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006972:	2301      	movs	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f383 8810 	msr	PRIMASK, r3
}
 800697c:	46c0      	nop			; (mov r8, r8)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2110      	movs	r1, #16
 800698a:	438a      	bics	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f383 8810 	msr	PRIMASK, r3
}
 8006998:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	228c      	movs	r2, #140	; 0x8c
 800699e:	2120      	movs	r1, #32
 80069a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b00e      	add	sp, #56	; 0x38
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	fffffedf 	.word	0xfffffedf
 80069bc:	effffffe 	.word	0xeffffffe

080069c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2284      	movs	r2, #132	; 0x84
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e027      	b.n	8006a26 <HAL_UARTEx_DisableFifoMode+0x66>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2284      	movs	r2, #132	; 0x84
 80069da:	2101      	movs	r1, #1
 80069dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2288      	movs	r2, #136	; 0x88
 80069e2:	2124      	movs	r1, #36	; 0x24
 80069e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	438a      	bics	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2288      	movs	r2, #136	; 0x88
 8006a18:	2120      	movs	r1, #32
 8006a1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2284      	movs	r2, #132	; 0x84
 8006a20:	2100      	movs	r1, #0
 8006a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b004      	add	sp, #16
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	dfffffff 	.word	0xdfffffff

08006a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2284      	movs	r2, #132	; 0x84
 8006a42:	5c9b      	ldrb	r3, [r3, r2]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e02e      	b.n	8006aaa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2284      	movs	r2, #132	; 0x84
 8006a50:	2101      	movs	r1, #1
 8006a52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2288      	movs	r2, #136	; 0x88
 8006a58:	2124      	movs	r1, #36	; 0x24
 8006a5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	438a      	bics	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	08d9      	lsrs	r1, r3, #3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 f854 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2288      	movs	r2, #136	; 0x88
 8006a9c:	2120      	movs	r1, #32
 8006a9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2284      	movs	r2, #132	; 0x84
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b004      	add	sp, #16
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2284      	movs	r2, #132	; 0x84
 8006ac2:	5c9b      	ldrb	r3, [r3, r2]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e02f      	b.n	8006b2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2284      	movs	r2, #132	; 0x84
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2288      	movs	r2, #136	; 0x88
 8006ad8:	2124      	movs	r1, #36	; 0x24
 8006ada:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2101      	movs	r1, #1
 8006af0:	438a      	bics	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f813 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2288      	movs	r2, #136	; 0x88
 8006b1e:	2120      	movs	r1, #32
 8006b20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2284      	movs	r2, #132	; 0x84
 8006b26:	2100      	movs	r1, #0
 8006b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b004      	add	sp, #16
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	f1ffffff 	.word	0xf1ffffff

08006b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	226a      	movs	r2, #106	; 0x6a
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2268      	movs	r2, #104	; 0x68
 8006b54:	2101      	movs	r1, #1
 8006b56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b58:	e043      	b.n	8006be2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b5a:	260f      	movs	r6, #15
 8006b5c:	19bb      	adds	r3, r7, r6
 8006b5e:	2208      	movs	r2, #8
 8006b60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b62:	200e      	movs	r0, #14
 8006b64:	183b      	adds	r3, r7, r0
 8006b66:	2208      	movs	r2, #8
 8006b68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0e5b      	lsrs	r3, r3, #25
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	240d      	movs	r4, #13
 8006b76:	193b      	adds	r3, r7, r4
 8006b78:	2107      	movs	r1, #7
 8006b7a:	400a      	ands	r2, r1
 8006b7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	0f5b      	lsrs	r3, r3, #29
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	250c      	movs	r5, #12
 8006b8a:	197b      	adds	r3, r7, r5
 8006b8c:	2107      	movs	r1, #7
 8006b8e:	400a      	ands	r2, r1
 8006b90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b92:	183b      	adds	r3, r7, r0
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	197a      	adds	r2, r7, r5
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	4914      	ldr	r1, [pc, #80]	; (8006bec <UARTEx_SetNbDataToProcess+0xb4>)
 8006b9c:	5c8a      	ldrb	r2, [r1, r2]
 8006b9e:	435a      	muls	r2, r3
 8006ba0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ba2:	197b      	adds	r3, r7, r5
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ba8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006baa:	0019      	movs	r1, r3
 8006bac:	f7f9 fb50 	bl	8000250 <__divsi3>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	b299      	uxth	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	226a      	movs	r2, #106	; 0x6a
 8006bb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bba:	19bb      	adds	r3, r7, r6
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	193a      	adds	r2, r7, r4
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	490a      	ldr	r1, [pc, #40]	; (8006bec <UARTEx_SetNbDataToProcess+0xb4>)
 8006bc4:	5c8a      	ldrb	r2, [r1, r2]
 8006bc6:	435a      	muls	r2, r3
 8006bc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bca:	193b      	adds	r3, r7, r4
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006bd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	f7f9 fb3c 	bl	8000250 <__divsi3>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2268      	movs	r2, #104	; 0x68
 8006be0:	5299      	strh	r1, [r3, r2]
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b005      	add	sp, #20
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	0800bc7c 	.word	0x0800bc7c
 8006bf0:	0800bc84 	.word	0x0800bc84

08006bf4 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0c6      	sub	sp, #280	; 0x118
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8006bfc:	2318      	movs	r3, #24
 8006bfe:	33ff      	adds	r3, #255	; 0xff
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8006c06:	238b      	movs	r3, #139	; 0x8b
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8006c10:	2316      	movs	r3, #22
 8006c12:	33ff      	adds	r3, #255	; 0xff
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8006c1a:	238a      	movs	r3, #138	; 0x8a
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006c24:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <my_gnss_acq_coordinates+0x74>)
 8006c26:	228c      	movs	r2, #140	; 0x8c
 8006c28:	0052      	lsls	r2, r2, #1
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	19db      	adds	r3, r3, r7
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	3304      	adds	r3, #4
 8006c34:	22f6      	movs	r2, #246	; 0xf6
 8006c36:	2100      	movs	r1, #0
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 fbcf 	bl	80073dc <memset>

	char* 		nmea_gsv_label = "GSV" ;
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <my_gnss_acq_coordinates+0x78>)
 8006c40:	2288      	movs	r2, #136	; 0x88
 8006c42:	0052      	lsls	r2, r2, #1
 8006c44:	18ba      	adds	r2, r7, r2
 8006c46:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <my_gnss_acq_coordinates+0x7c>)
 8006c4a:	2286      	movs	r2, #134	; 0x86
 8006c4c:	0052      	lsls	r2, r2, #1
 8006c4e:	18ba      	adds	r2, r7, r2
 8006c50:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <my_gnss_acq_coordinates+0x80>)
 8006c54:	2284      	movs	r2, #132	; 0x84
 8006c56:	0052      	lsls	r2, r2, #1
 8006c58:	18ba      	adds	r2, r7, r2
 8006c5a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	return r ;
*/
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b046      	add	sp, #280	; 0x118
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	fffffef4 	.word	0xfffffef4
 8006c6c:	0800bb28 	.word	0x0800bb28
 8006c70:	0800bb2c 	.word	0x0800bb2c
 8006c74:	0800bb34 	.word	0x0800bb34

08006c78 <my_gnss_log>:
	}
	return r ;
}

void my_gnss_log ()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	uint8_t rx_byte = 0 ;
 8006c7e:	1dfb      	adds	r3, r7, #7
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
	while ( tim_seconds < utc_acq_ths  )
 8006c84:	e004      	b.n	8006c90 <my_gnss_log+0x18>
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8006c86:	1dfb      	adds	r3, r7, #7
 8006c88:	2101      	movs	r1, #1
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7fb ffe2 	bl	8002c54 <my_gnss_receive_byte>
	while ( tim_seconds < utc_acq_ths  )
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <my_gnss_log+0x30>)
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <my_gnss_log+0x34>)
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d3f4      	bcc.n	8006c86 <my_gnss_log+0xe>
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b002      	add	sp, #8
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	20000a38 	.word	0x20000a38
 8006cac:	2000000e 	.word	0x2000000e

08006cb0 <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b08d      	sub	sp, #52	; 0x34
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8006cb8:	2508      	movs	r5, #8
 8006cba:	1979      	adds	r1, r7, r5
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <my_rtc_get_dt_s+0x7c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fd ff69 	bl	8004b98 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8006cc6:	241c      	movs	r4, #28
 8006cc8:	1939      	adds	r1, r7, r4
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <my_rtc_get_dt_s+0x7c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f7fe f850 	bl	8004d74 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8006cd4:	0021      	movs	r1, r4
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	78db      	ldrb	r3, [r3, #3]
 8006cda:	22fa      	movs	r2, #250	; 0xfa
 8006cdc:	00d2      	lsls	r2, r2, #3
 8006cde:	189a      	adds	r2, r3, r2
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	469c      	mov	ip, r3
 8006ce6:	187b      	adds	r3, r7, r1
 8006ce8:	789b      	ldrb	r3, [r3, #2]
 8006cea:	001c      	movs	r4, r3
 8006cec:	0028      	movs	r0, r5
 8006cee:	183b      	adds	r3, r7, r0
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	001d      	movs	r5, r3
 8006cf4:	183b      	adds	r3, r7, r0
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	001e      	movs	r6, r3
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	789b      	ldrb	r3, [r3, #2]
 8006cfe:	490c      	ldr	r1, [pc, #48]	; (8006d30 <my_rtc_get_dt_s+0x80>)
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	9602      	str	r6, [sp, #8]
 8006d06:	9501      	str	r5, [sp, #4]
 8006d08:	9400      	str	r4, [sp, #0]
 8006d0a:	4663      	mov	r3, ip
 8006d0c:	f000 fafa 	bl	8007304 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8006d10:	211c      	movs	r1, #28
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	22fa      	movs	r2, #250	; 0xfa
 8006d1a:	00d2      	lsls	r2, r2, #3
 8006d1c:	4694      	mov	ip, r2
 8006d1e:	4463      	add	r3, ip
 8006d20:	b29b      	uxth	r3, r3
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b009      	add	sp, #36	; 0x24
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	200006dc 	.word	0x200006dc
 8006d30:	0800bb78 	.word	0x0800bb78

08006d34 <_malloc_r>:
 8006d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d36:	000d      	movs	r5, r1
 8006d38:	b087      	sub	sp, #28
 8006d3a:	350b      	adds	r5, #11
 8006d3c:	9001      	str	r0, [sp, #4]
 8006d3e:	2d16      	cmp	r5, #22
 8006d40:	d908      	bls.n	8006d54 <_malloc_r+0x20>
 8006d42:	2207      	movs	r2, #7
 8006d44:	4395      	bics	r5, r2
 8006d46:	d506      	bpl.n	8006d56 <_malloc_r+0x22>
 8006d48:	230c      	movs	r3, #12
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	2000      	movs	r0, #0
 8006d50:	b007      	add	sp, #28
 8006d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d54:	2510      	movs	r5, #16
 8006d56:	42a9      	cmp	r1, r5
 8006d58:	d8f6      	bhi.n	8006d48 <_malloc_r+0x14>
 8006d5a:	9801      	ldr	r0, [sp, #4]
 8006d5c:	f000 f9fe 	bl	800715c <__malloc_lock>
 8006d60:	23fc      	movs	r3, #252	; 0xfc
 8006d62:	4ebe      	ldr	r6, [pc, #760]	; (800705c <_malloc_r+0x328>)
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	429d      	cmp	r5, r3
 8006d68:	d219      	bcs.n	8006d9e <_malloc_r+0x6a>
 8006d6a:	002a      	movs	r2, r5
 8006d6c:	3208      	adds	r2, #8
 8006d6e:	18b2      	adds	r2, r6, r2
 8006d70:	0011      	movs	r1, r2
 8006d72:	6854      	ldr	r4, [r2, #4]
 8006d74:	3908      	subs	r1, #8
 8006d76:	08eb      	lsrs	r3, r5, #3
 8006d78:	428c      	cmp	r4, r1
 8006d7a:	d103      	bne.n	8006d84 <_malloc_r+0x50>
 8006d7c:	68d4      	ldr	r4, [r2, #12]
 8006d7e:	3302      	adds	r3, #2
 8006d80:	42a2      	cmp	r2, r4
 8006d82:	d022      	beq.n	8006dca <_malloc_r+0x96>
 8006d84:	2203      	movs	r2, #3
 8006d86:	6863      	ldr	r3, [r4, #4]
 8006d88:	68a1      	ldr	r1, [r4, #8]
 8006d8a:	4393      	bics	r3, r2
 8006d8c:	68e2      	ldr	r2, [r4, #12]
 8006d8e:	18e3      	adds	r3, r4, r3
 8006d90:	60ca      	str	r2, [r1, #12]
 8006d92:	6091      	str	r1, [r2, #8]
 8006d94:	2201      	movs	r2, #1
 8006d96:	6859      	ldr	r1, [r3, #4]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]
 8006d9c:	e02a      	b.n	8006df4 <_malloc_r+0xc0>
 8006d9e:	233f      	movs	r3, #63	; 0x3f
 8006da0:	0a6a      	lsrs	r2, r5, #9
 8006da2:	d003      	beq.n	8006dac <_malloc_r+0x78>
 8006da4:	2a04      	cmp	r2, #4
 8006da6:	d82b      	bhi.n	8006e00 <_malloc_r+0xcc>
 8006da8:	09ab      	lsrs	r3, r5, #6
 8006daa:	3338      	adds	r3, #56	; 0x38
 8006dac:	2203      	movs	r2, #3
 8006dae:	4694      	mov	ip, r2
 8006db0:	00d9      	lsls	r1, r3, #3
 8006db2:	1989      	adds	r1, r1, r6
 8006db4:	68cc      	ldr	r4, [r1, #12]
 8006db6:	428c      	cmp	r4, r1
 8006db8:	d006      	beq.n	8006dc8 <_malloc_r+0x94>
 8006dba:	4660      	mov	r0, ip
 8006dbc:	6862      	ldr	r2, [r4, #4]
 8006dbe:	4382      	bics	r2, r0
 8006dc0:	1b57      	subs	r7, r2, r5
 8006dc2:	2f0f      	cmp	r7, #15
 8006dc4:	dd34      	ble.n	8006e30 <_malloc_r+0xfc>
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	3301      	adds	r3, #1
 8006dca:	6934      	ldr	r4, [r6, #16]
 8006dcc:	49a4      	ldr	r1, [pc, #656]	; (8007060 <_malloc_r+0x32c>)
 8006dce:	428c      	cmp	r4, r1
 8006dd0:	d055      	beq.n	8006e7e <_malloc_r+0x14a>
 8006dd2:	2003      	movs	r0, #3
 8006dd4:	6862      	ldr	r2, [r4, #4]
 8006dd6:	4382      	bics	r2, r0
 8006dd8:	1b50      	subs	r0, r2, r5
 8006dda:	280f      	cmp	r0, #15
 8006ddc:	dd36      	ble.n	8006e4c <_malloc_r+0x118>
 8006dde:	2301      	movs	r3, #1
 8006de0:	1967      	adds	r7, r4, r5
 8006de2:	431d      	orrs	r5, r3
 8006de4:	4303      	orrs	r3, r0
 8006de6:	6065      	str	r5, [r4, #4]
 8006de8:	6177      	str	r7, [r6, #20]
 8006dea:	6137      	str	r7, [r6, #16]
 8006dec:	60f9      	str	r1, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	50a0      	str	r0, [r4, r2]
 8006df4:	9801      	ldr	r0, [sp, #4]
 8006df6:	f000 f9b9 	bl	800716c <__malloc_unlock>
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	3008      	adds	r0, #8
 8006dfe:	e7a7      	b.n	8006d50 <_malloc_r+0x1c>
 8006e00:	2a14      	cmp	r2, #20
 8006e02:	d802      	bhi.n	8006e0a <_malloc_r+0xd6>
 8006e04:	0013      	movs	r3, r2
 8006e06:	335b      	adds	r3, #91	; 0x5b
 8006e08:	e7d0      	b.n	8006dac <_malloc_r+0x78>
 8006e0a:	2a54      	cmp	r2, #84	; 0x54
 8006e0c:	d802      	bhi.n	8006e14 <_malloc_r+0xe0>
 8006e0e:	0b2b      	lsrs	r3, r5, #12
 8006e10:	336e      	adds	r3, #110	; 0x6e
 8006e12:	e7cb      	b.n	8006dac <_malloc_r+0x78>
 8006e14:	23aa      	movs	r3, #170	; 0xaa
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d802      	bhi.n	8006e22 <_malloc_r+0xee>
 8006e1c:	0beb      	lsrs	r3, r5, #15
 8006e1e:	3377      	adds	r3, #119	; 0x77
 8006e20:	e7c4      	b.n	8006dac <_malloc_r+0x78>
 8006e22:	4990      	ldr	r1, [pc, #576]	; (8007064 <_malloc_r+0x330>)
 8006e24:	237e      	movs	r3, #126	; 0x7e
 8006e26:	428a      	cmp	r2, r1
 8006e28:	d8c0      	bhi.n	8006dac <_malloc_r+0x78>
 8006e2a:	0cab      	lsrs	r3, r5, #18
 8006e2c:	337c      	adds	r3, #124	; 0x7c
 8006e2e:	e7bd      	b.n	8006dac <_malloc_r+0x78>
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	db08      	blt.n	8006e48 <_malloc_r+0x114>
 8006e36:	68a3      	ldr	r3, [r4, #8]
 8006e38:	60d8      	str	r0, [r3, #12]
 8006e3a:	6083      	str	r3, [r0, #8]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	18a2      	adds	r2, r4, r2
 8006e40:	6851      	ldr	r1, [r2, #4]
 8006e42:	430b      	orrs	r3, r1
 8006e44:	6053      	str	r3, [r2, #4]
 8006e46:	e7d5      	b.n	8006df4 <_malloc_r+0xc0>
 8006e48:	0004      	movs	r4, r0
 8006e4a:	e7b4      	b.n	8006db6 <_malloc_r+0x82>
 8006e4c:	6171      	str	r1, [r6, #20]
 8006e4e:	6131      	str	r1, [r6, #16]
 8006e50:	2800      	cmp	r0, #0
 8006e52:	daf3      	bge.n	8006e3c <_malloc_r+0x108>
 8006e54:	6871      	ldr	r1, [r6, #4]
 8006e56:	468c      	mov	ip, r1
 8006e58:	2180      	movs	r1, #128	; 0x80
 8006e5a:	0089      	lsls	r1, r1, #2
 8006e5c:	428a      	cmp	r2, r1
 8006e5e:	d300      	bcc.n	8006e62 <_malloc_r+0x12e>
 8006e60:	e08c      	b.n	8006f7c <_malloc_r+0x248>
 8006e62:	08d1      	lsrs	r1, r2, #3
 8006e64:	0950      	lsrs	r0, r2, #5
 8006e66:	2201      	movs	r2, #1
 8006e68:	4082      	lsls	r2, r0
 8006e6a:	4660      	mov	r0, ip
 8006e6c:	4302      	orrs	r2, r0
 8006e6e:	6072      	str	r2, [r6, #4]
 8006e70:	00ca      	lsls	r2, r1, #3
 8006e72:	1992      	adds	r2, r2, r6
 8006e74:	6891      	ldr	r1, [r2, #8]
 8006e76:	60e2      	str	r2, [r4, #12]
 8006e78:	60a1      	str	r1, [r4, #8]
 8006e7a:	6094      	str	r4, [r2, #8]
 8006e7c:	60cc      	str	r4, [r1, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4876      	ldr	r0, [pc, #472]	; (800705c <_malloc_r+0x328>)
 8006e82:	1099      	asrs	r1, r3, #2
 8006e84:	408a      	lsls	r2, r1
 8006e86:	6841      	ldr	r1, [r0, #4]
 8006e88:	4291      	cmp	r1, r2
 8006e8a:	d328      	bcc.n	8006ede <_malloc_r+0x1aa>
 8006e8c:	420a      	tst	r2, r1
 8006e8e:	d105      	bne.n	8006e9c <_malloc_r+0x168>
 8006e90:	2403      	movs	r4, #3
 8006e92:	43a3      	bics	r3, r4
 8006e94:	0052      	lsls	r2, r2, #1
 8006e96:	3304      	adds	r3, #4
 8006e98:	420a      	tst	r2, r1
 8006e9a:	d0fb      	beq.n	8006e94 <_malloc_r+0x160>
 8006e9c:	496f      	ldr	r1, [pc, #444]	; (800705c <_malloc_r+0x328>)
 8006e9e:	9104      	str	r1, [sp, #16]
 8006ea0:	00d9      	lsls	r1, r3, #3
 8006ea2:	1841      	adds	r1, r0, r1
 8006ea4:	468c      	mov	ip, r1
 8006ea6:	000f      	movs	r7, r1
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	68fc      	ldr	r4, [r7, #12]
 8006eac:	42bc      	cmp	r4, r7
 8006eae:	d000      	beq.n	8006eb2 <_malloc_r+0x17e>
 8006eb0:	e09b      	b.n	8006fea <_malloc_r+0x2b6>
 8006eb2:	2403      	movs	r4, #3
 8006eb4:	9902      	ldr	r1, [sp, #8]
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	3101      	adds	r1, #1
 8006eba:	9102      	str	r1, [sp, #8]
 8006ebc:	4221      	tst	r1, r4
 8006ebe:	d1f4      	bne.n	8006eaa <_malloc_r+0x176>
 8006ec0:	2103      	movs	r1, #3
 8006ec2:	420b      	tst	r3, r1
 8006ec4:	d000      	beq.n	8006ec8 <_malloc_r+0x194>
 8006ec6:	e0b7      	b.n	8007038 <_malloc_r+0x304>
 8006ec8:	6843      	ldr	r3, [r0, #4]
 8006eca:	4393      	bics	r3, r2
 8006ecc:	6043      	str	r3, [r0, #4]
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	0052      	lsls	r2, r2, #1
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	4291      	cmp	r1, r2
 8006ed6:	d302      	bcc.n	8006ede <_malloc_r+0x1aa>
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d000      	beq.n	8006ede <_malloc_r+0x1aa>
 8006edc:	e0bb      	b.n	8007056 <_malloc_r+0x322>
 8006ede:	2203      	movs	r2, #3
 8006ee0:	6883      	ldr	r3, [r0, #8]
 8006ee2:	9302      	str	r3, [sp, #8]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4393      	bics	r3, r2
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d303      	bcc.n	8006ef6 <_malloc_r+0x1c2>
 8006eee:	1b59      	subs	r1, r3, r5
 8006ef0:	290f      	cmp	r1, #15
 8006ef2:	dd00      	ble.n	8006ef6 <_malloc_r+0x1c2>
 8006ef4:	e123      	b.n	800713e <_malloc_r+0x40a>
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	9a03      	ldr	r2, [sp, #12]
 8006efa:	2008      	movs	r0, #8
 8006efc:	189e      	adds	r6, r3, r2
 8006efe:	4b5a      	ldr	r3, [pc, #360]	; (8007068 <_malloc_r+0x334>)
 8006f00:	681f      	ldr	r7, [r3, #0]
 8006f02:	f000 fb1d 	bl	8007540 <sysconf>
 8006f06:	4b59      	ldr	r3, [pc, #356]	; (800706c <_malloc_r+0x338>)
 8006f08:	3710      	adds	r7, #16
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	197f      	adds	r7, r7, r5
 8006f0e:	9004      	str	r0, [sp, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	d003      	beq.n	8006f1c <_malloc_r+0x1e8>
 8006f14:	1e7b      	subs	r3, r7, #1
 8006f16:	181b      	adds	r3, r3, r0
 8006f18:	4247      	negs	r7, r0
 8006f1a:	401f      	ands	r7, r3
 8006f1c:	0039      	movs	r1, r7
 8006f1e:	9801      	ldr	r0, [sp, #4]
 8006f20:	f000 faba 	bl	8007498 <_sbrk_r>
 8006f24:	0004      	movs	r4, r0
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d100      	bne.n	8006f2c <_malloc_r+0x1f8>
 8006f2a:	e0de      	b.n	80070ea <_malloc_r+0x3b6>
 8006f2c:	4286      	cmp	r6, r0
 8006f2e:	d904      	bls.n	8006f3a <_malloc_r+0x206>
 8006f30:	4b4a      	ldr	r3, [pc, #296]	; (800705c <_malloc_r+0x328>)
 8006f32:	9a02      	ldr	r2, [sp, #8]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d000      	beq.n	8006f3a <_malloc_r+0x206>
 8006f38:	e0d7      	b.n	80070ea <_malloc_r+0x3b6>
 8006f3a:	4a4d      	ldr	r2, [pc, #308]	; (8007070 <_malloc_r+0x33c>)
 8006f3c:	6813      	ldr	r3, [r2, #0]
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	9a04      	ldr	r2, [sp, #16]
 8006f44:	3a01      	subs	r2, #1
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d000      	beq.n	8006f4c <_malloc_r+0x218>
 8006f4a:	e097      	b.n	800707c <_malloc_r+0x348>
 8006f4c:	4216      	tst	r6, r2
 8006f4e:	d000      	beq.n	8006f52 <_malloc_r+0x21e>
 8006f50:	e094      	b.n	800707c <_malloc_r+0x348>
 8006f52:	4b42      	ldr	r3, [pc, #264]	; (800705c <_malloc_r+0x328>)
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	19df      	adds	r7, r3, r7
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	433b      	orrs	r3, r7
 8006f5e:	6053      	str	r3, [r2, #4]
 8006f60:	4b43      	ldr	r3, [pc, #268]	; (8007070 <_malloc_r+0x33c>)
 8006f62:	4a44      	ldr	r2, [pc, #272]	; (8007074 <_malloc_r+0x340>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6811      	ldr	r1, [r2, #0]
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	d900      	bls.n	8006f6e <_malloc_r+0x23a>
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4a42      	ldr	r2, [pc, #264]	; (8007078 <_malloc_r+0x344>)
 8006f70:	6811      	ldr	r1, [r2, #0]
 8006f72:	428b      	cmp	r3, r1
 8006f74:	d800      	bhi.n	8006f78 <_malloc_r+0x244>
 8006f76:	e0b8      	b.n	80070ea <_malloc_r+0x3b6>
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e0b6      	b.n	80070ea <_malloc_r+0x3b6>
 8006f7c:	0a50      	lsrs	r0, r2, #9
 8006f7e:	2804      	cmp	r0, #4
 8006f80:	d811      	bhi.n	8006fa6 <_malloc_r+0x272>
 8006f82:	0991      	lsrs	r1, r2, #6
 8006f84:	3138      	adds	r1, #56	; 0x38
 8006f86:	00cf      	lsls	r7, r1, #3
 8006f88:	19bf      	adds	r7, r7, r6
 8006f8a:	68b8      	ldr	r0, [r7, #8]
 8006f8c:	4287      	cmp	r7, r0
 8006f8e:	d125      	bne.n	8006fdc <_malloc_r+0x2a8>
 8006f90:	2201      	movs	r2, #1
 8006f92:	1089      	asrs	r1, r1, #2
 8006f94:	408a      	lsls	r2, r1
 8006f96:	4661      	mov	r1, ip
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	6072      	str	r2, [r6, #4]
 8006f9c:	60e7      	str	r7, [r4, #12]
 8006f9e:	60a0      	str	r0, [r4, #8]
 8006fa0:	60bc      	str	r4, [r7, #8]
 8006fa2:	60c4      	str	r4, [r0, #12]
 8006fa4:	e76b      	b.n	8006e7e <_malloc_r+0x14a>
 8006fa6:	2814      	cmp	r0, #20
 8006fa8:	d802      	bhi.n	8006fb0 <_malloc_r+0x27c>
 8006faa:	0001      	movs	r1, r0
 8006fac:	315b      	adds	r1, #91	; 0x5b
 8006fae:	e7ea      	b.n	8006f86 <_malloc_r+0x252>
 8006fb0:	2854      	cmp	r0, #84	; 0x54
 8006fb2:	d802      	bhi.n	8006fba <_malloc_r+0x286>
 8006fb4:	0b11      	lsrs	r1, r2, #12
 8006fb6:	316e      	adds	r1, #110	; 0x6e
 8006fb8:	e7e5      	b.n	8006f86 <_malloc_r+0x252>
 8006fba:	21aa      	movs	r1, #170	; 0xaa
 8006fbc:	0049      	lsls	r1, r1, #1
 8006fbe:	4288      	cmp	r0, r1
 8006fc0:	d802      	bhi.n	8006fc8 <_malloc_r+0x294>
 8006fc2:	0bd1      	lsrs	r1, r2, #15
 8006fc4:	3177      	adds	r1, #119	; 0x77
 8006fc6:	e7de      	b.n	8006f86 <_malloc_r+0x252>
 8006fc8:	4f26      	ldr	r7, [pc, #152]	; (8007064 <_malloc_r+0x330>)
 8006fca:	217e      	movs	r1, #126	; 0x7e
 8006fcc:	42b8      	cmp	r0, r7
 8006fce:	d8da      	bhi.n	8006f86 <_malloc_r+0x252>
 8006fd0:	0c91      	lsrs	r1, r2, #18
 8006fd2:	317c      	adds	r1, #124	; 0x7c
 8006fd4:	e7d7      	b.n	8006f86 <_malloc_r+0x252>
 8006fd6:	6880      	ldr	r0, [r0, #8]
 8006fd8:	4287      	cmp	r7, r0
 8006fda:	d004      	beq.n	8006fe6 <_malloc_r+0x2b2>
 8006fdc:	2603      	movs	r6, #3
 8006fde:	6841      	ldr	r1, [r0, #4]
 8006fe0:	43b1      	bics	r1, r6
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d8f7      	bhi.n	8006fd6 <_malloc_r+0x2a2>
 8006fe6:	68c7      	ldr	r7, [r0, #12]
 8006fe8:	e7d8      	b.n	8006f9c <_malloc_r+0x268>
 8006fea:	2603      	movs	r6, #3
 8006fec:	6861      	ldr	r1, [r4, #4]
 8006fee:	43b1      	bics	r1, r6
 8006ff0:	9103      	str	r1, [sp, #12]
 8006ff2:	68e6      	ldr	r6, [r4, #12]
 8006ff4:	1b49      	subs	r1, r1, r5
 8006ff6:	290f      	cmp	r1, #15
 8006ff8:	dd10      	ble.n	800701c <_malloc_r+0x2e8>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	1963      	adds	r3, r4, r5
 8006ffe:	4315      	orrs	r5, r2
 8007000:	6065      	str	r5, [r4, #4]
 8007002:	68a5      	ldr	r5, [r4, #8]
 8007004:	430a      	orrs	r2, r1
 8007006:	60ee      	str	r6, [r5, #12]
 8007008:	60b5      	str	r5, [r6, #8]
 800700a:	6143      	str	r3, [r0, #20]
 800700c:	6103      	str	r3, [r0, #16]
 800700e:	4814      	ldr	r0, [pc, #80]	; (8007060 <_malloc_r+0x32c>)
 8007010:	605a      	str	r2, [r3, #4]
 8007012:	60d8      	str	r0, [r3, #12]
 8007014:	6098      	str	r0, [r3, #8]
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	50e1      	str	r1, [r4, r3]
 800701a:	e6eb      	b.n	8006df4 <_malloc_r+0xc0>
 800701c:	2900      	cmp	r1, #0
 800701e:	db09      	blt.n	8007034 <_malloc_r+0x300>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	18e1      	adds	r1, r4, r3
 8007024:	2301      	movs	r3, #1
 8007026:	684a      	ldr	r2, [r1, #4]
 8007028:	4313      	orrs	r3, r2
 800702a:	604b      	str	r3, [r1, #4]
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	60de      	str	r6, [r3, #12]
 8007030:	60b3      	str	r3, [r6, #8]
 8007032:	e6df      	b.n	8006df4 <_malloc_r+0xc0>
 8007034:	0034      	movs	r4, r6
 8007036:	e739      	b.n	8006eac <_malloc_r+0x178>
 8007038:	2108      	movs	r1, #8
 800703a:	4249      	negs	r1, r1
 800703c:	448c      	add	ip, r1
 800703e:	4661      	mov	r1, ip
 8007040:	6889      	ldr	r1, [r1, #8]
 8007042:	3b01      	subs	r3, #1
 8007044:	4561      	cmp	r1, ip
 8007046:	d100      	bne.n	800704a <_malloc_r+0x316>
 8007048:	e73a      	b.n	8006ec0 <_malloc_r+0x18c>
 800704a:	e740      	b.n	8006ece <_malloc_r+0x19a>
 800704c:	3304      	adds	r3, #4
 800704e:	0052      	lsls	r2, r2, #1
 8007050:	420a      	tst	r2, r1
 8007052:	d0fb      	beq.n	800704c <_malloc_r+0x318>
 8007054:	e724      	b.n	8006ea0 <_malloc_r+0x16c>
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	e7fa      	b.n	8007050 <_malloc_r+0x31c>
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	20000010 	.word	0x20000010
 8007060:	20000018 	.word	0x20000018
 8007064:	00000554 	.word	0x00000554
 8007068:	20000a6c 	.word	0x20000a6c
 800706c:	20000418 	.word	0x20000418
 8007070:	20000a3c 	.word	0x20000a3c
 8007074:	20000a64 	.word	0x20000a64
 8007078:	20000a68 	.word	0x20000a68
 800707c:	4934      	ldr	r1, [pc, #208]	; (8007150 <_malloc_r+0x41c>)
 800707e:	6808      	ldr	r0, [r1, #0]
 8007080:	3001      	adds	r0, #1
 8007082:	d140      	bne.n	8007106 <_malloc_r+0x3d2>
 8007084:	600c      	str	r4, [r1, #0]
 8007086:	2107      	movs	r1, #7
 8007088:	0026      	movs	r6, r4
 800708a:	2300      	movs	r3, #0
 800708c:	400e      	ands	r6, r1
 800708e:	420c      	tst	r4, r1
 8007090:	d002      	beq.n	8007098 <_malloc_r+0x364>
 8007092:	3308      	adds	r3, #8
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	18e4      	adds	r4, r4, r3
 8007098:	19e1      	adds	r1, r4, r7
 800709a:	9105      	str	r1, [sp, #20]
 800709c:	9f05      	ldr	r7, [sp, #20]
 800709e:	9904      	ldr	r1, [sp, #16]
 80070a0:	4017      	ands	r7, r2
 80070a2:	18cb      	adds	r3, r1, r3
 80070a4:	1bdf      	subs	r7, r3, r7
 80070a6:	4017      	ands	r7, r2
 80070a8:	0039      	movs	r1, r7
 80070aa:	9801      	ldr	r0, [sp, #4]
 80070ac:	f000 f9f4 	bl	8007498 <_sbrk_r>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d107      	bne.n	80070c4 <_malloc_r+0x390>
 80070b4:	1e37      	subs	r7, r6, #0
 80070b6:	9805      	ldr	r0, [sp, #20]
 80070b8:	d004      	beq.n	80070c4 <_malloc_r+0x390>
 80070ba:	0030      	movs	r0, r6
 80070bc:	2700      	movs	r7, #0
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	3808      	subs	r0, #8
 80070c2:	1818      	adds	r0, r3, r0
 80070c4:	4a23      	ldr	r2, [pc, #140]	; (8007154 <_malloc_r+0x420>)
 80070c6:	1b00      	subs	r0, r0, r4
 80070c8:	6813      	ldr	r3, [r2, #0]
 80070ca:	19c0      	adds	r0, r0, r7
 80070cc:	19db      	adds	r3, r3, r7
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	2201      	movs	r2, #1
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <_malloc_r+0x424>)
 80070d4:	9902      	ldr	r1, [sp, #8]
 80070d6:	4310      	orrs	r0, r2
 80070d8:	609c      	str	r4, [r3, #8]
 80070da:	6060      	str	r0, [r4, #4]
 80070dc:	4299      	cmp	r1, r3
 80070de:	d100      	bne.n	80070e2 <_malloc_r+0x3ae>
 80070e0:	e73e      	b.n	8006f60 <_malloc_r+0x22c>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	2b0f      	cmp	r3, #15
 80070e6:	d813      	bhi.n	8007110 <_malloc_r+0x3dc>
 80070e8:	6062      	str	r2, [r4, #4]
 80070ea:	2203      	movs	r2, #3
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <_malloc_r+0x424>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4393      	bics	r3, r2
 80070f4:	1b59      	subs	r1, r3, r5
 80070f6:	42ab      	cmp	r3, r5
 80070f8:	d301      	bcc.n	80070fe <_malloc_r+0x3ca>
 80070fa:	290f      	cmp	r1, #15
 80070fc:	dc1f      	bgt.n	800713e <_malloc_r+0x40a>
 80070fe:	9801      	ldr	r0, [sp, #4]
 8007100:	f000 f834 	bl	800716c <__malloc_unlock>
 8007104:	e623      	b.n	8006d4e <_malloc_r+0x1a>
 8007106:	4913      	ldr	r1, [pc, #76]	; (8007154 <_malloc_r+0x420>)
 8007108:	1ba6      	subs	r6, r4, r6
 800710a:	18f6      	adds	r6, r6, r3
 800710c:	600e      	str	r6, [r1, #0]
 800710e:	e7ba      	b.n	8007086 <_malloc_r+0x352>
 8007110:	2107      	movs	r1, #7
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	3b0c      	subs	r3, #12
 8007116:	438b      	bics	r3, r1
 8007118:	9902      	ldr	r1, [sp, #8]
 800711a:	6849      	ldr	r1, [r1, #4]
 800711c:	400a      	ands	r2, r1
 800711e:	9902      	ldr	r1, [sp, #8]
 8007120:	431a      	orrs	r2, r3
 8007122:	604a      	str	r2, [r1, #4]
 8007124:	18ca      	adds	r2, r1, r3
 8007126:	2105      	movs	r1, #5
 8007128:	6051      	str	r1, [r2, #4]
 800712a:	6091      	str	r1, [r2, #8]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d800      	bhi.n	8007132 <_malloc_r+0x3fe>
 8007130:	e716      	b.n	8006f60 <_malloc_r+0x22c>
 8007132:	9902      	ldr	r1, [sp, #8]
 8007134:	9801      	ldr	r0, [sp, #4]
 8007136:	3108      	adds	r1, #8
 8007138:	f000 fa7e 	bl	8007638 <_free_r>
 800713c:	e710      	b.n	8006f60 <_malloc_r+0x22c>
 800713e:	2201      	movs	r2, #1
 8007140:	0013      	movs	r3, r2
 8007142:	4805      	ldr	r0, [pc, #20]	; (8007158 <_malloc_r+0x424>)
 8007144:	432b      	orrs	r3, r5
 8007146:	6884      	ldr	r4, [r0, #8]
 8007148:	6063      	str	r3, [r4, #4]
 800714a:	1963      	adds	r3, r4, r5
 800714c:	6083      	str	r3, [r0, #8]
 800714e:	e623      	b.n	8006d98 <_malloc_r+0x64>
 8007150:	20000418 	.word	0x20000418
 8007154:	20000a3c 	.word	0x20000a3c
 8007158:	20000010 	.word	0x20000010

0800715c <__malloc_lock>:
 800715c:	b510      	push	{r4, lr}
 800715e:	4802      	ldr	r0, [pc, #8]	; (8007168 <__malloc_lock+0xc>)
 8007160:	f000 f9ec 	bl	800753c <__retarget_lock_acquire_recursive>
 8007164:	bd10      	pop	{r4, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	20000bb1 	.word	0x20000bb1

0800716c <__malloc_unlock>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4802      	ldr	r0, [pc, #8]	; (8007178 <__malloc_unlock+0xc>)
 8007170:	f000 f9e5 	bl	800753e <__retarget_lock_release_recursive>
 8007174:	bd10      	pop	{r4, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	20000bb1 	.word	0x20000bb1

0800717c <std>:
 800717c:	2300      	movs	r3, #0
 800717e:	b510      	push	{r4, lr}
 8007180:	0004      	movs	r4, r0
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	6043      	str	r3, [r0, #4]
 8007186:	6083      	str	r3, [r0, #8]
 8007188:	8181      	strh	r1, [r0, #12]
 800718a:	6643      	str	r3, [r0, #100]	; 0x64
 800718c:	81c2      	strh	r2, [r0, #14]
 800718e:	6103      	str	r3, [r0, #16]
 8007190:	6143      	str	r3, [r0, #20]
 8007192:	6183      	str	r3, [r0, #24]
 8007194:	0019      	movs	r1, r3
 8007196:	2208      	movs	r2, #8
 8007198:	305c      	adds	r0, #92	; 0x5c
 800719a:	f000 f91f 	bl	80073dc <memset>
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <std+0x50>)
 80071a0:	61e4      	str	r4, [r4, #28]
 80071a2:	6223      	str	r3, [r4, #32]
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <std+0x54>)
 80071a6:	6263      	str	r3, [r4, #36]	; 0x24
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <std+0x58>)
 80071aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <std+0x5c>)
 80071ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <std+0x60>)
 80071b2:	429c      	cmp	r4, r3
 80071b4:	d005      	beq.n	80071c2 <std+0x46>
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <std+0x64>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	d002      	beq.n	80071c2 <std+0x46>
 80071bc:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <std+0x68>)
 80071be:	429c      	cmp	r4, r3
 80071c0:	d103      	bne.n	80071ca <std+0x4e>
 80071c2:	0020      	movs	r0, r4
 80071c4:	3058      	adds	r0, #88	; 0x58
 80071c6:	f000 f9b7 	bl	8007538 <__retarget_lock_init_recursive>
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	08007345 	.word	0x08007345
 80071d0:	0800736d 	.word	0x0800736d
 80071d4:	080073a5 	.word	0x080073a5
 80071d8:	080073d1 	.word	0x080073d1
 80071dc:	20000a70 	.word	0x20000a70
 80071e0:	20000ad8 	.word	0x20000ad8
 80071e4:	20000b40 	.word	0x20000b40

080071e8 <stdio_exit_handler>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	4a03      	ldr	r2, [pc, #12]	; (80071f8 <stdio_exit_handler+0x10>)
 80071ec:	4903      	ldr	r1, [pc, #12]	; (80071fc <stdio_exit_handler+0x14>)
 80071ee:	4804      	ldr	r0, [pc, #16]	; (8007200 <stdio_exit_handler+0x18>)
 80071f0:	f000 f86c 	bl	80072cc <_fwalk_sglue>
 80071f4:	bd10      	pop	{r4, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	20000420 	.word	0x20000420
 80071fc:	080092f5 	.word	0x080092f5
 8007200:	20000598 	.word	0x20000598

08007204 <cleanup_stdio>:
 8007204:	6841      	ldr	r1, [r0, #4]
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <cleanup_stdio+0x30>)
 8007208:	b510      	push	{r4, lr}
 800720a:	0004      	movs	r4, r0
 800720c:	4299      	cmp	r1, r3
 800720e:	d001      	beq.n	8007214 <cleanup_stdio+0x10>
 8007210:	f002 f870 	bl	80092f4 <_fclose_r>
 8007214:	68a1      	ldr	r1, [r4, #8]
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <cleanup_stdio+0x34>)
 8007218:	4299      	cmp	r1, r3
 800721a:	d002      	beq.n	8007222 <cleanup_stdio+0x1e>
 800721c:	0020      	movs	r0, r4
 800721e:	f002 f869 	bl	80092f4 <_fclose_r>
 8007222:	68e1      	ldr	r1, [r4, #12]
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <cleanup_stdio+0x38>)
 8007226:	4299      	cmp	r1, r3
 8007228:	d002      	beq.n	8007230 <cleanup_stdio+0x2c>
 800722a:	0020      	movs	r0, r4
 800722c:	f002 f862 	bl	80092f4 <_fclose_r>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	20000a70 	.word	0x20000a70
 8007238:	20000ad8 	.word	0x20000ad8
 800723c:	20000b40 	.word	0x20000b40

08007240 <global_stdio_init.part.0>:
 8007240:	b510      	push	{r4, lr}
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <global_stdio_init.part.0+0x28>)
 8007244:	4a09      	ldr	r2, [pc, #36]	; (800726c <global_stdio_init.part.0+0x2c>)
 8007246:	2104      	movs	r1, #4
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	4809      	ldr	r0, [pc, #36]	; (8007270 <global_stdio_init.part.0+0x30>)
 800724c:	2200      	movs	r2, #0
 800724e:	f7ff ff95 	bl	800717c <std>
 8007252:	2201      	movs	r2, #1
 8007254:	2109      	movs	r1, #9
 8007256:	4807      	ldr	r0, [pc, #28]	; (8007274 <global_stdio_init.part.0+0x34>)
 8007258:	f7ff ff90 	bl	800717c <std>
 800725c:	2202      	movs	r2, #2
 800725e:	2112      	movs	r1, #18
 8007260:	4805      	ldr	r0, [pc, #20]	; (8007278 <global_stdio_init.part.0+0x38>)
 8007262:	f7ff ff8b 	bl	800717c <std>
 8007266:	bd10      	pop	{r4, pc}
 8007268:	20000ba8 	.word	0x20000ba8
 800726c:	080071e9 	.word	0x080071e9
 8007270:	20000a70 	.word	0x20000a70
 8007274:	20000ad8 	.word	0x20000ad8
 8007278:	20000b40 	.word	0x20000b40

0800727c <__sfp_lock_acquire>:
 800727c:	b510      	push	{r4, lr}
 800727e:	4802      	ldr	r0, [pc, #8]	; (8007288 <__sfp_lock_acquire+0xc>)
 8007280:	f000 f95c 	bl	800753c <__retarget_lock_acquire_recursive>
 8007284:	bd10      	pop	{r4, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000bb2 	.word	0x20000bb2

0800728c <__sfp_lock_release>:
 800728c:	b510      	push	{r4, lr}
 800728e:	4802      	ldr	r0, [pc, #8]	; (8007298 <__sfp_lock_release+0xc>)
 8007290:	f000 f955 	bl	800753e <__retarget_lock_release_recursive>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	20000bb2 	.word	0x20000bb2

0800729c <__sinit>:
 800729c:	b510      	push	{r4, lr}
 800729e:	0004      	movs	r4, r0
 80072a0:	f7ff ffec 	bl	800727c <__sfp_lock_acquire>
 80072a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <__sinit+0x14>
 80072aa:	f7ff ffef 	bl	800728c <__sfp_lock_release>
 80072ae:	bd10      	pop	{r4, pc}
 80072b0:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <__sinit+0x28>)
 80072b2:	6363      	str	r3, [r4, #52]	; 0x34
 80072b4:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <__sinit+0x2c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f6      	bne.n	80072aa <__sinit+0xe>
 80072bc:	f7ff ffc0 	bl	8007240 <global_stdio_init.part.0>
 80072c0:	e7f3      	b.n	80072aa <__sinit+0xe>
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	08007205 	.word	0x08007205
 80072c8:	20000ba8 	.word	0x20000ba8

080072cc <_fwalk_sglue>:
 80072cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ce:	0014      	movs	r4, r2
 80072d0:	2600      	movs	r6, #0
 80072d2:	9000      	str	r0, [sp, #0]
 80072d4:	9101      	str	r1, [sp, #4]
 80072d6:	68a5      	ldr	r5, [r4, #8]
 80072d8:	6867      	ldr	r7, [r4, #4]
 80072da:	3f01      	subs	r7, #1
 80072dc:	d504      	bpl.n	80072e8 <_fwalk_sglue+0x1c>
 80072de:	6824      	ldr	r4, [r4, #0]
 80072e0:	2c00      	cmp	r4, #0
 80072e2:	d1f8      	bne.n	80072d6 <_fwalk_sglue+0xa>
 80072e4:	0030      	movs	r0, r6
 80072e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d908      	bls.n	8007300 <_fwalk_sglue+0x34>
 80072ee:	220e      	movs	r2, #14
 80072f0:	5eab      	ldrsh	r3, [r5, r2]
 80072f2:	3301      	adds	r3, #1
 80072f4:	d004      	beq.n	8007300 <_fwalk_sglue+0x34>
 80072f6:	0029      	movs	r1, r5
 80072f8:	9800      	ldr	r0, [sp, #0]
 80072fa:	9b01      	ldr	r3, [sp, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4306      	orrs	r6, r0
 8007300:	3568      	adds	r5, #104	; 0x68
 8007302:	e7ea      	b.n	80072da <_fwalk_sglue+0xe>

08007304 <sprintf>:
 8007304:	b40e      	push	{r1, r2, r3}
 8007306:	b500      	push	{lr}
 8007308:	490b      	ldr	r1, [pc, #44]	; (8007338 <sprintf+0x34>)
 800730a:	b09c      	sub	sp, #112	; 0x70
 800730c:	ab1d      	add	r3, sp, #116	; 0x74
 800730e:	9002      	str	r0, [sp, #8]
 8007310:	9006      	str	r0, [sp, #24]
 8007312:	9107      	str	r1, [sp, #28]
 8007314:	9104      	str	r1, [sp, #16]
 8007316:	4809      	ldr	r0, [pc, #36]	; (800733c <sprintf+0x38>)
 8007318:	4909      	ldr	r1, [pc, #36]	; (8007340 <sprintf+0x3c>)
 800731a:	cb04      	ldmia	r3!, {r2}
 800731c:	9105      	str	r1, [sp, #20]
 800731e:	6800      	ldr	r0, [r0, #0]
 8007320:	a902      	add	r1, sp, #8
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	f000 fda4 	bl	8007e70 <_svfprintf_r>
 8007328:	2200      	movs	r2, #0
 800732a:	9b02      	ldr	r3, [sp, #8]
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	b01c      	add	sp, #112	; 0x70
 8007330:	bc08      	pop	{r3}
 8007332:	b003      	add	sp, #12
 8007334:	4718      	bx	r3
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	7fffffff 	.word	0x7fffffff
 800733c:	200006b8 	.word	0x200006b8
 8007340:	ffff0208 	.word	0xffff0208

08007344 <__sread>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	000c      	movs	r4, r1
 8007348:	250e      	movs	r5, #14
 800734a:	5f49      	ldrsh	r1, [r1, r5]
 800734c:	f000 f890 	bl	8007470 <_read_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	db03      	blt.n	800735c <__sread+0x18>
 8007354:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007356:	181b      	adds	r3, r3, r0
 8007358:	6523      	str	r3, [r4, #80]	; 0x50
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	4a02      	ldr	r2, [pc, #8]	; (8007368 <__sread+0x24>)
 8007360:	4013      	ands	r3, r2
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	e7f9      	b.n	800735a <__sread+0x16>
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	ffffefff 	.word	0xffffefff

0800736c <__swrite>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	001f      	movs	r7, r3
 8007370:	898b      	ldrh	r3, [r1, #12]
 8007372:	0005      	movs	r5, r0
 8007374:	000c      	movs	r4, r1
 8007376:	0016      	movs	r6, r2
 8007378:	05db      	lsls	r3, r3, #23
 800737a:	d505      	bpl.n	8007388 <__swrite+0x1c>
 800737c:	230e      	movs	r3, #14
 800737e:	5ec9      	ldrsh	r1, [r1, r3]
 8007380:	2200      	movs	r2, #0
 8007382:	2302      	movs	r3, #2
 8007384:	f000 f860 	bl	8007448 <_lseek_r>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	4a05      	ldr	r2, [pc, #20]	; (80073a0 <__swrite+0x34>)
 800738c:	0028      	movs	r0, r5
 800738e:	4013      	ands	r3, r2
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	0032      	movs	r2, r6
 8007394:	230e      	movs	r3, #14
 8007396:	5ee1      	ldrsh	r1, [r4, r3]
 8007398:	003b      	movs	r3, r7
 800739a:	f000 f88f 	bl	80074bc <_write_r>
 800739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a0:	ffffefff 	.word	0xffffefff

080073a4 <__sseek>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	000c      	movs	r4, r1
 80073a8:	250e      	movs	r5, #14
 80073aa:	5f49      	ldrsh	r1, [r1, r5]
 80073ac:	f000 f84c 	bl	8007448 <_lseek_r>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	1c42      	adds	r2, r0, #1
 80073b4:	d103      	bne.n	80073be <__sseek+0x1a>
 80073b6:	4a05      	ldr	r2, [pc, #20]	; (80073cc <__sseek+0x28>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	2280      	movs	r2, #128	; 0x80
 80073c0:	0152      	lsls	r2, r2, #5
 80073c2:	4313      	orrs	r3, r2
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	6520      	str	r0, [r4, #80]	; 0x50
 80073c8:	e7f8      	b.n	80073bc <__sseek+0x18>
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	ffffefff 	.word	0xffffefff

080073d0 <__sclose>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	230e      	movs	r3, #14
 80073d4:	5ec9      	ldrsh	r1, [r1, r3]
 80073d6:	f000 f825 	bl	8007424 <_close_r>
 80073da:	bd10      	pop	{r4, pc}

080073dc <memset>:
 80073dc:	0003      	movs	r3, r0
 80073de:	1882      	adds	r2, r0, r2
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d100      	bne.n	80073e6 <memset+0xa>
 80073e4:	4770      	bx	lr
 80073e6:	7019      	strb	r1, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	e7f9      	b.n	80073e0 <memset+0x4>

080073ec <strncpy>:
 80073ec:	0003      	movs	r3, r0
 80073ee:	b530      	push	{r4, r5, lr}
 80073f0:	001d      	movs	r5, r3
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d006      	beq.n	8007404 <strncpy+0x18>
 80073f6:	780c      	ldrb	r4, [r1, #0]
 80073f8:	3a01      	subs	r2, #1
 80073fa:	3301      	adds	r3, #1
 80073fc:	702c      	strb	r4, [r5, #0]
 80073fe:	3101      	adds	r1, #1
 8007400:	2c00      	cmp	r4, #0
 8007402:	d1f5      	bne.n	80073f0 <strncpy+0x4>
 8007404:	2100      	movs	r1, #0
 8007406:	189a      	adds	r2, r3, r2
 8007408:	4293      	cmp	r3, r2
 800740a:	d100      	bne.n	800740e <strncpy+0x22>
 800740c:	bd30      	pop	{r4, r5, pc}
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	e7f9      	b.n	8007408 <strncpy+0x1c>

08007414 <__locale_mb_cur_max>:
 8007414:	2294      	movs	r2, #148	; 0x94
 8007416:	4b02      	ldr	r3, [pc, #8]	; (8007420 <__locale_mb_cur_max+0xc>)
 8007418:	0052      	lsls	r2, r2, #1
 800741a:	5c98      	ldrb	r0, [r3, r2]
 800741c:	4770      	bx	lr
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	2000042c 	.word	0x2000042c

08007424 <_close_r>:
 8007424:	2300      	movs	r3, #0
 8007426:	b570      	push	{r4, r5, r6, lr}
 8007428:	4d06      	ldr	r5, [pc, #24]	; (8007444 <_close_r+0x20>)
 800742a:	0004      	movs	r4, r0
 800742c:	0008      	movs	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7fb ff1b 	bl	800326a <_close>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d103      	bne.n	8007440 <_close_r+0x1c>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d000      	beq.n	8007440 <_close_r+0x1c>
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20000bac 	.word	0x20000bac

08007448 <_lseek_r>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	0004      	movs	r4, r0
 800744c:	0008      	movs	r0, r1
 800744e:	0011      	movs	r1, r2
 8007450:	001a      	movs	r2, r3
 8007452:	2300      	movs	r3, #0
 8007454:	4d05      	ldr	r5, [pc, #20]	; (800746c <_lseek_r+0x24>)
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7fb ff28 	bl	80032ac <_lseek>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d103      	bne.n	8007468 <_lseek_r+0x20>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d000      	beq.n	8007468 <_lseek_r+0x20>
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	bd70      	pop	{r4, r5, r6, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	20000bac 	.word	0x20000bac

08007470 <_read_r>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	0004      	movs	r4, r0
 8007474:	0008      	movs	r0, r1
 8007476:	0011      	movs	r1, r2
 8007478:	001a      	movs	r2, r3
 800747a:	2300      	movs	r3, #0
 800747c:	4d05      	ldr	r5, [pc, #20]	; (8007494 <_read_r+0x24>)
 800747e:	602b      	str	r3, [r5, #0]
 8007480:	f7fb feba 	bl	80031f8 <_read>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d103      	bne.n	8007490 <_read_r+0x20>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d000      	beq.n	8007490 <_read_r+0x20>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	20000bac 	.word	0x20000bac

08007498 <_sbrk_r>:
 8007498:	2300      	movs	r3, #0
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	4d06      	ldr	r5, [pc, #24]	; (80074b8 <_sbrk_r+0x20>)
 800749e:	0004      	movs	r4, r0
 80074a0:	0008      	movs	r0, r1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	f7fb ff0e 	bl	80032c4 <_sbrk>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d103      	bne.n	80074b4 <_sbrk_r+0x1c>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d000      	beq.n	80074b4 <_sbrk_r+0x1c>
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	20000bac 	.word	0x20000bac

080074bc <_write_r>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	0004      	movs	r4, r0
 80074c0:	0008      	movs	r0, r1
 80074c2:	0011      	movs	r1, r2
 80074c4:	001a      	movs	r2, r3
 80074c6:	2300      	movs	r3, #0
 80074c8:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_write_r+0x24>)
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7fb feb1 	bl	8003232 <_write>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d103      	bne.n	80074dc <_write_r+0x20>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d000      	beq.n	80074dc <_write_r+0x20>
 80074da:	6023      	str	r3, [r4, #0]
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	20000bac 	.word	0x20000bac

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	200006b8 	.word	0x200006b8

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	2600      	movs	r6, #0
 80074f4:	4c0c      	ldr	r4, [pc, #48]	; (8007528 <__libc_init_array+0x38>)
 80074f6:	4d0d      	ldr	r5, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f8:	1b64      	subs	r4, r4, r5
 80074fa:	10a4      	asrs	r4, r4, #2
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	2600      	movs	r6, #0
 8007502:	f004 faa3 	bl	800ba4c <_init>
 8007506:	4c0a      	ldr	r4, [pc, #40]	; (8007530 <__libc_init_array+0x40>)
 8007508:	4d0a      	ldr	r5, [pc, #40]	; (8007534 <__libc_init_array+0x44>)
 800750a:	1b64      	subs	r4, r4, r5
 800750c:	10a4      	asrs	r4, r4, #2
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	00b3      	lsls	r3, r6, #2
 8007516:	58eb      	ldr	r3, [r5, r3]
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	00b3      	lsls	r3, r6, #2
 8007520:	58eb      	ldr	r3, [r5, r3]
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800c024 	.word	0x0800c024
 800752c:	0800c024 	.word	0x0800c024
 8007530:	0800c02c 	.word	0x0800c02c
 8007534:	0800c024 	.word	0x0800c024

08007538 <__retarget_lock_init_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_close_recursive>:
 800753a:	4770      	bx	lr

0800753c <__retarget_lock_acquire_recursive>:
 800753c:	4770      	bx	lr

0800753e <__retarget_lock_release_recursive>:
 800753e:	4770      	bx	lr

08007540 <sysconf>:
 8007540:	2380      	movs	r3, #128	; 0x80
 8007542:	b510      	push	{r4, lr}
 8007544:	2808      	cmp	r0, #8
 8007546:	d004      	beq.n	8007552 <sysconf+0x12>
 8007548:	f7ff ffcc 	bl	80074e4 <__errno>
 800754c:	2316      	movs	r3, #22
 800754e:	6003      	str	r3, [r0, #0]
 8007550:	3b17      	subs	r3, #23
 8007552:	0018      	movs	r0, r3
 8007554:	bd10      	pop	{r4, pc}

08007556 <memcpy>:
 8007556:	2300      	movs	r3, #0
 8007558:	b510      	push	{r4, lr}
 800755a:	429a      	cmp	r2, r3
 800755c:	d100      	bne.n	8007560 <memcpy+0xa>
 800755e:	bd10      	pop	{r4, pc}
 8007560:	5ccc      	ldrb	r4, [r1, r3]
 8007562:	54c4      	strb	r4, [r0, r3]
 8007564:	3301      	adds	r3, #1
 8007566:	e7f8      	b.n	800755a <memcpy+0x4>

08007568 <register_fini>:
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <register_fini+0x10>)
 800756a:	b510      	push	{r4, lr}
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <register_fini+0xe>
 8007570:	4802      	ldr	r0, [pc, #8]	; (800757c <register_fini+0x14>)
 8007572:	f000 f805 	bl	8007580 <atexit>
 8007576:	bd10      	pop	{r4, pc}
 8007578:	00000000 	.word	0x00000000
 800757c:	08009535 	.word	0x08009535

08007580 <atexit>:
 8007580:	2300      	movs	r3, #0
 8007582:	b510      	push	{r4, lr}
 8007584:	0001      	movs	r1, r0
 8007586:	001a      	movs	r2, r3
 8007588:	0018      	movs	r0, r3
 800758a:	f002 f825 	bl	80095d8 <__register_exitproc>
 800758e:	bd10      	pop	{r4, pc}

08007590 <_malloc_trim_r>:
 8007590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007592:	0004      	movs	r4, r0
 8007594:	2008      	movs	r0, #8
 8007596:	000d      	movs	r5, r1
 8007598:	f7ff ffd2 	bl	8007540 <sysconf>
 800759c:	0006      	movs	r6, r0
 800759e:	0020      	movs	r0, r4
 80075a0:	f7ff fddc 	bl	800715c <__malloc_lock>
 80075a4:	2203      	movs	r2, #3
 80075a6:	4f21      	ldr	r7, [pc, #132]	; (800762c <_malloc_trim_r+0x9c>)
 80075a8:	0031      	movs	r1, r6
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4393      	bics	r3, r2
 80075b0:	1b58      	subs	r0, r3, r5
 80075b2:	3811      	subs	r0, #17
 80075b4:	1980      	adds	r0, r0, r6
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	f7f8 fdc0 	bl	800013c <__udivsi3>
 80075bc:	1e45      	subs	r5, r0, #1
 80075be:	4375      	muls	r5, r6
 80075c0:	42ae      	cmp	r6, r5
 80075c2:	dd04      	ble.n	80075ce <_malloc_trim_r+0x3e>
 80075c4:	0020      	movs	r0, r4
 80075c6:	f7ff fdd1 	bl	800716c <__malloc_unlock>
 80075ca:	2000      	movs	r0, #0
 80075cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075ce:	2100      	movs	r1, #0
 80075d0:	0020      	movs	r0, r4
 80075d2:	f7ff ff61 	bl	8007498 <_sbrk_r>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	9a01      	ldr	r2, [sp, #4]
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	4298      	cmp	r0, r3
 80075de:	d1f1      	bne.n	80075c4 <_malloc_trim_r+0x34>
 80075e0:	0020      	movs	r0, r4
 80075e2:	4269      	negs	r1, r5
 80075e4:	f7ff ff58 	bl	8007498 <_sbrk_r>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d110      	bne.n	800760e <_malloc_trim_r+0x7e>
 80075ec:	2100      	movs	r1, #0
 80075ee:	0020      	movs	r0, r4
 80075f0:	f7ff ff52 	bl	8007498 <_sbrk_r>
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	1a81      	subs	r1, r0, r2
 80075f8:	290f      	cmp	r1, #15
 80075fa:	dde3      	ble.n	80075c4 <_malloc_trim_r+0x34>
 80075fc:	4d0c      	ldr	r5, [pc, #48]	; (8007630 <_malloc_trim_r+0xa0>)
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <_malloc_trim_r+0xa4>)
 8007600:	682d      	ldr	r5, [r5, #0]
 8007602:	1b40      	subs	r0, r0, r5
 8007604:	6018      	str	r0, [r3, #0]
 8007606:	2301      	movs	r3, #1
 8007608:	430b      	orrs	r3, r1
 800760a:	6053      	str	r3, [r2, #4]
 800760c:	e7da      	b.n	80075c4 <_malloc_trim_r+0x34>
 800760e:	2601      	movs	r6, #1
 8007610:	9b01      	ldr	r3, [sp, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	1b5b      	subs	r3, r3, r5
 8007616:	4333      	orrs	r3, r6
 8007618:	6053      	str	r3, [r2, #4]
 800761a:	4a06      	ldr	r2, [pc, #24]	; (8007634 <_malloc_trim_r+0xa4>)
 800761c:	0020      	movs	r0, r4
 800761e:	6813      	ldr	r3, [r2, #0]
 8007620:	1b5b      	subs	r3, r3, r5
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	f7ff fda2 	bl	800716c <__malloc_unlock>
 8007628:	0030      	movs	r0, r6
 800762a:	e7cf      	b.n	80075cc <_malloc_trim_r+0x3c>
 800762c:	20000010 	.word	0x20000010
 8007630:	20000418 	.word	0x20000418
 8007634:	20000a3c 	.word	0x20000a3c

08007638 <_free_r>:
 8007638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800763a:	1e0d      	subs	r5, r1, #0
 800763c:	9001      	str	r0, [sp, #4]
 800763e:	d02d      	beq.n	800769c <_free_r+0x64>
 8007640:	f7ff fd8c 	bl	800715c <__malloc_lock>
 8007644:	2301      	movs	r3, #1
 8007646:	0029      	movs	r1, r5
 8007648:	469c      	mov	ip, r3
 800764a:	3908      	subs	r1, #8
 800764c:	684f      	ldr	r7, [r1, #4]
 800764e:	4662      	mov	r2, ip
 8007650:	003b      	movs	r3, r7
 8007652:	4664      	mov	r4, ip
 8007654:	4393      	bics	r3, r2
 8007656:	18c8      	adds	r0, r1, r3
 8007658:	6845      	ldr	r5, [r0, #4]
 800765a:	3202      	adds	r2, #2
 800765c:	4395      	bics	r5, r2
 800765e:	4a4a      	ldr	r2, [pc, #296]	; (8007788 <_free_r+0x150>)
 8007660:	4027      	ands	r7, r4
 8007662:	6896      	ldr	r6, [r2, #8]
 8007664:	4286      	cmp	r6, r0
 8007666:	d11a      	bne.n	800769e <_free_r+0x66>
 8007668:	195b      	adds	r3, r3, r5
 800766a:	2f00      	cmp	r7, #0
 800766c:	d106      	bne.n	800767c <_free_r+0x44>
 800766e:	6808      	ldr	r0, [r1, #0]
 8007670:	1a09      	subs	r1, r1, r0
 8007672:	688d      	ldr	r5, [r1, #8]
 8007674:	181b      	adds	r3, r3, r0
 8007676:	68c8      	ldr	r0, [r1, #12]
 8007678:	60e8      	str	r0, [r5, #12]
 800767a:	6085      	str	r5, [r0, #8]
 800767c:	2001      	movs	r0, #1
 800767e:	4318      	orrs	r0, r3
 8007680:	6048      	str	r0, [r1, #4]
 8007682:	6091      	str	r1, [r2, #8]
 8007684:	4a41      	ldr	r2, [pc, #260]	; (800778c <_free_r+0x154>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d804      	bhi.n	8007696 <_free_r+0x5e>
 800768c:	4b40      	ldr	r3, [pc, #256]	; (8007790 <_free_r+0x158>)
 800768e:	9801      	ldr	r0, [sp, #4]
 8007690:	6819      	ldr	r1, [r3, #0]
 8007692:	f7ff ff7d 	bl	8007590 <_malloc_trim_r>
 8007696:	9801      	ldr	r0, [sp, #4]
 8007698:	f7ff fd68 	bl	800716c <__malloc_unlock>
 800769c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800769e:	2600      	movs	r6, #0
 80076a0:	6045      	str	r5, [r0, #4]
 80076a2:	42b7      	cmp	r7, r6
 80076a4:	d109      	bne.n	80076ba <_free_r+0x82>
 80076a6:	680f      	ldr	r7, [r1, #0]
 80076a8:	4c3a      	ldr	r4, [pc, #232]	; (8007794 <_free_r+0x15c>)
 80076aa:	1bc9      	subs	r1, r1, r7
 80076ac:	19db      	adds	r3, r3, r7
 80076ae:	688f      	ldr	r7, [r1, #8]
 80076b0:	42a7      	cmp	r7, r4
 80076b2:	d02c      	beq.n	800770e <_free_r+0xd6>
 80076b4:	68cc      	ldr	r4, [r1, #12]
 80076b6:	60fc      	str	r4, [r7, #12]
 80076b8:	60a7      	str	r7, [r4, #8]
 80076ba:	1947      	adds	r7, r0, r5
 80076bc:	687c      	ldr	r4, [r7, #4]
 80076be:	2701      	movs	r7, #1
 80076c0:	423c      	tst	r4, r7
 80076c2:	d10b      	bne.n	80076dc <_free_r+0xa4>
 80076c4:	195b      	adds	r3, r3, r5
 80076c6:	6885      	ldr	r5, [r0, #8]
 80076c8:	2e00      	cmp	r6, #0
 80076ca:	d122      	bne.n	8007712 <_free_r+0xda>
 80076cc:	4c31      	ldr	r4, [pc, #196]	; (8007794 <_free_r+0x15c>)
 80076ce:	42a5      	cmp	r5, r4
 80076d0:	d11f      	bne.n	8007712 <_free_r+0xda>
 80076d2:	003e      	movs	r6, r7
 80076d4:	6151      	str	r1, [r2, #20]
 80076d6:	6111      	str	r1, [r2, #16]
 80076d8:	60cd      	str	r5, [r1, #12]
 80076da:	608d      	str	r5, [r1, #8]
 80076dc:	2501      	movs	r5, #1
 80076de:	0028      	movs	r0, r5
 80076e0:	4318      	orrs	r0, r3
 80076e2:	6048      	str	r0, [r1, #4]
 80076e4:	50cb      	str	r3, [r1, r3]
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d1d5      	bne.n	8007696 <_free_r+0x5e>
 80076ea:	2080      	movs	r0, #128	; 0x80
 80076ec:	0080      	lsls	r0, r0, #2
 80076ee:	4283      	cmp	r3, r0
 80076f0:	d213      	bcs.n	800771a <_free_r+0xe2>
 80076f2:	08d8      	lsrs	r0, r3, #3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	409d      	lsls	r5, r3
 80076f8:	6853      	ldr	r3, [r2, #4]
 80076fa:	431d      	orrs	r5, r3
 80076fc:	00c3      	lsls	r3, r0, #3
 80076fe:	189b      	adds	r3, r3, r2
 8007700:	6055      	str	r5, [r2, #4]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	60cb      	str	r3, [r1, #12]
 8007706:	608a      	str	r2, [r1, #8]
 8007708:	6099      	str	r1, [r3, #8]
 800770a:	60d1      	str	r1, [r2, #12]
 800770c:	e7c3      	b.n	8007696 <_free_r+0x5e>
 800770e:	4666      	mov	r6, ip
 8007710:	e7d3      	b.n	80076ba <_free_r+0x82>
 8007712:	68c0      	ldr	r0, [r0, #12]
 8007714:	60e8      	str	r0, [r5, #12]
 8007716:	6085      	str	r5, [r0, #8]
 8007718:	e7e0      	b.n	80076dc <_free_r+0xa4>
 800771a:	0a5d      	lsrs	r5, r3, #9
 800771c:	2d04      	cmp	r5, #4
 800771e:	d812      	bhi.n	8007746 <_free_r+0x10e>
 8007720:	0998      	lsrs	r0, r3, #6
 8007722:	3038      	adds	r0, #56	; 0x38
 8007724:	00c6      	lsls	r6, r0, #3
 8007726:	18b6      	adds	r6, r6, r2
 8007728:	68b5      	ldr	r5, [r6, #8]
 800772a:	2703      	movs	r7, #3
 800772c:	42ae      	cmp	r6, r5
 800772e:	d125      	bne.n	800777c <_free_r+0x144>
 8007730:	2301      	movs	r3, #1
 8007732:	1080      	asrs	r0, r0, #2
 8007734:	4083      	lsls	r3, r0
 8007736:	6850      	ldr	r0, [r2, #4]
 8007738:	4303      	orrs	r3, r0
 800773a:	6053      	str	r3, [r2, #4]
 800773c:	60ce      	str	r6, [r1, #12]
 800773e:	608d      	str	r5, [r1, #8]
 8007740:	60b1      	str	r1, [r6, #8]
 8007742:	60e9      	str	r1, [r5, #12]
 8007744:	e7a7      	b.n	8007696 <_free_r+0x5e>
 8007746:	2d14      	cmp	r5, #20
 8007748:	d802      	bhi.n	8007750 <_free_r+0x118>
 800774a:	0028      	movs	r0, r5
 800774c:	305b      	adds	r0, #91	; 0x5b
 800774e:	e7e9      	b.n	8007724 <_free_r+0xec>
 8007750:	2d54      	cmp	r5, #84	; 0x54
 8007752:	d802      	bhi.n	800775a <_free_r+0x122>
 8007754:	0b18      	lsrs	r0, r3, #12
 8007756:	306e      	adds	r0, #110	; 0x6e
 8007758:	e7e4      	b.n	8007724 <_free_r+0xec>
 800775a:	20aa      	movs	r0, #170	; 0xaa
 800775c:	0040      	lsls	r0, r0, #1
 800775e:	4285      	cmp	r5, r0
 8007760:	d802      	bhi.n	8007768 <_free_r+0x130>
 8007762:	0bd8      	lsrs	r0, r3, #15
 8007764:	3077      	adds	r0, #119	; 0x77
 8007766:	e7dd      	b.n	8007724 <_free_r+0xec>
 8007768:	4e0b      	ldr	r6, [pc, #44]	; (8007798 <_free_r+0x160>)
 800776a:	207e      	movs	r0, #126	; 0x7e
 800776c:	42b5      	cmp	r5, r6
 800776e:	d8d9      	bhi.n	8007724 <_free_r+0xec>
 8007770:	0c98      	lsrs	r0, r3, #18
 8007772:	307c      	adds	r0, #124	; 0x7c
 8007774:	e7d6      	b.n	8007724 <_free_r+0xec>
 8007776:	68ad      	ldr	r5, [r5, #8]
 8007778:	42ae      	cmp	r6, r5
 800777a:	d003      	beq.n	8007784 <_free_r+0x14c>
 800777c:	686a      	ldr	r2, [r5, #4]
 800777e:	43ba      	bics	r2, r7
 8007780:	429a      	cmp	r2, r3
 8007782:	d8f8      	bhi.n	8007776 <_free_r+0x13e>
 8007784:	68ee      	ldr	r6, [r5, #12]
 8007786:	e7d9      	b.n	800773c <_free_r+0x104>
 8007788:	20000010 	.word	0x20000010
 800778c:	2000041c 	.word	0x2000041c
 8007790:	20000a6c 	.word	0x20000a6c
 8007794:	20000018 	.word	0x20000018
 8007798:	00000554 	.word	0x00000554

0800779c <__ascii_mbtowc>:
 800779c:	b082      	sub	sp, #8
 800779e:	2900      	cmp	r1, #0
 80077a0:	d100      	bne.n	80077a4 <__ascii_mbtowc+0x8>
 80077a2:	a901      	add	r1, sp, #4
 80077a4:	1e10      	subs	r0, r2, #0
 80077a6:	d006      	beq.n	80077b6 <__ascii_mbtowc+0x1a>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d006      	beq.n	80077ba <__ascii_mbtowc+0x1e>
 80077ac:	7813      	ldrb	r3, [r2, #0]
 80077ae:	600b      	str	r3, [r1, #0]
 80077b0:	7810      	ldrb	r0, [r2, #0]
 80077b2:	1e43      	subs	r3, r0, #1
 80077b4:	4198      	sbcs	r0, r3
 80077b6:	b002      	add	sp, #8
 80077b8:	4770      	bx	lr
 80077ba:	2002      	movs	r0, #2
 80077bc:	4240      	negs	r0, r0
 80077be:	e7fa      	b.n	80077b6 <__ascii_mbtowc+0x1a>

080077c0 <_Balloc>:
 80077c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80077c2:	b570      	push	{r4, r5, r6, lr}
 80077c4:	0006      	movs	r6, r0
 80077c6:	000c      	movs	r4, r1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d012      	beq.n	80077f2 <_Balloc+0x32>
 80077cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80077ce:	00a2      	lsls	r2, r4, #2
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d115      	bne.n	8007804 <_Balloc+0x44>
 80077d8:	2101      	movs	r1, #1
 80077da:	000d      	movs	r5, r1
 80077dc:	40a5      	lsls	r5, r4
 80077de:	1d6a      	adds	r2, r5, #5
 80077e0:	0030      	movs	r0, r6
 80077e2:	0092      	lsls	r2, r2, #2
 80077e4:	f001 ff56 	bl	8009694 <_calloc_r>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d009      	beq.n	8007800 <_Balloc+0x40>
 80077ec:	6044      	str	r4, [r0, #4]
 80077ee:	6085      	str	r5, [r0, #8]
 80077f0:	e00a      	b.n	8007808 <_Balloc+0x48>
 80077f2:	2221      	movs	r2, #33	; 0x21
 80077f4:	2104      	movs	r1, #4
 80077f6:	f001 ff4d 	bl	8009694 <_calloc_r>
 80077fa:	6470      	str	r0, [r6, #68]	; 0x44
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1e5      	bne.n	80077cc <_Balloc+0xc>
 8007800:	2000      	movs	r0, #0
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	6802      	ldr	r2, [r0, #0]
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	2300      	movs	r3, #0
 800780a:	6103      	str	r3, [r0, #16]
 800780c:	60c3      	str	r3, [r0, #12]
 800780e:	e7f8      	b.n	8007802 <_Balloc+0x42>

08007810 <_Bfree>:
 8007810:	2900      	cmp	r1, #0
 8007812:	d006      	beq.n	8007822 <_Bfree+0x12>
 8007814:	684a      	ldr	r2, [r1, #4]
 8007816:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	189b      	adds	r3, r3, r2
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	600a      	str	r2, [r1, #0]
 8007820:	6019      	str	r1, [r3, #0]
 8007822:	4770      	bx	lr

08007824 <__multadd>:
 8007824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007826:	000e      	movs	r6, r1
 8007828:	9001      	str	r0, [sp, #4]
 800782a:	000c      	movs	r4, r1
 800782c:	001d      	movs	r5, r3
 800782e:	2000      	movs	r0, #0
 8007830:	690f      	ldr	r7, [r1, #16]
 8007832:	3614      	adds	r6, #20
 8007834:	6833      	ldr	r3, [r6, #0]
 8007836:	3001      	adds	r0, #1
 8007838:	b299      	uxth	r1, r3
 800783a:	4351      	muls	r1, r2
 800783c:	0c1b      	lsrs	r3, r3, #16
 800783e:	4353      	muls	r3, r2
 8007840:	1949      	adds	r1, r1, r5
 8007842:	0c0d      	lsrs	r5, r1, #16
 8007844:	195b      	adds	r3, r3, r5
 8007846:	0c1d      	lsrs	r5, r3, #16
 8007848:	b289      	uxth	r1, r1
 800784a:	041b      	lsls	r3, r3, #16
 800784c:	185b      	adds	r3, r3, r1
 800784e:	c608      	stmia	r6!, {r3}
 8007850:	4287      	cmp	r7, r0
 8007852:	dcef      	bgt.n	8007834 <__multadd+0x10>
 8007854:	2d00      	cmp	r5, #0
 8007856:	d022      	beq.n	800789e <__multadd+0x7a>
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	42bb      	cmp	r3, r7
 800785c:	dc19      	bgt.n	8007892 <__multadd+0x6e>
 800785e:	6861      	ldr	r1, [r4, #4]
 8007860:	9801      	ldr	r0, [sp, #4]
 8007862:	3101      	adds	r1, #1
 8007864:	f7ff ffac 	bl	80077c0 <_Balloc>
 8007868:	1e06      	subs	r6, r0, #0
 800786a:	d105      	bne.n	8007878 <__multadd+0x54>
 800786c:	0032      	movs	r2, r6
 800786e:	21ba      	movs	r1, #186	; 0xba
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <__multadd+0x80>)
 8007872:	480d      	ldr	r0, [pc, #52]	; (80078a8 <__multadd+0x84>)
 8007874:	f001 fef0 	bl	8009658 <__assert_func>
 8007878:	0021      	movs	r1, r4
 800787a:	6922      	ldr	r2, [r4, #16]
 800787c:	310c      	adds	r1, #12
 800787e:	3202      	adds	r2, #2
 8007880:	0092      	lsls	r2, r2, #2
 8007882:	300c      	adds	r0, #12
 8007884:	f7ff fe67 	bl	8007556 <memcpy>
 8007888:	0021      	movs	r1, r4
 800788a:	9801      	ldr	r0, [sp, #4]
 800788c:	f7ff ffc0 	bl	8007810 <_Bfree>
 8007890:	0034      	movs	r4, r6
 8007892:	1d3b      	adds	r3, r7, #4
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	18e3      	adds	r3, r4, r3
 8007898:	605d      	str	r5, [r3, #4]
 800789a:	1c7b      	adds	r3, r7, #1
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	0020      	movs	r0, r4
 80078a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	0800bd97 	.word	0x0800bd97
 80078a8:	0800bda8 	.word	0x0800bda8

080078ac <__hi0bits>:
 80078ac:	0003      	movs	r3, r0
 80078ae:	0c02      	lsrs	r2, r0, #16
 80078b0:	2000      	movs	r0, #0
 80078b2:	4282      	cmp	r2, r0
 80078b4:	d101      	bne.n	80078ba <__hi0bits+0xe>
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	3010      	adds	r0, #16
 80078ba:	0e1a      	lsrs	r2, r3, #24
 80078bc:	d101      	bne.n	80078c2 <__hi0bits+0x16>
 80078be:	3008      	adds	r0, #8
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	0f1a      	lsrs	r2, r3, #28
 80078c4:	d101      	bne.n	80078ca <__hi0bits+0x1e>
 80078c6:	3004      	adds	r0, #4
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	0f9a      	lsrs	r2, r3, #30
 80078cc:	d101      	bne.n	80078d2 <__hi0bits+0x26>
 80078ce:	3002      	adds	r0, #2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	db03      	blt.n	80078de <__hi0bits+0x32>
 80078d6:	3001      	adds	r0, #1
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	d400      	bmi.n	80078de <__hi0bits+0x32>
 80078dc:	2020      	movs	r0, #32
 80078de:	4770      	bx	lr

080078e0 <__lo0bits>:
 80078e0:	6803      	ldr	r3, [r0, #0]
 80078e2:	0001      	movs	r1, r0
 80078e4:	2207      	movs	r2, #7
 80078e6:	0018      	movs	r0, r3
 80078e8:	4010      	ands	r0, r2
 80078ea:	4213      	tst	r3, r2
 80078ec:	d00d      	beq.n	800790a <__lo0bits+0x2a>
 80078ee:	3a06      	subs	r2, #6
 80078f0:	2000      	movs	r0, #0
 80078f2:	4213      	tst	r3, r2
 80078f4:	d105      	bne.n	8007902 <__lo0bits+0x22>
 80078f6:	3002      	adds	r0, #2
 80078f8:	4203      	tst	r3, r0
 80078fa:	d003      	beq.n	8007904 <__lo0bits+0x24>
 80078fc:	40d3      	lsrs	r3, r2
 80078fe:	0010      	movs	r0, r2
 8007900:	600b      	str	r3, [r1, #0]
 8007902:	4770      	bx	lr
 8007904:	089b      	lsrs	r3, r3, #2
 8007906:	600b      	str	r3, [r1, #0]
 8007908:	e7fb      	b.n	8007902 <__lo0bits+0x22>
 800790a:	b29a      	uxth	r2, r3
 800790c:	2a00      	cmp	r2, #0
 800790e:	d101      	bne.n	8007914 <__lo0bits+0x34>
 8007910:	2010      	movs	r0, #16
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	b2da      	uxtb	r2, r3
 8007916:	2a00      	cmp	r2, #0
 8007918:	d101      	bne.n	800791e <__lo0bits+0x3e>
 800791a:	3008      	adds	r0, #8
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	071a      	lsls	r2, r3, #28
 8007920:	d101      	bne.n	8007926 <__lo0bits+0x46>
 8007922:	3004      	adds	r0, #4
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	079a      	lsls	r2, r3, #30
 8007928:	d101      	bne.n	800792e <__lo0bits+0x4e>
 800792a:	3002      	adds	r0, #2
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	07da      	lsls	r2, r3, #31
 8007930:	d4e9      	bmi.n	8007906 <__lo0bits+0x26>
 8007932:	3001      	adds	r0, #1
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	d1e6      	bne.n	8007906 <__lo0bits+0x26>
 8007938:	2020      	movs	r0, #32
 800793a:	e7e2      	b.n	8007902 <__lo0bits+0x22>

0800793c <__i2b>:
 800793c:	b510      	push	{r4, lr}
 800793e:	000c      	movs	r4, r1
 8007940:	2101      	movs	r1, #1
 8007942:	f7ff ff3d 	bl	80077c0 <_Balloc>
 8007946:	2800      	cmp	r0, #0
 8007948:	d107      	bne.n	800795a <__i2b+0x1e>
 800794a:	2146      	movs	r1, #70	; 0x46
 800794c:	4c05      	ldr	r4, [pc, #20]	; (8007964 <__i2b+0x28>)
 800794e:	0002      	movs	r2, r0
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <__i2b+0x2c>)
 8007952:	0020      	movs	r0, r4
 8007954:	31ff      	adds	r1, #255	; 0xff
 8007956:	f001 fe7f 	bl	8009658 <__assert_func>
 800795a:	2301      	movs	r3, #1
 800795c:	6144      	str	r4, [r0, #20]
 800795e:	6103      	str	r3, [r0, #16]
 8007960:	bd10      	pop	{r4, pc}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	0800bda8 	.word	0x0800bda8
 8007968:	0800bd97 	.word	0x0800bd97

0800796c <__multiply>:
 800796c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800796e:	0015      	movs	r5, r2
 8007970:	690a      	ldr	r2, [r1, #16]
 8007972:	692b      	ldr	r3, [r5, #16]
 8007974:	000c      	movs	r4, r1
 8007976:	b08b      	sub	sp, #44	; 0x2c
 8007978:	429a      	cmp	r2, r3
 800797a:	da01      	bge.n	8007980 <__multiply+0x14>
 800797c:	002c      	movs	r4, r5
 800797e:	000d      	movs	r5, r1
 8007980:	6927      	ldr	r7, [r4, #16]
 8007982:	692e      	ldr	r6, [r5, #16]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	19bb      	adds	r3, r7, r6
 8007988:	9303      	str	r3, [sp, #12]
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	19ba      	adds	r2, r7, r6
 800798e:	4293      	cmp	r3, r2
 8007990:	da00      	bge.n	8007994 <__multiply+0x28>
 8007992:	3101      	adds	r1, #1
 8007994:	f7ff ff14 	bl	80077c0 <_Balloc>
 8007998:	9002      	str	r0, [sp, #8]
 800799a:	2800      	cmp	r0, #0
 800799c:	d106      	bne.n	80079ac <__multiply+0x40>
 800799e:	21b1      	movs	r1, #177	; 0xb1
 80079a0:	4b48      	ldr	r3, [pc, #288]	; (8007ac4 <__multiply+0x158>)
 80079a2:	4849      	ldr	r0, [pc, #292]	; (8007ac8 <__multiply+0x15c>)
 80079a4:	9a02      	ldr	r2, [sp, #8]
 80079a6:	0049      	lsls	r1, r1, #1
 80079a8:	f001 fe56 	bl	8009658 <__assert_func>
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	3314      	adds	r3, #20
 80079b2:	469c      	mov	ip, r3
 80079b4:	19bb      	adds	r3, r7, r6
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4463      	add	r3, ip
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	4663      	mov	r3, ip
 80079be:	9904      	ldr	r1, [sp, #16]
 80079c0:	428b      	cmp	r3, r1
 80079c2:	d32a      	bcc.n	8007a1a <__multiply+0xae>
 80079c4:	0023      	movs	r3, r4
 80079c6:	00bf      	lsls	r7, r7, #2
 80079c8:	3314      	adds	r3, #20
 80079ca:	3514      	adds	r5, #20
 80079cc:	9308      	str	r3, [sp, #32]
 80079ce:	00b6      	lsls	r6, r6, #2
 80079d0:	19db      	adds	r3, r3, r7
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	19ab      	adds	r3, r5, r6
 80079d6:	9309      	str	r3, [sp, #36]	; 0x24
 80079d8:	2304      	movs	r3, #4
 80079da:	9306      	str	r3, [sp, #24]
 80079dc:	0023      	movs	r3, r4
 80079de:	9a05      	ldr	r2, [sp, #20]
 80079e0:	3315      	adds	r3, #21
 80079e2:	9501      	str	r5, [sp, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d305      	bcc.n	80079f4 <__multiply+0x88>
 80079e8:	1b13      	subs	r3, r2, r4
 80079ea:	3b15      	subs	r3, #21
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	3301      	adds	r3, #1
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d310      	bcc.n	8007a1e <__multiply+0xb2>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	dd05      	ble.n	8007a0e <__multiply+0xa2>
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	3b04      	subs	r3, #4
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d056      	beq.n	8007abc <__multiply+0x150>
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	9a03      	ldr	r2, [sp, #12]
 8007a12:	0018      	movs	r0, r3
 8007a14:	611a      	str	r2, [r3, #16]
 8007a16:	b00b      	add	sp, #44	; 0x2c
 8007a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1a:	c304      	stmia	r3!, {r2}
 8007a1c:	e7cf      	b.n	80079be <__multiply+0x52>
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	b280      	uxth	r0, r0
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d01e      	beq.n	8007a66 <__multiply+0xfa>
 8007a28:	4667      	mov	r7, ip
 8007a2a:	2500      	movs	r5, #0
 8007a2c:	9e08      	ldr	r6, [sp, #32]
 8007a2e:	ce02      	ldmia	r6!, {r1}
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	b28b      	uxth	r3, r1
 8007a36:	4343      	muls	r3, r0
 8007a38:	001a      	movs	r2, r3
 8007a3a:	466b      	mov	r3, sp
 8007a3c:	8b9b      	ldrh	r3, [r3, #28]
 8007a3e:	18d3      	adds	r3, r2, r3
 8007a40:	195b      	adds	r3, r3, r5
 8007a42:	0c0d      	lsrs	r5, r1, #16
 8007a44:	4345      	muls	r5, r0
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	0c11      	lsrs	r1, r2, #16
 8007a4a:	1869      	adds	r1, r5, r1
 8007a4c:	0c1a      	lsrs	r2, r3, #16
 8007a4e:	188a      	adds	r2, r1, r2
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	0c15      	lsrs	r5, r2, #16
 8007a54:	0412      	lsls	r2, r2, #16
 8007a56:	431a      	orrs	r2, r3
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	c704      	stmia	r7!, {r2}
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	d8e6      	bhi.n	8007a2e <__multiply+0xc2>
 8007a60:	4663      	mov	r3, ip
 8007a62:	9a06      	ldr	r2, [sp, #24]
 8007a64:	509d      	str	r5, [r3, r2]
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	0c00      	lsrs	r0, r0, #16
 8007a6c:	d020      	beq.n	8007ab0 <__multiply+0x144>
 8007a6e:	4663      	mov	r3, ip
 8007a70:	0025      	movs	r5, r4
 8007a72:	4661      	mov	r1, ip
 8007a74:	2700      	movs	r7, #0
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3514      	adds	r5, #20
 8007a7a:	682a      	ldr	r2, [r5, #0]
 8007a7c:	680e      	ldr	r6, [r1, #0]
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	4342      	muls	r2, r0
 8007a82:	0c36      	lsrs	r6, r6, #16
 8007a84:	1992      	adds	r2, r2, r6
 8007a86:	19d2      	adds	r2, r2, r7
 8007a88:	0416      	lsls	r6, r2, #16
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	431e      	orrs	r6, r3
 8007a8e:	600e      	str	r6, [r1, #0]
 8007a90:	cd40      	ldmia	r5!, {r6}
 8007a92:	684b      	ldr	r3, [r1, #4]
 8007a94:	0c36      	lsrs	r6, r6, #16
 8007a96:	4346      	muls	r6, r0
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	0c12      	lsrs	r2, r2, #16
 8007a9c:	18f3      	adds	r3, r6, r3
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	9a05      	ldr	r2, [sp, #20]
 8007aa2:	0c1f      	lsrs	r7, r3, #16
 8007aa4:	3104      	adds	r1, #4
 8007aa6:	42aa      	cmp	r2, r5
 8007aa8:	d8e7      	bhi.n	8007a7a <__multiply+0x10e>
 8007aaa:	4662      	mov	r2, ip
 8007aac:	9906      	ldr	r1, [sp, #24]
 8007aae:	5053      	str	r3, [r2, r1]
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	449c      	add	ip, r3
 8007aba:	e79b      	b.n	80079f4 <__multiply+0x88>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	e79b      	b.n	80079fc <__multiply+0x90>
 8007ac4:	0800bd97 	.word	0x0800bd97
 8007ac8:	0800bda8 	.word	0x0800bda8

08007acc <__pow5mult>:
 8007acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ace:	2303      	movs	r3, #3
 8007ad0:	0015      	movs	r5, r2
 8007ad2:	0007      	movs	r7, r0
 8007ad4:	000e      	movs	r6, r1
 8007ad6:	401a      	ands	r2, r3
 8007ad8:	421d      	tst	r5, r3
 8007ada:	d008      	beq.n	8007aee <__pow5mult+0x22>
 8007adc:	491a      	ldr	r1, [pc, #104]	; (8007b48 <__pow5mult+0x7c>)
 8007ade:	3a01      	subs	r2, #1
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	5852      	ldr	r2, [r2, r1]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	0031      	movs	r1, r6
 8007ae8:	f7ff fe9c 	bl	8007824 <__multadd>
 8007aec:	0006      	movs	r6, r0
 8007aee:	10ad      	asrs	r5, r5, #2
 8007af0:	d027      	beq.n	8007b42 <__pow5mult+0x76>
 8007af2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007af4:	2c00      	cmp	r4, #0
 8007af6:	d107      	bne.n	8007b08 <__pow5mult+0x3c>
 8007af8:	0038      	movs	r0, r7
 8007afa:	4914      	ldr	r1, [pc, #80]	; (8007b4c <__pow5mult+0x80>)
 8007afc:	f7ff ff1e 	bl	800793c <__i2b>
 8007b00:	2300      	movs	r3, #0
 8007b02:	0004      	movs	r4, r0
 8007b04:	6438      	str	r0, [r7, #64]	; 0x40
 8007b06:	6003      	str	r3, [r0, #0]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	421d      	tst	r5, r3
 8007b0c:	d00a      	beq.n	8007b24 <__pow5mult+0x58>
 8007b0e:	0031      	movs	r1, r6
 8007b10:	0022      	movs	r2, r4
 8007b12:	0038      	movs	r0, r7
 8007b14:	f7ff ff2a 	bl	800796c <__multiply>
 8007b18:	0031      	movs	r1, r6
 8007b1a:	9001      	str	r0, [sp, #4]
 8007b1c:	0038      	movs	r0, r7
 8007b1e:	f7ff fe77 	bl	8007810 <_Bfree>
 8007b22:	9e01      	ldr	r6, [sp, #4]
 8007b24:	106d      	asrs	r5, r5, #1
 8007b26:	d00c      	beq.n	8007b42 <__pow5mult+0x76>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d107      	bne.n	8007b3e <__pow5mult+0x72>
 8007b2e:	0022      	movs	r2, r4
 8007b30:	0021      	movs	r1, r4
 8007b32:	0038      	movs	r0, r7
 8007b34:	f7ff ff1a 	bl	800796c <__multiply>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6020      	str	r0, [r4, #0]
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	0004      	movs	r4, r0
 8007b40:	e7e2      	b.n	8007b08 <__pow5mult+0x3c>
 8007b42:	0030      	movs	r0, r6
 8007b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	0800bef8 	.word	0x0800bef8
 8007b4c:	00000271 	.word	0x00000271

08007b50 <__lshift>:
 8007b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b52:	000c      	movs	r4, r1
 8007b54:	0017      	movs	r7, r2
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	1155      	asrs	r5, r2, #5
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	18eb      	adds	r3, r5, r3
 8007b5e:	9302      	str	r3, [sp, #8]
 8007b60:	3301      	adds	r3, #1
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	6849      	ldr	r1, [r1, #4]
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	9004      	str	r0, [sp, #16]
 8007b6a:	9a01      	ldr	r2, [sp, #4]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	db10      	blt.n	8007b92 <__lshift+0x42>
 8007b70:	9804      	ldr	r0, [sp, #16]
 8007b72:	f7ff fe25 	bl	80077c0 <_Balloc>
 8007b76:	2300      	movs	r3, #0
 8007b78:	0002      	movs	r2, r0
 8007b7a:	0006      	movs	r6, r0
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	3214      	adds	r2, #20
 8007b80:	4298      	cmp	r0, r3
 8007b82:	d10c      	bne.n	8007b9e <__lshift+0x4e>
 8007b84:	31df      	adds	r1, #223	; 0xdf
 8007b86:	0032      	movs	r2, r6
 8007b88:	4b26      	ldr	r3, [pc, #152]	; (8007c24 <__lshift+0xd4>)
 8007b8a:	4827      	ldr	r0, [pc, #156]	; (8007c28 <__lshift+0xd8>)
 8007b8c:	31ff      	adds	r1, #255	; 0xff
 8007b8e:	f001 fd63 	bl	8009658 <__assert_func>
 8007b92:	3101      	adds	r1, #1
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	e7e8      	b.n	8007b6a <__lshift+0x1a>
 8007b98:	0098      	lsls	r0, r3, #2
 8007b9a:	5011      	str	r1, [r2, r0]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	42ab      	cmp	r3, r5
 8007ba0:	dbfa      	blt.n	8007b98 <__lshift+0x48>
 8007ba2:	43eb      	mvns	r3, r5
 8007ba4:	17db      	asrs	r3, r3, #31
 8007ba6:	401d      	ands	r5, r3
 8007ba8:	211f      	movs	r1, #31
 8007baa:	0023      	movs	r3, r4
 8007bac:	0038      	movs	r0, r7
 8007bae:	00ad      	lsls	r5, r5, #2
 8007bb0:	1955      	adds	r5, r2, r5
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	3314      	adds	r3, #20
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	4008      	ands	r0, r1
 8007bba:	4684      	mov	ip, r0
 8007bbc:	189a      	adds	r2, r3, r2
 8007bbe:	420f      	tst	r7, r1
 8007bc0:	d02a      	beq.n	8007c18 <__lshift+0xc8>
 8007bc2:	3101      	adds	r1, #1
 8007bc4:	1a09      	subs	r1, r1, r0
 8007bc6:	9105      	str	r1, [sp, #20]
 8007bc8:	2100      	movs	r1, #0
 8007bca:	9503      	str	r5, [sp, #12]
 8007bcc:	4667      	mov	r7, ip
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	40b8      	lsls	r0, r7
 8007bd2:	4308      	orrs	r0, r1
 8007bd4:	9903      	ldr	r1, [sp, #12]
 8007bd6:	c101      	stmia	r1!, {r0}
 8007bd8:	9103      	str	r1, [sp, #12]
 8007bda:	9805      	ldr	r0, [sp, #20]
 8007bdc:	cb02      	ldmia	r3!, {r1}
 8007bde:	40c1      	lsrs	r1, r0
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d8f3      	bhi.n	8007bcc <__lshift+0x7c>
 8007be4:	0020      	movs	r0, r4
 8007be6:	3015      	adds	r0, #21
 8007be8:	2304      	movs	r3, #4
 8007bea:	4282      	cmp	r2, r0
 8007bec:	d304      	bcc.n	8007bf8 <__lshift+0xa8>
 8007bee:	1b13      	subs	r3, r2, r4
 8007bf0:	3b15      	subs	r3, #21
 8007bf2:	089b      	lsrs	r3, r3, #2
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	50e9      	str	r1, [r5, r3]
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d002      	beq.n	8007c04 <__lshift+0xb4>
 8007bfe:	9b02      	ldr	r3, [sp, #8]
 8007c00:	3302      	adds	r3, #2
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	9804      	ldr	r0, [sp, #16]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	0021      	movs	r1, r4
 8007c0c:	6133      	str	r3, [r6, #16]
 8007c0e:	f7ff fdff 	bl	8007810 <_Bfree>
 8007c12:	0030      	movs	r0, r6
 8007c14:	b007      	add	sp, #28
 8007c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c18:	cb02      	ldmia	r3!, {r1}
 8007c1a:	c502      	stmia	r5!, {r1}
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d8fb      	bhi.n	8007c18 <__lshift+0xc8>
 8007c20:	e7f0      	b.n	8007c04 <__lshift+0xb4>
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	0800bd97 	.word	0x0800bd97
 8007c28:	0800bda8 	.word	0x0800bda8

08007c2c <__mcmp>:
 8007c2c:	b530      	push	{r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	6904      	ldr	r4, [r0, #16]
 8007c32:	0002      	movs	r2, r0
 8007c34:	1ae0      	subs	r0, r4, r3
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d10e      	bne.n	8007c58 <__mcmp+0x2c>
 8007c3a:	3214      	adds	r2, #20
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	3114      	adds	r1, #20
 8007c40:	0014      	movs	r4, r2
 8007c42:	18c9      	adds	r1, r1, r3
 8007c44:	18d2      	adds	r2, r2, r3
 8007c46:	3a04      	subs	r2, #4
 8007c48:	3904      	subs	r1, #4
 8007c4a:	6815      	ldr	r5, [r2, #0]
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	d003      	beq.n	8007c5a <__mcmp+0x2e>
 8007c52:	2001      	movs	r0, #1
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d303      	bcc.n	8007c60 <__mcmp+0x34>
 8007c58:	bd30      	pop	{r4, r5, pc}
 8007c5a:	4294      	cmp	r4, r2
 8007c5c:	d3f3      	bcc.n	8007c46 <__mcmp+0x1a>
 8007c5e:	e7fb      	b.n	8007c58 <__mcmp+0x2c>
 8007c60:	4240      	negs	r0, r0
 8007c62:	e7f9      	b.n	8007c58 <__mcmp+0x2c>

08007c64 <__mdiff>:
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c66:	000e      	movs	r6, r1
 8007c68:	0007      	movs	r7, r0
 8007c6a:	0011      	movs	r1, r2
 8007c6c:	0030      	movs	r0, r6
 8007c6e:	b087      	sub	sp, #28
 8007c70:	0014      	movs	r4, r2
 8007c72:	f7ff ffdb 	bl	8007c2c <__mcmp>
 8007c76:	1e05      	subs	r5, r0, #0
 8007c78:	d110      	bne.n	8007c9c <__mdiff+0x38>
 8007c7a:	0001      	movs	r1, r0
 8007c7c:	0038      	movs	r0, r7
 8007c7e:	f7ff fd9f 	bl	80077c0 <_Balloc>
 8007c82:	1e02      	subs	r2, r0, #0
 8007c84:	d104      	bne.n	8007c90 <__mdiff+0x2c>
 8007c86:	4b3f      	ldr	r3, [pc, #252]	; (8007d84 <__mdiff+0x120>)
 8007c88:	483f      	ldr	r0, [pc, #252]	; (8007d88 <__mdiff+0x124>)
 8007c8a:	4940      	ldr	r1, [pc, #256]	; (8007d8c <__mdiff+0x128>)
 8007c8c:	f001 fce4 	bl	8009658 <__assert_func>
 8007c90:	2301      	movs	r3, #1
 8007c92:	6145      	str	r5, [r0, #20]
 8007c94:	6103      	str	r3, [r0, #16]
 8007c96:	0010      	movs	r0, r2
 8007c98:	b007      	add	sp, #28
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	db04      	blt.n	8007cae <__mdiff+0x4a>
 8007ca4:	0023      	movs	r3, r4
 8007ca6:	0034      	movs	r4, r6
 8007ca8:	001e      	movs	r6, r3
 8007caa:	2300      	movs	r3, #0
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	0038      	movs	r0, r7
 8007cb0:	6861      	ldr	r1, [r4, #4]
 8007cb2:	f7ff fd85 	bl	80077c0 <_Balloc>
 8007cb6:	1e02      	subs	r2, r0, #0
 8007cb8:	d103      	bne.n	8007cc2 <__mdiff+0x5e>
 8007cba:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <__mdiff+0x120>)
 8007cbc:	4832      	ldr	r0, [pc, #200]	; (8007d88 <__mdiff+0x124>)
 8007cbe:	4934      	ldr	r1, [pc, #208]	; (8007d90 <__mdiff+0x12c>)
 8007cc0:	e7e4      	b.n	8007c8c <__mdiff+0x28>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	2700      	movs	r7, #0
 8007cc6:	60c3      	str	r3, [r0, #12]
 8007cc8:	6920      	ldr	r0, [r4, #16]
 8007cca:	3414      	adds	r4, #20
 8007ccc:	0083      	lsls	r3, r0, #2
 8007cce:	18e3      	adds	r3, r4, r3
 8007cd0:	0021      	movs	r1, r4
 8007cd2:	9401      	str	r4, [sp, #4]
 8007cd4:	0034      	movs	r4, r6
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	6933      	ldr	r3, [r6, #16]
 8007cda:	3414      	adds	r4, #20
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	18e3      	adds	r3, r4, r3
 8007ce0:	9303      	str	r3, [sp, #12]
 8007ce2:	0013      	movs	r3, r2
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	469c      	mov	ip, r3
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	9104      	str	r1, [sp, #16]
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	cc02      	ldmia	r4!, {r1}
 8007cf0:	cb20      	ldmia	r3!, {r5}
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	b2ab      	uxth	r3, r5
 8007cf6:	19df      	adds	r7, r3, r7
 8007cf8:	b28b      	uxth	r3, r1
 8007cfa:	1afb      	subs	r3, r7, r3
 8007cfc:	0c09      	lsrs	r1, r1, #16
 8007cfe:	0c2d      	lsrs	r5, r5, #16
 8007d00:	1a6d      	subs	r5, r5, r1
 8007d02:	1419      	asrs	r1, r3, #16
 8007d04:	1869      	adds	r1, r5, r1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	140f      	asrs	r7, r1, #16
 8007d0a:	0409      	lsls	r1, r1, #16
 8007d0c:	4319      	orrs	r1, r3
 8007d0e:	4663      	mov	r3, ip
 8007d10:	c302      	stmia	r3!, {r1}
 8007d12:	469c      	mov	ip, r3
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	d8e8      	bhi.n	8007cec <__mdiff+0x88>
 8007d1a:	0031      	movs	r1, r6
 8007d1c:	9c03      	ldr	r4, [sp, #12]
 8007d1e:	3115      	adds	r1, #21
 8007d20:	2304      	movs	r3, #4
 8007d22:	428c      	cmp	r4, r1
 8007d24:	d304      	bcc.n	8007d30 <__mdiff+0xcc>
 8007d26:	1ba3      	subs	r3, r4, r6
 8007d28:	3b15      	subs	r3, #21
 8007d2a:	089b      	lsrs	r3, r3, #2
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	9901      	ldr	r1, [sp, #4]
 8007d32:	18cd      	adds	r5, r1, r3
 8007d34:	9905      	ldr	r1, [sp, #20]
 8007d36:	002e      	movs	r6, r5
 8007d38:	18cb      	adds	r3, r1, r3
 8007d3a:	469c      	mov	ip, r3
 8007d3c:	9902      	ldr	r1, [sp, #8]
 8007d3e:	428e      	cmp	r6, r1
 8007d40:	d310      	bcc.n	8007d64 <__mdiff+0x100>
 8007d42:	9e02      	ldr	r6, [sp, #8]
 8007d44:	1ee9      	subs	r1, r5, #3
 8007d46:	2400      	movs	r4, #0
 8007d48:	428e      	cmp	r6, r1
 8007d4a:	d304      	bcc.n	8007d56 <__mdiff+0xf2>
 8007d4c:	0031      	movs	r1, r6
 8007d4e:	3103      	adds	r1, #3
 8007d50:	1b49      	subs	r1, r1, r5
 8007d52:	0889      	lsrs	r1, r1, #2
 8007d54:	008c      	lsls	r4, r1, #2
 8007d56:	191b      	adds	r3, r3, r4
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	6819      	ldr	r1, [r3, #0]
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d00f      	beq.n	8007d80 <__mdiff+0x11c>
 8007d60:	6110      	str	r0, [r2, #16]
 8007d62:	e798      	b.n	8007c96 <__mdiff+0x32>
 8007d64:	ce02      	ldmia	r6!, {r1}
 8007d66:	b28c      	uxth	r4, r1
 8007d68:	19e4      	adds	r4, r4, r7
 8007d6a:	0c0f      	lsrs	r7, r1, #16
 8007d6c:	1421      	asrs	r1, r4, #16
 8007d6e:	1879      	adds	r1, r7, r1
 8007d70:	b2a4      	uxth	r4, r4
 8007d72:	140f      	asrs	r7, r1, #16
 8007d74:	0409      	lsls	r1, r1, #16
 8007d76:	4321      	orrs	r1, r4
 8007d78:	4664      	mov	r4, ip
 8007d7a:	c402      	stmia	r4!, {r1}
 8007d7c:	46a4      	mov	ip, r4
 8007d7e:	e7dd      	b.n	8007d3c <__mdiff+0xd8>
 8007d80:	3801      	subs	r0, #1
 8007d82:	e7e9      	b.n	8007d58 <__mdiff+0xf4>
 8007d84:	0800bd97 	.word	0x0800bd97
 8007d88:	0800bda8 	.word	0x0800bda8
 8007d8c:	00000237 	.word	0x00000237
 8007d90:	00000245 	.word	0x00000245

08007d94 <__d2b>:
 8007d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d96:	2101      	movs	r1, #1
 8007d98:	0014      	movs	r4, r2
 8007d9a:	001d      	movs	r5, r3
 8007d9c:	9f08      	ldr	r7, [sp, #32]
 8007d9e:	f7ff fd0f 	bl	80077c0 <_Balloc>
 8007da2:	1e06      	subs	r6, r0, #0
 8007da4:	d105      	bne.n	8007db2 <__d2b+0x1e>
 8007da6:	0032      	movs	r2, r6
 8007da8:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <__d2b+0xa8>)
 8007daa:	4825      	ldr	r0, [pc, #148]	; (8007e40 <__d2b+0xac>)
 8007dac:	4925      	ldr	r1, [pc, #148]	; (8007e44 <__d2b+0xb0>)
 8007dae:	f001 fc53 	bl	8009658 <__assert_func>
 8007db2:	032b      	lsls	r3, r5, #12
 8007db4:	006d      	lsls	r5, r5, #1
 8007db6:	0b1b      	lsrs	r3, r3, #12
 8007db8:	0d6d      	lsrs	r5, r5, #21
 8007dba:	d125      	bne.n	8007e08 <__d2b+0x74>
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d028      	beq.n	8007e14 <__d2b+0x80>
 8007dc2:	4668      	mov	r0, sp
 8007dc4:	9400      	str	r4, [sp, #0]
 8007dc6:	f7ff fd8b 	bl	80078e0 <__lo0bits>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	9900      	ldr	r1, [sp, #0]
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d01e      	beq.n	8007e10 <__d2b+0x7c>
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	001c      	movs	r4, r3
 8007dd6:	1a12      	subs	r2, r2, r0
 8007dd8:	4094      	lsls	r4, r2
 8007dda:	0022      	movs	r2, r4
 8007ddc:	40c3      	lsrs	r3, r0
 8007dde:	430a      	orrs	r2, r1
 8007de0:	6172      	str	r2, [r6, #20]
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	9c01      	ldr	r4, [sp, #4]
 8007de6:	61b4      	str	r4, [r6, #24]
 8007de8:	1e63      	subs	r3, r4, #1
 8007dea:	419c      	sbcs	r4, r3
 8007dec:	3401      	adds	r4, #1
 8007dee:	6134      	str	r4, [r6, #16]
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d017      	beq.n	8007e24 <__d2b+0x90>
 8007df4:	2435      	movs	r4, #53	; 0x35
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <__d2b+0xb4>)
 8007df8:	18ed      	adds	r5, r5, r3
 8007dfa:	182d      	adds	r5, r5, r0
 8007dfc:	603d      	str	r5, [r7, #0]
 8007dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e00:	1a24      	subs	r4, r4, r0
 8007e02:	601c      	str	r4, [r3, #0]
 8007e04:	0030      	movs	r0, r6
 8007e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e08:	2280      	movs	r2, #128	; 0x80
 8007e0a:	0352      	lsls	r2, r2, #13
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	e7d5      	b.n	8007dbc <__d2b+0x28>
 8007e10:	6171      	str	r1, [r6, #20]
 8007e12:	e7e7      	b.n	8007de4 <__d2b+0x50>
 8007e14:	a801      	add	r0, sp, #4
 8007e16:	f7ff fd63 	bl	80078e0 <__lo0bits>
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	2401      	movs	r4, #1
 8007e1e:	6173      	str	r3, [r6, #20]
 8007e20:	3020      	adds	r0, #32
 8007e22:	e7e4      	b.n	8007dee <__d2b+0x5a>
 8007e24:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <__d2b+0xb8>)
 8007e26:	18c0      	adds	r0, r0, r3
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <__d2b+0xbc>)
 8007e2a:	6038      	str	r0, [r7, #0]
 8007e2c:	18e3      	adds	r3, r4, r3
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	18f3      	adds	r3, r6, r3
 8007e32:	6958      	ldr	r0, [r3, #20]
 8007e34:	f7ff fd3a 	bl	80078ac <__hi0bits>
 8007e38:	0164      	lsls	r4, r4, #5
 8007e3a:	e7e0      	b.n	8007dfe <__d2b+0x6a>
 8007e3c:	0800bd97 	.word	0x0800bd97
 8007e40:	0800bda8 	.word	0x0800bda8
 8007e44:	0000030f 	.word	0x0000030f
 8007e48:	fffffbcd 	.word	0xfffffbcd
 8007e4c:	fffffbce 	.word	0xfffffbce
 8007e50:	3fffffff 	.word	0x3fffffff

08007e54 <__ascii_wctomb>:
 8007e54:	0003      	movs	r3, r0
 8007e56:	1e08      	subs	r0, r1, #0
 8007e58:	d005      	beq.n	8007e66 <__ascii_wctomb+0x12>
 8007e5a:	2aff      	cmp	r2, #255	; 0xff
 8007e5c:	d904      	bls.n	8007e68 <__ascii_wctomb+0x14>
 8007e5e:	228a      	movs	r2, #138	; 0x8a
 8007e60:	2001      	movs	r0, #1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	4240      	negs	r0, r0
 8007e66:	4770      	bx	lr
 8007e68:	2001      	movs	r0, #1
 8007e6a:	700a      	strb	r2, [r1, #0]
 8007e6c:	e7fb      	b.n	8007e66 <__ascii_wctomb+0x12>
	...

08007e70 <_svfprintf_r>:
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b0d9      	sub	sp, #356	; 0x164
 8007e74:	001c      	movs	r4, r3
 8007e76:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e78:	9208      	str	r2, [sp, #32]
 8007e7a:	900a      	str	r0, [sp, #40]	; 0x28
 8007e7c:	f001 fb56 	bl	800952c <_localeconv_r>
 8007e80:	6803      	ldr	r3, [r0, #0]
 8007e82:	0018      	movs	r0, r3
 8007e84:	931c      	str	r3, [sp, #112]	; 0x70
 8007e86:	f7f8 f93d 	bl	8000104 <strlen>
 8007e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8c:	9016      	str	r0, [sp, #88]	; 0x58
 8007e8e:	899b      	ldrh	r3, [r3, #12]
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	d517      	bpl.n	8007ec4 <_svfprintf_r+0x54>
 8007e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d113      	bne.n	8007ec4 <_svfprintf_r+0x54>
 8007e9c:	2140      	movs	r1, #64	; 0x40
 8007e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ea0:	f7fe ff48 	bl	8006d34 <_malloc_r>
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea6:	6018      	str	r0, [r3, #0]
 8007ea8:	6118      	str	r0, [r3, #16]
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d107      	bne.n	8007ebe <_svfprintf_r+0x4e>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	3b0d      	subs	r3, #13
 8007eb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007eb8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007eba:	b059      	add	sp, #356	; 0x164
 8007ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec2:	6153      	str	r3, [r2, #20]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	932e      	str	r3, [sp, #184]	; 0xb8
 8007eca:	932d      	str	r3, [sp, #180]	; 0xb4
 8007ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9214      	str	r2, [sp, #80]	; 0x50
 8007ed2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	af2f      	add	r7, sp, #188	; 0xbc
 8007ed8:	972c      	str	r7, [sp, #176]	; 0xb0
 8007eda:	931f      	str	r3, [sp, #124]	; 0x7c
 8007edc:	931e      	str	r3, [sp, #120]	; 0x78
 8007ede:	9312      	str	r3, [sp, #72]	; 0x48
 8007ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ee2:	931d      	str	r3, [sp, #116]	; 0x74
 8007ee4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ee6:	9d08      	ldr	r5, [sp, #32]
 8007ee8:	782b      	ldrb	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <_svfprintf_r+0x84>
 8007eee:	2b25      	cmp	r3, #37	; 0x25
 8007ef0:	d000      	beq.n	8007ef4 <_svfprintf_r+0x84>
 8007ef2:	e091      	b.n	8008018 <_svfprintf_r+0x1a8>
 8007ef4:	9b08      	ldr	r3, [sp, #32]
 8007ef6:	1aee      	subs	r6, r5, r3
 8007ef8:	429d      	cmp	r5, r3
 8007efa:	d016      	beq.n	8007f2a <_svfprintf_r+0xba>
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007f00:	607e      	str	r6, [r7, #4]
 8007f02:	199b      	adds	r3, r3, r6
 8007f04:	932e      	str	r3, [sp, #184]	; 0xb8
 8007f06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007f08:	3708      	adds	r7, #8
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8007f0e:	2b07      	cmp	r3, #7
 8007f10:	dd08      	ble.n	8007f24 <_svfprintf_r+0xb4>
 8007f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f16:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f18:	f002 fc44 	bl	800a7a4 <__ssprint_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d000      	beq.n	8007f22 <_svfprintf_r+0xb2>
 8007f20:	e1cf      	b.n	80082c2 <_svfprintf_r+0x452>
 8007f22:	af2f      	add	r7, sp, #188	; 0xbc
 8007f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f26:	199b      	adds	r3, r3, r6
 8007f28:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f2a:	782b      	ldrb	r3, [r5, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <_svfprintf_r+0xc4>
 8007f30:	f001 f99e 	bl	8009270 <_svfprintf_r+0x1400>
 8007f34:	221b      	movs	r2, #27
 8007f36:	2300      	movs	r3, #0
 8007f38:	a91e      	add	r1, sp, #120	; 0x78
 8007f3a:	1852      	adds	r2, r2, r1
 8007f3c:	7013      	strb	r3, [r2, #0]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	001e      	movs	r6, r3
 8007f42:	4252      	negs	r2, r2
 8007f44:	3501      	adds	r5, #1
 8007f46:	9209      	str	r2, [sp, #36]	; 0x24
 8007f48:	9318      	str	r3, [sp, #96]	; 0x60
 8007f4a:	1c6b      	adds	r3, r5, #1
 8007f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f4e:	782b      	ldrb	r3, [r5, #0]
 8007f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f54:	3820      	subs	r0, #32
 8007f56:	285a      	cmp	r0, #90	; 0x5a
 8007f58:	d901      	bls.n	8007f5e <_svfprintf_r+0xee>
 8007f5a:	f000 fe20 	bl	8008b9e <_svfprintf_r+0xd2e>
 8007f5e:	f7f8 f8e3 	bl	8000128 <__gnu_thumb1_case_uhi>
 8007f62:	0078      	.short	0x0078
 8007f64:	061e061e 	.word	0x061e061e
 8007f68:	061e0082 	.word	0x061e0082
 8007f6c:	061e061e 	.word	0x061e061e
 8007f70:	061e005d 	.word	0x061e005d
 8007f74:	0084061e 	.word	0x0084061e
 8007f78:	061e008c 	.word	0x061e008c
 8007f7c:	0091008a 	.word	0x0091008a
 8007f80:	00b2061e 	.word	0x00b2061e
 8007f84:	00b400b4 	.word	0x00b400b4
 8007f88:	00b400b4 	.word	0x00b400b4
 8007f8c:	00b400b4 	.word	0x00b400b4
 8007f90:	00b400b4 	.word	0x00b400b4
 8007f94:	061e00b4 	.word	0x061e00b4
 8007f98:	061e061e 	.word	0x061e061e
 8007f9c:	061e061e 	.word	0x061e061e
 8007fa0:	061e061e 	.word	0x061e061e
 8007fa4:	061e013b 	.word	0x061e013b
 8007fa8:	00f400e0 	.word	0x00f400e0
 8007fac:	013b013b 	.word	0x013b013b
 8007fb0:	061e013b 	.word	0x061e013b
 8007fb4:	061e061e 	.word	0x061e061e
 8007fb8:	00c7061e 	.word	0x00c7061e
 8007fbc:	061e061e 	.word	0x061e061e
 8007fc0:	061e04c7 	.word	0x061e04c7
 8007fc4:	061e061e 	.word	0x061e061e
 8007fc8:	061e050a 	.word	0x061e050a
 8007fcc:	061e052a 	.word	0x061e052a
 8007fd0:	055c061e 	.word	0x055c061e
 8007fd4:	061e061e 	.word	0x061e061e
 8007fd8:	061e061e 	.word	0x061e061e
 8007fdc:	061e061e 	.word	0x061e061e
 8007fe0:	061e061e 	.word	0x061e061e
 8007fe4:	061e013b 	.word	0x061e013b
 8007fe8:	00f600e0 	.word	0x00f600e0
 8007fec:	013b013b 	.word	0x013b013b
 8007ff0:	00c9013b 	.word	0x00c9013b
 8007ff4:	00dc00f6 	.word	0x00dc00f6
 8007ff8:	00d5061e 	.word	0x00d5061e
 8007ffc:	04a7061e 	.word	0x04a7061e
 8008000:	04fa04c9 	.word	0x04fa04c9
 8008004:	061e00dc 	.word	0x061e00dc
 8008008:	0080050a 	.word	0x0080050a
 800800c:	061e052c 	.word	0x061e052c
 8008010:	057c061e 	.word	0x057c061e
 8008014:	0080061e 	.word	0x0080061e
 8008018:	3501      	adds	r5, #1
 800801a:	e765      	b.n	8007ee8 <_svfprintf_r+0x78>
 800801c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800801e:	f001 fa85 	bl	800952c <_localeconv_r>
 8008022:	6843      	ldr	r3, [r0, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	931d      	str	r3, [sp, #116]	; 0x74
 8008028:	f7f8 f86c 	bl	8000104 <strlen>
 800802c:	901b      	str	r0, [sp, #108]	; 0x6c
 800802e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008030:	f001 fa7c 	bl	800952c <_localeconv_r>
 8008034:	6883      	ldr	r3, [r0, #8]
 8008036:	9312      	str	r3, [sp, #72]	; 0x48
 8008038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d011      	beq.n	8008062 <_svfprintf_r+0x1f2>
 800803e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00e      	beq.n	8008062 <_svfprintf_r+0x1f2>
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <_svfprintf_r+0x1f2>
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	431e      	orrs	r6, r3
 8008050:	e007      	b.n	8008062 <_svfprintf_r+0x1f2>
 8008052:	231b      	movs	r3, #27
 8008054:	aa1e      	add	r2, sp, #120	; 0x78
 8008056:	189b      	adds	r3, r3, r2
 8008058:	781a      	ldrb	r2, [r3, #0]
 800805a:	2a00      	cmp	r2, #0
 800805c:	d101      	bne.n	8008062 <_svfprintf_r+0x1f2>
 800805e:	3220      	adds	r2, #32
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008064:	e771      	b.n	8007f4a <_svfprintf_r+0xda>
 8008066:	2301      	movs	r3, #1
 8008068:	e7f1      	b.n	800804e <_svfprintf_r+0x1de>
 800806a:	cc08      	ldmia	r4!, {r3}
 800806c:	9318      	str	r3, [sp, #96]	; 0x60
 800806e:	2b00      	cmp	r3, #0
 8008070:	daf7      	bge.n	8008062 <_svfprintf_r+0x1f2>
 8008072:	425b      	negs	r3, r3
 8008074:	9318      	str	r3, [sp, #96]	; 0x60
 8008076:	2304      	movs	r3, #4
 8008078:	e7e9      	b.n	800804e <_svfprintf_r+0x1de>
 800807a:	231b      	movs	r3, #27
 800807c:	aa1e      	add	r2, sp, #120	; 0x78
 800807e:	189b      	adds	r3, r3, r2
 8008080:	222b      	movs	r2, #43	; 0x2b
 8008082:	e7ed      	b.n	8008060 <_svfprintf_r+0x1f0>
 8008084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008086:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	920f      	str	r2, [sp, #60]	; 0x3c
 800808e:	2a2a      	cmp	r2, #42	; 0x2a
 8008090:	d010      	beq.n	80080b4 <_svfprintf_r+0x244>
 8008092:	2200      	movs	r2, #0
 8008094:	9209      	str	r2, [sp, #36]	; 0x24
 8008096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008098:	9313      	str	r3, [sp, #76]	; 0x4c
 800809a:	3a30      	subs	r2, #48	; 0x30
 800809c:	2a09      	cmp	r2, #9
 800809e:	d900      	bls.n	80080a2 <_svfprintf_r+0x232>
 80080a0:	e757      	b.n	8007f52 <_svfprintf_r+0xe2>
 80080a2:	200a      	movs	r0, #10
 80080a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a6:	4341      	muls	r1, r0
 80080a8:	188a      	adds	r2, r1, r2
 80080aa:	9209      	str	r2, [sp, #36]	; 0x24
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80080b2:	e7f0      	b.n	8008096 <_svfprintf_r+0x226>
 80080b4:	cc04      	ldmia	r4!, {r2}
 80080b6:	9209      	str	r2, [sp, #36]	; 0x24
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	da02      	bge.n	80080c2 <_svfprintf_r+0x252>
 80080bc:	2201      	movs	r2, #1
 80080be:	4252      	negs	r2, r2
 80080c0:	9209      	str	r2, [sp, #36]	; 0x24
 80080c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80080c4:	e7cd      	b.n	8008062 <_svfprintf_r+0x1f2>
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	e7c1      	b.n	800804e <_svfprintf_r+0x1de>
 80080ca:	2200      	movs	r2, #0
 80080cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080ce:	9218      	str	r2, [sp, #96]	; 0x60
 80080d0:	210a      	movs	r1, #10
 80080d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080d4:	434a      	muls	r2, r1
 80080d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080d8:	3930      	subs	r1, #48	; 0x30
 80080da:	188a      	adds	r2, r1, r2
 80080dc:	9218      	str	r2, [sp, #96]	; 0x60
 80080de:	001a      	movs	r2, r3
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	920f      	str	r2, [sp, #60]	; 0x3c
 80080e6:	3a30      	subs	r2, #48	; 0x30
 80080e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d9f0      	bls.n	80080d0 <_svfprintf_r+0x260>
 80080ee:	e730      	b.n	8007f52 <_svfprintf_r+0xe2>
 80080f0:	2308      	movs	r3, #8
 80080f2:	e7ac      	b.n	800804e <_svfprintf_r+0x1de>
 80080f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b68      	cmp	r3, #104	; 0x68
 80080fa:	d105      	bne.n	8008108 <_svfprintf_r+0x298>
 80080fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080fe:	3301      	adds	r3, #1
 8008100:	9313      	str	r3, [sp, #76]	; 0x4c
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	e7a2      	b.n	800804e <_svfprintf_r+0x1de>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	e7a0      	b.n	800804e <_svfprintf_r+0x1de>
 800810c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b6c      	cmp	r3, #108	; 0x6c
 8008112:	d104      	bne.n	800811e <_svfprintf_r+0x2ae>
 8008114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008116:	3301      	adds	r3, #1
 8008118:	9313      	str	r3, [sp, #76]	; 0x4c
 800811a:	2320      	movs	r3, #32
 800811c:	e797      	b.n	800804e <_svfprintf_r+0x1de>
 800811e:	2310      	movs	r3, #16
 8008120:	e795      	b.n	800804e <_svfprintf_r+0x1de>
 8008122:	0021      	movs	r1, r4
 8008124:	c904      	ldmia	r1!, {r2}
 8008126:	ab3f      	add	r3, sp, #252	; 0xfc
 8008128:	910d      	str	r1, [sp, #52]	; 0x34
 800812a:	211b      	movs	r1, #27
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	2200      	movs	r2, #0
 8008130:	a81e      	add	r0, sp, #120	; 0x78
 8008132:	1809      	adds	r1, r1, r0
 8008134:	700a      	strb	r2, [r1, #0]
 8008136:	920c      	str	r2, [sp, #48]	; 0x30
 8008138:	3201      	adds	r2, #1
 800813a:	9209      	str	r2, [sp, #36]	; 0x24
 800813c:	2200      	movs	r2, #0
 800813e:	9308      	str	r3, [sp, #32]
 8008140:	0015      	movs	r5, r2
 8008142:	9219      	str	r2, [sp, #100]	; 0x64
 8008144:	9210      	str	r2, [sp, #64]	; 0x40
 8008146:	9211      	str	r2, [sp, #68]	; 0x44
 8008148:	e1f1      	b.n	800852e <_svfprintf_r+0x6be>
 800814a:	2310      	movs	r3, #16
 800814c:	431e      	orrs	r6, r3
 800814e:	06b3      	lsls	r3, r6, #26
 8008150:	d531      	bpl.n	80081b6 <_svfprintf_r+0x346>
 8008152:	2307      	movs	r3, #7
 8008154:	3407      	adds	r4, #7
 8008156:	439c      	bics	r4, r3
 8008158:	0022      	movs	r2, r4
 800815a:	ca18      	ldmia	r2!, {r3, r4}
 800815c:	9306      	str	r3, [sp, #24]
 800815e:	9407      	str	r4, [sp, #28]
 8008160:	920d      	str	r2, [sp, #52]	; 0x34
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	2301      	movs	r3, #1
 8008166:	2a00      	cmp	r2, #0
 8008168:	da0b      	bge.n	8008182 <_svfprintf_r+0x312>
 800816a:	9c06      	ldr	r4, [sp, #24]
 800816c:	9d07      	ldr	r5, [sp, #28]
 800816e:	2200      	movs	r2, #0
 8008170:	4261      	negs	r1, r4
 8008172:	41aa      	sbcs	r2, r5
 8008174:	9106      	str	r1, [sp, #24]
 8008176:	9207      	str	r2, [sp, #28]
 8008178:	221b      	movs	r2, #27
 800817a:	a91e      	add	r1, sp, #120	; 0x78
 800817c:	1852      	adds	r2, r2, r1
 800817e:	212d      	movs	r1, #45	; 0x2d
 8008180:	7011      	strb	r1, [r2, #0]
 8008182:	9907      	ldr	r1, [sp, #28]
 8008184:	9a06      	ldr	r2, [sp, #24]
 8008186:	430a      	orrs	r2, r1
 8008188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800818a:	3101      	adds	r1, #1
 800818c:	d101      	bne.n	8008192 <_svfprintf_r+0x322>
 800818e:	f001 f87b 	bl	8009288 <_svfprintf_r+0x1418>
 8008192:	2180      	movs	r1, #128	; 0x80
 8008194:	0034      	movs	r4, r6
 8008196:	438c      	bics	r4, r1
 8008198:	2a00      	cmp	r2, #0
 800819a:	d001      	beq.n	80081a0 <_svfprintf_r+0x330>
 800819c:	f001 f879 	bl	8009292 <_svfprintf_r+0x1422>
 80081a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d101      	bne.n	80081aa <_svfprintf_r+0x33a>
 80081a6:	f000 fcef 	bl	8008b88 <_svfprintf_r+0xd18>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d001      	beq.n	80081b2 <_svfprintf_r+0x342>
 80081ae:	f001 f874 	bl	800929a <_svfprintf_r+0x142a>
 80081b2:	f000 fc79 	bl	8008aa8 <_svfprintf_r+0xc38>
 80081b6:	0022      	movs	r2, r4
 80081b8:	ca08      	ldmia	r2!, {r3}
 80081ba:	920d      	str	r2, [sp, #52]	; 0x34
 80081bc:	06f2      	lsls	r2, r6, #27
 80081be:	d503      	bpl.n	80081c8 <_svfprintf_r+0x358>
 80081c0:	9306      	str	r3, [sp, #24]
 80081c2:	17db      	asrs	r3, r3, #31
 80081c4:	9307      	str	r3, [sp, #28]
 80081c6:	e7cc      	b.n	8008162 <_svfprintf_r+0x2f2>
 80081c8:	0672      	lsls	r2, r6, #25
 80081ca:	d501      	bpl.n	80081d0 <_svfprintf_r+0x360>
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	e7f7      	b.n	80081c0 <_svfprintf_r+0x350>
 80081d0:	05b2      	lsls	r2, r6, #22
 80081d2:	d5f5      	bpl.n	80081c0 <_svfprintf_r+0x350>
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	e7f3      	b.n	80081c0 <_svfprintf_r+0x350>
 80081d8:	2307      	movs	r3, #7
 80081da:	3407      	adds	r4, #7
 80081dc:	439c      	bics	r4, r3
 80081de:	0022      	movs	r2, r4
 80081e0:	ca18      	ldmia	r2!, {r3, r4}
 80081e2:	920d      	str	r2, [sp, #52]	; 0x34
 80081e4:	2201      	movs	r2, #1
 80081e6:	9314      	str	r3, [sp, #80]	; 0x50
 80081e8:	9415      	str	r4, [sp, #84]	; 0x54
 80081ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80081ee:	005c      	lsls	r4, r3, #1
 80081f0:	0864      	lsrs	r4, r4, #1
 80081f2:	0028      	movs	r0, r5
 80081f4:	0021      	movs	r1, r4
 80081f6:	4b3e      	ldr	r3, [pc, #248]	; (80082f0 <_svfprintf_r+0x480>)
 80081f8:	4252      	negs	r2, r2
 80081fa:	f7f9 ffdd 	bl	80021b8 <__aeabi_dcmpun>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d126      	bne.n	8008250 <_svfprintf_r+0x3e0>
 8008202:	2201      	movs	r2, #1
 8008204:	0028      	movs	r0, r5
 8008206:	0021      	movs	r1, r4
 8008208:	4b39      	ldr	r3, [pc, #228]	; (80082f0 <_svfprintf_r+0x480>)
 800820a:	4252      	negs	r2, r2
 800820c:	f7f8 f92c 	bl	8000468 <__aeabi_dcmple>
 8008210:	2800      	cmp	r0, #0
 8008212:	d11d      	bne.n	8008250 <_svfprintf_r+0x3e0>
 8008214:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008216:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008218:	2200      	movs	r2, #0
 800821a:	2300      	movs	r3, #0
 800821c:	f7f8 f91a 	bl	8000454 <__aeabi_dcmplt>
 8008220:	2800      	cmp	r0, #0
 8008222:	d004      	beq.n	800822e <_svfprintf_r+0x3be>
 8008224:	231b      	movs	r3, #27
 8008226:	aa1e      	add	r2, sp, #120	; 0x78
 8008228:	189b      	adds	r3, r3, r2
 800822a:	222d      	movs	r2, #45	; 0x2d
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <_svfprintf_r+0x484>)
 8008230:	9308      	str	r3, [sp, #32]
 8008232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008234:	2b47      	cmp	r3, #71	; 0x47
 8008236:	dd01      	ble.n	800823c <_svfprintf_r+0x3cc>
 8008238:	4b2f      	ldr	r3, [pc, #188]	; (80082f8 <_svfprintf_r+0x488>)
 800823a:	9308      	str	r3, [sp, #32]
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	439e      	bics	r6, r3
 8008240:	2300      	movs	r3, #0
 8008242:	930c      	str	r3, [sp, #48]	; 0x30
 8008244:	3303      	adds	r3, #3
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	2300      	movs	r3, #0
 800824a:	9319      	str	r3, [sp, #100]	; 0x64
 800824c:	f000 fc78 	bl	8008b40 <_svfprintf_r+0xcd0>
 8008250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008254:	0010      	movs	r0, r2
 8008256:	0019      	movs	r1, r3
 8008258:	f7f9 ffae 	bl	80021b8 <__aeabi_dcmpun>
 800825c:	2800      	cmp	r0, #0
 800825e:	d00e      	beq.n	800827e <_svfprintf_r+0x40e>
 8008260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008262:	2b00      	cmp	r3, #0
 8008264:	da04      	bge.n	8008270 <_svfprintf_r+0x400>
 8008266:	231b      	movs	r3, #27
 8008268:	aa1e      	add	r2, sp, #120	; 0x78
 800826a:	189b      	adds	r3, r3, r2
 800826c:	222d      	movs	r2, #45	; 0x2d
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	4b22      	ldr	r3, [pc, #136]	; (80082fc <_svfprintf_r+0x48c>)
 8008272:	9308      	str	r3, [sp, #32]
 8008274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008276:	2b47      	cmp	r3, #71	; 0x47
 8008278:	dde0      	ble.n	800823c <_svfprintf_r+0x3cc>
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <_svfprintf_r+0x490>)
 800827c:	e7dd      	b.n	800823a <_svfprintf_r+0x3ca>
 800827e:	2320      	movs	r3, #32
 8008280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008282:	439a      	bics	r2, r3
 8008284:	9210      	str	r2, [sp, #64]	; 0x40
 8008286:	2a41      	cmp	r2, #65	; 0x41
 8008288:	d123      	bne.n	80082d2 <_svfprintf_r+0x462>
 800828a:	2230      	movs	r2, #48	; 0x30
 800828c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800828e:	ab25      	add	r3, sp, #148	; 0x94
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	3248      	adds	r2, #72	; 0x48
 8008294:	2961      	cmp	r1, #97	; 0x61
 8008296:	d000      	beq.n	800829a <_svfprintf_r+0x42a>
 8008298:	3a20      	subs	r2, #32
 800829a:	705a      	strb	r2, [r3, #1]
 800829c:	2302      	movs	r3, #2
 800829e:	431e      	orrs	r6, r3
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	2b63      	cmp	r3, #99	; 0x63
 80082a4:	dd2e      	ble.n	8008304 <_svfprintf_r+0x494>
 80082a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082a8:	1c59      	adds	r1, r3, #1
 80082aa:	f7fe fd43 	bl	8006d34 <_malloc_r>
 80082ae:	9008      	str	r0, [sp, #32]
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d000      	beq.n	80082b6 <_svfprintf_r+0x446>
 80082b4:	e216      	b.n	80086e4 <_svfprintf_r+0x874>
 80082b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b8:	899a      	ldrh	r2, [r3, #12]
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	4313      	orrs	r3, r2
 80082be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082c0:	8193      	strh	r3, [r2, #12]
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	899b      	ldrh	r3, [r3, #12]
 80082c6:	065b      	lsls	r3, r3, #25
 80082c8:	d400      	bmi.n	80082cc <_svfprintf_r+0x45c>
 80082ca:	e5f5      	b.n	8007eb8 <_svfprintf_r+0x48>
 80082cc:	2301      	movs	r3, #1
 80082ce:	425b      	negs	r3, r3
 80082d0:	e5f1      	b.n	8007eb6 <_svfprintf_r+0x46>
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	900c      	str	r0, [sp, #48]	; 0x30
 80082d6:	3301      	adds	r3, #1
 80082d8:	d100      	bne.n	80082dc <_svfprintf_r+0x46c>
 80082da:	e206      	b.n	80086ea <_svfprintf_r+0x87a>
 80082dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082de:	2b47      	cmp	r3, #71	; 0x47
 80082e0:	d114      	bne.n	800830c <_svfprintf_r+0x49c>
 80082e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d111      	bne.n	800830c <_svfprintf_r+0x49c>
 80082e8:	3301      	adds	r3, #1
 80082ea:	9309      	str	r3, [sp, #36]	; 0x24
 80082ec:	e00e      	b.n	800830c <_svfprintf_r+0x49c>
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	7fefffff 	.word	0x7fefffff
 80082f4:	0800bf04 	.word	0x0800bf04
 80082f8:	0800bf08 	.word	0x0800bf08
 80082fc:	0800bf0c 	.word	0x0800bf0c
 8008300:	0800bf10 	.word	0x0800bf10
 8008304:	2300      	movs	r3, #0
 8008306:	930c      	str	r3, [sp, #48]	; 0x30
 8008308:	ab3f      	add	r3, sp, #252	; 0xfc
 800830a:	9308      	str	r3, [sp, #32]
 800830c:	2380      	movs	r3, #128	; 0x80
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	4333      	orrs	r3, r6
 8008312:	931a      	str	r3, [sp, #104]	; 0x68
 8008314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008316:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008318:	2b00      	cmp	r3, #0
 800831a:	db00      	blt.n	800831e <_svfprintf_r+0x4ae>
 800831c:	e1e7      	b.n	80086ee <_svfprintf_r+0x87e>
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	0612      	lsls	r2, r2, #24
 8008322:	4694      	mov	ip, r2
 8008324:	4463      	add	r3, ip
 8008326:	930e      	str	r3, [sp, #56]	; 0x38
 8008328:	232d      	movs	r3, #45	; 0x2d
 800832a:	9322      	str	r3, [sp, #136]	; 0x88
 800832c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800832e:	2b41      	cmp	r3, #65	; 0x41
 8008330:	d000      	beq.n	8008334 <_svfprintf_r+0x4c4>
 8008332:	e1f5      	b.n	8008720 <_svfprintf_r+0x8b0>
 8008334:	0028      	movs	r0, r5
 8008336:	aa26      	add	r2, sp, #152	; 0x98
 8008338:	990e      	ldr	r1, [sp, #56]	; 0x38
 800833a:	f001 f91b 	bl	8009574 <frexp>
 800833e:	23ff      	movs	r3, #255	; 0xff
 8008340:	2200      	movs	r2, #0
 8008342:	059b      	lsls	r3, r3, #22
 8008344:	f7f9 f8f4 	bl	8001530 <__aeabi_dmul>
 8008348:	2200      	movs	r2, #0
 800834a:	2300      	movs	r3, #0
 800834c:	0004      	movs	r4, r0
 800834e:	000d      	movs	r5, r1
 8008350:	f7f8 f87a 	bl	8000448 <__aeabi_dcmpeq>
 8008354:	2800      	cmp	r0, #0
 8008356:	d001      	beq.n	800835c <_svfprintf_r+0x4ec>
 8008358:	2301      	movs	r3, #1
 800835a:	9326      	str	r3, [sp, #152]	; 0x98
 800835c:	4bda      	ldr	r3, [pc, #872]	; (80086c8 <_svfprintf_r+0x858>)
 800835e:	9319      	str	r3, [sp, #100]	; 0x64
 8008360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008362:	2b61      	cmp	r3, #97	; 0x61
 8008364:	d001      	beq.n	800836a <_svfprintf_r+0x4fa>
 8008366:	4bd9      	ldr	r3, [pc, #868]	; (80086cc <_svfprintf_r+0x85c>)
 8008368:	9319      	str	r3, [sp, #100]	; 0x64
 800836a:	9b08      	ldr	r3, [sp, #32]
 800836c:	930e      	str	r3, [sp, #56]	; 0x38
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	3b01      	subs	r3, #1
 8008372:	9311      	str	r3, [sp, #68]	; 0x44
 8008374:	2200      	movs	r2, #0
 8008376:	4bd6      	ldr	r3, [pc, #856]	; (80086d0 <_svfprintf_r+0x860>)
 8008378:	0020      	movs	r0, r4
 800837a:	0029      	movs	r1, r5
 800837c:	f7f9 f8d8 	bl	8001530 <__aeabi_dmul>
 8008380:	000d      	movs	r5, r1
 8008382:	0004      	movs	r4, r0
 8008384:	f7f9 ff36 	bl	80021f4 <__aeabi_d2iz>
 8008388:	9021      	str	r0, [sp, #132]	; 0x84
 800838a:	f7f9 ff69 	bl	8002260 <__aeabi_i2d>
 800838e:	0002      	movs	r2, r0
 8008390:	000b      	movs	r3, r1
 8008392:	0020      	movs	r0, r4
 8008394:	0029      	movs	r1, r5
 8008396:	f7f9 fb8d 	bl	8001ab4 <__aeabi_dsub>
 800839a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800839c:	000d      	movs	r5, r1
 800839e:	001a      	movs	r2, r3
 80083a0:	3201      	adds	r2, #1
 80083a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80083a4:	920e      	str	r2, [sp, #56]	; 0x38
 80083a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80083a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083aa:	0004      	movs	r4, r0
 80083ac:	5c52      	ldrb	r2, [r2, r1]
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b2:	9320      	str	r3, [sp, #128]	; 0x80
 80083b4:	3301      	adds	r3, #1
 80083b6:	d00a      	beq.n	80083ce <_svfprintf_r+0x55e>
 80083b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ba:	2200      	movs	r2, #0
 80083bc:	3b01      	subs	r3, #1
 80083be:	9311      	str	r3, [sp, #68]	; 0x44
 80083c0:	0020      	movs	r0, r4
 80083c2:	2300      	movs	r3, #0
 80083c4:	0029      	movs	r1, r5
 80083c6:	f7f8 f83f 	bl	8000448 <__aeabi_dcmpeq>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d0d2      	beq.n	8008374 <_svfprintf_r+0x504>
 80083ce:	2200      	movs	r2, #0
 80083d0:	0020      	movs	r0, r4
 80083d2:	0029      	movs	r1, r5
 80083d4:	4bbf      	ldr	r3, [pc, #764]	; (80086d4 <_svfprintf_r+0x864>)
 80083d6:	f7f8 f851 	bl	800047c <__aeabi_dcmpgt>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d10c      	bne.n	80083f8 <_svfprintf_r+0x588>
 80083de:	2200      	movs	r2, #0
 80083e0:	0020      	movs	r0, r4
 80083e2:	0029      	movs	r1, r5
 80083e4:	4bbb      	ldr	r3, [pc, #748]	; (80086d4 <_svfprintf_r+0x864>)
 80083e6:	f7f8 f82f 	bl	8000448 <__aeabi_dcmpeq>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d100      	bne.n	80083f0 <_svfprintf_r+0x580>
 80083ee:	e191      	b.n	8008714 <_svfprintf_r+0x8a4>
 80083f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f2:	07db      	lsls	r3, r3, #31
 80083f4:	d400      	bmi.n	80083f8 <_svfprintf_r+0x588>
 80083f6:	e18d      	b.n	8008714 <_svfprintf_r+0x8a4>
 80083f8:	2030      	movs	r0, #48	; 0x30
 80083fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fc:	932a      	str	r3, [sp, #168]	; 0xa8
 80083fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008400:	7bdb      	ldrb	r3, [r3, #15]
 8008402:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008404:	3a01      	subs	r2, #1
 8008406:	922a      	str	r2, [sp, #168]	; 0xa8
 8008408:	7811      	ldrb	r1, [r2, #0]
 800840a:	4299      	cmp	r1, r3
 800840c:	d100      	bne.n	8008410 <_svfprintf_r+0x5a0>
 800840e:	e171      	b.n	80086f4 <_svfprintf_r+0x884>
 8008410:	1c4b      	adds	r3, r1, #1
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2939      	cmp	r1, #57	; 0x39
 8008416:	d101      	bne.n	800841c <_svfprintf_r+0x5ac>
 8008418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800841a:	7a9b      	ldrb	r3, [r3, #10]
 800841c:	7013      	strb	r3, [r2, #0]
 800841e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008420:	9a08      	ldr	r2, [sp, #32]
 8008422:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	930e      	str	r3, [sp, #56]	; 0x38
 8008428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800842a:	2b47      	cmp	r3, #71	; 0x47
 800842c:	d000      	beq.n	8008430 <_svfprintf_r+0x5c0>
 800842e:	e1c4      	b.n	80087ba <_svfprintf_r+0x94a>
 8008430:	1ceb      	adds	r3, r5, #3
 8008432:	db03      	blt.n	800843c <_svfprintf_r+0x5cc>
 8008434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008436:	42ab      	cmp	r3, r5
 8008438:	db00      	blt.n	800843c <_svfprintf_r+0x5cc>
 800843a:	e1e6      	b.n	800880a <_svfprintf_r+0x99a>
 800843c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800843e:	3b02      	subs	r3, #2
 8008440:	930f      	str	r3, [sp, #60]	; 0x3c
 8008442:	223c      	movs	r2, #60	; 0x3c
 8008444:	466b      	mov	r3, sp
 8008446:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008448:	189b      	adds	r3, r3, r2
 800844a:	1e6c      	subs	r4, r5, #1
 800844c:	3a1c      	subs	r2, #28
 800844e:	2000      	movs	r0, #0
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	9426      	str	r4, [sp, #152]	; 0x98
 8008454:	4391      	bics	r1, r2
 8008456:	2941      	cmp	r1, #65	; 0x41
 8008458:	d102      	bne.n	8008460 <_svfprintf_r+0x5f0>
 800845a:	330f      	adds	r3, #15
 800845c:	b2db      	uxtb	r3, r3
 800845e:	3001      	adds	r0, #1
 8008460:	a928      	add	r1, sp, #160	; 0xa0
 8008462:	700b      	strb	r3, [r1, #0]
 8008464:	232b      	movs	r3, #43	; 0x2b
 8008466:	2c00      	cmp	r4, #0
 8008468:	da02      	bge.n	8008470 <_svfprintf_r+0x600>
 800846a:	2401      	movs	r4, #1
 800846c:	3302      	adds	r3, #2
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	704b      	strb	r3, [r1, #1]
 8008472:	2c09      	cmp	r4, #9
 8008474:	dc00      	bgt.n	8008478 <_svfprintf_r+0x608>
 8008476:	e1ba      	b.n	80087ee <_svfprintf_r+0x97e>
 8008478:	2337      	movs	r3, #55	; 0x37
 800847a:	250a      	movs	r5, #10
 800847c:	aa1e      	add	r2, sp, #120	; 0x78
 800847e:	189b      	adds	r3, r3, r2
 8008480:	9310      	str	r3, [sp, #64]	; 0x40
 8008482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008484:	0020      	movs	r0, r4
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	0029      	movs	r1, r5
 800848a:	3b01      	subs	r3, #1
 800848c:	9310      	str	r3, [sp, #64]	; 0x40
 800848e:	f7f7 ffc5 	bl	800041c <__aeabi_idivmod>
 8008492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008494:	3130      	adds	r1, #48	; 0x30
 8008496:	7019      	strb	r1, [r3, #0]
 8008498:	0020      	movs	r0, r4
 800849a:	0029      	movs	r1, r5
 800849c:	9411      	str	r4, [sp, #68]	; 0x44
 800849e:	f7f7 fed7 	bl	8000250 <__divsi3>
 80084a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a4:	0004      	movs	r4, r0
 80084a6:	2b63      	cmp	r3, #99	; 0x63
 80084a8:	dceb      	bgt.n	8008482 <_svfprintf_r+0x612>
 80084aa:	222a      	movs	r2, #42	; 0x2a
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	a81e      	add	r0, sp, #120	; 0x78
 80084b0:	1e99      	subs	r1, r3, #2
 80084b2:	1812      	adds	r2, r2, r0
 80084b4:	2037      	movs	r0, #55	; 0x37
 80084b6:	000b      	movs	r3, r1
 80084b8:	3430      	adds	r4, #48	; 0x30
 80084ba:	700c      	strb	r4, [r1, #0]
 80084bc:	ac1e      	add	r4, sp, #120	; 0x78
 80084be:	1900      	adds	r0, r0, r4
 80084c0:	4283      	cmp	r3, r0
 80084c2:	d200      	bcs.n	80084c6 <_svfprintf_r+0x656>
 80084c4:	e18e      	b.n	80087e4 <_svfprintf_r+0x974>
 80084c6:	2300      	movs	r3, #0
 80084c8:	4281      	cmp	r1, r0
 80084ca:	d804      	bhi.n	80084d6 <_svfprintf_r+0x666>
 80084cc:	aa1e      	add	r2, sp, #120	; 0x78
 80084ce:	3339      	adds	r3, #57	; 0x39
 80084d0:	189b      	adds	r3, r3, r2
 80084d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	222a      	movs	r2, #42	; 0x2a
 80084d8:	a91e      	add	r1, sp, #120	; 0x78
 80084da:	1852      	adds	r2, r2, r1
 80084dc:	18d3      	adds	r3, r2, r3
 80084de:	aa28      	add	r2, sp, #160	; 0xa0
 80084e0:	1a9b      	subs	r3, r3, r2
 80084e2:	931e      	str	r3, [sp, #120]	; 0x78
 80084e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e8:	4694      	mov	ip, r2
 80084ea:	4463      	add	r3, ip
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	dc01      	bgt.n	80084f8 <_svfprintf_r+0x688>
 80084f4:	07f3      	lsls	r3, r6, #31
 80084f6:	d504      	bpl.n	8008502 <_svfprintf_r+0x692>
 80084f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	4694      	mov	ip, r2
 80084fe:	4463      	add	r3, ip
 8008500:	9309      	str	r3, [sp, #36]	; 0x24
 8008502:	2280      	movs	r2, #128	; 0x80
 8008504:	4b74      	ldr	r3, [pc, #464]	; (80086d8 <_svfprintf_r+0x868>)
 8008506:	0052      	lsls	r2, r2, #1
 8008508:	4033      	ands	r3, r6
 800850a:	431a      	orrs	r2, r3
 800850c:	2300      	movs	r3, #0
 800850e:	001d      	movs	r5, r3
 8008510:	921a      	str	r2, [sp, #104]	; 0x68
 8008512:	9310      	str	r3, [sp, #64]	; 0x40
 8008514:	9311      	str	r3, [sp, #68]	; 0x44
 8008516:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008518:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800851a:	9319      	str	r3, [sp, #100]	; 0x64
 800851c:	2b00      	cmp	r3, #0
 800851e:	d006      	beq.n	800852e <_svfprintf_r+0x6be>
 8008520:	231b      	movs	r3, #27
 8008522:	aa1e      	add	r2, sp, #120	; 0x78
 8008524:	189b      	adds	r3, r3, r2
 8008526:	222d      	movs	r2, #45	; 0x2d
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	9319      	str	r3, [sp, #100]	; 0x64
 800852e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008532:	931a      	str	r3, [sp, #104]	; 0x68
 8008534:	4293      	cmp	r3, r2
 8008536:	da00      	bge.n	800853a <_svfprintf_r+0x6ca>
 8008538:	921a      	str	r2, [sp, #104]	; 0x68
 800853a:	231b      	movs	r3, #27
 800853c:	aa1e      	add	r2, sp, #120	; 0x78
 800853e:	189b      	adds	r3, r3, r2
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	1e5a      	subs	r2, r3, #1
 8008544:	4193      	sbcs	r3, r2
 8008546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008548:	18d3      	adds	r3, r2, r3
 800854a:	931a      	str	r3, [sp, #104]	; 0x68
 800854c:	0032      	movs	r2, r6
 800854e:	2302      	movs	r3, #2
 8008550:	401a      	ands	r2, r3
 8008552:	9220      	str	r2, [sp, #128]	; 0x80
 8008554:	421e      	tst	r6, r3
 8008556:	d002      	beq.n	800855e <_svfprintf_r+0x6ee>
 8008558:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800855a:	3302      	adds	r3, #2
 800855c:	931a      	str	r3, [sp, #104]	; 0x68
 800855e:	2384      	movs	r3, #132	; 0x84
 8008560:	0032      	movs	r2, r6
 8008562:	401a      	ands	r2, r3
 8008564:	9221      	str	r2, [sp, #132]	; 0x84
 8008566:	421e      	tst	r6, r3
 8008568:	d11f      	bne.n	80085aa <_svfprintf_r+0x73a>
 800856a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800856c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800856e:	1a9c      	subs	r4, r3, r2
 8008570:	2c00      	cmp	r4, #0
 8008572:	dd1a      	ble.n	80085aa <_svfprintf_r+0x73a>
 8008574:	0039      	movs	r1, r7
 8008576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008578:	4858      	ldr	r0, [pc, #352]	; (80086dc <_svfprintf_r+0x86c>)
 800857a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800857c:	3301      	adds	r3, #1
 800857e:	3108      	adds	r1, #8
 8008580:	6038      	str	r0, [r7, #0]
 8008582:	2c10      	cmp	r4, #16
 8008584:	dd00      	ble.n	8008588 <_svfprintf_r+0x718>
 8008586:	e31c      	b.n	8008bc2 <_svfprintf_r+0xd52>
 8008588:	607c      	str	r4, [r7, #4]
 800858a:	18a4      	adds	r4, r4, r2
 800858c:	000f      	movs	r7, r1
 800858e:	942e      	str	r4, [sp, #184]	; 0xb8
 8008590:	932d      	str	r3, [sp, #180]	; 0xb4
 8008592:	2b07      	cmp	r3, #7
 8008594:	dd09      	ble.n	80085aa <_svfprintf_r+0x73a>
 8008596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008598:	980a      	ldr	r0, [sp, #40]	; 0x28
 800859a:	aa2c      	add	r2, sp, #176	; 0xb0
 800859c:	f002 f902 	bl	800a7a4 <__ssprint_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d001      	beq.n	80085a8 <_svfprintf_r+0x738>
 80085a4:	f000 fe43 	bl	800922e <_svfprintf_r+0x13be>
 80085a8:	af2f      	add	r7, sp, #188	; 0xbc
 80085aa:	221b      	movs	r2, #27
 80085ac:	a91e      	add	r1, sp, #120	; 0x78
 80085ae:	1852      	adds	r2, r2, r1
 80085b0:	7811      	ldrb	r1, [r2, #0]
 80085b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80085b4:	2900      	cmp	r1, #0
 80085b6:	d014      	beq.n	80085e2 <_svfprintf_r+0x772>
 80085b8:	603a      	str	r2, [r7, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	932e      	str	r3, [sp, #184]	; 0xb8
 80085c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80085c8:	3708      	adds	r7, #8
 80085ca:	2b07      	cmp	r3, #7
 80085cc:	dd09      	ble.n	80085e2 <_svfprintf_r+0x772>
 80085ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80085d4:	f002 f8e6 	bl	800a7a4 <__ssprint_r>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d001      	beq.n	80085e0 <_svfprintf_r+0x770>
 80085dc:	f000 fe27 	bl	800922e <_svfprintf_r+0x13be>
 80085e0:	af2f      	add	r7, sp, #188	; 0xbc
 80085e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80085e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d015      	beq.n	8008616 <_svfprintf_r+0x7a6>
 80085ea:	aa25      	add	r2, sp, #148	; 0x94
 80085ec:	603a      	str	r2, [r7, #0]
 80085ee:	2202      	movs	r2, #2
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80085f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	3301      	adds	r3, #1
 80085fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80085fc:	3708      	adds	r7, #8
 80085fe:	2b07      	cmp	r3, #7
 8008600:	dd09      	ble.n	8008616 <_svfprintf_r+0x7a6>
 8008602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008604:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008606:	aa2c      	add	r2, sp, #176	; 0xb0
 8008608:	f002 f8cc 	bl	800a7a4 <__ssprint_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	d001      	beq.n	8008614 <_svfprintf_r+0x7a4>
 8008610:	f000 fe0d 	bl	800922e <_svfprintf_r+0x13be>
 8008614:	af2f      	add	r7, sp, #188	; 0xbc
 8008616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008618:	2b80      	cmp	r3, #128	; 0x80
 800861a:	d11f      	bne.n	800865c <_svfprintf_r+0x7ec>
 800861c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800861e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008620:	1a9c      	subs	r4, r3, r2
 8008622:	2c00      	cmp	r4, #0
 8008624:	dd1a      	ble.n	800865c <_svfprintf_r+0x7ec>
 8008626:	0039      	movs	r1, r7
 8008628:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800862a:	482d      	ldr	r0, [pc, #180]	; (80086e0 <_svfprintf_r+0x870>)
 800862c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800862e:	3301      	adds	r3, #1
 8008630:	3108      	adds	r1, #8
 8008632:	6038      	str	r0, [r7, #0]
 8008634:	2c10      	cmp	r4, #16
 8008636:	dd00      	ble.n	800863a <_svfprintf_r+0x7ca>
 8008638:	e2d6      	b.n	8008be8 <_svfprintf_r+0xd78>
 800863a:	607c      	str	r4, [r7, #4]
 800863c:	18a4      	adds	r4, r4, r2
 800863e:	000f      	movs	r7, r1
 8008640:	942e      	str	r4, [sp, #184]	; 0xb8
 8008642:	932d      	str	r3, [sp, #180]	; 0xb4
 8008644:	2b07      	cmp	r3, #7
 8008646:	dd09      	ble.n	800865c <_svfprintf_r+0x7ec>
 8008648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800864c:	aa2c      	add	r2, sp, #176	; 0xb0
 800864e:	f002 f8a9 	bl	800a7a4 <__ssprint_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	d001      	beq.n	800865a <_svfprintf_r+0x7ea>
 8008656:	f000 fdea 	bl	800922e <_svfprintf_r+0x13be>
 800865a:	af2f      	add	r7, sp, #188	; 0xbc
 800865c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800865e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008660:	1a9c      	subs	r4, r3, r2
 8008662:	2c00      	cmp	r4, #0
 8008664:	dd1a      	ble.n	800869c <_svfprintf_r+0x82c>
 8008666:	0039      	movs	r1, r7
 8008668:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800866a:	481d      	ldr	r0, [pc, #116]	; (80086e0 <_svfprintf_r+0x870>)
 800866c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800866e:	3301      	adds	r3, #1
 8008670:	3108      	adds	r1, #8
 8008672:	6038      	str	r0, [r7, #0]
 8008674:	2c10      	cmp	r4, #16
 8008676:	dd00      	ble.n	800867a <_svfprintf_r+0x80a>
 8008678:	e2c9      	b.n	8008c0e <_svfprintf_r+0xd9e>
 800867a:	18a2      	adds	r2, r4, r2
 800867c:	607c      	str	r4, [r7, #4]
 800867e:	922e      	str	r2, [sp, #184]	; 0xb8
 8008680:	000f      	movs	r7, r1
 8008682:	932d      	str	r3, [sp, #180]	; 0xb4
 8008684:	2b07      	cmp	r3, #7
 8008686:	dd09      	ble.n	800869c <_svfprintf_r+0x82c>
 8008688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800868a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800868c:	aa2c      	add	r2, sp, #176	; 0xb0
 800868e:	f002 f889 	bl	800a7a4 <__ssprint_r>
 8008692:	2800      	cmp	r0, #0
 8008694:	d001      	beq.n	800869a <_svfprintf_r+0x82a>
 8008696:	f000 fdca 	bl	800922e <_svfprintf_r+0x13be>
 800869a:	af2f      	add	r7, sp, #188	; 0xbc
 800869c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800869e:	9319      	str	r3, [sp, #100]	; 0x64
 80086a0:	05f3      	lsls	r3, r6, #23
 80086a2:	d500      	bpl.n	80086a6 <_svfprintf_r+0x836>
 80086a4:	e2ce      	b.n	8008c44 <_svfprintf_r+0xdd4>
 80086a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a8:	9b08      	ldr	r3, [sp, #32]
 80086aa:	4694      	mov	ip, r2
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086b4:	4463      	add	r3, ip
 80086b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80086b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80086ba:	3301      	adds	r3, #1
 80086bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80086be:	2b07      	cmp	r3, #7
 80086c0:	dd00      	ble.n	80086c4 <_svfprintf_r+0x854>
 80086c2:	e3a3      	b.n	8008e0c <_svfprintf_r+0xf9c>
 80086c4:	3708      	adds	r7, #8
 80086c6:	e301      	b.n	8008ccc <_svfprintf_r+0xe5c>
 80086c8:	0800bf14 	.word	0x0800bf14
 80086cc:	0800bf25 	.word	0x0800bf25
 80086d0:	40300000 	.word	0x40300000
 80086d4:	3fe00000 	.word	0x3fe00000
 80086d8:	fffffbff 	.word	0xfffffbff
 80086dc:	0800bf38 	.word	0x0800bf38
 80086e0:	0800bf48 	.word	0x0800bf48
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	930c      	str	r3, [sp, #48]	; 0x30
 80086e8:	e610      	b.n	800830c <_svfprintf_r+0x49c>
 80086ea:	2306      	movs	r3, #6
 80086ec:	e5fd      	b.n	80082ea <_svfprintf_r+0x47a>
 80086ee:	930e      	str	r3, [sp, #56]	; 0x38
 80086f0:	2300      	movs	r3, #0
 80086f2:	e61a      	b.n	800832a <_svfprintf_r+0x4ba>
 80086f4:	7010      	strb	r0, [r2, #0]
 80086f6:	e684      	b.n	8008402 <_svfprintf_r+0x592>
 80086f8:	7018      	strb	r0, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	1aca      	subs	r2, r1, r3
 80086fe:	d5fb      	bpl.n	80086f8 <_svfprintf_r+0x888>
 8008700:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008702:	2300      	movs	r3, #0
 8008704:	3201      	adds	r2, #1
 8008706:	db01      	blt.n	800870c <_svfprintf_r+0x89c>
 8008708:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800870a:	3301      	adds	r3, #1
 800870c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870e:	18d3      	adds	r3, r2, r3
 8008710:	9323      	str	r3, [sp, #140]	; 0x8c
 8008712:	e684      	b.n	800841e <_svfprintf_r+0x5ae>
 8008714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008716:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008718:	2030      	movs	r0, #48	; 0x30
 800871a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800871c:	1851      	adds	r1, r2, r1
 800871e:	e7ed      	b.n	80086fc <_svfprintf_r+0x88c>
 8008720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008722:	2303      	movs	r3, #3
 8008724:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008726:	2a46      	cmp	r2, #70	; 0x46
 8008728:	d006      	beq.n	8008738 <_svfprintf_r+0x8c8>
 800872a:	0014      	movs	r4, r2
 800872c:	3c45      	subs	r4, #69	; 0x45
 800872e:	4262      	negs	r2, r4
 8008730:	4154      	adcs	r4, r2
 8008732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008734:	3b01      	subs	r3, #1
 8008736:	1914      	adds	r4, r2, r4
 8008738:	aa2a      	add	r2, sp, #168	; 0xa8
 800873a:	9204      	str	r2, [sp, #16]
 800873c:	aa27      	add	r2, sp, #156	; 0x9c
 800873e:	9203      	str	r2, [sp, #12]
 8008740:	aa26      	add	r2, sp, #152	; 0x98
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	002a      	movs	r2, r5
 8008748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800874c:	9401      	str	r4, [sp, #4]
 800874e:	f001 f87f 	bl	8009850 <_dtoa_r>
 8008752:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008754:	9008      	str	r0, [sp, #32]
 8008756:	2b47      	cmp	r3, #71	; 0x47
 8008758:	d103      	bne.n	8008762 <_svfprintf_r+0x8f2>
 800875a:	07f3      	lsls	r3, r6, #31
 800875c:	d401      	bmi.n	8008762 <_svfprintf_r+0x8f2>
 800875e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008760:	e65e      	b.n	8008420 <_svfprintf_r+0x5b0>
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	191b      	adds	r3, r3, r4
 8008766:	9311      	str	r3, [sp, #68]	; 0x44
 8008768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800876a:	2b46      	cmp	r3, #70	; 0x46
 800876c:	d112      	bne.n	8008794 <_svfprintf_r+0x924>
 800876e:	9b08      	ldr	r3, [sp, #32]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b30      	cmp	r3, #48	; 0x30
 8008774:	d10a      	bne.n	800878c <_svfprintf_r+0x91c>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	0028      	movs	r0, r5
 800877c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800877e:	f7f7 fe63 	bl	8000448 <__aeabi_dcmpeq>
 8008782:	2800      	cmp	r0, #0
 8008784:	d102      	bne.n	800878c <_svfprintf_r+0x91c>
 8008786:	2301      	movs	r3, #1
 8008788:	1b1b      	subs	r3, r3, r4
 800878a:	9326      	str	r3, [sp, #152]	; 0x98
 800878c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800878e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008790:	18d3      	adds	r3, r2, r3
 8008792:	9311      	str	r3, [sp, #68]	; 0x44
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	0028      	movs	r0, r5
 800879a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800879c:	f7f7 fe54 	bl	8000448 <__aeabi_dcmpeq>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d001      	beq.n	80087a8 <_svfprintf_r+0x938>
 80087a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80087a8:	2230      	movs	r2, #48	; 0x30
 80087aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80087ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087ae:	4299      	cmp	r1, r3
 80087b0:	d9d5      	bls.n	800875e <_svfprintf_r+0x8ee>
 80087b2:	1c59      	adds	r1, r3, #1
 80087b4:	912a      	str	r1, [sp, #168]	; 0xa8
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	e7f7      	b.n	80087aa <_svfprintf_r+0x93a>
 80087ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087bc:	2b46      	cmp	r3, #70	; 0x46
 80087be:	d000      	beq.n	80087c2 <_svfprintf_r+0x952>
 80087c0:	e63f      	b.n	8008442 <_svfprintf_r+0x5d2>
 80087c2:	2201      	movs	r2, #1
 80087c4:	0033      	movs	r3, r6
 80087c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c8:	4013      	ands	r3, r2
 80087ca:	430b      	orrs	r3, r1
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	dd2c      	ble.n	800882a <_svfprintf_r+0x9ba>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d046      	beq.n	8008862 <_svfprintf_r+0x9f2>
 80087d4:	000a      	movs	r2, r1
 80087d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087d8:	18eb      	adds	r3, r5, r3
 80087da:	18d3      	adds	r3, r2, r3
 80087dc:	9309      	str	r3, [sp, #36]	; 0x24
 80087de:	2366      	movs	r3, #102	; 0x66
 80087e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80087e2:	e030      	b.n	8008846 <_svfprintf_r+0x9d6>
 80087e4:	781c      	ldrb	r4, [r3, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	7014      	strb	r4, [r2, #0]
 80087ea:	3201      	adds	r2, #1
 80087ec:	e668      	b.n	80084c0 <_svfprintf_r+0x650>
 80087ee:	222a      	movs	r2, #42	; 0x2a
 80087f0:	ab1e      	add	r3, sp, #120	; 0x78
 80087f2:	18d2      	adds	r2, r2, r3
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d104      	bne.n	8008802 <_svfprintf_r+0x992>
 80087f8:	2330      	movs	r3, #48	; 0x30
 80087fa:	222b      	movs	r2, #43	; 0x2b
 80087fc:	708b      	strb	r3, [r1, #2]
 80087fe:	ab1e      	add	r3, sp, #120	; 0x78
 8008800:	18d2      	adds	r2, r2, r3
 8008802:	3430      	adds	r4, #48	; 0x30
 8008804:	1c53      	adds	r3, r2, #1
 8008806:	7014      	strb	r4, [r2, #0]
 8008808:	e669      	b.n	80084de <_svfprintf_r+0x66e>
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	42ab      	cmp	r3, r5
 800880e:	dd12      	ble.n	8008836 <_svfprintf_r+0x9c6>
 8008810:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008814:	4694      	mov	ip, r2
 8008816:	4463      	add	r3, ip
 8008818:	9309      	str	r3, [sp, #36]	; 0x24
 800881a:	2367      	movs	r3, #103	; 0x67
 800881c:	930f      	str	r3, [sp, #60]	; 0x3c
 800881e:	2d00      	cmp	r5, #0
 8008820:	dc11      	bgt.n	8008846 <_svfprintf_r+0x9d6>
 8008822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008824:	1b5b      	subs	r3, r3, r5
 8008826:	3301      	adds	r3, #1
 8008828:	e00c      	b.n	8008844 <_svfprintf_r+0x9d4>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01b      	beq.n	8008866 <_svfprintf_r+0x9f6>
 800882e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008832:	3301      	adds	r3, #1
 8008834:	e7d1      	b.n	80087da <_svfprintf_r+0x96a>
 8008836:	2367      	movs	r3, #103	; 0x67
 8008838:	9509      	str	r5, [sp, #36]	; 0x24
 800883a:	930f      	str	r3, [sp, #60]	; 0x3c
 800883c:	07f3      	lsls	r3, r6, #31
 800883e:	d502      	bpl.n	8008846 <_svfprintf_r+0x9d6>
 8008840:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008842:	18eb      	adds	r3, r5, r3
 8008844:	9309      	str	r3, [sp, #36]	; 0x24
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	0032      	movs	r2, r6
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	401a      	ands	r2, r3
 800884e:	9211      	str	r2, [sp, #68]	; 0x44
 8008850:	2200      	movs	r2, #0
 8008852:	9210      	str	r2, [sp, #64]	; 0x40
 8008854:	421e      	tst	r6, r3
 8008856:	d100      	bne.n	800885a <_svfprintf_r+0x9ea>
 8008858:	e65d      	b.n	8008516 <_svfprintf_r+0x6a6>
 800885a:	4295      	cmp	r5, r2
 800885c:	dc25      	bgt.n	80088aa <_svfprintf_r+0xa3a>
 800885e:	9211      	str	r2, [sp, #68]	; 0x44
 8008860:	e659      	b.n	8008516 <_svfprintf_r+0x6a6>
 8008862:	9509      	str	r5, [sp, #36]	; 0x24
 8008864:	e7bb      	b.n	80087de <_svfprintf_r+0x96e>
 8008866:	2366      	movs	r3, #102	; 0x66
 8008868:	9209      	str	r2, [sp, #36]	; 0x24
 800886a:	930f      	str	r3, [sp, #60]	; 0x3c
 800886c:	e7eb      	b.n	8008846 <_svfprintf_r+0x9d6>
 800886e:	42ab      	cmp	r3, r5
 8008870:	da0e      	bge.n	8008890 <_svfprintf_r+0xa20>
 8008872:	1aed      	subs	r5, r5, r3
 8008874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <_svfprintf_r+0xa32>
 800887c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800887e:	3301      	adds	r3, #1
 8008880:	9311      	str	r3, [sp, #68]	; 0x44
 8008882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008884:	3301      	adds	r3, #1
 8008886:	9312      	str	r3, [sp, #72]	; 0x48
 8008888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2bff      	cmp	r3, #255	; 0xff
 800888e:	d1ee      	bne.n	800886e <_svfprintf_r+0x9fe>
 8008890:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008894:	189b      	adds	r3, r3, r2
 8008896:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008898:	4353      	muls	r3, r2
 800889a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800889c:	189b      	adds	r3, r3, r2
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	e639      	b.n	8008516 <_svfprintf_r+0x6a6>
 80088a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088a4:	3301      	adds	r3, #1
 80088a6:	9310      	str	r3, [sp, #64]	; 0x40
 80088a8:	e7ee      	b.n	8008888 <_svfprintf_r+0xa18>
 80088aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ac:	9311      	str	r3, [sp, #68]	; 0x44
 80088ae:	e7eb      	b.n	8008888 <_svfprintf_r+0xa18>
 80088b0:	1d23      	adds	r3, r4, #4
 80088b2:	930d      	str	r3, [sp, #52]	; 0x34
 80088b4:	06b3      	lsls	r3, r6, #26
 80088b6:	d509      	bpl.n	80088cc <_svfprintf_r+0xa5c>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	17d2      	asrs	r2, r2, #31
 80088c0:	605a      	str	r2, [r3, #4]
 80088c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80088c6:	9308      	str	r3, [sp, #32]
 80088c8:	f7ff fb0d 	bl	8007ee6 <_svfprintf_r+0x76>
 80088cc:	06f3      	lsls	r3, r6, #27
 80088ce:	d503      	bpl.n	80088d8 <_svfprintf_r+0xa68>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e7f4      	b.n	80088c2 <_svfprintf_r+0xa52>
 80088d8:	0673      	lsls	r3, r6, #25
 80088da:	d503      	bpl.n	80088e4 <_svfprintf_r+0xa74>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e7ee      	b.n	80088c2 <_svfprintf_r+0xa52>
 80088e4:	05b6      	lsls	r6, r6, #22
 80088e6:	d5f3      	bpl.n	80088d0 <_svfprintf_r+0xa60>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e7e8      	b.n	80088c2 <_svfprintf_r+0xa52>
 80088f0:	2310      	movs	r3, #16
 80088f2:	431e      	orrs	r6, r3
 80088f4:	2320      	movs	r3, #32
 80088f6:	0030      	movs	r0, r6
 80088f8:	4018      	ands	r0, r3
 80088fa:	421e      	tst	r6, r3
 80088fc:	d00f      	beq.n	800891e <_svfprintf_r+0xaae>
 80088fe:	3b19      	subs	r3, #25
 8008900:	3407      	adds	r4, #7
 8008902:	439c      	bics	r4, r3
 8008904:	0022      	movs	r2, r4
 8008906:	ca18      	ldmia	r2!, {r3, r4}
 8008908:	9306      	str	r3, [sp, #24]
 800890a:	9407      	str	r4, [sp, #28]
 800890c:	920d      	str	r2, [sp, #52]	; 0x34
 800890e:	4bc9      	ldr	r3, [pc, #804]	; (8008c34 <_svfprintf_r+0xdc4>)
 8008910:	401e      	ands	r6, r3
 8008912:	2300      	movs	r3, #0
 8008914:	221b      	movs	r2, #27
 8008916:	a91e      	add	r1, sp, #120	; 0x78
 8008918:	1852      	adds	r2, r2, r1
 800891a:	2100      	movs	r1, #0
 800891c:	e430      	b.n	8008180 <_svfprintf_r+0x310>
 800891e:	0022      	movs	r2, r4
 8008920:	ca08      	ldmia	r2!, {r3}
 8008922:	0031      	movs	r1, r6
 8008924:	920d      	str	r2, [sp, #52]	; 0x34
 8008926:	2210      	movs	r2, #16
 8008928:	4011      	ands	r1, r2
 800892a:	4216      	tst	r6, r2
 800892c:	d002      	beq.n	8008934 <_svfprintf_r+0xac4>
 800892e:	9306      	str	r3, [sp, #24]
 8008930:	9007      	str	r0, [sp, #28]
 8008932:	e7ec      	b.n	800890e <_svfprintf_r+0xa9e>
 8008934:	2240      	movs	r2, #64	; 0x40
 8008936:	0030      	movs	r0, r6
 8008938:	4010      	ands	r0, r2
 800893a:	4216      	tst	r6, r2
 800893c:	d003      	beq.n	8008946 <_svfprintf_r+0xad6>
 800893e:	b29b      	uxth	r3, r3
 8008940:	9306      	str	r3, [sp, #24]
 8008942:	9107      	str	r1, [sp, #28]
 8008944:	e7e3      	b.n	800890e <_svfprintf_r+0xa9e>
 8008946:	2280      	movs	r2, #128	; 0x80
 8008948:	0031      	movs	r1, r6
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	4011      	ands	r1, r2
 800894e:	4216      	tst	r6, r2
 8008950:	d0f6      	beq.n	8008940 <_svfprintf_r+0xad0>
 8008952:	b2db      	uxtb	r3, r3
 8008954:	e7eb      	b.n	800892e <_svfprintf_r+0xabe>
 8008956:	0023      	movs	r3, r4
 8008958:	cb04      	ldmia	r3!, {r2}
 800895a:	49b7      	ldr	r1, [pc, #732]	; (8008c38 <_svfprintf_r+0xdc8>)
 800895c:	9206      	str	r2, [sp, #24]
 800895e:	aa25      	add	r2, sp, #148	; 0x94
 8008960:	8011      	strh	r1, [r2, #0]
 8008962:	4ab6      	ldr	r2, [pc, #728]	; (8008c3c <_svfprintf_r+0xdcc>)
 8008964:	930d      	str	r3, [sp, #52]	; 0x34
 8008966:	2300      	movs	r3, #0
 8008968:	921f      	str	r2, [sp, #124]	; 0x7c
 800896a:	2278      	movs	r2, #120	; 0x78
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	3302      	adds	r3, #2
 8008970:	431e      	orrs	r6, r3
 8008972:	920f      	str	r2, [sp, #60]	; 0x3c
 8008974:	e7ce      	b.n	8008914 <_svfprintf_r+0xaa4>
 8008976:	0023      	movs	r3, r4
 8008978:	cb04      	ldmia	r3!, {r2}
 800897a:	2400      	movs	r4, #0
 800897c:	930d      	str	r3, [sp, #52]	; 0x34
 800897e:	231b      	movs	r3, #27
 8008980:	9208      	str	r2, [sp, #32]
 8008982:	aa1e      	add	r2, sp, #120	; 0x78
 8008984:	189b      	adds	r3, r3, r2
 8008986:	701c      	strb	r4, [r3, #0]
 8008988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898a:	3301      	adds	r3, #1
 800898c:	d00e      	beq.n	80089ac <_svfprintf_r+0xb3c>
 800898e:	0021      	movs	r1, r4
 8008990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008992:	9808      	ldr	r0, [sp, #32]
 8008994:	f000 fde2 	bl	800955c <memchr>
 8008998:	900c      	str	r0, [sp, #48]	; 0x30
 800899a:	42a0      	cmp	r0, r4
 800899c:	d100      	bne.n	80089a0 <_svfprintf_r+0xb30>
 800899e:	e10d      	b.n	8008bbc <_svfprintf_r+0xd4c>
 80089a0:	9a08      	ldr	r2, [sp, #32]
 80089a2:	1a83      	subs	r3, r0, r2
 80089a4:	9309      	str	r3, [sp, #36]	; 0x24
 80089a6:	0023      	movs	r3, r4
 80089a8:	940c      	str	r4, [sp, #48]	; 0x30
 80089aa:	e44e      	b.n	800824a <_svfprintf_r+0x3da>
 80089ac:	9808      	ldr	r0, [sp, #32]
 80089ae:	f7f7 fba9 	bl	8000104 <strlen>
 80089b2:	9009      	str	r0, [sp, #36]	; 0x24
 80089b4:	e7f7      	b.n	80089a6 <_svfprintf_r+0xb36>
 80089b6:	2310      	movs	r3, #16
 80089b8:	431e      	orrs	r6, r3
 80089ba:	2320      	movs	r3, #32
 80089bc:	0030      	movs	r0, r6
 80089be:	4018      	ands	r0, r3
 80089c0:	421e      	tst	r6, r3
 80089c2:	d009      	beq.n	80089d8 <_svfprintf_r+0xb68>
 80089c4:	3b19      	subs	r3, #25
 80089c6:	3407      	adds	r4, #7
 80089c8:	439c      	bics	r4, r3
 80089ca:	0022      	movs	r2, r4
 80089cc:	ca18      	ldmia	r2!, {r3, r4}
 80089ce:	9306      	str	r3, [sp, #24]
 80089d0:	9407      	str	r4, [sp, #28]
 80089d2:	920d      	str	r2, [sp, #52]	; 0x34
 80089d4:	2301      	movs	r3, #1
 80089d6:	e79d      	b.n	8008914 <_svfprintf_r+0xaa4>
 80089d8:	0023      	movs	r3, r4
 80089da:	cb04      	ldmia	r3!, {r2}
 80089dc:	0031      	movs	r1, r6
 80089de:	930d      	str	r3, [sp, #52]	; 0x34
 80089e0:	2310      	movs	r3, #16
 80089e2:	4019      	ands	r1, r3
 80089e4:	421e      	tst	r6, r3
 80089e6:	d003      	beq.n	80089f0 <_svfprintf_r+0xb80>
 80089e8:	9206      	str	r2, [sp, #24]
 80089ea:	9007      	str	r0, [sp, #28]
 80089ec:	3b0f      	subs	r3, #15
 80089ee:	e791      	b.n	8008914 <_svfprintf_r+0xaa4>
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	0030      	movs	r0, r6
 80089f4:	4018      	ands	r0, r3
 80089f6:	421e      	tst	r6, r3
 80089f8:	d003      	beq.n	8008a02 <_svfprintf_r+0xb92>
 80089fa:	b293      	uxth	r3, r2
 80089fc:	9306      	str	r3, [sp, #24]
 80089fe:	9107      	str	r1, [sp, #28]
 8008a00:	e7e8      	b.n	80089d4 <_svfprintf_r+0xb64>
 8008a02:	2380      	movs	r3, #128	; 0x80
 8008a04:	0031      	movs	r1, r6
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4019      	ands	r1, r3
 8008a0a:	421e      	tst	r6, r3
 8008a0c:	d003      	beq.n	8008a16 <_svfprintf_r+0xba6>
 8008a0e:	b2d3      	uxtb	r3, r2
 8008a10:	9306      	str	r3, [sp, #24]
 8008a12:	9007      	str	r0, [sp, #28]
 8008a14:	e7de      	b.n	80089d4 <_svfprintf_r+0xb64>
 8008a16:	9206      	str	r2, [sp, #24]
 8008a18:	e7f1      	b.n	80089fe <_svfprintf_r+0xb8e>
 8008a1a:	4b89      	ldr	r3, [pc, #548]	; (8008c40 <_svfprintf_r+0xdd0>)
 8008a1c:	0030      	movs	r0, r6
 8008a1e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008a20:	2320      	movs	r3, #32
 8008a22:	4018      	ands	r0, r3
 8008a24:	421e      	tst	r6, r3
 8008a26:	d01a      	beq.n	8008a5e <_svfprintf_r+0xbee>
 8008a28:	3b19      	subs	r3, #25
 8008a2a:	3407      	adds	r4, #7
 8008a2c:	439c      	bics	r4, r3
 8008a2e:	0022      	movs	r2, r4
 8008a30:	ca18      	ldmia	r2!, {r3, r4}
 8008a32:	9306      	str	r3, [sp, #24]
 8008a34:	9407      	str	r4, [sp, #28]
 8008a36:	920d      	str	r2, [sp, #52]	; 0x34
 8008a38:	07f3      	lsls	r3, r6, #31
 8008a3a:	d50a      	bpl.n	8008a52 <_svfprintf_r+0xbe2>
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	9a07      	ldr	r2, [sp, #28]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d006      	beq.n	8008a52 <_svfprintf_r+0xbe2>
 8008a44:	2230      	movs	r2, #48	; 0x30
 8008a46:	ab25      	add	r3, sp, #148	; 0x94
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a4c:	705a      	strb	r2, [r3, #1]
 8008a4e:	2302      	movs	r3, #2
 8008a50:	431e      	orrs	r6, r3
 8008a52:	4b78      	ldr	r3, [pc, #480]	; (8008c34 <_svfprintf_r+0xdc4>)
 8008a54:	401e      	ands	r6, r3
 8008a56:	2302      	movs	r3, #2
 8008a58:	e75c      	b.n	8008914 <_svfprintf_r+0xaa4>
 8008a5a:	4b78      	ldr	r3, [pc, #480]	; (8008c3c <_svfprintf_r+0xdcc>)
 8008a5c:	e7de      	b.n	8008a1c <_svfprintf_r+0xbac>
 8008a5e:	0023      	movs	r3, r4
 8008a60:	cb04      	ldmia	r3!, {r2}
 8008a62:	0031      	movs	r1, r6
 8008a64:	930d      	str	r3, [sp, #52]	; 0x34
 8008a66:	2310      	movs	r3, #16
 8008a68:	4019      	ands	r1, r3
 8008a6a:	421e      	tst	r6, r3
 8008a6c:	d002      	beq.n	8008a74 <_svfprintf_r+0xc04>
 8008a6e:	9206      	str	r2, [sp, #24]
 8008a70:	9007      	str	r0, [sp, #28]
 8008a72:	e7e1      	b.n	8008a38 <_svfprintf_r+0xbc8>
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	0030      	movs	r0, r6
 8008a78:	4018      	ands	r0, r3
 8008a7a:	421e      	tst	r6, r3
 8008a7c:	d003      	beq.n	8008a86 <_svfprintf_r+0xc16>
 8008a7e:	b293      	uxth	r3, r2
 8008a80:	9306      	str	r3, [sp, #24]
 8008a82:	9107      	str	r1, [sp, #28]
 8008a84:	e7d8      	b.n	8008a38 <_svfprintf_r+0xbc8>
 8008a86:	2380      	movs	r3, #128	; 0x80
 8008a88:	0031      	movs	r1, r6
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4019      	ands	r1, r3
 8008a8e:	421e      	tst	r6, r3
 8008a90:	d002      	beq.n	8008a98 <_svfprintf_r+0xc28>
 8008a92:	b2d3      	uxtb	r3, r2
 8008a94:	9306      	str	r3, [sp, #24]
 8008a96:	e7eb      	b.n	8008a70 <_svfprintf_r+0xc00>
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	e7f2      	b.n	8008a82 <_svfprintf_r+0xc12>
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <_svfprintf_r+0xc48>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d807      	bhi.n	8008ab8 <_svfprintf_r+0xc48>
 8008aa8:	23e7      	movs	r3, #231	; 0xe7
 8008aaa:	aa1e      	add	r2, sp, #120	; 0x78
 8008aac:	189b      	adds	r3, r3, r2
 8008aae:	9a06      	ldr	r2, [sp, #24]
 8008ab0:	3230      	adds	r2, #48	; 0x30
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	f000 fc18 	bl	80092e8 <_svfprintf_r+0x1478>
 8008ab8:	2680      	movs	r6, #128	; 0x80
 8008aba:	2300      	movs	r3, #0
 8008abc:	00f6      	lsls	r6, r6, #3
 8008abe:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac0:	ad58      	add	r5, sp, #352	; 0x160
 8008ac2:	4026      	ands	r6, r4
 8008ac4:	220a      	movs	r2, #10
 8008ac6:	9806      	ldr	r0, [sp, #24]
 8008ac8:	9907      	ldr	r1, [sp, #28]
 8008aca:	2300      	movs	r3, #0
 8008acc:	f7f7 fcea 	bl	80004a4 <__aeabi_uldivmod>
 8008ad0:	1e6b      	subs	r3, r5, #1
 8008ad2:	3230      	adds	r2, #48	; 0x30
 8008ad4:	9308      	str	r3, [sp, #32]
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ada:	900c      	str	r0, [sp, #48]	; 0x30
 8008adc:	3301      	adds	r3, #1
 8008ade:	9110      	str	r1, [sp, #64]	; 0x40
 8008ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	d01d      	beq.n	8008b22 <_svfprintf_r+0xcb2>
 8008ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d118      	bne.n	8008b22 <_svfprintf_r+0xcb2>
 8008af0:	2aff      	cmp	r2, #255	; 0xff
 8008af2:	d016      	beq.n	8008b22 <_svfprintf_r+0xcb2>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <_svfprintf_r+0xc90>
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d910      	bls.n	8008b22 <_svfprintf_r+0xcb2>
 8008b00:	9b08      	ldr	r3, [sp, #32]
 8008b02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b04:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	0018      	movs	r0, r3
 8008b0a:	9308      	str	r3, [sp, #32]
 8008b0c:	f7fe fc6e 	bl	80073ec <strncpy>
 8008b10:	2200      	movs	r2, #0
 8008b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b14:	920e      	str	r2, [sp, #56]	; 0x38
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	1e5a      	subs	r2, r3, #1
 8008b1a:	4193      	sbcs	r3, r2
 8008b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b1e:	18d3      	adds	r3, r2, r3
 8008b20:	9312      	str	r3, [sp, #72]	; 0x48
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10f      	bne.n	8008b48 <_svfprintf_r+0xcd8>
 8008b28:	9b06      	ldr	r3, [sp, #24]
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d80c      	bhi.n	8008b48 <_svfprintf_r+0xcd8>
 8008b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b30:	9a08      	ldr	r2, [sp, #32]
 8008b32:	9319      	str	r3, [sp, #100]	; 0x64
 8008b34:	ab58      	add	r3, sp, #352	; 0x160
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	0026      	movs	r6, r4
 8008b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b40:	001d      	movs	r5, r3
 8008b42:	9310      	str	r3, [sp, #64]	; 0x40
 8008b44:	9311      	str	r3, [sp, #68]	; 0x44
 8008b46:	e4f2      	b.n	800852e <_svfprintf_r+0x6be>
 8008b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b4a:	9d08      	ldr	r5, [sp, #32]
 8008b4c:	9306      	str	r3, [sp, #24]
 8008b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	e7b7      	b.n	8008ac4 <_svfprintf_r+0xc54>
 8008b54:	200f      	movs	r0, #15
 8008b56:	ab58      	add	r3, sp, #352	; 0x160
 8008b58:	9308      	str	r3, [sp, #32]
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	9b06      	ldr	r3, [sp, #24]
 8008b64:	4003      	ands	r3, r0
 8008b66:	5cd3      	ldrb	r3, [r2, r3]
 8008b68:	9a08      	ldr	r2, [sp, #32]
 8008b6a:	7013      	strb	r3, [r2, #0]
 8008b6c:	9b07      	ldr	r3, [sp, #28]
 8008b6e:	0719      	lsls	r1, r3, #28
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	091a      	lsrs	r2, r3, #4
 8008b74:	9b07      	ldr	r3, [sp, #28]
 8008b76:	4311      	orrs	r1, r2
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	000b      	movs	r3, r1
 8008b7e:	9a07      	ldr	r2, [sp, #28]
 8008b80:	9106      	str	r1, [sp, #24]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	d1e9      	bne.n	8008b5a <_svfprintf_r+0xcea>
 8008b86:	e7d2      	b.n	8008b2e <_svfprintf_r+0xcbe>
 8008b88:	aa58      	add	r2, sp, #352	; 0x160
 8008b8a:	9208      	str	r2, [sp, #32]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1ce      	bne.n	8008b2e <_svfprintf_r+0xcbe>
 8008b90:	07f6      	lsls	r6, r6, #31
 8008b92:	d5cc      	bpl.n	8008b2e <_svfprintf_r+0xcbe>
 8008b94:	aa1e      	add	r2, sp, #120	; 0x78
 8008b96:	33e7      	adds	r3, #231	; 0xe7
 8008b98:	189b      	adds	r3, r3, r2
 8008b9a:	2230      	movs	r2, #48	; 0x30
 8008b9c:	e789      	b.n	8008ab2 <_svfprintf_r+0xc42>
 8008b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d100      	bne.n	8008ba6 <_svfprintf_r+0xd36>
 8008ba4:	e364      	b.n	8009270 <_svfprintf_r+0x1400>
 8008ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ba8:	211b      	movs	r1, #27
 8008baa:	ab3f      	add	r3, sp, #252	; 0xfc
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	a81e      	add	r0, sp, #120	; 0x78
 8008bb2:	1809      	adds	r1, r1, r0
 8008bb4:	700a      	strb	r2, [r1, #0]
 8008bb6:	940d      	str	r4, [sp, #52]	; 0x34
 8008bb8:	f7ff fabd 	bl	8008136 <_svfprintf_r+0x2c6>
 8008bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bbe:	f7ff fb44 	bl	800824a <_svfprintf_r+0x3da>
 8008bc2:	2010      	movs	r0, #16
 8008bc4:	1812      	adds	r2, r2, r0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	922e      	str	r2, [sp, #184]	; 0xb8
 8008bca:	932d      	str	r3, [sp, #180]	; 0xb4
 8008bcc:	2b07      	cmp	r3, #7
 8008bce:	dd08      	ble.n	8008be2 <_svfprintf_r+0xd72>
 8008bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008bd4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008bd6:	f001 fde5 	bl	800a7a4 <__ssprint_r>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d000      	beq.n	8008be0 <_svfprintf_r+0xd70>
 8008bde:	e326      	b.n	800922e <_svfprintf_r+0x13be>
 8008be0:	a92f      	add	r1, sp, #188	; 0xbc
 8008be2:	000f      	movs	r7, r1
 8008be4:	3c10      	subs	r4, #16
 8008be6:	e4c5      	b.n	8008574 <_svfprintf_r+0x704>
 8008be8:	2010      	movs	r0, #16
 8008bea:	1812      	adds	r2, r2, r0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	922e      	str	r2, [sp, #184]	; 0xb8
 8008bf0:	932d      	str	r3, [sp, #180]	; 0xb4
 8008bf2:	2b07      	cmp	r3, #7
 8008bf4:	dd08      	ble.n	8008c08 <_svfprintf_r+0xd98>
 8008bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008bfa:	aa2c      	add	r2, sp, #176	; 0xb0
 8008bfc:	f001 fdd2 	bl	800a7a4 <__ssprint_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d000      	beq.n	8008c06 <_svfprintf_r+0xd96>
 8008c04:	e313      	b.n	800922e <_svfprintf_r+0x13be>
 8008c06:	a92f      	add	r1, sp, #188	; 0xbc
 8008c08:	000f      	movs	r7, r1
 8008c0a:	3c10      	subs	r4, #16
 8008c0c:	e50b      	b.n	8008626 <_svfprintf_r+0x7b6>
 8008c0e:	2010      	movs	r0, #16
 8008c10:	1812      	adds	r2, r2, r0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	922e      	str	r2, [sp, #184]	; 0xb8
 8008c16:	932d      	str	r3, [sp, #180]	; 0xb4
 8008c18:	2b07      	cmp	r3, #7
 8008c1a:	dd08      	ble.n	8008c2e <_svfprintf_r+0xdbe>
 8008c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c20:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c22:	f001 fdbf 	bl	800a7a4 <__ssprint_r>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d000      	beq.n	8008c2c <_svfprintf_r+0xdbc>
 8008c2a:	e300      	b.n	800922e <_svfprintf_r+0x13be>
 8008c2c:	a92f      	add	r1, sp, #188	; 0xbc
 8008c2e:	000f      	movs	r7, r1
 8008c30:	3c10      	subs	r4, #16
 8008c32:	e518      	b.n	8008666 <_svfprintf_r+0x7f6>
 8008c34:	fffffbff 	.word	0xfffffbff
 8008c38:	00007830 	.word	0x00007830
 8008c3c:	0800bf14 	.word	0x0800bf14
 8008c40:	0800bf25 	.word	0x0800bf25
 8008c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c46:	2b65      	cmp	r3, #101	; 0x65
 8008c48:	dc00      	bgt.n	8008c4c <_svfprintf_r+0xddc>
 8008c4a:	e241      	b.n	80090d0 <_svfprintf_r+0x1260>
 8008c4c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008c4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008c50:	2200      	movs	r2, #0
 8008c52:	2300      	movs	r3, #0
 8008c54:	f7f7 fbf8 	bl	8000448 <__aeabi_dcmpeq>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d077      	beq.n	8008d4c <_svfprintf_r+0xedc>
 8008c5c:	4bca      	ldr	r3, [pc, #808]	; (8008f88 <_svfprintf_r+0x1118>)
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	2301      	movs	r3, #1
 8008c62:	607b      	str	r3, [r7, #4]
 8008c64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c66:	3708      	adds	r7, #8
 8008c68:	3301      	adds	r3, #1
 8008c6a:	932e      	str	r3, [sp, #184]	; 0xb8
 8008c6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008c6e:	3301      	adds	r3, #1
 8008c70:	932d      	str	r3, [sp, #180]	; 0xb4
 8008c72:	2b07      	cmp	r3, #7
 8008c74:	dd08      	ble.n	8008c88 <_svfprintf_r+0xe18>
 8008c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c7a:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c7c:	f001 fd92 	bl	800a7a4 <__ssprint_r>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d000      	beq.n	8008c86 <_svfprintf_r+0xe16>
 8008c84:	e2d3      	b.n	800922e <_svfprintf_r+0x13be>
 8008c86:	af2f      	add	r7, sp, #188	; 0xbc
 8008c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	db01      	blt.n	8008c94 <_svfprintf_r+0xe24>
 8008c90:	07f3      	lsls	r3, r6, #31
 8008c92:	d51b      	bpl.n	8008ccc <_svfprintf_r+0xe5c>
 8008c94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008c96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c9c:	607b      	str	r3, [r7, #4]
 8008c9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	189b      	adds	r3, r3, r2
 8008ca4:	932e      	str	r3, [sp, #184]	; 0xb8
 8008ca6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008ca8:	3301      	adds	r3, #1
 8008caa:	932d      	str	r3, [sp, #180]	; 0xb4
 8008cac:	2b07      	cmp	r3, #7
 8008cae:	dd08      	ble.n	8008cc2 <_svfprintf_r+0xe52>
 8008cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008cb4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008cb6:	f001 fd75 	bl	800a7a4 <__ssprint_r>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d000      	beq.n	8008cc0 <_svfprintf_r+0xe50>
 8008cbe:	e2b6      	b.n	800922e <_svfprintf_r+0x13be>
 8008cc0:	af2f      	add	r7, sp, #188	; 0xbc
 8008cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cc4:	2510      	movs	r5, #16
 8008cc6:	1e5c      	subs	r4, r3, #1
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	dc2e      	bgt.n	8008d2a <_svfprintf_r+0xeba>
 8008ccc:	0776      	lsls	r6, r6, #29
 8008cce:	d500      	bpl.n	8008cd2 <_svfprintf_r+0xe62>
 8008cd0:	e290      	b.n	80091f4 <_svfprintf_r+0x1384>
 8008cd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008cd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	da00      	bge.n	8008cdc <_svfprintf_r+0xe6c>
 8008cda:	0013      	movs	r3, r2
 8008cdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cde:	18d3      	adds	r3, r2, r3
 8008ce0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ce2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <_svfprintf_r+0xe88>
 8008ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008cec:	aa2c      	add	r2, sp, #176	; 0xb0
 8008cee:	f001 fd59 	bl	800a7a4 <__ssprint_r>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d000      	beq.n	8008cf8 <_svfprintf_r+0xe88>
 8008cf6:	e29a      	b.n	800922e <_svfprintf_r+0x13be>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8008cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d000      	beq.n	8008d04 <_svfprintf_r+0xe94>
 8008d02:	e2b0      	b.n	8009266 <_svfprintf_r+0x13f6>
 8008d04:	af2f      	add	r7, sp, #188	; 0xbc
 8008d06:	e5dc      	b.n	80088c2 <_svfprintf_r+0xa52>
 8008d08:	3210      	adds	r2, #16
 8008d0a:	607d      	str	r5, [r7, #4]
 8008d0c:	922e      	str	r2, [sp, #184]	; 0xb8
 8008d0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008d10:	2b07      	cmp	r3, #7
 8008d12:	dd08      	ble.n	8008d26 <_svfprintf_r+0xeb6>
 8008d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d18:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d1a:	f001 fd43 	bl	800a7a4 <__ssprint_r>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d000      	beq.n	8008d24 <_svfprintf_r+0xeb4>
 8008d22:	e284      	b.n	800922e <_svfprintf_r+0x13be>
 8008d24:	a92f      	add	r1, sp, #188	; 0xbc
 8008d26:	000f      	movs	r7, r1
 8008d28:	3c10      	subs	r4, #16
 8008d2a:	0039      	movs	r1, r7
 8008d2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008d2e:	4897      	ldr	r0, [pc, #604]	; (8008f8c <_svfprintf_r+0x111c>)
 8008d30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008d32:	3301      	adds	r3, #1
 8008d34:	3108      	adds	r1, #8
 8008d36:	6038      	str	r0, [r7, #0]
 8008d38:	2c10      	cmp	r4, #16
 8008d3a:	dce5      	bgt.n	8008d08 <_svfprintf_r+0xe98>
 8008d3c:	607c      	str	r4, [r7, #4]
 8008d3e:	18a4      	adds	r4, r4, r2
 8008d40:	942e      	str	r4, [sp, #184]	; 0xb8
 8008d42:	000f      	movs	r7, r1
 8008d44:	932d      	str	r3, [sp, #180]	; 0xb4
 8008d46:	2b07      	cmp	r3, #7
 8008d48:	ddc0      	ble.n	8008ccc <_svfprintf_r+0xe5c>
 8008d4a:	e05f      	b.n	8008e0c <_svfprintf_r+0xf9c>
 8008d4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dc78      	bgt.n	8008e44 <_svfprintf_r+0xfd4>
 8008d52:	4b8d      	ldr	r3, [pc, #564]	; (8008f88 <_svfprintf_r+0x1118>)
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	2301      	movs	r3, #1
 8008d58:	607b      	str	r3, [r7, #4]
 8008d5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	3301      	adds	r3, #1
 8008d60:	932e      	str	r3, [sp, #184]	; 0xb8
 8008d62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008d64:	3301      	adds	r3, #1
 8008d66:	932d      	str	r3, [sp, #180]	; 0xb4
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	dd08      	ble.n	8008d7e <_svfprintf_r+0xf0e>
 8008d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d70:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d72:	f001 fd17 	bl	800a7a4 <__ssprint_r>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d000      	beq.n	8008d7c <_svfprintf_r+0xf0c>
 8008d7a:	e258      	b.n	800922e <_svfprintf_r+0x13be>
 8008d7c:	af2f      	add	r7, sp, #188	; 0xbc
 8008d7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008d84:	430b      	orrs	r3, r1
 8008d86:	2101      	movs	r1, #1
 8008d88:	4031      	ands	r1, r6
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	d09e      	beq.n	8008ccc <_svfprintf_r+0xe5c>
 8008d8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	189a      	adds	r2, r3, r2
 8008d98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008d9a:	922e      	str	r2, [sp, #184]	; 0xb8
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	932d      	str	r3, [sp, #180]	; 0xb4
 8008da0:	3708      	adds	r7, #8
 8008da2:	2b07      	cmp	r3, #7
 8008da4:	dd08      	ble.n	8008db8 <_svfprintf_r+0xf48>
 8008da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008da8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008daa:	aa2c      	add	r2, sp, #176	; 0xb0
 8008dac:	f001 fcfa 	bl	800a7a4 <__ssprint_r>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d000      	beq.n	8008db6 <_svfprintf_r+0xf46>
 8008db4:	e23b      	b.n	800922e <_svfprintf_r+0x13be>
 8008db6:	af2f      	add	r7, sp, #188	; 0xbc
 8008db8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008dba:	2c00      	cmp	r4, #0
 8008dbc:	da19      	bge.n	8008df2 <_svfprintf_r+0xf82>
 8008dbe:	0038      	movs	r0, r7
 8008dc0:	2510      	movs	r5, #16
 8008dc2:	4264      	negs	r4, r4
 8008dc4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008dc6:	4a71      	ldr	r2, [pc, #452]	; (8008f8c <_svfprintf_r+0x111c>)
 8008dc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008dca:	3101      	adds	r1, #1
 8008dcc:	3708      	adds	r7, #8
 8008dce:	6002      	str	r2, [r0, #0]
 8008dd0:	2c10      	cmp	r4, #16
 8008dd2:	dc25      	bgt.n	8008e20 <_svfprintf_r+0xfb0>
 8008dd4:	6044      	str	r4, [r0, #4]
 8008dd6:	18e4      	adds	r4, r4, r3
 8008dd8:	942e      	str	r4, [sp, #184]	; 0xb8
 8008dda:	912d      	str	r1, [sp, #180]	; 0xb4
 8008ddc:	2907      	cmp	r1, #7
 8008dde:	dd08      	ble.n	8008df2 <_svfprintf_r+0xf82>
 8008de0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008de2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008de4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008de6:	f001 fcdd 	bl	800a7a4 <__ssprint_r>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d000      	beq.n	8008df0 <_svfprintf_r+0xf80>
 8008dee:	e21e      	b.n	800922e <_svfprintf_r+0x13be>
 8008df0:	af2f      	add	r7, sp, #188	; 0xbc
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dfa:	18d2      	adds	r2, r2, r3
 8008dfc:	922e      	str	r2, [sp, #184]	; 0xb8
 8008dfe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	3201      	adds	r2, #1
 8008e04:	922d      	str	r2, [sp, #180]	; 0xb4
 8008e06:	2a07      	cmp	r2, #7
 8008e08:	dc00      	bgt.n	8008e0c <_svfprintf_r+0xf9c>
 8008e0a:	e45b      	b.n	80086c4 <_svfprintf_r+0x854>
 8008e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e10:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e12:	f001 fcc7 	bl	800a7a4 <__ssprint_r>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d000      	beq.n	8008e1c <_svfprintf_r+0xfac>
 8008e1a:	e208      	b.n	800922e <_svfprintf_r+0x13be>
 8008e1c:	af2f      	add	r7, sp, #188	; 0xbc
 8008e1e:	e755      	b.n	8008ccc <_svfprintf_r+0xe5c>
 8008e20:	3310      	adds	r3, #16
 8008e22:	6045      	str	r5, [r0, #4]
 8008e24:	932e      	str	r3, [sp, #184]	; 0xb8
 8008e26:	912d      	str	r1, [sp, #180]	; 0xb4
 8008e28:	2907      	cmp	r1, #7
 8008e2a:	dd08      	ble.n	8008e3e <_svfprintf_r+0xfce>
 8008e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e30:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e32:	f001 fcb7 	bl	800a7a4 <__ssprint_r>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d000      	beq.n	8008e3c <_svfprintf_r+0xfcc>
 8008e3a:	e1f8      	b.n	800922e <_svfprintf_r+0x13be>
 8008e3c:	af2f      	add	r7, sp, #188	; 0xbc
 8008e3e:	0038      	movs	r0, r7
 8008e40:	3c10      	subs	r4, #16
 8008e42:	e7bf      	b.n	8008dc4 <_svfprintf_r+0xf54>
 8008e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e46:	002c      	movs	r4, r5
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	dd00      	ble.n	8008e4e <_svfprintf_r+0xfde>
 8008e4c:	001c      	movs	r4, r3
 8008e4e:	2c00      	cmp	r4, #0
 8008e50:	dd14      	ble.n	8008e7c <_svfprintf_r+0x100c>
 8008e52:	9b08      	ldr	r3, [sp, #32]
 8008e54:	607c      	str	r4, [r7, #4]
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	18e3      	adds	r3, r4, r3
 8008e5e:	932e      	str	r3, [sp, #184]	; 0xb8
 8008e60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008e62:	3301      	adds	r3, #1
 8008e64:	932d      	str	r3, [sp, #180]	; 0xb4
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	dd08      	ble.n	8008e7c <_svfprintf_r+0x100c>
 8008e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e6e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e70:	f001 fc98 	bl	800a7a4 <__ssprint_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d000      	beq.n	8008e7a <_svfprintf_r+0x100a>
 8008e78:	e1d9      	b.n	800922e <_svfprintf_r+0x13be>
 8008e7a:	af2f      	add	r7, sp, #188	; 0xbc
 8008e7c:	43e3      	mvns	r3, r4
 8008e7e:	17db      	asrs	r3, r3, #31
 8008e80:	401c      	ands	r4, r3
 8008e82:	1b2c      	subs	r4, r5, r4
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	dd18      	ble.n	8008eba <_svfprintf_r+0x104a>
 8008e88:	0039      	movs	r1, r7
 8008e8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008e8c:	483f      	ldr	r0, [pc, #252]	; (8008f8c <_svfprintf_r+0x111c>)
 8008e8e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008e90:	3301      	adds	r3, #1
 8008e92:	3108      	adds	r1, #8
 8008e94:	6038      	str	r0, [r7, #0]
 8008e96:	2c10      	cmp	r4, #16
 8008e98:	dc7a      	bgt.n	8008f90 <_svfprintf_r+0x1120>
 8008e9a:	607c      	str	r4, [r7, #4]
 8008e9c:	18a4      	adds	r4, r4, r2
 8008e9e:	000f      	movs	r7, r1
 8008ea0:	942e      	str	r4, [sp, #184]	; 0xb8
 8008ea2:	932d      	str	r3, [sp, #180]	; 0xb4
 8008ea4:	2b07      	cmp	r3, #7
 8008ea6:	dd08      	ble.n	8008eba <_svfprintf_r+0x104a>
 8008ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eac:	aa2c      	add	r2, sp, #176	; 0xb0
 8008eae:	f001 fc79 	bl	800a7a4 <__ssprint_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d000      	beq.n	8008eb8 <_svfprintf_r+0x1048>
 8008eb6:	e1ba      	b.n	800922e <_svfprintf_r+0x13be>
 8008eb8:	af2f      	add	r7, sp, #188	; 0xbc
 8008eba:	9b08      	ldr	r3, [sp, #32]
 8008ebc:	195d      	adds	r5, r3, r5
 8008ebe:	0573      	lsls	r3, r6, #21
 8008ec0:	d50b      	bpl.n	8008eda <_svfprintf_r+0x106a>
 8008ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d176      	bne.n	8008fb6 <_svfprintf_r+0x1146>
 8008ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d176      	bne.n	8008fbc <_svfprintf_r+0x114c>
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	429d      	cmp	r5, r3
 8008ed6:	d900      	bls.n	8008eda <_svfprintf_r+0x106a>
 8008ed8:	001d      	movs	r5, r3
 8008eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	db01      	blt.n	8008ee6 <_svfprintf_r+0x1076>
 8008ee2:	07f3      	lsls	r3, r6, #31
 8008ee4:	d516      	bpl.n	8008f14 <_svfprintf_r+0x10a4>
 8008ee6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008ee8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008eee:	607b      	str	r3, [r7, #4]
 8008ef0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	932e      	str	r3, [sp, #184]	; 0xb8
 8008ef8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008efa:	3301      	adds	r3, #1
 8008efc:	932d      	str	r3, [sp, #180]	; 0xb4
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	dd08      	ble.n	8008f14 <_svfprintf_r+0x10a4>
 8008f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f06:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f08:	f001 fc4c 	bl	800a7a4 <__ssprint_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d000      	beq.n	8008f12 <_svfprintf_r+0x10a2>
 8008f10:	e18d      	b.n	800922e <_svfprintf_r+0x13be>
 8008f12:	af2f      	add	r7, sp, #188	; 0xbc
 8008f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f16:	9b08      	ldr	r3, [sp, #32]
 8008f18:	4694      	mov	ip, r2
 8008f1a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008f1c:	4463      	add	r3, ip
 8008f1e:	1b5b      	subs	r3, r3, r5
 8008f20:	1b14      	subs	r4, r2, r4
 8008f22:	429c      	cmp	r4, r3
 8008f24:	dd00      	ble.n	8008f28 <_svfprintf_r+0x10b8>
 8008f26:	001c      	movs	r4, r3
 8008f28:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	dd12      	ble.n	8008f54 <_svfprintf_r+0x10e4>
 8008f2e:	18e3      	adds	r3, r4, r3
 8008f30:	932e      	str	r3, [sp, #184]	; 0xb8
 8008f32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f34:	603d      	str	r5, [r7, #0]
 8008f36:	3301      	adds	r3, #1
 8008f38:	607c      	str	r4, [r7, #4]
 8008f3a:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	dd08      	ble.n	8008f54 <_svfprintf_r+0x10e4>
 8008f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f46:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f48:	f001 fc2c 	bl	800a7a4 <__ssprint_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d000      	beq.n	8008f52 <_svfprintf_r+0x10e2>
 8008f50:	e16d      	b.n	800922e <_svfprintf_r+0x13be>
 8008f52:	af2f      	add	r7, sp, #188	; 0xbc
 8008f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f58:	2510      	movs	r5, #16
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	43e2      	mvns	r2, r4
 8008f5e:	17d2      	asrs	r2, r2, #31
 8008f60:	4014      	ands	r4, r2
 8008f62:	1b1c      	subs	r4, r3, r4
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	dc00      	bgt.n	8008f6a <_svfprintf_r+0x10fa>
 8008f68:	e6b0      	b.n	8008ccc <_svfprintf_r+0xe5c>
 8008f6a:	0039      	movs	r1, r7
 8008f6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f6e:	4807      	ldr	r0, [pc, #28]	; (8008f8c <_svfprintf_r+0x111c>)
 8008f70:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008f72:	3301      	adds	r3, #1
 8008f74:	3108      	adds	r1, #8
 8008f76:	6038      	str	r0, [r7, #0]
 8008f78:	2c10      	cmp	r4, #16
 8008f7a:	dd00      	ble.n	8008f7e <_svfprintf_r+0x110e>
 8008f7c:	e096      	b.n	80090ac <_svfprintf_r+0x123c>
 8008f7e:	1912      	adds	r2, r2, r4
 8008f80:	607c      	str	r4, [r7, #4]
 8008f82:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f84:	e6dd      	b.n	8008d42 <_svfprintf_r+0xed2>
 8008f86:	46c0      	nop			; (mov r8, r8)
 8008f88:	0800bf36 	.word	0x0800bf36
 8008f8c:	0800bf48 	.word	0x0800bf48
 8008f90:	2010      	movs	r0, #16
 8008f92:	1812      	adds	r2, r2, r0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f98:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f9a:	2b07      	cmp	r3, #7
 8008f9c:	dd08      	ble.n	8008fb0 <_svfprintf_r+0x1140>
 8008f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fa2:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fa4:	f001 fbfe 	bl	800a7a4 <__ssprint_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d000      	beq.n	8008fae <_svfprintf_r+0x113e>
 8008fac:	e13f      	b.n	800922e <_svfprintf_r+0x13be>
 8008fae:	a92f      	add	r1, sp, #188	; 0xbc
 8008fb0:	000f      	movs	r7, r1
 8008fb2:	3c10      	subs	r4, #16
 8008fb4:	e768      	b.n	8008e88 <_svfprintf_r+0x1018>
 8008fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d05d      	beq.n	8009078 <_svfprintf_r+0x1208>
 8008fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	9310      	str	r3, [sp, #64]	; 0x40
 8008fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fca:	607b      	str	r3, [r7, #4]
 8008fcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008fce:	3708      	adds	r7, #8
 8008fd0:	189b      	adds	r3, r3, r2
 8008fd2:	932e      	str	r3, [sp, #184]	; 0xb8
 8008fd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	932d      	str	r3, [sp, #180]	; 0xb4
 8008fda:	2b07      	cmp	r3, #7
 8008fdc:	dd08      	ble.n	8008ff0 <_svfprintf_r+0x1180>
 8008fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fe0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fe2:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fe4:	f001 fbde 	bl	800a7a4 <__ssprint_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d000      	beq.n	8008fee <_svfprintf_r+0x117e>
 8008fec:	e11f      	b.n	800922e <_svfprintf_r+0x13be>
 8008fee:	af2f      	add	r7, sp, #188	; 0xbc
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff4:	189c      	adds	r4, r3, r2
 8008ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ff8:	1b64      	subs	r4, r4, r5
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	dd00      	ble.n	8009002 <_svfprintf_r+0x1192>
 8009000:	001c      	movs	r4, r3
 8009002:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009004:	2c00      	cmp	r4, #0
 8009006:	dd12      	ble.n	800902e <_svfprintf_r+0x11be>
 8009008:	18e3      	adds	r3, r4, r3
 800900a:	932e      	str	r3, [sp, #184]	; 0xb8
 800900c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800900e:	603d      	str	r5, [r7, #0]
 8009010:	3301      	adds	r3, #1
 8009012:	607c      	str	r4, [r7, #4]
 8009014:	932d      	str	r3, [sp, #180]	; 0xb4
 8009016:	3708      	adds	r7, #8
 8009018:	2b07      	cmp	r3, #7
 800901a:	dd08      	ble.n	800902e <_svfprintf_r+0x11be>
 800901c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800901e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009020:	aa2c      	add	r2, sp, #176	; 0xb0
 8009022:	f001 fbbf 	bl	800a7a4 <__ssprint_r>
 8009026:	2800      	cmp	r0, #0
 8009028:	d000      	beq.n	800902c <_svfprintf_r+0x11bc>
 800902a:	e100      	b.n	800922e <_svfprintf_r+0x13be>
 800902c:	af2f      	add	r7, sp, #188	; 0xbc
 800902e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	43e3      	mvns	r3, r4
 8009034:	17db      	asrs	r3, r3, #31
 8009036:	401c      	ands	r4, r3
 8009038:	1b14      	subs	r4, r2, r4
 800903a:	2c00      	cmp	r4, #0
 800903c:	dd18      	ble.n	8009070 <_svfprintf_r+0x1200>
 800903e:	0039      	movs	r1, r7
 8009040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009042:	48aa      	ldr	r0, [pc, #680]	; (80092ec <_svfprintf_r+0x147c>)
 8009044:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009046:	3301      	adds	r3, #1
 8009048:	3108      	adds	r1, #8
 800904a:	6038      	str	r0, [r7, #0]
 800904c:	2c10      	cmp	r4, #16
 800904e:	dc1a      	bgt.n	8009086 <_svfprintf_r+0x1216>
 8009050:	1912      	adds	r2, r2, r4
 8009052:	607c      	str	r4, [r7, #4]
 8009054:	922e      	str	r2, [sp, #184]	; 0xb8
 8009056:	000f      	movs	r7, r1
 8009058:	932d      	str	r3, [sp, #180]	; 0xb4
 800905a:	2b07      	cmp	r3, #7
 800905c:	dd08      	ble.n	8009070 <_svfprintf_r+0x1200>
 800905e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009060:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009062:	aa2c      	add	r2, sp, #176	; 0xb0
 8009064:	f001 fb9e 	bl	800a7a4 <__ssprint_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	d000      	beq.n	800906e <_svfprintf_r+0x11fe>
 800906c:	e0df      	b.n	800922e <_svfprintf_r+0x13be>
 800906e:	af2f      	add	r7, sp, #188	; 0xbc
 8009070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	18ed      	adds	r5, r5, r3
 8009076:	e724      	b.n	8008ec2 <_svfprintf_r+0x1052>
 8009078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800907a:	3b01      	subs	r3, #1
 800907c:	9312      	str	r3, [sp, #72]	; 0x48
 800907e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009080:	3b01      	subs	r3, #1
 8009082:	9311      	str	r3, [sp, #68]	; 0x44
 8009084:	e79d      	b.n	8008fc2 <_svfprintf_r+0x1152>
 8009086:	2010      	movs	r0, #16
 8009088:	1812      	adds	r2, r2, r0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	922e      	str	r2, [sp, #184]	; 0xb8
 800908e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009090:	2b07      	cmp	r3, #7
 8009092:	dd08      	ble.n	80090a6 <_svfprintf_r+0x1236>
 8009094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009096:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009098:	aa2c      	add	r2, sp, #176	; 0xb0
 800909a:	f001 fb83 	bl	800a7a4 <__ssprint_r>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d000      	beq.n	80090a4 <_svfprintf_r+0x1234>
 80090a2:	e0c4      	b.n	800922e <_svfprintf_r+0x13be>
 80090a4:	a92f      	add	r1, sp, #188	; 0xbc
 80090a6:	000f      	movs	r7, r1
 80090a8:	3c10      	subs	r4, #16
 80090aa:	e7c8      	b.n	800903e <_svfprintf_r+0x11ce>
 80090ac:	3210      	adds	r2, #16
 80090ae:	607d      	str	r5, [r7, #4]
 80090b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80090b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80090b4:	2b07      	cmp	r3, #7
 80090b6:	dd08      	ble.n	80090ca <_svfprintf_r+0x125a>
 80090b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80090be:	f001 fb71 	bl	800a7a4 <__ssprint_r>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d000      	beq.n	80090c8 <_svfprintf_r+0x1258>
 80090c6:	e0b2      	b.n	800922e <_svfprintf_r+0x13be>
 80090c8:	a92f      	add	r1, sp, #188	; 0xbc
 80090ca:	000f      	movs	r7, r1
 80090cc:	3c10      	subs	r4, #16
 80090ce:	e74c      	b.n	8008f6a <_svfprintf_r+0x10fa>
 80090d0:	003c      	movs	r4, r7
 80090d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80090d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	3101      	adds	r1, #1
 80090da:	3301      	adds	r3, #1
 80090dc:	3408      	adds	r4, #8
 80090de:	2a01      	cmp	r2, #1
 80090e0:	dc03      	bgt.n	80090ea <_svfprintf_r+0x127a>
 80090e2:	2201      	movs	r2, #1
 80090e4:	4216      	tst	r6, r2
 80090e6:	d100      	bne.n	80090ea <_svfprintf_r+0x127a>
 80090e8:	e07f      	b.n	80091ea <_svfprintf_r+0x137a>
 80090ea:	9a08      	ldr	r2, [sp, #32]
 80090ec:	912e      	str	r1, [sp, #184]	; 0xb8
 80090ee:	603a      	str	r2, [r7, #0]
 80090f0:	2201      	movs	r2, #1
 80090f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80090f4:	607a      	str	r2, [r7, #4]
 80090f6:	2b07      	cmp	r3, #7
 80090f8:	dd08      	ble.n	800910c <_svfprintf_r+0x129c>
 80090fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8009100:	f001 fb50 	bl	800a7a4 <__ssprint_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	d000      	beq.n	800910a <_svfprintf_r+0x129a>
 8009108:	e091      	b.n	800922e <_svfprintf_r+0x13be>
 800910a:	ac2f      	add	r4, sp, #188	; 0xbc
 800910c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800910e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009114:	6063      	str	r3, [r4, #4]
 8009116:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009118:	3408      	adds	r4, #8
 800911a:	189b      	adds	r3, r3, r2
 800911c:	932e      	str	r3, [sp, #184]	; 0xb8
 800911e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009120:	3301      	adds	r3, #1
 8009122:	932d      	str	r3, [sp, #180]	; 0xb4
 8009124:	2b07      	cmp	r3, #7
 8009126:	dd07      	ble.n	8009138 <_svfprintf_r+0x12c8>
 8009128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800912a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800912c:	aa2c      	add	r2, sp, #176	; 0xb0
 800912e:	f001 fb39 	bl	800a7a4 <__ssprint_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d17b      	bne.n	800922e <_svfprintf_r+0x13be>
 8009136:	ac2f      	add	r4, sp, #188	; 0xbc
 8009138:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800913a:	2200      	movs	r2, #0
 800913c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800913e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009140:	9309      	str	r3, [sp, #36]	; 0x24
 8009142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009144:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8009146:	1e5d      	subs	r5, r3, #1
 8009148:	2300      	movs	r3, #0
 800914a:	f7f7 f97d 	bl	8000448 <__aeabi_dcmpeq>
 800914e:	2800      	cmp	r0, #0
 8009150:	d126      	bne.n	80091a0 <_svfprintf_r+0x1330>
 8009152:	9b08      	ldr	r3, [sp, #32]
 8009154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009156:	3301      	adds	r3, #1
 8009158:	990e      	ldr	r1, [sp, #56]	; 0x38
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	1e7b      	subs	r3, r7, #1
 800915e:	3201      	adds	r2, #1
 8009160:	185b      	adds	r3, r3, r1
 8009162:	6065      	str	r5, [r4, #4]
 8009164:	932e      	str	r3, [sp, #184]	; 0xb8
 8009166:	922d      	str	r2, [sp, #180]	; 0xb4
 8009168:	3408      	adds	r4, #8
 800916a:	2a07      	cmp	r2, #7
 800916c:	dd07      	ble.n	800917e <_svfprintf_r+0x130e>
 800916e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009170:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009172:	aa2c      	add	r2, sp, #176	; 0xb0
 8009174:	f001 fb16 	bl	800a7a4 <__ssprint_r>
 8009178:	2800      	cmp	r0, #0
 800917a:	d158      	bne.n	800922e <_svfprintf_r+0x13be>
 800917c:	ac2f      	add	r4, sp, #188	; 0xbc
 800917e:	ab28      	add	r3, sp, #160	; 0xa0
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009184:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009186:	6063      	str	r3, [r4, #4]
 8009188:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800918a:	189b      	adds	r3, r3, r2
 800918c:	932e      	str	r3, [sp, #184]	; 0xb8
 800918e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009190:	3301      	adds	r3, #1
 8009192:	932d      	str	r3, [sp, #180]	; 0xb4
 8009194:	2b07      	cmp	r3, #7
 8009196:	dd00      	ble.n	800919a <_svfprintf_r+0x132a>
 8009198:	e638      	b.n	8008e0c <_svfprintf_r+0xf9c>
 800919a:	3408      	adds	r4, #8
 800919c:	0027      	movs	r7, r4
 800919e:	e595      	b.n	8008ccc <_svfprintf_r+0xe5c>
 80091a0:	2710      	movs	r7, #16
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	ddeb      	ble.n	800917e <_svfprintf_r+0x130e>
 80091a6:	0021      	movs	r1, r4
 80091a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80091aa:	4850      	ldr	r0, [pc, #320]	; (80092ec <_svfprintf_r+0x147c>)
 80091ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80091ae:	3301      	adds	r3, #1
 80091b0:	3108      	adds	r1, #8
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	2d10      	cmp	r5, #16
 80091b6:	dc07      	bgt.n	80091c8 <_svfprintf_r+0x1358>
 80091b8:	6065      	str	r5, [r4, #4]
 80091ba:	000c      	movs	r4, r1
 80091bc:	18ad      	adds	r5, r5, r2
 80091be:	952e      	str	r5, [sp, #184]	; 0xb8
 80091c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80091c2:	2b07      	cmp	r3, #7
 80091c4:	dddb      	ble.n	800917e <_svfprintf_r+0x130e>
 80091c6:	e7d2      	b.n	800916e <_svfprintf_r+0x12fe>
 80091c8:	3210      	adds	r2, #16
 80091ca:	6067      	str	r7, [r4, #4]
 80091cc:	922e      	str	r2, [sp, #184]	; 0xb8
 80091ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	dd07      	ble.n	80091e4 <_svfprintf_r+0x1374>
 80091d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80091da:	f001 fae3 	bl	800a7a4 <__ssprint_r>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d125      	bne.n	800922e <_svfprintf_r+0x13be>
 80091e2:	a92f      	add	r1, sp, #188	; 0xbc
 80091e4:	000c      	movs	r4, r1
 80091e6:	3d10      	subs	r5, #16
 80091e8:	e7dd      	b.n	80091a6 <_svfprintf_r+0x1336>
 80091ea:	9808      	ldr	r0, [sp, #32]
 80091ec:	912e      	str	r1, [sp, #184]	; 0xb8
 80091ee:	c705      	stmia	r7!, {r0, r2}
 80091f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80091f2:	e7e6      	b.n	80091c2 <_svfprintf_r+0x1352>
 80091f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80091f8:	2510      	movs	r5, #16
 80091fa:	1a9c      	subs	r4, r3, r2
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	dc00      	bgt.n	8009202 <_svfprintf_r+0x1392>
 8009200:	e567      	b.n	8008cd2 <_svfprintf_r+0xe62>
 8009202:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009204:	493a      	ldr	r1, [pc, #232]	; (80092f0 <_svfprintf_r+0x1480>)
 8009206:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009208:	3301      	adds	r3, #1
 800920a:	6039      	str	r1, [r7, #0]
 800920c:	2c10      	cmp	r4, #16
 800920e:	dc19      	bgt.n	8009244 <_svfprintf_r+0x13d4>
 8009210:	607c      	str	r4, [r7, #4]
 8009212:	18a4      	adds	r4, r4, r2
 8009214:	942e      	str	r4, [sp, #184]	; 0xb8
 8009216:	932d      	str	r3, [sp, #180]	; 0xb4
 8009218:	2b07      	cmp	r3, #7
 800921a:	dc00      	bgt.n	800921e <_svfprintf_r+0x13ae>
 800921c:	e559      	b.n	8008cd2 <_svfprintf_r+0xe62>
 800921e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009220:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009222:	aa2c      	add	r2, sp, #176	; 0xb0
 8009224:	f001 fabe 	bl	800a7a4 <__ssprint_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	d100      	bne.n	800922e <_svfprintf_r+0x13be>
 800922c:	e551      	b.n	8008cd2 <_svfprintf_r+0xe62>
 800922e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <_svfprintf_r+0x13c8>
 8009234:	f7ff f845 	bl	80082c2 <_svfprintf_r+0x452>
 8009238:	0019      	movs	r1, r3
 800923a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800923c:	f7fe f9fc 	bl	8007638 <_free_r>
 8009240:	f7ff f83f 	bl	80082c2 <_svfprintf_r+0x452>
 8009244:	3210      	adds	r2, #16
 8009246:	607d      	str	r5, [r7, #4]
 8009248:	922e      	str	r2, [sp, #184]	; 0xb8
 800924a:	932d      	str	r3, [sp, #180]	; 0xb4
 800924c:	3708      	adds	r7, #8
 800924e:	2b07      	cmp	r3, #7
 8009250:	dd07      	ble.n	8009262 <_svfprintf_r+0x13f2>
 8009252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009254:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009256:	aa2c      	add	r2, sp, #176	; 0xb0
 8009258:	f001 faa4 	bl	800a7a4 <__ssprint_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	d1e6      	bne.n	800922e <_svfprintf_r+0x13be>
 8009260:	af2f      	add	r7, sp, #188	; 0xbc
 8009262:	3c10      	subs	r4, #16
 8009264:	e7cd      	b.n	8009202 <_svfprintf_r+0x1392>
 8009266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009268:	980a      	ldr	r0, [sp, #40]	; 0x28
 800926a:	f7fe f9e5 	bl	8007638 <_free_r>
 800926e:	e549      	b.n	8008d04 <_svfprintf_r+0xe94>
 8009270:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <_svfprintf_r+0x140a>
 8009276:	f7ff f824 	bl	80082c2 <_svfprintf_r+0x452>
 800927a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800927c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800927e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009280:	f001 fa90 	bl	800a7a4 <__ssprint_r>
 8009284:	f7ff f81d 	bl	80082c2 <_svfprintf_r+0x452>
 8009288:	0034      	movs	r4, r6
 800928a:	2a00      	cmp	r2, #0
 800928c:	d101      	bne.n	8009292 <_svfprintf_r+0x1422>
 800928e:	f7fe ff8c 	bl	80081aa <_svfprintf_r+0x33a>
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <_svfprintf_r+0x142a>
 8009296:	f7ff fc01 	bl	8008a9c <_svfprintf_r+0xc2c>
 800929a:	2b02      	cmp	r3, #2
 800929c:	d100      	bne.n	80092a0 <_svfprintf_r+0x1430>
 800929e:	e459      	b.n	8008b54 <_svfprintf_r+0xce4>
 80092a0:	2507      	movs	r5, #7
 80092a2:	ab58      	add	r3, sp, #352	; 0x160
 80092a4:	9308      	str	r3, [sp, #32]
 80092a6:	9a08      	ldr	r2, [sp, #32]
 80092a8:	0013      	movs	r3, r2
 80092aa:	3b01      	subs	r3, #1
 80092ac:	9308      	str	r3, [sp, #32]
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	9908      	ldr	r1, [sp, #32]
 80092b2:	402b      	ands	r3, r5
 80092b4:	3330      	adds	r3, #48	; 0x30
 80092b6:	700b      	strb	r3, [r1, #0]
 80092b8:	9907      	ldr	r1, [sp, #28]
 80092ba:	074e      	lsls	r6, r1, #29
 80092bc:	9906      	ldr	r1, [sp, #24]
 80092be:	08c8      	lsrs	r0, r1, #3
 80092c0:	9907      	ldr	r1, [sp, #28]
 80092c2:	4306      	orrs	r6, r0
 80092c4:	08c9      	lsrs	r1, r1, #3
 80092c6:	9107      	str	r1, [sp, #28]
 80092c8:	0031      	movs	r1, r6
 80092ca:	9807      	ldr	r0, [sp, #28]
 80092cc:	9606      	str	r6, [sp, #24]
 80092ce:	4301      	orrs	r1, r0
 80092d0:	d1e9      	bne.n	80092a6 <_svfprintf_r+0x1436>
 80092d2:	07e1      	lsls	r1, r4, #31
 80092d4:	d400      	bmi.n	80092d8 <_svfprintf_r+0x1468>
 80092d6:	e42a      	b.n	8008b2e <_svfprintf_r+0xcbe>
 80092d8:	2b30      	cmp	r3, #48	; 0x30
 80092da:	d100      	bne.n	80092de <_svfprintf_r+0x146e>
 80092dc:	e427      	b.n	8008b2e <_svfprintf_r+0xcbe>
 80092de:	2130      	movs	r1, #48	; 0x30
 80092e0:	9b08      	ldr	r3, [sp, #32]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	7019      	strb	r1, [r3, #0]
 80092e6:	1e93      	subs	r3, r2, #2
 80092e8:	9308      	str	r3, [sp, #32]
 80092ea:	e420      	b.n	8008b2e <_svfprintf_r+0xcbe>
 80092ec:	0800bf48 	.word	0x0800bf48
 80092f0:	0800bf38 	.word	0x0800bf38

080092f4 <_fclose_r>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	0005      	movs	r5, r0
 80092f8:	1e0c      	subs	r4, r1, #0
 80092fa:	d102      	bne.n	8009302 <_fclose_r+0xe>
 80092fc:	2600      	movs	r6, #0
 80092fe:	0030      	movs	r0, r6
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	2800      	cmp	r0, #0
 8009304:	d004      	beq.n	8009310 <_fclose_r+0x1c>
 8009306:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <_fclose_r+0x1c>
 800930c:	f7fd ffc6 	bl	800729c <__sinit>
 8009310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009312:	07db      	lsls	r3, r3, #31
 8009314:	d405      	bmi.n	8009322 <_fclose_r+0x2e>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	059b      	lsls	r3, r3, #22
 800931a:	d402      	bmi.n	8009322 <_fclose_r+0x2e>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f7fe f90d 	bl	800753c <__retarget_lock_acquire_recursive>
 8009322:	220c      	movs	r2, #12
 8009324:	5ea3      	ldrsh	r3, [r4, r2]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <_fclose_r+0x4a>
 800932a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800932c:	3301      	adds	r3, #1
 800932e:	0016      	movs	r6, r2
 8009330:	401e      	ands	r6, r3
 8009332:	421a      	tst	r2, r3
 8009334:	d1e2      	bne.n	80092fc <_fclose_r+0x8>
 8009336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009338:	f7fe f901 	bl	800753e <__retarget_lock_release_recursive>
 800933c:	e7df      	b.n	80092fe <_fclose_r+0xa>
 800933e:	0021      	movs	r1, r4
 8009340:	0028      	movs	r0, r5
 8009342:	f000 f837 	bl	80093b4 <__sflush_r>
 8009346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009348:	0006      	movs	r6, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <_fclose_r+0x68>
 800934e:	0028      	movs	r0, r5
 8009350:	69e1      	ldr	r1, [r4, #28]
 8009352:	4798      	blx	r3
 8009354:	2800      	cmp	r0, #0
 8009356:	da01      	bge.n	800935c <_fclose_r+0x68>
 8009358:	2601      	movs	r6, #1
 800935a:	4276      	negs	r6, r6
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	061b      	lsls	r3, r3, #24
 8009360:	d503      	bpl.n	800936a <_fclose_r+0x76>
 8009362:	0028      	movs	r0, r5
 8009364:	6921      	ldr	r1, [r4, #16]
 8009366:	f7fe f967 	bl	8007638 <_free_r>
 800936a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800936c:	2900      	cmp	r1, #0
 800936e:	d008      	beq.n	8009382 <_fclose_r+0x8e>
 8009370:	0023      	movs	r3, r4
 8009372:	3340      	adds	r3, #64	; 0x40
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <_fclose_r+0x8a>
 8009378:	0028      	movs	r0, r5
 800937a:	f7fe f95d 	bl	8007638 <_free_r>
 800937e:	2300      	movs	r3, #0
 8009380:	6323      	str	r3, [r4, #48]	; 0x30
 8009382:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009384:	2900      	cmp	r1, #0
 8009386:	d004      	beq.n	8009392 <_fclose_r+0x9e>
 8009388:	0028      	movs	r0, r5
 800938a:	f7fe f955 	bl	8007638 <_free_r>
 800938e:	2300      	movs	r3, #0
 8009390:	6463      	str	r3, [r4, #68]	; 0x44
 8009392:	f7fd ff73 	bl	800727c <__sfp_lock_acquire>
 8009396:	2300      	movs	r3, #0
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800939c:	07db      	lsls	r3, r3, #31
 800939e:	d402      	bmi.n	80093a6 <_fclose_r+0xb2>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f7fe f8cc 	bl	800753e <__retarget_lock_release_recursive>
 80093a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a8:	f7fe f8c7 	bl	800753a <__retarget_lock_close_recursive>
 80093ac:	f7fd ff6e 	bl	800728c <__sfp_lock_release>
 80093b0:	e7a5      	b.n	80092fe <_fclose_r+0xa>
	...

080093b4 <__sflush_r>:
 80093b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b6:	230c      	movs	r3, #12
 80093b8:	5eca      	ldrsh	r2, [r1, r3]
 80093ba:	000c      	movs	r4, r1
 80093bc:	0005      	movs	r5, r0
 80093be:	b291      	uxth	r1, r2
 80093c0:	0713      	lsls	r3, r2, #28
 80093c2:	d464      	bmi.n	800948e <__sflush_r+0xda>
 80093c4:	2380      	movs	r3, #128	; 0x80
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	4313      	orrs	r3, r2
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	81a3      	strh	r3, [r4, #12]
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	dc04      	bgt.n	80093dc <__sflush_r+0x28>
 80093d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80093d4:	2a00      	cmp	r2, #0
 80093d6:	dc01      	bgt.n	80093dc <__sflush_r+0x28>
 80093d8:	2000      	movs	r0, #0
 80093da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093dc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80093de:	2f00      	cmp	r7, #0
 80093e0:	d0fa      	beq.n	80093d8 <__sflush_r+0x24>
 80093e2:	2200      	movs	r2, #0
 80093e4:	2080      	movs	r0, #128	; 0x80
 80093e6:	682e      	ldr	r6, [r5, #0]
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	001a      	movs	r2, r3
 80093ec:	0140      	lsls	r0, r0, #5
 80093ee:	69e1      	ldr	r1, [r4, #28]
 80093f0:	4002      	ands	r2, r0
 80093f2:	4203      	tst	r3, r0
 80093f4:	d038      	beq.n	8009468 <__sflush_r+0xb4>
 80093f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	075b      	lsls	r3, r3, #29
 80093fc:	d506      	bpl.n	800940c <__sflush_r+0x58>
 80093fe:	6863      	ldr	r3, [r4, #4]
 8009400:	1ac0      	subs	r0, r0, r3
 8009402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <__sflush_r+0x58>
 8009408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800940a:	1ac0      	subs	r0, r0, r3
 800940c:	0002      	movs	r2, r0
 800940e:	2300      	movs	r3, #0
 8009410:	0028      	movs	r0, r5
 8009412:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009414:	69e1      	ldr	r1, [r4, #28]
 8009416:	47b8      	blx	r7
 8009418:	89a2      	ldrh	r2, [r4, #12]
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	d106      	bne.n	800942c <__sflush_r+0x78>
 800941e:	6829      	ldr	r1, [r5, #0]
 8009420:	291d      	cmp	r1, #29
 8009422:	d830      	bhi.n	8009486 <__sflush_r+0xd2>
 8009424:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <__sflush_r+0x124>)
 8009426:	410b      	asrs	r3, r1
 8009428:	07db      	lsls	r3, r3, #31
 800942a:	d42c      	bmi.n	8009486 <__sflush_r+0xd2>
 800942c:	4b2b      	ldr	r3, [pc, #172]	; (80094dc <__sflush_r+0x128>)
 800942e:	4013      	ands	r3, r2
 8009430:	2200      	movs	r2, #0
 8009432:	6062      	str	r2, [r4, #4]
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	b21b      	sxth	r3, r3
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	6022      	str	r2, [r4, #0]
 800943c:	04db      	lsls	r3, r3, #19
 800943e:	d505      	bpl.n	800944c <__sflush_r+0x98>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <__sflush_r+0x96>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d100      	bne.n	800944c <__sflush_r+0x98>
 800944a:	6520      	str	r0, [r4, #80]	; 0x50
 800944c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800944e:	602e      	str	r6, [r5, #0]
 8009450:	2900      	cmp	r1, #0
 8009452:	d0c1      	beq.n	80093d8 <__sflush_r+0x24>
 8009454:	0023      	movs	r3, r4
 8009456:	3340      	adds	r3, #64	; 0x40
 8009458:	4299      	cmp	r1, r3
 800945a:	d002      	beq.n	8009462 <__sflush_r+0xae>
 800945c:	0028      	movs	r0, r5
 800945e:	f7fe f8eb 	bl	8007638 <_free_r>
 8009462:	2000      	movs	r0, #0
 8009464:	6320      	str	r0, [r4, #48]	; 0x30
 8009466:	e7b8      	b.n	80093da <__sflush_r+0x26>
 8009468:	2301      	movs	r3, #1
 800946a:	0028      	movs	r0, r5
 800946c:	47b8      	blx	r7
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d1c2      	bne.n	80093f8 <__sflush_r+0x44>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0bf      	beq.n	80093f8 <__sflush_r+0x44>
 8009478:	2b1d      	cmp	r3, #29
 800947a:	d001      	beq.n	8009480 <__sflush_r+0xcc>
 800947c:	2b16      	cmp	r3, #22
 800947e:	d101      	bne.n	8009484 <__sflush_r+0xd0>
 8009480:	602e      	str	r6, [r5, #0]
 8009482:	e7a9      	b.n	80093d8 <__sflush_r+0x24>
 8009484:	89a2      	ldrh	r2, [r4, #12]
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	4313      	orrs	r3, r2
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	e7a5      	b.n	80093da <__sflush_r+0x26>
 800948e:	6926      	ldr	r6, [r4, #16]
 8009490:	2e00      	cmp	r6, #0
 8009492:	d0a1      	beq.n	80093d8 <__sflush_r+0x24>
 8009494:	6827      	ldr	r7, [r4, #0]
 8009496:	6026      	str	r6, [r4, #0]
 8009498:	1bbb      	subs	r3, r7, r6
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	2300      	movs	r3, #0
 800949e:	0789      	lsls	r1, r1, #30
 80094a0:	d100      	bne.n	80094a4 <__sflush_r+0xf0>
 80094a2:	6963      	ldr	r3, [r4, #20]
 80094a4:	60a3      	str	r3, [r4, #8]
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc00      	bgt.n	80094ae <__sflush_r+0xfa>
 80094ac:	e794      	b.n	80093d8 <__sflush_r+0x24>
 80094ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b0:	0032      	movs	r2, r6
 80094b2:	001f      	movs	r7, r3
 80094b4:	0028      	movs	r0, r5
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	69e1      	ldr	r1, [r4, #28]
 80094ba:	47b8      	blx	r7
 80094bc:	2800      	cmp	r0, #0
 80094be:	dc06      	bgt.n	80094ce <__sflush_r+0x11a>
 80094c0:	2340      	movs	r3, #64	; 0x40
 80094c2:	2001      	movs	r0, #1
 80094c4:	89a2      	ldrh	r2, [r4, #12]
 80094c6:	4240      	negs	r0, r0
 80094c8:	4313      	orrs	r3, r2
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	e785      	b.n	80093da <__sflush_r+0x26>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	1836      	adds	r6, r6, r0
 80094d2:	1a1b      	subs	r3, r3, r0
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	e7e6      	b.n	80094a6 <__sflush_r+0xf2>
 80094d8:	dfbffffe 	.word	0xdfbffffe
 80094dc:	fffff7ff 	.word	0xfffff7ff

080094e0 <_fflush_r>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	0005      	movs	r5, r0
 80094e4:	000c      	movs	r4, r1
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d004      	beq.n	80094f4 <_fflush_r+0x14>
 80094ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <_fflush_r+0x14>
 80094f0:	f7fd fed4 	bl	800729c <__sinit>
 80094f4:	220c      	movs	r2, #12
 80094f6:	5ea3      	ldrsh	r3, [r4, r2]
 80094f8:	1e1e      	subs	r6, r3, #0
 80094fa:	d015      	beq.n	8009528 <_fflush_r+0x48>
 80094fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094fe:	07d2      	lsls	r2, r2, #31
 8009500:	d404      	bmi.n	800950c <_fflush_r+0x2c>
 8009502:	059b      	lsls	r3, r3, #22
 8009504:	d402      	bmi.n	800950c <_fflush_r+0x2c>
 8009506:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009508:	f7fe f818 	bl	800753c <__retarget_lock_acquire_recursive>
 800950c:	0021      	movs	r1, r4
 800950e:	0028      	movs	r0, r5
 8009510:	f7ff ff50 	bl	80093b4 <__sflush_r>
 8009514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009516:	0006      	movs	r6, r0
 8009518:	07db      	lsls	r3, r3, #31
 800951a:	d405      	bmi.n	8009528 <_fflush_r+0x48>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	059b      	lsls	r3, r3, #22
 8009520:	d402      	bmi.n	8009528 <_fflush_r+0x48>
 8009522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009524:	f7fe f80b 	bl	800753e <__retarget_lock_release_recursive>
 8009528:	0030      	movs	r0, r6
 800952a:	bd70      	pop	{r4, r5, r6, pc}

0800952c <_localeconv_r>:
 800952c:	4800      	ldr	r0, [pc, #0]	; (8009530 <_localeconv_r+0x4>)
 800952e:	4770      	bx	lr
 8009530:	2000051c 	.word	0x2000051c

08009534 <__libc_fini_array>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4c07      	ldr	r4, [pc, #28]	; (8009554 <__libc_fini_array+0x20>)
 8009538:	4d07      	ldr	r5, [pc, #28]	; (8009558 <__libc_fini_array+0x24>)
 800953a:	1b64      	subs	r4, r4, r5
 800953c:	10a4      	asrs	r4, r4, #2
 800953e:	2c00      	cmp	r4, #0
 8009540:	d102      	bne.n	8009548 <__libc_fini_array+0x14>
 8009542:	f002 fa89 	bl	800ba58 <_fini>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	3c01      	subs	r4, #1
 800954a:	00a3      	lsls	r3, r4, #2
 800954c:	58eb      	ldr	r3, [r5, r3]
 800954e:	4798      	blx	r3
 8009550:	e7f5      	b.n	800953e <__libc_fini_array+0xa>
 8009552:	46c0      	nop			; (mov r8, r8)
 8009554:	0800c030 	.word	0x0800c030
 8009558:	0800c02c 	.word	0x0800c02c

0800955c <memchr>:
 800955c:	b2c9      	uxtb	r1, r1
 800955e:	1882      	adds	r2, r0, r2
 8009560:	4290      	cmp	r0, r2
 8009562:	d101      	bne.n	8009568 <memchr+0xc>
 8009564:	2000      	movs	r0, #0
 8009566:	4770      	bx	lr
 8009568:	7803      	ldrb	r3, [r0, #0]
 800956a:	428b      	cmp	r3, r1
 800956c:	d0fb      	beq.n	8009566 <memchr+0xa>
 800956e:	3001      	adds	r0, #1
 8009570:	e7f6      	b.n	8009560 <memchr+0x4>
	...

08009574 <frexp>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	0014      	movs	r4, r2
 8009578:	2500      	movs	r5, #0
 800957a:	6025      	str	r5, [r4, #0]
 800957c:	4d10      	ldr	r5, [pc, #64]	; (80095c0 <frexp+0x4c>)
 800957e:	004b      	lsls	r3, r1, #1
 8009580:	000a      	movs	r2, r1
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	42ab      	cmp	r3, r5
 8009586:	dc1a      	bgt.n	80095be <frexp+0x4a>
 8009588:	001d      	movs	r5, r3
 800958a:	4305      	orrs	r5, r0
 800958c:	d017      	beq.n	80095be <frexp+0x4a>
 800958e:	4d0d      	ldr	r5, [pc, #52]	; (80095c4 <frexp+0x50>)
 8009590:	4229      	tst	r1, r5
 8009592:	d109      	bne.n	80095a8 <frexp+0x34>
 8009594:	2200      	movs	r2, #0
 8009596:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <frexp+0x54>)
 8009598:	f7f7 ffca 	bl	8001530 <__aeabi_dmul>
 800959c:	2536      	movs	r5, #54	; 0x36
 800959e:	000a      	movs	r2, r1
 80095a0:	004b      	lsls	r3, r1, #1
 80095a2:	426d      	negs	r5, r5
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	6025      	str	r5, [r4, #0]
 80095a8:	4d08      	ldr	r5, [pc, #32]	; (80095cc <frexp+0x58>)
 80095aa:	151b      	asrs	r3, r3, #20
 80095ac:	195b      	adds	r3, r3, r5
 80095ae:	6825      	ldr	r5, [r4, #0]
 80095b0:	18eb      	adds	r3, r5, r3
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <frexp+0x5c>)
 80095b6:	401a      	ands	r2, r3
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <frexp+0x60>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	0019      	movs	r1, r3
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	7fefffff 	.word	0x7fefffff
 80095c4:	7ff00000 	.word	0x7ff00000
 80095c8:	43500000 	.word	0x43500000
 80095cc:	fffffc02 	.word	0xfffffc02
 80095d0:	800fffff 	.word	0x800fffff
 80095d4:	3fe00000 	.word	0x3fe00000

080095d8 <__register_exitproc>:
 80095d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095da:	4f1c      	ldr	r7, [pc, #112]	; (800964c <__register_exitproc+0x74>)
 80095dc:	0004      	movs	r4, r0
 80095de:	6838      	ldr	r0, [r7, #0]
 80095e0:	0016      	movs	r6, r2
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	9100      	str	r1, [sp, #0]
 80095e6:	f7fd ffa9 	bl	800753c <__retarget_lock_acquire_recursive>
 80095ea:	4a19      	ldr	r2, [pc, #100]	; (8009650 <__register_exitproc+0x78>)
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <__register_exitproc+0x1e>
 80095f2:	4b18      	ldr	r3, [pc, #96]	; (8009654 <__register_exitproc+0x7c>)
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	6838      	ldr	r0, [r7, #0]
 80095fa:	2a1f      	cmp	r2, #31
 80095fc:	dd04      	ble.n	8009608 <__register_exitproc+0x30>
 80095fe:	f7fd ff9e 	bl	800753e <__retarget_lock_release_recursive>
 8009602:	2001      	movs	r0, #1
 8009604:	4240      	negs	r0, r0
 8009606:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009608:	2c00      	cmp	r4, #0
 800960a:	d014      	beq.n	8009636 <__register_exitproc+0x5e>
 800960c:	0091      	lsls	r1, r2, #2
 800960e:	1859      	adds	r1, r3, r1
 8009610:	000f      	movs	r7, r1
 8009612:	3788      	adds	r7, #136	; 0x88
 8009614:	603e      	str	r6, [r7, #0]
 8009616:	2701      	movs	r7, #1
 8009618:	001e      	movs	r6, r3
 800961a:	4097      	lsls	r7, r2
 800961c:	3685      	adds	r6, #133	; 0x85
 800961e:	36ff      	adds	r6, #255	; 0xff
 8009620:	6875      	ldr	r5, [r6, #4]
 8009622:	31fc      	adds	r1, #252	; 0xfc
 8009624:	433d      	orrs	r5, r7
 8009626:	6075      	str	r5, [r6, #4]
 8009628:	9d01      	ldr	r5, [sp, #4]
 800962a:	60cd      	str	r5, [r1, #12]
 800962c:	2c02      	cmp	r4, #2
 800962e:	d102      	bne.n	8009636 <__register_exitproc+0x5e>
 8009630:	68b1      	ldr	r1, [r6, #8]
 8009632:	4339      	orrs	r1, r7
 8009634:	60b1      	str	r1, [r6, #8]
 8009636:	1c51      	adds	r1, r2, #1
 8009638:	6059      	str	r1, [r3, #4]
 800963a:	3202      	adds	r2, #2
 800963c:	9900      	ldr	r1, [sp, #0]
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	50d1      	str	r1, [r2, r3]
 8009642:	f7fd ff7c 	bl	800753e <__retarget_lock_release_recursive>
 8009646:	2000      	movs	r0, #0
 8009648:	e7dd      	b.n	8009606 <__register_exitproc+0x2e>
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	200006bc 	.word	0x200006bc
 8009650:	20000bb4 	.word	0x20000bb4
 8009654:	20000bb8 	.word	0x20000bb8

08009658 <__assert_func>:
 8009658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800965a:	0014      	movs	r4, r2
 800965c:	001a      	movs	r2, r3
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <__assert_func+0x2c>)
 8009660:	0005      	movs	r5, r0
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	000e      	movs	r6, r1
 8009666:	68d8      	ldr	r0, [r3, #12]
 8009668:	4b07      	ldr	r3, [pc, #28]	; (8009688 <__assert_func+0x30>)
 800966a:	2c00      	cmp	r4, #0
 800966c:	d101      	bne.n	8009672 <__assert_func+0x1a>
 800966e:	4b07      	ldr	r3, [pc, #28]	; (800968c <__assert_func+0x34>)
 8009670:	001c      	movs	r4, r3
 8009672:	4907      	ldr	r1, [pc, #28]	; (8009690 <__assert_func+0x38>)
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	9402      	str	r4, [sp, #8]
 8009678:	002b      	movs	r3, r5
 800967a:	9600      	str	r6, [sp, #0]
 800967c:	f001 f882 	bl	800a784 <fiprintf>
 8009680:	f002 f896 	bl	800b7b0 <abort>
 8009684:	200006b8 	.word	0x200006b8
 8009688:	0800bf58 	.word	0x0800bf58
 800968c:	0800bf93 	.word	0x0800bf93
 8009690:	0800bf65 	.word	0x0800bf65

08009694 <_calloc_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	2400      	movs	r4, #0
 8009698:	0c0b      	lsrs	r3, r1, #16
 800969a:	0c16      	lsrs	r6, r2, #16
 800969c:	42a3      	cmp	r3, r4
 800969e:	d133      	bne.n	8009708 <_calloc_r+0x74>
 80096a0:	42a6      	cmp	r6, r4
 80096a2:	d121      	bne.n	80096e8 <_calloc_r+0x54>
 80096a4:	b28b      	uxth	r3, r1
 80096a6:	b291      	uxth	r1, r2
 80096a8:	4359      	muls	r1, r3
 80096aa:	f7fd fb43 	bl	8006d34 <_malloc_r>
 80096ae:	1e05      	subs	r5, r0, #0
 80096b0:	d033      	beq.n	800971a <_calloc_r+0x86>
 80096b2:	0003      	movs	r3, r0
 80096b4:	3b08      	subs	r3, #8
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	2303      	movs	r3, #3
 80096ba:	439a      	bics	r2, r3
 80096bc:	3a04      	subs	r2, #4
 80096be:	2a24      	cmp	r2, #36	; 0x24
 80096c0:	d832      	bhi.n	8009728 <_calloc_r+0x94>
 80096c2:	0003      	movs	r3, r0
 80096c4:	2a13      	cmp	r2, #19
 80096c6:	d90a      	bls.n	80096de <_calloc_r+0x4a>
 80096c8:	6004      	str	r4, [r0, #0]
 80096ca:	6044      	str	r4, [r0, #4]
 80096cc:	3308      	adds	r3, #8
 80096ce:	2a1b      	cmp	r2, #27
 80096d0:	d905      	bls.n	80096de <_calloc_r+0x4a>
 80096d2:	6084      	str	r4, [r0, #8]
 80096d4:	60c4      	str	r4, [r0, #12]
 80096d6:	2a24      	cmp	r2, #36	; 0x24
 80096d8:	d021      	beq.n	800971e <_calloc_r+0x8a>
 80096da:	0003      	movs	r3, r0
 80096dc:	3310      	adds	r3, #16
 80096de:	2200      	movs	r2, #0
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	605a      	str	r2, [r3, #4]
 80096e4:	609a      	str	r2, [r3, #8]
 80096e6:	e018      	b.n	800971a <_calloc_r+0x86>
 80096e8:	1c33      	adds	r3, r6, #0
 80096ea:	1c0d      	adds	r5, r1, #0
 80096ec:	b289      	uxth	r1, r1
 80096ee:	b292      	uxth	r2, r2
 80096f0:	434a      	muls	r2, r1
 80096f2:	b2ad      	uxth	r5, r5
 80096f4:	b299      	uxth	r1, r3
 80096f6:	4369      	muls	r1, r5
 80096f8:	0c13      	lsrs	r3, r2, #16
 80096fa:	18c9      	adds	r1, r1, r3
 80096fc:	0c0b      	lsrs	r3, r1, #16
 80096fe:	d107      	bne.n	8009710 <_calloc_r+0x7c>
 8009700:	0409      	lsls	r1, r1, #16
 8009702:	b292      	uxth	r2, r2
 8009704:	4311      	orrs	r1, r2
 8009706:	e7d0      	b.n	80096aa <_calloc_r+0x16>
 8009708:	2e00      	cmp	r6, #0
 800970a:	d101      	bne.n	8009710 <_calloc_r+0x7c>
 800970c:	1c15      	adds	r5, r2, #0
 800970e:	e7ed      	b.n	80096ec <_calloc_r+0x58>
 8009710:	f7fd fee8 	bl	80074e4 <__errno>
 8009714:	230c      	movs	r3, #12
 8009716:	2500      	movs	r5, #0
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	0028      	movs	r0, r5
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	0003      	movs	r3, r0
 8009720:	6104      	str	r4, [r0, #16]
 8009722:	3318      	adds	r3, #24
 8009724:	6144      	str	r4, [r0, #20]
 8009726:	e7da      	b.n	80096de <_calloc_r+0x4a>
 8009728:	2100      	movs	r1, #0
 800972a:	f7fd fe57 	bl	80073dc <memset>
 800972e:	e7f4      	b.n	800971a <_calloc_r+0x86>

08009730 <quorem>:
 8009730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009732:	6902      	ldr	r2, [r0, #16]
 8009734:	690b      	ldr	r3, [r1, #16]
 8009736:	b089      	sub	sp, #36	; 0x24
 8009738:	0007      	movs	r7, r0
 800973a:	9104      	str	r1, [sp, #16]
 800973c:	2000      	movs	r0, #0
 800973e:	429a      	cmp	r2, r3
 8009740:	db69      	blt.n	8009816 <quorem+0xe6>
 8009742:	3b01      	subs	r3, #1
 8009744:	009c      	lsls	r4, r3, #2
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	000b      	movs	r3, r1
 800974a:	3314      	adds	r3, #20
 800974c:	9306      	str	r3, [sp, #24]
 800974e:	191b      	adds	r3, r3, r4
 8009750:	9305      	str	r3, [sp, #20]
 8009752:	003b      	movs	r3, r7
 8009754:	3314      	adds	r3, #20
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	191c      	adds	r4, r3, r4
 800975a:	9b05      	ldr	r3, [sp, #20]
 800975c:	6826      	ldr	r6, [r4, #0]
 800975e:	681d      	ldr	r5, [r3, #0]
 8009760:	0030      	movs	r0, r6
 8009762:	3501      	adds	r5, #1
 8009764:	0029      	movs	r1, r5
 8009766:	f7f6 fce9 	bl	800013c <__udivsi3>
 800976a:	9002      	str	r0, [sp, #8]
 800976c:	42ae      	cmp	r6, r5
 800976e:	d329      	bcc.n	80097c4 <quorem+0x94>
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	2600      	movs	r6, #0
 8009774:	469c      	mov	ip, r3
 8009776:	9d03      	ldr	r5, [sp, #12]
 8009778:	9606      	str	r6, [sp, #24]
 800977a:	4662      	mov	r2, ip
 800977c:	ca08      	ldmia	r2!, {r3}
 800977e:	6828      	ldr	r0, [r5, #0]
 8009780:	4694      	mov	ip, r2
 8009782:	9a02      	ldr	r2, [sp, #8]
 8009784:	b299      	uxth	r1, r3
 8009786:	4351      	muls	r1, r2
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	4353      	muls	r3, r2
 800978c:	1989      	adds	r1, r1, r6
 800978e:	0c0a      	lsrs	r2, r1, #16
 8009790:	189b      	adds	r3, r3, r2
 8009792:	9307      	str	r3, [sp, #28]
 8009794:	0c1e      	lsrs	r6, r3, #16
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	b282      	uxth	r2, r0
 800979a:	18d2      	adds	r2, r2, r3
 800979c:	466b      	mov	r3, sp
 800979e:	b289      	uxth	r1, r1
 80097a0:	8b9b      	ldrh	r3, [r3, #28]
 80097a2:	1a52      	subs	r2, r2, r1
 80097a4:	0c01      	lsrs	r1, r0, #16
 80097a6:	1ac9      	subs	r1, r1, r3
 80097a8:	1413      	asrs	r3, r2, #16
 80097aa:	18cb      	adds	r3, r1, r3
 80097ac:	1419      	asrs	r1, r3, #16
 80097ae:	b292      	uxth	r2, r2
 80097b0:	041b      	lsls	r3, r3, #16
 80097b2:	4313      	orrs	r3, r2
 80097b4:	c508      	stmia	r5!, {r3}
 80097b6:	9b05      	ldr	r3, [sp, #20]
 80097b8:	9106      	str	r1, [sp, #24]
 80097ba:	4563      	cmp	r3, ip
 80097bc:	d2dd      	bcs.n	800977a <quorem+0x4a>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d030      	beq.n	8009826 <quorem+0xf6>
 80097c4:	0038      	movs	r0, r7
 80097c6:	9904      	ldr	r1, [sp, #16]
 80097c8:	f7fe fa30 	bl	8007c2c <__mcmp>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	db21      	blt.n	8009814 <quorem+0xe4>
 80097d0:	0038      	movs	r0, r7
 80097d2:	2600      	movs	r6, #0
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	9c04      	ldr	r4, [sp, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	9302      	str	r3, [sp, #8]
 80097dc:	3014      	adds	r0, #20
 80097de:	3414      	adds	r4, #20
 80097e0:	6803      	ldr	r3, [r0, #0]
 80097e2:	cc02      	ldmia	r4!, {r1}
 80097e4:	b29d      	uxth	r5, r3
 80097e6:	19ad      	adds	r5, r5, r6
 80097e8:	b28a      	uxth	r2, r1
 80097ea:	1aaa      	subs	r2, r5, r2
 80097ec:	0c09      	lsrs	r1, r1, #16
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	1a5b      	subs	r3, r3, r1
 80097f2:	1411      	asrs	r1, r2, #16
 80097f4:	185b      	adds	r3, r3, r1
 80097f6:	141e      	asrs	r6, r3, #16
 80097f8:	b292      	uxth	r2, r2
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	4313      	orrs	r3, r2
 80097fe:	c008      	stmia	r0!, {r3}
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	42a3      	cmp	r3, r4
 8009804:	d2ec      	bcs.n	80097e0 <quorem+0xb0>
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	9a03      	ldr	r2, [sp, #12]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	18d3      	adds	r3, r2, r3
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	2a00      	cmp	r2, #0
 8009812:	d015      	beq.n	8009840 <quorem+0x110>
 8009814:	9802      	ldr	r0, [sp, #8]
 8009816:	b009      	add	sp, #36	; 0x24
 8009818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <quorem+0xfe>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	3b01      	subs	r3, #1
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	3c04      	subs	r4, #4
 800982a:	42a3      	cmp	r3, r4
 800982c:	d3f5      	bcc.n	800981a <quorem+0xea>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	e7c7      	b.n	80097c4 <quorem+0x94>
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	2a00      	cmp	r2, #0
 8009838:	d106      	bne.n	8009848 <quorem+0x118>
 800983a:	9a01      	ldr	r2, [sp, #4]
 800983c:	3a01      	subs	r2, #1
 800983e:	9201      	str	r2, [sp, #4]
 8009840:	9a03      	ldr	r2, [sp, #12]
 8009842:	3b04      	subs	r3, #4
 8009844:	429a      	cmp	r2, r3
 8009846:	d3f5      	bcc.n	8009834 <quorem+0x104>
 8009848:	9b01      	ldr	r3, [sp, #4]
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e7e2      	b.n	8009814 <quorem+0xe4>
	...

08009850 <_dtoa_r>:
 8009850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009852:	0014      	movs	r4, r2
 8009854:	001d      	movs	r5, r3
 8009856:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009858:	b09d      	sub	sp, #116	; 0x74
 800985a:	9408      	str	r4, [sp, #32]
 800985c:	9509      	str	r5, [sp, #36]	; 0x24
 800985e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009860:	9004      	str	r0, [sp, #16]
 8009862:	2900      	cmp	r1, #0
 8009864:	d009      	beq.n	800987a <_dtoa_r+0x2a>
 8009866:	2301      	movs	r3, #1
 8009868:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800986a:	4093      	lsls	r3, r2
 800986c:	604a      	str	r2, [r1, #4]
 800986e:	608b      	str	r3, [r1, #8]
 8009870:	f7fd ffce 	bl	8007810 <_Bfree>
 8009874:	2300      	movs	r3, #0
 8009876:	9a04      	ldr	r2, [sp, #16]
 8009878:	6393      	str	r3, [r2, #56]	; 0x38
 800987a:	2d00      	cmp	r5, #0
 800987c:	da1e      	bge.n	80098bc <_dtoa_r+0x6c>
 800987e:	2301      	movs	r3, #1
 8009880:	6033      	str	r3, [r6, #0]
 8009882:	006b      	lsls	r3, r5, #1
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	9309      	str	r3, [sp, #36]	; 0x24
 8009888:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800988a:	4bb5      	ldr	r3, [pc, #724]	; (8009b60 <_dtoa_r+0x310>)
 800988c:	4ab4      	ldr	r2, [pc, #720]	; (8009b60 <_dtoa_r+0x310>)
 800988e:	403b      	ands	r3, r7
 8009890:	4293      	cmp	r3, r2
 8009892:	d116      	bne.n	80098c2 <_dtoa_r+0x72>
 8009894:	4bb3      	ldr	r3, [pc, #716]	; (8009b64 <_dtoa_r+0x314>)
 8009896:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	033b      	lsls	r3, r7, #12
 800989c:	0b1b      	lsrs	r3, r3, #12
 800989e:	4323      	orrs	r3, r4
 80098a0:	d101      	bne.n	80098a6 <_dtoa_r+0x56>
 80098a2:	f000 fdb2 	bl	800a40a <_dtoa_r+0xbba>
 80098a6:	4bb0      	ldr	r3, [pc, #704]	; (8009b68 <_dtoa_r+0x318>)
 80098a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098aa:	9306      	str	r3, [sp, #24]
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d002      	beq.n	80098b6 <_dtoa_r+0x66>
 80098b0:	4bae      	ldr	r3, [pc, #696]	; (8009b6c <_dtoa_r+0x31c>)
 80098b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	9806      	ldr	r0, [sp, #24]
 80098b8:	b01d      	add	sp, #116	; 0x74
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	2300      	movs	r3, #0
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	e7e2      	b.n	8009888 <_dtoa_r+0x38>
 80098c2:	9a08      	ldr	r2, [sp, #32]
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	9210      	str	r2, [sp, #64]	; 0x40
 80098c8:	9311      	str	r3, [sp, #68]	; 0x44
 80098ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80098cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098ce:	2200      	movs	r2, #0
 80098d0:	2300      	movs	r3, #0
 80098d2:	f7f6 fdb9 	bl	8000448 <__aeabi_dcmpeq>
 80098d6:	1e06      	subs	r6, r0, #0
 80098d8:	d009      	beq.n	80098ee <_dtoa_r+0x9e>
 80098da:	2301      	movs	r3, #1
 80098dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	4ba3      	ldr	r3, [pc, #652]	; (8009b70 <_dtoa_r+0x320>)
 80098e2:	9306      	str	r3, [sp, #24]
 80098e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0e5      	beq.n	80098b6 <_dtoa_r+0x66>
 80098ea:	4ba2      	ldr	r3, [pc, #648]	; (8009b74 <_dtoa_r+0x324>)
 80098ec:	e7e1      	b.n	80098b2 <_dtoa_r+0x62>
 80098ee:	ab1a      	add	r3, sp, #104	; 0x68
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	ab1b      	add	r3, sp, #108	; 0x6c
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	9804      	ldr	r0, [sp, #16]
 80098f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098fc:	f7fe fa4a 	bl	8007d94 <__d2b>
 8009900:	007a      	lsls	r2, r7, #1
 8009902:	9005      	str	r0, [sp, #20]
 8009904:	0d52      	lsrs	r2, r2, #21
 8009906:	d100      	bne.n	800990a <_dtoa_r+0xba>
 8009908:	e07b      	b.n	8009a02 <_dtoa_r+0x1b2>
 800990a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800990c:	9617      	str	r6, [sp, #92]	; 0x5c
 800990e:	0319      	lsls	r1, r3, #12
 8009910:	4b99      	ldr	r3, [pc, #612]	; (8009b78 <_dtoa_r+0x328>)
 8009912:	0b09      	lsrs	r1, r1, #12
 8009914:	430b      	orrs	r3, r1
 8009916:	4999      	ldr	r1, [pc, #612]	; (8009b7c <_dtoa_r+0x32c>)
 8009918:	1857      	adds	r7, r2, r1
 800991a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800991c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800991e:	0019      	movs	r1, r3
 8009920:	2200      	movs	r2, #0
 8009922:	4b97      	ldr	r3, [pc, #604]	; (8009b80 <_dtoa_r+0x330>)
 8009924:	f7f8 f8c6 	bl	8001ab4 <__aeabi_dsub>
 8009928:	4a96      	ldr	r2, [pc, #600]	; (8009b84 <_dtoa_r+0x334>)
 800992a:	4b97      	ldr	r3, [pc, #604]	; (8009b88 <_dtoa_r+0x338>)
 800992c:	f7f7 fe00 	bl	8001530 <__aeabi_dmul>
 8009930:	4a96      	ldr	r2, [pc, #600]	; (8009b8c <_dtoa_r+0x33c>)
 8009932:	4b97      	ldr	r3, [pc, #604]	; (8009b90 <_dtoa_r+0x340>)
 8009934:	f7f6 fea2 	bl	800067c <__aeabi_dadd>
 8009938:	0004      	movs	r4, r0
 800993a:	0038      	movs	r0, r7
 800993c:	000d      	movs	r5, r1
 800993e:	f7f8 fc8f 	bl	8002260 <__aeabi_i2d>
 8009942:	4a94      	ldr	r2, [pc, #592]	; (8009b94 <_dtoa_r+0x344>)
 8009944:	4b94      	ldr	r3, [pc, #592]	; (8009b98 <_dtoa_r+0x348>)
 8009946:	f7f7 fdf3 	bl	8001530 <__aeabi_dmul>
 800994a:	0002      	movs	r2, r0
 800994c:	000b      	movs	r3, r1
 800994e:	0020      	movs	r0, r4
 8009950:	0029      	movs	r1, r5
 8009952:	f7f6 fe93 	bl	800067c <__aeabi_dadd>
 8009956:	0004      	movs	r4, r0
 8009958:	000d      	movs	r5, r1
 800995a:	f7f8 fc4b 	bl	80021f4 <__aeabi_d2iz>
 800995e:	2200      	movs	r2, #0
 8009960:	9003      	str	r0, [sp, #12]
 8009962:	2300      	movs	r3, #0
 8009964:	0020      	movs	r0, r4
 8009966:	0029      	movs	r1, r5
 8009968:	f7f6 fd74 	bl	8000454 <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d00b      	beq.n	8009988 <_dtoa_r+0x138>
 8009970:	9803      	ldr	r0, [sp, #12]
 8009972:	f7f8 fc75 	bl	8002260 <__aeabi_i2d>
 8009976:	002b      	movs	r3, r5
 8009978:	0022      	movs	r2, r4
 800997a:	f7f6 fd65 	bl	8000448 <__aeabi_dcmpeq>
 800997e:	4243      	negs	r3, r0
 8009980:	4158      	adcs	r0, r3
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	1a1b      	subs	r3, r3, r0
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	2301      	movs	r3, #1
 800998a:	9316      	str	r3, [sp, #88]	; 0x58
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	2b16      	cmp	r3, #22
 8009990:	d810      	bhi.n	80099b4 <_dtoa_r+0x164>
 8009992:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009994:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	4b80      	ldr	r3, [pc, #512]	; (8009b9c <_dtoa_r+0x34c>)
 800999a:	00d2      	lsls	r2, r2, #3
 800999c:	189b      	adds	r3, r3, r2
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f7f6 fd57 	bl	8000454 <__aeabi_dcmplt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d047      	beq.n	8009a3a <_dtoa_r+0x1ea>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	2300      	movs	r3, #0
 80099b2:	9316      	str	r3, [sp, #88]	; 0x58
 80099b4:	2200      	movs	r2, #0
 80099b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099b8:	920a      	str	r2, [sp, #40]	; 0x28
 80099ba:	1bdb      	subs	r3, r3, r7
 80099bc:	1e5a      	subs	r2, r3, #1
 80099be:	d53e      	bpl.n	8009a3e <_dtoa_r+0x1ee>
 80099c0:	2201      	movs	r2, #1
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	930a      	str	r3, [sp, #40]	; 0x28
 80099c6:	2300      	movs	r3, #0
 80099c8:	930c      	str	r3, [sp, #48]	; 0x30
 80099ca:	9b03      	ldr	r3, [sp, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db38      	blt.n	8009a42 <_dtoa_r+0x1f2>
 80099d0:	9a03      	ldr	r2, [sp, #12]
 80099d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d4:	4694      	mov	ip, r2
 80099d6:	4463      	add	r3, ip
 80099d8:	930c      	str	r3, [sp, #48]	; 0x30
 80099da:	2300      	movs	r3, #0
 80099dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80099de:	930d      	str	r3, [sp, #52]	; 0x34
 80099e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099e2:	2401      	movs	r4, #1
 80099e4:	2b09      	cmp	r3, #9
 80099e6:	d867      	bhi.n	8009ab8 <_dtoa_r+0x268>
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	dd02      	ble.n	80099f2 <_dtoa_r+0x1a2>
 80099ec:	2400      	movs	r4, #0
 80099ee:	3b04      	subs	r3, #4
 80099f0:	9322      	str	r3, [sp, #136]	; 0x88
 80099f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099f4:	1e98      	subs	r0, r3, #2
 80099f6:	2803      	cmp	r0, #3
 80099f8:	d867      	bhi.n	8009aca <_dtoa_r+0x27a>
 80099fa:	f7f6 fb8b 	bl	8000114 <__gnu_thumb1_case_uqi>
 80099fe:	3a2b      	.short	0x3a2b
 8009a00:	5b38      	.short	0x5b38
 8009a02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a04:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009a06:	18f6      	adds	r6, r6, r3
 8009a08:	4b65      	ldr	r3, [pc, #404]	; (8009ba0 <_dtoa_r+0x350>)
 8009a0a:	18f2      	adds	r2, r6, r3
 8009a0c:	2a20      	cmp	r2, #32
 8009a0e:	dd0f      	ble.n	8009a30 <_dtoa_r+0x1e0>
 8009a10:	2340      	movs	r3, #64	; 0x40
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	409f      	lsls	r7, r3
 8009a16:	4b63      	ldr	r3, [pc, #396]	; (8009ba4 <_dtoa_r+0x354>)
 8009a18:	0038      	movs	r0, r7
 8009a1a:	18f3      	adds	r3, r6, r3
 8009a1c:	40dc      	lsrs	r4, r3
 8009a1e:	4320      	orrs	r0, r4
 8009a20:	f7f8 fc4e 	bl	80022c0 <__aeabi_ui2d>
 8009a24:	2201      	movs	r2, #1
 8009a26:	4b60      	ldr	r3, [pc, #384]	; (8009ba8 <_dtoa_r+0x358>)
 8009a28:	1e77      	subs	r7, r6, #1
 8009a2a:	18cb      	adds	r3, r1, r3
 8009a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a2e:	e776      	b.n	800991e <_dtoa_r+0xce>
 8009a30:	2320      	movs	r3, #32
 8009a32:	0020      	movs	r0, r4
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	4098      	lsls	r0, r3
 8009a38:	e7f2      	b.n	8009a20 <_dtoa_r+0x1d0>
 8009a3a:	9016      	str	r0, [sp, #88]	; 0x58
 8009a3c:	e7ba      	b.n	80099b4 <_dtoa_r+0x164>
 8009a3e:	920c      	str	r2, [sp, #48]	; 0x30
 8009a40:	e7c3      	b.n	80099ca <_dtoa_r+0x17a>
 8009a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a44:	9a03      	ldr	r2, [sp, #12]
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	930a      	str	r3, [sp, #40]	; 0x28
 8009a4a:	4253      	negs	r3, r2
 8009a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a52:	e7c5      	b.n	80099e0 <_dtoa_r+0x190>
 8009a54:	2300      	movs	r3, #0
 8009a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a5c:	9307      	str	r3, [sp, #28]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dc13      	bgt.n	8009a8a <_dtoa_r+0x23a>
 8009a62:	2301      	movs	r3, #1
 8009a64:	001a      	movs	r2, r3
 8009a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a68:	9307      	str	r3, [sp, #28]
 8009a6a:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a6c:	e00d      	b.n	8009a8a <_dtoa_r+0x23a>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7f1      	b.n	8009a56 <_dtoa_r+0x206>
 8009a72:	2300      	movs	r3, #0
 8009a74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a78:	4694      	mov	ip, r2
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	4463      	add	r3, ip
 8009a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a80:	3301      	adds	r3, #1
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dc00      	bgt.n	8009a8a <_dtoa_r+0x23a>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	2204      	movs	r2, #4
 8009a8e:	0010      	movs	r0, r2
 8009a90:	3014      	adds	r0, #20
 8009a92:	4298      	cmp	r0, r3
 8009a94:	d91d      	bls.n	8009ad2 <_dtoa_r+0x282>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	0018      	movs	r0, r3
 8009a9a:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009a9c:	f7fd fe90 	bl	80077c0 <_Balloc>
 8009aa0:	9006      	str	r0, [sp, #24]
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d118      	bne.n	8009ad8 <_dtoa_r+0x288>
 8009aa6:	21b0      	movs	r1, #176	; 0xb0
 8009aa8:	4b40      	ldr	r3, [pc, #256]	; (8009bac <_dtoa_r+0x35c>)
 8009aaa:	4841      	ldr	r0, [pc, #260]	; (8009bb0 <_dtoa_r+0x360>)
 8009aac:	9a06      	ldr	r2, [sp, #24]
 8009aae:	31ff      	adds	r1, #255	; 0xff
 8009ab0:	f7ff fdd2 	bl	8009658 <__assert_func>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e7dd      	b.n	8009a74 <_dtoa_r+0x224>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	940f      	str	r4, [sp, #60]	; 0x3c
 8009abc:	9322      	str	r3, [sp, #136]	; 0x88
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ac2:	9307      	str	r3, [sp, #28]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	3313      	adds	r3, #19
 8009ac8:	e7cf      	b.n	8009a6a <_dtoa_r+0x21a>
 8009aca:	2301      	movs	r3, #1
 8009acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ace:	3b02      	subs	r3, #2
 8009ad0:	e7f6      	b.n	8009ac0 <_dtoa_r+0x270>
 8009ad2:	3101      	adds	r1, #1
 8009ad4:	0052      	lsls	r2, r2, #1
 8009ad6:	e7da      	b.n	8009a8e <_dtoa_r+0x23e>
 8009ad8:	9b04      	ldr	r3, [sp, #16]
 8009ada:	9a06      	ldr	r2, [sp, #24]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
 8009ade:	9b07      	ldr	r3, [sp, #28]
 8009ae0:	2b0e      	cmp	r3, #14
 8009ae2:	d900      	bls.n	8009ae6 <_dtoa_r+0x296>
 8009ae4:	e0e3      	b.n	8009cae <_dtoa_r+0x45e>
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	d100      	bne.n	8009aec <_dtoa_r+0x29c>
 8009aea:	e0e0      	b.n	8009cae <_dtoa_r+0x45e>
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dd62      	ble.n	8009bb8 <_dtoa_r+0x368>
 8009af2:	210f      	movs	r1, #15
 8009af4:	9a03      	ldr	r2, [sp, #12]
 8009af6:	4b29      	ldr	r3, [pc, #164]	; (8009b9c <_dtoa_r+0x34c>)
 8009af8:	400a      	ands	r2, r1
 8009afa:	00d2      	lsls	r2, r2, #3
 8009afc:	189b      	adds	r3, r3, r2
 8009afe:	681e      	ldr	r6, [r3, #0]
 8009b00:	685f      	ldr	r7, [r3, #4]
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	2402      	movs	r4, #2
 8009b06:	111d      	asrs	r5, r3, #4
 8009b08:	05db      	lsls	r3, r3, #23
 8009b0a:	d50a      	bpl.n	8009b22 <_dtoa_r+0x2d2>
 8009b0c:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <_dtoa_r+0x364>)
 8009b0e:	400d      	ands	r5, r1
 8009b10:	6a1a      	ldr	r2, [r3, #32]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b18:	f7f7 f910 	bl	8000d3c <__aeabi_ddiv>
 8009b1c:	9008      	str	r0, [sp, #32]
 8009b1e:	9109      	str	r1, [sp, #36]	; 0x24
 8009b20:	3401      	adds	r4, #1
 8009b22:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <_dtoa_r+0x364>)
 8009b24:	930e      	str	r3, [sp, #56]	; 0x38
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	d108      	bne.n	8009b3c <_dtoa_r+0x2ec>
 8009b2a:	9808      	ldr	r0, [sp, #32]
 8009b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b2e:	0032      	movs	r2, r6
 8009b30:	003b      	movs	r3, r7
 8009b32:	f7f7 f903 	bl	8000d3c <__aeabi_ddiv>
 8009b36:	9008      	str	r0, [sp, #32]
 8009b38:	9109      	str	r1, [sp, #36]	; 0x24
 8009b3a:	e058      	b.n	8009bee <_dtoa_r+0x39e>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	421d      	tst	r5, r3
 8009b40:	d009      	beq.n	8009b56 <_dtoa_r+0x306>
 8009b42:	18e4      	adds	r4, r4, r3
 8009b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b46:	0030      	movs	r0, r6
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	0039      	movs	r1, r7
 8009b4e:	f7f7 fcef 	bl	8001530 <__aeabi_dmul>
 8009b52:	0006      	movs	r6, r0
 8009b54:	000f      	movs	r7, r1
 8009b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b58:	106d      	asrs	r5, r5, #1
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	e7e2      	b.n	8009b24 <_dtoa_r+0x2d4>
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	7ff00000 	.word	0x7ff00000
 8009b64:	0000270f 	.word	0x0000270f
 8009b68:	0800bf9d 	.word	0x0800bf9d
 8009b6c:	0800bfa0 	.word	0x0800bfa0
 8009b70:	0800bf36 	.word	0x0800bf36
 8009b74:	0800bf37 	.word	0x0800bf37
 8009b78:	3ff00000 	.word	0x3ff00000
 8009b7c:	fffffc01 	.word	0xfffffc01
 8009b80:	3ff80000 	.word	0x3ff80000
 8009b84:	636f4361 	.word	0x636f4361
 8009b88:	3fd287a7 	.word	0x3fd287a7
 8009b8c:	8b60c8b3 	.word	0x8b60c8b3
 8009b90:	3fc68a28 	.word	0x3fc68a28
 8009b94:	509f79fb 	.word	0x509f79fb
 8009b98:	3fd34413 	.word	0x3fd34413
 8009b9c:	0800be30 	.word	0x0800be30
 8009ba0:	00000432 	.word	0x00000432
 8009ba4:	00000412 	.word	0x00000412
 8009ba8:	fe100000 	.word	0xfe100000
 8009bac:	0800bd97 	.word	0x0800bd97
 8009bb0:	0800bfa1 	.word	0x0800bfa1
 8009bb4:	0800be08 	.word	0x0800be08
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	2402      	movs	r4, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d016      	beq.n	8009bee <_dtoa_r+0x39e>
 8009bc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009bc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009bc4:	220f      	movs	r2, #15
 8009bc6:	425d      	negs	r5, r3
 8009bc8:	402a      	ands	r2, r5
 8009bca:	4bdd      	ldr	r3, [pc, #884]	; (8009f40 <_dtoa_r+0x6f0>)
 8009bcc:	00d2      	lsls	r2, r2, #3
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f7f7 fcac 	bl	8001530 <__aeabi_dmul>
 8009bd8:	2701      	movs	r7, #1
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9008      	str	r0, [sp, #32]
 8009bde:	9109      	str	r1, [sp, #36]	; 0x24
 8009be0:	4ed8      	ldr	r6, [pc, #864]	; (8009f44 <_dtoa_r+0x6f4>)
 8009be2:	112d      	asrs	r5, r5, #4
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	d000      	beq.n	8009bea <_dtoa_r+0x39a>
 8009be8:	e091      	b.n	8009d0e <_dtoa_r+0x4be>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1a3      	bne.n	8009b36 <_dtoa_r+0x2e6>
 8009bee:	9e08      	ldr	r6, [sp, #32]
 8009bf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d100      	bne.n	8009bfa <_dtoa_r+0x3aa>
 8009bf8:	e094      	b.n	8009d24 <_dtoa_r+0x4d4>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	0030      	movs	r0, r6
 8009bfe:	0039      	movs	r1, r7
 8009c00:	4bd1      	ldr	r3, [pc, #836]	; (8009f48 <_dtoa_r+0x6f8>)
 8009c02:	f7f6 fc27 	bl	8000454 <__aeabi_dcmplt>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d100      	bne.n	8009c0c <_dtoa_r+0x3bc>
 8009c0a:	e08b      	b.n	8009d24 <_dtoa_r+0x4d4>
 8009c0c:	9b07      	ldr	r3, [sp, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d100      	bne.n	8009c14 <_dtoa_r+0x3c4>
 8009c12:	e087      	b.n	8009d24 <_dtoa_r+0x4d4>
 8009c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dd45      	ble.n	8009ca6 <_dtoa_r+0x456>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	930e      	str	r3, [sp, #56]	; 0x38
 8009c22:	0030      	movs	r0, r6
 8009c24:	4bc9      	ldr	r3, [pc, #804]	; (8009f4c <_dtoa_r+0x6fc>)
 8009c26:	0039      	movs	r1, r7
 8009c28:	f7f7 fc82 	bl	8001530 <__aeabi_dmul>
 8009c2c:	9008      	str	r0, [sp, #32]
 8009c2e:	9109      	str	r1, [sp, #36]	; 0x24
 8009c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c32:	3401      	adds	r4, #1
 8009c34:	0020      	movs	r0, r4
 8009c36:	9e08      	ldr	r6, [sp, #32]
 8009c38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c3c:	f7f8 fb10 	bl	8002260 <__aeabi_i2d>
 8009c40:	0032      	movs	r2, r6
 8009c42:	003b      	movs	r3, r7
 8009c44:	f7f7 fc74 	bl	8001530 <__aeabi_dmul>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4bc1      	ldr	r3, [pc, #772]	; (8009f50 <_dtoa_r+0x700>)
 8009c4c:	f7f6 fd16 	bl	800067c <__aeabi_dadd>
 8009c50:	4ac0      	ldr	r2, [pc, #768]	; (8009f54 <_dtoa_r+0x704>)
 8009c52:	9014      	str	r0, [sp, #80]	; 0x50
 8009c54:	9115      	str	r1, [sp, #84]	; 0x54
 8009c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009c5a:	4694      	mov	ip, r2
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	9409      	str	r4, [sp, #36]	; 0x24
 8009c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c62:	4463      	add	r3, ip
 8009c64:	9318      	str	r3, [sp, #96]	; 0x60
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d15e      	bne.n	8009d2c <_dtoa_r+0x4dc>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4bb9      	ldr	r3, [pc, #740]	; (8009f58 <_dtoa_r+0x708>)
 8009c72:	0030      	movs	r0, r6
 8009c74:	0039      	movs	r1, r7
 8009c76:	f7f7 ff1d 	bl	8001ab4 <__aeabi_dsub>
 8009c7a:	9a08      	ldr	r2, [sp, #32]
 8009c7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009c7e:	0004      	movs	r4, r0
 8009c80:	000d      	movs	r5, r1
 8009c82:	f7f6 fbfb 	bl	800047c <__aeabi_dcmpgt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d000      	beq.n	8009c8c <_dtoa_r+0x43c>
 8009c8a:	e2b3      	b.n	800a1f4 <_dtoa_r+0x9a4>
 8009c8c:	48b3      	ldr	r0, [pc, #716]	; (8009f5c <_dtoa_r+0x70c>)
 8009c8e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009c90:	4684      	mov	ip, r0
 8009c92:	4461      	add	r1, ip
 8009c94:	000b      	movs	r3, r1
 8009c96:	0020      	movs	r0, r4
 8009c98:	0029      	movs	r1, r5
 8009c9a:	9a08      	ldr	r2, [sp, #32]
 8009c9c:	f7f6 fbda 	bl	8000454 <__aeabi_dcmplt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d000      	beq.n	8009ca6 <_dtoa_r+0x456>
 8009ca4:	e2a3      	b.n	800a1ee <_dtoa_r+0x99e>
 8009ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ca8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009caa:	9308      	str	r3, [sp, #32]
 8009cac:	9409      	str	r4, [sp, #36]	; 0x24
 8009cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da00      	bge.n	8009cb6 <_dtoa_r+0x466>
 8009cb4:	e179      	b.n	8009faa <_dtoa_r+0x75a>
 8009cb6:	9a03      	ldr	r2, [sp, #12]
 8009cb8:	2a0e      	cmp	r2, #14
 8009cba:	dd00      	ble.n	8009cbe <_dtoa_r+0x46e>
 8009cbc:	e175      	b.n	8009faa <_dtoa_r+0x75a>
 8009cbe:	4ba0      	ldr	r3, [pc, #640]	; (8009f40 <_dtoa_r+0x6f0>)
 8009cc0:	00d2      	lsls	r2, r2, #3
 8009cc2:	189b      	adds	r3, r3, r2
 8009cc4:	681e      	ldr	r6, [r3, #0]
 8009cc6:	685f      	ldr	r7, [r3, #4]
 8009cc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	db00      	blt.n	8009cd0 <_dtoa_r+0x480>
 8009cce:	e0e5      	b.n	8009e9c <_dtoa_r+0x64c>
 8009cd0:	9b07      	ldr	r3, [sp, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd00      	ble.n	8009cd8 <_dtoa_r+0x488>
 8009cd6:	e0e1      	b.n	8009e9c <_dtoa_r+0x64c>
 8009cd8:	d000      	beq.n	8009cdc <_dtoa_r+0x48c>
 8009cda:	e288      	b.n	800a1ee <_dtoa_r+0x99e>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	0030      	movs	r0, r6
 8009ce0:	0039      	movs	r1, r7
 8009ce2:	4b9d      	ldr	r3, [pc, #628]	; (8009f58 <_dtoa_r+0x708>)
 8009ce4:	f7f7 fc24 	bl	8001530 <__aeabi_dmul>
 8009ce8:	9a08      	ldr	r2, [sp, #32]
 8009cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cec:	f7f6 fbd0 	bl	8000490 <__aeabi_dcmpge>
 8009cf0:	9e07      	ldr	r6, [sp, #28]
 8009cf2:	0037      	movs	r7, r6
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d000      	beq.n	8009cfa <_dtoa_r+0x4aa>
 8009cf8:	e25f      	b.n	800a1ba <_dtoa_r+0x96a>
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	2331      	movs	r3, #49	; 0x31
 8009d04:	7013      	strb	r3, [r2, #0]
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	e25a      	b.n	800a1c4 <_dtoa_r+0x974>
 8009d0e:	423d      	tst	r5, r7
 8009d10:	d005      	beq.n	8009d1e <_dtoa_r+0x4ce>
 8009d12:	6832      	ldr	r2, [r6, #0]
 8009d14:	6873      	ldr	r3, [r6, #4]
 8009d16:	f7f7 fc0b 	bl	8001530 <__aeabi_dmul>
 8009d1a:	003b      	movs	r3, r7
 8009d1c:	3401      	adds	r4, #1
 8009d1e:	106d      	asrs	r5, r5, #1
 8009d20:	3608      	adds	r6, #8
 8009d22:	e75f      	b.n	8009be4 <_dtoa_r+0x394>
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	930e      	str	r3, [sp, #56]	; 0x38
 8009d28:	9b07      	ldr	r3, [sp, #28]
 8009d2a:	e783      	b.n	8009c34 <_dtoa_r+0x3e4>
 8009d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d2e:	4b84      	ldr	r3, [pc, #528]	; (8009f40 <_dtoa_r+0x6f0>)
 8009d30:	3a01      	subs	r2, #1
 8009d32:	00d2      	lsls	r2, r2, #3
 8009d34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d36:	189b      	adds	r3, r3, r2
 8009d38:	9c08      	ldr	r4, [sp, #32]
 8009d3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2900      	cmp	r1, #0
 8009d42:	d051      	beq.n	8009de8 <_dtoa_r+0x598>
 8009d44:	2000      	movs	r0, #0
 8009d46:	4986      	ldr	r1, [pc, #536]	; (8009f60 <_dtoa_r+0x710>)
 8009d48:	f7f6 fff8 	bl	8000d3c <__aeabi_ddiv>
 8009d4c:	0022      	movs	r2, r4
 8009d4e:	002b      	movs	r3, r5
 8009d50:	f7f7 feb0 	bl	8001ab4 <__aeabi_dsub>
 8009d54:	9a06      	ldr	r2, [sp, #24]
 8009d56:	0004      	movs	r4, r0
 8009d58:	4694      	mov	ip, r2
 8009d5a:	000d      	movs	r5, r1
 8009d5c:	9b06      	ldr	r3, [sp, #24]
 8009d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8009d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d62:	4463      	add	r3, ip
 8009d64:	9318      	str	r3, [sp, #96]	; 0x60
 8009d66:	0039      	movs	r1, r7
 8009d68:	0030      	movs	r0, r6
 8009d6a:	f7f8 fa43 	bl	80021f4 <__aeabi_d2iz>
 8009d6e:	9012      	str	r0, [sp, #72]	; 0x48
 8009d70:	f7f8 fa76 	bl	8002260 <__aeabi_i2d>
 8009d74:	0002      	movs	r2, r0
 8009d76:	000b      	movs	r3, r1
 8009d78:	0030      	movs	r0, r6
 8009d7a:	0039      	movs	r1, r7
 8009d7c:	f7f7 fe9a 	bl	8001ab4 <__aeabi_dsub>
 8009d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d84:	3301      	adds	r3, #1
 8009d86:	9308      	str	r3, [sp, #32]
 8009d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d8a:	0006      	movs	r6, r0
 8009d8c:	3330      	adds	r3, #48	; 0x30
 8009d8e:	7013      	strb	r3, [r2, #0]
 8009d90:	0022      	movs	r2, r4
 8009d92:	002b      	movs	r3, r5
 8009d94:	000f      	movs	r7, r1
 8009d96:	f7f6 fb5d 	bl	8000454 <__aeabi_dcmplt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d174      	bne.n	8009e88 <_dtoa_r+0x638>
 8009d9e:	0032      	movs	r2, r6
 8009da0:	003b      	movs	r3, r7
 8009da2:	2000      	movs	r0, #0
 8009da4:	4968      	ldr	r1, [pc, #416]	; (8009f48 <_dtoa_r+0x6f8>)
 8009da6:	f7f7 fe85 	bl	8001ab4 <__aeabi_dsub>
 8009daa:	0022      	movs	r2, r4
 8009dac:	002b      	movs	r3, r5
 8009dae:	f7f6 fb51 	bl	8000454 <__aeabi_dcmplt>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d000      	beq.n	8009db8 <_dtoa_r+0x568>
 8009db6:	e0d7      	b.n	8009f68 <_dtoa_r+0x718>
 8009db8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009dba:	9a08      	ldr	r2, [sp, #32]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d100      	bne.n	8009dc2 <_dtoa_r+0x572>
 8009dc0:	e771      	b.n	8009ca6 <_dtoa_r+0x456>
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	0020      	movs	r0, r4
 8009dc6:	0029      	movs	r1, r5
 8009dc8:	4b60      	ldr	r3, [pc, #384]	; (8009f4c <_dtoa_r+0x6fc>)
 8009dca:	f7f7 fbb1 	bl	8001530 <__aeabi_dmul>
 8009dce:	4b5f      	ldr	r3, [pc, #380]	; (8009f4c <_dtoa_r+0x6fc>)
 8009dd0:	0004      	movs	r4, r0
 8009dd2:	000d      	movs	r5, r1
 8009dd4:	0030      	movs	r0, r6
 8009dd6:	0039      	movs	r1, r7
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f7f7 fba9 	bl	8001530 <__aeabi_dmul>
 8009dde:	9b08      	ldr	r3, [sp, #32]
 8009de0:	0006      	movs	r6, r0
 8009de2:	000f      	movs	r7, r1
 8009de4:	9314      	str	r3, [sp, #80]	; 0x50
 8009de6:	e7be      	b.n	8009d66 <_dtoa_r+0x516>
 8009de8:	0020      	movs	r0, r4
 8009dea:	0029      	movs	r1, r5
 8009dec:	f7f7 fba0 	bl	8001530 <__aeabi_dmul>
 8009df0:	9a06      	ldr	r2, [sp, #24]
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	4694      	mov	ip, r2
 8009df6:	9308      	str	r3, [sp, #32]
 8009df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dfa:	9014      	str	r0, [sp, #80]	; 0x50
 8009dfc:	9115      	str	r1, [sp, #84]	; 0x54
 8009dfe:	4463      	add	r3, ip
 8009e00:	9319      	str	r3, [sp, #100]	; 0x64
 8009e02:	0030      	movs	r0, r6
 8009e04:	0039      	movs	r1, r7
 8009e06:	f7f8 f9f5 	bl	80021f4 <__aeabi_d2iz>
 8009e0a:	9018      	str	r0, [sp, #96]	; 0x60
 8009e0c:	f7f8 fa28 	bl	8002260 <__aeabi_i2d>
 8009e10:	0002      	movs	r2, r0
 8009e12:	000b      	movs	r3, r1
 8009e14:	0030      	movs	r0, r6
 8009e16:	0039      	movs	r1, r7
 8009e18:	f7f7 fe4c 	bl	8001ab4 <__aeabi_dsub>
 8009e1c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009e1e:	9b08      	ldr	r3, [sp, #32]
 8009e20:	3630      	adds	r6, #48	; 0x30
 8009e22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e24:	701e      	strb	r6, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	0004      	movs	r4, r0
 8009e2a:	000d      	movs	r5, r1
 8009e2c:	9308      	str	r3, [sp, #32]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d12d      	bne.n	8009e8e <_dtoa_r+0x63e>
 8009e32:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009e34:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009e36:	9a06      	ldr	r2, [sp, #24]
 8009e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e3a:	4694      	mov	ip, r2
 8009e3c:	4463      	add	r3, ip
 8009e3e:	2200      	movs	r2, #0
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	4b47      	ldr	r3, [pc, #284]	; (8009f60 <_dtoa_r+0x710>)
 8009e44:	f7f6 fc1a 	bl	800067c <__aeabi_dadd>
 8009e48:	0002      	movs	r2, r0
 8009e4a:	000b      	movs	r3, r1
 8009e4c:	0020      	movs	r0, r4
 8009e4e:	0029      	movs	r1, r5
 8009e50:	f7f6 fb14 	bl	800047c <__aeabi_dcmpgt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d000      	beq.n	8009e5a <_dtoa_r+0x60a>
 8009e58:	e086      	b.n	8009f68 <_dtoa_r+0x718>
 8009e5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5e:	2000      	movs	r0, #0
 8009e60:	493f      	ldr	r1, [pc, #252]	; (8009f60 <_dtoa_r+0x710>)
 8009e62:	f7f7 fe27 	bl	8001ab4 <__aeabi_dsub>
 8009e66:	0002      	movs	r2, r0
 8009e68:	000b      	movs	r3, r1
 8009e6a:	0020      	movs	r0, r4
 8009e6c:	0029      	movs	r1, r5
 8009e6e:	f7f6 faf1 	bl	8000454 <__aeabi_dcmplt>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d100      	bne.n	8009e78 <_dtoa_r+0x628>
 8009e76:	e716      	b.n	8009ca6 <_dtoa_r+0x456>
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	001a      	movs	r2, r3
 8009e7c:	3a01      	subs	r2, #1
 8009e7e:	9208      	str	r2, [sp, #32]
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	2a30      	cmp	r2, #48	; 0x30
 8009e84:	d0f8      	beq.n	8009e78 <_dtoa_r+0x628>
 8009e86:	9308      	str	r3, [sp, #32]
 8009e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	e046      	b.n	8009f1c <_dtoa_r+0x6cc>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <_dtoa_r+0x6fc>)
 8009e92:	f7f7 fb4d 	bl	8001530 <__aeabi_dmul>
 8009e96:	0006      	movs	r6, r0
 8009e98:	000f      	movs	r7, r1
 8009e9a:	e7b2      	b.n	8009e02 <_dtoa_r+0x5b2>
 8009e9c:	9b06      	ldr	r3, [sp, #24]
 8009e9e:	9a06      	ldr	r2, [sp, #24]
 8009ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ea2:	9b07      	ldr	r3, [sp, #28]
 8009ea4:	9c08      	ldr	r4, [sp, #32]
 8009ea6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	189b      	adds	r3, r3, r2
 8009eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eae:	0032      	movs	r2, r6
 8009eb0:	003b      	movs	r3, r7
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	0029      	movs	r1, r5
 8009eb6:	f7f6 ff41 	bl	8000d3c <__aeabi_ddiv>
 8009eba:	f7f8 f99b 	bl	80021f4 <__aeabi_d2iz>
 8009ebe:	9007      	str	r0, [sp, #28]
 8009ec0:	f7f8 f9ce 	bl	8002260 <__aeabi_i2d>
 8009ec4:	0032      	movs	r2, r6
 8009ec6:	003b      	movs	r3, r7
 8009ec8:	f7f7 fb32 	bl	8001530 <__aeabi_dmul>
 8009ecc:	0002      	movs	r2, r0
 8009ece:	000b      	movs	r3, r1
 8009ed0:	0020      	movs	r0, r4
 8009ed2:	0029      	movs	r1, r5
 8009ed4:	f7f7 fdee 	bl	8001ab4 <__aeabi_dsub>
 8009ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eda:	001a      	movs	r2, r3
 8009edc:	3201      	adds	r2, #1
 8009ede:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee0:	9208      	str	r2, [sp, #32]
 8009ee2:	9a07      	ldr	r2, [sp, #28]
 8009ee4:	3230      	adds	r2, #48	; 0x30
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d14f      	bne.n	8009f8e <_dtoa_r+0x73e>
 8009eee:	0002      	movs	r2, r0
 8009ef0:	000b      	movs	r3, r1
 8009ef2:	f7f6 fbc3 	bl	800067c <__aeabi_dadd>
 8009ef6:	0032      	movs	r2, r6
 8009ef8:	003b      	movs	r3, r7
 8009efa:	0004      	movs	r4, r0
 8009efc:	000d      	movs	r5, r1
 8009efe:	f7f6 fabd 	bl	800047c <__aeabi_dcmpgt>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d12e      	bne.n	8009f64 <_dtoa_r+0x714>
 8009f06:	0032      	movs	r2, r6
 8009f08:	003b      	movs	r3, r7
 8009f0a:	0020      	movs	r0, r4
 8009f0c:	0029      	movs	r1, r5
 8009f0e:	f7f6 fa9b 	bl	8000448 <__aeabi_dcmpeq>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d002      	beq.n	8009f1c <_dtoa_r+0x6cc>
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	07de      	lsls	r6, r3, #31
 8009f1a:	d423      	bmi.n	8009f64 <_dtoa_r+0x714>
 8009f1c:	9905      	ldr	r1, [sp, #20]
 8009f1e:	9804      	ldr	r0, [sp, #16]
 8009f20:	f7fd fc76 	bl	8007810 <_Bfree>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9a08      	ldr	r2, [sp, #32]
 8009f28:	7013      	strb	r3, [r2, #0]
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f2e:	3301      	adds	r3, #1
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d100      	bne.n	8009f3a <_dtoa_r+0x6ea>
 8009f38:	e4bd      	b.n	80098b6 <_dtoa_r+0x66>
 8009f3a:	9a08      	ldr	r2, [sp, #32]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e4ba      	b.n	80098b6 <_dtoa_r+0x66>
 8009f40:	0800be30 	.word	0x0800be30
 8009f44:	0800be08 	.word	0x0800be08
 8009f48:	3ff00000 	.word	0x3ff00000
 8009f4c:	40240000 	.word	0x40240000
 8009f50:	401c0000 	.word	0x401c0000
 8009f54:	fcc00000 	.word	0xfcc00000
 8009f58:	40140000 	.word	0x40140000
 8009f5c:	7cc00000 	.word	0x7cc00000
 8009f60:	3fe00000 	.word	0x3fe00000
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	930e      	str	r3, [sp, #56]	; 0x38
 8009f68:	9b08      	ldr	r3, [sp, #32]
 8009f6a:	9308      	str	r3, [sp, #32]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	2a39      	cmp	r2, #57	; 0x39
 8009f72:	d108      	bne.n	8009f86 <_dtoa_r+0x736>
 8009f74:	9a06      	ldr	r2, [sp, #24]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d1f7      	bne.n	8009f6a <_dtoa_r+0x71a>
 8009f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f7c:	9906      	ldr	r1, [sp, #24]
 8009f7e:	3201      	adds	r2, #1
 8009f80:	920e      	str	r2, [sp, #56]	; 0x38
 8009f82:	2230      	movs	r2, #48	; 0x30
 8009f84:	700a      	strb	r2, [r1, #0]
 8009f86:	781a      	ldrb	r2, [r3, #0]
 8009f88:	3201      	adds	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]
 8009f8c:	e77c      	b.n	8009e88 <_dtoa_r+0x638>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4ba9      	ldr	r3, [pc, #676]	; (800a238 <_dtoa_r+0x9e8>)
 8009f92:	f7f7 facd 	bl	8001530 <__aeabi_dmul>
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	0004      	movs	r4, r0
 8009f9c:	000d      	movs	r5, r1
 8009f9e:	f7f6 fa53 	bl	8000448 <__aeabi_dcmpeq>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d100      	bne.n	8009fa8 <_dtoa_r+0x758>
 8009fa6:	e782      	b.n	8009eae <_dtoa_r+0x65e>
 8009fa8:	e7b8      	b.n	8009f1c <_dtoa_r+0x6cc>
 8009faa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009fac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009fae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fb0:	2f00      	cmp	r7, #0
 8009fb2:	d012      	beq.n	8009fda <_dtoa_r+0x78a>
 8009fb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fb6:	2a01      	cmp	r2, #1
 8009fb8:	dc6e      	bgt.n	800a098 <_dtoa_r+0x848>
 8009fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	d065      	beq.n	800a08c <_dtoa_r+0x83c>
 8009fc0:	4a9e      	ldr	r2, [pc, #632]	; (800a23c <_dtoa_r+0x9ec>)
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	18d2      	adds	r2, r2, r3
 8009fca:	920a      	str	r2, [sp, #40]	; 0x28
 8009fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fce:	9804      	ldr	r0, [sp, #16]
 8009fd0:	18d3      	adds	r3, r2, r3
 8009fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8009fd4:	f7fd fcb2 	bl	800793c <__i2b>
 8009fd8:	0007      	movs	r7, r0
 8009fda:	2c00      	cmp	r4, #0
 8009fdc:	d00e      	beq.n	8009ffc <_dtoa_r+0x7ac>
 8009fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	dd0b      	ble.n	8009ffc <_dtoa_r+0x7ac>
 8009fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fe6:	0023      	movs	r3, r4
 8009fe8:	4294      	cmp	r4, r2
 8009fea:	dd00      	ble.n	8009fee <_dtoa_r+0x79e>
 8009fec:	0013      	movs	r3, r2
 8009fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff0:	1ae4      	subs	r4, r4, r3
 8009ff2:	1ad2      	subs	r2, r2, r3
 8009ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d01e      	beq.n	800a040 <_dtoa_r+0x7f0>
 800a002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d05c      	beq.n	800a0c2 <_dtoa_r+0x872>
 800a008:	2d00      	cmp	r5, #0
 800a00a:	dd10      	ble.n	800a02e <_dtoa_r+0x7de>
 800a00c:	0039      	movs	r1, r7
 800a00e:	002a      	movs	r2, r5
 800a010:	9804      	ldr	r0, [sp, #16]
 800a012:	f7fd fd5b 	bl	8007acc <__pow5mult>
 800a016:	9a05      	ldr	r2, [sp, #20]
 800a018:	0001      	movs	r1, r0
 800a01a:	0007      	movs	r7, r0
 800a01c:	9804      	ldr	r0, [sp, #16]
 800a01e:	f7fd fca5 	bl	800796c <__multiply>
 800a022:	0006      	movs	r6, r0
 800a024:	9905      	ldr	r1, [sp, #20]
 800a026:	9804      	ldr	r0, [sp, #16]
 800a028:	f7fd fbf2 	bl	8007810 <_Bfree>
 800a02c:	9605      	str	r6, [sp, #20]
 800a02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a030:	1b5a      	subs	r2, r3, r5
 800a032:	42ab      	cmp	r3, r5
 800a034:	d004      	beq.n	800a040 <_dtoa_r+0x7f0>
 800a036:	9905      	ldr	r1, [sp, #20]
 800a038:	9804      	ldr	r0, [sp, #16]
 800a03a:	f7fd fd47 	bl	8007acc <__pow5mult>
 800a03e:	9005      	str	r0, [sp, #20]
 800a040:	2101      	movs	r1, #1
 800a042:	9804      	ldr	r0, [sp, #16]
 800a044:	f7fd fc7a 	bl	800793c <__i2b>
 800a048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a04a:	0006      	movs	r6, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd3a      	ble.n	800a0c6 <_dtoa_r+0x876>
 800a050:	001a      	movs	r2, r3
 800a052:	0001      	movs	r1, r0
 800a054:	9804      	ldr	r0, [sp, #16]
 800a056:	f7fd fd39 	bl	8007acc <__pow5mult>
 800a05a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a05c:	0006      	movs	r6, r0
 800a05e:	2500      	movs	r5, #0
 800a060:	2b01      	cmp	r3, #1
 800a062:	dc38      	bgt.n	800a0d6 <_dtoa_r+0x886>
 800a064:	2500      	movs	r5, #0
 800a066:	9b08      	ldr	r3, [sp, #32]
 800a068:	42ab      	cmp	r3, r5
 800a06a:	d130      	bne.n	800a0ce <_dtoa_r+0x87e>
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	031b      	lsls	r3, r3, #12
 800a070:	42ab      	cmp	r3, r5
 800a072:	d12c      	bne.n	800a0ce <_dtoa_r+0x87e>
 800a074:	4b72      	ldr	r3, [pc, #456]	; (800a240 <_dtoa_r+0x9f0>)
 800a076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a078:	4213      	tst	r3, r2
 800a07a:	d028      	beq.n	800a0ce <_dtoa_r+0x87e>
 800a07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07e:	3501      	adds	r5, #1
 800a080:	3301      	adds	r3, #1
 800a082:	930a      	str	r3, [sp, #40]	; 0x28
 800a084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a086:	3301      	adds	r3, #1
 800a088:	930c      	str	r3, [sp, #48]	; 0x30
 800a08a:	e020      	b.n	800a0ce <_dtoa_r+0x87e>
 800a08c:	2336      	movs	r3, #54	; 0x36
 800a08e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a090:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a092:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	e795      	b.n	8009fc4 <_dtoa_r+0x774>
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	1e5d      	subs	r5, r3, #1
 800a09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09e:	42ab      	cmp	r3, r5
 800a0a0:	db07      	blt.n	800a0b2 <_dtoa_r+0x862>
 800a0a2:	1b5d      	subs	r5, r3, r5
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	da8b      	bge.n	8009fc4 <_dtoa_r+0x774>
 800a0ac:	1ae4      	subs	r4, r4, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e788      	b.n	8009fc4 <_dtoa_r+0x774>
 800a0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a0b6:	1aeb      	subs	r3, r5, r3
 800a0b8:	18d3      	adds	r3, r2, r3
 800a0ba:	950d      	str	r5, [sp, #52]	; 0x34
 800a0bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0be:	2500      	movs	r5, #0
 800a0c0:	e7f0      	b.n	800a0a4 <_dtoa_r+0x854>
 800a0c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c4:	e7b7      	b.n	800a036 <_dtoa_r+0x7e6>
 800a0c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c8:	2500      	movs	r5, #0
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	ddca      	ble.n	800a064 <_dtoa_r+0x814>
 800a0ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <_dtoa_r+0x898>
 800a0d6:	6933      	ldr	r3, [r6, #16]
 800a0d8:	3303      	adds	r3, #3
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	18f3      	adds	r3, r6, r3
 800a0de:	6858      	ldr	r0, [r3, #4]
 800a0e0:	f7fd fbe4 	bl	80078ac <__hi0bits>
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	1a18      	subs	r0, r3, r0
 800a0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ea:	1818      	adds	r0, r3, r0
 800a0ec:	0002      	movs	r2, r0
 800a0ee:	231f      	movs	r3, #31
 800a0f0:	401a      	ands	r2, r3
 800a0f2:	4218      	tst	r0, r3
 800a0f4:	d047      	beq.n	800a186 <_dtoa_r+0x936>
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	dd3f      	ble.n	800a17e <_dtoa_r+0x92e>
 800a0fe:	231c      	movs	r3, #28
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a104:	18e4      	adds	r4, r4, r3
 800a106:	18d2      	adds	r2, r2, r3
 800a108:	920a      	str	r2, [sp, #40]	; 0x28
 800a10a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a10c:	18d3      	adds	r3, r2, r3
 800a10e:	930c      	str	r3, [sp, #48]	; 0x30
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	dd05      	ble.n	800a122 <_dtoa_r+0x8d2>
 800a116:	001a      	movs	r2, r3
 800a118:	9905      	ldr	r1, [sp, #20]
 800a11a:	9804      	ldr	r0, [sp, #16]
 800a11c:	f7fd fd18 	bl	8007b50 <__lshift>
 800a120:	9005      	str	r0, [sp, #20]
 800a122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd05      	ble.n	800a134 <_dtoa_r+0x8e4>
 800a128:	0031      	movs	r1, r6
 800a12a:	001a      	movs	r2, r3
 800a12c:	9804      	ldr	r0, [sp, #16]
 800a12e:	f7fd fd0f 	bl	8007b50 <__lshift>
 800a132:	0006      	movs	r6, r0
 800a134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a136:	2b00      	cmp	r3, #0
 800a138:	d027      	beq.n	800a18a <_dtoa_r+0x93a>
 800a13a:	0031      	movs	r1, r6
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	f7fd fd75 	bl	8007c2c <__mcmp>
 800a142:	2800      	cmp	r0, #0
 800a144:	da21      	bge.n	800a18a <_dtoa_r+0x93a>
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	220a      	movs	r2, #10
 800a14a:	3b01      	subs	r3, #1
 800a14c:	9303      	str	r3, [sp, #12]
 800a14e:	9905      	ldr	r1, [sp, #20]
 800a150:	2300      	movs	r3, #0
 800a152:	9804      	ldr	r0, [sp, #16]
 800a154:	f7fd fb66 	bl	8007824 <__multadd>
 800a158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a15a:	9005      	str	r0, [sp, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d100      	bne.n	800a162 <_dtoa_r+0x912>
 800a160:	e15d      	b.n	800a41e <_dtoa_r+0xbce>
 800a162:	2300      	movs	r3, #0
 800a164:	0039      	movs	r1, r7
 800a166:	220a      	movs	r2, #10
 800a168:	9804      	ldr	r0, [sp, #16]
 800a16a:	f7fd fb5b 	bl	8007824 <__multadd>
 800a16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a170:	0007      	movs	r7, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	dc49      	bgt.n	800a20a <_dtoa_r+0x9ba>
 800a176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a178:	2b02      	cmp	r3, #2
 800a17a:	dc0e      	bgt.n	800a19a <_dtoa_r+0x94a>
 800a17c:	e045      	b.n	800a20a <_dtoa_r+0x9ba>
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d0c6      	beq.n	800a110 <_dtoa_r+0x8c0>
 800a182:	331c      	adds	r3, #28
 800a184:	e7bd      	b.n	800a102 <_dtoa_r+0x8b2>
 800a186:	0013      	movs	r3, r2
 800a188:	e7fb      	b.n	800a182 <_dtoa_r+0x932>
 800a18a:	9b07      	ldr	r3, [sp, #28]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc36      	bgt.n	800a1fe <_dtoa_r+0x9ae>
 800a190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a192:	2b02      	cmp	r3, #2
 800a194:	dd33      	ble.n	800a1fe <_dtoa_r+0x9ae>
 800a196:	9b07      	ldr	r3, [sp, #28]
 800a198:	930b      	str	r3, [sp, #44]	; 0x2c
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10c      	bne.n	800a1ba <_dtoa_r+0x96a>
 800a1a0:	0031      	movs	r1, r6
 800a1a2:	2205      	movs	r2, #5
 800a1a4:	9804      	ldr	r0, [sp, #16]
 800a1a6:	f7fd fb3d 	bl	8007824 <__multadd>
 800a1aa:	0006      	movs	r6, r0
 800a1ac:	0001      	movs	r1, r0
 800a1ae:	9805      	ldr	r0, [sp, #20]
 800a1b0:	f7fd fd3c 	bl	8007c2c <__mcmp>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dd00      	ble.n	800a1ba <_dtoa_r+0x96a>
 800a1b8:	e59f      	b.n	8009cfa <_dtoa_r+0x4aa>
 800a1ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	9b06      	ldr	r3, [sp, #24]
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	0031      	movs	r1, r6
 800a1c8:	9804      	ldr	r0, [sp, #16]
 800a1ca:	f7fd fb21 	bl	8007810 <_Bfree>
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	d100      	bne.n	800a1d4 <_dtoa_r+0x984>
 800a1d2:	e6a3      	b.n	8009f1c <_dtoa_r+0x6cc>
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	d005      	beq.n	800a1e4 <_dtoa_r+0x994>
 800a1d8:	42bd      	cmp	r5, r7
 800a1da:	d003      	beq.n	800a1e4 <_dtoa_r+0x994>
 800a1dc:	0029      	movs	r1, r5
 800a1de:	9804      	ldr	r0, [sp, #16]
 800a1e0:	f7fd fb16 	bl	8007810 <_Bfree>
 800a1e4:	0039      	movs	r1, r7
 800a1e6:	9804      	ldr	r0, [sp, #16]
 800a1e8:	f7fd fb12 	bl	8007810 <_Bfree>
 800a1ec:	e696      	b.n	8009f1c <_dtoa_r+0x6cc>
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	0037      	movs	r7, r6
 800a1f2:	e7e2      	b.n	800a1ba <_dtoa_r+0x96a>
 800a1f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	0037      	movs	r7, r6
 800a1fc:	e57d      	b.n	8009cfa <_dtoa_r+0x4aa>
 800a1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d100      	bne.n	800a206 <_dtoa_r+0x9b6>
 800a204:	e0c3      	b.n	800a38e <_dtoa_r+0xb3e>
 800a206:	9b07      	ldr	r3, [sp, #28]
 800a208:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	dd05      	ble.n	800a21a <_dtoa_r+0x9ca>
 800a20e:	0039      	movs	r1, r7
 800a210:	0022      	movs	r2, r4
 800a212:	9804      	ldr	r0, [sp, #16]
 800a214:	f7fd fc9c 	bl	8007b50 <__lshift>
 800a218:	0007      	movs	r7, r0
 800a21a:	0038      	movs	r0, r7
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d024      	beq.n	800a26a <_dtoa_r+0xa1a>
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	9804      	ldr	r0, [sp, #16]
 800a224:	f7fd facc 	bl	80077c0 <_Balloc>
 800a228:	1e04      	subs	r4, r0, #0
 800a22a:	d111      	bne.n	800a250 <_dtoa_r+0xa00>
 800a22c:	0022      	movs	r2, r4
 800a22e:	4b05      	ldr	r3, [pc, #20]	; (800a244 <_dtoa_r+0x9f4>)
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <_dtoa_r+0x9f8>)
 800a232:	4906      	ldr	r1, [pc, #24]	; (800a24c <_dtoa_r+0x9fc>)
 800a234:	e43c      	b.n	8009ab0 <_dtoa_r+0x260>
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	40240000 	.word	0x40240000
 800a23c:	00000433 	.word	0x00000433
 800a240:	7ff00000 	.word	0x7ff00000
 800a244:	0800bd97 	.word	0x0800bd97
 800a248:	0800bfa1 	.word	0x0800bfa1
 800a24c:	000002ef 	.word	0x000002ef
 800a250:	0039      	movs	r1, r7
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	310c      	adds	r1, #12
 800a256:	3202      	adds	r2, #2
 800a258:	0092      	lsls	r2, r2, #2
 800a25a:	300c      	adds	r0, #12
 800a25c:	f7fd f97b 	bl	8007556 <memcpy>
 800a260:	2201      	movs	r2, #1
 800a262:	0021      	movs	r1, r4
 800a264:	9804      	ldr	r0, [sp, #16]
 800a266:	f7fd fc73 	bl	8007b50 <__lshift>
 800a26a:	9b06      	ldr	r3, [sp, #24]
 800a26c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	3b01      	subs	r3, #1
 800a272:	189b      	adds	r3, r3, r2
 800a274:	2201      	movs	r2, #1
 800a276:	003d      	movs	r5, r7
 800a278:	0007      	movs	r7, r0
 800a27a:	930e      	str	r3, [sp, #56]	; 0x38
 800a27c:	9b08      	ldr	r3, [sp, #32]
 800a27e:	4013      	ands	r3, r2
 800a280:	930d      	str	r3, [sp, #52]	; 0x34
 800a282:	0031      	movs	r1, r6
 800a284:	9805      	ldr	r0, [sp, #20]
 800a286:	f7ff fa53 	bl	8009730 <quorem>
 800a28a:	0029      	movs	r1, r5
 800a28c:	0004      	movs	r4, r0
 800a28e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a290:	9805      	ldr	r0, [sp, #20]
 800a292:	f7fd fccb 	bl	8007c2c <__mcmp>
 800a296:	003a      	movs	r2, r7
 800a298:	900c      	str	r0, [sp, #48]	; 0x30
 800a29a:	0031      	movs	r1, r6
 800a29c:	9804      	ldr	r0, [sp, #16]
 800a29e:	f7fd fce1 	bl	8007c64 <__mdiff>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	68c3      	ldr	r3, [r0, #12]
 800a2a6:	3430      	adds	r4, #48	; 0x30
 800a2a8:	9008      	str	r0, [sp, #32]
 800a2aa:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d104      	bne.n	800a2ba <_dtoa_r+0xa6a>
 800a2b0:	0001      	movs	r1, r0
 800a2b2:	9805      	ldr	r0, [sp, #20]
 800a2b4:	f7fd fcba 	bl	8007c2c <__mcmp>
 800a2b8:	900a      	str	r0, [sp, #40]	; 0x28
 800a2ba:	9908      	ldr	r1, [sp, #32]
 800a2bc:	9804      	ldr	r0, [sp, #16]
 800a2be:	f7fd faa7 	bl	8007810 <_Bfree>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	9308      	str	r3, [sp, #32]
 800a2ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	d109      	bne.n	800a2e8 <_dtoa_r+0xa98>
 800a2d4:	2c39      	cmp	r4, #57	; 0x39
 800a2d6:	d022      	beq.n	800a31e <_dtoa_r+0xace>
 800a2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd01      	ble.n	800a2e2 <_dtoa_r+0xa92>
 800a2de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a2e0:	3431      	adds	r4, #49	; 0x31
 800a2e2:	9b07      	ldr	r3, [sp, #28]
 800a2e4:	701c      	strb	r4, [r3, #0]
 800a2e6:	e76e      	b.n	800a1c6 <_dtoa_r+0x976>
 800a2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	db04      	blt.n	800a2f8 <_dtoa_r+0xaa8>
 800a2ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d11e      	bne.n	800a336 <_dtoa_r+0xae6>
 800a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	ddf1      	ble.n	800a2e2 <_dtoa_r+0xa92>
 800a2fe:	9905      	ldr	r1, [sp, #20]
 800a300:	2201      	movs	r2, #1
 800a302:	9804      	ldr	r0, [sp, #16]
 800a304:	f7fd fc24 	bl	8007b50 <__lshift>
 800a308:	0031      	movs	r1, r6
 800a30a:	9005      	str	r0, [sp, #20]
 800a30c:	f7fd fc8e 	bl	8007c2c <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	dc02      	bgt.n	800a31a <_dtoa_r+0xaca>
 800a314:	d1e5      	bne.n	800a2e2 <_dtoa_r+0xa92>
 800a316:	07e3      	lsls	r3, r4, #31
 800a318:	d5e3      	bpl.n	800a2e2 <_dtoa_r+0xa92>
 800a31a:	2c39      	cmp	r4, #57	; 0x39
 800a31c:	d1df      	bne.n	800a2de <_dtoa_r+0xa8e>
 800a31e:	2339      	movs	r3, #57	; 0x39
 800a320:	9a07      	ldr	r2, [sp, #28]
 800a322:	7013      	strb	r3, [r2, #0]
 800a324:	9b08      	ldr	r3, [sp, #32]
 800a326:	9308      	str	r3, [sp, #32]
 800a328:	3b01      	subs	r3, #1
 800a32a:	781a      	ldrb	r2, [r3, #0]
 800a32c:	2a39      	cmp	r2, #57	; 0x39
 800a32e:	d063      	beq.n	800a3f8 <_dtoa_r+0xba8>
 800a330:	3201      	adds	r2, #1
 800a332:	701a      	strb	r2, [r3, #0]
 800a334:	e747      	b.n	800a1c6 <_dtoa_r+0x976>
 800a336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dd03      	ble.n	800a344 <_dtoa_r+0xaf4>
 800a33c:	2c39      	cmp	r4, #57	; 0x39
 800a33e:	d0ee      	beq.n	800a31e <_dtoa_r+0xace>
 800a340:	3401      	adds	r4, #1
 800a342:	e7ce      	b.n	800a2e2 <_dtoa_r+0xa92>
 800a344:	9b07      	ldr	r3, [sp, #28]
 800a346:	9a07      	ldr	r2, [sp, #28]
 800a348:	701c      	strb	r4, [r3, #0]
 800a34a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d03e      	beq.n	800a3ce <_dtoa_r+0xb7e>
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	9905      	ldr	r1, [sp, #20]
 800a356:	9804      	ldr	r0, [sp, #16]
 800a358:	f7fd fa64 	bl	8007824 <__multadd>
 800a35c:	2300      	movs	r3, #0
 800a35e:	9005      	str	r0, [sp, #20]
 800a360:	220a      	movs	r2, #10
 800a362:	0029      	movs	r1, r5
 800a364:	9804      	ldr	r0, [sp, #16]
 800a366:	42bd      	cmp	r5, r7
 800a368:	d106      	bne.n	800a378 <_dtoa_r+0xb28>
 800a36a:	f7fd fa5b 	bl	8007824 <__multadd>
 800a36e:	0005      	movs	r5, r0
 800a370:	0007      	movs	r7, r0
 800a372:	9b08      	ldr	r3, [sp, #32]
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	e784      	b.n	800a282 <_dtoa_r+0xa32>
 800a378:	f7fd fa54 	bl	8007824 <__multadd>
 800a37c:	0039      	movs	r1, r7
 800a37e:	0005      	movs	r5, r0
 800a380:	2300      	movs	r3, #0
 800a382:	220a      	movs	r2, #10
 800a384:	9804      	ldr	r0, [sp, #16]
 800a386:	f7fd fa4d 	bl	8007824 <__multadd>
 800a38a:	0007      	movs	r7, r0
 800a38c:	e7f1      	b.n	800a372 <_dtoa_r+0xb22>
 800a38e:	9b07      	ldr	r3, [sp, #28]
 800a390:	930b      	str	r3, [sp, #44]	; 0x2c
 800a392:	2500      	movs	r5, #0
 800a394:	0031      	movs	r1, r6
 800a396:	9805      	ldr	r0, [sp, #20]
 800a398:	f7ff f9ca 	bl	8009730 <quorem>
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	3030      	adds	r0, #48	; 0x30
 800a3a0:	5558      	strb	r0, [r3, r5]
 800a3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	0004      	movs	r4, r0
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dd07      	ble.n	800a3bc <_dtoa_r+0xb6c>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	220a      	movs	r2, #10
 800a3b0:	9905      	ldr	r1, [sp, #20]
 800a3b2:	9804      	ldr	r0, [sp, #16]
 800a3b4:	f7fd fa36 	bl	8007824 <__multadd>
 800a3b8:	9005      	str	r0, [sp, #20]
 800a3ba:	e7eb      	b.n	800a394 <_dtoa_r+0xb44>
 800a3bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3be:	2301      	movs	r3, #1
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	dd00      	ble.n	800a3c6 <_dtoa_r+0xb76>
 800a3c4:	0013      	movs	r3, r2
 800a3c6:	2500      	movs	r5, #0
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	18d3      	adds	r3, r2, r3
 800a3cc:	9308      	str	r3, [sp, #32]
 800a3ce:	9905      	ldr	r1, [sp, #20]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	9804      	ldr	r0, [sp, #16]
 800a3d4:	f7fd fbbc 	bl	8007b50 <__lshift>
 800a3d8:	0031      	movs	r1, r6
 800a3da:	9005      	str	r0, [sp, #20]
 800a3dc:	f7fd fc26 	bl	8007c2c <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dc9f      	bgt.n	800a324 <_dtoa_r+0xad4>
 800a3e4:	d101      	bne.n	800a3ea <_dtoa_r+0xb9a>
 800a3e6:	07e4      	lsls	r4, r4, #31
 800a3e8:	d49c      	bmi.n	800a324 <_dtoa_r+0xad4>
 800a3ea:	9b08      	ldr	r3, [sp, #32]
 800a3ec:	9308      	str	r3, [sp, #32]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	781a      	ldrb	r2, [r3, #0]
 800a3f2:	2a30      	cmp	r2, #48	; 0x30
 800a3f4:	d0fa      	beq.n	800a3ec <_dtoa_r+0xb9c>
 800a3f6:	e6e6      	b.n	800a1c6 <_dtoa_r+0x976>
 800a3f8:	9a06      	ldr	r2, [sp, #24]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d193      	bne.n	800a326 <_dtoa_r+0xad6>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	9303      	str	r3, [sp, #12]
 800a404:	2331      	movs	r3, #49	; 0x31
 800a406:	7013      	strb	r3, [r2, #0]
 800a408:	e6dd      	b.n	800a1c6 <_dtoa_r+0x976>
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <_dtoa_r+0xbe0>)
 800a40c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a40e:	9306      	str	r3, [sp, #24]
 800a410:	4b08      	ldr	r3, [pc, #32]	; (800a434 <_dtoa_r+0xbe4>)
 800a412:	2a00      	cmp	r2, #0
 800a414:	d001      	beq.n	800a41a <_dtoa_r+0xbca>
 800a416:	f7ff fa4c 	bl	80098b2 <_dtoa_r+0x62>
 800a41a:	f7ff fa4c 	bl	80098b6 <_dtoa_r+0x66>
 800a41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a420:	2b00      	cmp	r3, #0
 800a422:	dcb6      	bgt.n	800a392 <_dtoa_r+0xb42>
 800a424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a426:	2b02      	cmp	r3, #2
 800a428:	dd00      	ble.n	800a42c <_dtoa_r+0xbdc>
 800a42a:	e6b6      	b.n	800a19a <_dtoa_r+0x94a>
 800a42c:	e7b1      	b.n	800a392 <_dtoa_r+0xb42>
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	0800bf94 	.word	0x0800bf94
 800a434:	0800bf9c 	.word	0x0800bf9c

0800a438 <_realloc_r>:
 800a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43a:	b087      	sub	sp, #28
 800a43c:	1e0c      	subs	r4, r1, #0
 800a43e:	9001      	str	r0, [sp, #4]
 800a440:	9205      	str	r2, [sp, #20]
 800a442:	d106      	bne.n	800a452 <_realloc_r+0x1a>
 800a444:	0011      	movs	r1, r2
 800a446:	f7fc fc75 	bl	8006d34 <_malloc_r>
 800a44a:	0007      	movs	r7, r0
 800a44c:	0038      	movs	r0, r7
 800a44e:	b007      	add	sp, #28
 800a450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a452:	9801      	ldr	r0, [sp, #4]
 800a454:	f7fc fe82 	bl	800715c <__malloc_lock>
 800a458:	0023      	movs	r3, r4
 800a45a:	3b08      	subs	r3, #8
 800a45c:	685f      	ldr	r7, [r3, #4]
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	330b      	adds	r3, #11
 800a464:	2b16      	cmp	r3, #22
 800a466:	d908      	bls.n	800a47a <_realloc_r+0x42>
 800a468:	2207      	movs	r2, #7
 800a46a:	4393      	bics	r3, r2
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	d506      	bpl.n	800a47e <_realloc_r+0x46>
 800a470:	230c      	movs	r3, #12
 800a472:	9a01      	ldr	r2, [sp, #4]
 800a474:	2700      	movs	r7, #0
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	e7e8      	b.n	800a44c <_realloc_r+0x14>
 800a47a:	2310      	movs	r3, #16
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	9a05      	ldr	r2, [sp, #20]
 800a482:	4293      	cmp	r3, r2
 800a484:	d3f4      	bcc.n	800a470 <_realloc_r+0x38>
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	003a      	movs	r2, r7
 800a48a:	9302      	str	r3, [sp, #8]
 800a48c:	2303      	movs	r3, #3
 800a48e:	439a      	bics	r2, r3
 800a490:	9b00      	ldr	r3, [sp, #0]
 800a492:	9203      	str	r2, [sp, #12]
 800a494:	4293      	cmp	r3, r2
 800a496:	dc00      	bgt.n	800a49a <_realloc_r+0x62>
 800a498:	e169      	b.n	800a76e <_realloc_r+0x336>
 800a49a:	9b04      	ldr	r3, [sp, #16]
 800a49c:	48b8      	ldr	r0, [pc, #736]	; (800a780 <_realloc_r+0x348>)
 800a49e:	189b      	adds	r3, r3, r2
 800a4a0:	6882      	ldr	r2, [r0, #8]
 800a4a2:	4694      	mov	ip, r2
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	459c      	cmp	ip, r3
 800a4a8:	d006      	beq.n	800a4b8 <_realloc_r+0x80>
 800a4aa:	2501      	movs	r5, #1
 800a4ac:	0011      	movs	r1, r2
 800a4ae:	43a9      	bics	r1, r5
 800a4b0:	1859      	adds	r1, r3, r1
 800a4b2:	6849      	ldr	r1, [r1, #4]
 800a4b4:	4229      	tst	r1, r5
 800a4b6:	d144      	bne.n	800a542 <_realloc_r+0x10a>
 800a4b8:	2103      	movs	r1, #3
 800a4ba:	438a      	bics	r2, r1
 800a4bc:	9903      	ldr	r1, [sp, #12]
 800a4be:	188e      	adds	r6, r1, r2
 800a4c0:	9900      	ldr	r1, [sp, #0]
 800a4c2:	459c      	cmp	ip, r3
 800a4c4:	d117      	bne.n	800a4f6 <_realloc_r+0xbe>
 800a4c6:	3110      	adds	r1, #16
 800a4c8:	42b1      	cmp	r1, r6
 800a4ca:	dc3c      	bgt.n	800a546 <_realloc_r+0x10e>
 800a4cc:	9a00      	ldr	r2, [sp, #0]
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4694      	mov	ip, r2
 800a4d2:	1ab6      	subs	r6, r6, r2
 800a4d4:	0022      	movs	r2, r4
 800a4d6:	9b04      	ldr	r3, [sp, #16]
 800a4d8:	430e      	orrs	r6, r1
 800a4da:	4463      	add	r3, ip
 800a4dc:	6083      	str	r3, [r0, #8]
 800a4de:	3a08      	subs	r2, #8
 800a4e0:	605e      	str	r6, [r3, #4]
 800a4e2:	6853      	ldr	r3, [r2, #4]
 800a4e4:	9801      	ldr	r0, [sp, #4]
 800a4e6:	400b      	ands	r3, r1
 800a4e8:	4661      	mov	r1, ip
 800a4ea:	430b      	orrs	r3, r1
 800a4ec:	6053      	str	r3, [r2, #4]
 800a4ee:	f7fc fe3d 	bl	800716c <__malloc_unlock>
 800a4f2:	0027      	movs	r7, r4
 800a4f4:	e7aa      	b.n	800a44c <_realloc_r+0x14>
 800a4f6:	42b1      	cmp	r1, r6
 800a4f8:	dc25      	bgt.n	800a546 <_realloc_r+0x10e>
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	60da      	str	r2, [r3, #12]
 800a500:	6093      	str	r3, [r2, #8]
 800a502:	9b00      	ldr	r3, [sp, #0]
 800a504:	9a02      	ldr	r2, [sp, #8]
 800a506:	1af4      	subs	r4, r6, r3
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	1992      	adds	r2, r2, r6
 800a50c:	6858      	ldr	r0, [r3, #4]
 800a50e:	2301      	movs	r3, #1
 800a510:	4018      	ands	r0, r3
 800a512:	2c0f      	cmp	r4, #15
 800a514:	d800      	bhi.n	800a518 <_realloc_r+0xe0>
 800a516:	e12c      	b.n	800a772 <_realloc_r+0x33a>
 800a518:	9d00      	ldr	r5, [sp, #0]
 800a51a:	9902      	ldr	r1, [sp, #8]
 800a51c:	4328      	orrs	r0, r5
 800a51e:	1949      	adds	r1, r1, r5
 800a520:	9d02      	ldr	r5, [sp, #8]
 800a522:	431c      	orrs	r4, r3
 800a524:	6068      	str	r0, [r5, #4]
 800a526:	604c      	str	r4, [r1, #4]
 800a528:	6850      	ldr	r0, [r2, #4]
 800a52a:	3108      	adds	r1, #8
 800a52c:	4303      	orrs	r3, r0
 800a52e:	6053      	str	r3, [r2, #4]
 800a530:	9801      	ldr	r0, [sp, #4]
 800a532:	f7fd f881 	bl	8007638 <_free_r>
 800a536:	9801      	ldr	r0, [sp, #4]
 800a538:	f7fc fe18 	bl	800716c <__malloc_unlock>
 800a53c:	9f02      	ldr	r7, [sp, #8]
 800a53e:	3708      	adds	r7, #8
 800a540:	e784      	b.n	800a44c <_realloc_r+0x14>
 800a542:	2200      	movs	r2, #0
 800a544:	0013      	movs	r3, r2
 800a546:	07ff      	lsls	r7, r7, #31
 800a548:	d500      	bpl.n	800a54c <_realloc_r+0x114>
 800a54a:	e0c6      	b.n	800a6da <_realloc_r+0x2a2>
 800a54c:	0021      	movs	r1, r4
 800a54e:	2003      	movs	r0, #3
 800a550:	3908      	subs	r1, #8
 800a552:	680d      	ldr	r5, [r1, #0]
 800a554:	9904      	ldr	r1, [sp, #16]
 800a556:	1b4d      	subs	r5, r1, r5
 800a558:	6869      	ldr	r1, [r5, #4]
 800a55a:	4381      	bics	r1, r0
 800a55c:	9803      	ldr	r0, [sp, #12]
 800a55e:	180f      	adds	r7, r1, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d100      	bne.n	800a566 <_realloc_r+0x12e>
 800a564:	e084      	b.n	800a670 <_realloc_r+0x238>
 800a566:	19d6      	adds	r6, r2, r7
 800a568:	459c      	cmp	ip, r3
 800a56a:	d148      	bne.n	800a5fe <_realloc_r+0x1c6>
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	3310      	adds	r3, #16
 800a570:	42b3      	cmp	r3, r6
 800a572:	dc7d      	bgt.n	800a670 <_realloc_r+0x238>
 800a574:	68aa      	ldr	r2, [r5, #8]
 800a576:	68eb      	ldr	r3, [r5, #12]
 800a578:	002f      	movs	r7, r5
 800a57a:	60d3      	str	r3, [r2, #12]
 800a57c:	609a      	str	r2, [r3, #8]
 800a57e:	0002      	movs	r2, r0
 800a580:	3a04      	subs	r2, #4
 800a582:	3708      	adds	r7, #8
 800a584:	2a24      	cmp	r2, #36	; 0x24
 800a586:	d835      	bhi.n	800a5f4 <_realloc_r+0x1bc>
 800a588:	003b      	movs	r3, r7
 800a58a:	2a13      	cmp	r2, #19
 800a58c:	d908      	bls.n	800a5a0 <_realloc_r+0x168>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	60ab      	str	r3, [r5, #8]
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	60eb      	str	r3, [r5, #12]
 800a596:	2a1b      	cmp	r2, #27
 800a598:	d81a      	bhi.n	800a5d0 <_realloc_r+0x198>
 800a59a:	002b      	movs	r3, r5
 800a59c:	3408      	adds	r4, #8
 800a59e:	3310      	adds	r3, #16
 800a5a0:	6822      	ldr	r2, [r4, #0]
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	6862      	ldr	r2, [r4, #4]
 800a5a6:	605a      	str	r2, [r3, #4]
 800a5a8:	68a2      	ldr	r2, [r4, #8]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	9b00      	ldr	r3, [sp, #0]
 800a5ae:	4a74      	ldr	r2, [pc, #464]	; (800a780 <_realloc_r+0x348>)
 800a5b0:	18eb      	adds	r3, r5, r3
 800a5b2:	6093      	str	r3, [r2, #8]
 800a5b4:	9a00      	ldr	r2, [sp, #0]
 800a5b6:	1ab6      	subs	r6, r6, r2
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	4316      	orrs	r6, r2
 800a5bc:	605e      	str	r6, [r3, #4]
 800a5be:	686b      	ldr	r3, [r5, #4]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	9a00      	ldr	r2, [sp, #0]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	606b      	str	r3, [r5, #4]
 800a5c8:	9801      	ldr	r0, [sp, #4]
 800a5ca:	f7fc fdcf 	bl	800716c <__malloc_unlock>
 800a5ce:	e73d      	b.n	800a44c <_realloc_r+0x14>
 800a5d0:	68a3      	ldr	r3, [r4, #8]
 800a5d2:	612b      	str	r3, [r5, #16]
 800a5d4:	68e3      	ldr	r3, [r4, #12]
 800a5d6:	616b      	str	r3, [r5, #20]
 800a5d8:	2a24      	cmp	r2, #36	; 0x24
 800a5da:	d003      	beq.n	800a5e4 <_realloc_r+0x1ac>
 800a5dc:	002b      	movs	r3, r5
 800a5de:	3410      	adds	r4, #16
 800a5e0:	3318      	adds	r3, #24
 800a5e2:	e7dd      	b.n	800a5a0 <_realloc_r+0x168>
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	61ab      	str	r3, [r5, #24]
 800a5e8:	002b      	movs	r3, r5
 800a5ea:	6962      	ldr	r2, [r4, #20]
 800a5ec:	3320      	adds	r3, #32
 800a5ee:	61ea      	str	r2, [r5, #28]
 800a5f0:	3418      	adds	r4, #24
 800a5f2:	e7d5      	b.n	800a5a0 <_realloc_r+0x168>
 800a5f4:	0021      	movs	r1, r4
 800a5f6:	0038      	movs	r0, r7
 800a5f8:	f001 f8c7 	bl	800b78a <memmove>
 800a5fc:	e7d6      	b.n	800a5ac <_realloc_r+0x174>
 800a5fe:	9a00      	ldr	r2, [sp, #0]
 800a600:	42b2      	cmp	r2, r6
 800a602:	dc35      	bgt.n	800a670 <_realloc_r+0x238>
 800a604:	0028      	movs	r0, r5
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	3008      	adds	r0, #8
 800a60c:	60da      	str	r2, [r3, #12]
 800a60e:	6093      	str	r3, [r2, #8]
 800a610:	68aa      	ldr	r2, [r5, #8]
 800a612:	68eb      	ldr	r3, [r5, #12]
 800a614:	60d3      	str	r3, [r2, #12]
 800a616:	609a      	str	r2, [r3, #8]
 800a618:	9a03      	ldr	r2, [sp, #12]
 800a61a:	3a04      	subs	r2, #4
 800a61c:	2a24      	cmp	r2, #36	; 0x24
 800a61e:	d823      	bhi.n	800a668 <_realloc_r+0x230>
 800a620:	2a13      	cmp	r2, #19
 800a622:	d907      	bls.n	800a634 <_realloc_r+0x1fc>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	60ab      	str	r3, [r5, #8]
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	60eb      	str	r3, [r5, #12]
 800a62c:	2a1b      	cmp	r2, #27
 800a62e:	d809      	bhi.n	800a644 <_realloc_r+0x20c>
 800a630:	3408      	adds	r4, #8
 800a632:	3008      	adds	r0, #8
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	6003      	str	r3, [r0, #0]
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	6043      	str	r3, [r0, #4]
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	6083      	str	r3, [r0, #8]
 800a640:	9502      	str	r5, [sp, #8]
 800a642:	e75e      	b.n	800a502 <_realloc_r+0xca>
 800a644:	68a3      	ldr	r3, [r4, #8]
 800a646:	612b      	str	r3, [r5, #16]
 800a648:	68e3      	ldr	r3, [r4, #12]
 800a64a:	616b      	str	r3, [r5, #20]
 800a64c:	2a24      	cmp	r2, #36	; 0x24
 800a64e:	d003      	beq.n	800a658 <_realloc_r+0x220>
 800a650:	0028      	movs	r0, r5
 800a652:	3410      	adds	r4, #16
 800a654:	3018      	adds	r0, #24
 800a656:	e7ed      	b.n	800a634 <_realloc_r+0x1fc>
 800a658:	0028      	movs	r0, r5
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	3020      	adds	r0, #32
 800a65e:	61ab      	str	r3, [r5, #24]
 800a660:	6963      	ldr	r3, [r4, #20]
 800a662:	3418      	adds	r4, #24
 800a664:	61eb      	str	r3, [r5, #28]
 800a666:	e7e5      	b.n	800a634 <_realloc_r+0x1fc>
 800a668:	0021      	movs	r1, r4
 800a66a:	f001 f88e 	bl	800b78a <memmove>
 800a66e:	e7e7      	b.n	800a640 <_realloc_r+0x208>
 800a670:	9b00      	ldr	r3, [sp, #0]
 800a672:	42bb      	cmp	r3, r7
 800a674:	dc31      	bgt.n	800a6da <_realloc_r+0x2a2>
 800a676:	0028      	movs	r0, r5
 800a678:	68aa      	ldr	r2, [r5, #8]
 800a67a:	68eb      	ldr	r3, [r5, #12]
 800a67c:	3008      	adds	r0, #8
 800a67e:	60d3      	str	r3, [r2, #12]
 800a680:	609a      	str	r2, [r3, #8]
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	3a04      	subs	r2, #4
 800a686:	2a24      	cmp	r2, #36	; 0x24
 800a688:	d823      	bhi.n	800a6d2 <_realloc_r+0x29a>
 800a68a:	2a13      	cmp	r2, #19
 800a68c:	d907      	bls.n	800a69e <_realloc_r+0x266>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	60ab      	str	r3, [r5, #8]
 800a692:	6863      	ldr	r3, [r4, #4]
 800a694:	60eb      	str	r3, [r5, #12]
 800a696:	2a1b      	cmp	r2, #27
 800a698:	d809      	bhi.n	800a6ae <_realloc_r+0x276>
 800a69a:	3408      	adds	r4, #8
 800a69c:	3008      	adds	r0, #8
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	6003      	str	r3, [r0, #0]
 800a6a2:	6863      	ldr	r3, [r4, #4]
 800a6a4:	6043      	str	r3, [r0, #4]
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	6083      	str	r3, [r0, #8]
 800a6aa:	003e      	movs	r6, r7
 800a6ac:	e7c8      	b.n	800a640 <_realloc_r+0x208>
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	612b      	str	r3, [r5, #16]
 800a6b2:	68e3      	ldr	r3, [r4, #12]
 800a6b4:	616b      	str	r3, [r5, #20]
 800a6b6:	2a24      	cmp	r2, #36	; 0x24
 800a6b8:	d003      	beq.n	800a6c2 <_realloc_r+0x28a>
 800a6ba:	0028      	movs	r0, r5
 800a6bc:	3410      	adds	r4, #16
 800a6be:	3018      	adds	r0, #24
 800a6c0:	e7ed      	b.n	800a69e <_realloc_r+0x266>
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	3020      	adds	r0, #32
 800a6c8:	61ab      	str	r3, [r5, #24]
 800a6ca:	6963      	ldr	r3, [r4, #20]
 800a6cc:	3418      	adds	r4, #24
 800a6ce:	61eb      	str	r3, [r5, #28]
 800a6d0:	e7e5      	b.n	800a69e <_realloc_r+0x266>
 800a6d2:	0021      	movs	r1, r4
 800a6d4:	f001 f859 	bl	800b78a <memmove>
 800a6d8:	e7e7      	b.n	800a6aa <_realloc_r+0x272>
 800a6da:	9905      	ldr	r1, [sp, #20]
 800a6dc:	9801      	ldr	r0, [sp, #4]
 800a6de:	f7fc fb29 	bl	8006d34 <_malloc_r>
 800a6e2:	1e07      	subs	r7, r0, #0
 800a6e4:	d100      	bne.n	800a6e8 <_realloc_r+0x2b0>
 800a6e6:	e76f      	b.n	800a5c8 <_realloc_r+0x190>
 800a6e8:	0023      	movs	r3, r4
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	3b08      	subs	r3, #8
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	4393      	bics	r3, r2
 800a6f2:	9a04      	ldr	r2, [sp, #16]
 800a6f4:	18d3      	adds	r3, r2, r3
 800a6f6:	0002      	movs	r2, r0
 800a6f8:	3a08      	subs	r2, #8
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d105      	bne.n	800a70a <_realloc_r+0x2d2>
 800a6fe:	685e      	ldr	r6, [r3, #4]
 800a700:	2303      	movs	r3, #3
 800a702:	439e      	bics	r6, r3
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	18f6      	adds	r6, r6, r3
 800a708:	e6fb      	b.n	800a502 <_realloc_r+0xca>
 800a70a:	9a03      	ldr	r2, [sp, #12]
 800a70c:	3a04      	subs	r2, #4
 800a70e:	2a24      	cmp	r2, #36	; 0x24
 800a710:	d829      	bhi.n	800a766 <_realloc_r+0x32e>
 800a712:	0003      	movs	r3, r0
 800a714:	0021      	movs	r1, r4
 800a716:	2a13      	cmp	r2, #19
 800a718:	d908      	bls.n	800a72c <_realloc_r+0x2f4>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	6003      	str	r3, [r0, #0]
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	6043      	str	r3, [r0, #4]
 800a722:	2a1b      	cmp	r2, #27
 800a724:	d80d      	bhi.n	800a742 <_realloc_r+0x30a>
 800a726:	0003      	movs	r3, r0
 800a728:	3108      	adds	r1, #8
 800a72a:	3308      	adds	r3, #8
 800a72c:	680a      	ldr	r2, [r1, #0]
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	684a      	ldr	r2, [r1, #4]
 800a732:	605a      	str	r2, [r3, #4]
 800a734:	688a      	ldr	r2, [r1, #8]
 800a736:	609a      	str	r2, [r3, #8]
 800a738:	0021      	movs	r1, r4
 800a73a:	9801      	ldr	r0, [sp, #4]
 800a73c:	f7fc ff7c 	bl	8007638 <_free_r>
 800a740:	e742      	b.n	800a5c8 <_realloc_r+0x190>
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	6083      	str	r3, [r0, #8]
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	60c3      	str	r3, [r0, #12]
 800a74a:	2a24      	cmp	r2, #36	; 0x24
 800a74c:	d003      	beq.n	800a756 <_realloc_r+0x31e>
 800a74e:	0003      	movs	r3, r0
 800a750:	3110      	adds	r1, #16
 800a752:	3310      	adds	r3, #16
 800a754:	e7ea      	b.n	800a72c <_realloc_r+0x2f4>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	3118      	adds	r1, #24
 800a75a:	6103      	str	r3, [r0, #16]
 800a75c:	0003      	movs	r3, r0
 800a75e:	6962      	ldr	r2, [r4, #20]
 800a760:	3318      	adds	r3, #24
 800a762:	6142      	str	r2, [r0, #20]
 800a764:	e7e2      	b.n	800a72c <_realloc_r+0x2f4>
 800a766:	0021      	movs	r1, r4
 800a768:	f001 f80f 	bl	800b78a <memmove>
 800a76c:	e7e4      	b.n	800a738 <_realloc_r+0x300>
 800a76e:	9e03      	ldr	r6, [sp, #12]
 800a770:	e6c7      	b.n	800a502 <_realloc_r+0xca>
 800a772:	9902      	ldr	r1, [sp, #8]
 800a774:	4306      	orrs	r6, r0
 800a776:	604e      	str	r6, [r1, #4]
 800a778:	6851      	ldr	r1, [r2, #4]
 800a77a:	430b      	orrs	r3, r1
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	e6da      	b.n	800a536 <_realloc_r+0xfe>
 800a780:	20000010 	.word	0x20000010

0800a784 <fiprintf>:
 800a784:	b40e      	push	{r1, r2, r3}
 800a786:	b517      	push	{r0, r1, r2, r4, lr}
 800a788:	4c05      	ldr	r4, [pc, #20]	; (800a7a0 <fiprintf+0x1c>)
 800a78a:	ab05      	add	r3, sp, #20
 800a78c:	cb04      	ldmia	r3!, {r2}
 800a78e:	0001      	movs	r1, r0
 800a790:	6820      	ldr	r0, [r4, #0]
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	f000 f8be 	bl	800a914 <_vfiprintf_r>
 800a798:	bc1e      	pop	{r1, r2, r3, r4}
 800a79a:	bc08      	pop	{r3}
 800a79c:	b003      	add	sp, #12
 800a79e:	4718      	bx	r3
 800a7a0:	200006b8 	.word	0x200006b8

0800a7a4 <__ssprint_r>:
 800a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a6:	6813      	ldr	r3, [r2, #0]
 800a7a8:	b087      	sub	sp, #28
 800a7aa:	0017      	movs	r7, r2
 800a7ac:	9303      	str	r3, [sp, #12]
 800a7ae:	6893      	ldr	r3, [r2, #8]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	000c      	movs	r4, r1
 800a7b4:	9005      	str	r0, [sp, #20]
 800a7b6:	9202      	str	r2, [sp, #8]
 800a7b8:	9201      	str	r2, [sp, #4]
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d10d      	bne.n	800a7da <__ssprint_r+0x36>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	607b      	str	r3, [r7, #4]
 800a7c4:	b007      	add	sp, #28
 800a7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9302      	str	r3, [sp, #8]
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	9a01      	ldr	r2, [sp, #4]
 800a7dc:	68a6      	ldr	r6, [r4, #8]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	2a00      	cmp	r2, #0
 800a7e2:	d0f1      	beq.n	800a7c8 <__ssprint_r+0x24>
 800a7e4:	42b2      	cmp	r2, r6
 800a7e6:	d32e      	bcc.n	800a846 <__ssprint_r+0xa2>
 800a7e8:	2190      	movs	r1, #144	; 0x90
 800a7ea:	89a2      	ldrh	r2, [r4, #12]
 800a7ec:	00c9      	lsls	r1, r1, #3
 800a7ee:	420a      	tst	r2, r1
 800a7f0:	d029      	beq.n	800a846 <__ssprint_r+0xa2>
 800a7f2:	2003      	movs	r0, #3
 800a7f4:	6921      	ldr	r1, [r4, #16]
 800a7f6:	1a5b      	subs	r3, r3, r1
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	6963      	ldr	r3, [r4, #20]
 800a7fc:	4343      	muls	r3, r0
 800a7fe:	0fdd      	lsrs	r5, r3, #31
 800a800:	18ed      	adds	r5, r5, r3
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	9801      	ldr	r0, [sp, #4]
 800a806:	3301      	adds	r3, #1
 800a808:	181b      	adds	r3, r3, r0
 800a80a:	106d      	asrs	r5, r5, #1
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	d900      	bls.n	800a812 <__ssprint_r+0x6e>
 800a810:	001d      	movs	r5, r3
 800a812:	0552      	lsls	r2, r2, #21
 800a814:	d532      	bpl.n	800a87c <__ssprint_r+0xd8>
 800a816:	0029      	movs	r1, r5
 800a818:	9805      	ldr	r0, [sp, #20]
 800a81a:	f7fc fa8b 	bl	8006d34 <_malloc_r>
 800a81e:	1e06      	subs	r6, r0, #0
 800a820:	d036      	beq.n	800a890 <__ssprint_r+0xec>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	6921      	ldr	r1, [r4, #16]
 800a826:	f7fc fe96 	bl	8007556 <memcpy>
 800a82a:	89a2      	ldrh	r2, [r4, #12]
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <__ssprint_r+0x104>)
 800a82e:	401a      	ands	r2, r3
 800a830:	2380      	movs	r3, #128	; 0x80
 800a832:	4313      	orrs	r3, r2
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	6126      	str	r6, [r4, #16]
 800a83a:	18f6      	adds	r6, r6, r3
 800a83c:	6026      	str	r6, [r4, #0]
 800a83e:	6165      	str	r5, [r4, #20]
 800a840:	9e01      	ldr	r6, [sp, #4]
 800a842:	1aed      	subs	r5, r5, r3
 800a844:	60a5      	str	r5, [r4, #8]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	429e      	cmp	r6, r3
 800a84a:	d900      	bls.n	800a84e <__ssprint_r+0xaa>
 800a84c:	001e      	movs	r6, r3
 800a84e:	0032      	movs	r2, r6
 800a850:	9902      	ldr	r1, [sp, #8]
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	f000 ff99 	bl	800b78a <memmove>
 800a858:	9a01      	ldr	r2, [sp, #4]
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	4694      	mov	ip, r2
 800a85e:	1b9b      	subs	r3, r3, r6
 800a860:	60a3      	str	r3, [r4, #8]
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	199b      	adds	r3, r3, r6
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	9b02      	ldr	r3, [sp, #8]
 800a86a:	4463      	add	r3, ip
 800a86c:	9302      	str	r3, [sp, #8]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	1a9b      	subs	r3, r3, r2
 800a872:	60bb      	str	r3, [r7, #8]
 800a874:	d0a3      	beq.n	800a7be <__ssprint_r+0x1a>
 800a876:	2300      	movs	r3, #0
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	e7ae      	b.n	800a7da <__ssprint_r+0x36>
 800a87c:	002a      	movs	r2, r5
 800a87e:	9805      	ldr	r0, [sp, #20]
 800a880:	f7ff fdda 	bl	800a438 <_realloc_r>
 800a884:	1e06      	subs	r6, r0, #0
 800a886:	d1d6      	bne.n	800a836 <__ssprint_r+0x92>
 800a888:	6921      	ldr	r1, [r4, #16]
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	f7fc fed4 	bl	8007638 <_free_r>
 800a890:	230c      	movs	r3, #12
 800a892:	9a05      	ldr	r2, [sp, #20]
 800a894:	2001      	movs	r0, #1
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	89a2      	ldrh	r2, [r4, #12]
 800a89a:	3334      	adds	r3, #52	; 0x34
 800a89c:	4313      	orrs	r3, r2
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4240      	negs	r0, r0
 800a8a4:	60bb      	str	r3, [r7, #8]
 800a8a6:	e78b      	b.n	800a7c0 <__ssprint_r+0x1c>
 800a8a8:	fffffb7f 	.word	0xfffffb7f

0800a8ac <__sprint_r>:
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	6893      	ldr	r3, [r2, #8]
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	9001      	str	r0, [sp, #4]
 800a8b4:	000d      	movs	r5, r1
 800a8b6:	0014      	movs	r4, r2
 800a8b8:	1e18      	subs	r0, r3, #0
 800a8ba:	d018      	beq.n	800a8ee <__sprint_r+0x42>
 800a8bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a8be:	049b      	lsls	r3, r3, #18
 800a8c0:	d524      	bpl.n	800a90c <__sprint_r+0x60>
 800a8c2:	6817      	ldr	r7, [r2, #0]
 800a8c4:	2600      	movs	r6, #0
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	9302      	str	r3, [sp, #8]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	089b      	lsrs	r3, r3, #2
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	42b3      	cmp	r3, r6
 800a8d6:	dc0e      	bgt.n	800a8f6 <__sprint_r+0x4a>
 800a8d8:	2203      	movs	r2, #3
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	68a0      	ldr	r0, [r4, #8]
 800a8de:	4393      	bics	r3, r2
 800a8e0:	1ac0      	subs	r0, r0, r3
 800a8e2:	60a0      	str	r0, [r4, #8]
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d1ec      	bne.n	800a8c4 <__sprint_r+0x18>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60a3      	str	r3, [r4, #8]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	b005      	add	sp, #20
 800a8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8f6:	9902      	ldr	r1, [sp, #8]
 800a8f8:	00b3      	lsls	r3, r6, #2
 800a8fa:	58c9      	ldr	r1, [r1, r3]
 800a8fc:	002a      	movs	r2, r5
 800a8fe:	9801      	ldr	r0, [sp, #4]
 800a900:	f000 ff1a 	bl	800b738 <_fputwc_r>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d0f0      	beq.n	800a8ea <__sprint_r+0x3e>
 800a908:	3601      	adds	r6, #1
 800a90a:	e7e2      	b.n	800a8d2 <__sprint_r+0x26>
 800a90c:	9801      	ldr	r0, [sp, #4]
 800a90e:	f000 fd13 	bl	800b338 <__sfvwrite_r>
 800a912:	e7ea      	b.n	800a8ea <__sprint_r+0x3e>

0800a914 <_vfiprintf_r>:
 800a914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a916:	b0c1      	sub	sp, #260	; 0x104
 800a918:	001c      	movs	r4, r3
 800a91a:	001f      	movs	r7, r3
 800a91c:	9006      	str	r0, [sp, #24]
 800a91e:	9103      	str	r1, [sp, #12]
 800a920:	9207      	str	r2, [sp, #28]
 800a922:	2800      	cmp	r0, #0
 800a924:	d004      	beq.n	800a930 <_vfiprintf_r+0x1c>
 800a926:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <_vfiprintf_r+0x1c>
 800a92c:	f7fc fcb6 	bl	800729c <__sinit>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a934:	07db      	lsls	r3, r3, #31
 800a936:	d407      	bmi.n	800a948 <_vfiprintf_r+0x34>
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	899b      	ldrh	r3, [r3, #12]
 800a93c:	059b      	lsls	r3, r3, #22
 800a93e:	d403      	bmi.n	800a948 <_vfiprintf_r+0x34>
 800a940:	9b03      	ldr	r3, [sp, #12]
 800a942:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a944:	f7fc fdfa 	bl	800753c <__retarget_lock_acquire_recursive>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	220c      	movs	r2, #12
 800a94c:	5e9a      	ldrsh	r2, [r3, r2]
 800a94e:	2380      	movs	r3, #128	; 0x80
 800a950:	019b      	lsls	r3, r3, #6
 800a952:	421a      	tst	r2, r3
 800a954:	d107      	bne.n	800a966 <_vfiprintf_r+0x52>
 800a956:	4313      	orrs	r3, r2
 800a958:	9a03      	ldr	r2, [sp, #12]
 800a95a:	8193      	strh	r3, [r2, #12]
 800a95c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a95e:	4aa3      	ldr	r2, [pc, #652]	; (800abec <_vfiprintf_r+0x2d8>)
 800a960:	4013      	ands	r3, r2
 800a962:	9a03      	ldr	r2, [sp, #12]
 800a964:	6653      	str	r3, [r2, #100]	; 0x64
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	899b      	ldrh	r3, [r3, #12]
 800a96a:	071b      	lsls	r3, r3, #28
 800a96c:	d503      	bpl.n	800a976 <_vfiprintf_r+0x62>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d118      	bne.n	800a9a8 <_vfiprintf_r+0x94>
 800a976:	9903      	ldr	r1, [sp, #12]
 800a978:	9806      	ldr	r0, [sp, #24]
 800a97a:	f000 fe3b 	bl	800b5f4 <__swsetup_r>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d012      	beq.n	800a9a8 <_vfiprintf_r+0x94>
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a986:	07db      	lsls	r3, r3, #31
 800a988:	d505      	bpl.n	800a996 <_vfiprintf_r+0x82>
 800a98a:	2301      	movs	r3, #1
 800a98c:	425b      	negs	r3, r3
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	9808      	ldr	r0, [sp, #32]
 800a992:	b041      	add	sp, #260	; 0x104
 800a994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	899b      	ldrh	r3, [r3, #12]
 800a99a:	059b      	lsls	r3, r3, #22
 800a99c:	d4f5      	bmi.n	800a98a <_vfiprintf_r+0x76>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a9a2:	f7fc fdcc 	bl	800753e <__retarget_lock_release_recursive>
 800a9a6:	e7f0      	b.n	800a98a <_vfiprintf_r+0x76>
 800a9a8:	221a      	movs	r2, #26
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	899b      	ldrh	r3, [r3, #12]
 800a9ae:	401a      	ands	r2, r3
 800a9b0:	2a0a      	cmp	r2, #10
 800a9b2:	d116      	bne.n	800a9e2 <_vfiprintf_r+0xce>
 800a9b4:	9a03      	ldr	r2, [sp, #12]
 800a9b6:	210e      	movs	r1, #14
 800a9b8:	5e52      	ldrsh	r2, [r2, r1]
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	db11      	blt.n	800a9e2 <_vfiprintf_r+0xce>
 800a9be:	9a03      	ldr	r2, [sp, #12]
 800a9c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a9c2:	07d2      	lsls	r2, r2, #31
 800a9c4:	d405      	bmi.n	800a9d2 <_vfiprintf_r+0xbe>
 800a9c6:	059b      	lsls	r3, r3, #22
 800a9c8:	d403      	bmi.n	800a9d2 <_vfiprintf_r+0xbe>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a9ce:	f7fc fdb6 	bl	800753e <__retarget_lock_release_recursive>
 800a9d2:	0023      	movs	r3, r4
 800a9d4:	9a07      	ldr	r2, [sp, #28]
 800a9d6:	9903      	ldr	r1, [sp, #12]
 800a9d8:	9806      	ldr	r0, [sp, #24]
 800a9da:	f000 fc69 	bl	800b2b0 <__sbprintf>
 800a9de:	9008      	str	r0, [sp, #32]
 800a9e0:	e7d6      	b.n	800a990 <_vfiprintf_r+0x7c>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	ad17      	add	r5, sp, #92	; 0x5c
 800a9e6:	9514      	str	r5, [sp, #80]	; 0x50
 800a9e8:	9316      	str	r3, [sp, #88]	; 0x58
 800a9ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a9ec:	930c      	str	r3, [sp, #48]	; 0x30
 800a9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a9f0:	930e      	str	r3, [sp, #56]	; 0x38
 800a9f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9f4:	9308      	str	r3, [sp, #32]
 800a9f6:	9c07      	ldr	r4, [sp, #28]
 800a9f8:	7823      	ldrb	r3, [r4, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <_vfiprintf_r+0xf0>
 800a9fe:	2b25      	cmp	r3, #37	; 0x25
 800aa00:	d000      	beq.n	800aa04 <_vfiprintf_r+0xf0>
 800aa02:	e08d      	b.n	800ab20 <_vfiprintf_r+0x20c>
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	1ae6      	subs	r6, r4, r3
 800aa08:	429c      	cmp	r4, r3
 800aa0a:	d016      	beq.n	800aa3a <_vfiprintf_r+0x126>
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa10:	606e      	str	r6, [r5, #4]
 800aa12:	199b      	adds	r3, r3, r6
 800aa14:	9316      	str	r3, [sp, #88]	; 0x58
 800aa16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa18:	3508      	adds	r5, #8
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9315      	str	r3, [sp, #84]	; 0x54
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	dd08      	ble.n	800aa34 <_vfiprintf_r+0x120>
 800aa22:	9903      	ldr	r1, [sp, #12]
 800aa24:	9806      	ldr	r0, [sp, #24]
 800aa26:	aa14      	add	r2, sp, #80	; 0x50
 800aa28:	f7ff ff40 	bl	800a8ac <__sprint_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d000      	beq.n	800aa32 <_vfiprintf_r+0x11e>
 800aa30:	e3d9      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800aa32:	ad17      	add	r5, sp, #92	; 0x5c
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	199b      	adds	r3, r3, r6
 800aa38:	9308      	str	r3, [sp, #32]
 800aa3a:	7823      	ldrb	r3, [r4, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <_vfiprintf_r+0x130>
 800aa40:	f000 fbf6 	bl	800b230 <_vfiprintf_r+0x91c>
 800aa44:	2200      	movs	r2, #0
 800aa46:	a912      	add	r1, sp, #72	; 0x48
 800aa48:	70ca      	strb	r2, [r1, #3]
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	1c63      	adds	r3, r4, #1
 800aa4e:	0014      	movs	r4, r2
 800aa50:	4249      	negs	r1, r1
 800aa52:	9105      	str	r1, [sp, #20]
 800aa54:	9209      	str	r2, [sp, #36]	; 0x24
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	9207      	str	r2, [sp, #28]
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	3820      	subs	r0, #32
 800aa60:	285a      	cmp	r0, #90	; 0x5a
 800aa62:	d900      	bls.n	800aa66 <_vfiprintf_r+0x152>
 800aa64:	e362      	b.n	800b12c <_vfiprintf_r+0x818>
 800aa66:	f7f5 fb5f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800aa6a:	0078      	.short	0x0078
 800aa6c:	03610361 	.word	0x03610361
 800aa70:	03610081 	.word	0x03610081
 800aa74:	03610361 	.word	0x03610361
 800aa78:	0361005d 	.word	0x0361005d
 800aa7c:	00830361 	.word	0x00830361
 800aa80:	0361008b 	.word	0x0361008b
 800aa84:	008f0089 	.word	0x008f0089
 800aa88:	00ad0361 	.word	0x00ad0361
 800aa8c:	00af00af 	.word	0x00af00af
 800aa90:	00af00af 	.word	0x00af00af
 800aa94:	00af00af 	.word	0x00af00af
 800aa98:	00af00af 	.word	0x00af00af
 800aa9c:	036100af 	.word	0x036100af
 800aaa0:	03610361 	.word	0x03610361
 800aaa4:	03610361 	.word	0x03610361
 800aaa8:	03610361 	.word	0x03610361
 800aaac:	03610361 	.word	0x03610361
 800aab0:	00e600da 	.word	0x00e600da
 800aab4:	03610361 	.word	0x03610361
 800aab8:	03610361 	.word	0x03610361
 800aabc:	03610361 	.word	0x03610361
 800aac0:	03610361 	.word	0x03610361
 800aac4:	03610361 	.word	0x03610361
 800aac8:	03610143 	.word	0x03610143
 800aacc:	03610361 	.word	0x03610361
 800aad0:	03610182 	.word	0x03610182
 800aad4:	0361027c 	.word	0x0361027c
 800aad8:	02ae0361 	.word	0x02ae0361
 800aadc:	03610361 	.word	0x03610361
 800aae0:	03610361 	.word	0x03610361
 800aae4:	03610361 	.word	0x03610361
 800aae8:	03610361 	.word	0x03610361
 800aaec:	03610361 	.word	0x03610361
 800aaf0:	00e800da 	.word	0x00e800da
 800aaf4:	03610361 	.word	0x03610361
 800aaf8:	00c30361 	.word	0x00c30361
 800aafc:	00d600e8 	.word	0x00d600e8
 800ab00:	00cf0361 	.word	0x00cf0361
 800ab04:	01260361 	.word	0x01260361
 800ab08:	01740145 	.word	0x01740145
 800ab0c:	036100d6 	.word	0x036100d6
 800ab10:	007f0182 	.word	0x007f0182
 800ab14:	0361027e 	.word	0x0361027e
 800ab18:	02cd0361 	.word	0x02cd0361
 800ab1c:	007f0361 	.word	0x007f0361
 800ab20:	3401      	adds	r4, #1
 800ab22:	e769      	b.n	800a9f8 <_vfiprintf_r+0xe4>
 800ab24:	9806      	ldr	r0, [sp, #24]
 800ab26:	f7fe fd01 	bl	800952c <_localeconv_r>
 800ab2a:	6843      	ldr	r3, [r0, #4]
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab30:	f7f5 fae8 	bl	8000104 <strlen>
 800ab34:	900e      	str	r0, [sp, #56]	; 0x38
 800ab36:	9806      	ldr	r0, [sp, #24]
 800ab38:	f7fe fcf8 	bl	800952c <_localeconv_r>
 800ab3c:	6883      	ldr	r3, [r0, #8]
 800ab3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ab40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d010      	beq.n	800ab68 <_vfiprintf_r+0x254>
 800ab46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00d      	beq.n	800ab68 <_vfiprintf_r+0x254>
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <_vfiprintf_r+0x254>
 800ab52:	2380      	movs	r3, #128	; 0x80
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	431c      	orrs	r4, r3
 800ab58:	e006      	b.n	800ab68 <_vfiprintf_r+0x254>
 800ab5a:	ab12      	add	r3, sp, #72	; 0x48
 800ab5c:	78da      	ldrb	r2, [r3, #3]
 800ab5e:	3303      	adds	r3, #3
 800ab60:	2a00      	cmp	r2, #0
 800ab62:	d101      	bne.n	800ab68 <_vfiprintf_r+0x254>
 800ab64:	3220      	adds	r2, #32
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	9b07      	ldr	r3, [sp, #28]
 800ab6a:	e774      	b.n	800aa56 <_vfiprintf_r+0x142>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e7f2      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ab70:	cf08      	ldmia	r7!, {r3}
 800ab72:	9309      	str	r3, [sp, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	daf7      	bge.n	800ab68 <_vfiprintf_r+0x254>
 800ab78:	425b      	negs	r3, r3
 800ab7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7c:	2304      	movs	r3, #4
 800ab7e:	e7ea      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ab80:	222b      	movs	r2, #43	; 0x2b
 800ab82:	ab12      	add	r3, sp, #72	; 0x48
 800ab84:	70da      	strb	r2, [r3, #3]
 800ab86:	e7ef      	b.n	800ab68 <_vfiprintf_r+0x254>
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab90:	d00f      	beq.n	800abb2 <_vfiprintf_r+0x29e>
 800ab92:	2100      	movs	r1, #0
 800ab94:	9105      	str	r1, [sp, #20]
 800ab96:	0019      	movs	r1, r3
 800ab98:	3930      	subs	r1, #48	; 0x30
 800ab9a:	9207      	str	r2, [sp, #28]
 800ab9c:	2909      	cmp	r1, #9
 800ab9e:	d900      	bls.n	800aba2 <_vfiprintf_r+0x28e>
 800aba0:	e75c      	b.n	800aa5c <_vfiprintf_r+0x148>
 800aba2:	200a      	movs	r0, #10
 800aba4:	9b05      	ldr	r3, [sp, #20]
 800aba6:	4343      	muls	r3, r0
 800aba8:	185b      	adds	r3, r3, r1
 800abaa:	9305      	str	r3, [sp, #20]
 800abac:	7813      	ldrb	r3, [r2, #0]
 800abae:	3201      	adds	r2, #1
 800abb0:	e7f1      	b.n	800ab96 <_vfiprintf_r+0x282>
 800abb2:	cf08      	ldmia	r7!, {r3}
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	da02      	bge.n	800abc0 <_vfiprintf_r+0x2ac>
 800abba:	2301      	movs	r3, #1
 800abbc:	425b      	negs	r3, r3
 800abbe:	9305      	str	r3, [sp, #20]
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	e7d1      	b.n	800ab68 <_vfiprintf_r+0x254>
 800abc4:	2380      	movs	r3, #128	; 0x80
 800abc6:	e7c6      	b.n	800ab56 <_vfiprintf_r+0x242>
 800abc8:	2100      	movs	r1, #0
 800abca:	9a07      	ldr	r2, [sp, #28]
 800abcc:	9109      	str	r1, [sp, #36]	; 0x24
 800abce:	200a      	movs	r0, #10
 800abd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abd2:	3b30      	subs	r3, #48	; 0x30
 800abd4:	4341      	muls	r1, r0
 800abd6:	185b      	adds	r3, r3, r1
 800abd8:	9309      	str	r3, [sp, #36]	; 0x24
 800abda:	0013      	movs	r3, r2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	3201      	adds	r2, #1
 800abe0:	0019      	movs	r1, r3
 800abe2:	3930      	subs	r1, #48	; 0x30
 800abe4:	9207      	str	r2, [sp, #28]
 800abe6:	2909      	cmp	r1, #9
 800abe8:	d9f1      	bls.n	800abce <_vfiprintf_r+0x2ba>
 800abea:	e737      	b.n	800aa5c <_vfiprintf_r+0x148>
 800abec:	ffffdfff 	.word	0xffffdfff
 800abf0:	9b07      	ldr	r3, [sp, #28]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b68      	cmp	r3, #104	; 0x68
 800abf6:	d105      	bne.n	800ac04 <_vfiprintf_r+0x2f0>
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	3301      	adds	r3, #1
 800abfc:	9307      	str	r3, [sp, #28]
 800abfe:	2380      	movs	r3, #128	; 0x80
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	e7a8      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	e7a6      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ac08:	9b07      	ldr	r3, [sp, #28]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b6c      	cmp	r3, #108	; 0x6c
 800ac0e:	d104      	bne.n	800ac1a <_vfiprintf_r+0x306>
 800ac10:	9b07      	ldr	r3, [sp, #28]
 800ac12:	3301      	adds	r3, #1
 800ac14:	9307      	str	r3, [sp, #28]
 800ac16:	2320      	movs	r3, #32
 800ac18:	e79d      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	e79b      	b.n	800ab56 <_vfiprintf_r+0x242>
 800ac1e:	003a      	movs	r2, r7
 800ac20:	ca08      	ldmia	r2!, {r3}
 800ac22:	ae27      	add	r6, sp, #156	; 0x9c
 800ac24:	7033      	strb	r3, [r6, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9204      	str	r2, [sp, #16]
 800ac2a:	aa12      	add	r2, sp, #72	; 0x48
 800ac2c:	70d3      	strb	r3, [r2, #3]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac32:	9205      	str	r2, [sp, #20]
 800ac34:	e0b0      	b.n	800ad98 <_vfiprintf_r+0x484>
 800ac36:	2310      	movs	r3, #16
 800ac38:	431c      	orrs	r4, r3
 800ac3a:	06a3      	lsls	r3, r4, #26
 800ac3c:	d52a      	bpl.n	800ac94 <_vfiprintf_r+0x380>
 800ac3e:	2307      	movs	r3, #7
 800ac40:	3707      	adds	r7, #7
 800ac42:	439f      	bics	r7, r3
 800ac44:	0039      	movs	r1, r7
 800ac46:	c90c      	ldmia	r1!, {r2, r3}
 800ac48:	9200      	str	r2, [sp, #0]
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	9104      	str	r1, [sp, #16]
 800ac4e:	9a01      	ldr	r2, [sp, #4]
 800ac50:	2301      	movs	r3, #1
 800ac52:	2a00      	cmp	r2, #0
 800ac54:	da09      	bge.n	800ac6a <_vfiprintf_r+0x356>
 800ac56:	9e00      	ldr	r6, [sp, #0]
 800ac58:	9f01      	ldr	r7, [sp, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4271      	negs	r1, r6
 800ac5e:	41ba      	sbcs	r2, r7
 800ac60:	9100      	str	r1, [sp, #0]
 800ac62:	9201      	str	r2, [sp, #4]
 800ac64:	212d      	movs	r1, #45	; 0x2d
 800ac66:	aa12      	add	r2, sp, #72	; 0x48
 800ac68:	70d1      	strb	r1, [r2, #3]
 800ac6a:	9901      	ldr	r1, [sp, #4]
 800ac6c:	9a00      	ldr	r2, [sp, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	9905      	ldr	r1, [sp, #20]
 800ac72:	3101      	adds	r1, #1
 800ac74:	d100      	bne.n	800ac78 <_vfiprintf_r+0x364>
 800ac76:	e2e9      	b.n	800b24c <_vfiprintf_r+0x938>
 800ac78:	2180      	movs	r1, #128	; 0x80
 800ac7a:	0027      	movs	r7, r4
 800ac7c:	438f      	bics	r7, r1
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	d000      	beq.n	800ac84 <_vfiprintf_r+0x370>
 800ac82:	e2e7      	b.n	800b254 <_vfiprintf_r+0x940>
 800ac84:	9a05      	ldr	r2, [sp, #20]
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	d100      	bne.n	800ac8c <_vfiprintf_r+0x378>
 800ac8a:	e243      	b.n	800b114 <_vfiprintf_r+0x800>
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d000      	beq.n	800ac92 <_vfiprintf_r+0x37e>
 800ac90:	e2e3      	b.n	800b25a <_vfiprintf_r+0x946>
 800ac92:	e1e7      	b.n	800b064 <_vfiprintf_r+0x750>
 800ac94:	003a      	movs	r2, r7
 800ac96:	ca08      	ldmia	r2!, {r3}
 800ac98:	9204      	str	r2, [sp, #16]
 800ac9a:	06e2      	lsls	r2, r4, #27
 800ac9c:	d503      	bpl.n	800aca6 <_vfiprintf_r+0x392>
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	17db      	asrs	r3, r3, #31
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	e7d3      	b.n	800ac4e <_vfiprintf_r+0x33a>
 800aca6:	0662      	lsls	r2, r4, #25
 800aca8:	d501      	bpl.n	800acae <_vfiprintf_r+0x39a>
 800acaa:	b21b      	sxth	r3, r3
 800acac:	e7f7      	b.n	800ac9e <_vfiprintf_r+0x38a>
 800acae:	05a2      	lsls	r2, r4, #22
 800acb0:	d5f5      	bpl.n	800ac9e <_vfiprintf_r+0x38a>
 800acb2:	b25b      	sxtb	r3, r3
 800acb4:	e7f3      	b.n	800ac9e <_vfiprintf_r+0x38a>
 800acb6:	1d3b      	adds	r3, r7, #4
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	06a3      	lsls	r3, r4, #26
 800acbc:	d506      	bpl.n	800accc <_vfiprintf_r+0x3b8>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	9a08      	ldr	r2, [sp, #32]
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	17d2      	asrs	r2, r2, #31
 800acc6:	605a      	str	r2, [r3, #4]
 800acc8:	9f04      	ldr	r7, [sp, #16]
 800acca:	e694      	b.n	800a9f6 <_vfiprintf_r+0xe2>
 800accc:	06e3      	lsls	r3, r4, #27
 800acce:	d503      	bpl.n	800acd8 <_vfiprintf_r+0x3c4>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	9a08      	ldr	r2, [sp, #32]
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	e7f7      	b.n	800acc8 <_vfiprintf_r+0x3b4>
 800acd8:	0663      	lsls	r3, r4, #25
 800acda:	d503      	bpl.n	800ace4 <_vfiprintf_r+0x3d0>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	9a08      	ldr	r2, [sp, #32]
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	e7f1      	b.n	800acc8 <_vfiprintf_r+0x3b4>
 800ace4:	05a4      	lsls	r4, r4, #22
 800ace6:	d5f3      	bpl.n	800acd0 <_vfiprintf_r+0x3bc>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	9a08      	ldr	r2, [sp, #32]
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	e7eb      	b.n	800acc8 <_vfiprintf_r+0x3b4>
 800acf0:	2310      	movs	r3, #16
 800acf2:	431c      	orrs	r4, r3
 800acf4:	2320      	movs	r3, #32
 800acf6:	0020      	movs	r0, r4
 800acf8:	4018      	ands	r0, r3
 800acfa:	421c      	tst	r4, r3
 800acfc:	d00d      	beq.n	800ad1a <_vfiprintf_r+0x406>
 800acfe:	3b19      	subs	r3, #25
 800ad00:	3707      	adds	r7, #7
 800ad02:	439f      	bics	r7, r3
 800ad04:	0039      	movs	r1, r7
 800ad06:	c90c      	ldmia	r1!, {r2, r3}
 800ad08:	9200      	str	r2, [sp, #0]
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	9104      	str	r1, [sp, #16]
 800ad0e:	4bcc      	ldr	r3, [pc, #816]	; (800b040 <_vfiprintf_r+0x72c>)
 800ad10:	401c      	ands	r4, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	2100      	movs	r1, #0
 800ad16:	aa12      	add	r2, sp, #72	; 0x48
 800ad18:	e7a6      	b.n	800ac68 <_vfiprintf_r+0x354>
 800ad1a:	003a      	movs	r2, r7
 800ad1c:	ca08      	ldmia	r2!, {r3}
 800ad1e:	0021      	movs	r1, r4
 800ad20:	9204      	str	r2, [sp, #16]
 800ad22:	2210      	movs	r2, #16
 800ad24:	4011      	ands	r1, r2
 800ad26:	4214      	tst	r4, r2
 800ad28:	d002      	beq.n	800ad30 <_vfiprintf_r+0x41c>
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	9001      	str	r0, [sp, #4]
 800ad2e:	e7ee      	b.n	800ad0e <_vfiprintf_r+0x3fa>
 800ad30:	2240      	movs	r2, #64	; 0x40
 800ad32:	0020      	movs	r0, r4
 800ad34:	4010      	ands	r0, r2
 800ad36:	4214      	tst	r4, r2
 800ad38:	d003      	beq.n	800ad42 <_vfiprintf_r+0x42e>
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	9101      	str	r1, [sp, #4]
 800ad40:	e7e5      	b.n	800ad0e <_vfiprintf_r+0x3fa>
 800ad42:	2280      	movs	r2, #128	; 0x80
 800ad44:	0021      	movs	r1, r4
 800ad46:	0092      	lsls	r2, r2, #2
 800ad48:	4011      	ands	r1, r2
 800ad4a:	4214      	tst	r4, r2
 800ad4c:	d0f6      	beq.n	800ad3c <_vfiprintf_r+0x428>
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	e7eb      	b.n	800ad2a <_vfiprintf_r+0x416>
 800ad52:	003b      	movs	r3, r7
 800ad54:	cb04      	ldmia	r3!, {r2}
 800ad56:	49bb      	ldr	r1, [pc, #748]	; (800b044 <_vfiprintf_r+0x730>)
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	aa13      	add	r2, sp, #76	; 0x4c
 800ad60:	8011      	strh	r1, [r2, #0]
 800ad62:	4ab9      	ldr	r2, [pc, #740]	; (800b048 <_vfiprintf_r+0x734>)
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	3302      	adds	r3, #2
 800ad68:	431c      	orrs	r4, r3
 800ad6a:	920c      	str	r2, [sp, #48]	; 0x30
 800ad6c:	e7d2      	b.n	800ad14 <_vfiprintf_r+0x400>
 800ad6e:	003b      	movs	r3, r7
 800ad70:	2700      	movs	r7, #0
 800ad72:	cb40      	ldmia	r3!, {r6}
 800ad74:	9304      	str	r3, [sp, #16]
 800ad76:	ab12      	add	r3, sp, #72	; 0x48
 800ad78:	70df      	strb	r7, [r3, #3]
 800ad7a:	9b05      	ldr	r3, [sp, #20]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	d100      	bne.n	800ad82 <_vfiprintf_r+0x46e>
 800ad80:	e0ea      	b.n	800af58 <_vfiprintf_r+0x644>
 800ad82:	0039      	movs	r1, r7
 800ad84:	0030      	movs	r0, r6
 800ad86:	9a05      	ldr	r2, [sp, #20]
 800ad88:	f7fe fbe8 	bl	800955c <memchr>
 800ad8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad8e:	42b8      	cmp	r0, r7
 800ad90:	d002      	beq.n	800ad98 <_vfiprintf_r+0x484>
 800ad92:	1b83      	subs	r3, r0, r6
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	970b      	str	r7, [sp, #44]	; 0x2c
 800ad98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9a:	9a05      	ldr	r2, [sp, #20]
 800ad9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	da00      	bge.n	800ada4 <_vfiprintf_r+0x490>
 800ada2:	920a      	str	r2, [sp, #40]	; 0x28
 800ada4:	ab12      	add	r3, sp, #72	; 0x48
 800ada6:	3303      	adds	r3, #3
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	1e5a      	subs	r2, r3, #1
 800adac:	4193      	sbcs	r3, r2
 800adae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb0:	18d3      	adds	r3, r2, r3
 800adb2:	930a      	str	r3, [sp, #40]	; 0x28
 800adb4:	0022      	movs	r2, r4
 800adb6:	2302      	movs	r3, #2
 800adb8:	401a      	ands	r2, r3
 800adba:	9210      	str	r2, [sp, #64]	; 0x40
 800adbc:	421c      	tst	r4, r3
 800adbe:	d002      	beq.n	800adc6 <_vfiprintf_r+0x4b2>
 800adc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc2:	3302      	adds	r3, #2
 800adc4:	930a      	str	r3, [sp, #40]	; 0x28
 800adc6:	2384      	movs	r3, #132	; 0x84
 800adc8:	0022      	movs	r2, r4
 800adca:	401a      	ands	r2, r3
 800adcc:	9211      	str	r2, [sp, #68]	; 0x44
 800adce:	421c      	tst	r4, r3
 800add0:	d11e      	bne.n	800ae10 <_vfiprintf_r+0x4fc>
 800add2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add6:	1a9f      	subs	r7, r3, r2
 800add8:	2f00      	cmp	r7, #0
 800adda:	dd19      	ble.n	800ae10 <_vfiprintf_r+0x4fc>
 800addc:	0029      	movs	r1, r5
 800adde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ade0:	489a      	ldr	r0, [pc, #616]	; (800b04c <_vfiprintf_r+0x738>)
 800ade2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ade4:	3301      	adds	r3, #1
 800ade6:	3108      	adds	r1, #8
 800ade8:	6028      	str	r0, [r5, #0]
 800adea:	2f10      	cmp	r7, #16
 800adec:	dd00      	ble.n	800adf0 <_vfiprintf_r+0x4dc>
 800adee:	e1a7      	b.n	800b140 <_vfiprintf_r+0x82c>
 800adf0:	606f      	str	r7, [r5, #4]
 800adf2:	18bf      	adds	r7, r7, r2
 800adf4:	000d      	movs	r5, r1
 800adf6:	9716      	str	r7, [sp, #88]	; 0x58
 800adf8:	9315      	str	r3, [sp, #84]	; 0x54
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	dd08      	ble.n	800ae10 <_vfiprintf_r+0x4fc>
 800adfe:	9903      	ldr	r1, [sp, #12]
 800ae00:	9806      	ldr	r0, [sp, #24]
 800ae02:	aa14      	add	r2, sp, #80	; 0x50
 800ae04:	f7ff fd52 	bl	800a8ac <__sprint_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d000      	beq.n	800ae0e <_vfiprintf_r+0x4fa>
 800ae0c:	e1eb      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800ae0e:	ad17      	add	r5, sp, #92	; 0x5c
 800ae10:	a912      	add	r1, sp, #72	; 0x48
 800ae12:	78c8      	ldrb	r0, [r1, #3]
 800ae14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae18:	3103      	adds	r1, #3
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d012      	beq.n	800ae44 <_vfiprintf_r+0x530>
 800ae1e:	6029      	str	r1, [r5, #0]
 800ae20:	2101      	movs	r1, #1
 800ae22:	3301      	adds	r3, #1
 800ae24:	1852      	adds	r2, r2, r1
 800ae26:	6069      	str	r1, [r5, #4]
 800ae28:	9216      	str	r2, [sp, #88]	; 0x58
 800ae2a:	9315      	str	r3, [sp, #84]	; 0x54
 800ae2c:	3508      	adds	r5, #8
 800ae2e:	2b07      	cmp	r3, #7
 800ae30:	dd08      	ble.n	800ae44 <_vfiprintf_r+0x530>
 800ae32:	9903      	ldr	r1, [sp, #12]
 800ae34:	9806      	ldr	r0, [sp, #24]
 800ae36:	aa14      	add	r2, sp, #80	; 0x50
 800ae38:	f7ff fd38 	bl	800a8ac <__sprint_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d000      	beq.n	800ae42 <_vfiprintf_r+0x52e>
 800ae40:	e1d1      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800ae42:	ad17      	add	r5, sp, #92	; 0x5c
 800ae44:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ae46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae4a:	2900      	cmp	r1, #0
 800ae4c:	d013      	beq.n	800ae76 <_vfiprintf_r+0x562>
 800ae4e:	a913      	add	r1, sp, #76	; 0x4c
 800ae50:	6029      	str	r1, [r5, #0]
 800ae52:	2102      	movs	r1, #2
 800ae54:	3301      	adds	r3, #1
 800ae56:	1852      	adds	r2, r2, r1
 800ae58:	6069      	str	r1, [r5, #4]
 800ae5a:	9216      	str	r2, [sp, #88]	; 0x58
 800ae5c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae5e:	3508      	adds	r5, #8
 800ae60:	2b07      	cmp	r3, #7
 800ae62:	dd08      	ble.n	800ae76 <_vfiprintf_r+0x562>
 800ae64:	9903      	ldr	r1, [sp, #12]
 800ae66:	9806      	ldr	r0, [sp, #24]
 800ae68:	aa14      	add	r2, sp, #80	; 0x50
 800ae6a:	f7ff fd1f 	bl	800a8ac <__sprint_r>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d000      	beq.n	800ae74 <_vfiprintf_r+0x560>
 800ae72:	e1b8      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800ae74:	ad17      	add	r5, sp, #92	; 0x5c
 800ae76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae78:	2b80      	cmp	r3, #128	; 0x80
 800ae7a:	d11e      	bne.n	800aeba <_vfiprintf_r+0x5a6>
 800ae7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae80:	1a9f      	subs	r7, r3, r2
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	dd19      	ble.n	800aeba <_vfiprintf_r+0x5a6>
 800ae86:	0029      	movs	r1, r5
 800ae88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae8a:	4871      	ldr	r0, [pc, #452]	; (800b050 <_vfiprintf_r+0x73c>)
 800ae8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae8e:	3301      	adds	r3, #1
 800ae90:	3108      	adds	r1, #8
 800ae92:	6028      	str	r0, [r5, #0]
 800ae94:	2f10      	cmp	r7, #16
 800ae96:	dd00      	ble.n	800ae9a <_vfiprintf_r+0x586>
 800ae98:	e164      	b.n	800b164 <_vfiprintf_r+0x850>
 800ae9a:	606f      	str	r7, [r5, #4]
 800ae9c:	18bf      	adds	r7, r7, r2
 800ae9e:	000d      	movs	r5, r1
 800aea0:	9716      	str	r7, [sp, #88]	; 0x58
 800aea2:	9315      	str	r3, [sp, #84]	; 0x54
 800aea4:	2b07      	cmp	r3, #7
 800aea6:	dd08      	ble.n	800aeba <_vfiprintf_r+0x5a6>
 800aea8:	9903      	ldr	r1, [sp, #12]
 800aeaa:	9806      	ldr	r0, [sp, #24]
 800aeac:	aa14      	add	r2, sp, #80	; 0x50
 800aeae:	f7ff fcfd 	bl	800a8ac <__sprint_r>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d000      	beq.n	800aeb8 <_vfiprintf_r+0x5a4>
 800aeb6:	e196      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800aeb8:	ad17      	add	r5, sp, #92	; 0x5c
 800aeba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aebc:	9a05      	ldr	r2, [sp, #20]
 800aebe:	1a9f      	subs	r7, r3, r2
 800aec0:	2f00      	cmp	r7, #0
 800aec2:	dd19      	ble.n	800aef8 <_vfiprintf_r+0x5e4>
 800aec4:	0029      	movs	r1, r5
 800aec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec8:	4861      	ldr	r0, [pc, #388]	; (800b050 <_vfiprintf_r+0x73c>)
 800aeca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aecc:	3301      	adds	r3, #1
 800aece:	3108      	adds	r1, #8
 800aed0:	6028      	str	r0, [r5, #0]
 800aed2:	2f10      	cmp	r7, #16
 800aed4:	dd00      	ble.n	800aed8 <_vfiprintf_r+0x5c4>
 800aed6:	e157      	b.n	800b188 <_vfiprintf_r+0x874>
 800aed8:	606f      	str	r7, [r5, #4]
 800aeda:	18bf      	adds	r7, r7, r2
 800aedc:	000d      	movs	r5, r1
 800aede:	9716      	str	r7, [sp, #88]	; 0x58
 800aee0:	9315      	str	r3, [sp, #84]	; 0x54
 800aee2:	2b07      	cmp	r3, #7
 800aee4:	dd08      	ble.n	800aef8 <_vfiprintf_r+0x5e4>
 800aee6:	9903      	ldr	r1, [sp, #12]
 800aee8:	9806      	ldr	r0, [sp, #24]
 800aeea:	aa14      	add	r2, sp, #80	; 0x50
 800aeec:	f7ff fcde 	bl	800a8ac <__sprint_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d000      	beq.n	800aef6 <_vfiprintf_r+0x5e2>
 800aef4:	e177      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800aef6:	ad17      	add	r5, sp, #92	; 0x5c
 800aef8:	9b05      	ldr	r3, [sp, #20]
 800aefa:	9a05      	ldr	r2, [sp, #20]
 800aefc:	606b      	str	r3, [r5, #4]
 800aefe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af00:	602e      	str	r6, [r5, #0]
 800af02:	189b      	adds	r3, r3, r2
 800af04:	9316      	str	r3, [sp, #88]	; 0x58
 800af06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af08:	3508      	adds	r5, #8
 800af0a:	3301      	adds	r3, #1
 800af0c:	9315      	str	r3, [sp, #84]	; 0x54
 800af0e:	2b07      	cmp	r3, #7
 800af10:	dd08      	ble.n	800af24 <_vfiprintf_r+0x610>
 800af12:	9903      	ldr	r1, [sp, #12]
 800af14:	9806      	ldr	r0, [sp, #24]
 800af16:	aa14      	add	r2, sp, #80	; 0x50
 800af18:	f7ff fcc8 	bl	800a8ac <__sprint_r>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d000      	beq.n	800af22 <_vfiprintf_r+0x60e>
 800af20:	e161      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800af22:	ad17      	add	r5, sp, #92	; 0x5c
 800af24:	0764      	lsls	r4, r4, #29
 800af26:	d500      	bpl.n	800af2a <_vfiprintf_r+0x616>
 800af28:	e140      	b.n	800b1ac <_vfiprintf_r+0x898>
 800af2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2e:	4293      	cmp	r3, r2
 800af30:	da00      	bge.n	800af34 <_vfiprintf_r+0x620>
 800af32:	0013      	movs	r3, r2
 800af34:	9a08      	ldr	r2, [sp, #32]
 800af36:	18d3      	adds	r3, r2, r3
 800af38:	9308      	str	r3, [sp, #32]
 800af3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <_vfiprintf_r+0x63c>
 800af40:	9903      	ldr	r1, [sp, #12]
 800af42:	9806      	ldr	r0, [sp, #24]
 800af44:	aa14      	add	r2, sp, #80	; 0x50
 800af46:	f7ff fcb1 	bl	800a8ac <__sprint_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d000      	beq.n	800af50 <_vfiprintf_r+0x63c>
 800af4e:	e14a      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800af50:	2300      	movs	r3, #0
 800af52:	ad17      	add	r5, sp, #92	; 0x5c
 800af54:	9315      	str	r3, [sp, #84]	; 0x54
 800af56:	e6b7      	b.n	800acc8 <_vfiprintf_r+0x3b4>
 800af58:	0030      	movs	r0, r6
 800af5a:	f7f5 f8d3 	bl	8000104 <strlen>
 800af5e:	9005      	str	r0, [sp, #20]
 800af60:	e719      	b.n	800ad96 <_vfiprintf_r+0x482>
 800af62:	2310      	movs	r3, #16
 800af64:	431c      	orrs	r4, r3
 800af66:	2320      	movs	r3, #32
 800af68:	0020      	movs	r0, r4
 800af6a:	4018      	ands	r0, r3
 800af6c:	421c      	tst	r4, r3
 800af6e:	d009      	beq.n	800af84 <_vfiprintf_r+0x670>
 800af70:	3b19      	subs	r3, #25
 800af72:	3707      	adds	r7, #7
 800af74:	439f      	bics	r7, r3
 800af76:	0039      	movs	r1, r7
 800af78:	c90c      	ldmia	r1!, {r2, r3}
 800af7a:	9200      	str	r2, [sp, #0]
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	9104      	str	r1, [sp, #16]
 800af80:	2301      	movs	r3, #1
 800af82:	e6c7      	b.n	800ad14 <_vfiprintf_r+0x400>
 800af84:	003b      	movs	r3, r7
 800af86:	cb04      	ldmia	r3!, {r2}
 800af88:	0021      	movs	r1, r4
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	2310      	movs	r3, #16
 800af8e:	4019      	ands	r1, r3
 800af90:	421c      	tst	r4, r3
 800af92:	d003      	beq.n	800af9c <_vfiprintf_r+0x688>
 800af94:	9200      	str	r2, [sp, #0]
 800af96:	9001      	str	r0, [sp, #4]
 800af98:	3b0f      	subs	r3, #15
 800af9a:	e6bb      	b.n	800ad14 <_vfiprintf_r+0x400>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	0020      	movs	r0, r4
 800afa0:	4018      	ands	r0, r3
 800afa2:	421c      	tst	r4, r3
 800afa4:	d003      	beq.n	800afae <_vfiprintf_r+0x69a>
 800afa6:	b293      	uxth	r3, r2
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	9101      	str	r1, [sp, #4]
 800afac:	e7e8      	b.n	800af80 <_vfiprintf_r+0x66c>
 800afae:	2380      	movs	r3, #128	; 0x80
 800afb0:	0021      	movs	r1, r4
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4019      	ands	r1, r3
 800afb6:	421c      	tst	r4, r3
 800afb8:	d003      	beq.n	800afc2 <_vfiprintf_r+0x6ae>
 800afba:	b2d3      	uxtb	r3, r2
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	9001      	str	r0, [sp, #4]
 800afc0:	e7de      	b.n	800af80 <_vfiprintf_r+0x66c>
 800afc2:	9200      	str	r2, [sp, #0]
 800afc4:	e7f1      	b.n	800afaa <_vfiprintf_r+0x696>
 800afc6:	4a23      	ldr	r2, [pc, #140]	; (800b054 <_vfiprintf_r+0x740>)
 800afc8:	0020      	movs	r0, r4
 800afca:	920c      	str	r2, [sp, #48]	; 0x30
 800afcc:	2220      	movs	r2, #32
 800afce:	4010      	ands	r0, r2
 800afd0:	4214      	tst	r4, r2
 800afd2:	d019      	beq.n	800b008 <_vfiprintf_r+0x6f4>
 800afd4:	3a19      	subs	r2, #25
 800afd6:	3707      	adds	r7, #7
 800afd8:	4397      	bics	r7, r2
 800afda:	0038      	movs	r0, r7
 800afdc:	c806      	ldmia	r0!, {r1, r2}
 800afde:	9100      	str	r1, [sp, #0]
 800afe0:	9201      	str	r2, [sp, #4]
 800afe2:	9004      	str	r0, [sp, #16]
 800afe4:	07e2      	lsls	r2, r4, #31
 800afe6:	d509      	bpl.n	800affc <_vfiprintf_r+0x6e8>
 800afe8:	9a00      	ldr	r2, [sp, #0]
 800afea:	9901      	ldr	r1, [sp, #4]
 800afec:	430a      	orrs	r2, r1
 800afee:	d005      	beq.n	800affc <_vfiprintf_r+0x6e8>
 800aff0:	aa13      	add	r2, sp, #76	; 0x4c
 800aff2:	2130      	movs	r1, #48	; 0x30
 800aff4:	7053      	strb	r3, [r2, #1]
 800aff6:	2302      	movs	r3, #2
 800aff8:	7011      	strb	r1, [r2, #0]
 800affa:	431c      	orrs	r4, r3
 800affc:	4b10      	ldr	r3, [pc, #64]	; (800b040 <_vfiprintf_r+0x72c>)
 800affe:	401c      	ands	r4, r3
 800b000:	2302      	movs	r3, #2
 800b002:	e687      	b.n	800ad14 <_vfiprintf_r+0x400>
 800b004:	4a10      	ldr	r2, [pc, #64]	; (800b048 <_vfiprintf_r+0x734>)
 800b006:	e7df      	b.n	800afc8 <_vfiprintf_r+0x6b4>
 800b008:	0039      	movs	r1, r7
 800b00a:	c904      	ldmia	r1!, {r2}
 800b00c:	0026      	movs	r6, r4
 800b00e:	9104      	str	r1, [sp, #16]
 800b010:	2110      	movs	r1, #16
 800b012:	400e      	ands	r6, r1
 800b014:	420c      	tst	r4, r1
 800b016:	d002      	beq.n	800b01e <_vfiprintf_r+0x70a>
 800b018:	9200      	str	r2, [sp, #0]
 800b01a:	9001      	str	r0, [sp, #4]
 800b01c:	e7e2      	b.n	800afe4 <_vfiprintf_r+0x6d0>
 800b01e:	2140      	movs	r1, #64	; 0x40
 800b020:	0020      	movs	r0, r4
 800b022:	4008      	ands	r0, r1
 800b024:	420c      	tst	r4, r1
 800b026:	d003      	beq.n	800b030 <_vfiprintf_r+0x71c>
 800b028:	b292      	uxth	r2, r2
 800b02a:	9200      	str	r2, [sp, #0]
 800b02c:	9601      	str	r6, [sp, #4]
 800b02e:	e7d9      	b.n	800afe4 <_vfiprintf_r+0x6d0>
 800b030:	2180      	movs	r1, #128	; 0x80
 800b032:	0026      	movs	r6, r4
 800b034:	0089      	lsls	r1, r1, #2
 800b036:	400e      	ands	r6, r1
 800b038:	420c      	tst	r4, r1
 800b03a:	d0f6      	beq.n	800b02a <_vfiprintf_r+0x716>
 800b03c:	b2d2      	uxtb	r2, r2
 800b03e:	e7eb      	b.n	800b018 <_vfiprintf_r+0x704>
 800b040:	fffffbff 	.word	0xfffffbff
 800b044:	00007830 	.word	0x00007830
 800b048:	0800bf14 	.word	0x0800bf14
 800b04c:	0800bff9 	.word	0x0800bff9
 800b050:	0800c009 	.word	0x0800c009
 800b054:	0800bf25 	.word	0x0800bf25
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d109      	bne.n	800b072 <_vfiprintf_r+0x75e>
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	2b09      	cmp	r3, #9
 800b062:	d806      	bhi.n	800b072 <_vfiprintf_r+0x75e>
 800b064:	26b7      	movs	r6, #183	; 0xb7
 800b066:	ab12      	add	r3, sp, #72	; 0x48
 800b068:	18f6      	adds	r6, r6, r3
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	3330      	adds	r3, #48	; 0x30
 800b06e:	7033      	strb	r3, [r6, #0]
 800b070:	e115      	b.n	800b29e <_vfiprintf_r+0x98a>
 800b072:	2380      	movs	r3, #128	; 0x80
 800b074:	2400      	movs	r4, #0
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	403b      	ands	r3, r7
 800b07a:	ae40      	add	r6, sp, #256	; 0x100
 800b07c:	930a      	str	r3, [sp, #40]	; 0x28
 800b07e:	220a      	movs	r2, #10
 800b080:	9800      	ldr	r0, [sp, #0]
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	2300      	movs	r3, #0
 800b086:	f7f5 fa0d 	bl	80004a4 <__aeabi_uldivmod>
 800b08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08c:	3e01      	subs	r6, #1
 800b08e:	3230      	adds	r2, #48	; 0x30
 800b090:	900b      	str	r0, [sp, #44]	; 0x2c
 800b092:	9110      	str	r1, [sp, #64]	; 0x40
 800b094:	7032      	strb	r2, [r6, #0]
 800b096:	3401      	adds	r4, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01a      	beq.n	800b0d2 <_vfiprintf_r+0x7be>
 800b09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	d116      	bne.n	800b0d2 <_vfiprintf_r+0x7be>
 800b0a4:	2cff      	cmp	r4, #255	; 0xff
 800b0a6:	d014      	beq.n	800b0d2 <_vfiprintf_r+0x7be>
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <_vfiprintf_r+0x7a0>
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	2b09      	cmp	r3, #9
 800b0b2:	d90e      	bls.n	800b0d2 <_vfiprintf_r+0x7be>
 800b0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0b8:	1af6      	subs	r6, r6, r3
 800b0ba:	001a      	movs	r2, r3
 800b0bc:	0030      	movs	r0, r6
 800b0be:	f7fc f995 	bl	80073ec <strncpy>
 800b0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	1e5a      	subs	r2, r3, #1
 800b0ca:	4193      	sbcs	r3, r2
 800b0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0ce:	18d3      	adds	r3, r2, r3
 800b0d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0d2:	9b01      	ldr	r3, [sp, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <_vfiprintf_r+0x7cc>
 800b0d8:	9b00      	ldr	r3, [sp, #0]
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d800      	bhi.n	800b0e0 <_vfiprintf_r+0x7cc>
 800b0de:	e0de      	b.n	800b29e <_vfiprintf_r+0x98a>
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	e7c9      	b.n	800b07e <_vfiprintf_r+0x76a>
 800b0ea:	200f      	movs	r0, #15
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0f0:	4003      	ands	r3, r0
 800b0f2:	5cd3      	ldrb	r3, [r2, r3]
 800b0f4:	3e01      	subs	r6, #1
 800b0f6:	7033      	strb	r3, [r6, #0]
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	0719      	lsls	r1, r3, #28
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	091a      	lsrs	r2, r3, #4
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	4311      	orrs	r1, r2
 800b104:	091b      	lsrs	r3, r3, #4
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	000b      	movs	r3, r1
 800b10a:	9a01      	ldr	r2, [sp, #4]
 800b10c:	9100      	str	r1, [sp, #0]
 800b10e:	4313      	orrs	r3, r2
 800b110:	d1ec      	bne.n	800b0ec <_vfiprintf_r+0x7d8>
 800b112:	e0c4      	b.n	800b29e <_vfiprintf_r+0x98a>
 800b114:	ae40      	add	r6, sp, #256	; 0x100
 800b116:	2b00      	cmp	r3, #0
 800b118:	d000      	beq.n	800b11c <_vfiprintf_r+0x808>
 800b11a:	e0c0      	b.n	800b29e <_vfiprintf_r+0x98a>
 800b11c:	07e4      	lsls	r4, r4, #31
 800b11e:	d400      	bmi.n	800b122 <_vfiprintf_r+0x80e>
 800b120:	e0bd      	b.n	800b29e <_vfiprintf_r+0x98a>
 800b122:	26b7      	movs	r6, #183	; 0xb7
 800b124:	ab12      	add	r3, sp, #72	; 0x48
 800b126:	18f6      	adds	r6, r6, r3
 800b128:	2330      	movs	r3, #48	; 0x30
 800b12a:	e7a0      	b.n	800b06e <_vfiprintf_r+0x75a>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d100      	bne.n	800b132 <_vfiprintf_r+0x81e>
 800b130:	e07e      	b.n	800b230 <_vfiprintf_r+0x91c>
 800b132:	ae27      	add	r6, sp, #156	; 0x9c
 800b134:	7033      	strb	r3, [r6, #0]
 800b136:	2300      	movs	r3, #0
 800b138:	aa12      	add	r2, sp, #72	; 0x48
 800b13a:	70d3      	strb	r3, [r2, #3]
 800b13c:	9704      	str	r7, [sp, #16]
 800b13e:	e576      	b.n	800ac2e <_vfiprintf_r+0x31a>
 800b140:	2010      	movs	r0, #16
 800b142:	1812      	adds	r2, r2, r0
 800b144:	6068      	str	r0, [r5, #4]
 800b146:	9216      	str	r2, [sp, #88]	; 0x58
 800b148:	9315      	str	r3, [sp, #84]	; 0x54
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	dd07      	ble.n	800b15e <_vfiprintf_r+0x84a>
 800b14e:	9903      	ldr	r1, [sp, #12]
 800b150:	9806      	ldr	r0, [sp, #24]
 800b152:	aa14      	add	r2, sp, #80	; 0x50
 800b154:	f7ff fbaa 	bl	800a8ac <__sprint_r>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d144      	bne.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b15c:	a917      	add	r1, sp, #92	; 0x5c
 800b15e:	000d      	movs	r5, r1
 800b160:	3f10      	subs	r7, #16
 800b162:	e63b      	b.n	800addc <_vfiprintf_r+0x4c8>
 800b164:	2010      	movs	r0, #16
 800b166:	1812      	adds	r2, r2, r0
 800b168:	6068      	str	r0, [r5, #4]
 800b16a:	9216      	str	r2, [sp, #88]	; 0x58
 800b16c:	9315      	str	r3, [sp, #84]	; 0x54
 800b16e:	2b07      	cmp	r3, #7
 800b170:	dd07      	ble.n	800b182 <_vfiprintf_r+0x86e>
 800b172:	9903      	ldr	r1, [sp, #12]
 800b174:	9806      	ldr	r0, [sp, #24]
 800b176:	aa14      	add	r2, sp, #80	; 0x50
 800b178:	f7ff fb98 	bl	800a8ac <__sprint_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d132      	bne.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b180:	a917      	add	r1, sp, #92	; 0x5c
 800b182:	000d      	movs	r5, r1
 800b184:	3f10      	subs	r7, #16
 800b186:	e67e      	b.n	800ae86 <_vfiprintf_r+0x572>
 800b188:	2010      	movs	r0, #16
 800b18a:	1812      	adds	r2, r2, r0
 800b18c:	6068      	str	r0, [r5, #4]
 800b18e:	9216      	str	r2, [sp, #88]	; 0x58
 800b190:	9315      	str	r3, [sp, #84]	; 0x54
 800b192:	2b07      	cmp	r3, #7
 800b194:	dd07      	ble.n	800b1a6 <_vfiprintf_r+0x892>
 800b196:	9903      	ldr	r1, [sp, #12]
 800b198:	9806      	ldr	r0, [sp, #24]
 800b19a:	aa14      	add	r2, sp, #80	; 0x50
 800b19c:	f7ff fb86 	bl	800a8ac <__sprint_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d120      	bne.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b1a4:	a917      	add	r1, sp, #92	; 0x5c
 800b1a6:	000d      	movs	r5, r1
 800b1a8:	3f10      	subs	r7, #16
 800b1aa:	e68b      	b.n	800aec4 <_vfiprintf_r+0x5b0>
 800b1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b0:	2610      	movs	r6, #16
 800b1b2:	1a9c      	subs	r4, r3, r2
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	dc00      	bgt.n	800b1ba <_vfiprintf_r+0x8a6>
 800b1b8:	e6b7      	b.n	800af2a <_vfiprintf_r+0x616>
 800b1ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b1bc:	4a3b      	ldr	r2, [pc, #236]	; (800b2ac <_vfiprintf_r+0x998>)
 800b1be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1c0:	3101      	adds	r1, #1
 800b1c2:	602a      	str	r2, [r5, #0]
 800b1c4:	2c10      	cmp	r4, #16
 800b1c6:	dc22      	bgt.n	800b20e <_vfiprintf_r+0x8fa>
 800b1c8:	606c      	str	r4, [r5, #4]
 800b1ca:	18e4      	adds	r4, r4, r3
 800b1cc:	9416      	str	r4, [sp, #88]	; 0x58
 800b1ce:	9115      	str	r1, [sp, #84]	; 0x54
 800b1d0:	2907      	cmp	r1, #7
 800b1d2:	dc00      	bgt.n	800b1d6 <_vfiprintf_r+0x8c2>
 800b1d4:	e6a9      	b.n	800af2a <_vfiprintf_r+0x616>
 800b1d6:	9903      	ldr	r1, [sp, #12]
 800b1d8:	9806      	ldr	r0, [sp, #24]
 800b1da:	aa14      	add	r2, sp, #80	; 0x50
 800b1dc:	f7ff fb66 	bl	800a8ac <__sprint_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d100      	bne.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b1e4:	e6a1      	b.n	800af2a <_vfiprintf_r+0x616>
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1ea:	07db      	lsls	r3, r3, #31
 800b1ec:	d407      	bmi.n	800b1fe <_vfiprintf_r+0x8ea>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	059b      	lsls	r3, r3, #22
 800b1f4:	d403      	bmi.n	800b1fe <_vfiprintf_r+0x8ea>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b1fa:	f7fc f9a0 	bl	800753e <__retarget_lock_release_recursive>
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	899b      	ldrh	r3, [r3, #12]
 800b202:	065b      	lsls	r3, r3, #25
 800b204:	d401      	bmi.n	800b20a <_vfiprintf_r+0x8f6>
 800b206:	f7ff fbc3 	bl	800a990 <_vfiprintf_r+0x7c>
 800b20a:	f7ff fbbe 	bl	800a98a <_vfiprintf_r+0x76>
 800b20e:	3310      	adds	r3, #16
 800b210:	606e      	str	r6, [r5, #4]
 800b212:	9316      	str	r3, [sp, #88]	; 0x58
 800b214:	9115      	str	r1, [sp, #84]	; 0x54
 800b216:	3508      	adds	r5, #8
 800b218:	2907      	cmp	r1, #7
 800b21a:	dd07      	ble.n	800b22c <_vfiprintf_r+0x918>
 800b21c:	9903      	ldr	r1, [sp, #12]
 800b21e:	9806      	ldr	r0, [sp, #24]
 800b220:	aa14      	add	r2, sp, #80	; 0x50
 800b222:	f7ff fb43 	bl	800a8ac <__sprint_r>
 800b226:	2800      	cmp	r0, #0
 800b228:	d1dd      	bne.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b22a:	ad17      	add	r5, sp, #92	; 0x5c
 800b22c:	3c10      	subs	r4, #16
 800b22e:	e7c4      	b.n	800b1ba <_vfiprintf_r+0x8a6>
 800b230:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <_vfiprintf_r+0x928>
 800b236:	2300      	movs	r3, #0
 800b238:	9315      	str	r3, [sp, #84]	; 0x54
 800b23a:	e7d4      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b23c:	9903      	ldr	r1, [sp, #12]
 800b23e:	9806      	ldr	r0, [sp, #24]
 800b240:	aa14      	add	r2, sp, #80	; 0x50
 800b242:	f7ff fb33 	bl	800a8ac <__sprint_r>
 800b246:	2800      	cmp	r0, #0
 800b248:	d0f5      	beq.n	800b236 <_vfiprintf_r+0x922>
 800b24a:	e7cc      	b.n	800b1e6 <_vfiprintf_r+0x8d2>
 800b24c:	0027      	movs	r7, r4
 800b24e:	2a00      	cmp	r2, #0
 800b250:	d100      	bne.n	800b254 <_vfiprintf_r+0x940>
 800b252:	e51b      	b.n	800ac8c <_vfiprintf_r+0x378>
 800b254:	2b01      	cmp	r3, #1
 800b256:	d100      	bne.n	800b25a <_vfiprintf_r+0x946>
 800b258:	e6fe      	b.n	800b058 <_vfiprintf_r+0x744>
 800b25a:	ae40      	add	r6, sp, #256	; 0x100
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d100      	bne.n	800b262 <_vfiprintf_r+0x94e>
 800b260:	e743      	b.n	800b0ea <_vfiprintf_r+0x7d6>
 800b262:	2307      	movs	r3, #7
 800b264:	469c      	mov	ip, r3
 800b266:	4663      	mov	r3, ip
 800b268:	9900      	ldr	r1, [sp, #0]
 800b26a:	0032      	movs	r2, r6
 800b26c:	400b      	ands	r3, r1
 800b26e:	9901      	ldr	r1, [sp, #4]
 800b270:	3e01      	subs	r6, #1
 800b272:	074c      	lsls	r4, r1, #29
 800b274:	9900      	ldr	r1, [sp, #0]
 800b276:	3330      	adds	r3, #48	; 0x30
 800b278:	08c8      	lsrs	r0, r1, #3
 800b27a:	9901      	ldr	r1, [sp, #4]
 800b27c:	4304      	orrs	r4, r0
 800b27e:	08c9      	lsrs	r1, r1, #3
 800b280:	9101      	str	r1, [sp, #4]
 800b282:	0021      	movs	r1, r4
 800b284:	9801      	ldr	r0, [sp, #4]
 800b286:	7033      	strb	r3, [r6, #0]
 800b288:	9400      	str	r4, [sp, #0]
 800b28a:	4301      	orrs	r1, r0
 800b28c:	d1eb      	bne.n	800b266 <_vfiprintf_r+0x952>
 800b28e:	07f9      	lsls	r1, r7, #31
 800b290:	d505      	bpl.n	800b29e <_vfiprintf_r+0x98a>
 800b292:	2b30      	cmp	r3, #48	; 0x30
 800b294:	d003      	beq.n	800b29e <_vfiprintf_r+0x98a>
 800b296:	2330      	movs	r3, #48	; 0x30
 800b298:	3e01      	subs	r6, #1
 800b29a:	7033      	strb	r3, [r6, #0]
 800b29c:	1e96      	subs	r6, r2, #2
 800b29e:	9b05      	ldr	r3, [sp, #20]
 800b2a0:	003c      	movs	r4, r7
 800b2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2a4:	ab40      	add	r3, sp, #256	; 0x100
 800b2a6:	1b9b      	subs	r3, r3, r6
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	e575      	b.n	800ad98 <_vfiprintf_r+0x484>
 800b2ac:	0800bff9 	.word	0x0800bff9

0800b2b0 <__sbprintf>:
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	0015      	movs	r5, r2
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	4c1e      	ldr	r4, [pc, #120]	; (800b330 <__sbprintf+0x80>)
 800b2b8:	001f      	movs	r7, r3
 800b2ba:	898b      	ldrh	r3, [r1, #12]
 800b2bc:	44a5      	add	sp, r4
 800b2be:	4393      	bics	r3, r2
 800b2c0:	466a      	mov	r2, sp
 800b2c2:	8193      	strh	r3, [r2, #12]
 800b2c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b2c6:	0006      	movs	r6, r0
 800b2c8:	9319      	str	r3, [sp, #100]	; 0x64
 800b2ca:	89cb      	ldrh	r3, [r1, #14]
 800b2cc:	a816      	add	r0, sp, #88	; 0x58
 800b2ce:	81d3      	strh	r3, [r2, #14]
 800b2d0:	69cb      	ldr	r3, [r1, #28]
 800b2d2:	000c      	movs	r4, r1
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2da:	ab1a      	add	r3, sp, #104	; 0x68
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	9305      	str	r3, [sp, #20]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9306      	str	r3, [sp, #24]
 800b2ec:	f7fc f924 	bl	8007538 <__retarget_lock_init_recursive>
 800b2f0:	002a      	movs	r2, r5
 800b2f2:	003b      	movs	r3, r7
 800b2f4:	4669      	mov	r1, sp
 800b2f6:	0030      	movs	r0, r6
 800b2f8:	f7ff fb0c 	bl	800a914 <_vfiprintf_r>
 800b2fc:	1e05      	subs	r5, r0, #0
 800b2fe:	db07      	blt.n	800b310 <__sbprintf+0x60>
 800b300:	4669      	mov	r1, sp
 800b302:	0030      	movs	r0, r6
 800b304:	f7fe f8ec 	bl	80094e0 <_fflush_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d001      	beq.n	800b310 <__sbprintf+0x60>
 800b30c:	2501      	movs	r5, #1
 800b30e:	426d      	negs	r5, r5
 800b310:	466b      	mov	r3, sp
 800b312:	899a      	ldrh	r2, [r3, #12]
 800b314:	2340      	movs	r3, #64	; 0x40
 800b316:	421a      	tst	r2, r3
 800b318:	d002      	beq.n	800b320 <__sbprintf+0x70>
 800b31a:	89a2      	ldrh	r2, [r4, #12]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	81a3      	strh	r3, [r4, #12]
 800b320:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b322:	f7fc f90a 	bl	800753a <__retarget_lock_close_recursive>
 800b326:	0028      	movs	r0, r5
 800b328:	4b02      	ldr	r3, [pc, #8]	; (800b334 <__sbprintf+0x84>)
 800b32a:	449d      	add	sp, r3
 800b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	fffffb94 	.word	0xfffffb94
 800b334:	0000046c 	.word	0x0000046c

0800b338 <__sfvwrite_r>:
 800b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33a:	6893      	ldr	r3, [r2, #8]
 800b33c:	b087      	sub	sp, #28
 800b33e:	000c      	movs	r4, r1
 800b340:	9002      	str	r0, [sp, #8]
 800b342:	9204      	str	r2, [sp, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <__sfvwrite_r+0x16>
 800b348:	2000      	movs	r0, #0
 800b34a:	b007      	add	sp, #28
 800b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34e:	898b      	ldrh	r3, [r1, #12]
 800b350:	071b      	lsls	r3, r3, #28
 800b352:	d557      	bpl.n	800b404 <__sfvwrite_r+0xcc>
 800b354:	690b      	ldr	r3, [r1, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d054      	beq.n	800b404 <__sfvwrite_r+0xcc>
 800b35a:	9b04      	ldr	r3, [sp, #16]
 800b35c:	2202      	movs	r2, #2
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	001f      	movs	r7, r3
 800b366:	4017      	ands	r7, r2
 800b368:	4213      	tst	r3, r2
 800b36a:	d171      	bne.n	800b450 <__sfvwrite_r+0x118>
 800b36c:	2201      	movs	r2, #1
 800b36e:	2101      	movs	r1, #1
 800b370:	401a      	ands	r2, r3
 800b372:	420b      	tst	r3, r1
 800b374:	d100      	bne.n	800b378 <__sfvwrite_r+0x40>
 800b376:	e0a5      	b.n	800b4c4 <__sfvwrite_r+0x18c>
 800b378:	0038      	movs	r0, r7
 800b37a:	003e      	movs	r6, r7
 800b37c:	9703      	str	r7, [sp, #12]
 800b37e:	9b03      	ldr	r3, [sp, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d100      	bne.n	800b386 <__sfvwrite_r+0x4e>
 800b384:	e10b      	b.n	800b59e <__sfvwrite_r+0x266>
 800b386:	2800      	cmp	r0, #0
 800b388:	d10a      	bne.n	800b3a0 <__sfvwrite_r+0x68>
 800b38a:	001a      	movs	r2, r3
 800b38c:	210a      	movs	r1, #10
 800b38e:	0030      	movs	r0, r6
 800b390:	f7fe f8e4 	bl	800955c <memchr>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	1c5f      	adds	r7, r3, #1
 800b398:	2800      	cmp	r0, #0
 800b39a:	d001      	beq.n	800b3a0 <__sfvwrite_r+0x68>
 800b39c:	3001      	adds	r0, #1
 800b39e:	1b87      	subs	r7, r0, r6
 800b3a0:	9b03      	ldr	r3, [sp, #12]
 800b3a2:	9705      	str	r7, [sp, #20]
 800b3a4:	429f      	cmp	r7, r3
 800b3a6:	d900      	bls.n	800b3aa <__sfvwrite_r+0x72>
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	6820      	ldr	r0, [r4, #0]
 800b3ac:	6922      	ldr	r2, [r4, #16]
 800b3ae:	68a5      	ldr	r5, [r4, #8]
 800b3b0:	6963      	ldr	r3, [r4, #20]
 800b3b2:	4290      	cmp	r0, r2
 800b3b4:	d800      	bhi.n	800b3b8 <__sfvwrite_r+0x80>
 800b3b6:	e0fb      	b.n	800b5b0 <__sfvwrite_r+0x278>
 800b3b8:	9a05      	ldr	r2, [sp, #20]
 800b3ba:	18ed      	adds	r5, r5, r3
 800b3bc:	42aa      	cmp	r2, r5
 800b3be:	dc00      	bgt.n	800b3c2 <__sfvwrite_r+0x8a>
 800b3c0:	e0f6      	b.n	800b5b0 <__sfvwrite_r+0x278>
 800b3c2:	0031      	movs	r1, r6
 800b3c4:	002a      	movs	r2, r5
 800b3c6:	f000 f9e0 	bl	800b78a <memmove>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	0021      	movs	r1, r4
 800b3ce:	195b      	adds	r3, r3, r5
 800b3d0:	9802      	ldr	r0, [sp, #8]
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	f7fe f884 	bl	80094e0 <_fflush_r>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d16e      	bne.n	800b4ba <__sfvwrite_r+0x182>
 800b3dc:	2001      	movs	r0, #1
 800b3de:	1b7f      	subs	r7, r7, r5
 800b3e0:	d105      	bne.n	800b3ee <__sfvwrite_r+0xb6>
 800b3e2:	0021      	movs	r1, r4
 800b3e4:	9802      	ldr	r0, [sp, #8]
 800b3e6:	f7fe f87b 	bl	80094e0 <_fflush_r>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d165      	bne.n	800b4ba <__sfvwrite_r+0x182>
 800b3ee:	9b03      	ldr	r3, [sp, #12]
 800b3f0:	9a04      	ldr	r2, [sp, #16]
 800b3f2:	1b5b      	subs	r3, r3, r5
 800b3f4:	9303      	str	r3, [sp, #12]
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	1976      	adds	r6, r6, r5
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	1b5b      	subs	r3, r3, r5
 800b3fe:	6093      	str	r3, [r2, #8]
 800b400:	d1bd      	bne.n	800b37e <__sfvwrite_r+0x46>
 800b402:	e7a1      	b.n	800b348 <__sfvwrite_r+0x10>
 800b404:	0021      	movs	r1, r4
 800b406:	9802      	ldr	r0, [sp, #8]
 800b408:	f000 f8f4 	bl	800b5f4 <__swsetup_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d0a4      	beq.n	800b35a <__sfvwrite_r+0x22>
 800b410:	2001      	movs	r0, #1
 800b412:	4240      	negs	r0, r0
 800b414:	e799      	b.n	800b34a <__sfvwrite_r+0x12>
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	681e      	ldr	r6, [r3, #0]
 800b41a:	685d      	ldr	r5, [r3, #4]
 800b41c:	3308      	adds	r3, #8
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800b422:	69e1      	ldr	r1, [r4, #28]
 800b424:	2d00      	cmp	r5, #0
 800b426:	d0f6      	beq.n	800b416 <__sfvwrite_r+0xde>
 800b428:	4a6e      	ldr	r2, [pc, #440]	; (800b5e4 <__sfvwrite_r+0x2ac>)
 800b42a:	002b      	movs	r3, r5
 800b42c:	4295      	cmp	r5, r2
 800b42e:	d900      	bls.n	800b432 <__sfvwrite_r+0xfa>
 800b430:	0013      	movs	r3, r2
 800b432:	0032      	movs	r2, r6
 800b434:	9802      	ldr	r0, [sp, #8]
 800b436:	47b8      	blx	r7
 800b438:	2800      	cmp	r0, #0
 800b43a:	dd3e      	ble.n	800b4ba <__sfvwrite_r+0x182>
 800b43c:	9b04      	ldr	r3, [sp, #16]
 800b43e:	9a04      	ldr	r2, [sp, #16]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	1836      	adds	r6, r6, r0
 800b444:	1a1b      	subs	r3, r3, r0
 800b446:	1a2d      	subs	r5, r5, r0
 800b448:	6093      	str	r3, [r2, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e8      	bne.n	800b420 <__sfvwrite_r+0xe8>
 800b44e:	e77b      	b.n	800b348 <__sfvwrite_r+0x10>
 800b450:	2600      	movs	r6, #0
 800b452:	0035      	movs	r5, r6
 800b454:	e7e4      	b.n	800b420 <__sfvwrite_r+0xe8>
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	9303      	str	r3, [sp, #12]
 800b45c:	9b01      	ldr	r3, [sp, #4]
 800b45e:	685d      	ldr	r5, [r3, #4]
 800b460:	3308      	adds	r3, #8
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	220c      	movs	r2, #12
 800b466:	5ea3      	ldrsh	r3, [r4, r2]
 800b468:	6820      	ldr	r0, [r4, #0]
 800b46a:	68a6      	ldr	r6, [r4, #8]
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	d0f2      	beq.n	800b456 <__sfvwrite_r+0x11e>
 800b470:	2180      	movs	r1, #128	; 0x80
 800b472:	0089      	lsls	r1, r1, #2
 800b474:	b29a      	uxth	r2, r3
 800b476:	420b      	tst	r3, r1
 800b478:	d062      	beq.n	800b540 <__sfvwrite_r+0x208>
 800b47a:	42ae      	cmp	r6, r5
 800b47c:	d837      	bhi.n	800b4ee <__sfvwrite_r+0x1b6>
 800b47e:	2390      	movs	r3, #144	; 0x90
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	421a      	tst	r2, r3
 800b484:	d033      	beq.n	800b4ee <__sfvwrite_r+0x1b6>
 800b486:	6921      	ldr	r1, [r4, #16]
 800b488:	1a43      	subs	r3, r0, r1
 800b48a:	2003      	movs	r0, #3
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	6963      	ldr	r3, [r4, #20]
 800b490:	4343      	muls	r3, r0
 800b492:	0fdf      	lsrs	r7, r3, #31
 800b494:	18ff      	adds	r7, r7, r3
 800b496:	9b05      	ldr	r3, [sp, #20]
 800b498:	107f      	asrs	r7, r7, #1
 800b49a:	3301      	adds	r3, #1
 800b49c:	195b      	adds	r3, r3, r5
 800b49e:	42bb      	cmp	r3, r7
 800b4a0:	d900      	bls.n	800b4a4 <__sfvwrite_r+0x16c>
 800b4a2:	001f      	movs	r7, r3
 800b4a4:	0552      	lsls	r2, r2, #21
 800b4a6:	d53c      	bpl.n	800b522 <__sfvwrite_r+0x1ea>
 800b4a8:	0039      	movs	r1, r7
 800b4aa:	9802      	ldr	r0, [sp, #8]
 800b4ac:	f7fb fc42 	bl	8006d34 <_malloc_r>
 800b4b0:	1e06      	subs	r6, r0, #0
 800b4b2:	d10a      	bne.n	800b4ca <__sfvwrite_r+0x192>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	9a02      	ldr	r2, [sp, #8]
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	2340      	movs	r3, #64	; 0x40
 800b4bc:	89a2      	ldrh	r2, [r4, #12]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	e7a5      	b.n	800b410 <__sfvwrite_r+0xd8>
 800b4c4:	0015      	movs	r5, r2
 800b4c6:	9203      	str	r2, [sp, #12]
 800b4c8:	e7cc      	b.n	800b464 <__sfvwrite_r+0x12c>
 800b4ca:	9a05      	ldr	r2, [sp, #20]
 800b4cc:	6921      	ldr	r1, [r4, #16]
 800b4ce:	f7fc f842 	bl	8007556 <memcpy>
 800b4d2:	89a2      	ldrh	r2, [r4, #12]
 800b4d4:	4b44      	ldr	r3, [pc, #272]	; (800b5e8 <__sfvwrite_r+0x2b0>)
 800b4d6:	401a      	ands	r2, r3
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	9b05      	ldr	r3, [sp, #20]
 800b4e0:	6126      	str	r6, [r4, #16]
 800b4e2:	18f6      	adds	r6, r6, r3
 800b4e4:	6026      	str	r6, [r4, #0]
 800b4e6:	002e      	movs	r6, r5
 800b4e8:	6167      	str	r7, [r4, #20]
 800b4ea:	1aff      	subs	r7, r7, r3
 800b4ec:	60a7      	str	r7, [r4, #8]
 800b4ee:	002f      	movs	r7, r5
 800b4f0:	42ae      	cmp	r6, r5
 800b4f2:	d900      	bls.n	800b4f6 <__sfvwrite_r+0x1be>
 800b4f4:	002e      	movs	r6, r5
 800b4f6:	0032      	movs	r2, r6
 800b4f8:	9903      	ldr	r1, [sp, #12]
 800b4fa:	6820      	ldr	r0, [r4, #0]
 800b4fc:	f000 f945 	bl	800b78a <memmove>
 800b500:	68a3      	ldr	r3, [r4, #8]
 800b502:	1b9b      	subs	r3, r3, r6
 800b504:	60a3      	str	r3, [r4, #8]
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	199b      	adds	r3, r3, r6
 800b50a:	6023      	str	r3, [r4, #0]
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	9a04      	ldr	r2, [sp, #16]
 800b510:	19db      	adds	r3, r3, r7
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	1bed      	subs	r5, r5, r7
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	1bdb      	subs	r3, r3, r7
 800b51c:	6093      	str	r3, [r2, #8]
 800b51e:	d1a1      	bne.n	800b464 <__sfvwrite_r+0x12c>
 800b520:	e712      	b.n	800b348 <__sfvwrite_r+0x10>
 800b522:	003a      	movs	r2, r7
 800b524:	9802      	ldr	r0, [sp, #8]
 800b526:	f7fe ff87 	bl	800a438 <_realloc_r>
 800b52a:	1e06      	subs	r6, r0, #0
 800b52c:	d1d7      	bne.n	800b4de <__sfvwrite_r+0x1a6>
 800b52e:	6921      	ldr	r1, [r4, #16]
 800b530:	9802      	ldr	r0, [sp, #8]
 800b532:	f7fc f881 	bl	8007638 <_free_r>
 800b536:	2280      	movs	r2, #128	; 0x80
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	4393      	bics	r3, r2
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	e7b9      	b.n	800b4b4 <__sfvwrite_r+0x17c>
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	4283      	cmp	r3, r0
 800b544:	d302      	bcc.n	800b54c <__sfvwrite_r+0x214>
 800b546:	6967      	ldr	r7, [r4, #20]
 800b548:	42af      	cmp	r7, r5
 800b54a:	d916      	bls.n	800b57a <__sfvwrite_r+0x242>
 800b54c:	42ae      	cmp	r6, r5
 800b54e:	d900      	bls.n	800b552 <__sfvwrite_r+0x21a>
 800b550:	002e      	movs	r6, r5
 800b552:	0032      	movs	r2, r6
 800b554:	9903      	ldr	r1, [sp, #12]
 800b556:	f000 f918 	bl	800b78a <memmove>
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	6822      	ldr	r2, [r4, #0]
 800b55e:	1b9b      	subs	r3, r3, r6
 800b560:	1992      	adds	r2, r2, r6
 800b562:	0037      	movs	r7, r6
 800b564:	60a3      	str	r3, [r4, #8]
 800b566:	6022      	str	r2, [r4, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1cf      	bne.n	800b50c <__sfvwrite_r+0x1d4>
 800b56c:	0021      	movs	r1, r4
 800b56e:	9802      	ldr	r0, [sp, #8]
 800b570:	f7fd ffb6 	bl	80094e0 <_fflush_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d0c9      	beq.n	800b50c <__sfvwrite_r+0x1d4>
 800b578:	e79f      	b.n	800b4ba <__sfvwrite_r+0x182>
 800b57a:	4b1c      	ldr	r3, [pc, #112]	; (800b5ec <__sfvwrite_r+0x2b4>)
 800b57c:	0028      	movs	r0, r5
 800b57e:	429d      	cmp	r5, r3
 800b580:	d900      	bls.n	800b584 <__sfvwrite_r+0x24c>
 800b582:	481b      	ldr	r0, [pc, #108]	; (800b5f0 <__sfvwrite_r+0x2b8>)
 800b584:	0039      	movs	r1, r7
 800b586:	f7f4 fe63 	bl	8000250 <__divsi3>
 800b58a:	003b      	movs	r3, r7
 800b58c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b58e:	4343      	muls	r3, r0
 800b590:	9a03      	ldr	r2, [sp, #12]
 800b592:	69e1      	ldr	r1, [r4, #28]
 800b594:	9802      	ldr	r0, [sp, #8]
 800b596:	47b0      	blx	r6
 800b598:	1e07      	subs	r7, r0, #0
 800b59a:	dcb7      	bgt.n	800b50c <__sfvwrite_r+0x1d4>
 800b59c:	e78d      	b.n	800b4ba <__sfvwrite_r+0x182>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	681e      	ldr	r6, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	e6e6      	b.n	800b37e <__sfvwrite_r+0x46>
 800b5b0:	9a05      	ldr	r2, [sp, #20]
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	dc08      	bgt.n	800b5c8 <__sfvwrite_r+0x290>
 800b5b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b5b8:	0032      	movs	r2, r6
 800b5ba:	69e1      	ldr	r1, [r4, #28]
 800b5bc:	9802      	ldr	r0, [sp, #8]
 800b5be:	47a8      	blx	r5
 800b5c0:	1e05      	subs	r5, r0, #0
 800b5c2:	dd00      	ble.n	800b5c6 <__sfvwrite_r+0x28e>
 800b5c4:	e70a      	b.n	800b3dc <__sfvwrite_r+0xa4>
 800b5c6:	e778      	b.n	800b4ba <__sfvwrite_r+0x182>
 800b5c8:	9a05      	ldr	r2, [sp, #20]
 800b5ca:	0031      	movs	r1, r6
 800b5cc:	f000 f8dd 	bl	800b78a <memmove>
 800b5d0:	9a05      	ldr	r2, [sp, #20]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	0015      	movs	r5, r2
 800b5d6:	1a9b      	subs	r3, r3, r2
 800b5d8:	60a3      	str	r3, [r4, #8]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	e6fc      	b.n	800b3dc <__sfvwrite_r+0xa4>
 800b5e2:	46c0      	nop			; (mov r8, r8)
 800b5e4:	7ffffc00 	.word	0x7ffffc00
 800b5e8:	fffffb7f 	.word	0xfffffb7f
 800b5ec:	7ffffffe 	.word	0x7ffffffe
 800b5f0:	7fffffff 	.word	0x7fffffff

0800b5f4 <__swsetup_r>:
 800b5f4:	4b30      	ldr	r3, [pc, #192]	; (800b6b8 <__swsetup_r+0xc4>)
 800b5f6:	b570      	push	{r4, r5, r6, lr}
 800b5f8:	0005      	movs	r5, r0
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	000c      	movs	r4, r1
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d004      	beq.n	800b60c <__swsetup_r+0x18>
 800b602:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <__swsetup_r+0x18>
 800b608:	f7fb fe48 	bl	800729c <__sinit>
 800b60c:	230c      	movs	r3, #12
 800b60e:	5ee2      	ldrsh	r2, [r4, r3]
 800b610:	b293      	uxth	r3, r2
 800b612:	0711      	lsls	r1, r2, #28
 800b614:	d423      	bmi.n	800b65e <__swsetup_r+0x6a>
 800b616:	06d9      	lsls	r1, r3, #27
 800b618:	d407      	bmi.n	800b62a <__swsetup_r+0x36>
 800b61a:	2309      	movs	r3, #9
 800b61c:	2001      	movs	r0, #1
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	3337      	adds	r3, #55	; 0x37
 800b622:	4313      	orrs	r3, r2
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	4240      	negs	r0, r0
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	075b      	lsls	r3, r3, #29
 800b62c:	d513      	bpl.n	800b656 <__swsetup_r+0x62>
 800b62e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b630:	2900      	cmp	r1, #0
 800b632:	d008      	beq.n	800b646 <__swsetup_r+0x52>
 800b634:	0023      	movs	r3, r4
 800b636:	3340      	adds	r3, #64	; 0x40
 800b638:	4299      	cmp	r1, r3
 800b63a:	d002      	beq.n	800b642 <__swsetup_r+0x4e>
 800b63c:	0028      	movs	r0, r5
 800b63e:	f7fb fffb 	bl	8007638 <_free_r>
 800b642:	2300      	movs	r3, #0
 800b644:	6323      	str	r3, [r4, #48]	; 0x30
 800b646:	2224      	movs	r2, #36	; 0x24
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	4393      	bics	r3, r2
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	2300      	movs	r3, #0
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	2308      	movs	r3, #8
 800b658:	89a2      	ldrh	r2, [r4, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	81a3      	strh	r3, [r4, #12]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10b      	bne.n	800b67c <__swsetup_r+0x88>
 800b664:	21a0      	movs	r1, #160	; 0xa0
 800b666:	2280      	movs	r2, #128	; 0x80
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	0089      	lsls	r1, r1, #2
 800b66c:	0092      	lsls	r2, r2, #2
 800b66e:	400b      	ands	r3, r1
 800b670:	4293      	cmp	r3, r2
 800b672:	d003      	beq.n	800b67c <__swsetup_r+0x88>
 800b674:	0021      	movs	r1, r4
 800b676:	0028      	movs	r0, r5
 800b678:	f000 f8e8 	bl	800b84c <__smakebuf_r>
 800b67c:	220c      	movs	r2, #12
 800b67e:	5ea3      	ldrsh	r3, [r4, r2]
 800b680:	2001      	movs	r0, #1
 800b682:	001a      	movs	r2, r3
 800b684:	b299      	uxth	r1, r3
 800b686:	4002      	ands	r2, r0
 800b688:	4203      	tst	r3, r0
 800b68a:	d00f      	beq.n	800b6ac <__swsetup_r+0xb8>
 800b68c:	2200      	movs	r2, #0
 800b68e:	60a2      	str	r2, [r4, #8]
 800b690:	6962      	ldr	r2, [r4, #20]
 800b692:	4252      	negs	r2, r2
 800b694:	61a2      	str	r2, [r4, #24]
 800b696:	2000      	movs	r0, #0
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	4282      	cmp	r2, r0
 800b69c:	d1c4      	bne.n	800b628 <__swsetup_r+0x34>
 800b69e:	0609      	lsls	r1, r1, #24
 800b6a0:	d5c2      	bpl.n	800b628 <__swsetup_r+0x34>
 800b6a2:	2240      	movs	r2, #64	; 0x40
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	3801      	subs	r0, #1
 800b6aa:	e7bd      	b.n	800b628 <__swsetup_r+0x34>
 800b6ac:	0788      	lsls	r0, r1, #30
 800b6ae:	d400      	bmi.n	800b6b2 <__swsetup_r+0xbe>
 800b6b0:	6962      	ldr	r2, [r4, #20]
 800b6b2:	60a2      	str	r2, [r4, #8]
 800b6b4:	e7ef      	b.n	800b696 <__swsetup_r+0xa2>
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	200006b8 	.word	0x200006b8

0800b6bc <__fputwc>:
 800b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	000e      	movs	r6, r1
 800b6c2:	0015      	movs	r5, r2
 800b6c4:	9001      	str	r0, [sp, #4]
 800b6c6:	f7fb fea5 	bl	8007414 <__locale_mb_cur_max>
 800b6ca:	0004      	movs	r4, r0
 800b6cc:	2801      	cmp	r0, #1
 800b6ce:	d119      	bne.n	800b704 <__fputwc+0x48>
 800b6d0:	1e73      	subs	r3, r6, #1
 800b6d2:	2bfe      	cmp	r3, #254	; 0xfe
 800b6d4:	d816      	bhi.n	800b704 <__fputwc+0x48>
 800b6d6:	ab02      	add	r3, sp, #8
 800b6d8:	711e      	strb	r6, [r3, #4]
 800b6da:	2700      	movs	r7, #0
 800b6dc:	42a7      	cmp	r7, r4
 800b6de:	d020      	beq.n	800b722 <__fputwc+0x66>
 800b6e0:	ab03      	add	r3, sp, #12
 800b6e2:	5dd9      	ldrb	r1, [r3, r7]
 800b6e4:	68ab      	ldr	r3, [r5, #8]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60ab      	str	r3, [r5, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	da04      	bge.n	800b6f8 <__fputwc+0x3c>
 800b6ee:	69aa      	ldr	r2, [r5, #24]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	db19      	blt.n	800b728 <__fputwc+0x6c>
 800b6f4:	290a      	cmp	r1, #10
 800b6f6:	d017      	beq.n	800b728 <__fputwc+0x6c>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	602a      	str	r2, [r5, #0]
 800b6fe:	7019      	strb	r1, [r3, #0]
 800b700:	3701      	adds	r7, #1
 800b702:	e7eb      	b.n	800b6dc <__fputwc+0x20>
 800b704:	002b      	movs	r3, r5
 800b706:	0032      	movs	r2, r6
 800b708:	9801      	ldr	r0, [sp, #4]
 800b70a:	335c      	adds	r3, #92	; 0x5c
 800b70c:	a903      	add	r1, sp, #12
 800b70e:	f000 f857 	bl	800b7c0 <_wcrtomb_r>
 800b712:	0004      	movs	r4, r0
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d1e0      	bne.n	800b6da <__fputwc+0x1e>
 800b718:	2340      	movs	r3, #64	; 0x40
 800b71a:	0006      	movs	r6, r0
 800b71c:	89aa      	ldrh	r2, [r5, #12]
 800b71e:	4313      	orrs	r3, r2
 800b720:	81ab      	strh	r3, [r5, #12]
 800b722:	0030      	movs	r0, r6
 800b724:	b005      	add	sp, #20
 800b726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b728:	002a      	movs	r2, r5
 800b72a:	9801      	ldr	r0, [sp, #4]
 800b72c:	f000 f8cc 	bl	800b8c8 <__swbuf_r>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d1e5      	bne.n	800b700 <__fputwc+0x44>
 800b734:	0006      	movs	r6, r0
 800b736:	e7f4      	b.n	800b722 <__fputwc+0x66>

0800b738 <_fputwc_r>:
 800b738:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b73a:	b570      	push	{r4, r5, r6, lr}
 800b73c:	0005      	movs	r5, r0
 800b73e:	000e      	movs	r6, r1
 800b740:	0014      	movs	r4, r2
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d405      	bmi.n	800b752 <_fputwc_r+0x1a>
 800b746:	8993      	ldrh	r3, [r2, #12]
 800b748:	059b      	lsls	r3, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_fputwc_r+0x1a>
 800b74c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800b74e:	f7fb fef5 	bl	800753c <__retarget_lock_acquire_recursive>
 800b752:	230c      	movs	r3, #12
 800b754:	5ee2      	ldrsh	r2, [r4, r3]
 800b756:	2380      	movs	r3, #128	; 0x80
 800b758:	019b      	lsls	r3, r3, #6
 800b75a:	421a      	tst	r2, r3
 800b75c:	d104      	bne.n	800b768 <_fputwc_r+0x30>
 800b75e:	431a      	orrs	r2, r3
 800b760:	81a2      	strh	r2, [r4, #12]
 800b762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b764:	4313      	orrs	r3, r2
 800b766:	6663      	str	r3, [r4, #100]	; 0x64
 800b768:	0028      	movs	r0, r5
 800b76a:	0022      	movs	r2, r4
 800b76c:	0031      	movs	r1, r6
 800b76e:	f7ff ffa5 	bl	800b6bc <__fputwc>
 800b772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b774:	0005      	movs	r5, r0
 800b776:	07db      	lsls	r3, r3, #31
 800b778:	d405      	bmi.n	800b786 <_fputwc_r+0x4e>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	059b      	lsls	r3, r3, #22
 800b77e:	d402      	bmi.n	800b786 <_fputwc_r+0x4e>
 800b780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b782:	f7fb fedc 	bl	800753e <__retarget_lock_release_recursive>
 800b786:	0028      	movs	r0, r5
 800b788:	bd70      	pop	{r4, r5, r6, pc}

0800b78a <memmove>:
 800b78a:	b510      	push	{r4, lr}
 800b78c:	4288      	cmp	r0, r1
 800b78e:	d902      	bls.n	800b796 <memmove+0xc>
 800b790:	188b      	adds	r3, r1, r2
 800b792:	4298      	cmp	r0, r3
 800b794:	d303      	bcc.n	800b79e <memmove+0x14>
 800b796:	2300      	movs	r3, #0
 800b798:	e007      	b.n	800b7aa <memmove+0x20>
 800b79a:	5c8b      	ldrb	r3, [r1, r2]
 800b79c:	5483      	strb	r3, [r0, r2]
 800b79e:	3a01      	subs	r2, #1
 800b7a0:	d2fb      	bcs.n	800b79a <memmove+0x10>
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	5ccc      	ldrb	r4, [r1, r3]
 800b7a6:	54c4      	strb	r4, [r0, r3]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d1fa      	bne.n	800b7a4 <memmove+0x1a>
 800b7ae:	e7f8      	b.n	800b7a2 <memmove+0x18>

0800b7b0 <abort>:
 800b7b0:	2006      	movs	r0, #6
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	f000 f906 	bl	800b9c4 <raise>
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f7f7 fd11 	bl	80031e0 <_exit>
	...

0800b7c0 <_wcrtomb_r>:
 800b7c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b7c2:	001d      	movs	r5, r3
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <_wcrtomb_r+0x2c>)
 800b7c6:	0004      	movs	r4, r0
 800b7c8:	33e0      	adds	r3, #224	; 0xe0
 800b7ca:	681e      	ldr	r6, [r3, #0]
 800b7cc:	002b      	movs	r3, r5
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d101      	bne.n	800b7d6 <_wcrtomb_r+0x16>
 800b7d2:	000a      	movs	r2, r1
 800b7d4:	a901      	add	r1, sp, #4
 800b7d6:	0020      	movs	r0, r4
 800b7d8:	47b0      	blx	r6
 800b7da:	1c43      	adds	r3, r0, #1
 800b7dc:	d103      	bne.n	800b7e6 <_wcrtomb_r+0x26>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	338a      	adds	r3, #138	; 0x8a
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	b004      	add	sp, #16
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	2000042c 	.word	0x2000042c

0800b7f0 <__swhatbuf_r>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	000e      	movs	r6, r1
 800b7f4:	001d      	movs	r5, r3
 800b7f6:	230e      	movs	r3, #14
 800b7f8:	5ec9      	ldrsh	r1, [r1, r3]
 800b7fa:	0014      	movs	r4, r2
 800b7fc:	b096      	sub	sp, #88	; 0x58
 800b7fe:	2900      	cmp	r1, #0
 800b800:	da09      	bge.n	800b816 <__swhatbuf_r+0x26>
 800b802:	89b2      	ldrh	r2, [r6, #12]
 800b804:	2380      	movs	r3, #128	; 0x80
 800b806:	0011      	movs	r1, r2
 800b808:	4019      	ands	r1, r3
 800b80a:	421a      	tst	r2, r3
 800b80c:	d018      	beq.n	800b840 <__swhatbuf_r+0x50>
 800b80e:	2100      	movs	r1, #0
 800b810:	3b40      	subs	r3, #64	; 0x40
 800b812:	0008      	movs	r0, r1
 800b814:	e010      	b.n	800b838 <__swhatbuf_r+0x48>
 800b816:	466a      	mov	r2, sp
 800b818:	f000 f8de 	bl	800b9d8 <_fstat_r>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	dbf0      	blt.n	800b802 <__swhatbuf_r+0x12>
 800b820:	23f0      	movs	r3, #240	; 0xf0
 800b822:	9901      	ldr	r1, [sp, #4]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	4019      	ands	r1, r3
 800b828:	4b07      	ldr	r3, [pc, #28]	; (800b848 <__swhatbuf_r+0x58>)
 800b82a:	2080      	movs	r0, #128	; 0x80
 800b82c:	18c9      	adds	r1, r1, r3
 800b82e:	424b      	negs	r3, r1
 800b830:	4159      	adcs	r1, r3
 800b832:	2380      	movs	r3, #128	; 0x80
 800b834:	0100      	lsls	r0, r0, #4
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	6029      	str	r1, [r5, #0]
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	b016      	add	sp, #88	; 0x58
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	2380      	movs	r3, #128	; 0x80
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	e7e5      	b.n	800b812 <__swhatbuf_r+0x22>
 800b846:	46c0      	nop			; (mov r8, r8)
 800b848:	ffffe000 	.word	0xffffe000

0800b84c <__smakebuf_r>:
 800b84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b84e:	2602      	movs	r6, #2
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	0005      	movs	r5, r0
 800b854:	000c      	movs	r4, r1
 800b856:	4233      	tst	r3, r6
 800b858:	d006      	beq.n	800b868 <__smakebuf_r+0x1c>
 800b85a:	0023      	movs	r3, r4
 800b85c:	3343      	adds	r3, #67	; 0x43
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	2301      	movs	r3, #1
 800b864:	6163      	str	r3, [r4, #20]
 800b866:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b868:	466a      	mov	r2, sp
 800b86a:	ab01      	add	r3, sp, #4
 800b86c:	f7ff ffc0 	bl	800b7f0 <__swhatbuf_r>
 800b870:	9900      	ldr	r1, [sp, #0]
 800b872:	0007      	movs	r7, r0
 800b874:	0028      	movs	r0, r5
 800b876:	f7fb fa5d 	bl	8006d34 <_malloc_r>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d108      	bne.n	800b890 <__smakebuf_r+0x44>
 800b87e:	220c      	movs	r2, #12
 800b880:	5ea3      	ldrsh	r3, [r4, r2]
 800b882:	059a      	lsls	r2, r3, #22
 800b884:	d4ef      	bmi.n	800b866 <__smakebuf_r+0x1a>
 800b886:	2203      	movs	r2, #3
 800b888:	4393      	bics	r3, r2
 800b88a:	431e      	orrs	r6, r3
 800b88c:	81a6      	strh	r6, [r4, #12]
 800b88e:	e7e4      	b.n	800b85a <__smakebuf_r+0xe>
 800b890:	2380      	movs	r3, #128	; 0x80
 800b892:	89a2      	ldrh	r2, [r4, #12]
 800b894:	6020      	str	r0, [r4, #0]
 800b896:	4313      	orrs	r3, r2
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	9b00      	ldr	r3, [sp, #0]
 800b89c:	6120      	str	r0, [r4, #16]
 800b89e:	6163      	str	r3, [r4, #20]
 800b8a0:	9b01      	ldr	r3, [sp, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00c      	beq.n	800b8c0 <__smakebuf_r+0x74>
 800b8a6:	0028      	movs	r0, r5
 800b8a8:	230e      	movs	r3, #14
 800b8aa:	5ee1      	ldrsh	r1, [r4, r3]
 800b8ac:	f000 f8a6 	bl	800b9fc <_isatty_r>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d005      	beq.n	800b8c0 <__smakebuf_r+0x74>
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	89a2      	ldrh	r2, [r4, #12]
 800b8b8:	439a      	bics	r2, r3
 800b8ba:	3b02      	subs	r3, #2
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	81a3      	strh	r3, [r4, #12]
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	433b      	orrs	r3, r7
 800b8c4:	81a3      	strh	r3, [r4, #12]
 800b8c6:	e7ce      	b.n	800b866 <__smakebuf_r+0x1a>

0800b8c8 <__swbuf_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	0006      	movs	r6, r0
 800b8cc:	000d      	movs	r5, r1
 800b8ce:	0014      	movs	r4, r2
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d004      	beq.n	800b8de <__swbuf_r+0x16>
 800b8d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <__swbuf_r+0x16>
 800b8da:	f7fb fcdf 	bl	800729c <__sinit>
 800b8de:	69a3      	ldr	r3, [r4, #24]
 800b8e0:	60a3      	str	r3, [r4, #8]
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	071b      	lsls	r3, r3, #28
 800b8e6:	d52e      	bpl.n	800b946 <__swbuf_r+0x7e>
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d02b      	beq.n	800b946 <__swbuf_r+0x7e>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	5ee2      	ldrsh	r2, [r4, r3]
 800b8f2:	2380      	movs	r3, #128	; 0x80
 800b8f4:	019b      	lsls	r3, r3, #6
 800b8f6:	b2ef      	uxtb	r7, r5
 800b8f8:	b2ed      	uxtb	r5, r5
 800b8fa:	421a      	tst	r2, r3
 800b8fc:	d02c      	beq.n	800b958 <__swbuf_r+0x90>
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	1ac0      	subs	r0, r0, r3
 800b904:	6963      	ldr	r3, [r4, #20]
 800b906:	4283      	cmp	r3, r0
 800b908:	dc05      	bgt.n	800b916 <__swbuf_r+0x4e>
 800b90a:	0021      	movs	r1, r4
 800b90c:	0030      	movs	r0, r6
 800b90e:	f7fd fde7 	bl	80094e0 <_fflush_r>
 800b912:	2800      	cmp	r0, #0
 800b914:	d11d      	bne.n	800b952 <__swbuf_r+0x8a>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	3001      	adds	r0, #1
 800b91a:	3b01      	subs	r3, #1
 800b91c:	60a3      	str	r3, [r4, #8]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	701f      	strb	r7, [r3, #0]
 800b926:	6963      	ldr	r3, [r4, #20]
 800b928:	4283      	cmp	r3, r0
 800b92a:	d004      	beq.n	800b936 <__swbuf_r+0x6e>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	07db      	lsls	r3, r3, #31
 800b930:	d507      	bpl.n	800b942 <__swbuf_r+0x7a>
 800b932:	2d0a      	cmp	r5, #10
 800b934:	d105      	bne.n	800b942 <__swbuf_r+0x7a>
 800b936:	0021      	movs	r1, r4
 800b938:	0030      	movs	r0, r6
 800b93a:	f7fd fdd1 	bl	80094e0 <_fflush_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d107      	bne.n	800b952 <__swbuf_r+0x8a>
 800b942:	0028      	movs	r0, r5
 800b944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b946:	0021      	movs	r1, r4
 800b948:	0030      	movs	r0, r6
 800b94a:	f7ff fe53 	bl	800b5f4 <__swsetup_r>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d0cd      	beq.n	800b8ee <__swbuf_r+0x26>
 800b952:	2501      	movs	r5, #1
 800b954:	426d      	negs	r5, r5
 800b956:	e7f4      	b.n	800b942 <__swbuf_r+0x7a>
 800b958:	4313      	orrs	r3, r2
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	4a02      	ldr	r2, [pc, #8]	; (800b968 <__swbuf_r+0xa0>)
 800b95e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b960:	4013      	ands	r3, r2
 800b962:	6663      	str	r3, [r4, #100]	; 0x64
 800b964:	e7cb      	b.n	800b8fe <__swbuf_r+0x36>
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	ffffdfff 	.word	0xffffdfff

0800b96c <_raise_r>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	0004      	movs	r4, r0
 800b970:	000d      	movs	r5, r1
 800b972:	291f      	cmp	r1, #31
 800b974:	d904      	bls.n	800b980 <_raise_r+0x14>
 800b976:	2316      	movs	r3, #22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	2001      	movs	r0, #1
 800b97c:	4240      	negs	r0, r0
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	0003      	movs	r3, r0
 800b982:	33fc      	adds	r3, #252	; 0xfc
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <_raise_r+0x28>
 800b98a:	008a      	lsls	r2, r1, #2
 800b98c:	189b      	adds	r3, r3, r2
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	2a00      	cmp	r2, #0
 800b992:	d108      	bne.n	800b9a6 <_raise_r+0x3a>
 800b994:	0020      	movs	r0, r4
 800b996:	f000 f855 	bl	800ba44 <_getpid_r>
 800b99a:	002a      	movs	r2, r5
 800b99c:	0001      	movs	r1, r0
 800b99e:	0020      	movs	r0, r4
 800b9a0:	f000 f83e 	bl	800ba20 <_kill_r>
 800b9a4:	e7eb      	b.n	800b97e <_raise_r+0x12>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	2a01      	cmp	r2, #1
 800b9aa:	d0e8      	beq.n	800b97e <_raise_r+0x12>
 800b9ac:	1c51      	adds	r1, r2, #1
 800b9ae:	d103      	bne.n	800b9b8 <_raise_r+0x4c>
 800b9b0:	2316      	movs	r3, #22
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	e7e2      	b.n	800b97e <_raise_r+0x12>
 800b9b8:	2400      	movs	r4, #0
 800b9ba:	0028      	movs	r0, r5
 800b9bc:	601c      	str	r4, [r3, #0]
 800b9be:	4790      	blx	r2
 800b9c0:	0020      	movs	r0, r4
 800b9c2:	e7dc      	b.n	800b97e <_raise_r+0x12>

0800b9c4 <raise>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	4b03      	ldr	r3, [pc, #12]	; (800b9d4 <raise+0x10>)
 800b9c8:	0001      	movs	r1, r0
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	f7ff ffce 	bl	800b96c <_raise_r>
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	200006b8 	.word	0x200006b8

0800b9d8 <_fstat_r>:
 800b9d8:	2300      	movs	r3, #0
 800b9da:	b570      	push	{r4, r5, r6, lr}
 800b9dc:	4d06      	ldr	r5, [pc, #24]	; (800b9f8 <_fstat_r+0x20>)
 800b9de:	0004      	movs	r4, r0
 800b9e0:	0008      	movs	r0, r1
 800b9e2:	0011      	movs	r1, r2
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	f7f7 fc4a 	bl	800327e <_fstat>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d103      	bne.n	800b9f6 <_fstat_r+0x1e>
 800b9ee:	682b      	ldr	r3, [r5, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d000      	beq.n	800b9f6 <_fstat_r+0x1e>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	20000bac 	.word	0x20000bac

0800b9fc <_isatty_r>:
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	b570      	push	{r4, r5, r6, lr}
 800ba00:	4d06      	ldr	r5, [pc, #24]	; (800ba1c <_isatty_r+0x20>)
 800ba02:	0004      	movs	r4, r0
 800ba04:	0008      	movs	r0, r1
 800ba06:	602b      	str	r3, [r5, #0]
 800ba08:	f7f7 fc47 	bl	800329a <_isatty>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d103      	bne.n	800ba18 <_isatty_r+0x1c>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d000      	beq.n	800ba18 <_isatty_r+0x1c>
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	bd70      	pop	{r4, r5, r6, pc}
 800ba1a:	46c0      	nop			; (mov r8, r8)
 800ba1c:	20000bac 	.word	0x20000bac

0800ba20 <_kill_r>:
 800ba20:	2300      	movs	r3, #0
 800ba22:	b570      	push	{r4, r5, r6, lr}
 800ba24:	4d06      	ldr	r5, [pc, #24]	; (800ba40 <_kill_r+0x20>)
 800ba26:	0004      	movs	r4, r0
 800ba28:	0008      	movs	r0, r1
 800ba2a:	0011      	movs	r1, r2
 800ba2c:	602b      	str	r3, [r5, #0]
 800ba2e:	f7f7 fbc7 	bl	80031c0 <_kill>
 800ba32:	1c43      	adds	r3, r0, #1
 800ba34:	d103      	bne.n	800ba3e <_kill_r+0x1e>
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d000      	beq.n	800ba3e <_kill_r+0x1e>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}
 800ba40:	20000bac 	.word	0x20000bac

0800ba44 <_getpid_r>:
 800ba44:	b510      	push	{r4, lr}
 800ba46:	f7f7 fbb5 	bl	80031b4 <_getpid>
 800ba4a:	bd10      	pop	{r4, pc}

0800ba4c <_init>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba52:	bc08      	pop	{r3}
 800ba54:	469e      	mov	lr, r3
 800ba56:	4770      	bx	lr

0800ba58 <_fini>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	46c0      	nop			; (mov r8, r8)
 800ba5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5e:	bc08      	pop	{r3}
 800ba60:	469e      	mov	lr, r3
 800ba62:	4770      	bx	lr
