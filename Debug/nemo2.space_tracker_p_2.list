
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f64  08012278  08012278  00022278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141dc  080141dc  000306d0  2**0
                  CONTENTS
  4 .ARM          00000008  080141dc  080141dc  000241dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141e4  080141e4  000306d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080141e4  080141e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141ec  080141ec  000241ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d0  20000000  080141f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200006d0  080148c0  000306d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  080148c0  00030f08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197fe  00000000  00000000  0003073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a9  00000000  00000000  00049f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0004d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ce  00000000  00000000  0004f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217b0  00000000  00000000  000503be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4b2  00000000  00000000  00071b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad43  00000000  00000000  00090020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071b4  00000000  00000000  0015ad64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00161f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d0 	.word	0x200006d0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801225c 	.word	0x0801225c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006d4 	.word	0x200006d4
 8000100:	0801225c 	.word	0x0801225c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08013c74 	.word	0x08013c74
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 fa43 	bl	8003a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f951 	bl	8002858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fbe3 	bl	8002d80 <MX_GPIO_Init>
  MX_RTC_Init();
 80025ba:	f000 f9a3 	bl	8002904 <MX_RTC_Init>
  MX_TIM6_Init();
 80025be:	f000 fa83 	bl	8002ac8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c2:	f000 fa43 	bl	8002a4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c6:	f000 fabd 	bl	8002b44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ca:	f000 fb09 	bl	8002be0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025ce:	f000 fb55 	bl	8002c7c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d2:	f000 fba1 	bl	8002d18 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025d6:	4b92      	ldr	r3, [pc, #584]	; (8002820 <main+0x278>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fcd4 	bl	8002f88 <send_debug_logs>

  my_tim_init () ;
 80025e0:	f000 fe26 	bl	8003230 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 80025e4:	2002      	movs	r0, #2
 80025e6:	f000 fd1b 	bl	8003020 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  while ( !is_system_initialized () )
 80025ea:	e017      	b.n	800261c <main+0x74>
  {
	  my_gnss_sw_on () ;
 80025ec:	f000 fd4a 	bl	8003084 <my_gnss_sw_on>
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80025f0:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <main+0x27c>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f006 fd86 	bl	8009104 <my_gnss_acq_coordinates>
	  my_gnss_sw_off () ;
 80025f8:	f000 fd5e 	bl	80030b8 <my_gnss_sw_off>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80025fc:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <main+0x280>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f006 fefa 	bl	80093f8 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002604:	4a89      	ldr	r2, [pc, #548]	; (800282c <main+0x284>)
 8002606:	498a      	ldr	r1, [pc, #552]	; (8002830 <main+0x288>)
 8002608:	488a      	ldr	r0, [pc, #552]	; (8002834 <main+0x28c>)
 800260a:	4b87      	ldr	r3, [pc, #540]	; (8002828 <main+0x280>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	23a6      	movs	r3, #166	; 0xa6
 8002610:	f009 f80c 	bl	800b62c <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002614:	4b87      	ldr	r3, [pc, #540]	; (8002834 <main+0x28c>)
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fcb6 	bl	8002f88 <send_debug_logs>
  while ( !is_system_initialized () )
 800261c:	f000 fce4 	bl	8002fe8 <is_system_initialized>
 8002620:	0003      	movs	r3, r0
 8002622:	001a      	movs	r2, r3
 8002624:	2301      	movs	r3, #1
 8002626:	4053      	eors	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1de      	bne.n	80025ec <main+0x44>
  }
  if ( !my_astro_init () )
 800262e:	f006 fcc3 	bl	8008fb8 <my_astro_init>
 8002632:	0003      	movs	r3, r0
 8002634:	001a      	movs	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	4053      	eors	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <main+0xb6>
  {
	  HAL_NVIC_SystemReset () ;
 8002640:	f001 fbb9 	bl	8003db6 <HAL_NVIC_SystemReset>
 8002644:	e075      	b.n	8002732 <main+0x18a>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002646:	4a79      	ldr	r2, [pc, #484]	; (800282c <main+0x284>)
 8002648:	497b      	ldr	r1, [pc, #492]	; (8002838 <main+0x290>)
 800264a:	487a      	ldr	r0, [pc, #488]	; (8002834 <main+0x28c>)
 800264c:	23b1      	movs	r3, #177	; 0xb1
 800264e:	f008 ffed 	bl	800b62c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002652:	4b78      	ldr	r3, [pc, #480]	; (8002834 <main+0x28c>)
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fc97 	bl	8002f88 <send_debug_logs>
		  my_astro_handle_evt () ;
 800265a:	f006 fd0d 	bl	8009078 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800265e:	f000 fdd5 	bl	800320c <my_astro_evt_pin>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d1ef      	bne.n	8002646 <main+0x9e>
	  }
	  sprintf ( my_astro_payload , "%u,fv=%s" , (uint16_t) fix3d.pdop , fv ) ;
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <main+0x27c>)
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0010      	movs	r0, r2
 800266e:	0019      	movs	r1, r3
 8002670:	f7fd ff66 	bl	8000540 <__aeabi_d2uiz>
 8002674:	0003      	movs	r3, r0
 8002676:	b29b      	uxth	r3, r3
 8002678:	001a      	movs	r2, r3
 800267a:	4b70      	ldr	r3, [pc, #448]	; (800283c <main+0x294>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4970      	ldr	r1, [pc, #448]	; (8002840 <main+0x298>)
 8002680:	4870      	ldr	r0, [pc, #448]	; (8002844 <main+0x29c>)
 8002682:	f008 ffd3 	bl	800b62c <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload_id,payload,%u %s" , __FILE__ , __LINE__ , my_astro_payload_id , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <main+0x2a0>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	001c      	movs	r4, r3
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <main+0x284>)
 800268e:	496f      	ldr	r1, [pc, #444]	; (800284c <main+0x2a4>)
 8002690:	4868      	ldr	r0, [pc, #416]	; (8002834 <main+0x28c>)
 8002692:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <main+0x29c>)
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	9400      	str	r4, [sp, #0]
 8002698:	23b6      	movs	r3, #182	; 0xb6
 800269a:	f008 ffc7 	bl	800b62c <sprintf>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <main+0x27c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b60      	ldr	r3, [pc, #384]	; (8002824 <main+0x27c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0019      	movs	r1, r3
 80026a8:	0010      	movs	r0, r2
 80026aa:	f006 fd1b 	bl	80090e4 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <main+0x2a0>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	b291      	uxth	r1, r2
 80026b6:	4a64      	ldr	r2, [pc, #400]	; (8002848 <main+0x2a0>)
 80026b8:	8011      	strh	r1, [r2, #0]
 80026ba:	4a62      	ldr	r2, [pc, #392]	; (8002844 <main+0x29c>)
 80026bc:	0011      	movs	r1, r2
 80026be:	0018      	movs	r0, r3
 80026c0:	f006 fcb2 	bl	8009028 <my_astro_add_payload_2_queue>
	  send_debug_logs ( dbg_payload ) ;
 80026c4:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <main+0x28c>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fc5e 	bl	8002f88 <send_debug_logs>
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 80026cc:	23e1      	movs	r3, #225	; 0xe1
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	0018      	movs	r0, r3
 80026d2:	f006 fed3 	bl	800947c <my_rtc_set_alarm>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d02b      	beq.n	8002732 <main+0x18a>
	  {
		  my_tim_stop () ;
 80026da:	f000 fdc5 	bl	8003268 <my_tim_stop>
		  HAL_SuspendTick () ;
 80026de:	f001 fa55 	bl	8003b8c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80026e2:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <main+0x2a8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	2102      	movs	r1, #2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f001 fdfe 	bl	80042f0 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80026f4:	f001 fa58 	bl	8003ba8 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026f8:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <main+0x280>)
 80026fa:	0018      	movs	r0, r3
 80026fc:	f006 fe7c 	bl	80093f8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002700:	4a4a      	ldr	r2, [pc, #296]	; (800282c <main+0x284>)
 8002702:	494b      	ldr	r1, [pc, #300]	; (8002830 <main+0x288>)
 8002704:	484b      	ldr	r0, [pc, #300]	; (8002834 <main+0x28c>)
 8002706:	4b48      	ldr	r3, [pc, #288]	; (8002828 <main+0x280>)
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	23c2      	movs	r3, #194	; 0xc2
 800270c:	f008 ff8e 	bl	800b62c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002710:	4b48      	ldr	r3, [pc, #288]	; (8002834 <main+0x28c>)
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fc38 	bl	8002f88 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002718:	e00b      	b.n	8002732 <main+0x18a>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 800271a:	4a44      	ldr	r2, [pc, #272]	; (800282c <main+0x284>)
 800271c:	4946      	ldr	r1, [pc, #280]	; (8002838 <main+0x290>)
 800271e:	4845      	ldr	r0, [pc, #276]	; (8002834 <main+0x28c>)
 8002720:	23cf      	movs	r3, #207	; 0xcf
 8002722:	f008 ff83 	bl	800b62c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <main+0x28c>)
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fc2d 	bl	8002f88 <send_debug_logs>
		  my_astro_handle_evt () ;
 800272e:	f006 fca3 	bl	8009078 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002732:	f000 fd6b 	bl	800320c <my_astro_evt_pin>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d1ef      	bne.n	800271a <main+0x172>
	  }
	  if ( my_rtc_alarm_flag )
 800273a:	4b45      	ldr	r3, [pc, #276]	; (8002850 <main+0x2a8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d046      	beq.n	80027d0 <main+0x228>
	  {
		  my_rtc_alarm_flag = false ;
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <main+0x2a8>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002748:	f000 fc9c 	bl	8003084 <my_gnss_sw_on>
		  my_gnss_acq_coordinates ( &fix3d ) ;
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <main+0x27c>)
 800274e:	0018      	movs	r0, r3
 8002750:	f006 fcd8 	bl	8009104 <my_gnss_acq_coordinates>
		  my_gnss_sw_off () ;
 8002754:	f000 fcb0 	bl	80030b8 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <main+0x280>)
 800275a:	0018      	movs	r0, r3
 800275c:	f006 fe4c 	bl	80093f8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002760:	4a32      	ldr	r2, [pc, #200]	; (800282c <main+0x284>)
 8002762:	4933      	ldr	r1, [pc, #204]	; (8002830 <main+0x288>)
 8002764:	4833      	ldr	r0, [pc, #204]	; (8002834 <main+0x28c>)
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <main+0x280>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	23da      	movs	r3, #218	; 0xda
 800276c:	f008 ff5e 	bl	800b62c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <main+0x28c>)
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fc08 	bl	8002f88 <send_debug_logs>
		  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <main+0x27c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <main+0x27c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	0019      	movs	r1, r3
 8002782:	0010      	movs	r0, r2
 8002784:	f006 fcae 	bl	80090e4 <my_astro_write_coordinates>
		  sprintf ( my_astro_payload , "%u,%ld,%ld" , (uint16_t) fix3d.pdop , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <main+0x27c>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	0010      	movs	r0, r2
 8002790:	0019      	movs	r1, r3
 8002792:	f7fd fed5 	bl	8000540 <__aeabi_d2uiz>
 8002796:	0003      	movs	r3, r0
 8002798:	b29b      	uxth	r3, r3
 800279a:	001c      	movs	r4, r3
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <main+0x27c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <main+0x27c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	492b      	ldr	r1, [pc, #172]	; (8002854 <main+0x2ac>)
 80027a6:	4827      	ldr	r0, [pc, #156]	; (8002844 <main+0x29c>)
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	0013      	movs	r3, r2
 80027ac:	0022      	movs	r2, r4
 80027ae:	f008 ff3d 	bl	800b62c <sprintf>
		  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <main+0x2a0>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	b291      	uxth	r1, r2
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <main+0x2a0>)
 80027bc:	8011      	strh	r1, [r2, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <main+0x29c>)
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f006 fc30 	bl	8009028 <my_astro_add_payload_2_queue>
		  send_debug_logs ( dbg_payload ) ;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <main+0x28c>)
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 fbdc 	bl	8002f88 <send_debug_logs>
	  }
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 80027d0:	23e1      	movs	r3, #225	; 0xe1
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	0018      	movs	r0, r3
 80027d6:	f006 fe51 	bl	800947c <my_rtc_set_alarm>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d0a9      	beq.n	8002732 <main+0x18a>
	  {
		  my_tim_stop () ;
 80027de:	f000 fd43 	bl	8003268 <my_tim_stop>
		  HAL_SuspendTick () ;
 80027e2:	f001 f9d3 	bl	8003b8c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <main+0x2a8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	01db      	lsls	r3, r3, #7
 80027f0:	2102      	movs	r1, #2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 fd7c 	bl	80042f0 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80027f8:	f001 f9d6 	bl	8003ba8 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <main+0x280>)
 80027fe:	0018      	movs	r0, r3
 8002800:	f006 fdfa 	bl	80093f8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <main+0x284>)
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <main+0x288>)
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <main+0x28c>)
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <main+0x280>)
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	23e9      	movs	r3, #233	; 0xe9
 8002810:	f008 ff0c 	bl	800b62c <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <main+0x28c>)
 8002816:	0018      	movs	r0, r3
 8002818:	f000 fbb6 	bl	8002f88 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 800281c:	e789      	b.n	8002732 <main+0x18a>
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000000 	.word	0x20000000
 8002824:	20000bd0 	.word	0x20000bd0
 8002828:	20000b14 	.word	0x20000b14
 800282c:	080122a0 	.word	0x080122a0
 8002830:	080122b4 	.word	0x080122b4
 8002834:	20000a18 	.word	0x20000a18
 8002838:	080122c0 	.word	0x080122c0
 800283c:	20000004 	.word	0x20000004
 8002840:	080122d8 	.word	0x080122d8
 8002844:	20000b2c 	.word	0x20000b2c
 8002848:	20000b28 	.word	0x20000b28
 800284c:	080122e4 	.word	0x080122e4
 8002850:	20000be8 	.word	0x20000be8
 8002854:	08012304 	.word	0x08012304

08002858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b095      	sub	sp, #84	; 0x54
 800285c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285e:	2414      	movs	r4, #20
 8002860:	193b      	adds	r3, r7, r4
 8002862:	0018      	movs	r0, r3
 8002864:	233c      	movs	r3, #60	; 0x3c
 8002866:	001a      	movs	r2, r3
 8002868:	2100      	movs	r1, #0
 800286a:	f008 ff75 	bl	800b758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	0018      	movs	r0, r3
 8002872:	2310      	movs	r3, #16
 8002874:	001a      	movs	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	f008 ff6e 	bl	800b758 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	0018      	movs	r0, r3
 8002882:	f001 fd6d 	bl	8004360 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002886:	f001 fd25 	bl	80042d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <SystemClock_Config+0xa8>)
 800288c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <SystemClock_Config+0xa8>)
 8002890:	2118      	movs	r1, #24
 8002892:	438a      	bics	r2, r1
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002896:	193b      	adds	r3, r7, r4
 8002898:	2206      	movs	r2, #6
 800289a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2201      	movs	r2, #1
 80028a0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	0052      	lsls	r2, r2, #1
 80028a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	0018      	movs	r0, r3
 80028c0:	f001 fd9a 	bl	80043f8 <HAL_RCC_OscConfig>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80028c8:	f000 fd22 	bl	8003310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2207      	movs	r2, #7
 80028d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2100      	movs	r1, #0
 80028e8:	0018      	movs	r0, r3
 80028ea:	f002 f8e5 	bl	8004ab8 <HAL_RCC_ClockConfig>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80028f2:	f000 fd0d 	bl	8003310 <Error_Handler>
  }
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b015      	add	sp, #84	; 0x54
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40021000 	.word	0x40021000

08002904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b090      	sub	sp, #64	; 0x40
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800290a:	232c      	movs	r3, #44	; 0x2c
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	0018      	movs	r0, r3
 8002910:	2314      	movs	r3, #20
 8002912:	001a      	movs	r2, r3
 8002914:	2100      	movs	r1, #0
 8002916:	f008 ff1f 	bl	800b758 <memset>
  RTC_DateTypeDef sDate = {0};
 800291a:	2328      	movs	r3, #40	; 0x28
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002922:	003b      	movs	r3, r7
 8002924:	0018      	movs	r0, r3
 8002926:	2328      	movs	r3, #40	; 0x28
 8002928:	001a      	movs	r2, r3
 800292a:	2100      	movs	r1, #0
 800292c:	f008 ff14 	bl	800b758 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002930:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <MX_RTC_Init+0x140>)
 8002932:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <MX_RTC_Init+0x144>)
 8002934:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <MX_RTC_Init+0x140>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <MX_RTC_Init+0x140>)
 800293e:	227f      	movs	r2, #127	; 0x7f
 8002940:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <MX_RTC_Init+0x140>)
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <MX_RTC_Init+0x140>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <MX_RTC_Init+0x140>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <MX_RTC_Init+0x140>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <MX_RTC_Init+0x140>)
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	05d2      	lsls	r2, r2, #23
 8002960:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_RTC_Init+0x140>)
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <MX_RTC_Init+0x140>)
 800296a:	0018      	movs	r0, r3
 800296c:	f002 fc8a 	bl	8005284 <HAL_RTC_Init>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002974:	f000 fccc 	bl	8003310 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800299e:	1879      	adds	r1, r7, r1
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <MX_RTC_Init+0x140>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	0018      	movs	r0, r3
 80029a6:	f002 fd0f 	bl	80053c8 <HAL_RTC_SetTime>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80029ae:	f000 fcaf 	bl	8003310 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80029b2:	2128      	movs	r1, #40	; 0x28
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2206      	movs	r2, #6
 80029b8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2201      	movs	r2, #1
 80029be:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2201      	movs	r2, #1
 80029c4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029cc:	1879      	adds	r1, r7, r1
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_RTC_Init+0x140>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	0018      	movs	r0, r3
 80029d4:	f002 fdfc 	bl	80055d0 <HAL_RTC_SetDate>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80029dc:	f000 fc98 	bl	8003310 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029e0:	003b      	movs	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80029e6:	003b      	movs	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80029ec:	003b      	movs	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80029f2:	003b      	movs	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029f8:	003b      	movs	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029fe:	003b      	movs	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a04:	003b      	movs	r3, r7
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a0a:	003b      	movs	r3, r7
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a10:	003b      	movs	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a16:	003b      	movs	r3, r7
 8002a18:	2220      	movs	r2, #32
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a1e:	003b      	movs	r3, r7
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a26:	0039      	movs	r1, r7
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_RTC_Init+0x140>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 feaf 	bl	8005790 <HAL_RTC_SetAlarm_IT>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002a36:	f000 fc6b 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b010      	add	sp, #64	; 0x40
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200006ec 	.word	0x200006ec
 8002a48:	40002800 	.word	0x40002800

08002a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <MX_SPI1_Init+0x78>)
 8002a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a58:	2282      	movs	r2, #130	; 0x82
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a66:	22e0      	movs	r2, #224	; 0xe0
 8002a68:	00d2      	lsls	r2, r2, #3
 8002a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0092      	lsls	r2, r2, #2
 8002a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <MX_SPI1_Init+0x74>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f003 f94f 	bl	8005d50 <HAL_SPI_Init>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ab6:	f000 fc2b 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000718 	.word	0x20000718
 8002ac4:	40013000 	.word	0x40013000

08002ac8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f008 fe3e 	bl	800b758 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <MX_TIM6_Init+0x70>)
 8002ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <MX_TIM6_Init+0x74>)
 8002ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <MX_TIM6_Init+0x78>)
 8002af2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002afc:	0018      	movs	r0, r3
 8002afe:	f003 f9df 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b06:	f000 fc03 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b16:	1d3a      	adds	r2, r7, #4
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <MX_TIM6_Init+0x6c>)
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f003 fc77 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002b26:	f000 fbf3 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	2000077c 	.word	0x2000077c
 8002b38:	40001000 	.word	0x40001000
 8002b3c:	00003e7f 	.word	0x00003e7f
 8002b40:	000003e7 	.word	0x000003e7

08002b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b4a:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <MX_USART1_UART_Init+0x98>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b50:	22e1      	movs	r2, #225	; 0xe1
 8002b52:	0252      	lsls	r2, r2, #9
 8002b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f003 fccc 	bl	800652c <HAL_UART_Init>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d001      	beq.n	8002b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b98:	f000 fbba 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f004 fca7 	bl	80074f4 <HAL_UARTEx_SetTxFifoThreshold>
 8002ba6:	1e03      	subs	r3, r0, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002baa:	f000 fbb1 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f004 fcde 	bl	8007574 <HAL_UARTEx_SetRxFifoThreshold>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bbc:	f000 fba8 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <MX_USART1_UART_Init+0x94>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f004 fc5c 	bl	8007480 <HAL_UARTEx_DisableFifoMode>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bcc:	f000 fba0 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	200007c8 	.word	0x200007c8
 8002bdc:	40013800 	.word	0x40013800

08002be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <MX_USART2_UART_Init+0x98>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bec:	22e1      	movs	r2, #225	; 0xe1
 8002bee:	0252      	lsls	r2, r2, #9
 8002bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f003 fc7e 	bl	800652c <HAL_UART_Init>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c34:	f000 fb6c 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f004 fc59 	bl	80074f4 <HAL_UARTEx_SetTxFifoThreshold>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c46:	f000 fb63 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f004 fc90 	bl	8007574 <HAL_UARTEx_SetRxFifoThreshold>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c58:	f000 fb5a 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <MX_USART2_UART_Init+0x94>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f004 fc0e 	bl	8007480 <HAL_UARTEx_DisableFifoMode>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c68:	f000 fb52 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	2000085c 	.word	0x2000085c
 8002c78:	40004400 	.word	0x40004400

08002c7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <MX_USART3_UART_Init+0x98>)
 8002c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002c88:	2296      	movs	r2, #150	; 0x96
 8002c8a:	0192      	lsls	r2, r2, #6
 8002c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f003 fc30 	bl	800652c <HAL_UART_Init>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002cd0:	f000 fb1e 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f004 fc0b 	bl	80074f4 <HAL_UARTEx_SetTxFifoThreshold>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ce2:	f000 fb15 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	0018      	movs	r0, r3
 8002cec:	f004 fc42 	bl	8007574 <HAL_UARTEx_SetRxFifoThreshold>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002cf4:	f000 fb0c 	bl	8003310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <MX_USART3_UART_Init+0x94>)
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f004 fbc0 	bl	8007480 <HAL_UARTEx_DisableFifoMode>
 8002d00:	1e03      	subs	r3, r0, #0
 8002d02:	d001      	beq.n	8002d08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002d04:	f000 fb04 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	200008f0 	.word	0x200008f0
 8002d14:	40004800 	.word	0x40004800

08002d18 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <MX_USART5_UART_Init+0x64>)
 8002d20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d24:	2296      	movs	r2, #150	; 0x96
 8002d26:	0192      	lsls	r2, r2, #6
 8002d28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d3e:	220c      	movs	r2, #12
 8002d40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <MX_USART5_UART_Init+0x60>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f003 fbe2 	bl	800652c <HAL_UART_Init>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002d6c:	f000 fad0 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	20000984 	.word	0x20000984
 8002d7c:	40005000 	.word	0x40005000

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b08b      	sub	sp, #44	; 0x2c
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	2414      	movs	r4, #20
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	2314      	movs	r3, #20
 8002d8e:	001a      	movs	r2, r3
 8002d90:	2100      	movs	r1, #0
 8002d92:	f008 fce1 	bl	800b758 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	2204      	movs	r2, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db2:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dca:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002dcc:	2102      	movs	r1, #2
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dde:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002de4:	2108      	movs	r1, #8
 8002de6:	430a      	orrs	r2, r1
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dea:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <MX_GPIO_Init+0x1f0>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	2208      	movs	r2, #8
 8002df0:	4013      	ands	r3, r2
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002df6:	23a0      	movs	r3, #160	; 0xa0
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f001 fa4b 	bl	800429a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002e04:	495b      	ldr	r1, [pc, #364]	; (8002f74 <MX_GPIO_Init+0x1f4>)
 8002e06:	4b5c      	ldr	r3, [pc, #368]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f001 fa45 	bl	800429a <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4858      	ldr	r0, [pc, #352]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	0019      	movs	r1, r3
 8002e1a:	f001 fa3e 	bl	800429a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <MX_GPIO_Init+0x1fc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	2103      	movs	r1, #3
 8002e24:	0018      	movs	r0, r3
 8002e26:	f001 fa38 	bl	800429a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	2288      	movs	r2, #136	; 0x88
 8002e34:	0352      	lsls	r2, r2, #13
 8002e36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	193a      	adds	r2, r7, r4
 8002e40:	23a0      	movs	r3, #160	; 0xa0
 8002e42:	05db      	lsls	r3, r3, #23
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 ffc6 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	2202      	movs	r2, #2
 8002e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e52:	193b      	adds	r3, r7, r4
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	193a      	adds	r2, r7, r4
 8002e60:	23a0      	movs	r3, #160	; 0xa0
 8002e62:	05db      	lsls	r3, r3, #23
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 ffb6 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002e6c:	193b      	adds	r3, r7, r4
 8002e6e:	2210      	movs	r2, #16
 8002e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e72:	193b      	adds	r3, r7, r4
 8002e74:	2201      	movs	r2, #1
 8002e76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002e84:	193a      	adds	r2, r7, r4
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 ffa3 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002e92:	193b      	adds	r3, r7, r4
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <MX_GPIO_Init+0x200>)
 8002e96:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	193b      	adds	r3, r7, r4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002eae:	0019      	movs	r1, r3
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	f000 ff91 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002eb6:	0021      	movs	r1, r4
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2288      	movs	r2, #136	; 0x88
 8002ec2:	0352      	lsls	r2, r2, #13
 8002ec4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	000c      	movs	r4, r1
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	f000 ff7f 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002eda:	0021      	movs	r1, r4
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0192      	lsls	r2, r2, #6
 8002ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002ee4:	000c      	movs	r4, r1
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	2211      	movs	r2, #17
 8002eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	193b      	adds	r3, r7, r4
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002efc:	0019      	movs	r1, r3
 8002efe:	0010      	movs	r0, r2
 8002f00:	f000 ff6a 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <MX_GPIO_Init+0x204>)
 8002f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <MX_GPIO_Init+0x1f8>)
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f000 ff5b 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2203      	movs	r2, #3
 8002f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <MX_GPIO_Init+0x1fc>)
 8002f3e:	0019      	movs	r1, r3
 8002f40:	0010      	movs	r0, r2
 8002f42:	f000 ff49 	bl	8003dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002f46:	0021      	movs	r1, r4
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <MX_GPIO_Init+0x1fc>)
 8002f5e:	0019      	movs	r1, r3
 8002f60:	0010      	movs	r0, r2
 8002f62:	f000 ff39 	bl	8003dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b00b      	add	sp, #44	; 0x2c
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40021000 	.word	0x40021000
 8002f74:	0000a403 	.word	0x0000a403
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000c00 	.word	0x50000c00
 8002f80:	00008c03 	.word	0x00008c03
 8002f84:	00004040 	.word	0x00004040

08002f88 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7fd f8b6 	bl	8000104 <strlen>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2bfa      	cmp	r3, #250	; 0xfa
 8002fa0:	d908      	bls.n	8002fb4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002fa2:	23fa      	movs	r3, #250	; 0xfa
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	490d      	ldr	r1, [pc, #52]	; (8002fdc <send_debug_logs+0x54>)
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <send_debug_logs+0x58>)
 8002faa:	222a      	movs	r2, #42	; 0x2a
 8002fac:	f003 fb54 	bl	8006658 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002fb0:	23fa      	movs	r3, #250	; 0xfa
 8002fb2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	23fa      	movs	r3, #250	; 0xfa
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4808      	ldr	r0, [pc, #32]	; (8002fe0 <send_debug_logs+0x58>)
 8002fc0:	f003 fb4a 	bl	8006658 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002fc4:	23fa      	movs	r3, #250	; 0xfa
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4906      	ldr	r1, [pc, #24]	; (8002fe4 <send_debug_logs+0x5c>)
 8002fca:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <send_debug_logs+0x58>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f003 fb43 	bl	8006658 <HAL_UART_Transmit>
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b004      	add	sp, #16
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	08012310 	.word	0x08012310
 8002fe0:	2000085c 	.word	0x2000085c
 8002fe4:	0801233c 	.word	0x0801233c

08002fe8 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002fee:	1dbc      	adds	r4, r7, #6
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <is_system_initialized+0x34>)
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f006 fa00 	bl	80093f8 <my_rtc_get_dt_s>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <is_system_initialized+0x34>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff ffc2 	bl	8002f88 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8003004:	1dbb      	adds	r3, r7, #6
 8003006:	8819      	ldrh	r1, [r3, #0]
 8003008:	23fd      	movs	r3, #253	; 0xfd
 800300a:	00da      	lsls	r2, r3, #3
 800300c:	2300      	movs	r3, #0
 800300e:	4291      	cmp	r1, r2
 8003010:	415b      	adcs	r3, r3
 8003012:	b2db      	uxtb	r3, r3
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b003      	add	sp, #12
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	20000b14 	.word	0x20000b14

08003020 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	0002      	movs	r2, r0
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10e      	bne.n	8003052 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4811      	ldr	r0, [pc, #68]	; (8003080 <my_ant_sw_pos+0x60>)
 800303a:	2200      	movs	r2, #0
 800303c:	0019      	movs	r1, r3
 800303e:	f001 f92c 	bl	800429a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	480e      	ldr	r0, [pc, #56]	; (8003080 <my_ant_sw_pos+0x60>)
 8003048:	2201      	movs	r2, #1
 800304a:	0019      	movs	r1, r3
 800304c:	f001 f925 	bl	800429a <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003050:	e011      	b.n	8003076 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d10d      	bne.n	8003076 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	4808      	ldr	r0, [pc, #32]	; (8003080 <my_ant_sw_pos+0x60>)
 8003060:	2201      	movs	r2, #1
 8003062:	0019      	movs	r1, r3
 8003064:	f001 f919 	bl	800429a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4804      	ldr	r0, [pc, #16]	; (8003080 <my_ant_sw_pos+0x60>)
 800306e:	2200      	movs	r2, #0
 8003070:	0019      	movs	r1, r3
 8003072:	f001 f912 	bl	800429a <HAL_GPIO_WritePin>
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	50000400 	.word	0x50000400

08003084 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003088:	2001      	movs	r0, #1
 800308a:	f7ff ffc9 	bl	8003020 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	4808      	ldr	r0, [pc, #32]	; (80030b4 <my_gnss_sw_on+0x30>)
 8003094:	2201      	movs	r2, #1
 8003096:	0019      	movs	r1, r3
 8003098:	f001 f8ff 	bl	800429a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	019b      	lsls	r3, r3, #6
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <my_gnss_sw_on+0x30>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	0019      	movs	r1, r3
 80030a6:	f001 f8f8 	bl	800429a <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80030aa:	f7ff fe35 	bl	8002d18 <MX_USART5_UART_Init>
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	50000400 	.word	0x50000400

080030b8 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80030bc:	2002      	movs	r0, #2
 80030be:	f7ff ffaf 	bl	8003020 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <my_gnss_sw_off+0x34>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	0019      	movs	r1, r3
 80030cc:	f001 f8e5 	bl	800429a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	019b      	lsls	r3, r3, #6
 80030d4:	4805      	ldr	r0, [pc, #20]	; (80030ec <my_gnss_sw_off+0x34>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	0019      	movs	r1, r3
 80030da:	f001 f8de 	bl	800429a <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &HUART_GNSS ) ;
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <my_gnss_sw_off+0x38>)
 80030e0:	0018      	movs	r0, r3
 80030e2:	f003 fa79 	bl	80065d8 <HAL_UART_DeInit>

}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	50000400 	.word	0x50000400
 80030f0:	20000984 	.word	0x20000984

080030f4 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	000a      	movs	r2, r1
 80030fe:	1cfb      	adds	r3, r7, #3
 8003100:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003102:	23fa      	movs	r3, #250	; 0xfa
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4809      	ldr	r0, [pc, #36]	; (8003130 <my_gnss_receive_byte+0x3c>)
 800310a:	2201      	movs	r2, #1
 800310c:	f003 fb48 	bl	80067a0 <HAL_UART_Receive>
	if ( verbose )
 8003110:	1cfb      	adds	r3, r7, #3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003118:	23fa      	movs	r3, #250	; 0xfa
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <my_gnss_receive_byte+0x40>)
 8003120:	2201      	movs	r2, #1
 8003122:	f003 fa99 	bl	8006658 <HAL_UART_Transmit>
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b002      	add	sp, #8
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000984 	.word	0x20000984
 8003134:	2000085c 	.word	0x2000085c

08003138 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <my_astronode_reset+0x30>)
 800313e:	2201      	movs	r2, #1
 8003140:	2102      	movs	r1, #2
 8003142:	0018      	movs	r0, r3
 8003144:	f001 f8a9 	bl	800429a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003148:	2001      	movs	r0, #1
 800314a:	f000 fcfb 	bl	8003b44 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <my_astronode_reset+0x30>)
 8003150:	2200      	movs	r2, #0
 8003152:	2102      	movs	r1, #2
 8003154:	0018      	movs	r0, r3
 8003156:	f001 f8a0 	bl	800429a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800315a:	20fa      	movs	r0, #250	; 0xfa
 800315c:	f000 fcf2 	bl	8003b44 <HAL_Delay>
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	50000400 	.word	0x50000400

0800316c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <send_astronode_request+0x34>)
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff ff05 	bl	8002f88 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff ff01 	bl	8002f88 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b29a      	uxth	r2, r3
 800318a:	23fa      	movs	r3, #250	; 0xfa
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <send_astronode_request+0x38>)
 8003192:	f003 fa61 	bl	8006658 <HAL_UART_Transmit>
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	08012348 	.word	0x08012348
 80031a4:	200008f0 	.word	0x200008f0

080031a8 <get_systick>:
uint32_t get_systick ( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80031ac:	f000 fcc0 	bl	8003b30 <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	000a      	movs	r2, r1
 80031c2:	1cbb      	adds	r3, r7, #2
 80031c4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80031c6:	f7ff ffef 	bl	80031a8 <get_systick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	1cba      	adds	r2, r7, #2
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	419b      	sbcs	r3, r3
 80031d8:	425b      	negs	r3, r3
 80031da:	b2db      	uxtb	r3, r3
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4806      	ldr	r0, [pc, #24]	; (8003208 <is_astronode_character_received+0x24>)
 80031f0:	2364      	movs	r3, #100	; 0x64
 80031f2:	2201      	movs	r2, #1
 80031f4:	f003 fad4 	bl	80067a0 <HAL_UART_Receive>
 80031f8:	0003      	movs	r3, r0
 80031fa:	425a      	negs	r2, r3
 80031fc:	4153      	adcs	r3, r2
 80031fe:	b2db      	uxtb	r3, r3
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200008f0 	.word	0x200008f0

0800320c <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <my_astro_evt_pin+0x20>)
 8003212:	2104      	movs	r1, #4
 8003214:	0018      	movs	r0, r3
 8003216:	f001 f823 	bl	8004260 <HAL_GPIO_ReadPin>
 800321a:	0003      	movs	r3, r0
 800321c:	3b01      	subs	r3, #1
 800321e:	425a      	negs	r2, r3
 8003220:	4153      	adcs	r3, r2
 8003222:	b2db      	uxtb	r3, r3
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	50000400 	.word	0x50000400

08003230 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <my_tim_init+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4252      	negs	r2, r2
 800323c:	611a      	str	r2, [r3, #16]
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	2000077c 	.word	0x2000077c

08003248 <my_tim_start>:

void my_tim_start ()
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <my_tim_start+0x18>)
 800324e:	2200      	movs	r2, #0
 8003250:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <my_tim_start+0x1c>)
 8003254:	0018      	movs	r0, r3
 8003256:	f002 fe8b 	bl	8005f70 <HAL_TIM_Base_Start_IT>
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000bf8 	.word	0x20000bf8
 8003264:	2000077c 	.word	0x2000077c

08003268 <my_tim_stop>:

void my_tim_stop ()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <my_tim_stop+0x14>)
 800326e:	0018      	movs	r0, r3
 8003270:	f002 fee0 	bl	8006034 <HAL_TIM_Base_Stop_IT>
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	2000077c 	.word	0x2000077c

08003280 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d11e      	bne.n	80032d0 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800329c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	2396      	movs	r3, #150	; 0x96
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d912      	bls.n	80032d0 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80032ac:	0018      	movs	r0, r3
 80032ae:	f006 f8a3 	bl	80093f8 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80032b2:	4c0c      	ldr	r4, [pc, #48]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80032b4:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80032b6:	490d      	ldr	r1, [pc, #52]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80032b8:	480d      	ldr	r0, [pc, #52]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0023      	movs	r3, r4
 80032c0:	f008 f9b4 	bl	800b62c <sprintf>
			send_debug_logs ( dbg_payload ) ;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fe5e 	bl	8002f88 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 80032cc:	f000 fd73 	bl	8003db6 <HAL_NVIC_SystemReset>
		}
	}
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b003      	add	sp, #12
 80032d6:	bd90      	pop	{r4, r7, pc}
 80032d8:	40001000 	.word	0x40001000
 80032dc:	20000bf8 	.word	0x20000bf8
 80032e0:	20000b14 	.word	0x20000b14
 80032e4:	0000038f 	.word	0x0000038f
 80032e8:	080122a0 	.word	0x080122a0
 80032ec:	0801236c 	.word	0x0801236c
 80032f0:	20000a18 	.word	0x20000a18

080032f4 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RTC_AlarmAEventCallback+0x18>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b002      	add	sp, #8
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20000be8 	.word	0x20000be8

08003310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003314:	b672      	cpsid	i
}
 8003316:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003318:	e7fe      	b.n	8003318 <Error_Handler+0x8>
	...

0800331c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_MspInit+0x4c>)
 8003324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_MspInit+0x4c>)
 8003328:	2101      	movs	r1, #1
 800332a:	430a      	orrs	r2, r1
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_MspInit+0x4c>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2201      	movs	r2, #1
 8003334:	4013      	ands	r3, r2
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_MspInit+0x4c>)
 800333c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_MspInit+0x4c>)
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0549      	lsls	r1, r1, #21
 8003344:	430a      	orrs	r2, r1
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_MspInit+0x4c>)
 800334a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	4013      	ands	r3, r2
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fc32 	bl	8003bc4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b097      	sub	sp, #92	; 0x5c
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003374:	240c      	movs	r4, #12
 8003376:	193b      	adds	r3, r7, r4
 8003378:	0018      	movs	r0, r3
 800337a:	234c      	movs	r3, #76	; 0x4c
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f008 f9ea 	bl	800b758 <memset>
  if(hrtc->Instance==RTC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_RTC_MspInit+0x84>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d12c      	bne.n	80033e8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	0292      	lsls	r2, r2, #10
 8003394:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	0052      	lsls	r2, r2, #1
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 fd33 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d001      	beq.n	80033ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80033aa:	f7ff ffb1 	bl	8003310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RTC_MspInit+0x88>)
 80033b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RTC_MspInit+0x88>)
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	0209      	lsls	r1, r1, #8
 80033b8:	430a      	orrs	r2, r1
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RTC_MspInit+0x88>)
 80033be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RTC_MspInit+0x88>)
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	00c9      	lsls	r1, r1, #3
 80033c6:	430a      	orrs	r2, r1
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RTC_MspInit+0x88>)
 80033cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4013      	ands	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2103      	movs	r1, #3
 80033dc:	2002      	movs	r0, #2
 80033de:	f000 fcc5 	bl	8003d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80033e2:	2002      	movs	r0, #2
 80033e4:	f000 fcd7 	bl	8003d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b017      	add	sp, #92	; 0x5c
 80033ee:	bd90      	pop	{r4, r7, pc}
 80033f0:	40002800 	.word	0x40002800
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b08b      	sub	sp, #44	; 0x2c
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	2414      	movs	r4, #20
 8003402:	193b      	adds	r3, r7, r4
 8003404:	0018      	movs	r0, r3
 8003406:	2314      	movs	r3, #20
 8003408:	001a      	movs	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	f008 f9a4 	bl	800b758 <memset>
  if(hspi->Instance==SPI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_SPI_MspInit+0x8c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d130      	bne.n	800347c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_SPI_MspInit+0x90>)
 800341c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_SPI_MspInit+0x90>)
 8003420:	2180      	movs	r1, #128	; 0x80
 8003422:	0149      	lsls	r1, r1, #5
 8003424:	430a      	orrs	r2, r1
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_SPI_MspInit+0x90>)
 800342a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_SPI_MspInit+0x90>)
 8003438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_SPI_MspInit+0x90>)
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	635a      	str	r2, [r3, #52]	; 0x34
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_SPI_MspInit+0x90>)
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 800344e:	0021      	movs	r1, r4
 8003450:	187b      	adds	r3, r7, r1
 8003452:	22e0      	movs	r2, #224	; 0xe0
 8003454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2202      	movs	r2, #2
 800345a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	187a      	adds	r2, r7, r1
 8003470:	23a0      	movs	r3, #160	; 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	0011      	movs	r1, r2
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fcae 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b00b      	add	sp, #44	; 0x2c
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	40013000 	.word	0x40013000
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <HAL_TIM_Base_MspInit+0x44>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d113      	bne.n	80034c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034a4:	2110      	movs	r1, #16
 80034a6:	430a      	orrs	r2, r1
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_TIM_Base_MspInit+0x48>)
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2210      	movs	r2, #16
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2102      	movs	r1, #2
 80034ba:	2011      	movs	r0, #17
 80034bc:	f000 fc56 	bl	8003d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80034c0:	2011      	movs	r0, #17
 80034c2:	f000 fc68 	bl	8003d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	40001000 	.word	0x40001000
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b0a3      	sub	sp, #140	; 0x8c
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	2374      	movs	r3, #116	; 0x74
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	0018      	movs	r0, r3
 80034e6:	2314      	movs	r3, #20
 80034e8:	001a      	movs	r2, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	f008 f934 	bl	800b758 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f0:	2428      	movs	r4, #40	; 0x28
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	0018      	movs	r0, r3
 80034f6:	234c      	movs	r3, #76	; 0x4c
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f008 f92c 	bl	800b758 <memset>
  if(huart->Instance==USART1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a84      	ldr	r2, [pc, #528]	; (8003718 <HAL_UART_MspInit+0x240>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d140      	bne.n	800358c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800350a:	193b      	adds	r3, r7, r4
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003516:	193b      	adds	r3, r7, r4
 8003518:	0018      	movs	r0, r3
 800351a:	f001 fc77 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003522:	f7ff fef5 	bl	8003310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003526:	4b7d      	ldr	r3, [pc, #500]	; (800371c <HAL_UART_MspInit+0x244>)
 8003528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352a:	4b7c      	ldr	r3, [pc, #496]	; (800371c <HAL_UART_MspInit+0x244>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	01c9      	lsls	r1, r1, #7
 8003530:	430a      	orrs	r2, r1
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
 8003534:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_UART_MspInit+0x244>)
 8003536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	01db      	lsls	r3, r3, #7
 800353c:	4013      	ands	r3, r2
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_UART_MspInit+0x244>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	4b75      	ldr	r3, [pc, #468]	; (800371c <HAL_UART_MspInit+0x244>)
 8003548:	2101      	movs	r1, #1
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	; 0x34
 800354e:	4b73      	ldr	r3, [pc, #460]	; (800371c <HAL_UART_MspInit+0x244>)
 8003550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 800355a:	2174      	movs	r1, #116	; 0x74
 800355c:	187b      	adds	r3, r7, r1
 800355e:	22c0      	movs	r2, #192	; 0xc0
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2202      	movs	r2, #2
 8003568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2201      	movs	r2, #1
 800357a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	187a      	adds	r2, r7, r1
 800357e:	23a0      	movs	r3, #160	; 0xa0
 8003580:	05db      	lsls	r3, r3, #23
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fc27 	bl	8003dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800358a:	e0c0      	b.n	800370e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a63      	ldr	r2, [pc, #396]	; (8003720 <HAL_UART_MspInit+0x248>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d140      	bne.n	8003618 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003596:	2128      	movs	r1, #40	; 0x28
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2202      	movs	r2, #2
 800359c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 fc30 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80035b0:	f7ff feae 	bl	8003310 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_UART_MspInit+0x244>)
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_UART_MspInit+0x244>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0289      	lsls	r1, r1, #10
 80035be:	430a      	orrs	r2, r1
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035c2:	4b56      	ldr	r3, [pc, #344]	; (800371c <HAL_UART_MspInit+0x244>)
 80035c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	029b      	lsls	r3, r3, #10
 80035ca:	4013      	ands	r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d0:	4b52      	ldr	r3, [pc, #328]	; (800371c <HAL_UART_MspInit+0x244>)
 80035d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d4:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_UART_MspInit+0x244>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	635a      	str	r2, [r3, #52]	; 0x34
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_UART_MspInit+0x244>)
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80035e8:	2174      	movs	r1, #116	; 0x74
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	220c      	movs	r2, #12
 80035ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2202      	movs	r2, #2
 80035f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2201      	movs	r2, #1
 8003606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	187a      	adds	r2, r7, r1
 800360a:	23a0      	movs	r3, #160	; 0xa0
 800360c:	05db      	lsls	r3, r3, #23
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f000 fbe1 	bl	8003dd8 <HAL_GPIO_Init>
}
 8003616:	e07a      	b.n	800370e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_UART_MspInit+0x24c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d140      	bne.n	80036a4 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003622:	2128      	movs	r1, #40	; 0x28
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2204      	movs	r2, #4
 8003628:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800362a:	187b      	adds	r3, r7, r1
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	187b      	adds	r3, r7, r1
 8003632:	0018      	movs	r0, r3
 8003634:	f001 fbea 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_MspInit+0x168>
      Error_Handler();
 800363c:	f7ff fe68 	bl	8003310 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_UART_MspInit+0x244>)
 8003642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003644:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_UART_MspInit+0x244>)
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	02c9      	lsls	r1, r1, #11
 800364a:	430a      	orrs	r2, r1
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_UART_MspInit+0x244>)
 8003650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	02db      	lsls	r3, r3, #11
 8003656:	4013      	ands	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_UART_MspInit+0x244>)
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_UART_MspInit+0x244>)
 8003662:	2102      	movs	r1, #2
 8003664:	430a      	orrs	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_UART_MspInit+0x244>)
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	2202      	movs	r2, #2
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003674:	2174      	movs	r1, #116	; 0x74
 8003676:	187b      	adds	r3, r7, r1
 8003678:	22c0      	movs	r2, #192	; 0xc0
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2202      	movs	r2, #2
 8003682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	187b      	adds	r3, r7, r1
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	187b      	adds	r3, r7, r1
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2204      	movs	r2, #4
 8003694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	187b      	adds	r3, r7, r1
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <HAL_UART_MspInit+0x250>)
 800369a:	0019      	movs	r1, r3
 800369c:	0010      	movs	r0, r2
 800369e:	f000 fb9b 	bl	8003dd8 <HAL_GPIO_Init>
}
 80036a2:	e034      	b.n	800370e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_UART_MspInit+0x254>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d12f      	bne.n	800370e <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_UART_MspInit+0x244>)
 80036b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_UART_MspInit+0x244>)
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	0049      	lsls	r1, r1, #1
 80036b8:	430a      	orrs	r2, r1
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_UART_MspInit+0x244>)
 80036be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_UART_MspInit+0x244>)
 80036cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <HAL_UART_MspInit+0x244>)
 80036d0:	2102      	movs	r1, #2
 80036d2:	430a      	orrs	r2, r1
 80036d4:	635a      	str	r2, [r3, #52]	; 0x34
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_UART_MspInit+0x244>)
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80036e2:	2174      	movs	r1, #116	; 0x74
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2218      	movs	r2, #24
 80036e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	2202      	movs	r2, #2
 80036ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	187b      	adds	r3, r7, r1
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	2203      	movs	r2, #3
 8003700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	187b      	adds	r3, r7, r1
 8003704:	4a08      	ldr	r2, [pc, #32]	; (8003728 <HAL_UART_MspInit+0x250>)
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f000 fb65 	bl	8003dd8 <HAL_GPIO_Init>
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b023      	add	sp, #140	; 0x8c
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40013800 	.word	0x40013800
 800371c:	40021000 	.word	0x40021000
 8003720:	40004400 	.word	0x40004400
 8003724:	40004800 	.word	0x40004800
 8003728:	50000400 	.word	0x50000400
 800372c:	40005000 	.word	0x40005000

08003730 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <HAL_UART_MspDeInit+0xa4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10e      	bne.n	8003760 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003742:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 8003748:	4924      	ldr	r1, [pc, #144]	; (80037dc <HAL_UART_MspDeInit+0xac>)
 800374a:	400a      	ands	r2, r1
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 800374e:	23c0      	movs	r3, #192	; 0xc0
 8003750:	00da      	lsls	r2, r3, #3
 8003752:	23a0      	movs	r3, #160	; 0xa0
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	0011      	movs	r1, r2
 8003758:	0018      	movs	r0, r3
 800375a:	f000 fca9 	bl	80040b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 800375e:	e034      	b.n	80037ca <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_UART_MspDeInit+0xb0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10c      	bne.n	8003784 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 800376c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 8003770:	491c      	ldr	r1, [pc, #112]	; (80037e4 <HAL_UART_MspDeInit+0xb4>)
 8003772:	400a      	ands	r2, r1
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003776:	23a0      	movs	r3, #160	; 0xa0
 8003778:	05db      	lsls	r3, r3, #23
 800377a:	210c      	movs	r1, #12
 800377c:	0018      	movs	r0, r3
 800377e:	f000 fc97 	bl	80040b0 <HAL_GPIO_DeInit>
}
 8003782:	e022      	b.n	80037ca <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_UART_MspDeInit+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 8003790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 8003794:	4915      	ldr	r1, [pc, #84]	; (80037ec <HAL_UART_MspDeInit+0xbc>)
 8003796:	400a      	ands	r2, r1
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <HAL_UART_MspDeInit+0xc0>)
 80037a0:	0019      	movs	r1, r3
 80037a2:	0010      	movs	r0, r2
 80037a4:	f000 fc84 	bl	80040b0 <HAL_GPIO_DeInit>
}
 80037a8:	e00f      	b.n	80037ca <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <HAL_UART_MspDeInit+0xc4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10a      	bne.n	80037ca <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 80037b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_UART_MspDeInit+0xa8>)
 80037ba:	490f      	ldr	r1, [pc, #60]	; (80037f8 <HAL_UART_MspDeInit+0xc8>)
 80037bc:	400a      	ands	r2, r1
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_UART_MspDeInit+0xc0>)
 80037c2:	2118      	movs	r1, #24
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 fc73 	bl	80040b0 <HAL_GPIO_DeInit>
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40021000 	.word	0x40021000
 80037dc:	ffffbfff 	.word	0xffffbfff
 80037e0:	40004400 	.word	0x40004400
 80037e4:	fffdffff 	.word	0xfffdffff
 80037e8:	40004800 	.word	0x40004800
 80037ec:	fffbffff 	.word	0xfffbffff
 80037f0:	50000400 	.word	0x50000400
 80037f4:	40005000 	.word	0x40005000
 80037f8:	fffffeff 	.word	0xfffffeff

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003800:	e7fe      	b.n	8003800 <NMI_Handler+0x4>

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003820:	f000 f974 	bl	8003b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <RTC_TAMP_IRQHandler+0x14>)
 8003832:	0018      	movs	r0, r3
 8003834:	f002 f8ec 	bl	8005a10 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	200006ec 	.word	0x200006ec

08003844 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800384a:	0018      	movs	r0, r3
 800384c:	f002 fc20 	bl	8006090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	2000077c 	.word	0x2000077c

0800385c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  return 1;
 8003860:	2301      	movs	r3, #1
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_kill>:

int _kill(int pid, int sig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003872:	f008 f81d 	bl	800b8b0 <__errno>
 8003876:	0003      	movs	r3, r0
 8003878:	2216      	movs	r2, #22
 800387a:	601a      	str	r2, [r3, #0]
  return -1;
 800387c:	2301      	movs	r3, #1
 800387e:	425b      	negs	r3, r3
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}

08003888 <_exit>:

void _exit (int status)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003890:	2301      	movs	r3, #1
 8003892:	425a      	negs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0011      	movs	r1, r2
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff ffe5 	bl	8003868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800389e:	e7fe      	b.n	800389e <_exit+0x16>

080038a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e00a      	b.n	80038c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038b2:	e000      	b.n	80038b6 <_read+0x16>
 80038b4:	bf00      	nop
 80038b6:	0001      	movs	r1, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	60ba      	str	r2, [r7, #8]
 80038be:	b2ca      	uxtb	r2, r1
 80038c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dbf0      	blt.n	80038b2 <_read+0x12>
  }

  return len;
 80038d0:	687b      	ldr	r3, [r7, #4]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}

080038da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e009      	b.n	8003900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60ba      	str	r2, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	0018      	movs	r0, r3
 80038f6:	e000      	b.n	80038fa <_write+0x20>
 80038f8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	dbf1      	blt.n	80038ec <_write+0x12>
  }
  return len;
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bd80      	pop	{r7, pc}

08003912 <_close>:

int _close(int file)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800391a:	2301      	movs	r3, #1
 800391c:	425b      	negs	r3, r3
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}

08003926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	0192      	lsls	r2, r2, #6
 8003936:	605a      	str	r2, [r3, #4]
  return 0;
 8003938:	2300      	movs	r3, #0
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}

08003942 <_isatty>:

int _isatty(int file)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800394a:	2301      	movs	r3, #1
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}

08003954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003960:	2300      	movs	r3, #0
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b004      	add	sp, #16
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <_sbrk+0x5c>)
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <_sbrk+0x60>)
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <_sbrk+0x64>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <_sbrk+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <_sbrk+0x64>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	18d3      	adds	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800399c:	f007 ff88 	bl	800b8b0 <__errno>
 80039a0:	0003      	movs	r3, r0
 80039a2:	220c      	movs	r2, #12
 80039a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	425b      	negs	r3, r3
 80039aa:	e009      	b.n	80039c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <_sbrk+0x64>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	18d2      	adds	r2, r2, r3
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <_sbrk+0x64>)
 80039bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20024000 	.word	0x20024000
 80039cc:	00000400 	.word	0x00000400
 80039d0:	20000bec 	.word	0x20000bec
 80039d4:	20000f08 	.word	0x20000f08

080039d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039e4:	480d      	ldr	r0, [pc, #52]	; (8003a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039e8:	f7ff fff6 	bl	80039d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039ec:	480c      	ldr	r0, [pc, #48]	; (8003a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80039ee:	490d      	ldr	r1, [pc, #52]	; (8003a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <LoopForever+0xe>)
  movs r3, #0
 80039f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039f4:	e002      	b.n	80039fc <LoopCopyDataInit>

080039f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039fa:	3304      	adds	r3, #4

080039fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a00:	d3f9      	bcc.n	80039f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a04:	4c0a      	ldr	r4, [pc, #40]	; (8003a30 <LoopForever+0x16>)
  movs r3, #0
 8003a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a08:	e001      	b.n	8003a0e <LoopFillZerobss>

08003a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a0c:	3204      	adds	r2, #4

08003a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a10:	d3fb      	bcc.n	8003a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a12:	f007 ff53 	bl	800b8bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a16:	f7fe fdc7 	bl	80025a8 <main>

08003a1a <LoopForever>:

LoopForever:
  b LoopForever
 8003a1a:	e7fe      	b.n	8003a1a <LoopForever>
  ldr   r0, =_estack
 8003a1c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a24:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 8003a28:	080141f0 	.word	0x080141f0
  ldr r2, =_sbss
 8003a2c:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8003a30:	20000f08 	.word	0x20000f08

08003a34 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a34:	e7fe      	b.n	8003a34 <ADC1_COMP_IRQHandler>
	...

08003a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a3e:	1dfb      	adds	r3, r7, #7
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_Init+0x3c>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_Init+0x3c>)
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	0049      	lsls	r1, r1, #1
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a52:	2003      	movs	r0, #3
 8003a54:	f000 f810 	bl	8003a78 <HAL_InitTick>
 8003a58:	1e03      	subs	r3, r0, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e001      	b.n	8003a68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a64:	f7ff fc5a 	bl	800331c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40022000 	.word	0x40022000

08003a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a80:	230f      	movs	r3, #15
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_InitTick+0x88>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02b      	beq.n	8003ae8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a90:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_InitTick+0x8c>)
 8003a92:	681c      	ldr	r4, [r3, #0]
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_InitTick+0x88>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	0019      	movs	r1, r3
 8003a9a:	23fa      	movs	r3, #250	; 0xfa
 8003a9c:	0098      	lsls	r0, r3, #2
 8003a9e:	f7fc fb4d 	bl	800013c <__udivsi3>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f7fc fb48 	bl	800013c <__udivsi3>
 8003aac:	0003      	movs	r3, r0
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f985 	bl	8003dbe <HAL_SYSTICK_Config>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d112      	bne.n	8003ade <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d80a      	bhi.n	8003ad4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	425b      	negs	r3, r3
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f950 	bl	8003d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_InitTick+0x90>)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e00d      	b.n	8003af0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ad4:	230f      	movs	r3, #15
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e008      	b.n	8003af0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ade:	230f      	movs	r3, #15
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e003      	b.n	8003af0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ae8:	230f      	movs	r3, #15
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003af0:	230f      	movs	r3, #15
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	781b      	ldrb	r3, [r3, #0]
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b005      	add	sp, #20
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	20000010 	.word	0x20000010
 8003b04:	20000008 	.word	0x20000008
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_IncTick+0x1c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	001a      	movs	r2, r3
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_IncTick+0x20>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	18d2      	adds	r2, r2, r3
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_IncTick+0x20>)
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	20000010 	.word	0x20000010
 8003b2c:	20000bf0 	.word	0x20000bf0

08003b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  return uwTick;
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <HAL_GetTick+0x10>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000bf0 	.word	0x20000bf0

08003b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7ff fff0 	bl	8003b30 <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_Delay+0x44>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	001a      	movs	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	f7ff ffe0 	bl	8003b30 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d8f7      	bhi.n	8003b6c <HAL_Delay+0x28>
  {
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	20000010 	.word	0x20000010

08003b8c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_SuspendTick+0x18>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_SuspendTick+0x18>)
 8003b96:	2102      	movs	r1, #2
 8003b98:	438a      	bics	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_ResumeTick+0x18>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_ResumeTick+0x18>)
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	e000e010 	.word	0xe000e010

08003bc4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a06      	ldr	r2, [pc, #24]	; (8003bec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	40010000 	.word	0x40010000
 8003bec:	fffff9ff 	.word	0xfffff9ff

08003bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b7f      	cmp	r3, #127	; 0x7f
 8003c02:	d809      	bhi.n	8003c18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	001a      	movs	r2, r3
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_EnableIRQ+0x30>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	4091      	lsls	r1, r2
 8003c14:	000a      	movs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	1dfb      	adds	r3, r7, #7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d828      	bhi.n	8003c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <__NVIC_SetPriority+0xd4>)
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	33c0      	adds	r3, #192	; 0xc0
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	589b      	ldr	r3, [r3, r2]
 8003c4a:	1dfa      	adds	r2, r7, #7
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	2203      	movs	r2, #3
 8003c52:	400a      	ands	r2, r1
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	21ff      	movs	r1, #255	; 0xff
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	43d2      	mvns	r2, r2
 8003c5e:	401a      	ands	r2, r3
 8003c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	401a      	ands	r2, r3
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	2303      	movs	r3, #3
 8003c72:	4003      	ands	r3, r0
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c78:	481f      	ldr	r0, [pc, #124]	; (8003cf8 <__NVIC_SetPriority+0xd4>)
 8003c7a:	1dfb      	adds	r3, r7, #7
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	430a      	orrs	r2, r1
 8003c84:	33c0      	adds	r3, #192	; 0xc0
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c8a:	e031      	b.n	8003cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c8c:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <__NVIC_SetPriority+0xd8>)
 8003c8e:	1dfb      	adds	r3, r7, #7
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	0019      	movs	r1, r3
 8003c94:	230f      	movs	r3, #15
 8003c96:	400b      	ands	r3, r1
 8003c98:	3b08      	subs	r3, #8
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3306      	adds	r3, #6
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1dfa      	adds	r2, r7, #7
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	0011      	movs	r1, r2
 8003cac:	2203      	movs	r2, #3
 8003cae:	400a      	ands	r2, r1
 8003cb0:	00d2      	lsls	r2, r2, #3
 8003cb2:	21ff      	movs	r1, #255	; 0xff
 8003cb4:	4091      	lsls	r1, r2
 8003cb6:	000a      	movs	r2, r1
 8003cb8:	43d2      	mvns	r2, r2
 8003cba:	401a      	ands	r2, r3
 8003cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	2303      	movs	r3, #3
 8003cce:	4003      	ands	r3, r0
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	4809      	ldr	r0, [pc, #36]	; (8003cfc <__NVIC_SetPriority+0xd8>)
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	001c      	movs	r4, r3
 8003cdc:	230f      	movs	r3, #15
 8003cde:	4023      	ands	r3, r4
 8003ce0:	3b08      	subs	r3, #8
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	3306      	adds	r3, #6
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	18c3      	adds	r3, r0, r3
 8003cec:	3304      	adds	r3, #4
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b003      	add	sp, #12
 8003cf6:	bd90      	pop	{r4, r7, pc}
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d04:	f3bf 8f4f 	dsb	sy
}
 8003d08:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__NVIC_SystemReset+0x1c>)
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <__NVIC_SystemReset+0x20>)
 8003d0e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d10:	f3bf 8f4f 	dsb	sy
}
 8003d14:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	e7fd      	b.n	8003d16 <__NVIC_SystemReset+0x16>
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	e000ed00 	.word	0xe000ed00
 8003d20:	05fa0004 	.word	0x05fa0004

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	045b      	lsls	r3, r3, #17
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d301      	bcc.n	8003d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e010      	b.n	8003d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <SysTick_Config+0x44>)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	3a01      	subs	r2, #1
 8003d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	2103      	movs	r1, #3
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff ff6a 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <SysTick_Config+0x44>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <SysTick_Config+0x44>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b002      	add	sp, #8
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	e000e010 	.word	0xe000e010

08003d6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	210f      	movs	r1, #15
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	1c02      	adds	r2, r0, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	0011      	movs	r1, r2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff ff4b 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da2:	1dfb      	adds	r3, r7, #7
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff21 	bl	8003bf0 <__NVIC_EnableIRQ>
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b002      	add	sp, #8
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003dba:	f7ff ffa1 	bl	8003d00 <__NVIC_SystemReset>

08003dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff ffab 	bl	8003d24 <SysTick_Config>
 8003dce:	0003      	movs	r3, r0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de6:	e14d      	b.n	8004084 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4091      	lsls	r1, r2
 8003df2:	000a      	movs	r2, r1
 8003df4:	4013      	ands	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d100      	bne.n	8003e00 <HAL_GPIO_Init+0x28>
 8003dfe:	e13e      	b.n	800407e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d005      	beq.n	8003e18 <HAL_GPIO_Init+0x40>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d130      	bne.n	8003e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	2203      	movs	r2, #3
 8003e24:	409a      	lsls	r2, r3
 8003e26:	0013      	movs	r3, r2
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e4e:	2201      	movs	r2, #1
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
 8003e54:	0013      	movs	r3, r2
 8003e56:	43da      	mvns	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	2201      	movs	r2, #1
 8003e66:	401a      	ands	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	0013      	movs	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d017      	beq.n	8003eb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	409a      	lsls	r2, r3
 8003e94:	0013      	movs	r3, r2
 8003e96:	43da      	mvns	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d123      	bne.n	8003f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	08da      	lsrs	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3208      	adds	r2, #8
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	58d3      	ldr	r3, [r2, r3]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2107      	movs	r1, #7
 8003eee:	400b      	ands	r3, r1
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	0092      	lsls	r2, r2, #2
 8003f06:	6939      	ldr	r1, [r7, #16]
 8003f08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	2203      	movs	r2, #3
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	23c0      	movs	r3, #192	; 0xc0
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	4013      	ands	r3, r2
 8003f48:	d100      	bne.n	8003f4c <HAL_GPIO_Init+0x174>
 8003f4a:	e098      	b.n	800407e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f4c:	4a53      	ldr	r2, [pc, #332]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3318      	adds	r3, #24
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	589b      	ldr	r3, [r3, r2]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4013      	ands	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	220f      	movs	r2, #15
 8003f64:	409a      	lsls	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x1d6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x2c8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x1d2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_GPIO_Init+0x2cc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x1ce>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <HAL_GPIO_Init+0x2d0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x1ca>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x2d4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x1c6>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	e008      	b.n	8003fb0 <HAL_GPIO_Init+0x1d8>
 8003f9e:	2305      	movs	r3, #5
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x1d8>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e004      	b.n	8003fb0 <HAL_GPIO_Init+0x1d8>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e002      	b.n	8003fb0 <HAL_GPIO_Init+0x1d8>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_GPIO_Init+0x1d8>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	00d2      	lsls	r2, r2, #3
 8003fb8:	4093      	lsls	r3, r2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fc0:	4936      	ldr	r1, [pc, #216]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fce:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	035b      	lsls	r3, r3, #13
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ff8:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43da      	mvns	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	039b      	lsls	r3, r3, #14
 8004010:	4013      	ands	r3, r2
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_GPIO_Init+0x2c4>)
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8004024:	2384      	movs	r3, #132	; 0x84
 8004026:	58d3      	ldr	r3, [r2, r3]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43da      	mvns	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	4013      	ands	r3, r2
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004048:	4914      	ldr	r1, [pc, #80]	; (800409c <HAL_GPIO_Init+0x2c4>)
 800404a:	2284      	movs	r2, #132	; 0x84
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004050:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	58d3      	ldr	r3, [r2, r3]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43da      	mvns	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	025b      	lsls	r3, r3, #9
 800406a:	4013      	ands	r3, r2
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004076:	4909      	ldr	r1, [pc, #36]	; (800409c <HAL_GPIO_Init+0x2c4>)
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	40da      	lsrs	r2, r3
 800408c:	1e13      	subs	r3, r2, #0
 800408e:	d000      	beq.n	8004092 <HAL_GPIO_Init+0x2ba>
 8004090:	e6aa      	b.n	8003de8 <HAL_GPIO_Init+0x10>
  }
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b006      	add	sp, #24
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021800 	.word	0x40021800
 80040a0:	50000400 	.word	0x50000400
 80040a4:	50000800 	.word	0x50000800
 80040a8:	50000c00 	.word	0x50000c00
 80040ac:	50001000 	.word	0x50001000

080040b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040be:	e0ba      	b.n	8004236 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80040c0:	2201      	movs	r2, #1
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	409a      	lsls	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d100      	bne.n	80040d4 <HAL_GPIO_DeInit+0x24>
 80040d2:	e0ad      	b.n	8004230 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80040d4:	4a5d      	ldr	r2, [pc, #372]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3318      	adds	r3, #24
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	589b      	ldr	r3, [r3, r2]
 80040e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2203      	movs	r2, #3
 80040e6:	4013      	ands	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	220f      	movs	r2, #15
 80040ec:	409a      	lsls	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	23a0      	movs	r3, #160	; 0xa0
 80040f8:	05db      	lsls	r3, r3, #23
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d019      	beq.n	8004132 <HAL_GPIO_DeInit+0x82>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a53      	ldr	r2, [pc, #332]	; (8004250 <HAL_GPIO_DeInit+0x1a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_GPIO_DeInit+0x7e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a52      	ldr	r2, [pc, #328]	; (8004254 <HAL_GPIO_DeInit+0x1a4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00d      	beq.n	800412a <HAL_GPIO_DeInit+0x7a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a51      	ldr	r2, [pc, #324]	; (8004258 <HAL_GPIO_DeInit+0x1a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_DeInit+0x76>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_GPIO_DeInit+0x1ac>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_GPIO_DeInit+0x72>
 800411e:	2304      	movs	r3, #4
 8004120:	e008      	b.n	8004134 <HAL_GPIO_DeInit+0x84>
 8004122:	2305      	movs	r3, #5
 8004124:	e006      	b.n	8004134 <HAL_GPIO_DeInit+0x84>
 8004126:	2303      	movs	r3, #3
 8004128:	e004      	b.n	8004134 <HAL_GPIO_DeInit+0x84>
 800412a:	2302      	movs	r3, #2
 800412c:	e002      	b.n	8004134 <HAL_GPIO_DeInit+0x84>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_GPIO_DeInit+0x84>
 8004132:	2300      	movs	r3, #0
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	2103      	movs	r1, #3
 8004138:	400a      	ands	r2, r1
 800413a:	00d2      	lsls	r2, r2, #3
 800413c:	4093      	lsls	r3, r2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	429a      	cmp	r2, r3
 8004142:	d136      	bne.n	80041b2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004144:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	58d3      	ldr	r3, [r2, r3]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	43d2      	mvns	r2, r2
 800414e:	493f      	ldr	r1, [pc, #252]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004150:	4013      	ands	r3, r2
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004156:	4a3d      	ldr	r2, [pc, #244]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004158:	2384      	movs	r3, #132	; 0x84
 800415a:	58d3      	ldr	r3, [r2, r3]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	43d2      	mvns	r2, r2
 8004160:	493a      	ldr	r1, [pc, #232]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004162:	4013      	ands	r3, r2
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004168:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43d9      	mvns	r1, r3
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004172:	400a      	ands	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004176:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	43d9      	mvns	r1, r3
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2203      	movs	r2, #3
 8004188:	4013      	ands	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	220f      	movs	r2, #15
 800418e:	409a      	lsls	r2, r3
 8004190:	0013      	movs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004194:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3318      	adds	r3, #24
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	589a      	ldr	r2, [r3, r2]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	4829      	ldr	r0, [pc, #164]	; (800424c <HAL_GPIO_DeInit+0x19c>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	400a      	ands	r2, r1
 80041ac:	3318      	adds	r3, #24
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2103      	movs	r1, #3
 80041bc:	4099      	lsls	r1, r3
 80041be:	000b      	movs	r3, r1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	08da      	lsrs	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3208      	adds	r2, #8
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	58d3      	ldr	r3, [r2, r3]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	2107      	movs	r1, #7
 80041d6:	400a      	ands	r2, r1
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	210f      	movs	r1, #15
 80041dc:	4091      	lsls	r1, r2
 80041de:	000a      	movs	r2, r1
 80041e0:	43d1      	mvns	r1, r2
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	08d2      	lsrs	r2, r2, #3
 80041e6:	4019      	ands	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	0052      	lsls	r2, r2, #1
 80041f8:	2103      	movs	r1, #3
 80041fa:	4091      	lsls	r1, r2
 80041fc:	000a      	movs	r2, r1
 80041fe:	43d2      	mvns	r2, r2
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2101      	movs	r1, #1
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4091      	lsls	r1, r2
 8004210:	000a      	movs	r2, r1
 8004212:	43d2      	mvns	r2, r2
 8004214:	401a      	ands	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	0052      	lsls	r2, r2, #1
 8004222:	2103      	movs	r1, #3
 8004224:	4091      	lsls	r1, r2
 8004226:	000a      	movs	r2, r1
 8004228:	43d2      	mvns	r2, r2
 800422a:	401a      	ands	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	40da      	lsrs	r2, r3
 800423c:	1e13      	subs	r3, r2, #0
 800423e:	d000      	beq.n	8004242 <HAL_GPIO_DeInit+0x192>
 8004240:	e73e      	b.n	80040c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021800 	.word	0x40021800
 8004250:	50000400 	.word	0x50000400
 8004254:	50000800 	.word	0x50000800
 8004258:	50000c00 	.word	0x50000c00
 800425c:	50001000 	.word	0x50001000

08004260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	000a      	movs	r2, r1
 800426a:	1cbb      	adds	r3, r7, #2
 800426c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	1cba      	adds	r2, r7, #2
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	4013      	ands	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800427a:	230f      	movs	r3, #15
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e003      	b.n	800428c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004284:	230f      	movs	r3, #15
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800428c:	230f      	movs	r3, #15
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	781b      	ldrb	r3, [r3, #0]
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	0008      	movs	r0, r1
 80042a4:	0011      	movs	r1, r2
 80042a6:	1cbb      	adds	r3, r7, #2
 80042a8:	1c02      	adds	r2, r0, #0
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	1c7b      	adds	r3, r7, #1
 80042ae:	1c0a      	adds	r2, r1, #0
 80042b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b2:	1c7b      	adds	r3, r7, #1
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ba:	1cbb      	adds	r3, r7, #2
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c2:	e003      	b.n	80042cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c4:	1cbb      	adds	r3, r7, #2
 80042c6:	881a      	ldrh	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	0049      	lsls	r1, r1, #1
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40007000 	.word	0x40007000

080042f0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	000a      	movs	r2, r1
 80042fa:	1cfb      	adds	r3, r7, #3
 80042fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_PWR_EnterSTOPMode+0x68>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2207      	movs	r2, #7
 800430a:	4393      	bics	r3, r2
 800430c:	001a      	movs	r2, r3
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_PWR_EnterSTOPMode+0x68>)
 8004310:	2101      	movs	r1, #1
 8004312:	430a      	orrs	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e005      	b.n	8004324 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_PWR_EnterSTOPMode+0x68>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_PWR_EnterSTOPMode+0x68>)
 800431e:	2107      	movs	r1, #7
 8004320:	438a      	bics	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_PWR_EnterSTOPMode+0x6c>)
 800432a:	2104      	movs	r1, #4
 800432c:	430a      	orrs	r2, r1
 800432e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004330:	1cfb      	adds	r3, r7, #3
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004338:	bf30      	wfi
 800433a:	e002      	b.n	8004342 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800433c:	bf40      	sev
    __WFE();
 800433e:	bf20      	wfe
    __WFE();
 8004340:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004348:	2104      	movs	r1, #4
 800434a:	438a      	bics	r2, r1
 800434c:	611a      	str	r2, [r3, #16]
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40007000 	.word	0x40007000
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d11f      	bne.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	0013      	movs	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	189b      	adds	r3, r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4912      	ldr	r1, [pc, #72]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004392:	0018      	movs	r0, r3
 8004394:	f7fb fed2 	bl	800013c <__udivsi3>
 8004398:	0003      	movs	r3, r0
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800439e:	e008      	b.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e001      	b.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e009      	b.n	80043c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	401a      	ands	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d0ed      	beq.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40007000 	.word	0x40007000
 80043d4:	fffff9ff 	.word	0xfffff9ff
 80043d8:	20000008 	.word	0x20000008
 80043dc:	000f4240 	.word	0x000f4240

080043e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	23e0      	movs	r3, #224	; 0xe0
 80043ea:	01db      	lsls	r3, r3, #7
 80043ec:	4013      	ands	r3, r2
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f000 fb50 	bl	8004aac <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_RCC_OscConfig+0x20>
 8004416:	e07c      	b.n	8004512 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004418:	4bc3      	ldr	r3, [pc, #780]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2238      	movs	r2, #56	; 0x38
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004422:	4bc1      	ldr	r3, [pc, #772]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2203      	movs	r2, #3
 8004428:	4013      	ands	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b10      	cmp	r3, #16
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x40>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d002      	beq.n	800443e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b08      	cmp	r3, #8
 800443c:	d10b      	bne.n	8004456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	4bba      	ldr	r3, [pc, #744]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	4013      	ands	r3, r2
 8004448:	d062      	beq.n	8004510 <HAL_RCC_OscConfig+0x118>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d15e      	bne.n	8004510 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e32a      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	429a      	cmp	r2, r3
 8004460:	d107      	bne.n	8004472 <HAL_RCC_OscConfig+0x7a>
 8004462:	4bb1      	ldr	r3, [pc, #708]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4bb0      	ldr	r3, [pc, #704]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0249      	lsls	r1, r1, #9
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e020      	b.n	80044b4 <HAL_RCC_OscConfig+0xbc>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	23a0      	movs	r3, #160	; 0xa0
 8004478:	02db      	lsls	r3, r3, #11
 800447a:	429a      	cmp	r2, r3
 800447c:	d10e      	bne.n	800449c <HAL_RCC_OscConfig+0xa4>
 800447e:	4baa      	ldr	r3, [pc, #680]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4ba9      	ldr	r3, [pc, #676]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	02c9      	lsls	r1, r1, #11
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	4ba6      	ldr	r3, [pc, #664]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4ba5      	ldr	r3, [pc, #660]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	0249      	lsls	r1, r1, #9
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xbc>
 800449c:	4ba2      	ldr	r3, [pc, #648]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4ba1      	ldr	r3, [pc, #644]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80044a2:	49a2      	ldr	r1, [pc, #648]	; (800472c <HAL_RCC_OscConfig+0x334>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	4b9f      	ldr	r3, [pc, #636]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b9e      	ldr	r3, [pc, #632]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80044ae:	49a0      	ldr	r1, [pc, #640]	; (8004730 <HAL_RCC_OscConfig+0x338>)
 80044b0:	400a      	ands	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d014      	beq.n	80044e6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7ff fb38 	bl	8003b30 <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c6:	f7ff fb33 	bl	8003b30 <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b64      	cmp	r3, #100	; 0x64
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e2e9      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d8:	4b93      	ldr	r3, [pc, #588]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	4013      	ands	r3, r2
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0xce>
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7ff fb23 	bl	8003b30 <HAL_GetTick>
 80044ea:	0003      	movs	r3, r0
 80044ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f0:	f7ff fb1e 	bl	8003b30 <HAL_GetTick>
 80044f4:	0002      	movs	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e2d4      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004502:	4b89      	ldr	r3, [pc, #548]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	029b      	lsls	r3, r3, #10
 800450a:	4013      	ands	r3, r2
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0xf8>
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2202      	movs	r2, #2
 8004518:	4013      	ands	r3, r2
 800451a:	d100      	bne.n	800451e <HAL_RCC_OscConfig+0x126>
 800451c:	e099      	b.n	8004652 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b82      	ldr	r3, [pc, #520]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2238      	movs	r2, #56	; 0x38
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b7f      	ldr	r3, [pc, #508]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2203      	movs	r2, #3
 800452e:	4013      	ands	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d102      	bne.n	800453e <HAL_RCC_OscConfig+0x146>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d002      	beq.n	8004544 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d135      	bne.n	80045b0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	4b78      	ldr	r3, [pc, #480]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4013      	ands	r3, r2
 800454e:	d005      	beq.n	800455c <HAL_RCC_OscConfig+0x164>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e2a7      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4b72      	ldr	r3, [pc, #456]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4a74      	ldr	r2, [pc, #464]	; (8004734 <HAL_RCC_OscConfig+0x33c>)
 8004562:	4013      	ands	r3, r2
 8004564:	0019      	movs	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d112      	bne.n	800459e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004578:	4b6b      	ldr	r3, [pc, #428]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x340>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0adb      	lsrs	r3, r3, #11
 8004592:	2207      	movs	r2, #7
 8004594:	4013      	ands	r3, r2
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_RCC_OscConfig+0x344>)
 8004598:	40da      	lsrs	r2, r3
 800459a:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCC_OscConfig+0x348>)
 800459c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800459e:	4b69      	ldr	r3, [pc, #420]	; (8004744 <HAL_RCC_OscConfig+0x34c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa68 	bl	8003a78 <HAL_InitTick>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d051      	beq.n	8004650 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e27d      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d030      	beq.n	800461a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a5e      	ldr	r2, [pc, #376]	; (8004738 <HAL_RCC_OscConfig+0x340>)
 80045be:	4013      	ands	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b55      	ldr	r3, [pc, #340]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80045d2:	2180      	movs	r1, #128	; 0x80
 80045d4:	0049      	lsls	r1, r1, #1
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7ff faa9 	bl	8003b30 <HAL_GetTick>
 80045de:	0003      	movs	r3, r0
 80045e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7ff faa4 	bl	8003b30 <HAL_GetTick>
 80045e8:	0002      	movs	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e25a      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f6:	4b4c      	ldr	r3, [pc, #304]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4013      	ands	r3, r2
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b49      	ldr	r3, [pc, #292]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4a4b      	ldr	r2, [pc, #300]	; (8004734 <HAL_RCC_OscConfig+0x33c>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	4b45      	ldr	r3, [pc, #276]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	e01b      	b.n	8004652 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b42      	ldr	r3, [pc, #264]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004620:	4949      	ldr	r1, [pc, #292]	; (8004748 <HAL_RCC_OscConfig+0x350>)
 8004622:	400a      	ands	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7ff fa83 	bl	8003b30 <HAL_GetTick>
 800462a:	0003      	movs	r3, r0
 800462c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7ff fa7e 	bl	8003b30 <HAL_GetTick>
 8004634:	0002      	movs	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e234      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4013      	ands	r3, r2
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x238>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004650:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2208      	movs	r2, #8
 8004658:	4013      	ands	r3, r2
 800465a:	d047      	beq.n	80046ec <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800465c:	4b32      	ldr	r3, [pc, #200]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2238      	movs	r2, #56	; 0x38
 8004662:	4013      	ands	r3, r2
 8004664:	2b18      	cmp	r3, #24
 8004666:	d10a      	bne.n	800467e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004668:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	2202      	movs	r2, #2
 800466e:	4013      	ands	r3, r2
 8004670:	d03c      	beq.n	80046ec <HAL_RCC_OscConfig+0x2f4>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d138      	bne.n	80046ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e216      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800468c:	2101      	movs	r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7ff fa4d 	bl	8003b30 <HAL_GetTick>
 8004696:	0003      	movs	r3, r0
 8004698:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7ff fa48 	bl	8003b30 <HAL_GetTick>
 80046a0:	0002      	movs	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1fe      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d0f1      	beq.n	800469c <HAL_RCC_OscConfig+0x2a4>
 80046b8:	e018      	b.n	80046ec <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80046bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80046c0:	2101      	movs	r1, #1
 80046c2:	438a      	bics	r2, r1
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7ff fa33 	bl	8003b30 <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7ff fa2e 	bl	8003b30 <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1e4      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	2202      	movs	r2, #2
 80046e8:	4013      	ands	r3, r2
 80046ea:	d1f1      	bne.n	80046d0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2204      	movs	r2, #4
 80046f2:	4013      	ands	r3, r2
 80046f4:	d100      	bne.n	80046f8 <HAL_RCC_OscConfig+0x300>
 80046f6:	e0c7      	b.n	8004888 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f8:	231f      	movs	r3, #31
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2238      	movs	r2, #56	; 0x38
 8004706:	4013      	ands	r3, r2
 8004708:	2b20      	cmp	r3, #32
 800470a:	d11f      	bne.n	800474c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCC_OscConfig+0x330>)
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	2202      	movs	r2, #2
 8004712:	4013      	ands	r3, r2
 8004714:	d100      	bne.n	8004718 <HAL_RCC_OscConfig+0x320>
 8004716:	e0b7      	b.n	8004888 <HAL_RCC_OscConfig+0x490>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d000      	beq.n	8004722 <HAL_RCC_OscConfig+0x32a>
 8004720:	e0b2      	b.n	8004888 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c2      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	40021000 	.word	0x40021000
 800472c:	fffeffff 	.word	0xfffeffff
 8004730:	fffbffff 	.word	0xfffbffff
 8004734:	ffff80ff 	.word	0xffff80ff
 8004738:	ffffc7ff 	.word	0xffffc7ff
 800473c:	00f42400 	.word	0x00f42400
 8004740:	20000008 	.word	0x20000008
 8004744:	2000000c 	.word	0x2000000c
 8004748:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800474c:	4bb5      	ldr	r3, [pc, #724]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800474e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	055b      	lsls	r3, r3, #21
 8004754:	4013      	ands	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_RCC_OscConfig+0x364>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x366>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d011      	beq.n	8004786 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4bb0      	ldr	r3, [pc, #704]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004766:	4baf      	ldr	r3, [pc, #700]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	0549      	lsls	r1, r1, #21
 800476c:	430a      	orrs	r2, r1
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004770:	4bac      	ldr	r3, [pc, #688]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	055b      	lsls	r3, r3, #21
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800477e:	231f      	movs	r3, #31
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004786:	4ba8      	ldr	r3, [pc, #672]	; (8004a28 <HAL_RCC_OscConfig+0x630>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d11a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004792:	4ba5      	ldr	r3, [pc, #660]	; (8004a28 <HAL_RCC_OscConfig+0x630>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4ba4      	ldr	r3, [pc, #656]	; (8004a28 <HAL_RCC_OscConfig+0x630>)
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	0049      	lsls	r1, r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80047a0:	f7ff f9c6 	bl	8003b30 <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7ff f9c1 	bl	8003b30 <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e177      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047bc:	4b9a      	ldr	r3, [pc, #616]	; (8004a28 <HAL_RCC_OscConfig+0x630>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x3e6>
 80047d0:	4b94      	ldr	r3, [pc, #592]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047d4:	4b93      	ldr	r3, [pc, #588]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047d6:	2101      	movs	r1, #1
 80047d8:	430a      	orrs	r2, r1
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c
 80047dc:	e01c      	b.n	8004818 <HAL_RCC_OscConfig+0x420>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x408>
 80047e6:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ea:	4b8e      	ldr	r3, [pc, #568]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047ec:	2104      	movs	r1, #4
 80047ee:	430a      	orrs	r2, r1
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80047f2:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0x420>
 8004800:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004804:	4b87      	ldr	r3, [pc, #540]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	65da      	str	r2, [r3, #92]	; 0x5c
 800480c:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800480e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004810:	4b84      	ldr	r3, [pc, #528]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004812:	2104      	movs	r1, #4
 8004814:	438a      	bics	r2, r1
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d014      	beq.n	800484a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7ff f986 	bl	8003b30 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004828:	e009      	b.n	800483e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7ff f981 	bl	8003b30 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	4a7d      	ldr	r2, [pc, #500]	; (8004a2c <HAL_RCC_OscConfig+0x634>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e136      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483e:	4b79      	ldr	r3, [pc, #484]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x432>
 8004848:	e013      	b.n	8004872 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7ff f971 	bl	8003b30 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004852:	e009      	b.n	8004868 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7ff f96c 	bl	8003b30 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	4a73      	ldr	r2, [pc, #460]	; (8004a2c <HAL_RCC_OscConfig+0x634>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e121      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004868:	4b6e      	ldr	r3, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	2202      	movs	r2, #2
 800486e:	4013      	ands	r3, r2
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004872:	231f      	movs	r3, #31
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800487e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004880:	4b68      	ldr	r3, [pc, #416]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004882:	496b      	ldr	r1, [pc, #428]	; (8004a30 <HAL_RCC_OscConfig+0x638>)
 8004884:	400a      	ands	r2, r1
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2220      	movs	r2, #32
 800488e:	4013      	ands	r3, r2
 8004890:	d039      	beq.n	8004906 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01b      	beq.n	80048d2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	03c9      	lsls	r1, r1, #15
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7ff f942 	bl	8003b30 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b2:	f7ff f93d 	bl	8003b30 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0f3      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048c4:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	4013      	ands	r3, r2
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4ba>
 80048d0:	e019      	b.n	8004906 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d2:	4b54      	ldr	r3, [pc, #336]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048d8:	4956      	ldr	r1, [pc, #344]	; (8004a34 <HAL_RCC_OscConfig+0x63c>)
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7ff f927 	bl	8003b30 <HAL_GetTick>
 80048e2:	0003      	movs	r3, r0
 80048e4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e8:	f7ff f922 	bl	8003b30 <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0d8      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048fa:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	4013      	ands	r3, r2
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d100      	bne.n	8004910 <HAL_RCC_OscConfig+0x518>
 800490e:	e0cc      	b.n	8004aaa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004910:	4b44      	ldr	r3, [pc, #272]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2238      	movs	r2, #56	; 0x38
 8004916:	4013      	ands	r3, r2
 8004918:	2b10      	cmp	r3, #16
 800491a:	d100      	bne.n	800491e <HAL_RCC_OscConfig+0x526>
 800491c:	e07b      	b.n	8004a16 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d156      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800492c:	4942      	ldr	r1, [pc, #264]	; (8004a38 <HAL_RCC_OscConfig+0x640>)
 800492e:	400a      	ands	r2, r1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7ff f8fd 	bl	8003b30 <HAL_GetTick>
 8004936:	0003      	movs	r3, r0
 8004938:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7ff f8f8 	bl	8003b30 <HAL_GetTick>
 8004940:	0002      	movs	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0ae      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800494e:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	049b      	lsls	r3, r3, #18
 8004956:	4013      	ands	r3, r2
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4a37      	ldr	r2, [pc, #220]	; (8004a3c <HAL_RCC_OscConfig+0x644>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	431a      	orrs	r2, r3
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800498a:	430a      	orrs	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498e:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	0449      	lsls	r1, r1, #17
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0549      	lsls	r1, r1, #21
 80049a6:	430a      	orrs	r2, r1
 80049a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7ff f8c1 	bl	8003b30 <HAL_GetTick>
 80049ae:	0003      	movs	r3, r0
 80049b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7ff f8bc 	bl	8003b30 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e072      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	049b      	lsls	r3, r3, #18
 80049ce:	4013      	ands	r3, r2
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x5bc>
 80049d2:	e06a      	b.n	8004aaa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80049da:	4917      	ldr	r1, [pc, #92]	; (8004a38 <HAL_RCC_OscConfig+0x640>)
 80049dc:	400a      	ands	r2, r1
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7ff f8a6 	bl	8003b30 <HAL_GetTick>
 80049e4:	0003      	movs	r3, r0
 80049e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7ff f8a1 	bl	8003b30 <HAL_GetTick>
 80049ee:	0002      	movs	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e057      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	049b      	lsls	r3, r3, #18
 8004a04:	4013      	ands	r3, r2
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_OscConfig+0x62c>)
 8004a0e:	490c      	ldr	r1, [pc, #48]	; (8004a40 <HAL_RCC_OscConfig+0x648>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e049      	b.n	8004aaa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e044      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	00001388 	.word	0x00001388
 8004a30:	efffffff 	.word	0xefffffff
 8004a34:	ffbfffff 	.word	0xffbfffff
 8004a38:	feffffff 	.word	0xfeffffff
 8004a3c:	11c1808c 	.word	0x11c1808c
 8004a40:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x6bc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d126      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2270      	movs	r2, #112	; 0x70
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d11f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	23fe      	movs	r3, #254	; 0xfe
 8004a6a:	01db      	lsls	r3, r3, #7
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d116      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	23f8      	movs	r3, #248	; 0xf8
 8004a7c:	039b      	lsls	r3, r3, #14
 8004a7e:	401a      	ands	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d10e      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	23e0      	movs	r3, #224	; 0xe0
 8004a8c:	051b      	lsls	r3, r3, #20
 8004a8e:	401a      	ands	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	0f5b      	lsrs	r3, r3, #29
 8004a9c:	075a      	lsls	r2, r3, #29
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b008      	add	sp, #32
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0e9      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b76      	ldr	r3, [pc, #472]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d91e      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b73      	ldr	r3, [pc, #460]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2207      	movs	r2, #7
 8004ae0:	4393      	bics	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	4b70      	ldr	r3, [pc, #448]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004aec:	f7ff f820 	bl	8003b30 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004af4:	e009      	b.n	8004b0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af6:	f7ff f81b 	bl	8003b30 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	4a6a      	ldr	r2, [pc, #424]	; (8004cac <HAL_RCC_ClockConfig+0x1f4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0ca      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b0a:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2207      	movs	r2, #7
 8004b10:	4013      	ands	r3, r2
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d1ee      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d015      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2204      	movs	r2, #4
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d006      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b2c:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b5f      	ldr	r3, [pc, #380]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b32:	21e0      	movs	r1, #224	; 0xe0
 8004b34:	01c9      	lsls	r1, r1, #7
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	d057      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d12b      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e097      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b78:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	049b      	lsls	r3, r3, #18
 8004b80:	4013      	ands	r3, r2
 8004b82:	d11f      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e08b      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d113      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e07f      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba8:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e074      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e06d      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc4:	4b3a      	ldr	r3, [pc, #232]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2207      	movs	r2, #7
 8004bca:	4393      	bics	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fe ffaa 	bl	8003b30 <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be0:	e009      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be2:	f7fe ffa5 	bl	8003b30 <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	4a2f      	ldr	r2, [pc, #188]	; (8004cac <HAL_RCC_ClockConfig+0x1f4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e054      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2238      	movs	r2, #56	; 0x38
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1ec      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	4013      	ands	r3, r2
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d21e      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2207      	movs	r2, #7
 8004c1c:	4393      	bics	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c28:	f7fe ff82 	bl	8003b30 <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c30:	e009      	b.n	8004c46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c32:	f7fe ff7d 	bl	8003b30 <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_RCC_ClockConfig+0x1f4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e02c      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <HAL_RCC_ClockConfig+0x200>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	0019      	movs	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c72:	f000 f829 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c76:	0001      	movs	r1, r0
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	220f      	movs	r2, #15
 8004c80:	401a      	ands	r2, r3
 8004c82:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <HAL_RCC_ClockConfig+0x204>)
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	58d3      	ldr	r3, [r2, r3]
 8004c88:	221f      	movs	r2, #31
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	000a      	movs	r2, r1
 8004c8e:	40da      	lsrs	r2, r3
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCC_ClockConfig+0x208>)
 8004c92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <HAL_RCC_ClockConfig+0x20c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fe feed 	bl	8003a78 <HAL_InitTick>
 8004c9e:	0003      	movs	r3, r0
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	00001388 	.word	0x00001388
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	fffff0ff 	.word	0xfffff0ff
 8004cb8:	ffff8fff 	.word	0xffff8fff
 8004cbc:	08013cb4 	.word	0x08013cb4
 8004cc0:	20000008 	.word	0x20000008
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b3c      	ldr	r3, [pc, #240]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2238      	movs	r2, #56	; 0x38
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d10f      	bne.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cd8:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0adb      	lsrs	r3, r3, #11
 8004cde:	2207      	movs	r2, #7
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	4835      	ldr	r0, [pc, #212]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cee:	f7fb fa25 	bl	800013c <__udivsi3>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	e05d      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2238      	movs	r2, #56	; 0x38
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d102      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	e054      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d0a:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2238      	movs	r2, #56	; 0x38
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d138      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d20:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	2207      	movs	r2, #7
 8004d28:	4013      	ands	r3, r2
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4824      	ldr	r0, [pc, #144]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d38:	f7fb fa00 	bl	800013c <__udivsi3>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	0019      	movs	r1, r3
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	227f      	movs	r2, #127	; 0x7f
 8004d48:	4013      	ands	r3, r2
 8004d4a:	434b      	muls	r3, r1
 8004d4c:	617b      	str	r3, [r7, #20]
        break;
 8004d4e:	e00d      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	481c      	ldr	r0, [pc, #112]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d54:	f7fb f9f2 	bl	800013c <__udivsi3>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	227f      	movs	r2, #127	; 0x7f
 8004d64:	4013      	ands	r3, r2
 8004d66:	434b      	muls	r3, r1
 8004d68:	617b      	str	r3, [r7, #20]
        break;
 8004d6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0f5b      	lsrs	r3, r3, #29
 8004d72:	2207      	movs	r2, #7
 8004d74:	4013      	ands	r3, r2
 8004d76:	3301      	adds	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	6978      	ldr	r0, [r7, #20]
 8004d7e:	f7fb f9dd 	bl	800013c <__udivsi3>
 8004d82:	0003      	movs	r3, r0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e015      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2238      	movs	r2, #56	; 0x38
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d103      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d9c:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2238      	movs	r2, #56	; 0x38
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b18      	cmp	r3, #24
 8004da6:	d103      	bne.n	8004db0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004da8:	23fa      	movs	r3, #250	; 0xfa
 8004daa:	01db      	lsls	r3, r3, #7
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e001      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004db4:	693b      	ldr	r3, [r7, #16]
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b006      	add	sp, #24
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	00f42400 	.word	0x00f42400
 8004dc8:	007a1200 	.word	0x007a1200

08004dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	20000008 	.word	0x20000008

08004de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004de4:	f7ff fff2 	bl	8004dcc <HAL_RCC_GetHCLKFreq>
 8004de8:	0004      	movs	r4, r0
 8004dea:	f7ff faf9 	bl	80043e0 <LL_RCC_GetAPB1Prescaler>
 8004dee:	0003      	movs	r3, r0
 8004df0:	0b1a      	lsrs	r2, r3, #12
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	58d3      	ldr	r3, [r2, r3]
 8004df8:	221f      	movs	r2, #31
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	40dc      	lsrs	r4, r3
 8004dfe:	0023      	movs	r3, r4
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bdb0      	pop	{r4, r5, r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	08013cf4 	.word	0x08013cf4

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e14:	2313      	movs	r3, #19
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e1c:	2312      	movs	r3, #18
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e30:	e0ad      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e32:	2011      	movs	r0, #17
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3a:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	055b      	lsls	r3, r3, #21
 8004e42:	4013      	ands	r3, r2
 8004e44:	d110      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e46:	4b44      	ldr	r3, [pc, #272]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	0549      	lsls	r1, r1, #21
 8004e50:	430a      	orrs	r2, r1
 8004e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e54:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	055b      	lsls	r3, r3, #21
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	0049      	lsls	r1, r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e76:	f7fe fe5b 	bl	8003b30 <HAL_GetTick>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fe fe56 	bl	8003b30 <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d904      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e8e:	2313      	movs	r3, #19
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	2203      	movs	r2, #3
 8004e94:	701a      	strb	r2, [r3, #0]
        break;
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e98:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d0ed      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004ea4:	2313      	movs	r3, #19
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d15e      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eb2:	23c0      	movs	r3, #192	; 0xc0
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d019      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d014      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004eda:	2180      	movs	r1, #128	; 0x80
 8004edc:	0249      	lsls	r1, r1, #9
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ee8:	491e      	ldr	r1, [pc, #120]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eee:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d016      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe fe18 	bl	8003b30 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f04:	e00c      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fe fe13 	bl	8003b30 <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d904      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f16:	2313      	movs	r3, #19
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	701a      	strb	r2, [r3, #0]
            break;
 8004f1e:	e004      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d0ed      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f2a:	2313      	movs	r3, #19
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f48:	e016      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f4a:	2312      	movs	r3, #18
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2213      	movs	r2, #19
 8004f50:	18ba      	adds	r2, r7, r2
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e00f      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	fffffcff 	.word	0xfffffcff
 8004f64:	fffeffff 	.word	0xfffeffff
 8004f68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	2312      	movs	r3, #18
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2213      	movs	r2, #19
 8004f72:	18ba      	adds	r2, r7, r2
 8004f74:	7812      	ldrb	r2, [r2, #0]
 8004f76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f78:	2311      	movs	r3, #17
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d105      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f82:	4bb6      	ldr	r3, [pc, #728]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f86:	4bb5      	ldr	r3, [pc, #724]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f88:	49b5      	ldr	r1, [pc, #724]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f98:	4bb0      	ldr	r3, [pc, #704]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	4393      	bics	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4bad      	ldr	r3, [pc, #692]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb6:	4ba9      	ldr	r3, [pc, #676]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	220c      	movs	r2, #12
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4ba5      	ldr	r3, [pc, #660]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd4:	4ba1      	ldr	r3, [pc, #644]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	2230      	movs	r2, #48	; 0x30
 8004fda:	4393      	bics	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	4b9e      	ldr	r3, [pc, #632]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ff2:	4b9a      	ldr	r3, [pc, #616]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	4a9b      	ldr	r2, [pc, #620]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	4b96      	ldr	r3, [pc, #600]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005002:	430a      	orrs	r2, r1
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	015b      	lsls	r3, r3, #5
 800500e:	4013      	ands	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005012:	4b92      	ldr	r3, [pc, #584]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	4a94      	ldr	r2, [pc, #592]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	4b8e      	ldr	r3, [pc, #568]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005022:	430a      	orrs	r2, r1
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4013      	ands	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005032:	4b8a      	ldr	r3, [pc, #552]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	4a8d      	ldr	r2, [pc, #564]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005038:	4013      	ands	r3, r2
 800503a:	0019      	movs	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005040:	4b86      	ldr	r3, [pc, #536]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005042:	430a      	orrs	r2, r1
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4013      	ands	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005052:	4b82      	ldr	r3, [pc, #520]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	4a86      	ldr	r2, [pc, #536]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005058:	4013      	ands	r3, r2
 800505a:	0019      	movs	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005060:	4b7e      	ldr	r3, [pc, #504]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005062:	430a      	orrs	r2, r1
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2220      	movs	r2, #32
 800506c:	4013      	ands	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005070:	4b7a      	ldr	r3, [pc, #488]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005076:	4013      	ands	r3, r2
 8005078:	0019      	movs	r1, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	4b77      	ldr	r3, [pc, #476]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005080:	430a      	orrs	r2, r1
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2240      	movs	r2, #64	; 0x40
 800508a:	4013      	ands	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800508e:	4b73      	ldr	r3, [pc, #460]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	4a79      	ldr	r2, [pc, #484]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	4b6f      	ldr	r3, [pc, #444]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800509e:	430a      	orrs	r2, r1
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	2380      	movs	r3, #128	; 0x80
 80050a8:	01db      	lsls	r3, r3, #7
 80050aa:	4013      	ands	r3, r2
 80050ac:	d015      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ae:	4b6b      	ldr	r3, [pc, #428]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	0899      	lsrs	r1, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ba:	4b68      	ldr	r3, [pc, #416]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050bc:	430a      	orrs	r2, r1
 80050be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80050cc:	4b63      	ldr	r3, [pc, #396]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4b62      	ldr	r3, [pc, #392]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	0249      	lsls	r1, r1, #9
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	4013      	ands	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050e6:	4b5d      	ldr	r3, [pc, #372]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	4393      	bics	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	039b      	lsls	r3, r3, #14
 8005102:	4013      	ands	r3, r2
 8005104:	d016      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005106:	4b55      	ldr	r3, [pc, #340]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	4a5c      	ldr	r2, [pc, #368]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800510c:	4013      	ands	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005114:	4b51      	ldr	r3, [pc, #324]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005116:	430a      	orrs	r2, r1
 8005118:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	03db      	lsls	r3, r3, #15
 8005122:	429a      	cmp	r2, r3
 8005124:	d106      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005126:	4b4d      	ldr	r3, [pc, #308]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	4b4c      	ldr	r3, [pc, #304]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	0449      	lsls	r1, r1, #17
 8005130:	430a      	orrs	r2, r1
 8005132:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	03db      	lsls	r3, r3, #15
 800513c:	4013      	ands	r3, r2
 800513e:	d016      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005140:	4b46      	ldr	r3, [pc, #280]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005146:	4013      	ands	r3, r2
 8005148:	0019      	movs	r1, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005150:	430a      	orrs	r2, r1
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	045b      	lsls	r3, r3, #17
 800515c:	429a      	cmp	r2, r3
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005160:	4b3e      	ldr	r3, [pc, #248]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	4b3d      	ldr	r3, [pc, #244]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	0449      	lsls	r1, r1, #17
 800516a:	430a      	orrs	r2, r1
 800516c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4013      	ands	r3, r2
 8005178:	d014      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800517a:	4b38      	ldr	r3, [pc, #224]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	2203      	movs	r2, #3
 8005180:	4393      	bics	r3, r2
 8005182:	0019      	movs	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	4b34      	ldr	r3, [pc, #208]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800518a:	430a      	orrs	r2, r1
 800518c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d106      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005196:	4b31      	ldr	r3, [pc, #196]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	0249      	lsls	r1, r1, #9
 80051a0:	430a      	orrs	r2, r1
 80051a2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	4013      	ands	r3, r2
 80051ae:	d014      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	220c      	movs	r2, #12
 80051b6:	4393      	bics	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051c0:	430a      	orrs	r2, r1
 80051c2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051cc:	4b23      	ldr	r3, [pc, #140]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	0249      	lsls	r1, r1, #9
 80051d6:	430a      	orrs	r2, r1
 80051d8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	045b      	lsls	r3, r3, #17
 80051e2:	4013      	ands	r3, r2
 80051e4:	d016      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051f6:	430a      	orrs	r2, r1
 80051f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	429a      	cmp	r2, r3
 8005204:	d106      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	0449      	lsls	r1, r1, #17
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	049b      	lsls	r3, r3, #18
 800521c:	4013      	ands	r3, r2
 800521e:	d016      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	4a10      	ldr	r2, [pc, #64]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005230:	430a      	orrs	r2, r1
 8005232:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	429a      	cmp	r2, r3
 800523e:	d106      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	0449      	lsls	r1, r1, #17
 800524a:	430a      	orrs	r2, r1
 800524c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800524e:	2312      	movs	r3, #18
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b006      	add	sp, #24
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40021000 	.word	0x40021000
 8005260:	efffffff 	.word	0xefffffff
 8005264:	fffff3ff 	.word	0xfffff3ff
 8005268:	fffffcff 	.word	0xfffffcff
 800526c:	fff3ffff 	.word	0xfff3ffff
 8005270:	ffcfffff 	.word	0xffcfffff
 8005274:	ffffcfff 	.word	0xffffcfff
 8005278:	ffff3fff 	.word	0xffff3fff
 800527c:	ffbfffff 	.word	0xffbfffff
 8005280:	feffffff 	.word	0xfeffffff

08005284 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800528c:	230f      	movs	r3, #15
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d100      	bne.n	800529c <HAL_RTC_Init+0x18>
 800529a:	e08c      	b.n	80053b6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2229      	movs	r2, #41	; 0x29
 80052a0:	5c9b      	ldrb	r3, [r3, r2]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2228      	movs	r2, #40	; 0x28
 80052ac:	2100      	movs	r1, #0
 80052ae:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2288      	movs	r2, #136	; 0x88
 80052b4:	0212      	lsls	r2, r2, #8
 80052b6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	0018      	movs	r0, r3
 80052bc:	f7fe f856 	bl	800336c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2229      	movs	r2, #41	; 0x29
 80052c4:	2102      	movs	r1, #2
 80052c6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2210      	movs	r2, #16
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d062      	beq.n	800539c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	22ca      	movs	r2, #202	; 0xca
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2253      	movs	r2, #83	; 0x53
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80052e6:	250f      	movs	r5, #15
 80052e8:	197c      	adds	r4, r7, r5
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 fbf3 	bl	8005ad8 <RTC_EnterInitMode>
 80052f2:	0003      	movs	r3, r0
 80052f4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80052f6:	0028      	movs	r0, r5
 80052f8:	183b      	adds	r3, r7, r0
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d12c      	bne.n	800535a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	492e      	ldr	r1, [pc, #184]	; (80053c4 <HAL_RTC_Init+0x140>)
 800530c:	400a      	ands	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6912      	ldr	r2, [r2, #16]
 8005336:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6919      	ldr	r1, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	041a      	lsls	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800534c:	183c      	adds	r4, r7, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 fc03 	bl	8005b5c <RTC_ExitInitMode>
 8005356:	0003      	movs	r3, r0
 8005358:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800535a:	230f      	movs	r3, #15
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d116      	bne.n	8005392 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	00d2      	lsls	r2, r2, #3
 8005370:	08d2      	lsrs	r2, r2, #3
 8005372:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6999      	ldr	r1, [r3, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	22ff      	movs	r2, #255	; 0xff
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	e003      	b.n	80053a4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800539c:	230f      	movs	r3, #15
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80053a4:	230f      	movs	r3, #15
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2229      	movs	r2, #41	; 0x29
 80053b2:	2101      	movs	r1, #1
 80053b4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80053b6:	230f      	movs	r3, #15
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	781b      	ldrb	r3, [r3, #0]
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b004      	add	sp, #16
 80053c2:	bdb0      	pop	{r4, r5, r7, pc}
 80053c4:	fb8fffbf 	.word	0xfb8fffbf

080053c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053c8:	b5b0      	push	{r4, r5, r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2228      	movs	r2, #40	; 0x28
 80053d8:	5c9b      	ldrb	r3, [r3, r2]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_RTC_SetTime+0x1a>
 80053de:	2302      	movs	r3, #2
 80053e0:	e092      	b.n	8005508 <HAL_RTC_SetTime+0x140>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2228      	movs	r2, #40	; 0x28
 80053e6:	2101      	movs	r1, #1
 80053e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2229      	movs	r2, #41	; 0x29
 80053ee:	2102      	movs	r1, #2
 80053f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	22ca      	movs	r2, #202	; 0xca
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2253      	movs	r2, #83	; 0x53
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005402:	2513      	movs	r5, #19
 8005404:	197c      	adds	r4, r7, r5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 fb65 	bl	8005ad8 <RTC_EnterInitMode>
 800540e:	0003      	movs	r3, r0
 8005410:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005412:	197b      	adds	r3, r7, r5
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d162      	bne.n	80054e0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d125      	bne.n	800546c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2240      	movs	r2, #64	; 0x40
 8005428:	4013      	ands	r3, r2
 800542a:	d102      	bne.n	8005432 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	0018      	movs	r0, r3
 8005438:	f000 fbd4 	bl	8005be4 <RTC_ByteToBcd2>
 800543c:	0003      	movs	r3, r0
 800543e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	0018      	movs	r0, r3
 8005446:	f000 fbcd 	bl	8005be4 <RTC_ByteToBcd2>
 800544a:	0003      	movs	r3, r0
 800544c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800544e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	789b      	ldrb	r3, [r3, #2]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 fbc5 	bl	8005be4 <RTC_ByteToBcd2>
 800545a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800545c:	0022      	movs	r2, r4
 800545e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	78db      	ldrb	r3, [r3, #3]
 8005464:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e017      	b.n	800549c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2240      	movs	r2, #64	; 0x40
 8005474:	4013      	ands	r3, r2
 8005476:	d102      	bne.n	800547e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800548a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005490:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	491b      	ldr	r1, [pc, #108]	; (8005510 <HAL_RTC_SetTime+0x148>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4918      	ldr	r1, [pc, #96]	; (8005514 <HAL_RTC_SetTime+0x14c>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6999      	ldr	r1, [r3, #24]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054d0:	2313      	movs	r3, #19
 80054d2:	18fc      	adds	r4, r7, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f000 fb40 	bl	8005b5c <RTC_ExitInitMode>
 80054dc:	0003      	movs	r3, r0
 80054de:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80054e8:	2313      	movs	r3, #19
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2229      	movs	r2, #41	; 0x29
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2228      	movs	r2, #40	; 0x28
 80054fe:	2100      	movs	r1, #0
 8005500:	5499      	strb	r1, [r3, r2]

  return status;
 8005502:	2313      	movs	r3, #19
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	781b      	ldrb	r3, [r3, #0]
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b006      	add	sp, #24
 800550e:	bdb0      	pop	{r4, r5, r7, pc}
 8005510:	007f7f7f 	.word	0x007f7f7f
 8005514:	fffbffff 	.word	0xfffbffff

08005518 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	045b      	lsls	r3, r3, #17
 8005536:	0c5a      	lsrs	r2, r3, #17
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_RTC_GetTime+0xb4>)
 8005544:	4013      	ands	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	b2db      	uxtb	r3, r3
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	4013      	ands	r3, r2
 8005552:	b2da      	uxtb	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	b2db      	uxtb	r3, r3
 800555e:	227f      	movs	r2, #127	; 0x7f
 8005560:	4013      	ands	r3, r2
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	227f      	movs	r2, #127	; 0x7f
 800556e:	4013      	ands	r3, r2
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	0d9b      	lsrs	r3, r3, #22
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2201      	movs	r2, #1
 800557e:	4013      	ands	r3, r2
 8005580:	b2da      	uxtb	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11a      	bne.n	80055c2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	0018      	movs	r0, r3
 8005592:	f000 fb4f 	bl	8005c34 <RTC_Bcd2ToByte>
 8005596:	0003      	movs	r3, r0
 8005598:	001a      	movs	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f000 fb46 	bl	8005c34 <RTC_Bcd2ToByte>
 80055a8:	0003      	movs	r3, r0
 80055aa:	001a      	movs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	789b      	ldrb	r3, [r3, #2]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 fb3d 	bl	8005c34 <RTC_Bcd2ToByte>
 80055ba:	0003      	movs	r3, r0
 80055bc:	001a      	movs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b006      	add	sp, #24
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	007f7f7f 	.word	0x007f7f7f

080055d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2228      	movs	r2, #40	; 0x28
 80055e0:	5c9b      	ldrb	r3, [r3, r2]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_RTC_SetDate+0x1a>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e07e      	b.n	80056e8 <HAL_RTC_SetDate+0x118>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2228      	movs	r2, #40	; 0x28
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2229      	movs	r2, #41	; 0x29
 80055f6:	2102      	movs	r1, #2
 80055f8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10e      	bne.n	800561e <HAL_RTC_SetDate+0x4e>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	001a      	movs	r2, r3
 8005606:	2310      	movs	r3, #16
 8005608:	4013      	ands	r3, r2
 800560a:	d008      	beq.n	800561e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2210      	movs	r2, #16
 8005612:	4393      	bics	r3, r2
 8005614:	b2db      	uxtb	r3, r3
 8005616:	330a      	adds	r3, #10
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11c      	bne.n	800565e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	0018      	movs	r0, r3
 800562a:	f000 fadb 	bl	8005be4 <RTC_ByteToBcd2>
 800562e:	0003      	movs	r3, r0
 8005630:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fad4 	bl	8005be4 <RTC_ByteToBcd2>
 800563c:	0003      	movs	r3, r0
 800563e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005640:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	789b      	ldrb	r3, [r3, #2]
 8005646:	0018      	movs	r0, r3
 8005648:	f000 facc 	bl	8005be4 <RTC_ByteToBcd2>
 800564c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800564e:	0022      	movs	r2, r4
 8005650:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e00e      	b.n	800567c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	78db      	ldrb	r3, [r3, #3]
 8005662:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800566a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005670:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	22ca      	movs	r2, #202	; 0xca
 8005682:	625a      	str	r2, [r3, #36]	; 0x24
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2253      	movs	r2, #83	; 0x53
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800568c:	2513      	movs	r5, #19
 800568e:	197c      	adds	r4, r7, r5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	0018      	movs	r0, r3
 8005694:	f000 fa20 	bl	8005ad8 <RTC_EnterInitMode>
 8005698:	0003      	movs	r3, r0
 800569a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800569c:	0028      	movs	r0, r5
 800569e:	183b      	adds	r3, r7, r0
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4910      	ldr	r1, [pc, #64]	; (80056f0 <HAL_RTC_SetDate+0x120>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056b2:	183c      	adds	r4, r7, r0
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 fa50 	bl	8005b5c <RTC_ExitInitMode>
 80056bc:	0003      	movs	r3, r0
 80056be:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80056c8:	2313      	movs	r3, #19
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2229      	movs	r2, #41	; 0x29
 80056d6:	2101      	movs	r1, #1
 80056d8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2228      	movs	r2, #40	; 0x28
 80056de:	2100      	movs	r1, #0
 80056e0:	5499      	strb	r1, [r3, r2]

  return status;
 80056e2:	2313      	movs	r3, #19
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b006      	add	sp, #24
 80056ee:	bdb0      	pop	{r4, r5, r7, pc}
 80056f0:	00ffff3f 	.word	0x00ffff3f

080056f4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_RTC_GetDate+0x98>)
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b2db      	uxtb	r3, r3
 800571c:	221f      	movs	r2, #31
 800571e:	4013      	ands	r3, r2
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	223f      	movs	r2, #63	; 0x3f
 800572c:	4013      	ands	r3, r2
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	0b5b      	lsrs	r3, r3, #13
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2207      	movs	r2, #7
 800573c:	4013      	ands	r3, r2
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11a      	bne.n	8005780 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	78db      	ldrb	r3, [r3, #3]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fa70 	bl	8005c34 <RTC_Bcd2ToByte>
 8005754:	0003      	movs	r3, r0
 8005756:	001a      	movs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	0018      	movs	r0, r3
 8005762:	f000 fa67 	bl	8005c34 <RTC_Bcd2ToByte>
 8005766:	0003      	movs	r3, r0
 8005768:	001a      	movs	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	0018      	movs	r0, r3
 8005774:	f000 fa5e 	bl	8005c34 <RTC_Bcd2ToByte>
 8005778:	0003      	movs	r3, r0
 800577a:	001a      	movs	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	0018      	movs	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	b006      	add	sp, #24
 8005788:	bd80      	pop	{r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	00ffff3f 	.word	0x00ffff3f

08005790 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2228      	movs	r2, #40	; 0x28
 80057a0:	5c9b      	ldrb	r3, [r3, r2]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_RTC_SetAlarm_IT+0x1a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e127      	b.n	80059fa <HAL_RTC_SetAlarm_IT+0x26a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2228      	movs	r2, #40	; 0x28
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2229      	movs	r2, #41	; 0x29
 80057b6:	2102      	movs	r1, #2
 80057b8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d136      	bne.n	800582e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	4013      	ands	r3, r2
 80057ca:	d102      	bne.n	80057d2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 fa04 	bl	8005be4 <RTC_ByteToBcd2>
 80057dc:	0003      	movs	r3, r0
 80057de:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 f9fd 	bl	8005be4 <RTC_ByteToBcd2>
 80057ea:	0003      	movs	r3, r0
 80057ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80057ee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	789b      	ldrb	r3, [r3, #2]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f9f5 	bl	8005be4 <RTC_ByteToBcd2>
 80057fa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80057fc:	0022      	movs	r2, r4
 80057fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	78db      	ldrb	r3, [r3, #3]
 8005804:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005806:	431a      	orrs	r2, r3
 8005808:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2220      	movs	r2, #32
 800580e:	5c9b      	ldrb	r3, [r3, r2]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f9e7 	bl	8005be4 <RTC_ByteToBcd2>
 8005816:	0003      	movs	r3, r0
 8005818:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800581a:	0022      	movs	r2, r4
 800581c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005822:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005828:	4313      	orrs	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e022      	b.n	8005874 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	4013      	ands	r3, r2
 8005838:	d102      	bne.n	8005840 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800584c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005852:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800585a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2120      	movs	r1, #32
 8005860:	5c5b      	ldrb	r3, [r3, r1]
 8005862:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005864:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800586a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005870:	4313      	orrs	r3, r2
 8005872:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	22ca      	movs	r2, #202	; 0xca
 8005886:	625a      	str	r2, [r3, #36]	; 0x24
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2253      	movs	r2, #83	; 0x53
 800588e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	429a      	cmp	r2, r3
 800589a:	d14c      	bne.n	8005936 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4957      	ldr	r1, [pc, #348]	; (8005a04 <HAL_RTC_SetAlarm_IT+0x274>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2101      	movs	r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80058bc:	f7fe f938 	bl	8003b30 <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80058c4:	e016      	b.n	80058f4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058c6:	f7fe f933 	bl	8003b30 <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	23fa      	movs	r3, #250	; 0xfa
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d90d      	bls.n	80058f4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2229      	movs	r2, #41	; 0x29
 80058e4:	2103      	movs	r1, #3
 80058e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2228      	movs	r2, #40	; 0x28
 80058ec:	2100      	movs	r1, #0
 80058ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e082      	b.n	80059fa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	4013      	ands	r3, r2
 80058fe:	d0e2      	beq.n	80058c6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	0049      	lsls	r1, r1, #1
 800591e:	430a      	orrs	r2, r1
 8005920:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	0149      	lsls	r1, r1, #5
 8005930:	430a      	orrs	r2, r1
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e04b      	b.n	80059ce <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4931      	ldr	r1, [pc, #196]	; (8005a08 <HAL_RTC_SetAlarm_IT+0x278>)
 8005942:	400a      	ands	r2, r1
 8005944:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2102      	movs	r1, #2
 8005952:	430a      	orrs	r2, r1
 8005954:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005956:	f7fe f8eb 	bl	8003b30 <HAL_GetTick>
 800595a:	0003      	movs	r3, r0
 800595c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800595e:	e016      	b.n	800598e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005960:	f7fe f8e6 	bl	8003b30 <HAL_GetTick>
 8005964:	0002      	movs	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	23fa      	movs	r3, #250	; 0xfa
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	429a      	cmp	r2, r3
 8005970:	d90d      	bls.n	800598e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	22ff      	movs	r2, #255	; 0xff
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2229      	movs	r2, #41	; 0x29
 800597e:	2103      	movs	r1, #3
 8005980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2228      	movs	r2, #40	; 0x28
 8005986:	2100      	movs	r1, #0
 8005988:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e035      	b.n	80059fa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2202      	movs	r2, #2
 8005996:	4013      	ands	r3, r2
 8005998:	d0e2      	beq.n	8005960 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699a      	ldr	r2, [r3, #24]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2180      	movs	r1, #128	; 0x80
 80059b6:	0089      	lsls	r1, r1, #2
 80059b8:	430a      	orrs	r2, r1
 80059ba:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0189      	lsls	r1, r1, #6
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80059ce:	4a0f      	ldr	r2, [pc, #60]	; (8005a0c <HAL_RTC_SetAlarm_IT+0x27c>)
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	58d3      	ldr	r3, [r2, r3]
 80059d4:	490d      	ldr	r1, [pc, #52]	; (8005a0c <HAL_RTC_SetAlarm_IT+0x27c>)
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	0312      	lsls	r2, r2, #12
 80059da:	4313      	orrs	r3, r2
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2229      	movs	r2, #41	; 0x29
 80059ec:	2101      	movs	r1, #1
 80059ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2228      	movs	r2, #40	; 0x28
 80059f4:	2100      	movs	r1, #0
 80059f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b009      	add	sp, #36	; 0x24
 8005a00:	bd90      	pop	{r4, r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	fffffeff 	.word	0xfffffeff
 8005a08:	fffffdff 	.word	0xfffffdff
 8005a0c:	40021800 	.word	0x40021800

08005a10 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	015b      	lsls	r3, r3, #5
 8005a22:	4013      	ands	r3, r2
 8005a24:	d011      	beq.n	8005a4a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7fd fc55 	bl	80032f4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	019b      	lsls	r3, r3, #6
 8005a54:	4013      	ands	r3, r2
 8005a56:	d011      	beq.n	8005a7c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	2202      	movs	r2, #2
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2102      	movs	r1, #2
 8005a70:	430a      	orrs	r2, r1
 8005a72:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 f961 	bl	8005d3e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2229      	movs	r2, #41	; 0x29
 8005a80:	2101      	movs	r1, #1
 8005a82:	5499      	strb	r1, [r3, r2]
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <HAL_RTC_WaitForSynchro+0x48>)
 8005a9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a9c:	f7fe f848 	bl	8003b30 <HAL_GetTick>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005aa4:	e00a      	b.n	8005abc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005aa6:	f7fe f843 	bl	8003b30 <HAL_GetTick>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	23fa      	movs	r3, #250	; 0xfa
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d901      	bls.n	8005abc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e006      	b.n	8005aca <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d0ee      	beq.n	8005aa6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	0018      	movs	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b004      	add	sp, #16
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	0001005f 	.word	0x0001005f

08005ad8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005ae0:	230f      	movs	r3, #15
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	4013      	ands	r3, r2
 8005af2:	d12c      	bne.n	8005b4e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b04:	f7fe f814 	bl	8003b30 <HAL_GetTick>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b0c:	e014      	b.n	8005b38 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b0e:	f7fe f80f 	bl	8003b30 <HAL_GetTick>
 8005b12:	0002      	movs	r2, r0
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	200f      	movs	r0, #15
 8005b1a:	183b      	adds	r3, r7, r0
 8005b1c:	1839      	adds	r1, r7, r0
 8005b1e:	7809      	ldrb	r1, [r1, #0]
 8005b20:	7019      	strb	r1, [r3, #0]
 8005b22:	23fa      	movs	r3, #250	; 0xfa
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d906      	bls.n	8005b38 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005b2a:	183b      	adds	r3, r7, r0
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2229      	movs	r2, #41	; 0x29
 8005b34:	2103      	movs	r1, #3
 8005b36:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	4013      	ands	r3, r2
 8005b42:	d104      	bne.n	8005b4e <RTC_EnterInitMode+0x76>
 8005b44:	230f      	movs	r3, #15
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d1df      	bne.n	8005b0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b4e:	230f      	movs	r3, #15
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	781b      	ldrb	r3, [r3, #0]
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	240f      	movs	r4, #15
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	438a      	bics	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b78:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d10d      	bne.n	8005b9e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7ff ff81 	bl	8005a8c <HAL_RTC_WaitForSynchro>
 8005b8a:	1e03      	subs	r3, r0, #0
 8005b8c:	d021      	beq.n	8005bd2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2229      	movs	r2, #41	; 0x29
 8005b92:	2103      	movs	r1, #3
 8005b94:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005b96:	193b      	adds	r3, r7, r4
 8005b98:	2203      	movs	r2, #3
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e019      	b.n	8005bd2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b9e:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005ba4:	2120      	movs	r1, #32
 8005ba6:	438a      	bics	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7ff ff6d 	bl	8005a8c <HAL_RTC_WaitForSynchro>
 8005bb2:	1e03      	subs	r3, r0, #0
 8005bb4:	d007      	beq.n	8005bc6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2229      	movs	r2, #41	; 0x29
 8005bba:	2103      	movs	r1, #3
 8005bbc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005bbe:	230f      	movs	r3, #15
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <RTC_ExitInitMode+0x84>)
 8005bcc:	2120      	movs	r1, #32
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005bd2:	230f      	movs	r3, #15
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	781b      	ldrb	r3, [r3, #0]
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b005      	add	sp, #20
 8005bde:	bd90      	pop	{r4, r7, pc}
 8005be0:	40002800 	.word	0x40002800

08005be4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	0002      	movs	r2, r0
 8005bec:	1dfb      	adds	r3, r7, #7
 8005bee:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005bf4:	230b      	movs	r3, #11
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	1dfa      	adds	r2, r7, #7
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005bfe:	e008      	b.n	8005c12 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005c06:	220b      	movs	r2, #11
 8005c08:	18bb      	adds	r3, r7, r2
 8005c0a:	18ba      	adds	r2, r7, r2
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	3a0a      	subs	r2, #10
 8005c10:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005c12:	210b      	movs	r1, #11
 8005c14:	187b      	adds	r3, r7, r1
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d8f1      	bhi.n	8005c00 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	187b      	adds	r3, r7, r1
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	b2db      	uxtb	r3, r3
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b004      	add	sp, #16
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	1dfb      	adds	r3, r7, #7
 8005c3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005c40:	1dfb      	adds	r3, r7, #7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	001a      	movs	r2, r3
 8005c4a:	0013      	movs	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	1dfb      	adds	r3, r7, #7
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	210f      	movs	r1, #15
 8005c5e:	400b      	ands	r3, r1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	18d3      	adds	r3, r2, r3
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b004      	add	sp, #16
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2228      	movs	r2, #40	; 0x28
 8005c7a:	5c9b      	ldrb	r3, [r3, r2]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e024      	b.n	8005cce <HAL_RTCEx_EnableBypassShadow+0x60>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2228      	movs	r2, #40	; 0x28
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2229      	movs	r2, #41	; 0x29
 8005c90:	2102      	movs	r1, #2
 8005c92:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	22ca      	movs	r2, #202	; 0xca
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2253      	movs	r2, #83	; 0x53
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2120      	movs	r1, #32
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2229      	movs	r2, #41	; 0x29
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2228      	movs	r2, #40	; 0x28
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2228      	movs	r2, #40	; 0x28
 8005ce2:	5c9b      	ldrb	r3, [r3, r2]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_RTCEx_DisableBypassShadow+0x16>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e024      	b.n	8005d36 <HAL_RTCEx_DisableBypassShadow+0x60>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2228      	movs	r2, #40	; 0x28
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2229      	movs	r2, #41	; 0x29
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	22ca      	movs	r2, #202	; 0xca
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2253      	movs	r2, #83	; 0x53
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	21df      	movs	r1, #223	; 0xdf
 8005d18:	400a      	ands	r2, r1
 8005d1a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2229      	movs	r2, #41	; 0x29
 8005d28:	2101      	movs	r1, #1
 8005d2a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2228      	movs	r2, #40	; 0x28
 8005d30:	2100      	movs	r1, #0
 8005d32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b002      	add	sp, #8
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0a8      	b.n	8005eb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	2382      	movs	r3, #130	; 0x82
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d009      	beq.n	8005d8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	61da      	str	r2, [r3, #28]
 8005d7c:	e005      	b.n	8005d8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	225d      	movs	r2, #93	; 0x5d
 8005d94:	5c9b      	ldrb	r3, [r3, r2]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d107      	bne.n	8005dac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	225c      	movs	r2, #92	; 0x5c
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7fd fb26 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	225d      	movs	r2, #93	; 0x5d
 8005db0:	2102      	movs	r1, #2
 8005db2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2140      	movs	r1, #64	; 0x40
 8005dc0:	438a      	bics	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	23e0      	movs	r3, #224	; 0xe0
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d902      	bls.n	8005dd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e002      	b.n	8005ddc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	015b      	lsls	r3, r3, #5
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	23f0      	movs	r3, #240	; 0xf0
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d008      	beq.n	8005dfa <HAL_SPI_Init+0xaa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	23e0      	movs	r3, #224	; 0xe0
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d002      	beq.n	8005dfa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	2382      	movs	r3, #130	; 0x82
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	401a      	ands	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	2384      	movs	r3, #132	; 0x84
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2102      	movs	r1, #2
 8005e16:	400b      	ands	r3, r1
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	400b      	ands	r3, r1
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	2380      	movs	r3, #128	; 0x80
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	400b      	ands	r3, r1
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2138      	movs	r1, #56	; 0x38
 8005e36:	400b      	ands	r3, r1
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	2180      	movs	r1, #128	; 0x80
 8005e40:	400b      	ands	r3, r1
 8005e42:	431a      	orrs	r2, r3
 8005e44:	0011      	movs	r1, r2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	401a      	ands	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	2204      	movs	r2, #4
 8005e60:	401a      	ands	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2110      	movs	r1, #16
 8005e68:	400b      	ands	r3, r1
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	2108      	movs	r1, #8
 8005e72:	400b      	ands	r3, r1
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68d9      	ldr	r1, [r3, #12]
 8005e7a:	23f0      	movs	r3, #240	; 0xf0
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	400b      	ands	r3, r1
 8005e80:	431a      	orrs	r2, r3
 8005e82:	0011      	movs	r1, r2
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	015b      	lsls	r3, r3, #5
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4907      	ldr	r1, [pc, #28]	; (8005ebc <HAL_SPI_Init+0x16c>)
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	225d      	movs	r2, #93	; 0x5d
 8005eae:	2101      	movs	r1, #1
 8005eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b004      	add	sp, #16
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	fffff7ff 	.word	0xfffff7ff

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e04a      	b.n	8005f68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	223d      	movs	r2, #61	; 0x3d
 8005ed6:	5c9b      	ldrb	r3, [r3, r2]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	223c      	movs	r2, #60	; 0x3c
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fd facf 	bl	800348c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	223d      	movs	r2, #61	; 0x3d
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3304      	adds	r3, #4
 8005efe:	0019      	movs	r1, r3
 8005f00:	0010      	movs	r0, r2
 8005f02:	f000 f9ed 	bl	80062e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2248      	movs	r2, #72	; 0x48
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	223e      	movs	r2, #62	; 0x3e
 8005f12:	2101      	movs	r1, #1
 8005f14:	5499      	strb	r1, [r3, r2]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	223f      	movs	r2, #63	; 0x3f
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2240      	movs	r2, #64	; 0x40
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2241      	movs	r2, #65	; 0x41
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2242      	movs	r2, #66	; 0x42
 8005f32:	2101      	movs	r1, #1
 8005f34:	5499      	strb	r1, [r3, r2]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2243      	movs	r2, #67	; 0x43
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2244      	movs	r2, #68	; 0x44
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2245      	movs	r2, #69	; 0x45
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	5499      	strb	r1, [r3, r2]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2246      	movs	r2, #70	; 0x46
 8005f52:	2101      	movs	r1, #1
 8005f54:	5499      	strb	r1, [r3, r2]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2247      	movs	r2, #71	; 0x47
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	223d      	movs	r2, #61	; 0x3d
 8005f62:	2101      	movs	r1, #1
 8005f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	223d      	movs	r2, #61	; 0x3d
 8005f7c:	5c9b      	ldrb	r3, [r3, r2]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e047      	b.n	8006018 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	223d      	movs	r2, #61	; 0x3d
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <HAL_TIM_Base_Start_IT+0xb0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d014      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x64>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	05db      	lsls	r3, r3, #23
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x64>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <HAL_TIM_Base_Start_IT+0xb4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x64>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	; (8006028 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x64>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a17      	ldr	r2, [pc, #92]	; (800602c <HAL_TIM_Base_Start_IT+0xbc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d116      	bne.n	8006002 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d016      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0xa4>
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	025b      	lsls	r3, r3, #9
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d011      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	e008      	b.n	8006014 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2101      	movs	r1, #1
 800600e:	430a      	orrs	r2, r1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e000      	b.n	8006016 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b004      	add	sp, #16
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40014000 	.word	0x40014000
 8006030:	00010007 	.word	0x00010007

08006034 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	438a      	bics	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	4a0d      	ldr	r2, [pc, #52]	; (8006088 <HAL_TIM_Base_Stop_IT+0x54>)
 8006054:	4013      	ands	r3, r2
 8006056:	d10d      	bne.n	8006074 <HAL_TIM_Base_Stop_IT+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4a0b      	ldr	r2, [pc, #44]	; (800608c <HAL_TIM_Base_Stop_IT+0x58>)
 8006060:	4013      	ands	r3, r2
 8006062:	d107      	bne.n	8006074 <HAL_TIM_Base_Stop_IT+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2101      	movs	r1, #1
 8006070:	438a      	bics	r2, r1
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	223d      	movs	r2, #61	; 0x3d
 8006078:	2101      	movs	r1, #1
 800607a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b002      	add	sp, #8
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	00001111 	.word	0x00001111
 800608c:	00000444 	.word	0x00000444

08006090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2202      	movs	r2, #2
 80060ac:	4013      	ands	r3, r2
 80060ae:	d021      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2202      	movs	r2, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2203      	movs	r2, #3
 80060be:	4252      	negs	r2, r2
 80060c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2203      	movs	r2, #3
 80060d0:	4013      	ands	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 f8ea 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 80060dc:	e007      	b.n	80060ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	0018      	movs	r0, r3
 80060e2:	f000 f8dd 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 f8e9 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2204      	movs	r2, #4
 80060f8:	4013      	ands	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2204      	movs	r2, #4
 8006100:	4013      	ands	r3, r2
 8006102:	d01e      	beq.n	8006142 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2205      	movs	r2, #5
 800610a:	4252      	negs	r2, r2
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	23c0      	movs	r3, #192	; 0xc0
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f8c3 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 800612a:	e007      	b.n	800613c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 f8b6 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	0018      	movs	r0, r3
 8006138:	f000 f8c2 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2208      	movs	r2, #8
 8006146:	4013      	ands	r3, r2
 8006148:	d021      	beq.n	800618e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2208      	movs	r2, #8
 800614e:	4013      	ands	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2209      	movs	r2, #9
 8006158:	4252      	negs	r2, r2
 800615a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2204      	movs	r2, #4
 8006160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	2203      	movs	r2, #3
 800616a:	4013      	ands	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 f89d 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 8006176:	e007      	b.n	8006188 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0018      	movs	r0, r3
 800617c:	f000 f890 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f89c 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2210      	movs	r2, #16
 8006192:	4013      	ands	r3, r2
 8006194:	d022      	beq.n	80061dc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2210      	movs	r2, #16
 800619a:	4013      	ands	r3, r2
 800619c:	d01e      	beq.n	80061dc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2211      	movs	r2, #17
 80061a4:	4252      	negs	r2, r2
 80061a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2208      	movs	r2, #8
 80061ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	23c0      	movs	r3, #192	; 0xc0
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4013      	ands	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 f876 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e007      	b.n	80061d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 f869 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f875 	bl	80062c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2201      	movs	r2, #1
 80061e0:	4013      	ands	r3, r2
 80061e2:	d00c      	beq.n	80061fe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	4013      	ands	r3, r2
 80061ea:	d008      	beq.n	80061fe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2202      	movs	r2, #2
 80061f2:	4252      	negs	r2, r2
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7fd f841 	bl	8003280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	4013      	ands	r3, r2
 8006204:	d104      	bne.n	8006210 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	019b      	lsls	r3, r3, #6
 800620c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800620e:	d00b      	beq.n	8006228 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	4013      	ands	r3, r2
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_TIM_IRQHandler+0x208>)
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0018      	movs	r0, r3
 8006224:	f000 f972 	bl	800650c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4013      	ands	r3, r2
 8006230:	d00b      	beq.n	800624a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	4013      	ands	r3, r2
 8006238:	d007      	beq.n	800624a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_TIM_IRQHandler+0x20c>)
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f000 f969 	bl	800651c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	4013      	ands	r3, r2
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	4013      	ands	r3, r2
 8006258:	d008      	beq.n	800626c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2241      	movs	r2, #65	; 0x41
 8006260:	4252      	negs	r2, r2
 8006262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0018      	movs	r0, r3
 8006268:	f000 f832 	bl	80062d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2220      	movs	r2, #32
 8006270:	4013      	ands	r3, r2
 8006272:	d00c      	beq.n	800628e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	4013      	ands	r3, r2
 800627a:	d008      	beq.n	800628e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2221      	movs	r2, #33	; 0x21
 8006282:	4252      	negs	r2, r2
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f937 	bl	80064fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	46bd      	mov	sp, r7
 8006292:	b004      	add	sp, #16
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	ffffdf7f 	.word	0xffffdf7f
 800629c:	fffffeff 	.word	0xfffffeff

080062a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b002      	add	sp, #8
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a3f      	ldr	r2, [pc, #252]	; (80063f0 <TIM_Base_SetConfig+0x110>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00c      	beq.n	8006312 <TIM_Base_SetConfig+0x32>
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	05db      	lsls	r3, r3, #23
 80062fe:	429a      	cmp	r2, r3
 8006300:	d007      	beq.n	8006312 <TIM_Base_SetConfig+0x32>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a3b      	ldr	r2, [pc, #236]	; (80063f4 <TIM_Base_SetConfig+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_Base_SetConfig+0x32>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a3a      	ldr	r2, [pc, #232]	; (80063f8 <TIM_Base_SetConfig+0x118>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d108      	bne.n	8006324 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2270      	movs	r2, #112	; 0x70
 8006316:	4393      	bics	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a32      	ldr	r2, [pc, #200]	; (80063f0 <TIM_Base_SetConfig+0x110>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d01c      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	05db      	lsls	r3, r3, #23
 8006332:	429a      	cmp	r2, r3
 8006334:	d017      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2e      	ldr	r2, [pc, #184]	; (80063f4 <TIM_Base_SetConfig+0x114>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2d      	ldr	r2, [pc, #180]	; (80063f8 <TIM_Base_SetConfig+0x118>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00f      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <TIM_Base_SetConfig+0x11c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <TIM_Base_SetConfig+0x120>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <TIM_Base_SetConfig+0x124>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_Base_SetConfig+0x86>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a29      	ldr	r2, [pc, #164]	; (8006408 <TIM_Base_SetConfig+0x128>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d108      	bne.n	8006378 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <TIM_Base_SetConfig+0x12c>)
 800636a:	4013      	ands	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2280      	movs	r2, #128	; 0x80
 800637c:	4393      	bics	r3, r2
 800637e:	001a      	movs	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <TIM_Base_SetConfig+0x110>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0xde>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a15      	ldr	r2, [pc, #84]	; (8006400 <TIM_Base_SetConfig+0x120>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0xde>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a14      	ldr	r2, [pc, #80]	; (8006404 <TIM_Base_SetConfig+0x124>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0xde>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a13      	ldr	r2, [pc, #76]	; (8006408 <TIM_Base_SetConfig+0x128>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d103      	bne.n	80063c6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d106      	bne.n	80063e6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2201      	movs	r2, #1
 80063de:	4393      	bics	r3, r2
 80063e0:	001a      	movs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	611a      	str	r2, [r3, #16]
  }
}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b004      	add	sp, #16
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40002000 	.word	0x40002000
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800
 800640c:	fffffcff 	.word	0xfffffcff

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	223c      	movs	r2, #60	; 0x3c
 800641e:	5c9b      	ldrb	r3, [r3, r2]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e05a      	b.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	223c      	movs	r2, #60	; 0x3c
 800642c:	2101      	movs	r1, #1
 800642e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	223d      	movs	r2, #61	; 0x3d
 8006434:	2102      	movs	r1, #2
 8006436:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a26      	ldr	r2, [pc, #152]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a25      	ldr	r2, [pc, #148]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006456:	4013      	ands	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2270      	movs	r2, #112	; 0x70
 8006468:	4393      	bics	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d014      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	05db      	lsls	r3, r3, #23
 8006490:	429a      	cmp	r2, r3
 8006492:	d00e      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10c      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	4393      	bics	r3, r2
 80064b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	223d      	movs	r2, #61	; 0x3d
 80064d0:	2101      	movs	r1, #1
 80064d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	223c      	movs	r2, #60	; 0x3c
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b004      	add	sp, #16
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	ff0fffff 	.word	0xff0fffff
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40014000 	.word	0x40014000

080064fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006504:	46c0      	nop			; (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006514:	46c0      	nop			; (mov r8, r8)
 8006516:	46bd      	mov	sp, r7
 8006518:	b002      	add	sp, #8
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e046      	b.n	80065cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2288      	movs	r2, #136	; 0x88
 8006542:	589b      	ldr	r3, [r3, r2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2284      	movs	r2, #132	; 0x84
 800654c:	2100      	movs	r1, #0
 800654e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f7fc ffc0 	bl	80034d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2288      	movs	r2, #136	; 0x88
 800655c:	2124      	movs	r1, #36	; 0x24
 800655e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 fd4c 	bl	8007018 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	0018      	movs	r0, r3
 8006584:	f000 f9f2 	bl	800696c <UART_SetConfig>
 8006588:	0003      	movs	r3, r0
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e01c      	b.n	80065cc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	490d      	ldr	r1, [pc, #52]	; (80065d4 <HAL_UART_Init+0xa8>)
 800659e:	400a      	ands	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	212a      	movs	r1, #42	; 0x2a
 80065ae:	438a      	bics	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2101      	movs	r1, #1
 80065be:	430a      	orrs	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 fddb 	bl	8007180 <UART_CheckIdleState>
 80065ca:	0003      	movs	r3, r0
}
 80065cc:	0018      	movs	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	ffffb7ff 	.word	0xffffb7ff

080065d8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e032      	b.n	8006650 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2288      	movs	r2, #136	; 0x88
 80065ee:	2124      	movs	r1, #36	; 0x24
 80065f0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	438a      	bics	r2, r1
 8006600:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	0018      	movs	r0, r3
 800661e:	f7fd f887 	bl	8003730 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2290      	movs	r2, #144	; 0x90
 8006626:	2100      	movs	r1, #0
 8006628:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2288      	movs	r2, #136	; 0x88
 800662e:	2100      	movs	r1, #0
 8006630:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	228c      	movs	r2, #140	; 0x8c
 8006636:	2100      	movs	r1, #0
 8006638:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2284      	movs	r2, #132	; 0x84
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	1dbb      	adds	r3, r7, #6
 8006666:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2288      	movs	r2, #136	; 0x88
 800666c:	589b      	ldr	r3, [r3, r2]
 800666e:	2b20      	cmp	r3, #32
 8006670:	d000      	beq.n	8006674 <HAL_UART_Transmit+0x1c>
 8006672:	e090      	b.n	8006796 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_UART_Transmit+0x2a>
 800667a:	1dbb      	adds	r3, r7, #6
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e088      	b.n	8006798 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	2380      	movs	r3, #128	; 0x80
 800668c:	015b      	lsls	r3, r3, #5
 800668e:	429a      	cmp	r2, r3
 8006690:	d109      	bne.n	80066a6 <HAL_UART_Transmit+0x4e>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d105      	bne.n	80066a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2201      	movs	r2, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	d001      	beq.n	80066a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e078      	b.n	8006798 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2290      	movs	r2, #144	; 0x90
 80066aa:	2100      	movs	r1, #0
 80066ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2288      	movs	r2, #136	; 0x88
 80066b2:	2121      	movs	r1, #33	; 0x21
 80066b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b6:	f7fd fa3b 	bl	8003b30 <HAL_GetTick>
 80066ba:	0003      	movs	r3, r0
 80066bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1dba      	adds	r2, r7, #6
 80066c2:	2154      	movs	r1, #84	; 0x54
 80066c4:	8812      	ldrh	r2, [r2, #0]
 80066c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1dba      	adds	r2, r7, #6
 80066cc:	2156      	movs	r1, #86	; 0x56
 80066ce:	8812      	ldrh	r2, [r2, #0]
 80066d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	015b      	lsls	r3, r3, #5
 80066da:	429a      	cmp	r2, r3
 80066dc:	d108      	bne.n	80066f0 <HAL_UART_Transmit+0x98>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e003      	b.n	80066f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f8:	e030      	b.n	800675c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	0013      	movs	r3, r2
 8006704:	2200      	movs	r2, #0
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	f000 fde4 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d005      	beq.n	800671c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2288      	movs	r2, #136	; 0x88
 8006714:	2120      	movs	r1, #32
 8006716:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e03d      	b.n	8006798 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	001a      	movs	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	05d2      	lsls	r2, r2, #23
 800672e:	0dd2      	lsrs	r2, r2, #23
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3302      	adds	r3, #2
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e007      	b.n	800674a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2256      	movs	r2, #86	; 0x56
 800674e:	5a9b      	ldrh	r3, [r3, r2]
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b299      	uxth	r1, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2256      	movs	r2, #86	; 0x56
 800675a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2256      	movs	r2, #86	; 0x56
 8006760:	5a9b      	ldrh	r3, [r3, r2]
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1c8      	bne.n	80066fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	0013      	movs	r3, r2
 8006772:	2200      	movs	r2, #0
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	f000 fdad 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d005      	beq.n	800678a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2288      	movs	r2, #136	; 0x88
 8006782:	2120      	movs	r1, #32
 8006784:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e006      	b.n	8006798 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2288      	movs	r2, #136	; 0x88
 800678e:	2120      	movs	r1, #32
 8006790:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	e000      	b.n	8006798 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006796:	2302      	movs	r3, #2
  }
}
 8006798:	0018      	movs	r0, r3
 800679a:	46bd      	mov	sp, r7
 800679c:	b008      	add	sp, #32
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	1dbb      	adds	r3, r7, #6
 80067ae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	228c      	movs	r2, #140	; 0x8c
 80067b4:	589b      	ldr	r3, [r3, r2]
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d000      	beq.n	80067bc <HAL_UART_Receive+0x1c>
 80067ba:	e0d0      	b.n	800695e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_UART_Receive+0x2a>
 80067c2:	1dbb      	adds	r3, r7, #6
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e0c8      	b.n	8006960 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	015b      	lsls	r3, r3, #5
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d109      	bne.n	80067ee <HAL_UART_Receive+0x4e>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2201      	movs	r2, #1
 80067e6:	4013      	ands	r3, r2
 80067e8:	d001      	beq.n	80067ee <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0b8      	b.n	8006960 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2290      	movs	r2, #144	; 0x90
 80067f2:	2100      	movs	r1, #0
 80067f4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	228c      	movs	r2, #140	; 0x8c
 80067fa:	2122      	movs	r1, #34	; 0x22
 80067fc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006804:	f7fd f994 	bl	8003b30 <HAL_GetTick>
 8006808:	0003      	movs	r3, r0
 800680a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1dba      	adds	r2, r7, #6
 8006810:	215c      	movs	r1, #92	; 0x5c
 8006812:	8812      	ldrh	r2, [r2, #0]
 8006814:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1dba      	adds	r2, r7, #6
 800681a:	215e      	movs	r1, #94	; 0x5e
 800681c:	8812      	ldrh	r2, [r2, #0]
 800681e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	2380      	movs	r3, #128	; 0x80
 8006826:	015b      	lsls	r3, r3, #5
 8006828:	429a      	cmp	r2, r3
 800682a:	d10d      	bne.n	8006848 <HAL_UART_Receive+0xa8>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <HAL_UART_Receive+0x9e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2260      	movs	r2, #96	; 0x60
 8006838:	494b      	ldr	r1, [pc, #300]	; (8006968 <HAL_UART_Receive+0x1c8>)
 800683a:	5299      	strh	r1, [r3, r2]
 800683c:	e02e      	b.n	800689c <HAL_UART_Receive+0xfc>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2260      	movs	r2, #96	; 0x60
 8006842:	21ff      	movs	r1, #255	; 0xff
 8006844:	5299      	strh	r1, [r3, r2]
 8006846:	e029      	b.n	800689c <HAL_UART_Receive+0xfc>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10d      	bne.n	800686c <HAL_UART_Receive+0xcc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_UART_Receive+0xc2>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2260      	movs	r2, #96	; 0x60
 800685c:	21ff      	movs	r1, #255	; 0xff
 800685e:	5299      	strh	r1, [r3, r2]
 8006860:	e01c      	b.n	800689c <HAL_UART_Receive+0xfc>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2260      	movs	r2, #96	; 0x60
 8006866:	217f      	movs	r1, #127	; 0x7f
 8006868:	5299      	strh	r1, [r3, r2]
 800686a:	e017      	b.n	800689c <HAL_UART_Receive+0xfc>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	055b      	lsls	r3, r3, #21
 8006874:	429a      	cmp	r2, r3
 8006876:	d10d      	bne.n	8006894 <HAL_UART_Receive+0xf4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_UART_Receive+0xea>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2260      	movs	r2, #96	; 0x60
 8006884:	217f      	movs	r1, #127	; 0x7f
 8006886:	5299      	strh	r1, [r3, r2]
 8006888:	e008      	b.n	800689c <HAL_UART_Receive+0xfc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2260      	movs	r2, #96	; 0x60
 800688e:	213f      	movs	r1, #63	; 0x3f
 8006890:	5299      	strh	r1, [r3, r2]
 8006892:	e003      	b.n	800689c <HAL_UART_Receive+0xfc>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2260      	movs	r2, #96	; 0x60
 8006898:	2100      	movs	r1, #0
 800689a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800689c:	2312      	movs	r3, #18
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	2160      	movs	r1, #96	; 0x60
 80068a4:	5a52      	ldrh	r2, [r2, r1]
 80068a6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	015b      	lsls	r3, r3, #5
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d108      	bne.n	80068c6 <HAL_UART_Receive+0x126>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e003      	b.n	80068ce <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80068ce:	e03a      	b.n	8006946 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	0013      	movs	r3, r2
 80068da:	2200      	movs	r2, #0
 80068dc:	2120      	movs	r1, #32
 80068de:	f000 fcf9 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 80068e2:	1e03      	subs	r3, r0, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	228c      	movs	r2, #140	; 0x8c
 80068ea:	2120      	movs	r1, #32
 80068ec:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e036      	b.n	8006960 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10e      	bne.n	8006916 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2212      	movs	r2, #18
 8006902:	18ba      	adds	r2, r7, r2
 8006904:	8812      	ldrh	r2, [r2, #0]
 8006906:	4013      	ands	r3, r2
 8006908:	b29a      	uxth	r2, r3
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	3302      	adds	r3, #2
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e00e      	b.n	8006934 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2212      	movs	r2, #18
 8006920:	18ba      	adds	r2, r7, r2
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	4013      	ands	r3, r2
 8006928:	b2da      	uxtb	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	225e      	movs	r2, #94	; 0x5e
 8006938:	5a9b      	ldrh	r3, [r3, r2]
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b299      	uxth	r1, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	225e      	movs	r2, #94	; 0x5e
 8006944:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	225e      	movs	r2, #94	; 0x5e
 800694a:	5a9b      	ldrh	r3, [r3, r2]
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1be      	bne.n	80068d0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	228c      	movs	r2, #140	; 0x8c
 8006956:	2120      	movs	r1, #32
 8006958:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b008      	add	sp, #32
 8006966:	bd80      	pop	{r7, pc}
 8006968:	000001ff 	.word	0x000001ff

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b090      	sub	sp, #64	; 0x40
 8006970:	af00      	add	r7, sp, #0
 8006972:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006974:	231a      	movs	r3, #26
 8006976:	2220      	movs	r2, #32
 8006978:	189b      	adds	r3, r3, r2
 800697a:	19db      	adds	r3, r3, r7
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4313      	orrs	r3, r2
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4ac1      	ldr	r2, [pc, #772]	; (8006ca4 <UART_SetConfig+0x338>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	0019      	movs	r1, r3
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	430b      	orrs	r3, r1
 80069ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4abc      	ldr	r2, [pc, #752]	; (8006ca8 <UART_SetConfig+0x33c>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	0018      	movs	r0, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	68d9      	ldr	r1, [r3, #12]
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	0003      	movs	r3, r0
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4ab6      	ldr	r2, [pc, #728]	; (8006cac <UART_SetConfig+0x340>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <UART_SetConfig+0x80>
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4ab4      	ldr	r2, [pc, #720]	; (8006cb0 <UART_SetConfig+0x344>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069e8:	4313      	orrs	r3, r2
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	4ab0      	ldr	r2, [pc, #704]	; (8006cb4 <UART_SetConfig+0x348>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	0019      	movs	r1, r3
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	430b      	orrs	r3, r1
 8006a00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	220f      	movs	r2, #15
 8006a0a:	4393      	bics	r3, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	0003      	movs	r3, r0
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4aa5      	ldr	r2, [pc, #660]	; (8006cb8 <UART_SetConfig+0x34c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d131      	bne.n	8006a8a <UART_SetConfig+0x11e>
 8006a26:	4ba5      	ldr	r3, [pc, #660]	; (8006cbc <UART_SetConfig+0x350>)
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d01d      	beq.n	8006a6e <UART_SetConfig+0x102>
 8006a32:	d823      	bhi.n	8006a7c <UART_SetConfig+0x110>
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d00c      	beq.n	8006a52 <UART_SetConfig+0xe6>
 8006a38:	d820      	bhi.n	8006a7c <UART_SetConfig+0x110>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <UART_SetConfig+0xd8>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d00e      	beq.n	8006a60 <UART_SetConfig+0xf4>
 8006a42:	e01b      	b.n	8006a7c <UART_SetConfig+0x110>
 8006a44:	231b      	movs	r3, #27
 8006a46:	2220      	movs	r2, #32
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e154      	b.n	8006cfc <UART_SetConfig+0x390>
 8006a52:	231b      	movs	r3, #27
 8006a54:	2220      	movs	r2, #32
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e14d      	b.n	8006cfc <UART_SetConfig+0x390>
 8006a60:	231b      	movs	r3, #27
 8006a62:	2220      	movs	r2, #32
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	19db      	adds	r3, r3, r7
 8006a68:	2204      	movs	r2, #4
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e146      	b.n	8006cfc <UART_SetConfig+0x390>
 8006a6e:	231b      	movs	r3, #27
 8006a70:	2220      	movs	r2, #32
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	19db      	adds	r3, r3, r7
 8006a76:	2208      	movs	r2, #8
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e13f      	b.n	8006cfc <UART_SetConfig+0x390>
 8006a7c:	231b      	movs	r3, #27
 8006a7e:	2220      	movs	r2, #32
 8006a80:	189b      	adds	r3, r3, r2
 8006a82:	19db      	adds	r3, r3, r7
 8006a84:	2210      	movs	r2, #16
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e138      	b.n	8006cfc <UART_SetConfig+0x390>
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a8c      	ldr	r2, [pc, #560]	; (8006cc0 <UART_SetConfig+0x354>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d131      	bne.n	8006af8 <UART_SetConfig+0x18c>
 8006a94:	4b89      	ldr	r3, [pc, #548]	; (8006cbc <UART_SetConfig+0x350>)
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	220c      	movs	r2, #12
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d01d      	beq.n	8006adc <UART_SetConfig+0x170>
 8006aa0:	d823      	bhi.n	8006aea <UART_SetConfig+0x17e>
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d00c      	beq.n	8006ac0 <UART_SetConfig+0x154>
 8006aa6:	d820      	bhi.n	8006aea <UART_SetConfig+0x17e>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <UART_SetConfig+0x146>
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d00e      	beq.n	8006ace <UART_SetConfig+0x162>
 8006ab0:	e01b      	b.n	8006aea <UART_SetConfig+0x17e>
 8006ab2:	231b      	movs	r3, #27
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	19db      	adds	r3, r3, r7
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e11d      	b.n	8006cfc <UART_SetConfig+0x390>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2202      	movs	r2, #2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e116      	b.n	8006cfc <UART_SetConfig+0x390>
 8006ace:	231b      	movs	r3, #27
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	19db      	adds	r3, r3, r7
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e10f      	b.n	8006cfc <UART_SetConfig+0x390>
 8006adc:	231b      	movs	r3, #27
 8006ade:	2220      	movs	r2, #32
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	19db      	adds	r3, r3, r7
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e108      	b.n	8006cfc <UART_SetConfig+0x390>
 8006aea:	231b      	movs	r3, #27
 8006aec:	2220      	movs	r2, #32
 8006aee:	189b      	adds	r3, r3, r2
 8006af0:	19db      	adds	r3, r3, r7
 8006af2:	2210      	movs	r2, #16
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e101      	b.n	8006cfc <UART_SetConfig+0x390>
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a71      	ldr	r2, [pc, #452]	; (8006cc4 <UART_SetConfig+0x358>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d131      	bne.n	8006b66 <UART_SetConfig+0x1fa>
 8006b02:	4b6e      	ldr	r3, [pc, #440]	; (8006cbc <UART_SetConfig+0x350>)
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	2230      	movs	r2, #48	; 0x30
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b30      	cmp	r3, #48	; 0x30
 8006b0c:	d01d      	beq.n	8006b4a <UART_SetConfig+0x1de>
 8006b0e:	d823      	bhi.n	8006b58 <UART_SetConfig+0x1ec>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d00c      	beq.n	8006b2e <UART_SetConfig+0x1c2>
 8006b14:	d820      	bhi.n	8006b58 <UART_SetConfig+0x1ec>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <UART_SetConfig+0x1b4>
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d00e      	beq.n	8006b3c <UART_SetConfig+0x1d0>
 8006b1e:	e01b      	b.n	8006b58 <UART_SetConfig+0x1ec>
 8006b20:	231b      	movs	r3, #27
 8006b22:	2220      	movs	r2, #32
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	19db      	adds	r3, r3, r7
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	e0e6      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b2e:	231b      	movs	r3, #27
 8006b30:	2220      	movs	r2, #32
 8006b32:	189b      	adds	r3, r3, r2
 8006b34:	19db      	adds	r3, r3, r7
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e0df      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b3c:	231b      	movs	r3, #27
 8006b3e:	2220      	movs	r2, #32
 8006b40:	189b      	adds	r3, r3, r2
 8006b42:	19db      	adds	r3, r3, r7
 8006b44:	2204      	movs	r2, #4
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	e0d8      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b4a:	231b      	movs	r3, #27
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	19db      	adds	r3, r3, r7
 8006b52:	2208      	movs	r2, #8
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e0d1      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b58:	231b      	movs	r3, #27
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	189b      	adds	r3, r3, r2
 8006b5e:	19db      	adds	r3, r3, r7
 8006b60:	2210      	movs	r2, #16
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	e0ca      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a57      	ldr	r2, [pc, #348]	; (8006cc8 <UART_SetConfig+0x35c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d106      	bne.n	8006b7e <UART_SetConfig+0x212>
 8006b70:	231b      	movs	r3, #27
 8006b72:	2220      	movs	r2, #32
 8006b74:	189b      	adds	r3, r3, r2
 8006b76:	19db      	adds	r3, r3, r7
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e0be      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a52      	ldr	r2, [pc, #328]	; (8006ccc <UART_SetConfig+0x360>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d106      	bne.n	8006b96 <UART_SetConfig+0x22a>
 8006b88:	231b      	movs	r3, #27
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	189b      	adds	r3, r3, r2
 8006b8e:	19db      	adds	r3, r3, r7
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	e0b2      	b.n	8006cfc <UART_SetConfig+0x390>
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4d      	ldr	r2, [pc, #308]	; (8006cd0 <UART_SetConfig+0x364>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d106      	bne.n	8006bae <UART_SetConfig+0x242>
 8006ba0:	231b      	movs	r3, #27
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	189b      	adds	r3, r3, r2
 8006ba6:	19db      	adds	r3, r3, r7
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e0a6      	b.n	8006cfc <UART_SetConfig+0x390>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3e      	ldr	r2, [pc, #248]	; (8006cac <UART_SetConfig+0x340>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d13e      	bne.n	8006c36 <UART_SetConfig+0x2ca>
 8006bb8:	4b40      	ldr	r3, [pc, #256]	; (8006cbc <UART_SetConfig+0x350>)
 8006bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bbc:	23c0      	movs	r3, #192	; 0xc0
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	22c0      	movs	r2, #192	; 0xc0
 8006bc4:	0112      	lsls	r2, r2, #4
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d027      	beq.n	8006c1a <UART_SetConfig+0x2ae>
 8006bca:	22c0      	movs	r2, #192	; 0xc0
 8006bcc:	0112      	lsls	r2, r2, #4
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d82a      	bhi.n	8006c28 <UART_SetConfig+0x2bc>
 8006bd2:	2280      	movs	r2, #128	; 0x80
 8006bd4:	0112      	lsls	r2, r2, #4
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d011      	beq.n	8006bfe <UART_SetConfig+0x292>
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	0112      	lsls	r2, r2, #4
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d822      	bhi.n	8006c28 <UART_SetConfig+0x2bc>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <UART_SetConfig+0x284>
 8006be6:	2280      	movs	r2, #128	; 0x80
 8006be8:	00d2      	lsls	r2, r2, #3
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <UART_SetConfig+0x2a0>
 8006bee:	e01b      	b.n	8006c28 <UART_SetConfig+0x2bc>
 8006bf0:	231b      	movs	r3, #27
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	189b      	adds	r3, r3, r2
 8006bf6:	19db      	adds	r3, r3, r7
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	e07e      	b.n	8006cfc <UART_SetConfig+0x390>
 8006bfe:	231b      	movs	r3, #27
 8006c00:	2220      	movs	r2, #32
 8006c02:	189b      	adds	r3, r3, r2
 8006c04:	19db      	adds	r3, r3, r7
 8006c06:	2202      	movs	r2, #2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e077      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c0c:	231b      	movs	r3, #27
 8006c0e:	2220      	movs	r2, #32
 8006c10:	189b      	adds	r3, r3, r2
 8006c12:	19db      	adds	r3, r3, r7
 8006c14:	2204      	movs	r2, #4
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e070      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c1a:	231b      	movs	r3, #27
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	19db      	adds	r3, r3, r7
 8006c22:	2208      	movs	r2, #8
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e069      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c28:	231b      	movs	r3, #27
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	189b      	adds	r3, r3, r2
 8006c2e:	19db      	adds	r3, r3, r7
 8006c30:	2210      	movs	r2, #16
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e062      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <UART_SetConfig+0x344>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d157      	bne.n	8006cf0 <UART_SetConfig+0x384>
 8006c40:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <UART_SetConfig+0x350>)
 8006c42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c44:	23c0      	movs	r3, #192	; 0xc0
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4013      	ands	r3, r2
 8006c4a:	22c0      	movs	r2, #192	; 0xc0
 8006c4c:	0092      	lsls	r2, r2, #2
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d040      	beq.n	8006cd4 <UART_SetConfig+0x368>
 8006c52:	22c0      	movs	r2, #192	; 0xc0
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d843      	bhi.n	8006ce2 <UART_SetConfig+0x376>
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0092      	lsls	r2, r2, #2
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d011      	beq.n	8006c86 <UART_SetConfig+0x31a>
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	0092      	lsls	r2, r2, #2
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d83b      	bhi.n	8006ce2 <UART_SetConfig+0x376>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <UART_SetConfig+0x30c>
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	0052      	lsls	r2, r2, #1
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <UART_SetConfig+0x328>
 8006c76:	e034      	b.n	8006ce2 <UART_SetConfig+0x376>
 8006c78:	231b      	movs	r3, #27
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	189b      	adds	r3, r3, r2
 8006c7e:	19db      	adds	r3, r3, r7
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e03a      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c86:	231b      	movs	r3, #27
 8006c88:	2220      	movs	r2, #32
 8006c8a:	189b      	adds	r3, r3, r2
 8006c8c:	19db      	adds	r3, r3, r7
 8006c8e:	2202      	movs	r2, #2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e033      	b.n	8006cfc <UART_SetConfig+0x390>
 8006c94:	231b      	movs	r3, #27
 8006c96:	2220      	movs	r2, #32
 8006c98:	189b      	adds	r3, r3, r2
 8006c9a:	19db      	adds	r3, r3, r7
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e02c      	b.n	8006cfc <UART_SetConfig+0x390>
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	cfff69f3 	.word	0xcfff69f3
 8006ca8:	ffffcfff 	.word	0xffffcfff
 8006cac:	40008000 	.word	0x40008000
 8006cb0:	40008400 	.word	0x40008400
 8006cb4:	11fff4ff 	.word	0x11fff4ff
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40004400 	.word	0x40004400
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	40004c00 	.word	0x40004c00
 8006ccc:	40005000 	.word	0x40005000
 8006cd0:	40013c00 	.word	0x40013c00
 8006cd4:	231b      	movs	r3, #27
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	189b      	adds	r3, r3, r2
 8006cda:	19db      	adds	r3, r3, r7
 8006cdc:	2208      	movs	r2, #8
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e00c      	b.n	8006cfc <UART_SetConfig+0x390>
 8006ce2:	231b      	movs	r3, #27
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	19db      	adds	r3, r3, r7
 8006cea:	2210      	movs	r2, #16
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e005      	b.n	8006cfc <UART_SetConfig+0x390>
 8006cf0:	231b      	movs	r3, #27
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	19db      	adds	r3, r3, r7
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4ac1      	ldr	r2, [pc, #772]	; (8007008 <UART_SetConfig+0x69c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d005      	beq.n	8006d12 <UART_SetConfig+0x3a6>
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4ac0      	ldr	r2, [pc, #768]	; (800700c <UART_SetConfig+0x6a0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d000      	beq.n	8006d12 <UART_SetConfig+0x3a6>
 8006d10:	e093      	b.n	8006e3a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d12:	231b      	movs	r3, #27
 8006d14:	2220      	movs	r2, #32
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	19db      	adds	r3, r3, r7
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d015      	beq.n	8006d4c <UART_SetConfig+0x3e0>
 8006d20:	dc18      	bgt.n	8006d54 <UART_SetConfig+0x3e8>
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d00d      	beq.n	8006d42 <UART_SetConfig+0x3d6>
 8006d26:	dc15      	bgt.n	8006d54 <UART_SetConfig+0x3e8>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <UART_SetConfig+0x3c6>
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d005      	beq.n	8006d3c <UART_SetConfig+0x3d0>
 8006d30:	e010      	b.n	8006d54 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d32:	f7fe f855 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8006d36:	0003      	movs	r3, r0
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d3a:	e014      	b.n	8006d66 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d3c:	4bb4      	ldr	r3, [pc, #720]	; (8007010 <UART_SetConfig+0x6a4>)
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d40:	e011      	b.n	8006d66 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d42:	f7fd ffc1 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8006d46:	0003      	movs	r3, r0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4a:	e00c      	b.n	8006d66 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d52:	e008      	b.n	8006d66 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006d58:	231a      	movs	r3, #26
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	19db      	adds	r3, r3, r7
 8006d60:	2201      	movs	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
        break;
 8006d64:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d100      	bne.n	8006d6e <UART_SetConfig+0x402>
 8006d6c:	e135      	b.n	8006fda <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d72:	4ba8      	ldr	r3, [pc, #672]	; (8007014 <UART_SetConfig+0x6a8>)
 8006d74:	0052      	lsls	r2, r2, #1
 8006d76:	5ad3      	ldrh	r3, [r2, r3]
 8006d78:	0019      	movs	r1, r3
 8006d7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d7c:	f7f9 f9de 	bl	800013c <__udivsi3>
 8006d80:	0003      	movs	r3, r0
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	0013      	movs	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	189b      	adds	r3, r3, r2
 8006d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d305      	bcc.n	8006da0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d906      	bls.n	8006dae <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006da0:	231a      	movs	r3, #26
 8006da2:	2220      	movs	r2, #32
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	19db      	adds	r3, r3, r7
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e044      	b.n	8006e38 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dba:	4b96      	ldr	r3, [pc, #600]	; (8007014 <UART_SetConfig+0x6a8>)
 8006dbc:	0052      	lsls	r2, r2, #1
 8006dbe:	5ad3      	ldrh	r3, [r2, r3]
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	69b8      	ldr	r0, [r7, #24]
 8006dcc:	69f9      	ldr	r1, [r7, #28]
 8006dce:	f7f9 fb69 	bl	80004a4 <__aeabi_uldivmod>
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	000b      	movs	r3, r1
 8006dd6:	0e11      	lsrs	r1, r2, #24
 8006dd8:	021d      	lsls	r5, r3, #8
 8006dda:	430d      	orrs	r5, r1
 8006ddc:	0214      	lsls	r4, r2, #8
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68b8      	ldr	r0, [r7, #8]
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	1900      	adds	r0, r0, r4
 8006df0:	4169      	adcs	r1, r5
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f7f9 fb50 	bl	80004a4 <__aeabi_uldivmod>
 8006e04:	0002      	movs	r2, r0
 8006e06:	000b      	movs	r3, r1
 8006e08:	0013      	movs	r3, r2
 8006e0a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	23c0      	movs	r3, #192	; 0xc0
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d309      	bcc.n	8006e2a <UART_SetConfig+0x4be>
 8006e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	035b      	lsls	r3, r3, #13
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d204      	bcs.n	8006e2a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e006      	b.n	8006e38 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006e2a:	231a      	movs	r3, #26
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	19db      	adds	r3, r3, r7
 8006e32:	2201      	movs	r2, #1
 8006e34:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006e36:	e0d0      	b.n	8006fda <UART_SetConfig+0x66e>
 8006e38:	e0cf      	b.n	8006fda <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d000      	beq.n	8006e48 <UART_SetConfig+0x4dc>
 8006e46:	e070      	b.n	8006f2a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006e48:	231b      	movs	r3, #27
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	189b      	adds	r3, r3, r2
 8006e4e:	19db      	adds	r3, r3, r7
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d015      	beq.n	8006e82 <UART_SetConfig+0x516>
 8006e56:	dc18      	bgt.n	8006e8a <UART_SetConfig+0x51e>
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d00d      	beq.n	8006e78 <UART_SetConfig+0x50c>
 8006e5c:	dc15      	bgt.n	8006e8a <UART_SetConfig+0x51e>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <UART_SetConfig+0x4fc>
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d005      	beq.n	8006e72 <UART_SetConfig+0x506>
 8006e66:	e010      	b.n	8006e8a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fd ffba 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e70:	e014      	b.n	8006e9c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e72:	4b67      	ldr	r3, [pc, #412]	; (8007010 <UART_SetConfig+0x6a4>)
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e76:	e011      	b.n	8006e9c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e78:	f7fd ff26 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e80:	e00c      	b.n	8006e9c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e88:	e008      	b.n	8006e9c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e8e:	231a      	movs	r3, #26
 8006e90:	2220      	movs	r2, #32
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	19db      	adds	r3, r3, r7
 8006e96:	2201      	movs	r2, #1
 8006e98:	701a      	strb	r2, [r3, #0]
        break;
 8006e9a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d100      	bne.n	8006ea4 <UART_SetConfig+0x538>
 8006ea2:	e09a      	b.n	8006fda <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ea8:	4b5a      	ldr	r3, [pc, #360]	; (8007014 <UART_SetConfig+0x6a8>)
 8006eaa:	0052      	lsls	r2, r2, #1
 8006eac:	5ad3      	ldrh	r3, [r2, r3]
 8006eae:	0019      	movs	r1, r3
 8006eb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006eb2:	f7f9 f943 	bl	800013c <__udivsi3>
 8006eb6:	0003      	movs	r3, r0
 8006eb8:	005a      	lsls	r2, r3, #1
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	18d2      	adds	r2, r2, r3
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	0010      	movs	r0, r2
 8006eca:	f7f9 f937 	bl	800013c <__udivsi3>
 8006ece:	0003      	movs	r3, r0
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2b0f      	cmp	r3, #15
 8006ed6:	d921      	bls.n	8006f1c <UART_SetConfig+0x5b0>
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	025b      	lsls	r3, r3, #9
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d21c      	bcs.n	8006f1c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	200e      	movs	r0, #14
 8006ee8:	2420      	movs	r4, #32
 8006eea:	1903      	adds	r3, r0, r4
 8006eec:	19db      	adds	r3, r3, r7
 8006eee:	210f      	movs	r1, #15
 8006ef0:	438a      	bics	r2, r1
 8006ef2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2207      	movs	r2, #7
 8006efc:	4013      	ands	r3, r2
 8006efe:	b299      	uxth	r1, r3
 8006f00:	1903      	adds	r3, r0, r4
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	1902      	adds	r2, r0, r4
 8006f06:	19d2      	adds	r2, r2, r7
 8006f08:	8812      	ldrh	r2, [r2, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	1902      	adds	r2, r0, r4
 8006f14:	19d2      	adds	r2, r2, r7
 8006f16:	8812      	ldrh	r2, [r2, #0]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e05e      	b.n	8006fda <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006f1c:	231a      	movs	r3, #26
 8006f1e:	2220      	movs	r2, #32
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	19db      	adds	r3, r3, r7
 8006f24:	2201      	movs	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	e057      	b.n	8006fda <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f2a:	231b      	movs	r3, #27
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	189b      	adds	r3, r3, r2
 8006f30:	19db      	adds	r3, r3, r7
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d015      	beq.n	8006f64 <UART_SetConfig+0x5f8>
 8006f38:	dc18      	bgt.n	8006f6c <UART_SetConfig+0x600>
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d00d      	beq.n	8006f5a <UART_SetConfig+0x5ee>
 8006f3e:	dc15      	bgt.n	8006f6c <UART_SetConfig+0x600>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <UART_SetConfig+0x5de>
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d005      	beq.n	8006f54 <UART_SetConfig+0x5e8>
 8006f48:	e010      	b.n	8006f6c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f4a:	f7fd ff49 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f52:	e014      	b.n	8006f7e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f54:	4b2e      	ldr	r3, [pc, #184]	; (8007010 <UART_SetConfig+0x6a4>)
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f58:	e011      	b.n	8006f7e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5a:	f7fd feb5 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f62:	e00c      	b.n	8006f7e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6a:	e008      	b.n	8006f7e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f70:	231a      	movs	r3, #26
 8006f72:	2220      	movs	r2, #32
 8006f74:	189b      	adds	r3, r3, r2
 8006f76:	19db      	adds	r3, r3, r7
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
        break;
 8006f7c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02a      	beq.n	8006fda <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f88:	4b22      	ldr	r3, [pc, #136]	; (8007014 <UART_SetConfig+0x6a8>)
 8006f8a:	0052      	lsls	r2, r2, #1
 8006f8c:	5ad3      	ldrh	r3, [r2, r3]
 8006f8e:	0019      	movs	r1, r3
 8006f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f92:	f7f9 f8d3 	bl	800013c <__udivsi3>
 8006f96:	0003      	movs	r3, r0
 8006f98:	001a      	movs	r2, r3
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	18d2      	adds	r2, r2, r3
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	0019      	movs	r1, r3
 8006fa8:	0010      	movs	r0, r2
 8006faa:	f7f9 f8c7 	bl	800013c <__udivsi3>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d90a      	bls.n	8006fce <UART_SetConfig+0x662>
 8006fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	025b      	lsls	r3, r3, #9
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d205      	bcs.n	8006fce <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	e005      	b.n	8006fda <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006fce:	231a      	movs	r3, #26
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	189b      	adds	r3, r3, r2
 8006fd4:	19db      	adds	r3, r3, r7
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	226a      	movs	r2, #106	; 0x6a
 8006fde:	2101      	movs	r1, #1
 8006fe0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2268      	movs	r2, #104	; 0x68
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2200      	movs	r2, #0
 8006fee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ff6:	231a      	movs	r3, #26
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	19db      	adds	r3, r3, r7
 8006ffe:	781b      	ldrb	r3, [r3, #0]
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	b010      	add	sp, #64	; 0x40
 8007006:	bdb0      	pop	{r4, r5, r7, pc}
 8007008:	40008000 	.word	0x40008000
 800700c:	40008400 	.word	0x40008400
 8007010:	00f42400 	.word	0x00f42400
 8007014:	08013d14 	.word	0x08013d14

08007018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	2208      	movs	r2, #8
 8007026:	4013      	ands	r3, r2
 8007028:	d00b      	beq.n	8007042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4a4a      	ldr	r2, [pc, #296]	; (800715c <UART_AdvFeatureConfig+0x144>)
 8007032:	4013      	ands	r3, r2
 8007034:	0019      	movs	r1, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	2201      	movs	r2, #1
 8007048:	4013      	ands	r3, r2
 800704a:	d00b      	beq.n	8007064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4a43      	ldr	r2, [pc, #268]	; (8007160 <UART_AdvFeatureConfig+0x148>)
 8007054:	4013      	ands	r3, r2
 8007056:	0019      	movs	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	2202      	movs	r2, #2
 800706a:	4013      	ands	r3, r2
 800706c:	d00b      	beq.n	8007086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a3b      	ldr	r2, [pc, #236]	; (8007164 <UART_AdvFeatureConfig+0x14c>)
 8007076:	4013      	ands	r3, r2
 8007078:	0019      	movs	r1, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	2204      	movs	r2, #4
 800708c:	4013      	ands	r3, r2
 800708e:	d00b      	beq.n	80070a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4a34      	ldr	r2, [pc, #208]	; (8007168 <UART_AdvFeatureConfig+0x150>)
 8007098:	4013      	ands	r3, r2
 800709a:	0019      	movs	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	2210      	movs	r2, #16
 80070ae:	4013      	ands	r3, r2
 80070b0:	d00b      	beq.n	80070ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4a2c      	ldr	r2, [pc, #176]	; (800716c <UART_AdvFeatureConfig+0x154>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	0019      	movs	r1, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	2220      	movs	r2, #32
 80070d0:	4013      	ands	r3, r2
 80070d2:	d00b      	beq.n	80070ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4a25      	ldr	r2, [pc, #148]	; (8007170 <UART_AdvFeatureConfig+0x158>)
 80070dc:	4013      	ands	r3, r2
 80070de:	0019      	movs	r1, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	2240      	movs	r2, #64	; 0x40
 80070f2:	4013      	ands	r3, r2
 80070f4:	d01d      	beq.n	8007132 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <UART_AdvFeatureConfig+0x15c>)
 80070fe:	4013      	ands	r3, r2
 8007100:	0019      	movs	r1, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	035b      	lsls	r3, r3, #13
 8007116:	429a      	cmp	r2, r3
 8007118:	d10b      	bne.n	8007132 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <UART_AdvFeatureConfig+0x160>)
 8007122:	4013      	ands	r3, r2
 8007124:	0019      	movs	r1, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	2280      	movs	r2, #128	; 0x80
 8007138:	4013      	ands	r3, r2
 800713a:	d00b      	beq.n	8007154 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4a0e      	ldr	r2, [pc, #56]	; (800717c <UART_AdvFeatureConfig+0x164>)
 8007144:	4013      	ands	r3, r2
 8007146:	0019      	movs	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b002      	add	sp, #8
 800715a:	bd80      	pop	{r7, pc}
 800715c:	ffff7fff 	.word	0xffff7fff
 8007160:	fffdffff 	.word	0xfffdffff
 8007164:	fffeffff 	.word	0xfffeffff
 8007168:	fffbffff 	.word	0xfffbffff
 800716c:	ffffefff 	.word	0xffffefff
 8007170:	ffffdfff 	.word	0xffffdfff
 8007174:	ffefffff 	.word	0xffefffff
 8007178:	ff9fffff 	.word	0xff9fffff
 800717c:	fff7ffff 	.word	0xfff7ffff

08007180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b092      	sub	sp, #72	; 0x48
 8007184:	af02      	add	r7, sp, #8
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2290      	movs	r2, #144	; 0x90
 800718c:	2100      	movs	r1, #0
 800718e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007190:	f7fc fcce 	bl	8003b30 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2208      	movs	r2, #8
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d12d      	bne.n	8007202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a8:	2280      	movs	r2, #128	; 0x80
 80071aa:	0391      	lsls	r1, r2, #14
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4a47      	ldr	r2, [pc, #284]	; (80072cc <UART_CheckIdleState+0x14c>)
 80071b0:	9200      	str	r2, [sp, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f000 f88e 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d022      	beq.n	8007202 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071bc:	f3ef 8310 	mrs	r3, PRIMASK
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c6:	2301      	movs	r3, #1
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	f383 8810 	msr	PRIMASK, r3
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2180      	movs	r1, #128	; 0x80
 80071de:	438a      	bics	r2, r1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2288      	movs	r2, #136	; 0x88
 80071f2:	2120      	movs	r1, #32
 80071f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2284      	movs	r2, #132	; 0x84
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e060      	b.n	80072c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2204      	movs	r2, #4
 800720a:	4013      	ands	r3, r2
 800720c:	2b04      	cmp	r3, #4
 800720e:	d146      	bne.n	800729e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007212:	2280      	movs	r2, #128	; 0x80
 8007214:	03d1      	lsls	r1, r2, #15
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <UART_CheckIdleState+0x14c>)
 800721a:	9200      	str	r2, [sp, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	f000 f859 	bl	80072d4 <UART_WaitOnFlagUntilTimeout>
 8007222:	1e03      	subs	r3, r0, #0
 8007224:	d03b      	beq.n	800729e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007226:	f3ef 8310 	mrs	r3, PRIMASK
 800722a:	60fb      	str	r3, [r7, #12]
  return(result);
 800722c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
 8007230:	2301      	movs	r3, #1
 8007232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f383 8810 	msr	PRIMASK, r3
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4922      	ldr	r1, [pc, #136]	; (80072d0 <UART_CheckIdleState+0x150>)
 8007248:	400a      	ands	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f383 8810 	msr	PRIMASK, r3
}
 8007256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007258:	f3ef 8310 	mrs	r3, PRIMASK
 800725c:	61bb      	str	r3, [r7, #24]
  return(result);
 800725e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	633b      	str	r3, [r7, #48]	; 0x30
 8007262:	2301      	movs	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f383 8810 	msr	PRIMASK, r3
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2101      	movs	r1, #1
 800727a:	438a      	bics	r2, r1
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	228c      	movs	r2, #140	; 0x8c
 800728e:	2120      	movs	r1, #32
 8007290:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2284      	movs	r2, #132	; 0x84
 8007296:	2100      	movs	r1, #0
 8007298:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e012      	b.n	80072c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2288      	movs	r2, #136	; 0x88
 80072a2:	2120      	movs	r1, #32
 80072a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	228c      	movs	r2, #140	; 0x8c
 80072aa:	2120      	movs	r1, #32
 80072ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2284      	movs	r2, #132	; 0x84
 80072be:	2100      	movs	r1, #0
 80072c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b010      	add	sp, #64	; 0x40
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	01ffffff 	.word	0x01ffffff
 80072d0:	fffffedf 	.word	0xfffffedf

080072d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	1dfb      	adds	r3, r7, #7
 80072e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e4:	e051      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3301      	adds	r3, #1
 80072ea:	d04e      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ec:	f7fc fc20 	bl	8003b30 <HAL_GetTick>
 80072f0:	0002      	movs	r2, r0
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d302      	bcc.n	8007302 <UART_WaitOnFlagUntilTimeout+0x2e>
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e051      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2204      	movs	r2, #4
 800730e:	4013      	ands	r3, r2
 8007310:	d03b      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d038      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d035      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	2208      	movs	r2, #8
 8007326:	4013      	ands	r3, r2
 8007328:	2b08      	cmp	r3, #8
 800732a:	d111      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2208      	movs	r2, #8
 8007332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	0018      	movs	r0, r3
 8007338:	f000 f83c 	bl	80073b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2290      	movs	r2, #144	; 0x90
 8007340:	2108      	movs	r1, #8
 8007342:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2284      	movs	r2, #132	; 0x84
 8007348:	2100      	movs	r1, #0
 800734a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e02c      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69da      	ldr	r2, [r3, #28]
 8007356:	2380      	movs	r3, #128	; 0x80
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	401a      	ands	r2, r3
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	429a      	cmp	r2, r3
 8007362:	d112      	bne.n	800738a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2280      	movs	r2, #128	; 0x80
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	0018      	movs	r0, r3
 8007372:	f000 f81f 	bl	80073b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2290      	movs	r2, #144	; 0x90
 800737a:	2120      	movs	r1, #32
 800737c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2284      	movs	r2, #132	; 0x84
 8007382:	2100      	movs	r1, #0
 8007384:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e00f      	b.n	80073aa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	425a      	negs	r2, r3
 800739a:	4153      	adcs	r3, r2
 800739c:	b2db      	uxtb	r3, r3
 800739e:	001a      	movs	r2, r3
 80073a0:	1dfb      	adds	r3, r7, #7
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d09e      	beq.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	0018      	movs	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	b004      	add	sp, #16
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08e      	sub	sp, #56	; 0x38
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073bc:	f3ef 8310 	mrs	r3, PRIMASK
 80073c0:	617b      	str	r3, [r7, #20]
  return(result);
 80073c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
 80073c6:	2301      	movs	r3, #1
 80073c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	f383 8810 	msr	PRIMASK, r3
}
 80073d0:	46c0      	nop			; (mov r8, r8)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4926      	ldr	r1, [pc, #152]	; (8007478 <UART_EndRxTransfer+0xc4>)
 80073de:	400a      	ands	r2, r1
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f383 8810 	msr	PRIMASK, r3
}
 80073ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ee:	f3ef 8310 	mrs	r3, PRIMASK
 80073f2:	623b      	str	r3, [r7, #32]
  return(result);
 80073f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
 80073f8:	2301      	movs	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	f383 8810 	msr	PRIMASK, r3
}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	491b      	ldr	r1, [pc, #108]	; (800747c <UART_EndRxTransfer+0xc8>)
 8007410:	400a      	ands	r2, r1
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	f383 8810 	msr	PRIMASK, r3
}
 800741e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d118      	bne.n	800745a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007428:	f3ef 8310 	mrs	r3, PRIMASK
 800742c:	60bb      	str	r3, [r7, #8]
  return(result);
 800742e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007432:	2301      	movs	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f383 8810 	msr	PRIMASK, r3
}
 800743c:	46c0      	nop			; (mov r8, r8)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2110      	movs	r1, #16
 800744a:	438a      	bics	r2, r1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f383 8810 	msr	PRIMASK, r3
}
 8007458:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	228c      	movs	r2, #140	; 0x8c
 800745e:	2120      	movs	r1, #32
 8007460:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	46bd      	mov	sp, r7
 8007472:	b00e      	add	sp, #56	; 0x38
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	fffffedf 	.word	0xfffffedf
 800747c:	effffffe 	.word	0xeffffffe

08007480 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2284      	movs	r2, #132	; 0x84
 800748c:	5c9b      	ldrb	r3, [r3, r2]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_UARTEx_DisableFifoMode+0x16>
 8007492:	2302      	movs	r3, #2
 8007494:	e027      	b.n	80074e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2284      	movs	r2, #132	; 0x84
 800749a:	2101      	movs	r1, #1
 800749c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2288      	movs	r2, #136	; 0x88
 80074a2:	2124      	movs	r1, #36	; 0x24
 80074a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2101      	movs	r1, #1
 80074ba:	438a      	bics	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a0b      	ldr	r2, [pc, #44]	; (80074f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2288      	movs	r2, #136	; 0x88
 80074d8:	2120      	movs	r1, #32
 80074da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2284      	movs	r2, #132	; 0x84
 80074e0:	2100      	movs	r1, #0
 80074e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	0018      	movs	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b004      	add	sp, #16
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	dfffffff 	.word	0xdfffffff

080074f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2284      	movs	r2, #132	; 0x84
 8007502:	5c9b      	ldrb	r3, [r3, r2]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007508:	2302      	movs	r3, #2
 800750a:	e02e      	b.n	800756a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2284      	movs	r2, #132	; 0x84
 8007510:	2101      	movs	r1, #1
 8007512:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2288      	movs	r2, #136	; 0x88
 8007518:	2124      	movs	r1, #36	; 0x24
 800751a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2101      	movs	r1, #1
 8007530:	438a      	bics	r2, r1
 8007532:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	08d9      	lsrs	r1, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 f854 	bl	80075f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2288      	movs	r2, #136	; 0x88
 800755c:	2120      	movs	r1, #32
 800755e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2284      	movs	r2, #132	; 0x84
 8007564:	2100      	movs	r1, #0
 8007566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2284      	movs	r2, #132	; 0x84
 8007582:	5c9b      	ldrb	r3, [r3, r2]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007588:	2302      	movs	r3, #2
 800758a:	e02f      	b.n	80075ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2284      	movs	r2, #132	; 0x84
 8007590:	2101      	movs	r1, #1
 8007592:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2288      	movs	r2, #136	; 0x88
 8007598:	2124      	movs	r1, #36	; 0x24
 800759a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2101      	movs	r1, #1
 80075b0:	438a      	bics	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80075bc:	4013      	ands	r3, r2
 80075be:	0019      	movs	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	0018      	movs	r0, r3
 80075ce:	f000 f813 	bl	80075f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2288      	movs	r2, #136	; 0x88
 80075de:	2120      	movs	r1, #32
 80075e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2284      	movs	r2, #132	; 0x84
 80075e6:	2100      	movs	r1, #0
 80075e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	0018      	movs	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b004      	add	sp, #16
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	f1ffffff 	.word	0xf1ffffff

080075f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	226a      	movs	r2, #106	; 0x6a
 800760c:	2101      	movs	r1, #1
 800760e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2268      	movs	r2, #104	; 0x68
 8007614:	2101      	movs	r1, #1
 8007616:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007618:	e043      	b.n	80076a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800761a:	260f      	movs	r6, #15
 800761c:	19bb      	adds	r3, r7, r6
 800761e:	2208      	movs	r2, #8
 8007620:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007622:	200e      	movs	r0, #14
 8007624:	183b      	adds	r3, r7, r0
 8007626:	2208      	movs	r2, #8
 8007628:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	0e5b      	lsrs	r3, r3, #25
 8007632:	b2da      	uxtb	r2, r3
 8007634:	240d      	movs	r4, #13
 8007636:	193b      	adds	r3, r7, r4
 8007638:	2107      	movs	r1, #7
 800763a:	400a      	ands	r2, r1
 800763c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0f5b      	lsrs	r3, r3, #29
 8007646:	b2da      	uxtb	r2, r3
 8007648:	250c      	movs	r5, #12
 800764a:	197b      	adds	r3, r7, r5
 800764c:	2107      	movs	r1, #7
 800764e:	400a      	ands	r2, r1
 8007650:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007652:	183b      	adds	r3, r7, r0
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	197a      	adds	r2, r7, r5
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	4914      	ldr	r1, [pc, #80]	; (80076ac <UARTEx_SetNbDataToProcess+0xb4>)
 800765c:	5c8a      	ldrb	r2, [r1, r2]
 800765e:	435a      	muls	r2, r3
 8007660:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007662:	197b      	adds	r3, r7, r5
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007668:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800766a:	0019      	movs	r1, r3
 800766c:	f7f8 fdf0 	bl	8000250 <__divsi3>
 8007670:	0003      	movs	r3, r0
 8007672:	b299      	uxth	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	226a      	movs	r2, #106	; 0x6a
 8007678:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800767a:	19bb      	adds	r3, r7, r6
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	193a      	adds	r2, r7, r4
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	490a      	ldr	r1, [pc, #40]	; (80076ac <UARTEx_SetNbDataToProcess+0xb4>)
 8007684:	5c8a      	ldrb	r2, [r1, r2]
 8007686:	435a      	muls	r2, r3
 8007688:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800768a:	193b      	adds	r3, r7, r4
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007690:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007692:	0019      	movs	r1, r3
 8007694:	f7f8 fddc 	bl	8000250 <__divsi3>
 8007698:	0003      	movs	r3, r0
 800769a:	b299      	uxth	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2268      	movs	r2, #104	; 0x68
 80076a0:	5299      	strh	r1, [r3, r2]
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b005      	add	sp, #20
 80076a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	08013d2c 	.word	0x08013d2c
 80076b0:	08013d34 	.word	0x08013d34

080076b4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b0e4      	sub	sp, #400	; 0x190
 80076b8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80076ba:	24c8      	movs	r4, #200	; 0xc8
 80076bc:	193b      	adds	r3, r7, r4
 80076be:	0018      	movs	r0, r3
 80076c0:	23c6      	movs	r3, #198	; 0xc6
 80076c2:	001a      	movs	r2, r3
 80076c4:	2100      	movs	r1, #0
 80076c6:	f004 f847 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <astronode_send_cfg_sr+0x64>)
 80076cc:	25c8      	movs	r5, #200	; 0xc8
 80076ce:	006d      	lsls	r5, r5, #1
 80076d0:	195b      	adds	r3, r3, r5
 80076d2:	19db      	adds	r3, r3, r7
 80076d4:	0018      	movs	r0, r3
 80076d6:	23c6      	movs	r3, #198	; 0xc6
 80076d8:	001a      	movs	r2, r3
 80076da:	2100      	movs	r1, #0
 80076dc:	f004 f83c 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 80076e0:	193b      	adds	r3, r7, r4
 80076e2:	2210      	movs	r2, #16
 80076e4:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 80076e6:	003a      	movs	r2, r7
 80076e8:	193b      	adds	r3, r7, r4
 80076ea:	0011      	movs	r1, r2
 80076ec:	0018      	movs	r0, r3
 80076ee:	f001 fa4d 	bl	8008b8c <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <astronode_send_cfg_sr+0x64>)
 80076f4:	195b      	adds	r3, r3, r5
 80076f6:	19db      	adds	r3, r3, r7
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b90      	cmp	r3, #144	; 0x90
 80076fc:	d104      	bne.n	8007708 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <astronode_send_cfg_sr+0x68>)
 8007700:	0018      	movs	r0, r3
 8007702:	f7fb fc41 	bl	8002f88 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007706:	e003      	b.n	8007710 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <astronode_send_cfg_sr+0x6c>)
 800770a:	0018      	movs	r0, r3
 800770c:	f7fb fc3c 	bl	8002f88 <send_debug_logs>
}
 8007710:	46c0      	nop			; (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	b064      	add	sp, #400	; 0x190
 8007716:	bdb0      	pop	{r4, r5, r7, pc}
 8007718:	fffffe70 	.word	0xfffffe70
 800771c:	0801279c 	.word	0x0801279c
 8007720:	080127d0 	.word	0x080127d0

08007724 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	b0e7      	sub	sp, #412	; 0x19c
 8007728:	af00      	add	r7, sp, #0
 800772a:	0005      	movs	r5, r0
 800772c:	000c      	movs	r4, r1
 800772e:	0010      	movs	r0, r2
 8007730:	0019      	movs	r1, r3
 8007732:	4b4b      	ldr	r3, [pc, #300]	; (8007860 <astronode_send_cfg_wr+0x13c>)
 8007734:	26cc      	movs	r6, #204	; 0xcc
 8007736:	0076      	lsls	r6, r6, #1
 8007738:	199b      	adds	r3, r3, r6
 800773a:	19db      	adds	r3, r3, r7
 800773c:	1c2a      	adds	r2, r5, #0
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	4b48      	ldr	r3, [pc, #288]	; (8007864 <astronode_send_cfg_wr+0x140>)
 8007742:	0035      	movs	r5, r6
 8007744:	195b      	adds	r3, r3, r5
 8007746:	19db      	adds	r3, r3, r7
 8007748:	1c22      	adds	r2, r4, #0
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	4b46      	ldr	r3, [pc, #280]	; (8007868 <astronode_send_cfg_wr+0x144>)
 800774e:	002c      	movs	r4, r5
 8007750:	191b      	adds	r3, r3, r4
 8007752:	19db      	adds	r3, r3, r7
 8007754:	1c02      	adds	r2, r0, #0
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	4b44      	ldr	r3, [pc, #272]	; (800786c <astronode_send_cfg_wr+0x148>)
 800775a:	191b      	adds	r3, r3, r4
 800775c:	19db      	adds	r3, r3, r7
 800775e:	1c0a      	adds	r2, r1, #0
 8007760:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007762:	25d0      	movs	r5, #208	; 0xd0
 8007764:	197b      	adds	r3, r7, r5
 8007766:	0018      	movs	r0, r3
 8007768:	23c6      	movs	r3, #198	; 0xc6
 800776a:	001a      	movs	r2, r3
 800776c:	2100      	movs	r1, #0
 800776e:	f003 fff3 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007772:	4b3f      	ldr	r3, [pc, #252]	; (8007870 <astronode_send_cfg_wr+0x14c>)
 8007774:	191b      	adds	r3, r3, r4
 8007776:	19db      	adds	r3, r3, r7
 8007778:	0018      	movs	r0, r3
 800777a:	23c6      	movs	r3, #198	; 0xc6
 800777c:	001a      	movs	r2, r3
 800777e:	2100      	movs	r1, #0
 8007780:	f003 ffea 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007784:	0029      	movs	r1, r5
 8007786:	187b      	adds	r3, r7, r1
 8007788:	2205      	movs	r2, #5
 800778a:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 800778c:	4b34      	ldr	r3, [pc, #208]	; (8007860 <astronode_send_cfg_wr+0x13c>)
 800778e:	191b      	adds	r3, r3, r4
 8007790:	19db      	adds	r3, r3, r7
 8007792:	2200      	movs	r2, #0
 8007794:	569a      	ldrsb	r2, [r3, r2]
 8007796:	4b33      	ldr	r3, [pc, #204]	; (8007864 <astronode_send_cfg_wr+0x140>)
 8007798:	191b      	adds	r3, r3, r4
 800779a:	19db      	adds	r3, r3, r7
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	4313      	orrs	r3, r2
 80077a4:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 80077a6:	4b30      	ldr	r3, [pc, #192]	; (8007868 <astronode_send_cfg_wr+0x144>)
 80077a8:	191b      	adds	r3, r3, r4
 80077aa:	19db      	adds	r3, r3, r7
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	4313      	orrs	r3, r2
 80077b4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 80077b6:	4b2d      	ldr	r3, [pc, #180]	; (800786c <astronode_send_cfg_wr+0x148>)
 80077b8:	191b      	adds	r3, r3, r4
 80077ba:	19db      	adds	r3, r3, r7
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	b25b      	sxtb	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 80077c8:	187b      	adds	r3, r7, r1
 80077ca:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 80077cc:	23d4      	movs	r3, #212	; 0xd4
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	2508      	movs	r5, #8
 80077d2:	195b      	adds	r3, r3, r5
 80077d4:	19db      	adds	r3, r3, r7
 80077d6:	2200      	movs	r2, #0
 80077d8:	569a      	ldrsb	r2, [r3, r2]
 80077da:	23d6      	movs	r3, #214	; 0xd6
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	195b      	adds	r3, r3, r5
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80077ec:	23d8      	movs	r3, #216	; 0xd8
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	195b      	adds	r3, r3, r5
 80077f2:	19db      	adds	r3, r3, r7
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80077fe:	23da      	movs	r3, #218	; 0xda
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	195b      	adds	r3, r3, r5
 8007804:	19db      	adds	r3, r3, r7
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	b25b      	sxtb	r3, r3
 800780c:	4313      	orrs	r3, r2
 800780e:	b25b      	sxtb	r3, r3
 8007810:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007812:	187b      	adds	r3, r7, r1
 8007814:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007816:	0008      	movs	r0, r1
 8007818:	187b      	adds	r3, r7, r1
 800781a:	22c4      	movs	r2, #196	; 0xc4
 800781c:	2103      	movs	r1, #3
 800781e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007820:	002b      	movs	r3, r5
 8007822:	18fa      	adds	r2, r7, r3
 8007824:	183b      	adds	r3, r7, r0
 8007826:	0011      	movs	r1, r2
 8007828:	0018      	movs	r0, r3
 800782a:	f001 f9af 	bl	8008b8c <astronode_transport_send_receive>
 800782e:	0003      	movs	r3, r0
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10f      	bne.n	8007854 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <astronode_send_cfg_wr+0x14c>)
 8007836:	191b      	adds	r3, r3, r4
 8007838:	19db      	adds	r3, r3, r7
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b85      	cmp	r3, #133	; 0x85
 800783e:	d105      	bne.n	800784c <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <astronode_send_cfg_wr+0x150>)
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb fba0 	bl	8002f88 <send_debug_logs>
            return true ;
 8007848:	2301      	movs	r3, #1
 800784a:	e004      	b.n	8007856 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <astronode_send_cfg_wr+0x154>)
 800784e:	0018      	movs	r0, r3
 8007850:	f7fb fb9a 	bl	8002f88 <send_debug_logs>
        }
    }
    return false ;
 8007854:	2300      	movs	r3, #0
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b067      	add	sp, #412	; 0x19c
 800785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	fffffe6f 	.word	0xfffffe6f
 8007864:	fffffe6e 	.word	0xfffffe6e
 8007868:	fffffe6d 	.word	0xfffffe6d
 800786c:	fffffe6c 	.word	0xfffffe6c
 8007870:	fffffe70 	.word	0xfffffe70
 8007874:	08012804 	.word	0x08012804
 8007878:	08012830 	.word	0x08012830

0800787c <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 800787c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787e:	b0ed      	sub	sp, #436	; 0x1b4
 8007880:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007882:	21c8      	movs	r1, #200	; 0xc8
 8007884:	2318      	movs	r3, #24
 8007886:	18cb      	adds	r3, r1, r3
 8007888:	19db      	adds	r3, r3, r7
 800788a:	0018      	movs	r0, r3
 800788c:	23c6      	movs	r3, #198	; 0xc6
 800788e:	001a      	movs	r2, r3
 8007890:	2100      	movs	r1, #0
 8007892:	f003 ff61 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007896:	4b4a      	ldr	r3, [pc, #296]	; (80079c0 <astronode_send_mgi_rr+0x144>)
 8007898:	26cc      	movs	r6, #204	; 0xcc
 800789a:	0076      	lsls	r6, r6, #1
 800789c:	199b      	adds	r3, r3, r6
 800789e:	2218      	movs	r2, #24
 80078a0:	4694      	mov	ip, r2
 80078a2:	44bc      	add	ip, r7
 80078a4:	4463      	add	r3, ip
 80078a6:	0018      	movs	r0, r3
 80078a8:	23c6      	movs	r3, #198	; 0xc6
 80078aa:	001a      	movs	r2, r3
 80078ac:	2100      	movs	r1, #0
 80078ae:	f003 ff53 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 80078b2:	21c8      	movs	r1, #200	; 0xc8
 80078b4:	2318      	movs	r3, #24
 80078b6:	18cb      	adds	r3, r1, r3
 80078b8:	19db      	adds	r3, r3, r7
 80078ba:	2219      	movs	r2, #25
 80078bc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80078be:	2318      	movs	r3, #24
 80078c0:	18fa      	adds	r2, r7, r3
 80078c2:	2318      	movs	r3, #24
 80078c4:	18cb      	adds	r3, r1, r3
 80078c6:	19db      	adds	r3, r3, r7
 80078c8:	0011      	movs	r1, r2
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 f95e 	bl	8008b8c <astronode_transport_send_receive>
 80078d0:	0003      	movs	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d16f      	bne.n	80079b6 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 80078d6:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <astronode_send_mgi_rr+0x144>)
 80078d8:	0032      	movs	r2, r6
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	2118      	movs	r1, #24
 80078de:	468c      	mov	ip, r1
 80078e0:	44bc      	add	ip, r7
 80078e2:	4463      	add	r3, ip
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b99      	cmp	r3, #153	; 0x99
 80078e8:	d161      	bne.n	80079ae <astronode_send_mgi_rr+0x132>
        {
 80078ea:	466b      	mov	r3, sp
 80078ec:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 80078ee:	4b34      	ldr	r3, [pc, #208]	; (80079c0 <astronode_send_mgi_rr+0x144>)
 80078f0:	189b      	adds	r3, r3, r2
 80078f2:	2218      	movs	r2, #24
 80078f4:	4694      	mov	ip, r2
 80078f6:	44bc      	add	ip, r7
 80078f8:	4463      	add	r3, ip
 80078fa:	22c4      	movs	r2, #196	; 0xc4
 80078fc:	5a9b      	ldrh	r3, [r3, r2]
 80078fe:	001a      	movs	r2, r3
 8007900:	3a01      	subs	r2, #1
 8007902:	21ca      	movs	r1, #202	; 0xca
 8007904:	0049      	lsls	r1, r1, #1
 8007906:	2018      	movs	r0, #24
 8007908:	1809      	adds	r1, r1, r0
 800790a:	19c9      	adds	r1, r1, r7
 800790c:	600a      	str	r2, [r1, #0]
 800790e:	001c      	movs	r4, r3
 8007910:	2200      	movs	r2, #0
 8007912:	0015      	movs	r5, r2
 8007914:	0020      	movs	r0, r4
 8007916:	0029      	movs	r1, r5
 8007918:	0004      	movs	r4, r0
 800791a:	0f62      	lsrs	r2, r4, #29
 800791c:	000c      	movs	r4, r1
 800791e:	00e4      	lsls	r4, r4, #3
 8007920:	617c      	str	r4, [r7, #20]
 8007922:	697c      	ldr	r4, [r7, #20]
 8007924:	4314      	orrs	r4, r2
 8007926:	617c      	str	r4, [r7, #20]
 8007928:	0001      	movs	r1, r0
 800792a:	00c9      	lsls	r1, r1, #3
 800792c:	6139      	str	r1, [r7, #16]
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	6838      	ldr	r0, [r7, #0]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	0004      	movs	r4, r0
 800793a:	0f62      	lsrs	r2, r4, #29
 800793c:	000c      	movs	r4, r1
 800793e:	00e4      	lsls	r4, r4, #3
 8007940:	60fc      	str	r4, [r7, #12]
 8007942:	68fc      	ldr	r4, [r7, #12]
 8007944:	4314      	orrs	r4, r2
 8007946:	60fc      	str	r4, [r7, #12]
 8007948:	0001      	movs	r1, r0
 800794a:	00ca      	lsls	r2, r1, #3
 800794c:	60ba      	str	r2, [r7, #8]
 800794e:	3307      	adds	r3, #7
 8007950:	08db      	lsrs	r3, r3, #3
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	4669      	mov	r1, sp
 8007956:	1acb      	subs	r3, r1, r3
 8007958:	469d      	mov	sp, r3
 800795a:	466b      	mov	r3, sp
 800795c:	3300      	adds	r3, #0
 800795e:	24c8      	movs	r4, #200	; 0xc8
 8007960:	0064      	lsls	r4, r4, #1
 8007962:	2218      	movs	r2, #24
 8007964:	18a2      	adds	r2, r4, r2
 8007966:	19d1      	adds	r1, r2, r7
 8007968:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <astronode_send_mgi_rr+0x148>)
 800796c:	0018      	movs	r0, r3
 800796e:	f7fb fb0b 	bl	8002f88 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007972:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <astronode_send_mgi_rr+0x144>)
 8007974:	22cc      	movs	r2, #204	; 0xcc
 8007976:	0052      	lsls	r2, r2, #1
 8007978:	189b      	adds	r3, r3, r2
 800797a:	2218      	movs	r2, #24
 800797c:	4694      	mov	ip, r2
 800797e:	44bc      	add	ip, r7
 8007980:	4463      	add	r3, ip
 8007982:	22c4      	movs	r2, #196	; 0xc4
 8007984:	5a9b      	ldrh	r3, [r3, r2]
 8007986:	0019      	movs	r1, r3
 8007988:	2318      	movs	r3, #24
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	3301      	adds	r3, #1
 800798e:	4a0e      	ldr	r2, [pc, #56]	; (80079c8 <astronode_send_mgi_rr+0x14c>)
 8007990:	2018      	movs	r0, #24
 8007992:	1820      	adds	r0, r4, r0
 8007994:	19c0      	adds	r0, r0, r7
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	f003 fe14 	bl	800b5c4 <snprintf>
            send_debug_logs(guid);
 800799c:	2318      	movs	r3, #24
 800799e:	18e3      	adds	r3, r4, r3
 80079a0:	19db      	adds	r3, r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7fb faef 	bl	8002f88 <send_debug_logs>
 80079aa:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80079ac:	e003      	b.n	80079b6 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <astronode_send_mgi_rr+0x150>)
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7fb fae9 	bl	8002f88 <send_debug_logs>
}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	46bd      	mov	sp, r7
 80079ba:	b06d      	add	sp, #436	; 0x1b4
 80079bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	fffffe68 	.word	0xfffffe68
 80079c4:	080128bc 	.word	0x080128bc
 80079c8:	080128cc 	.word	0x080128cc
 80079cc:	080128d0 	.word	0x080128d0

080079d0 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 80079d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d2:	b0ed      	sub	sp, #436	; 0x1b4
 80079d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80079d6:	21c8      	movs	r1, #200	; 0xc8
 80079d8:	2318      	movs	r3, #24
 80079da:	18cb      	adds	r3, r1, r3
 80079dc:	19db      	adds	r3, r3, r7
 80079de:	0018      	movs	r0, r3
 80079e0:	23c6      	movs	r3, #198	; 0xc6
 80079e2:	001a      	movs	r2, r3
 80079e4:	2100      	movs	r1, #0
 80079e6:	f003 feb7 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 80079ea:	4b4a      	ldr	r3, [pc, #296]	; (8007b14 <astronode_send_msn_rr+0x144>)
 80079ec:	26cc      	movs	r6, #204	; 0xcc
 80079ee:	0076      	lsls	r6, r6, #1
 80079f0:	199b      	adds	r3, r3, r6
 80079f2:	2218      	movs	r2, #24
 80079f4:	4694      	mov	ip, r2
 80079f6:	44bc      	add	ip, r7
 80079f8:	4463      	add	r3, ip
 80079fa:	0018      	movs	r0, r3
 80079fc:	23c6      	movs	r3, #198	; 0xc6
 80079fe:	001a      	movs	r2, r3
 8007a00:	2100      	movs	r1, #0
 8007a02:	f003 fea9 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007a06:	21c8      	movs	r1, #200	; 0xc8
 8007a08:	2318      	movs	r3, #24
 8007a0a:	18cb      	adds	r3, r1, r3
 8007a0c:	19db      	adds	r3, r3, r7
 8007a0e:	221a      	movs	r2, #26
 8007a10:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a12:	2318      	movs	r3, #24
 8007a14:	18fa      	adds	r2, r7, r3
 8007a16:	2318      	movs	r3, #24
 8007a18:	18cb      	adds	r3, r1, r3
 8007a1a:	19db      	adds	r3, r3, r7
 8007a1c:	0011      	movs	r1, r2
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f001 f8b4 	bl	8008b8c <astronode_transport_send_receive>
 8007a24:	0003      	movs	r3, r0
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d16f      	bne.n	8007b0a <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007a2a:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <astronode_send_msn_rr+0x144>)
 8007a2c:	0032      	movs	r2, r6
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	2118      	movs	r1, #24
 8007a32:	468c      	mov	ip, r1
 8007a34:	44bc      	add	ip, r7
 8007a36:	4463      	add	r3, ip
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b9a      	cmp	r3, #154	; 0x9a
 8007a3c:	d161      	bne.n	8007b02 <astronode_send_msn_rr+0x132>
        {
 8007a3e:	466b      	mov	r3, sp
 8007a40:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007a42:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <astronode_send_msn_rr+0x144>)
 8007a44:	189b      	adds	r3, r3, r2
 8007a46:	2218      	movs	r2, #24
 8007a48:	4694      	mov	ip, r2
 8007a4a:	44bc      	add	ip, r7
 8007a4c:	4463      	add	r3, ip
 8007a4e:	22c4      	movs	r2, #196	; 0xc4
 8007a50:	5a9b      	ldrh	r3, [r3, r2]
 8007a52:	001a      	movs	r2, r3
 8007a54:	3a01      	subs	r2, #1
 8007a56:	21ca      	movs	r1, #202	; 0xca
 8007a58:	0049      	lsls	r1, r1, #1
 8007a5a:	2018      	movs	r0, #24
 8007a5c:	1809      	adds	r1, r1, r0
 8007a5e:	19c9      	adds	r1, r1, r7
 8007a60:	600a      	str	r2, [r1, #0]
 8007a62:	001c      	movs	r4, r3
 8007a64:	2200      	movs	r2, #0
 8007a66:	0015      	movs	r5, r2
 8007a68:	0020      	movs	r0, r4
 8007a6a:	0029      	movs	r1, r5
 8007a6c:	0004      	movs	r4, r0
 8007a6e:	0f62      	lsrs	r2, r4, #29
 8007a70:	000c      	movs	r4, r1
 8007a72:	00e4      	lsls	r4, r4, #3
 8007a74:	617c      	str	r4, [r7, #20]
 8007a76:	697c      	ldr	r4, [r7, #20]
 8007a78:	4314      	orrs	r4, r2
 8007a7a:	617c      	str	r4, [r7, #20]
 8007a7c:	0001      	movs	r1, r0
 8007a7e:	00c9      	lsls	r1, r1, #3
 8007a80:	6139      	str	r1, [r7, #16]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	6838      	ldr	r0, [r7, #0]
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	0004      	movs	r4, r0
 8007a8e:	0f62      	lsrs	r2, r4, #29
 8007a90:	000c      	movs	r4, r1
 8007a92:	00e4      	lsls	r4, r4, #3
 8007a94:	60fc      	str	r4, [r7, #12]
 8007a96:	68fc      	ldr	r4, [r7, #12]
 8007a98:	4314      	orrs	r4, r2
 8007a9a:	60fc      	str	r4, [r7, #12]
 8007a9c:	0001      	movs	r1, r0
 8007a9e:	00ca      	lsls	r2, r1, #3
 8007aa0:	60ba      	str	r2, [r7, #8]
 8007aa2:	3307      	adds	r3, #7
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4669      	mov	r1, sp
 8007aaa:	1acb      	subs	r3, r1, r3
 8007aac:	469d      	mov	sp, r3
 8007aae:	466b      	mov	r3, sp
 8007ab0:	3300      	adds	r3, #0
 8007ab2:	24c8      	movs	r4, #200	; 0xc8
 8007ab4:	0064      	lsls	r4, r4, #1
 8007ab6:	2218      	movs	r2, #24
 8007ab8:	18a2      	adds	r2, r4, r2
 8007aba:	19d1      	adds	r1, r2, r7
 8007abc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007abe:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <astronode_send_msn_rr+0x148>)
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7fb fa61 	bl	8002f88 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007ac6:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <astronode_send_msn_rr+0x144>)
 8007ac8:	22cc      	movs	r2, #204	; 0xcc
 8007aca:	0052      	lsls	r2, r2, #1
 8007acc:	189b      	adds	r3, r3, r2
 8007ace:	2218      	movs	r2, #24
 8007ad0:	4694      	mov	ip, r2
 8007ad2:	44bc      	add	ip, r7
 8007ad4:	4463      	add	r3, ip
 8007ad6:	22c4      	movs	r2, #196	; 0xc4
 8007ad8:	5a9b      	ldrh	r3, [r3, r2]
 8007ada:	0019      	movs	r1, r3
 8007adc:	2318      	movs	r3, #24
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a0e      	ldr	r2, [pc, #56]	; (8007b1c <astronode_send_msn_rr+0x14c>)
 8007ae4:	2018      	movs	r0, #24
 8007ae6:	1820      	adds	r0, r4, r0
 8007ae8:	19c0      	adds	r0, r0, r7
 8007aea:	6800      	ldr	r0, [r0, #0]
 8007aec:	f003 fd6a 	bl	800b5c4 <snprintf>
            send_debug_logs(serial_number);
 8007af0:	2318      	movs	r3, #24
 8007af2:	18e3      	adds	r3, r4, r3
 8007af4:	19db      	adds	r3, r3, r7
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f7fb fa45 	bl	8002f88 <send_debug_logs>
 8007afe:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007b00:	e003      	b.n	8007b0a <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <astronode_send_msn_rr+0x150>)
 8007b04:	0018      	movs	r0, r3
 8007b06:	f7fb fa3f 	bl	8002f88 <send_debug_logs>
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b06d      	add	sp, #436	; 0x1b4
 8007b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	fffffe68 	.word	0xfffffe68
 8007b18:	080128ec 	.word	0x080128ec
 8007b1c:	080128cc 	.word	0x080128cc
 8007b20:	08012908 	.word	0x08012908

08007b24 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007b24:	b5b0      	push	{r4, r5, r7, lr}
 8007b26:	b0e4      	sub	sp, #400	; 0x190
 8007b28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b2a:	24c8      	movs	r4, #200	; 0xc8
 8007b2c:	193b      	adds	r3, r7, r4
 8007b2e:	0018      	movs	r0, r3
 8007b30:	23c6      	movs	r3, #198	; 0xc6
 8007b32:	001a      	movs	r2, r3
 8007b34:	2100      	movs	r1, #0
 8007b36:	f003 fe0f 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007b3a:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007b3c:	25c8      	movs	r5, #200	; 0xc8
 8007b3e:	006d      	lsls	r5, r5, #1
 8007b40:	195b      	adds	r3, r3, r5
 8007b42:	19db      	adds	r3, r3, r7
 8007b44:	0018      	movs	r0, r3
 8007b46:	23c6      	movs	r3, #198	; 0xc6
 8007b48:	001a      	movs	r2, r3
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	f003 fe04 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007b50:	193b      	adds	r3, r7, r4
 8007b52:	2265      	movs	r2, #101	; 0x65
 8007b54:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b56:	003a      	movs	r2, r7
 8007b58:	193b      	adds	r3, r7, r4
 8007b5a:	0011      	movs	r1, r2
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f001 f815 	bl	8008b8c <astronode_transport_send_receive>
 8007b62:	0003      	movs	r3, r0
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d147      	bne.n	8007bf8 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007b6a:	195b      	adds	r3, r3, r5
 8007b6c:	19db      	adds	r3, r3, r7
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2be5      	cmp	r3, #229	; 0xe5
 8007b72:	d141      	bne.n	8007bf8 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007b74:	4b22      	ldr	r3, [pc, #136]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007b76:	195b      	adds	r3, r3, r5
 8007b78:	19db      	adds	r3, r3, r7
 8007b7a:	785b      	ldrb	r3, [r3, #1]
 8007b7c:	001a      	movs	r2, r3
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4013      	ands	r3, r2
 8007b82:	d006      	beq.n	8007b92 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <astronode_send_evt_rr+0xe0>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007b8a:	4b1f      	ldr	r3, [pc, #124]	; (8007c08 <astronode_send_evt_rr+0xe4>)
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f7fb f9fb 	bl	8002f88 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007b94:	22c8      	movs	r2, #200	; 0xc8
 8007b96:	0052      	lsls	r2, r2, #1
 8007b98:	189b      	adds	r3, r3, r2
 8007b9a:	19db      	adds	r3, r3, r7
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	d006      	beq.n	8007bb4 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007ba6:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <astronode_send_evt_rr+0xe8>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007bac:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <astronode_send_evt_rr+0xec>)
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fb f9ea 	bl	8002f88 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007bb4:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007bb6:	22c8      	movs	r2, #200	; 0xc8
 8007bb8:	0052      	lsls	r2, r2, #1
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	19db      	adds	r3, r3, r7
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	001a      	movs	r2, r3
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d006      	beq.n	8007bd6 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007bc8:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <astronode_send_evt_rr+0xf0>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <astronode_send_evt_rr+0xf4>)
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7fb f9d9 	bl	8002f88 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <astronode_send_evt_rr+0xdc>)
 8007bd8:	22c8      	movs	r2, #200	; 0xc8
 8007bda:	0052      	lsls	r2, r2, #1
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	19db      	adds	r3, r3, r7
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	001a      	movs	r2, r3
 8007be4:	2308      	movs	r3, #8
 8007be6:	4013      	ands	r3, r2
 8007be8:	d006      	beq.n	8007bf8 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <astronode_send_evt_rr+0xf8>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <astronode_send_evt_rr+0xfc>)
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7fb f9c8 	bl	8002f88 <send_debug_logs>
            }

        }
    }
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b064      	add	sp, #400	; 0x190
 8007bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8007c00:	fffffe70 	.word	0xfffffe70
 8007c04:	20000bf4 	.word	0x20000bf4
 8007c08:	080129b0 	.word	0x080129b0
 8007c0c:	20000bf5 	.word	0x20000bf5
 8007c10:	080129d4 	.word	0x080129d4
 8007c14:	20000bf6 	.word	0x20000bf6
 8007c18:	080129ec 	.word	0x080129ec
 8007c1c:	20000bf7 	.word	0x20000bf7
 8007c20:	08012a00 	.word	0x08012a00

08007c24 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c26:	b0e7      	sub	sp, #412	; 0x19c
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007c2e:	24d0      	movs	r4, #208	; 0xd0
 8007c30:	193b      	adds	r3, r7, r4
 8007c32:	0018      	movs	r0, r3
 8007c34:	23c6      	movs	r3, #198	; 0xc6
 8007c36:	001a      	movs	r2, r3
 8007c38:	2100      	movs	r1, #0
 8007c3a:	f003 fd8d 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007c3e:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <astronode_send_geo_wr+0x174>)
 8007c40:	26cc      	movs	r6, #204	; 0xcc
 8007c42:	0076      	lsls	r6, r6, #1
 8007c44:	199b      	adds	r3, r3, r6
 8007c46:	19db      	adds	r3, r3, r7
 8007c48:	0018      	movs	r0, r3
 8007c4a:	23c6      	movs	r3, #198	; 0xc6
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f003 fd82 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007c54:	193b      	adds	r3, r7, r4
 8007c56:	2235      	movs	r2, #53	; 0x35
 8007c58:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007c5a:	193b      	adds	r3, r7, r4
 8007c5c:	22c4      	movs	r2, #196	; 0xc4
 8007c5e:	5a9b      	ldrh	r3, [r3, r2]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	b290      	uxth	r0, r2
 8007c64:	193a      	adds	r2, r7, r4
 8007c66:	21c4      	movs	r1, #196	; 0xc4
 8007c68:	5250      	strh	r0, [r2, r1]
 8007c6a:	0019      	movs	r1, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	193b      	adds	r3, r7, r4
 8007c72:	185b      	adds	r3, r3, r1
 8007c74:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	1218      	asrs	r0, r3, #8
 8007c7a:	0025      	movs	r5, r4
 8007c7c:	197b      	adds	r3, r7, r5
 8007c7e:	22c4      	movs	r2, #196	; 0xc4
 8007c80:	5a9b      	ldrh	r3, [r3, r2]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	b294      	uxth	r4, r2
 8007c86:	197a      	adds	r2, r7, r5
 8007c88:	21c4      	movs	r1, #196	; 0xc4
 8007c8a:	5254      	strh	r4, [r2, r1]
 8007c8c:	0019      	movs	r1, r3
 8007c8e:	b2c2      	uxtb	r2, r0
 8007c90:	002c      	movs	r4, r5
 8007c92:	193b      	adds	r3, r7, r4
 8007c94:	185b      	adds	r3, r3, r1
 8007c96:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	1418      	asrs	r0, r3, #16
 8007c9c:	0025      	movs	r5, r4
 8007c9e:	197b      	adds	r3, r7, r5
 8007ca0:	22c4      	movs	r2, #196	; 0xc4
 8007ca2:	5a9b      	ldrh	r3, [r3, r2]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	b294      	uxth	r4, r2
 8007ca8:	197a      	adds	r2, r7, r5
 8007caa:	21c4      	movs	r1, #196	; 0xc4
 8007cac:	5254      	strh	r4, [r2, r1]
 8007cae:	0019      	movs	r1, r3
 8007cb0:	b2c2      	uxtb	r2, r0
 8007cb2:	002c      	movs	r4, r5
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	185b      	adds	r3, r3, r1
 8007cb8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	1618      	asrs	r0, r3, #24
 8007cbe:	0025      	movs	r5, r4
 8007cc0:	197b      	adds	r3, r7, r5
 8007cc2:	22c4      	movs	r2, #196	; 0xc4
 8007cc4:	5a9b      	ldrh	r3, [r3, r2]
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	b294      	uxth	r4, r2
 8007cca:	197a      	adds	r2, r7, r5
 8007ccc:	21c4      	movs	r1, #196	; 0xc4
 8007cce:	5254      	strh	r4, [r2, r1]
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	b2c2      	uxtb	r2, r0
 8007cd4:	002c      	movs	r4, r5
 8007cd6:	193b      	adds	r3, r7, r4
 8007cd8:	185b      	adds	r3, r3, r1
 8007cda:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007cdc:	193b      	adds	r3, r7, r4
 8007cde:	22c4      	movs	r2, #196	; 0xc4
 8007ce0:	5a9b      	ldrh	r3, [r3, r2]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	b290      	uxth	r0, r2
 8007ce6:	193a      	adds	r2, r7, r4
 8007ce8:	21c4      	movs	r1, #196	; 0xc4
 8007cea:	5250      	strh	r0, [r2, r1]
 8007cec:	0019      	movs	r1, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	193b      	adds	r3, r7, r4
 8007cf4:	185b      	adds	r3, r3, r1
 8007cf6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	1218      	asrs	r0, r3, #8
 8007cfc:	0025      	movs	r5, r4
 8007cfe:	197b      	adds	r3, r7, r5
 8007d00:	22c4      	movs	r2, #196	; 0xc4
 8007d02:	5a9b      	ldrh	r3, [r3, r2]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	b294      	uxth	r4, r2
 8007d08:	197a      	adds	r2, r7, r5
 8007d0a:	21c4      	movs	r1, #196	; 0xc4
 8007d0c:	5254      	strh	r4, [r2, r1]
 8007d0e:	0019      	movs	r1, r3
 8007d10:	b2c2      	uxtb	r2, r0
 8007d12:	002c      	movs	r4, r5
 8007d14:	193b      	adds	r3, r7, r4
 8007d16:	185b      	adds	r3, r3, r1
 8007d18:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	1418      	asrs	r0, r3, #16
 8007d1e:	0025      	movs	r5, r4
 8007d20:	197b      	adds	r3, r7, r5
 8007d22:	22c4      	movs	r2, #196	; 0xc4
 8007d24:	5a9b      	ldrh	r3, [r3, r2]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	b294      	uxth	r4, r2
 8007d2a:	197a      	adds	r2, r7, r5
 8007d2c:	21c4      	movs	r1, #196	; 0xc4
 8007d2e:	5254      	strh	r4, [r2, r1]
 8007d30:	0019      	movs	r1, r3
 8007d32:	b2c2      	uxtb	r2, r0
 8007d34:	002c      	movs	r4, r5
 8007d36:	193b      	adds	r3, r7, r4
 8007d38:	185b      	adds	r3, r3, r1
 8007d3a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	1618      	asrs	r0, r3, #24
 8007d40:	0025      	movs	r5, r4
 8007d42:	197b      	adds	r3, r7, r5
 8007d44:	22c4      	movs	r2, #196	; 0xc4
 8007d46:	5a9b      	ldrh	r3, [r3, r2]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	b294      	uxth	r4, r2
 8007d4c:	197a      	adds	r2, r7, r5
 8007d4e:	21c4      	movs	r1, #196	; 0xc4
 8007d50:	5254      	strh	r4, [r2, r1]
 8007d52:	0019      	movs	r1, r3
 8007d54:	b2c2      	uxtb	r2, r0
 8007d56:	0028      	movs	r0, r5
 8007d58:	183b      	adds	r3, r7, r0
 8007d5a:	185b      	adds	r3, r3, r1
 8007d5c:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d5e:	2308      	movs	r3, #8
 8007d60:	18fa      	adds	r2, r7, r3
 8007d62:	183b      	adds	r3, r7, r0
 8007d64:	0011      	movs	r1, r2
 8007d66:	0018      	movs	r0, r3
 8007d68:	f000 ff10 	bl	8008b8c <astronode_transport_send_receive>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d10e      	bne.n	8007d90 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <astronode_send_geo_wr+0x174>)
 8007d74:	199b      	adds	r3, r3, r6
 8007d76:	19db      	adds	r3, r3, r7
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2bb5      	cmp	r3, #181	; 0xb5
 8007d7c:	d104      	bne.n	8007d88 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8007d7e:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <astronode_send_geo_wr+0x178>)
 8007d80:	0018      	movs	r0, r3
 8007d82:	f7fb f901 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007d86:	e003      	b.n	8007d90 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <astronode_send_geo_wr+0x17c>)
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f7fb f8fc 	bl	8002f88 <send_debug_logs>
}
 8007d90:	46c0      	nop			; (mov r8, r8)
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b067      	add	sp, #412	; 0x19c
 8007d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d98:	fffffe70 	.word	0xfffffe70
 8007d9c:	08012a14 	.word	0x08012a14
 8007da0:	08012a40 	.word	0x08012a40

08007da4 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8007da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da6:	b0fb      	sub	sp, #492	; 0x1ec
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6039      	str	r1, [r7, #0]
 8007dac:	0011      	movs	r1, r2
 8007dae:	4b4a      	ldr	r3, [pc, #296]	; (8007ed8 <astronode_send_pld_er+0x134>)
 8007db0:	26f4      	movs	r6, #244	; 0xf4
 8007db2:	0076      	lsls	r6, r6, #1
 8007db4:	199b      	adds	r3, r3, r6
 8007db6:	19db      	adds	r3, r3, r7
 8007db8:	1c02      	adds	r2, r0, #0
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	4b47      	ldr	r3, [pc, #284]	; (8007edc <astronode_send_pld_er+0x138>)
 8007dbe:	199b      	adds	r3, r3, r6
 8007dc0:	19db      	adds	r3, r3, r7
 8007dc2:	1c0a      	adds	r2, r1, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007dc6:	2490      	movs	r4, #144	; 0x90
 8007dc8:	0064      	lsls	r4, r4, #1
 8007dca:	193b      	adds	r3, r7, r4
 8007dcc:	0018      	movs	r0, r3
 8007dce:	23c6      	movs	r3, #198	; 0xc6
 8007dd0:	001a      	movs	r2, r3
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f003 fcc0 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <astronode_send_pld_er+0x13c>)
 8007dda:	199b      	adds	r3, r3, r6
 8007ddc:	19db      	adds	r3, r3, r7
 8007dde:	0018      	movs	r0, r3
 8007de0:	23c6      	movs	r3, #198	; 0xc6
 8007de2:	001a      	movs	r2, r3
 8007de4:	2100      	movs	r1, #0
 8007de6:	f003 fcb7 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007dea:	193b      	adds	r3, r7, r4
 8007dec:	2225      	movs	r2, #37	; 0x25
 8007dee:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8007df0:	193b      	adds	r3, r7, r4
 8007df2:	22c4      	movs	r2, #196	; 0xc4
 8007df4:	5a9b      	ldrh	r3, [r3, r2]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	b290      	uxth	r0, r2
 8007dfa:	193a      	adds	r2, r7, r4
 8007dfc:	21c4      	movs	r1, #196	; 0xc4
 8007dfe:	5250      	strh	r0, [r2, r1]
 8007e00:	0019      	movs	r1, r3
 8007e02:	4b35      	ldr	r3, [pc, #212]	; (8007ed8 <astronode_send_pld_er+0x134>)
 8007e04:	199b      	adds	r3, r3, r6
 8007e06:	19db      	adds	r3, r3, r7
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	193b      	adds	r3, r7, r4
 8007e0e:	185b      	adds	r3, r3, r1
 8007e10:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8007e12:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <astronode_send_pld_er+0x134>)
 8007e14:	199b      	adds	r3, r3, r6
 8007e16:	19db      	adds	r3, r3, r7
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	b298      	uxth	r0, r3
 8007e1e:	0025      	movs	r5, r4
 8007e20:	197b      	adds	r3, r7, r5
 8007e22:	22c4      	movs	r2, #196	; 0xc4
 8007e24:	5a9b      	ldrh	r3, [r3, r2]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	b294      	uxth	r4, r2
 8007e2a:	197a      	adds	r2, r7, r5
 8007e2c:	21c4      	movs	r1, #196	; 0xc4
 8007e2e:	5254      	strh	r4, [r2, r1]
 8007e30:	0019      	movs	r1, r3
 8007e32:	b2c2      	uxtb	r2, r0
 8007e34:	002c      	movs	r4, r5
 8007e36:	193b      	adds	r3, r7, r4
 8007e38:	185b      	adds	r3, r3, r1
 8007e3a:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8007e3c:	193b      	adds	r3, r7, r4
 8007e3e:	22c4      	movs	r2, #196	; 0xc4
 8007e40:	5a9b      	ldrh	r3, [r3, r2]
 8007e42:	001a      	movs	r2, r3
 8007e44:	193b      	adds	r3, r7, r4
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	1c58      	adds	r0, r3, #1
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <astronode_send_pld_er+0x138>)
 8007e4c:	199b      	adds	r3, r3, r6
 8007e4e:	19db      	adds	r3, r3, r7
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	0019      	movs	r1, r3
 8007e56:	f003 fd64 	bl	800b922 <memcpy>
    request.payload_len = 2 + payload_length;
 8007e5a:	4b20      	ldr	r3, [pc, #128]	; (8007edc <astronode_send_pld_er+0x138>)
 8007e5c:	199b      	adds	r3, r3, r6
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	3302      	adds	r3, #2
 8007e64:	b299      	uxth	r1, r3
 8007e66:	193b      	adds	r3, r7, r4
 8007e68:	22c4      	movs	r2, #196	; 0xc4
 8007e6a:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8007e6c:	2358      	movs	r3, #88	; 0x58
 8007e6e:	18fa      	adds	r2, r7, r3
 8007e70:	193b      	adds	r3, r7, r4
 8007e72:	0011      	movs	r1, r2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f000 fe89 	bl	8008b8c <astronode_transport_send_receive>
 8007e7a:	0003      	movs	r3, r0
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d125      	bne.n	8007ecc <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <astronode_send_pld_er+0x13c>)
 8007e82:	199b      	adds	r3, r3, r6
 8007e84:	19db      	adds	r3, r3, r7
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2ba5      	cmp	r3, #165	; 0xa5
 8007e8a:	d10f      	bne.n	8007eac <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8007e8c:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <astronode_send_pld_er+0x134>)
 8007e8e:	199b      	adds	r3, r3, r6
 8007e90:	19db      	adds	r3, r3, r7
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	4913      	ldr	r1, [pc, #76]	; (8007ee4 <astronode_send_pld_er+0x140>)
 8007e96:	2408      	movs	r4, #8
 8007e98:	193b      	adds	r3, r7, r4
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f003 fbc6 	bl	800b62c <sprintf>
            send_debug_logs ( s ) ;
 8007ea0:	193b      	adds	r3, r7, r4
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7fb f870 	bl	8002f88 <send_debug_logs>
            return true ;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e010      	b.n	8007ece <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <astronode_send_pld_er+0x134>)
 8007eae:	22f4      	movs	r2, #244	; 0xf4
 8007eb0:	0052      	lsls	r2, r2, #1
 8007eb2:	189b      	adds	r3, r3, r2
 8007eb4:	19db      	adds	r3, r3, r7
 8007eb6:	881a      	ldrh	r2, [r3, #0]
 8007eb8:	490b      	ldr	r1, [pc, #44]	; (8007ee8 <astronode_send_pld_er+0x144>)
 8007eba:	2408      	movs	r4, #8
 8007ebc:	193b      	adds	r3, r7, r4
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f003 fbb4 	bl	800b62c <sprintf>
            send_debug_logs ( s ) ;
 8007ec4:	193b      	adds	r3, r7, r4
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f7fb f85e 	bl	8002f88 <send_debug_logs>
        }
    }
    return false ;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	0018      	movs	r0, r3
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b07b      	add	sp, #492	; 0x1ec
 8007ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	fffffe1e 	.word	0xfffffe1e
 8007edc:	fffffe1c 	.word	0xfffffe1c
 8007ee0:	fffffe70 	.word	0xfffffe70
 8007ee4:	08012ab8 	.word	0x08012ab8
 8007ee8:	08012ae4 	.word	0x08012ae4

08007eec <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8007eec:	b5b0      	push	{r4, r5, r7, lr}
 8007eee:	b0e4      	sub	sp, #400	; 0x190
 8007ef0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ef2:	24c8      	movs	r4, #200	; 0xc8
 8007ef4:	193b      	adds	r3, r7, r4
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	23c6      	movs	r3, #198	; 0xc6
 8007efa:	001a      	movs	r2, r3
 8007efc:	2100      	movs	r1, #0
 8007efe:	f003 fc2b 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <astronode_send_pld_fr+0x6c>)
 8007f04:	25c8      	movs	r5, #200	; 0xc8
 8007f06:	006d      	lsls	r5, r5, #1
 8007f08:	195b      	adds	r3, r3, r5
 8007f0a:	19db      	adds	r3, r3, r7
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	23c6      	movs	r3, #198	; 0xc6
 8007f10:	001a      	movs	r2, r3
 8007f12:	2100      	movs	r1, #0
 8007f14:	f003 fc20 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8007f18:	193b      	adds	r3, r7, r4
 8007f1a:	2227      	movs	r2, #39	; 0x27
 8007f1c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f1e:	003a      	movs	r2, r7
 8007f20:	193b      	adds	r3, r7, r4
 8007f22:	0011      	movs	r1, r2
 8007f24:	0018      	movs	r0, r3
 8007f26:	f000 fe31 	bl	8008b8c <astronode_transport_send_receive>
 8007f2a:	0003      	movs	r3, r0
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d10e      	bne.n	8007f4e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <astronode_send_pld_fr+0x6c>)
 8007f32:	195b      	adds	r3, r3, r5
 8007f34:	19db      	adds	r3, r3, r7
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2ba7      	cmp	r3, #167	; 0xa7
 8007f3a:	d104      	bne.n	8007f46 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8007f3c:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <astronode_send_pld_fr+0x70>)
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f7fb f822 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8007f44:	e003      	b.n	8007f4e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <astronode_send_pld_fr+0x74>)
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7fb f81d 	bl	8002f88 <send_debug_logs>
}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	46bd      	mov	sp, r7
 8007f52:	b064      	add	sp, #400	; 0x190
 8007f54:	bdb0      	pop	{r4, r5, r7, pc}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	fffffe70 	.word	0xfffffe70
 8007f5c:	08012b14 	.word	0x08012b14
 8007f60:	08012b4c 	.word	0x08012b4c

08007f64 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8007f64:	b5b0      	push	{r4, r5, r7, lr}
 8007f66:	b0e4      	sub	sp, #400	; 0x190
 8007f68:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f6a:	24c8      	movs	r4, #200	; 0xc8
 8007f6c:	193b      	adds	r3, r7, r4
 8007f6e:	0018      	movs	r0, r3
 8007f70:	23c6      	movs	r3, #198	; 0xc6
 8007f72:	001a      	movs	r2, r3
 8007f74:	2100      	movs	r1, #0
 8007f76:	f003 fbef 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8007f7a:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <astronode_send_res_cr+0x70>)
 8007f7c:	25c8      	movs	r5, #200	; 0xc8
 8007f7e:	006d      	lsls	r5, r5, #1
 8007f80:	195b      	adds	r3, r3, r5
 8007f82:	19db      	adds	r3, r3, r7
 8007f84:	0018      	movs	r0, r3
 8007f86:	23c6      	movs	r3, #198	; 0xc6
 8007f88:	001a      	movs	r2, r3
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f003 fbe4 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8007f90:	193b      	adds	r3, r7, r4
 8007f92:	2255      	movs	r2, #85	; 0x55
 8007f94:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f96:	003a      	movs	r2, r7
 8007f98:	193b      	adds	r3, r7, r4
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f000 fdf5 	bl	8008b8c <astronode_transport_send_receive>
 8007fa2:	0003      	movs	r3, r0
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d111      	bne.n	8007fcc <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <astronode_send_res_cr+0x70>)
 8007faa:	195b      	adds	r3, r3, r5
 8007fac:	19db      	adds	r3, r3, r7
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2bd5      	cmp	r3, #213	; 0xd5
 8007fb2:	d107      	bne.n	8007fc4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8007fb4:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <astronode_send_res_cr+0x74>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8007fba:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <astronode_send_res_cr+0x78>)
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7fa ffe3 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8007fc2:	e003      	b.n	8007fcc <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <astronode_send_res_cr+0x7c>)
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7fa ffde 	bl	8002f88 <send_debug_logs>
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b064      	add	sp, #400	; 0x190
 8007fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd4:	fffffe70 	.word	0xfffffe70
 8007fd8:	20000bf5 	.word	0x20000bf5
 8007fdc:	08012b88 	.word	0x08012b88
 8007fe0:	08012bbc 	.word	0x08012bbc

08007fe4 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8007fe4:	b5b0      	push	{r4, r5, r7, lr}
 8007fe6:	b0fa      	sub	sp, #488	; 0x1e8
 8007fe8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8007fea:	258e      	movs	r5, #142	; 0x8e
 8007fec:	006d      	lsls	r5, r5, #1
 8007fee:	197b      	adds	r3, r7, r5
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	23c6      	movs	r3, #198	; 0xc6
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	f003 fbae 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0} ;
 8007ffc:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 8007ffe:	24f4      	movs	r4, #244	; 0xf4
 8008000:	0064      	lsls	r4, r4, #1
 8008002:	191b      	adds	r3, r3, r4
 8008004:	19db      	adds	r3, r3, r7
 8008006:	0018      	movs	r0, r3
 8008008:	23c6      	movs	r3, #198	; 0xc6
 800800a:	001a      	movs	r2, r3
 800800c:	2100      	movs	r1, #0
 800800e:	f003 fba3 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008012:	197b      	adds	r3, r7, r5
 8008014:	2217      	movs	r2, #23
 8008016:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008018:	2354      	movs	r3, #84	; 0x54
 800801a:	18fa      	adds	r2, r7, r3
 800801c:	197b      	adds	r3, r7, r5
 800801e:	0011      	movs	r1, r2
 8008020:	0018      	movs	r0, r3
 8008022:	f000 fdb3 	bl	8008b8c <astronode_transport_send_receive>
 8008026:	0003      	movs	r3, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d133      	bne.n	8008094 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 800802c:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 800802e:	0021      	movs	r1, r4
 8008030:	185b      	adds	r3, r3, r1
 8008032:	19db      	adds	r3, r3, r7
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b97      	cmp	r3, #151	; 0x97
 8008038:	d128      	bne.n	800808c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800803a:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 800803c:	185b      	adds	r3, r3, r1
 800803e:	19db      	adds	r3, r3, r7
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008044:	4b16      	ldr	r3, [pc, #88]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 8008046:	185b      	adds	r3, r3, r1
 8008048:	19db      	adds	r3, r3, r7
 800804a:	789b      	ldrb	r3, [r3, #2]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008050:	4b13      	ldr	r3, [pc, #76]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 8008052:	185b      	adds	r3, r3, r1
 8008054:	19db      	adds	r3, r3, r7
 8008056:	78db      	ldrb	r3, [r3, #3]
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <astronode_send_rtc_rr+0xbc>)
 800805e:	185b      	adds	r3, r3, r1
 8008060:	19db      	adds	r3, r3, r7
 8008062:	791b      	ldrb	r3, [r3, #4]
 8008064:	061b      	lsls	r3, r3, #24
 8008066:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008068:	24f2      	movs	r4, #242	; 0xf2
 800806a:	0064      	lsls	r4, r4, #1
 800806c:	193a      	adds	r2, r7, r4
 800806e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008070:	193b      	adds	r3, r7, r4
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	490b      	ldr	r1, [pc, #44]	; (80080a4 <astronode_send_rtc_rr+0xc0>)
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	0018      	movs	r0, r3
 800807a:	f003 fad7 	bl	800b62c <sprintf>
            send_debug_logs ( str ) ;
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	0018      	movs	r0, r3
 8008082:	f7fa ff81 	bl	8002f88 <send_debug_logs>
            return rtc_time ;
 8008086:	193b      	adds	r3, r7, r4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	e004      	b.n	8008096 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <astronode_send_rtc_rr+0xc4>)
 800808e:	0018      	movs	r0, r3
 8008090:	f7fa ff7a 	bl	8002f88 <send_debug_logs>
        }
    }
    return 0 ;
 8008094:	2300      	movs	r3, #0
}
 8008096:	0018      	movs	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	b07a      	add	sp, #488	; 0x1e8
 800809c:	bdb0      	pop	{r4, r5, r7, pc}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	fffffe6c 	.word	0xfffffe6c
 80080a4:	08012be8 	.word	0x08012be8
 80080a8:	08012c28 	.word	0x08012c28

080080ac <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80080ac:	b5b0      	push	{r4, r5, r7, lr}
 80080ae:	b0f8      	sub	sp, #480	; 0x1e0
 80080b0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80080b2:	258c      	movs	r5, #140	; 0x8c
 80080b4:	006d      	lsls	r5, r5, #1
 80080b6:	197b      	adds	r3, r7, r5
 80080b8:	0018      	movs	r0, r3
 80080ba:	23c6      	movs	r3, #198	; 0xc6
 80080bc:	001a      	movs	r2, r3
 80080be:	2100      	movs	r1, #0
 80080c0:	f003 fb4a 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 80080c4:	4b21      	ldr	r3, [pc, #132]	; (800814c <astronode_send_sak_rr+0xa0>)
 80080c6:	24f0      	movs	r4, #240	; 0xf0
 80080c8:	0064      	lsls	r4, r4, #1
 80080ca:	191b      	adds	r3, r3, r4
 80080cc:	19db      	adds	r3, r3, r7
 80080ce:	0018      	movs	r0, r3
 80080d0:	23c6      	movs	r3, #198	; 0xc6
 80080d2:	001a      	movs	r2, r3
 80080d4:	2100      	movs	r1, #0
 80080d6:	f003 fb3f 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80080da:	197b      	adds	r3, r7, r5
 80080dc:	2245      	movs	r2, #69	; 0x45
 80080de:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080e0:	2350      	movs	r3, #80	; 0x50
 80080e2:	18fa      	adds	r2, r7, r3
 80080e4:	197b      	adds	r3, r7, r5
 80080e6:	0011      	movs	r1, r2
 80080e8:	0018      	movs	r0, r3
 80080ea:	f000 fd4f 	bl	8008b8c <astronode_transport_send_receive>
 80080ee:	0003      	movs	r3, r0
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d126      	bne.n	8008142 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80080f4:	4b15      	ldr	r3, [pc, #84]	; (800814c <astronode_send_sak_rr+0xa0>)
 80080f6:	191b      	adds	r3, r3, r4
 80080f8:	19db      	adds	r3, r3, r7
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2bc5      	cmp	r3, #197	; 0xc5
 80080fe:	d11c      	bne.n	800813a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008100:	4b12      	ldr	r3, [pc, #72]	; (800814c <astronode_send_sak_rr+0xa0>)
 8008102:	191b      	adds	r3, r3, r4
 8008104:	19db      	adds	r3, r3, r7
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	b299      	uxth	r1, r3
 800810a:	4b10      	ldr	r3, [pc, #64]	; (800814c <astronode_send_sak_rr+0xa0>)
 800810c:	191b      	adds	r3, r3, r4
 800810e:	19db      	adds	r3, r3, r7
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	b29b      	uxth	r3, r3
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	b29a      	uxth	r2, r3
 8008118:	20ef      	movs	r0, #239	; 0xef
 800811a:	0040      	lsls	r0, r0, #1
 800811c:	183b      	adds	r3, r7, r0
 800811e:	188a      	adds	r2, r1, r2
 8008120:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008122:	183b      	adds	r3, r7, r0
 8008124:	881a      	ldrh	r2, [r3, #0]
 8008126:	490a      	ldr	r1, [pc, #40]	; (8008150 <astronode_send_sak_rr+0xa4>)
 8008128:	003b      	movs	r3, r7
 800812a:	0018      	movs	r0, r3
 800812c:	f003 fa7e 	bl	800b62c <sprintf>
            send_debug_logs(str);
 8008130:	003b      	movs	r3, r7
 8008132:	0018      	movs	r0, r3
 8008134:	f7fa ff28 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008138:	e003      	b.n	8008142 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <astronode_send_sak_rr+0xa8>)
 800813c:	0018      	movs	r0, r3
 800813e:	f7fa ff23 	bl	8002f88 <send_debug_logs>
}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b078      	add	sp, #480	; 0x1e0
 8008148:	bdb0      	pop	{r4, r5, r7, pc}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	fffffe70 	.word	0xfffffe70
 8008150:	08012c44 	.word	0x08012c44
 8008154:	08012c70 	.word	0x08012c70

08008158 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008158:	b5b0      	push	{r4, r5, r7, lr}
 800815a:	b0e4      	sub	sp, #400	; 0x190
 800815c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800815e:	24c8      	movs	r4, #200	; 0xc8
 8008160:	193b      	adds	r3, r7, r4
 8008162:	0018      	movs	r0, r3
 8008164:	23c6      	movs	r3, #198	; 0xc6
 8008166:	001a      	movs	r2, r3
 8008168:	2100      	movs	r1, #0
 800816a:	f003 faf5 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <astronode_send_sak_cr+0x70>)
 8008170:	25c8      	movs	r5, #200	; 0xc8
 8008172:	006d      	lsls	r5, r5, #1
 8008174:	195b      	adds	r3, r3, r5
 8008176:	19db      	adds	r3, r3, r7
 8008178:	0018      	movs	r0, r3
 800817a:	23c6      	movs	r3, #198	; 0xc6
 800817c:	001a      	movs	r2, r3
 800817e:	2100      	movs	r1, #0
 8008180:	f003 faea 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008184:	193b      	adds	r3, r7, r4
 8008186:	2246      	movs	r2, #70	; 0x46
 8008188:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800818a:	003a      	movs	r2, r7
 800818c:	193b      	adds	r3, r7, r4
 800818e:	0011      	movs	r1, r2
 8008190:	0018      	movs	r0, r3
 8008192:	f000 fcfb 	bl	8008b8c <astronode_transport_send_receive>
 8008196:	0003      	movs	r3, r0
 8008198:	2b01      	cmp	r3, #1
 800819a:	d111      	bne.n	80081c0 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <astronode_send_sak_cr+0x70>)
 800819e:	195b      	adds	r3, r3, r5
 80081a0:	19db      	adds	r3, r3, r7
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2bc6      	cmp	r3, #198	; 0xc6
 80081a6:	d107      	bne.n	80081b8 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <astronode_send_sak_cr+0x74>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <astronode_send_sak_cr+0x78>)
 80081b0:	0018      	movs	r0, r3
 80081b2:	f7fa fee9 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80081b6:	e003      	b.n	80081c0 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <astronode_send_sak_cr+0x7c>)
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7fa fee4 	bl	8002f88 <send_debug_logs>
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b064      	add	sp, #400	; 0x190
 80081c6:	bdb0      	pop	{r4, r5, r7, pc}
 80081c8:	fffffe70 	.word	0xfffffe70
 80081cc:	20000bf4 	.word	0x20000bf4
 80081d0:	08012ca4 	.word	0x08012ca4
 80081d4:	08012ccc 	.word	0x08012ccc

080081d8 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80081d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081da:	b0ed      	sub	sp, #436	; 0x1b4
 80081dc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80081de:	21c8      	movs	r1, #200	; 0xc8
 80081e0:	2318      	movs	r3, #24
 80081e2:	18cb      	adds	r3, r1, r3
 80081e4:	19db      	adds	r3, r3, r7
 80081e6:	0018      	movs	r0, r3
 80081e8:	23c6      	movs	r3, #198	; 0xc6
 80081ea:	001a      	movs	r2, r3
 80081ec:	2100      	movs	r1, #0
 80081ee:	f003 fab3 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 80081f2:	4b4a      	ldr	r3, [pc, #296]	; (800831c <astronode_send_mpn_rr+0x144>)
 80081f4:	26cc      	movs	r6, #204	; 0xcc
 80081f6:	0076      	lsls	r6, r6, #1
 80081f8:	199b      	adds	r3, r3, r6
 80081fa:	2218      	movs	r2, #24
 80081fc:	4694      	mov	ip, r2
 80081fe:	44bc      	add	ip, r7
 8008200:	4463      	add	r3, ip
 8008202:	0018      	movs	r0, r3
 8008204:	23c6      	movs	r3, #198	; 0xc6
 8008206:	001a      	movs	r2, r3
 8008208:	2100      	movs	r1, #0
 800820a:	f003 faa5 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800820e:	21c8      	movs	r1, #200	; 0xc8
 8008210:	2318      	movs	r3, #24
 8008212:	18cb      	adds	r3, r1, r3
 8008214:	19db      	adds	r3, r3, r7
 8008216:	221b      	movs	r2, #27
 8008218:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800821a:	2318      	movs	r3, #24
 800821c:	18fa      	adds	r2, r7, r3
 800821e:	2318      	movs	r3, #24
 8008220:	18cb      	adds	r3, r1, r3
 8008222:	19db      	adds	r3, r3, r7
 8008224:	0011      	movs	r1, r2
 8008226:	0018      	movs	r0, r3
 8008228:	f000 fcb0 	bl	8008b8c <astronode_transport_send_receive>
 800822c:	0003      	movs	r3, r0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d16f      	bne.n	8008312 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008232:	4b3a      	ldr	r3, [pc, #232]	; (800831c <astronode_send_mpn_rr+0x144>)
 8008234:	0032      	movs	r2, r6
 8008236:	189b      	adds	r3, r3, r2
 8008238:	2118      	movs	r1, #24
 800823a:	468c      	mov	ip, r1
 800823c:	44bc      	add	ip, r7
 800823e:	4463      	add	r3, ip
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b9b      	cmp	r3, #155	; 0x9b
 8008244:	d161      	bne.n	800830a <astronode_send_mpn_rr+0x132>
        {
 8008246:	466b      	mov	r3, sp
 8008248:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800824a:	4b34      	ldr	r3, [pc, #208]	; (800831c <astronode_send_mpn_rr+0x144>)
 800824c:	189b      	adds	r3, r3, r2
 800824e:	2218      	movs	r2, #24
 8008250:	4694      	mov	ip, r2
 8008252:	44bc      	add	ip, r7
 8008254:	4463      	add	r3, ip
 8008256:	22c4      	movs	r2, #196	; 0xc4
 8008258:	5a9b      	ldrh	r3, [r3, r2]
 800825a:	001a      	movs	r2, r3
 800825c:	3a01      	subs	r2, #1
 800825e:	21ca      	movs	r1, #202	; 0xca
 8008260:	0049      	lsls	r1, r1, #1
 8008262:	2018      	movs	r0, #24
 8008264:	1809      	adds	r1, r1, r0
 8008266:	19c9      	adds	r1, r1, r7
 8008268:	600a      	str	r2, [r1, #0]
 800826a:	001c      	movs	r4, r3
 800826c:	2200      	movs	r2, #0
 800826e:	0015      	movs	r5, r2
 8008270:	0020      	movs	r0, r4
 8008272:	0029      	movs	r1, r5
 8008274:	0004      	movs	r4, r0
 8008276:	0f62      	lsrs	r2, r4, #29
 8008278:	000c      	movs	r4, r1
 800827a:	00e4      	lsls	r4, r4, #3
 800827c:	617c      	str	r4, [r7, #20]
 800827e:	697c      	ldr	r4, [r7, #20]
 8008280:	4314      	orrs	r4, r2
 8008282:	617c      	str	r4, [r7, #20]
 8008284:	0001      	movs	r1, r0
 8008286:	00c9      	lsls	r1, r1, #3
 8008288:	6139      	str	r1, [r7, #16]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	6838      	ldr	r0, [r7, #0]
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	0004      	movs	r4, r0
 8008296:	0f62      	lsrs	r2, r4, #29
 8008298:	000c      	movs	r4, r1
 800829a:	00e4      	lsls	r4, r4, #3
 800829c:	60fc      	str	r4, [r7, #12]
 800829e:	68fc      	ldr	r4, [r7, #12]
 80082a0:	4314      	orrs	r4, r2
 80082a2:	60fc      	str	r4, [r7, #12]
 80082a4:	0001      	movs	r1, r0
 80082a6:	00ca      	lsls	r2, r1, #3
 80082a8:	60ba      	str	r2, [r7, #8]
 80082aa:	3307      	adds	r3, #7
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4669      	mov	r1, sp
 80082b2:	1acb      	subs	r3, r1, r3
 80082b4:	469d      	mov	sp, r3
 80082b6:	466b      	mov	r3, sp
 80082b8:	3300      	adds	r3, #0
 80082ba:	24c8      	movs	r4, #200	; 0xc8
 80082bc:	0064      	lsls	r4, r4, #1
 80082be:	2218      	movs	r2, #24
 80082c0:	18a2      	adds	r2, r4, r2
 80082c2:	19d1      	adds	r1, r2, r7
 80082c4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80082c6:	4b16      	ldr	r3, [pc, #88]	; (8008320 <astronode_send_mpn_rr+0x148>)
 80082c8:	0018      	movs	r0, r3
 80082ca:	f7fa fe5d 	bl	8002f88 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <astronode_send_mpn_rr+0x144>)
 80082d0:	22cc      	movs	r2, #204	; 0xcc
 80082d2:	0052      	lsls	r2, r2, #1
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	2218      	movs	r2, #24
 80082d8:	4694      	mov	ip, r2
 80082da:	44bc      	add	ip, r7
 80082dc:	4463      	add	r3, ip
 80082de:	22c4      	movs	r2, #196	; 0xc4
 80082e0:	5a9b      	ldrh	r3, [r3, r2]
 80082e2:	0019      	movs	r1, r3
 80082e4:	2318      	movs	r3, #24
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	3301      	adds	r3, #1
 80082ea:	4a0e      	ldr	r2, [pc, #56]	; (8008324 <astronode_send_mpn_rr+0x14c>)
 80082ec:	2018      	movs	r0, #24
 80082ee:	1820      	adds	r0, r4, r0
 80082f0:	19c0      	adds	r0, r0, r7
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	f003 f966 	bl	800b5c4 <snprintf>
            send_debug_logs(product_number);
 80082f8:	2318      	movs	r3, #24
 80082fa:	18e3      	adds	r3, r4, r3
 80082fc:	19db      	adds	r3, r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	0018      	movs	r0, r3
 8008302:	f7fa fe41 	bl	8002f88 <send_debug_logs>
 8008306:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008308:	e003      	b.n	8008312 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <astronode_send_mpn_rr+0x150>)
 800830c:	0018      	movs	r0, r3
 800830e:	f7fa fe3b 	bl	8002f88 <send_debug_logs>
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b06d      	add	sp, #436	; 0x1b4
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	fffffe68 	.word	0xfffffe68
 8008320:	08012d94 	.word	0x08012d94
 8008324:	080128cc 	.word	0x080128cc
 8008328:	08012908 	.word	0x08012908

0800832c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 800832c:	b5b0      	push	{r4, r5, r7, lr}
 800832e:	b0e4      	sub	sp, #400	; 0x190
 8008330:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008332:	24c8      	movs	r4, #200	; 0xc8
 8008334:	193b      	adds	r3, r7, r4
 8008336:	0018      	movs	r0, r3
 8008338:	23c6      	movs	r3, #198	; 0xc6
 800833a:	001a      	movs	r2, r3
 800833c:	2100      	movs	r1, #0
 800833e:	f003 fa0b 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <astronode_send_cmd_cr+0x70>)
 8008344:	25c8      	movs	r5, #200	; 0xc8
 8008346:	006d      	lsls	r5, r5, #1
 8008348:	195b      	adds	r3, r3, r5
 800834a:	19db      	adds	r3, r3, r7
 800834c:	0018      	movs	r0, r3
 800834e:	23c6      	movs	r3, #198	; 0xc6
 8008350:	001a      	movs	r2, r3
 8008352:	2100      	movs	r1, #0
 8008354:	f003 fa00 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008358:	193b      	adds	r3, r7, r4
 800835a:	2248      	movs	r2, #72	; 0x48
 800835c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800835e:	003a      	movs	r2, r7
 8008360:	193b      	adds	r3, r7, r4
 8008362:	0011      	movs	r1, r2
 8008364:	0018      	movs	r0, r3
 8008366:	f000 fc11 	bl	8008b8c <astronode_transport_send_receive>
 800836a:	0003      	movs	r3, r0
 800836c:	2b01      	cmp	r3, #1
 800836e:	d111      	bne.n	8008394 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <astronode_send_cmd_cr+0x70>)
 8008372:	195b      	adds	r3, r3, r5
 8008374:	19db      	adds	r3, r3, r7
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2bc8      	cmp	r3, #200	; 0xc8
 800837a:	d107      	bne.n	800838c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 800837c:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <astronode_send_cmd_cr+0x74>)
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <astronode_send_cmd_cr+0x78>)
 8008384:	0018      	movs	r0, r3
 8008386:	f7fa fdff 	bl	8002f88 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800838a:	e003      	b.n	8008394 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <astronode_send_cmd_cr+0x7c>)
 800838e:	0018      	movs	r0, r3
 8008390:	f7fa fdfa 	bl	8002f88 <send_debug_logs>
}
 8008394:	46c0      	nop			; (mov r8, r8)
 8008396:	46bd      	mov	sp, r7
 8008398:	b064      	add	sp, #400	; 0x190
 800839a:	bdb0      	pop	{r4, r5, r7, pc}
 800839c:	fffffe70 	.word	0xfffffe70
 80083a0:	20000bf6 	.word	0x20000bf6
 80083a4:	080131e4 	.word	0x080131e4
 80083a8:	08013208 	.word	0x08013208

080083ac <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	4cac      	ldr	r4, [pc, #688]	; (8008660 <astronode_send_cmd_rr+0x2b4>)
 80083b0:	44a5      	add	sp, r4
 80083b2:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083b4:	218c      	movs	r1, #140	; 0x8c
 80083b6:	0049      	lsls	r1, r1, #1
 80083b8:	2318      	movs	r3, #24
 80083ba:	18cb      	adds	r3, r1, r3
 80083bc:	19db      	adds	r3, r3, r7
 80083be:	0018      	movs	r0, r3
 80083c0:	23c6      	movs	r3, #198	; 0xc6
 80083c2:	001a      	movs	r2, r3
 80083c4:	2100      	movs	r1, #0
 80083c6:	f003 f9c7 	bl	800b758 <memset>
    astronode_app_msg_t answer = {0};
 80083ca:	4ba6      	ldr	r3, [pc, #664]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 80083cc:	26f8      	movs	r6, #248	; 0xf8
 80083ce:	0076      	lsls	r6, r6, #1
 80083d0:	199b      	adds	r3, r3, r6
 80083d2:	2218      	movs	r2, #24
 80083d4:	4694      	mov	ip, r2
 80083d6:	44bc      	add	ip, r7
 80083d8:	4463      	add	r3, ip
 80083da:	0018      	movs	r0, r3
 80083dc:	23c6      	movs	r3, #198	; 0xc6
 80083de:	001a      	movs	r2, r3
 80083e0:	2100      	movs	r1, #0
 80083e2:	f003 f9b9 	bl	800b758 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80083e6:	218c      	movs	r1, #140	; 0x8c
 80083e8:	0049      	lsls	r1, r1, #1
 80083ea:	2318      	movs	r3, #24
 80083ec:	18cb      	adds	r3, r1, r3
 80083ee:	19db      	adds	r3, r3, r7
 80083f0:	2247      	movs	r2, #71	; 0x47
 80083f2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083f4:	2350      	movs	r3, #80	; 0x50
 80083f6:	2218      	movs	r2, #24
 80083f8:	189b      	adds	r3, r3, r2
 80083fa:	19da      	adds	r2, r3, r7
 80083fc:	2318      	movs	r3, #24
 80083fe:	18cb      	adds	r3, r1, r3
 8008400:	19db      	adds	r3, r3, r7
 8008402:	0011      	movs	r1, r2
 8008404:	0018      	movs	r0, r3
 8008406:	f000 fbc1 	bl	8008b8c <astronode_transport_send_receive>
 800840a:	0003      	movs	r3, r0
 800840c:	2b01      	cmp	r3, #1
 800840e:	d000      	beq.n	8008412 <astronode_send_cmd_rr+0x66>
 8008410:	e121      	b.n	8008656 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008412:	4b94      	ldr	r3, [pc, #592]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 8008414:	199b      	adds	r3, r3, r6
 8008416:	2218      	movs	r2, #24
 8008418:	4694      	mov	ip, r2
 800841a:	44bc      	add	ip, r7
 800841c:	4463      	add	r3, ip
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2bc7      	cmp	r3, #199	; 0xc7
 8008422:	d000      	beq.n	8008426 <astronode_send_cmd_rr+0x7a>
 8008424:	e113      	b.n	800864e <astronode_send_cmd_rr+0x2a2>
        {
 8008426:	466b      	mov	r3, sp
 8008428:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800842a:	4b8f      	ldr	r3, [pc, #572]	; (8008668 <astronode_send_cmd_rr+0x2bc>)
 800842c:	0018      	movs	r0, r3
 800842e:	f7fa fdab 	bl	8002f88 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008432:	4b8c      	ldr	r3, [pc, #560]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 8008434:	21f8      	movs	r1, #248	; 0xf8
 8008436:	0049      	lsls	r1, r1, #1
 8008438:	185b      	adds	r3, r3, r1
 800843a:	2218      	movs	r2, #24
 800843c:	4694      	mov	ip, r2
 800843e:	44bc      	add	ip, r7
 8008440:	4463      	add	r3, ip
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008446:	4b87      	ldr	r3, [pc, #540]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 8008448:	185b      	adds	r3, r3, r1
 800844a:	2018      	movs	r0, #24
 800844c:	4684      	mov	ip, r0
 800844e:	44bc      	add	ip, r7
 8008450:	4463      	add	r3, ip
 8008452:	789b      	ldrb	r3, [r3, #2]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008458:	4b82      	ldr	r3, [pc, #520]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 800845a:	185b      	adds	r3, r3, r1
 800845c:	2018      	movs	r0, #24
 800845e:	4684      	mov	ip, r0
 8008460:	44bc      	add	ip, r7
 8008462:	4463      	add	r3, ip
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	041b      	lsls	r3, r3, #16
 8008468:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800846a:	4b7e      	ldr	r3, [pc, #504]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 800846c:	185b      	adds	r3, r3, r1
 800846e:	2118      	movs	r1, #24
 8008470:	468c      	mov	ip, r1
 8008472:	44bc      	add	ip, r7
 8008474:	4463      	add	r3, ip
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	061b      	lsls	r3, r3, #24
 800847a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800847c:	22f4      	movs	r2, #244	; 0xf4
 800847e:	0052      	lsls	r2, r2, #1
 8008480:	2118      	movs	r1, #24
 8008482:	1851      	adds	r1, r2, r1
 8008484:	19c8      	adds	r0, r1, r7
 8008486:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008488:	2318      	movs	r3, #24
 800848a:	18d3      	adds	r3, r2, r3
 800848c:	19db      	adds	r3, r3, r7
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4976      	ldr	r1, [pc, #472]	; (800866c <astronode_send_cmd_rr+0x2c0>)
 8008492:	2318      	movs	r3, #24
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	0018      	movs	r0, r3
 8008498:	f003 f8c8 	bl	800b62c <sprintf>
            send_debug_logs(str);
 800849c:	2318      	movs	r3, #24
 800849e:	18fb      	adds	r3, r7, r3
 80084a0:	0018      	movs	r0, r3
 80084a2:	f7fa fd71 	bl	8002f88 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80084a6:	4b6f      	ldr	r3, [pc, #444]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 80084a8:	21f8      	movs	r1, #248	; 0xf8
 80084aa:	0049      	lsls	r1, r1, #1
 80084ac:	185b      	adds	r3, r3, r1
 80084ae:	2218      	movs	r2, #24
 80084b0:	4694      	mov	ip, r2
 80084b2:	44bc      	add	ip, r7
 80084b4:	4463      	add	r3, ip
 80084b6:	22c4      	movs	r2, #196	; 0xc4
 80084b8:	5a9b      	ldrh	r3, [r3, r2]
 80084ba:	2b2c      	cmp	r3, #44	; 0x2c
 80084bc:	d00e      	beq.n	80084dc <astronode_send_cmd_rr+0x130>
 80084be:	4b69      	ldr	r3, [pc, #420]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 80084c0:	185b      	adds	r3, r3, r1
 80084c2:	2218      	movs	r2, #24
 80084c4:	4694      	mov	ip, r2
 80084c6:	44bc      	add	ip, r7
 80084c8:	4463      	add	r3, ip
 80084ca:	22c4      	movs	r2, #196	; 0xc4
 80084cc:	5a9b      	ldrh	r3, [r3, r2]
 80084ce:	2b0c      	cmp	r3, #12
 80084d0:	d004      	beq.n	80084dc <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 80084d2:	4b67      	ldr	r3, [pc, #412]	; (8008670 <astronode_send_cmd_rr+0x2c4>)
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7fa fd57 	bl	8002f88 <send_debug_logs>
                return;
 80084da:	e0b6      	b.n	800864a <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 80084dc:	4b61      	ldr	r3, [pc, #388]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 80084de:	22f8      	movs	r2, #248	; 0xf8
 80084e0:	0052      	lsls	r2, r2, #1
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	2218      	movs	r2, #24
 80084e6:	4694      	mov	ip, r2
 80084e8:	44bc      	add	ip, r7
 80084ea:	4463      	add	r3, ip
 80084ec:	22c4      	movs	r2, #196	; 0xc4
 80084ee:	5a9b      	ldrh	r3, [r3, r2]
 80084f0:	001a      	movs	r2, r3
 80084f2:	3a01      	subs	r2, #1
 80084f4:	21f2      	movs	r1, #242	; 0xf2
 80084f6:	0049      	lsls	r1, r1, #1
 80084f8:	2018      	movs	r0, #24
 80084fa:	1809      	adds	r1, r1, r0
 80084fc:	19c9      	adds	r1, r1, r7
 80084fe:	600a      	str	r2, [r1, #0]
 8008500:	001c      	movs	r4, r3
 8008502:	2200      	movs	r2, #0
 8008504:	0015      	movs	r5, r2
 8008506:	0020      	movs	r0, r4
 8008508:	0029      	movs	r1, r5
 800850a:	0004      	movs	r4, r0
 800850c:	0f62      	lsrs	r2, r4, #29
 800850e:	000c      	movs	r4, r1
 8008510:	00e4      	lsls	r4, r4, #3
 8008512:	617c      	str	r4, [r7, #20]
 8008514:	697c      	ldr	r4, [r7, #20]
 8008516:	4314      	orrs	r4, r2
 8008518:	617c      	str	r4, [r7, #20]
 800851a:	0001      	movs	r1, r0
 800851c:	00c9      	lsls	r1, r1, #3
 800851e:	6139      	str	r1, [r7, #16]
 8008520:	603b      	str	r3, [r7, #0]
 8008522:	2200      	movs	r2, #0
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	6838      	ldr	r0, [r7, #0]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	0004      	movs	r4, r0
 800852c:	0f62      	lsrs	r2, r4, #29
 800852e:	000c      	movs	r4, r1
 8008530:	00e4      	lsls	r4, r4, #3
 8008532:	60fc      	str	r4, [r7, #12]
 8008534:	68fc      	ldr	r4, [r7, #12]
 8008536:	4314      	orrs	r4, r2
 8008538:	60fc      	str	r4, [r7, #12]
 800853a:	0001      	movs	r1, r0
 800853c:	00ca      	lsls	r2, r1, #3
 800853e:	60ba      	str	r2, [r7, #8]
 8008540:	3307      	adds	r3, #7
 8008542:	08db      	lsrs	r3, r3, #3
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	4669      	mov	r1, sp
 8008548:	1acb      	subs	r3, r1, r3
 800854a:	469d      	mov	sp, r3
 800854c:	466b      	mov	r3, sp
 800854e:	3300      	adds	r3, #0
 8008550:	20f0      	movs	r0, #240	; 0xf0
 8008552:	0040      	lsls	r0, r0, #1
 8008554:	2218      	movs	r2, #24
 8008556:	1882      	adds	r2, r0, r2
 8008558:	19d1      	adds	r1, r2, r7
 800855a:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 800855c:	4b41      	ldr	r3, [pc, #260]	; (8008664 <astronode_send_cmd_rr+0x2b8>)
 800855e:	22f8      	movs	r2, #248	; 0xf8
 8008560:	0052      	lsls	r2, r2, #1
 8008562:	189b      	adds	r3, r3, r2
 8008564:	2218      	movs	r2, #24
 8008566:	4694      	mov	ip, r2
 8008568:	44bc      	add	ip, r7
 800856a:	4463      	add	r3, ip
 800856c:	22c4      	movs	r2, #196	; 0xc4
 800856e:	5a9b      	ldrh	r3, [r3, r2]
 8008570:	3b03      	subs	r3, #3
 8008572:	0019      	movs	r1, r3
 8008574:	2350      	movs	r3, #80	; 0x50
 8008576:	2218      	movs	r2, #24
 8008578:	189b      	adds	r3, r3, r2
 800857a:	19db      	adds	r3, r3, r7
 800857c:	3305      	adds	r3, #5
 800857e:	4a3d      	ldr	r2, [pc, #244]	; (8008674 <astronode_send_cmd_rr+0x2c8>)
 8008580:	2418      	movs	r4, #24
 8008582:	1900      	adds	r0, r0, r4
 8008584:	19c0      	adds	r0, r0, r7
 8008586:	6800      	ldr	r0, [r0, #0]
 8008588:	f003 f81c 	bl	800b5c4 <snprintf>
 800858c:	0002      	movs	r2, r0
 800858e:	23ef      	movs	r3, #239	; 0xef
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	2118      	movs	r1, #24
 8008594:	185b      	adds	r3, r3, r1
 8008596:	19db      	adds	r3, r3, r7
 8008598:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 800859a:	23f0      	movs	r3, #240	; 0xf0
 800859c:	33ff      	adds	r3, #255	; 0xff
 800859e:	2218      	movs	r2, #24
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	19db      	adds	r3, r3, r7
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e024      	b.n	80085f4 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 80085aa:	23f0      	movs	r3, #240	; 0xf0
 80085ac:	33ff      	adds	r3, #255	; 0xff
 80085ae:	2218      	movs	r2, #24
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	19db      	adds	r3, r3, r7
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	22f0      	movs	r2, #240	; 0xf0
 80085b8:	0052      	lsls	r2, r2, #1
 80085ba:	2118      	movs	r1, #24
 80085bc:	1852      	adds	r2, r2, r1
 80085be:	19d2      	adds	r2, r2, r7
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	5cd3      	ldrb	r3, [r2, r3]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <astronode_send_cmd_rr+0x2cc>)
 80085c8:	18d3      	adds	r3, r2, r3
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	001a      	movs	r2, r3
 80085ce:	2397      	movs	r3, #151	; 0x97
 80085d0:	4013      	ands	r3, r2
 80085d2:	d104      	bne.n	80085de <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 80085d4:	4b29      	ldr	r3, [pc, #164]	; (800867c <astronode_send_cmd_rr+0x2d0>)
 80085d6:	0018      	movs	r0, r3
 80085d8:	f7fa fcd6 	bl	8002f88 <send_debug_logs>
                    return;
 80085dc:	e035      	b.n	800864a <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 80085de:	21f0      	movs	r1, #240	; 0xf0
 80085e0:	31ff      	adds	r1, #255	; 0xff
 80085e2:	2318      	movs	r3, #24
 80085e4:	18cb      	adds	r3, r1, r3
 80085e6:	19db      	adds	r3, r3, r7
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	2318      	movs	r3, #24
 80085ec:	18cb      	adds	r3, r1, r3
 80085ee:	19db      	adds	r3, r3, r7
 80085f0:	3201      	adds	r2, #1
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	23f0      	movs	r3, #240	; 0xf0
 80085f6:	33ff      	adds	r3, #255	; 0xff
 80085f8:	2218      	movs	r2, #24
 80085fa:	189b      	adds	r3, r3, r2
 80085fc:	19db      	adds	r3, r3, r7
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	22ef      	movs	r2, #239	; 0xef
 8008604:	0052      	lsls	r2, r2, #1
 8008606:	2118      	movs	r1, #24
 8008608:	1852      	adds	r2, r2, r1
 800860a:	19d2      	adds	r2, r2, r7
 800860c:	8812      	ldrh	r2, [r2, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d8cb      	bhi.n	80085aa <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008612:	4b1b      	ldr	r3, [pc, #108]	; (8008680 <astronode_send_cmd_rr+0x2d4>)
 8008614:	0018      	movs	r0, r3
 8008616:	f7fa fcb7 	bl	8002f88 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 800861a:	2350      	movs	r3, #80	; 0x50
 800861c:	2218      	movs	r2, #24
 800861e:	189b      	adds	r3, r3, r2
 8008620:	19db      	adds	r3, r3, r7
 8008622:	1d5a      	adds	r2, r3, #5
 8008624:	4917      	ldr	r1, [pc, #92]	; (8008684 <astronode_send_cmd_rr+0x2d8>)
 8008626:	24f0      	movs	r4, #240	; 0xf0
 8008628:	0064      	lsls	r4, r4, #1
 800862a:	2318      	movs	r3, #24
 800862c:	18e3      	adds	r3, r4, r3
 800862e:	19db      	adds	r3, r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	0018      	movs	r0, r3
 8008634:	f002 fffa 	bl	800b62c <sprintf>
            send_debug_logs(command_content);
 8008638:	2318      	movs	r3, #24
 800863a:	18e3      	adds	r3, r4, r3
 800863c:	19db      	adds	r3, r3, r7
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	0018      	movs	r0, r3
 8008642:	f7fa fca1 	bl	8002f88 <send_debug_logs>
 8008646:	46b5      	mov	sp, r6
 8008648:	e005      	b.n	8008656 <astronode_send_cmd_rr+0x2aa>
                return;
 800864a:	46b5      	mov	sp, r6
 800864c:	e003      	b.n	8008656 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 800864e:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <astronode_send_cmd_rr+0x2dc>)
 8008650:	0018      	movs	r0, r3
 8008652:	f7fa fc99 	bl	8002f88 <send_debug_logs>
        }
    }
}
 8008656:	46bd      	mov	sp, r7
 8008658:	2383      	movs	r3, #131	; 0x83
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	449d      	add	sp, r3
 800865e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008660:	fffffdf4 	.word	0xfffffdf4
 8008664:	fffffe60 	.word	0xfffffe60
 8008668:	08013220 	.word	0x08013220
 800866c:	0801323c 	.word	0x0801323c
 8008670:	0801328c 	.word	0x0801328c
 8008674:	080128cc 	.word	0x080128cc
 8008678:	08013dc8 	.word	0x08013dc8
 800867c:	080132a0 	.word	0x080132a0
 8008680:	080132cc 	.word	0x080132cc
 8008684:	080132e4 	.word	0x080132e4
 8008688:	080132e8 	.word	0x080132e8

0800868c <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <is_sak_available+0x10>)
 8008692:	781b      	ldrb	r3, [r3, #0]
}
 8008694:	0018      	movs	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	20000bf4 	.word	0x20000bf4

080086a0 <is_astronode_reset>:

bool is_astronode_reset()
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <is_astronode_reset+0x10>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
}
 80086a8:	0018      	movs	r0, r3
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	20000bf5 	.word	0x20000bf5

080086b4 <is_command_available>:

bool is_command_available()
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
    return g_is_command_available;
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <is_command_available+0x10>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
}
 80086bc:	0018      	movs	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	20000bf6 	.word	0x20000bf6

080086c8 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	0002      	movs	r2, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	1dfb      	adds	r3, r7, #7
 80086d4:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80086d6:	1dfb      	adds	r3, r7, #7
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b2f      	cmp	r3, #47	; 0x2f
 80086dc:	d90b      	bls.n	80086f6 <ascii_to_value+0x2e>
 80086de:	1dfb      	adds	r3, r7, #7
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b39      	cmp	r3, #57	; 0x39
 80086e4:	d807      	bhi.n	80086f6 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80086e6:	1dfb      	adds	r3, r7, #7
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	3b30      	subs	r3, #48	; 0x30
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	701a      	strb	r2, [r3, #0]
        return true;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e010      	b.n	8008718 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80086f6:	1dfb      	adds	r3, r7, #7
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d90b      	bls.n	8008716 <ascii_to_value+0x4e>
 80086fe:	1dfb      	adds	r3, r7, #7
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b46      	cmp	r3, #70	; 0x46
 8008704:	d807      	bhi.n	8008716 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008706:	1dfb      	adds	r3, r7, #7
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	3b37      	subs	r3, #55	; 0x37
 800870c:	b2da      	uxtb	r2, r3
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	701a      	strb	r2, [r3, #0]
        return true;
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008716:	2300      	movs	r3, #0
    }
}
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}

08008720 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800872a:	250e      	movs	r5, #14
 800872c:	197b      	adds	r3, r7, r5
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008732:	197b      	adds	r3, r7, r5
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	197a      	adds	r2, r7, r5
 8008738:	1c59      	adds	r1, r3, #1
 800873a:	8011      	strh	r1, [r2, #0]
 800873c:	001a      	movs	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	189b      	adds	r3, r3, r2
 8008742:	2202      	movs	r2, #2
 8008744:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	260a      	movs	r6, #10
 800874a:	19bc      	adds	r4, r7, r6
 800874c:	4a44      	ldr	r2, [pc, #272]	; (8008860 <astronode_create_request_transport+0x140>)
 800874e:	2101      	movs	r1, #1
 8008750:	0018      	movs	r0, r3
 8008752:	f000 fa7d 	bl	8008c50 <calculate_crc>
 8008756:	0003      	movs	r3, r0
 8008758:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1c58      	adds	r0, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	22c4      	movs	r2, #196	; 0xc4
 8008762:	5a99      	ldrh	r1, [r3, r2]
 8008764:	19bc      	adds	r4, r7, r6
 8008766:	19bb      	adds	r3, r7, r6
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	001a      	movs	r2, r3
 800876c:	f000 fa70 	bl	8008c50 <calculate_crc>
 8008770:	0003      	movs	r3, r0
 8008772:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008774:	19bb      	adds	r3, r7, r6
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	b21a      	sxth	r2, r3
 800877c:	0031      	movs	r1, r6
 800877e:	19bb      	adds	r3, r7, r6
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b29b      	uxth	r3, r3
 8008786:	b21b      	sxth	r3, r3
 8008788:	4313      	orrs	r3, r2
 800878a:	b21a      	sxth	r2, r3
 800878c:	187b      	adds	r3, r7, r1
 800878e:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7818      	ldrb	r0, [r3, #0]
 8008794:	197b      	adds	r3, r7, r5
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	18d3      	adds	r3, r2, r3
 800879c:	0019      	movs	r1, r3
 800879e:	f000 fbeb 	bl	8008f78 <uint8_to_ascii_buffer>
    index += 2;
 80087a2:	197b      	adds	r3, r7, r5
 80087a4:	197a      	adds	r2, r7, r5
 80087a6:	8812      	ldrh	r2, [r2, #0]
 80087a8:	3202      	adds	r2, #2
 80087aa:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80087ac:	230c      	movs	r3, #12
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	2200      	movs	r2, #0
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e017      	b.n	80087e6 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80087b6:	240c      	movs	r4, #12
 80087b8:	193b      	adds	r3, r7, r4
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	18d3      	adds	r3, r2, r3
 80087c0:	7858      	ldrb	r0, [r3, #1]
 80087c2:	250e      	movs	r5, #14
 80087c4:	197b      	adds	r3, r7, r5
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	18d3      	adds	r3, r2, r3
 80087cc:	0019      	movs	r1, r3
 80087ce:	f000 fbd3 	bl	8008f78 <uint8_to_ascii_buffer>
        index += 2;
 80087d2:	197b      	adds	r3, r7, r5
 80087d4:	197a      	adds	r2, r7, r5
 80087d6:	8812      	ldrh	r2, [r2, #0]
 80087d8:	3202      	adds	r2, #2
 80087da:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80087dc:	193b      	adds	r3, r7, r4
 80087de:	881a      	ldrh	r2, [r3, #0]
 80087e0:	193b      	adds	r3, r7, r4
 80087e2:	3201      	adds	r2, #1
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	22c4      	movs	r2, #196	; 0xc4
 80087ea:	5a9b      	ldrh	r3, [r3, r2]
 80087ec:	220c      	movs	r2, #12
 80087ee:	18ba      	adds	r2, r7, r2
 80087f0:	8812      	ldrh	r2, [r2, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d3df      	bcc.n	80087b6 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80087f6:	250a      	movs	r5, #10
 80087f8:	197b      	adds	r3, r7, r5
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	0a1b      	lsrs	r3, r3, #8
 80087fe:	b29b      	uxth	r3, r3
 8008800:	b2d8      	uxtb	r0, r3
 8008802:	240e      	movs	r4, #14
 8008804:	193b      	adds	r3, r7, r4
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	18d3      	adds	r3, r2, r3
 800880c:	0019      	movs	r1, r3
 800880e:	f000 fbb3 	bl	8008f78 <uint8_to_ascii_buffer>
    index += 2;
 8008812:	0021      	movs	r1, r4
 8008814:	187b      	adds	r3, r7, r1
 8008816:	187a      	adds	r2, r7, r1
 8008818:	8812      	ldrh	r2, [r2, #0]
 800881a:	3202      	adds	r2, #2
 800881c:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800881e:	197b      	adds	r3, r7, r5
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b2d8      	uxtb	r0, r3
 8008824:	000c      	movs	r4, r1
 8008826:	187b      	adds	r3, r7, r1
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	18d3      	adds	r3, r2, r3
 800882e:	0019      	movs	r1, r3
 8008830:	f000 fba2 	bl	8008f78 <uint8_to_ascii_buffer>
    index += 2;
 8008834:	0020      	movs	r0, r4
 8008836:	183b      	adds	r3, r7, r0
 8008838:	183a      	adds	r2, r7, r0
 800883a:	8812      	ldrh	r2, [r2, #0]
 800883c:	3202      	adds	r2, #2
 800883e:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008840:	183b      	adds	r3, r7, r0
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	183a      	adds	r2, r7, r0
 8008846:	1c59      	adds	r1, r3, #1
 8008848:	8011      	strh	r1, [r2, #0]
 800884a:	001a      	movs	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	189b      	adds	r3, r3, r2
 8008850:	2203      	movs	r2, #3
 8008852:	701a      	strb	r2, [r3, #0]

    return index;
 8008854:	183b      	adds	r3, r7, r0
 8008856:	881b      	ldrh	r3, [r3, #0]
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	b005      	add	sp, #20
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008860:	0000ffff 	.word	0x0000ffff

08008864 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008866:	b089      	sub	sp, #36	; 0x24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	230a      	movs	r3, #10
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	1c0a      	adds	r2, r1, #0
 8008874:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d005      	beq.n	800888a <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800887e:	4bbd      	ldr	r3, [pc, #756]	; (8008b74 <astronode_decode_answer_transport+0x310>)
 8008880:	0018      	movs	r0, r3
 8008882:	f7fa fb81 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 8008886:	2300      	movs	r3, #0
 8008888:	e170      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800888a:	210a      	movs	r1, #10
 800888c:	187b      	adds	r3, r7, r1
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	4013      	ands	r3, r2
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <astronode_decode_answer_transport+0x3e>
 800889a:	187b      	adds	r3, r7, r1
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	2b07      	cmp	r3, #7
 80088a0:	d805      	bhi.n	80088ae <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 80088a2:	4bb5      	ldr	r3, [pc, #724]	; (8008b78 <astronode_decode_answer_transport+0x314>)
 80088a4:	0018      	movs	r0, r3
 80088a6:	f7fa fb6f 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e15e      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80088ae:	230a      	movs	r3, #10
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	3b08      	subs	r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da00      	bge.n	80088bc <astronode_decode_answer_transport+0x58>
 80088ba:	3301      	adds	r3, #1
 80088bc:	105b      	asrs	r3, r3, #1
 80088be:	b299      	uxth	r1, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	22c4      	movs	r2, #196	; 0xc4
 80088c4:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80088c6:	230a      	movs	r3, #10
 80088c8:	18fb      	adds	r3, r7, r3
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	18d3      	adds	r3, r2, r3
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d005      	beq.n	80088e4 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80088d8:	4ba8      	ldr	r3, [pc, #672]	; (8008b7c <astronode_decode_answer_transport+0x318>)
 80088da:	0018      	movs	r0, r3
 80088dc:	f7fa fb54 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e143      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80088e4:	2117      	movs	r1, #23
 80088e6:	187b      	adds	r3, r7, r1
 80088e8:	2200      	movs	r2, #0
 80088ea:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80088ec:	2416      	movs	r4, #22
 80088ee:	193b      	adds	r3, r7, r4
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3301      	adds	r3, #1
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	187a      	adds	r2, r7, r1
 80088fc:	0011      	movs	r1, r2
 80088fe:	0018      	movs	r0, r3
 8008900:	f7ff fee2 	bl	80086c8 <ascii_to_value>
 8008904:	0003      	movs	r3, r0
 8008906:	001a      	movs	r2, r3
 8008908:	2301      	movs	r3, #1
 800890a:	4053      	eors	r3, r2
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10e      	bne.n	8008930 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3302      	adds	r3, #2
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	193a      	adds	r2, r7, r4
 800891a:	0011      	movs	r1, r2
 800891c:	0018      	movs	r0, r3
 800891e:	f7ff fed3 	bl	80086c8 <ascii_to_value>
 8008922:	0003      	movs	r3, r0
 8008924:	001a      	movs	r2, r3
 8008926:	2301      	movs	r3, #1
 8008928:	4053      	eors	r3, r2
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008930:	4b93      	ldr	r3, [pc, #588]	; (8008b80 <astronode_decode_answer_transport+0x31c>)
 8008932:	0018      	movs	r0, r3
 8008934:	f7fa fb28 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 8008938:	2300      	movs	r3, #0
 800893a:	e117      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800893c:	2317      	movs	r3, #23
 800893e:	18fb      	adds	r3, r7, r3
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	b2da      	uxtb	r2, r3
 8008946:	2316      	movs	r3, #22
 8008948:	18fb      	adds	r3, r7, r3
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	b2da      	uxtb	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008954:	231e      	movs	r3, #30
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	2203      	movs	r2, #3
 800895a:	801a      	strh	r2, [r3, #0]
 800895c:	231c      	movs	r3, #28
 800895e:	18fb      	adds	r3, r7, r3
 8008960:	2200      	movs	r2, #0
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e045      	b.n	80089f2 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008966:	241e      	movs	r4, #30
 8008968:	193b      	adds	r3, r7, r4
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	18d3      	adds	r3, r2, r3
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2217      	movs	r2, #23
 8008974:	18ba      	adds	r2, r7, r2
 8008976:	0011      	movs	r1, r2
 8008978:	0018      	movs	r0, r3
 800897a:	f7ff fea5 	bl	80086c8 <ascii_to_value>
 800897e:	0003      	movs	r3, r0
 8008980:	001a      	movs	r2, r3
 8008982:	2301      	movs	r3, #1
 8008984:	4053      	eors	r3, r2
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d112      	bne.n	80089b2 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800898c:	193b      	adds	r3, r7, r4
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2216      	movs	r2, #22
 800899a:	18ba      	adds	r2, r7, r2
 800899c:	0011      	movs	r1, r2
 800899e:	0018      	movs	r0, r3
 80089a0:	f7ff fe92 	bl	80086c8 <ascii_to_value>
 80089a4:	0003      	movs	r3, r0
 80089a6:	001a      	movs	r2, r3
 80089a8:	2301      	movs	r3, #1
 80089aa:	4053      	eors	r3, r2
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80089b2:	4b73      	ldr	r3, [pc, #460]	; (8008b80 <astronode_decode_answer_transport+0x31c>)
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7fa fae7 	bl	8002f88 <send_debug_logs>
            return RS_FAILURE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e0d6      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80089be:	2317      	movs	r3, #23
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	b2d9      	uxtb	r1, r3
 80089c8:	2316      	movs	r3, #22
 80089ca:	18fb      	adds	r3, r7, r3
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	201c      	movs	r0, #28
 80089d0:	183b      	adds	r3, r7, r0
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	1838      	adds	r0, r7, r0
 80089d6:	1c5c      	adds	r4, r3, #1
 80089d8:	8004      	strh	r4, [r0, #0]
 80089da:	0018      	movs	r0, r3
 80089dc:	188b      	adds	r3, r1, r2
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	181b      	adds	r3, r3, r0
 80089e4:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80089e6:	221e      	movs	r2, #30
 80089e8:	18bb      	adds	r3, r7, r2
 80089ea:	18ba      	adds	r2, r7, r2
 80089ec:	8812      	ldrh	r2, [r2, #0]
 80089ee:	3202      	adds	r2, #2
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	231e      	movs	r3, #30
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	881a      	ldrh	r2, [r3, #0]
 80089f8:	260a      	movs	r6, #10
 80089fa:	19bb      	adds	r3, r7, r6
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	3b05      	subs	r3, #5
 8008a00:	429a      	cmp	r2, r3
 8008a02:	dbb0      	blt.n	8008966 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	251a      	movs	r5, #26
 8008a08:	197c      	adds	r4, r7, r5
 8008a0a:	4a5e      	ldr	r2, [pc, #376]	; (8008b84 <astronode_decode_answer_transport+0x320>)
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f000 f91e 	bl	8008c50 <calculate_crc>
 8008a14:	0003      	movs	r3, r0
 8008a16:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1c58      	adds	r0, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	22c4      	movs	r2, #196	; 0xc4
 8008a20:	5a99      	ldrh	r1, [r3, r2]
 8008a22:	197c      	adds	r4, r7, r5
 8008a24:	197b      	adds	r3, r7, r5
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	001a      	movs	r2, r3
 8008a2a:	f000 f911 	bl	8008c50 <calculate_crc>
 8008a2e:	0003      	movs	r3, r0
 8008a30:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008a32:	197b      	adds	r3, r7, r5
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	b21a      	sxth	r2, r3
 8008a3a:	0029      	movs	r1, r5
 8008a3c:	197b      	adds	r3, r7, r5
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	b21b      	sxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b21a      	sxth	r2, r3
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008a4e:	19bb      	adds	r3, r7, r6
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	3b05      	subs	r3, #5
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	18d3      	adds	r3, r2, r3
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2217      	movs	r2, #23
 8008a5c:	18ba      	adds	r2, r7, r2
 8008a5e:	0011      	movs	r1, r2
 8008a60:	0018      	movs	r0, r3
 8008a62:	f7ff fe31 	bl	80086c8 <ascii_to_value>
 8008a66:	0003      	movs	r3, r0
 8008a68:	001a      	movs	r2, r3
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4053      	eors	r3, r2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d112      	bne.n	8008a9a <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008a74:	19bb      	adds	r3, r7, r6
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	18d3      	adds	r3, r2, r3
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2216      	movs	r2, #22
 8008a82:	18ba      	adds	r2, r7, r2
 8008a84:	0011      	movs	r1, r2
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7ff fe1e 	bl	80086c8 <ascii_to_value>
 8008a8c:	0003      	movs	r3, r0
 8008a8e:	001a      	movs	r2, r3
 8008a90:	2301      	movs	r3, #1
 8008a92:	4053      	eors	r3, r2
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008a9a:	4b39      	ldr	r3, [pc, #228]	; (8008b80 <astronode_decode_answer_transport+0x31c>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7fa fa73 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e062      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008aa6:	2017      	movs	r0, #23
 8008aa8:	183b      	adds	r3, r7, r0
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	031b      	lsls	r3, r3, #12
 8008ab0:	b299      	uxth	r1, r3
 8008ab2:	2416      	movs	r4, #22
 8008ab4:	193b      	adds	r3, r7, r4
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	2318      	movs	r3, #24
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	188a      	adds	r2, r1, r2
 8008ac4:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008ac6:	250a      	movs	r5, #10
 8008ac8:	197b      	adds	r3, r7, r5
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	3b03      	subs	r3, #3
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	18d3      	adds	r3, r2, r3
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	183a      	adds	r2, r7, r0
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fdf5 	bl	80086c8 <ascii_to_value>
 8008ade:	0003      	movs	r3, r0
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4053      	eors	r3, r2
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d111      	bne.n	8008b10 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008aec:	197b      	adds	r3, r7, r5
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	3b02      	subs	r3, #2
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	18d3      	adds	r3, r2, r3
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	193a      	adds	r2, r7, r4
 8008afa:	0011      	movs	r1, r2
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7ff fde3 	bl	80086c8 <ascii_to_value>
 8008b02:	0003      	movs	r3, r0
 8008b04:	001a      	movs	r2, r3
 8008b06:	2301      	movs	r3, #1
 8008b08:	4053      	eors	r3, r2
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008b10:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <astronode_decode_answer_transport+0x31c>)
 8008b12:	0018      	movs	r0, r3
 8008b14:	f7fa fa38 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e027      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008b1c:	2317      	movs	r3, #23
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	2316      	movs	r3, #22
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	b299      	uxth	r1, r3
 8008b34:	2018      	movs	r0, #24
 8008b36:	183b      	adds	r3, r7, r0
 8008b38:	183a      	adds	r2, r7, r0
 8008b3a:	8812      	ldrh	r2, [r2, #0]
 8008b3c:	188a      	adds	r2, r1, r2
 8008b3e:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008b40:	183a      	adds	r2, r7, r0
 8008b42:	231a      	movs	r3, #26
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	8812      	ldrh	r2, [r2, #0]
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d005      	beq.n	8008b5a <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <astronode_decode_answer_transport+0x324>)
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7fa fa19 	bl	8002f88 <send_debug_logs>
        return RS_FAILURE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e008      	b.n	8008b6c <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2bff      	cmp	r3, #255	; 0xff
 8008b60:	d103      	bne.n	8008b6a <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	0018      	movs	r0, r3
 8008b66:	f000 f8c3 	bl	8008cf0 <check_for_error>
    }

    return RS_SUCCESS;
 8008b6a:	2301      	movs	r3, #1
}
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b009      	add	sp, #36	; 0x24
 8008b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b74:	08013378 	.word	0x08013378
 8008b78:	080133c8 	.word	0x080133c8
 8008b7c:	08013418 	.word	0x08013418
 8008b80:	08013468 	.word	0x08013468
 8008b84:	0000ffff 	.word	0x0000ffff
 8008b88:	080134b4 	.word	0x080134b4

08008b8c <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	4c2b      	ldr	r4, [pc, #172]	; (8008c3c <astronode_transport_send_receive+0xb0>)
 8008b90:	44a5      	add	sp, r4
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008b98:	4b29      	ldr	r3, [pc, #164]	; (8008c40 <astronode_transport_send_receive+0xb4>)
 8008b9a:	25ca      	movs	r5, #202	; 0xca
 8008b9c:	00ad      	lsls	r5, r5, #2
 8008b9e:	195b      	adds	r3, r3, r5
 8008ba0:	19db      	adds	r3, r3, r7
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	22c4      	movs	r2, #196	; 0xc4
 8008baa:	0052      	lsls	r2, r2, #1
 8008bac:	2100      	movs	r1, #0
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f002 fdd2 	bl	800b758 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008bb4:	4b23      	ldr	r3, [pc, #140]	; (8008c44 <astronode_transport_send_receive+0xb8>)
 8008bb6:	195b      	adds	r3, r3, r5
 8008bb8:	19db      	adds	r3, r3, r7
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	22c4      	movs	r2, #196	; 0xc4
 8008bc2:	0052      	lsls	r2, r2, #1
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f002 fdc6 	bl	800b758 <memset>
    uint16_t answer_length =  0;
 8008bcc:	4b1e      	ldr	r3, [pc, #120]	; (8008c48 <astronode_transport_send_receive+0xbc>)
 8008bce:	195b      	adds	r3, r3, r5
 8008bd0:	19db      	adds	r3, r3, r7
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008bd6:	4e1d      	ldr	r6, [pc, #116]	; (8008c4c <astronode_transport_send_receive+0xc0>)
 8008bd8:	19bc      	adds	r4, r7, r6
 8008bda:	23cc      	movs	r3, #204	; 0xcc
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	18fa      	adds	r2, r7, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	0011      	movs	r1, r2
 8008be4:	0018      	movs	r0, r3
 8008be6:	f7ff fd9b 	bl	8008720 <astronode_create_request_transport>
 8008bea:	0003      	movs	r3, r0
 8008bec:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8008bee:	19bb      	adds	r3, r7, r6
 8008bf0:	881a      	ldrh	r2, [r3, #0]
 8008bf2:	23cc      	movs	r3, #204	; 0xcc
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	0011      	movs	r1, r2
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f7fa fab6 	bl	800316c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008c00:	230a      	movs	r3, #10
 8008c02:	18fa      	adds	r2, r7, r3
 8008c04:	240c      	movs	r4, #12
 8008c06:	193b      	adds	r3, r7, r4
 8008c08:	0011      	movs	r1, r2
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 f92c 	bl	8008e68 <receive_astronode_answer>
 8008c10:	0003      	movs	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d10a      	bne.n	8008c2c <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <astronode_transport_send_receive+0xbc>)
 8008c18:	195b      	adds	r3, r3, r5
 8008c1a:	19db      	adds	r3, r3, r7
 8008c1c:	8819      	ldrh	r1, [r3, #0]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	193b      	adds	r3, r7, r4
 8008c22:	0018      	movs	r0, r3
 8008c24:	f7ff fe1e 	bl	8008864 <astronode_decode_answer_transport>
 8008c28:	0003      	movs	r3, r0
 8008c2a:	e000      	b.n	8008c2e <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008c2c:	2300      	movs	r3, #0
    }
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	23cb      	movs	r3, #203	; 0xcb
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	449d      	add	sp, r3
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	fffffcd4 	.word	0xfffffcd4
 8008c40:	fffffe70 	.word	0xfffffe70
 8008c44:	fffffce4 	.word	0xfffffce4
 8008c48:	fffffce2 	.word	0xfffffce2
 8008c4c:	00000326 	.word	0x00000326

08008c50 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	0008      	movs	r0, r1
 8008c5a:	0011      	movs	r1, r2
 8008c5c:	1cbb      	adds	r3, r7, #2
 8008c5e:	1c02      	adds	r2, r0, #0
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	003b      	movs	r3, r7
 8008c64:	1c0a      	adds	r2, r1, #0
 8008c66:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008c68:	230e      	movs	r3, #14
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	003a      	movs	r2, r7
 8008c6e:	8812      	ldrh	r2, [r2, #0]
 8008c70:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008c72:	e02e      	b.n	8008cd2 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008c74:	240e      	movs	r4, #14
 8008c76:	193b      	adds	r3, r7, r4
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	b299      	uxth	r1, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	200c      	movs	r0, #12
 8008c8a:	183b      	adds	r3, r7, r0
 8008c8c:	404a      	eors	r2, r1
 8008c8e:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008c90:	183b      	adds	r3, r7, r0
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	091b      	lsrs	r3, r3, #4
 8008c96:	b299      	uxth	r1, r3
 8008c98:	183b      	adds	r3, r7, r0
 8008c9a:	183a      	adds	r2, r7, r0
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	404a      	eors	r2, r1
 8008ca0:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008ca2:	0021      	movs	r1, r4
 8008ca4:	187b      	adds	r3, r7, r1
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	b21a      	sxth	r2, r3
 8008cac:	183b      	adds	r3, r7, r0
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	031b      	lsls	r3, r3, #12
 8008cb2:	b21b      	sxth	r3, r3
 8008cb4:	4053      	eors	r3, r2
 8008cb6:	b21a      	sxth	r2, r3
 8008cb8:	183b      	adds	r3, r7, r0
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	015b      	lsls	r3, r3, #5
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	4053      	eors	r3, r2
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	183b      	adds	r3, r7, r0
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	5e1b      	ldrsh	r3, [r3, r0]
 8008cca:	4053      	eors	r3, r2
 8008ccc:	b21a      	sxth	r2, r3
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008cd2:	1cbb      	adds	r3, r7, #2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	1cba      	adds	r2, r7, #2
 8008cd8:	1e59      	subs	r1, r3, #1
 8008cda:	8011      	strh	r1, [r2, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1c9      	bne.n	8008c74 <calculate_crc+0x24>
    }
    return crc;
 8008ce0:	230e      	movs	r3, #14
 8008ce2:	18fb      	adds	r3, r7, r3
 8008ce4:	881b      	ldrh	r3, [r3, #0]
}
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	b005      	add	sp, #20
 8008cec:	bd90      	pop	{r4, r7, pc}
	...

08008cf0 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	b299      	uxth	r1, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	200e      	movs	r0, #14
 8008d0a:	183b      	adds	r3, r7, r0
 8008d0c:	188a      	adds	r2, r1, r2
 8008d0e:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008d10:	183b      	adds	r3, r7, r0
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	4a40      	ldr	r2, [pc, #256]	; (8008e18 <check_for_error+0x128>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d100      	bne.n	8008d1c <check_for_error+0x2c>
 8008d1a:	e06f      	b.n	8008dfc <check_for_error+0x10c>
 8008d1c:	4a3e      	ldr	r2, [pc, #248]	; (8008e18 <check_for_error+0x128>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	dd00      	ble.n	8008d24 <check_for_error+0x34>
 8008d22:	e070      	b.n	8008e06 <check_for_error+0x116>
 8008d24:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <check_for_error+0x12c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d100      	bne.n	8008d2c <check_for_error+0x3c>
 8008d2a:	e062      	b.n	8008df2 <check_for_error+0x102>
 8008d2c:	4a3b      	ldr	r2, [pc, #236]	; (8008e1c <check_for_error+0x12c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	dd00      	ble.n	8008d34 <check_for_error+0x44>
 8008d32:	e068      	b.n	8008e06 <check_for_error+0x116>
 8008d34:	4a3a      	ldr	r2, [pc, #232]	; (8008e20 <check_for_error+0x130>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d056      	beq.n	8008de8 <check_for_error+0xf8>
 8008d3a:	4a39      	ldr	r2, [pc, #228]	; (8008e20 <check_for_error+0x130>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	dd00      	ble.n	8008d42 <check_for_error+0x52>
 8008d40:	e061      	b.n	8008e06 <check_for_error+0x116>
 8008d42:	4a38      	ldr	r2, [pc, #224]	; (8008e24 <check_for_error+0x134>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d04a      	beq.n	8008dde <check_for_error+0xee>
 8008d48:	4a36      	ldr	r2, [pc, #216]	; (8008e24 <check_for_error+0x134>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	dc5b      	bgt.n	8008e06 <check_for_error+0x116>
 8008d4e:	4a36      	ldr	r2, [pc, #216]	; (8008e28 <check_for_error+0x138>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d03f      	beq.n	8008dd4 <check_for_error+0xe4>
 8008d54:	4a34      	ldr	r2, [pc, #208]	; (8008e28 <check_for_error+0x138>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	dc55      	bgt.n	8008e06 <check_for_error+0x116>
 8008d5a:	4a34      	ldr	r2, [pc, #208]	; (8008e2c <check_for_error+0x13c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d034      	beq.n	8008dca <check_for_error+0xda>
 8008d60:	4a32      	ldr	r2, [pc, #200]	; (8008e2c <check_for_error+0x13c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	dc4f      	bgt.n	8008e06 <check_for_error+0x116>
 8008d66:	4a32      	ldr	r2, [pc, #200]	; (8008e30 <check_for_error+0x140>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d029      	beq.n	8008dc0 <check_for_error+0xd0>
 8008d6c:	4a30      	ldr	r2, [pc, #192]	; (8008e30 <check_for_error+0x140>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	dc49      	bgt.n	8008e06 <check_for_error+0x116>
 8008d72:	4a30      	ldr	r2, [pc, #192]	; (8008e34 <check_for_error+0x144>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d01e      	beq.n	8008db6 <check_for_error+0xc6>
 8008d78:	4a2e      	ldr	r2, [pc, #184]	; (8008e34 <check_for_error+0x144>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	dc43      	bgt.n	8008e06 <check_for_error+0x116>
 8008d7e:	2222      	movs	r2, #34	; 0x22
 8008d80:	32ff      	adds	r2, #255	; 0xff
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d012      	beq.n	8008dac <check_for_error+0xbc>
 8008d86:	2291      	movs	r2, #145	; 0x91
 8008d88:	0052      	lsls	r2, r2, #1
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	da3b      	bge.n	8008e06 <check_for_error+0x116>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d002      	beq.n	8008d98 <check_for_error+0xa8>
 8008d92:	2b11      	cmp	r3, #17
 8008d94:	d005      	beq.n	8008da2 <check_for_error+0xb2>
 8008d96:	e036      	b.n	8008e06 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008d98:	4b27      	ldr	r3, [pc, #156]	; (8008e38 <check_for_error+0x148>)
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f7fa f8f4 	bl	8002f88 <send_debug_logs>
            break;
 8008da0:	e036      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8008da2:	4b26      	ldr	r3, [pc, #152]	; (8008e3c <check_for_error+0x14c>)
 8008da4:	0018      	movs	r0, r3
 8008da6:	f7fa f8ef 	bl	8002f88 <send_debug_logs>
            break;
 8008daa:	e031      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8008dac:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <check_for_error+0x150>)
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7fa f8ea 	bl	8002f88 <send_debug_logs>
            break;
 8008db4:	e02c      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008db6:	4b23      	ldr	r3, [pc, #140]	; (8008e44 <check_for_error+0x154>)
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7fa f8e5 	bl	8002f88 <send_debug_logs>
            break;
 8008dbe:	e027      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8008dc0:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <check_for_error+0x158>)
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f7fa f8e0 	bl	8002f88 <send_debug_logs>
            break;
 8008dc8:	e022      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <check_for_error+0x15c>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7fa f8db 	bl	8002f88 <send_debug_logs>
            break;
 8008dd2:	e01d      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008dd4:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <check_for_error+0x160>)
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f7fa f8d6 	bl	8002f88 <send_debug_logs>
            break;
 8008ddc:	e018      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8008dde:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <check_for_error+0x164>)
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7fa f8d1 	bl	8002f88 <send_debug_logs>
            break;
 8008de6:	e013      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008de8:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <check_for_error+0x168>)
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7fa f8cc 	bl	8002f88 <send_debug_logs>
            break;
 8008df0:	e00e      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8008df2:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <check_for_error+0x16c>)
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7fa f8c7 	bl	8002f88 <send_debug_logs>
            break;
 8008dfa:	e009      	b.n	8008e10 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8008dfc:	4b18      	ldr	r3, [pc, #96]	; (8008e60 <check_for_error+0x170>)
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7fa f8c2 	bl	8002f88 <send_debug_logs>
            break;
 8008e04:	e004      	b.n	8008e10 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8008e06:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <check_for_error+0x174>)
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7fa f8bd 	bl	8002f88 <send_debug_logs>
            break;
 8008e0e:	46c0      	nop			; (mov r8, r8)
    }
}
 8008e10:	46c0      	nop			; (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b004      	add	sp, #16
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	00004601 	.word	0x00004601
 8008e1c:	00004501 	.word	0x00004501
 8008e20:	00003501 	.word	0x00003501
 8008e24:	00002601 	.word	0x00002601
 8008e28:	00002511 	.word	0x00002511
 8008e2c:	00002501 	.word	0x00002501
 8008e30:	00000611 	.word	0x00000611
 8008e34:	00000601 	.word	0x00000601
 8008e38:	080134f8 	.word	0x080134f8
 8008e3c:	08013544 	.word	0x08013544
 8008e40:	080135a8 	.word	0x080135a8
 8008e44:	080135e0 	.word	0x080135e0
 8008e48:	08013684 	.word	0x08013684
 8008e4c:	080136ec 	.word	0x080136ec
 8008e50:	0801374c 	.word	0x0801374c
 8008e54:	080137d8 	.word	0x080137d8
 8008e58:	08013838 	.word	0x08013838
 8008e5c:	080138e4 	.word	0x080138e4
 8008e60:	08013930 	.word	0x08013930
 8008e64:	08013978 	.word	0x08013978

08008e68 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8008e68:	b5b0      	push	{r4, r5, r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8008e72:	230f      	movs	r3, #15
 8008e74:	18fb      	adds	r3, r7, r3
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8008e7a:	2316      	movs	r3, #22
 8008e7c:	18fb      	adds	r3, r7, r3
 8008e7e:	2200      	movs	r2, #0
 8008e80:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8008e82:	f7fa f991 	bl	80031a8 <get_systick>
 8008e86:	0003      	movs	r3, r0
 8008e88:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8008e8a:	2315      	movs	r3, #21
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8008e92:	e054      	b.n	8008f3e <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8008e94:	4a34      	ldr	r2, [pc, #208]	; (8008f68 <receive_astronode_answer+0x100>)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	0011      	movs	r1, r2
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7fa f98c 	bl	80031b8 <is_systick_timeout_over>
 8008ea0:	1e03      	subs	r3, r0, #0
 8008ea2:	d005      	beq.n	8008eb0 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8008ea4:	4b31      	ldr	r3, [pc, #196]	; (8008f6c <receive_astronode_answer+0x104>)
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f7fa f86e 	bl	8002f88 <send_debug_logs>
            return RS_FAILURE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e057      	b.n	8008f60 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8008eb0:	250f      	movs	r5, #15
 8008eb2:	197b      	adds	r3, r7, r5
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fa f995 	bl	80031e4 <is_astronode_character_received>
 8008eba:	0003      	movs	r3, r0
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	2016      	movs	r0, #22
 8008ec0:	183b      	adds	r3, r7, r0
 8008ec2:	183a      	adds	r2, r7, r0
 8008ec4:	8812      	ldrh	r2, [r2, #0]
 8008ec6:	801a      	strh	r2, [r3, #0]
 8008ec8:	2415      	movs	r4, #21
 8008eca:	193b      	adds	r3, r7, r4
 8008ecc:	193a      	adds	r2, r7, r4
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	d033      	beq.n	8008f3e <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8008ed6:	197b      	adds	r3, r7, r5
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d105      	bne.n	8008eea <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8008ede:	193b      	adds	r3, r7, r4
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	701a      	strb	r2, [r3, #0]
                length = 0;
 8008ee4:	183b      	adds	r3, r7, r0
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8008eea:	2116      	movs	r1, #22
 8008eec:	187b      	adds	r3, r7, r1
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	18d3      	adds	r3, r2, r3
 8008ef4:	220f      	movs	r2, #15
 8008ef6:	18ba      	adds	r2, r7, r2
 8008ef8:	7812      	ldrb	r2, [r2, #0]
 8008efa:	701a      	strb	r2, [r3, #0]
            length++;
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	881a      	ldrh	r2, [r3, #0]
 8008f00:	187b      	adds	r3, r7, r1
 8008f02:	3201      	adds	r2, #1
 8008f04:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8008f06:	187b      	adds	r3, r7, r1
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	2bb2      	cmp	r3, #178	; 0xb2
 8008f0c:	d905      	bls.n	8008f1a <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8008f0e:	4b18      	ldr	r3, [pc, #96]	; (8008f70 <receive_astronode_answer+0x108>)
 8008f10:	0018      	movs	r0, r3
 8008f12:	f7fa f839 	bl	8002f88 <send_debug_logs>
                return RS_FAILURE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e022      	b.n	8008f60 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008f1a:	230f      	movs	r3, #15
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d10c      	bne.n	8008f3e <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8008f24:	2216      	movs	r2, #22
 8008f26:	18bb      	adds	r3, r7, r2
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d907      	bls.n	8008f3e <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	18ba      	adds	r2, r7, r2
 8008f32:	8812      	ldrh	r2, [r2, #0]
 8008f34:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8008f36:	2315      	movs	r3, #21
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008f3e:	2315      	movs	r3, #21
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2201      	movs	r2, #1
 8008f46:	4053      	eors	r3, r2
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1a2      	bne.n	8008e94 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8008f4e:	4b09      	ldr	r3, [pc, #36]	; (8008f74 <receive_astronode_answer+0x10c>)
 8008f50:	0018      	movs	r0, r3
 8008f52:	f7fa f819 	bl	8002f88 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f7fa f815 	bl	8002f88 <send_debug_logs>

    return RS_SUCCESS;
 8008f5e:	2301      	movs	r3, #1
}
 8008f60:	0018      	movs	r0, r3
 8008f62:	46bd      	mov	sp, r7
 8008f64:	b006      	add	sp, #24
 8008f66:	bdb0      	pop	{r4, r5, r7, pc}
 8008f68:	000005dc 	.word	0x000005dc
 8008f6c:	0801399c 	.word	0x0801399c
 8008f70:	080139c0 	.word	0x080139c0
 8008f74:	08013a0c 	.word	0x08013a0c

08008f78 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	0002      	movs	r2, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	1dfb      	adds	r3, r7, #7
 8008f84:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8008f86:	1dfb      	adds	r3, r7, #7
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	091b      	lsrs	r3, r3, #4
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	001a      	movs	r2, r3
 8008f90:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <uint8_to_ascii_buffer+0x3c>)
 8008f92:	5c9a      	ldrb	r2, [r3, r2]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008f98:	1dfb      	adds	r3, r7, #7
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	220f      	movs	r2, #15
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	4903      	ldr	r1, [pc, #12]	; (8008fb4 <uint8_to_ascii_buffer+0x3c>)
 8008fa6:	5c8a      	ldrb	r2, [r1, r2]
 8008fa8:	701a      	strb	r2, [r3, #0]
}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	46bd      	mov	sp, r7
 8008fae:	b002      	add	sp, #8
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	08013d3c 	.word	0x08013d3c

08008fb8 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8008fbe:	1dfb      	adds	r3, r7, #7
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8008fc4:	e012      	b.n	8008fec <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 8008fc6:	f7fa f8b7 	bl	8003138 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8008fca:	1dfc      	adds	r4, r7, #7
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2201      	movs	r2, #1
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	f7fe fb9e 	bl	8007724 <astronode_send_cfg_wr>
 8008fe8:	0003      	movs	r3, r0
 8008fea:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8008fec:	1dfb      	adds	r3, r7, #7
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	4053      	eors	r3, r2
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8008ffa:	1dfb      	adds	r3, r7, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 8009002:	f7fe ffef 	bl	8007fe4 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009006:	f7fe fb55 	bl	80076b4 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800900a:	f7ff f8e5 	bl	80081d8 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800900e:	f7fe fcdf 	bl	80079d0 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009012:	f7fe fc33 	bl	800787c <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009016:	f7fe ff69 	bl	8007eec <astronode_send_pld_fr>
		return true ;
 800901a:	2301      	movs	r3, #1
 800901c:	e000      	b.n	8009020 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800901e:	2300      	movs	r3, #0
	}
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b003      	add	sp, #12
 8009026:	bd90      	pop	{r4, r7, pc}

08009028 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	0002      	movs	r2, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	1dbb      	adds	r3, r7, #6
 8009034:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	0018      	movs	r0, r3
 800903a:	f7f7 f863 	bl	8000104 <strlen>
 800903e:	0003      	movs	r3, r0
 8009040:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2ba0      	cmp	r3, #160	; 0xa0
 8009046:	d80b      	bhi.n	8009060 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	b29a      	uxth	r2, r3
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	1dbb      	adds	r3, r7, #6
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	0018      	movs	r0, r3
 8009054:	f7fe fea6 	bl	8007da4 <astronode_send_pld_er>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d005      	beq.n	8009068 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800905c:	2301      	movs	r3, #1
 800905e:	e004      	b.n	800906a <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <my_astro_add_payload_2_queue+0x4c>)
 8009062:	0018      	movs	r0, r3
 8009064:	f7f9 ff90 	bl	8002f88 <send_debug_logs>
	}
	return false ;
 8009068:	2300      	movs	r3, #0
}
 800906a:	0018      	movs	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	b004      	add	sp, #16
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	08013a38 	.word	0x08013a38

08009078 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800907c:	4b15      	ldr	r3, [pc, #84]	; (80090d4 <my_astro_handle_evt+0x5c>)
 800907e:	0018      	movs	r0, r3
 8009080:	f7f9 ff82 	bl	8002f88 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009084:	f7fe fd4e 	bl	8007b24 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009088:	f7ff fb00 	bl	800868c <is_sak_available>
 800908c:	1e03      	subs	r3, r0, #0
 800908e:	d007      	beq.n	80090a0 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009090:	f7ff f80c 	bl	80080ac <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009094:	f7ff f860 	bl	8008158 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009098:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <my_astro_handle_evt+0x60>)
 800909a:	0018      	movs	r0, r3
 800909c:	f7f9 ff74 	bl	8002f88 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80090a0:	f7ff fafe 	bl	80086a0 <is_astronode_reset>
 80090a4:	1e03      	subs	r3, r0, #0
 80090a6:	d005      	beq.n	80090b4 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 80090a8:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <my_astro_handle_evt+0x64>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7f9 ff6c 	bl	8002f88 <send_debug_logs>
	  astronode_send_res_cr () ;
 80090b0:	f7fe ff58 	bl	8007f64 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80090b4:	f7ff fafe 	bl	80086b4 <is_command_available>
 80090b8:	1e03      	subs	r3, r0, #0
 80090ba:	d007      	beq.n	80090cc <my_astro_handle_evt+0x54>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80090bc:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <my_astro_handle_evt+0x68>)
 80090be:	0018      	movs	r0, r3
 80090c0:	f7f9 ff62 	bl	8002f88 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80090c4:	f7ff f972 	bl	80083ac <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80090c8:	f7ff f930 	bl	800832c <astronode_send_cmd_cr>
	}
	return true ;
 80090cc:	2301      	movs	r3, #1
}
 80090ce:	0018      	movs	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	08013aa0 	.word	0x08013aa0
 80090d8:	08013ad4 	.word	0x08013ad4
 80090dc:	08013b18 	.word	0x08013b18
 80090e0:	08013b54 	.word	0x08013b54

080090e4 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	0011      	movs	r1, r2
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7fe fd95 	bl	8007c24 <astronode_send_geo_wr>
}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	b002      	add	sp, #8
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8009104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009106:	4c9f      	ldr	r4, [pc, #636]	; (8009384 <my_gnss_acq_coordinates+0x280>)
 8009108:	44a5      	add	sp, r4
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800910e:	4b9e      	ldr	r3, [pc, #632]	; (8009388 <my_gnss_acq_coordinates+0x284>)
 8009110:	18fb      	adds	r3, r7, r3
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8009116:	4b9d      	ldr	r3, [pc, #628]	; (800938c <my_gnss_acq_coordinates+0x288>)
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800911e:	4b9c      	ldr	r3, [pc, #624]	; (8009390 <my_gnss_acq_coordinates+0x28c>)
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8009126:	4b9b      	ldr	r3, [pc, #620]	; (8009394 <my_gnss_acq_coordinates+0x290>)
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800912e:	4b9a      	ldr	r3, [pc, #616]	; (8009398 <my_gnss_acq_coordinates+0x294>)
 8009130:	18fb      	adds	r3, r7, r3
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009136:	4b99      	ldr	r3, [pc, #612]	; (800939c <my_gnss_acq_coordinates+0x298>)
 8009138:	2486      	movs	r4, #134	; 0x86
 800913a:	00a4      	lsls	r4, r4, #2
 800913c:	191b      	adds	r3, r3, r4
 800913e:	19db      	adds	r3, r3, r7
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	3304      	adds	r3, #4
 8009146:	22f6      	movs	r2, #246	; 0xf6
 8009148:	2100      	movs	r1, #0
 800914a:	0018      	movs	r0, r3
 800914c:	f002 fb04 	bl	800b758 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009150:	4b93      	ldr	r3, [pc, #588]	; (80093a0 <my_gnss_acq_coordinates+0x29c>)
 8009152:	191b      	adds	r3, r3, r4
 8009154:	19db      	adds	r3, r3, r7
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	3304      	adds	r3, #4
 800915c:	22f6      	movs	r2, #246	; 0xf6
 800915e:	2100      	movs	r1, #0
 8009160:	0018      	movs	r0, r3
 8009162:	f002 faf9 	bl	800b758 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009166:	4b8f      	ldr	r3, [pc, #572]	; (80093a4 <my_gnss_acq_coordinates+0x2a0>)
 8009168:	2284      	movs	r2, #132	; 0x84
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	18ba      	adds	r2, r7, r2
 800916e:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009170:	4b8d      	ldr	r3, [pc, #564]	; (80093a8 <my_gnss_acq_coordinates+0x2a4>)
 8009172:	2283      	movs	r2, #131	; 0x83
 8009174:	0092      	lsls	r2, r2, #2
 8009176:	18ba      	adds	r2, r7, r2
 8009178:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800917a:	4b8c      	ldr	r3, [pc, #560]	; (80093ac <my_gnss_acq_coordinates+0x2a8>)
 800917c:	2282      	movs	r2, #130	; 0x82
 800917e:	0092      	lsls	r2, r2, #2
 8009180:	18ba      	adds	r2, r7, r2
 8009182:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009184:	4b8a      	ldr	r3, [pc, #552]	; (80093b0 <my_gnss_acq_coordinates+0x2ac>)
 8009186:	2281      	movs	r2, #129	; 0x81
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	18ba      	adds	r2, r7, r2
 800918c:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '\0' ;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 100 ;
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	4b86      	ldr	r3, [pc, #536]	; (80093b4 <my_gnss_acq_coordinates+0x2b0>)
 800919a:	608a      	str	r2, [r1, #8]
 800919c:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800919e:	f7fa f853 	bl	8003248 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 80091a2:	e0c5      	b.n	8009330 <my_gnss_acq_coordinates+0x22c>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 80091a4:	4c7a      	ldr	r4, [pc, #488]	; (8009390 <my_gnss_acq_coordinates+0x28c>)
 80091a6:	193b      	adds	r3, r7, r4
 80091a8:	2100      	movs	r1, #0
 80091aa:	0018      	movs	r0, r3
 80091ac:	f7f9 ffa2 	bl	80030f4 <my_gnss_receive_byte>
		if ( rx_byte )
 80091b0:	0020      	movs	r0, r4
 80091b2:	183b      	adds	r3, r7, r0
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	4c75      	ldr	r4, [pc, #468]	; (800938c <my_gnss_acq_coordinates+0x288>)
 80091b8:	193a      	adds	r2, r7, r4
 80091ba:	1939      	adds	r1, r7, r4
 80091bc:	7809      	ldrb	r1, [r1, #0]
 80091be:	7011      	strb	r1, [r2, #0]
 80091c0:	4d75      	ldr	r5, [pc, #468]	; (8009398 <my_gnss_acq_coordinates+0x294>)
 80091c2:	197a      	adds	r2, r7, r5
 80091c4:	1979      	adds	r1, r7, r5
 80091c6:	7809      	ldrb	r1, [r1, #0]
 80091c8:	7011      	strb	r1, [r2, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d100      	bne.n	80091d0 <my_gnss_acq_coordinates+0xcc>
 80091ce:	e0af      	b.n	8009330 <my_gnss_acq_coordinates+0x22c>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 80091d0:	4b70      	ldr	r3, [pc, #448]	; (8009394 <my_gnss_acq_coordinates+0x290>)
 80091d2:	18fa      	adds	r2, r7, r3
 80091d4:	2684      	movs	r6, #132	; 0x84
 80091d6:	0076      	lsls	r6, r6, #1
 80091d8:	19b9      	adds	r1, r7, r6
 80091da:	183b      	adds	r3, r7, r0
 80091dc:	0018      	movs	r0, r3
 80091de:	f000 fbf9 	bl	80099d4 <my_nmea_message>
 80091e2:	0001      	movs	r1, r0
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	193a      	adds	r2, r7, r4
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	197b      	adds	r3, r7, r5
 80091ee:	197a      	adds	r2, r7, r5
 80091f0:	7812      	ldrb	r2, [r2, #0]
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	2902      	cmp	r1, #2
 80091f6:	d000      	beq.n	80091fa <my_gnss_acq_coordinates+0xf6>
 80091f8:	e09a      	b.n	8009330 <my_gnss_acq_coordinates+0x22c>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80091fa:	19bb      	adds	r3, r7, r6
 80091fc:	0018      	movs	r0, r3
 80091fe:	f000 fca9 	bl	8009b54 <is_my_nmea_checksum_ok>
 8009202:	0003      	movs	r3, r0
 8009204:	0019      	movs	r1, r3
 8009206:	193b      	adds	r3, r7, r4
 8009208:	193a      	adds	r2, r7, r4
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	197b      	adds	r3, r7, r5
 8009210:	197a      	adds	r2, r7, r5
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	2900      	cmp	r1, #0
 8009218:	d100      	bne.n	800921c <my_gnss_acq_coordinates+0x118>
 800921a:	e089      	b.n	8009330 <my_gnss_acq_coordinates+0x22c>
				{
					if ( !is_utc_saved )
 800921c:	193b      	adds	r3, r7, r4
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	2201      	movs	r2, #1
 8009222:	4053      	eors	r3, r2
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d015      	beq.n	8009256 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7c1b      	ldrb	r3, [r3, #16]
 800922e:	2b33      	cmp	r3, #51	; 0x33
 8009230:	d111      	bne.n	8009256 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009232:	2383      	movs	r3, #131	; 0x83
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	18fb      	adds	r3, r7, r3
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	19bb      	adds	r3, r7, r6
 800923c:	0011      	movs	r1, r2
 800923e:	0018      	movs	r0, r3
 8009240:	f002 fab7 	bl	800b7b2 <strstr>
 8009244:	1e03      	subs	r3, r0, #0
 8009246:	d006      	beq.n	8009256 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009248:	19bb      	adds	r3, r7, r6
 800924a:	0018      	movs	r0, r3
 800924c:	f000 f9b6 	bl	80095bc <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009250:	193b      	adds	r3, r7, r4
 8009252:	2201      	movs	r2, #1
 8009254:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS )
 8009256:	2384      	movs	r3, #132	; 0x84
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	18fb      	adds	r3, r7, r3
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	2484      	movs	r4, #132	; 0x84
 8009260:	0064      	lsls	r4, r4, #1
 8009262:	193b      	adds	r3, r7, r4
 8009264:	0011      	movs	r1, r2
 8009266:	0018      	movs	r0, r3
 8009268:	f002 faa3 	bl	800b7b2 <strstr>
 800926c:	1e03      	subs	r3, r0, #0
 800926e:	d012      	beq.n	8009296 <my_gnss_acq_coordinates+0x192>
 8009270:	4d49      	ldr	r5, [pc, #292]	; (8009398 <my_gnss_acq_coordinates+0x294>)
 8009272:	197b      	adds	r3, r7, r5
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d80d      	bhi.n	8009296 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800927a:	4b4f      	ldr	r3, [pc, #316]	; (80093b8 <my_gnss_acq_coordinates+0x2b4>)
 800927c:	881a      	ldrh	r2, [r3, #0]
 800927e:	4b4f      	ldr	r3, [pc, #316]	; (80093bc <my_gnss_acq_coordinates+0x2b8>)
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d85c      	bhi.n	8009340 <my_gnss_acq_coordinates+0x23c>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009286:	193b      	adds	r3, r7, r4
 8009288:	0018      	movs	r0, r3
 800928a:	f000 fe09 	bl	8009ea0 <my_nmea_get_gsv_tns>
 800928e:	0003      	movs	r3, r0
 8009290:	001a      	movs	r2, r3
 8009292:	197b      	adds	r3, r7, r5
 8009294:	701a      	strb	r2, [r3, #0]
					}
					if ( gsv_tns > MIN_TNS ) // Tutaj cały czas miałem błąd, bo nigdy gsv_tns nie mógł się zwięszyć przy warunku gsv_tns < MIN_TNS powyżej
 8009296:	4b40      	ldr	r3, [pc, #256]	; (8009398 <my_gnss_acq_coordinates+0x294>)
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d91d      	bls.n	80092dc <my_gnss_acq_coordinates+0x1d8>
					{
						if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80092a0:	2382      	movs	r3, #130	; 0x82
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	2484      	movs	r4, #132	; 0x84
 80092aa:	0064      	lsls	r4, r4, #1
 80092ac:	193b      	adds	r3, r7, r4
 80092ae:	0011      	movs	r1, r2
 80092b0:	0018      	movs	r0, r3
 80092b2:	f002 fa7e 	bl	800b7b2 <strstr>
 80092b6:	1e03      	subs	r3, r0, #0
 80092b8:	d010      	beq.n	80092dc <my_gnss_acq_coordinates+0x1d8>
						{
							fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80092ba:	193b      	adds	r3, r7, r4
 80092bc:	0018      	movs	r0, r3
 80092be:	f000 fbf5 	bl	8009aac <get_my_nmea_gngsa_fixed_mode_s>
 80092c2:	0003      	movs	r3, r0
 80092c4:	001a      	movs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	741a      	strb	r2, [r3, #16]
							fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 fbf8 	bl	8009ac2 <get_my_nmea_gngsa_pdop_d>
 80092d2:	0002      	movs	r2, r0
 80092d4:	000b      	movs	r3, r1
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	608a      	str	r2, [r1, #8]
 80092da:	60cb      	str	r3, [r1, #12]
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 80092dc:	2381      	movs	r3, #129	; 0x81
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	18fb      	adds	r3, r7, r3
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	2384      	movs	r3, #132	; 0x84
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	0011      	movs	r1, r2
 80092ec:	0018      	movs	r0, r3
 80092ee:	f002 fa60 	bl	800b7b2 <strstr>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d01c      	beq.n	8009330 <my_gnss_acq_coordinates+0x22c>
 80092f6:	4b25      	ldr	r3, [pc, #148]	; (800938c <my_gnss_acq_coordinates+0x288>)
 80092f8:	18fb      	adds	r3, r7, r3
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <my_gnss_acq_coordinates+0x22c>
					{
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009300:	4b27      	ldr	r3, [pc, #156]	; (80093a0 <my_gnss_acq_coordinates+0x29c>)
 8009302:	2186      	movs	r1, #134	; 0x86
 8009304:	0089      	lsls	r1, r1, #2
 8009306:	185b      	adds	r3, r3, r1
 8009308:	19da      	adds	r2, r3, r7
 800930a:	4b24      	ldr	r3, [pc, #144]	; (800939c <my_gnss_acq_coordinates+0x298>)
 800930c:	185b      	adds	r3, r3, r1
 800930e:	19db      	adds	r3, r3, r7
 8009310:	0010      	movs	r0, r2
 8009312:	0019      	movs	r1, r3
 8009314:	23fa      	movs	r3, #250	; 0xfa
 8009316:	001a      	movs	r2, r3
 8009318:	f002 fb03 	bl	800b922 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6898      	ldr	r0, [r3, #8]
 8009320:	68d9      	ldr	r1, [r3, #12]
 8009322:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <my_gnss_acq_coordinates+0x2bc>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f7f7 f89e 	bl	8000468 <__aeabi_dcmple>
 800932c:	1e03      	subs	r3, r0, #0
 800932e:	d109      	bne.n	8009344 <my_gnss_acq_coordinates+0x240>
	while ( tim_seconds < fix_acq_ths )
 8009330:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <my_gnss_acq_coordinates+0x2b4>)
 8009332:	881a      	ldrh	r2, [r3, #0]
 8009334:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <my_gnss_acq_coordinates+0x2c0>)
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d200      	bcs.n	800933e <my_gnss_acq_coordinates+0x23a>
 800933c:	e732      	b.n	80091a4 <my_gnss_acq_coordinates+0xa0>
 800933e:	e002      	b.n	8009346 <my_gnss_acq_coordinates+0x242>
							break ;
 8009340:	46c0      	nop			; (mov r8, r8)
 8009342:	e000      	b.n	8009346 <my_gnss_acq_coordinates+0x242>
						{
							break ;
 8009344:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009346:	f7f9 ff8f 	bl	8003268 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800934a:	4b15      	ldr	r3, [pc, #84]	; (80093a0 <my_gnss_acq_coordinates+0x29c>)
 800934c:	2286      	movs	r2, #134	; 0x86
 800934e:	0092      	lsls	r2, r2, #2
 8009350:	189b      	adds	r3, r3, r2
 8009352:	19db      	adds	r3, r3, r7
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <my_gnss_acq_coordinates+0x26c>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	230c      	movs	r3, #12
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	0011      	movs	r1, r2
 8009362:	0018      	movs	r0, r3
 8009364:	f000 fcb2 	bl	8009ccc <my_nmea_get_gngll_coordinates>
		r = true ;
 8009368:	4b07      	ldr	r3, [pc, #28]	; (8009388 <my_gnss_acq_coordinates+0x284>)
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	2201      	movs	r2, #1
 800936e:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <my_gnss_acq_coordinates+0x284>)
 8009372:	18fb      	adds	r3, r7, r3
 8009374:	781b      	ldrb	r3, [r3, #0]
}
 8009376:	0018      	movs	r0, r3
 8009378:	46bd      	mov	sp, r7
 800937a:	2387      	movs	r3, #135	; 0x87
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	449d      	add	sp, r3
 8009380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	fffffde4 	.word	0xfffffde4
 8009388:	00000217 	.word	0x00000217
 800938c:	00000216 	.word	0x00000216
 8009390:	00000203 	.word	0x00000203
 8009394:	00000202 	.word	0x00000202
 8009398:	00000215 	.word	0x00000215
 800939c:	fffffef0 	.word	0xfffffef0
 80093a0:	fffffdf4 	.word	0xfffffdf4
 80093a4:	08013b94 	.word	0x08013b94
 80093a8:	08013b9c 	.word	0x08013b9c
 80093ac:	08013ba4 	.word	0x08013ba4
 80093b0:	08013bac 	.word	0x08013bac
 80093b4:	40590000 	.word	0x40590000
 80093b8:	20000bf8 	.word	0x20000bf8
 80093bc:	20000014 	.word	0x20000014
 80093c0:	20000018 	.word	0x20000018
 80093c4:	20000012 	.word	0x20000012

080093c8 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <my_rtc_get_dt+0x2c>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	0018      	movs	r0, r3
 80093da:	f7fc f98b 	bl	80056f4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <my_rtc_get_dt+0x2c>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	0018      	movs	r0, r3
 80093e6:	f7fc f897 	bl	8005518 <HAL_RTC_GetTime>
}
 80093ea:	46c0      	nop			; (mov r8, r8)
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b002      	add	sp, #8
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	200006ec 	.word	0x200006ec

080093f8 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 80093f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fa:	b08d      	sub	sp, #52	; 0x34
 80093fc:	af04      	add	r7, sp, #16
 80093fe:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009400:	2508      	movs	r5, #8
 8009402:	1979      	adds	r1, r7, r5
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <my_rtc_get_dt_s+0x7c>)
 8009406:	2200      	movs	r2, #0
 8009408:	0018      	movs	r0, r3
 800940a:	f7fc f885 	bl	8005518 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800940e:	241c      	movs	r4, #28
 8009410:	1939      	adds	r1, r7, r4
 8009412:	4b18      	ldr	r3, [pc, #96]	; (8009474 <my_rtc_get_dt_s+0x7c>)
 8009414:	2200      	movs	r2, #0
 8009416:	0018      	movs	r0, r3
 8009418:	f7fc f96c 	bl	80056f4 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800941c:	0021      	movs	r1, r4
 800941e:	187b      	adds	r3, r7, r1
 8009420:	78db      	ldrb	r3, [r3, #3]
 8009422:	22fa      	movs	r2, #250	; 0xfa
 8009424:	00d2      	lsls	r2, r2, #3
 8009426:	189a      	adds	r2, r3, r2
 8009428:	187b      	adds	r3, r7, r1
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	469c      	mov	ip, r3
 800942e:	187b      	adds	r3, r7, r1
 8009430:	789b      	ldrb	r3, [r3, #2]
 8009432:	001c      	movs	r4, r3
 8009434:	0028      	movs	r0, r5
 8009436:	183b      	adds	r3, r7, r0
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	001d      	movs	r5, r3
 800943c:	183b      	adds	r3, r7, r0
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	001e      	movs	r6, r3
 8009442:	183b      	adds	r3, r7, r0
 8009444:	789b      	ldrb	r3, [r3, #2]
 8009446:	490c      	ldr	r1, [pc, #48]	; (8009478 <my_rtc_get_dt_s+0x80>)
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	9602      	str	r6, [sp, #8]
 800944e:	9501      	str	r5, [sp, #4]
 8009450:	9400      	str	r4, [sp, #0]
 8009452:	4663      	mov	r3, ip
 8009454:	f002 f8ea 	bl	800b62c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009458:	211c      	movs	r1, #28
 800945a:	187b      	adds	r3, r7, r1
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	b29b      	uxth	r3, r3
 8009460:	22fa      	movs	r2, #250	; 0xfa
 8009462:	00d2      	lsls	r2, r2, #3
 8009464:	4694      	mov	ip, r2
 8009466:	4463      	add	r3, ip
 8009468:	b29b      	uxth	r3, r3
}
 800946a:	0018      	movs	r0, r3
 800946c:	46bd      	mov	sp, r7
 800946e:	b009      	add	sp, #36	; 0x24
 8009470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	200006ec 	.word	0x200006ec
 8009478:	08013bf4 	.word	0x08013bf4

0800947c <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947e:	b0ab      	sub	sp, #172	; 0xac
 8009480:	af02      	add	r7, sp, #8
 8009482:	6078      	str	r0, [r7, #4]
	const char* cf = "my_rtc.c,my_rtc_set_alarm," ;
 8009484:	4b48      	ldr	r3, [pc, #288]	; (80095a8 <my_rtc_set_alarm+0x12c>)
 8009486:	229c      	movs	r2, #156	; 0x9c
 8009488:	18b9      	adds	r1, r7, r2
 800948a:	600b      	str	r3, [r1, #0]
	const char* cdt = "dt," ;
 800948c:	4b47      	ldr	r3, [pc, #284]	; (80095ac <my_rtc_set_alarm+0x130>)
 800948e:	2498      	movs	r4, #152	; 0x98
 8009490:	1939      	adds	r1, r7, r4
 8009492:	600b      	str	r3, [r1, #0]
	const char* cal = "al," ;
 8009494:	4b46      	ldr	r3, [pc, #280]	; (80095b0 <my_rtc_set_alarm+0x134>)
 8009496:	2194      	movs	r1, #148	; 0x94
 8009498:	1878      	adds	r0, r7, r1
 800949a:	6003      	str	r3, [r0, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800949c:	2530      	movs	r5, #48	; 0x30
 800949e:	197a      	adds	r2, r7, r5
 80094a0:	2644      	movs	r6, #68	; 0x44
 80094a2:	19bb      	adds	r3, r7, r6
 80094a4:	0011      	movs	r1, r2
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7ff ff8e 	bl	80093c8 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 80094ac:	237c      	movs	r3, #124	; 0x7c
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7ff ffa1 	bl	80093f8 <my_rtc_get_dt_s>
	sprintf ( m , "%s%s%s" , cf , cdt , rtc_dt_s ) ;
 80094b6:	1938      	adds	r0, r7, r4
 80094b8:	6804      	ldr	r4, [r0, #0]
 80094ba:	229c      	movs	r2, #156	; 0x9c
 80094bc:	18b8      	adds	r0, r7, r2
 80094be:	6802      	ldr	r2, [r0, #0]
 80094c0:	493c      	ldr	r1, [pc, #240]	; (80095b4 <my_rtc_set_alarm+0x138>)
 80094c2:	2048      	movs	r0, #72	; 0x48
 80094c4:	1838      	adds	r0, r7, r0
 80094c6:	237c      	movs	r3, #124	; 0x7c
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	0023      	movs	r3, r4
 80094ce:	f002 f8ad 	bl	800b62c <sprintf>
	send_debug_logs ( m ) ;
 80094d2:	2048      	movs	r0, #72	; 0x48
 80094d4:	183b      	adds	r3, r7, r0
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7f9 fd56 	bl	8002f88 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 80094dc:	197a      	adds	r2, r7, r5
 80094de:	19bb      	adds	r3, r7, r6
 80094e0:	0011      	movs	r1, r2
 80094e2:	0018      	movs	r0, r3
 80094e4:	f000 f918 	bl	8009718 <my_conv_rtc2timestamp>
 80094e8:	0002      	movs	r2, r0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	2490      	movs	r4, #144	; 0x90
 80094f0:	1938      	adds	r0, r7, r4
 80094f2:	6003      	str	r3, [r0, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 80094f4:	197a      	adds	r2, r7, r5
 80094f6:	19b9      	adds	r1, r7, r6
 80094f8:	193c      	adds	r4, r7, r4
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0018      	movs	r0, r3
 80094fe:	f000 f97f 	bl	8009800 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009502:	002c      	movs	r4, r5
 8009504:	193b      	adds	r3, r7, r4
 8009506:	781a      	ldrb	r2, [r3, #0]
 8009508:	2108      	movs	r1, #8
 800950a:	187b      	adds	r3, r7, r1
 800950c:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800950e:	193b      	adds	r3, r7, r4
 8009510:	785a      	ldrb	r2, [r3, #1]
 8009512:	187b      	adds	r3, r7, r1
 8009514:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8009516:	193b      	adds	r3, r7, r4
 8009518:	789a      	ldrb	r2, [r3, #2]
 800951a:	187b      	adds	r3, r7, r1
 800951c:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800951e:	0008      	movs	r0, r1
 8009520:	183b      	adds	r3, r7, r0
 8009522:	2200      	movs	r2, #0
 8009524:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8009526:	183b      	adds	r3, r7, r0
 8009528:	2200      	movs	r2, #0
 800952a:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800952c:	183b      	adds	r3, r7, r0
 800952e:	2200      	movs	r2, #0
 8009530:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009532:	183b      	adds	r3, r7, r0
 8009534:	2200      	movs	r2, #0
 8009536:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009538:	183b      	adds	r3, r7, r0
 800953a:	2200      	movs	r2, #0
 800953c:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800953e:	183b      	adds	r3, r7, r0
 8009540:	2200      	movs	r2, #0
 8009542:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009544:	19bb      	adds	r3, r7, r6
 8009546:	7899      	ldrb	r1, [r3, #2]
 8009548:	183b      	adds	r3, r7, r0
 800954a:	2220      	movs	r2, #32
 800954c:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800954e:	183b      	adds	r3, r7, r0
 8009550:	2280      	movs	r2, #128	; 0x80
 8009552:	0052      	lsls	r2, r2, #1
 8009554:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009556:	1839      	adds	r1, r7, r0
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <my_rtc_set_alarm+0x13c>)
 800955a:	2200      	movs	r2, #0
 800955c:	0018      	movs	r0, r3
 800955e:	f7fc f917 	bl	8005790 <HAL_RTC_SetAlarm_IT>
 8009562:	1e03      	subs	r3, r0, #0
 8009564:	d11a      	bne.n	800959c <my_rtc_set_alarm+0x120>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009566:	257c      	movs	r5, #124	; 0x7c
 8009568:	197a      	adds	r2, r7, r5
 800956a:	1939      	adds	r1, r7, r4
 800956c:	19bb      	adds	r3, r7, r6
 800956e:	0018      	movs	r0, r3
 8009570:	f000 fa08 	bl	8009984 <my_conv_dt_2_dts>
		sprintf ( m , "%s%s%s" , cf , cal , rtc_dt_s ) ;
 8009574:	2194      	movs	r1, #148	; 0x94
 8009576:	187b      	adds	r3, r7, r1
 8009578:	681c      	ldr	r4, [r3, #0]
 800957a:	229c      	movs	r2, #156	; 0x9c
 800957c:	18bb      	adds	r3, r7, r2
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	490c      	ldr	r1, [pc, #48]	; (80095b4 <my_rtc_set_alarm+0x138>)
 8009582:	2648      	movs	r6, #72	; 0x48
 8009584:	19b8      	adds	r0, r7, r6
 8009586:	197b      	adds	r3, r7, r5
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	0023      	movs	r3, r4
 800958c:	f002 f84e 	bl	800b62c <sprintf>
		send_debug_logs ( m ) ;
 8009590:	19bb      	adds	r3, r7, r6
 8009592:	0018      	movs	r0, r3
 8009594:	f7f9 fcf8 	bl	8002f88 <send_debug_logs>
		return true ;
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <my_rtc_set_alarm+0x122>
	}
	return false ;
 800959c:	2300      	movs	r3, #0
}
 800959e:	0018      	movs	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	b029      	add	sp, #164	; 0xa4
 80095a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	08013c14 	.word	0x08013c14
 80095ac:	08013c30 	.word	0x08013c30
 80095b0:	08013c34 	.word	0x08013c34
 80095b4:	08013c38 	.word	0x08013c38
 80095b8:	200006ec 	.word	0x200006ec

080095bc <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 80095bc:	b5b0      	push	{r4, r5, r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 80095c4:	2508      	movs	r5, #8
 80095c6:	197b      	adds	r3, r7, r5
 80095c8:	1cda      	adds	r2, r3, #3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	0011      	movs	r1, r2
 80095ce:	0018      	movs	r0, r3
 80095d0:	f000 fc9e 	bl	8009f10 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 80095d4:	197b      	adds	r3, r7, r5
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0011      	movs	r1, r2
 80095dc:	0018      	movs	r0, r3
 80095de:	f000 fcd1 	bl	8009f84 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 80095e2:	197b      	adds	r3, r7, r5
 80095e4:	1c9a      	adds	r2, r3, #2
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	0011      	movs	r1, r2
 80095ea:	0018      	movs	r0, r3
 80095ec:	f000 fd04 	bl	8009ff8 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 80095f0:	240c      	movs	r4, #12
 80095f2:	193a      	adds	r2, r7, r4
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	0011      	movs	r1, r2
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 fd37 	bl	800a06c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 80095fe:	193b      	adds	r3, r7, r4
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0011      	movs	r1, r2
 8009606:	0018      	movs	r0, r3
 8009608:	f000 fd6a 	bl	800a0e0 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800960c:	193b      	adds	r3, r7, r4
 800960e:	1c9a      	adds	r2, r3, #2
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	0011      	movs	r1, r2
 8009614:	0018      	movs	r0, r3
 8009616:	f000 fd9d 	bl	800a154 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800961a:	193b      	adds	r3, r7, r4
 800961c:	1d1a      	adds	r2, r3, #4
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	0011      	movs	r1, r2
 8009622:	0018      	movs	r0, r3
 8009624:	f000 fdd0 	bl	800a1c8 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009628:	193b      	adds	r3, r7, r4
 800962a:	2200      	movs	r2, #0
 800962c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800962e:	193b      	adds	r3, r7, r4
 8009630:	2200      	movs	r2, #0
 8009632:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009636:	0018      	movs	r0, r3
 8009638:	f7fc fb19 	bl	8005c6e <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800963c:	1939      	adds	r1, r7, r4
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009640:	2200      	movs	r2, #0
 8009642:	0018      	movs	r0, r3
 8009644:	f7fb fec0 	bl	80053c8 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009648:	1979      	adds	r1, r7, r5
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800964c:	2200      	movs	r2, #0
 800964e:	0018      	movs	r0, r3
 8009650:	f7fb ffbe 	bl	80055d0 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009654:	4b03      	ldr	r3, [pc, #12]	; (8009664 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009656:	0018      	movs	r0, r3
 8009658:	f7fc fb3d 	bl	8005cd6 <HAL_RTCEx_DisableBypassShadow>
}
 800965c:	46c0      	nop			; (mov r8, r8)
 800965e:	46bd      	mov	sp, r7
 8009660:	b008      	add	sp, #32
 8009662:	bdb0      	pop	{r4, r5, r7, pc}
 8009664:	200006ec 	.word	0x200006ec

08009668 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2100      	movs	r1, #0
 8009674:	0018      	movs	r0, r3
 8009676:	f001 fe3d 	bl	800b2f4 <strtod>
 800967a:	0002      	movs	r2, r0
 800967c:	000b      	movs	r3, r1
 800967e:	60ba      	str	r2, [r7, #8]
 8009680:	60fb      	str	r3, [r7, #12]
    return d ;
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	68fb      	ldr	r3, [r7, #12]
}
 8009686:	0010      	movs	r0, r2
 8009688:	0019      	movs	r1, r3
 800968a:	46bd      	mov	sp, r7
 800968c:	b004      	add	sp, #16
 800968e:	bd80      	pop	{r7, pc}

08009690 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	0008      	movs	r0, r1
 800969a:	0011      	movs	r1, r2
 800969c:	1cfb      	adds	r3, r7, #3
 800969e:	1c02      	adds	r2, r0, #0
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	1cbb      	adds	r3, r7, #2
 80096a4:	1c0a      	adds	r2, r1, #0
 80096a6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 80096a8:	230f      	movs	r3, #15
 80096aa:	18fb      	adds	r3, r7, r3
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 80096b0:	230e      	movs	r3, #14
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 80096b8:	e01c      	b.n	80096f4 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 80096ba:	230f      	movs	r3, #15
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	18d3      	adds	r3, r2, r3
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	1cfa      	adds	r2, r7, #3
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d105      	bne.n	80096da <my_find_char_position+0x4a>
			p++ ;
 80096ce:	210e      	movs	r1, #14
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	187b      	adds	r3, r7, r1
 80096d6:	3201      	adds	r2, #1
 80096d8:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 80096da:	230e      	movs	r3, #14
 80096dc:	18fa      	adds	r2, r7, r3
 80096de:	1cbb      	adds	r3, r7, #2
 80096e0:	7812      	ldrb	r2, [r2, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d00e      	beq.n	8009706 <my_find_char_position+0x76>
			break ;
		i++ ;
 80096e8:	210f      	movs	r1, #15
 80096ea:	187b      	adds	r3, r7, r1
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	3201      	adds	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 80096f4:	230f      	movs	r3, #15
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	18d3      	adds	r3, r2, r3
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1da      	bne.n	80096ba <my_find_char_position+0x2a>
 8009704:	e000      	b.n	8009708 <my_find_char_position+0x78>
			break ;
 8009706:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009708:	230f      	movs	r3, #15
 800970a:	18fb      	adds	r3, r7, r3
 800970c:	781b      	ldrb	r3, [r3, #0]
}
 800970e:	0018      	movs	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	b004      	add	sp, #16
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	78db      	ldrb	r3, [r3, #3]
 8009726:	22fa      	movs	r2, #250	; 0xfa
 8009728:	00d2      	lsls	r2, r2, #3
 800972a:	4694      	mov	ip, r2
 800972c:	4463      	add	r3, ip
 800972e:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	0013      	movs	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	189b      	adds	r3, r3, r2
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	189b      	adds	r3, r3, r2
 800973c:	009a      	lsls	r2, r3, #2
 800973e:	189a      	adds	r2, r3, r2
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	492c      	ldr	r1, [pc, #176]	; (80097f4 <my_conv_rtc2timestamp+0xdc>)
 8009744:	468c      	mov	ip, r1
 8009746:	4463      	add	r3, ip
 8009748:	089b      	lsrs	r3, r3, #2
 800974a:	18d3      	adds	r3, r2, r3
 800974c:	4a2a      	ldr	r2, [pc, #168]	; (80097f8 <my_conv_rtc2timestamp+0xe0>)
 800974e:	4694      	mov	ip, r2
 8009750:	4463      	add	r3, ip
 8009752:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	e00a      	b.n	8009770 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800975a:	4a28      	ldr	r2, [pc, #160]	; (80097fc <my_conv_rtc2timestamp+0xe4>)
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	18d3      	adds	r3, r2, r3
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	001a      	movs	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	189b      	adds	r3, r3, r2
 8009768:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	3b01      	subs	r3, #1
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	429a      	cmp	r2, r3
 800977a:	dbee      	blt.n	800975a <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d908      	bls.n	8009796 <my_conv_rtc2timestamp+0x7e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	0018      	movs	r0, r3
 8009788:	f000 f8de 	bl	8009948 <my_conv_is_leap_year>
 800978c:	1e03      	subs	r3, r0, #0
 800978e:	d002      	beq.n	8009796 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	3301      	adds	r3, #1
 8009794:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	789b      	ldrb	r3, [r3, #2]
 800979a:	001a      	movs	r2, r3
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	18d3      	adds	r3, r2, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	0013      	movs	r3, r2
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	011a      	lsls	r2, r3, #4
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	0113      	lsls	r3, r2, #4
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	01db      	lsls	r3, r3, #7
 80097b6:	0019      	movs	r1, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	001a      	movs	r2, r3
 80097be:	0013      	movs	r3, r2
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	011a      	lsls	r2, r3, #4
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	0113      	lsls	r3, r2, #4
 80097ca:	001a      	movs	r2, r3
 80097cc:	0013      	movs	r3, r2
 80097ce:	18ca      	adds	r2, r1, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	0019      	movs	r1, r3
 80097d6:	000b      	movs	r3, r1
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	1a5b      	subs	r3, r3, r1
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	18d3      	adds	r3, r2, r3
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	7892      	ldrb	r2, [r2, #2]
 80097e4:	189b      	adds	r3, r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]

    return ts ;
 80097e8:	68bb      	ldr	r3, [r7, #8]
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b006      	add	sp, #24
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	fffff84f 	.word	0xfffff84f
 80097f8:	fff50736 	.word	0xfff50736
 80097fc:	08013d4c 	.word	0x08013d4c

08009800 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b08b      	sub	sp, #44	; 0x2c
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	213c      	movs	r1, #60	; 0x3c
 8009810:	0018      	movs	r0, r3
 8009812:	f7f6 fd19 	bl	8000248 <__aeabi_uidivmod>
 8009816:	000b      	movs	r3, r1
 8009818:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	213c      	movs	r1, #60	; 0x3c
 800981e:	0018      	movs	r0, r3
 8009820:	f7f6 fc8c 	bl	800013c <__udivsi3>
 8009824:	0003      	movs	r3, r0
 8009826:	213c      	movs	r1, #60	; 0x3c
 8009828:	0018      	movs	r0, r3
 800982a:	f7f6 fd0d 	bl	8000248 <__aeabi_uidivmod>
 800982e:	000b      	movs	r3, r1
 8009830:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	22e1      	movs	r2, #225	; 0xe1
 8009836:	0111      	lsls	r1, r2, #4
 8009838:	0018      	movs	r0, r3
 800983a:	f7f6 fc7f 	bl	800013c <__udivsi3>
 800983e:	0003      	movs	r3, r0
 8009840:	2118      	movs	r1, #24
 8009842:	0018      	movs	r0, r3
 8009844:	f7f6 fd00 	bl	8000248 <__aeabi_uidivmod>
 8009848:	000b      	movs	r3, r1
 800984a:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	493b      	ldr	r1, [pc, #236]	; (800993c <my_conv_timestamp2rtc+0x13c>)
 8009850:	0018      	movs	r0, r3
 8009852:	f7f6 fc73 	bl	800013c <__udivsi3>
 8009856:	0003      	movs	r3, r0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800985a:	4b39      	ldr	r3, [pc, #228]	; (8009940 <my_conv_timestamp2rtc+0x140>)
 800985c:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800985e:	e00d      	b.n	800987c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	0018      	movs	r0, r3
 8009864:	f000 f870 	bl	8009948 <my_conv_is_leap_year>
 8009868:	0003      	movs	r3, r0
 800986a:	336e      	adds	r3, #110	; 0x6e
 800986c:	33ff      	adds	r3, #255	; 0xff
 800986e:	001a      	movs	r2, r3
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	3301      	adds	r3, #1
 800987a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	0018      	movs	r0, r3
 8009880:	f000 f862 	bl	8009948 <my_conv_is_leap_year>
 8009884:	0003      	movs	r3, r0
 8009886:	336e      	adds	r3, #110	; 0x6e
 8009888:	33ff      	adds	r3, #255	; 0xff
 800988a:	001a      	movs	r2, r3
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	4293      	cmp	r3, r2
 8009890:	d2e6      	bcs.n	8009860 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009896:	e018      	b.n	80098ca <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009898:	4b2a      	ldr	r3, [pc, #168]	; (8009944 <my_conv_timestamp2rtc+0x144>)
 800989a:	69fa      	ldr	r2, [r7, #28]
 800989c:	0052      	lsls	r2, r2, #1
 800989e:	5ad3      	ldrh	r3, [r2, r3]
 80098a0:	001c      	movs	r4, r3
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d107      	bne.n	80098b8 <my_conv_timestamp2rtc+0xb8>
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	0018      	movs	r0, r3
 80098ac:	f000 f84c 	bl	8009948 <my_conv_is_leap_year>
 80098b0:	1e03      	subs	r3, r0, #0
 80098b2:	d001      	beq.n	80098b8 <my_conv_timestamp2rtc+0xb8>
 80098b4:	2301      	movs	r3, #1
 80098b6:	e000      	b.n	80098ba <my_conv_timestamp2rtc+0xba>
 80098b8:	2300      	movs	r3, #0
 80098ba:	191b      	adds	r3, r3, r4
 80098bc:	001a      	movs	r2, r3
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <my_conv_timestamp2rtc+0x144>)
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	0052      	lsls	r2, r2, #1
 80098d0:	5ad3      	ldrh	r3, [r2, r3]
 80098d2:	001c      	movs	r4, r3
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d107      	bne.n	80098ea <my_conv_timestamp2rtc+0xea>
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	0018      	movs	r0, r3
 80098de:	f000 f833 	bl	8009948 <my_conv_is_leap_year>
 80098e2:	1e03      	subs	r3, r0, #0
 80098e4:	d001      	beq.n	80098ea <my_conv_timestamp2rtc+0xea>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <my_conv_timestamp2rtc+0xec>
 80098ea:	2300      	movs	r3, #0
 80098ec:	191b      	adds	r3, r3, r4
 80098ee:	001a      	movs	r2, r3
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d2d0      	bcs.n	8009898 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	3330      	adds	r3, #48	; 0x30
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	3301      	adds	r3, #1
 8009908:	b2da      	uxtb	r2, r3
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	b2db      	uxtb	r3, r3
 8009912:	3301      	adds	r3, #1
 8009914:	b2da      	uxtb	r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	b2da      	uxtb	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	709a      	strb	r2, [r3, #2]
}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	46bd      	mov	sp, r7
 8009936:	b00b      	add	sp, #44	; 0x2c
 8009938:	bd90      	pop	{r4, r7, pc}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	00015180 	.word	0x00015180
 8009940:	000007b2 	.word	0x000007b2
 8009944:	08013d58 	.word	0x08013d58

08009948 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2203      	movs	r2, #3
 8009954:	4013      	ands	r3, r2
 8009956:	d106      	bne.n	8009966 <my_conv_is_leap_year+0x1e>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2164      	movs	r1, #100	; 0x64
 800995c:	0018      	movs	r0, r3
 800995e:	f7f6 fd5d 	bl	800041c <__aeabi_idivmod>
 8009962:	1e0b      	subs	r3, r1, #0
 8009964:	d107      	bne.n	8009976 <my_conv_is_leap_year+0x2e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	22c8      	movs	r2, #200	; 0xc8
 800996a:	0051      	lsls	r1, r2, #1
 800996c:	0018      	movs	r0, r3
 800996e:	f7f6 fd55 	bl	800041c <__aeabi_idivmod>
 8009972:	1e0b      	subs	r3, r1, #0
 8009974:	d101      	bne.n	800997a <my_conv_is_leap_year+0x32>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <my_conv_is_leap_year+0x34>
 800997a:	2300      	movs	r3, #0
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b002      	add	sp, #8
 8009982:	bd80      	pop	{r7, pc}

08009984 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009986:	b089      	sub	sp, #36	; 0x24
 8009988:	af04      	add	r7, sp, #16
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	78db      	ldrb	r3, [r3, #3]
 8009994:	22fa      	movs	r2, #250	; 0xfa
 8009996:	00d2      	lsls	r2, r2, #3
 8009998:	189a      	adds	r2, r3, r2
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	469c      	mov	ip, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	789b      	ldrb	r3, [r3, #2]
 80099a4:	001c      	movs	r4, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	001d      	movs	r5, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	001e      	movs	r6, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	789b      	ldrb	r3, [r3, #2]
 80099b6:	4906      	ldr	r1, [pc, #24]	; (80099d0 <my_conv_dt_2_dts+0x4c>)
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	9602      	str	r6, [sp, #8]
 80099be:	9501      	str	r5, [sp, #4]
 80099c0:	9400      	str	r4, [sp, #0]
 80099c2:	4663      	mov	r3, ip
 80099c4:	f001 fe32 	bl	800b62c <sprintf>
}
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b005      	add	sp, #20
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d0:	08013c40 	.word	0x08013c40

080099d4 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b24      	cmp	r3, #36	; 0x24
 80099e6:	d117      	bne.n	8009a18 <my_nmea_message+0x44>
    {
        *i = 0 ;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	b2d1      	uxtb	r1, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	7011      	strb	r1, [r2, #0]
 80099fa:	001a      	movs	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	189b      	adds	r3, r3, r2
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	001a      	movs	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	189b      	adds	r3, r3, r2
 8009a10:	2200      	movs	r2, #0
 8009a12:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009a14:	2300      	movs	r3, #0
 8009a16:	e045      	b.n	8009aa4 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b1f      	cmp	r3, #31
 8009a1e:	d907      	bls.n	8009a30 <my_nmea_message+0x5c>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b7e      	cmp	r3, #126	; 0x7e
 8009a26:	d803      	bhi.n	8009a30 <my_nmea_message+0x5c>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d103      	bne.n	8009a38 <my_nmea_message+0x64>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b0d      	cmp	r3, #13
 8009a36:	d114      	bne.n	8009a62 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	b2d1      	uxtb	r1, r2
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	7011      	strb	r1, [r2, #0]
 8009a44:	001a      	movs	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	189b      	adds	r3, r3, r2
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	7812      	ldrb	r2, [r2, #0]
 8009a4e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	001a      	movs	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	189b      	adds	r3, r3, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e020      	b.n	8009aa4 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b0a      	cmp	r3, #10
 8009a68:	d11a      	bne.n	8009aa0 <my_nmea_message+0xcc>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d916      	bls.n	8009aa0 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	001a      	movs	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	189b      	adds	r3, r3, r2
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2b0d      	cmp	r3, #13
 8009a8c:	d108      	bne.n	8009aa0 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	001a      	movs	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	189b      	adds	r3, r3, r2
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	e001      	b.n	8009aa4 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	425b      	negs	r3, r3
}
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b004      	add	sp, #16
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3309      	adds	r3, #9
 8009ab8:	781b      	ldrb	r3, [r3, #0]
}
 8009aba:	0018      	movs	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009ac2:	b5b0      	push	{r4, r5, r7, lr}
 8009ac4:	b086      	sub	sp, #24
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	220f      	movs	r2, #15
 8009ace:	212c      	movs	r1, #44	; 0x2c
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f7ff fddd 	bl	8009690 <my_find_char_position>
 8009ad6:	0003      	movs	r3, r0
 8009ad8:	001a      	movs	r2, r3
 8009ada:	2517      	movs	r5, #23
 8009adc:	197b      	adds	r3, r7, r5
 8009ade:	3201      	adds	r2, #1
 8009ae0:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	212c      	movs	r1, #44	; 0x2c
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f7ff fdd1 	bl	8009690 <my_find_char_position>
 8009aee:	0003      	movs	r3, r0
 8009af0:	0019      	movs	r1, r3
 8009af2:	2416      	movs	r4, #22
 8009af4:	193b      	adds	r3, r7, r4
 8009af6:	197a      	adds	r2, r7, r5
 8009af8:	7812      	ldrb	r2, [r2, #0]
 8009afa:	1a8a      	subs	r2, r1, r2
 8009afc:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009afe:	193b      	adds	r3, r7, r4
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 fb93 	bl	800a230 <malloc>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009b0e:	197b      	adds	r3, r7, r5
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	18d1      	adds	r1, r2, r3
 8009b16:	193b      	adds	r3, r7, r4
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f001 fe34 	bl	800b78a <strncpy>
	pdop_s[pdop_length] = '\0';
 8009b22:	193b      	adds	r3, r7, r4
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	18d3      	adds	r3, r2, r3
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7ff fd99 	bl	8009668 <my_string2double_conv>
 8009b36:	0002      	movs	r2, r0
 8009b38:	000b      	movs	r3, r1
 8009b3a:	60ba      	str	r2, [r7, #8]
 8009b3c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	0018      	movs	r0, r3
 8009b42:	f000 fb7f 	bl	800a244 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	68fb      	ldr	r3, [r7, #12]
}
 8009b4a:	0010      	movs	r0, r2
 8009b4c:	0019      	movs	r1, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b006      	add	sp, #24
 8009b52:	bdb0      	pop	{r4, r5, r7, pc}

08009b54 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009b5c:	230f      	movs	r3, #15
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009b64:	230e      	movs	r3, #14
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	2201      	movs	r2, #1
 8009b6a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009b6c:	e00f      	b.n	8009b8e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009b6e:	220e      	movs	r2, #14
 8009b70:	18bb      	adds	r3, r7, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	18ba      	adds	r2, r7, r2
 8009b76:	1c59      	adds	r1, r3, #1
 8009b78:	7011      	strb	r1, [r2, #0]
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	7819      	ldrb	r1, [r3, #0]
 8009b82:	220f      	movs	r2, #15
 8009b84:	18bb      	adds	r3, r7, r2
 8009b86:	18ba      	adds	r2, r7, r2
 8009b88:	7812      	ldrb	r2, [r2, #0]
 8009b8a:	404a      	eors	r2, r1
 8009b8c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009b8e:	210e      	movs	r1, #14
 8009b90:	187b      	adds	r3, r7, r1
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	18d3      	adds	r3, r2, r3
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9c:	d00a      	beq.n	8009bb4 <is_my_nmea_checksum_ok+0x60>
 8009b9e:	187b      	adds	r3, r7, r1
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	18d3      	adds	r3, r2, r3
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <is_my_nmea_checksum_ok+0x60>
 8009bac:	187b      	adds	r3, r7, r1
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1dc      	bne.n	8009b6e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009bb4:	230f      	movs	r3, #15
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	781c      	ldrb	r4, [r3, #0]
 8009bba:	210e      	movs	r1, #14
 8009bbc:	187b      	adds	r3, r7, r1
 8009bbe:	187a      	adds	r2, r7, r1
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	701a      	strb	r2, [r3, #0]
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	18d3      	adds	r3, r2, r3
 8009bce:	2210      	movs	r2, #16
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f001 fc26 	bl	800b424 <strtol>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	1ae3      	subs	r3, r4, r3
 8009bdc:	425a      	negs	r2, r3
 8009bde:	4153      	adcs	r3, r2
 8009be0:	b2db      	uxtb	r3, r3
}
 8009be2:	0018      	movs	r0, r3
 8009be4:	46bd      	mov	sp, r7
 8009be6:	b005      	add	sp, #20
 8009be8:	bd90      	pop	{r4, r7, pc}
	...

08009bec <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009bec:	b5b0      	push	{r4, r5, r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	000a      	movs	r2, r1
 8009bf6:	1cfb      	adds	r3, r7, #3
 8009bf8:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009bfa:	2308      	movs	r3, #8
 8009bfc:	18fa      	adds	r2, r7, r3
 8009bfe:	492f      	ldr	r1, [pc, #188]	; (8009cbc <nmea2decimal+0xd0>)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	0018      	movs	r0, r3
 8009c04:	f001 fd32 	bl	800b66c <sscanf>
    min = deg / 100 ;
 8009c08:	68b8      	ldr	r0, [r7, #8]
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <nmea2decimal+0xd4>)
 8009c10:	f7f7 f932 	bl	8000e78 <__aeabi_ddiv>
 8009c14:	0002      	movs	r2, r0
 8009c16:	000b      	movs	r3, r1
 8009c18:	613a      	str	r2, [r7, #16]
 8009c1a:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009c1c:	6938      	ldr	r0, [r7, #16]
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	f7f8 fb86 	bl	8002330 <__aeabi_d2iz>
 8009c24:	0003      	movs	r3, r0
 8009c26:	0018      	movs	r0, r3
 8009c28:	f7f8 fbb8 	bl	800239c <__aeabi_i2d>
 8009c2c:	0002      	movs	r2, r0
 8009c2e:	000b      	movs	r3, r1
 8009c30:	60ba      	str	r2, [r7, #8]
 8009c32:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6938      	ldr	r0, [r7, #16]
 8009c3a:	6979      	ldr	r1, [r7, #20]
 8009c3c:	f7f7 ffd8 	bl	8001bf0 <__aeabi_dsub>
 8009c40:	0002      	movs	r2, r0
 8009c42:	000b      	movs	r3, r1
 8009c44:	0010      	movs	r0, r2
 8009c46:	0019      	movs	r1, r3
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <nmea2decimal+0xd8>)
 8009c4c:	f7f7 fd0e 	bl	800166c <__aeabi_dmul>
 8009c50:	0002      	movs	r2, r0
 8009c52:	000b      	movs	r3, r1
 8009c54:	613a      	str	r2, [r7, #16]
 8009c56:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <nmea2decimal+0xdc>)
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	6979      	ldr	r1, [r7, #20]
 8009c60:	f7f7 f90a 	bl	8000e78 <__aeabi_ddiv>
 8009c64:	0002      	movs	r2, r0
 8009c66:	000b      	movs	r3, r1
 8009c68:	613a      	str	r2, [r7, #16]
 8009c6a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009c6c:	1cfb      	adds	r3, r7, #3
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b53      	cmp	r3, #83	; 0x53
 8009c72:	d003      	beq.n	8009c7c <nmea2decimal+0x90>
 8009c74:	1cfb      	adds	r3, r7, #3
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b57      	cmp	r3, #87	; 0x57
 8009c7a:	d10e      	bne.n	8009c9a <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009c7c:	68b8      	ldr	r0, [r7, #8]
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f7f6 fd98 	bl	80007b8 <__aeabi_dadd>
 8009c88:	0002      	movs	r2, r0
 8009c8a:	000b      	movs	r3, r1
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	000c      	movs	r4, r1
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	0609      	lsls	r1, r1, #24
 8009c94:	4059      	eors	r1, r3
 8009c96:	000d      	movs	r5, r1
 8009c98:	e009      	b.n	8009cae <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009c9a:	68b8      	ldr	r0, [r7, #8]
 8009c9c:	68f9      	ldr	r1, [r7, #12]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f7f6 fd89 	bl	80007b8 <__aeabi_dadd>
 8009ca6:	0002      	movs	r2, r0
 8009ca8:	000b      	movs	r3, r1
 8009caa:	0014      	movs	r4, r2
 8009cac:	001d      	movs	r5, r3
}
 8009cae:	0022      	movs	r2, r4
 8009cb0:	002b      	movs	r3, r5
 8009cb2:	0010      	movs	r0, r2
 8009cb4:	0019      	movs	r1, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b006      	add	sp, #24
 8009cba:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbc:	08013c60 	.word	0x08013c60
 8009cc0:	40590000 	.word	0x40590000
 8009cc4:	40240000 	.word	0x40240000
 8009cc8:	40180000 	.word	0x40180000

08009ccc <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	b08d      	sub	sp, #52	; 0x34
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	212c      	movs	r1, #44	; 0x2c
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7ff fcd7 	bl	8009690 <my_find_char_position>
 8009ce2:	0003      	movs	r3, r0
 8009ce4:	001a      	movs	r2, r3
 8009ce6:	252f      	movs	r5, #47	; 0x2f
 8009ce8:	197b      	adds	r3, r7, r5
 8009cea:	3201      	adds	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	212c      	movs	r1, #44	; 0x2c
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f7ff fccb 	bl	8009690 <my_find_char_position>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	0019      	movs	r1, r3
 8009cfe:	242e      	movs	r4, #46	; 0x2e
 8009d00:	193b      	adds	r3, r7, r4
 8009d02:	197a      	adds	r2, r7, r5
 8009d04:	7812      	ldrb	r2, [r2, #0]
 8009d06:	1a8a      	subs	r2, r1, r2
 8009d08:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009d0a:	193b      	adds	r3, r7, r4
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 fa8d 	bl	800a230 <malloc>
 8009d16:	0003      	movs	r3, r0
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009d1a:	197b      	adds	r3, r7, r5
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	18d1      	adds	r1, r2, r3
 8009d22:	193b      	adds	r3, r7, r4
 8009d24:	781a      	ldrb	r2, [r3, #0]
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f001 fd2e 	bl	800b78a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8009d2e:	193b      	adds	r3, r7, r4
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009d3a:	197b      	adds	r3, r7, r5
 8009d3c:	781a      	ldrb	r2, [r3, #0]
 8009d3e:	193b      	adds	r3, r7, r4
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	18d3      	adds	r3, r2, r3
 8009d44:	3301      	adds	r3, #1
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	18d2      	adds	r2, r2, r3
 8009d4a:	2627      	movs	r6, #39	; 0x27
 8009d4c:	19bb      	adds	r3, r7, r6
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8009d52:	19bb      	adds	r3, r7, r6
 8009d54:	781a      	ldrb	r2, [r3, #0]
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	0011      	movs	r1, r2
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7ff ff46 	bl	8009bec <nmea2decimal>
 8009d60:	0002      	movs	r2, r0
 8009d62:	000b      	movs	r3, r1
 8009d64:	61ba      	str	r2, [r7, #24]
 8009d66:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f000 fa6a 	bl	800a244 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8009d70:	2200      	movs	r2, #0
 8009d72:	4b49      	ldr	r3, [pc, #292]	; (8009e98 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009d74:	69b8      	ldr	r0, [r7, #24]
 8009d76:	69f9      	ldr	r1, [r7, #28]
 8009d78:	f7f7 fc78 	bl	800166c <__aeabi_dmul>
 8009d7c:	0002      	movs	r2, r0
 8009d7e:	000b      	movs	r3, r1
 8009d80:	0010      	movs	r0, r2
 8009d82:	0019      	movs	r1, r3
 8009d84:	f008 fa1e 	bl	80121c4 <round>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4b43      	ldr	r3, [pc, #268]	; (8009e98 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009d8c:	f7f7 f874 	bl	8000e78 <__aeabi_ddiv>
 8009d90:	0002      	movs	r2, r0
 8009d92:	000b      	movs	r3, r1
 8009d94:	61ba      	str	r2, [r7, #24]
 8009d96:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <my_nmea_get_gngll_coordinates+0x1d0>)
 8009d9c:	69b8      	ldr	r0, [r7, #24]
 8009d9e:	69f9      	ldr	r1, [r7, #28]
 8009da0:	f7f7 fc64 	bl	800166c <__aeabi_dmul>
 8009da4:	0002      	movs	r2, r0
 8009da6:	000b      	movs	r3, r1
 8009da8:	0010      	movs	r0, r2
 8009daa:	0019      	movs	r1, r3
 8009dac:	f7f8 fac0 	bl	8002330 <__aeabi_d2iz>
 8009db0:	0002      	movs	r2, r0
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2203      	movs	r2, #3
 8009dba:	212c      	movs	r1, #44	; 0x2c
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7ff fc67 	bl	8009690 <my_find_char_position>
 8009dc2:	0003      	movs	r3, r0
 8009dc4:	001a      	movs	r2, r3
 8009dc6:	197b      	adds	r3, r7, r5
 8009dc8:	3201      	adds	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	212c      	movs	r1, #44	; 0x2c
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f7ff fc5c 	bl	8009690 <my_find_char_position>
 8009dd8:	0003      	movs	r3, r0
 8009dda:	0019      	movs	r1, r3
 8009ddc:	193b      	adds	r3, r7, r4
 8009dde:	197a      	adds	r2, r7, r5
 8009de0:	7812      	ldrb	r2, [r2, #0]
 8009de2:	1a8a      	subs	r2, r1, r2
 8009de4:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009de6:	193b      	adds	r3, r7, r4
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	0018      	movs	r0, r3
 8009dee:	f000 fa1f 	bl	800a230 <malloc>
 8009df2:	0003      	movs	r3, r0
 8009df4:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009df6:	197b      	adds	r3, r7, r5
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	18d1      	adds	r1, r2, r3
 8009dfe:	193b      	adds	r3, r7, r4
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f001 fcc0 	bl	800b78a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 8009e0a:	193b      	adds	r3, r7, r4
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009e16:	197b      	adds	r3, r7, r5
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	193b      	adds	r3, r7, r4
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	18d3      	adds	r3, r2, r3
 8009e20:	3301      	adds	r3, #1
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	18d2      	adds	r2, r2, r3
 8009e26:	19bb      	adds	r3, r7, r6
 8009e28:	7812      	ldrb	r2, [r2, #0]
 8009e2a:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8009e2c:	19bb      	adds	r3, r7, r6
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	0011      	movs	r1, r2
 8009e34:	0018      	movs	r0, r3
 8009e36:	f7ff fed9 	bl	8009bec <nmea2decimal>
 8009e3a:	0002      	movs	r2, r0
 8009e3c:	000b      	movs	r3, r1
 8009e3e:	60ba      	str	r2, [r7, #8]
 8009e40:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	0018      	movs	r0, r3
 8009e46:	f000 f9fd 	bl	800a244 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009e4e:	68b8      	ldr	r0, [r7, #8]
 8009e50:	68f9      	ldr	r1, [r7, #12]
 8009e52:	f7f7 fc0b 	bl	800166c <__aeabi_dmul>
 8009e56:	0002      	movs	r2, r0
 8009e58:	000b      	movs	r3, r1
 8009e5a:	0010      	movs	r0, r2
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	f008 f9b1 	bl	80121c4 <round>
 8009e62:	2200      	movs	r2, #0
 8009e64:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <my_nmea_get_gngll_coordinates+0x1cc>)
 8009e66:	f7f7 f807 	bl	8000e78 <__aeabi_ddiv>
 8009e6a:	0002      	movs	r2, r0
 8009e6c:	000b      	movs	r3, r1
 8009e6e:	60ba      	str	r2, [r7, #8]
 8009e70:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 8009e72:	2200      	movs	r2, #0
 8009e74:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <my_nmea_get_gngll_coordinates+0x1d0>)
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	68f9      	ldr	r1, [r7, #12]
 8009e7a:	f7f7 fbf7 	bl	800166c <__aeabi_dmul>
 8009e7e:	0002      	movs	r2, r0
 8009e80:	000b      	movs	r3, r1
 8009e82:	0010      	movs	r0, r2
 8009e84:	0019      	movs	r1, r3
 8009e86:	f7f8 fa53 	bl	8002330 <__aeabi_d2iz>
 8009e8a:	0002      	movs	r2, r0
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]
}
 8009e90:	46c0      	nop			; (mov r8, r8)
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b00d      	add	sp, #52	; 0x34
 8009e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e98:	412e8480 	.word	0x412e8480
 8009e9c:	416312d0 	.word	0x416312d0

08009ea0 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 8009ea0:	b5b0      	push	{r4, r5, r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 8009ea8:	240e      	movs	r4, #14
 8009eaa:	193b      	adds	r3, r7, r4
 8009eac:	2200      	movs	r2, #0
 8009eae:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	212c      	movs	r1, #44	; 0x2c
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f7ff fbea 	bl	8009690 <my_find_char_position>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	001a      	movs	r2, r3
 8009ec0:	2517      	movs	r5, #23
 8009ec2:	197b      	adds	r3, r7, r5
 8009ec4:	3201      	adds	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009ec8:	2003      	movs	r0, #3
 8009eca:	f000 f9b1 	bl	800a230 <malloc>
 8009ece:	0003      	movs	r3, r0
 8009ed0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009ed2:	197b      	adds	r3, r7, r5
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	18d1      	adds	r1, r2, r3
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2202      	movs	r2, #2
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f001 fc53 	bl	800b78a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	3302      	adds	r3, #2
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 8009eec:	193a      	adds	r2, r7, r4
 8009eee:	4907      	ldr	r1, [pc, #28]	; (8009f0c <my_nmea_get_gsv_tns+0x6c>)
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f001 fbba 	bl	800b66c <sscanf>
	free ( s ) ;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	0018      	movs	r0, r3
 8009efc:	f000 f9a2 	bl	800a244 <free>
	return tns ;
 8009f00:	193b      	adds	r3, r7, r4
 8009f02:	881b      	ldrh	r3, [r3, #0]
}
 8009f04:	0018      	movs	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b006      	add	sp, #24
 8009f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f0c:	08013c6c 	.word	0x08013c6c

08009f10 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8009f10:	b590      	push	{r4, r7, lr}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2209      	movs	r2, #9
 8009f1e:	212c      	movs	r1, #44	; 0x2c
 8009f20:	0018      	movs	r0, r3
 8009f22:	f7ff fbb5 	bl	8009690 <my_find_char_position>
 8009f26:	0003      	movs	r3, r0
 8009f28:	001a      	movs	r2, r3
 8009f2a:	2417      	movs	r4, #23
 8009f2c:	193b      	adds	r3, r7, r4
 8009f2e:	3205      	adds	r2, #5
 8009f30:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009f32:	2003      	movs	r0, #3
 8009f34:	f000 f97c 	bl	800a230 <malloc>
 8009f38:	0003      	movs	r3, r0
 8009f3a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009f3c:	193b      	adds	r3, r7, r4
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	18d1      	adds	r1, r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2202      	movs	r2, #2
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f001 fc1e 	bl	800b78a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3302      	adds	r3, #2
 8009f52:	2200      	movs	r2, #0
 8009f54:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009f56:	240e      	movs	r4, #14
 8009f58:	193a      	adds	r2, r7, r4
 8009f5a:	4909      	ldr	r1, [pc, #36]	; (8009f80 <my_nmea_get_rmc_date_yy+0x70>)
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f001 fb84 	bl	800b66c <sscanf>
	free ( s ) ;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	0018      	movs	r0, r3
 8009f68:	f000 f96c 	bl	800a244 <free>
	*yy = (uint8_t) temp ;
 8009f6c:	193b      	adds	r3, r7, r4
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	701a      	strb	r2, [r3, #0]

}
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	b007      	add	sp, #28
 8009f7c:	bd90      	pop	{r4, r7, pc}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	08013c6c 	.word	0x08013c6c

08009f84 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 8009f84:	b590      	push	{r4, r7, lr}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2209      	movs	r2, #9
 8009f92:	212c      	movs	r1, #44	; 0x2c
 8009f94:	0018      	movs	r0, r3
 8009f96:	f7ff fb7b 	bl	8009690 <my_find_char_position>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	001a      	movs	r2, r3
 8009f9e:	2417      	movs	r4, #23
 8009fa0:	193b      	adds	r3, r7, r4
 8009fa2:	3203      	adds	r2, #3
 8009fa4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009fa6:	2003      	movs	r0, #3
 8009fa8:	f000 f942 	bl	800a230 <malloc>
 8009fac:	0003      	movs	r3, r0
 8009fae:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009fb0:	193b      	adds	r3, r7, r4
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	18d1      	adds	r1, r2, r3
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	f001 fbe4 	bl	800b78a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009fca:	240e      	movs	r4, #14
 8009fcc:	193a      	adds	r2, r7, r4
 8009fce:	4909      	ldr	r1, [pc, #36]	; (8009ff4 <my_nmea_get_rmc_date_mm+0x70>)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f001 fb4a 	bl	800b66c <sscanf>
	free ( s ) ;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f000 f932 	bl	800a244 <free>
	*mm = (uint8_t) temp ;
 8009fe0:	193b      	adds	r3, r7, r4
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	701a      	strb	r2, [r3, #0]

}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	46bd      	mov	sp, r7
 8009fee:	b007      	add	sp, #28
 8009ff0:	bd90      	pop	{r4, r7, pc}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	08013c6c 	.word	0x08013c6c

08009ff8 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2209      	movs	r2, #9
 800a006:	212c      	movs	r1, #44	; 0x2c
 800a008:	0018      	movs	r0, r3
 800a00a:	f7ff fb41 	bl	8009690 <my_find_char_position>
 800a00e:	0003      	movs	r3, r0
 800a010:	001a      	movs	r2, r3
 800a012:	2417      	movs	r4, #23
 800a014:	193b      	adds	r3, r7, r4
 800a016:	3201      	adds	r2, #1
 800a018:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a01a:	2003      	movs	r0, #3
 800a01c:	f000 f908 	bl	800a230 <malloc>
 800a020:	0003      	movs	r3, r0
 800a022:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a024:	193b      	adds	r3, r7, r4
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	18d1      	adds	r1, r2, r3
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2202      	movs	r2, #2
 800a030:	0018      	movs	r0, r3
 800a032:	f001 fbaa 	bl	800b78a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3302      	adds	r3, #2
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a03e:	240e      	movs	r4, #14
 800a040:	193a      	adds	r2, r7, r4
 800a042:	4909      	ldr	r1, [pc, #36]	; (800a068 <my_nmea_get_rmc_date_dd+0x70>)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	0018      	movs	r0, r3
 800a048:	f001 fb10 	bl	800b66c <sscanf>
	free ( s ) ;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	0018      	movs	r0, r3
 800a050:	f000 f8f8 	bl	800a244 <free>
	*dd = (uint8_t) temp ;
 800a054:	193b      	adds	r3, r7, r4
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	701a      	strb	r2, [r3, #0]

}
 800a05e:	46c0      	nop			; (mov r8, r8)
 800a060:	46bd      	mov	sp, r7
 800a062:	b007      	add	sp, #28
 800a064:	bd90      	pop	{r4, r7, pc}
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	08013c6c 	.word	0x08013c6c

0800a06c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	212c      	movs	r1, #44	; 0x2c
 800a07c:	0018      	movs	r0, r3
 800a07e:	f7ff fb07 	bl	8009690 <my_find_char_position>
 800a082:	0003      	movs	r3, r0
 800a084:	001a      	movs	r2, r3
 800a086:	2417      	movs	r4, #23
 800a088:	193b      	adds	r3, r7, r4
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a08e:	2003      	movs	r0, #3
 800a090:	f000 f8ce 	bl	800a230 <malloc>
 800a094:	0003      	movs	r3, r0
 800a096:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a098:	193b      	adds	r3, r7, r4
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	18d1      	adds	r1, r2, r3
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f001 fb70 	bl	800b78a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3302      	adds	r3, #2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a0b2:	240e      	movs	r4, #14
 800a0b4:	193a      	adds	r2, r7, r4
 800a0b6:	4909      	ldr	r1, [pc, #36]	; (800a0dc <my_nmea_get_rmc_utc_hh+0x70>)
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f001 fad6 	bl	800b66c <sscanf>
	free ( s ) ;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f000 f8be 	bl	800a244 <free>
	*hh = (uint8_t) temp ;
 800a0c8:	193b      	adds	r3, r7, r4
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	701a      	strb	r2, [r3, #0]

}
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	b007      	add	sp, #28
 800a0d8:	bd90      	pop	{r4, r7, pc}
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	08013c6c 	.word	0x08013c6c

0800a0e0 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	212c      	movs	r1, #44	; 0x2c
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f7ff facd 	bl	8009690 <my_find_char_position>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	001a      	movs	r2, r3
 800a0fa:	2417      	movs	r4, #23
 800a0fc:	193b      	adds	r3, r7, r4
 800a0fe:	3203      	adds	r2, #3
 800a100:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a102:	2003      	movs	r0, #3
 800a104:	f000 f894 	bl	800a230 <malloc>
 800a108:	0003      	movs	r3, r0
 800a10a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a10c:	193b      	adds	r3, r7, r4
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	18d1      	adds	r1, r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	2202      	movs	r2, #2
 800a118:	0018      	movs	r0, r3
 800a11a:	f001 fb36 	bl	800b78a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3302      	adds	r3, #2
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a126:	240e      	movs	r4, #14
 800a128:	193a      	adds	r2, r7, r4
 800a12a:	4909      	ldr	r1, [pc, #36]	; (800a150 <my_nmea_get_rmc_utc_mm+0x70>)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	0018      	movs	r0, r3
 800a130:	f001 fa9c 	bl	800b66c <sscanf>
	free ( s ) ;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	0018      	movs	r0, r3
 800a138:	f000 f884 	bl	800a244 <free>
	*mm = (uint8_t) temp ;
 800a13c:	193b      	adds	r3, r7, r4
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	701a      	strb	r2, [r3, #0]

}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	46bd      	mov	sp, r7
 800a14a:	b007      	add	sp, #28
 800a14c:	bd90      	pop	{r4, r7, pc}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	08013c6c 	.word	0x08013c6c

0800a154 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a154:	b590      	push	{r4, r7, lr}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	212c      	movs	r1, #44	; 0x2c
 800a164:	0018      	movs	r0, r3
 800a166:	f7ff fa93 	bl	8009690 <my_find_char_position>
 800a16a:	0003      	movs	r3, r0
 800a16c:	001a      	movs	r2, r3
 800a16e:	2417      	movs	r4, #23
 800a170:	193b      	adds	r3, r7, r4
 800a172:	3205      	adds	r2, #5
 800a174:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a176:	2003      	movs	r0, #3
 800a178:	f000 f85a 	bl	800a230 <malloc>
 800a17c:	0003      	movs	r3, r0
 800a17e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a180:	193b      	adds	r3, r7, r4
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	18d1      	adds	r1, r2, r3
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2202      	movs	r2, #2
 800a18c:	0018      	movs	r0, r3
 800a18e:	f001 fafc 	bl	800b78a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3302      	adds	r3, #2
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a19a:	240e      	movs	r4, #14
 800a19c:	193a      	adds	r2, r7, r4
 800a19e:	4909      	ldr	r1, [pc, #36]	; (800a1c4 <my_nmea_get_rmc_utc_ss+0x70>)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f001 fa62 	bl	800b66c <sscanf>
	free ( s ) ;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	0018      	movs	r0, r3
 800a1ac:	f000 f84a 	bl	800a244 <free>
	*ss = (uint8_t) temp ;
 800a1b0:	193b      	adds	r3, r7, r4
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	701a      	strb	r2, [r3, #0]

}
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	b007      	add	sp, #28
 800a1c0:	bd90      	pop	{r4, r7, pc}
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	08013c6c 	.word	0x08013c6c

0800a1c8 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	212c      	movs	r1, #44	; 0x2c
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f7ff fa59 	bl	8009690 <my_find_char_position>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	001a      	movs	r2, r3
 800a1e2:	240f      	movs	r4, #15
 800a1e4:	193b      	adds	r3, r7, r4
 800a1e6:	3208      	adds	r2, #8
 800a1e8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a1ea:	2004      	movs	r0, #4
 800a1ec:	f000 f820 	bl	800a230 <malloc>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1f4:	193b      	adds	r3, r7, r4
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	18d1      	adds	r1, r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2203      	movs	r2, #3
 800a200:	0018      	movs	r0, r3
 800a202:	f001 fac2 	bl	800b78a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	3303      	adds	r3, #3
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4906      	ldr	r1, [pc, #24]	; (800a22c <my_nmea_get_rmc_utc_sss+0x64>)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	0018      	movs	r0, r3
 800a216:	f001 fa29 	bl	800b66c <sscanf>
	free ( s ) ;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	0018      	movs	r0, r3
 800a21e:	f000 f811 	bl	800a244 <free>
}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	46bd      	mov	sp, r7
 800a226:	b005      	add	sp, #20
 800a228:	bd90      	pop	{r4, r7, pc}
 800a22a:	46c0      	nop			; (mov r8, r8)
 800a22c:	08013c70 	.word	0x08013c70

0800a230 <malloc>:
 800a230:	b510      	push	{r4, lr}
 800a232:	4b03      	ldr	r3, [pc, #12]	; (800a240 <malloc+0x10>)
 800a234:	0001      	movs	r1, r0
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	f000 f80e 	bl	800a258 <_malloc_r>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	200006c8 	.word	0x200006c8

0800a244 <free>:
 800a244:	b510      	push	{r4, lr}
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <free+0x10>)
 800a248:	0001      	movs	r1, r0
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	f001 fbe4 	bl	800ba18 <_free_r>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	200006c8 	.word	0x200006c8

0800a258 <_malloc_r>:
 800a258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a25a:	000d      	movs	r5, r1
 800a25c:	b087      	sub	sp, #28
 800a25e:	350b      	adds	r5, #11
 800a260:	9001      	str	r0, [sp, #4]
 800a262:	2d16      	cmp	r5, #22
 800a264:	d908      	bls.n	800a278 <_malloc_r+0x20>
 800a266:	2207      	movs	r2, #7
 800a268:	4395      	bics	r5, r2
 800a26a:	d506      	bpl.n	800a27a <_malloc_r+0x22>
 800a26c:	230c      	movs	r3, #12
 800a26e:	9a01      	ldr	r2, [sp, #4]
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	2000      	movs	r0, #0
 800a274:	b007      	add	sp, #28
 800a276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a278:	2510      	movs	r5, #16
 800a27a:	42a9      	cmp	r1, r5
 800a27c:	d8f6      	bhi.n	800a26c <_malloc_r+0x14>
 800a27e:	9801      	ldr	r0, [sp, #4]
 800a280:	f000 f9fe 	bl	800a680 <__malloc_lock>
 800a284:	23fc      	movs	r3, #252	; 0xfc
 800a286:	4ebe      	ldr	r6, [pc, #760]	; (800a580 <_malloc_r+0x328>)
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	429d      	cmp	r5, r3
 800a28c:	d219      	bcs.n	800a2c2 <_malloc_r+0x6a>
 800a28e:	002a      	movs	r2, r5
 800a290:	3208      	adds	r2, #8
 800a292:	18b2      	adds	r2, r6, r2
 800a294:	0011      	movs	r1, r2
 800a296:	6854      	ldr	r4, [r2, #4]
 800a298:	3908      	subs	r1, #8
 800a29a:	08eb      	lsrs	r3, r5, #3
 800a29c:	428c      	cmp	r4, r1
 800a29e:	d103      	bne.n	800a2a8 <_malloc_r+0x50>
 800a2a0:	68d4      	ldr	r4, [r2, #12]
 800a2a2:	3302      	adds	r3, #2
 800a2a4:	42a2      	cmp	r2, r4
 800a2a6:	d022      	beq.n	800a2ee <_malloc_r+0x96>
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	6863      	ldr	r3, [r4, #4]
 800a2ac:	68a1      	ldr	r1, [r4, #8]
 800a2ae:	4393      	bics	r3, r2
 800a2b0:	68e2      	ldr	r2, [r4, #12]
 800a2b2:	18e3      	adds	r3, r4, r3
 800a2b4:	60ca      	str	r2, [r1, #12]
 800a2b6:	6091      	str	r1, [r2, #8]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	6859      	ldr	r1, [r3, #4]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	605a      	str	r2, [r3, #4]
 800a2c0:	e02a      	b.n	800a318 <_malloc_r+0xc0>
 800a2c2:	233f      	movs	r3, #63	; 0x3f
 800a2c4:	0a6a      	lsrs	r2, r5, #9
 800a2c6:	d003      	beq.n	800a2d0 <_malloc_r+0x78>
 800a2c8:	2a04      	cmp	r2, #4
 800a2ca:	d82b      	bhi.n	800a324 <_malloc_r+0xcc>
 800a2cc:	09ab      	lsrs	r3, r5, #6
 800a2ce:	3338      	adds	r3, #56	; 0x38
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	4694      	mov	ip, r2
 800a2d4:	00d9      	lsls	r1, r3, #3
 800a2d6:	1989      	adds	r1, r1, r6
 800a2d8:	68cc      	ldr	r4, [r1, #12]
 800a2da:	428c      	cmp	r4, r1
 800a2dc:	d006      	beq.n	800a2ec <_malloc_r+0x94>
 800a2de:	4660      	mov	r0, ip
 800a2e0:	6862      	ldr	r2, [r4, #4]
 800a2e2:	4382      	bics	r2, r0
 800a2e4:	1b57      	subs	r7, r2, r5
 800a2e6:	2f0f      	cmp	r7, #15
 800a2e8:	dd34      	ble.n	800a354 <_malloc_r+0xfc>
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	6934      	ldr	r4, [r6, #16]
 800a2f0:	49a4      	ldr	r1, [pc, #656]	; (800a584 <_malloc_r+0x32c>)
 800a2f2:	428c      	cmp	r4, r1
 800a2f4:	d055      	beq.n	800a3a2 <_malloc_r+0x14a>
 800a2f6:	2003      	movs	r0, #3
 800a2f8:	6862      	ldr	r2, [r4, #4]
 800a2fa:	4382      	bics	r2, r0
 800a2fc:	1b50      	subs	r0, r2, r5
 800a2fe:	280f      	cmp	r0, #15
 800a300:	dd36      	ble.n	800a370 <_malloc_r+0x118>
 800a302:	2301      	movs	r3, #1
 800a304:	1967      	adds	r7, r4, r5
 800a306:	431d      	orrs	r5, r3
 800a308:	4303      	orrs	r3, r0
 800a30a:	6065      	str	r5, [r4, #4]
 800a30c:	6177      	str	r7, [r6, #20]
 800a30e:	6137      	str	r7, [r6, #16]
 800a310:	60f9      	str	r1, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607b      	str	r3, [r7, #4]
 800a316:	50a0      	str	r0, [r4, r2]
 800a318:	9801      	ldr	r0, [sp, #4]
 800a31a:	f000 f9b9 	bl	800a690 <__malloc_unlock>
 800a31e:	0020      	movs	r0, r4
 800a320:	3008      	adds	r0, #8
 800a322:	e7a7      	b.n	800a274 <_malloc_r+0x1c>
 800a324:	2a14      	cmp	r2, #20
 800a326:	d802      	bhi.n	800a32e <_malloc_r+0xd6>
 800a328:	0013      	movs	r3, r2
 800a32a:	335b      	adds	r3, #91	; 0x5b
 800a32c:	e7d0      	b.n	800a2d0 <_malloc_r+0x78>
 800a32e:	2a54      	cmp	r2, #84	; 0x54
 800a330:	d802      	bhi.n	800a338 <_malloc_r+0xe0>
 800a332:	0b2b      	lsrs	r3, r5, #12
 800a334:	336e      	adds	r3, #110	; 0x6e
 800a336:	e7cb      	b.n	800a2d0 <_malloc_r+0x78>
 800a338:	23aa      	movs	r3, #170	; 0xaa
 800a33a:	005b      	lsls	r3, r3, #1
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d802      	bhi.n	800a346 <_malloc_r+0xee>
 800a340:	0beb      	lsrs	r3, r5, #15
 800a342:	3377      	adds	r3, #119	; 0x77
 800a344:	e7c4      	b.n	800a2d0 <_malloc_r+0x78>
 800a346:	4990      	ldr	r1, [pc, #576]	; (800a588 <_malloc_r+0x330>)
 800a348:	237e      	movs	r3, #126	; 0x7e
 800a34a:	428a      	cmp	r2, r1
 800a34c:	d8c0      	bhi.n	800a2d0 <_malloc_r+0x78>
 800a34e:	0cab      	lsrs	r3, r5, #18
 800a350:	337c      	adds	r3, #124	; 0x7c
 800a352:	e7bd      	b.n	800a2d0 <_malloc_r+0x78>
 800a354:	68e0      	ldr	r0, [r4, #12]
 800a356:	2f00      	cmp	r7, #0
 800a358:	db08      	blt.n	800a36c <_malloc_r+0x114>
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	60d8      	str	r0, [r3, #12]
 800a35e:	6083      	str	r3, [r0, #8]
 800a360:	2301      	movs	r3, #1
 800a362:	18a2      	adds	r2, r4, r2
 800a364:	6851      	ldr	r1, [r2, #4]
 800a366:	430b      	orrs	r3, r1
 800a368:	6053      	str	r3, [r2, #4]
 800a36a:	e7d5      	b.n	800a318 <_malloc_r+0xc0>
 800a36c:	0004      	movs	r4, r0
 800a36e:	e7b4      	b.n	800a2da <_malloc_r+0x82>
 800a370:	6171      	str	r1, [r6, #20]
 800a372:	6131      	str	r1, [r6, #16]
 800a374:	2800      	cmp	r0, #0
 800a376:	daf3      	bge.n	800a360 <_malloc_r+0x108>
 800a378:	6871      	ldr	r1, [r6, #4]
 800a37a:	468c      	mov	ip, r1
 800a37c:	2180      	movs	r1, #128	; 0x80
 800a37e:	0089      	lsls	r1, r1, #2
 800a380:	428a      	cmp	r2, r1
 800a382:	d300      	bcc.n	800a386 <_malloc_r+0x12e>
 800a384:	e08c      	b.n	800a4a0 <_malloc_r+0x248>
 800a386:	08d1      	lsrs	r1, r2, #3
 800a388:	0950      	lsrs	r0, r2, #5
 800a38a:	2201      	movs	r2, #1
 800a38c:	4082      	lsls	r2, r0
 800a38e:	4660      	mov	r0, ip
 800a390:	4302      	orrs	r2, r0
 800a392:	6072      	str	r2, [r6, #4]
 800a394:	00ca      	lsls	r2, r1, #3
 800a396:	1992      	adds	r2, r2, r6
 800a398:	6891      	ldr	r1, [r2, #8]
 800a39a:	60e2      	str	r2, [r4, #12]
 800a39c:	60a1      	str	r1, [r4, #8]
 800a39e:	6094      	str	r4, [r2, #8]
 800a3a0:	60cc      	str	r4, [r1, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4876      	ldr	r0, [pc, #472]	; (800a580 <_malloc_r+0x328>)
 800a3a6:	1099      	asrs	r1, r3, #2
 800a3a8:	408a      	lsls	r2, r1
 800a3aa:	6841      	ldr	r1, [r0, #4]
 800a3ac:	4291      	cmp	r1, r2
 800a3ae:	d328      	bcc.n	800a402 <_malloc_r+0x1aa>
 800a3b0:	420a      	tst	r2, r1
 800a3b2:	d105      	bne.n	800a3c0 <_malloc_r+0x168>
 800a3b4:	2403      	movs	r4, #3
 800a3b6:	43a3      	bics	r3, r4
 800a3b8:	0052      	lsls	r2, r2, #1
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	420a      	tst	r2, r1
 800a3be:	d0fb      	beq.n	800a3b8 <_malloc_r+0x160>
 800a3c0:	496f      	ldr	r1, [pc, #444]	; (800a580 <_malloc_r+0x328>)
 800a3c2:	9104      	str	r1, [sp, #16]
 800a3c4:	00d9      	lsls	r1, r3, #3
 800a3c6:	1841      	adds	r1, r0, r1
 800a3c8:	468c      	mov	ip, r1
 800a3ca:	000f      	movs	r7, r1
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	68fc      	ldr	r4, [r7, #12]
 800a3d0:	42bc      	cmp	r4, r7
 800a3d2:	d000      	beq.n	800a3d6 <_malloc_r+0x17e>
 800a3d4:	e09b      	b.n	800a50e <_malloc_r+0x2b6>
 800a3d6:	2403      	movs	r4, #3
 800a3d8:	9902      	ldr	r1, [sp, #8]
 800a3da:	3708      	adds	r7, #8
 800a3dc:	3101      	adds	r1, #1
 800a3de:	9102      	str	r1, [sp, #8]
 800a3e0:	4221      	tst	r1, r4
 800a3e2:	d1f4      	bne.n	800a3ce <_malloc_r+0x176>
 800a3e4:	2103      	movs	r1, #3
 800a3e6:	420b      	tst	r3, r1
 800a3e8:	d000      	beq.n	800a3ec <_malloc_r+0x194>
 800a3ea:	e0b7      	b.n	800a55c <_malloc_r+0x304>
 800a3ec:	6843      	ldr	r3, [r0, #4]
 800a3ee:	4393      	bics	r3, r2
 800a3f0:	6043      	str	r3, [r0, #4]
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	0052      	lsls	r2, r2, #1
 800a3f6:	6859      	ldr	r1, [r3, #4]
 800a3f8:	4291      	cmp	r1, r2
 800a3fa:	d302      	bcc.n	800a402 <_malloc_r+0x1aa>
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	d000      	beq.n	800a402 <_malloc_r+0x1aa>
 800a400:	e0bb      	b.n	800a57a <_malloc_r+0x322>
 800a402:	2203      	movs	r2, #3
 800a404:	6883      	ldr	r3, [r0, #8]
 800a406:	9302      	str	r3, [sp, #8]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	4393      	bics	r3, r2
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	42ab      	cmp	r3, r5
 800a410:	d303      	bcc.n	800a41a <_malloc_r+0x1c2>
 800a412:	1b59      	subs	r1, r3, r5
 800a414:	290f      	cmp	r1, #15
 800a416:	dd00      	ble.n	800a41a <_malloc_r+0x1c2>
 800a418:	e123      	b.n	800a662 <_malloc_r+0x40a>
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	9a03      	ldr	r2, [sp, #12]
 800a41e:	2008      	movs	r0, #8
 800a420:	189e      	adds	r6, r3, r2
 800a422:	4b5a      	ldr	r3, [pc, #360]	; (800a58c <_malloc_r+0x334>)
 800a424:	681f      	ldr	r7, [r3, #0]
 800a426:	f001 fa71 	bl	800b90c <sysconf>
 800a42a:	4b59      	ldr	r3, [pc, #356]	; (800a590 <_malloc_r+0x338>)
 800a42c:	3710      	adds	r7, #16
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	197f      	adds	r7, r7, r5
 800a432:	9004      	str	r0, [sp, #16]
 800a434:	3301      	adds	r3, #1
 800a436:	d003      	beq.n	800a440 <_malloc_r+0x1e8>
 800a438:	1e7b      	subs	r3, r7, #1
 800a43a:	181b      	adds	r3, r3, r0
 800a43c:	4247      	negs	r7, r0
 800a43e:	401f      	ands	r7, r3
 800a440:	0039      	movs	r1, r7
 800a442:	9801      	ldr	r0, [sp, #4]
 800a444:	f001 fa0e 	bl	800b864 <_sbrk_r>
 800a448:	0004      	movs	r4, r0
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	d100      	bne.n	800a450 <_malloc_r+0x1f8>
 800a44e:	e0de      	b.n	800a60e <_malloc_r+0x3b6>
 800a450:	4286      	cmp	r6, r0
 800a452:	d904      	bls.n	800a45e <_malloc_r+0x206>
 800a454:	4b4a      	ldr	r3, [pc, #296]	; (800a580 <_malloc_r+0x328>)
 800a456:	9a02      	ldr	r2, [sp, #8]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d000      	beq.n	800a45e <_malloc_r+0x206>
 800a45c:	e0d7      	b.n	800a60e <_malloc_r+0x3b6>
 800a45e:	4a4d      	ldr	r2, [pc, #308]	; (800a594 <_malloc_r+0x33c>)
 800a460:	6813      	ldr	r3, [r2, #0]
 800a462:	18fb      	adds	r3, r7, r3
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	3a01      	subs	r2, #1
 800a46a:	42a6      	cmp	r6, r4
 800a46c:	d000      	beq.n	800a470 <_malloc_r+0x218>
 800a46e:	e097      	b.n	800a5a0 <_malloc_r+0x348>
 800a470:	4216      	tst	r6, r2
 800a472:	d000      	beq.n	800a476 <_malloc_r+0x21e>
 800a474:	e094      	b.n	800a5a0 <_malloc_r+0x348>
 800a476:	4b42      	ldr	r3, [pc, #264]	; (800a580 <_malloc_r+0x328>)
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	19df      	adds	r7, r3, r7
 800a47e:	2301      	movs	r3, #1
 800a480:	433b      	orrs	r3, r7
 800a482:	6053      	str	r3, [r2, #4]
 800a484:	4b43      	ldr	r3, [pc, #268]	; (800a594 <_malloc_r+0x33c>)
 800a486:	4a44      	ldr	r2, [pc, #272]	; (800a598 <_malloc_r+0x340>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6811      	ldr	r1, [r2, #0]
 800a48c:	428b      	cmp	r3, r1
 800a48e:	d900      	bls.n	800a492 <_malloc_r+0x23a>
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4a42      	ldr	r2, [pc, #264]	; (800a59c <_malloc_r+0x344>)
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	428b      	cmp	r3, r1
 800a498:	d800      	bhi.n	800a49c <_malloc_r+0x244>
 800a49a:	e0b8      	b.n	800a60e <_malloc_r+0x3b6>
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	e0b6      	b.n	800a60e <_malloc_r+0x3b6>
 800a4a0:	0a50      	lsrs	r0, r2, #9
 800a4a2:	2804      	cmp	r0, #4
 800a4a4:	d811      	bhi.n	800a4ca <_malloc_r+0x272>
 800a4a6:	0991      	lsrs	r1, r2, #6
 800a4a8:	3138      	adds	r1, #56	; 0x38
 800a4aa:	00cf      	lsls	r7, r1, #3
 800a4ac:	19bf      	adds	r7, r7, r6
 800a4ae:	68b8      	ldr	r0, [r7, #8]
 800a4b0:	4287      	cmp	r7, r0
 800a4b2:	d125      	bne.n	800a500 <_malloc_r+0x2a8>
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	1089      	asrs	r1, r1, #2
 800a4b8:	408a      	lsls	r2, r1
 800a4ba:	4661      	mov	r1, ip
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	6072      	str	r2, [r6, #4]
 800a4c0:	60e7      	str	r7, [r4, #12]
 800a4c2:	60a0      	str	r0, [r4, #8]
 800a4c4:	60bc      	str	r4, [r7, #8]
 800a4c6:	60c4      	str	r4, [r0, #12]
 800a4c8:	e76b      	b.n	800a3a2 <_malloc_r+0x14a>
 800a4ca:	2814      	cmp	r0, #20
 800a4cc:	d802      	bhi.n	800a4d4 <_malloc_r+0x27c>
 800a4ce:	0001      	movs	r1, r0
 800a4d0:	315b      	adds	r1, #91	; 0x5b
 800a4d2:	e7ea      	b.n	800a4aa <_malloc_r+0x252>
 800a4d4:	2854      	cmp	r0, #84	; 0x54
 800a4d6:	d802      	bhi.n	800a4de <_malloc_r+0x286>
 800a4d8:	0b11      	lsrs	r1, r2, #12
 800a4da:	316e      	adds	r1, #110	; 0x6e
 800a4dc:	e7e5      	b.n	800a4aa <_malloc_r+0x252>
 800a4de:	21aa      	movs	r1, #170	; 0xaa
 800a4e0:	0049      	lsls	r1, r1, #1
 800a4e2:	4288      	cmp	r0, r1
 800a4e4:	d802      	bhi.n	800a4ec <_malloc_r+0x294>
 800a4e6:	0bd1      	lsrs	r1, r2, #15
 800a4e8:	3177      	adds	r1, #119	; 0x77
 800a4ea:	e7de      	b.n	800a4aa <_malloc_r+0x252>
 800a4ec:	4f26      	ldr	r7, [pc, #152]	; (800a588 <_malloc_r+0x330>)
 800a4ee:	217e      	movs	r1, #126	; 0x7e
 800a4f0:	42b8      	cmp	r0, r7
 800a4f2:	d8da      	bhi.n	800a4aa <_malloc_r+0x252>
 800a4f4:	0c91      	lsrs	r1, r2, #18
 800a4f6:	317c      	adds	r1, #124	; 0x7c
 800a4f8:	e7d7      	b.n	800a4aa <_malloc_r+0x252>
 800a4fa:	6880      	ldr	r0, [r0, #8]
 800a4fc:	4287      	cmp	r7, r0
 800a4fe:	d004      	beq.n	800a50a <_malloc_r+0x2b2>
 800a500:	2603      	movs	r6, #3
 800a502:	6841      	ldr	r1, [r0, #4]
 800a504:	43b1      	bics	r1, r6
 800a506:	4291      	cmp	r1, r2
 800a508:	d8f7      	bhi.n	800a4fa <_malloc_r+0x2a2>
 800a50a:	68c7      	ldr	r7, [r0, #12]
 800a50c:	e7d8      	b.n	800a4c0 <_malloc_r+0x268>
 800a50e:	2603      	movs	r6, #3
 800a510:	6861      	ldr	r1, [r4, #4]
 800a512:	43b1      	bics	r1, r6
 800a514:	9103      	str	r1, [sp, #12]
 800a516:	68e6      	ldr	r6, [r4, #12]
 800a518:	1b49      	subs	r1, r1, r5
 800a51a:	290f      	cmp	r1, #15
 800a51c:	dd10      	ble.n	800a540 <_malloc_r+0x2e8>
 800a51e:	2201      	movs	r2, #1
 800a520:	1963      	adds	r3, r4, r5
 800a522:	4315      	orrs	r5, r2
 800a524:	6065      	str	r5, [r4, #4]
 800a526:	68a5      	ldr	r5, [r4, #8]
 800a528:	430a      	orrs	r2, r1
 800a52a:	60ee      	str	r6, [r5, #12]
 800a52c:	60b5      	str	r5, [r6, #8]
 800a52e:	6143      	str	r3, [r0, #20]
 800a530:	6103      	str	r3, [r0, #16]
 800a532:	4814      	ldr	r0, [pc, #80]	; (800a584 <_malloc_r+0x32c>)
 800a534:	605a      	str	r2, [r3, #4]
 800a536:	60d8      	str	r0, [r3, #12]
 800a538:	6098      	str	r0, [r3, #8]
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	50e1      	str	r1, [r4, r3]
 800a53e:	e6eb      	b.n	800a318 <_malloc_r+0xc0>
 800a540:	2900      	cmp	r1, #0
 800a542:	db09      	blt.n	800a558 <_malloc_r+0x300>
 800a544:	9b03      	ldr	r3, [sp, #12]
 800a546:	18e1      	adds	r1, r4, r3
 800a548:	2301      	movs	r3, #1
 800a54a:	684a      	ldr	r2, [r1, #4]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	604b      	str	r3, [r1, #4]
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	60de      	str	r6, [r3, #12]
 800a554:	60b3      	str	r3, [r6, #8]
 800a556:	e6df      	b.n	800a318 <_malloc_r+0xc0>
 800a558:	0034      	movs	r4, r6
 800a55a:	e739      	b.n	800a3d0 <_malloc_r+0x178>
 800a55c:	2108      	movs	r1, #8
 800a55e:	4249      	negs	r1, r1
 800a560:	448c      	add	ip, r1
 800a562:	4661      	mov	r1, ip
 800a564:	6889      	ldr	r1, [r1, #8]
 800a566:	3b01      	subs	r3, #1
 800a568:	4561      	cmp	r1, ip
 800a56a:	d100      	bne.n	800a56e <_malloc_r+0x316>
 800a56c:	e73a      	b.n	800a3e4 <_malloc_r+0x18c>
 800a56e:	e740      	b.n	800a3f2 <_malloc_r+0x19a>
 800a570:	3304      	adds	r3, #4
 800a572:	0052      	lsls	r2, r2, #1
 800a574:	420a      	tst	r2, r1
 800a576:	d0fb      	beq.n	800a570 <_malloc_r+0x318>
 800a578:	e724      	b.n	800a3c4 <_malloc_r+0x16c>
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	e7fa      	b.n	800a574 <_malloc_r+0x31c>
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	20000020 	.word	0x20000020
 800a584:	20000028 	.word	0x20000028
 800a588:	00000554 	.word	0x00000554
 800a58c:	20000c2c 	.word	0x20000c2c
 800a590:	20000428 	.word	0x20000428
 800a594:	20000bfc 	.word	0x20000bfc
 800a598:	20000c24 	.word	0x20000c24
 800a59c:	20000c28 	.word	0x20000c28
 800a5a0:	4934      	ldr	r1, [pc, #208]	; (800a674 <_malloc_r+0x41c>)
 800a5a2:	6808      	ldr	r0, [r1, #0]
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d140      	bne.n	800a62a <_malloc_r+0x3d2>
 800a5a8:	600c      	str	r4, [r1, #0]
 800a5aa:	2107      	movs	r1, #7
 800a5ac:	0026      	movs	r6, r4
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	400e      	ands	r6, r1
 800a5b2:	420c      	tst	r4, r1
 800a5b4:	d002      	beq.n	800a5bc <_malloc_r+0x364>
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	1b9b      	subs	r3, r3, r6
 800a5ba:	18e4      	adds	r4, r4, r3
 800a5bc:	19e1      	adds	r1, r4, r7
 800a5be:	9105      	str	r1, [sp, #20]
 800a5c0:	9f05      	ldr	r7, [sp, #20]
 800a5c2:	9904      	ldr	r1, [sp, #16]
 800a5c4:	4017      	ands	r7, r2
 800a5c6:	18cb      	adds	r3, r1, r3
 800a5c8:	1bdf      	subs	r7, r3, r7
 800a5ca:	4017      	ands	r7, r2
 800a5cc:	0039      	movs	r1, r7
 800a5ce:	9801      	ldr	r0, [sp, #4]
 800a5d0:	f001 f948 	bl	800b864 <_sbrk_r>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d107      	bne.n	800a5e8 <_malloc_r+0x390>
 800a5d8:	1e37      	subs	r7, r6, #0
 800a5da:	9805      	ldr	r0, [sp, #20]
 800a5dc:	d004      	beq.n	800a5e8 <_malloc_r+0x390>
 800a5de:	0030      	movs	r0, r6
 800a5e0:	2700      	movs	r7, #0
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	3808      	subs	r0, #8
 800a5e6:	1818      	adds	r0, r3, r0
 800a5e8:	4a23      	ldr	r2, [pc, #140]	; (800a678 <_malloc_r+0x420>)
 800a5ea:	1b00      	subs	r0, r0, r4
 800a5ec:	6813      	ldr	r3, [r2, #0]
 800a5ee:	19c0      	adds	r0, r0, r7
 800a5f0:	19db      	adds	r3, r3, r7
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	4b21      	ldr	r3, [pc, #132]	; (800a67c <_malloc_r+0x424>)
 800a5f8:	9902      	ldr	r1, [sp, #8]
 800a5fa:	4310      	orrs	r0, r2
 800a5fc:	609c      	str	r4, [r3, #8]
 800a5fe:	6060      	str	r0, [r4, #4]
 800a600:	4299      	cmp	r1, r3
 800a602:	d100      	bne.n	800a606 <_malloc_r+0x3ae>
 800a604:	e73e      	b.n	800a484 <_malloc_r+0x22c>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	2b0f      	cmp	r3, #15
 800a60a:	d813      	bhi.n	800a634 <_malloc_r+0x3dc>
 800a60c:	6062      	str	r2, [r4, #4]
 800a60e:	2203      	movs	r2, #3
 800a610:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <_malloc_r+0x424>)
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	4393      	bics	r3, r2
 800a618:	1b59      	subs	r1, r3, r5
 800a61a:	42ab      	cmp	r3, r5
 800a61c:	d301      	bcc.n	800a622 <_malloc_r+0x3ca>
 800a61e:	290f      	cmp	r1, #15
 800a620:	dc1f      	bgt.n	800a662 <_malloc_r+0x40a>
 800a622:	9801      	ldr	r0, [sp, #4]
 800a624:	f000 f834 	bl	800a690 <__malloc_unlock>
 800a628:	e623      	b.n	800a272 <_malloc_r+0x1a>
 800a62a:	4913      	ldr	r1, [pc, #76]	; (800a678 <_malloc_r+0x420>)
 800a62c:	1ba6      	subs	r6, r4, r6
 800a62e:	18f6      	adds	r6, r6, r3
 800a630:	600e      	str	r6, [r1, #0]
 800a632:	e7ba      	b.n	800a5aa <_malloc_r+0x352>
 800a634:	2107      	movs	r1, #7
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	3b0c      	subs	r3, #12
 800a63a:	438b      	bics	r3, r1
 800a63c:	9902      	ldr	r1, [sp, #8]
 800a63e:	6849      	ldr	r1, [r1, #4]
 800a640:	400a      	ands	r2, r1
 800a642:	9902      	ldr	r1, [sp, #8]
 800a644:	431a      	orrs	r2, r3
 800a646:	604a      	str	r2, [r1, #4]
 800a648:	18ca      	adds	r2, r1, r3
 800a64a:	2105      	movs	r1, #5
 800a64c:	6051      	str	r1, [r2, #4]
 800a64e:	6091      	str	r1, [r2, #8]
 800a650:	2b0f      	cmp	r3, #15
 800a652:	d800      	bhi.n	800a656 <_malloc_r+0x3fe>
 800a654:	e716      	b.n	800a484 <_malloc_r+0x22c>
 800a656:	9902      	ldr	r1, [sp, #8]
 800a658:	9801      	ldr	r0, [sp, #4]
 800a65a:	3108      	adds	r1, #8
 800a65c:	f001 f9dc 	bl	800ba18 <_free_r>
 800a660:	e710      	b.n	800a484 <_malloc_r+0x22c>
 800a662:	2201      	movs	r2, #1
 800a664:	0013      	movs	r3, r2
 800a666:	4805      	ldr	r0, [pc, #20]	; (800a67c <_malloc_r+0x424>)
 800a668:	432b      	orrs	r3, r5
 800a66a:	6884      	ldr	r4, [r0, #8]
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	1963      	adds	r3, r4, r5
 800a670:	6083      	str	r3, [r0, #8]
 800a672:	e623      	b.n	800a2bc <_malloc_r+0x64>
 800a674:	20000428 	.word	0x20000428
 800a678:	20000bfc 	.word	0x20000bfc
 800a67c:	20000020 	.word	0x20000020

0800a680 <__malloc_lock>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4802      	ldr	r0, [pc, #8]	; (800a68c <__malloc_lock+0xc>)
 800a684:	f001 f940 	bl	800b908 <__retarget_lock_acquire_recursive>
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	20000d71 	.word	0x20000d71

0800a690 <__malloc_unlock>:
 800a690:	b510      	push	{r4, lr}
 800a692:	4802      	ldr	r0, [pc, #8]	; (800a69c <__malloc_unlock+0xc>)
 800a694:	f001 f939 	bl	800b90a <__retarget_lock_release_recursive>
 800a698:	bd10      	pop	{r4, pc}
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	20000d71 	.word	0x20000d71

0800a6a0 <sulp>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	0016      	movs	r6, r2
 800a6a4:	000d      	movs	r5, r1
 800a6a6:	f002 f90d 	bl	800c8c4 <__ulp>
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d00d      	beq.n	800a6ca <sulp+0x2a>
 800a6ae:	236b      	movs	r3, #107	; 0x6b
 800a6b0:	006a      	lsls	r2, r5, #1
 800a6b2:	0d52      	lsrs	r2, r2, #21
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd07      	ble.n	800a6ca <sulp+0x2a>
 800a6ba:	2400      	movs	r4, #0
 800a6bc:	4a03      	ldr	r2, [pc, #12]	; (800a6cc <sulp+0x2c>)
 800a6be:	051b      	lsls	r3, r3, #20
 800a6c0:	189d      	adds	r5, r3, r2
 800a6c2:	002b      	movs	r3, r5
 800a6c4:	0022      	movs	r2, r4
 800a6c6:	f7f6 ffd1 	bl	800166c <__aeabi_dmul>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	3ff00000 	.word	0x3ff00000

0800a6d0 <_strtod_l>:
 800a6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d2:	b0a1      	sub	sp, #132	; 0x84
 800a6d4:	9219      	str	r2, [sp, #100]	; 0x64
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2600      	movs	r6, #0
 800a6da:	2700      	movs	r7, #0
 800a6dc:	9004      	str	r0, [sp, #16]
 800a6de:	9107      	str	r1, [sp, #28]
 800a6e0:	921c      	str	r2, [sp, #112]	; 0x70
 800a6e2:	911b      	str	r1, [sp, #108]	; 0x6c
 800a6e4:	780a      	ldrb	r2, [r1, #0]
 800a6e6:	2a2b      	cmp	r2, #43	; 0x2b
 800a6e8:	d055      	beq.n	800a796 <_strtod_l+0xc6>
 800a6ea:	d841      	bhi.n	800a770 <_strtod_l+0xa0>
 800a6ec:	2a0d      	cmp	r2, #13
 800a6ee:	d83b      	bhi.n	800a768 <_strtod_l+0x98>
 800a6f0:	2a08      	cmp	r2, #8
 800a6f2:	d83b      	bhi.n	800a76c <_strtod_l+0x9c>
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	d044      	beq.n	800a782 <_strtod_l+0xb2>
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	920f      	str	r2, [sp, #60]	; 0x3c
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a700:	9109      	str	r1, [sp, #36]	; 0x24
 800a702:	782a      	ldrb	r2, [r5, #0]
 800a704:	2a30      	cmp	r2, #48	; 0x30
 800a706:	d000      	beq.n	800a70a <_strtod_l+0x3a>
 800a708:	e085      	b.n	800a816 <_strtod_l+0x146>
 800a70a:	786a      	ldrb	r2, [r5, #1]
 800a70c:	3120      	adds	r1, #32
 800a70e:	438a      	bics	r2, r1
 800a710:	2a58      	cmp	r2, #88	; 0x58
 800a712:	d000      	beq.n	800a716 <_strtod_l+0x46>
 800a714:	e075      	b.n	800a802 <_strtod_l+0x132>
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a71a:	4a97      	ldr	r2, [pc, #604]	; (800a978 <_strtod_l+0x2a8>)
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	ab1c      	add	r3, sp, #112	; 0x70
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	9804      	ldr	r0, [sp, #16]
 800a724:	ab1d      	add	r3, sp, #116	; 0x74
 800a726:	a91b      	add	r1, sp, #108	; 0x6c
 800a728:	f001 fa92 	bl	800bc50 <__gethex>
 800a72c:	230f      	movs	r3, #15
 800a72e:	0002      	movs	r2, r0
 800a730:	401a      	ands	r2, r3
 800a732:	0004      	movs	r4, r0
 800a734:	9205      	str	r2, [sp, #20]
 800a736:	4218      	tst	r0, r3
 800a738:	d005      	beq.n	800a746 <_strtod_l+0x76>
 800a73a:	2a06      	cmp	r2, #6
 800a73c:	d12d      	bne.n	800a79a <_strtod_l+0xca>
 800a73e:	1c6b      	adds	r3, r5, #1
 800a740:	931b      	str	r3, [sp, #108]	; 0x6c
 800a742:	2300      	movs	r3, #0
 800a744:	930f      	str	r3, [sp, #60]	; 0x3c
 800a746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <_strtod_l+0x82>
 800a74c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a74e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01b      	beq.n	800a790 <_strtod_l+0xc0>
 800a758:	2380      	movs	r3, #128	; 0x80
 800a75a:	0032      	movs	r2, r6
 800a75c:	061b      	lsls	r3, r3, #24
 800a75e:	18fb      	adds	r3, r7, r3
 800a760:	0010      	movs	r0, r2
 800a762:	0019      	movs	r1, r3
 800a764:	b021      	add	sp, #132	; 0x84
 800a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a768:	2a20      	cmp	r2, #32
 800a76a:	d1c5      	bne.n	800a6f8 <_strtod_l+0x28>
 800a76c:	3101      	adds	r1, #1
 800a76e:	e7b8      	b.n	800a6e2 <_strtod_l+0x12>
 800a770:	2a2d      	cmp	r2, #45	; 0x2d
 800a772:	d1c1      	bne.n	800a6f8 <_strtod_l+0x28>
 800a774:	3a2c      	subs	r2, #44	; 0x2c
 800a776:	920f      	str	r2, [sp, #60]	; 0x3c
 800a778:	1c4a      	adds	r2, r1, #1
 800a77a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a77c:	784a      	ldrb	r2, [r1, #1]
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d1bc      	bne.n	800a6fc <_strtod_l+0x2c>
 800a782:	9b07      	ldr	r3, [sp, #28]
 800a784:	931b      	str	r3, [sp, #108]	; 0x6c
 800a786:	2300      	movs	r3, #0
 800a788:	930f      	str	r3, [sp, #60]	; 0x3c
 800a78a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1dd      	bne.n	800a74c <_strtod_l+0x7c>
 800a790:	0032      	movs	r2, r6
 800a792:	003b      	movs	r3, r7
 800a794:	e7e4      	b.n	800a760 <_strtod_l+0x90>
 800a796:	2200      	movs	r2, #0
 800a798:	e7ed      	b.n	800a776 <_strtod_l+0xa6>
 800a79a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	d007      	beq.n	800a7b0 <_strtod_l+0xe0>
 800a7a0:	2135      	movs	r1, #53	; 0x35
 800a7a2:	a81e      	add	r0, sp, #120	; 0x78
 800a7a4:	f002 f97f 	bl	800caa6 <__copybits>
 800a7a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a7aa:	9804      	ldr	r0, [sp, #16]
 800a7ac:	f001 fd7c 	bl	800c2a8 <_Bfree>
 800a7b0:	9805      	ldr	r0, [sp, #20]
 800a7b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7b4:	3801      	subs	r0, #1
 800a7b6:	2804      	cmp	r0, #4
 800a7b8:	d806      	bhi.n	800a7c8 <_strtod_l+0xf8>
 800a7ba:	f7f5 fcab 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a7be:	0312      	.short	0x0312
 800a7c0:	1e1c      	.short	0x1e1c
 800a7c2:	12          	.byte	0x12
 800a7c3:	00          	.byte	0x00
 800a7c4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a7c6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a7c8:	05e4      	lsls	r4, r4, #23
 800a7ca:	d502      	bpl.n	800a7d2 <_strtod_l+0x102>
 800a7cc:	2380      	movs	r3, #128	; 0x80
 800a7ce:	061b      	lsls	r3, r3, #24
 800a7d0:	431f      	orrs	r7, r3
 800a7d2:	4b6a      	ldr	r3, [pc, #424]	; (800a97c <_strtod_l+0x2ac>)
 800a7d4:	423b      	tst	r3, r7
 800a7d6:	d1b6      	bne.n	800a746 <_strtod_l+0x76>
 800a7d8:	f001 f86a 	bl	800b8b0 <__errno>
 800a7dc:	2322      	movs	r3, #34	; 0x22
 800a7de:	6003      	str	r3, [r0, #0]
 800a7e0:	e7b1      	b.n	800a746 <_strtod_l+0x76>
 800a7e2:	4967      	ldr	r1, [pc, #412]	; (800a980 <_strtod_l+0x2b0>)
 800a7e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7e6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	4966      	ldr	r1, [pc, #408]	; (800a984 <_strtod_l+0x2b4>)
 800a7ec:	185b      	adds	r3, r3, r1
 800a7ee:	051b      	lsls	r3, r3, #20
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	0017      	movs	r7, r2
 800a7f4:	e7e8      	b.n	800a7c8 <_strtod_l+0xf8>
 800a7f6:	4f61      	ldr	r7, [pc, #388]	; (800a97c <_strtod_l+0x2ac>)
 800a7f8:	e7e6      	b.n	800a7c8 <_strtod_l+0xf8>
 800a7fa:	2601      	movs	r6, #1
 800a7fc:	4f62      	ldr	r7, [pc, #392]	; (800a988 <_strtod_l+0x2b8>)
 800a7fe:	4276      	negs	r6, r6
 800a800:	e7e2      	b.n	800a7c8 <_strtod_l+0xf8>
 800a802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	921b      	str	r2, [sp, #108]	; 0x6c
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b30      	cmp	r3, #48	; 0x30
 800a80c:	d0f9      	beq.n	800a802 <_strtod_l+0x132>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d099      	beq.n	800a746 <_strtod_l+0x76>
 800a812:	2301      	movs	r3, #1
 800a814:	9309      	str	r3, [sp, #36]	; 0x24
 800a816:	2500      	movs	r5, #0
 800a818:	220a      	movs	r2, #10
 800a81a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a81c:	950d      	str	r5, [sp, #52]	; 0x34
 800a81e:	9310      	str	r3, [sp, #64]	; 0x40
 800a820:	9508      	str	r5, [sp, #32]
 800a822:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a824:	7804      	ldrb	r4, [r0, #0]
 800a826:	0023      	movs	r3, r4
 800a828:	3b30      	subs	r3, #48	; 0x30
 800a82a:	b2d9      	uxtb	r1, r3
 800a82c:	2909      	cmp	r1, #9
 800a82e:	d927      	bls.n	800a880 <_strtod_l+0x1b0>
 800a830:	2201      	movs	r2, #1
 800a832:	4956      	ldr	r1, [pc, #344]	; (800a98c <_strtod_l+0x2bc>)
 800a834:	f000 ff98 	bl	800b768 <strncmp>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d031      	beq.n	800a8a0 <_strtod_l+0x1d0>
 800a83c:	2000      	movs	r0, #0
 800a83e:	0023      	movs	r3, r4
 800a840:	4684      	mov	ip, r0
 800a842:	9a08      	ldr	r2, [sp, #32]
 800a844:	900c      	str	r0, [sp, #48]	; 0x30
 800a846:	9205      	str	r2, [sp, #20]
 800a848:	2220      	movs	r2, #32
 800a84a:	0019      	movs	r1, r3
 800a84c:	4391      	bics	r1, r2
 800a84e:	000a      	movs	r2, r1
 800a850:	2100      	movs	r1, #0
 800a852:	9106      	str	r1, [sp, #24]
 800a854:	2a45      	cmp	r2, #69	; 0x45
 800a856:	d000      	beq.n	800a85a <_strtod_l+0x18a>
 800a858:	e0c2      	b.n	800a9e0 <_strtod_l+0x310>
 800a85a:	9b05      	ldr	r3, [sp, #20]
 800a85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a85e:	4303      	orrs	r3, r0
 800a860:	4313      	orrs	r3, r2
 800a862:	428b      	cmp	r3, r1
 800a864:	d08d      	beq.n	800a782 <_strtod_l+0xb2>
 800a866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a868:	9307      	str	r3, [sp, #28]
 800a86a:	3301      	adds	r3, #1
 800a86c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a86e:	9b07      	ldr	r3, [sp, #28]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b2b      	cmp	r3, #43	; 0x2b
 800a874:	d071      	beq.n	800a95a <_strtod_l+0x28a>
 800a876:	000c      	movs	r4, r1
 800a878:	2b2d      	cmp	r3, #45	; 0x2d
 800a87a:	d174      	bne.n	800a966 <_strtod_l+0x296>
 800a87c:	2401      	movs	r4, #1
 800a87e:	e06d      	b.n	800a95c <_strtod_l+0x28c>
 800a880:	9908      	ldr	r1, [sp, #32]
 800a882:	2908      	cmp	r1, #8
 800a884:	dc09      	bgt.n	800a89a <_strtod_l+0x1ca>
 800a886:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a888:	4351      	muls	r1, r2
 800a88a:	185b      	adds	r3, r3, r1
 800a88c:	930d      	str	r3, [sp, #52]	; 0x34
 800a88e:	9b08      	ldr	r3, [sp, #32]
 800a890:	3001      	adds	r0, #1
 800a892:	3301      	adds	r3, #1
 800a894:	9308      	str	r3, [sp, #32]
 800a896:	901b      	str	r0, [sp, #108]	; 0x6c
 800a898:	e7c3      	b.n	800a822 <_strtod_l+0x152>
 800a89a:	4355      	muls	r5, r2
 800a89c:	195d      	adds	r5, r3, r5
 800a89e:	e7f6      	b.n	800a88e <_strtod_l+0x1be>
 800a8a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8a6:	9a08      	ldr	r2, [sp, #32]
 800a8a8:	785b      	ldrb	r3, [r3, #1]
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d03a      	beq.n	800a924 <_strtod_l+0x254>
 800a8ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a8b0:	9205      	str	r2, [sp, #20]
 800a8b2:	001a      	movs	r2, r3
 800a8b4:	3a30      	subs	r2, #48	; 0x30
 800a8b6:	2a09      	cmp	r2, #9
 800a8b8:	d912      	bls.n	800a8e0 <_strtod_l+0x210>
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	4694      	mov	ip, r2
 800a8be:	e7c3      	b.n	800a848 <_strtod_l+0x178>
 800a8c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b30      	cmp	r3, #48	; 0x30
 800a8cc:	d0f8      	beq.n	800a8c0 <_strtod_l+0x1f0>
 800a8ce:	001a      	movs	r2, r3
 800a8d0:	3a31      	subs	r2, #49	; 0x31
 800a8d2:	2a08      	cmp	r2, #8
 800a8d4:	d83c      	bhi.n	800a950 <_strtod_l+0x280>
 800a8d6:	900c      	str	r0, [sp, #48]	; 0x30
 800a8d8:	2000      	movs	r0, #0
 800a8da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a8dc:	9005      	str	r0, [sp, #20]
 800a8de:	9210      	str	r2, [sp, #64]	; 0x40
 800a8e0:	001a      	movs	r2, r3
 800a8e2:	1c41      	adds	r1, r0, #1
 800a8e4:	3a30      	subs	r2, #48	; 0x30
 800a8e6:	2b30      	cmp	r3, #48	; 0x30
 800a8e8:	d016      	beq.n	800a918 <_strtod_l+0x248>
 800a8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ec:	185b      	adds	r3, r3, r1
 800a8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	210a      	movs	r1, #10
 800a8f4:	469c      	mov	ip, r3
 800a8f6:	4484      	add	ip, r0
 800a8f8:	4563      	cmp	r3, ip
 800a8fa:	d115      	bne.n	800a928 <_strtod_l+0x258>
 800a8fc:	9905      	ldr	r1, [sp, #20]
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	3101      	adds	r1, #1
 800a902:	1809      	adds	r1, r1, r0
 800a904:	181b      	adds	r3, r3, r0
 800a906:	9105      	str	r1, [sp, #20]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	dc19      	bgt.n	800a940 <_strtod_l+0x270>
 800a90c:	230a      	movs	r3, #10
 800a90e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a910:	434b      	muls	r3, r1
 800a912:	2100      	movs	r1, #0
 800a914:	18d3      	adds	r3, r2, r3
 800a916:	930d      	str	r3, [sp, #52]	; 0x34
 800a918:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a91a:	0008      	movs	r0, r1
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	e7c6      	b.n	800a8b2 <_strtod_l+0x1e2>
 800a924:	9808      	ldr	r0, [sp, #32]
 800a926:	e7d0      	b.n	800a8ca <_strtod_l+0x1fa>
 800a928:	1c5c      	adds	r4, r3, #1
 800a92a:	2b08      	cmp	r3, #8
 800a92c:	dc04      	bgt.n	800a938 <_strtod_l+0x268>
 800a92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a930:	434b      	muls	r3, r1
 800a932:	930d      	str	r3, [sp, #52]	; 0x34
 800a934:	0023      	movs	r3, r4
 800a936:	e7df      	b.n	800a8f8 <_strtod_l+0x228>
 800a938:	2c10      	cmp	r4, #16
 800a93a:	dcfb      	bgt.n	800a934 <_strtod_l+0x264>
 800a93c:	434d      	muls	r5, r1
 800a93e:	e7f9      	b.n	800a934 <_strtod_l+0x264>
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	2100      	movs	r1, #0
 800a944:	2b10      	cmp	r3, #16
 800a946:	dce7      	bgt.n	800a918 <_strtod_l+0x248>
 800a948:	230a      	movs	r3, #10
 800a94a:	435d      	muls	r5, r3
 800a94c:	1955      	adds	r5, r2, r5
 800a94e:	e7e3      	b.n	800a918 <_strtod_l+0x248>
 800a950:	2200      	movs	r2, #0
 800a952:	920c      	str	r2, [sp, #48]	; 0x30
 800a954:	9205      	str	r2, [sp, #20]
 800a956:	3201      	adds	r2, #1
 800a958:	e7b0      	b.n	800a8bc <_strtod_l+0x1ec>
 800a95a:	2400      	movs	r4, #0
 800a95c:	9b07      	ldr	r3, [sp, #28]
 800a95e:	3302      	adds	r3, #2
 800a960:	931b      	str	r3, [sp, #108]	; 0x6c
 800a962:	9b07      	ldr	r3, [sp, #28]
 800a964:	789b      	ldrb	r3, [r3, #2]
 800a966:	001a      	movs	r2, r3
 800a968:	3a30      	subs	r2, #48	; 0x30
 800a96a:	2a09      	cmp	r2, #9
 800a96c:	d914      	bls.n	800a998 <_strtod_l+0x2c8>
 800a96e:	9a07      	ldr	r2, [sp, #28]
 800a970:	921b      	str	r2, [sp, #108]	; 0x6c
 800a972:	2200      	movs	r2, #0
 800a974:	e033      	b.n	800a9de <_strtod_l+0x30e>
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	08013d74 	.word	0x08013d74
 800a97c:	7ff00000 	.word	0x7ff00000
 800a980:	ffefffff 	.word	0xffefffff
 800a984:	00000433 	.word	0x00000433
 800a988:	7fffffff 	.word	0x7fffffff
 800a98c:	08013d70 	.word	0x08013d70
 800a990:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	921b      	str	r2, [sp, #108]	; 0x6c
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b30      	cmp	r3, #48	; 0x30
 800a99a:	d0f9      	beq.n	800a990 <_strtod_l+0x2c0>
 800a99c:	2200      	movs	r2, #0
 800a99e:	9206      	str	r2, [sp, #24]
 800a9a0:	001a      	movs	r2, r3
 800a9a2:	3a31      	subs	r2, #49	; 0x31
 800a9a4:	2a08      	cmp	r2, #8
 800a9a6:	d81b      	bhi.n	800a9e0 <_strtod_l+0x310>
 800a9a8:	3b30      	subs	r3, #48	; 0x30
 800a9aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a9ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9ae:	9306      	str	r3, [sp, #24]
 800a9b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9b2:	1c59      	adds	r1, r3, #1
 800a9b4:	911b      	str	r1, [sp, #108]	; 0x6c
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	001a      	movs	r2, r3
 800a9ba:	3a30      	subs	r2, #48	; 0x30
 800a9bc:	2a09      	cmp	r2, #9
 800a9be:	d93a      	bls.n	800aa36 <_strtod_l+0x366>
 800a9c0:	9a06      	ldr	r2, [sp, #24]
 800a9c2:	1a8a      	subs	r2, r1, r2
 800a9c4:	49b2      	ldr	r1, [pc, #712]	; (800ac90 <_strtod_l+0x5c0>)
 800a9c6:	9106      	str	r1, [sp, #24]
 800a9c8:	2a08      	cmp	r2, #8
 800a9ca:	dc04      	bgt.n	800a9d6 <_strtod_l+0x306>
 800a9cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ce:	9206      	str	r2, [sp, #24]
 800a9d0:	428a      	cmp	r2, r1
 800a9d2:	dd00      	ble.n	800a9d6 <_strtod_l+0x306>
 800a9d4:	9106      	str	r1, [sp, #24]
 800a9d6:	2c00      	cmp	r4, #0
 800a9d8:	d002      	beq.n	800a9e0 <_strtod_l+0x310>
 800a9da:	9a06      	ldr	r2, [sp, #24]
 800a9dc:	4252      	negs	r2, r2
 800a9de:	9206      	str	r2, [sp, #24]
 800a9e0:	9a05      	ldr	r2, [sp, #20]
 800a9e2:	2a00      	cmp	r2, #0
 800a9e4:	d14d      	bne.n	800aa82 <_strtod_l+0x3b2>
 800a9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e8:	4310      	orrs	r0, r2
 800a9ea:	d000      	beq.n	800a9ee <_strtod_l+0x31e>
 800a9ec:	e6ab      	b.n	800a746 <_strtod_l+0x76>
 800a9ee:	4662      	mov	r2, ip
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d000      	beq.n	800a9f6 <_strtod_l+0x326>
 800a9f4:	e6c5      	b.n	800a782 <_strtod_l+0xb2>
 800a9f6:	2b69      	cmp	r3, #105	; 0x69
 800a9f8:	d027      	beq.n	800aa4a <_strtod_l+0x37a>
 800a9fa:	dc23      	bgt.n	800aa44 <_strtod_l+0x374>
 800a9fc:	2b49      	cmp	r3, #73	; 0x49
 800a9fe:	d024      	beq.n	800aa4a <_strtod_l+0x37a>
 800aa00:	2b4e      	cmp	r3, #78	; 0x4e
 800aa02:	d000      	beq.n	800aa06 <_strtod_l+0x336>
 800aa04:	e6bd      	b.n	800a782 <_strtod_l+0xb2>
 800aa06:	49a3      	ldr	r1, [pc, #652]	; (800ac94 <_strtod_l+0x5c4>)
 800aa08:	a81b      	add	r0, sp, #108	; 0x6c
 800aa0a:	f001 fb57 	bl	800c0bc <__match>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d100      	bne.n	800aa14 <_strtod_l+0x344>
 800aa12:	e6b6      	b.n	800a782 <_strtod_l+0xb2>
 800aa14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b28      	cmp	r3, #40	; 0x28
 800aa1a:	d12c      	bne.n	800aa76 <_strtod_l+0x3a6>
 800aa1c:	499e      	ldr	r1, [pc, #632]	; (800ac98 <_strtod_l+0x5c8>)
 800aa1e:	aa1e      	add	r2, sp, #120	; 0x78
 800aa20:	a81b      	add	r0, sp, #108	; 0x6c
 800aa22:	f001 fb5f 	bl	800c0e4 <__hexnan>
 800aa26:	2805      	cmp	r0, #5
 800aa28:	d125      	bne.n	800aa76 <_strtod_l+0x3a6>
 800aa2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa2c:	4a9b      	ldr	r2, [pc, #620]	; (800ac9c <_strtod_l+0x5cc>)
 800aa2e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aa30:	431a      	orrs	r2, r3
 800aa32:	0017      	movs	r7, r2
 800aa34:	e687      	b.n	800a746 <_strtod_l+0x76>
 800aa36:	220a      	movs	r2, #10
 800aa38:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa3a:	434a      	muls	r2, r1
 800aa3c:	18d2      	adds	r2, r2, r3
 800aa3e:	3a30      	subs	r2, #48	; 0x30
 800aa40:	920e      	str	r2, [sp, #56]	; 0x38
 800aa42:	e7b5      	b.n	800a9b0 <_strtod_l+0x2e0>
 800aa44:	2b6e      	cmp	r3, #110	; 0x6e
 800aa46:	d0de      	beq.n	800aa06 <_strtod_l+0x336>
 800aa48:	e69b      	b.n	800a782 <_strtod_l+0xb2>
 800aa4a:	4995      	ldr	r1, [pc, #596]	; (800aca0 <_strtod_l+0x5d0>)
 800aa4c:	a81b      	add	r0, sp, #108	; 0x6c
 800aa4e:	f001 fb35 	bl	800c0bc <__match>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d100      	bne.n	800aa58 <_strtod_l+0x388>
 800aa56:	e694      	b.n	800a782 <_strtod_l+0xb2>
 800aa58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5a:	4992      	ldr	r1, [pc, #584]	; (800aca4 <_strtod_l+0x5d4>)
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	a81b      	add	r0, sp, #108	; 0x6c
 800aa60:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa62:	f001 fb2b 	bl	800c0bc <__match>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d102      	bne.n	800aa70 <_strtod_l+0x3a0>
 800aa6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa70:	2600      	movs	r6, #0
 800aa72:	4f8a      	ldr	r7, [pc, #552]	; (800ac9c <_strtod_l+0x5cc>)
 800aa74:	e667      	b.n	800a746 <_strtod_l+0x76>
 800aa76:	488c      	ldr	r0, [pc, #560]	; (800aca8 <_strtod_l+0x5d8>)
 800aa78:	f000 ff5c 	bl	800b934 <nan>
 800aa7c:	0006      	movs	r6, r0
 800aa7e:	000f      	movs	r7, r1
 800aa80:	e661      	b.n	800a746 <_strtod_l+0x76>
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa86:	1a9b      	subs	r3, r3, r2
 800aa88:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8a:	9b08      	ldr	r3, [sp, #32]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <_strtod_l+0x3c4>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	9c05      	ldr	r4, [sp, #20]
 800aa96:	2c10      	cmp	r4, #16
 800aa98:	dd00      	ble.n	800aa9c <_strtod_l+0x3cc>
 800aa9a:	2410      	movs	r4, #16
 800aa9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa9e:	f7f7 fcad 	bl	80023fc <__aeabi_ui2d>
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	0006      	movs	r6, r0
 800aaa6:	000f      	movs	r7, r1
 800aaa8:	2b09      	cmp	r3, #9
 800aaaa:	dd15      	ble.n	800aad8 <_strtod_l+0x408>
 800aaac:	0022      	movs	r2, r4
 800aaae:	4b7f      	ldr	r3, [pc, #508]	; (800acac <_strtod_l+0x5dc>)
 800aab0:	3a09      	subs	r2, #9
 800aab2:	00d2      	lsls	r2, r2, #3
 800aab4:	189b      	adds	r3, r3, r2
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f7f6 fdd7 	bl	800166c <__aeabi_dmul>
 800aabe:	0006      	movs	r6, r0
 800aac0:	0028      	movs	r0, r5
 800aac2:	000f      	movs	r7, r1
 800aac4:	f7f7 fc9a 	bl	80023fc <__aeabi_ui2d>
 800aac8:	0002      	movs	r2, r0
 800aaca:	000b      	movs	r3, r1
 800aacc:	0030      	movs	r0, r6
 800aace:	0039      	movs	r1, r7
 800aad0:	f7f5 fe72 	bl	80007b8 <__aeabi_dadd>
 800aad4:	0006      	movs	r6, r0
 800aad6:	000f      	movs	r7, r1
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	2b0f      	cmp	r3, #15
 800aadc:	dc39      	bgt.n	800ab52 <_strtod_l+0x482>
 800aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d100      	bne.n	800aae6 <_strtod_l+0x416>
 800aae4:	e62f      	b.n	800a746 <_strtod_l+0x76>
 800aae6:	dd24      	ble.n	800ab32 <_strtod_l+0x462>
 800aae8:	2b16      	cmp	r3, #22
 800aaea:	dc09      	bgt.n	800ab00 <_strtod_l+0x430>
 800aaec:	496f      	ldr	r1, [pc, #444]	; (800acac <_strtod_l+0x5dc>)
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	18c9      	adds	r1, r1, r3
 800aaf2:	0032      	movs	r2, r6
 800aaf4:	6808      	ldr	r0, [r1, #0]
 800aaf6:	6849      	ldr	r1, [r1, #4]
 800aaf8:	003b      	movs	r3, r7
 800aafa:	f7f6 fdb7 	bl	800166c <__aeabi_dmul>
 800aafe:	e7bd      	b.n	800aa7c <_strtod_l+0x3ac>
 800ab00:	2325      	movs	r3, #37	; 0x25
 800ab02:	9a05      	ldr	r2, [sp, #20]
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	db22      	blt.n	800ab52 <_strtod_l+0x482>
 800ab0c:	240f      	movs	r4, #15
 800ab0e:	9b05      	ldr	r3, [sp, #20]
 800ab10:	4d66      	ldr	r5, [pc, #408]	; (800acac <_strtod_l+0x5dc>)
 800ab12:	1ae4      	subs	r4, r4, r3
 800ab14:	00e1      	lsls	r1, r4, #3
 800ab16:	1869      	adds	r1, r5, r1
 800ab18:	0032      	movs	r2, r6
 800ab1a:	6808      	ldr	r0, [r1, #0]
 800ab1c:	6849      	ldr	r1, [r1, #4]
 800ab1e:	003b      	movs	r3, r7
 800ab20:	f7f6 fda4 	bl	800166c <__aeabi_dmul>
 800ab24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab26:	1b1c      	subs	r4, r3, r4
 800ab28:	00e4      	lsls	r4, r4, #3
 800ab2a:	192d      	adds	r5, r5, r4
 800ab2c:	682a      	ldr	r2, [r5, #0]
 800ab2e:	686b      	ldr	r3, [r5, #4]
 800ab30:	e7e3      	b.n	800aafa <_strtod_l+0x42a>
 800ab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab34:	3316      	adds	r3, #22
 800ab36:	db0c      	blt.n	800ab52 <_strtod_l+0x482>
 800ab38:	9906      	ldr	r1, [sp, #24]
 800ab3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab3c:	4b5b      	ldr	r3, [pc, #364]	; (800acac <_strtod_l+0x5dc>)
 800ab3e:	1a52      	subs	r2, r2, r1
 800ab40:	00d2      	lsls	r2, r2, #3
 800ab42:	189b      	adds	r3, r3, r2
 800ab44:	0030      	movs	r0, r6
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	0039      	movs	r1, r7
 800ab4c:	f7f6 f994 	bl	8000e78 <__aeabi_ddiv>
 800ab50:	e794      	b.n	800aa7c <_strtod_l+0x3ac>
 800ab52:	9b05      	ldr	r3, [sp, #20]
 800ab54:	1b1c      	subs	r4, r3, r4
 800ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab58:	18e4      	adds	r4, r4, r3
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	dd72      	ble.n	800ac44 <_strtod_l+0x574>
 800ab5e:	220f      	movs	r2, #15
 800ab60:	0023      	movs	r3, r4
 800ab62:	4013      	ands	r3, r2
 800ab64:	4214      	tst	r4, r2
 800ab66:	d00a      	beq.n	800ab7e <_strtod_l+0x4ae>
 800ab68:	4950      	ldr	r1, [pc, #320]	; (800acac <_strtod_l+0x5dc>)
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	18c9      	adds	r1, r1, r3
 800ab6e:	0032      	movs	r2, r6
 800ab70:	6808      	ldr	r0, [r1, #0]
 800ab72:	6849      	ldr	r1, [r1, #4]
 800ab74:	003b      	movs	r3, r7
 800ab76:	f7f6 fd79 	bl	800166c <__aeabi_dmul>
 800ab7a:	0006      	movs	r6, r0
 800ab7c:	000f      	movs	r7, r1
 800ab7e:	230f      	movs	r3, #15
 800ab80:	439c      	bics	r4, r3
 800ab82:	d04a      	beq.n	800ac1a <_strtod_l+0x54a>
 800ab84:	3326      	adds	r3, #38	; 0x26
 800ab86:	33ff      	adds	r3, #255	; 0xff
 800ab88:	429c      	cmp	r4, r3
 800ab8a:	dd22      	ble.n	800abd2 <_strtod_l+0x502>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	9306      	str	r3, [sp, #24]
 800ab92:	930d      	str	r3, [sp, #52]	; 0x34
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	2322      	movs	r3, #34	; 0x22
 800ab98:	2600      	movs	r6, #0
 800ab9a:	9a04      	ldr	r2, [sp, #16]
 800ab9c:	4f3f      	ldr	r7, [pc, #252]	; (800ac9c <_strtod_l+0x5cc>)
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba2:	42b3      	cmp	r3, r6
 800aba4:	d100      	bne.n	800aba8 <_strtod_l+0x4d8>
 800aba6:	e5ce      	b.n	800a746 <_strtod_l+0x76>
 800aba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abaa:	9804      	ldr	r0, [sp, #16]
 800abac:	f001 fb7c 	bl	800c2a8 <_Bfree>
 800abb0:	9908      	ldr	r1, [sp, #32]
 800abb2:	9804      	ldr	r0, [sp, #16]
 800abb4:	f001 fb78 	bl	800c2a8 <_Bfree>
 800abb8:	9906      	ldr	r1, [sp, #24]
 800abba:	9804      	ldr	r0, [sp, #16]
 800abbc:	f001 fb74 	bl	800c2a8 <_Bfree>
 800abc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800abc2:	9804      	ldr	r0, [sp, #16]
 800abc4:	f001 fb70 	bl	800c2a8 <_Bfree>
 800abc8:	9905      	ldr	r1, [sp, #20]
 800abca:	9804      	ldr	r0, [sp, #16]
 800abcc:	f001 fb6c 	bl	800c2a8 <_Bfree>
 800abd0:	e5b9      	b.n	800a746 <_strtod_l+0x76>
 800abd2:	2300      	movs	r3, #0
 800abd4:	0030      	movs	r0, r6
 800abd6:	0039      	movs	r1, r7
 800abd8:	4d35      	ldr	r5, [pc, #212]	; (800acb0 <_strtod_l+0x5e0>)
 800abda:	1124      	asrs	r4, r4, #4
 800abdc:	9307      	str	r3, [sp, #28]
 800abde:	2c01      	cmp	r4, #1
 800abe0:	dc1e      	bgt.n	800ac20 <_strtod_l+0x550>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <_strtod_l+0x51a>
 800abe6:	0006      	movs	r6, r0
 800abe8:	000f      	movs	r7, r1
 800abea:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <_strtod_l+0x5e4>)
 800abec:	9a07      	ldr	r2, [sp, #28]
 800abee:	18ff      	adds	r7, r7, r3
 800abf0:	4b2f      	ldr	r3, [pc, #188]	; (800acb0 <_strtod_l+0x5e0>)
 800abf2:	00d2      	lsls	r2, r2, #3
 800abf4:	189d      	adds	r5, r3, r2
 800abf6:	6828      	ldr	r0, [r5, #0]
 800abf8:	6869      	ldr	r1, [r5, #4]
 800abfa:	0032      	movs	r2, r6
 800abfc:	003b      	movs	r3, r7
 800abfe:	f7f6 fd35 	bl	800166c <__aeabi_dmul>
 800ac02:	4b26      	ldr	r3, [pc, #152]	; (800ac9c <_strtod_l+0x5cc>)
 800ac04:	4a2c      	ldr	r2, [pc, #176]	; (800acb8 <_strtod_l+0x5e8>)
 800ac06:	0006      	movs	r6, r0
 800ac08:	400b      	ands	r3, r1
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d8be      	bhi.n	800ab8c <_strtod_l+0x4bc>
 800ac0e:	4a2b      	ldr	r2, [pc, #172]	; (800acbc <_strtod_l+0x5ec>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d913      	bls.n	800ac3c <_strtod_l+0x56c>
 800ac14:	2601      	movs	r6, #1
 800ac16:	4f2a      	ldr	r7, [pc, #168]	; (800acc0 <_strtod_l+0x5f0>)
 800ac18:	4276      	negs	r6, r6
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9307      	str	r3, [sp, #28]
 800ac1e:	e088      	b.n	800ad32 <_strtod_l+0x662>
 800ac20:	2201      	movs	r2, #1
 800ac22:	4214      	tst	r4, r2
 800ac24:	d004      	beq.n	800ac30 <_strtod_l+0x560>
 800ac26:	682a      	ldr	r2, [r5, #0]
 800ac28:	686b      	ldr	r3, [r5, #4]
 800ac2a:	f7f6 fd1f 	bl	800166c <__aeabi_dmul>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	9a07      	ldr	r2, [sp, #28]
 800ac32:	1064      	asrs	r4, r4, #1
 800ac34:	3201      	adds	r2, #1
 800ac36:	9207      	str	r2, [sp, #28]
 800ac38:	3508      	adds	r5, #8
 800ac3a:	e7d0      	b.n	800abde <_strtod_l+0x50e>
 800ac3c:	23d4      	movs	r3, #212	; 0xd4
 800ac3e:	049b      	lsls	r3, r3, #18
 800ac40:	18cf      	adds	r7, r1, r3
 800ac42:	e7ea      	b.n	800ac1a <_strtod_l+0x54a>
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	d0e8      	beq.n	800ac1a <_strtod_l+0x54a>
 800ac48:	4264      	negs	r4, r4
 800ac4a:	230f      	movs	r3, #15
 800ac4c:	0022      	movs	r2, r4
 800ac4e:	401a      	ands	r2, r3
 800ac50:	421c      	tst	r4, r3
 800ac52:	d00a      	beq.n	800ac6a <_strtod_l+0x59a>
 800ac54:	4b15      	ldr	r3, [pc, #84]	; (800acac <_strtod_l+0x5dc>)
 800ac56:	00d2      	lsls	r2, r2, #3
 800ac58:	189b      	adds	r3, r3, r2
 800ac5a:	0030      	movs	r0, r6
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	0039      	movs	r1, r7
 800ac62:	f7f6 f909 	bl	8000e78 <__aeabi_ddiv>
 800ac66:	0006      	movs	r6, r0
 800ac68:	000f      	movs	r7, r1
 800ac6a:	1124      	asrs	r4, r4, #4
 800ac6c:	d0d5      	beq.n	800ac1a <_strtod_l+0x54a>
 800ac6e:	2c1f      	cmp	r4, #31
 800ac70:	dd28      	ble.n	800acc4 <_strtod_l+0x5f4>
 800ac72:	2300      	movs	r3, #0
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	9306      	str	r3, [sp, #24]
 800ac78:	930d      	str	r3, [sp, #52]	; 0x34
 800ac7a:	9308      	str	r3, [sp, #32]
 800ac7c:	2322      	movs	r3, #34	; 0x22
 800ac7e:	9a04      	ldr	r2, [sp, #16]
 800ac80:	2600      	movs	r6, #0
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac86:	2700      	movs	r7, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d18d      	bne.n	800aba8 <_strtod_l+0x4d8>
 800ac8c:	e55b      	b.n	800a746 <_strtod_l+0x76>
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	00004e1f 	.word	0x00004e1f
 800ac94:	080140a9 	.word	0x080140a9
 800ac98:	08013d88 	.word	0x08013d88
 800ac9c:	7ff00000 	.word	0x7ff00000
 800aca0:	080140a1 	.word	0x080140a1
 800aca4:	08014157 	.word	0x08014157
 800aca8:	08014153 	.word	0x08014153
 800acac:	08013fc8 	.word	0x08013fc8
 800acb0:	08013fa0 	.word	0x08013fa0
 800acb4:	fcb00000 	.word	0xfcb00000
 800acb8:	7ca00000 	.word	0x7ca00000
 800acbc:	7c900000 	.word	0x7c900000
 800acc0:	7fefffff 	.word	0x7fefffff
 800acc4:	2310      	movs	r3, #16
 800acc6:	0022      	movs	r2, r4
 800acc8:	401a      	ands	r2, r3
 800acca:	9207      	str	r2, [sp, #28]
 800accc:	421c      	tst	r4, r3
 800acce:	d001      	beq.n	800acd4 <_strtod_l+0x604>
 800acd0:	335a      	adds	r3, #90	; 0x5a
 800acd2:	9307      	str	r3, [sp, #28]
 800acd4:	0030      	movs	r0, r6
 800acd6:	0039      	movs	r1, r7
 800acd8:	2300      	movs	r3, #0
 800acda:	4dc4      	ldr	r5, [pc, #784]	; (800afec <_strtod_l+0x91c>)
 800acdc:	2201      	movs	r2, #1
 800acde:	4214      	tst	r4, r2
 800ace0:	d004      	beq.n	800acec <_strtod_l+0x61c>
 800ace2:	682a      	ldr	r2, [r5, #0]
 800ace4:	686b      	ldr	r3, [r5, #4]
 800ace6:	f7f6 fcc1 	bl	800166c <__aeabi_dmul>
 800acea:	2301      	movs	r3, #1
 800acec:	1064      	asrs	r4, r4, #1
 800acee:	3508      	adds	r5, #8
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	d1f3      	bne.n	800acdc <_strtod_l+0x60c>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <_strtod_l+0x62c>
 800acf8:	0006      	movs	r6, r0
 800acfa:	000f      	movs	r7, r1
 800acfc:	9b07      	ldr	r3, [sp, #28]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00f      	beq.n	800ad22 <_strtod_l+0x652>
 800ad02:	236b      	movs	r3, #107	; 0x6b
 800ad04:	007a      	lsls	r2, r7, #1
 800ad06:	0d52      	lsrs	r2, r2, #21
 800ad08:	0039      	movs	r1, r7
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd08      	ble.n	800ad22 <_strtod_l+0x652>
 800ad10:	2b1f      	cmp	r3, #31
 800ad12:	dc00      	bgt.n	800ad16 <_strtod_l+0x646>
 800ad14:	e121      	b.n	800af5a <_strtod_l+0x88a>
 800ad16:	2600      	movs	r6, #0
 800ad18:	2b34      	cmp	r3, #52	; 0x34
 800ad1a:	dc00      	bgt.n	800ad1e <_strtod_l+0x64e>
 800ad1c:	e116      	b.n	800af4c <_strtod_l+0x87c>
 800ad1e:	27dc      	movs	r7, #220	; 0xdc
 800ad20:	04bf      	lsls	r7, r7, #18
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	0030      	movs	r0, r6
 800ad28:	0039      	movs	r1, r7
 800ad2a:	f7f5 fb8d 	bl	8000448 <__aeabi_dcmpeq>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d19f      	bne.n	800ac72 <_strtod_l+0x5a2>
 800ad32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad34:	9a08      	ldr	r2, [sp, #32]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	9804      	ldr	r0, [sp, #16]
 800ad3e:	f001 fb01 	bl	800c344 <__s2b>
 800ad42:	900d      	str	r0, [sp, #52]	; 0x34
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d100      	bne.n	800ad4a <_strtod_l+0x67a>
 800ad48:	e720      	b.n	800ab8c <_strtod_l+0x4bc>
 800ad4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4c:	9906      	ldr	r1, [sp, #24]
 800ad4e:	17da      	asrs	r2, r3, #31
 800ad50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad52:	1a5b      	subs	r3, r3, r1
 800ad54:	401a      	ands	r2, r3
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	9215      	str	r2, [sp, #84]	; 0x54
 800ad5a:	43db      	mvns	r3, r3
 800ad5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad5e:	17db      	asrs	r3, r3, #31
 800ad60:	401a      	ands	r2, r3
 800ad62:	2300      	movs	r3, #0
 800ad64:	9218      	str	r2, [sp, #96]	; 0x60
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	9306      	str	r3, [sp, #24]
 800ad6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad6c:	9804      	ldr	r0, [sp, #16]
 800ad6e:	6859      	ldr	r1, [r3, #4]
 800ad70:	f001 fa72 	bl	800c258 <_Balloc>
 800ad74:	9008      	str	r0, [sp, #32]
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d100      	bne.n	800ad7c <_strtod_l+0x6ac>
 800ad7a:	e70c      	b.n	800ab96 <_strtod_l+0x4c6>
 800ad7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7e:	300c      	adds	r0, #12
 800ad80:	0019      	movs	r1, r3
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	310c      	adds	r1, #12
 800ad86:	3202      	adds	r2, #2
 800ad88:	0092      	lsls	r2, r2, #2
 800ad8a:	f000 fdca 	bl	800b922 <memcpy>
 800ad8e:	ab1e      	add	r3, sp, #120	; 0x78
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	ab1d      	add	r3, sp, #116	; 0x74
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	0032      	movs	r2, r6
 800ad98:	003b      	movs	r3, r7
 800ad9a:	9804      	ldr	r0, [sp, #16]
 800ad9c:	9610      	str	r6, [sp, #64]	; 0x40
 800ad9e:	9711      	str	r7, [sp, #68]	; 0x44
 800ada0:	f001 fdf8 	bl	800c994 <__d2b>
 800ada4:	901c      	str	r0, [sp, #112]	; 0x70
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d100      	bne.n	800adac <_strtod_l+0x6dc>
 800adaa:	e6f4      	b.n	800ab96 <_strtod_l+0x4c6>
 800adac:	2101      	movs	r1, #1
 800adae:	9804      	ldr	r0, [sp, #16]
 800adb0:	f001 fb5c 	bl	800c46c <__i2b>
 800adb4:	9006      	str	r0, [sp, #24]
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d100      	bne.n	800adbc <_strtod_l+0x6ec>
 800adba:	e6ec      	b.n	800ab96 <_strtod_l+0x4c6>
 800adbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800adc2:	1ad4      	subs	r4, r2, r3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	db01      	blt.n	800adcc <_strtod_l+0x6fc>
 800adc8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800adca:	195d      	adds	r5, r3, r5
 800adcc:	9907      	ldr	r1, [sp, #28]
 800adce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800add0:	1a5b      	subs	r3, r3, r1
 800add2:	2136      	movs	r1, #54	; 0x36
 800add4:	189b      	adds	r3, r3, r2
 800add6:	1a8a      	subs	r2, r1, r2
 800add8:	4985      	ldr	r1, [pc, #532]	; (800aff0 <_strtod_l+0x920>)
 800adda:	2001      	movs	r0, #1
 800addc:	468c      	mov	ip, r1
 800adde:	2100      	movs	r1, #0
 800ade0:	3b01      	subs	r3, #1
 800ade2:	9114      	str	r1, [sp, #80]	; 0x50
 800ade4:	9012      	str	r0, [sp, #72]	; 0x48
 800ade6:	4563      	cmp	r3, ip
 800ade8:	da07      	bge.n	800adfa <_strtod_l+0x72a>
 800adea:	4661      	mov	r1, ip
 800adec:	1ac9      	subs	r1, r1, r3
 800adee:	1a52      	subs	r2, r2, r1
 800adf0:	291f      	cmp	r1, #31
 800adf2:	dd00      	ble.n	800adf6 <_strtod_l+0x726>
 800adf4:	e0b6      	b.n	800af64 <_strtod_l+0x894>
 800adf6:	4088      	lsls	r0, r1
 800adf8:	9012      	str	r0, [sp, #72]	; 0x48
 800adfa:	18ab      	adds	r3, r5, r2
 800adfc:	930c      	str	r3, [sp, #48]	; 0x30
 800adfe:	18a4      	adds	r4, r4, r2
 800ae00:	9b07      	ldr	r3, [sp, #28]
 800ae02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae04:	191c      	adds	r4, r3, r4
 800ae06:	002b      	movs	r3, r5
 800ae08:	4295      	cmp	r5, r2
 800ae0a:	dd00      	ble.n	800ae0e <_strtod_l+0x73e>
 800ae0c:	0013      	movs	r3, r2
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	dd00      	ble.n	800ae14 <_strtod_l+0x744>
 800ae12:	0023      	movs	r3, r4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd04      	ble.n	800ae22 <_strtod_l+0x752>
 800ae18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae1a:	1ae4      	subs	r4, r4, r3
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	920c      	str	r2, [sp, #48]	; 0x30
 800ae20:	1aed      	subs	r5, r5, r3
 800ae22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd17      	ble.n	800ae58 <_strtod_l+0x788>
 800ae28:	001a      	movs	r2, r3
 800ae2a:	9906      	ldr	r1, [sp, #24]
 800ae2c:	9804      	ldr	r0, [sp, #16]
 800ae2e:	f001 fbe5 	bl	800c5fc <__pow5mult>
 800ae32:	9006      	str	r0, [sp, #24]
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d100      	bne.n	800ae3a <_strtod_l+0x76a>
 800ae38:	e6ad      	b.n	800ab96 <_strtod_l+0x4c6>
 800ae3a:	0001      	movs	r1, r0
 800ae3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae3e:	9804      	ldr	r0, [sp, #16]
 800ae40:	f001 fb2c 	bl	800c49c <__multiply>
 800ae44:	900e      	str	r0, [sp, #56]	; 0x38
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d100      	bne.n	800ae4c <_strtod_l+0x77c>
 800ae4a:	e6a4      	b.n	800ab96 <_strtod_l+0x4c6>
 800ae4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae4e:	9804      	ldr	r0, [sp, #16]
 800ae50:	f001 fa2a 	bl	800c2a8 <_Bfree>
 800ae54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae56:	931c      	str	r3, [sp, #112]	; 0x70
 800ae58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dd00      	ble.n	800ae60 <_strtod_l+0x790>
 800ae5e:	e087      	b.n	800af70 <_strtod_l+0x8a0>
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd08      	ble.n	800ae78 <_strtod_l+0x7a8>
 800ae66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae68:	9908      	ldr	r1, [sp, #32]
 800ae6a:	9804      	ldr	r0, [sp, #16]
 800ae6c:	f001 fbc6 	bl	800c5fc <__pow5mult>
 800ae70:	9008      	str	r0, [sp, #32]
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d100      	bne.n	800ae78 <_strtod_l+0x7a8>
 800ae76:	e68e      	b.n	800ab96 <_strtod_l+0x4c6>
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	dd08      	ble.n	800ae8e <_strtod_l+0x7be>
 800ae7c:	0022      	movs	r2, r4
 800ae7e:	9908      	ldr	r1, [sp, #32]
 800ae80:	9804      	ldr	r0, [sp, #16]
 800ae82:	f001 fbfd 	bl	800c680 <__lshift>
 800ae86:	9008      	str	r0, [sp, #32]
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d100      	bne.n	800ae8e <_strtod_l+0x7be>
 800ae8c:	e683      	b.n	800ab96 <_strtod_l+0x4c6>
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	dd08      	ble.n	800aea4 <_strtod_l+0x7d4>
 800ae92:	002a      	movs	r2, r5
 800ae94:	9906      	ldr	r1, [sp, #24]
 800ae96:	9804      	ldr	r0, [sp, #16]
 800ae98:	f001 fbf2 	bl	800c680 <__lshift>
 800ae9c:	9006      	str	r0, [sp, #24]
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d100      	bne.n	800aea4 <_strtod_l+0x7d4>
 800aea2:	e678      	b.n	800ab96 <_strtod_l+0x4c6>
 800aea4:	9a08      	ldr	r2, [sp, #32]
 800aea6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aea8:	9804      	ldr	r0, [sp, #16]
 800aeaa:	f001 fc73 	bl	800c794 <__mdiff>
 800aeae:	9005      	str	r0, [sp, #20]
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d100      	bne.n	800aeb6 <_strtod_l+0x7e6>
 800aeb4:	e66f      	b.n	800ab96 <_strtod_l+0x4c6>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	68c3      	ldr	r3, [r0, #12]
 800aeba:	9906      	ldr	r1, [sp, #24]
 800aebc:	60c2      	str	r2, [r0, #12]
 800aebe:	930c      	str	r3, [sp, #48]	; 0x30
 800aec0:	f001 fc4c 	bl	800c75c <__mcmp>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	da5d      	bge.n	800af84 <_strtod_l+0x8b4>
 800aec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeca:	4333      	orrs	r3, r6
 800aecc:	d000      	beq.n	800aed0 <_strtod_l+0x800>
 800aece:	e088      	b.n	800afe2 <_strtod_l+0x912>
 800aed0:	033b      	lsls	r3, r7, #12
 800aed2:	d000      	beq.n	800aed6 <_strtod_l+0x806>
 800aed4:	e085      	b.n	800afe2 <_strtod_l+0x912>
 800aed6:	22d6      	movs	r2, #214	; 0xd6
 800aed8:	4b46      	ldr	r3, [pc, #280]	; (800aff4 <_strtod_l+0x924>)
 800aeda:	04d2      	lsls	r2, r2, #19
 800aedc:	403b      	ands	r3, r7
 800aede:	4293      	cmp	r3, r2
 800aee0:	d97f      	bls.n	800afe2 <_strtod_l+0x912>
 800aee2:	9b05      	ldr	r3, [sp, #20]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d103      	bne.n	800aef2 <_strtod_l+0x822>
 800aeea:	9b05      	ldr	r3, [sp, #20]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	dd77      	ble.n	800afe2 <_strtod_l+0x912>
 800aef2:	9905      	ldr	r1, [sp, #20]
 800aef4:	2201      	movs	r2, #1
 800aef6:	9804      	ldr	r0, [sp, #16]
 800aef8:	f001 fbc2 	bl	800c680 <__lshift>
 800aefc:	9906      	ldr	r1, [sp, #24]
 800aefe:	9005      	str	r0, [sp, #20]
 800af00:	f001 fc2c 	bl	800c75c <__mcmp>
 800af04:	2800      	cmp	r0, #0
 800af06:	dd6c      	ble.n	800afe2 <_strtod_l+0x912>
 800af08:	9907      	ldr	r1, [sp, #28]
 800af0a:	003b      	movs	r3, r7
 800af0c:	4a39      	ldr	r2, [pc, #228]	; (800aff4 <_strtod_l+0x924>)
 800af0e:	2900      	cmp	r1, #0
 800af10:	d100      	bne.n	800af14 <_strtod_l+0x844>
 800af12:	e094      	b.n	800b03e <_strtod_l+0x96e>
 800af14:	0011      	movs	r1, r2
 800af16:	20d6      	movs	r0, #214	; 0xd6
 800af18:	4039      	ands	r1, r7
 800af1a:	04c0      	lsls	r0, r0, #19
 800af1c:	4281      	cmp	r1, r0
 800af1e:	dd00      	ble.n	800af22 <_strtod_l+0x852>
 800af20:	e08d      	b.n	800b03e <_strtod_l+0x96e>
 800af22:	23dc      	movs	r3, #220	; 0xdc
 800af24:	049b      	lsls	r3, r3, #18
 800af26:	4299      	cmp	r1, r3
 800af28:	dc00      	bgt.n	800af2c <_strtod_l+0x85c>
 800af2a:	e6a7      	b.n	800ac7c <_strtod_l+0x5ac>
 800af2c:	0030      	movs	r0, r6
 800af2e:	0039      	movs	r1, r7
 800af30:	4b31      	ldr	r3, [pc, #196]	; (800aff8 <_strtod_l+0x928>)
 800af32:	2200      	movs	r2, #0
 800af34:	f7f6 fb9a 	bl	800166c <__aeabi_dmul>
 800af38:	4b2e      	ldr	r3, [pc, #184]	; (800aff4 <_strtod_l+0x924>)
 800af3a:	0006      	movs	r6, r0
 800af3c:	000f      	movs	r7, r1
 800af3e:	420b      	tst	r3, r1
 800af40:	d000      	beq.n	800af44 <_strtod_l+0x874>
 800af42:	e631      	b.n	800aba8 <_strtod_l+0x4d8>
 800af44:	2322      	movs	r3, #34	; 0x22
 800af46:	9a04      	ldr	r2, [sp, #16]
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	e62d      	b.n	800aba8 <_strtod_l+0x4d8>
 800af4c:	234b      	movs	r3, #75	; 0x4b
 800af4e:	1a9a      	subs	r2, r3, r2
 800af50:	3b4c      	subs	r3, #76	; 0x4c
 800af52:	4093      	lsls	r3, r2
 800af54:	4019      	ands	r1, r3
 800af56:	000f      	movs	r7, r1
 800af58:	e6e3      	b.n	800ad22 <_strtod_l+0x652>
 800af5a:	2201      	movs	r2, #1
 800af5c:	4252      	negs	r2, r2
 800af5e:	409a      	lsls	r2, r3
 800af60:	4016      	ands	r6, r2
 800af62:	e6de      	b.n	800ad22 <_strtod_l+0x652>
 800af64:	4925      	ldr	r1, [pc, #148]	; (800affc <_strtod_l+0x92c>)
 800af66:	1acb      	subs	r3, r1, r3
 800af68:	0001      	movs	r1, r0
 800af6a:	4099      	lsls	r1, r3
 800af6c:	9114      	str	r1, [sp, #80]	; 0x50
 800af6e:	e743      	b.n	800adf8 <_strtod_l+0x728>
 800af70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af72:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af74:	9804      	ldr	r0, [sp, #16]
 800af76:	f001 fb83 	bl	800c680 <__lshift>
 800af7a:	901c      	str	r0, [sp, #112]	; 0x70
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d000      	beq.n	800af82 <_strtod_l+0x8b2>
 800af80:	e76e      	b.n	800ae60 <_strtod_l+0x790>
 800af82:	e608      	b.n	800ab96 <_strtod_l+0x4c6>
 800af84:	970e      	str	r7, [sp, #56]	; 0x38
 800af86:	2800      	cmp	r0, #0
 800af88:	d177      	bne.n	800b07a <_strtod_l+0x9aa>
 800af8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af8c:	033b      	lsls	r3, r7, #12
 800af8e:	0b1b      	lsrs	r3, r3, #12
 800af90:	2a00      	cmp	r2, #0
 800af92:	d039      	beq.n	800b008 <_strtod_l+0x938>
 800af94:	4a1a      	ldr	r2, [pc, #104]	; (800b000 <_strtod_l+0x930>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d139      	bne.n	800b00e <_strtod_l+0x93e>
 800af9a:	2101      	movs	r1, #1
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	4249      	negs	r1, r1
 800afa0:	0032      	movs	r2, r6
 800afa2:	0008      	movs	r0, r1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00b      	beq.n	800afc0 <_strtod_l+0x8f0>
 800afa8:	24d4      	movs	r4, #212	; 0xd4
 800afaa:	4b12      	ldr	r3, [pc, #72]	; (800aff4 <_strtod_l+0x924>)
 800afac:	0008      	movs	r0, r1
 800afae:	403b      	ands	r3, r7
 800afb0:	04e4      	lsls	r4, r4, #19
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	d804      	bhi.n	800afc0 <_strtod_l+0x8f0>
 800afb6:	306c      	adds	r0, #108	; 0x6c
 800afb8:	0d1b      	lsrs	r3, r3, #20
 800afba:	1ac3      	subs	r3, r0, r3
 800afbc:	4099      	lsls	r1, r3
 800afbe:	0008      	movs	r0, r1
 800afc0:	4282      	cmp	r2, r0
 800afc2:	d124      	bne.n	800b00e <_strtod_l+0x93e>
 800afc4:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <_strtod_l+0x934>)
 800afc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afc8:	4299      	cmp	r1, r3
 800afca:	d102      	bne.n	800afd2 <_strtod_l+0x902>
 800afcc:	3201      	adds	r2, #1
 800afce:	d100      	bne.n	800afd2 <_strtod_l+0x902>
 800afd0:	e5e1      	b.n	800ab96 <_strtod_l+0x4c6>
 800afd2:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <_strtod_l+0x924>)
 800afd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afd6:	2600      	movs	r6, #0
 800afd8:	401a      	ands	r2, r3
 800afda:	0013      	movs	r3, r2
 800afdc:	2280      	movs	r2, #128	; 0x80
 800afde:	0352      	lsls	r2, r2, #13
 800afe0:	189f      	adds	r7, r3, r2
 800afe2:	9b07      	ldr	r3, [sp, #28]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1a1      	bne.n	800af2c <_strtod_l+0x85c>
 800afe8:	e5de      	b.n	800aba8 <_strtod_l+0x4d8>
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	08013da0 	.word	0x08013da0
 800aff0:	fffffc02 	.word	0xfffffc02
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	39500000 	.word	0x39500000
 800affc:	fffffbe2 	.word	0xfffffbe2
 800b000:	000fffff 	.word	0x000fffff
 800b004:	7fefffff 	.word	0x7fefffff
 800b008:	4333      	orrs	r3, r6
 800b00a:	d100      	bne.n	800b00e <_strtod_l+0x93e>
 800b00c:	e77c      	b.n	800af08 <_strtod_l+0x838>
 800b00e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b010:	2b00      	cmp	r3, #0
 800b012:	d01d      	beq.n	800b050 <_strtod_l+0x980>
 800b014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b018:	4213      	tst	r3, r2
 800b01a:	d0e2      	beq.n	800afe2 <_strtod_l+0x912>
 800b01c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b01e:	0030      	movs	r0, r6
 800b020:	0039      	movs	r1, r7
 800b022:	9a07      	ldr	r2, [sp, #28]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d017      	beq.n	800b058 <_strtod_l+0x988>
 800b028:	f7ff fb3a 	bl	800a6a0 <sulp>
 800b02c:	0002      	movs	r2, r0
 800b02e:	000b      	movs	r3, r1
 800b030:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b032:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b034:	f7f5 fbc0 	bl	80007b8 <__aeabi_dadd>
 800b038:	0006      	movs	r6, r0
 800b03a:	000f      	movs	r7, r1
 800b03c:	e7d1      	b.n	800afe2 <_strtod_l+0x912>
 800b03e:	2601      	movs	r6, #1
 800b040:	4013      	ands	r3, r2
 800b042:	4a98      	ldr	r2, [pc, #608]	; (800b2a4 <_strtod_l+0xbd4>)
 800b044:	4276      	negs	r6, r6
 800b046:	189b      	adds	r3, r3, r2
 800b048:	4a97      	ldr	r2, [pc, #604]	; (800b2a8 <_strtod_l+0xbd8>)
 800b04a:	431a      	orrs	r2, r3
 800b04c:	0017      	movs	r7, r2
 800b04e:	e7c8      	b.n	800afe2 <_strtod_l+0x912>
 800b050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b052:	4233      	tst	r3, r6
 800b054:	d0c5      	beq.n	800afe2 <_strtod_l+0x912>
 800b056:	e7e1      	b.n	800b01c <_strtod_l+0x94c>
 800b058:	f7ff fb22 	bl	800a6a0 <sulp>
 800b05c:	0002      	movs	r2, r0
 800b05e:	000b      	movs	r3, r1
 800b060:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b062:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b064:	f7f6 fdc4 	bl	8001bf0 <__aeabi_dsub>
 800b068:	2200      	movs	r2, #0
 800b06a:	2300      	movs	r3, #0
 800b06c:	0006      	movs	r6, r0
 800b06e:	000f      	movs	r7, r1
 800b070:	f7f5 f9ea 	bl	8000448 <__aeabi_dcmpeq>
 800b074:	2800      	cmp	r0, #0
 800b076:	d0b4      	beq.n	800afe2 <_strtod_l+0x912>
 800b078:	e600      	b.n	800ac7c <_strtod_l+0x5ac>
 800b07a:	9906      	ldr	r1, [sp, #24]
 800b07c:	9805      	ldr	r0, [sp, #20]
 800b07e:	f001 fce9 	bl	800ca54 <__ratio>
 800b082:	2380      	movs	r3, #128	; 0x80
 800b084:	2200      	movs	r2, #0
 800b086:	05db      	lsls	r3, r3, #23
 800b088:	0004      	movs	r4, r0
 800b08a:	000d      	movs	r5, r1
 800b08c:	f7f5 f9ec 	bl	8000468 <__aeabi_dcmple>
 800b090:	2800      	cmp	r0, #0
 800b092:	d06d      	beq.n	800b170 <_strtod_l+0xaa0>
 800b094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b096:	2b00      	cmp	r3, #0
 800b098:	d000      	beq.n	800b09c <_strtod_l+0x9cc>
 800b09a:	e07e      	b.n	800b19a <_strtod_l+0xaca>
 800b09c:	2e00      	cmp	r6, #0
 800b09e:	d158      	bne.n	800b152 <_strtod_l+0xa82>
 800b0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a2:	031b      	lsls	r3, r3, #12
 800b0a4:	d000      	beq.n	800b0a8 <_strtod_l+0x9d8>
 800b0a6:	e07f      	b.n	800b1a8 <_strtod_l+0xad8>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	0020      	movs	r0, r4
 800b0ac:	0029      	movs	r1, r5
 800b0ae:	4b7f      	ldr	r3, [pc, #508]	; (800b2ac <_strtod_l+0xbdc>)
 800b0b0:	f7f5 f9d0 	bl	8000454 <__aeabi_dcmplt>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d158      	bne.n	800b16a <_strtod_l+0xa9a>
 800b0b8:	0020      	movs	r0, r4
 800b0ba:	0029      	movs	r1, r5
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4b7c      	ldr	r3, [pc, #496]	; (800b2b0 <_strtod_l+0xbe0>)
 800b0c0:	f7f6 fad4 	bl	800166c <__aeabi_dmul>
 800b0c4:	0004      	movs	r4, r0
 800b0c6:	000d      	movs	r5, r1
 800b0c8:	2380      	movs	r3, #128	; 0x80
 800b0ca:	061b      	lsls	r3, r3, #24
 800b0cc:	940a      	str	r4, [sp, #40]	; 0x28
 800b0ce:	18eb      	adds	r3, r5, r3
 800b0d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d6:	9212      	str	r2, [sp, #72]	; 0x48
 800b0d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0da:	4a76      	ldr	r2, [pc, #472]	; (800b2b4 <_strtod_l+0xbe4>)
 800b0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0de:	4013      	ands	r3, r2
 800b0e0:	9314      	str	r3, [sp, #80]	; 0x50
 800b0e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0e4:	4b74      	ldr	r3, [pc, #464]	; (800b2b8 <_strtod_l+0xbe8>)
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d000      	beq.n	800b0ec <_strtod_l+0xa1c>
 800b0ea:	e091      	b.n	800b210 <_strtod_l+0xb40>
 800b0ec:	4a73      	ldr	r2, [pc, #460]	; (800b2bc <_strtod_l+0xbec>)
 800b0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0f0:	4694      	mov	ip, r2
 800b0f2:	4463      	add	r3, ip
 800b0f4:	001f      	movs	r7, r3
 800b0f6:	0030      	movs	r0, r6
 800b0f8:	0019      	movs	r1, r3
 800b0fa:	f001 fbe3 	bl	800c8c4 <__ulp>
 800b0fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b102:	f7f6 fab3 	bl	800166c <__aeabi_dmul>
 800b106:	0032      	movs	r2, r6
 800b108:	003b      	movs	r3, r7
 800b10a:	f7f5 fb55 	bl	80007b8 <__aeabi_dadd>
 800b10e:	4a69      	ldr	r2, [pc, #420]	; (800b2b4 <_strtod_l+0xbe4>)
 800b110:	4b6b      	ldr	r3, [pc, #428]	; (800b2c0 <_strtod_l+0xbf0>)
 800b112:	0006      	movs	r6, r0
 800b114:	400a      	ands	r2, r1
 800b116:	429a      	cmp	r2, r3
 800b118:	d949      	bls.n	800b1ae <_strtod_l+0xade>
 800b11a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b11c:	4b69      	ldr	r3, [pc, #420]	; (800b2c4 <_strtod_l+0xbf4>)
 800b11e:	429a      	cmp	r2, r3
 800b120:	d103      	bne.n	800b12a <_strtod_l+0xa5a>
 800b122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b124:	3301      	adds	r3, #1
 800b126:	d100      	bne.n	800b12a <_strtod_l+0xa5a>
 800b128:	e535      	b.n	800ab96 <_strtod_l+0x4c6>
 800b12a:	2601      	movs	r6, #1
 800b12c:	4f65      	ldr	r7, [pc, #404]	; (800b2c4 <_strtod_l+0xbf4>)
 800b12e:	4276      	negs	r6, r6
 800b130:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b132:	9804      	ldr	r0, [sp, #16]
 800b134:	f001 f8b8 	bl	800c2a8 <_Bfree>
 800b138:	9908      	ldr	r1, [sp, #32]
 800b13a:	9804      	ldr	r0, [sp, #16]
 800b13c:	f001 f8b4 	bl	800c2a8 <_Bfree>
 800b140:	9906      	ldr	r1, [sp, #24]
 800b142:	9804      	ldr	r0, [sp, #16]
 800b144:	f001 f8b0 	bl	800c2a8 <_Bfree>
 800b148:	9905      	ldr	r1, [sp, #20]
 800b14a:	9804      	ldr	r0, [sp, #16]
 800b14c:	f001 f8ac 	bl	800c2a8 <_Bfree>
 800b150:	e60b      	b.n	800ad6a <_strtod_l+0x69a>
 800b152:	2e01      	cmp	r6, #1
 800b154:	d103      	bne.n	800b15e <_strtod_l+0xa8e>
 800b156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d100      	bne.n	800b15e <_strtod_l+0xa8e>
 800b15c:	e58e      	b.n	800ac7c <_strtod_l+0x5ac>
 800b15e:	2300      	movs	r3, #0
 800b160:	4c59      	ldr	r4, [pc, #356]	; (800b2c8 <_strtod_l+0xbf8>)
 800b162:	930a      	str	r3, [sp, #40]	; 0x28
 800b164:	940b      	str	r4, [sp, #44]	; 0x2c
 800b166:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b168:	e01c      	b.n	800b1a4 <_strtod_l+0xad4>
 800b16a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b16c:	4d50      	ldr	r5, [pc, #320]	; (800b2b0 <_strtod_l+0xbe0>)
 800b16e:	e7ab      	b.n	800b0c8 <_strtod_l+0x9f8>
 800b170:	2200      	movs	r2, #0
 800b172:	0020      	movs	r0, r4
 800b174:	0029      	movs	r1, r5
 800b176:	4b4e      	ldr	r3, [pc, #312]	; (800b2b0 <_strtod_l+0xbe0>)
 800b178:	f7f6 fa78 	bl	800166c <__aeabi_dmul>
 800b17c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b17e:	0004      	movs	r4, r0
 800b180:	000b      	movs	r3, r1
 800b182:	000d      	movs	r5, r1
 800b184:	2a00      	cmp	r2, #0
 800b186:	d104      	bne.n	800b192 <_strtod_l+0xac2>
 800b188:	2280      	movs	r2, #128	; 0x80
 800b18a:	0612      	lsls	r2, r2, #24
 800b18c:	900a      	str	r0, [sp, #40]	; 0x28
 800b18e:	188b      	adds	r3, r1, r2
 800b190:	e79e      	b.n	800b0d0 <_strtod_l+0xa00>
 800b192:	0002      	movs	r2, r0
 800b194:	920a      	str	r2, [sp, #40]	; 0x28
 800b196:	930b      	str	r3, [sp, #44]	; 0x2c
 800b198:	e79b      	b.n	800b0d2 <_strtod_l+0xa02>
 800b19a:	2300      	movs	r3, #0
 800b19c:	4c43      	ldr	r4, [pc, #268]	; (800b2ac <_strtod_l+0xbdc>)
 800b19e:	930a      	str	r3, [sp, #40]	; 0x28
 800b1a0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b1a2:	2400      	movs	r4, #0
 800b1a4:	4d41      	ldr	r5, [pc, #260]	; (800b2ac <_strtod_l+0xbdc>)
 800b1a6:	e794      	b.n	800b0d2 <_strtod_l+0xa02>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4c47      	ldr	r4, [pc, #284]	; (800b2c8 <_strtod_l+0xbf8>)
 800b1ac:	e7f7      	b.n	800b19e <_strtod_l+0xace>
 800b1ae:	23d4      	movs	r3, #212	; 0xd4
 800b1b0:	049b      	lsls	r3, r3, #18
 800b1b2:	18cf      	adds	r7, r1, r3
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	970e      	str	r7, [sp, #56]	; 0x38
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1b9      	bne.n	800b130 <_strtod_l+0xa60>
 800b1bc:	4b3d      	ldr	r3, [pc, #244]	; (800b2b4 <_strtod_l+0xbe4>)
 800b1be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1c0:	403b      	ands	r3, r7
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d1b4      	bne.n	800b130 <_strtod_l+0xa60>
 800b1c6:	0020      	movs	r0, r4
 800b1c8:	0029      	movs	r1, r5
 800b1ca:	f7f5 f9d7 	bl	800057c <__aeabi_d2lz>
 800b1ce:	f7f5 fa11 	bl	80005f4 <__aeabi_l2d>
 800b1d2:	0002      	movs	r2, r0
 800b1d4:	000b      	movs	r3, r1
 800b1d6:	0020      	movs	r0, r4
 800b1d8:	0029      	movs	r1, r5
 800b1da:	f7f6 fd09 	bl	8001bf0 <__aeabi_dsub>
 800b1de:	033b      	lsls	r3, r7, #12
 800b1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1e2:	0b1b      	lsrs	r3, r3, #12
 800b1e4:	4333      	orrs	r3, r6
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	0004      	movs	r4, r0
 800b1ea:	000d      	movs	r5, r1
 800b1ec:	4a37      	ldr	r2, [pc, #220]	; (800b2cc <_strtod_l+0xbfc>)
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d054      	beq.n	800b29c <_strtod_l+0xbcc>
 800b1f2:	4b37      	ldr	r3, [pc, #220]	; (800b2d0 <_strtod_l+0xc00>)
 800b1f4:	f7f5 f92e 	bl	8000454 <__aeabi_dcmplt>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d000      	beq.n	800b1fe <_strtod_l+0xb2e>
 800b1fc:	e4d4      	b.n	800aba8 <_strtod_l+0x4d8>
 800b1fe:	0020      	movs	r0, r4
 800b200:	0029      	movs	r1, r5
 800b202:	4a34      	ldr	r2, [pc, #208]	; (800b2d4 <_strtod_l+0xc04>)
 800b204:	4b2a      	ldr	r3, [pc, #168]	; (800b2b0 <_strtod_l+0xbe0>)
 800b206:	f7f5 f939 	bl	800047c <__aeabi_dcmpgt>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d090      	beq.n	800b130 <_strtod_l+0xa60>
 800b20e:	e4cb      	b.n	800aba8 <_strtod_l+0x4d8>
 800b210:	9b07      	ldr	r3, [sp, #28]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d02b      	beq.n	800b26e <_strtod_l+0xb9e>
 800b216:	23d4      	movs	r3, #212	; 0xd4
 800b218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b21a:	04db      	lsls	r3, r3, #19
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d826      	bhi.n	800b26e <_strtod_l+0xb9e>
 800b220:	0020      	movs	r0, r4
 800b222:	0029      	movs	r1, r5
 800b224:	4a2c      	ldr	r2, [pc, #176]	; (800b2d8 <_strtod_l+0xc08>)
 800b226:	4b2d      	ldr	r3, [pc, #180]	; (800b2dc <_strtod_l+0xc0c>)
 800b228:	f7f5 f91e 	bl	8000468 <__aeabi_dcmple>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d017      	beq.n	800b260 <_strtod_l+0xb90>
 800b230:	0020      	movs	r0, r4
 800b232:	0029      	movs	r1, r5
 800b234:	f7f5 f984 	bl	8000540 <__aeabi_d2uiz>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d100      	bne.n	800b23e <_strtod_l+0xb6e>
 800b23c:	3001      	adds	r0, #1
 800b23e:	f7f7 f8dd 	bl	80023fc <__aeabi_ui2d>
 800b242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b244:	0004      	movs	r4, r0
 800b246:	000b      	movs	r3, r1
 800b248:	000d      	movs	r5, r1
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	d122      	bne.n	800b294 <_strtod_l+0xbc4>
 800b24e:	2280      	movs	r2, #128	; 0x80
 800b250:	0612      	lsls	r2, r2, #24
 800b252:	188b      	adds	r3, r1, r2
 800b254:	9016      	str	r0, [sp, #88]	; 0x58
 800b256:	9317      	str	r3, [sp, #92]	; 0x5c
 800b258:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b25a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b25c:	9212      	str	r2, [sp, #72]	; 0x48
 800b25e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b260:	22d6      	movs	r2, #214	; 0xd6
 800b262:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b264:	04d2      	lsls	r2, r2, #19
 800b266:	189b      	adds	r3, r3, r2
 800b268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b26a:	1a9b      	subs	r3, r3, r2
 800b26c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b26e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b270:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b272:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b274:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b276:	f001 fb25 	bl	800c8c4 <__ulp>
 800b27a:	0002      	movs	r2, r0
 800b27c:	000b      	movs	r3, r1
 800b27e:	0030      	movs	r0, r6
 800b280:	0039      	movs	r1, r7
 800b282:	f7f6 f9f3 	bl	800166c <__aeabi_dmul>
 800b286:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b28a:	f7f5 fa95 	bl	80007b8 <__aeabi_dadd>
 800b28e:	0006      	movs	r6, r0
 800b290:	000f      	movs	r7, r1
 800b292:	e78f      	b.n	800b1b4 <_strtod_l+0xae4>
 800b294:	0002      	movs	r2, r0
 800b296:	9216      	str	r2, [sp, #88]	; 0x58
 800b298:	9317      	str	r3, [sp, #92]	; 0x5c
 800b29a:	e7dd      	b.n	800b258 <_strtod_l+0xb88>
 800b29c:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <_strtod_l+0xc10>)
 800b29e:	f7f5 f8d9 	bl	8000454 <__aeabi_dcmplt>
 800b2a2:	e7b2      	b.n	800b20a <_strtod_l+0xb3a>
 800b2a4:	fff00000 	.word	0xfff00000
 800b2a8:	000fffff 	.word	0x000fffff
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	3fe00000 	.word	0x3fe00000
 800b2b4:	7ff00000 	.word	0x7ff00000
 800b2b8:	7fe00000 	.word	0x7fe00000
 800b2bc:	fcb00000 	.word	0xfcb00000
 800b2c0:	7c9fffff 	.word	0x7c9fffff
 800b2c4:	7fefffff 	.word	0x7fefffff
 800b2c8:	bff00000 	.word	0xbff00000
 800b2cc:	94a03595 	.word	0x94a03595
 800b2d0:	3fdfffff 	.word	0x3fdfffff
 800b2d4:	35afe535 	.word	0x35afe535
 800b2d8:	ffc00000 	.word	0xffc00000
 800b2dc:	41dfffff 	.word	0x41dfffff
 800b2e0:	3fcfffff 	.word	0x3fcfffff

0800b2e4 <_strtod_r>:
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <_strtod_r+0xc>)
 800b2e8:	f7ff f9f2 	bl	800a6d0 <_strtod_l>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	2000043c 	.word	0x2000043c

0800b2f4 <strtod>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	4c04      	ldr	r4, [pc, #16]	; (800b308 <strtod+0x14>)
 800b2f8:	000a      	movs	r2, r1
 800b2fa:	0001      	movs	r1, r0
 800b2fc:	4b03      	ldr	r3, [pc, #12]	; (800b30c <strtod+0x18>)
 800b2fe:	6820      	ldr	r0, [r4, #0]
 800b300:	f7ff f9e6 	bl	800a6d0 <_strtod_l>
 800b304:	bd10      	pop	{r4, pc}
 800b306:	46c0      	nop			; (mov r8, r8)
 800b308:	200006c8 	.word	0x200006c8
 800b30c:	2000043c 	.word	0x2000043c

0800b310 <_strtol_l.constprop.0>:
 800b310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b312:	b087      	sub	sp, #28
 800b314:	001e      	movs	r6, r3
 800b316:	9005      	str	r0, [sp, #20]
 800b318:	9101      	str	r1, [sp, #4]
 800b31a:	9202      	str	r2, [sp, #8]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d048      	beq.n	800b3b2 <_strtol_l.constprop.0+0xa2>
 800b320:	000b      	movs	r3, r1
 800b322:	2e24      	cmp	r6, #36	; 0x24
 800b324:	d845      	bhi.n	800b3b2 <_strtol_l.constprop.0+0xa2>
 800b326:	4a3b      	ldr	r2, [pc, #236]	; (800b414 <_strtol_l.constprop.0+0x104>)
 800b328:	2108      	movs	r1, #8
 800b32a:	4694      	mov	ip, r2
 800b32c:	001a      	movs	r2, r3
 800b32e:	4660      	mov	r0, ip
 800b330:	7814      	ldrb	r4, [r2, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	5d00      	ldrb	r0, [r0, r4]
 800b336:	001d      	movs	r5, r3
 800b338:	0007      	movs	r7, r0
 800b33a:	400f      	ands	r7, r1
 800b33c:	4208      	tst	r0, r1
 800b33e:	d1f5      	bne.n	800b32c <_strtol_l.constprop.0+0x1c>
 800b340:	2c2d      	cmp	r4, #45	; 0x2d
 800b342:	d13d      	bne.n	800b3c0 <_strtol_l.constprop.0+0xb0>
 800b344:	2701      	movs	r7, #1
 800b346:	781c      	ldrb	r4, [r3, #0]
 800b348:	1c95      	adds	r5, r2, #2
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d05e      	beq.n	800b40c <_strtol_l.constprop.0+0xfc>
 800b34e:	2e10      	cmp	r6, #16
 800b350:	d109      	bne.n	800b366 <_strtol_l.constprop.0+0x56>
 800b352:	2c30      	cmp	r4, #48	; 0x30
 800b354:	d107      	bne.n	800b366 <_strtol_l.constprop.0+0x56>
 800b356:	2220      	movs	r2, #32
 800b358:	782b      	ldrb	r3, [r5, #0]
 800b35a:	4393      	bics	r3, r2
 800b35c:	2b58      	cmp	r3, #88	; 0x58
 800b35e:	d150      	bne.n	800b402 <_strtol_l.constprop.0+0xf2>
 800b360:	2610      	movs	r6, #16
 800b362:	786c      	ldrb	r4, [r5, #1]
 800b364:	3502      	adds	r5, #2
 800b366:	4b2c      	ldr	r3, [pc, #176]	; (800b418 <_strtol_l.constprop.0+0x108>)
 800b368:	0031      	movs	r1, r6
 800b36a:	18fb      	adds	r3, r7, r3
 800b36c:	0018      	movs	r0, r3
 800b36e:	9303      	str	r3, [sp, #12]
 800b370:	f7f4 ff6a 	bl	8000248 <__aeabi_uidivmod>
 800b374:	2200      	movs	r2, #0
 800b376:	9104      	str	r1, [sp, #16]
 800b378:	2101      	movs	r1, #1
 800b37a:	4684      	mov	ip, r0
 800b37c:	0010      	movs	r0, r2
 800b37e:	4249      	negs	r1, r1
 800b380:	0023      	movs	r3, r4
 800b382:	3b30      	subs	r3, #48	; 0x30
 800b384:	2b09      	cmp	r3, #9
 800b386:	d903      	bls.n	800b390 <_strtol_l.constprop.0+0x80>
 800b388:	3b11      	subs	r3, #17
 800b38a:	2b19      	cmp	r3, #25
 800b38c:	d81d      	bhi.n	800b3ca <_strtol_l.constprop.0+0xba>
 800b38e:	330a      	adds	r3, #10
 800b390:	429e      	cmp	r6, r3
 800b392:	dd1e      	ble.n	800b3d2 <_strtol_l.constprop.0+0xc2>
 800b394:	1c54      	adds	r4, r2, #1
 800b396:	d009      	beq.n	800b3ac <_strtol_l.constprop.0+0x9c>
 800b398:	000a      	movs	r2, r1
 800b39a:	4584      	cmp	ip, r0
 800b39c:	d306      	bcc.n	800b3ac <_strtol_l.constprop.0+0x9c>
 800b39e:	d102      	bne.n	800b3a6 <_strtol_l.constprop.0+0x96>
 800b3a0:	9c04      	ldr	r4, [sp, #16]
 800b3a2:	429c      	cmp	r4, r3
 800b3a4:	db02      	blt.n	800b3ac <_strtol_l.constprop.0+0x9c>
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	4370      	muls	r0, r6
 800b3aa:	1818      	adds	r0, r3, r0
 800b3ac:	782c      	ldrb	r4, [r5, #0]
 800b3ae:	3501      	adds	r5, #1
 800b3b0:	e7e6      	b.n	800b380 <_strtol_l.constprop.0+0x70>
 800b3b2:	f000 fa7d 	bl	800b8b0 <__errno>
 800b3b6:	2316      	movs	r3, #22
 800b3b8:	6003      	str	r3, [r0, #0]
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	b007      	add	sp, #28
 800b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c0:	2c2b      	cmp	r4, #43	; 0x2b
 800b3c2:	d1c2      	bne.n	800b34a <_strtol_l.constprop.0+0x3a>
 800b3c4:	781c      	ldrb	r4, [r3, #0]
 800b3c6:	1c95      	adds	r5, r2, #2
 800b3c8:	e7bf      	b.n	800b34a <_strtol_l.constprop.0+0x3a>
 800b3ca:	0023      	movs	r3, r4
 800b3cc:	3b61      	subs	r3, #97	; 0x61
 800b3ce:	2b19      	cmp	r3, #25
 800b3d0:	d9dd      	bls.n	800b38e <_strtol_l.constprop.0+0x7e>
 800b3d2:	1c53      	adds	r3, r2, #1
 800b3d4:	d109      	bne.n	800b3ea <_strtol_l.constprop.0+0xda>
 800b3d6:	2322      	movs	r3, #34	; 0x22
 800b3d8:	9a05      	ldr	r2, [sp, #20]
 800b3da:	9803      	ldr	r0, [sp, #12]
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	9b02      	ldr	r3, [sp, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0eb      	beq.n	800b3bc <_strtol_l.constprop.0+0xac>
 800b3e4:	1e6b      	subs	r3, r5, #1
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	e007      	b.n	800b3fa <_strtol_l.constprop.0+0xea>
 800b3ea:	2f00      	cmp	r7, #0
 800b3ec:	d000      	beq.n	800b3f0 <_strtol_l.constprop.0+0xe0>
 800b3ee:	4240      	negs	r0, r0
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0e2      	beq.n	800b3bc <_strtol_l.constprop.0+0xac>
 800b3f6:	2a00      	cmp	r2, #0
 800b3f8:	d1f4      	bne.n	800b3e4 <_strtol_l.constprop.0+0xd4>
 800b3fa:	9b02      	ldr	r3, [sp, #8]
 800b3fc:	9a01      	ldr	r2, [sp, #4]
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	e7dc      	b.n	800b3bc <_strtol_l.constprop.0+0xac>
 800b402:	2430      	movs	r4, #48	; 0x30
 800b404:	2e00      	cmp	r6, #0
 800b406:	d1ae      	bne.n	800b366 <_strtol_l.constprop.0+0x56>
 800b408:	3608      	adds	r6, #8
 800b40a:	e7ac      	b.n	800b366 <_strtol_l.constprop.0+0x56>
 800b40c:	2c30      	cmp	r4, #48	; 0x30
 800b40e:	d0a2      	beq.n	800b356 <_strtol_l.constprop.0+0x46>
 800b410:	260a      	movs	r6, #10
 800b412:	e7a8      	b.n	800b366 <_strtol_l.constprop.0+0x56>
 800b414:	08013dc9 	.word	0x08013dc9
 800b418:	7fffffff 	.word	0x7fffffff

0800b41c <_strtol_r>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	f7ff ff77 	bl	800b310 <_strtol_l.constprop.0>
 800b422:	bd10      	pop	{r4, pc}

0800b424 <strtol>:
 800b424:	b510      	push	{r4, lr}
 800b426:	4c04      	ldr	r4, [pc, #16]	; (800b438 <strtol+0x14>)
 800b428:	0013      	movs	r3, r2
 800b42a:	000a      	movs	r2, r1
 800b42c:	0001      	movs	r1, r0
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	f7ff ff6e 	bl	800b310 <_strtol_l.constprop.0>
 800b434:	bd10      	pop	{r4, pc}
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	200006c8 	.word	0x200006c8

0800b43c <std>:
 800b43c:	2300      	movs	r3, #0
 800b43e:	b510      	push	{r4, lr}
 800b440:	0004      	movs	r4, r0
 800b442:	6003      	str	r3, [r0, #0]
 800b444:	6043      	str	r3, [r0, #4]
 800b446:	6083      	str	r3, [r0, #8]
 800b448:	8181      	strh	r1, [r0, #12]
 800b44a:	6643      	str	r3, [r0, #100]	; 0x64
 800b44c:	81c2      	strh	r2, [r0, #14]
 800b44e:	6103      	str	r3, [r0, #16]
 800b450:	6143      	str	r3, [r0, #20]
 800b452:	6183      	str	r3, [r0, #24]
 800b454:	0019      	movs	r1, r3
 800b456:	2208      	movs	r2, #8
 800b458:	305c      	adds	r0, #92	; 0x5c
 800b45a:	f000 f97d 	bl	800b758 <memset>
 800b45e:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <std+0x50>)
 800b460:	61e4      	str	r4, [r4, #28]
 800b462:	6223      	str	r3, [r4, #32]
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <std+0x54>)
 800b466:	6263      	str	r3, [r4, #36]	; 0x24
 800b468:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <std+0x58>)
 800b46a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b46c:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <std+0x5c>)
 800b46e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b470:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <std+0x60>)
 800b472:	429c      	cmp	r4, r3
 800b474:	d005      	beq.n	800b482 <std+0x46>
 800b476:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <std+0x64>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	d002      	beq.n	800b482 <std+0x46>
 800b47c:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <std+0x68>)
 800b47e:	429c      	cmp	r4, r3
 800b480:	d103      	bne.n	800b48a <std+0x4e>
 800b482:	0020      	movs	r0, r4
 800b484:	3058      	adds	r0, #88	; 0x58
 800b486:	f000 fa3d 	bl	800b904 <__retarget_lock_init_recursive>
 800b48a:	bd10      	pop	{r4, pc}
 800b48c:	0800b6bd 	.word	0x0800b6bd
 800b490:	0800b6e9 	.word	0x0800b6e9
 800b494:	0800b721 	.word	0x0800b721
 800b498:	0800b74d 	.word	0x0800b74d
 800b49c:	20000c30 	.word	0x20000c30
 800b4a0:	20000c98 	.word	0x20000c98
 800b4a4:	20000d00 	.word	0x20000d00

0800b4a8 <stdio_exit_handler>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4a03      	ldr	r2, [pc, #12]	; (800b4b8 <stdio_exit_handler+0x10>)
 800b4ac:	4903      	ldr	r1, [pc, #12]	; (800b4bc <stdio_exit_handler+0x14>)
 800b4ae:	4804      	ldr	r0, [pc, #16]	; (800b4c0 <stdio_exit_handler+0x18>)
 800b4b0:	f000 f86c 	bl	800b58c <_fwalk_sglue>
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	20000430 	.word	0x20000430
 800b4bc:	0800f405 	.word	0x0800f405
 800b4c0:	200005a8 	.word	0x200005a8

0800b4c4 <cleanup_stdio>:
 800b4c4:	6841      	ldr	r1, [r0, #4]
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	; (800b4f4 <cleanup_stdio+0x30>)
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	0004      	movs	r4, r0
 800b4cc:	4299      	cmp	r1, r3
 800b4ce:	d001      	beq.n	800b4d4 <cleanup_stdio+0x10>
 800b4d0:	f003 ff98 	bl	800f404 <_fclose_r>
 800b4d4:	68a1      	ldr	r1, [r4, #8]
 800b4d6:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <cleanup_stdio+0x34>)
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	d002      	beq.n	800b4e2 <cleanup_stdio+0x1e>
 800b4dc:	0020      	movs	r0, r4
 800b4de:	f003 ff91 	bl	800f404 <_fclose_r>
 800b4e2:	68e1      	ldr	r1, [r4, #12]
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <cleanup_stdio+0x38>)
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	d002      	beq.n	800b4f0 <cleanup_stdio+0x2c>
 800b4ea:	0020      	movs	r0, r4
 800b4ec:	f003 ff8a 	bl	800f404 <_fclose_r>
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	20000c30 	.word	0x20000c30
 800b4f8:	20000c98 	.word	0x20000c98
 800b4fc:	20000d00 	.word	0x20000d00

0800b500 <global_stdio_init.part.0>:
 800b500:	b510      	push	{r4, lr}
 800b502:	4b09      	ldr	r3, [pc, #36]	; (800b528 <global_stdio_init.part.0+0x28>)
 800b504:	4a09      	ldr	r2, [pc, #36]	; (800b52c <global_stdio_init.part.0+0x2c>)
 800b506:	2104      	movs	r1, #4
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	4809      	ldr	r0, [pc, #36]	; (800b530 <global_stdio_init.part.0+0x30>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	f7ff ff95 	bl	800b43c <std>
 800b512:	2201      	movs	r2, #1
 800b514:	2109      	movs	r1, #9
 800b516:	4807      	ldr	r0, [pc, #28]	; (800b534 <global_stdio_init.part.0+0x34>)
 800b518:	f7ff ff90 	bl	800b43c <std>
 800b51c:	2202      	movs	r2, #2
 800b51e:	2112      	movs	r1, #18
 800b520:	4805      	ldr	r0, [pc, #20]	; (800b538 <global_stdio_init.part.0+0x38>)
 800b522:	f7ff ff8b 	bl	800b43c <std>
 800b526:	bd10      	pop	{r4, pc}
 800b528:	20000d68 	.word	0x20000d68
 800b52c:	0800b4a9 	.word	0x0800b4a9
 800b530:	20000c30 	.word	0x20000c30
 800b534:	20000c98 	.word	0x20000c98
 800b538:	20000d00 	.word	0x20000d00

0800b53c <__sfp_lock_acquire>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	4802      	ldr	r0, [pc, #8]	; (800b548 <__sfp_lock_acquire+0xc>)
 800b540:	f000 f9e2 	bl	800b908 <__retarget_lock_acquire_recursive>
 800b544:	bd10      	pop	{r4, pc}
 800b546:	46c0      	nop			; (mov r8, r8)
 800b548:	20000d72 	.word	0x20000d72

0800b54c <__sfp_lock_release>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	4802      	ldr	r0, [pc, #8]	; (800b558 <__sfp_lock_release+0xc>)
 800b550:	f000 f9db 	bl	800b90a <__retarget_lock_release_recursive>
 800b554:	bd10      	pop	{r4, pc}
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	20000d72 	.word	0x20000d72

0800b55c <__sinit>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	0004      	movs	r4, r0
 800b560:	f7ff ffec 	bl	800b53c <__sfp_lock_acquire>
 800b564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <__sinit+0x14>
 800b56a:	f7ff ffef 	bl	800b54c <__sfp_lock_release>
 800b56e:	bd10      	pop	{r4, pc}
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <__sinit+0x28>)
 800b572:	6363      	str	r3, [r4, #52]	; 0x34
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <__sinit+0x2c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1f6      	bne.n	800b56a <__sinit+0xe>
 800b57c:	f7ff ffc0 	bl	800b500 <global_stdio_init.part.0>
 800b580:	e7f3      	b.n	800b56a <__sinit+0xe>
 800b582:	46c0      	nop			; (mov r8, r8)
 800b584:	0800b4c5 	.word	0x0800b4c5
 800b588:	20000d68 	.word	0x20000d68

0800b58c <_fwalk_sglue>:
 800b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b58e:	0014      	movs	r4, r2
 800b590:	2600      	movs	r6, #0
 800b592:	9000      	str	r0, [sp, #0]
 800b594:	9101      	str	r1, [sp, #4]
 800b596:	68a5      	ldr	r5, [r4, #8]
 800b598:	6867      	ldr	r7, [r4, #4]
 800b59a:	3f01      	subs	r7, #1
 800b59c:	d504      	bpl.n	800b5a8 <_fwalk_sglue+0x1c>
 800b59e:	6824      	ldr	r4, [r4, #0]
 800b5a0:	2c00      	cmp	r4, #0
 800b5a2:	d1f8      	bne.n	800b596 <_fwalk_sglue+0xa>
 800b5a4:	0030      	movs	r0, r6
 800b5a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5a8:	89ab      	ldrh	r3, [r5, #12]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d908      	bls.n	800b5c0 <_fwalk_sglue+0x34>
 800b5ae:	220e      	movs	r2, #14
 800b5b0:	5eab      	ldrsh	r3, [r5, r2]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	d004      	beq.n	800b5c0 <_fwalk_sglue+0x34>
 800b5b6:	0029      	movs	r1, r5
 800b5b8:	9800      	ldr	r0, [sp, #0]
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	4798      	blx	r3
 800b5be:	4306      	orrs	r6, r0
 800b5c0:	3568      	adds	r5, #104	; 0x68
 800b5c2:	e7ea      	b.n	800b59a <_fwalk_sglue+0xe>

0800b5c4 <snprintf>:
 800b5c4:	b40c      	push	{r2, r3}
 800b5c6:	b530      	push	{r4, r5, lr}
 800b5c8:	4b17      	ldr	r3, [pc, #92]	; (800b628 <snprintf+0x64>)
 800b5ca:	000c      	movs	r4, r1
 800b5cc:	681d      	ldr	r5, [r3, #0]
 800b5ce:	b09d      	sub	sp, #116	; 0x74
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	da08      	bge.n	800b5e6 <snprintf+0x22>
 800b5d4:	238b      	movs	r3, #139	; 0x8b
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	4240      	negs	r0, r0
 800b5dc:	b01d      	add	sp, #116	; 0x74
 800b5de:	bc30      	pop	{r4, r5}
 800b5e0:	bc08      	pop	{r3}
 800b5e2:	b002      	add	sp, #8
 800b5e4:	4718      	bx	r3
 800b5e6:	2382      	movs	r3, #130	; 0x82
 800b5e8:	466a      	mov	r2, sp
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	8293      	strh	r3, [r2, #20]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9002      	str	r0, [sp, #8]
 800b5f2:	9006      	str	r0, [sp, #24]
 800b5f4:	4299      	cmp	r1, r3
 800b5f6:	d000      	beq.n	800b5fa <snprintf+0x36>
 800b5f8:	1e4b      	subs	r3, r1, #1
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	9307      	str	r3, [sp, #28]
 800b5fe:	2301      	movs	r3, #1
 800b600:	466a      	mov	r2, sp
 800b602:	425b      	negs	r3, r3
 800b604:	82d3      	strh	r3, [r2, #22]
 800b606:	0028      	movs	r0, r5
 800b608:	ab21      	add	r3, sp, #132	; 0x84
 800b60a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b60c:	a902      	add	r1, sp, #8
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	f001 fa9a 	bl	800cb48 <_svfprintf_r>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	da01      	bge.n	800b61c <snprintf+0x58>
 800b618:	238b      	movs	r3, #139	; 0x8b
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	2c00      	cmp	r4, #0
 800b61e:	d0dd      	beq.n	800b5dc <snprintf+0x18>
 800b620:	2200      	movs	r2, #0
 800b622:	9b02      	ldr	r3, [sp, #8]
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e7d9      	b.n	800b5dc <snprintf+0x18>
 800b628:	200006c8 	.word	0x200006c8

0800b62c <sprintf>:
 800b62c:	b40e      	push	{r1, r2, r3}
 800b62e:	b500      	push	{lr}
 800b630:	490b      	ldr	r1, [pc, #44]	; (800b660 <sprintf+0x34>)
 800b632:	b09c      	sub	sp, #112	; 0x70
 800b634:	ab1d      	add	r3, sp, #116	; 0x74
 800b636:	9002      	str	r0, [sp, #8]
 800b638:	9006      	str	r0, [sp, #24]
 800b63a:	9107      	str	r1, [sp, #28]
 800b63c:	9104      	str	r1, [sp, #16]
 800b63e:	4809      	ldr	r0, [pc, #36]	; (800b664 <sprintf+0x38>)
 800b640:	4909      	ldr	r1, [pc, #36]	; (800b668 <sprintf+0x3c>)
 800b642:	cb04      	ldmia	r3!, {r2}
 800b644:	9105      	str	r1, [sp, #20]
 800b646:	6800      	ldr	r0, [r0, #0]
 800b648:	a902      	add	r1, sp, #8
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	f001 fa7c 	bl	800cb48 <_svfprintf_r>
 800b650:	2200      	movs	r2, #0
 800b652:	9b02      	ldr	r3, [sp, #8]
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	b01c      	add	sp, #112	; 0x70
 800b658:	bc08      	pop	{r3}
 800b65a:	b003      	add	sp, #12
 800b65c:	4718      	bx	r3
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	7fffffff 	.word	0x7fffffff
 800b664:	200006c8 	.word	0x200006c8
 800b668:	ffff0208 	.word	0xffff0208

0800b66c <sscanf>:
 800b66c:	b40e      	push	{r1, r2, r3}
 800b66e:	b530      	push	{r4, r5, lr}
 800b670:	2381      	movs	r3, #129	; 0x81
 800b672:	b09c      	sub	sp, #112	; 0x70
 800b674:	466a      	mov	r2, sp
 800b676:	ac1f      	add	r4, sp, #124	; 0x7c
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	cc20      	ldmia	r4!, {r5}
 800b67c:	8293      	strh	r3, [r2, #20]
 800b67e:	9002      	str	r0, [sp, #8]
 800b680:	9006      	str	r0, [sp, #24]
 800b682:	f7f4 fd3f 	bl	8000104 <strlen>
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <sscanf+0x48>)
 800b688:	466a      	mov	r2, sp
 800b68a:	930a      	str	r3, [sp, #40]	; 0x28
 800b68c:	2300      	movs	r3, #0
 800b68e:	9003      	str	r0, [sp, #12]
 800b690:	9007      	str	r0, [sp, #28]
 800b692:	4809      	ldr	r0, [pc, #36]	; (800b6b8 <sscanf+0x4c>)
 800b694:	930e      	str	r3, [sp, #56]	; 0x38
 800b696:	9313      	str	r3, [sp, #76]	; 0x4c
 800b698:	3b01      	subs	r3, #1
 800b69a:	82d3      	strh	r3, [r2, #22]
 800b69c:	a902      	add	r1, sp, #8
 800b69e:	0023      	movs	r3, r4
 800b6a0:	002a      	movs	r2, r5
 800b6a2:	6800      	ldr	r0, [r0, #0]
 800b6a4:	9401      	str	r4, [sp, #4]
 800b6a6:	f002 fc91 	bl	800dfcc <__ssvfscanf_r>
 800b6aa:	b01c      	add	sp, #112	; 0x70
 800b6ac:	bc30      	pop	{r4, r5}
 800b6ae:	bc08      	pop	{r3}
 800b6b0:	b003      	add	sp, #12
 800b6b2:	4718      	bx	r3
 800b6b4:	0800b6e5 	.word	0x0800b6e5
 800b6b8:	200006c8 	.word	0x200006c8

0800b6bc <__sread>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	000c      	movs	r4, r1
 800b6c0:	250e      	movs	r5, #14
 800b6c2:	5f49      	ldrsh	r1, [r1, r5]
 800b6c4:	f000 f8ba 	bl	800b83c <_read_r>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	db03      	blt.n	800b6d4 <__sread+0x18>
 800b6cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b6ce:	181b      	adds	r3, r3, r0
 800b6d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	4a02      	ldr	r2, [pc, #8]	; (800b6e0 <__sread+0x24>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	e7f9      	b.n	800b6d2 <__sread+0x16>
 800b6de:	46c0      	nop			; (mov r8, r8)
 800b6e0:	ffffefff 	.word	0xffffefff

0800b6e4 <__seofread>:
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	4770      	bx	lr

0800b6e8 <__swrite>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	001f      	movs	r7, r3
 800b6ec:	898b      	ldrh	r3, [r1, #12]
 800b6ee:	0005      	movs	r5, r0
 800b6f0:	000c      	movs	r4, r1
 800b6f2:	0016      	movs	r6, r2
 800b6f4:	05db      	lsls	r3, r3, #23
 800b6f6:	d505      	bpl.n	800b704 <__swrite+0x1c>
 800b6f8:	230e      	movs	r3, #14
 800b6fa:	5ec9      	ldrsh	r1, [r1, r3]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2302      	movs	r3, #2
 800b700:	f000 f888 	bl	800b814 <_lseek_r>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	4a05      	ldr	r2, [pc, #20]	; (800b71c <__swrite+0x34>)
 800b708:	0028      	movs	r0, r5
 800b70a:	4013      	ands	r3, r2
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	0032      	movs	r2, r6
 800b710:	230e      	movs	r3, #14
 800b712:	5ee1      	ldrsh	r1, [r4, r3]
 800b714:	003b      	movs	r3, r7
 800b716:	f000 f8b7 	bl	800b888 <_write_r>
 800b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71c:	ffffefff 	.word	0xffffefff

0800b720 <__sseek>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	000c      	movs	r4, r1
 800b724:	250e      	movs	r5, #14
 800b726:	5f49      	ldrsh	r1, [r1, r5]
 800b728:	f000 f874 	bl	800b814 <_lseek_r>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	1c42      	adds	r2, r0, #1
 800b730:	d103      	bne.n	800b73a <__sseek+0x1a>
 800b732:	4a05      	ldr	r2, [pc, #20]	; (800b748 <__sseek+0x28>)
 800b734:	4013      	ands	r3, r2
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	2280      	movs	r2, #128	; 0x80
 800b73c:	0152      	lsls	r2, r2, #5
 800b73e:	4313      	orrs	r3, r2
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	6520      	str	r0, [r4, #80]	; 0x50
 800b744:	e7f8      	b.n	800b738 <__sseek+0x18>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	ffffefff 	.word	0xffffefff

0800b74c <__sclose>:
 800b74c:	b510      	push	{r4, lr}
 800b74e:	230e      	movs	r3, #14
 800b750:	5ec9      	ldrsh	r1, [r1, r3]
 800b752:	f000 f84d 	bl	800b7f0 <_close_r>
 800b756:	bd10      	pop	{r4, pc}

0800b758 <memset>:
 800b758:	0003      	movs	r3, r0
 800b75a:	1882      	adds	r2, r0, r2
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d100      	bne.n	800b762 <memset+0xa>
 800b760:	4770      	bx	lr
 800b762:	7019      	strb	r1, [r3, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	e7f9      	b.n	800b75c <memset+0x4>

0800b768 <strncmp>:
 800b768:	b530      	push	{r4, r5, lr}
 800b76a:	0005      	movs	r5, r0
 800b76c:	1e10      	subs	r0, r2, #0
 800b76e:	d00b      	beq.n	800b788 <strncmp+0x20>
 800b770:	2400      	movs	r4, #0
 800b772:	3a01      	subs	r2, #1
 800b774:	5d2b      	ldrb	r3, [r5, r4]
 800b776:	5d08      	ldrb	r0, [r1, r4]
 800b778:	4283      	cmp	r3, r0
 800b77a:	d104      	bne.n	800b786 <strncmp+0x1e>
 800b77c:	42a2      	cmp	r2, r4
 800b77e:	d002      	beq.n	800b786 <strncmp+0x1e>
 800b780:	3401      	adds	r4, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f6      	bne.n	800b774 <strncmp+0xc>
 800b786:	1a18      	subs	r0, r3, r0
 800b788:	bd30      	pop	{r4, r5, pc}

0800b78a <strncpy>:
 800b78a:	0003      	movs	r3, r0
 800b78c:	b530      	push	{r4, r5, lr}
 800b78e:	001d      	movs	r5, r3
 800b790:	2a00      	cmp	r2, #0
 800b792:	d006      	beq.n	800b7a2 <strncpy+0x18>
 800b794:	780c      	ldrb	r4, [r1, #0]
 800b796:	3a01      	subs	r2, #1
 800b798:	3301      	adds	r3, #1
 800b79a:	702c      	strb	r4, [r5, #0]
 800b79c:	3101      	adds	r1, #1
 800b79e:	2c00      	cmp	r4, #0
 800b7a0:	d1f5      	bne.n	800b78e <strncpy+0x4>
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	189a      	adds	r2, r3, r2
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d100      	bne.n	800b7ac <strncpy+0x22>
 800b7aa:	bd30      	pop	{r4, r5, pc}
 800b7ac:	7019      	strb	r1, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	e7f9      	b.n	800b7a6 <strncpy+0x1c>

0800b7b2 <strstr>:
 800b7b2:	780a      	ldrb	r2, [r1, #0]
 800b7b4:	b530      	push	{r4, r5, lr}
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	d10c      	bne.n	800b7d4 <strstr+0x22>
 800b7ba:	bd30      	pop	{r4, r5, pc}
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d108      	bne.n	800b7d2 <strstr+0x20>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	5ccc      	ldrb	r4, [r1, r3]
 800b7c4:	2c00      	cmp	r4, #0
 800b7c6:	d0f8      	beq.n	800b7ba <strstr+0x8>
 800b7c8:	5cc5      	ldrb	r5, [r0, r3]
 800b7ca:	42a5      	cmp	r5, r4
 800b7cc:	d101      	bne.n	800b7d2 <strstr+0x20>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	e7f7      	b.n	800b7c2 <strstr+0x10>
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	7803      	ldrb	r3, [r0, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1f0      	bne.n	800b7bc <strstr+0xa>
 800b7da:	0018      	movs	r0, r3
 800b7dc:	e7ed      	b.n	800b7ba <strstr+0x8>
	...

0800b7e0 <__locale_mb_cur_max>:
 800b7e0:	2294      	movs	r2, #148	; 0x94
 800b7e2:	4b02      	ldr	r3, [pc, #8]	; (800b7ec <__locale_mb_cur_max+0xc>)
 800b7e4:	0052      	lsls	r2, r2, #1
 800b7e6:	5c98      	ldrb	r0, [r3, r2]
 800b7e8:	4770      	bx	lr
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	2000043c 	.word	0x2000043c

0800b7f0 <_close_r>:
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	b570      	push	{r4, r5, r6, lr}
 800b7f4:	4d06      	ldr	r5, [pc, #24]	; (800b810 <_close_r+0x20>)
 800b7f6:	0004      	movs	r4, r0
 800b7f8:	0008      	movs	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f8 f889 	bl	8003912 <_close>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d103      	bne.n	800b80c <_close_r+0x1c>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d000      	beq.n	800b80c <_close_r+0x1c>
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	20000d6c 	.word	0x20000d6c

0800b814 <_lseek_r>:
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	0004      	movs	r4, r0
 800b818:	0008      	movs	r0, r1
 800b81a:	0011      	movs	r1, r2
 800b81c:	001a      	movs	r2, r3
 800b81e:	2300      	movs	r3, #0
 800b820:	4d05      	ldr	r5, [pc, #20]	; (800b838 <_lseek_r+0x24>)
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f8 f896 	bl	8003954 <_lseek>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d103      	bne.n	800b834 <_lseek_r+0x20>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d000      	beq.n	800b834 <_lseek_r+0x20>
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	bd70      	pop	{r4, r5, r6, pc}
 800b836:	46c0      	nop			; (mov r8, r8)
 800b838:	20000d6c 	.word	0x20000d6c

0800b83c <_read_r>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	0004      	movs	r4, r0
 800b840:	0008      	movs	r0, r1
 800b842:	0011      	movs	r1, r2
 800b844:	001a      	movs	r2, r3
 800b846:	2300      	movs	r3, #0
 800b848:	4d05      	ldr	r5, [pc, #20]	; (800b860 <_read_r+0x24>)
 800b84a:	602b      	str	r3, [r5, #0]
 800b84c:	f7f8 f828 	bl	80038a0 <_read>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d103      	bne.n	800b85c <_read_r+0x20>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d000      	beq.n	800b85c <_read_r+0x20>
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	20000d6c 	.word	0x20000d6c

0800b864 <_sbrk_r>:
 800b864:	2300      	movs	r3, #0
 800b866:	b570      	push	{r4, r5, r6, lr}
 800b868:	4d06      	ldr	r5, [pc, #24]	; (800b884 <_sbrk_r+0x20>)
 800b86a:	0004      	movs	r4, r0
 800b86c:	0008      	movs	r0, r1
 800b86e:	602b      	str	r3, [r5, #0]
 800b870:	f7f8 f87c 	bl	800396c <_sbrk>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d103      	bne.n	800b880 <_sbrk_r+0x1c>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d000      	beq.n	800b880 <_sbrk_r+0x1c>
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	46c0      	nop			; (mov r8, r8)
 800b884:	20000d6c 	.word	0x20000d6c

0800b888 <_write_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	0004      	movs	r4, r0
 800b88c:	0008      	movs	r0, r1
 800b88e:	0011      	movs	r1, r2
 800b890:	001a      	movs	r2, r3
 800b892:	2300      	movs	r3, #0
 800b894:	4d05      	ldr	r5, [pc, #20]	; (800b8ac <_write_r+0x24>)
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f8 f81f 	bl	80038da <_write>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d103      	bne.n	800b8a8 <_write_r+0x20>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d000      	beq.n	800b8a8 <_write_r+0x20>
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	bd70      	pop	{r4, r5, r6, pc}
 800b8aa:	46c0      	nop			; (mov r8, r8)
 800b8ac:	20000d6c 	.word	0x20000d6c

0800b8b0 <__errno>:
 800b8b0:	4b01      	ldr	r3, [pc, #4]	; (800b8b8 <__errno+0x8>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	4770      	bx	lr
 800b8b6:	46c0      	nop			; (mov r8, r8)
 800b8b8:	200006c8 	.word	0x200006c8

0800b8bc <__libc_init_array>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	2600      	movs	r6, #0
 800b8c0:	4c0c      	ldr	r4, [pc, #48]	; (800b8f4 <__libc_init_array+0x38>)
 800b8c2:	4d0d      	ldr	r5, [pc, #52]	; (800b8f8 <__libc_init_array+0x3c>)
 800b8c4:	1b64      	subs	r4, r4, r5
 800b8c6:	10a4      	asrs	r4, r4, #2
 800b8c8:	42a6      	cmp	r6, r4
 800b8ca:	d109      	bne.n	800b8e0 <__libc_init_array+0x24>
 800b8cc:	2600      	movs	r6, #0
 800b8ce:	f006 fcc5 	bl	801225c <_init>
 800b8d2:	4c0a      	ldr	r4, [pc, #40]	; (800b8fc <__libc_init_array+0x40>)
 800b8d4:	4d0a      	ldr	r5, [pc, #40]	; (800b900 <__libc_init_array+0x44>)
 800b8d6:	1b64      	subs	r4, r4, r5
 800b8d8:	10a4      	asrs	r4, r4, #2
 800b8da:	42a6      	cmp	r6, r4
 800b8dc:	d105      	bne.n	800b8ea <__libc_init_array+0x2e>
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	00b3      	lsls	r3, r6, #2
 800b8e2:	58eb      	ldr	r3, [r5, r3]
 800b8e4:	4798      	blx	r3
 800b8e6:	3601      	adds	r6, #1
 800b8e8:	e7ee      	b.n	800b8c8 <__libc_init_array+0xc>
 800b8ea:	00b3      	lsls	r3, r6, #2
 800b8ec:	58eb      	ldr	r3, [r5, r3]
 800b8ee:	4798      	blx	r3
 800b8f0:	3601      	adds	r6, #1
 800b8f2:	e7f2      	b.n	800b8da <__libc_init_array+0x1e>
 800b8f4:	080141e4 	.word	0x080141e4
 800b8f8:	080141e4 	.word	0x080141e4
 800b8fc:	080141ec 	.word	0x080141ec
 800b900:	080141e4 	.word	0x080141e4

0800b904 <__retarget_lock_init_recursive>:
 800b904:	4770      	bx	lr

0800b906 <__retarget_lock_close_recursive>:
 800b906:	4770      	bx	lr

0800b908 <__retarget_lock_acquire_recursive>:
 800b908:	4770      	bx	lr

0800b90a <__retarget_lock_release_recursive>:
 800b90a:	4770      	bx	lr

0800b90c <sysconf>:
 800b90c:	2380      	movs	r3, #128	; 0x80
 800b90e:	b510      	push	{r4, lr}
 800b910:	2808      	cmp	r0, #8
 800b912:	d004      	beq.n	800b91e <sysconf+0x12>
 800b914:	f7ff ffcc 	bl	800b8b0 <__errno>
 800b918:	2316      	movs	r3, #22
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	3b17      	subs	r3, #23
 800b91e:	0018      	movs	r0, r3
 800b920:	bd10      	pop	{r4, pc}

0800b922 <memcpy>:
 800b922:	2300      	movs	r3, #0
 800b924:	b510      	push	{r4, lr}
 800b926:	429a      	cmp	r2, r3
 800b928:	d100      	bne.n	800b92c <memcpy+0xa>
 800b92a:	bd10      	pop	{r4, pc}
 800b92c:	5ccc      	ldrb	r4, [r1, r3]
 800b92e:	54c4      	strb	r4, [r0, r3]
 800b930:	3301      	adds	r3, #1
 800b932:	e7f8      	b.n	800b926 <memcpy+0x4>

0800b934 <nan>:
 800b934:	2000      	movs	r0, #0
 800b936:	4901      	ldr	r1, [pc, #4]	; (800b93c <nan+0x8>)
 800b938:	4770      	bx	lr
 800b93a:	46c0      	nop			; (mov r8, r8)
 800b93c:	7ff80000 	.word	0x7ff80000

0800b940 <nanf>:
 800b940:	4800      	ldr	r0, [pc, #0]	; (800b944 <nanf+0x4>)
 800b942:	4770      	bx	lr
 800b944:	7fc00000 	.word	0x7fc00000

0800b948 <register_fini>:
 800b948:	4b03      	ldr	r3, [pc, #12]	; (800b958 <register_fini+0x10>)
 800b94a:	b510      	push	{r4, lr}
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <register_fini+0xe>
 800b950:	4802      	ldr	r0, [pc, #8]	; (800b95c <register_fini+0x14>)
 800b952:	f000 f805 	bl	800b960 <atexit>
 800b956:	bd10      	pop	{r4, pc}
 800b958:	00000000 	.word	0x00000000
 800b95c:	0800f6bd 	.word	0x0800f6bd

0800b960 <atexit>:
 800b960:	2300      	movs	r3, #0
 800b962:	b510      	push	{r4, lr}
 800b964:	0001      	movs	r1, r0
 800b966:	001a      	movs	r2, r3
 800b968:	0018      	movs	r0, r3
 800b96a:	f003 fef9 	bl	800f760 <__register_exitproc>
 800b96e:	bd10      	pop	{r4, pc}

0800b970 <_malloc_trim_r>:
 800b970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b972:	0004      	movs	r4, r0
 800b974:	2008      	movs	r0, #8
 800b976:	000d      	movs	r5, r1
 800b978:	f7ff ffc8 	bl	800b90c <sysconf>
 800b97c:	0006      	movs	r6, r0
 800b97e:	0020      	movs	r0, r4
 800b980:	f7fe fe7e 	bl	800a680 <__malloc_lock>
 800b984:	2203      	movs	r2, #3
 800b986:	4f21      	ldr	r7, [pc, #132]	; (800ba0c <_malloc_trim_r+0x9c>)
 800b988:	0031      	movs	r1, r6
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	4393      	bics	r3, r2
 800b990:	1b58      	subs	r0, r3, r5
 800b992:	3811      	subs	r0, #17
 800b994:	1980      	adds	r0, r0, r6
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	f7f4 fbd0 	bl	800013c <__udivsi3>
 800b99c:	1e45      	subs	r5, r0, #1
 800b99e:	4375      	muls	r5, r6
 800b9a0:	42ae      	cmp	r6, r5
 800b9a2:	dd04      	ble.n	800b9ae <_malloc_trim_r+0x3e>
 800b9a4:	0020      	movs	r0, r4
 800b9a6:	f7fe fe73 	bl	800a690 <__malloc_unlock>
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	0020      	movs	r0, r4
 800b9b2:	f7ff ff57 	bl	800b864 <_sbrk_r>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	9a01      	ldr	r2, [sp, #4]
 800b9ba:	189b      	adds	r3, r3, r2
 800b9bc:	4298      	cmp	r0, r3
 800b9be:	d1f1      	bne.n	800b9a4 <_malloc_trim_r+0x34>
 800b9c0:	0020      	movs	r0, r4
 800b9c2:	4269      	negs	r1, r5
 800b9c4:	f7ff ff4e 	bl	800b864 <_sbrk_r>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d110      	bne.n	800b9ee <_malloc_trim_r+0x7e>
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	0020      	movs	r0, r4
 800b9d0:	f7ff ff48 	bl	800b864 <_sbrk_r>
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	1a81      	subs	r1, r0, r2
 800b9d8:	290f      	cmp	r1, #15
 800b9da:	dde3      	ble.n	800b9a4 <_malloc_trim_r+0x34>
 800b9dc:	4d0c      	ldr	r5, [pc, #48]	; (800ba10 <_malloc_trim_r+0xa0>)
 800b9de:	4b0d      	ldr	r3, [pc, #52]	; (800ba14 <_malloc_trim_r+0xa4>)
 800b9e0:	682d      	ldr	r5, [r5, #0]
 800b9e2:	1b40      	subs	r0, r0, r5
 800b9e4:	6018      	str	r0, [r3, #0]
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	6053      	str	r3, [r2, #4]
 800b9ec:	e7da      	b.n	800b9a4 <_malloc_trim_r+0x34>
 800b9ee:	2601      	movs	r6, #1
 800b9f0:	9b01      	ldr	r3, [sp, #4]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	1b5b      	subs	r3, r3, r5
 800b9f6:	4333      	orrs	r3, r6
 800b9f8:	6053      	str	r3, [r2, #4]
 800b9fa:	4a06      	ldr	r2, [pc, #24]	; (800ba14 <_malloc_trim_r+0xa4>)
 800b9fc:	0020      	movs	r0, r4
 800b9fe:	6813      	ldr	r3, [r2, #0]
 800ba00:	1b5b      	subs	r3, r3, r5
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	f7fe fe44 	bl	800a690 <__malloc_unlock>
 800ba08:	0030      	movs	r0, r6
 800ba0a:	e7cf      	b.n	800b9ac <_malloc_trim_r+0x3c>
 800ba0c:	20000020 	.word	0x20000020
 800ba10:	20000428 	.word	0x20000428
 800ba14:	20000bfc 	.word	0x20000bfc

0800ba18 <_free_r>:
 800ba18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1a:	1e0d      	subs	r5, r1, #0
 800ba1c:	9001      	str	r0, [sp, #4]
 800ba1e:	d02d      	beq.n	800ba7c <_free_r+0x64>
 800ba20:	f7fe fe2e 	bl	800a680 <__malloc_lock>
 800ba24:	2301      	movs	r3, #1
 800ba26:	0029      	movs	r1, r5
 800ba28:	469c      	mov	ip, r3
 800ba2a:	3908      	subs	r1, #8
 800ba2c:	684f      	ldr	r7, [r1, #4]
 800ba2e:	4662      	mov	r2, ip
 800ba30:	003b      	movs	r3, r7
 800ba32:	4664      	mov	r4, ip
 800ba34:	4393      	bics	r3, r2
 800ba36:	18c8      	adds	r0, r1, r3
 800ba38:	6845      	ldr	r5, [r0, #4]
 800ba3a:	3202      	adds	r2, #2
 800ba3c:	4395      	bics	r5, r2
 800ba3e:	4a4a      	ldr	r2, [pc, #296]	; (800bb68 <_free_r+0x150>)
 800ba40:	4027      	ands	r7, r4
 800ba42:	6896      	ldr	r6, [r2, #8]
 800ba44:	4286      	cmp	r6, r0
 800ba46:	d11a      	bne.n	800ba7e <_free_r+0x66>
 800ba48:	195b      	adds	r3, r3, r5
 800ba4a:	2f00      	cmp	r7, #0
 800ba4c:	d106      	bne.n	800ba5c <_free_r+0x44>
 800ba4e:	6808      	ldr	r0, [r1, #0]
 800ba50:	1a09      	subs	r1, r1, r0
 800ba52:	688d      	ldr	r5, [r1, #8]
 800ba54:	181b      	adds	r3, r3, r0
 800ba56:	68c8      	ldr	r0, [r1, #12]
 800ba58:	60e8      	str	r0, [r5, #12]
 800ba5a:	6085      	str	r5, [r0, #8]
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	4318      	orrs	r0, r3
 800ba60:	6048      	str	r0, [r1, #4]
 800ba62:	6091      	str	r1, [r2, #8]
 800ba64:	4a41      	ldr	r2, [pc, #260]	; (800bb6c <_free_r+0x154>)
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d804      	bhi.n	800ba76 <_free_r+0x5e>
 800ba6c:	4b40      	ldr	r3, [pc, #256]	; (800bb70 <_free_r+0x158>)
 800ba6e:	9801      	ldr	r0, [sp, #4]
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	f7ff ff7d 	bl	800b970 <_malloc_trim_r>
 800ba76:	9801      	ldr	r0, [sp, #4]
 800ba78:	f7fe fe0a 	bl	800a690 <__malloc_unlock>
 800ba7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ba7e:	2600      	movs	r6, #0
 800ba80:	6045      	str	r5, [r0, #4]
 800ba82:	42b7      	cmp	r7, r6
 800ba84:	d109      	bne.n	800ba9a <_free_r+0x82>
 800ba86:	680f      	ldr	r7, [r1, #0]
 800ba88:	4c3a      	ldr	r4, [pc, #232]	; (800bb74 <_free_r+0x15c>)
 800ba8a:	1bc9      	subs	r1, r1, r7
 800ba8c:	19db      	adds	r3, r3, r7
 800ba8e:	688f      	ldr	r7, [r1, #8]
 800ba90:	42a7      	cmp	r7, r4
 800ba92:	d02c      	beq.n	800baee <_free_r+0xd6>
 800ba94:	68cc      	ldr	r4, [r1, #12]
 800ba96:	60fc      	str	r4, [r7, #12]
 800ba98:	60a7      	str	r7, [r4, #8]
 800ba9a:	1947      	adds	r7, r0, r5
 800ba9c:	687c      	ldr	r4, [r7, #4]
 800ba9e:	2701      	movs	r7, #1
 800baa0:	423c      	tst	r4, r7
 800baa2:	d10b      	bne.n	800babc <_free_r+0xa4>
 800baa4:	195b      	adds	r3, r3, r5
 800baa6:	6885      	ldr	r5, [r0, #8]
 800baa8:	2e00      	cmp	r6, #0
 800baaa:	d122      	bne.n	800baf2 <_free_r+0xda>
 800baac:	4c31      	ldr	r4, [pc, #196]	; (800bb74 <_free_r+0x15c>)
 800baae:	42a5      	cmp	r5, r4
 800bab0:	d11f      	bne.n	800baf2 <_free_r+0xda>
 800bab2:	003e      	movs	r6, r7
 800bab4:	6151      	str	r1, [r2, #20]
 800bab6:	6111      	str	r1, [r2, #16]
 800bab8:	60cd      	str	r5, [r1, #12]
 800baba:	608d      	str	r5, [r1, #8]
 800babc:	2501      	movs	r5, #1
 800babe:	0028      	movs	r0, r5
 800bac0:	4318      	orrs	r0, r3
 800bac2:	6048      	str	r0, [r1, #4]
 800bac4:	50cb      	str	r3, [r1, r3]
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d1d5      	bne.n	800ba76 <_free_r+0x5e>
 800baca:	2080      	movs	r0, #128	; 0x80
 800bacc:	0080      	lsls	r0, r0, #2
 800bace:	4283      	cmp	r3, r0
 800bad0:	d213      	bcs.n	800bafa <_free_r+0xe2>
 800bad2:	08d8      	lsrs	r0, r3, #3
 800bad4:	095b      	lsrs	r3, r3, #5
 800bad6:	409d      	lsls	r5, r3
 800bad8:	6853      	ldr	r3, [r2, #4]
 800bada:	431d      	orrs	r5, r3
 800badc:	00c3      	lsls	r3, r0, #3
 800bade:	189b      	adds	r3, r3, r2
 800bae0:	6055      	str	r5, [r2, #4]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	60cb      	str	r3, [r1, #12]
 800bae6:	608a      	str	r2, [r1, #8]
 800bae8:	6099      	str	r1, [r3, #8]
 800baea:	60d1      	str	r1, [r2, #12]
 800baec:	e7c3      	b.n	800ba76 <_free_r+0x5e>
 800baee:	4666      	mov	r6, ip
 800baf0:	e7d3      	b.n	800ba9a <_free_r+0x82>
 800baf2:	68c0      	ldr	r0, [r0, #12]
 800baf4:	60e8      	str	r0, [r5, #12]
 800baf6:	6085      	str	r5, [r0, #8]
 800baf8:	e7e0      	b.n	800babc <_free_r+0xa4>
 800bafa:	0a5d      	lsrs	r5, r3, #9
 800bafc:	2d04      	cmp	r5, #4
 800bafe:	d812      	bhi.n	800bb26 <_free_r+0x10e>
 800bb00:	0998      	lsrs	r0, r3, #6
 800bb02:	3038      	adds	r0, #56	; 0x38
 800bb04:	00c6      	lsls	r6, r0, #3
 800bb06:	18b6      	adds	r6, r6, r2
 800bb08:	68b5      	ldr	r5, [r6, #8]
 800bb0a:	2703      	movs	r7, #3
 800bb0c:	42ae      	cmp	r6, r5
 800bb0e:	d125      	bne.n	800bb5c <_free_r+0x144>
 800bb10:	2301      	movs	r3, #1
 800bb12:	1080      	asrs	r0, r0, #2
 800bb14:	4083      	lsls	r3, r0
 800bb16:	6850      	ldr	r0, [r2, #4]
 800bb18:	4303      	orrs	r3, r0
 800bb1a:	6053      	str	r3, [r2, #4]
 800bb1c:	60ce      	str	r6, [r1, #12]
 800bb1e:	608d      	str	r5, [r1, #8]
 800bb20:	60b1      	str	r1, [r6, #8]
 800bb22:	60e9      	str	r1, [r5, #12]
 800bb24:	e7a7      	b.n	800ba76 <_free_r+0x5e>
 800bb26:	2d14      	cmp	r5, #20
 800bb28:	d802      	bhi.n	800bb30 <_free_r+0x118>
 800bb2a:	0028      	movs	r0, r5
 800bb2c:	305b      	adds	r0, #91	; 0x5b
 800bb2e:	e7e9      	b.n	800bb04 <_free_r+0xec>
 800bb30:	2d54      	cmp	r5, #84	; 0x54
 800bb32:	d802      	bhi.n	800bb3a <_free_r+0x122>
 800bb34:	0b18      	lsrs	r0, r3, #12
 800bb36:	306e      	adds	r0, #110	; 0x6e
 800bb38:	e7e4      	b.n	800bb04 <_free_r+0xec>
 800bb3a:	20aa      	movs	r0, #170	; 0xaa
 800bb3c:	0040      	lsls	r0, r0, #1
 800bb3e:	4285      	cmp	r5, r0
 800bb40:	d802      	bhi.n	800bb48 <_free_r+0x130>
 800bb42:	0bd8      	lsrs	r0, r3, #15
 800bb44:	3077      	adds	r0, #119	; 0x77
 800bb46:	e7dd      	b.n	800bb04 <_free_r+0xec>
 800bb48:	4e0b      	ldr	r6, [pc, #44]	; (800bb78 <_free_r+0x160>)
 800bb4a:	207e      	movs	r0, #126	; 0x7e
 800bb4c:	42b5      	cmp	r5, r6
 800bb4e:	d8d9      	bhi.n	800bb04 <_free_r+0xec>
 800bb50:	0c98      	lsrs	r0, r3, #18
 800bb52:	307c      	adds	r0, #124	; 0x7c
 800bb54:	e7d6      	b.n	800bb04 <_free_r+0xec>
 800bb56:	68ad      	ldr	r5, [r5, #8]
 800bb58:	42ae      	cmp	r6, r5
 800bb5a:	d003      	beq.n	800bb64 <_free_r+0x14c>
 800bb5c:	686a      	ldr	r2, [r5, #4]
 800bb5e:	43ba      	bics	r2, r7
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d8f8      	bhi.n	800bb56 <_free_r+0x13e>
 800bb64:	68ee      	ldr	r6, [r5, #12]
 800bb66:	e7d9      	b.n	800bb1c <_free_r+0x104>
 800bb68:	20000020 	.word	0x20000020
 800bb6c:	2000042c 	.word	0x2000042c
 800bb70:	20000c2c 	.word	0x20000c2c
 800bb74:	20000028 	.word	0x20000028
 800bb78:	00000554 	.word	0x00000554

0800bb7c <rshift>:
 800bb7c:	0002      	movs	r2, r0
 800bb7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb80:	6904      	ldr	r4, [r0, #16]
 800bb82:	114b      	asrs	r3, r1, #5
 800bb84:	b085      	sub	sp, #20
 800bb86:	3214      	adds	r2, #20
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	114d      	asrs	r5, r1, #5
 800bb8c:	0013      	movs	r3, r2
 800bb8e:	42ac      	cmp	r4, r5
 800bb90:	dd32      	ble.n	800bbf8 <rshift+0x7c>
 800bb92:	261f      	movs	r6, #31
 800bb94:	000f      	movs	r7, r1
 800bb96:	114b      	asrs	r3, r1, #5
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	00a5      	lsls	r5, r4, #2
 800bb9c:	18d3      	adds	r3, r2, r3
 800bb9e:	4037      	ands	r7, r6
 800bba0:	1955      	adds	r5, r2, r5
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	9701      	str	r7, [sp, #4]
 800bba6:	4231      	tst	r1, r6
 800bba8:	d10d      	bne.n	800bbc6 <rshift+0x4a>
 800bbaa:	0016      	movs	r6, r2
 800bbac:	0019      	movs	r1, r3
 800bbae:	428d      	cmp	r5, r1
 800bbb0:	d836      	bhi.n	800bc20 <rshift+0xa4>
 800bbb2:	9900      	ldr	r1, [sp, #0]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	3903      	subs	r1, #3
 800bbb8:	428d      	cmp	r5, r1
 800bbba:	d302      	bcc.n	800bbc2 <rshift+0x46>
 800bbbc:	9b02      	ldr	r3, [sp, #8]
 800bbbe:	1ae4      	subs	r4, r4, r3
 800bbc0:	00a3      	lsls	r3, r4, #2
 800bbc2:	18d3      	adds	r3, r2, r3
 800bbc4:	e018      	b.n	800bbf8 <rshift+0x7c>
 800bbc6:	2120      	movs	r1, #32
 800bbc8:	9e01      	ldr	r6, [sp, #4]
 800bbca:	9f01      	ldr	r7, [sp, #4]
 800bbcc:	1b89      	subs	r1, r1, r6
 800bbce:	9e00      	ldr	r6, [sp, #0]
 800bbd0:	9103      	str	r1, [sp, #12]
 800bbd2:	ce02      	ldmia	r6!, {r1}
 800bbd4:	4694      	mov	ip, r2
 800bbd6:	40f9      	lsrs	r1, r7
 800bbd8:	42b5      	cmp	r5, r6
 800bbda:	d816      	bhi.n	800bc0a <rshift+0x8e>
 800bbdc:	9e00      	ldr	r6, [sp, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	3601      	adds	r6, #1
 800bbe2:	42b5      	cmp	r5, r6
 800bbe4:	d303      	bcc.n	800bbee <rshift+0x72>
 800bbe6:	9b02      	ldr	r3, [sp, #8]
 800bbe8:	1ae3      	subs	r3, r4, r3
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	3b04      	subs	r3, #4
 800bbee:	18d3      	adds	r3, r2, r3
 800bbf0:	6019      	str	r1, [r3, #0]
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	d000      	beq.n	800bbf8 <rshift+0x7c>
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	1a99      	subs	r1, r3, r2
 800bbfa:	1089      	asrs	r1, r1, #2
 800bbfc:	6101      	str	r1, [r0, #16]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d101      	bne.n	800bc06 <rshift+0x8a>
 800bc02:	2300      	movs	r3, #0
 800bc04:	6143      	str	r3, [r0, #20]
 800bc06:	b005      	add	sp, #20
 800bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc0a:	6837      	ldr	r7, [r6, #0]
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	409f      	lsls	r7, r3
 800bc10:	430f      	orrs	r7, r1
 800bc12:	4661      	mov	r1, ip
 800bc14:	c180      	stmia	r1!, {r7}
 800bc16:	468c      	mov	ip, r1
 800bc18:	9b01      	ldr	r3, [sp, #4]
 800bc1a:	ce02      	ldmia	r6!, {r1}
 800bc1c:	40d9      	lsrs	r1, r3
 800bc1e:	e7db      	b.n	800bbd8 <rshift+0x5c>
 800bc20:	c980      	ldmia	r1!, {r7}
 800bc22:	c680      	stmia	r6!, {r7}
 800bc24:	e7c3      	b.n	800bbae <rshift+0x32>

0800bc26 <__hexdig_fun>:
 800bc26:	0002      	movs	r2, r0
 800bc28:	3a30      	subs	r2, #48	; 0x30
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	2a09      	cmp	r2, #9
 800bc2e:	d802      	bhi.n	800bc36 <__hexdig_fun+0x10>
 800bc30:	3b20      	subs	r3, #32
 800bc32:	b2d8      	uxtb	r0, r3
 800bc34:	4770      	bx	lr
 800bc36:	0002      	movs	r2, r0
 800bc38:	3a61      	subs	r2, #97	; 0x61
 800bc3a:	2a05      	cmp	r2, #5
 800bc3c:	d801      	bhi.n	800bc42 <__hexdig_fun+0x1c>
 800bc3e:	3b47      	subs	r3, #71	; 0x47
 800bc40:	e7f7      	b.n	800bc32 <__hexdig_fun+0xc>
 800bc42:	001a      	movs	r2, r3
 800bc44:	3a41      	subs	r2, #65	; 0x41
 800bc46:	2000      	movs	r0, #0
 800bc48:	2a05      	cmp	r2, #5
 800bc4a:	d8f3      	bhi.n	800bc34 <__hexdig_fun+0xe>
 800bc4c:	3b27      	subs	r3, #39	; 0x27
 800bc4e:	e7f0      	b.n	800bc32 <__hexdig_fun+0xc>

0800bc50 <__gethex>:
 800bc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc52:	b089      	sub	sp, #36	; 0x24
 800bc54:	9307      	str	r3, [sp, #28]
 800bc56:	2302      	movs	r3, #2
 800bc58:	9201      	str	r2, [sp, #4]
 800bc5a:	680a      	ldr	r2, [r1, #0]
 800bc5c:	425b      	negs	r3, r3
 800bc5e:	9003      	str	r0, [sp, #12]
 800bc60:	9106      	str	r1, [sp, #24]
 800bc62:	1c96      	adds	r6, r2, #2
 800bc64:	1a9b      	subs	r3, r3, r2
 800bc66:	199a      	adds	r2, r3, r6
 800bc68:	9600      	str	r6, [sp, #0]
 800bc6a:	9205      	str	r2, [sp, #20]
 800bc6c:	9a00      	ldr	r2, [sp, #0]
 800bc6e:	3601      	adds	r6, #1
 800bc70:	7810      	ldrb	r0, [r2, #0]
 800bc72:	2830      	cmp	r0, #48	; 0x30
 800bc74:	d0f7      	beq.n	800bc66 <__gethex+0x16>
 800bc76:	f7ff ffd6 	bl	800bc26 <__hexdig_fun>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	001d      	movs	r5, r3
 800bc7e:	9302      	str	r3, [sp, #8]
 800bc80:	4298      	cmp	r0, r3
 800bc82:	d11d      	bne.n	800bcc0 <__gethex+0x70>
 800bc84:	2201      	movs	r2, #1
 800bc86:	49a6      	ldr	r1, [pc, #664]	; (800bf20 <__gethex+0x2d0>)
 800bc88:	9800      	ldr	r0, [sp, #0]
 800bc8a:	f7ff fd6d 	bl	800b768 <strncmp>
 800bc8e:	0007      	movs	r7, r0
 800bc90:	42a8      	cmp	r0, r5
 800bc92:	d169      	bne.n	800bd68 <__gethex+0x118>
 800bc94:	9b00      	ldr	r3, [sp, #0]
 800bc96:	0034      	movs	r4, r6
 800bc98:	7858      	ldrb	r0, [r3, #1]
 800bc9a:	f7ff ffc4 	bl	800bc26 <__hexdig_fun>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	9302      	str	r3, [sp, #8]
 800bca2:	42a8      	cmp	r0, r5
 800bca4:	d02f      	beq.n	800bd06 <__gethex+0xb6>
 800bca6:	9600      	str	r6, [sp, #0]
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	7818      	ldrb	r0, [r3, #0]
 800bcac:	2830      	cmp	r0, #48	; 0x30
 800bcae:	d009      	beq.n	800bcc4 <__gethex+0x74>
 800bcb0:	f7ff ffb9 	bl	800bc26 <__hexdig_fun>
 800bcb4:	4242      	negs	r2, r0
 800bcb6:	4142      	adcs	r2, r0
 800bcb8:	2301      	movs	r3, #1
 800bcba:	0035      	movs	r5, r6
 800bcbc:	9202      	str	r2, [sp, #8]
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	9c00      	ldr	r4, [sp, #0]
 800bcc2:	e004      	b.n	800bcce <__gethex+0x7e>
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	e7ed      	b.n	800bca8 <__gethex+0x58>
 800bccc:	3401      	adds	r4, #1
 800bcce:	7820      	ldrb	r0, [r4, #0]
 800bcd0:	f7ff ffa9 	bl	800bc26 <__hexdig_fun>
 800bcd4:	1e07      	subs	r7, r0, #0
 800bcd6:	d1f9      	bne.n	800bccc <__gethex+0x7c>
 800bcd8:	2201      	movs	r2, #1
 800bcda:	0020      	movs	r0, r4
 800bcdc:	4990      	ldr	r1, [pc, #576]	; (800bf20 <__gethex+0x2d0>)
 800bcde:	f7ff fd43 	bl	800b768 <strncmp>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d10d      	bne.n	800bd02 <__gethex+0xb2>
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	d106      	bne.n	800bcf8 <__gethex+0xa8>
 800bcea:	3401      	adds	r4, #1
 800bcec:	0025      	movs	r5, r4
 800bcee:	7820      	ldrb	r0, [r4, #0]
 800bcf0:	f7ff ff99 	bl	800bc26 <__hexdig_fun>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d102      	bne.n	800bcfe <__gethex+0xae>
 800bcf8:	1b2d      	subs	r5, r5, r4
 800bcfa:	00af      	lsls	r7, r5, #2
 800bcfc:	e003      	b.n	800bd06 <__gethex+0xb6>
 800bcfe:	3401      	adds	r4, #1
 800bd00:	e7f5      	b.n	800bcee <__gethex+0x9e>
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	d1f8      	bne.n	800bcf8 <__gethex+0xa8>
 800bd06:	2220      	movs	r2, #32
 800bd08:	7823      	ldrb	r3, [r4, #0]
 800bd0a:	0026      	movs	r6, r4
 800bd0c:	4393      	bics	r3, r2
 800bd0e:	2b50      	cmp	r3, #80	; 0x50
 800bd10:	d11d      	bne.n	800bd4e <__gethex+0xfe>
 800bd12:	7863      	ldrb	r3, [r4, #1]
 800bd14:	2b2b      	cmp	r3, #43	; 0x2b
 800bd16:	d02c      	beq.n	800bd72 <__gethex+0x122>
 800bd18:	2b2d      	cmp	r3, #45	; 0x2d
 800bd1a:	d02e      	beq.n	800bd7a <__gethex+0x12a>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	1c66      	adds	r6, r4, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	7830      	ldrb	r0, [r6, #0]
 800bd24:	f7ff ff7f 	bl	800bc26 <__hexdig_fun>
 800bd28:	1e43      	subs	r3, r0, #1
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b18      	cmp	r3, #24
 800bd2e:	d82b      	bhi.n	800bd88 <__gethex+0x138>
 800bd30:	3810      	subs	r0, #16
 800bd32:	0005      	movs	r5, r0
 800bd34:	7870      	ldrb	r0, [r6, #1]
 800bd36:	f7ff ff76 	bl	800bc26 <__hexdig_fun>
 800bd3a:	1e43      	subs	r3, r0, #1
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	3601      	adds	r6, #1
 800bd40:	2b18      	cmp	r3, #24
 800bd42:	d91c      	bls.n	800bd7e <__gethex+0x12e>
 800bd44:	9b04      	ldr	r3, [sp, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d000      	beq.n	800bd4c <__gethex+0xfc>
 800bd4a:	426d      	negs	r5, r5
 800bd4c:	197f      	adds	r7, r7, r5
 800bd4e:	9b06      	ldr	r3, [sp, #24]
 800bd50:	601e      	str	r6, [r3, #0]
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d019      	beq.n	800bd8c <__gethex+0x13c>
 800bd58:	2600      	movs	r6, #0
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	42b3      	cmp	r3, r6
 800bd5e:	d100      	bne.n	800bd62 <__gethex+0x112>
 800bd60:	3606      	adds	r6, #6
 800bd62:	0030      	movs	r0, r6
 800bd64:	b009      	add	sp, #36	; 0x24
 800bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd68:	2301      	movs	r3, #1
 800bd6a:	2700      	movs	r7, #0
 800bd6c:	9c00      	ldr	r4, [sp, #0]
 800bd6e:	9302      	str	r3, [sp, #8]
 800bd70:	e7c9      	b.n	800bd06 <__gethex+0xb6>
 800bd72:	2300      	movs	r3, #0
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	1ca6      	adds	r6, r4, #2
 800bd78:	e7d3      	b.n	800bd22 <__gethex+0xd2>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7fa      	b.n	800bd74 <__gethex+0x124>
 800bd7e:	230a      	movs	r3, #10
 800bd80:	435d      	muls	r5, r3
 800bd82:	182d      	adds	r5, r5, r0
 800bd84:	3d10      	subs	r5, #16
 800bd86:	e7d5      	b.n	800bd34 <__gethex+0xe4>
 800bd88:	0026      	movs	r6, r4
 800bd8a:	e7e0      	b.n	800bd4e <__gethex+0xfe>
 800bd8c:	9b00      	ldr	r3, [sp, #0]
 800bd8e:	9902      	ldr	r1, [sp, #8]
 800bd90:	1ae3      	subs	r3, r4, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b07      	cmp	r3, #7
 800bd96:	dc0a      	bgt.n	800bdae <__gethex+0x15e>
 800bd98:	9803      	ldr	r0, [sp, #12]
 800bd9a:	f000 fa5d 	bl	800c258 <_Balloc>
 800bd9e:	1e05      	subs	r5, r0, #0
 800bda0:	d108      	bne.n	800bdb4 <__gethex+0x164>
 800bda2:	002a      	movs	r2, r5
 800bda4:	21e4      	movs	r1, #228	; 0xe4
 800bda6:	4b5f      	ldr	r3, [pc, #380]	; (800bf24 <__gethex+0x2d4>)
 800bda8:	485f      	ldr	r0, [pc, #380]	; (800bf28 <__gethex+0x2d8>)
 800bdaa:	f003 fd19 	bl	800f7e0 <__assert_func>
 800bdae:	3101      	adds	r1, #1
 800bdb0:	105b      	asrs	r3, r3, #1
 800bdb2:	e7ef      	b.n	800bd94 <__gethex+0x144>
 800bdb4:	0003      	movs	r3, r0
 800bdb6:	3314      	adds	r3, #20
 800bdb8:	9302      	str	r3, [sp, #8]
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	001e      	movs	r6, r3
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	9b00      	ldr	r3, [sp, #0]
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	d33f      	bcc.n	800be48 <__gethex+0x1f8>
 800bdc8:	9c05      	ldr	r4, [sp, #20]
 800bdca:	9b02      	ldr	r3, [sp, #8]
 800bdcc:	c440      	stmia	r4!, {r6}
 800bdce:	1ae4      	subs	r4, r4, r3
 800bdd0:	10a4      	asrs	r4, r4, #2
 800bdd2:	0030      	movs	r0, r6
 800bdd4:	612c      	str	r4, [r5, #16]
 800bdd6:	f000 fb01 	bl	800c3dc <__hi0bits>
 800bdda:	9b01      	ldr	r3, [sp, #4]
 800bddc:	0164      	lsls	r4, r4, #5
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	1a26      	subs	r6, r4, r0
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	429e      	cmp	r6, r3
 800bde6:	dd51      	ble.n	800be8c <__gethex+0x23c>
 800bde8:	1af6      	subs	r6, r6, r3
 800bdea:	0031      	movs	r1, r6
 800bdec:	0028      	movs	r0, r5
 800bdee:	f000 fe7b 	bl	800cae8 <__any_on>
 800bdf2:	1e04      	subs	r4, r0, #0
 800bdf4:	d016      	beq.n	800be24 <__gethex+0x1d4>
 800bdf6:	2401      	movs	r4, #1
 800bdf8:	231f      	movs	r3, #31
 800bdfa:	0020      	movs	r0, r4
 800bdfc:	1e72      	subs	r2, r6, #1
 800bdfe:	4013      	ands	r3, r2
 800be00:	4098      	lsls	r0, r3
 800be02:	0003      	movs	r3, r0
 800be04:	1151      	asrs	r1, r2, #5
 800be06:	9802      	ldr	r0, [sp, #8]
 800be08:	0089      	lsls	r1, r1, #2
 800be0a:	5809      	ldr	r1, [r1, r0]
 800be0c:	4219      	tst	r1, r3
 800be0e:	d009      	beq.n	800be24 <__gethex+0x1d4>
 800be10:	42a2      	cmp	r2, r4
 800be12:	dd06      	ble.n	800be22 <__gethex+0x1d2>
 800be14:	0028      	movs	r0, r5
 800be16:	1eb1      	subs	r1, r6, #2
 800be18:	f000 fe66 	bl	800cae8 <__any_on>
 800be1c:	3402      	adds	r4, #2
 800be1e:	2800      	cmp	r0, #0
 800be20:	d100      	bne.n	800be24 <__gethex+0x1d4>
 800be22:	2402      	movs	r4, #2
 800be24:	0031      	movs	r1, r6
 800be26:	0028      	movs	r0, r5
 800be28:	f7ff fea8 	bl	800bb7c <rshift>
 800be2c:	19bf      	adds	r7, r7, r6
 800be2e:	9b01      	ldr	r3, [sp, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	42bb      	cmp	r3, r7
 800be34:	da3a      	bge.n	800beac <__gethex+0x25c>
 800be36:	0029      	movs	r1, r5
 800be38:	9803      	ldr	r0, [sp, #12]
 800be3a:	f000 fa35 	bl	800c2a8 <_Bfree>
 800be3e:	2300      	movs	r3, #0
 800be40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be42:	26a3      	movs	r6, #163	; 0xa3
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	e78c      	b.n	800bd62 <__gethex+0x112>
 800be48:	3c01      	subs	r4, #1
 800be4a:	7823      	ldrb	r3, [r4, #0]
 800be4c:	2b2e      	cmp	r3, #46	; 0x2e
 800be4e:	d012      	beq.n	800be76 <__gethex+0x226>
 800be50:	9b04      	ldr	r3, [sp, #16]
 800be52:	2b20      	cmp	r3, #32
 800be54:	d104      	bne.n	800be60 <__gethex+0x210>
 800be56:	9b05      	ldr	r3, [sp, #20]
 800be58:	c340      	stmia	r3!, {r6}
 800be5a:	2600      	movs	r6, #0
 800be5c:	9305      	str	r3, [sp, #20]
 800be5e:	9604      	str	r6, [sp, #16]
 800be60:	7820      	ldrb	r0, [r4, #0]
 800be62:	f7ff fee0 	bl	800bc26 <__hexdig_fun>
 800be66:	230f      	movs	r3, #15
 800be68:	4018      	ands	r0, r3
 800be6a:	9b04      	ldr	r3, [sp, #16]
 800be6c:	4098      	lsls	r0, r3
 800be6e:	3304      	adds	r3, #4
 800be70:	4306      	orrs	r6, r0
 800be72:	9304      	str	r3, [sp, #16]
 800be74:	e7a5      	b.n	800bdc2 <__gethex+0x172>
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	42a3      	cmp	r3, r4
 800be7a:	d8e9      	bhi.n	800be50 <__gethex+0x200>
 800be7c:	2201      	movs	r2, #1
 800be7e:	0020      	movs	r0, r4
 800be80:	4927      	ldr	r1, [pc, #156]	; (800bf20 <__gethex+0x2d0>)
 800be82:	f7ff fc71 	bl	800b768 <strncmp>
 800be86:	2800      	cmp	r0, #0
 800be88:	d1e2      	bne.n	800be50 <__gethex+0x200>
 800be8a:	e79a      	b.n	800bdc2 <__gethex+0x172>
 800be8c:	9b00      	ldr	r3, [sp, #0]
 800be8e:	2400      	movs	r4, #0
 800be90:	429e      	cmp	r6, r3
 800be92:	dacc      	bge.n	800be2e <__gethex+0x1de>
 800be94:	1b9e      	subs	r6, r3, r6
 800be96:	0029      	movs	r1, r5
 800be98:	0032      	movs	r2, r6
 800be9a:	9803      	ldr	r0, [sp, #12]
 800be9c:	f000 fbf0 	bl	800c680 <__lshift>
 800bea0:	0003      	movs	r3, r0
 800bea2:	3314      	adds	r3, #20
 800bea4:	0005      	movs	r5, r0
 800bea6:	1bbf      	subs	r7, r7, r6
 800bea8:	9302      	str	r3, [sp, #8]
 800beaa:	e7c0      	b.n	800be2e <__gethex+0x1de>
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	685e      	ldr	r6, [r3, #4]
 800beb0:	42be      	cmp	r6, r7
 800beb2:	dd70      	ble.n	800bf96 <__gethex+0x346>
 800beb4:	9b00      	ldr	r3, [sp, #0]
 800beb6:	1bf6      	subs	r6, r6, r7
 800beb8:	42b3      	cmp	r3, r6
 800beba:	dc37      	bgt.n	800bf2c <__gethex+0x2dc>
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d024      	beq.n	800bf0e <__gethex+0x2be>
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d026      	beq.n	800bf16 <__gethex+0x2c6>
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d117      	bne.n	800befc <__gethex+0x2ac>
 800becc:	9b00      	ldr	r3, [sp, #0]
 800bece:	42b3      	cmp	r3, r6
 800bed0:	d114      	bne.n	800befc <__gethex+0x2ac>
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d10b      	bne.n	800beee <__gethex+0x29e>
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	9a07      	ldr	r2, [sp, #28]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2662      	movs	r6, #98	; 0x62
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	2301      	movs	r3, #1
 800bee2:	9a02      	ldr	r2, [sp, #8]
 800bee4:	612b      	str	r3, [r5, #16]
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beea:	601d      	str	r5, [r3, #0]
 800beec:	e739      	b.n	800bd62 <__gethex+0x112>
 800beee:	9900      	ldr	r1, [sp, #0]
 800bef0:	0028      	movs	r0, r5
 800bef2:	3901      	subs	r1, #1
 800bef4:	f000 fdf8 	bl	800cae8 <__any_on>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d1ec      	bne.n	800bed6 <__gethex+0x286>
 800befc:	0029      	movs	r1, r5
 800befe:	9803      	ldr	r0, [sp, #12]
 800bf00:	f000 f9d2 	bl	800c2a8 <_Bfree>
 800bf04:	2300      	movs	r3, #0
 800bf06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf08:	2650      	movs	r6, #80	; 0x50
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	e729      	b.n	800bd62 <__gethex+0x112>
 800bf0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1f3      	bne.n	800befc <__gethex+0x2ac>
 800bf14:	e7df      	b.n	800bed6 <__gethex+0x286>
 800bf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1dc      	bne.n	800bed6 <__gethex+0x286>
 800bf1c:	e7ee      	b.n	800befc <__gethex+0x2ac>
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	08013d70 	.word	0x08013d70
 800bf24:	08013ed1 	.word	0x08013ed1
 800bf28:	08013ee2 	.word	0x08013ee2
 800bf2c:	1e77      	subs	r7, r6, #1
 800bf2e:	2c00      	cmp	r4, #0
 800bf30:	d12f      	bne.n	800bf92 <__gethex+0x342>
 800bf32:	2f00      	cmp	r7, #0
 800bf34:	d004      	beq.n	800bf40 <__gethex+0x2f0>
 800bf36:	0039      	movs	r1, r7
 800bf38:	0028      	movs	r0, r5
 800bf3a:	f000 fdd5 	bl	800cae8 <__any_on>
 800bf3e:	0004      	movs	r4, r0
 800bf40:	231f      	movs	r3, #31
 800bf42:	117a      	asrs	r2, r7, #5
 800bf44:	401f      	ands	r7, r3
 800bf46:	3b1e      	subs	r3, #30
 800bf48:	40bb      	lsls	r3, r7
 800bf4a:	9902      	ldr	r1, [sp, #8]
 800bf4c:	0092      	lsls	r2, r2, #2
 800bf4e:	5852      	ldr	r2, [r2, r1]
 800bf50:	421a      	tst	r2, r3
 800bf52:	d001      	beq.n	800bf58 <__gethex+0x308>
 800bf54:	2302      	movs	r3, #2
 800bf56:	431c      	orrs	r4, r3
 800bf58:	9b00      	ldr	r3, [sp, #0]
 800bf5a:	0031      	movs	r1, r6
 800bf5c:	1b9b      	subs	r3, r3, r6
 800bf5e:	2602      	movs	r6, #2
 800bf60:	0028      	movs	r0, r5
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	f7ff fe0a 	bl	800bb7c <rshift>
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	685f      	ldr	r7, [r3, #4]
 800bf6c:	2c00      	cmp	r4, #0
 800bf6e:	d041      	beq.n	800bff4 <__gethex+0x3a4>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d010      	beq.n	800bf9a <__gethex+0x34a>
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d012      	beq.n	800bfa2 <__gethex+0x352>
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d106      	bne.n	800bf8e <__gethex+0x33e>
 800bf80:	07a2      	lsls	r2, r4, #30
 800bf82:	d504      	bpl.n	800bf8e <__gethex+0x33e>
 800bf84:	9a02      	ldr	r2, [sp, #8]
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	4314      	orrs	r4, r2
 800bf8a:	421c      	tst	r4, r3
 800bf8c:	d10c      	bne.n	800bfa8 <__gethex+0x358>
 800bf8e:	2310      	movs	r3, #16
 800bf90:	e02f      	b.n	800bff2 <__gethex+0x3a2>
 800bf92:	2401      	movs	r4, #1
 800bf94:	e7d4      	b.n	800bf40 <__gethex+0x2f0>
 800bf96:	2601      	movs	r6, #1
 800bf98:	e7e8      	b.n	800bf6c <__gethex+0x31c>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf9e:	1a9b      	subs	r3, r3, r2
 800bfa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0f2      	beq.n	800bf8e <__gethex+0x33e>
 800bfa8:	692b      	ldr	r3, [r5, #16]
 800bfaa:	2000      	movs	r0, #0
 800bfac:	9302      	str	r3, [sp, #8]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	002b      	movs	r3, r5
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	3314      	adds	r3, #20
 800bfb8:	1899      	adds	r1, r3, r2
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	1c54      	adds	r4, r2, #1
 800bfbe:	d01e      	beq.n	800bffe <__gethex+0x3ae>
 800bfc0:	3201      	adds	r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	002b      	movs	r3, r5
 800bfc6:	3314      	adds	r3, #20
 800bfc8:	2e02      	cmp	r6, #2
 800bfca:	d141      	bne.n	800c050 <__gethex+0x400>
 800bfcc:	9a01      	ldr	r2, [sp, #4]
 800bfce:	9900      	ldr	r1, [sp, #0]
 800bfd0:	6812      	ldr	r2, [r2, #0]
 800bfd2:	3a01      	subs	r2, #1
 800bfd4:	428a      	cmp	r2, r1
 800bfd6:	d10b      	bne.n	800bff0 <__gethex+0x3a0>
 800bfd8:	221f      	movs	r2, #31
 800bfda:	9800      	ldr	r0, [sp, #0]
 800bfdc:	1149      	asrs	r1, r1, #5
 800bfde:	4002      	ands	r2, r0
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	0004      	movs	r4, r0
 800bfe4:	4094      	lsls	r4, r2
 800bfe6:	0089      	lsls	r1, r1, #2
 800bfe8:	58cb      	ldr	r3, [r1, r3]
 800bfea:	4223      	tst	r3, r4
 800bfec:	d000      	beq.n	800bff0 <__gethex+0x3a0>
 800bfee:	2601      	movs	r6, #1
 800bff0:	2320      	movs	r3, #32
 800bff2:	431e      	orrs	r6, r3
 800bff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bff6:	601d      	str	r5, [r3, #0]
 800bff8:	9b07      	ldr	r3, [sp, #28]
 800bffa:	601f      	str	r7, [r3, #0]
 800bffc:	e6b1      	b.n	800bd62 <__gethex+0x112>
 800bffe:	c301      	stmia	r3!, {r0}
 800c000:	4299      	cmp	r1, r3
 800c002:	d8da      	bhi.n	800bfba <__gethex+0x36a>
 800c004:	68ab      	ldr	r3, [r5, #8]
 800c006:	9a02      	ldr	r2, [sp, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	db18      	blt.n	800c03e <__gethex+0x3ee>
 800c00c:	6869      	ldr	r1, [r5, #4]
 800c00e:	9803      	ldr	r0, [sp, #12]
 800c010:	3101      	adds	r1, #1
 800c012:	f000 f921 	bl	800c258 <_Balloc>
 800c016:	1e04      	subs	r4, r0, #0
 800c018:	d104      	bne.n	800c024 <__gethex+0x3d4>
 800c01a:	0022      	movs	r2, r4
 800c01c:	2184      	movs	r1, #132	; 0x84
 800c01e:	4b1c      	ldr	r3, [pc, #112]	; (800c090 <__gethex+0x440>)
 800c020:	481c      	ldr	r0, [pc, #112]	; (800c094 <__gethex+0x444>)
 800c022:	e6c2      	b.n	800bdaa <__gethex+0x15a>
 800c024:	0029      	movs	r1, r5
 800c026:	692a      	ldr	r2, [r5, #16]
 800c028:	310c      	adds	r1, #12
 800c02a:	3202      	adds	r2, #2
 800c02c:	0092      	lsls	r2, r2, #2
 800c02e:	300c      	adds	r0, #12
 800c030:	f7ff fc77 	bl	800b922 <memcpy>
 800c034:	0029      	movs	r1, r5
 800c036:	9803      	ldr	r0, [sp, #12]
 800c038:	f000 f936 	bl	800c2a8 <_Bfree>
 800c03c:	0025      	movs	r5, r4
 800c03e:	692b      	ldr	r3, [r5, #16]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	612a      	str	r2, [r5, #16]
 800c044:	2201      	movs	r2, #1
 800c046:	3304      	adds	r3, #4
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	18eb      	adds	r3, r5, r3
 800c04c:	605a      	str	r2, [r3, #4]
 800c04e:	e7b9      	b.n	800bfc4 <__gethex+0x374>
 800c050:	692a      	ldr	r2, [r5, #16]
 800c052:	9902      	ldr	r1, [sp, #8]
 800c054:	428a      	cmp	r2, r1
 800c056:	dd09      	ble.n	800c06c <__gethex+0x41c>
 800c058:	2101      	movs	r1, #1
 800c05a:	0028      	movs	r0, r5
 800c05c:	f7ff fd8e 	bl	800bb7c <rshift>
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	3701      	adds	r7, #1
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	42bb      	cmp	r3, r7
 800c068:	dac1      	bge.n	800bfee <__gethex+0x39e>
 800c06a:	e6e4      	b.n	800be36 <__gethex+0x1e6>
 800c06c:	221f      	movs	r2, #31
 800c06e:	9c00      	ldr	r4, [sp, #0]
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	2601      	movs	r6, #1
 800c074:	4014      	ands	r4, r2
 800c076:	4211      	tst	r1, r2
 800c078:	d0ba      	beq.n	800bff0 <__gethex+0x3a0>
 800c07a:	9a04      	ldr	r2, [sp, #16]
 800c07c:	189b      	adds	r3, r3, r2
 800c07e:	3b04      	subs	r3, #4
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f000 f9ab 	bl	800c3dc <__hi0bits>
 800c086:	2320      	movs	r3, #32
 800c088:	1b1b      	subs	r3, r3, r4
 800c08a:	4298      	cmp	r0, r3
 800c08c:	dbe4      	blt.n	800c058 <__gethex+0x408>
 800c08e:	e7af      	b.n	800bff0 <__gethex+0x3a0>
 800c090:	08013ed1 	.word	0x08013ed1
 800c094:	08013ee2 	.word	0x08013ee2

0800c098 <L_shift>:
 800c098:	2308      	movs	r3, #8
 800c09a:	b570      	push	{r4, r5, r6, lr}
 800c09c:	2520      	movs	r5, #32
 800c09e:	1a9a      	subs	r2, r3, r2
 800c0a0:	0092      	lsls	r2, r2, #2
 800c0a2:	1aad      	subs	r5, r5, r2
 800c0a4:	6843      	ldr	r3, [r0, #4]
 800c0a6:	6804      	ldr	r4, [r0, #0]
 800c0a8:	001e      	movs	r6, r3
 800c0aa:	40ae      	lsls	r6, r5
 800c0ac:	40d3      	lsrs	r3, r2
 800c0ae:	4334      	orrs	r4, r6
 800c0b0:	6004      	str	r4, [r0, #0]
 800c0b2:	6043      	str	r3, [r0, #4]
 800c0b4:	3004      	adds	r0, #4
 800c0b6:	4288      	cmp	r0, r1
 800c0b8:	d3f4      	bcc.n	800c0a4 <L_shift+0xc>
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}

0800c0bc <__match>:
 800c0bc:	b530      	push	{r4, r5, lr}
 800c0be:	6803      	ldr	r3, [r0, #0]
 800c0c0:	780c      	ldrb	r4, [r1, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	2c00      	cmp	r4, #0
 800c0c6:	d102      	bne.n	800c0ce <__match+0x12>
 800c0c8:	6003      	str	r3, [r0, #0]
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	bd30      	pop	{r4, r5, pc}
 800c0ce:	781a      	ldrb	r2, [r3, #0]
 800c0d0:	0015      	movs	r5, r2
 800c0d2:	3d41      	subs	r5, #65	; 0x41
 800c0d4:	2d19      	cmp	r5, #25
 800c0d6:	d800      	bhi.n	800c0da <__match+0x1e>
 800c0d8:	3220      	adds	r2, #32
 800c0da:	3101      	adds	r1, #1
 800c0dc:	42a2      	cmp	r2, r4
 800c0de:	d0ef      	beq.n	800c0c0 <__match+0x4>
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e7f3      	b.n	800c0cc <__match+0x10>

0800c0e4 <__hexnan>:
 800c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e6:	680b      	ldr	r3, [r1, #0]
 800c0e8:	b08b      	sub	sp, #44	; 0x2c
 800c0ea:	9201      	str	r2, [sp, #4]
 800c0ec:	9901      	ldr	r1, [sp, #4]
 800c0ee:	115a      	asrs	r2, r3, #5
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	188a      	adds	r2, r1, r2
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	0019      	movs	r1, r3
 800c0f8:	221f      	movs	r2, #31
 800c0fa:	4011      	ands	r1, r2
 800c0fc:	9008      	str	r0, [sp, #32]
 800c0fe:	9106      	str	r1, [sp, #24]
 800c100:	4213      	tst	r3, r2
 800c102:	d002      	beq.n	800c10a <__hexnan+0x26>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	3304      	adds	r3, #4
 800c108:	9302      	str	r3, [sp, #8]
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	2500      	movs	r5, #0
 800c10e:	1f1f      	subs	r7, r3, #4
 800c110:	003e      	movs	r6, r7
 800c112:	003c      	movs	r4, r7
 800c114:	9b08      	ldr	r3, [sp, #32]
 800c116:	603d      	str	r5, [r7, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	9507      	str	r5, [sp, #28]
 800c11c:	9305      	str	r3, [sp, #20]
 800c11e:	9503      	str	r5, [sp, #12]
 800c120:	9b05      	ldr	r3, [sp, #20]
 800c122:	3301      	adds	r3, #1
 800c124:	9309      	str	r3, [sp, #36]	; 0x24
 800c126:	9b05      	ldr	r3, [sp, #20]
 800c128:	785b      	ldrb	r3, [r3, #1]
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d028      	beq.n	800c182 <__hexnan+0x9e>
 800c130:	9804      	ldr	r0, [sp, #16]
 800c132:	f7ff fd78 	bl	800bc26 <__hexdig_fun>
 800c136:	2800      	cmp	r0, #0
 800c138:	d154      	bne.n	800c1e4 <__hexnan+0x100>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	d819      	bhi.n	800c174 <__hexnan+0x90>
 800c140:	9b03      	ldr	r3, [sp, #12]
 800c142:	9a07      	ldr	r2, [sp, #28]
 800c144:	4293      	cmp	r3, r2
 800c146:	dd12      	ble.n	800c16e <__hexnan+0x8a>
 800c148:	42b4      	cmp	r4, r6
 800c14a:	d206      	bcs.n	800c15a <__hexnan+0x76>
 800c14c:	2d07      	cmp	r5, #7
 800c14e:	dc04      	bgt.n	800c15a <__hexnan+0x76>
 800c150:	002a      	movs	r2, r5
 800c152:	0031      	movs	r1, r6
 800c154:	0020      	movs	r0, r4
 800c156:	f7ff ff9f 	bl	800c098 <L_shift>
 800c15a:	9b01      	ldr	r3, [sp, #4]
 800c15c:	2508      	movs	r5, #8
 800c15e:	429c      	cmp	r4, r3
 800c160:	d905      	bls.n	800c16e <__hexnan+0x8a>
 800c162:	1f26      	subs	r6, r4, #4
 800c164:	2500      	movs	r5, #0
 800c166:	0034      	movs	r4, r6
 800c168:	9b03      	ldr	r3, [sp, #12]
 800c16a:	6035      	str	r5, [r6, #0]
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	e7d5      	b.n	800c120 <__hexnan+0x3c>
 800c174:	9b04      	ldr	r3, [sp, #16]
 800c176:	2b29      	cmp	r3, #41	; 0x29
 800c178:	d159      	bne.n	800c22e <__hexnan+0x14a>
 800c17a:	9b05      	ldr	r3, [sp, #20]
 800c17c:	9a08      	ldr	r2, [sp, #32]
 800c17e:	3302      	adds	r3, #2
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d052      	beq.n	800c22e <__hexnan+0x14a>
 800c188:	42b4      	cmp	r4, r6
 800c18a:	d206      	bcs.n	800c19a <__hexnan+0xb6>
 800c18c:	2d07      	cmp	r5, #7
 800c18e:	dc04      	bgt.n	800c19a <__hexnan+0xb6>
 800c190:	002a      	movs	r2, r5
 800c192:	0031      	movs	r1, r6
 800c194:	0020      	movs	r0, r4
 800c196:	f7ff ff7f 	bl	800c098 <L_shift>
 800c19a:	9b01      	ldr	r3, [sp, #4]
 800c19c:	429c      	cmp	r4, r3
 800c19e:	d935      	bls.n	800c20c <__hexnan+0x128>
 800c1a0:	001a      	movs	r2, r3
 800c1a2:	0023      	movs	r3, r4
 800c1a4:	cb02      	ldmia	r3!, {r1}
 800c1a6:	c202      	stmia	r2!, {r1}
 800c1a8:	429f      	cmp	r7, r3
 800c1aa:	d2fb      	bcs.n	800c1a4 <__hexnan+0xc0>
 800c1ac:	9b02      	ldr	r3, [sp, #8]
 800c1ae:	1c62      	adds	r2, r4, #1
 800c1b0:	1ed9      	subs	r1, r3, #3
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	4291      	cmp	r1, r2
 800c1b6:	d305      	bcc.n	800c1c4 <__hexnan+0xe0>
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	3b04      	subs	r3, #4
 800c1bc:	1b1b      	subs	r3, r3, r4
 800c1be:	089b      	lsrs	r3, r3, #2
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	9a01      	ldr	r2, [sp, #4]
 800c1c6:	18d3      	adds	r3, r2, r3
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	c304      	stmia	r3!, {r2}
 800c1cc:	429f      	cmp	r7, r3
 800c1ce:	d2fc      	bcs.n	800c1ca <__hexnan+0xe6>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d104      	bne.n	800c1e0 <__hexnan+0xfc>
 800c1d6:	9b01      	ldr	r3, [sp, #4]
 800c1d8:	429f      	cmp	r7, r3
 800c1da:	d126      	bne.n	800c22a <__hexnan+0x146>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	2005      	movs	r0, #5
 800c1e2:	e025      	b.n	800c230 <__hexnan+0x14c>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	3501      	adds	r5, #1
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	2d08      	cmp	r5, #8
 800c1ee:	dd06      	ble.n	800c1fe <__hexnan+0x11a>
 800c1f0:	9b01      	ldr	r3, [sp, #4]
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d9bb      	bls.n	800c16e <__hexnan+0x8a>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2501      	movs	r5, #1
 800c1fa:	3c04      	subs	r4, #4
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	220f      	movs	r2, #15
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	4010      	ands	r0, r2
 800c204:	011b      	lsls	r3, r3, #4
 800c206:	4303      	orrs	r3, r0
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	e7b0      	b.n	800c16e <__hexnan+0x8a>
 800c20c:	9b06      	ldr	r3, [sp, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d0de      	beq.n	800c1d0 <__hexnan+0xec>
 800c212:	2320      	movs	r3, #32
 800c214:	9a06      	ldr	r2, [sp, #24]
 800c216:	9902      	ldr	r1, [sp, #8]
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	2201      	movs	r2, #1
 800c21c:	4252      	negs	r2, r2
 800c21e:	40da      	lsrs	r2, r3
 800c220:	3904      	subs	r1, #4
 800c222:	680b      	ldr	r3, [r1, #0]
 800c224:	4013      	ands	r3, r2
 800c226:	600b      	str	r3, [r1, #0]
 800c228:	e7d2      	b.n	800c1d0 <__hexnan+0xec>
 800c22a:	3f04      	subs	r7, #4
 800c22c:	e7d0      	b.n	800c1d0 <__hexnan+0xec>
 800c22e:	2004      	movs	r0, #4
 800c230:	b00b      	add	sp, #44	; 0x2c
 800c232:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c234 <__ascii_mbtowc>:
 800c234:	b082      	sub	sp, #8
 800c236:	2900      	cmp	r1, #0
 800c238:	d100      	bne.n	800c23c <__ascii_mbtowc+0x8>
 800c23a:	a901      	add	r1, sp, #4
 800c23c:	1e10      	subs	r0, r2, #0
 800c23e:	d006      	beq.n	800c24e <__ascii_mbtowc+0x1a>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d006      	beq.n	800c252 <__ascii_mbtowc+0x1e>
 800c244:	7813      	ldrb	r3, [r2, #0]
 800c246:	600b      	str	r3, [r1, #0]
 800c248:	7810      	ldrb	r0, [r2, #0]
 800c24a:	1e43      	subs	r3, r0, #1
 800c24c:	4198      	sbcs	r0, r3
 800c24e:	b002      	add	sp, #8
 800c250:	4770      	bx	lr
 800c252:	2002      	movs	r0, #2
 800c254:	4240      	negs	r0, r0
 800c256:	e7fa      	b.n	800c24e <__ascii_mbtowc+0x1a>

0800c258 <_Balloc>:
 800c258:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c25a:	b570      	push	{r4, r5, r6, lr}
 800c25c:	0006      	movs	r6, r0
 800c25e:	000c      	movs	r4, r1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d012      	beq.n	800c28a <_Balloc+0x32>
 800c264:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c266:	00a2      	lsls	r2, r4, #2
 800c268:	189b      	adds	r3, r3, r2
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d115      	bne.n	800c29c <_Balloc+0x44>
 800c270:	2101      	movs	r1, #1
 800c272:	000d      	movs	r5, r1
 800c274:	40a5      	lsls	r5, r4
 800c276:	1d6a      	adds	r2, r5, #5
 800c278:	0030      	movs	r0, r6
 800c27a:	0092      	lsls	r2, r2, #2
 800c27c:	f003 face 	bl	800f81c <_calloc_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	d009      	beq.n	800c298 <_Balloc+0x40>
 800c284:	6044      	str	r4, [r0, #4]
 800c286:	6085      	str	r5, [r0, #8]
 800c288:	e00a      	b.n	800c2a0 <_Balloc+0x48>
 800c28a:	2221      	movs	r2, #33	; 0x21
 800c28c:	2104      	movs	r1, #4
 800c28e:	f003 fac5 	bl	800f81c <_calloc_r>
 800c292:	6470      	str	r0, [r6, #68]	; 0x44
 800c294:	2800      	cmp	r0, #0
 800c296:	d1e5      	bne.n	800c264 <_Balloc+0xc>
 800c298:	2000      	movs	r0, #0
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	6802      	ldr	r2, [r0, #0]
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	6103      	str	r3, [r0, #16]
 800c2a4:	60c3      	str	r3, [r0, #12]
 800c2a6:	e7f8      	b.n	800c29a <_Balloc+0x42>

0800c2a8 <_Bfree>:
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	d006      	beq.n	800c2ba <_Bfree+0x12>
 800c2ac:	684a      	ldr	r2, [r1, #4]
 800c2ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2b0:	0092      	lsls	r2, r2, #2
 800c2b2:	189b      	adds	r3, r3, r2
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	600a      	str	r2, [r1, #0]
 800c2b8:	6019      	str	r1, [r3, #0]
 800c2ba:	4770      	bx	lr

0800c2bc <__multadd>:
 800c2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2be:	000e      	movs	r6, r1
 800c2c0:	9001      	str	r0, [sp, #4]
 800c2c2:	000c      	movs	r4, r1
 800c2c4:	001d      	movs	r5, r3
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	690f      	ldr	r7, [r1, #16]
 800c2ca:	3614      	adds	r6, #20
 800c2cc:	6833      	ldr	r3, [r6, #0]
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	b299      	uxth	r1, r3
 800c2d2:	4351      	muls	r1, r2
 800c2d4:	0c1b      	lsrs	r3, r3, #16
 800c2d6:	4353      	muls	r3, r2
 800c2d8:	1949      	adds	r1, r1, r5
 800c2da:	0c0d      	lsrs	r5, r1, #16
 800c2dc:	195b      	adds	r3, r3, r5
 800c2de:	0c1d      	lsrs	r5, r3, #16
 800c2e0:	b289      	uxth	r1, r1
 800c2e2:	041b      	lsls	r3, r3, #16
 800c2e4:	185b      	adds	r3, r3, r1
 800c2e6:	c608      	stmia	r6!, {r3}
 800c2e8:	4287      	cmp	r7, r0
 800c2ea:	dcef      	bgt.n	800c2cc <__multadd+0x10>
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	d022      	beq.n	800c336 <__multadd+0x7a>
 800c2f0:	68a3      	ldr	r3, [r4, #8]
 800c2f2:	42bb      	cmp	r3, r7
 800c2f4:	dc19      	bgt.n	800c32a <__multadd+0x6e>
 800c2f6:	6861      	ldr	r1, [r4, #4]
 800c2f8:	9801      	ldr	r0, [sp, #4]
 800c2fa:	3101      	adds	r1, #1
 800c2fc:	f7ff ffac 	bl	800c258 <_Balloc>
 800c300:	1e06      	subs	r6, r0, #0
 800c302:	d105      	bne.n	800c310 <__multadd+0x54>
 800c304:	0032      	movs	r2, r6
 800c306:	21ba      	movs	r1, #186	; 0xba
 800c308:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <__multadd+0x80>)
 800c30a:	480d      	ldr	r0, [pc, #52]	; (800c340 <__multadd+0x84>)
 800c30c:	f003 fa68 	bl	800f7e0 <__assert_func>
 800c310:	0021      	movs	r1, r4
 800c312:	6922      	ldr	r2, [r4, #16]
 800c314:	310c      	adds	r1, #12
 800c316:	3202      	adds	r2, #2
 800c318:	0092      	lsls	r2, r2, #2
 800c31a:	300c      	adds	r0, #12
 800c31c:	f7ff fb01 	bl	800b922 <memcpy>
 800c320:	0021      	movs	r1, r4
 800c322:	9801      	ldr	r0, [sp, #4]
 800c324:	f7ff ffc0 	bl	800c2a8 <_Bfree>
 800c328:	0034      	movs	r4, r6
 800c32a:	1d3b      	adds	r3, r7, #4
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	18e3      	adds	r3, r4, r3
 800c330:	605d      	str	r5, [r3, #4]
 800c332:	1c7b      	adds	r3, r7, #1
 800c334:	6123      	str	r3, [r4, #16]
 800c336:	0020      	movs	r0, r4
 800c338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c33a:	46c0      	nop			; (mov r8, r8)
 800c33c:	08013ed1 	.word	0x08013ed1
 800c340:	08013f42 	.word	0x08013f42

0800c344 <__s2b>:
 800c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c346:	0006      	movs	r6, r0
 800c348:	0018      	movs	r0, r3
 800c34a:	000c      	movs	r4, r1
 800c34c:	3008      	adds	r0, #8
 800c34e:	2109      	movs	r1, #9
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	0015      	movs	r5, r2
 800c354:	f7f3 ff7c 	bl	8000250 <__divsi3>
 800c358:	2301      	movs	r3, #1
 800c35a:	2100      	movs	r1, #0
 800c35c:	4283      	cmp	r3, r0
 800c35e:	db0a      	blt.n	800c376 <__s2b+0x32>
 800c360:	0030      	movs	r0, r6
 800c362:	f7ff ff79 	bl	800c258 <_Balloc>
 800c366:	1e01      	subs	r1, r0, #0
 800c368:	d108      	bne.n	800c37c <__s2b+0x38>
 800c36a:	000a      	movs	r2, r1
 800c36c:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <__s2b+0x90>)
 800c36e:	481a      	ldr	r0, [pc, #104]	; (800c3d8 <__s2b+0x94>)
 800c370:	31d3      	adds	r1, #211	; 0xd3
 800c372:	f003 fa35 	bl	800f7e0 <__assert_func>
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	3101      	adds	r1, #1
 800c37a:	e7ef      	b.n	800c35c <__s2b+0x18>
 800c37c:	9b08      	ldr	r3, [sp, #32]
 800c37e:	6143      	str	r3, [r0, #20]
 800c380:	2301      	movs	r3, #1
 800c382:	6103      	str	r3, [r0, #16]
 800c384:	2d09      	cmp	r5, #9
 800c386:	dd18      	ble.n	800c3ba <__s2b+0x76>
 800c388:	0023      	movs	r3, r4
 800c38a:	3309      	adds	r3, #9
 800c38c:	001f      	movs	r7, r3
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	1964      	adds	r4, r4, r5
 800c392:	783b      	ldrb	r3, [r7, #0]
 800c394:	220a      	movs	r2, #10
 800c396:	0030      	movs	r0, r6
 800c398:	3b30      	subs	r3, #48	; 0x30
 800c39a:	f7ff ff8f 	bl	800c2bc <__multadd>
 800c39e:	3701      	adds	r7, #1
 800c3a0:	0001      	movs	r1, r0
 800c3a2:	42a7      	cmp	r7, r4
 800c3a4:	d1f5      	bne.n	800c392 <__s2b+0x4e>
 800c3a6:	002c      	movs	r4, r5
 800c3a8:	9b00      	ldr	r3, [sp, #0]
 800c3aa:	3c08      	subs	r4, #8
 800c3ac:	191c      	adds	r4, r3, r4
 800c3ae:	002f      	movs	r7, r5
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	429f      	cmp	r7, r3
 800c3b4:	db04      	blt.n	800c3c0 <__s2b+0x7c>
 800c3b6:	0008      	movs	r0, r1
 800c3b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3ba:	2509      	movs	r5, #9
 800c3bc:	340a      	adds	r4, #10
 800c3be:	e7f6      	b.n	800c3ae <__s2b+0x6a>
 800c3c0:	1b63      	subs	r3, r4, r5
 800c3c2:	5ddb      	ldrb	r3, [r3, r7]
 800c3c4:	220a      	movs	r2, #10
 800c3c6:	0030      	movs	r0, r6
 800c3c8:	3b30      	subs	r3, #48	; 0x30
 800c3ca:	f7ff ff77 	bl	800c2bc <__multadd>
 800c3ce:	3701      	adds	r7, #1
 800c3d0:	0001      	movs	r1, r0
 800c3d2:	e7ed      	b.n	800c3b0 <__s2b+0x6c>
 800c3d4:	08013ed1 	.word	0x08013ed1
 800c3d8:	08013f42 	.word	0x08013f42

0800c3dc <__hi0bits>:
 800c3dc:	0003      	movs	r3, r0
 800c3de:	0c02      	lsrs	r2, r0, #16
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	4282      	cmp	r2, r0
 800c3e4:	d101      	bne.n	800c3ea <__hi0bits+0xe>
 800c3e6:	041b      	lsls	r3, r3, #16
 800c3e8:	3010      	adds	r0, #16
 800c3ea:	0e1a      	lsrs	r2, r3, #24
 800c3ec:	d101      	bne.n	800c3f2 <__hi0bits+0x16>
 800c3ee:	3008      	adds	r0, #8
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	0f1a      	lsrs	r2, r3, #28
 800c3f4:	d101      	bne.n	800c3fa <__hi0bits+0x1e>
 800c3f6:	3004      	adds	r0, #4
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	0f9a      	lsrs	r2, r3, #30
 800c3fc:	d101      	bne.n	800c402 <__hi0bits+0x26>
 800c3fe:	3002      	adds	r0, #2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	db03      	blt.n	800c40e <__hi0bits+0x32>
 800c406:	3001      	adds	r0, #1
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	d400      	bmi.n	800c40e <__hi0bits+0x32>
 800c40c:	2020      	movs	r0, #32
 800c40e:	4770      	bx	lr

0800c410 <__lo0bits>:
 800c410:	6803      	ldr	r3, [r0, #0]
 800c412:	0001      	movs	r1, r0
 800c414:	2207      	movs	r2, #7
 800c416:	0018      	movs	r0, r3
 800c418:	4010      	ands	r0, r2
 800c41a:	4213      	tst	r3, r2
 800c41c:	d00d      	beq.n	800c43a <__lo0bits+0x2a>
 800c41e:	3a06      	subs	r2, #6
 800c420:	2000      	movs	r0, #0
 800c422:	4213      	tst	r3, r2
 800c424:	d105      	bne.n	800c432 <__lo0bits+0x22>
 800c426:	3002      	adds	r0, #2
 800c428:	4203      	tst	r3, r0
 800c42a:	d003      	beq.n	800c434 <__lo0bits+0x24>
 800c42c:	40d3      	lsrs	r3, r2
 800c42e:	0010      	movs	r0, r2
 800c430:	600b      	str	r3, [r1, #0]
 800c432:	4770      	bx	lr
 800c434:	089b      	lsrs	r3, r3, #2
 800c436:	600b      	str	r3, [r1, #0]
 800c438:	e7fb      	b.n	800c432 <__lo0bits+0x22>
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	2a00      	cmp	r2, #0
 800c43e:	d101      	bne.n	800c444 <__lo0bits+0x34>
 800c440:	2010      	movs	r0, #16
 800c442:	0c1b      	lsrs	r3, r3, #16
 800c444:	b2da      	uxtb	r2, r3
 800c446:	2a00      	cmp	r2, #0
 800c448:	d101      	bne.n	800c44e <__lo0bits+0x3e>
 800c44a:	3008      	adds	r0, #8
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	071a      	lsls	r2, r3, #28
 800c450:	d101      	bne.n	800c456 <__lo0bits+0x46>
 800c452:	3004      	adds	r0, #4
 800c454:	091b      	lsrs	r3, r3, #4
 800c456:	079a      	lsls	r2, r3, #30
 800c458:	d101      	bne.n	800c45e <__lo0bits+0x4e>
 800c45a:	3002      	adds	r0, #2
 800c45c:	089b      	lsrs	r3, r3, #2
 800c45e:	07da      	lsls	r2, r3, #31
 800c460:	d4e9      	bmi.n	800c436 <__lo0bits+0x26>
 800c462:	3001      	adds	r0, #1
 800c464:	085b      	lsrs	r3, r3, #1
 800c466:	d1e6      	bne.n	800c436 <__lo0bits+0x26>
 800c468:	2020      	movs	r0, #32
 800c46a:	e7e2      	b.n	800c432 <__lo0bits+0x22>

0800c46c <__i2b>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	000c      	movs	r4, r1
 800c470:	2101      	movs	r1, #1
 800c472:	f7ff fef1 	bl	800c258 <_Balloc>
 800c476:	2800      	cmp	r0, #0
 800c478:	d107      	bne.n	800c48a <__i2b+0x1e>
 800c47a:	2146      	movs	r1, #70	; 0x46
 800c47c:	4c05      	ldr	r4, [pc, #20]	; (800c494 <__i2b+0x28>)
 800c47e:	0002      	movs	r2, r0
 800c480:	4b05      	ldr	r3, [pc, #20]	; (800c498 <__i2b+0x2c>)
 800c482:	0020      	movs	r0, r4
 800c484:	31ff      	adds	r1, #255	; 0xff
 800c486:	f003 f9ab 	bl	800f7e0 <__assert_func>
 800c48a:	2301      	movs	r3, #1
 800c48c:	6144      	str	r4, [r0, #20]
 800c48e:	6103      	str	r3, [r0, #16]
 800c490:	bd10      	pop	{r4, pc}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	08013f42 	.word	0x08013f42
 800c498:	08013ed1 	.word	0x08013ed1

0800c49c <__multiply>:
 800c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49e:	0015      	movs	r5, r2
 800c4a0:	690a      	ldr	r2, [r1, #16]
 800c4a2:	692b      	ldr	r3, [r5, #16]
 800c4a4:	000c      	movs	r4, r1
 800c4a6:	b08b      	sub	sp, #44	; 0x2c
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	da01      	bge.n	800c4b0 <__multiply+0x14>
 800c4ac:	002c      	movs	r4, r5
 800c4ae:	000d      	movs	r5, r1
 800c4b0:	6927      	ldr	r7, [r4, #16]
 800c4b2:	692e      	ldr	r6, [r5, #16]
 800c4b4:	6861      	ldr	r1, [r4, #4]
 800c4b6:	19bb      	adds	r3, r7, r6
 800c4b8:	9303      	str	r3, [sp, #12]
 800c4ba:	68a3      	ldr	r3, [r4, #8]
 800c4bc:	19ba      	adds	r2, r7, r6
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	da00      	bge.n	800c4c4 <__multiply+0x28>
 800c4c2:	3101      	adds	r1, #1
 800c4c4:	f7ff fec8 	bl	800c258 <_Balloc>
 800c4c8:	9002      	str	r0, [sp, #8]
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d106      	bne.n	800c4dc <__multiply+0x40>
 800c4ce:	21b1      	movs	r1, #177	; 0xb1
 800c4d0:	4b48      	ldr	r3, [pc, #288]	; (800c5f4 <__multiply+0x158>)
 800c4d2:	4849      	ldr	r0, [pc, #292]	; (800c5f8 <__multiply+0x15c>)
 800c4d4:	9a02      	ldr	r2, [sp, #8]
 800c4d6:	0049      	lsls	r1, r1, #1
 800c4d8:	f003 f982 	bl	800f7e0 <__assert_func>
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	3314      	adds	r3, #20
 800c4e2:	469c      	mov	ip, r3
 800c4e4:	19bb      	adds	r3, r7, r6
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4463      	add	r3, ip
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	4663      	mov	r3, ip
 800c4ee:	9904      	ldr	r1, [sp, #16]
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	d32a      	bcc.n	800c54a <__multiply+0xae>
 800c4f4:	0023      	movs	r3, r4
 800c4f6:	00bf      	lsls	r7, r7, #2
 800c4f8:	3314      	adds	r3, #20
 800c4fa:	3514      	adds	r5, #20
 800c4fc:	9308      	str	r3, [sp, #32]
 800c4fe:	00b6      	lsls	r6, r6, #2
 800c500:	19db      	adds	r3, r3, r7
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	19ab      	adds	r3, r5, r6
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	2304      	movs	r3, #4
 800c50a:	9306      	str	r3, [sp, #24]
 800c50c:	0023      	movs	r3, r4
 800c50e:	9a05      	ldr	r2, [sp, #20]
 800c510:	3315      	adds	r3, #21
 800c512:	9501      	str	r5, [sp, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d305      	bcc.n	800c524 <__multiply+0x88>
 800c518:	1b13      	subs	r3, r2, r4
 800c51a:	3b15      	subs	r3, #21
 800c51c:	089b      	lsrs	r3, r3, #2
 800c51e:	3301      	adds	r3, #1
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	9306      	str	r3, [sp, #24]
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c528:	4293      	cmp	r3, r2
 800c52a:	d310      	bcc.n	800c54e <__multiply+0xb2>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dd05      	ble.n	800c53e <__multiply+0xa2>
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	3b04      	subs	r3, #4
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d056      	beq.n	800c5ec <__multiply+0x150>
 800c53e:	9b02      	ldr	r3, [sp, #8]
 800c540:	9a03      	ldr	r2, [sp, #12]
 800c542:	0018      	movs	r0, r3
 800c544:	611a      	str	r2, [r3, #16]
 800c546:	b00b      	add	sp, #44	; 0x2c
 800c548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54a:	c304      	stmia	r3!, {r2}
 800c54c:	e7cf      	b.n	800c4ee <__multiply+0x52>
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	6818      	ldr	r0, [r3, #0]
 800c552:	b280      	uxth	r0, r0
 800c554:	2800      	cmp	r0, #0
 800c556:	d01e      	beq.n	800c596 <__multiply+0xfa>
 800c558:	4667      	mov	r7, ip
 800c55a:	2500      	movs	r5, #0
 800c55c:	9e08      	ldr	r6, [sp, #32]
 800c55e:	ce02      	ldmia	r6!, {r1}
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	9307      	str	r3, [sp, #28]
 800c564:	b28b      	uxth	r3, r1
 800c566:	4343      	muls	r3, r0
 800c568:	001a      	movs	r2, r3
 800c56a:	466b      	mov	r3, sp
 800c56c:	8b9b      	ldrh	r3, [r3, #28]
 800c56e:	18d3      	adds	r3, r2, r3
 800c570:	195b      	adds	r3, r3, r5
 800c572:	0c0d      	lsrs	r5, r1, #16
 800c574:	4345      	muls	r5, r0
 800c576:	9a07      	ldr	r2, [sp, #28]
 800c578:	0c11      	lsrs	r1, r2, #16
 800c57a:	1869      	adds	r1, r5, r1
 800c57c:	0c1a      	lsrs	r2, r3, #16
 800c57e:	188a      	adds	r2, r1, r2
 800c580:	b29b      	uxth	r3, r3
 800c582:	0c15      	lsrs	r5, r2, #16
 800c584:	0412      	lsls	r2, r2, #16
 800c586:	431a      	orrs	r2, r3
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	c704      	stmia	r7!, {r2}
 800c58c:	42b3      	cmp	r3, r6
 800c58e:	d8e6      	bhi.n	800c55e <__multiply+0xc2>
 800c590:	4663      	mov	r3, ip
 800c592:	9a06      	ldr	r2, [sp, #24]
 800c594:	509d      	str	r5, [r3, r2]
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	0c00      	lsrs	r0, r0, #16
 800c59c:	d020      	beq.n	800c5e0 <__multiply+0x144>
 800c59e:	4663      	mov	r3, ip
 800c5a0:	0025      	movs	r5, r4
 800c5a2:	4661      	mov	r1, ip
 800c5a4:	2700      	movs	r7, #0
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3514      	adds	r5, #20
 800c5aa:	682a      	ldr	r2, [r5, #0]
 800c5ac:	680e      	ldr	r6, [r1, #0]
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	4342      	muls	r2, r0
 800c5b2:	0c36      	lsrs	r6, r6, #16
 800c5b4:	1992      	adds	r2, r2, r6
 800c5b6:	19d2      	adds	r2, r2, r7
 800c5b8:	0416      	lsls	r6, r2, #16
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	431e      	orrs	r6, r3
 800c5be:	600e      	str	r6, [r1, #0]
 800c5c0:	cd40      	ldmia	r5!, {r6}
 800c5c2:	684b      	ldr	r3, [r1, #4]
 800c5c4:	0c36      	lsrs	r6, r6, #16
 800c5c6:	4346      	muls	r6, r0
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	0c12      	lsrs	r2, r2, #16
 800c5cc:	18f3      	adds	r3, r6, r3
 800c5ce:	189b      	adds	r3, r3, r2
 800c5d0:	9a05      	ldr	r2, [sp, #20]
 800c5d2:	0c1f      	lsrs	r7, r3, #16
 800c5d4:	3104      	adds	r1, #4
 800c5d6:	42aa      	cmp	r2, r5
 800c5d8:	d8e7      	bhi.n	800c5aa <__multiply+0x10e>
 800c5da:	4662      	mov	r2, ip
 800c5dc:	9906      	ldr	r1, [sp, #24]
 800c5de:	5053      	str	r3, [r2, r1]
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	449c      	add	ip, r3
 800c5ea:	e79b      	b.n	800c524 <__multiply+0x88>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	9303      	str	r3, [sp, #12]
 800c5f2:	e79b      	b.n	800c52c <__multiply+0x90>
 800c5f4:	08013ed1 	.word	0x08013ed1
 800c5f8:	08013f42 	.word	0x08013f42

0800c5fc <__pow5mult>:
 800c5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5fe:	2303      	movs	r3, #3
 800c600:	0015      	movs	r5, r2
 800c602:	0007      	movs	r7, r0
 800c604:	000e      	movs	r6, r1
 800c606:	401a      	ands	r2, r3
 800c608:	421d      	tst	r5, r3
 800c60a:	d008      	beq.n	800c61e <__pow5mult+0x22>
 800c60c:	491a      	ldr	r1, [pc, #104]	; (800c678 <__pow5mult+0x7c>)
 800c60e:	3a01      	subs	r2, #1
 800c610:	0092      	lsls	r2, r2, #2
 800c612:	5852      	ldr	r2, [r2, r1]
 800c614:	2300      	movs	r3, #0
 800c616:	0031      	movs	r1, r6
 800c618:	f7ff fe50 	bl	800c2bc <__multadd>
 800c61c:	0006      	movs	r6, r0
 800c61e:	10ad      	asrs	r5, r5, #2
 800c620:	d027      	beq.n	800c672 <__pow5mult+0x76>
 800c622:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c624:	2c00      	cmp	r4, #0
 800c626:	d107      	bne.n	800c638 <__pow5mult+0x3c>
 800c628:	0038      	movs	r0, r7
 800c62a:	4914      	ldr	r1, [pc, #80]	; (800c67c <__pow5mult+0x80>)
 800c62c:	f7ff ff1e 	bl	800c46c <__i2b>
 800c630:	2300      	movs	r3, #0
 800c632:	0004      	movs	r4, r0
 800c634:	6438      	str	r0, [r7, #64]	; 0x40
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	2301      	movs	r3, #1
 800c63a:	421d      	tst	r5, r3
 800c63c:	d00a      	beq.n	800c654 <__pow5mult+0x58>
 800c63e:	0031      	movs	r1, r6
 800c640:	0022      	movs	r2, r4
 800c642:	0038      	movs	r0, r7
 800c644:	f7ff ff2a 	bl	800c49c <__multiply>
 800c648:	0031      	movs	r1, r6
 800c64a:	9001      	str	r0, [sp, #4]
 800c64c:	0038      	movs	r0, r7
 800c64e:	f7ff fe2b 	bl	800c2a8 <_Bfree>
 800c652:	9e01      	ldr	r6, [sp, #4]
 800c654:	106d      	asrs	r5, r5, #1
 800c656:	d00c      	beq.n	800c672 <__pow5mult+0x76>
 800c658:	6820      	ldr	r0, [r4, #0]
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d107      	bne.n	800c66e <__pow5mult+0x72>
 800c65e:	0022      	movs	r2, r4
 800c660:	0021      	movs	r1, r4
 800c662:	0038      	movs	r0, r7
 800c664:	f7ff ff1a 	bl	800c49c <__multiply>
 800c668:	2300      	movs	r3, #0
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	6003      	str	r3, [r0, #0]
 800c66e:	0004      	movs	r4, r0
 800c670:	e7e2      	b.n	800c638 <__pow5mult+0x3c>
 800c672:	0030      	movs	r0, r6
 800c674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	08014090 	.word	0x08014090
 800c67c:	00000271 	.word	0x00000271

0800c680 <__lshift>:
 800c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c682:	000c      	movs	r4, r1
 800c684:	0017      	movs	r7, r2
 800c686:	6923      	ldr	r3, [r4, #16]
 800c688:	1155      	asrs	r5, r2, #5
 800c68a:	b087      	sub	sp, #28
 800c68c:	18eb      	adds	r3, r5, r3
 800c68e:	9302      	str	r3, [sp, #8]
 800c690:	3301      	adds	r3, #1
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	6849      	ldr	r1, [r1, #4]
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	9004      	str	r0, [sp, #16]
 800c69a:	9a01      	ldr	r2, [sp, #4]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	db10      	blt.n	800c6c2 <__lshift+0x42>
 800c6a0:	9804      	ldr	r0, [sp, #16]
 800c6a2:	f7ff fdd9 	bl	800c258 <_Balloc>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	0002      	movs	r2, r0
 800c6aa:	0006      	movs	r6, r0
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	3214      	adds	r2, #20
 800c6b0:	4298      	cmp	r0, r3
 800c6b2:	d10c      	bne.n	800c6ce <__lshift+0x4e>
 800c6b4:	31df      	adds	r1, #223	; 0xdf
 800c6b6:	0032      	movs	r2, r6
 800c6b8:	4b26      	ldr	r3, [pc, #152]	; (800c754 <__lshift+0xd4>)
 800c6ba:	4827      	ldr	r0, [pc, #156]	; (800c758 <__lshift+0xd8>)
 800c6bc:	31ff      	adds	r1, #255	; 0xff
 800c6be:	f003 f88f 	bl	800f7e0 <__assert_func>
 800c6c2:	3101      	adds	r1, #1
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	e7e8      	b.n	800c69a <__lshift+0x1a>
 800c6c8:	0098      	lsls	r0, r3, #2
 800c6ca:	5011      	str	r1, [r2, r0]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	42ab      	cmp	r3, r5
 800c6d0:	dbfa      	blt.n	800c6c8 <__lshift+0x48>
 800c6d2:	43eb      	mvns	r3, r5
 800c6d4:	17db      	asrs	r3, r3, #31
 800c6d6:	401d      	ands	r5, r3
 800c6d8:	211f      	movs	r1, #31
 800c6da:	0023      	movs	r3, r4
 800c6dc:	0038      	movs	r0, r7
 800c6de:	00ad      	lsls	r5, r5, #2
 800c6e0:	1955      	adds	r5, r2, r5
 800c6e2:	6922      	ldr	r2, [r4, #16]
 800c6e4:	3314      	adds	r3, #20
 800c6e6:	0092      	lsls	r2, r2, #2
 800c6e8:	4008      	ands	r0, r1
 800c6ea:	4684      	mov	ip, r0
 800c6ec:	189a      	adds	r2, r3, r2
 800c6ee:	420f      	tst	r7, r1
 800c6f0:	d02a      	beq.n	800c748 <__lshift+0xc8>
 800c6f2:	3101      	adds	r1, #1
 800c6f4:	1a09      	subs	r1, r1, r0
 800c6f6:	9105      	str	r1, [sp, #20]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	9503      	str	r5, [sp, #12]
 800c6fc:	4667      	mov	r7, ip
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	40b8      	lsls	r0, r7
 800c702:	4308      	orrs	r0, r1
 800c704:	9903      	ldr	r1, [sp, #12]
 800c706:	c101      	stmia	r1!, {r0}
 800c708:	9103      	str	r1, [sp, #12]
 800c70a:	9805      	ldr	r0, [sp, #20]
 800c70c:	cb02      	ldmia	r3!, {r1}
 800c70e:	40c1      	lsrs	r1, r0
 800c710:	429a      	cmp	r2, r3
 800c712:	d8f3      	bhi.n	800c6fc <__lshift+0x7c>
 800c714:	0020      	movs	r0, r4
 800c716:	3015      	adds	r0, #21
 800c718:	2304      	movs	r3, #4
 800c71a:	4282      	cmp	r2, r0
 800c71c:	d304      	bcc.n	800c728 <__lshift+0xa8>
 800c71e:	1b13      	subs	r3, r2, r4
 800c720:	3b15      	subs	r3, #21
 800c722:	089b      	lsrs	r3, r3, #2
 800c724:	3301      	adds	r3, #1
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	50e9      	str	r1, [r5, r3]
 800c72a:	2900      	cmp	r1, #0
 800c72c:	d002      	beq.n	800c734 <__lshift+0xb4>
 800c72e:	9b02      	ldr	r3, [sp, #8]
 800c730:	3302      	adds	r3, #2
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	9b01      	ldr	r3, [sp, #4]
 800c736:	9804      	ldr	r0, [sp, #16]
 800c738:	3b01      	subs	r3, #1
 800c73a:	0021      	movs	r1, r4
 800c73c:	6133      	str	r3, [r6, #16]
 800c73e:	f7ff fdb3 	bl	800c2a8 <_Bfree>
 800c742:	0030      	movs	r0, r6
 800c744:	b007      	add	sp, #28
 800c746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c748:	cb02      	ldmia	r3!, {r1}
 800c74a:	c502      	stmia	r5!, {r1}
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d8fb      	bhi.n	800c748 <__lshift+0xc8>
 800c750:	e7f0      	b.n	800c734 <__lshift+0xb4>
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	08013ed1 	.word	0x08013ed1
 800c758:	08013f42 	.word	0x08013f42

0800c75c <__mcmp>:
 800c75c:	b530      	push	{r4, r5, lr}
 800c75e:	690b      	ldr	r3, [r1, #16]
 800c760:	6904      	ldr	r4, [r0, #16]
 800c762:	0002      	movs	r2, r0
 800c764:	1ae0      	subs	r0, r4, r3
 800c766:	429c      	cmp	r4, r3
 800c768:	d10e      	bne.n	800c788 <__mcmp+0x2c>
 800c76a:	3214      	adds	r2, #20
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	3114      	adds	r1, #20
 800c770:	0014      	movs	r4, r2
 800c772:	18c9      	adds	r1, r1, r3
 800c774:	18d2      	adds	r2, r2, r3
 800c776:	3a04      	subs	r2, #4
 800c778:	3904      	subs	r1, #4
 800c77a:	6815      	ldr	r5, [r2, #0]
 800c77c:	680b      	ldr	r3, [r1, #0]
 800c77e:	429d      	cmp	r5, r3
 800c780:	d003      	beq.n	800c78a <__mcmp+0x2e>
 800c782:	2001      	movs	r0, #1
 800c784:	429d      	cmp	r5, r3
 800c786:	d303      	bcc.n	800c790 <__mcmp+0x34>
 800c788:	bd30      	pop	{r4, r5, pc}
 800c78a:	4294      	cmp	r4, r2
 800c78c:	d3f3      	bcc.n	800c776 <__mcmp+0x1a>
 800c78e:	e7fb      	b.n	800c788 <__mcmp+0x2c>
 800c790:	4240      	negs	r0, r0
 800c792:	e7f9      	b.n	800c788 <__mcmp+0x2c>

0800c794 <__mdiff>:
 800c794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c796:	000e      	movs	r6, r1
 800c798:	0007      	movs	r7, r0
 800c79a:	0011      	movs	r1, r2
 800c79c:	0030      	movs	r0, r6
 800c79e:	b087      	sub	sp, #28
 800c7a0:	0014      	movs	r4, r2
 800c7a2:	f7ff ffdb 	bl	800c75c <__mcmp>
 800c7a6:	1e05      	subs	r5, r0, #0
 800c7a8:	d110      	bne.n	800c7cc <__mdiff+0x38>
 800c7aa:	0001      	movs	r1, r0
 800c7ac:	0038      	movs	r0, r7
 800c7ae:	f7ff fd53 	bl	800c258 <_Balloc>
 800c7b2:	1e02      	subs	r2, r0, #0
 800c7b4:	d104      	bne.n	800c7c0 <__mdiff+0x2c>
 800c7b6:	4b3f      	ldr	r3, [pc, #252]	; (800c8b4 <__mdiff+0x120>)
 800c7b8:	483f      	ldr	r0, [pc, #252]	; (800c8b8 <__mdiff+0x124>)
 800c7ba:	4940      	ldr	r1, [pc, #256]	; (800c8bc <__mdiff+0x128>)
 800c7bc:	f003 f810 	bl	800f7e0 <__assert_func>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	6145      	str	r5, [r0, #20]
 800c7c4:	6103      	str	r3, [r0, #16]
 800c7c6:	0010      	movs	r0, r2
 800c7c8:	b007      	add	sp, #28
 800c7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	db04      	blt.n	800c7de <__mdiff+0x4a>
 800c7d4:	0023      	movs	r3, r4
 800c7d6:	0034      	movs	r4, r6
 800c7d8:	001e      	movs	r6, r3
 800c7da:	2300      	movs	r3, #0
 800c7dc:	9301      	str	r3, [sp, #4]
 800c7de:	0038      	movs	r0, r7
 800c7e0:	6861      	ldr	r1, [r4, #4]
 800c7e2:	f7ff fd39 	bl	800c258 <_Balloc>
 800c7e6:	1e02      	subs	r2, r0, #0
 800c7e8:	d103      	bne.n	800c7f2 <__mdiff+0x5e>
 800c7ea:	4b32      	ldr	r3, [pc, #200]	; (800c8b4 <__mdiff+0x120>)
 800c7ec:	4832      	ldr	r0, [pc, #200]	; (800c8b8 <__mdiff+0x124>)
 800c7ee:	4934      	ldr	r1, [pc, #208]	; (800c8c0 <__mdiff+0x12c>)
 800c7f0:	e7e4      	b.n	800c7bc <__mdiff+0x28>
 800c7f2:	9b01      	ldr	r3, [sp, #4]
 800c7f4:	2700      	movs	r7, #0
 800c7f6:	60c3      	str	r3, [r0, #12]
 800c7f8:	6920      	ldr	r0, [r4, #16]
 800c7fa:	3414      	adds	r4, #20
 800c7fc:	0083      	lsls	r3, r0, #2
 800c7fe:	18e3      	adds	r3, r4, r3
 800c800:	0021      	movs	r1, r4
 800c802:	9401      	str	r4, [sp, #4]
 800c804:	0034      	movs	r4, r6
 800c806:	9302      	str	r3, [sp, #8]
 800c808:	6933      	ldr	r3, [r6, #16]
 800c80a:	3414      	adds	r4, #20
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	18e3      	adds	r3, r4, r3
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	0013      	movs	r3, r2
 800c814:	3314      	adds	r3, #20
 800c816:	469c      	mov	ip, r3
 800c818:	9305      	str	r3, [sp, #20]
 800c81a:	9104      	str	r1, [sp, #16]
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	cc02      	ldmia	r4!, {r1}
 800c820:	cb20      	ldmia	r3!, {r5}
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	b2ab      	uxth	r3, r5
 800c826:	19df      	adds	r7, r3, r7
 800c828:	b28b      	uxth	r3, r1
 800c82a:	1afb      	subs	r3, r7, r3
 800c82c:	0c09      	lsrs	r1, r1, #16
 800c82e:	0c2d      	lsrs	r5, r5, #16
 800c830:	1a6d      	subs	r5, r5, r1
 800c832:	1419      	asrs	r1, r3, #16
 800c834:	1869      	adds	r1, r5, r1
 800c836:	b29b      	uxth	r3, r3
 800c838:	140f      	asrs	r7, r1, #16
 800c83a:	0409      	lsls	r1, r1, #16
 800c83c:	4319      	orrs	r1, r3
 800c83e:	4663      	mov	r3, ip
 800c840:	c302      	stmia	r3!, {r1}
 800c842:	469c      	mov	ip, r3
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	42a3      	cmp	r3, r4
 800c848:	d8e8      	bhi.n	800c81c <__mdiff+0x88>
 800c84a:	0031      	movs	r1, r6
 800c84c:	9c03      	ldr	r4, [sp, #12]
 800c84e:	3115      	adds	r1, #21
 800c850:	2304      	movs	r3, #4
 800c852:	428c      	cmp	r4, r1
 800c854:	d304      	bcc.n	800c860 <__mdiff+0xcc>
 800c856:	1ba3      	subs	r3, r4, r6
 800c858:	3b15      	subs	r3, #21
 800c85a:	089b      	lsrs	r3, r3, #2
 800c85c:	3301      	adds	r3, #1
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	9901      	ldr	r1, [sp, #4]
 800c862:	18cd      	adds	r5, r1, r3
 800c864:	9905      	ldr	r1, [sp, #20]
 800c866:	002e      	movs	r6, r5
 800c868:	18cb      	adds	r3, r1, r3
 800c86a:	469c      	mov	ip, r3
 800c86c:	9902      	ldr	r1, [sp, #8]
 800c86e:	428e      	cmp	r6, r1
 800c870:	d310      	bcc.n	800c894 <__mdiff+0x100>
 800c872:	9e02      	ldr	r6, [sp, #8]
 800c874:	1ee9      	subs	r1, r5, #3
 800c876:	2400      	movs	r4, #0
 800c878:	428e      	cmp	r6, r1
 800c87a:	d304      	bcc.n	800c886 <__mdiff+0xf2>
 800c87c:	0031      	movs	r1, r6
 800c87e:	3103      	adds	r1, #3
 800c880:	1b49      	subs	r1, r1, r5
 800c882:	0889      	lsrs	r1, r1, #2
 800c884:	008c      	lsls	r4, r1, #2
 800c886:	191b      	adds	r3, r3, r4
 800c888:	3b04      	subs	r3, #4
 800c88a:	6819      	ldr	r1, [r3, #0]
 800c88c:	2900      	cmp	r1, #0
 800c88e:	d00f      	beq.n	800c8b0 <__mdiff+0x11c>
 800c890:	6110      	str	r0, [r2, #16]
 800c892:	e798      	b.n	800c7c6 <__mdiff+0x32>
 800c894:	ce02      	ldmia	r6!, {r1}
 800c896:	b28c      	uxth	r4, r1
 800c898:	19e4      	adds	r4, r4, r7
 800c89a:	0c0f      	lsrs	r7, r1, #16
 800c89c:	1421      	asrs	r1, r4, #16
 800c89e:	1879      	adds	r1, r7, r1
 800c8a0:	b2a4      	uxth	r4, r4
 800c8a2:	140f      	asrs	r7, r1, #16
 800c8a4:	0409      	lsls	r1, r1, #16
 800c8a6:	4321      	orrs	r1, r4
 800c8a8:	4664      	mov	r4, ip
 800c8aa:	c402      	stmia	r4!, {r1}
 800c8ac:	46a4      	mov	ip, r4
 800c8ae:	e7dd      	b.n	800c86c <__mdiff+0xd8>
 800c8b0:	3801      	subs	r0, #1
 800c8b2:	e7e9      	b.n	800c888 <__mdiff+0xf4>
 800c8b4:	08013ed1 	.word	0x08013ed1
 800c8b8:	08013f42 	.word	0x08013f42
 800c8bc:	00000237 	.word	0x00000237
 800c8c0:	00000245 	.word	0x00000245

0800c8c4 <__ulp>:
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <__ulp+0x30>)
 800c8c8:	4019      	ands	r1, r3
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <__ulp+0x34>)
 800c8cc:	18c9      	adds	r1, r1, r3
 800c8ce:	4281      	cmp	r1, r0
 800c8d0:	dc06      	bgt.n	800c8e0 <__ulp+0x1c>
 800c8d2:	4249      	negs	r1, r1
 800c8d4:	150b      	asrs	r3, r1, #20
 800c8d6:	2b13      	cmp	r3, #19
 800c8d8:	dc03      	bgt.n	800c8e2 <__ulp+0x1e>
 800c8da:	2180      	movs	r1, #128	; 0x80
 800c8dc:	0309      	lsls	r1, r1, #12
 800c8de:	4119      	asrs	r1, r3
 800c8e0:	4770      	bx	lr
 800c8e2:	3b14      	subs	r3, #20
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	2b1e      	cmp	r3, #30
 800c8e8:	dc02      	bgt.n	800c8f0 <__ulp+0x2c>
 800c8ea:	2080      	movs	r0, #128	; 0x80
 800c8ec:	0600      	lsls	r0, r0, #24
 800c8ee:	40d8      	lsrs	r0, r3
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	e7f5      	b.n	800c8e0 <__ulp+0x1c>
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	fcc00000 	.word	0xfcc00000

0800c8fc <__b2d>:
 800c8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8fe:	0006      	movs	r6, r0
 800c900:	6903      	ldr	r3, [r0, #16]
 800c902:	3614      	adds	r6, #20
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	18f3      	adds	r3, r6, r3
 800c908:	1f1d      	subs	r5, r3, #4
 800c90a:	682c      	ldr	r4, [r5, #0]
 800c90c:	000f      	movs	r7, r1
 800c90e:	0020      	movs	r0, r4
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	f7ff fd63 	bl	800c3dc <__hi0bits>
 800c916:	2220      	movs	r2, #32
 800c918:	1a12      	subs	r2, r2, r0
 800c91a:	603a      	str	r2, [r7, #0]
 800c91c:	0003      	movs	r3, r0
 800c91e:	4a1c      	ldr	r2, [pc, #112]	; (800c990 <__b2d+0x94>)
 800c920:	280a      	cmp	r0, #10
 800c922:	dc15      	bgt.n	800c950 <__b2d+0x54>
 800c924:	210b      	movs	r1, #11
 800c926:	0027      	movs	r7, r4
 800c928:	1a09      	subs	r1, r1, r0
 800c92a:	40cf      	lsrs	r7, r1
 800c92c:	433a      	orrs	r2, r7
 800c92e:	468c      	mov	ip, r1
 800c930:	0011      	movs	r1, r2
 800c932:	2200      	movs	r2, #0
 800c934:	42ae      	cmp	r6, r5
 800c936:	d202      	bcs.n	800c93e <__b2d+0x42>
 800c938:	9a01      	ldr	r2, [sp, #4]
 800c93a:	3a08      	subs	r2, #8
 800c93c:	6812      	ldr	r2, [r2, #0]
 800c93e:	3315      	adds	r3, #21
 800c940:	409c      	lsls	r4, r3
 800c942:	4663      	mov	r3, ip
 800c944:	0027      	movs	r7, r4
 800c946:	40da      	lsrs	r2, r3
 800c948:	4317      	orrs	r7, r2
 800c94a:	0038      	movs	r0, r7
 800c94c:	b003      	add	sp, #12
 800c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c950:	2700      	movs	r7, #0
 800c952:	42ae      	cmp	r6, r5
 800c954:	d202      	bcs.n	800c95c <__b2d+0x60>
 800c956:	9d01      	ldr	r5, [sp, #4]
 800c958:	3d08      	subs	r5, #8
 800c95a:	682f      	ldr	r7, [r5, #0]
 800c95c:	210b      	movs	r1, #11
 800c95e:	4249      	negs	r1, r1
 800c960:	468c      	mov	ip, r1
 800c962:	449c      	add	ip, r3
 800c964:	2b0b      	cmp	r3, #11
 800c966:	d010      	beq.n	800c98a <__b2d+0x8e>
 800c968:	4661      	mov	r1, ip
 800c96a:	2320      	movs	r3, #32
 800c96c:	408c      	lsls	r4, r1
 800c96e:	1a5b      	subs	r3, r3, r1
 800c970:	0039      	movs	r1, r7
 800c972:	40d9      	lsrs	r1, r3
 800c974:	430c      	orrs	r4, r1
 800c976:	4322      	orrs	r2, r4
 800c978:	0011      	movs	r1, r2
 800c97a:	2200      	movs	r2, #0
 800c97c:	42b5      	cmp	r5, r6
 800c97e:	d901      	bls.n	800c984 <__b2d+0x88>
 800c980:	3d04      	subs	r5, #4
 800c982:	682a      	ldr	r2, [r5, #0]
 800c984:	4664      	mov	r4, ip
 800c986:	40a7      	lsls	r7, r4
 800c988:	e7dd      	b.n	800c946 <__b2d+0x4a>
 800c98a:	4322      	orrs	r2, r4
 800c98c:	0011      	movs	r1, r2
 800c98e:	e7dc      	b.n	800c94a <__b2d+0x4e>
 800c990:	3ff00000 	.word	0x3ff00000

0800c994 <__d2b>:
 800c994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c996:	2101      	movs	r1, #1
 800c998:	0014      	movs	r4, r2
 800c99a:	001d      	movs	r5, r3
 800c99c:	9f08      	ldr	r7, [sp, #32]
 800c99e:	f7ff fc5b 	bl	800c258 <_Balloc>
 800c9a2:	1e06      	subs	r6, r0, #0
 800c9a4:	d105      	bne.n	800c9b2 <__d2b+0x1e>
 800c9a6:	0032      	movs	r2, r6
 800c9a8:	4b24      	ldr	r3, [pc, #144]	; (800ca3c <__d2b+0xa8>)
 800c9aa:	4825      	ldr	r0, [pc, #148]	; (800ca40 <__d2b+0xac>)
 800c9ac:	4925      	ldr	r1, [pc, #148]	; (800ca44 <__d2b+0xb0>)
 800c9ae:	f002 ff17 	bl	800f7e0 <__assert_func>
 800c9b2:	032b      	lsls	r3, r5, #12
 800c9b4:	006d      	lsls	r5, r5, #1
 800c9b6:	0b1b      	lsrs	r3, r3, #12
 800c9b8:	0d6d      	lsrs	r5, r5, #21
 800c9ba:	d125      	bne.n	800ca08 <__d2b+0x74>
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d028      	beq.n	800ca14 <__d2b+0x80>
 800c9c2:	4668      	mov	r0, sp
 800c9c4:	9400      	str	r4, [sp, #0]
 800c9c6:	f7ff fd23 	bl	800c410 <__lo0bits>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	9900      	ldr	r1, [sp, #0]
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d01e      	beq.n	800ca10 <__d2b+0x7c>
 800c9d2:	2220      	movs	r2, #32
 800c9d4:	001c      	movs	r4, r3
 800c9d6:	1a12      	subs	r2, r2, r0
 800c9d8:	4094      	lsls	r4, r2
 800c9da:	0022      	movs	r2, r4
 800c9dc:	40c3      	lsrs	r3, r0
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	6172      	str	r2, [r6, #20]
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	9c01      	ldr	r4, [sp, #4]
 800c9e6:	61b4      	str	r4, [r6, #24]
 800c9e8:	1e63      	subs	r3, r4, #1
 800c9ea:	419c      	sbcs	r4, r3
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	6134      	str	r4, [r6, #16]
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	d017      	beq.n	800ca24 <__d2b+0x90>
 800c9f4:	2435      	movs	r4, #53	; 0x35
 800c9f6:	4b14      	ldr	r3, [pc, #80]	; (800ca48 <__d2b+0xb4>)
 800c9f8:	18ed      	adds	r5, r5, r3
 800c9fa:	182d      	adds	r5, r5, r0
 800c9fc:	603d      	str	r5, [r7, #0]
 800c9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca00:	1a24      	subs	r4, r4, r0
 800ca02:	601c      	str	r4, [r3, #0]
 800ca04:	0030      	movs	r0, r6
 800ca06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca08:	2280      	movs	r2, #128	; 0x80
 800ca0a:	0352      	lsls	r2, r2, #13
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	e7d5      	b.n	800c9bc <__d2b+0x28>
 800ca10:	6171      	str	r1, [r6, #20]
 800ca12:	e7e7      	b.n	800c9e4 <__d2b+0x50>
 800ca14:	a801      	add	r0, sp, #4
 800ca16:	f7ff fcfb 	bl	800c410 <__lo0bits>
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	2401      	movs	r4, #1
 800ca1e:	6173      	str	r3, [r6, #20]
 800ca20:	3020      	adds	r0, #32
 800ca22:	e7e4      	b.n	800c9ee <__d2b+0x5a>
 800ca24:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <__d2b+0xb8>)
 800ca26:	18c0      	adds	r0, r0, r3
 800ca28:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <__d2b+0xbc>)
 800ca2a:	6038      	str	r0, [r7, #0]
 800ca2c:	18e3      	adds	r3, r4, r3
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	18f3      	adds	r3, r6, r3
 800ca32:	6958      	ldr	r0, [r3, #20]
 800ca34:	f7ff fcd2 	bl	800c3dc <__hi0bits>
 800ca38:	0164      	lsls	r4, r4, #5
 800ca3a:	e7e0      	b.n	800c9fe <__d2b+0x6a>
 800ca3c:	08013ed1 	.word	0x08013ed1
 800ca40:	08013f42 	.word	0x08013f42
 800ca44:	0000030f 	.word	0x0000030f
 800ca48:	fffffbcd 	.word	0xfffffbcd
 800ca4c:	fffffbce 	.word	0xfffffbce
 800ca50:	3fffffff 	.word	0x3fffffff

0800ca54 <__ratio>:
 800ca54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca56:	b087      	sub	sp, #28
 800ca58:	000f      	movs	r7, r1
 800ca5a:	a904      	add	r1, sp, #16
 800ca5c:	0006      	movs	r6, r0
 800ca5e:	f7ff ff4d 	bl	800c8fc <__b2d>
 800ca62:	9000      	str	r0, [sp, #0]
 800ca64:	9101      	str	r1, [sp, #4]
 800ca66:	9c00      	ldr	r4, [sp, #0]
 800ca68:	9d01      	ldr	r5, [sp, #4]
 800ca6a:	0038      	movs	r0, r7
 800ca6c:	a905      	add	r1, sp, #20
 800ca6e:	f7ff ff45 	bl	800c8fc <__b2d>
 800ca72:	9002      	str	r0, [sp, #8]
 800ca74:	9103      	str	r1, [sp, #12]
 800ca76:	9a02      	ldr	r2, [sp, #8]
 800ca78:	9b03      	ldr	r3, [sp, #12]
 800ca7a:	6930      	ldr	r0, [r6, #16]
 800ca7c:	6939      	ldr	r1, [r7, #16]
 800ca7e:	9e04      	ldr	r6, [sp, #16]
 800ca80:	1a40      	subs	r0, r0, r1
 800ca82:	9905      	ldr	r1, [sp, #20]
 800ca84:	0140      	lsls	r0, r0, #5
 800ca86:	1a71      	subs	r1, r6, r1
 800ca88:	1841      	adds	r1, r0, r1
 800ca8a:	0508      	lsls	r0, r1, #20
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	dd07      	ble.n	800caa0 <__ratio+0x4c>
 800ca90:	9901      	ldr	r1, [sp, #4]
 800ca92:	1845      	adds	r5, r0, r1
 800ca94:	0020      	movs	r0, r4
 800ca96:	0029      	movs	r1, r5
 800ca98:	f7f4 f9ee 	bl	8000e78 <__aeabi_ddiv>
 800ca9c:	b007      	add	sp, #28
 800ca9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa0:	9903      	ldr	r1, [sp, #12]
 800caa2:	1a0b      	subs	r3, r1, r0
 800caa4:	e7f6      	b.n	800ca94 <__ratio+0x40>

0800caa6 <__copybits>:
 800caa6:	b570      	push	{r4, r5, r6, lr}
 800caa8:	0014      	movs	r4, r2
 800caaa:	0005      	movs	r5, r0
 800caac:	3901      	subs	r1, #1
 800caae:	6913      	ldr	r3, [r2, #16]
 800cab0:	1149      	asrs	r1, r1, #5
 800cab2:	3101      	adds	r1, #1
 800cab4:	0089      	lsls	r1, r1, #2
 800cab6:	3414      	adds	r4, #20
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	1841      	adds	r1, r0, r1
 800cabc:	18e3      	adds	r3, r4, r3
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	d80d      	bhi.n	800cade <__copybits+0x38>
 800cac2:	0014      	movs	r4, r2
 800cac4:	3411      	adds	r4, #17
 800cac6:	2500      	movs	r5, #0
 800cac8:	429c      	cmp	r4, r3
 800caca:	d803      	bhi.n	800cad4 <__copybits+0x2e>
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	3b11      	subs	r3, #17
 800cad0:	089b      	lsrs	r3, r3, #2
 800cad2:	009d      	lsls	r5, r3, #2
 800cad4:	2300      	movs	r3, #0
 800cad6:	1940      	adds	r0, r0, r5
 800cad8:	4281      	cmp	r1, r0
 800cada:	d803      	bhi.n	800cae4 <__copybits+0x3e>
 800cadc:	bd70      	pop	{r4, r5, r6, pc}
 800cade:	cc40      	ldmia	r4!, {r6}
 800cae0:	c540      	stmia	r5!, {r6}
 800cae2:	e7ec      	b.n	800cabe <__copybits+0x18>
 800cae4:	c008      	stmia	r0!, {r3}
 800cae6:	e7f7      	b.n	800cad8 <__copybits+0x32>

0800cae8 <__any_on>:
 800cae8:	0002      	movs	r2, r0
 800caea:	6900      	ldr	r0, [r0, #16]
 800caec:	b510      	push	{r4, lr}
 800caee:	3214      	adds	r2, #20
 800caf0:	114b      	asrs	r3, r1, #5
 800caf2:	4298      	cmp	r0, r3
 800caf4:	db13      	blt.n	800cb1e <__any_on+0x36>
 800caf6:	dd0c      	ble.n	800cb12 <__any_on+0x2a>
 800caf8:	241f      	movs	r4, #31
 800cafa:	0008      	movs	r0, r1
 800cafc:	4020      	ands	r0, r4
 800cafe:	4221      	tst	r1, r4
 800cb00:	d007      	beq.n	800cb12 <__any_on+0x2a>
 800cb02:	0099      	lsls	r1, r3, #2
 800cb04:	588c      	ldr	r4, [r1, r2]
 800cb06:	0021      	movs	r1, r4
 800cb08:	40c1      	lsrs	r1, r0
 800cb0a:	4081      	lsls	r1, r0
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	428c      	cmp	r4, r1
 800cb10:	d104      	bne.n	800cb1c <__any_on+0x34>
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	18d3      	adds	r3, r2, r3
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d803      	bhi.n	800cb22 <__any_on+0x3a>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	0003      	movs	r3, r0
 800cb20:	e7f7      	b.n	800cb12 <__any_on+0x2a>
 800cb22:	3b04      	subs	r3, #4
 800cb24:	6819      	ldr	r1, [r3, #0]
 800cb26:	2900      	cmp	r1, #0
 800cb28:	d0f5      	beq.n	800cb16 <__any_on+0x2e>
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	e7f6      	b.n	800cb1c <__any_on+0x34>

0800cb2e <__ascii_wctomb>:
 800cb2e:	0003      	movs	r3, r0
 800cb30:	1e08      	subs	r0, r1, #0
 800cb32:	d005      	beq.n	800cb40 <__ascii_wctomb+0x12>
 800cb34:	2aff      	cmp	r2, #255	; 0xff
 800cb36:	d904      	bls.n	800cb42 <__ascii_wctomb+0x14>
 800cb38:	228a      	movs	r2, #138	; 0x8a
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	4240      	negs	r0, r0
 800cb40:	4770      	bx	lr
 800cb42:	2001      	movs	r0, #1
 800cb44:	700a      	strb	r2, [r1, #0]
 800cb46:	e7fb      	b.n	800cb40 <__ascii_wctomb+0x12>

0800cb48 <_svfprintf_r>:
 800cb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb4a:	b0d9      	sub	sp, #356	; 0x164
 800cb4c:	001c      	movs	r4, r3
 800cb4e:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb50:	9208      	str	r2, [sp, #32]
 800cb52:	900a      	str	r0, [sp, #40]	; 0x28
 800cb54:	f002 fdae 	bl	800f6b4 <_localeconv_r>
 800cb58:	6803      	ldr	r3, [r0, #0]
 800cb5a:	0018      	movs	r0, r3
 800cb5c:	931c      	str	r3, [sp, #112]	; 0x70
 800cb5e:	f7f3 fad1 	bl	8000104 <strlen>
 800cb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb64:	9016      	str	r0, [sp, #88]	; 0x58
 800cb66:	899b      	ldrh	r3, [r3, #12]
 800cb68:	061b      	lsls	r3, r3, #24
 800cb6a:	d517      	bpl.n	800cb9c <_svfprintf_r+0x54>
 800cb6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d113      	bne.n	800cb9c <_svfprintf_r+0x54>
 800cb74:	2140      	movs	r1, #64	; 0x40
 800cb76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb78:	f7fd fb6e 	bl	800a258 <_malloc_r>
 800cb7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7e:	6018      	str	r0, [r3, #0]
 800cb80:	6118      	str	r0, [r3, #16]
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d107      	bne.n	800cb96 <_svfprintf_r+0x4e>
 800cb86:	230c      	movs	r3, #12
 800cb88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	3b0d      	subs	r3, #13
 800cb8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb90:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cb92:	b059      	add	sp, #356	; 0x164
 800cb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb96:	2340      	movs	r3, #64	; 0x40
 800cb98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb9a:	6153      	str	r3, [r2, #20]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	2200      	movs	r2, #0
 800cba0:	932e      	str	r3, [sp, #184]	; 0xb8
 800cba2:	932d      	str	r3, [sp, #180]	; 0xb4
 800cba4:	930e      	str	r3, [sp, #56]	; 0x38
 800cba6:	2300      	movs	r3, #0
 800cba8:	9214      	str	r2, [sp, #80]	; 0x50
 800cbaa:	9315      	str	r3, [sp, #84]	; 0x54
 800cbac:	2300      	movs	r3, #0
 800cbae:	af2f      	add	r7, sp, #188	; 0xbc
 800cbb0:	972c      	str	r7, [sp, #176]	; 0xb0
 800cbb2:	931f      	str	r3, [sp, #124]	; 0x7c
 800cbb4:	931e      	str	r3, [sp, #120]	; 0x78
 800cbb6:	9312      	str	r3, [sp, #72]	; 0x48
 800cbb8:	931b      	str	r3, [sp, #108]	; 0x6c
 800cbba:	931d      	str	r3, [sp, #116]	; 0x74
 800cbbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbbe:	9d08      	ldr	r5, [sp, #32]
 800cbc0:	782b      	ldrb	r3, [r5, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <_svfprintf_r+0x84>
 800cbc6:	2b25      	cmp	r3, #37	; 0x25
 800cbc8:	d000      	beq.n	800cbcc <_svfprintf_r+0x84>
 800cbca:	e091      	b.n	800ccf0 <_svfprintf_r+0x1a8>
 800cbcc:	9b08      	ldr	r3, [sp, #32]
 800cbce:	1aee      	subs	r6, r5, r3
 800cbd0:	429d      	cmp	r5, r3
 800cbd2:	d016      	beq.n	800cc02 <_svfprintf_r+0xba>
 800cbd4:	603b      	str	r3, [r7, #0]
 800cbd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cbd8:	607e      	str	r6, [r7, #4]
 800cbda:	199b      	adds	r3, r3, r6
 800cbdc:	932e      	str	r3, [sp, #184]	; 0xb8
 800cbde:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbe6:	2b07      	cmp	r3, #7
 800cbe8:	dd08      	ble.n	800cbfc <_svfprintf_r+0xb4>
 800cbea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbee:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbf0:	f004 f8c0 	bl	8010d74 <__ssprint_r>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d000      	beq.n	800cbfa <_svfprintf_r+0xb2>
 800cbf8:	e1cf      	b.n	800cf9a <_svfprintf_r+0x452>
 800cbfa:	af2f      	add	r7, sp, #188	; 0xbc
 800cbfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbfe:	199b      	adds	r3, r3, r6
 800cc00:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc02:	782b      	ldrb	r3, [r5, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d101      	bne.n	800cc0c <_svfprintf_r+0xc4>
 800cc08:	f001 f99e 	bl	800df48 <_svfprintf_r+0x1400>
 800cc0c:	221b      	movs	r2, #27
 800cc0e:	2300      	movs	r3, #0
 800cc10:	a91e      	add	r1, sp, #120	; 0x78
 800cc12:	1852      	adds	r2, r2, r1
 800cc14:	7013      	strb	r3, [r2, #0]
 800cc16:	2201      	movs	r2, #1
 800cc18:	001e      	movs	r6, r3
 800cc1a:	4252      	negs	r2, r2
 800cc1c:	3501      	adds	r5, #1
 800cc1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc20:	9318      	str	r3, [sp, #96]	; 0x60
 800cc22:	1c6b      	adds	r3, r5, #1
 800cc24:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc26:	782b      	ldrb	r3, [r5, #0]
 800cc28:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cc2c:	3820      	subs	r0, #32
 800cc2e:	285a      	cmp	r0, #90	; 0x5a
 800cc30:	d901      	bls.n	800cc36 <_svfprintf_r+0xee>
 800cc32:	f000 fe20 	bl	800d876 <_svfprintf_r+0xd2e>
 800cc36:	f7f3 fa77 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cc3a:	0078      	.short	0x0078
 800cc3c:	061e061e 	.word	0x061e061e
 800cc40:	061e0082 	.word	0x061e0082
 800cc44:	061e061e 	.word	0x061e061e
 800cc48:	061e005d 	.word	0x061e005d
 800cc4c:	0084061e 	.word	0x0084061e
 800cc50:	061e008c 	.word	0x061e008c
 800cc54:	0091008a 	.word	0x0091008a
 800cc58:	00b2061e 	.word	0x00b2061e
 800cc5c:	00b400b4 	.word	0x00b400b4
 800cc60:	00b400b4 	.word	0x00b400b4
 800cc64:	00b400b4 	.word	0x00b400b4
 800cc68:	00b400b4 	.word	0x00b400b4
 800cc6c:	061e00b4 	.word	0x061e00b4
 800cc70:	061e061e 	.word	0x061e061e
 800cc74:	061e061e 	.word	0x061e061e
 800cc78:	061e061e 	.word	0x061e061e
 800cc7c:	061e013b 	.word	0x061e013b
 800cc80:	00f400e0 	.word	0x00f400e0
 800cc84:	013b013b 	.word	0x013b013b
 800cc88:	061e013b 	.word	0x061e013b
 800cc8c:	061e061e 	.word	0x061e061e
 800cc90:	00c7061e 	.word	0x00c7061e
 800cc94:	061e061e 	.word	0x061e061e
 800cc98:	061e04c7 	.word	0x061e04c7
 800cc9c:	061e061e 	.word	0x061e061e
 800cca0:	061e050a 	.word	0x061e050a
 800cca4:	061e052a 	.word	0x061e052a
 800cca8:	055c061e 	.word	0x055c061e
 800ccac:	061e061e 	.word	0x061e061e
 800ccb0:	061e061e 	.word	0x061e061e
 800ccb4:	061e061e 	.word	0x061e061e
 800ccb8:	061e061e 	.word	0x061e061e
 800ccbc:	061e013b 	.word	0x061e013b
 800ccc0:	00f600e0 	.word	0x00f600e0
 800ccc4:	013b013b 	.word	0x013b013b
 800ccc8:	00c9013b 	.word	0x00c9013b
 800cccc:	00dc00f6 	.word	0x00dc00f6
 800ccd0:	00d5061e 	.word	0x00d5061e
 800ccd4:	04a7061e 	.word	0x04a7061e
 800ccd8:	04fa04c9 	.word	0x04fa04c9
 800ccdc:	061e00dc 	.word	0x061e00dc
 800cce0:	0080050a 	.word	0x0080050a
 800cce4:	061e052c 	.word	0x061e052c
 800cce8:	057c061e 	.word	0x057c061e
 800ccec:	0080061e 	.word	0x0080061e
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	e765      	b.n	800cbc0 <_svfprintf_r+0x78>
 800ccf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccf6:	f002 fcdd 	bl	800f6b4 <_localeconv_r>
 800ccfa:	6843      	ldr	r3, [r0, #4]
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	931d      	str	r3, [sp, #116]	; 0x74
 800cd00:	f7f3 fa00 	bl	8000104 <strlen>
 800cd04:	901b      	str	r0, [sp, #108]	; 0x6c
 800cd06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd08:	f002 fcd4 	bl	800f6b4 <_localeconv_r>
 800cd0c:	6883      	ldr	r3, [r0, #8]
 800cd0e:	9312      	str	r3, [sp, #72]	; 0x48
 800cd10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d011      	beq.n	800cd3a <_svfprintf_r+0x1f2>
 800cd16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00e      	beq.n	800cd3a <_svfprintf_r+0x1f2>
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00b      	beq.n	800cd3a <_svfprintf_r+0x1f2>
 800cd22:	2380      	movs	r3, #128	; 0x80
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	431e      	orrs	r6, r3
 800cd28:	e007      	b.n	800cd3a <_svfprintf_r+0x1f2>
 800cd2a:	231b      	movs	r3, #27
 800cd2c:	aa1e      	add	r2, sp, #120	; 0x78
 800cd2e:	189b      	adds	r3, r3, r2
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	2a00      	cmp	r2, #0
 800cd34:	d101      	bne.n	800cd3a <_svfprintf_r+0x1f2>
 800cd36:	3220      	adds	r2, #32
 800cd38:	701a      	strb	r2, [r3, #0]
 800cd3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800cd3c:	e771      	b.n	800cc22 <_svfprintf_r+0xda>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e7f1      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cd42:	cc08      	ldmia	r4!, {r3}
 800cd44:	9318      	str	r3, [sp, #96]	; 0x60
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	daf7      	bge.n	800cd3a <_svfprintf_r+0x1f2>
 800cd4a:	425b      	negs	r3, r3
 800cd4c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd4e:	2304      	movs	r3, #4
 800cd50:	e7e9      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cd52:	231b      	movs	r3, #27
 800cd54:	aa1e      	add	r2, sp, #120	; 0x78
 800cd56:	189b      	adds	r3, r3, r2
 800cd58:	222b      	movs	r2, #43	; 0x2b
 800cd5a:	e7ed      	b.n	800cd38 <_svfprintf_r+0x1f0>
 800cd5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd60:	7812      	ldrb	r2, [r2, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd66:	2a2a      	cmp	r2, #42	; 0x2a
 800cd68:	d010      	beq.n	800cd8c <_svfprintf_r+0x244>
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd70:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd72:	3a30      	subs	r2, #48	; 0x30
 800cd74:	2a09      	cmp	r2, #9
 800cd76:	d900      	bls.n	800cd7a <_svfprintf_r+0x232>
 800cd78:	e757      	b.n	800cc2a <_svfprintf_r+0xe2>
 800cd7a:	200a      	movs	r0, #10
 800cd7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd7e:	4341      	muls	r1, r0
 800cd80:	188a      	adds	r2, r1, r2
 800cd82:	9209      	str	r2, [sp, #36]	; 0x24
 800cd84:	781a      	ldrb	r2, [r3, #0]
 800cd86:	3301      	adds	r3, #1
 800cd88:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd8a:	e7f0      	b.n	800cd6e <_svfprintf_r+0x226>
 800cd8c:	cc04      	ldmia	r4!, {r2}
 800cd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	da02      	bge.n	800cd9a <_svfprintf_r+0x252>
 800cd94:	2201      	movs	r2, #1
 800cd96:	4252      	negs	r2, r2
 800cd98:	9209      	str	r2, [sp, #36]	; 0x24
 800cd9a:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd9c:	e7cd      	b.n	800cd3a <_svfprintf_r+0x1f2>
 800cd9e:	2380      	movs	r3, #128	; 0x80
 800cda0:	e7c1      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cda2:	2200      	movs	r2, #0
 800cda4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cda6:	9218      	str	r2, [sp, #96]	; 0x60
 800cda8:	210a      	movs	r1, #10
 800cdaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdac:	434a      	muls	r2, r1
 800cdae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cdb0:	3930      	subs	r1, #48	; 0x30
 800cdb2:	188a      	adds	r2, r1, r2
 800cdb4:	9218      	str	r2, [sp, #96]	; 0x60
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	7812      	ldrb	r2, [r2, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	920f      	str	r2, [sp, #60]	; 0x3c
 800cdbe:	3a30      	subs	r2, #48	; 0x30
 800cdc0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdc2:	2a09      	cmp	r2, #9
 800cdc4:	d9f0      	bls.n	800cda8 <_svfprintf_r+0x260>
 800cdc6:	e730      	b.n	800cc2a <_svfprintf_r+0xe2>
 800cdc8:	2308      	movs	r3, #8
 800cdca:	e7ac      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cdcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b68      	cmp	r3, #104	; 0x68
 800cdd2:	d105      	bne.n	800cde0 <_svfprintf_r+0x298>
 800cdd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdda:	2380      	movs	r3, #128	; 0x80
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	e7a2      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cde0:	2340      	movs	r3, #64	; 0x40
 800cde2:	e7a0      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b6c      	cmp	r3, #108	; 0x6c
 800cdea:	d104      	bne.n	800cdf6 <_svfprintf_r+0x2ae>
 800cdec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdee:	3301      	adds	r3, #1
 800cdf0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdf2:	2320      	movs	r3, #32
 800cdf4:	e797      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cdf6:	2310      	movs	r3, #16
 800cdf8:	e795      	b.n	800cd26 <_svfprintf_r+0x1de>
 800cdfa:	0021      	movs	r1, r4
 800cdfc:	c904      	ldmia	r1!, {r2}
 800cdfe:	ab3f      	add	r3, sp, #252	; 0xfc
 800ce00:	910d      	str	r1, [sp, #52]	; 0x34
 800ce02:	211b      	movs	r1, #27
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	2200      	movs	r2, #0
 800ce08:	a81e      	add	r0, sp, #120	; 0x78
 800ce0a:	1809      	adds	r1, r1, r0
 800ce0c:	700a      	strb	r2, [r1, #0]
 800ce0e:	920c      	str	r2, [sp, #48]	; 0x30
 800ce10:	3201      	adds	r2, #1
 800ce12:	9209      	str	r2, [sp, #36]	; 0x24
 800ce14:	2200      	movs	r2, #0
 800ce16:	9308      	str	r3, [sp, #32]
 800ce18:	0015      	movs	r5, r2
 800ce1a:	9219      	str	r2, [sp, #100]	; 0x64
 800ce1c:	9210      	str	r2, [sp, #64]	; 0x40
 800ce1e:	9211      	str	r2, [sp, #68]	; 0x44
 800ce20:	e1f1      	b.n	800d206 <_svfprintf_r+0x6be>
 800ce22:	2310      	movs	r3, #16
 800ce24:	431e      	orrs	r6, r3
 800ce26:	06b3      	lsls	r3, r6, #26
 800ce28:	d531      	bpl.n	800ce8e <_svfprintf_r+0x346>
 800ce2a:	2307      	movs	r3, #7
 800ce2c:	3407      	adds	r4, #7
 800ce2e:	439c      	bics	r4, r3
 800ce30:	0022      	movs	r2, r4
 800ce32:	ca18      	ldmia	r2!, {r3, r4}
 800ce34:	9306      	str	r3, [sp, #24]
 800ce36:	9407      	str	r4, [sp, #28]
 800ce38:	920d      	str	r2, [sp, #52]	; 0x34
 800ce3a:	9a07      	ldr	r2, [sp, #28]
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	da0b      	bge.n	800ce5a <_svfprintf_r+0x312>
 800ce42:	9c06      	ldr	r4, [sp, #24]
 800ce44:	9d07      	ldr	r5, [sp, #28]
 800ce46:	2200      	movs	r2, #0
 800ce48:	4261      	negs	r1, r4
 800ce4a:	41aa      	sbcs	r2, r5
 800ce4c:	9106      	str	r1, [sp, #24]
 800ce4e:	9207      	str	r2, [sp, #28]
 800ce50:	221b      	movs	r2, #27
 800ce52:	a91e      	add	r1, sp, #120	; 0x78
 800ce54:	1852      	adds	r2, r2, r1
 800ce56:	212d      	movs	r1, #45	; 0x2d
 800ce58:	7011      	strb	r1, [r2, #0]
 800ce5a:	9907      	ldr	r1, [sp, #28]
 800ce5c:	9a06      	ldr	r2, [sp, #24]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce62:	3101      	adds	r1, #1
 800ce64:	d101      	bne.n	800ce6a <_svfprintf_r+0x322>
 800ce66:	f001 f87b 	bl	800df60 <_svfprintf_r+0x1418>
 800ce6a:	2180      	movs	r1, #128	; 0x80
 800ce6c:	0034      	movs	r4, r6
 800ce6e:	438c      	bics	r4, r1
 800ce70:	2a00      	cmp	r2, #0
 800ce72:	d001      	beq.n	800ce78 <_svfprintf_r+0x330>
 800ce74:	f001 f879 	bl	800df6a <_svfprintf_r+0x1422>
 800ce78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	d101      	bne.n	800ce82 <_svfprintf_r+0x33a>
 800ce7e:	f000 fcef 	bl	800d860 <_svfprintf_r+0xd18>
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d001      	beq.n	800ce8a <_svfprintf_r+0x342>
 800ce86:	f001 f874 	bl	800df72 <_svfprintf_r+0x142a>
 800ce8a:	f000 fc79 	bl	800d780 <_svfprintf_r+0xc38>
 800ce8e:	0022      	movs	r2, r4
 800ce90:	ca08      	ldmia	r2!, {r3}
 800ce92:	920d      	str	r2, [sp, #52]	; 0x34
 800ce94:	06f2      	lsls	r2, r6, #27
 800ce96:	d503      	bpl.n	800cea0 <_svfprintf_r+0x358>
 800ce98:	9306      	str	r3, [sp, #24]
 800ce9a:	17db      	asrs	r3, r3, #31
 800ce9c:	9307      	str	r3, [sp, #28]
 800ce9e:	e7cc      	b.n	800ce3a <_svfprintf_r+0x2f2>
 800cea0:	0672      	lsls	r2, r6, #25
 800cea2:	d501      	bpl.n	800cea8 <_svfprintf_r+0x360>
 800cea4:	b21b      	sxth	r3, r3
 800cea6:	e7f7      	b.n	800ce98 <_svfprintf_r+0x350>
 800cea8:	05b2      	lsls	r2, r6, #22
 800ceaa:	d5f5      	bpl.n	800ce98 <_svfprintf_r+0x350>
 800ceac:	b25b      	sxtb	r3, r3
 800ceae:	e7f3      	b.n	800ce98 <_svfprintf_r+0x350>
 800ceb0:	2307      	movs	r3, #7
 800ceb2:	3407      	adds	r4, #7
 800ceb4:	439c      	bics	r4, r3
 800ceb6:	0022      	movs	r2, r4
 800ceb8:	ca18      	ldmia	r2!, {r3, r4}
 800ceba:	920d      	str	r2, [sp, #52]	; 0x34
 800cebc:	2201      	movs	r2, #1
 800cebe:	9314      	str	r3, [sp, #80]	; 0x50
 800cec0:	9415      	str	r4, [sp, #84]	; 0x54
 800cec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cec4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cec6:	005c      	lsls	r4, r3, #1
 800cec8:	0864      	lsrs	r4, r4, #1
 800ceca:	0028      	movs	r0, r5
 800cecc:	0021      	movs	r1, r4
 800cece:	4b3e      	ldr	r3, [pc, #248]	; (800cfc8 <_svfprintf_r+0x480>)
 800ced0:	4252      	negs	r2, r2
 800ced2:	f7f5 fa0f 	bl	80022f4 <__aeabi_dcmpun>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d126      	bne.n	800cf28 <_svfprintf_r+0x3e0>
 800ceda:	2201      	movs	r2, #1
 800cedc:	0028      	movs	r0, r5
 800cede:	0021      	movs	r1, r4
 800cee0:	4b39      	ldr	r3, [pc, #228]	; (800cfc8 <_svfprintf_r+0x480>)
 800cee2:	4252      	negs	r2, r2
 800cee4:	f7f3 fac0 	bl	8000468 <__aeabi_dcmple>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d11d      	bne.n	800cf28 <_svfprintf_r+0x3e0>
 800ceec:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ceee:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cef0:	2200      	movs	r2, #0
 800cef2:	2300      	movs	r3, #0
 800cef4:	f7f3 faae 	bl	8000454 <__aeabi_dcmplt>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d004      	beq.n	800cf06 <_svfprintf_r+0x3be>
 800cefc:	231b      	movs	r3, #27
 800cefe:	aa1e      	add	r2, sp, #120	; 0x78
 800cf00:	189b      	adds	r3, r3, r2
 800cf02:	222d      	movs	r2, #45	; 0x2d
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	4b31      	ldr	r3, [pc, #196]	; (800cfcc <_svfprintf_r+0x484>)
 800cf08:	9308      	str	r3, [sp, #32]
 800cf0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf0c:	2b47      	cmp	r3, #71	; 0x47
 800cf0e:	dd01      	ble.n	800cf14 <_svfprintf_r+0x3cc>
 800cf10:	4b2f      	ldr	r3, [pc, #188]	; (800cfd0 <_svfprintf_r+0x488>)
 800cf12:	9308      	str	r3, [sp, #32]
 800cf14:	2380      	movs	r3, #128	; 0x80
 800cf16:	439e      	bics	r6, r3
 800cf18:	2300      	movs	r3, #0
 800cf1a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf1c:	3303      	adds	r3, #3
 800cf1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf20:	2300      	movs	r3, #0
 800cf22:	9319      	str	r3, [sp, #100]	; 0x64
 800cf24:	f000 fc78 	bl	800d818 <_svfprintf_r+0xcd0>
 800cf28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2c:	0010      	movs	r0, r2
 800cf2e:	0019      	movs	r1, r3
 800cf30:	f7f5 f9e0 	bl	80022f4 <__aeabi_dcmpun>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d00e      	beq.n	800cf56 <_svfprintf_r+0x40e>
 800cf38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da04      	bge.n	800cf48 <_svfprintf_r+0x400>
 800cf3e:	231b      	movs	r3, #27
 800cf40:	aa1e      	add	r2, sp, #120	; 0x78
 800cf42:	189b      	adds	r3, r3, r2
 800cf44:	222d      	movs	r2, #45	; 0x2d
 800cf46:	701a      	strb	r2, [r3, #0]
 800cf48:	4b22      	ldr	r3, [pc, #136]	; (800cfd4 <_svfprintf_r+0x48c>)
 800cf4a:	9308      	str	r3, [sp, #32]
 800cf4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf4e:	2b47      	cmp	r3, #71	; 0x47
 800cf50:	dde0      	ble.n	800cf14 <_svfprintf_r+0x3cc>
 800cf52:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <_svfprintf_r+0x490>)
 800cf54:	e7dd      	b.n	800cf12 <_svfprintf_r+0x3ca>
 800cf56:	2320      	movs	r3, #32
 800cf58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf5a:	439a      	bics	r2, r3
 800cf5c:	9210      	str	r2, [sp, #64]	; 0x40
 800cf5e:	2a41      	cmp	r2, #65	; 0x41
 800cf60:	d123      	bne.n	800cfaa <_svfprintf_r+0x462>
 800cf62:	2230      	movs	r2, #48	; 0x30
 800cf64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf66:	ab25      	add	r3, sp, #148	; 0x94
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	3248      	adds	r2, #72	; 0x48
 800cf6c:	2961      	cmp	r1, #97	; 0x61
 800cf6e:	d000      	beq.n	800cf72 <_svfprintf_r+0x42a>
 800cf70:	3a20      	subs	r2, #32
 800cf72:	705a      	strb	r2, [r3, #1]
 800cf74:	2302      	movs	r3, #2
 800cf76:	431e      	orrs	r6, r3
 800cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7a:	2b63      	cmp	r3, #99	; 0x63
 800cf7c:	dd2e      	ble.n	800cfdc <_svfprintf_r+0x494>
 800cf7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf80:	1c59      	adds	r1, r3, #1
 800cf82:	f7fd f969 	bl	800a258 <_malloc_r>
 800cf86:	9008      	str	r0, [sp, #32]
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d000      	beq.n	800cf8e <_svfprintf_r+0x446>
 800cf8c:	e216      	b.n	800d3bc <_svfprintf_r+0x874>
 800cf8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf90:	899a      	ldrh	r2, [r3, #12]
 800cf92:	2340      	movs	r3, #64	; 0x40
 800cf94:	4313      	orrs	r3, r2
 800cf96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf98:	8193      	strh	r3, [r2, #12]
 800cf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9c:	899b      	ldrh	r3, [r3, #12]
 800cf9e:	065b      	lsls	r3, r3, #25
 800cfa0:	d400      	bmi.n	800cfa4 <_svfprintf_r+0x45c>
 800cfa2:	e5f5      	b.n	800cb90 <_svfprintf_r+0x48>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	425b      	negs	r3, r3
 800cfa8:	e5f1      	b.n	800cb8e <_svfprintf_r+0x46>
 800cfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfac:	900c      	str	r0, [sp, #48]	; 0x30
 800cfae:	3301      	adds	r3, #1
 800cfb0:	d100      	bne.n	800cfb4 <_svfprintf_r+0x46c>
 800cfb2:	e206      	b.n	800d3c2 <_svfprintf_r+0x87a>
 800cfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfb6:	2b47      	cmp	r3, #71	; 0x47
 800cfb8:	d114      	bne.n	800cfe4 <_svfprintf_r+0x49c>
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d111      	bne.n	800cfe4 <_svfprintf_r+0x49c>
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc4:	e00e      	b.n	800cfe4 <_svfprintf_r+0x49c>
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	7fefffff 	.word	0x7fefffff
 800cfcc:	0801409c 	.word	0x0801409c
 800cfd0:	080140a0 	.word	0x080140a0
 800cfd4:	080140a4 	.word	0x080140a4
 800cfd8:	080140a8 	.word	0x080140a8
 800cfdc:	2300      	movs	r3, #0
 800cfde:	930c      	str	r3, [sp, #48]	; 0x30
 800cfe0:	ab3f      	add	r3, sp, #252	; 0xfc
 800cfe2:	9308      	str	r3, [sp, #32]
 800cfe4:	2380      	movs	r3, #128	; 0x80
 800cfe6:	005b      	lsls	r3, r3, #1
 800cfe8:	4333      	orrs	r3, r6
 800cfea:	931a      	str	r3, [sp, #104]	; 0x68
 800cfec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	db00      	blt.n	800cff6 <_svfprintf_r+0x4ae>
 800cff4:	e1e7      	b.n	800d3c6 <_svfprintf_r+0x87e>
 800cff6:	2280      	movs	r2, #128	; 0x80
 800cff8:	0612      	lsls	r2, r2, #24
 800cffa:	4694      	mov	ip, r2
 800cffc:	4463      	add	r3, ip
 800cffe:	930e      	str	r3, [sp, #56]	; 0x38
 800d000:	232d      	movs	r3, #45	; 0x2d
 800d002:	9322      	str	r3, [sp, #136]	; 0x88
 800d004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d006:	2b41      	cmp	r3, #65	; 0x41
 800d008:	d000      	beq.n	800d00c <_svfprintf_r+0x4c4>
 800d00a:	e1f5      	b.n	800d3f8 <_svfprintf_r+0x8b0>
 800d00c:	0028      	movs	r0, r5
 800d00e:	aa26      	add	r2, sp, #152	; 0x98
 800d010:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d012:	f002 fb73 	bl	800f6fc <frexp>
 800d016:	23ff      	movs	r3, #255	; 0xff
 800d018:	2200      	movs	r2, #0
 800d01a:	059b      	lsls	r3, r3, #22
 800d01c:	f7f4 fb26 	bl	800166c <__aeabi_dmul>
 800d020:	2200      	movs	r2, #0
 800d022:	2300      	movs	r3, #0
 800d024:	0004      	movs	r4, r0
 800d026:	000d      	movs	r5, r1
 800d028:	f7f3 fa0e 	bl	8000448 <__aeabi_dcmpeq>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d001      	beq.n	800d034 <_svfprintf_r+0x4ec>
 800d030:	2301      	movs	r3, #1
 800d032:	9326      	str	r3, [sp, #152]	; 0x98
 800d034:	4bda      	ldr	r3, [pc, #872]	; (800d3a0 <_svfprintf_r+0x858>)
 800d036:	9319      	str	r3, [sp, #100]	; 0x64
 800d038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d03a:	2b61      	cmp	r3, #97	; 0x61
 800d03c:	d001      	beq.n	800d042 <_svfprintf_r+0x4fa>
 800d03e:	4bd9      	ldr	r3, [pc, #868]	; (800d3a4 <_svfprintf_r+0x85c>)
 800d040:	9319      	str	r3, [sp, #100]	; 0x64
 800d042:	9b08      	ldr	r3, [sp, #32]
 800d044:	930e      	str	r3, [sp, #56]	; 0x38
 800d046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d048:	3b01      	subs	r3, #1
 800d04a:	9311      	str	r3, [sp, #68]	; 0x44
 800d04c:	2200      	movs	r2, #0
 800d04e:	4bd6      	ldr	r3, [pc, #856]	; (800d3a8 <_svfprintf_r+0x860>)
 800d050:	0020      	movs	r0, r4
 800d052:	0029      	movs	r1, r5
 800d054:	f7f4 fb0a 	bl	800166c <__aeabi_dmul>
 800d058:	000d      	movs	r5, r1
 800d05a:	0004      	movs	r4, r0
 800d05c:	f7f5 f968 	bl	8002330 <__aeabi_d2iz>
 800d060:	9021      	str	r0, [sp, #132]	; 0x84
 800d062:	f7f5 f99b 	bl	800239c <__aeabi_i2d>
 800d066:	0002      	movs	r2, r0
 800d068:	000b      	movs	r3, r1
 800d06a:	0020      	movs	r0, r4
 800d06c:	0029      	movs	r1, r5
 800d06e:	f7f4 fdbf 	bl	8001bf0 <__aeabi_dsub>
 800d072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d074:	000d      	movs	r5, r1
 800d076:	001a      	movs	r2, r3
 800d078:	3201      	adds	r2, #1
 800d07a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d07c:	920e      	str	r2, [sp, #56]	; 0x38
 800d07e:	9223      	str	r2, [sp, #140]	; 0x8c
 800d080:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d082:	0004      	movs	r4, r0
 800d084:	5c52      	ldrb	r2, [r2, r1]
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d08a:	9320      	str	r3, [sp, #128]	; 0x80
 800d08c:	3301      	adds	r3, #1
 800d08e:	d00a      	beq.n	800d0a6 <_svfprintf_r+0x55e>
 800d090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d092:	2200      	movs	r2, #0
 800d094:	3b01      	subs	r3, #1
 800d096:	9311      	str	r3, [sp, #68]	; 0x44
 800d098:	0020      	movs	r0, r4
 800d09a:	2300      	movs	r3, #0
 800d09c:	0029      	movs	r1, r5
 800d09e:	f7f3 f9d3 	bl	8000448 <__aeabi_dcmpeq>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d0d2      	beq.n	800d04c <_svfprintf_r+0x504>
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	0020      	movs	r0, r4
 800d0aa:	0029      	movs	r1, r5
 800d0ac:	4bbf      	ldr	r3, [pc, #764]	; (800d3ac <_svfprintf_r+0x864>)
 800d0ae:	f7f3 f9e5 	bl	800047c <__aeabi_dcmpgt>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d10c      	bne.n	800d0d0 <_svfprintf_r+0x588>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	0020      	movs	r0, r4
 800d0ba:	0029      	movs	r1, r5
 800d0bc:	4bbb      	ldr	r3, [pc, #748]	; (800d3ac <_svfprintf_r+0x864>)
 800d0be:	f7f3 f9c3 	bl	8000448 <__aeabi_dcmpeq>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d100      	bne.n	800d0c8 <_svfprintf_r+0x580>
 800d0c6:	e191      	b.n	800d3ec <_svfprintf_r+0x8a4>
 800d0c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0ca:	07db      	lsls	r3, r3, #31
 800d0cc:	d400      	bmi.n	800d0d0 <_svfprintf_r+0x588>
 800d0ce:	e18d      	b.n	800d3ec <_svfprintf_r+0x8a4>
 800d0d0:	2030      	movs	r0, #48	; 0x30
 800d0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0d4:	932a      	str	r3, [sp, #168]	; 0xa8
 800d0d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0d8:	7bdb      	ldrb	r3, [r3, #15]
 800d0da:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d0dc:	3a01      	subs	r2, #1
 800d0de:	922a      	str	r2, [sp, #168]	; 0xa8
 800d0e0:	7811      	ldrb	r1, [r2, #0]
 800d0e2:	4299      	cmp	r1, r3
 800d0e4:	d100      	bne.n	800d0e8 <_svfprintf_r+0x5a0>
 800d0e6:	e171      	b.n	800d3cc <_svfprintf_r+0x884>
 800d0e8:	1c4b      	adds	r3, r1, #1
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2939      	cmp	r1, #57	; 0x39
 800d0ee:	d101      	bne.n	800d0f4 <_svfprintf_r+0x5ac>
 800d0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0f2:	7a9b      	ldrb	r3, [r3, #10]
 800d0f4:	7013      	strb	r3, [r2, #0]
 800d0f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0f8:	9a08      	ldr	r2, [sp, #32]
 800d0fa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d0fc:	1a9b      	subs	r3, r3, r2
 800d0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800d100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d102:	2b47      	cmp	r3, #71	; 0x47
 800d104:	d000      	beq.n	800d108 <_svfprintf_r+0x5c0>
 800d106:	e1c4      	b.n	800d492 <_svfprintf_r+0x94a>
 800d108:	1ceb      	adds	r3, r5, #3
 800d10a:	db03      	blt.n	800d114 <_svfprintf_r+0x5cc>
 800d10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10e:	42ab      	cmp	r3, r5
 800d110:	db00      	blt.n	800d114 <_svfprintf_r+0x5cc>
 800d112:	e1e6      	b.n	800d4e2 <_svfprintf_r+0x99a>
 800d114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d116:	3b02      	subs	r3, #2
 800d118:	930f      	str	r3, [sp, #60]	; 0x3c
 800d11a:	223c      	movs	r2, #60	; 0x3c
 800d11c:	466b      	mov	r3, sp
 800d11e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d120:	189b      	adds	r3, r3, r2
 800d122:	1e6c      	subs	r4, r5, #1
 800d124:	3a1c      	subs	r2, #28
 800d126:	2000      	movs	r0, #0
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	9426      	str	r4, [sp, #152]	; 0x98
 800d12c:	4391      	bics	r1, r2
 800d12e:	2941      	cmp	r1, #65	; 0x41
 800d130:	d102      	bne.n	800d138 <_svfprintf_r+0x5f0>
 800d132:	330f      	adds	r3, #15
 800d134:	b2db      	uxtb	r3, r3
 800d136:	3001      	adds	r0, #1
 800d138:	a928      	add	r1, sp, #160	; 0xa0
 800d13a:	700b      	strb	r3, [r1, #0]
 800d13c:	232b      	movs	r3, #43	; 0x2b
 800d13e:	2c00      	cmp	r4, #0
 800d140:	da02      	bge.n	800d148 <_svfprintf_r+0x600>
 800d142:	2401      	movs	r4, #1
 800d144:	3302      	adds	r3, #2
 800d146:	1b64      	subs	r4, r4, r5
 800d148:	704b      	strb	r3, [r1, #1]
 800d14a:	2c09      	cmp	r4, #9
 800d14c:	dc00      	bgt.n	800d150 <_svfprintf_r+0x608>
 800d14e:	e1ba      	b.n	800d4c6 <_svfprintf_r+0x97e>
 800d150:	2337      	movs	r3, #55	; 0x37
 800d152:	250a      	movs	r5, #10
 800d154:	aa1e      	add	r2, sp, #120	; 0x78
 800d156:	189b      	adds	r3, r3, r2
 800d158:	9310      	str	r3, [sp, #64]	; 0x40
 800d15a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d15c:	0020      	movs	r0, r4
 800d15e:	9309      	str	r3, [sp, #36]	; 0x24
 800d160:	0029      	movs	r1, r5
 800d162:	3b01      	subs	r3, #1
 800d164:	9310      	str	r3, [sp, #64]	; 0x40
 800d166:	f7f3 f959 	bl	800041c <__aeabi_idivmod>
 800d16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d16c:	3130      	adds	r1, #48	; 0x30
 800d16e:	7019      	strb	r1, [r3, #0]
 800d170:	0020      	movs	r0, r4
 800d172:	0029      	movs	r1, r5
 800d174:	9411      	str	r4, [sp, #68]	; 0x44
 800d176:	f7f3 f86b 	bl	8000250 <__divsi3>
 800d17a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d17c:	0004      	movs	r4, r0
 800d17e:	2b63      	cmp	r3, #99	; 0x63
 800d180:	dceb      	bgt.n	800d15a <_svfprintf_r+0x612>
 800d182:	222a      	movs	r2, #42	; 0x2a
 800d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d186:	a81e      	add	r0, sp, #120	; 0x78
 800d188:	1e99      	subs	r1, r3, #2
 800d18a:	1812      	adds	r2, r2, r0
 800d18c:	2037      	movs	r0, #55	; 0x37
 800d18e:	000b      	movs	r3, r1
 800d190:	3430      	adds	r4, #48	; 0x30
 800d192:	700c      	strb	r4, [r1, #0]
 800d194:	ac1e      	add	r4, sp, #120	; 0x78
 800d196:	1900      	adds	r0, r0, r4
 800d198:	4283      	cmp	r3, r0
 800d19a:	d200      	bcs.n	800d19e <_svfprintf_r+0x656>
 800d19c:	e18e      	b.n	800d4bc <_svfprintf_r+0x974>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4281      	cmp	r1, r0
 800d1a2:	d804      	bhi.n	800d1ae <_svfprintf_r+0x666>
 800d1a4:	aa1e      	add	r2, sp, #120	; 0x78
 800d1a6:	3339      	adds	r3, #57	; 0x39
 800d1a8:	189b      	adds	r3, r3, r2
 800d1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ac:	1a9b      	subs	r3, r3, r2
 800d1ae:	222a      	movs	r2, #42	; 0x2a
 800d1b0:	a91e      	add	r1, sp, #120	; 0x78
 800d1b2:	1852      	adds	r2, r2, r1
 800d1b4:	18d3      	adds	r3, r2, r3
 800d1b6:	aa28      	add	r2, sp, #160	; 0xa0
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	931e      	str	r3, [sp, #120]	; 0x78
 800d1bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1c0:	4694      	mov	ip, r2
 800d1c2:	4463      	add	r3, ip
 800d1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	dc01      	bgt.n	800d1d0 <_svfprintf_r+0x688>
 800d1cc:	07f3      	lsls	r3, r6, #31
 800d1ce:	d504      	bpl.n	800d1da <_svfprintf_r+0x692>
 800d1d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d4:	4694      	mov	ip, r2
 800d1d6:	4463      	add	r3, ip
 800d1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1da:	2280      	movs	r2, #128	; 0x80
 800d1dc:	4b74      	ldr	r3, [pc, #464]	; (800d3b0 <_svfprintf_r+0x868>)
 800d1de:	0052      	lsls	r2, r2, #1
 800d1e0:	4033      	ands	r3, r6
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	001d      	movs	r5, r3
 800d1e8:	921a      	str	r2, [sp, #104]	; 0x68
 800d1ea:	9310      	str	r3, [sp, #64]	; 0x40
 800d1ec:	9311      	str	r3, [sp, #68]	; 0x44
 800d1ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1f0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d1f2:	9319      	str	r3, [sp, #100]	; 0x64
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d006      	beq.n	800d206 <_svfprintf_r+0x6be>
 800d1f8:	231b      	movs	r3, #27
 800d1fa:	aa1e      	add	r2, sp, #120	; 0x78
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	222d      	movs	r2, #45	; 0x2d
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	2300      	movs	r3, #0
 800d204:	9319      	str	r3, [sp, #100]	; 0x64
 800d206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20a:	931a      	str	r3, [sp, #104]	; 0x68
 800d20c:	4293      	cmp	r3, r2
 800d20e:	da00      	bge.n	800d212 <_svfprintf_r+0x6ca>
 800d210:	921a      	str	r2, [sp, #104]	; 0x68
 800d212:	231b      	movs	r3, #27
 800d214:	aa1e      	add	r2, sp, #120	; 0x78
 800d216:	189b      	adds	r3, r3, r2
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	1e5a      	subs	r2, r3, #1
 800d21c:	4193      	sbcs	r3, r2
 800d21e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d220:	18d3      	adds	r3, r2, r3
 800d222:	931a      	str	r3, [sp, #104]	; 0x68
 800d224:	0032      	movs	r2, r6
 800d226:	2302      	movs	r3, #2
 800d228:	401a      	ands	r2, r3
 800d22a:	9220      	str	r2, [sp, #128]	; 0x80
 800d22c:	421e      	tst	r6, r3
 800d22e:	d002      	beq.n	800d236 <_svfprintf_r+0x6ee>
 800d230:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d232:	3302      	adds	r3, #2
 800d234:	931a      	str	r3, [sp, #104]	; 0x68
 800d236:	2384      	movs	r3, #132	; 0x84
 800d238:	0032      	movs	r2, r6
 800d23a:	401a      	ands	r2, r3
 800d23c:	9221      	str	r2, [sp, #132]	; 0x84
 800d23e:	421e      	tst	r6, r3
 800d240:	d11f      	bne.n	800d282 <_svfprintf_r+0x73a>
 800d242:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d244:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d246:	1a9c      	subs	r4, r3, r2
 800d248:	2c00      	cmp	r4, #0
 800d24a:	dd1a      	ble.n	800d282 <_svfprintf_r+0x73a>
 800d24c:	0039      	movs	r1, r7
 800d24e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d250:	4858      	ldr	r0, [pc, #352]	; (800d3b4 <_svfprintf_r+0x86c>)
 800d252:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d254:	3301      	adds	r3, #1
 800d256:	3108      	adds	r1, #8
 800d258:	6038      	str	r0, [r7, #0]
 800d25a:	2c10      	cmp	r4, #16
 800d25c:	dd00      	ble.n	800d260 <_svfprintf_r+0x718>
 800d25e:	e31c      	b.n	800d89a <_svfprintf_r+0xd52>
 800d260:	607c      	str	r4, [r7, #4]
 800d262:	18a4      	adds	r4, r4, r2
 800d264:	000f      	movs	r7, r1
 800d266:	942e      	str	r4, [sp, #184]	; 0xb8
 800d268:	932d      	str	r3, [sp, #180]	; 0xb4
 800d26a:	2b07      	cmp	r3, #7
 800d26c:	dd09      	ble.n	800d282 <_svfprintf_r+0x73a>
 800d26e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d270:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d272:	aa2c      	add	r2, sp, #176	; 0xb0
 800d274:	f003 fd7e 	bl	8010d74 <__ssprint_r>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d001      	beq.n	800d280 <_svfprintf_r+0x738>
 800d27c:	f000 fe43 	bl	800df06 <_svfprintf_r+0x13be>
 800d280:	af2f      	add	r7, sp, #188	; 0xbc
 800d282:	221b      	movs	r2, #27
 800d284:	a91e      	add	r1, sp, #120	; 0x78
 800d286:	1852      	adds	r2, r2, r1
 800d288:	7811      	ldrb	r1, [r2, #0]
 800d28a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d28c:	2900      	cmp	r1, #0
 800d28e:	d014      	beq.n	800d2ba <_svfprintf_r+0x772>
 800d290:	603a      	str	r2, [r7, #0]
 800d292:	2201      	movs	r2, #1
 800d294:	189b      	adds	r3, r3, r2
 800d296:	932e      	str	r3, [sp, #184]	; 0xb8
 800d298:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	189b      	adds	r3, r3, r2
 800d29e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2a0:	3708      	adds	r7, #8
 800d2a2:	2b07      	cmp	r3, #7
 800d2a4:	dd09      	ble.n	800d2ba <_svfprintf_r+0x772>
 800d2a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800d2ac:	f003 fd62 	bl	8010d74 <__ssprint_r>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d001      	beq.n	800d2b8 <_svfprintf_r+0x770>
 800d2b4:	f000 fe27 	bl	800df06 <_svfprintf_r+0x13be>
 800d2b8:	af2f      	add	r7, sp, #188	; 0xbc
 800d2ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d2bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	d015      	beq.n	800d2ee <_svfprintf_r+0x7a6>
 800d2c2:	aa25      	add	r2, sp, #148	; 0x94
 800d2c4:	603a      	str	r2, [r7, #0]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	189b      	adds	r3, r3, r2
 800d2ca:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	2b07      	cmp	r3, #7
 800d2d8:	dd09      	ble.n	800d2ee <_svfprintf_r+0x7a6>
 800d2da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2de:	aa2c      	add	r2, sp, #176	; 0xb0
 800d2e0:	f003 fd48 	bl	8010d74 <__ssprint_r>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d001      	beq.n	800d2ec <_svfprintf_r+0x7a4>
 800d2e8:	f000 fe0d 	bl	800df06 <_svfprintf_r+0x13be>
 800d2ec:	af2f      	add	r7, sp, #188	; 0xbc
 800d2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2f0:	2b80      	cmp	r3, #128	; 0x80
 800d2f2:	d11f      	bne.n	800d334 <_svfprintf_r+0x7ec>
 800d2f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d2f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d2f8:	1a9c      	subs	r4, r3, r2
 800d2fa:	2c00      	cmp	r4, #0
 800d2fc:	dd1a      	ble.n	800d334 <_svfprintf_r+0x7ec>
 800d2fe:	0039      	movs	r1, r7
 800d300:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d302:	482d      	ldr	r0, [pc, #180]	; (800d3b8 <_svfprintf_r+0x870>)
 800d304:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d306:	3301      	adds	r3, #1
 800d308:	3108      	adds	r1, #8
 800d30a:	6038      	str	r0, [r7, #0]
 800d30c:	2c10      	cmp	r4, #16
 800d30e:	dd00      	ble.n	800d312 <_svfprintf_r+0x7ca>
 800d310:	e2d6      	b.n	800d8c0 <_svfprintf_r+0xd78>
 800d312:	607c      	str	r4, [r7, #4]
 800d314:	18a4      	adds	r4, r4, r2
 800d316:	000f      	movs	r7, r1
 800d318:	942e      	str	r4, [sp, #184]	; 0xb8
 800d31a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d31c:	2b07      	cmp	r3, #7
 800d31e:	dd09      	ble.n	800d334 <_svfprintf_r+0x7ec>
 800d320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d322:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d324:	aa2c      	add	r2, sp, #176	; 0xb0
 800d326:	f003 fd25 	bl	8010d74 <__ssprint_r>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d001      	beq.n	800d332 <_svfprintf_r+0x7ea>
 800d32e:	f000 fdea 	bl	800df06 <_svfprintf_r+0x13be>
 800d332:	af2f      	add	r7, sp, #188	; 0xbc
 800d334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d338:	1a9c      	subs	r4, r3, r2
 800d33a:	2c00      	cmp	r4, #0
 800d33c:	dd1a      	ble.n	800d374 <_svfprintf_r+0x82c>
 800d33e:	0039      	movs	r1, r7
 800d340:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d342:	481d      	ldr	r0, [pc, #116]	; (800d3b8 <_svfprintf_r+0x870>)
 800d344:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d346:	3301      	adds	r3, #1
 800d348:	3108      	adds	r1, #8
 800d34a:	6038      	str	r0, [r7, #0]
 800d34c:	2c10      	cmp	r4, #16
 800d34e:	dd00      	ble.n	800d352 <_svfprintf_r+0x80a>
 800d350:	e2c9      	b.n	800d8e6 <_svfprintf_r+0xd9e>
 800d352:	18a2      	adds	r2, r4, r2
 800d354:	607c      	str	r4, [r7, #4]
 800d356:	922e      	str	r2, [sp, #184]	; 0xb8
 800d358:	000f      	movs	r7, r1
 800d35a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d35c:	2b07      	cmp	r3, #7
 800d35e:	dd09      	ble.n	800d374 <_svfprintf_r+0x82c>
 800d360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d362:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d364:	aa2c      	add	r2, sp, #176	; 0xb0
 800d366:	f003 fd05 	bl	8010d74 <__ssprint_r>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d001      	beq.n	800d372 <_svfprintf_r+0x82a>
 800d36e:	f000 fdca 	bl	800df06 <_svfprintf_r+0x13be>
 800d372:	af2f      	add	r7, sp, #188	; 0xbc
 800d374:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d376:	9319      	str	r3, [sp, #100]	; 0x64
 800d378:	05f3      	lsls	r3, r6, #23
 800d37a:	d500      	bpl.n	800d37e <_svfprintf_r+0x836>
 800d37c:	e2ce      	b.n	800d91c <_svfprintf_r+0xdd4>
 800d37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d380:	9b08      	ldr	r3, [sp, #32]
 800d382:	4694      	mov	ip, r2
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d388:	607b      	str	r3, [r7, #4]
 800d38a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d38c:	4463      	add	r3, ip
 800d38e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d390:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d392:	3301      	adds	r3, #1
 800d394:	932d      	str	r3, [sp, #180]	; 0xb4
 800d396:	2b07      	cmp	r3, #7
 800d398:	dd00      	ble.n	800d39c <_svfprintf_r+0x854>
 800d39a:	e3a3      	b.n	800dae4 <_svfprintf_r+0xf9c>
 800d39c:	3708      	adds	r7, #8
 800d39e:	e301      	b.n	800d9a4 <_svfprintf_r+0xe5c>
 800d3a0:	080140ac 	.word	0x080140ac
 800d3a4:	080140bd 	.word	0x080140bd
 800d3a8:	40300000 	.word	0x40300000
 800d3ac:	3fe00000 	.word	0x3fe00000
 800d3b0:	fffffbff 	.word	0xfffffbff
 800d3b4:	080140d0 	.word	0x080140d0
 800d3b8:	080140e0 	.word	0x080140e0
 800d3bc:	9b08      	ldr	r3, [sp, #32]
 800d3be:	930c      	str	r3, [sp, #48]	; 0x30
 800d3c0:	e610      	b.n	800cfe4 <_svfprintf_r+0x49c>
 800d3c2:	2306      	movs	r3, #6
 800d3c4:	e5fd      	b.n	800cfc2 <_svfprintf_r+0x47a>
 800d3c6:	930e      	str	r3, [sp, #56]	; 0x38
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e61a      	b.n	800d002 <_svfprintf_r+0x4ba>
 800d3cc:	7010      	strb	r0, [r2, #0]
 800d3ce:	e684      	b.n	800d0da <_svfprintf_r+0x592>
 800d3d0:	7018      	strb	r0, [r3, #0]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	1aca      	subs	r2, r1, r3
 800d3d6:	d5fb      	bpl.n	800d3d0 <_svfprintf_r+0x888>
 800d3d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d3da:	2300      	movs	r3, #0
 800d3dc:	3201      	adds	r2, #1
 800d3de:	db01      	blt.n	800d3e4 <_svfprintf_r+0x89c>
 800d3e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3e6:	18d3      	adds	r3, r2, r3
 800d3e8:	9323      	str	r3, [sp, #140]	; 0x8c
 800d3ea:	e684      	b.n	800d0f6 <_svfprintf_r+0x5ae>
 800d3ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d3f0:	2030      	movs	r0, #48	; 0x30
 800d3f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3f4:	1851      	adds	r1, r2, r1
 800d3f6:	e7ed      	b.n	800d3d4 <_svfprintf_r+0x88c>
 800d3f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d3fe:	2a46      	cmp	r2, #70	; 0x46
 800d400:	d006      	beq.n	800d410 <_svfprintf_r+0x8c8>
 800d402:	0014      	movs	r4, r2
 800d404:	3c45      	subs	r4, #69	; 0x45
 800d406:	4262      	negs	r2, r4
 800d408:	4154      	adcs	r4, r2
 800d40a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d40c:	3b01      	subs	r3, #1
 800d40e:	1914      	adds	r4, r2, r4
 800d410:	aa2a      	add	r2, sp, #168	; 0xa8
 800d412:	9204      	str	r2, [sp, #16]
 800d414:	aa27      	add	r2, sp, #156	; 0x9c
 800d416:	9203      	str	r2, [sp, #12]
 800d418:	aa26      	add	r2, sp, #152	; 0x98
 800d41a:	9202      	str	r2, [sp, #8]
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	002a      	movs	r2, r5
 800d420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d422:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d424:	9401      	str	r4, [sp, #4]
 800d426:	f002 fad7 	bl	800f9d8 <_dtoa_r>
 800d42a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d42c:	9008      	str	r0, [sp, #32]
 800d42e:	2b47      	cmp	r3, #71	; 0x47
 800d430:	d103      	bne.n	800d43a <_svfprintf_r+0x8f2>
 800d432:	07f3      	lsls	r3, r6, #31
 800d434:	d401      	bmi.n	800d43a <_svfprintf_r+0x8f2>
 800d436:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d438:	e65e      	b.n	800d0f8 <_svfprintf_r+0x5b0>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	191b      	adds	r3, r3, r4
 800d43e:	9311      	str	r3, [sp, #68]	; 0x44
 800d440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d442:	2b46      	cmp	r3, #70	; 0x46
 800d444:	d112      	bne.n	800d46c <_svfprintf_r+0x924>
 800d446:	9b08      	ldr	r3, [sp, #32]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b30      	cmp	r3, #48	; 0x30
 800d44c:	d10a      	bne.n	800d464 <_svfprintf_r+0x91c>
 800d44e:	2200      	movs	r2, #0
 800d450:	2300      	movs	r3, #0
 800d452:	0028      	movs	r0, r5
 800d454:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d456:	f7f2 fff7 	bl	8000448 <__aeabi_dcmpeq>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d102      	bne.n	800d464 <_svfprintf_r+0x91c>
 800d45e:	2301      	movs	r3, #1
 800d460:	1b1b      	subs	r3, r3, r4
 800d462:	9326      	str	r3, [sp, #152]	; 0x98
 800d464:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d466:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d468:	18d3      	adds	r3, r2, r3
 800d46a:	9311      	str	r3, [sp, #68]	; 0x44
 800d46c:	2200      	movs	r2, #0
 800d46e:	2300      	movs	r3, #0
 800d470:	0028      	movs	r0, r5
 800d472:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d474:	f7f2 ffe8 	bl	8000448 <__aeabi_dcmpeq>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d001      	beq.n	800d480 <_svfprintf_r+0x938>
 800d47c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d47e:	932a      	str	r3, [sp, #168]	; 0xa8
 800d480:	2230      	movs	r2, #48	; 0x30
 800d482:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d484:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d486:	4299      	cmp	r1, r3
 800d488:	d9d5      	bls.n	800d436 <_svfprintf_r+0x8ee>
 800d48a:	1c59      	adds	r1, r3, #1
 800d48c:	912a      	str	r1, [sp, #168]	; 0xa8
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e7f7      	b.n	800d482 <_svfprintf_r+0x93a>
 800d492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d494:	2b46      	cmp	r3, #70	; 0x46
 800d496:	d000      	beq.n	800d49a <_svfprintf_r+0x952>
 800d498:	e63f      	b.n	800d11a <_svfprintf_r+0x5d2>
 800d49a:	2201      	movs	r2, #1
 800d49c:	0033      	movs	r3, r6
 800d49e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	430b      	orrs	r3, r1
 800d4a4:	2d00      	cmp	r5, #0
 800d4a6:	dd2c      	ble.n	800d502 <_svfprintf_r+0x9ba>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d046      	beq.n	800d53a <_svfprintf_r+0x9f2>
 800d4ac:	000a      	movs	r2, r1
 800d4ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d4b0:	18eb      	adds	r3, r5, r3
 800d4b2:	18d3      	adds	r3, r2, r3
 800d4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b6:	2366      	movs	r3, #102	; 0x66
 800d4b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4ba:	e030      	b.n	800d51e <_svfprintf_r+0x9d6>
 800d4bc:	781c      	ldrb	r4, [r3, #0]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	7014      	strb	r4, [r2, #0]
 800d4c2:	3201      	adds	r2, #1
 800d4c4:	e668      	b.n	800d198 <_svfprintf_r+0x650>
 800d4c6:	222a      	movs	r2, #42	; 0x2a
 800d4c8:	ab1e      	add	r3, sp, #120	; 0x78
 800d4ca:	18d2      	adds	r2, r2, r3
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d104      	bne.n	800d4da <_svfprintf_r+0x992>
 800d4d0:	2330      	movs	r3, #48	; 0x30
 800d4d2:	222b      	movs	r2, #43	; 0x2b
 800d4d4:	708b      	strb	r3, [r1, #2]
 800d4d6:	ab1e      	add	r3, sp, #120	; 0x78
 800d4d8:	18d2      	adds	r2, r2, r3
 800d4da:	3430      	adds	r4, #48	; 0x30
 800d4dc:	1c53      	adds	r3, r2, #1
 800d4de:	7014      	strb	r4, [r2, #0]
 800d4e0:	e669      	b.n	800d1b6 <_svfprintf_r+0x66e>
 800d4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dd12      	ble.n	800d50e <_svfprintf_r+0x9c6>
 800d4e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ec:	4694      	mov	ip, r2
 800d4ee:	4463      	add	r3, ip
 800d4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f2:	2367      	movs	r3, #103	; 0x67
 800d4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	dc11      	bgt.n	800d51e <_svfprintf_r+0x9d6>
 800d4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4fc:	1b5b      	subs	r3, r3, r5
 800d4fe:	3301      	adds	r3, #1
 800d500:	e00c      	b.n	800d51c <_svfprintf_r+0x9d4>
 800d502:	2b00      	cmp	r3, #0
 800d504:	d01b      	beq.n	800d53e <_svfprintf_r+0x9f6>
 800d506:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d50a:	3301      	adds	r3, #1
 800d50c:	e7d1      	b.n	800d4b2 <_svfprintf_r+0x96a>
 800d50e:	2367      	movs	r3, #103	; 0x67
 800d510:	9509      	str	r5, [sp, #36]	; 0x24
 800d512:	930f      	str	r3, [sp, #60]	; 0x3c
 800d514:	07f3      	lsls	r3, r6, #31
 800d516:	d502      	bpl.n	800d51e <_svfprintf_r+0x9d6>
 800d518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d51a:	18eb      	adds	r3, r5, r3
 800d51c:	9309      	str	r3, [sp, #36]	; 0x24
 800d51e:	2380      	movs	r3, #128	; 0x80
 800d520:	0032      	movs	r2, r6
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	401a      	ands	r2, r3
 800d526:	9211      	str	r2, [sp, #68]	; 0x44
 800d528:	2200      	movs	r2, #0
 800d52a:	9210      	str	r2, [sp, #64]	; 0x40
 800d52c:	421e      	tst	r6, r3
 800d52e:	d100      	bne.n	800d532 <_svfprintf_r+0x9ea>
 800d530:	e65d      	b.n	800d1ee <_svfprintf_r+0x6a6>
 800d532:	4295      	cmp	r5, r2
 800d534:	dc25      	bgt.n	800d582 <_svfprintf_r+0xa3a>
 800d536:	9211      	str	r2, [sp, #68]	; 0x44
 800d538:	e659      	b.n	800d1ee <_svfprintf_r+0x6a6>
 800d53a:	9509      	str	r5, [sp, #36]	; 0x24
 800d53c:	e7bb      	b.n	800d4b6 <_svfprintf_r+0x96e>
 800d53e:	2366      	movs	r3, #102	; 0x66
 800d540:	9209      	str	r2, [sp, #36]	; 0x24
 800d542:	930f      	str	r3, [sp, #60]	; 0x3c
 800d544:	e7eb      	b.n	800d51e <_svfprintf_r+0x9d6>
 800d546:	42ab      	cmp	r3, r5
 800d548:	da0e      	bge.n	800d568 <_svfprintf_r+0xa20>
 800d54a:	1aed      	subs	r5, r5, r3
 800d54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d54e:	785b      	ldrb	r3, [r3, #1]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d012      	beq.n	800d57a <_svfprintf_r+0xa32>
 800d554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d556:	3301      	adds	r3, #1
 800d558:	9311      	str	r3, [sp, #68]	; 0x44
 800d55a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d55c:	3301      	adds	r3, #1
 800d55e:	9312      	str	r3, [sp, #72]	; 0x48
 800d560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2bff      	cmp	r3, #255	; 0xff
 800d566:	d1ee      	bne.n	800d546 <_svfprintf_r+0x9fe>
 800d568:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d56a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d56c:	189b      	adds	r3, r3, r2
 800d56e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d570:	4353      	muls	r3, r2
 800d572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d574:	189b      	adds	r3, r3, r2
 800d576:	9309      	str	r3, [sp, #36]	; 0x24
 800d578:	e639      	b.n	800d1ee <_svfprintf_r+0x6a6>
 800d57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d57c:	3301      	adds	r3, #1
 800d57e:	9310      	str	r3, [sp, #64]	; 0x40
 800d580:	e7ee      	b.n	800d560 <_svfprintf_r+0xa18>
 800d582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d584:	9311      	str	r3, [sp, #68]	; 0x44
 800d586:	e7eb      	b.n	800d560 <_svfprintf_r+0xa18>
 800d588:	1d23      	adds	r3, r4, #4
 800d58a:	930d      	str	r3, [sp, #52]	; 0x34
 800d58c:	06b3      	lsls	r3, r6, #26
 800d58e:	d509      	bpl.n	800d5a4 <_svfprintf_r+0xa5c>
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	17d2      	asrs	r2, r2, #31
 800d598:	605a      	str	r2, [r3, #4]
 800d59a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d59c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d59e:	9308      	str	r3, [sp, #32]
 800d5a0:	f7ff fb0d 	bl	800cbbe <_svfprintf_r+0x76>
 800d5a4:	06f3      	lsls	r3, r6, #27
 800d5a6:	d503      	bpl.n	800d5b0 <_svfprintf_r+0xa68>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	e7f4      	b.n	800d59a <_svfprintf_r+0xa52>
 800d5b0:	0673      	lsls	r3, r6, #25
 800d5b2:	d503      	bpl.n	800d5bc <_svfprintf_r+0xa74>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5b8:	801a      	strh	r2, [r3, #0]
 800d5ba:	e7ee      	b.n	800d59a <_svfprintf_r+0xa52>
 800d5bc:	05b6      	lsls	r6, r6, #22
 800d5be:	d5f3      	bpl.n	800d5a8 <_svfprintf_r+0xa60>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5c4:	701a      	strb	r2, [r3, #0]
 800d5c6:	e7e8      	b.n	800d59a <_svfprintf_r+0xa52>
 800d5c8:	2310      	movs	r3, #16
 800d5ca:	431e      	orrs	r6, r3
 800d5cc:	2320      	movs	r3, #32
 800d5ce:	0030      	movs	r0, r6
 800d5d0:	4018      	ands	r0, r3
 800d5d2:	421e      	tst	r6, r3
 800d5d4:	d00f      	beq.n	800d5f6 <_svfprintf_r+0xaae>
 800d5d6:	3b19      	subs	r3, #25
 800d5d8:	3407      	adds	r4, #7
 800d5da:	439c      	bics	r4, r3
 800d5dc:	0022      	movs	r2, r4
 800d5de:	ca18      	ldmia	r2!, {r3, r4}
 800d5e0:	9306      	str	r3, [sp, #24]
 800d5e2:	9407      	str	r4, [sp, #28]
 800d5e4:	920d      	str	r2, [sp, #52]	; 0x34
 800d5e6:	4bc9      	ldr	r3, [pc, #804]	; (800d90c <_svfprintf_r+0xdc4>)
 800d5e8:	401e      	ands	r6, r3
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	221b      	movs	r2, #27
 800d5ee:	a91e      	add	r1, sp, #120	; 0x78
 800d5f0:	1852      	adds	r2, r2, r1
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	e430      	b.n	800ce58 <_svfprintf_r+0x310>
 800d5f6:	0022      	movs	r2, r4
 800d5f8:	ca08      	ldmia	r2!, {r3}
 800d5fa:	0031      	movs	r1, r6
 800d5fc:	920d      	str	r2, [sp, #52]	; 0x34
 800d5fe:	2210      	movs	r2, #16
 800d600:	4011      	ands	r1, r2
 800d602:	4216      	tst	r6, r2
 800d604:	d002      	beq.n	800d60c <_svfprintf_r+0xac4>
 800d606:	9306      	str	r3, [sp, #24]
 800d608:	9007      	str	r0, [sp, #28]
 800d60a:	e7ec      	b.n	800d5e6 <_svfprintf_r+0xa9e>
 800d60c:	2240      	movs	r2, #64	; 0x40
 800d60e:	0030      	movs	r0, r6
 800d610:	4010      	ands	r0, r2
 800d612:	4216      	tst	r6, r2
 800d614:	d003      	beq.n	800d61e <_svfprintf_r+0xad6>
 800d616:	b29b      	uxth	r3, r3
 800d618:	9306      	str	r3, [sp, #24]
 800d61a:	9107      	str	r1, [sp, #28]
 800d61c:	e7e3      	b.n	800d5e6 <_svfprintf_r+0xa9e>
 800d61e:	2280      	movs	r2, #128	; 0x80
 800d620:	0031      	movs	r1, r6
 800d622:	0092      	lsls	r2, r2, #2
 800d624:	4011      	ands	r1, r2
 800d626:	4216      	tst	r6, r2
 800d628:	d0f6      	beq.n	800d618 <_svfprintf_r+0xad0>
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	e7eb      	b.n	800d606 <_svfprintf_r+0xabe>
 800d62e:	0023      	movs	r3, r4
 800d630:	cb04      	ldmia	r3!, {r2}
 800d632:	49b7      	ldr	r1, [pc, #732]	; (800d910 <_svfprintf_r+0xdc8>)
 800d634:	9206      	str	r2, [sp, #24]
 800d636:	aa25      	add	r2, sp, #148	; 0x94
 800d638:	8011      	strh	r1, [r2, #0]
 800d63a:	4ab6      	ldr	r2, [pc, #728]	; (800d914 <_svfprintf_r+0xdcc>)
 800d63c:	930d      	str	r3, [sp, #52]	; 0x34
 800d63e:	2300      	movs	r3, #0
 800d640:	921f      	str	r2, [sp, #124]	; 0x7c
 800d642:	2278      	movs	r2, #120	; 0x78
 800d644:	9307      	str	r3, [sp, #28]
 800d646:	3302      	adds	r3, #2
 800d648:	431e      	orrs	r6, r3
 800d64a:	920f      	str	r2, [sp, #60]	; 0x3c
 800d64c:	e7ce      	b.n	800d5ec <_svfprintf_r+0xaa4>
 800d64e:	0023      	movs	r3, r4
 800d650:	cb04      	ldmia	r3!, {r2}
 800d652:	2400      	movs	r4, #0
 800d654:	930d      	str	r3, [sp, #52]	; 0x34
 800d656:	231b      	movs	r3, #27
 800d658:	9208      	str	r2, [sp, #32]
 800d65a:	aa1e      	add	r2, sp, #120	; 0x78
 800d65c:	189b      	adds	r3, r3, r2
 800d65e:	701c      	strb	r4, [r3, #0]
 800d660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d662:	3301      	adds	r3, #1
 800d664:	d00e      	beq.n	800d684 <_svfprintf_r+0xb3c>
 800d666:	0021      	movs	r1, r4
 800d668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d66a:	9808      	ldr	r0, [sp, #32]
 800d66c:	f002 f83a 	bl	800f6e4 <memchr>
 800d670:	900c      	str	r0, [sp, #48]	; 0x30
 800d672:	42a0      	cmp	r0, r4
 800d674:	d100      	bne.n	800d678 <_svfprintf_r+0xb30>
 800d676:	e10d      	b.n	800d894 <_svfprintf_r+0xd4c>
 800d678:	9a08      	ldr	r2, [sp, #32]
 800d67a:	1a83      	subs	r3, r0, r2
 800d67c:	9309      	str	r3, [sp, #36]	; 0x24
 800d67e:	0023      	movs	r3, r4
 800d680:	940c      	str	r4, [sp, #48]	; 0x30
 800d682:	e44e      	b.n	800cf22 <_svfprintf_r+0x3da>
 800d684:	9808      	ldr	r0, [sp, #32]
 800d686:	f7f2 fd3d 	bl	8000104 <strlen>
 800d68a:	9009      	str	r0, [sp, #36]	; 0x24
 800d68c:	e7f7      	b.n	800d67e <_svfprintf_r+0xb36>
 800d68e:	2310      	movs	r3, #16
 800d690:	431e      	orrs	r6, r3
 800d692:	2320      	movs	r3, #32
 800d694:	0030      	movs	r0, r6
 800d696:	4018      	ands	r0, r3
 800d698:	421e      	tst	r6, r3
 800d69a:	d009      	beq.n	800d6b0 <_svfprintf_r+0xb68>
 800d69c:	3b19      	subs	r3, #25
 800d69e:	3407      	adds	r4, #7
 800d6a0:	439c      	bics	r4, r3
 800d6a2:	0022      	movs	r2, r4
 800d6a4:	ca18      	ldmia	r2!, {r3, r4}
 800d6a6:	9306      	str	r3, [sp, #24]
 800d6a8:	9407      	str	r4, [sp, #28]
 800d6aa:	920d      	str	r2, [sp, #52]	; 0x34
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e79d      	b.n	800d5ec <_svfprintf_r+0xaa4>
 800d6b0:	0023      	movs	r3, r4
 800d6b2:	cb04      	ldmia	r3!, {r2}
 800d6b4:	0031      	movs	r1, r6
 800d6b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	4019      	ands	r1, r3
 800d6bc:	421e      	tst	r6, r3
 800d6be:	d003      	beq.n	800d6c8 <_svfprintf_r+0xb80>
 800d6c0:	9206      	str	r2, [sp, #24]
 800d6c2:	9007      	str	r0, [sp, #28]
 800d6c4:	3b0f      	subs	r3, #15
 800d6c6:	e791      	b.n	800d5ec <_svfprintf_r+0xaa4>
 800d6c8:	2340      	movs	r3, #64	; 0x40
 800d6ca:	0030      	movs	r0, r6
 800d6cc:	4018      	ands	r0, r3
 800d6ce:	421e      	tst	r6, r3
 800d6d0:	d003      	beq.n	800d6da <_svfprintf_r+0xb92>
 800d6d2:	b293      	uxth	r3, r2
 800d6d4:	9306      	str	r3, [sp, #24]
 800d6d6:	9107      	str	r1, [sp, #28]
 800d6d8:	e7e8      	b.n	800d6ac <_svfprintf_r+0xb64>
 800d6da:	2380      	movs	r3, #128	; 0x80
 800d6dc:	0031      	movs	r1, r6
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4019      	ands	r1, r3
 800d6e2:	421e      	tst	r6, r3
 800d6e4:	d003      	beq.n	800d6ee <_svfprintf_r+0xba6>
 800d6e6:	b2d3      	uxtb	r3, r2
 800d6e8:	9306      	str	r3, [sp, #24]
 800d6ea:	9007      	str	r0, [sp, #28]
 800d6ec:	e7de      	b.n	800d6ac <_svfprintf_r+0xb64>
 800d6ee:	9206      	str	r2, [sp, #24]
 800d6f0:	e7f1      	b.n	800d6d6 <_svfprintf_r+0xb8e>
 800d6f2:	4b89      	ldr	r3, [pc, #548]	; (800d918 <_svfprintf_r+0xdd0>)
 800d6f4:	0030      	movs	r0, r6
 800d6f6:	931f      	str	r3, [sp, #124]	; 0x7c
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	4018      	ands	r0, r3
 800d6fc:	421e      	tst	r6, r3
 800d6fe:	d01a      	beq.n	800d736 <_svfprintf_r+0xbee>
 800d700:	3b19      	subs	r3, #25
 800d702:	3407      	adds	r4, #7
 800d704:	439c      	bics	r4, r3
 800d706:	0022      	movs	r2, r4
 800d708:	ca18      	ldmia	r2!, {r3, r4}
 800d70a:	9306      	str	r3, [sp, #24]
 800d70c:	9407      	str	r4, [sp, #28]
 800d70e:	920d      	str	r2, [sp, #52]	; 0x34
 800d710:	07f3      	lsls	r3, r6, #31
 800d712:	d50a      	bpl.n	800d72a <_svfprintf_r+0xbe2>
 800d714:	9b06      	ldr	r3, [sp, #24]
 800d716:	9a07      	ldr	r2, [sp, #28]
 800d718:	4313      	orrs	r3, r2
 800d71a:	d006      	beq.n	800d72a <_svfprintf_r+0xbe2>
 800d71c:	2230      	movs	r2, #48	; 0x30
 800d71e:	ab25      	add	r3, sp, #148	; 0x94
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d724:	705a      	strb	r2, [r3, #1]
 800d726:	2302      	movs	r3, #2
 800d728:	431e      	orrs	r6, r3
 800d72a:	4b78      	ldr	r3, [pc, #480]	; (800d90c <_svfprintf_r+0xdc4>)
 800d72c:	401e      	ands	r6, r3
 800d72e:	2302      	movs	r3, #2
 800d730:	e75c      	b.n	800d5ec <_svfprintf_r+0xaa4>
 800d732:	4b78      	ldr	r3, [pc, #480]	; (800d914 <_svfprintf_r+0xdcc>)
 800d734:	e7de      	b.n	800d6f4 <_svfprintf_r+0xbac>
 800d736:	0023      	movs	r3, r4
 800d738:	cb04      	ldmia	r3!, {r2}
 800d73a:	0031      	movs	r1, r6
 800d73c:	930d      	str	r3, [sp, #52]	; 0x34
 800d73e:	2310      	movs	r3, #16
 800d740:	4019      	ands	r1, r3
 800d742:	421e      	tst	r6, r3
 800d744:	d002      	beq.n	800d74c <_svfprintf_r+0xc04>
 800d746:	9206      	str	r2, [sp, #24]
 800d748:	9007      	str	r0, [sp, #28]
 800d74a:	e7e1      	b.n	800d710 <_svfprintf_r+0xbc8>
 800d74c:	2340      	movs	r3, #64	; 0x40
 800d74e:	0030      	movs	r0, r6
 800d750:	4018      	ands	r0, r3
 800d752:	421e      	tst	r6, r3
 800d754:	d003      	beq.n	800d75e <_svfprintf_r+0xc16>
 800d756:	b293      	uxth	r3, r2
 800d758:	9306      	str	r3, [sp, #24]
 800d75a:	9107      	str	r1, [sp, #28]
 800d75c:	e7d8      	b.n	800d710 <_svfprintf_r+0xbc8>
 800d75e:	2380      	movs	r3, #128	; 0x80
 800d760:	0031      	movs	r1, r6
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4019      	ands	r1, r3
 800d766:	421e      	tst	r6, r3
 800d768:	d002      	beq.n	800d770 <_svfprintf_r+0xc28>
 800d76a:	b2d3      	uxtb	r3, r2
 800d76c:	9306      	str	r3, [sp, #24]
 800d76e:	e7eb      	b.n	800d748 <_svfprintf_r+0xc00>
 800d770:	9206      	str	r2, [sp, #24]
 800d772:	e7f2      	b.n	800d75a <_svfprintf_r+0xc12>
 800d774:	9b07      	ldr	r3, [sp, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10a      	bne.n	800d790 <_svfprintf_r+0xc48>
 800d77a:	9b06      	ldr	r3, [sp, #24]
 800d77c:	2b09      	cmp	r3, #9
 800d77e:	d807      	bhi.n	800d790 <_svfprintf_r+0xc48>
 800d780:	23e7      	movs	r3, #231	; 0xe7
 800d782:	aa1e      	add	r2, sp, #120	; 0x78
 800d784:	189b      	adds	r3, r3, r2
 800d786:	9a06      	ldr	r2, [sp, #24]
 800d788:	3230      	adds	r2, #48	; 0x30
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	f000 fc18 	bl	800dfc0 <_svfprintf_r+0x1478>
 800d790:	2680      	movs	r6, #128	; 0x80
 800d792:	2300      	movs	r3, #0
 800d794:	00f6      	lsls	r6, r6, #3
 800d796:	930e      	str	r3, [sp, #56]	; 0x38
 800d798:	ad58      	add	r5, sp, #352	; 0x160
 800d79a:	4026      	ands	r6, r4
 800d79c:	220a      	movs	r2, #10
 800d79e:	9806      	ldr	r0, [sp, #24]
 800d7a0:	9907      	ldr	r1, [sp, #28]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f7f2 fe7e 	bl	80004a4 <__aeabi_uldivmod>
 800d7a8:	1e6b      	subs	r3, r5, #1
 800d7aa:	3230      	adds	r2, #48	; 0x30
 800d7ac:	9308      	str	r3, [sp, #32]
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7b2:	900c      	str	r0, [sp, #48]	; 0x30
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	9110      	str	r1, [sp, #64]	; 0x40
 800d7b8:	930e      	str	r3, [sp, #56]	; 0x38
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	d01d      	beq.n	800d7fa <_svfprintf_r+0xcb2>
 800d7be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d118      	bne.n	800d7fa <_svfprintf_r+0xcb2>
 800d7c8:	2aff      	cmp	r2, #255	; 0xff
 800d7ca:	d016      	beq.n	800d7fa <_svfprintf_r+0xcb2>
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <_svfprintf_r+0xc90>
 800d7d2:	9b06      	ldr	r3, [sp, #24]
 800d7d4:	2b09      	cmp	r3, #9
 800d7d6:	d910      	bls.n	800d7fa <_svfprintf_r+0xcb2>
 800d7d8:	9b08      	ldr	r3, [sp, #32]
 800d7da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d7dc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d7de:	1a9b      	subs	r3, r3, r2
 800d7e0:	0018      	movs	r0, r3
 800d7e2:	9308      	str	r3, [sp, #32]
 800d7e4:	f7fd ffd1 	bl	800b78a <strncpy>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7ec:	920e      	str	r2, [sp, #56]	; 0x38
 800d7ee:	785b      	ldrb	r3, [r3, #1]
 800d7f0:	1e5a      	subs	r2, r3, #1
 800d7f2:	4193      	sbcs	r3, r2
 800d7f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7f6:	18d3      	adds	r3, r2, r3
 800d7f8:	9312      	str	r3, [sp, #72]	; 0x48
 800d7fa:	9b07      	ldr	r3, [sp, #28]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10f      	bne.n	800d820 <_svfprintf_r+0xcd8>
 800d800:	9b06      	ldr	r3, [sp, #24]
 800d802:	2b09      	cmp	r3, #9
 800d804:	d80c      	bhi.n	800d820 <_svfprintf_r+0xcd8>
 800d806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d808:	9a08      	ldr	r2, [sp, #32]
 800d80a:	9319      	str	r3, [sp, #100]	; 0x64
 800d80c:	ab58      	add	r3, sp, #352	; 0x160
 800d80e:	1a9b      	subs	r3, r3, r2
 800d810:	9309      	str	r3, [sp, #36]	; 0x24
 800d812:	2300      	movs	r3, #0
 800d814:	0026      	movs	r6, r4
 800d816:	930c      	str	r3, [sp, #48]	; 0x30
 800d818:	001d      	movs	r5, r3
 800d81a:	9310      	str	r3, [sp, #64]	; 0x40
 800d81c:	9311      	str	r3, [sp, #68]	; 0x44
 800d81e:	e4f2      	b.n	800d206 <_svfprintf_r+0x6be>
 800d820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d822:	9d08      	ldr	r5, [sp, #32]
 800d824:	9306      	str	r3, [sp, #24]
 800d826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d828:	9307      	str	r3, [sp, #28]
 800d82a:	e7b7      	b.n	800d79c <_svfprintf_r+0xc54>
 800d82c:	200f      	movs	r0, #15
 800d82e:	ab58      	add	r3, sp, #352	; 0x160
 800d830:	9308      	str	r3, [sp, #32]
 800d832:	9b08      	ldr	r3, [sp, #32]
 800d834:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d836:	3b01      	subs	r3, #1
 800d838:	9308      	str	r3, [sp, #32]
 800d83a:	9b06      	ldr	r3, [sp, #24]
 800d83c:	4003      	ands	r3, r0
 800d83e:	5cd3      	ldrb	r3, [r2, r3]
 800d840:	9a08      	ldr	r2, [sp, #32]
 800d842:	7013      	strb	r3, [r2, #0]
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	0719      	lsls	r1, r3, #28
 800d848:	9b06      	ldr	r3, [sp, #24]
 800d84a:	091a      	lsrs	r2, r3, #4
 800d84c:	9b07      	ldr	r3, [sp, #28]
 800d84e:	4311      	orrs	r1, r2
 800d850:	091b      	lsrs	r3, r3, #4
 800d852:	9307      	str	r3, [sp, #28]
 800d854:	000b      	movs	r3, r1
 800d856:	9a07      	ldr	r2, [sp, #28]
 800d858:	9106      	str	r1, [sp, #24]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	d1e9      	bne.n	800d832 <_svfprintf_r+0xcea>
 800d85e:	e7d2      	b.n	800d806 <_svfprintf_r+0xcbe>
 800d860:	aa58      	add	r2, sp, #352	; 0x160
 800d862:	9208      	str	r2, [sp, #32]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1ce      	bne.n	800d806 <_svfprintf_r+0xcbe>
 800d868:	07f6      	lsls	r6, r6, #31
 800d86a:	d5cc      	bpl.n	800d806 <_svfprintf_r+0xcbe>
 800d86c:	aa1e      	add	r2, sp, #120	; 0x78
 800d86e:	33e7      	adds	r3, #231	; 0xe7
 800d870:	189b      	adds	r3, r3, r2
 800d872:	2230      	movs	r2, #48	; 0x30
 800d874:	e789      	b.n	800d78a <_svfprintf_r+0xc42>
 800d876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d100      	bne.n	800d87e <_svfprintf_r+0xd36>
 800d87c:	e364      	b.n	800df48 <_svfprintf_r+0x1400>
 800d87e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d880:	211b      	movs	r1, #27
 800d882:	ab3f      	add	r3, sp, #252	; 0xfc
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	2200      	movs	r2, #0
 800d888:	a81e      	add	r0, sp, #120	; 0x78
 800d88a:	1809      	adds	r1, r1, r0
 800d88c:	700a      	strb	r2, [r1, #0]
 800d88e:	940d      	str	r4, [sp, #52]	; 0x34
 800d890:	f7ff fabd 	bl	800ce0e <_svfprintf_r+0x2c6>
 800d894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d896:	f7ff fb44 	bl	800cf22 <_svfprintf_r+0x3da>
 800d89a:	2010      	movs	r0, #16
 800d89c:	1812      	adds	r2, r2, r0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	922e      	str	r2, [sp, #184]	; 0xb8
 800d8a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8a4:	2b07      	cmp	r3, #7
 800d8a6:	dd08      	ble.n	800d8ba <_svfprintf_r+0xd72>
 800d8a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8ae:	f003 fa61 	bl	8010d74 <__ssprint_r>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d000      	beq.n	800d8b8 <_svfprintf_r+0xd70>
 800d8b6:	e326      	b.n	800df06 <_svfprintf_r+0x13be>
 800d8b8:	a92f      	add	r1, sp, #188	; 0xbc
 800d8ba:	000f      	movs	r7, r1
 800d8bc:	3c10      	subs	r4, #16
 800d8be:	e4c5      	b.n	800d24c <_svfprintf_r+0x704>
 800d8c0:	2010      	movs	r0, #16
 800d8c2:	1812      	adds	r2, r2, r0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	922e      	str	r2, [sp, #184]	; 0xb8
 800d8c8:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8ca:	2b07      	cmp	r3, #7
 800d8cc:	dd08      	ble.n	800d8e0 <_svfprintf_r+0xd98>
 800d8ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8d2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8d4:	f003 fa4e 	bl	8010d74 <__ssprint_r>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d000      	beq.n	800d8de <_svfprintf_r+0xd96>
 800d8dc:	e313      	b.n	800df06 <_svfprintf_r+0x13be>
 800d8de:	a92f      	add	r1, sp, #188	; 0xbc
 800d8e0:	000f      	movs	r7, r1
 800d8e2:	3c10      	subs	r4, #16
 800d8e4:	e50b      	b.n	800d2fe <_svfprintf_r+0x7b6>
 800d8e6:	2010      	movs	r0, #16
 800d8e8:	1812      	adds	r2, r2, r0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	922e      	str	r2, [sp, #184]	; 0xb8
 800d8ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8f0:	2b07      	cmp	r3, #7
 800d8f2:	dd08      	ble.n	800d906 <_svfprintf_r+0xdbe>
 800d8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8fa:	f003 fa3b 	bl	8010d74 <__ssprint_r>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d000      	beq.n	800d904 <_svfprintf_r+0xdbc>
 800d902:	e300      	b.n	800df06 <_svfprintf_r+0x13be>
 800d904:	a92f      	add	r1, sp, #188	; 0xbc
 800d906:	000f      	movs	r7, r1
 800d908:	3c10      	subs	r4, #16
 800d90a:	e518      	b.n	800d33e <_svfprintf_r+0x7f6>
 800d90c:	fffffbff 	.word	0xfffffbff
 800d910:	00007830 	.word	0x00007830
 800d914:	080140ac 	.word	0x080140ac
 800d918:	080140bd 	.word	0x080140bd
 800d91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d91e:	2b65      	cmp	r3, #101	; 0x65
 800d920:	dc00      	bgt.n	800d924 <_svfprintf_r+0xddc>
 800d922:	e241      	b.n	800dda8 <_svfprintf_r+0x1260>
 800d924:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d926:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d928:	2200      	movs	r2, #0
 800d92a:	2300      	movs	r3, #0
 800d92c:	f7f2 fd8c 	bl	8000448 <__aeabi_dcmpeq>
 800d930:	2800      	cmp	r0, #0
 800d932:	d077      	beq.n	800da24 <_svfprintf_r+0xedc>
 800d934:	4bca      	ldr	r3, [pc, #808]	; (800dc60 <_svfprintf_r+0x1118>)
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	2301      	movs	r3, #1
 800d93a:	607b      	str	r3, [r7, #4]
 800d93c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d93e:	3708      	adds	r7, #8
 800d940:	3301      	adds	r3, #1
 800d942:	932e      	str	r3, [sp, #184]	; 0xb8
 800d944:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d946:	3301      	adds	r3, #1
 800d948:	932d      	str	r3, [sp, #180]	; 0xb4
 800d94a:	2b07      	cmp	r3, #7
 800d94c:	dd08      	ble.n	800d960 <_svfprintf_r+0xe18>
 800d94e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d950:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d952:	aa2c      	add	r2, sp, #176	; 0xb0
 800d954:	f003 fa0e 	bl	8010d74 <__ssprint_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d000      	beq.n	800d95e <_svfprintf_r+0xe16>
 800d95c:	e2d3      	b.n	800df06 <_svfprintf_r+0x13be>
 800d95e:	af2f      	add	r7, sp, #188	; 0xbc
 800d960:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d964:	4293      	cmp	r3, r2
 800d966:	db01      	blt.n	800d96c <_svfprintf_r+0xe24>
 800d968:	07f3      	lsls	r3, r6, #31
 800d96a:	d51b      	bpl.n	800d9a4 <_svfprintf_r+0xe5c>
 800d96c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d96e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d970:	603b      	str	r3, [r7, #0]
 800d972:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d974:	607b      	str	r3, [r7, #4]
 800d976:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d978:	3708      	adds	r7, #8
 800d97a:	189b      	adds	r3, r3, r2
 800d97c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d97e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d980:	3301      	adds	r3, #1
 800d982:	932d      	str	r3, [sp, #180]	; 0xb4
 800d984:	2b07      	cmp	r3, #7
 800d986:	dd08      	ble.n	800d99a <_svfprintf_r+0xe52>
 800d988:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d98a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d98c:	aa2c      	add	r2, sp, #176	; 0xb0
 800d98e:	f003 f9f1 	bl	8010d74 <__ssprint_r>
 800d992:	2800      	cmp	r0, #0
 800d994:	d000      	beq.n	800d998 <_svfprintf_r+0xe50>
 800d996:	e2b6      	b.n	800df06 <_svfprintf_r+0x13be>
 800d998:	af2f      	add	r7, sp, #188	; 0xbc
 800d99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d99c:	2510      	movs	r5, #16
 800d99e:	1e5c      	subs	r4, r3, #1
 800d9a0:	2c00      	cmp	r4, #0
 800d9a2:	dc2e      	bgt.n	800da02 <_svfprintf_r+0xeba>
 800d9a4:	0776      	lsls	r6, r6, #29
 800d9a6:	d500      	bpl.n	800d9aa <_svfprintf_r+0xe62>
 800d9a8:	e290      	b.n	800decc <_svfprintf_r+0x1384>
 800d9aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	da00      	bge.n	800d9b4 <_svfprintf_r+0xe6c>
 800d9b2:	0013      	movs	r3, r2
 800d9b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9b6:	18d3      	adds	r3, r2, r3
 800d9b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d9ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d007      	beq.n	800d9d0 <_svfprintf_r+0xe88>
 800d9c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9c4:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9c6:	f003 f9d5 	bl	8010d74 <__ssprint_r>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d000      	beq.n	800d9d0 <_svfprintf_r+0xe88>
 800d9ce:	e29a      	b.n	800df06 <_svfprintf_r+0x13be>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d000      	beq.n	800d9dc <_svfprintf_r+0xe94>
 800d9da:	e2b0      	b.n	800df3e <_svfprintf_r+0x13f6>
 800d9dc:	af2f      	add	r7, sp, #188	; 0xbc
 800d9de:	e5dc      	b.n	800d59a <_svfprintf_r+0xa52>
 800d9e0:	3210      	adds	r2, #16
 800d9e2:	607d      	str	r5, [r7, #4]
 800d9e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800d9e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9e8:	2b07      	cmp	r3, #7
 800d9ea:	dd08      	ble.n	800d9fe <_svfprintf_r+0xeb6>
 800d9ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9f0:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9f2:	f003 f9bf 	bl	8010d74 <__ssprint_r>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d000      	beq.n	800d9fc <_svfprintf_r+0xeb4>
 800d9fa:	e284      	b.n	800df06 <_svfprintf_r+0x13be>
 800d9fc:	a92f      	add	r1, sp, #188	; 0xbc
 800d9fe:	000f      	movs	r7, r1
 800da00:	3c10      	subs	r4, #16
 800da02:	0039      	movs	r1, r7
 800da04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da06:	4897      	ldr	r0, [pc, #604]	; (800dc64 <_svfprintf_r+0x111c>)
 800da08:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da0a:	3301      	adds	r3, #1
 800da0c:	3108      	adds	r1, #8
 800da0e:	6038      	str	r0, [r7, #0]
 800da10:	2c10      	cmp	r4, #16
 800da12:	dce5      	bgt.n	800d9e0 <_svfprintf_r+0xe98>
 800da14:	607c      	str	r4, [r7, #4]
 800da16:	18a4      	adds	r4, r4, r2
 800da18:	942e      	str	r4, [sp, #184]	; 0xb8
 800da1a:	000f      	movs	r7, r1
 800da1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800da1e:	2b07      	cmp	r3, #7
 800da20:	ddc0      	ble.n	800d9a4 <_svfprintf_r+0xe5c>
 800da22:	e05f      	b.n	800dae4 <_svfprintf_r+0xf9c>
 800da24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da26:	2b00      	cmp	r3, #0
 800da28:	dc78      	bgt.n	800db1c <_svfprintf_r+0xfd4>
 800da2a:	4b8d      	ldr	r3, [pc, #564]	; (800dc60 <_svfprintf_r+0x1118>)
 800da2c:	603b      	str	r3, [r7, #0]
 800da2e:	2301      	movs	r3, #1
 800da30:	607b      	str	r3, [r7, #4]
 800da32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da34:	3708      	adds	r7, #8
 800da36:	3301      	adds	r3, #1
 800da38:	932e      	str	r3, [sp, #184]	; 0xb8
 800da3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da3c:	3301      	adds	r3, #1
 800da3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800da40:	2b07      	cmp	r3, #7
 800da42:	dd08      	ble.n	800da56 <_svfprintf_r+0xf0e>
 800da44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da48:	aa2c      	add	r2, sp, #176	; 0xb0
 800da4a:	f003 f993 	bl	8010d74 <__ssprint_r>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d000      	beq.n	800da54 <_svfprintf_r+0xf0c>
 800da52:	e258      	b.n	800df06 <_svfprintf_r+0x13be>
 800da54:	af2f      	add	r7, sp, #188	; 0xbc
 800da56:	990e      	ldr	r1, [sp, #56]	; 0x38
 800da58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da5a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da5c:	430b      	orrs	r3, r1
 800da5e:	2101      	movs	r1, #1
 800da60:	4031      	ands	r1, r6
 800da62:	430b      	orrs	r3, r1
 800da64:	d09e      	beq.n	800d9a4 <_svfprintf_r+0xe5c>
 800da66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800da68:	603b      	str	r3, [r7, #0]
 800da6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800da6c:	607b      	str	r3, [r7, #4]
 800da6e:	189a      	adds	r2, r3, r2
 800da70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da72:	922e      	str	r2, [sp, #184]	; 0xb8
 800da74:	3301      	adds	r3, #1
 800da76:	932d      	str	r3, [sp, #180]	; 0xb4
 800da78:	3708      	adds	r7, #8
 800da7a:	2b07      	cmp	r3, #7
 800da7c:	dd08      	ble.n	800da90 <_svfprintf_r+0xf48>
 800da7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da82:	aa2c      	add	r2, sp, #176	; 0xb0
 800da84:	f003 f976 	bl	8010d74 <__ssprint_r>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d000      	beq.n	800da8e <_svfprintf_r+0xf46>
 800da8c:	e23b      	b.n	800df06 <_svfprintf_r+0x13be>
 800da8e:	af2f      	add	r7, sp, #188	; 0xbc
 800da90:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800da92:	2c00      	cmp	r4, #0
 800da94:	da19      	bge.n	800daca <_svfprintf_r+0xf82>
 800da96:	0038      	movs	r0, r7
 800da98:	2510      	movs	r5, #16
 800da9a:	4264      	negs	r4, r4
 800da9c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800da9e:	4a71      	ldr	r2, [pc, #452]	; (800dc64 <_svfprintf_r+0x111c>)
 800daa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800daa2:	3101      	adds	r1, #1
 800daa4:	3708      	adds	r7, #8
 800daa6:	6002      	str	r2, [r0, #0]
 800daa8:	2c10      	cmp	r4, #16
 800daaa:	dc25      	bgt.n	800daf8 <_svfprintf_r+0xfb0>
 800daac:	6044      	str	r4, [r0, #4]
 800daae:	18e4      	adds	r4, r4, r3
 800dab0:	942e      	str	r4, [sp, #184]	; 0xb8
 800dab2:	912d      	str	r1, [sp, #180]	; 0xb4
 800dab4:	2907      	cmp	r1, #7
 800dab6:	dd08      	ble.n	800daca <_svfprintf_r+0xf82>
 800dab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800daba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dabc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dabe:	f003 f959 	bl	8010d74 <__ssprint_r>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d000      	beq.n	800dac8 <_svfprintf_r+0xf80>
 800dac6:	e21e      	b.n	800df06 <_svfprintf_r+0x13be>
 800dac8:	af2f      	add	r7, sp, #188	; 0xbc
 800daca:	9b08      	ldr	r3, [sp, #32]
 800dacc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dad2:	18d2      	adds	r2, r2, r3
 800dad4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dad6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dad8:	607b      	str	r3, [r7, #4]
 800dada:	3201      	adds	r2, #1
 800dadc:	922d      	str	r2, [sp, #180]	; 0xb4
 800dade:	2a07      	cmp	r2, #7
 800dae0:	dc00      	bgt.n	800dae4 <_svfprintf_r+0xf9c>
 800dae2:	e45b      	b.n	800d39c <_svfprintf_r+0x854>
 800dae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dae8:	aa2c      	add	r2, sp, #176	; 0xb0
 800daea:	f003 f943 	bl	8010d74 <__ssprint_r>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d000      	beq.n	800daf4 <_svfprintf_r+0xfac>
 800daf2:	e208      	b.n	800df06 <_svfprintf_r+0x13be>
 800daf4:	af2f      	add	r7, sp, #188	; 0xbc
 800daf6:	e755      	b.n	800d9a4 <_svfprintf_r+0xe5c>
 800daf8:	3310      	adds	r3, #16
 800dafa:	6045      	str	r5, [r0, #4]
 800dafc:	932e      	str	r3, [sp, #184]	; 0xb8
 800dafe:	912d      	str	r1, [sp, #180]	; 0xb4
 800db00:	2907      	cmp	r1, #7
 800db02:	dd08      	ble.n	800db16 <_svfprintf_r+0xfce>
 800db04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db08:	aa2c      	add	r2, sp, #176	; 0xb0
 800db0a:	f003 f933 	bl	8010d74 <__ssprint_r>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d000      	beq.n	800db14 <_svfprintf_r+0xfcc>
 800db12:	e1f8      	b.n	800df06 <_svfprintf_r+0x13be>
 800db14:	af2f      	add	r7, sp, #188	; 0xbc
 800db16:	0038      	movs	r0, r7
 800db18:	3c10      	subs	r4, #16
 800db1a:	e7bf      	b.n	800da9c <_svfprintf_r+0xf54>
 800db1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db1e:	002c      	movs	r4, r5
 800db20:	429d      	cmp	r5, r3
 800db22:	dd00      	ble.n	800db26 <_svfprintf_r+0xfde>
 800db24:	001c      	movs	r4, r3
 800db26:	2c00      	cmp	r4, #0
 800db28:	dd14      	ble.n	800db54 <_svfprintf_r+0x100c>
 800db2a:	9b08      	ldr	r3, [sp, #32]
 800db2c:	607c      	str	r4, [r7, #4]
 800db2e:	603b      	str	r3, [r7, #0]
 800db30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db32:	3708      	adds	r7, #8
 800db34:	18e3      	adds	r3, r4, r3
 800db36:	932e      	str	r3, [sp, #184]	; 0xb8
 800db38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db3a:	3301      	adds	r3, #1
 800db3c:	932d      	str	r3, [sp, #180]	; 0xb4
 800db3e:	2b07      	cmp	r3, #7
 800db40:	dd08      	ble.n	800db54 <_svfprintf_r+0x100c>
 800db42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db46:	aa2c      	add	r2, sp, #176	; 0xb0
 800db48:	f003 f914 	bl	8010d74 <__ssprint_r>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d000      	beq.n	800db52 <_svfprintf_r+0x100a>
 800db50:	e1d9      	b.n	800df06 <_svfprintf_r+0x13be>
 800db52:	af2f      	add	r7, sp, #188	; 0xbc
 800db54:	43e3      	mvns	r3, r4
 800db56:	17db      	asrs	r3, r3, #31
 800db58:	401c      	ands	r4, r3
 800db5a:	1b2c      	subs	r4, r5, r4
 800db5c:	2c00      	cmp	r4, #0
 800db5e:	dd18      	ble.n	800db92 <_svfprintf_r+0x104a>
 800db60:	0039      	movs	r1, r7
 800db62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db64:	483f      	ldr	r0, [pc, #252]	; (800dc64 <_svfprintf_r+0x111c>)
 800db66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800db68:	3301      	adds	r3, #1
 800db6a:	3108      	adds	r1, #8
 800db6c:	6038      	str	r0, [r7, #0]
 800db6e:	2c10      	cmp	r4, #16
 800db70:	dc7a      	bgt.n	800dc68 <_svfprintf_r+0x1120>
 800db72:	607c      	str	r4, [r7, #4]
 800db74:	18a4      	adds	r4, r4, r2
 800db76:	000f      	movs	r7, r1
 800db78:	942e      	str	r4, [sp, #184]	; 0xb8
 800db7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800db7c:	2b07      	cmp	r3, #7
 800db7e:	dd08      	ble.n	800db92 <_svfprintf_r+0x104a>
 800db80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db84:	aa2c      	add	r2, sp, #176	; 0xb0
 800db86:	f003 f8f5 	bl	8010d74 <__ssprint_r>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d000      	beq.n	800db90 <_svfprintf_r+0x1048>
 800db8e:	e1ba      	b.n	800df06 <_svfprintf_r+0x13be>
 800db90:	af2f      	add	r7, sp, #188	; 0xbc
 800db92:	9b08      	ldr	r3, [sp, #32]
 800db94:	195d      	adds	r5, r3, r5
 800db96:	0573      	lsls	r3, r6, #21
 800db98:	d50b      	bpl.n	800dbb2 <_svfprintf_r+0x106a>
 800db9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d176      	bne.n	800dc8e <_svfprintf_r+0x1146>
 800dba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d176      	bne.n	800dc94 <_svfprintf_r+0x114c>
 800dba6:	9b08      	ldr	r3, [sp, #32]
 800dba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbaa:	189b      	adds	r3, r3, r2
 800dbac:	429d      	cmp	r5, r3
 800dbae:	d900      	bls.n	800dbb2 <_svfprintf_r+0x106a>
 800dbb0:	001d      	movs	r5, r3
 800dbb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	db01      	blt.n	800dbbe <_svfprintf_r+0x1076>
 800dbba:	07f3      	lsls	r3, r6, #31
 800dbbc:	d516      	bpl.n	800dbec <_svfprintf_r+0x10a4>
 800dbbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dbc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbc6:	607b      	str	r3, [r7, #4]
 800dbc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dbca:	3708      	adds	r7, #8
 800dbcc:	189b      	adds	r3, r3, r2
 800dbce:	932e      	str	r3, [sp, #184]	; 0xb8
 800dbd0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbd6:	2b07      	cmp	r3, #7
 800dbd8:	dd08      	ble.n	800dbec <_svfprintf_r+0x10a4>
 800dbda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbde:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbe0:	f003 f8c8 	bl	8010d74 <__ssprint_r>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d000      	beq.n	800dbea <_svfprintf_r+0x10a2>
 800dbe8:	e18d      	b.n	800df06 <_svfprintf_r+0x13be>
 800dbea:	af2f      	add	r7, sp, #188	; 0xbc
 800dbec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbee:	9b08      	ldr	r3, [sp, #32]
 800dbf0:	4694      	mov	ip, r2
 800dbf2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dbf4:	4463      	add	r3, ip
 800dbf6:	1b5b      	subs	r3, r3, r5
 800dbf8:	1b14      	subs	r4, r2, r4
 800dbfa:	429c      	cmp	r4, r3
 800dbfc:	dd00      	ble.n	800dc00 <_svfprintf_r+0x10b8>
 800dbfe:	001c      	movs	r4, r3
 800dc00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc02:	2c00      	cmp	r4, #0
 800dc04:	dd12      	ble.n	800dc2c <_svfprintf_r+0x10e4>
 800dc06:	18e3      	adds	r3, r4, r3
 800dc08:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc0c:	603d      	str	r5, [r7, #0]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	607c      	str	r4, [r7, #4]
 800dc12:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc14:	3708      	adds	r7, #8
 800dc16:	2b07      	cmp	r3, #7
 800dc18:	dd08      	ble.n	800dc2c <_svfprintf_r+0x10e4>
 800dc1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc1e:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc20:	f003 f8a8 	bl	8010d74 <__ssprint_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d000      	beq.n	800dc2a <_svfprintf_r+0x10e2>
 800dc28:	e16d      	b.n	800df06 <_svfprintf_r+0x13be>
 800dc2a:	af2f      	add	r7, sp, #188	; 0xbc
 800dc2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc30:	2510      	movs	r5, #16
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	43e2      	mvns	r2, r4
 800dc36:	17d2      	asrs	r2, r2, #31
 800dc38:	4014      	ands	r4, r2
 800dc3a:	1b1c      	subs	r4, r3, r4
 800dc3c:	2c00      	cmp	r4, #0
 800dc3e:	dc00      	bgt.n	800dc42 <_svfprintf_r+0x10fa>
 800dc40:	e6b0      	b.n	800d9a4 <_svfprintf_r+0xe5c>
 800dc42:	0039      	movs	r1, r7
 800dc44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc46:	4807      	ldr	r0, [pc, #28]	; (800dc64 <_svfprintf_r+0x111c>)
 800dc48:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	3108      	adds	r1, #8
 800dc4e:	6038      	str	r0, [r7, #0]
 800dc50:	2c10      	cmp	r4, #16
 800dc52:	dd00      	ble.n	800dc56 <_svfprintf_r+0x110e>
 800dc54:	e096      	b.n	800dd84 <_svfprintf_r+0x123c>
 800dc56:	1912      	adds	r2, r2, r4
 800dc58:	607c      	str	r4, [r7, #4]
 800dc5a:	922e      	str	r2, [sp, #184]	; 0xb8
 800dc5c:	e6dd      	b.n	800da1a <_svfprintf_r+0xed2>
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	080140ce 	.word	0x080140ce
 800dc64:	080140e0 	.word	0x080140e0
 800dc68:	2010      	movs	r0, #16
 800dc6a:	1812      	adds	r2, r2, r0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	922e      	str	r2, [sp, #184]	; 0xb8
 800dc70:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc72:	2b07      	cmp	r3, #7
 800dc74:	dd08      	ble.n	800dc88 <_svfprintf_r+0x1140>
 800dc76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc78:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc7a:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc7c:	f003 f87a 	bl	8010d74 <__ssprint_r>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d000      	beq.n	800dc86 <_svfprintf_r+0x113e>
 800dc84:	e13f      	b.n	800df06 <_svfprintf_r+0x13be>
 800dc86:	a92f      	add	r1, sp, #188	; 0xbc
 800dc88:	000f      	movs	r7, r1
 800dc8a:	3c10      	subs	r4, #16
 800dc8c:	e768      	b.n	800db60 <_svfprintf_r+0x1018>
 800dc8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d05d      	beq.n	800dd50 <_svfprintf_r+0x1208>
 800dc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc96:	3b01      	subs	r3, #1
 800dc98:	9310      	str	r3, [sp, #64]	; 0x40
 800dc9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dc9e:	603b      	str	r3, [r7, #0]
 800dca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dca2:	607b      	str	r3, [r7, #4]
 800dca4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dca6:	3708      	adds	r7, #8
 800dca8:	189b      	adds	r3, r3, r2
 800dcaa:	932e      	str	r3, [sp, #184]	; 0xb8
 800dcac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcae:	3301      	adds	r3, #1
 800dcb0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcb2:	2b07      	cmp	r3, #7
 800dcb4:	dd08      	ble.n	800dcc8 <_svfprintf_r+0x1180>
 800dcb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcba:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcbc:	f003 f85a 	bl	8010d74 <__ssprint_r>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d000      	beq.n	800dcc6 <_svfprintf_r+0x117e>
 800dcc4:	e11f      	b.n	800df06 <_svfprintf_r+0x13be>
 800dcc6:	af2f      	add	r7, sp, #188	; 0xbc
 800dcc8:	9b08      	ldr	r3, [sp, #32]
 800dcca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dccc:	189c      	adds	r4, r3, r2
 800dcce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcd0:	1b64      	subs	r4, r4, r5
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	dd00      	ble.n	800dcda <_svfprintf_r+0x1192>
 800dcd8:	001c      	movs	r4, r3
 800dcda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dcdc:	2c00      	cmp	r4, #0
 800dcde:	dd12      	ble.n	800dd06 <_svfprintf_r+0x11be>
 800dce0:	18e3      	adds	r3, r4, r3
 800dce2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dce4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dce6:	603d      	str	r5, [r7, #0]
 800dce8:	3301      	adds	r3, #1
 800dcea:	607c      	str	r4, [r7, #4]
 800dcec:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcee:	3708      	adds	r7, #8
 800dcf0:	2b07      	cmp	r3, #7
 800dcf2:	dd08      	ble.n	800dd06 <_svfprintf_r+0x11be>
 800dcf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcf8:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcfa:	f003 f83b 	bl	8010d74 <__ssprint_r>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d000      	beq.n	800dd04 <_svfprintf_r+0x11bc>
 800dd02:	e100      	b.n	800df06 <_svfprintf_r+0x13be>
 800dd04:	af2f      	add	r7, sp, #188	; 0xbc
 800dd06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd08:	781a      	ldrb	r2, [r3, #0]
 800dd0a:	43e3      	mvns	r3, r4
 800dd0c:	17db      	asrs	r3, r3, #31
 800dd0e:	401c      	ands	r4, r3
 800dd10:	1b14      	subs	r4, r2, r4
 800dd12:	2c00      	cmp	r4, #0
 800dd14:	dd18      	ble.n	800dd48 <_svfprintf_r+0x1200>
 800dd16:	0039      	movs	r1, r7
 800dd18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd1a:	48aa      	ldr	r0, [pc, #680]	; (800dfc4 <_svfprintf_r+0x147c>)
 800dd1c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd1e:	3301      	adds	r3, #1
 800dd20:	3108      	adds	r1, #8
 800dd22:	6038      	str	r0, [r7, #0]
 800dd24:	2c10      	cmp	r4, #16
 800dd26:	dc1a      	bgt.n	800dd5e <_svfprintf_r+0x1216>
 800dd28:	1912      	adds	r2, r2, r4
 800dd2a:	607c      	str	r4, [r7, #4]
 800dd2c:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd2e:	000f      	movs	r7, r1
 800dd30:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd32:	2b07      	cmp	r3, #7
 800dd34:	dd08      	ble.n	800dd48 <_svfprintf_r+0x1200>
 800dd36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd3a:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd3c:	f003 f81a 	bl	8010d74 <__ssprint_r>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d000      	beq.n	800dd46 <_svfprintf_r+0x11fe>
 800dd44:	e0df      	b.n	800df06 <_svfprintf_r+0x13be>
 800dd46:	af2f      	add	r7, sp, #188	; 0xbc
 800dd48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	18ed      	adds	r5, r5, r3
 800dd4e:	e724      	b.n	800db9a <_svfprintf_r+0x1052>
 800dd50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd52:	3b01      	subs	r3, #1
 800dd54:	9312      	str	r3, [sp, #72]	; 0x48
 800dd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	9311      	str	r3, [sp, #68]	; 0x44
 800dd5c:	e79d      	b.n	800dc9a <_svfprintf_r+0x1152>
 800dd5e:	2010      	movs	r0, #16
 800dd60:	1812      	adds	r2, r2, r0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd66:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd68:	2b07      	cmp	r3, #7
 800dd6a:	dd08      	ble.n	800dd7e <_svfprintf_r+0x1236>
 800dd6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd70:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd72:	f002 ffff 	bl	8010d74 <__ssprint_r>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	d000      	beq.n	800dd7c <_svfprintf_r+0x1234>
 800dd7a:	e0c4      	b.n	800df06 <_svfprintf_r+0x13be>
 800dd7c:	a92f      	add	r1, sp, #188	; 0xbc
 800dd7e:	000f      	movs	r7, r1
 800dd80:	3c10      	subs	r4, #16
 800dd82:	e7c8      	b.n	800dd16 <_svfprintf_r+0x11ce>
 800dd84:	3210      	adds	r2, #16
 800dd86:	607d      	str	r5, [r7, #4]
 800dd88:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd8c:	2b07      	cmp	r3, #7
 800dd8e:	dd08      	ble.n	800dda2 <_svfprintf_r+0x125a>
 800dd90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd94:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd96:	f002 ffed 	bl	8010d74 <__ssprint_r>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d000      	beq.n	800dda0 <_svfprintf_r+0x1258>
 800dd9e:	e0b2      	b.n	800df06 <_svfprintf_r+0x13be>
 800dda0:	a92f      	add	r1, sp, #188	; 0xbc
 800dda2:	000f      	movs	r7, r1
 800dda4:	3c10      	subs	r4, #16
 800dda6:	e74c      	b.n	800dc42 <_svfprintf_r+0x10fa>
 800dda8:	003c      	movs	r4, r7
 800ddaa:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ddac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddb0:	3101      	adds	r1, #1
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	3408      	adds	r4, #8
 800ddb6:	2a01      	cmp	r2, #1
 800ddb8:	dc03      	bgt.n	800ddc2 <_svfprintf_r+0x127a>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	4216      	tst	r6, r2
 800ddbe:	d100      	bne.n	800ddc2 <_svfprintf_r+0x127a>
 800ddc0:	e07f      	b.n	800dec2 <_svfprintf_r+0x137a>
 800ddc2:	9a08      	ldr	r2, [sp, #32]
 800ddc4:	912e      	str	r1, [sp, #184]	; 0xb8
 800ddc6:	603a      	str	r2, [r7, #0]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	2b07      	cmp	r3, #7
 800ddd0:	dd08      	ble.n	800dde4 <_svfprintf_r+0x129c>
 800ddd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddd6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddd8:	f002 ffcc 	bl	8010d74 <__ssprint_r>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d000      	beq.n	800dde2 <_svfprintf_r+0x129a>
 800dde0:	e091      	b.n	800df06 <_svfprintf_r+0x13be>
 800dde2:	ac2f      	add	r4, sp, #188	; 0xbc
 800dde4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dde6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ddec:	6063      	str	r3, [r4, #4]
 800ddee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ddf0:	3408      	adds	r4, #8
 800ddf2:	189b      	adds	r3, r3, r2
 800ddf4:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddf6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	932d      	str	r3, [sp, #180]	; 0xb4
 800ddfc:	2b07      	cmp	r3, #7
 800ddfe:	dd07      	ble.n	800de10 <_svfprintf_r+0x12c8>
 800de00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de04:	aa2c      	add	r2, sp, #176	; 0xb0
 800de06:	f002 ffb5 	bl	8010d74 <__ssprint_r>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d17b      	bne.n	800df06 <_svfprintf_r+0x13be>
 800de0e:	ac2f      	add	r4, sp, #188	; 0xbc
 800de10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de12:	2200      	movs	r2, #0
 800de14:	9814      	ldr	r0, [sp, #80]	; 0x50
 800de16:	9915      	ldr	r1, [sp, #84]	; 0x54
 800de18:	9309      	str	r3, [sp, #36]	; 0x24
 800de1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de1c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800de1e:	1e5d      	subs	r5, r3, #1
 800de20:	2300      	movs	r3, #0
 800de22:	f7f2 fb11 	bl	8000448 <__aeabi_dcmpeq>
 800de26:	2800      	cmp	r0, #0
 800de28:	d126      	bne.n	800de78 <_svfprintf_r+0x1330>
 800de2a:	9b08      	ldr	r3, [sp, #32]
 800de2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de2e:	3301      	adds	r3, #1
 800de30:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	1e7b      	subs	r3, r7, #1
 800de36:	3201      	adds	r2, #1
 800de38:	185b      	adds	r3, r3, r1
 800de3a:	6065      	str	r5, [r4, #4]
 800de3c:	932e      	str	r3, [sp, #184]	; 0xb8
 800de3e:	922d      	str	r2, [sp, #180]	; 0xb4
 800de40:	3408      	adds	r4, #8
 800de42:	2a07      	cmp	r2, #7
 800de44:	dd07      	ble.n	800de56 <_svfprintf_r+0x130e>
 800de46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800de4c:	f002 ff92 	bl	8010d74 <__ssprint_r>
 800de50:	2800      	cmp	r0, #0
 800de52:	d158      	bne.n	800df06 <_svfprintf_r+0x13be>
 800de54:	ac2f      	add	r4, sp, #188	; 0xbc
 800de56:	ab28      	add	r3, sp, #160	; 0xa0
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de5e:	6063      	str	r3, [r4, #4]
 800de60:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de62:	189b      	adds	r3, r3, r2
 800de64:	932e      	str	r3, [sp, #184]	; 0xb8
 800de66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de68:	3301      	adds	r3, #1
 800de6a:	932d      	str	r3, [sp, #180]	; 0xb4
 800de6c:	2b07      	cmp	r3, #7
 800de6e:	dd00      	ble.n	800de72 <_svfprintf_r+0x132a>
 800de70:	e638      	b.n	800dae4 <_svfprintf_r+0xf9c>
 800de72:	3408      	adds	r4, #8
 800de74:	0027      	movs	r7, r4
 800de76:	e595      	b.n	800d9a4 <_svfprintf_r+0xe5c>
 800de78:	2710      	movs	r7, #16
 800de7a:	2d00      	cmp	r5, #0
 800de7c:	ddeb      	ble.n	800de56 <_svfprintf_r+0x130e>
 800de7e:	0021      	movs	r1, r4
 800de80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de82:	4850      	ldr	r0, [pc, #320]	; (800dfc4 <_svfprintf_r+0x147c>)
 800de84:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de86:	3301      	adds	r3, #1
 800de88:	3108      	adds	r1, #8
 800de8a:	6020      	str	r0, [r4, #0]
 800de8c:	2d10      	cmp	r5, #16
 800de8e:	dc07      	bgt.n	800dea0 <_svfprintf_r+0x1358>
 800de90:	6065      	str	r5, [r4, #4]
 800de92:	000c      	movs	r4, r1
 800de94:	18ad      	adds	r5, r5, r2
 800de96:	952e      	str	r5, [sp, #184]	; 0xb8
 800de98:	932d      	str	r3, [sp, #180]	; 0xb4
 800de9a:	2b07      	cmp	r3, #7
 800de9c:	dddb      	ble.n	800de56 <_svfprintf_r+0x130e>
 800de9e:	e7d2      	b.n	800de46 <_svfprintf_r+0x12fe>
 800dea0:	3210      	adds	r2, #16
 800dea2:	6067      	str	r7, [r4, #4]
 800dea4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dea6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	dd07      	ble.n	800debc <_svfprintf_r+0x1374>
 800deac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deb0:	aa2c      	add	r2, sp, #176	; 0xb0
 800deb2:	f002 ff5f 	bl	8010d74 <__ssprint_r>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d125      	bne.n	800df06 <_svfprintf_r+0x13be>
 800deba:	a92f      	add	r1, sp, #188	; 0xbc
 800debc:	000c      	movs	r4, r1
 800debe:	3d10      	subs	r5, #16
 800dec0:	e7dd      	b.n	800de7e <_svfprintf_r+0x1336>
 800dec2:	9808      	ldr	r0, [sp, #32]
 800dec4:	912e      	str	r1, [sp, #184]	; 0xb8
 800dec6:	c705      	stmia	r7!, {r0, r2}
 800dec8:	932d      	str	r3, [sp, #180]	; 0xb4
 800deca:	e7e6      	b.n	800de9a <_svfprintf_r+0x1352>
 800decc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dece:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ded0:	2510      	movs	r5, #16
 800ded2:	1a9c      	subs	r4, r3, r2
 800ded4:	2c00      	cmp	r4, #0
 800ded6:	dc00      	bgt.n	800deda <_svfprintf_r+0x1392>
 800ded8:	e567      	b.n	800d9aa <_svfprintf_r+0xe62>
 800deda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dedc:	493a      	ldr	r1, [pc, #232]	; (800dfc8 <_svfprintf_r+0x1480>)
 800dede:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dee0:	3301      	adds	r3, #1
 800dee2:	6039      	str	r1, [r7, #0]
 800dee4:	2c10      	cmp	r4, #16
 800dee6:	dc19      	bgt.n	800df1c <_svfprintf_r+0x13d4>
 800dee8:	607c      	str	r4, [r7, #4]
 800deea:	18a4      	adds	r4, r4, r2
 800deec:	942e      	str	r4, [sp, #184]	; 0xb8
 800deee:	932d      	str	r3, [sp, #180]	; 0xb4
 800def0:	2b07      	cmp	r3, #7
 800def2:	dc00      	bgt.n	800def6 <_svfprintf_r+0x13ae>
 800def4:	e559      	b.n	800d9aa <_svfprintf_r+0xe62>
 800def6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800def8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800defa:	aa2c      	add	r2, sp, #176	; 0xb0
 800defc:	f002 ff3a 	bl	8010d74 <__ssprint_r>
 800df00:	2800      	cmp	r0, #0
 800df02:	d100      	bne.n	800df06 <_svfprintf_r+0x13be>
 800df04:	e551      	b.n	800d9aa <_svfprintf_r+0xe62>
 800df06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d101      	bne.n	800df10 <_svfprintf_r+0x13c8>
 800df0c:	f7ff f845 	bl	800cf9a <_svfprintf_r+0x452>
 800df10:	0019      	movs	r1, r3
 800df12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df14:	f7fd fd80 	bl	800ba18 <_free_r>
 800df18:	f7ff f83f 	bl	800cf9a <_svfprintf_r+0x452>
 800df1c:	3210      	adds	r2, #16
 800df1e:	607d      	str	r5, [r7, #4]
 800df20:	922e      	str	r2, [sp, #184]	; 0xb8
 800df22:	932d      	str	r3, [sp, #180]	; 0xb4
 800df24:	3708      	adds	r7, #8
 800df26:	2b07      	cmp	r3, #7
 800df28:	dd07      	ble.n	800df3a <_svfprintf_r+0x13f2>
 800df2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df30:	f002 ff20 	bl	8010d74 <__ssprint_r>
 800df34:	2800      	cmp	r0, #0
 800df36:	d1e6      	bne.n	800df06 <_svfprintf_r+0x13be>
 800df38:	af2f      	add	r7, sp, #188	; 0xbc
 800df3a:	3c10      	subs	r4, #16
 800df3c:	e7cd      	b.n	800deda <_svfprintf_r+0x1392>
 800df3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df42:	f7fd fd69 	bl	800ba18 <_free_r>
 800df46:	e549      	b.n	800d9dc <_svfprintf_r+0xe94>
 800df48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <_svfprintf_r+0x140a>
 800df4e:	f7ff f824 	bl	800cf9a <_svfprintf_r+0x452>
 800df52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df56:	aa2c      	add	r2, sp, #176	; 0xb0
 800df58:	f002 ff0c 	bl	8010d74 <__ssprint_r>
 800df5c:	f7ff f81d 	bl	800cf9a <_svfprintf_r+0x452>
 800df60:	0034      	movs	r4, r6
 800df62:	2a00      	cmp	r2, #0
 800df64:	d101      	bne.n	800df6a <_svfprintf_r+0x1422>
 800df66:	f7fe ff8c 	bl	800ce82 <_svfprintf_r+0x33a>
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d101      	bne.n	800df72 <_svfprintf_r+0x142a>
 800df6e:	f7ff fc01 	bl	800d774 <_svfprintf_r+0xc2c>
 800df72:	2b02      	cmp	r3, #2
 800df74:	d100      	bne.n	800df78 <_svfprintf_r+0x1430>
 800df76:	e459      	b.n	800d82c <_svfprintf_r+0xce4>
 800df78:	2507      	movs	r5, #7
 800df7a:	ab58      	add	r3, sp, #352	; 0x160
 800df7c:	9308      	str	r3, [sp, #32]
 800df7e:	9a08      	ldr	r2, [sp, #32]
 800df80:	0013      	movs	r3, r2
 800df82:	3b01      	subs	r3, #1
 800df84:	9308      	str	r3, [sp, #32]
 800df86:	9b06      	ldr	r3, [sp, #24]
 800df88:	9908      	ldr	r1, [sp, #32]
 800df8a:	402b      	ands	r3, r5
 800df8c:	3330      	adds	r3, #48	; 0x30
 800df8e:	700b      	strb	r3, [r1, #0]
 800df90:	9907      	ldr	r1, [sp, #28]
 800df92:	074e      	lsls	r6, r1, #29
 800df94:	9906      	ldr	r1, [sp, #24]
 800df96:	08c8      	lsrs	r0, r1, #3
 800df98:	9907      	ldr	r1, [sp, #28]
 800df9a:	4306      	orrs	r6, r0
 800df9c:	08c9      	lsrs	r1, r1, #3
 800df9e:	9107      	str	r1, [sp, #28]
 800dfa0:	0031      	movs	r1, r6
 800dfa2:	9807      	ldr	r0, [sp, #28]
 800dfa4:	9606      	str	r6, [sp, #24]
 800dfa6:	4301      	orrs	r1, r0
 800dfa8:	d1e9      	bne.n	800df7e <_svfprintf_r+0x1436>
 800dfaa:	07e1      	lsls	r1, r4, #31
 800dfac:	d400      	bmi.n	800dfb0 <_svfprintf_r+0x1468>
 800dfae:	e42a      	b.n	800d806 <_svfprintf_r+0xcbe>
 800dfb0:	2b30      	cmp	r3, #48	; 0x30
 800dfb2:	d100      	bne.n	800dfb6 <_svfprintf_r+0x146e>
 800dfb4:	e427      	b.n	800d806 <_svfprintf_r+0xcbe>
 800dfb6:	2130      	movs	r1, #48	; 0x30
 800dfb8:	9b08      	ldr	r3, [sp, #32]
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	7019      	strb	r1, [r3, #0]
 800dfbe:	1e93      	subs	r3, r2, #2
 800dfc0:	9308      	str	r3, [sp, #32]
 800dfc2:	e420      	b.n	800d806 <_svfprintf_r+0xcbe>
 800dfc4:	080140e0 	.word	0x080140e0
 800dfc8:	080140d0 	.word	0x080140d0

0800dfcc <__ssvfscanf_r>:
 800dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfce:	4ca7      	ldr	r4, [pc, #668]	; (800e26c <__ssvfscanf_r+0x2a0>)
 800dfd0:	44a5      	add	sp, r4
 800dfd2:	af02      	add	r7, sp, #8
 800dfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd6:	000b      	movs	r3, r1
 800dfd8:	6378      	str	r0, [r7, #52]	; 0x34
 800dfda:	6479      	str	r1, [r7, #68]	; 0x44
 800dfdc:	61ba      	str	r2, [r7, #24]
 800dfde:	220c      	movs	r2, #12
 800dfe0:	5e9a      	ldrsh	r2, [r3, r2]
 800dfe2:	2380      	movs	r3, #128	; 0x80
 800dfe4:	019b      	lsls	r3, r3, #6
 800dfe6:	421a      	tst	r2, r3
 800dfe8:	d105      	bne.n	800dff6 <__ssvfscanf_r+0x2a>
 800dfea:	4313      	orrs	r3, r2
 800dfec:	818b      	strh	r3, [r1, #12]
 800dfee:	4aa0      	ldr	r2, [pc, #640]	; (800e270 <__ssvfscanf_r+0x2a4>)
 800dff0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800dff2:	4013      	ands	r3, r2
 800dff4:	664b      	str	r3, [r1, #100]	; 0x64
 800dff6:	2300      	movs	r3, #0
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	643b      	str	r3, [r7, #64]	; 0x40
 800dffc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
 800e000:	63bb      	str	r3, [r7, #56]	; 0x38
 800e002:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	69ba      	ldr	r2, [r7, #24]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	3201      	adds	r2, #1
 800e00c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e00e:	61ba      	str	r2, [r7, #24]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d100      	bne.n	800e016 <__ssvfscanf_r+0x4a>
 800e014:	e0d7      	b.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e016:	2608      	movs	r6, #8
 800e018:	2108      	movs	r1, #8
 800e01a:	4a96      	ldr	r2, [pc, #600]	; (800e274 <__ssvfscanf_r+0x2a8>)
 800e01c:	5cd2      	ldrb	r2, [r2, r3]
 800e01e:	4016      	ands	r6, r2
 800e020:	420a      	tst	r2, r1
 800e022:	d01d      	beq.n	800e060 <__ssvfscanf_r+0x94>
 800e024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dd12      	ble.n	800e052 <__ssvfscanf_r+0x86>
 800e02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02e:	4991      	ldr	r1, [pc, #580]	; (800e274 <__ssvfscanf_r+0x2a8>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	781a      	ldrb	r2, [r3, #0]
 800e034:	5c8a      	ldrb	r2, [r1, r2]
 800e036:	2108      	movs	r1, #8
 800e038:	420a      	tst	r2, r1
 800e03a:	d0e3      	beq.n	800e004 <__ssvfscanf_r+0x38>
 800e03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e03e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e040:	3201      	adds	r2, #1
 800e042:	63ba      	str	r2, [r7, #56]	; 0x38
 800e044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e046:	3301      	adds	r3, #1
 800e048:	6852      	ldr	r2, [r2, #4]
 800e04a:	600b      	str	r3, [r1, #0]
 800e04c:	3a01      	subs	r2, #1
 800e04e:	604a      	str	r2, [r1, #4]
 800e050:	e7e8      	b.n	800e024 <__ssvfscanf_r+0x58>
 800e052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e056:	f002 ff4d 	bl	8010ef4 <__ssrefill_r>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	d0e6      	beq.n	800e02c <__ssvfscanf_r+0x60>
 800e05e:	e7d1      	b.n	800e004 <__ssvfscanf_r+0x38>
 800e060:	2b25      	cmp	r3, #37	; 0x25
 800e062:	d165      	bne.n	800e130 <__ssvfscanf_r+0x164>
 800e064:	250a      	movs	r5, #10
 800e066:	2480      	movs	r4, #128	; 0x80
 800e068:	69ba      	ldr	r2, [r7, #24]
 800e06a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e06c:	3b16      	subs	r3, #22
 800e06e:	69b9      	ldr	r1, [r7, #24]
 800e070:	3101      	adds	r1, #1
 800e072:	61b9      	str	r1, [r7, #24]
 800e074:	7811      	ldrb	r1, [r2, #0]
 800e076:	0008      	movs	r0, r1
 800e078:	3825      	subs	r0, #37	; 0x25
 800e07a:	2855      	cmp	r0, #85	; 0x55
 800e07c:	d900      	bls.n	800e080 <__ssvfscanf_r+0xb4>
 800e07e:	e170      	b.n	800e362 <__ssvfscanf_r+0x396>
 800e080:	f7f2 f852 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e084:	016f0056 	.word	0x016f0056
 800e088:	016f016f 	.word	0x016f016f
 800e08c:	0081016f 	.word	0x0081016f
 800e090:	016f016f 	.word	0x016f016f
 800e094:	016f016f 	.word	0x016f016f
 800e098:	00b8016f 	.word	0x00b8016f
 800e09c:	00b800b8 	.word	0x00b800b8
 800e0a0:	00b800b8 	.word	0x00b800b8
 800e0a4:	00b800b8 	.word	0x00b800b8
 800e0a8:	00b800b8 	.word	0x00b800b8
 800e0ac:	016f00b8 	.word	0x016f00b8
 800e0b0:	016f016f 	.word	0x016f016f
 800e0b4:	016f016f 	.word	0x016f016f
 800e0b8:	016f016f 	.word	0x016f016f
 800e0bc:	016f00d8 	.word	0x016f00d8
 800e0c0:	00c1010a 	.word	0x00c1010a
 800e0c4:	00d800d8 	.word	0x00d800d8
 800e0c8:	016f00d8 	.word	0x016f00d8
 800e0cc:	016f016f 	.word	0x016f016f
 800e0d0:	009f016f 	.word	0x009f016f
 800e0d4:	016f016f 	.word	0x016f016f
 800e0d8:	016f00c9 	.word	0x016f00c9
 800e0dc:	016f016f 	.word	0x016f016f
 800e0e0:	016f00f0 	.word	0x016f00f0
 800e0e4:	016f016f 	.word	0x016f016f
 800e0e8:	00d1016f 	.word	0x00d1016f
 800e0ec:	016f016f 	.word	0x016f016f
 800e0f0:	016f00fe 	.word	0x016f00fe
 800e0f4:	016f016f 	.word	0x016f016f
 800e0f8:	016f016f 	.word	0x016f016f
 800e0fc:	016f00d8 	.word	0x016f00d8
 800e100:	00c3010c 	.word	0x00c3010c
 800e104:	00d800d8 	.word	0x00d800d8
 800e108:	009400d8 	.word	0x009400d8
 800e10c:	009f012f 	.word	0x009f012f
 800e110:	0088016f 	.word	0x0088016f
 800e114:	011200a9 	.word	0x011200a9
 800e118:	011000cb 	.word	0x011000cb
 800e11c:	016f016f 	.word	0x016f016f
 800e120:	00a600f2 	.word	0x00a600f2
 800e124:	016f00cf 	.word	0x016f00cf
 800e128:	00d1016f 	.word	0x00d1016f
 800e12c:	00a6016f 	.word	0x00a6016f
 800e130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	dd12      	ble.n	800e15e <__ssvfscanf_r+0x192>
 800e138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13a:	69ba      	ldr	r2, [r7, #24]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3a01      	subs	r2, #1
 800e140:	7819      	ldrb	r1, [r3, #0]
 800e142:	7812      	ldrb	r2, [r2, #0]
 800e144:	4291      	cmp	r1, r2
 800e146:	d13e      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e14a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e14c:	6852      	ldr	r2, [r2, #4]
 800e14e:	3301      	adds	r3, #1
 800e150:	600b      	str	r3, [r1, #0]
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	3a01      	subs	r2, #1
 800e156:	604a      	str	r2, [r1, #4]
 800e158:	3301      	adds	r3, #1
 800e15a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e15c:	e752      	b.n	800e004 <__ssvfscanf_r+0x38>
 800e15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e162:	f002 fec7 	bl	8010ef4 <__ssrefill_r>
 800e166:	2800      	cmp	r0, #0
 800e168:	d0e6      	beq.n	800e138 <__ssvfscanf_r+0x16c>
 800e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d003      	beq.n	800e178 <__ssvfscanf_r+0x1ac>
 800e170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e172:	899b      	ldrh	r3, [r3, #12]
 800e174:	065b      	lsls	r3, r3, #25
 800e176:	d526      	bpl.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d000      	beq.n	800e180 <__ssvfscanf_r+0x1b4>
 800e17e:	e0f6      	b.n	800e36e <__ssvfscanf_r+0x3a2>
 800e180:	3b01      	subs	r3, #1
 800e182:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e184:	e104      	b.n	800e390 <__ssvfscanf_r+0x3c4>
 800e186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e188:	4332      	orrs	r2, r6
 800e18a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e18c:	d11b      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e18e:	2610      	movs	r6, #16
 800e190:	69ba      	ldr	r2, [r7, #24]
 800e192:	e76c      	b.n	800e06e <__ssvfscanf_r+0xa2>
 800e194:	421e      	tst	r6, r3
 800e196:	d116      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e198:	7851      	ldrb	r1, [r2, #1]
 800e19a:	296c      	cmp	r1, #108	; 0x6c
 800e19c:	d103      	bne.n	800e1a6 <__ssvfscanf_r+0x1da>
 800e19e:	3202      	adds	r2, #2
 800e1a0:	61ba      	str	r2, [r7, #24]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	e000      	b.n	800e1a8 <__ssvfscanf_r+0x1dc>
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	4316      	orrs	r6, r2
 800e1aa:	e7f1      	b.n	800e190 <__ssvfscanf_r+0x1c4>
 800e1ac:	421e      	tst	r6, r3
 800e1ae:	d10a      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e1b0:	7851      	ldrb	r1, [r2, #1]
 800e1b2:	2968      	cmp	r1, #104	; 0x68
 800e1b4:	d103      	bne.n	800e1be <__ssvfscanf_r+0x1f2>
 800e1b6:	3202      	adds	r2, #2
 800e1b8:	61ba      	str	r2, [r7, #24]
 800e1ba:	2208      	movs	r2, #8
 800e1bc:	e7f4      	b.n	800e1a8 <__ssvfscanf_r+0x1dc>
 800e1be:	2204      	movs	r2, #4
 800e1c0:	e7f2      	b.n	800e1a8 <__ssvfscanf_r+0x1dc>
 800e1c2:	421e      	tst	r6, r3
 800e1c4:	d0ed      	beq.n	800e1a2 <__ssvfscanf_r+0x1d6>
 800e1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d000      	beq.n	800e1ce <__ssvfscanf_r+0x202>
 800e1cc:	e0da      	b.n	800e384 <__ssvfscanf_r+0x3b8>
 800e1ce:	e0df      	b.n	800e390 <__ssvfscanf_r+0x3c4>
 800e1d0:	421e      	tst	r6, r3
 800e1d2:	d0dd      	beq.n	800e190 <__ssvfscanf_r+0x1c4>
 800e1d4:	e7f7      	b.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e1d6:	228f      	movs	r2, #143	; 0x8f
 800e1d8:	218f      	movs	r1, #143	; 0x8f
 800e1da:	4032      	ands	r2, r6
 800e1dc:	420e      	tst	r6, r1
 800e1de:	d1f2      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e1e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1e2:	2900      	cmp	r1, #0
 800e1e4:	d104      	bne.n	800e1f0 <__ssvfscanf_r+0x224>
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	a902      	add	r1, sp, #8
 800e1ea:	6439      	str	r1, [r7, #64]	; 0x40
 800e1ec:	600a      	str	r2, [r1, #0]
 800e1ee:	604a      	str	r2, [r1, #4]
 800e1f0:	4326      	orrs	r6, r4
 800e1f2:	e7cd      	b.n	800e190 <__ssvfscanf_r+0x1c4>
 800e1f4:	228f      	movs	r2, #143	; 0x8f
 800e1f6:	4216      	tst	r6, r2
 800e1f8:	d1e5      	bne.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e1fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1fc:	436a      	muls	r2, r5
 800e1fe:	3a30      	subs	r2, #48	; 0x30
 800e200:	188a      	adds	r2, r1, r2
 800e202:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e204:	e7c4      	b.n	800e190 <__ssvfscanf_r+0x1c4>
 800e206:	2301      	movs	r3, #1
 800e208:	431e      	orrs	r6, r3
 800e20a:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <__ssvfscanf_r+0x2ac>)
 800e20c:	617b      	str	r3, [r7, #20]
 800e20e:	230a      	movs	r3, #10
 800e210:	2403      	movs	r4, #3
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
 800e214:	e00f      	b.n	800e236 <__ssvfscanf_r+0x26a>
 800e216:	2301      	movs	r3, #1
 800e218:	431e      	orrs	r6, r3
 800e21a:	4b18      	ldr	r3, [pc, #96]	; (800e27c <__ssvfscanf_r+0x2b0>)
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	2308      	movs	r3, #8
 800e220:	e7f6      	b.n	800e210 <__ssvfscanf_r+0x244>
 800e222:	4b16      	ldr	r3, [pc, #88]	; (800e27c <__ssvfscanf_r+0x2b0>)
 800e224:	e7f2      	b.n	800e20c <__ssvfscanf_r+0x240>
 800e226:	2380      	movs	r3, #128	; 0x80
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	431e      	orrs	r6, r3
 800e22c:	4b13      	ldr	r3, [pc, #76]	; (800e27c <__ssvfscanf_r+0x2b0>)
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	2310      	movs	r3, #16
 800e232:	e7ed      	b.n	800e210 <__ssvfscanf_r+0x244>
 800e234:	2404      	movs	r4, #4
 800e236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	dd55      	ble.n	800e2ea <__ssvfscanf_r+0x31e>
 800e23e:	0673      	lsls	r3, r6, #25
 800e240:	d407      	bmi.n	800e252 <__ssvfscanf_r+0x286>
 800e242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e244:	490b      	ldr	r1, [pc, #44]	; (800e274 <__ssvfscanf_r+0x2a8>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	781a      	ldrb	r2, [r3, #0]
 800e24a:	5c8a      	ldrb	r2, [r1, r2]
 800e24c:	2108      	movs	r1, #8
 800e24e:	420a      	tst	r2, r1
 800e250:	d152      	bne.n	800e2f8 <__ssvfscanf_r+0x32c>
 800e252:	1e60      	subs	r0, r4, #1
 800e254:	2803      	cmp	r0, #3
 800e256:	d863      	bhi.n	800e320 <__ssvfscanf_r+0x354>
 800e258:	f7f1 ff66 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e25c:	03bd01da 	.word	0x03bd01da
 800e260:	068a0579 	.word	0x068a0579
 800e264:	2301      	movs	r3, #1
 800e266:	431e      	orrs	r6, r3
 800e268:	2402      	movs	r4, #2
 800e26a:	e7e4      	b.n	800e236 <__ssvfscanf_r+0x26a>
 800e26c:	fffffd34 	.word	0xfffffd34
 800e270:	ffffdfff 	.word	0xffffdfff
 800e274:	08013dc9 	.word	0x08013dc9
 800e278:	0800b41d 	.word	0x0800b41d
 800e27c:	08010a25 	.word	0x08010a25
 800e280:	2248      	movs	r2, #72	; 0x48
 800e282:	2318      	movs	r3, #24
 800e284:	189b      	adds	r3, r3, r2
 800e286:	19d8      	adds	r0, r3, r7
 800e288:	69b9      	ldr	r1, [r7, #24]
 800e28a:	f001 f9d7 	bl	800f63c <__sccl>
 800e28e:	2340      	movs	r3, #64	; 0x40
 800e290:	2401      	movs	r4, #1
 800e292:	61b8      	str	r0, [r7, #24]
 800e294:	431e      	orrs	r6, r3
 800e296:	e7ce      	b.n	800e236 <__ssvfscanf_r+0x26a>
 800e298:	2301      	movs	r3, #1
 800e29a:	431e      	orrs	r6, r3
 800e29c:	2340      	movs	r3, #64	; 0x40
 800e29e:	2400      	movs	r4, #0
 800e2a0:	431e      	orrs	r6, r3
 800e2a2:	e7c8      	b.n	800e236 <__ssvfscanf_r+0x26a>
 800e2a4:	2388      	movs	r3, #136	; 0x88
 800e2a6:	e7bf      	b.n	800e228 <__ssvfscanf_r+0x25c>
 800e2a8:	06f3      	lsls	r3, r6, #27
 800e2aa:	d500      	bpl.n	800e2ae <__ssvfscanf_r+0x2e2>
 800e2ac:	e6aa      	b.n	800e004 <__ssvfscanf_r+0x38>
 800e2ae:	2108      	movs	r1, #8
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b2:	cb04      	ldmia	r3!, {r2}
 800e2b4:	420e      	tst	r6, r1
 800e2b6:	d003      	beq.n	800e2c0 <__ssvfscanf_r+0x2f4>
 800e2b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2ba:	7011      	strb	r1, [r2, #0]
 800e2bc:	633b      	str	r3, [r7, #48]	; 0x30
 800e2be:	e6a1      	b.n	800e004 <__ssvfscanf_r+0x38>
 800e2c0:	0771      	lsls	r1, r6, #29
 800e2c2:	d502      	bpl.n	800e2ca <__ssvfscanf_r+0x2fe>
 800e2c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2c6:	8011      	strh	r1, [r2, #0]
 800e2c8:	e7f8      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e2ca:	07f1      	lsls	r1, r6, #31
 800e2cc:	d502      	bpl.n	800e2d4 <__ssvfscanf_r+0x308>
 800e2ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2d0:	6011      	str	r1, [r2, #0]
 800e2d2:	e7f3      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e2d4:	07b6      	lsls	r6, r6, #30
 800e2d6:	d5fa      	bpl.n	800e2ce <__ssvfscanf_r+0x302>
 800e2d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2da:	6011      	str	r1, [r2, #0]
 800e2dc:	17c9      	asrs	r1, r1, #31
 800e2de:	6051      	str	r1, [r2, #4]
 800e2e0:	e7ec      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e2e2:	4ba2      	ldr	r3, [pc, #648]	; (800e56c <__ssvfscanf_r+0x5a0>)
 800e2e4:	617b      	str	r3, [r7, #20]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	e792      	b.n	800e210 <__ssvfscanf_r+0x244>
 800e2ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2ee:	f002 fe01 	bl	8010ef4 <__ssrefill_r>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d0a3      	beq.n	800e23e <__ssvfscanf_r+0x272>
 800e2f6:	e738      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e2f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	63ba      	str	r2, [r7, #56]	; 0x38
 800e300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e302:	6852      	ldr	r2, [r2, #4]
 800e304:	3a01      	subs	r2, #1
 800e306:	604a      	str	r2, [r1, #4]
 800e308:	2a00      	cmp	r2, #0
 800e30a:	dd02      	ble.n	800e312 <__ssvfscanf_r+0x346>
 800e30c:	3301      	adds	r3, #1
 800e30e:	600b      	str	r3, [r1, #0]
 800e310:	e797      	b.n	800e242 <__ssvfscanf_r+0x276>
 800e312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e316:	f002 fded 	bl	8010ef4 <__ssrefill_r>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d091      	beq.n	800e242 <__ssvfscanf_r+0x276>
 800e31e:	e724      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e322:	2301      	movs	r3, #1
 800e324:	2a00      	cmp	r2, #0
 800e326:	d100      	bne.n	800e32a <__ssvfscanf_r+0x35e>
 800e328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e32a:	2210      	movs	r2, #16
 800e32c:	0034      	movs	r4, r6
 800e32e:	4032      	ands	r2, r6
 800e330:	623a      	str	r2, [r7, #32]
 800e332:	401c      	ands	r4, r3
 800e334:	421e      	tst	r6, r3
 800e336:	d100      	bne.n	800e33a <__ssvfscanf_r+0x36e>
 800e338:	e0f3      	b.n	800e522 <__ssvfscanf_r+0x556>
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d000      	beq.n	800e340 <__ssvfscanf_r+0x374>
 800e33e:	e0b6      	b.n	800e4ae <__ssvfscanf_r+0x4e2>
 800e340:	2080      	movs	r0, #128	; 0x80
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	cb10      	ldmia	r3!, {r4}
 800e346:	613b      	str	r3, [r7, #16]
 800e348:	4206      	tst	r6, r0
 800e34a:	d100      	bne.n	800e34e <__ssvfscanf_r+0x382>
 800e34c:	e0b7      	b.n	800e4be <__ssvfscanf_r+0x4f2>
 800e34e:	2c00      	cmp	r4, #0
 800e350:	d007      	beq.n	800e362 <__ssvfscanf_r+0x396>
 800e352:	f7fb ff6d 	bl	800a230 <malloc>
 800e356:	6338      	str	r0, [r7, #48]	; 0x30
 800e358:	2800      	cmp	r0, #0
 800e35a:	d11f      	bne.n	800e39c <__ssvfscanf_r+0x3d0>
 800e35c:	2301      	movs	r3, #1
 800e35e:	425b      	negs	r3, r3
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e364:	2b00      	cmp	r3, #0
 800e366:	d013      	beq.n	800e390 <__ssvfscanf_r+0x3c4>
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	3301      	adds	r3, #1
 800e36c:	d10a      	bne.n	800e384 <__ssvfscanf_r+0x3b8>
 800e36e:	2400      	movs	r4, #0
 800e370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e372:	681d      	ldr	r5, [r3, #0]
 800e374:	88db      	ldrh	r3, [r3, #6]
 800e376:	42a3      	cmp	r3, r4
 800e378:	dd01      	ble.n	800e37e <__ssvfscanf_r+0x3b2>
 800e37a:	f001 f82a 	bl	800f3d2 <__ssvfscanf_r+0x1406>
 800e37e:	2301      	movs	r3, #1
 800e380:	425b      	negs	r3, r3
 800e382:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e386:	6818      	ldr	r0, [r3, #0]
 800e388:	2800      	cmp	r0, #0
 800e38a:	d001      	beq.n	800e390 <__ssvfscanf_r+0x3c4>
 800e38c:	f7fb ff5a 	bl	800a244 <free>
 800e390:	46bd      	mov	sp, r7
 800e392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e394:	23b1      	movs	r3, #177	; 0xb1
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	449d      	add	sp, r3
 800e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	6023      	str	r3, [r4, #0]
 800e3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3a2:	88de      	ldrh	r6, [r3, #6]
 800e3a4:	889d      	ldrh	r5, [r3, #4]
 800e3a6:	42ae      	cmp	r6, r5
 800e3a8:	d30e      	bcc.n	800e3c8 <__ssvfscanf_r+0x3fc>
 800e3aa:	4b71      	ldr	r3, [pc, #452]	; (800e570 <__ssvfscanf_r+0x5a4>)
 800e3ac:	429d      	cmp	r5, r3
 800e3ae:	d8d5      	bhi.n	800e35c <__ssvfscanf_r+0x390>
 800e3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b2:	3508      	adds	r5, #8
 800e3b4:	b2ad      	uxth	r5, r5
 800e3b6:	6818      	ldr	r0, [r3, #0]
 800e3b8:	00a9      	lsls	r1, r5, #2
 800e3ba:	f002 f901 	bl	80105c0 <realloc>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d0cc      	beq.n	800e35c <__ssvfscanf_r+0x390>
 800e3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3c4:	6018      	str	r0, [r3, #0]
 800e3c6:	809d      	strh	r5, [r3, #4]
 800e3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ca:	1c72      	adds	r2, r6, #1
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	00b6      	lsls	r6, r6, #2
 800e3d0:	50f4      	str	r4, [r6, r3]
 800e3d2:	2320      	movs	r3, #32
 800e3d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3d6:	0026      	movs	r6, r4
 800e3d8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e3da:	80ca      	strh	r2, [r1, #6]
 800e3dc:	61fb      	str	r3, [r7, #28]
 800e3de:	2500      	movs	r5, #0
 800e3e0:	f7fd f9fe 	bl	800b7e0 <__locale_mb_cur_max>
 800e3e4:	42a8      	cmp	r0, r5
 800e3e6:	d100      	bne.n	800e3ea <__ssvfscanf_r+0x41e>
 800e3e8:	e6bf      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e3ea:	1c6a      	adds	r2, r5, #1
 800e3ec:	60fa      	str	r2, [r7, #12]
 800e3ee:	228c      	movs	r2, #140	; 0x8c
 800e3f0:	2048      	movs	r0, #72	; 0x48
 800e3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3f4:	0052      	lsls	r2, r2, #1
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	1812      	adds	r2, r2, r0
 800e3fa:	7819      	ldrb	r1, [r3, #0]
 800e3fc:	19d2      	adds	r2, r2, r7
 800e3fe:	5551      	strb	r1, [r2, r5]
 800e400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e404:	6852      	ldr	r2, [r2, #4]
 800e406:	3301      	adds	r3, #1
 800e408:	600b      	str	r3, [r1, #0]
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	3a01      	subs	r2, #1
 800e40e:	604a      	str	r2, [r1, #4]
 800e410:	2b03      	cmp	r3, #3
 800e412:	d102      	bne.n	800e41a <__ssvfscanf_r+0x44e>
 800e414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e416:	2b04      	cmp	r3, #4
 800e418:	d007      	beq.n	800e42a <__ssvfscanf_r+0x45e>
 800e41a:	2048      	movs	r0, #72	; 0x48
 800e41c:	2310      	movs	r3, #16
 800e41e:	181b      	adds	r3, r3, r0
 800e420:	2208      	movs	r2, #8
 800e422:	2100      	movs	r1, #0
 800e424:	19d8      	adds	r0, r3, r7
 800e426:	f7fd f997 	bl	800b758 <memset>
 800e42a:	2148      	movs	r1, #72	; 0x48
 800e42c:	2310      	movs	r3, #16
 800e42e:	228c      	movs	r2, #140	; 0x8c
 800e430:	185b      	adds	r3, r3, r1
 800e432:	0052      	lsls	r2, r2, #1
 800e434:	19db      	adds	r3, r3, r7
 800e436:	1852      	adds	r2, r2, r1
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	0021      	movs	r1, r4
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e440:	19d2      	adds	r2, r2, r7
 800e442:	f002 fc57 	bl	8010cf4 <_mbrtowc_r>
 800e446:	0003      	movs	r3, r0
 800e448:	62b8      	str	r0, [r7, #40]	; 0x28
 800e44a:	3301      	adds	r3, #1
 800e44c:	d100      	bne.n	800e450 <__ssvfscanf_r+0x484>
 800e44e:	e68c      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e450:	2800      	cmp	r0, #0
 800e452:	d139      	bne.n	800e4c8 <__ssvfscanf_r+0x4fc>
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d100      	bne.n	800e45c <__ssvfscanf_r+0x490>
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	4694      	mov	ip, r2
 800e462:	4463      	add	r3, ip
 800e464:	63bb      	str	r3, [r7, #56]	; 0x38
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	2b03      	cmp	r3, #3
 800e46a:	d102      	bne.n	800e472 <__ssvfscanf_r+0x4a6>
 800e46c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e46e:	2b04      	cmp	r3, #4
 800e470:	d002      	beq.n	800e478 <__ssvfscanf_r+0x4ac>
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	3b01      	subs	r3, #1
 800e476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d115      	bne.n	800e4aa <__ssvfscanf_r+0x4de>
 800e47e:	2e00      	cmp	r6, #0
 800e480:	d012      	beq.n	800e4a8 <__ssvfscanf_r+0x4dc>
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	69fa      	ldr	r2, [r7, #28]
 800e486:	1ae5      	subs	r5, r4, r3
 800e488:	10ab      	asrs	r3, r5, #2
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d30c      	bcc.n	800e4a8 <__ssvfscanf_r+0x4dc>
 800e48e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e490:	00d1      	lsls	r1, r2, #3
 800e492:	f002 f895 	bl	80105c0 <realloc>
 800e496:	6338      	str	r0, [r7, #48]	; 0x30
 800e498:	2800      	cmp	r0, #0
 800e49a:	d100      	bne.n	800e49e <__ssvfscanf_r+0x4d2>
 800e49c:	e75e      	b.n	800e35c <__ssvfscanf_r+0x390>
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	1944      	adds	r4, r0, r5
 800e4a2:	005b      	lsls	r3, r3, #1
 800e4a4:	6030      	str	r0, [r6, #0]
 800e4a6:	61fb      	str	r3, [r7, #28]
 800e4a8:	3404      	adds	r4, #4
 800e4aa:	2500      	movs	r5, #0
 800e4ac:	e010      	b.n	800e4d0 <__ssvfscanf_r+0x504>
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b0:	613b      	str	r3, [r7, #16]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	001e      	movs	r6, r3
 800e4b6:	001c      	movs	r4, r3
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	633b      	str	r3, [r7, #48]	; 0x30
 800e4bc:	e78f      	b.n	800e3de <__ssvfscanf_r+0x412>
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	001e      	movs	r6, r3
 800e4c2:	61fb      	str	r3, [r7, #28]
 800e4c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c6:	e78a      	b.n	800e3de <__ssvfscanf_r+0x412>
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	68fd      	ldr	r5, [r7, #12]
 800e4cc:	3302      	adds	r3, #2
 800e4ce:	d1c5      	bne.n	800e45c <__ssvfscanf_r+0x490>
 800e4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	dc12      	bgt.n	800e4fe <__ssvfscanf_r+0x532>
 800e4d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4dc:	f002 fd0a 	bl	8010ef4 <__ssrefill_r>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d00c      	beq.n	800e4fe <__ssvfscanf_r+0x532>
 800e4e4:	2d00      	cmp	r5, #0
 800e4e6:	d000      	beq.n	800e4ea <__ssvfscanf_r+0x51e>
 800e4e8:	e63f      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e4ea:	2e00      	cmp	r6, #0
 800e4ec:	d10c      	bne.n	800e508 <__ssvfscanf_r+0x53c>
 800e4ee:	6a3b      	ldr	r3, [r7, #32]
 800e4f0:	425a      	negs	r2, r3
 800e4f2:	4153      	adcs	r3, r2
 800e4f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f6:	18d3      	adds	r3, r2, r3
 800e4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	e6de      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e500:	2b00      	cmp	r3, #0
 800e502:	d000      	beq.n	800e506 <__ssvfscanf_r+0x53a>
 800e504:	e76c      	b.n	800e3e0 <__ssvfscanf_r+0x414>
 800e506:	e7f0      	b.n	800e4ea <__ssvfscanf_r+0x51e>
 800e508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50a:	69fa      	ldr	r2, [r7, #28]
 800e50c:	1ae1      	subs	r1, r4, r3
 800e50e:	108b      	asrs	r3, r1, #2
 800e510:	429a      	cmp	r2, r3
 800e512:	d9ec      	bls.n	800e4ee <__ssvfscanf_r+0x522>
 800e514:	6830      	ldr	r0, [r6, #0]
 800e516:	f002 f853 	bl	80105c0 <realloc>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0e7      	beq.n	800e4ee <__ssvfscanf_r+0x522>
 800e51e:	6030      	str	r0, [r6, #0]
 800e520:	e7e5      	b.n	800e4ee <__ssvfscanf_r+0x522>
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d025      	beq.n	800e574 <__ssvfscanf_r+0x5a8>
 800e528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e52a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e530:	6812      	ldr	r2, [r2, #0]
 800e532:	4299      	cmp	r1, r3
 800e534:	dd11      	ble.n	800e55a <__ssvfscanf_r+0x58e>
 800e536:	1ac9      	subs	r1, r1, r3
 800e538:	18d2      	adds	r2, r2, r3
 800e53a:	18e4      	adds	r4, r4, r3
 800e53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e53e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e540:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e542:	0019      	movs	r1, r3
 800e544:	601a      	str	r2, [r3, #0]
 800e546:	f002 fcd5 	bl	8010ef4 <__ssrefill_r>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d0ec      	beq.n	800e528 <__ssvfscanf_r+0x55c>
 800e54e:	2c00      	cmp	r4, #0
 800e550:	d100      	bne.n	800e554 <__ssvfscanf_r+0x588>
 800e552:	e60a      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	191b      	adds	r3, r3, r4
 800e558:	e5ff      	b.n	800e15a <__ssvfscanf_r+0x18e>
 800e55a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e55c:	1a5b      	subs	r3, r3, r1
 800e55e:	1864      	adds	r4, r4, r1
 800e560:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e562:	604b      	str	r3, [r1, #4]
 800e564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e566:	18d2      	adds	r2, r2, r3
 800e568:	600a      	str	r2, [r1, #0]
 800e56a:	e7f3      	b.n	800e554 <__ssvfscanf_r+0x588>
 800e56c:	0800b41d 	.word	0x0800b41d
 800e570:	0000fff6 	.word	0x0000fff6
 800e574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e576:	0034      	movs	r4, r6
 800e578:	cb20      	ldmia	r3!, {r5}
 800e57a:	633b      	str	r3, [r7, #48]	; 0x30
 800e57c:	2380      	movs	r3, #128	; 0x80
 800e57e:	401c      	ands	r4, r3
 800e580:	421e      	tst	r6, r3
 800e582:	d028      	beq.n	800e5d6 <__ssvfscanf_r+0x60a>
 800e584:	2d00      	cmp	r5, #0
 800e586:	d100      	bne.n	800e58a <__ssvfscanf_r+0x5be>
 800e588:	e61d      	b.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e58a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e58c:	f7fb fe50 	bl	800a230 <malloc>
 800e590:	6238      	str	r0, [r7, #32]
 800e592:	2800      	cmp	r0, #0
 800e594:	d100      	bne.n	800e598 <__ssvfscanf_r+0x5cc>
 800e596:	e5ef      	b.n	800e178 <__ssvfscanf_r+0x1ac>
 800e598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59a:	6028      	str	r0, [r5, #0]
 800e59c:	88de      	ldrh	r6, [r3, #6]
 800e59e:	889c      	ldrh	r4, [r3, #4]
 800e5a0:	6818      	ldr	r0, [r3, #0]
 800e5a2:	42a6      	cmp	r6, r4
 800e5a4:	d30e      	bcc.n	800e5c4 <__ssvfscanf_r+0x5f8>
 800e5a6:	4bbf      	ldr	r3, [pc, #764]	; (800e8a4 <__ssvfscanf_r+0x8d8>)
 800e5a8:	429c      	cmp	r4, r3
 800e5aa:	d900      	bls.n	800e5ae <__ssvfscanf_r+0x5e2>
 800e5ac:	e6df      	b.n	800e36e <__ssvfscanf_r+0x3a2>
 800e5ae:	3408      	adds	r4, #8
 800e5b0:	b2a4      	uxth	r4, r4
 800e5b2:	00a1      	lsls	r1, r4, #2
 800e5b4:	f002 f804 	bl	80105c0 <realloc>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d100      	bne.n	800e5be <__ssvfscanf_r+0x5f2>
 800e5bc:	e6d7      	b.n	800e36e <__ssvfscanf_r+0x3a2>
 800e5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c0:	6018      	str	r0, [r3, #0]
 800e5c2:	809c      	strh	r4, [r3, #4]
 800e5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c6:	1c72      	adds	r2, r6, #1
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5cc:	00b6      	lsls	r6, r6, #2
 800e5ce:	002c      	movs	r4, r5
 800e5d0:	50f5      	str	r5, [r6, r3]
 800e5d2:	6a3d      	ldr	r5, [r7, #32]
 800e5d4:	80ca      	strh	r2, [r1, #6]
 800e5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d8:	0029      	movs	r1, r5
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5e2:	f002 fca6 	bl	8010f32 <_sfread_r>
 800e5e6:	1e05      	subs	r5, r0, #0
 800e5e8:	d100      	bne.n	800e5ec <__ssvfscanf_r+0x620>
 800e5ea:	e5be      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e5ec:	2c00      	cmp	r4, #0
 800e5ee:	d009      	beq.n	800e604 <__ssvfscanf_r+0x638>
 800e5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f2:	4283      	cmp	r3, r0
 800e5f4:	d906      	bls.n	800e604 <__ssvfscanf_r+0x638>
 800e5f6:	0001      	movs	r1, r0
 800e5f8:	6820      	ldr	r0, [r4, #0]
 800e5fa:	f001 ffe1 	bl	80105c0 <realloc>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d000      	beq.n	800e604 <__ssvfscanf_r+0x638>
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	195b      	adds	r3, r3, r5
 800e608:	63bb      	str	r3, [r7, #56]	; 0x38
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	3301      	adds	r3, #1
 800e60e:	e4f8      	b.n	800e002 <__ssvfscanf_r+0x36>
 800e610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e612:	2b00      	cmp	r3, #0
 800e614:	d101      	bne.n	800e61a <__ssvfscanf_r+0x64e>
 800e616:	3b01      	subs	r3, #1
 800e618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e61a:	2210      	movs	r2, #16
 800e61c:	2301      	movs	r3, #1
 800e61e:	0034      	movs	r4, r6
 800e620:	4032      	ands	r2, r6
 800e622:	401c      	ands	r4, r3
 800e624:	623a      	str	r2, [r7, #32]
 800e626:	421e      	tst	r6, r3
 800e628:	d100      	bne.n	800e62c <__ssvfscanf_r+0x660>
 800e62a:	e116      	b.n	800e85a <__ssvfscanf_r+0x88e>
 800e62c:	2a00      	cmp	r2, #0
 800e62e:	d000      	beq.n	800e632 <__ssvfscanf_r+0x666>
 800e630:	e0b0      	b.n	800e794 <__ssvfscanf_r+0x7c8>
 800e632:	2080      	movs	r0, #128	; 0x80
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	cb10      	ldmia	r3!, {r4}
 800e638:	60fb      	str	r3, [r7, #12]
 800e63a:	4206      	tst	r6, r0
 800e63c:	d100      	bne.n	800e640 <__ssvfscanf_r+0x674>
 800e63e:	e0b2      	b.n	800e7a6 <__ssvfscanf_r+0x7da>
 800e640:	2c00      	cmp	r4, #0
 800e642:	d100      	bne.n	800e646 <__ssvfscanf_r+0x67a>
 800e644:	e68d      	b.n	800e362 <__ssvfscanf_r+0x396>
 800e646:	f7fb fdf3 	bl	800a230 <malloc>
 800e64a:	6338      	str	r0, [r7, #48]	; 0x30
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d100      	bne.n	800e652 <__ssvfscanf_r+0x686>
 800e650:	e684      	b.n	800e35c <__ssvfscanf_r+0x390>
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e658:	88de      	ldrh	r6, [r3, #6]
 800e65a:	889d      	ldrh	r5, [r3, #4]
 800e65c:	42ae      	cmp	r6, r5
 800e65e:	d310      	bcc.n	800e682 <__ssvfscanf_r+0x6b6>
 800e660:	4b90      	ldr	r3, [pc, #576]	; (800e8a4 <__ssvfscanf_r+0x8d8>)
 800e662:	429d      	cmp	r5, r3
 800e664:	d900      	bls.n	800e668 <__ssvfscanf_r+0x69c>
 800e666:	e679      	b.n	800e35c <__ssvfscanf_r+0x390>
 800e668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66a:	3508      	adds	r5, #8
 800e66c:	b2ad      	uxth	r5, r5
 800e66e:	6818      	ldr	r0, [r3, #0]
 800e670:	00a9      	lsls	r1, r5, #2
 800e672:	f001 ffa5 	bl	80105c0 <realloc>
 800e676:	2800      	cmp	r0, #0
 800e678:	d100      	bne.n	800e67c <__ssvfscanf_r+0x6b0>
 800e67a:	e66f      	b.n	800e35c <__ssvfscanf_r+0x390>
 800e67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e67e:	6018      	str	r0, [r3, #0]
 800e680:	809d      	strh	r5, [r3, #4]
 800e682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e684:	1c72      	adds	r2, r6, #1
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	00b6      	lsls	r6, r6, #2
 800e68a:	50f4      	str	r4, [r6, r3]
 800e68c:	2320      	movs	r3, #32
 800e68e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e690:	0026      	movs	r6, r4
 800e692:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e694:	80ca      	strh	r2, [r1, #6]
 800e696:	613b      	str	r3, [r7, #16]
 800e698:	2500      	movs	r5, #0
 800e69a:	f7fd f8a1 	bl	800b7e0 <__locale_mb_cur_max>
 800e69e:	42a8      	cmp	r0, r5
 800e6a0:	d100      	bne.n	800e6a4 <__ssvfscanf_r+0x6d8>
 800e6a2:	e562      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e6a4:	1c6a      	adds	r2, r5, #1
 800e6a6:	61fa      	str	r2, [r7, #28]
 800e6a8:	228c      	movs	r2, #140	; 0x8c
 800e6aa:	2048      	movs	r0, #72	; 0x48
 800e6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ae:	0052      	lsls	r2, r2, #1
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	1812      	adds	r2, r2, r0
 800e6b4:	7819      	ldrb	r1, [r3, #0]
 800e6b6:	19d2      	adds	r2, r2, r7
 800e6b8:	5551      	strb	r1, [r2, r5]
 800e6ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6be:	6852      	ldr	r2, [r2, #4]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	600b      	str	r3, [r1, #0]
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	3a01      	subs	r2, #1
 800e6c8:	604a      	str	r2, [r1, #4]
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d102      	bne.n	800e6d4 <__ssvfscanf_r+0x708>
 800e6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	d006      	beq.n	800e6e2 <__ssvfscanf_r+0x716>
 800e6d4:	2048      	movs	r0, #72	; 0x48
 800e6d6:	2208      	movs	r2, #8
 800e6d8:	1813      	adds	r3, r2, r0
 800e6da:	2100      	movs	r1, #0
 800e6dc:	19d8      	adds	r0, r3, r7
 800e6de:	f7fd f83b 	bl	800b758 <memset>
 800e6e2:	2148      	movs	r1, #72	; 0x48
 800e6e4:	2308      	movs	r3, #8
 800e6e6:	228c      	movs	r2, #140	; 0x8c
 800e6e8:	185b      	adds	r3, r3, r1
 800e6ea:	0052      	lsls	r2, r2, #1
 800e6ec:	19db      	adds	r3, r3, r7
 800e6ee:	1852      	adds	r2, r2, r1
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	0021      	movs	r1, r4
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6f8:	19d2      	adds	r2, r2, r7
 800e6fa:	f002 fafb 	bl	8010cf4 <_mbrtowc_r>
 800e6fe:	0003      	movs	r3, r0
 800e700:	62b8      	str	r0, [r7, #40]	; 0x28
 800e702:	3301      	adds	r3, #1
 800e704:	d100      	bne.n	800e708 <__ssvfscanf_r+0x73c>
 800e706:	e530      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d151      	bne.n	800e7b0 <__ssvfscanf_r+0x7e4>
 800e70c:	6020      	str	r0, [r4, #0]
 800e70e:	2301      	movs	r3, #1
 800e710:	6825      	ldr	r5, [r4, #0]
 800e712:	425b      	negs	r3, r3
 800e714:	1c6a      	adds	r2, r5, #1
 800e716:	d01a      	beq.n	800e74e <__ssvfscanf_r+0x782>
 800e718:	2048      	movs	r0, #72	; 0x48
 800e71a:	3311      	adds	r3, #17
 800e71c:	181b      	adds	r3, r3, r0
 800e71e:	2208      	movs	r2, #8
 800e720:	2100      	movs	r1, #0
 800e722:	19d8      	adds	r0, r3, r7
 800e724:	f7fd f818 	bl	800b758 <memset>
 800e728:	4b5f      	ldr	r3, [pc, #380]	; (800e8a8 <__ssvfscanf_r+0x8dc>)
 800e72a:	2148      	movs	r1, #72	; 0x48
 800e72c:	33e0      	adds	r3, #224	; 0xe0
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	2310      	movs	r3, #16
 800e732:	4694      	mov	ip, r2
 800e734:	185b      	adds	r3, r3, r1
 800e736:	002a      	movs	r2, r5
 800e738:	19db      	adds	r3, r3, r7
 800e73a:	4665      	mov	r5, ip
 800e73c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e73e:	1879      	adds	r1, r7, r1
 800e740:	47a8      	blx	r5
 800e742:	2300      	movs	r3, #0
 800e744:	2801      	cmp	r0, #1
 800e746:	d102      	bne.n	800e74e <__ssvfscanf_r+0x782>
 800e748:	3348      	adds	r3, #72	; 0x48
 800e74a:	18fb      	adds	r3, r7, r3
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	2218      	movs	r2, #24
 800e750:	2148      	movs	r1, #72	; 0x48
 800e752:	1852      	adds	r2, r2, r1
 800e754:	19d2      	adds	r2, r2, r7
 800e756:	5cd3      	ldrb	r3, [r2, r3]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d149      	bne.n	800e7f0 <__ssvfscanf_r+0x824>
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d137      	bne.n	800e7d2 <__ssvfscanf_r+0x806>
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d113      	bne.n	800e790 <__ssvfscanf_r+0x7c4>
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	d00d      	beq.n	800e78a <__ssvfscanf_r+0x7be>
 800e76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	1ae4      	subs	r4, r4, r3
 800e774:	10a3      	asrs	r3, r4, #2
 800e776:	3301      	adds	r3, #1
 800e778:	429a      	cmp	r2, r3
 800e77a:	d906      	bls.n	800e78a <__ssvfscanf_r+0x7be>
 800e77c:	6830      	ldr	r0, [r6, #0]
 800e77e:	1d21      	adds	r1, r4, #4
 800e780:	f001 ff1e 	bl	80105c0 <realloc>
 800e784:	2800      	cmp	r0, #0
 800e786:	d000      	beq.n	800e78a <__ssvfscanf_r+0x7be>
 800e788:	6030      	str	r0, [r6, #0]
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	3301      	adds	r3, #1
 800e78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	e593      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	60fb      	str	r3, [r7, #12]
 800e798:	2300      	movs	r3, #0
 800e79a:	001e      	movs	r6, r3
 800e79c:	613b      	str	r3, [r7, #16]
 800e79e:	633b      	str	r3, [r7, #48]	; 0x30
 800e7a0:	334c      	adds	r3, #76	; 0x4c
 800e7a2:	18fc      	adds	r4, r7, r3
 800e7a4:	e778      	b.n	800e698 <__ssvfscanf_r+0x6cc>
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	001e      	movs	r6, r3
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ae:	e773      	b.n	800e698 <__ssvfscanf_r+0x6cc>
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	69fd      	ldr	r5, [r7, #28]
 800e7b4:	3302      	adds	r3, #2
 800e7b6:	d1aa      	bne.n	800e70e <__ssvfscanf_r+0x742>
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dc47      	bgt.n	800e850 <__ssvfscanf_r+0x884>
 800e7c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7c4:	f002 fb96 	bl	8010ef4 <__ssrefill_r>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d041      	beq.n	800e850 <__ssvfscanf_r+0x884>
 800e7cc:	2d00      	cmp	r5, #0
 800e7ce:	d0c8      	beq.n	800e762 <__ssvfscanf_r+0x796>
 800e7d0:	e4cb      	b.n	800e16a <__ssvfscanf_r+0x19e>
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	2248      	movs	r2, #72	; 0x48
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	61fb      	str	r3, [r7, #28]
 800e7da:	238c      	movs	r3, #140	; 0x8c
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	189b      	adds	r3, r3, r2
 800e7e0:	69fa      	ldr	r2, [r7, #28]
 800e7e2:	19db      	adds	r3, r3, r7
 800e7e4:	5cd1      	ldrb	r1, [r2, r3]
 800e7e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ea:	f002 fb47 	bl	8010e7c <_sungetc_r>
 800e7ee:	e7b5      	b.n	800e75c <__ssvfscanf_r+0x790>
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f4:	4694      	mov	ip, r2
 800e7f6:	4463      	add	r3, ip
 800e7f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	d102      	bne.n	800e806 <__ssvfscanf_r+0x83a>
 800e800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e802:	2b04      	cmp	r3, #4
 800e804:	d002      	beq.n	800e80c <__ssvfscanf_r+0x840>
 800e806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e808:	3b01      	subs	r3, #1
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d11a      	bne.n	800e848 <__ssvfscanf_r+0x87c>
 800e812:	3404      	adds	r4, #4
 800e814:	2e00      	cmp	r6, #0
 800e816:	d019      	beq.n	800e84c <__ssvfscanf_r+0x880>
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	693a      	ldr	r2, [r7, #16]
 800e81c:	1ae3      	subs	r3, r4, r3
 800e81e:	61fb      	str	r3, [r7, #28]
 800e820:	6a3d      	ldr	r5, [r7, #32]
 800e822:	109b      	asrs	r3, r3, #2
 800e824:	4293      	cmp	r3, r2
 800e826:	d3c7      	bcc.n	800e7b8 <__ssvfscanf_r+0x7ec>
 800e828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e82a:	00d1      	lsls	r1, r2, #3
 800e82c:	f001 fec8 	bl	80105c0 <realloc>
 800e830:	6338      	str	r0, [r7, #48]	; 0x30
 800e832:	2800      	cmp	r0, #0
 800e834:	d100      	bne.n	800e838 <__ssvfscanf_r+0x86c>
 800e836:	e591      	b.n	800e35c <__ssvfscanf_r+0x390>
 800e838:	4684      	mov	ip, r0
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	69fc      	ldr	r4, [r7, #28]
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	4464      	add	r4, ip
 800e842:	6030      	str	r0, [r6, #0]
 800e844:	613b      	str	r3, [r7, #16]
 800e846:	e7b7      	b.n	800e7b8 <__ssvfscanf_r+0x7ec>
 800e848:	2500      	movs	r5, #0
 800e84a:	e7b5      	b.n	800e7b8 <__ssvfscanf_r+0x7ec>
 800e84c:	0035      	movs	r5, r6
 800e84e:	e7b3      	b.n	800e7b8 <__ssvfscanf_r+0x7ec>
 800e850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d000      	beq.n	800e858 <__ssvfscanf_r+0x88c>
 800e856:	e720      	b.n	800e69a <__ssvfscanf_r+0x6ce>
 800e858:	e783      	b.n	800e762 <__ssvfscanf_r+0x796>
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d025      	beq.n	800e8ac <__ssvfscanf_r+0x8e0>
 800e860:	2118      	movs	r1, #24
 800e862:	2048      	movs	r0, #72	; 0x48
 800e864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e866:	1809      	adds	r1, r1, r0
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	19c9      	adds	r1, r1, r7
 800e86c:	781a      	ldrb	r2, [r3, #0]
 800e86e:	5c8a      	ldrb	r2, [r1, r2]
 800e870:	2a00      	cmp	r2, #0
 800e872:	d103      	bne.n	800e87c <__ssvfscanf_r+0x8b0>
 800e874:	2c00      	cmp	r4, #0
 800e876:	d000      	beq.n	800e87a <__ssvfscanf_r+0x8ae>
 800e878:	e66c      	b.n	800e554 <__ssvfscanf_r+0x588>
 800e87a:	e4a4      	b.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e87c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e87e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e880:	6852      	ldr	r2, [r2, #4]
 800e882:	3301      	adds	r3, #1
 800e884:	600b      	str	r3, [r1, #0]
 800e886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e888:	3a01      	subs	r2, #1
 800e88a:	3401      	adds	r4, #1
 800e88c:	604a      	str	r2, [r1, #4]
 800e88e:	429c      	cmp	r4, r3
 800e890:	d100      	bne.n	800e894 <__ssvfscanf_r+0x8c8>
 800e892:	e65f      	b.n	800e554 <__ssvfscanf_r+0x588>
 800e894:	2a00      	cmp	r2, #0
 800e896:	dce3      	bgt.n	800e860 <__ssvfscanf_r+0x894>
 800e898:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e89a:	f002 fb2b 	bl	8010ef4 <__ssrefill_r>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d0de      	beq.n	800e860 <__ssvfscanf_r+0x894>
 800e8a2:	e657      	b.n	800e554 <__ssvfscanf_r+0x588>
 800e8a4:	0000fff6 	.word	0x0000fff6
 800e8a8:	2000043c 	.word	0x2000043c
 800e8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ae:	0032      	movs	r2, r6
 800e8b0:	cb20      	ldmia	r3!, {r5}
 800e8b2:	61fb      	str	r3, [r7, #28]
 800e8b4:	2380      	movs	r3, #128	; 0x80
 800e8b6:	401a      	ands	r2, r3
 800e8b8:	421e      	tst	r6, r3
 800e8ba:	d100      	bne.n	800e8be <__ssvfscanf_r+0x8f2>
 800e8bc:	e086      	b.n	800e9cc <__ssvfscanf_r+0xa00>
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	d100      	bne.n	800e8c4 <__ssvfscanf_r+0x8f8>
 800e8c2:	e480      	b.n	800e1c6 <__ssvfscanf_r+0x1fa>
 800e8c4:	2020      	movs	r0, #32
 800e8c6:	f7fb fcb3 	bl	800a230 <malloc>
 800e8ca:	6338      	str	r0, [r7, #48]	; 0x30
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d100      	bne.n	800e8d2 <__ssvfscanf_r+0x906>
 800e8d0:	e452      	b.n	800e178 <__ssvfscanf_r+0x1ac>
 800e8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d4:	6028      	str	r0, [r5, #0]
 800e8d6:	88de      	ldrh	r6, [r3, #6]
 800e8d8:	889c      	ldrh	r4, [r3, #4]
 800e8da:	6818      	ldr	r0, [r3, #0]
 800e8dc:	42a6      	cmp	r6, r4
 800e8de:	d30e      	bcc.n	800e8fe <__ssvfscanf_r+0x932>
 800e8e0:	4bc3      	ldr	r3, [pc, #780]	; (800ebf0 <__ssvfscanf_r+0xc24>)
 800e8e2:	429c      	cmp	r4, r3
 800e8e4:	d900      	bls.n	800e8e8 <__ssvfscanf_r+0x91c>
 800e8e6:	e542      	b.n	800e36e <__ssvfscanf_r+0x3a2>
 800e8e8:	3408      	adds	r4, #8
 800e8ea:	b2a4      	uxth	r4, r4
 800e8ec:	00a1      	lsls	r1, r4, #2
 800e8ee:	f001 fe67 	bl	80105c0 <realloc>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d100      	bne.n	800e8f8 <__ssvfscanf_r+0x92c>
 800e8f6:	e53a      	b.n	800e36e <__ssvfscanf_r+0x3a2>
 800e8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fa:	6018      	str	r0, [r3, #0]
 800e8fc:	809c      	strh	r4, [r3, #4]
 800e8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e900:	1c72      	adds	r2, r6, #1
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	00b6      	lsls	r6, r6, #2
 800e906:	50f5      	str	r5, [r6, r3]
 800e908:	2320      	movs	r3, #32
 800e90a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e90c:	002e      	movs	r6, r5
 800e90e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800e910:	80ca      	strh	r2, [r1, #6]
 800e912:	623b      	str	r3, [r7, #32]
 800e914:	002c      	movs	r4, r5
 800e916:	2118      	movs	r1, #24
 800e918:	2048      	movs	r0, #72	; 0x48
 800e91a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e91c:	1809      	adds	r1, r1, r0
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	19c9      	adds	r1, r1, r7
 800e922:	781a      	ldrb	r2, [r3, #0]
 800e924:	5c8a      	ldrb	r2, [r1, r2]
 800e926:	2a00      	cmp	r2, #0
 800e928:	d101      	bne.n	800e92e <__ssvfscanf_r+0x962>
 800e92a:	633d      	str	r5, [r7, #48]	; 0x30
 800e92c:	e031      	b.n	800e992 <__ssvfscanf_r+0x9c6>
 800e92e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e932:	6852      	ldr	r2, [r2, #4]
 800e934:	3a01      	subs	r2, #1
 800e936:	604a      	str	r2, [r1, #4]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	600a      	str	r2, [r1, #0]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	1c6a      	adds	r2, r5, #1
 800e940:	633a      	str	r2, [r7, #48]	; 0x30
 800e942:	702b      	strb	r3, [r5, #0]
 800e944:	2e00      	cmp	r6, #0
 800e946:	d010      	beq.n	800e96a <__ssvfscanf_r+0x99e>
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	1b15      	subs	r5, r2, r4
 800e94c:	429d      	cmp	r5, r3
 800e94e:	d30c      	bcc.n	800e96a <__ssvfscanf_r+0x99e>
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	0020      	movs	r0, r4
 800e954:	0019      	movs	r1, r3
 800e956:	623b      	str	r3, [r7, #32]
 800e958:	f001 fe32 	bl	80105c0 <realloc>
 800e95c:	1e04      	subs	r4, r0, #0
 800e95e:	d101      	bne.n	800e964 <__ssvfscanf_r+0x998>
 800e960:	f7ff fc0a 	bl	800e178 <__ssvfscanf_r+0x1ac>
 800e964:	1943      	adds	r3, r0, r5
 800e966:	633b      	str	r3, [r7, #48]	; 0x30
 800e968:	6030      	str	r0, [r6, #0]
 800e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96c:	3b01      	subs	r3, #1
 800e96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e970:	2b00      	cmp	r3, #0
 800e972:	d00e      	beq.n	800e992 <__ssvfscanf_r+0x9c6>
 800e974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	dc2a      	bgt.n	800e9d2 <__ssvfscanf_r+0xa06>
 800e97c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e97e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e980:	f002 fab8 	bl	8010ef4 <__ssrefill_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	d024      	beq.n	800e9d2 <__ssvfscanf_r+0xa06>
 800e988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98a:	42a3      	cmp	r3, r4
 800e98c:	d101      	bne.n	800e992 <__ssvfscanf_r+0x9c6>
 800e98e:	f7ff fbec 	bl	800e16a <__ssvfscanf_r+0x19e>
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	1b1d      	subs	r5, r3, r4
 800e996:	42a3      	cmp	r3, r4
 800e998:	d101      	bne.n	800e99e <__ssvfscanf_r+0x9d2>
 800e99a:	f7ff fc14 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9a2:	7013      	strb	r3, [r2, #0]
 800e9a4:	429e      	cmp	r6, r3
 800e9a6:	d009      	beq.n	800e9bc <__ssvfscanf_r+0x9f0>
 800e9a8:	6a3b      	ldr	r3, [r7, #32]
 800e9aa:	1c69      	adds	r1, r5, #1
 800e9ac:	428b      	cmp	r3, r1
 800e9ae:	d905      	bls.n	800e9bc <__ssvfscanf_r+0x9f0>
 800e9b0:	6830      	ldr	r0, [r6, #0]
 800e9b2:	f001 fe05 	bl	80105c0 <realloc>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d000      	beq.n	800e9bc <__ssvfscanf_r+0x9f0>
 800e9ba:	6030      	str	r0, [r6, #0]
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	3301      	adds	r3, #1
 800e9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c4:	195b      	adds	r3, r3, r5
 800e9c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	e477      	b.n	800e2bc <__ssvfscanf_r+0x2f0>
 800e9cc:	0016      	movs	r6, r2
 800e9ce:	623a      	str	r2, [r7, #32]
 800e9d0:	e7a0      	b.n	800e914 <__ssvfscanf_r+0x948>
 800e9d2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800e9d4:	e79f      	b.n	800e916 <__ssvfscanf_r+0x94a>
 800e9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <__ssvfscanf_r+0xa14>
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9e0:	2210      	movs	r2, #16
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	0034      	movs	r4, r6
 800e9e6:	4032      	ands	r2, r6
 800e9e8:	401c      	ands	r4, r3
 800e9ea:	61fa      	str	r2, [r7, #28]
 800e9ec:	421e      	tst	r6, r3
 800e9ee:	d100      	bne.n	800e9f2 <__ssvfscanf_r+0xa26>
 800e9f0:	e102      	b.n	800ebf8 <__ssvfscanf_r+0xc2c>
 800e9f2:	2a00      	cmp	r2, #0
 800e9f4:	d000      	beq.n	800e9f8 <__ssvfscanf_r+0xa2c>
 800e9f6:	e09f      	b.n	800eb38 <__ssvfscanf_r+0xb6c>
 800e9f8:	2080      	movs	r0, #128	; 0x80
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	cb10      	ldmia	r3!, {r4}
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	4206      	tst	r6, r0
 800ea02:	d100      	bne.n	800ea06 <__ssvfscanf_r+0xa3a>
 800ea04:	e0a1      	b.n	800eb4a <__ssvfscanf_r+0xb7e>
 800ea06:	2c00      	cmp	r4, #0
 800ea08:	d100      	bne.n	800ea0c <__ssvfscanf_r+0xa40>
 800ea0a:	e4aa      	b.n	800e362 <__ssvfscanf_r+0x396>
 800ea0c:	f7fb fc10 	bl	800a230 <malloc>
 800ea10:	6338      	str	r0, [r7, #48]	; 0x30
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d100      	bne.n	800ea18 <__ssvfscanf_r+0xa4c>
 800ea16:	e4a1      	b.n	800e35c <__ssvfscanf_r+0x390>
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea1e:	88de      	ldrh	r6, [r3, #6]
 800ea20:	889d      	ldrh	r5, [r3, #4]
 800ea22:	42ae      	cmp	r6, r5
 800ea24:	d310      	bcc.n	800ea48 <__ssvfscanf_r+0xa7c>
 800ea26:	4b72      	ldr	r3, [pc, #456]	; (800ebf0 <__ssvfscanf_r+0xc24>)
 800ea28:	429d      	cmp	r5, r3
 800ea2a:	d900      	bls.n	800ea2e <__ssvfscanf_r+0xa62>
 800ea2c:	e496      	b.n	800e35c <__ssvfscanf_r+0x390>
 800ea2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea30:	3508      	adds	r5, #8
 800ea32:	b2ad      	uxth	r5, r5
 800ea34:	6818      	ldr	r0, [r3, #0]
 800ea36:	00a9      	lsls	r1, r5, #2
 800ea38:	f001 fdc2 	bl	80105c0 <realloc>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d100      	bne.n	800ea42 <__ssvfscanf_r+0xa76>
 800ea40:	e48c      	b.n	800e35c <__ssvfscanf_r+0x390>
 800ea42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea44:	6018      	str	r0, [r3, #0]
 800ea46:	809d      	strh	r5, [r3, #4]
 800ea48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4a:	1c72      	adds	r2, r6, #1
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	00b6      	lsls	r6, r6, #2
 800ea50:	50f4      	str	r4, [r6, r3]
 800ea52:	2320      	movs	r3, #32
 800ea54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea56:	0025      	movs	r5, r4
 800ea58:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ea5a:	80ca      	strh	r2, [r1, #6]
 800ea5c:	613b      	str	r3, [r7, #16]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	623b      	str	r3, [r7, #32]
 800ea62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea64:	4a63      	ldr	r2, [pc, #396]	; (800ebf4 <__ssvfscanf_r+0xc28>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	5cd3      	ldrb	r3, [r2, r3]
 800ea6c:	2208      	movs	r2, #8
 800ea6e:	4213      	tst	r3, r2
 800ea70:	d149      	bne.n	800eb06 <__ssvfscanf_r+0xb3a>
 800ea72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d046      	beq.n	800eb06 <__ssvfscanf_r+0xb3a>
 800ea78:	f7fc feb2 	bl	800b7e0 <__locale_mb_cur_max>
 800ea7c:	6a3b      	ldr	r3, [r7, #32]
 800ea7e:	4298      	cmp	r0, r3
 800ea80:	d101      	bne.n	800ea86 <__ssvfscanf_r+0xaba>
 800ea82:	f7ff fb72 	bl	800e16a <__ssvfscanf_r+0x19e>
 800ea86:	6a3a      	ldr	r2, [r7, #32]
 800ea88:	2048      	movs	r0, #72	; 0x48
 800ea8a:	1c56      	adds	r6, r2, #1
 800ea8c:	228c      	movs	r2, #140	; 0x8c
 800ea8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea90:	0052      	lsls	r2, r2, #1
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	1812      	adds	r2, r2, r0
 800ea96:	7819      	ldrb	r1, [r3, #0]
 800ea98:	6a38      	ldr	r0, [r7, #32]
 800ea9a:	19d2      	adds	r2, r2, r7
 800ea9c:	5411      	strb	r1, [r2, r0]
 800ea9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaa2:	6852      	ldr	r2, [r2, #4]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	600b      	str	r3, [r1, #0]
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	3a01      	subs	r2, #1
 800eaac:	604a      	str	r2, [r1, #4]
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d102      	bne.n	800eab8 <__ssvfscanf_r+0xaec>
 800eab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eab4:	2b04      	cmp	r3, #4
 800eab6:	d007      	beq.n	800eac8 <__ssvfscanf_r+0xafc>
 800eab8:	2048      	movs	r0, #72	; 0x48
 800eaba:	2310      	movs	r3, #16
 800eabc:	181b      	adds	r3, r3, r0
 800eabe:	2208      	movs	r2, #8
 800eac0:	2100      	movs	r1, #0
 800eac2:	19d8      	adds	r0, r3, r7
 800eac4:	f7fc fe48 	bl	800b758 <memset>
 800eac8:	2148      	movs	r1, #72	; 0x48
 800eaca:	2310      	movs	r3, #16
 800eacc:	228c      	movs	r2, #140	; 0x8c
 800eace:	185b      	adds	r3, r3, r1
 800ead0:	0052      	lsls	r2, r2, #1
 800ead2:	19db      	adds	r3, r3, r7
 800ead4:	1852      	adds	r2, r2, r1
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	0021      	movs	r1, r4
 800eada:	0033      	movs	r3, r6
 800eadc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eade:	19d2      	adds	r2, r2, r7
 800eae0:	f002 f908 	bl	8010cf4 <_mbrtowc_r>
 800eae4:	0003      	movs	r3, r0
 800eae6:	62b8      	str	r0, [r7, #40]	; 0x28
 800eae8:	3301      	adds	r3, #1
 800eaea:	d101      	bne.n	800eaf0 <__ssvfscanf_r+0xb24>
 800eaec:	f7ff fb3d 	bl	800e16a <__ssvfscanf_r+0x19e>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d12f      	bne.n	800eb54 <__ssvfscanf_r+0xb88>
 800eaf4:	6020      	str	r0, [r4, #0]
 800eaf6:	6820      	ldr	r0, [r4, #0]
 800eaf8:	f002 f91a 	bl	8010d30 <iswspace>
 800eafc:	6238      	str	r0, [r7, #32]
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d04a      	beq.n	800eb98 <__ssvfscanf_r+0xbcc>
 800eb02:	2e00      	cmp	r6, #0
 800eb04:	d13c      	bne.n	800eb80 <__ssvfscanf_r+0xbb4>
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d000      	beq.n	800eb0e <__ssvfscanf_r+0xb42>
 800eb0c:	e640      	b.n	800e790 <__ssvfscanf_r+0x7c4>
 800eb0e:	6023      	str	r3, [r4, #0]
 800eb10:	2d00      	cmp	r5, #0
 800eb12:	d100      	bne.n	800eb16 <__ssvfscanf_r+0xb4a>
 800eb14:	e639      	b.n	800e78a <__ssvfscanf_r+0x7be>
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	693a      	ldr	r2, [r7, #16]
 800eb1a:	1ae4      	subs	r4, r4, r3
 800eb1c:	10a3      	asrs	r3, r4, #2
 800eb1e:	3301      	adds	r3, #1
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d800      	bhi.n	800eb26 <__ssvfscanf_r+0xb5a>
 800eb24:	e631      	b.n	800e78a <__ssvfscanf_r+0x7be>
 800eb26:	6828      	ldr	r0, [r5, #0]
 800eb28:	1d21      	adds	r1, r4, #4
 800eb2a:	f001 fd49 	bl	80105c0 <realloc>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d100      	bne.n	800eb34 <__ssvfscanf_r+0xb68>
 800eb32:	e62a      	b.n	800e78a <__ssvfscanf_r+0x7be>
 800eb34:	6028      	str	r0, [r5, #0]
 800eb36:	e628      	b.n	800e78a <__ssvfscanf_r+0x7be>
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	001d      	movs	r5, r3
 800eb40:	613b      	str	r3, [r7, #16]
 800eb42:	633b      	str	r3, [r7, #48]	; 0x30
 800eb44:	334c      	adds	r3, #76	; 0x4c
 800eb46:	18fc      	adds	r4, r7, r3
 800eb48:	e789      	b.n	800ea5e <__ssvfscanf_r+0xa92>
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	001d      	movs	r5, r3
 800eb4e:	613b      	str	r3, [r7, #16]
 800eb50:	633b      	str	r3, [r7, #48]	; 0x30
 800eb52:	e784      	b.n	800ea5e <__ssvfscanf_r+0xa92>
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	623e      	str	r6, [r7, #32]
 800eb58:	3302      	adds	r3, #2
 800eb5a:	d1cc      	bne.n	800eaf6 <__ssvfscanf_r+0xb2a>
 800eb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	dd00      	ble.n	800eb66 <__ssvfscanf_r+0xb9a>
 800eb64:	e77d      	b.n	800ea62 <__ssvfscanf_r+0xa96>
 800eb66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb6a:	f002 f9c3 	bl	8010ef4 <__ssrefill_r>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d100      	bne.n	800eb74 <__ssvfscanf_r+0xba8>
 800eb72:	e776      	b.n	800ea62 <__ssvfscanf_r+0xa96>
 800eb74:	6a3b      	ldr	r3, [r7, #32]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <__ssvfscanf_r+0xbb2>
 800eb7a:	f7ff faf6 	bl	800e16a <__ssvfscanf_r+0x19e>
 800eb7e:	e7c2      	b.n	800eb06 <__ssvfscanf_r+0xb3a>
 800eb80:	238c      	movs	r3, #140	; 0x8c
 800eb82:	2248      	movs	r2, #72	; 0x48
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	189b      	adds	r3, r3, r2
 800eb88:	3e01      	subs	r6, #1
 800eb8a:	19db      	adds	r3, r3, r7
 800eb8c:	5cf1      	ldrb	r1, [r6, r3]
 800eb8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb92:	f002 f973 	bl	8010e7c <_sungetc_r>
 800eb96:	e7b4      	b.n	800eb02 <__ssvfscanf_r+0xb36>
 800eb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9a:	199b      	adds	r3, r3, r6
 800eb9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d102      	bne.n	800ebaa <__ssvfscanf_r+0xbde>
 800eba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba6:	2b04      	cmp	r3, #4
 800eba8:	d002      	beq.n	800ebb0 <__ssvfscanf_r+0xbe4>
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebac:	3b01      	subs	r3, #1
 800ebae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1d2      	bne.n	800eb5c <__ssvfscanf_r+0xb90>
 800ebb6:	3404      	adds	r4, #4
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	d016      	beq.n	800ebea <__ssvfscanf_r+0xc1e>
 800ebbc:	69fa      	ldr	r2, [r7, #28]
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	623a      	str	r2, [r7, #32]
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	1ae6      	subs	r6, r4, r3
 800ebc6:	10b3      	asrs	r3, r6, #2
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d3c7      	bcc.n	800eb5c <__ssvfscanf_r+0xb90>
 800ebcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebce:	00d1      	lsls	r1, r2, #3
 800ebd0:	f001 fcf6 	bl	80105c0 <realloc>
 800ebd4:	6338      	str	r0, [r7, #48]	; 0x30
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d101      	bne.n	800ebde <__ssvfscanf_r+0xc12>
 800ebda:	f7ff fbbf 	bl	800e35c <__ssvfscanf_r+0x390>
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	1984      	adds	r4, r0, r6
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	6028      	str	r0, [r5, #0]
 800ebe6:	613b      	str	r3, [r7, #16]
 800ebe8:	e7b8      	b.n	800eb5c <__ssvfscanf_r+0xb90>
 800ebea:	623d      	str	r5, [r7, #32]
 800ebec:	e7b6      	b.n	800eb5c <__ssvfscanf_r+0xb90>
 800ebee:	46c0      	nop			; (mov r8, r8)
 800ebf0:	0000fff6 	.word	0x0000fff6
 800ebf4:	08013dc9 	.word	0x08013dc9
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d01c      	beq.n	800ec38 <__ssvfscanf_r+0xc6c>
 800ebfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec00:	49bf      	ldr	r1, [pc, #764]	; (800ef00 <__ssvfscanf_r+0xf34>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	781a      	ldrb	r2, [r3, #0]
 800ec06:	5c8a      	ldrb	r2, [r1, r2]
 800ec08:	2108      	movs	r1, #8
 800ec0a:	420a      	tst	r2, r1
 800ec0c:	d000      	beq.n	800ec10 <__ssvfscanf_r+0xc44>
 800ec0e:	e4a1      	b.n	800e554 <__ssvfscanf_r+0x588>
 800ec10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec14:	6852      	ldr	r2, [r2, #4]
 800ec16:	3301      	adds	r3, #1
 800ec18:	600b      	str	r3, [r1, #0]
 800ec1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1c:	3a01      	subs	r2, #1
 800ec1e:	3401      	adds	r4, #1
 800ec20:	604a      	str	r2, [r1, #4]
 800ec22:	429c      	cmp	r4, r3
 800ec24:	d100      	bne.n	800ec28 <__ssvfscanf_r+0xc5c>
 800ec26:	e495      	b.n	800e554 <__ssvfscanf_r+0x588>
 800ec28:	2a00      	cmp	r2, #0
 800ec2a:	dce8      	bgt.n	800ebfe <__ssvfscanf_r+0xc32>
 800ec2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec2e:	f002 f961 	bl	8010ef4 <__ssrefill_r>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d0e3      	beq.n	800ebfe <__ssvfscanf_r+0xc32>
 800ec36:	e48d      	b.n	800e554 <__ssvfscanf_r+0x588>
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	0032      	movs	r2, r6
 800ec3c:	cb10      	ldmia	r3!, {r4}
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	2380      	movs	r3, #128	; 0x80
 800ec42:	401a      	ands	r2, r3
 800ec44:	421e      	tst	r6, r3
 800ec46:	d039      	beq.n	800ecbc <__ssvfscanf_r+0xcf0>
 800ec48:	2c00      	cmp	r4, #0
 800ec4a:	d101      	bne.n	800ec50 <__ssvfscanf_r+0xc84>
 800ec4c:	f7ff fabb 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800ec50:	2020      	movs	r0, #32
 800ec52:	f7fb faed 	bl	800a230 <malloc>
 800ec56:	6338      	str	r0, [r7, #48]	; 0x30
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d101      	bne.n	800ec60 <__ssvfscanf_r+0xc94>
 800ec5c:	f7ff fa8c 	bl	800e178 <__ssvfscanf_r+0x1ac>
 800ec60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	88de      	ldrh	r6, [r3, #6]
 800ec66:	889d      	ldrh	r5, [r3, #4]
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	42ae      	cmp	r6, r5
 800ec6c:	d310      	bcc.n	800ec90 <__ssvfscanf_r+0xcc4>
 800ec6e:	4ba5      	ldr	r3, [pc, #660]	; (800ef04 <__ssvfscanf_r+0xf38>)
 800ec70:	429d      	cmp	r5, r3
 800ec72:	d901      	bls.n	800ec78 <__ssvfscanf_r+0xcac>
 800ec74:	f7ff fb7b 	bl	800e36e <__ssvfscanf_r+0x3a2>
 800ec78:	3508      	adds	r5, #8
 800ec7a:	b2ad      	uxth	r5, r5
 800ec7c:	00a9      	lsls	r1, r5, #2
 800ec7e:	f001 fc9f 	bl	80105c0 <realloc>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d101      	bne.n	800ec8a <__ssvfscanf_r+0xcbe>
 800ec86:	f7ff fb72 	bl	800e36e <__ssvfscanf_r+0x3a2>
 800ec8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8c:	6018      	str	r0, [r3, #0]
 800ec8e:	809d      	strh	r5, [r3, #4]
 800ec90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec92:	1c72      	adds	r2, r6, #1
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	00b6      	lsls	r6, r6, #2
 800ec98:	50f4      	str	r4, [r6, r3]
 800ec9a:	2320      	movs	r3, #32
 800ec9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec9e:	0026      	movs	r6, r4
 800eca0:	80ca      	strh	r2, [r1, #6]
 800eca2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eca4:	633b      	str	r3, [r7, #48]	; 0x30
 800eca6:	0025      	movs	r5, r4
 800eca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecaa:	4995      	ldr	r1, [pc, #596]	; (800ef00 <__ssvfscanf_r+0xf34>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	781a      	ldrb	r2, [r3, #0]
 800ecb0:	5c8a      	ldrb	r2, [r1, r2]
 800ecb2:	2108      	movs	r1, #8
 800ecb4:	420a      	tst	r2, r1
 800ecb6:	d004      	beq.n	800ecc2 <__ssvfscanf_r+0xcf6>
 800ecb8:	623c      	str	r4, [r7, #32]
 800ecba:	e031      	b.n	800ed20 <__ssvfscanf_r+0xd54>
 800ecbc:	0016      	movs	r6, r2
 800ecbe:	633a      	str	r2, [r7, #48]	; 0x30
 800ecc0:	e7f1      	b.n	800eca6 <__ssvfscanf_r+0xcda>
 800ecc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecc6:	6852      	ldr	r2, [r2, #4]
 800ecc8:	3a01      	subs	r2, #1
 800ecca:	604a      	str	r2, [r1, #4]
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	600a      	str	r2, [r1, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	1c62      	adds	r2, r4, #1
 800ecd4:	623a      	str	r2, [r7, #32]
 800ecd6:	7023      	strb	r3, [r4, #0]
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	d010      	beq.n	800ecfe <__ssvfscanf_r+0xd32>
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecde:	1b54      	subs	r4, r2, r5
 800ece0:	429c      	cmp	r4, r3
 800ece2:	d30c      	bcc.n	800ecfe <__ssvfscanf_r+0xd32>
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	0028      	movs	r0, r5
 800ece8:	0019      	movs	r1, r3
 800ecea:	633b      	str	r3, [r7, #48]	; 0x30
 800ecec:	f001 fc68 	bl	80105c0 <realloc>
 800ecf0:	1e05      	subs	r5, r0, #0
 800ecf2:	d101      	bne.n	800ecf8 <__ssvfscanf_r+0xd2c>
 800ecf4:	f7ff fa40 	bl	800e178 <__ssvfscanf_r+0x1ac>
 800ecf8:	1903      	adds	r3, r0, r4
 800ecfa:	623b      	str	r3, [r7, #32]
 800ecfc:	6030      	str	r0, [r6, #0]
 800ecfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed00:	3b01      	subs	r3, #1
 800ed02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00b      	beq.n	800ed20 <__ssvfscanf_r+0xd54>
 800ed08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	dd01      	ble.n	800ed14 <__ssvfscanf_r+0xd48>
 800ed10:	6a3c      	ldr	r4, [r7, #32]
 800ed12:	e7c9      	b.n	800eca8 <__ssvfscanf_r+0xcdc>
 800ed14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed18:	f002 f8ec 	bl	8010ef4 <__ssrefill_r>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d0f7      	beq.n	800ed10 <__ssvfscanf_r+0xd44>
 800ed20:	2300      	movs	r3, #0
 800ed22:	6a3a      	ldr	r2, [r7, #32]
 800ed24:	7013      	strb	r3, [r2, #0]
 800ed26:	1b55      	subs	r5, r2, r5
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	d009      	beq.n	800ed40 <__ssvfscanf_r+0xd74>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	1c69      	adds	r1, r5, #1
 800ed30:	428b      	cmp	r3, r1
 800ed32:	d905      	bls.n	800ed40 <__ssvfscanf_r+0xd74>
 800ed34:	6830      	ldr	r0, [r6, #0]
 800ed36:	f001 fc43 	bl	80105c0 <realloc>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d000      	beq.n	800ed40 <__ssvfscanf_r+0xd74>
 800ed3e:	6030      	str	r0, [r6, #0]
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	195b      	adds	r3, r3, r5
 800ed44:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	3301      	adds	r3, #1
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed4c:	e63c      	b.n	800e9c8 <__ssvfscanf_r+0x9fc>
 800ed4e:	22ae      	movs	r2, #174	; 0xae
 800ed50:	2100      	movs	r1, #0
 800ed52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed54:	0052      	lsls	r2, r2, #1
 800ed56:	3b01      	subs	r3, #1
 800ed58:	6239      	str	r1, [r7, #32]
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d906      	bls.n	800ed6c <__ssvfscanf_r+0xda0>
 800ed5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed60:	3b5e      	subs	r3, #94	; 0x5e
 800ed62:	3bff      	subs	r3, #255	; 0xff
 800ed64:	623b      	str	r3, [r7, #32]
 800ed66:	235e      	movs	r3, #94	; 0x5e
 800ed68:	33ff      	adds	r3, #255	; 0xff
 800ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed6c:	24d8      	movs	r4, #216	; 0xd8
 800ed6e:	2300      	movs	r3, #0
 800ed70:	2248      	movs	r2, #72	; 0x48
 800ed72:	0124      	lsls	r4, r4, #4
 800ed74:	4334      	orrs	r4, r6
 800ed76:	2680      	movs	r6, #128	; 0x80
 800ed78:	61fb      	str	r3, [r7, #28]
 800ed7a:	3319      	adds	r3, #25
 800ed7c:	33ff      	adds	r3, #255	; 0xff
 800ed7e:	189b      	adds	r3, r3, r2
 800ed80:	19dd      	adds	r5, r3, r7
 800ed82:	00b6      	lsls	r6, r6, #2
 800ed84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	7813      	ldrb	r3, [r2, #0]
 800ed8a:	2b39      	cmp	r3, #57	; 0x39
 800ed8c:	d80f      	bhi.n	800edae <__ssvfscanf_r+0xde2>
 800ed8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed90:	d91b      	bls.n	800edca <__ssvfscanf_r+0xdfe>
 800ed92:	0018      	movs	r0, r3
 800ed94:	382b      	subs	r0, #43	; 0x2b
 800ed96:	280e      	cmp	r0, #14
 800ed98:	d817      	bhi.n	800edca <__ssvfscanf_r+0xdfe>
 800ed9a:	f7f1 f9bb 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ed9e:	168f      	.short	0x168f
 800eda0:	5416168f 	.word	0x5416168f
 800eda4:	80808080 	.word	0x80808080
 800eda8:	87808080 	.word	0x87808080
 800edac:	87          	.byte	0x87
 800edad:	00          	.byte	0x00
 800edae:	2b66      	cmp	r3, #102	; 0x66
 800edb0:	d83a      	bhi.n	800ee28 <__ssvfscanf_r+0xe5c>
 800edb2:	2b60      	cmp	r3, #96	; 0x60
 800edb4:	d803      	bhi.n	800edbe <__ssvfscanf_r+0xdf2>
 800edb6:	2b46      	cmp	r3, #70	; 0x46
 800edb8:	d805      	bhi.n	800edc6 <__ssvfscanf_r+0xdfa>
 800edba:	2b40      	cmp	r3, #64	; 0x40
 800edbc:	d905      	bls.n	800edca <__ssvfscanf_r+0xdfe>
 800edbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edc0:	290a      	cmp	r1, #10
 800edc2:	dc71      	bgt.n	800eea8 <__ssvfscanf_r+0xedc>
 800edc4:	e001      	b.n	800edca <__ssvfscanf_r+0xdfe>
 800edc6:	2b58      	cmp	r3, #88	; 0x58
 800edc8:	d030      	beq.n	800ee2c <__ssvfscanf_r+0xe60>
 800edca:	05e3      	lsls	r3, r4, #23
 800edcc:	d515      	bpl.n	800edfa <__ssvfscanf_r+0xe2e>
 800edce:	238c      	movs	r3, #140	; 0x8c
 800edd0:	2248      	movs	r2, #72	; 0x48
 800edd2:	005b      	lsls	r3, r3, #1
 800edd4:	189b      	adds	r3, r3, r2
 800edd6:	19db      	adds	r3, r3, r7
 800edd8:	429d      	cmp	r5, r3
 800edda:	d905      	bls.n	800ede8 <__ssvfscanf_r+0xe1c>
 800eddc:	3d01      	subs	r5, #1
 800edde:	7829      	ldrb	r1, [r5, #0]
 800ede0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ede2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ede4:	f002 f84a 	bl	8010e7c <_sungetc_r>
 800ede8:	238c      	movs	r3, #140	; 0x8c
 800edea:	2248      	movs	r2, #72	; 0x48
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	189b      	adds	r3, r3, r2
 800edf0:	19db      	adds	r3, r3, r7
 800edf2:	429d      	cmp	r5, r3
 800edf4:	d101      	bne.n	800edfa <__ssvfscanf_r+0xe2e>
 800edf6:	f7ff f9e6 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800edfa:	2310      	movs	r3, #16
 800edfc:	0022      	movs	r2, r4
 800edfe:	401a      	ands	r2, r3
 800ee00:	421c      	tst	r4, r3
 800ee02:	d171      	bne.n	800eee8 <__ssvfscanf_r+0xf1c>
 800ee04:	218c      	movs	r1, #140	; 0x8c
 800ee06:	2048      	movs	r0, #72	; 0x48
 800ee08:	0049      	lsls	r1, r1, #1
 800ee0a:	1809      	adds	r1, r1, r0
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	697e      	ldr	r6, [r7, #20]
 800ee10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee12:	19c9      	adds	r1, r1, r7
 800ee14:	702a      	strb	r2, [r5, #0]
 800ee16:	47b0      	blx	r6
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	1d1e      	adds	r6, r3, #4
 800ee1c:	06a3      	lsls	r3, r4, #26
 800ee1e:	d559      	bpl.n	800eed4 <__ssvfscanf_r+0xf08>
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	6018      	str	r0, [r3, #0]
 800ee26:	e05b      	b.n	800eee0 <__ssvfscanf_r+0xf14>
 800ee28:	2b78      	cmp	r3, #120	; 0x78
 800ee2a:	d1ce      	bne.n	800edca <__ssvfscanf_r+0xdfe>
 800ee2c:	21c0      	movs	r1, #192	; 0xc0
 800ee2e:	00c9      	lsls	r1, r1, #3
 800ee30:	4021      	ands	r1, r4
 800ee32:	42b1      	cmp	r1, r6
 800ee34:	d1c9      	bne.n	800edca <__ssvfscanf_r+0xdfe>
 800ee36:	4934      	ldr	r1, [pc, #208]	; (800ef08 <__ssvfscanf_r+0xf3c>)
 800ee38:	4021      	ands	r1, r4
 800ee3a:	24a0      	movs	r4, #160	; 0xa0
 800ee3c:	00e4      	lsls	r4, r4, #3
 800ee3e:	430c      	orrs	r4, r1
 800ee40:	2110      	movs	r1, #16
 800ee42:	6279      	str	r1, [r7, #36]	; 0x24
 800ee44:	e00b      	b.n	800ee5e <__ssvfscanf_r+0xe92>
 800ee46:	0521      	lsls	r1, r4, #20
 800ee48:	d509      	bpl.n	800ee5e <__ssvfscanf_r+0xe92>
 800ee4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee4c:	2900      	cmp	r1, #0
 800ee4e:	d102      	bne.n	800ee56 <__ssvfscanf_r+0xe8a>
 800ee50:	3108      	adds	r1, #8
 800ee52:	4334      	orrs	r4, r6
 800ee54:	6279      	str	r1, [r7, #36]	; 0x24
 800ee56:	0561      	lsls	r1, r4, #21
 800ee58:	d504      	bpl.n	800ee64 <__ssvfscanf_r+0xe98>
 800ee5a:	492c      	ldr	r1, [pc, #176]	; (800ef0c <__ssvfscanf_r+0xf40>)
 800ee5c:	400c      	ands	r4, r1
 800ee5e:	702b      	strb	r3, [r5, #0]
 800ee60:	3501      	adds	r5, #1
 800ee62:	e00c      	b.n	800ee7e <__ssvfscanf_r+0xeb2>
 800ee64:	4b2a      	ldr	r3, [pc, #168]	; (800ef10 <__ssvfscanf_r+0xf44>)
 800ee66:	401c      	ands	r4, r3
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <__ssvfscanf_r+0xeac>
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	623b      	str	r3, [r7, #32]
 800ee72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee74:	3301      	adds	r3, #1
 800ee76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	61fb      	str	r3, [r7, #28]
 800ee7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	604b      	str	r3, [r1, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dd1c      	ble.n	800eec6 <__ssvfscanf_r+0xefa>
 800ee8c:	3201      	adds	r2, #1
 800ee8e:	600a      	str	r2, [r1, #0]
 800ee90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee92:	3b01      	subs	r3, #1
 800ee94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d000      	beq.n	800ee9c <__ssvfscanf_r+0xed0>
 800ee9a:	e773      	b.n	800ed84 <__ssvfscanf_r+0xdb8>
 800ee9c:	e795      	b.n	800edca <__ssvfscanf_r+0xdfe>
 800ee9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea0:	491c      	ldr	r1, [pc, #112]	; (800ef14 <__ssvfscanf_r+0xf48>)
 800eea2:	0040      	lsls	r0, r0, #1
 800eea4:	5e41      	ldrsh	r1, [r0, r1]
 800eea6:	6279      	str	r1, [r7, #36]	; 0x24
 800eea8:	491b      	ldr	r1, [pc, #108]	; (800ef18 <__ssvfscanf_r+0xf4c>)
 800eeaa:	e7d7      	b.n	800ee5c <__ssvfscanf_r+0xe90>
 800eeac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeae:	4919      	ldr	r1, [pc, #100]	; (800ef14 <__ssvfscanf_r+0xf48>)
 800eeb0:	0040      	lsls	r0, r0, #1
 800eeb2:	5e41      	ldrsh	r1, [r0, r1]
 800eeb4:	6279      	str	r1, [r7, #36]	; 0x24
 800eeb6:	2908      	cmp	r1, #8
 800eeb8:	dcf6      	bgt.n	800eea8 <__ssvfscanf_r+0xedc>
 800eeba:	e786      	b.n	800edca <__ssvfscanf_r+0xdfe>
 800eebc:	2180      	movs	r1, #128	; 0x80
 800eebe:	420c      	tst	r4, r1
 800eec0:	d083      	beq.n	800edca <__ssvfscanf_r+0xdfe>
 800eec2:	438c      	bics	r4, r1
 800eec4:	e7cb      	b.n	800ee5e <__ssvfscanf_r+0xe92>
 800eec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eec8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eeca:	f002 f813 	bl	8010ef4 <__ssrefill_r>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d0de      	beq.n	800ee90 <__ssvfscanf_r+0xec4>
 800eed2:	e77a      	b.n	800edca <__ssvfscanf_r+0xdfe>
 800eed4:	2308      	movs	r3, #8
 800eed6:	421c      	tst	r4, r3
 800eed8:	d020      	beq.n	800ef1c <__ssvfscanf_r+0xf50>
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	7018      	strb	r0, [r3, #0]
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	633e      	str	r6, [r7, #48]	; 0x30
 800eee4:	3301      	adds	r3, #1
 800eee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eee8:	238c      	movs	r3, #140	; 0x8c
 800eeea:	2248      	movs	r2, #72	; 0x48
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	189b      	adds	r3, r3, r2
 800eef0:	19db      	adds	r3, r3, r7
 800eef2:	1aed      	subs	r5, r5, r3
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	18ed      	adds	r5, r5, r3
 800eef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefa:	195b      	adds	r3, r3, r5
 800eefc:	f7ff f92d 	bl	800e15a <__ssvfscanf_r+0x18e>
 800ef00:	08013dc9 	.word	0x08013dc9
 800ef04:	0000fff6 	.word	0x0000fff6
 800ef08:	fffffdff 	.word	0xfffffdff
 800ef0c:	fffffa7f 	.word	0xfffffa7f
 800ef10:	fffffc7f 	.word	0xfffffc7f
 800ef14:	080140f6 	.word	0x080140f6
 800ef18:	fffff47f 	.word	0xfffff47f
 800ef1c:	0763      	lsls	r3, r4, #29
 800ef1e:	d503      	bpl.n	800ef28 <__ssvfscanf_r+0xf5c>
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	8018      	strh	r0, [r3, #0]
 800ef26:	e7db      	b.n	800eee0 <__ssvfscanf_r+0xf14>
 800ef28:	2301      	movs	r3, #1
 800ef2a:	0022      	movs	r2, r4
 800ef2c:	401a      	ands	r2, r3
 800ef2e:	421c      	tst	r4, r3
 800ef30:	d000      	beq.n	800ef34 <__ssvfscanf_r+0xf68>
 800ef32:	e775      	b.n	800ee20 <__ssvfscanf_r+0xe54>
 800ef34:	07a4      	lsls	r4, r4, #30
 800ef36:	d400      	bmi.n	800ef3a <__ssvfscanf_r+0xf6e>
 800ef38:	e772      	b.n	800ee20 <__ssvfscanf_r+0xe54>
 800ef3a:	4ba8      	ldr	r3, [pc, #672]	; (800f1dc <__ssvfscanf_r+0x1210>)
 800ef3c:	6979      	ldr	r1, [r7, #20]
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	d10c      	bne.n	800ef5c <__ssvfscanf_r+0xf90>
 800ef42:	218c      	movs	r1, #140	; 0x8c
 800ef44:	2048      	movs	r0, #72	; 0x48
 800ef46:	0049      	lsls	r1, r1, #1
 800ef48:	1809      	adds	r1, r1, r0
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef4e:	19c9      	adds	r1, r1, r7
 800ef50:	f001 fecc 	bl	8010cec <_strtoull_r>
 800ef54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	c303      	stmia	r3!, {r0, r1}
 800ef5a:	e7c1      	b.n	800eee0 <__ssvfscanf_r+0xf14>
 800ef5c:	218c      	movs	r1, #140	; 0x8c
 800ef5e:	2048      	movs	r0, #72	; 0x48
 800ef60:	0049      	lsls	r1, r1, #1
 800ef62:	1809      	adds	r1, r1, r0
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef68:	19c9      	adds	r1, r1, r7
 800ef6a:	f001 fe0d 	bl	8010b88 <_strtoll_r>
 800ef6e:	e7f1      	b.n	800ef54 <__ssvfscanf_r+0xf88>
 800ef70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef72:	f000 fb9f 	bl	800f6b4 <_localeconv_r>
 800ef76:	22ae      	movs	r2, #174	; 0xae
 800ef78:	2100      	movs	r1, #0
 800ef7a:	6803      	ldr	r3, [r0, #0]
 800ef7c:	0052      	lsls	r2, r2, #1
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef82:	60f9      	str	r1, [r7, #12]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d906      	bls.n	800ef98 <__ssvfscanf_r+0xfcc>
 800ef8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8c:	3b5e      	subs	r3, #94	; 0x5e
 800ef8e:	3bff      	subs	r3, #255	; 0xff
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	235e      	movs	r3, #94	; 0x5e
 800ef94:	33ff      	adds	r3, #255	; 0xff
 800ef96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef98:	23f0      	movs	r3, #240	; 0xf0
 800ef9a:	00db      	lsls	r3, r3, #3
 800ef9c:	431e      	orrs	r6, r3
 800ef9e:	238c      	movs	r3, #140	; 0x8c
 800efa0:	2248      	movs	r2, #72	; 0x48
 800efa2:	2400      	movs	r4, #0
 800efa4:	005b      	lsls	r3, r3, #1
 800efa6:	189b      	adds	r3, r3, r2
 800efa8:	623c      	str	r4, [r7, #32]
 800efaa:	607c      	str	r4, [r7, #4]
 800efac:	60bc      	str	r4, [r7, #8]
 800efae:	61fc      	str	r4, [r7, #28]
 800efb0:	613c      	str	r4, [r7, #16]
 800efb2:	19dd      	adds	r5, r3, r7
 800efb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	781a      	ldrb	r2, [r3, #0]
 800efba:	0010      	movs	r0, r2
 800efbc:	382b      	subs	r0, #43	; 0x2b
 800efbe:	284e      	cmp	r0, #78	; 0x4e
 800efc0:	d900      	bls.n	800efc4 <__ssvfscanf_r+0xff8>
 800efc2:	e133      	b.n	800f22c <__ssvfscanf_r+0x1260>
 800efc4:	f7f1 f8b0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800efc8:	0132009b 	.word	0x0132009b
 800efcc:	0132009b 	.word	0x0132009b
 800efd0:	004f0132 	.word	0x004f0132
 800efd4:	00720072 	.word	0x00720072
 800efd8:	00720072 	.word	0x00720072
 800efdc:	00720072 	.word	0x00720072
 800efe0:	00720072 	.word	0x00720072
 800efe4:	01320072 	.word	0x01320072
 800efe8:	01320132 	.word	0x01320132
 800efec:	01320132 	.word	0x01320132
 800eff0:	01320132 	.word	0x01320132
 800eff4:	007b00bc 	.word	0x007b00bc
 800eff8:	007b007b 	.word	0x007b007b
 800effc:	00f7012f 	.word	0x00f7012f
 800f000:	01320132 	.word	0x01320132
 800f004:	013200e3 	.word	0x013200e3
 800f008:	01320132 	.word	0x01320132
 800f00c:	00a00132 	.word	0x00a00132
 800f010:	01120132 	.word	0x01120132
 800f014:	01320132 	.word	0x01320132
 800f018:	01010132 	.word	0x01010132
 800f01c:	01320132 	.word	0x01320132
 800f020:	00820132 	.word	0x00820132
 800f024:	01320105 	.word	0x01320105
 800f028:	01320132 	.word	0x01320132
 800f02c:	01320132 	.word	0x01320132
 800f030:	01320132 	.word	0x01320132
 800f034:	007b00bc 	.word	0x007b00bc
 800f038:	007b007b 	.word	0x007b007b
 800f03c:	00f7012f 	.word	0x00f7012f
 800f040:	01320132 	.word	0x01320132
 800f044:	013200e3 	.word	0x013200e3
 800f048:	01320132 	.word	0x01320132
 800f04c:	00a00132 	.word	0x00a00132
 800f050:	01120132 	.word	0x01120132
 800f054:	01320132 	.word	0x01320132
 800f058:	01010132 	.word	0x01010132
 800f05c:	01320132 	.word	0x01320132
 800f060:	00820132 	.word	0x00820132
 800f064:	0105      	.short	0x0105
 800f066:	05f1      	lsls	r1, r6, #23
 800f068:	d520      	bpl.n	800f0ac <__ssvfscanf_r+0x10e0>
 800f06a:	2280      	movs	r2, #128	; 0x80
 800f06c:	4396      	bics	r6, r2
 800f06e:	69fa      	ldr	r2, [r7, #28]
 800f070:	3201      	adds	r2, #1
 800f072:	61fa      	str	r2, [r7, #28]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	2a00      	cmp	r2, #0
 800f078:	d004      	beq.n	800f084 <__ssvfscanf_r+0x10b8>
 800f07a:	3a01      	subs	r2, #1
 800f07c:	60fa      	str	r2, [r7, #12]
 800f07e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f080:	3201      	adds	r2, #1
 800f082:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f088:	3a01      	subs	r2, #1
 800f08a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f08e:	3201      	adds	r2, #1
 800f090:	63ba      	str	r2, [r7, #56]	; 0x38
 800f092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f094:	6852      	ldr	r2, [r2, #4]
 800f096:	3a01      	subs	r2, #1
 800f098:	604a      	str	r2, [r1, #4]
 800f09a:	2a00      	cmp	r2, #0
 800f09c:	dc00      	bgt.n	800f0a0 <__ssvfscanf_r+0x10d4>
 800f09e:	e0d6      	b.n	800f24e <__ssvfscanf_r+0x1282>
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	600b      	str	r3, [r1, #0]
 800f0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d184      	bne.n	800efb4 <__ssvfscanf_r+0xfe8>
 800f0aa:	e057      	b.n	800f15c <__ssvfscanf_r+0x1190>
 800f0ac:	6a39      	ldr	r1, [r7, #32]
 800f0ae:	1909      	adds	r1, r1, r4
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	d153      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f0b4:	494a      	ldr	r1, [pc, #296]	; (800f1e0 <__ssvfscanf_r+0x1214>)
 800f0b6:	400e      	ands	r6, r1
 800f0b8:	702a      	strb	r2, [r5, #0]
 800f0ba:	3501      	adds	r5, #1
 800f0bc:	e7e2      	b.n	800f084 <__ssvfscanf_r+0x10b8>
 800f0be:	0531      	lsls	r1, r6, #20
 800f0c0:	d54c      	bpl.n	800f15c <__ssvfscanf_r+0x1190>
 800f0c2:	6a39      	ldr	r1, [r7, #32]
 800f0c4:	1909      	adds	r1, r1, r4
 800f0c6:	2900      	cmp	r1, #0
 800f0c8:	d040      	beq.n	800f14c <__ssvfscanf_r+0x1180>
 800f0ca:	e047      	b.n	800f15c <__ssvfscanf_r+0x1190>
 800f0cc:	2198      	movs	r1, #152	; 0x98
 800f0ce:	2080      	movs	r0, #128	; 0x80
 800f0d0:	0109      	lsls	r1, r1, #4
 800f0d2:	4031      	ands	r1, r6
 800f0d4:	0040      	lsls	r0, r0, #1
 800f0d6:	4281      	cmp	r1, r0
 800f0d8:	d140      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f0da:	69f9      	ldr	r1, [r7, #28]
 800f0dc:	2901      	cmp	r1, #1
 800f0de:	d13d      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f0e0:	2080      	movs	r0, #128	; 0x80
 800f0e2:	4940      	ldr	r1, [pc, #256]	; (800f1e4 <__ssvfscanf_r+0x1218>)
 800f0e4:	0100      	lsls	r0, r0, #4
 800f0e6:	400e      	ands	r6, r1
 800f0e8:	3132      	adds	r1, #50	; 0x32
 800f0ea:	31ff      	adds	r1, #255	; 0xff
 800f0ec:	7029      	strb	r1, [r5, #0]
 800f0ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0f0:	4306      	orrs	r6, r0
 800f0f2:	3901      	subs	r1, #1
 800f0f4:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f0f6:	3501      	adds	r5, #1
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	61f9      	str	r1, [r7, #28]
 800f0fc:	e7dc      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f0fe:	2180      	movs	r1, #128	; 0x80
 800f100:	420e      	tst	r6, r1
 800f102:	d02b      	beq.n	800f15c <__ssvfscanf_r+0x1190>
 800f104:	438e      	bics	r6, r1
 800f106:	e7d7      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f108:	6a39      	ldr	r1, [r7, #32]
 800f10a:	2900      	cmp	r1, #0
 800f10c:	d10d      	bne.n	800f12a <__ssvfscanf_r+0x115e>
 800f10e:	69f9      	ldr	r1, [r7, #28]
 800f110:	2900      	cmp	r1, #0
 800f112:	d10e      	bne.n	800f132 <__ssvfscanf_r+0x1166>
 800f114:	21e0      	movs	r1, #224	; 0xe0
 800f116:	0030      	movs	r0, r6
 800f118:	00c9      	lsls	r1, r1, #3
 800f11a:	4008      	ands	r0, r1
 800f11c:	4288      	cmp	r0, r1
 800f11e:	d108      	bne.n	800f132 <__ssvfscanf_r+0x1166>
 800f120:	4931      	ldr	r1, [pc, #196]	; (800f1e8 <__ssvfscanf_r+0x121c>)
 800f122:	400e      	ands	r6, r1
 800f124:	2101      	movs	r1, #1
 800f126:	6239      	str	r1, [r7, #32]
 800f128:	e7c6      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f12a:	6a39      	ldr	r1, [r7, #32]
 800f12c:	2902      	cmp	r1, #2
 800f12e:	d100      	bne.n	800f132 <__ssvfscanf_r+0x1166>
 800f130:	e089      	b.n	800f246 <__ssvfscanf_r+0x127a>
 800f132:	2c01      	cmp	r4, #1
 800f134:	d001      	beq.n	800f13a <__ssvfscanf_r+0x116e>
 800f136:	2c04      	cmp	r4, #4
 800f138:	d110      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f13a:	3401      	adds	r4, #1
 800f13c:	b2e4      	uxtb	r4, r4
 800f13e:	e7bb      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f140:	0531      	lsls	r1, r6, #20
 800f142:	d508      	bpl.n	800f156 <__ssvfscanf_r+0x118a>
 800f144:	6a39      	ldr	r1, [r7, #32]
 800f146:	1909      	adds	r1, r1, r4
 800f148:	2900      	cmp	r1, #0
 800f14a:	d104      	bne.n	800f156 <__ssvfscanf_r+0x118a>
 800f14c:	4824      	ldr	r0, [pc, #144]	; (800f1e0 <__ssvfscanf_r+0x1214>)
 800f14e:	000c      	movs	r4, r1
 800f150:	4006      	ands	r6, r0
 800f152:	6239      	str	r1, [r7, #32]
 800f154:	e7b0      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f156:	6a39      	ldr	r1, [r7, #32]
 800f158:	2901      	cmp	r1, #1
 800f15a:	d076      	beq.n	800f24a <__ssvfscanf_r+0x127e>
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d001      	beq.n	800f166 <__ssvfscanf_r+0x119a>
 800f162:	4b20      	ldr	r3, [pc, #128]	; (800f1e4 <__ssvfscanf_r+0x1218>)
 800f164:	401e      	ands	r6, r3
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	3b01      	subs	r3, #1
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d877      	bhi.n	800f25e <__ssvfscanf_r+0x1292>
 800f16e:	238c      	movs	r3, #140	; 0x8c
 800f170:	2248      	movs	r2, #72	; 0x48
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	189b      	adds	r3, r3, r2
 800f176:	19db      	adds	r3, r3, r7
 800f178:	429d      	cmp	r5, r3
 800f17a:	d801      	bhi.n	800f180 <__ssvfscanf_r+0x11b4>
 800f17c:	f7ff f823 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800f180:	3d01      	subs	r5, #1
 800f182:	7829      	ldrb	r1, [r5, #0]
 800f184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f186:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f188:	f001 fe78 	bl	8010e7c <_sungetc_r>
 800f18c:	e7ef      	b.n	800f16e <__ssvfscanf_r+0x11a2>
 800f18e:	2c00      	cmp	r4, #0
 800f190:	d10c      	bne.n	800f1ac <__ssvfscanf_r+0x11e0>
 800f192:	69f9      	ldr	r1, [r7, #28]
 800f194:	2900      	cmp	r1, #0
 800f196:	d1e4      	bne.n	800f162 <__ssvfscanf_r+0x1196>
 800f198:	21e0      	movs	r1, #224	; 0xe0
 800f19a:	0030      	movs	r0, r6
 800f19c:	00c9      	lsls	r1, r1, #3
 800f19e:	4008      	ands	r0, r1
 800f1a0:	4288      	cmp	r0, r1
 800f1a2:	d1e0      	bne.n	800f166 <__ssvfscanf_r+0x119a>
 800f1a4:	4910      	ldr	r1, [pc, #64]	; (800f1e8 <__ssvfscanf_r+0x121c>)
 800f1a6:	3401      	adds	r4, #1
 800f1a8:	400e      	ands	r6, r1
 800f1aa:	e785      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f1ac:	20fd      	movs	r0, #253	; 0xfd
 800f1ae:	1ee1      	subs	r1, r4, #3
 800f1b0:	4201      	tst	r1, r0
 800f1b2:	d1d3      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f1b4:	e7c1      	b.n	800f13a <__ssvfscanf_r+0x116e>
 800f1b6:	0531      	lsls	r1, r6, #20
 800f1b8:	d503      	bpl.n	800f1c2 <__ssvfscanf_r+0x11f6>
 800f1ba:	6a39      	ldr	r1, [r7, #32]
 800f1bc:	1909      	adds	r1, r1, r4
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	d0c4      	beq.n	800f14c <__ssvfscanf_r+0x1180>
 800f1c2:	2c02      	cmp	r4, #2
 800f1c4:	d1ca      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f1c6:	2403      	movs	r4, #3
 800f1c8:	e776      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f1ca:	2c06      	cmp	r4, #6
 800f1cc:	d1c6      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f1ce:	2407      	movs	r4, #7
 800f1d0:	e772      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f1d2:	2c07      	cmp	r4, #7
 800f1d4:	d1c2      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f1d6:	2408      	movs	r4, #8
 800f1d8:	e76e      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f1da:	46c0      	nop			; (mov r8, r8)
 800f1dc:	08010a25 	.word	0x08010a25
 800f1e0:	fffffe7f 	.word	0xfffffe7f
 800f1e4:	fffffeff 	.word	0xfffffeff
 800f1e8:	fffff87f 	.word	0xfffff87f
 800f1ec:	0531      	lsls	r1, r6, #20
 800f1ee:	d5b5      	bpl.n	800f15c <__ssvfscanf_r+0x1190>
 800f1f0:	21a0      	movs	r1, #160	; 0xa0
 800f1f2:	2080      	movs	r0, #128	; 0x80
 800f1f4:	00c9      	lsls	r1, r1, #3
 800f1f6:	00c0      	lsls	r0, r0, #3
 800f1f8:	4031      	ands	r1, r6
 800f1fa:	4281      	cmp	r1, r0
 800f1fc:	d004      	beq.n	800f208 <__ssvfscanf_r+0x123c>
 800f1fe:	4206      	tst	r6, r0
 800f200:	d0ac      	beq.n	800f15c <__ssvfscanf_r+0x1190>
 800f202:	69f9      	ldr	r1, [r7, #28]
 800f204:	2900      	cmp	r1, #0
 800f206:	d0ae      	beq.n	800f166 <__ssvfscanf_r+0x119a>
 800f208:	2180      	movs	r1, #128	; 0x80
 800f20a:	0089      	lsls	r1, r1, #2
 800f20c:	420e      	tst	r6, r1
 800f20e:	d104      	bne.n	800f21a <__ssvfscanf_r+0x124e>
 800f210:	69f9      	ldr	r1, [r7, #28]
 800f212:	6938      	ldr	r0, [r7, #16]
 800f214:	607d      	str	r5, [r7, #4]
 800f216:	1a09      	subs	r1, r1, r0
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	20c0      	movs	r0, #192	; 0xc0
 800f21c:	4973      	ldr	r1, [pc, #460]	; (800f3ec <__ssvfscanf_r+0x1420>)
 800f21e:	0040      	lsls	r0, r0, #1
 800f220:	400e      	ands	r6, r1
 800f222:	4306      	orrs	r6, r0
 800f224:	e768      	b.n	800f0f8 <__ssvfscanf_r+0x112c>
 800f226:	0531      	lsls	r1, r6, #20
 800f228:	d5e2      	bpl.n	800f1f0 <__ssvfscanf_r+0x1224>
 800f22a:	e74a      	b.n	800f0c2 <__ssvfscanf_r+0x10f6>
 800f22c:	6839      	ldr	r1, [r7, #0]
 800f22e:	7809      	ldrb	r1, [r1, #0]
 800f230:	4291      	cmp	r1, r2
 800f232:	d193      	bne.n	800f15c <__ssvfscanf_r+0x1190>
 800f234:	2180      	movs	r1, #128	; 0x80
 800f236:	0089      	lsls	r1, r1, #2
 800f238:	420e      	tst	r6, r1
 800f23a:	d08f      	beq.n	800f15c <__ssvfscanf_r+0x1190>
 800f23c:	496c      	ldr	r1, [pc, #432]	; (800f3f0 <__ssvfscanf_r+0x1424>)
 800f23e:	400e      	ands	r6, r1
 800f240:	69f9      	ldr	r1, [r7, #28]
 800f242:	6139      	str	r1, [r7, #16]
 800f244:	e738      	b.n	800f0b8 <__ssvfscanf_r+0x10ec>
 800f246:	2103      	movs	r1, #3
 800f248:	e76d      	b.n	800f126 <__ssvfscanf_r+0x115a>
 800f24a:	2102      	movs	r1, #2
 800f24c:	e76b      	b.n	800f126 <__ssvfscanf_r+0x115a>
 800f24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f250:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f252:	f001 fe4f 	bl	8010ef4 <__ssrefill_r>
 800f256:	2800      	cmp	r0, #0
 800f258:	d100      	bne.n	800f25c <__ssvfscanf_r+0x1290>
 800f25a:	e723      	b.n	800f0a4 <__ssvfscanf_r+0x10d8>
 800f25c:	e77e      	b.n	800f15c <__ssvfscanf_r+0x1190>
 800f25e:	1e63      	subs	r3, r4, #1
 800f260:	2b06      	cmp	r3, #6
 800f262:	d825      	bhi.n	800f2b0 <__ssvfscanf_r+0x12e4>
 800f264:	2c02      	cmp	r4, #2
 800f266:	d837      	bhi.n	800f2d8 <__ssvfscanf_r+0x130c>
 800f268:	238c      	movs	r3, #140	; 0x8c
 800f26a:	2248      	movs	r2, #72	; 0x48
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	189b      	adds	r3, r3, r2
 800f270:	19db      	adds	r3, r3, r7
 800f272:	429d      	cmp	r5, r3
 800f274:	d801      	bhi.n	800f27a <__ssvfscanf_r+0x12ae>
 800f276:	f7fe ffa6 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800f27a:	3d01      	subs	r5, #1
 800f27c:	7829      	ldrb	r1, [r5, #0]
 800f27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f282:	f001 fdfb 	bl	8010e7c <_sungetc_r>
 800f286:	e7ef      	b.n	800f268 <__ssvfscanf_r+0x129c>
 800f288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f28a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f28c:	3b01      	subs	r3, #1
 800f28e:	7819      	ldrb	r1, [r3, #0]
 800f290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f294:	f001 fdf2 	bl	8010e7c <_sungetc_r>
 800f298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29a:	6a3a      	ldr	r2, [r7, #32]
 800f29c:	189b      	adds	r3, r3, r2
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	d8f1      	bhi.n	800f288 <__ssvfscanf_r+0x12bc>
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	3c03      	subs	r4, #3
 800f2a8:	b2e4      	uxtb	r4, r4
 800f2aa:	1b1b      	subs	r3, r3, r4
 800f2ac:	1b2d      	subs	r5, r5, r4
 800f2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2b0:	05f3      	lsls	r3, r6, #23
 800f2b2:	d52f      	bpl.n	800f314 <__ssvfscanf_r+0x1348>
 800f2b4:	0573      	lsls	r3, r6, #21
 800f2b6:	d514      	bpl.n	800f2e2 <__ssvfscanf_r+0x1316>
 800f2b8:	238c      	movs	r3, #140	; 0x8c
 800f2ba:	2248      	movs	r2, #72	; 0x48
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	189b      	adds	r3, r3, r2
 800f2c0:	19db      	adds	r3, r3, r7
 800f2c2:	429d      	cmp	r5, r3
 800f2c4:	d801      	bhi.n	800f2ca <__ssvfscanf_r+0x12fe>
 800f2c6:	f7fe ff7e 	bl	800e1c6 <__ssvfscanf_r+0x1fa>
 800f2ca:	3d01      	subs	r5, #1
 800f2cc:	7829      	ldrb	r1, [r5, #0]
 800f2ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2d2:	f001 fdd3 	bl	8010e7c <_sungetc_r>
 800f2d6:	e7ef      	b.n	800f2b8 <__ssvfscanf_r+0x12ec>
 800f2d8:	1b63      	subs	r3, r4, r5
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f2de:	623b      	str	r3, [r7, #32]
 800f2e0:	e7da      	b.n	800f298 <__ssvfscanf_r+0x12cc>
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	1e6c      	subs	r4, r5, #1
 800f2e6:	7821      	ldrb	r1, [r4, #0]
 800f2e8:	3b01      	subs	r3, #1
 800f2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2ec:	2965      	cmp	r1, #101	; 0x65
 800f2ee:	d00a      	beq.n	800f306 <__ssvfscanf_r+0x133a>
 800f2f0:	2945      	cmp	r1, #69	; 0x45
 800f2f2:	d008      	beq.n	800f306 <__ssvfscanf_r+0x133a>
 800f2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2f8:	f001 fdc0 	bl	8010e7c <_sungetc_r>
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	1eac      	subs	r4, r5, #2
 800f300:	3b02      	subs	r3, #2
 800f302:	7821      	ldrb	r1, [r4, #0]
 800f304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f306:	0025      	movs	r5, r4
 800f308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f30a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f30c:	f001 fdb6 	bl	8010e7c <_sungetc_r>
 800f310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f312:	63bb      	str	r3, [r7, #56]	; 0x38
 800f314:	2310      	movs	r3, #16
 800f316:	0032      	movs	r2, r6
 800f318:	401a      	ands	r2, r3
 800f31a:	421e      	tst	r6, r3
 800f31c:	d001      	beq.n	800f322 <__ssvfscanf_r+0x1356>
 800f31e:	f7fe fe71 	bl	800e004 <__ssvfscanf_r+0x38>
 800f322:	23c0      	movs	r3, #192	; 0xc0
 800f324:	2180      	movs	r1, #128	; 0x80
 800f326:	00db      	lsls	r3, r3, #3
 800f328:	702a      	strb	r2, [r5, #0]
 800f32a:	4033      	ands	r3, r6
 800f32c:	00c9      	lsls	r1, r1, #3
 800f32e:	428b      	cmp	r3, r1
 800f330:	d11f      	bne.n	800f372 <__ssvfscanf_r+0x13a6>
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	69fa      	ldr	r2, [r7, #28]
 800f336:	69f9      	ldr	r1, [r7, #28]
 800f338:	1a9a      	subs	r2, r3, r2
 800f33a:	428b      	cmp	r3, r1
 800f33c:	d125      	bne.n	800f38a <__ssvfscanf_r+0x13be>
 800f33e:	238c      	movs	r3, #140	; 0x8c
 800f340:	2148      	movs	r1, #72	; 0x48
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	185b      	adds	r3, r3, r1
 800f346:	19d9      	adds	r1, r3, r7
 800f348:	2200      	movs	r2, #0
 800f34a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f34c:	f7fb ffca 	bl	800b2e4 <_strtod_r>
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	0004      	movs	r4, r0
 800f354:	3304      	adds	r3, #4
 800f356:	000d      	movs	r5, r1
 800f358:	623b      	str	r3, [r7, #32]
 800f35a:	07f3      	lsls	r3, r6, #31
 800f35c:	d523      	bpl.n	800f3a6 <__ssvfscanf_r+0x13da>
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	601c      	str	r4, [r3, #0]
 800f364:	605d      	str	r5, [r3, #4]
 800f366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f368:	3301      	adds	r3, #1
 800f36a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f36c:	6a3b      	ldr	r3, [r7, #32]
 800f36e:	f7fe ffa5 	bl	800e2bc <__ssvfscanf_r+0x2f0>
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d0e2      	beq.n	800f33e <__ssvfscanf_r+0x1372>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f37c:	1c59      	adds	r1, r3, #1
 800f37e:	230a      	movs	r3, #10
 800f380:	f7fc f84c 	bl	800b41c <_strtol_r>
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	687d      	ldr	r5, [r7, #4]
 800f388:	1ac2      	subs	r2, r0, r3
 800f38a:	2148      	movs	r1, #72	; 0x48
 800f38c:	4b19      	ldr	r3, [pc, #100]	; (800f3f4 <__ssvfscanf_r+0x1428>)
 800f38e:	185b      	adds	r3, r3, r1
 800f390:	19db      	adds	r3, r3, r7
 800f392:	429d      	cmp	r5, r3
 800f394:	d302      	bcc.n	800f39c <__ssvfscanf_r+0x13d0>
 800f396:	4b18      	ldr	r3, [pc, #96]	; (800f3f8 <__ssvfscanf_r+0x142c>)
 800f398:	185b      	adds	r3, r3, r1
 800f39a:	19dd      	adds	r5, r3, r7
 800f39c:	0028      	movs	r0, r5
 800f39e:	4917      	ldr	r1, [pc, #92]	; (800f3fc <__ssvfscanf_r+0x1430>)
 800f3a0:	f7fc f944 	bl	800b62c <sprintf>
 800f3a4:	e7cb      	b.n	800f33e <__ssvfscanf_r+0x1372>
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ac:	07b6      	lsls	r6, r6, #30
 800f3ae:	d4d8      	bmi.n	800f362 <__ssvfscanf_r+0x1396>
 800f3b0:	0002      	movs	r2, r0
 800f3b2:	000b      	movs	r3, r1
 800f3b4:	f7f2 ff9e 	bl	80022f4 <__aeabi_dcmpun>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d005      	beq.n	800f3c8 <__ssvfscanf_r+0x13fc>
 800f3bc:	4810      	ldr	r0, [pc, #64]	; (800f400 <__ssvfscanf_r+0x1434>)
 800f3be:	f7fc fabf 	bl	800b940 <nanf>
 800f3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3c4:	6018      	str	r0, [r3, #0]
 800f3c6:	e7ce      	b.n	800f366 <__ssvfscanf_r+0x139a>
 800f3c8:	0020      	movs	r0, r4
 800f3ca:	0029      	movs	r1, r5
 800f3cc:	f7f3 f83c 	bl	8002448 <__aeabi_d2f>
 800f3d0:	e7f7      	b.n	800f3c2 <__ssvfscanf_r+0x13f6>
 800f3d2:	00a3      	lsls	r3, r4, #2
 800f3d4:	18ed      	adds	r5, r5, r3
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	3401      	adds	r4, #1
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	f7fa ff32 	bl	800a244 <free>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	682b      	ldr	r3, [r5, #0]
 800f3e4:	601a      	str	r2, [r3, #0]
 800f3e6:	f7fe ffc3 	bl	800e370 <__ssvfscanf_r+0x3a4>
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	fffff07f 	.word	0xfffff07f
 800f3f0:	fffffd7f 	.word	0xfffffd7f
 800f3f4:	0000026b 	.word	0x0000026b
 800f3f8:	0000026a 	.word	0x0000026a
 800f3fc:	080140f0 	.word	0x080140f0
 800f400:	08014153 	.word	0x08014153

0800f404 <_fclose_r>:
 800f404:	b570      	push	{r4, r5, r6, lr}
 800f406:	0005      	movs	r5, r0
 800f408:	1e0c      	subs	r4, r1, #0
 800f40a:	d102      	bne.n	800f412 <_fclose_r+0xe>
 800f40c:	2600      	movs	r6, #0
 800f40e:	0030      	movs	r0, r6
 800f410:	bd70      	pop	{r4, r5, r6, pc}
 800f412:	2800      	cmp	r0, #0
 800f414:	d004      	beq.n	800f420 <_fclose_r+0x1c>
 800f416:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d101      	bne.n	800f420 <_fclose_r+0x1c>
 800f41c:	f7fc f89e 	bl	800b55c <__sinit>
 800f420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f422:	07db      	lsls	r3, r3, #31
 800f424:	d405      	bmi.n	800f432 <_fclose_r+0x2e>
 800f426:	89a3      	ldrh	r3, [r4, #12]
 800f428:	059b      	lsls	r3, r3, #22
 800f42a:	d402      	bmi.n	800f432 <_fclose_r+0x2e>
 800f42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f42e:	f7fc fa6b 	bl	800b908 <__retarget_lock_acquire_recursive>
 800f432:	220c      	movs	r2, #12
 800f434:	5ea3      	ldrsh	r3, [r4, r2]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d109      	bne.n	800f44e <_fclose_r+0x4a>
 800f43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f43c:	3301      	adds	r3, #1
 800f43e:	0016      	movs	r6, r2
 800f440:	401e      	ands	r6, r3
 800f442:	421a      	tst	r2, r3
 800f444:	d1e2      	bne.n	800f40c <_fclose_r+0x8>
 800f446:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f448:	f7fc fa5f 	bl	800b90a <__retarget_lock_release_recursive>
 800f44c:	e7df      	b.n	800f40e <_fclose_r+0xa>
 800f44e:	0021      	movs	r1, r4
 800f450:	0028      	movs	r0, r5
 800f452:	f000 f837 	bl	800f4c4 <__sflush_r>
 800f456:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f458:	0006      	movs	r6, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d006      	beq.n	800f46c <_fclose_r+0x68>
 800f45e:	0028      	movs	r0, r5
 800f460:	69e1      	ldr	r1, [r4, #28]
 800f462:	4798      	blx	r3
 800f464:	2800      	cmp	r0, #0
 800f466:	da01      	bge.n	800f46c <_fclose_r+0x68>
 800f468:	2601      	movs	r6, #1
 800f46a:	4276      	negs	r6, r6
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	061b      	lsls	r3, r3, #24
 800f470:	d503      	bpl.n	800f47a <_fclose_r+0x76>
 800f472:	0028      	movs	r0, r5
 800f474:	6921      	ldr	r1, [r4, #16]
 800f476:	f7fc facf 	bl	800ba18 <_free_r>
 800f47a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f47c:	2900      	cmp	r1, #0
 800f47e:	d008      	beq.n	800f492 <_fclose_r+0x8e>
 800f480:	0023      	movs	r3, r4
 800f482:	3340      	adds	r3, #64	; 0x40
 800f484:	4299      	cmp	r1, r3
 800f486:	d002      	beq.n	800f48e <_fclose_r+0x8a>
 800f488:	0028      	movs	r0, r5
 800f48a:	f7fc fac5 	bl	800ba18 <_free_r>
 800f48e:	2300      	movs	r3, #0
 800f490:	6323      	str	r3, [r4, #48]	; 0x30
 800f492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f494:	2900      	cmp	r1, #0
 800f496:	d004      	beq.n	800f4a2 <_fclose_r+0x9e>
 800f498:	0028      	movs	r0, r5
 800f49a:	f7fc fabd 	bl	800ba18 <_free_r>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	6463      	str	r3, [r4, #68]	; 0x44
 800f4a2:	f7fc f84b 	bl	800b53c <__sfp_lock_acquire>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4ac:	07db      	lsls	r3, r3, #31
 800f4ae:	d402      	bmi.n	800f4b6 <_fclose_r+0xb2>
 800f4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4b2:	f7fc fa2a 	bl	800b90a <__retarget_lock_release_recursive>
 800f4b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4b8:	f7fc fa25 	bl	800b906 <__retarget_lock_close_recursive>
 800f4bc:	f7fc f846 	bl	800b54c <__sfp_lock_release>
 800f4c0:	e7a5      	b.n	800f40e <_fclose_r+0xa>
	...

0800f4c4 <__sflush_r>:
 800f4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	5eca      	ldrsh	r2, [r1, r3]
 800f4ca:	000c      	movs	r4, r1
 800f4cc:	0005      	movs	r5, r0
 800f4ce:	b291      	uxth	r1, r2
 800f4d0:	0713      	lsls	r3, r2, #28
 800f4d2:	d464      	bmi.n	800f59e <__sflush_r+0xda>
 800f4d4:	2380      	movs	r3, #128	; 0x80
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	6862      	ldr	r2, [r4, #4]
 800f4dc:	81a3      	strh	r3, [r4, #12]
 800f4de:	2a00      	cmp	r2, #0
 800f4e0:	dc04      	bgt.n	800f4ec <__sflush_r+0x28>
 800f4e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f4e4:	2a00      	cmp	r2, #0
 800f4e6:	dc01      	bgt.n	800f4ec <__sflush_r+0x28>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4ec:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f4ee:	2f00      	cmp	r7, #0
 800f4f0:	d0fa      	beq.n	800f4e8 <__sflush_r+0x24>
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	2080      	movs	r0, #128	; 0x80
 800f4f6:	682e      	ldr	r6, [r5, #0]
 800f4f8:	602a      	str	r2, [r5, #0]
 800f4fa:	001a      	movs	r2, r3
 800f4fc:	0140      	lsls	r0, r0, #5
 800f4fe:	69e1      	ldr	r1, [r4, #28]
 800f500:	4002      	ands	r2, r0
 800f502:	4203      	tst	r3, r0
 800f504:	d038      	beq.n	800f578 <__sflush_r+0xb4>
 800f506:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f508:	89a3      	ldrh	r3, [r4, #12]
 800f50a:	075b      	lsls	r3, r3, #29
 800f50c:	d506      	bpl.n	800f51c <__sflush_r+0x58>
 800f50e:	6863      	ldr	r3, [r4, #4]
 800f510:	1ac0      	subs	r0, r0, r3
 800f512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <__sflush_r+0x58>
 800f518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f51a:	1ac0      	subs	r0, r0, r3
 800f51c:	0002      	movs	r2, r0
 800f51e:	2300      	movs	r3, #0
 800f520:	0028      	movs	r0, r5
 800f522:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f524:	69e1      	ldr	r1, [r4, #28]
 800f526:	47b8      	blx	r7
 800f528:	89a2      	ldrh	r2, [r4, #12]
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	d106      	bne.n	800f53c <__sflush_r+0x78>
 800f52e:	6829      	ldr	r1, [r5, #0]
 800f530:	291d      	cmp	r1, #29
 800f532:	d830      	bhi.n	800f596 <__sflush_r+0xd2>
 800f534:	4b2c      	ldr	r3, [pc, #176]	; (800f5e8 <__sflush_r+0x124>)
 800f536:	410b      	asrs	r3, r1
 800f538:	07db      	lsls	r3, r3, #31
 800f53a:	d42c      	bmi.n	800f596 <__sflush_r+0xd2>
 800f53c:	4b2b      	ldr	r3, [pc, #172]	; (800f5ec <__sflush_r+0x128>)
 800f53e:	4013      	ands	r3, r2
 800f540:	2200      	movs	r2, #0
 800f542:	6062      	str	r2, [r4, #4]
 800f544:	6922      	ldr	r2, [r4, #16]
 800f546:	b21b      	sxth	r3, r3
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	6022      	str	r2, [r4, #0]
 800f54c:	04db      	lsls	r3, r3, #19
 800f54e:	d505      	bpl.n	800f55c <__sflush_r+0x98>
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d102      	bne.n	800f55a <__sflush_r+0x96>
 800f554:	682b      	ldr	r3, [r5, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d100      	bne.n	800f55c <__sflush_r+0x98>
 800f55a:	6520      	str	r0, [r4, #80]	; 0x50
 800f55c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f55e:	602e      	str	r6, [r5, #0]
 800f560:	2900      	cmp	r1, #0
 800f562:	d0c1      	beq.n	800f4e8 <__sflush_r+0x24>
 800f564:	0023      	movs	r3, r4
 800f566:	3340      	adds	r3, #64	; 0x40
 800f568:	4299      	cmp	r1, r3
 800f56a:	d002      	beq.n	800f572 <__sflush_r+0xae>
 800f56c:	0028      	movs	r0, r5
 800f56e:	f7fc fa53 	bl	800ba18 <_free_r>
 800f572:	2000      	movs	r0, #0
 800f574:	6320      	str	r0, [r4, #48]	; 0x30
 800f576:	e7b8      	b.n	800f4ea <__sflush_r+0x26>
 800f578:	2301      	movs	r3, #1
 800f57a:	0028      	movs	r0, r5
 800f57c:	47b8      	blx	r7
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d1c2      	bne.n	800f508 <__sflush_r+0x44>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d0bf      	beq.n	800f508 <__sflush_r+0x44>
 800f588:	2b1d      	cmp	r3, #29
 800f58a:	d001      	beq.n	800f590 <__sflush_r+0xcc>
 800f58c:	2b16      	cmp	r3, #22
 800f58e:	d101      	bne.n	800f594 <__sflush_r+0xd0>
 800f590:	602e      	str	r6, [r5, #0]
 800f592:	e7a9      	b.n	800f4e8 <__sflush_r+0x24>
 800f594:	89a2      	ldrh	r2, [r4, #12]
 800f596:	2340      	movs	r3, #64	; 0x40
 800f598:	4313      	orrs	r3, r2
 800f59a:	81a3      	strh	r3, [r4, #12]
 800f59c:	e7a5      	b.n	800f4ea <__sflush_r+0x26>
 800f59e:	6926      	ldr	r6, [r4, #16]
 800f5a0:	2e00      	cmp	r6, #0
 800f5a2:	d0a1      	beq.n	800f4e8 <__sflush_r+0x24>
 800f5a4:	6827      	ldr	r7, [r4, #0]
 800f5a6:	6026      	str	r6, [r4, #0]
 800f5a8:	1bbb      	subs	r3, r7, r6
 800f5aa:	9301      	str	r3, [sp, #4]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	0789      	lsls	r1, r1, #30
 800f5b0:	d100      	bne.n	800f5b4 <__sflush_r+0xf0>
 800f5b2:	6963      	ldr	r3, [r4, #20]
 800f5b4:	60a3      	str	r3, [r4, #8]
 800f5b6:	9b01      	ldr	r3, [sp, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	dc00      	bgt.n	800f5be <__sflush_r+0xfa>
 800f5bc:	e794      	b.n	800f4e8 <__sflush_r+0x24>
 800f5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5c0:	0032      	movs	r2, r6
 800f5c2:	001f      	movs	r7, r3
 800f5c4:	0028      	movs	r0, r5
 800f5c6:	9b01      	ldr	r3, [sp, #4]
 800f5c8:	69e1      	ldr	r1, [r4, #28]
 800f5ca:	47b8      	blx	r7
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	dc06      	bgt.n	800f5de <__sflush_r+0x11a>
 800f5d0:	2340      	movs	r3, #64	; 0x40
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	89a2      	ldrh	r2, [r4, #12]
 800f5d6:	4240      	negs	r0, r0
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	81a3      	strh	r3, [r4, #12]
 800f5dc:	e785      	b.n	800f4ea <__sflush_r+0x26>
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	1836      	adds	r6, r6, r0
 800f5e2:	1a1b      	subs	r3, r3, r0
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	e7e6      	b.n	800f5b6 <__sflush_r+0xf2>
 800f5e8:	dfbffffe 	.word	0xdfbffffe
 800f5ec:	fffff7ff 	.word	0xfffff7ff

0800f5f0 <_fflush_r>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	0005      	movs	r5, r0
 800f5f4:	000c      	movs	r4, r1
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d004      	beq.n	800f604 <_fflush_r+0x14>
 800f5fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <_fflush_r+0x14>
 800f600:	f7fb ffac 	bl	800b55c <__sinit>
 800f604:	220c      	movs	r2, #12
 800f606:	5ea3      	ldrsh	r3, [r4, r2]
 800f608:	1e1e      	subs	r6, r3, #0
 800f60a:	d015      	beq.n	800f638 <_fflush_r+0x48>
 800f60c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f60e:	07d2      	lsls	r2, r2, #31
 800f610:	d404      	bmi.n	800f61c <_fflush_r+0x2c>
 800f612:	059b      	lsls	r3, r3, #22
 800f614:	d402      	bmi.n	800f61c <_fflush_r+0x2c>
 800f616:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f618:	f7fc f976 	bl	800b908 <__retarget_lock_acquire_recursive>
 800f61c:	0021      	movs	r1, r4
 800f61e:	0028      	movs	r0, r5
 800f620:	f7ff ff50 	bl	800f4c4 <__sflush_r>
 800f624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f626:	0006      	movs	r6, r0
 800f628:	07db      	lsls	r3, r3, #31
 800f62a:	d405      	bmi.n	800f638 <_fflush_r+0x48>
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	059b      	lsls	r3, r3, #22
 800f630:	d402      	bmi.n	800f638 <_fflush_r+0x48>
 800f632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f634:	f7fc f969 	bl	800b90a <__retarget_lock_release_recursive>
 800f638:	0030      	movs	r0, r6
 800f63a:	bd70      	pop	{r4, r5, r6, pc}

0800f63c <__sccl>:
 800f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63e:	780b      	ldrb	r3, [r1, #0]
 800f640:	0004      	movs	r4, r0
 800f642:	2b5e      	cmp	r3, #94	; 0x5e
 800f644:	d019      	beq.n	800f67a <__sccl+0x3e>
 800f646:	2200      	movs	r2, #0
 800f648:	1c4d      	adds	r5, r1, #1
 800f64a:	0021      	movs	r1, r4
 800f64c:	1c60      	adds	r0, r4, #1
 800f64e:	30ff      	adds	r0, #255	; 0xff
 800f650:	700a      	strb	r2, [r1, #0]
 800f652:	3101      	adds	r1, #1
 800f654:	4281      	cmp	r1, r0
 800f656:	d1fb      	bne.n	800f650 <__sccl+0x14>
 800f658:	1e68      	subs	r0, r5, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00c      	beq.n	800f678 <__sccl+0x3c>
 800f65e:	2101      	movs	r1, #1
 800f660:	262d      	movs	r6, #45	; 0x2d
 800f662:	404a      	eors	r2, r1
 800f664:	0028      	movs	r0, r5
 800f666:	54e2      	strb	r2, [r4, r3]
 800f668:	7801      	ldrb	r1, [r0, #0]
 800f66a:	1c45      	adds	r5, r0, #1
 800f66c:	292d      	cmp	r1, #45	; 0x2d
 800f66e:	d00c      	beq.n	800f68a <__sccl+0x4e>
 800f670:	295d      	cmp	r1, #93	; 0x5d
 800f672:	d01d      	beq.n	800f6b0 <__sccl+0x74>
 800f674:	2900      	cmp	r1, #0
 800f676:	d104      	bne.n	800f682 <__sccl+0x46>
 800f678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f67a:	2201      	movs	r2, #1
 800f67c:	784b      	ldrb	r3, [r1, #1]
 800f67e:	1c8d      	adds	r5, r1, #2
 800f680:	e7e3      	b.n	800f64a <__sccl+0xe>
 800f682:	000b      	movs	r3, r1
 800f684:	e7ee      	b.n	800f664 <__sccl+0x28>
 800f686:	0033      	movs	r3, r6
 800f688:	e7ec      	b.n	800f664 <__sccl+0x28>
 800f68a:	7841      	ldrb	r1, [r0, #1]
 800f68c:	295d      	cmp	r1, #93	; 0x5d
 800f68e:	d0fa      	beq.n	800f686 <__sccl+0x4a>
 800f690:	428b      	cmp	r3, r1
 800f692:	dcf8      	bgt.n	800f686 <__sccl+0x4a>
 800f694:	001d      	movs	r5, r3
 800f696:	3002      	adds	r0, #2
 800f698:	3501      	adds	r5, #1
 800f69a:	5562      	strb	r2, [r4, r5]
 800f69c:	42a9      	cmp	r1, r5
 800f69e:	dcfb      	bgt.n	800f698 <__sccl+0x5c>
 800f6a0:	2500      	movs	r5, #0
 800f6a2:	1c5f      	adds	r7, r3, #1
 800f6a4:	428b      	cmp	r3, r1
 800f6a6:	da01      	bge.n	800f6ac <__sccl+0x70>
 800f6a8:	1acd      	subs	r5, r1, r3
 800f6aa:	3d01      	subs	r5, #1
 800f6ac:	197b      	adds	r3, r7, r5
 800f6ae:	e7db      	b.n	800f668 <__sccl+0x2c>
 800f6b0:	0028      	movs	r0, r5
 800f6b2:	e7e1      	b.n	800f678 <__sccl+0x3c>

0800f6b4 <_localeconv_r>:
 800f6b4:	4800      	ldr	r0, [pc, #0]	; (800f6b8 <_localeconv_r+0x4>)
 800f6b6:	4770      	bx	lr
 800f6b8:	2000052c 	.word	0x2000052c

0800f6bc <__libc_fini_array>:
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	4c07      	ldr	r4, [pc, #28]	; (800f6dc <__libc_fini_array+0x20>)
 800f6c0:	4d07      	ldr	r5, [pc, #28]	; (800f6e0 <__libc_fini_array+0x24>)
 800f6c2:	1b64      	subs	r4, r4, r5
 800f6c4:	10a4      	asrs	r4, r4, #2
 800f6c6:	2c00      	cmp	r4, #0
 800f6c8:	d102      	bne.n	800f6d0 <__libc_fini_array+0x14>
 800f6ca:	f002 fdcd 	bl	8012268 <_fini>
 800f6ce:	bd70      	pop	{r4, r5, r6, pc}
 800f6d0:	3c01      	subs	r4, #1
 800f6d2:	00a3      	lsls	r3, r4, #2
 800f6d4:	58eb      	ldr	r3, [r5, r3]
 800f6d6:	4798      	blx	r3
 800f6d8:	e7f5      	b.n	800f6c6 <__libc_fini_array+0xa>
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	080141f0 	.word	0x080141f0
 800f6e0:	080141ec 	.word	0x080141ec

0800f6e4 <memchr>:
 800f6e4:	b2c9      	uxtb	r1, r1
 800f6e6:	1882      	adds	r2, r0, r2
 800f6e8:	4290      	cmp	r0, r2
 800f6ea:	d101      	bne.n	800f6f0 <memchr+0xc>
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	4770      	bx	lr
 800f6f0:	7803      	ldrb	r3, [r0, #0]
 800f6f2:	428b      	cmp	r3, r1
 800f6f4:	d0fb      	beq.n	800f6ee <memchr+0xa>
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	e7f6      	b.n	800f6e8 <memchr+0x4>
	...

0800f6fc <frexp>:
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	0014      	movs	r4, r2
 800f700:	2500      	movs	r5, #0
 800f702:	6025      	str	r5, [r4, #0]
 800f704:	4d10      	ldr	r5, [pc, #64]	; (800f748 <frexp+0x4c>)
 800f706:	004b      	lsls	r3, r1, #1
 800f708:	000a      	movs	r2, r1
 800f70a:	085b      	lsrs	r3, r3, #1
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dc1a      	bgt.n	800f746 <frexp+0x4a>
 800f710:	001d      	movs	r5, r3
 800f712:	4305      	orrs	r5, r0
 800f714:	d017      	beq.n	800f746 <frexp+0x4a>
 800f716:	4d0d      	ldr	r5, [pc, #52]	; (800f74c <frexp+0x50>)
 800f718:	4229      	tst	r1, r5
 800f71a:	d109      	bne.n	800f730 <frexp+0x34>
 800f71c:	2200      	movs	r2, #0
 800f71e:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <frexp+0x54>)
 800f720:	f7f1 ffa4 	bl	800166c <__aeabi_dmul>
 800f724:	2536      	movs	r5, #54	; 0x36
 800f726:	000a      	movs	r2, r1
 800f728:	004b      	lsls	r3, r1, #1
 800f72a:	426d      	negs	r5, r5
 800f72c:	085b      	lsrs	r3, r3, #1
 800f72e:	6025      	str	r5, [r4, #0]
 800f730:	4d08      	ldr	r5, [pc, #32]	; (800f754 <frexp+0x58>)
 800f732:	151b      	asrs	r3, r3, #20
 800f734:	195b      	adds	r3, r3, r5
 800f736:	6825      	ldr	r5, [r4, #0]
 800f738:	18eb      	adds	r3, r5, r3
 800f73a:	6023      	str	r3, [r4, #0]
 800f73c:	4b06      	ldr	r3, [pc, #24]	; (800f758 <frexp+0x5c>)
 800f73e:	401a      	ands	r2, r3
 800f740:	4b06      	ldr	r3, [pc, #24]	; (800f75c <frexp+0x60>)
 800f742:	4313      	orrs	r3, r2
 800f744:	0019      	movs	r1, r3
 800f746:	bd70      	pop	{r4, r5, r6, pc}
 800f748:	7fefffff 	.word	0x7fefffff
 800f74c:	7ff00000 	.word	0x7ff00000
 800f750:	43500000 	.word	0x43500000
 800f754:	fffffc02 	.word	0xfffffc02
 800f758:	800fffff 	.word	0x800fffff
 800f75c:	3fe00000 	.word	0x3fe00000

0800f760 <__register_exitproc>:
 800f760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f762:	4f1c      	ldr	r7, [pc, #112]	; (800f7d4 <__register_exitproc+0x74>)
 800f764:	0004      	movs	r4, r0
 800f766:	6838      	ldr	r0, [r7, #0]
 800f768:	0016      	movs	r6, r2
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	9100      	str	r1, [sp, #0]
 800f76e:	f7fc f8cb 	bl	800b908 <__retarget_lock_acquire_recursive>
 800f772:	4a19      	ldr	r2, [pc, #100]	; (800f7d8 <__register_exitproc+0x78>)
 800f774:	6813      	ldr	r3, [r2, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <__register_exitproc+0x1e>
 800f77a:	4b18      	ldr	r3, [pc, #96]	; (800f7dc <__register_exitproc+0x7c>)
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	6838      	ldr	r0, [r7, #0]
 800f782:	2a1f      	cmp	r2, #31
 800f784:	dd04      	ble.n	800f790 <__register_exitproc+0x30>
 800f786:	f7fc f8c0 	bl	800b90a <__retarget_lock_release_recursive>
 800f78a:	2001      	movs	r0, #1
 800f78c:	4240      	negs	r0, r0
 800f78e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f790:	2c00      	cmp	r4, #0
 800f792:	d014      	beq.n	800f7be <__register_exitproc+0x5e>
 800f794:	0091      	lsls	r1, r2, #2
 800f796:	1859      	adds	r1, r3, r1
 800f798:	000f      	movs	r7, r1
 800f79a:	3788      	adds	r7, #136	; 0x88
 800f79c:	603e      	str	r6, [r7, #0]
 800f79e:	2701      	movs	r7, #1
 800f7a0:	001e      	movs	r6, r3
 800f7a2:	4097      	lsls	r7, r2
 800f7a4:	3685      	adds	r6, #133	; 0x85
 800f7a6:	36ff      	adds	r6, #255	; 0xff
 800f7a8:	6875      	ldr	r5, [r6, #4]
 800f7aa:	31fc      	adds	r1, #252	; 0xfc
 800f7ac:	433d      	orrs	r5, r7
 800f7ae:	6075      	str	r5, [r6, #4]
 800f7b0:	9d01      	ldr	r5, [sp, #4]
 800f7b2:	60cd      	str	r5, [r1, #12]
 800f7b4:	2c02      	cmp	r4, #2
 800f7b6:	d102      	bne.n	800f7be <__register_exitproc+0x5e>
 800f7b8:	68b1      	ldr	r1, [r6, #8]
 800f7ba:	4339      	orrs	r1, r7
 800f7bc:	60b1      	str	r1, [r6, #8]
 800f7be:	1c51      	adds	r1, r2, #1
 800f7c0:	6059      	str	r1, [r3, #4]
 800f7c2:	3202      	adds	r2, #2
 800f7c4:	9900      	ldr	r1, [sp, #0]
 800f7c6:	0092      	lsls	r2, r2, #2
 800f7c8:	50d1      	str	r1, [r2, r3]
 800f7ca:	f7fc f89e 	bl	800b90a <__retarget_lock_release_recursive>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e7dd      	b.n	800f78e <__register_exitproc+0x2e>
 800f7d2:	46c0      	nop			; (mov r8, r8)
 800f7d4:	200006cc 	.word	0x200006cc
 800f7d8:	20000d74 	.word	0x20000d74
 800f7dc:	20000d78 	.word	0x20000d78

0800f7e0 <__assert_func>:
 800f7e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f7e2:	0014      	movs	r4, r2
 800f7e4:	001a      	movs	r2, r3
 800f7e6:	4b09      	ldr	r3, [pc, #36]	; (800f80c <__assert_func+0x2c>)
 800f7e8:	0005      	movs	r5, r0
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	000e      	movs	r6, r1
 800f7ee:	68d8      	ldr	r0, [r3, #12]
 800f7f0:	4b07      	ldr	r3, [pc, #28]	; (800f810 <__assert_func+0x30>)
 800f7f2:	2c00      	cmp	r4, #0
 800f7f4:	d101      	bne.n	800f7fa <__assert_func+0x1a>
 800f7f6:	4b07      	ldr	r3, [pc, #28]	; (800f814 <__assert_func+0x34>)
 800f7f8:	001c      	movs	r4, r3
 800f7fa:	4907      	ldr	r1, [pc, #28]	; (800f818 <__assert_func+0x38>)
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	9402      	str	r4, [sp, #8]
 800f800:	002b      	movs	r3, r5
 800f802:	9600      	str	r6, [sp, #0]
 800f804:	f001 faa6 	bl	8010d54 <fiprintf>
 800f808:	f002 fb8e 	bl	8011f28 <abort>
 800f80c:	200006c8 	.word	0x200006c8
 800f810:	08014118 	.word	0x08014118
 800f814:	08014153 	.word	0x08014153
 800f818:	08014125 	.word	0x08014125

0800f81c <_calloc_r>:
 800f81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81e:	2400      	movs	r4, #0
 800f820:	0c0b      	lsrs	r3, r1, #16
 800f822:	0c16      	lsrs	r6, r2, #16
 800f824:	42a3      	cmp	r3, r4
 800f826:	d133      	bne.n	800f890 <_calloc_r+0x74>
 800f828:	42a6      	cmp	r6, r4
 800f82a:	d121      	bne.n	800f870 <_calloc_r+0x54>
 800f82c:	b28b      	uxth	r3, r1
 800f82e:	b291      	uxth	r1, r2
 800f830:	4359      	muls	r1, r3
 800f832:	f7fa fd11 	bl	800a258 <_malloc_r>
 800f836:	1e05      	subs	r5, r0, #0
 800f838:	d033      	beq.n	800f8a2 <_calloc_r+0x86>
 800f83a:	0003      	movs	r3, r0
 800f83c:	3b08      	subs	r3, #8
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	2303      	movs	r3, #3
 800f842:	439a      	bics	r2, r3
 800f844:	3a04      	subs	r2, #4
 800f846:	2a24      	cmp	r2, #36	; 0x24
 800f848:	d832      	bhi.n	800f8b0 <_calloc_r+0x94>
 800f84a:	0003      	movs	r3, r0
 800f84c:	2a13      	cmp	r2, #19
 800f84e:	d90a      	bls.n	800f866 <_calloc_r+0x4a>
 800f850:	6004      	str	r4, [r0, #0]
 800f852:	6044      	str	r4, [r0, #4]
 800f854:	3308      	adds	r3, #8
 800f856:	2a1b      	cmp	r2, #27
 800f858:	d905      	bls.n	800f866 <_calloc_r+0x4a>
 800f85a:	6084      	str	r4, [r0, #8]
 800f85c:	60c4      	str	r4, [r0, #12]
 800f85e:	2a24      	cmp	r2, #36	; 0x24
 800f860:	d021      	beq.n	800f8a6 <_calloc_r+0x8a>
 800f862:	0003      	movs	r3, r0
 800f864:	3310      	adds	r3, #16
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
 800f86a:	605a      	str	r2, [r3, #4]
 800f86c:	609a      	str	r2, [r3, #8]
 800f86e:	e018      	b.n	800f8a2 <_calloc_r+0x86>
 800f870:	1c33      	adds	r3, r6, #0
 800f872:	1c0d      	adds	r5, r1, #0
 800f874:	b289      	uxth	r1, r1
 800f876:	b292      	uxth	r2, r2
 800f878:	434a      	muls	r2, r1
 800f87a:	b2ad      	uxth	r5, r5
 800f87c:	b299      	uxth	r1, r3
 800f87e:	4369      	muls	r1, r5
 800f880:	0c13      	lsrs	r3, r2, #16
 800f882:	18c9      	adds	r1, r1, r3
 800f884:	0c0b      	lsrs	r3, r1, #16
 800f886:	d107      	bne.n	800f898 <_calloc_r+0x7c>
 800f888:	0409      	lsls	r1, r1, #16
 800f88a:	b292      	uxth	r2, r2
 800f88c:	4311      	orrs	r1, r2
 800f88e:	e7d0      	b.n	800f832 <_calloc_r+0x16>
 800f890:	2e00      	cmp	r6, #0
 800f892:	d101      	bne.n	800f898 <_calloc_r+0x7c>
 800f894:	1c15      	adds	r5, r2, #0
 800f896:	e7ed      	b.n	800f874 <_calloc_r+0x58>
 800f898:	f7fc f80a 	bl	800b8b0 <__errno>
 800f89c:	230c      	movs	r3, #12
 800f89e:	2500      	movs	r5, #0
 800f8a0:	6003      	str	r3, [r0, #0]
 800f8a2:	0028      	movs	r0, r5
 800f8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a6:	0003      	movs	r3, r0
 800f8a8:	6104      	str	r4, [r0, #16]
 800f8aa:	3318      	adds	r3, #24
 800f8ac:	6144      	str	r4, [r0, #20]
 800f8ae:	e7da      	b.n	800f866 <_calloc_r+0x4a>
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	f7fb ff51 	bl	800b758 <memset>
 800f8b6:	e7f4      	b.n	800f8a2 <_calloc_r+0x86>

0800f8b8 <quorem>:
 800f8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ba:	6902      	ldr	r2, [r0, #16]
 800f8bc:	690b      	ldr	r3, [r1, #16]
 800f8be:	b089      	sub	sp, #36	; 0x24
 800f8c0:	0007      	movs	r7, r0
 800f8c2:	9104      	str	r1, [sp, #16]
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	db69      	blt.n	800f99e <quorem+0xe6>
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	009c      	lsls	r4, r3, #2
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	000b      	movs	r3, r1
 800f8d2:	3314      	adds	r3, #20
 800f8d4:	9306      	str	r3, [sp, #24]
 800f8d6:	191b      	adds	r3, r3, r4
 800f8d8:	9305      	str	r3, [sp, #20]
 800f8da:	003b      	movs	r3, r7
 800f8dc:	3314      	adds	r3, #20
 800f8de:	9303      	str	r3, [sp, #12]
 800f8e0:	191c      	adds	r4, r3, r4
 800f8e2:	9b05      	ldr	r3, [sp, #20]
 800f8e4:	6826      	ldr	r6, [r4, #0]
 800f8e6:	681d      	ldr	r5, [r3, #0]
 800f8e8:	0030      	movs	r0, r6
 800f8ea:	3501      	adds	r5, #1
 800f8ec:	0029      	movs	r1, r5
 800f8ee:	f7f0 fc25 	bl	800013c <__udivsi3>
 800f8f2:	9002      	str	r0, [sp, #8]
 800f8f4:	42ae      	cmp	r6, r5
 800f8f6:	d329      	bcc.n	800f94c <quorem+0x94>
 800f8f8:	9b06      	ldr	r3, [sp, #24]
 800f8fa:	2600      	movs	r6, #0
 800f8fc:	469c      	mov	ip, r3
 800f8fe:	9d03      	ldr	r5, [sp, #12]
 800f900:	9606      	str	r6, [sp, #24]
 800f902:	4662      	mov	r2, ip
 800f904:	ca08      	ldmia	r2!, {r3}
 800f906:	6828      	ldr	r0, [r5, #0]
 800f908:	4694      	mov	ip, r2
 800f90a:	9a02      	ldr	r2, [sp, #8]
 800f90c:	b299      	uxth	r1, r3
 800f90e:	4351      	muls	r1, r2
 800f910:	0c1b      	lsrs	r3, r3, #16
 800f912:	4353      	muls	r3, r2
 800f914:	1989      	adds	r1, r1, r6
 800f916:	0c0a      	lsrs	r2, r1, #16
 800f918:	189b      	adds	r3, r3, r2
 800f91a:	9307      	str	r3, [sp, #28]
 800f91c:	0c1e      	lsrs	r6, r3, #16
 800f91e:	9b06      	ldr	r3, [sp, #24]
 800f920:	b282      	uxth	r2, r0
 800f922:	18d2      	adds	r2, r2, r3
 800f924:	466b      	mov	r3, sp
 800f926:	b289      	uxth	r1, r1
 800f928:	8b9b      	ldrh	r3, [r3, #28]
 800f92a:	1a52      	subs	r2, r2, r1
 800f92c:	0c01      	lsrs	r1, r0, #16
 800f92e:	1ac9      	subs	r1, r1, r3
 800f930:	1413      	asrs	r3, r2, #16
 800f932:	18cb      	adds	r3, r1, r3
 800f934:	1419      	asrs	r1, r3, #16
 800f936:	b292      	uxth	r2, r2
 800f938:	041b      	lsls	r3, r3, #16
 800f93a:	4313      	orrs	r3, r2
 800f93c:	c508      	stmia	r5!, {r3}
 800f93e:	9b05      	ldr	r3, [sp, #20]
 800f940:	9106      	str	r1, [sp, #24]
 800f942:	4563      	cmp	r3, ip
 800f944:	d2dd      	bcs.n	800f902 <quorem+0x4a>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d030      	beq.n	800f9ae <quorem+0xf6>
 800f94c:	0038      	movs	r0, r7
 800f94e:	9904      	ldr	r1, [sp, #16]
 800f950:	f7fc ff04 	bl	800c75c <__mcmp>
 800f954:	2800      	cmp	r0, #0
 800f956:	db21      	blt.n	800f99c <quorem+0xe4>
 800f958:	0038      	movs	r0, r7
 800f95a:	2600      	movs	r6, #0
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	9c04      	ldr	r4, [sp, #16]
 800f960:	3301      	adds	r3, #1
 800f962:	9302      	str	r3, [sp, #8]
 800f964:	3014      	adds	r0, #20
 800f966:	3414      	adds	r4, #20
 800f968:	6803      	ldr	r3, [r0, #0]
 800f96a:	cc02      	ldmia	r4!, {r1}
 800f96c:	b29d      	uxth	r5, r3
 800f96e:	19ad      	adds	r5, r5, r6
 800f970:	b28a      	uxth	r2, r1
 800f972:	1aaa      	subs	r2, r5, r2
 800f974:	0c09      	lsrs	r1, r1, #16
 800f976:	0c1b      	lsrs	r3, r3, #16
 800f978:	1a5b      	subs	r3, r3, r1
 800f97a:	1411      	asrs	r1, r2, #16
 800f97c:	185b      	adds	r3, r3, r1
 800f97e:	141e      	asrs	r6, r3, #16
 800f980:	b292      	uxth	r2, r2
 800f982:	041b      	lsls	r3, r3, #16
 800f984:	4313      	orrs	r3, r2
 800f986:	c008      	stmia	r0!, {r3}
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	42a3      	cmp	r3, r4
 800f98c:	d2ec      	bcs.n	800f968 <quorem+0xb0>
 800f98e:	9b01      	ldr	r3, [sp, #4]
 800f990:	9a03      	ldr	r2, [sp, #12]
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	18d3      	adds	r3, r2, r3
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	2a00      	cmp	r2, #0
 800f99a:	d015      	beq.n	800f9c8 <quorem+0x110>
 800f99c:	9802      	ldr	r0, [sp, #8]
 800f99e:	b009      	add	sp, #36	; 0x24
 800f9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d106      	bne.n	800f9b6 <quorem+0xfe>
 800f9a8:	9b01      	ldr	r3, [sp, #4]
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	3c04      	subs	r4, #4
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	d3f5      	bcc.n	800f9a2 <quorem+0xea>
 800f9b6:	9b01      	ldr	r3, [sp, #4]
 800f9b8:	613b      	str	r3, [r7, #16]
 800f9ba:	e7c7      	b.n	800f94c <quorem+0x94>
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	d106      	bne.n	800f9d0 <quorem+0x118>
 800f9c2:	9a01      	ldr	r2, [sp, #4]
 800f9c4:	3a01      	subs	r2, #1
 800f9c6:	9201      	str	r2, [sp, #4]
 800f9c8:	9a03      	ldr	r2, [sp, #12]
 800f9ca:	3b04      	subs	r3, #4
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d3f5      	bcc.n	800f9bc <quorem+0x104>
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	613b      	str	r3, [r7, #16]
 800f9d4:	e7e2      	b.n	800f99c <quorem+0xe4>
	...

0800f9d8 <_dtoa_r>:
 800f9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9da:	0014      	movs	r4, r2
 800f9dc:	001d      	movs	r5, r3
 800f9de:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800f9e0:	b09d      	sub	sp, #116	; 0x74
 800f9e2:	9408      	str	r4, [sp, #32]
 800f9e4:	9509      	str	r5, [sp, #36]	; 0x24
 800f9e6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800f9e8:	9004      	str	r0, [sp, #16]
 800f9ea:	2900      	cmp	r1, #0
 800f9ec:	d009      	beq.n	800fa02 <_dtoa_r+0x2a>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f9f2:	4093      	lsls	r3, r2
 800f9f4:	604a      	str	r2, [r1, #4]
 800f9f6:	608b      	str	r3, [r1, #8]
 800f9f8:	f7fc fc56 	bl	800c2a8 <_Bfree>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	9a04      	ldr	r2, [sp, #16]
 800fa00:	6393      	str	r3, [r2, #56]	; 0x38
 800fa02:	2d00      	cmp	r5, #0
 800fa04:	da1e      	bge.n	800fa44 <_dtoa_r+0x6c>
 800fa06:	2301      	movs	r3, #1
 800fa08:	6033      	str	r3, [r6, #0]
 800fa0a:	006b      	lsls	r3, r5, #1
 800fa0c:	085b      	lsrs	r3, r3, #1
 800fa0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa12:	4bb5      	ldr	r3, [pc, #724]	; (800fce8 <_dtoa_r+0x310>)
 800fa14:	4ab4      	ldr	r2, [pc, #720]	; (800fce8 <_dtoa_r+0x310>)
 800fa16:	403b      	ands	r3, r7
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d116      	bne.n	800fa4a <_dtoa_r+0x72>
 800fa1c:	4bb3      	ldr	r3, [pc, #716]	; (800fcec <_dtoa_r+0x314>)
 800fa1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	033b      	lsls	r3, r7, #12
 800fa24:	0b1b      	lsrs	r3, r3, #12
 800fa26:	4323      	orrs	r3, r4
 800fa28:	d101      	bne.n	800fa2e <_dtoa_r+0x56>
 800fa2a:	f000 fdb2 	bl	8010592 <_dtoa_r+0xbba>
 800fa2e:	4bb0      	ldr	r3, [pc, #704]	; (800fcf0 <_dtoa_r+0x318>)
 800fa30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fa32:	9306      	str	r3, [sp, #24]
 800fa34:	2a00      	cmp	r2, #0
 800fa36:	d002      	beq.n	800fa3e <_dtoa_r+0x66>
 800fa38:	4bae      	ldr	r3, [pc, #696]	; (800fcf4 <_dtoa_r+0x31c>)
 800fa3a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fa3c:	6013      	str	r3, [r2, #0]
 800fa3e:	9806      	ldr	r0, [sp, #24]
 800fa40:	b01d      	add	sp, #116	; 0x74
 800fa42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa44:	2300      	movs	r3, #0
 800fa46:	6033      	str	r3, [r6, #0]
 800fa48:	e7e2      	b.n	800fa10 <_dtoa_r+0x38>
 800fa4a:	9a08      	ldr	r2, [sp, #32]
 800fa4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa4e:	9210      	str	r2, [sp, #64]	; 0x40
 800fa50:	9311      	str	r3, [sp, #68]	; 0x44
 800fa52:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fa54:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa56:	2200      	movs	r2, #0
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f7f0 fcf5 	bl	8000448 <__aeabi_dcmpeq>
 800fa5e:	1e06      	subs	r6, r0, #0
 800fa60:	d009      	beq.n	800fa76 <_dtoa_r+0x9e>
 800fa62:	2301      	movs	r3, #1
 800fa64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	4ba3      	ldr	r3, [pc, #652]	; (800fcf8 <_dtoa_r+0x320>)
 800fa6a:	9306      	str	r3, [sp, #24]
 800fa6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d0e5      	beq.n	800fa3e <_dtoa_r+0x66>
 800fa72:	4ba2      	ldr	r3, [pc, #648]	; (800fcfc <_dtoa_r+0x324>)
 800fa74:	e7e1      	b.n	800fa3a <_dtoa_r+0x62>
 800fa76:	ab1a      	add	r3, sp, #104	; 0x68
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	ab1b      	add	r3, sp, #108	; 0x6c
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	9804      	ldr	r0, [sp, #16]
 800fa80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa84:	f7fc ff86 	bl	800c994 <__d2b>
 800fa88:	007a      	lsls	r2, r7, #1
 800fa8a:	9005      	str	r0, [sp, #20]
 800fa8c:	0d52      	lsrs	r2, r2, #21
 800fa8e:	d100      	bne.n	800fa92 <_dtoa_r+0xba>
 800fa90:	e07b      	b.n	800fb8a <_dtoa_r+0x1b2>
 800fa92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa94:	9617      	str	r6, [sp, #92]	; 0x5c
 800fa96:	0319      	lsls	r1, r3, #12
 800fa98:	4b99      	ldr	r3, [pc, #612]	; (800fd00 <_dtoa_r+0x328>)
 800fa9a:	0b09      	lsrs	r1, r1, #12
 800fa9c:	430b      	orrs	r3, r1
 800fa9e:	4999      	ldr	r1, [pc, #612]	; (800fd04 <_dtoa_r+0x32c>)
 800faa0:	1857      	adds	r7, r2, r1
 800faa2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800faa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800faa6:	0019      	movs	r1, r3
 800faa8:	2200      	movs	r2, #0
 800faaa:	4b97      	ldr	r3, [pc, #604]	; (800fd08 <_dtoa_r+0x330>)
 800faac:	f7f2 f8a0 	bl	8001bf0 <__aeabi_dsub>
 800fab0:	4a96      	ldr	r2, [pc, #600]	; (800fd0c <_dtoa_r+0x334>)
 800fab2:	4b97      	ldr	r3, [pc, #604]	; (800fd10 <_dtoa_r+0x338>)
 800fab4:	f7f1 fdda 	bl	800166c <__aeabi_dmul>
 800fab8:	4a96      	ldr	r2, [pc, #600]	; (800fd14 <_dtoa_r+0x33c>)
 800faba:	4b97      	ldr	r3, [pc, #604]	; (800fd18 <_dtoa_r+0x340>)
 800fabc:	f7f0 fe7c 	bl	80007b8 <__aeabi_dadd>
 800fac0:	0004      	movs	r4, r0
 800fac2:	0038      	movs	r0, r7
 800fac4:	000d      	movs	r5, r1
 800fac6:	f7f2 fc69 	bl	800239c <__aeabi_i2d>
 800faca:	4a94      	ldr	r2, [pc, #592]	; (800fd1c <_dtoa_r+0x344>)
 800facc:	4b94      	ldr	r3, [pc, #592]	; (800fd20 <_dtoa_r+0x348>)
 800face:	f7f1 fdcd 	bl	800166c <__aeabi_dmul>
 800fad2:	0002      	movs	r2, r0
 800fad4:	000b      	movs	r3, r1
 800fad6:	0020      	movs	r0, r4
 800fad8:	0029      	movs	r1, r5
 800fada:	f7f0 fe6d 	bl	80007b8 <__aeabi_dadd>
 800fade:	0004      	movs	r4, r0
 800fae0:	000d      	movs	r5, r1
 800fae2:	f7f2 fc25 	bl	8002330 <__aeabi_d2iz>
 800fae6:	2200      	movs	r2, #0
 800fae8:	9003      	str	r0, [sp, #12]
 800faea:	2300      	movs	r3, #0
 800faec:	0020      	movs	r0, r4
 800faee:	0029      	movs	r1, r5
 800faf0:	f7f0 fcb0 	bl	8000454 <__aeabi_dcmplt>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d00b      	beq.n	800fb10 <_dtoa_r+0x138>
 800faf8:	9803      	ldr	r0, [sp, #12]
 800fafa:	f7f2 fc4f 	bl	800239c <__aeabi_i2d>
 800fafe:	002b      	movs	r3, r5
 800fb00:	0022      	movs	r2, r4
 800fb02:	f7f0 fca1 	bl	8000448 <__aeabi_dcmpeq>
 800fb06:	4243      	negs	r3, r0
 800fb08:	4158      	adcs	r0, r3
 800fb0a:	9b03      	ldr	r3, [sp, #12]
 800fb0c:	1a1b      	subs	r3, r3, r0
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	2301      	movs	r3, #1
 800fb12:	9316      	str	r3, [sp, #88]	; 0x58
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	2b16      	cmp	r3, #22
 800fb18:	d810      	bhi.n	800fb3c <_dtoa_r+0x164>
 800fb1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fb1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb1e:	9a03      	ldr	r2, [sp, #12]
 800fb20:	4b80      	ldr	r3, [pc, #512]	; (800fd24 <_dtoa_r+0x34c>)
 800fb22:	00d2      	lsls	r2, r2, #3
 800fb24:	189b      	adds	r3, r3, r2
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	f7f0 fc93 	bl	8000454 <__aeabi_dcmplt>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d047      	beq.n	800fbc2 <_dtoa_r+0x1ea>
 800fb32:	9b03      	ldr	r3, [sp, #12]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9316      	str	r3, [sp, #88]	; 0x58
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fb40:	920a      	str	r2, [sp, #40]	; 0x28
 800fb42:	1bdb      	subs	r3, r3, r7
 800fb44:	1e5a      	subs	r2, r3, #1
 800fb46:	d53e      	bpl.n	800fbc6 <_dtoa_r+0x1ee>
 800fb48:	2201      	movs	r2, #1
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	930a      	str	r3, [sp, #40]	; 0x28
 800fb4e:	2300      	movs	r3, #0
 800fb50:	930c      	str	r3, [sp, #48]	; 0x30
 800fb52:	9b03      	ldr	r3, [sp, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	db38      	blt.n	800fbca <_dtoa_r+0x1f2>
 800fb58:	9a03      	ldr	r2, [sp, #12]
 800fb5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb5c:	4694      	mov	ip, r2
 800fb5e:	4463      	add	r3, ip
 800fb60:	930c      	str	r3, [sp, #48]	; 0x30
 800fb62:	2300      	movs	r3, #0
 800fb64:	9213      	str	r2, [sp, #76]	; 0x4c
 800fb66:	930d      	str	r3, [sp, #52]	; 0x34
 800fb68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb6a:	2401      	movs	r4, #1
 800fb6c:	2b09      	cmp	r3, #9
 800fb6e:	d867      	bhi.n	800fc40 <_dtoa_r+0x268>
 800fb70:	2b05      	cmp	r3, #5
 800fb72:	dd02      	ble.n	800fb7a <_dtoa_r+0x1a2>
 800fb74:	2400      	movs	r4, #0
 800fb76:	3b04      	subs	r3, #4
 800fb78:	9322      	str	r3, [sp, #136]	; 0x88
 800fb7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb7c:	1e98      	subs	r0, r3, #2
 800fb7e:	2803      	cmp	r0, #3
 800fb80:	d867      	bhi.n	800fc52 <_dtoa_r+0x27a>
 800fb82:	f7f0 fac7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fb86:	3a2b      	.short	0x3a2b
 800fb88:	5b38      	.short	0x5b38
 800fb8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb8c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fb8e:	18f6      	adds	r6, r6, r3
 800fb90:	4b65      	ldr	r3, [pc, #404]	; (800fd28 <_dtoa_r+0x350>)
 800fb92:	18f2      	adds	r2, r6, r3
 800fb94:	2a20      	cmp	r2, #32
 800fb96:	dd0f      	ble.n	800fbb8 <_dtoa_r+0x1e0>
 800fb98:	2340      	movs	r3, #64	; 0x40
 800fb9a:	1a9b      	subs	r3, r3, r2
 800fb9c:	409f      	lsls	r7, r3
 800fb9e:	4b63      	ldr	r3, [pc, #396]	; (800fd2c <_dtoa_r+0x354>)
 800fba0:	0038      	movs	r0, r7
 800fba2:	18f3      	adds	r3, r6, r3
 800fba4:	40dc      	lsrs	r4, r3
 800fba6:	4320      	orrs	r0, r4
 800fba8:	f7f2 fc28 	bl	80023fc <__aeabi_ui2d>
 800fbac:	2201      	movs	r2, #1
 800fbae:	4b60      	ldr	r3, [pc, #384]	; (800fd30 <_dtoa_r+0x358>)
 800fbb0:	1e77      	subs	r7, r6, #1
 800fbb2:	18cb      	adds	r3, r1, r3
 800fbb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbb6:	e776      	b.n	800faa6 <_dtoa_r+0xce>
 800fbb8:	2320      	movs	r3, #32
 800fbba:	0020      	movs	r0, r4
 800fbbc:	1a9b      	subs	r3, r3, r2
 800fbbe:	4098      	lsls	r0, r3
 800fbc0:	e7f2      	b.n	800fba8 <_dtoa_r+0x1d0>
 800fbc2:	9016      	str	r0, [sp, #88]	; 0x58
 800fbc4:	e7ba      	b.n	800fb3c <_dtoa_r+0x164>
 800fbc6:	920c      	str	r2, [sp, #48]	; 0x30
 800fbc8:	e7c3      	b.n	800fb52 <_dtoa_r+0x17a>
 800fbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbcc:	9a03      	ldr	r2, [sp, #12]
 800fbce:	1a9b      	subs	r3, r3, r2
 800fbd0:	930a      	str	r3, [sp, #40]	; 0x28
 800fbd2:	4253      	negs	r3, r2
 800fbd4:	930d      	str	r3, [sp, #52]	; 0x34
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbda:	e7c5      	b.n	800fb68 <_dtoa_r+0x190>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fbe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbe4:	9307      	str	r3, [sp, #28]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	dc13      	bgt.n	800fc12 <_dtoa_r+0x23a>
 800fbea:	2301      	movs	r3, #1
 800fbec:	001a      	movs	r2, r3
 800fbee:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbf0:	9307      	str	r3, [sp, #28]
 800fbf2:	9223      	str	r2, [sp, #140]	; 0x8c
 800fbf4:	e00d      	b.n	800fc12 <_dtoa_r+0x23a>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e7f1      	b.n	800fbde <_dtoa_r+0x206>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc00:	4694      	mov	ip, r2
 800fc02:	9b03      	ldr	r3, [sp, #12]
 800fc04:	4463      	add	r3, ip
 800fc06:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc08:	3301      	adds	r3, #1
 800fc0a:	9307      	str	r3, [sp, #28]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	dc00      	bgt.n	800fc12 <_dtoa_r+0x23a>
 800fc10:	2301      	movs	r3, #1
 800fc12:	2100      	movs	r1, #0
 800fc14:	2204      	movs	r2, #4
 800fc16:	0010      	movs	r0, r2
 800fc18:	3014      	adds	r0, #20
 800fc1a:	4298      	cmp	r0, r3
 800fc1c:	d91d      	bls.n	800fc5a <_dtoa_r+0x282>
 800fc1e:	9b04      	ldr	r3, [sp, #16]
 800fc20:	0018      	movs	r0, r3
 800fc22:	63d9      	str	r1, [r3, #60]	; 0x3c
 800fc24:	f7fc fb18 	bl	800c258 <_Balloc>
 800fc28:	9006      	str	r0, [sp, #24]
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d118      	bne.n	800fc60 <_dtoa_r+0x288>
 800fc2e:	21b0      	movs	r1, #176	; 0xb0
 800fc30:	4b40      	ldr	r3, [pc, #256]	; (800fd34 <_dtoa_r+0x35c>)
 800fc32:	4841      	ldr	r0, [pc, #260]	; (800fd38 <_dtoa_r+0x360>)
 800fc34:	9a06      	ldr	r2, [sp, #24]
 800fc36:	31ff      	adds	r1, #255	; 0xff
 800fc38:	f7ff fdd2 	bl	800f7e0 <__assert_func>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e7dd      	b.n	800fbfc <_dtoa_r+0x224>
 800fc40:	2300      	movs	r3, #0
 800fc42:	940f      	str	r4, [sp, #60]	; 0x3c
 800fc44:	9322      	str	r3, [sp, #136]	; 0x88
 800fc46:	3b01      	subs	r3, #1
 800fc48:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc4a:	9307      	str	r3, [sp, #28]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	3313      	adds	r3, #19
 800fc50:	e7cf      	b.n	800fbf2 <_dtoa_r+0x21a>
 800fc52:	2301      	movs	r3, #1
 800fc54:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc56:	3b02      	subs	r3, #2
 800fc58:	e7f6      	b.n	800fc48 <_dtoa_r+0x270>
 800fc5a:	3101      	adds	r1, #1
 800fc5c:	0052      	lsls	r2, r2, #1
 800fc5e:	e7da      	b.n	800fc16 <_dtoa_r+0x23e>
 800fc60:	9b04      	ldr	r3, [sp, #16]
 800fc62:	9a06      	ldr	r2, [sp, #24]
 800fc64:	639a      	str	r2, [r3, #56]	; 0x38
 800fc66:	9b07      	ldr	r3, [sp, #28]
 800fc68:	2b0e      	cmp	r3, #14
 800fc6a:	d900      	bls.n	800fc6e <_dtoa_r+0x296>
 800fc6c:	e0e3      	b.n	800fe36 <_dtoa_r+0x45e>
 800fc6e:	2c00      	cmp	r4, #0
 800fc70:	d100      	bne.n	800fc74 <_dtoa_r+0x29c>
 800fc72:	e0e0      	b.n	800fe36 <_dtoa_r+0x45e>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	dd62      	ble.n	800fd40 <_dtoa_r+0x368>
 800fc7a:	210f      	movs	r1, #15
 800fc7c:	9a03      	ldr	r2, [sp, #12]
 800fc7e:	4b29      	ldr	r3, [pc, #164]	; (800fd24 <_dtoa_r+0x34c>)
 800fc80:	400a      	ands	r2, r1
 800fc82:	00d2      	lsls	r2, r2, #3
 800fc84:	189b      	adds	r3, r3, r2
 800fc86:	681e      	ldr	r6, [r3, #0]
 800fc88:	685f      	ldr	r7, [r3, #4]
 800fc8a:	9b03      	ldr	r3, [sp, #12]
 800fc8c:	2402      	movs	r4, #2
 800fc8e:	111d      	asrs	r5, r3, #4
 800fc90:	05db      	lsls	r3, r3, #23
 800fc92:	d50a      	bpl.n	800fcaa <_dtoa_r+0x2d2>
 800fc94:	4b29      	ldr	r3, [pc, #164]	; (800fd3c <_dtoa_r+0x364>)
 800fc96:	400d      	ands	r5, r1
 800fc98:	6a1a      	ldr	r2, [r3, #32]
 800fc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fc9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fca0:	f7f1 f8ea 	bl	8000e78 <__aeabi_ddiv>
 800fca4:	9008      	str	r0, [sp, #32]
 800fca6:	9109      	str	r1, [sp, #36]	; 0x24
 800fca8:	3401      	adds	r4, #1
 800fcaa:	4b24      	ldr	r3, [pc, #144]	; (800fd3c <_dtoa_r+0x364>)
 800fcac:	930e      	str	r3, [sp, #56]	; 0x38
 800fcae:	2d00      	cmp	r5, #0
 800fcb0:	d108      	bne.n	800fcc4 <_dtoa_r+0x2ec>
 800fcb2:	9808      	ldr	r0, [sp, #32]
 800fcb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fcb6:	0032      	movs	r2, r6
 800fcb8:	003b      	movs	r3, r7
 800fcba:	f7f1 f8dd 	bl	8000e78 <__aeabi_ddiv>
 800fcbe:	9008      	str	r0, [sp, #32]
 800fcc0:	9109      	str	r1, [sp, #36]	; 0x24
 800fcc2:	e058      	b.n	800fd76 <_dtoa_r+0x39e>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	421d      	tst	r5, r3
 800fcc8:	d009      	beq.n	800fcde <_dtoa_r+0x306>
 800fcca:	18e4      	adds	r4, r4, r3
 800fccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcce:	0030      	movs	r0, r6
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	0039      	movs	r1, r7
 800fcd6:	f7f1 fcc9 	bl	800166c <__aeabi_dmul>
 800fcda:	0006      	movs	r6, r0
 800fcdc:	000f      	movs	r7, r1
 800fcde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fce0:	106d      	asrs	r5, r5, #1
 800fce2:	3308      	adds	r3, #8
 800fce4:	e7e2      	b.n	800fcac <_dtoa_r+0x2d4>
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	7ff00000 	.word	0x7ff00000
 800fcec:	0000270f 	.word	0x0000270f
 800fcf0:	0801415d 	.word	0x0801415d
 800fcf4:	08014160 	.word	0x08014160
 800fcf8:	080140ce 	.word	0x080140ce
 800fcfc:	080140cf 	.word	0x080140cf
 800fd00:	3ff00000 	.word	0x3ff00000
 800fd04:	fffffc01 	.word	0xfffffc01
 800fd08:	3ff80000 	.word	0x3ff80000
 800fd0c:	636f4361 	.word	0x636f4361
 800fd10:	3fd287a7 	.word	0x3fd287a7
 800fd14:	8b60c8b3 	.word	0x8b60c8b3
 800fd18:	3fc68a28 	.word	0x3fc68a28
 800fd1c:	509f79fb 	.word	0x509f79fb
 800fd20:	3fd34413 	.word	0x3fd34413
 800fd24:	08013fc8 	.word	0x08013fc8
 800fd28:	00000432 	.word	0x00000432
 800fd2c:	00000412 	.word	0x00000412
 800fd30:	fe100000 	.word	0xfe100000
 800fd34:	08013ed1 	.word	0x08013ed1
 800fd38:	08014161 	.word	0x08014161
 800fd3c:	08013fa0 	.word	0x08013fa0
 800fd40:	9b03      	ldr	r3, [sp, #12]
 800fd42:	2402      	movs	r4, #2
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d016      	beq.n	800fd76 <_dtoa_r+0x39e>
 800fd48:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd4c:	220f      	movs	r2, #15
 800fd4e:	425d      	negs	r5, r3
 800fd50:	402a      	ands	r2, r5
 800fd52:	4bdd      	ldr	r3, [pc, #884]	; (80100c8 <_dtoa_r+0x6f0>)
 800fd54:	00d2      	lsls	r2, r2, #3
 800fd56:	189b      	adds	r3, r3, r2
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	f7f1 fc86 	bl	800166c <__aeabi_dmul>
 800fd60:	2701      	movs	r7, #1
 800fd62:	2300      	movs	r3, #0
 800fd64:	9008      	str	r0, [sp, #32]
 800fd66:	9109      	str	r1, [sp, #36]	; 0x24
 800fd68:	4ed8      	ldr	r6, [pc, #864]	; (80100cc <_dtoa_r+0x6f4>)
 800fd6a:	112d      	asrs	r5, r5, #4
 800fd6c:	2d00      	cmp	r5, #0
 800fd6e:	d000      	beq.n	800fd72 <_dtoa_r+0x39a>
 800fd70:	e091      	b.n	800fe96 <_dtoa_r+0x4be>
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1a3      	bne.n	800fcbe <_dtoa_r+0x2e6>
 800fd76:	9e08      	ldr	r6, [sp, #32]
 800fd78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d100      	bne.n	800fd82 <_dtoa_r+0x3aa>
 800fd80:	e094      	b.n	800feac <_dtoa_r+0x4d4>
 800fd82:	2200      	movs	r2, #0
 800fd84:	0030      	movs	r0, r6
 800fd86:	0039      	movs	r1, r7
 800fd88:	4bd1      	ldr	r3, [pc, #836]	; (80100d0 <_dtoa_r+0x6f8>)
 800fd8a:	f7f0 fb63 	bl	8000454 <__aeabi_dcmplt>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d100      	bne.n	800fd94 <_dtoa_r+0x3bc>
 800fd92:	e08b      	b.n	800feac <_dtoa_r+0x4d4>
 800fd94:	9b07      	ldr	r3, [sp, #28]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d100      	bne.n	800fd9c <_dtoa_r+0x3c4>
 800fd9a:	e087      	b.n	800feac <_dtoa_r+0x4d4>
 800fd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	dd45      	ble.n	800fe2e <_dtoa_r+0x456>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	3b01      	subs	r3, #1
 800fda8:	930e      	str	r3, [sp, #56]	; 0x38
 800fdaa:	0030      	movs	r0, r6
 800fdac:	4bc9      	ldr	r3, [pc, #804]	; (80100d4 <_dtoa_r+0x6fc>)
 800fdae:	0039      	movs	r1, r7
 800fdb0:	f7f1 fc5c 	bl	800166c <__aeabi_dmul>
 800fdb4:	9008      	str	r0, [sp, #32]
 800fdb6:	9109      	str	r1, [sp, #36]	; 0x24
 800fdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdba:	3401      	adds	r4, #1
 800fdbc:	0020      	movs	r0, r4
 800fdbe:	9e08      	ldr	r6, [sp, #32]
 800fdc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fdc2:	9312      	str	r3, [sp, #72]	; 0x48
 800fdc4:	f7f2 faea 	bl	800239c <__aeabi_i2d>
 800fdc8:	0032      	movs	r2, r6
 800fdca:	003b      	movs	r3, r7
 800fdcc:	f7f1 fc4e 	bl	800166c <__aeabi_dmul>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4bc1      	ldr	r3, [pc, #772]	; (80100d8 <_dtoa_r+0x700>)
 800fdd4:	f7f0 fcf0 	bl	80007b8 <__aeabi_dadd>
 800fdd8:	4ac0      	ldr	r2, [pc, #768]	; (80100dc <_dtoa_r+0x704>)
 800fdda:	9014      	str	r0, [sp, #80]	; 0x50
 800fddc:	9115      	str	r1, [sp, #84]	; 0x54
 800fdde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fde0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fde2:	4694      	mov	ip, r2
 800fde4:	9308      	str	r3, [sp, #32]
 800fde6:	9409      	str	r4, [sp, #36]	; 0x24
 800fde8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdea:	4463      	add	r3, ip
 800fdec:	9318      	str	r3, [sp, #96]	; 0x60
 800fdee:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d15e      	bne.n	800feb4 <_dtoa_r+0x4dc>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4bb9      	ldr	r3, [pc, #740]	; (80100e0 <_dtoa_r+0x708>)
 800fdfa:	0030      	movs	r0, r6
 800fdfc:	0039      	movs	r1, r7
 800fdfe:	f7f1 fef7 	bl	8001bf0 <__aeabi_dsub>
 800fe02:	9a08      	ldr	r2, [sp, #32]
 800fe04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fe06:	0004      	movs	r4, r0
 800fe08:	000d      	movs	r5, r1
 800fe0a:	f7f0 fb37 	bl	800047c <__aeabi_dcmpgt>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d000      	beq.n	800fe14 <_dtoa_r+0x43c>
 800fe12:	e2b3      	b.n	801037c <_dtoa_r+0x9a4>
 800fe14:	48b3      	ldr	r0, [pc, #716]	; (80100e4 <_dtoa_r+0x70c>)
 800fe16:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fe18:	4684      	mov	ip, r0
 800fe1a:	4461      	add	r1, ip
 800fe1c:	000b      	movs	r3, r1
 800fe1e:	0020      	movs	r0, r4
 800fe20:	0029      	movs	r1, r5
 800fe22:	9a08      	ldr	r2, [sp, #32]
 800fe24:	f7f0 fb16 	bl	8000454 <__aeabi_dcmplt>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d000      	beq.n	800fe2e <_dtoa_r+0x456>
 800fe2c:	e2a3      	b.n	8010376 <_dtoa_r+0x99e>
 800fe2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800fe32:	9308      	str	r3, [sp, #32]
 800fe34:	9409      	str	r4, [sp, #36]	; 0x24
 800fe36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	da00      	bge.n	800fe3e <_dtoa_r+0x466>
 800fe3c:	e179      	b.n	8010132 <_dtoa_r+0x75a>
 800fe3e:	9a03      	ldr	r2, [sp, #12]
 800fe40:	2a0e      	cmp	r2, #14
 800fe42:	dd00      	ble.n	800fe46 <_dtoa_r+0x46e>
 800fe44:	e175      	b.n	8010132 <_dtoa_r+0x75a>
 800fe46:	4ba0      	ldr	r3, [pc, #640]	; (80100c8 <_dtoa_r+0x6f0>)
 800fe48:	00d2      	lsls	r2, r2, #3
 800fe4a:	189b      	adds	r3, r3, r2
 800fe4c:	681e      	ldr	r6, [r3, #0]
 800fe4e:	685f      	ldr	r7, [r3, #4]
 800fe50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	db00      	blt.n	800fe58 <_dtoa_r+0x480>
 800fe56:	e0e5      	b.n	8010024 <_dtoa_r+0x64c>
 800fe58:	9b07      	ldr	r3, [sp, #28]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	dd00      	ble.n	800fe60 <_dtoa_r+0x488>
 800fe5e:	e0e1      	b.n	8010024 <_dtoa_r+0x64c>
 800fe60:	d000      	beq.n	800fe64 <_dtoa_r+0x48c>
 800fe62:	e288      	b.n	8010376 <_dtoa_r+0x99e>
 800fe64:	2200      	movs	r2, #0
 800fe66:	0030      	movs	r0, r6
 800fe68:	0039      	movs	r1, r7
 800fe6a:	4b9d      	ldr	r3, [pc, #628]	; (80100e0 <_dtoa_r+0x708>)
 800fe6c:	f7f1 fbfe 	bl	800166c <__aeabi_dmul>
 800fe70:	9a08      	ldr	r2, [sp, #32]
 800fe72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe74:	f7f0 fb0c 	bl	8000490 <__aeabi_dcmpge>
 800fe78:	9e07      	ldr	r6, [sp, #28]
 800fe7a:	0037      	movs	r7, r6
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d000      	beq.n	800fe82 <_dtoa_r+0x4aa>
 800fe80:	e25f      	b.n	8010342 <_dtoa_r+0x96a>
 800fe82:	9b06      	ldr	r3, [sp, #24]
 800fe84:	9a06      	ldr	r2, [sp, #24]
 800fe86:	3301      	adds	r3, #1
 800fe88:	9308      	str	r3, [sp, #32]
 800fe8a:	2331      	movs	r3, #49	; 0x31
 800fe8c:	7013      	strb	r3, [r2, #0]
 800fe8e:	9b03      	ldr	r3, [sp, #12]
 800fe90:	3301      	adds	r3, #1
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	e25a      	b.n	801034c <_dtoa_r+0x974>
 800fe96:	423d      	tst	r5, r7
 800fe98:	d005      	beq.n	800fea6 <_dtoa_r+0x4ce>
 800fe9a:	6832      	ldr	r2, [r6, #0]
 800fe9c:	6873      	ldr	r3, [r6, #4]
 800fe9e:	f7f1 fbe5 	bl	800166c <__aeabi_dmul>
 800fea2:	003b      	movs	r3, r7
 800fea4:	3401      	adds	r4, #1
 800fea6:	106d      	asrs	r5, r5, #1
 800fea8:	3608      	adds	r6, #8
 800feaa:	e75f      	b.n	800fd6c <_dtoa_r+0x394>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	930e      	str	r3, [sp, #56]	; 0x38
 800feb0:	9b07      	ldr	r3, [sp, #28]
 800feb2:	e783      	b.n	800fdbc <_dtoa_r+0x3e4>
 800feb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800feb6:	4b84      	ldr	r3, [pc, #528]	; (80100c8 <_dtoa_r+0x6f0>)
 800feb8:	3a01      	subs	r2, #1
 800feba:	00d2      	lsls	r2, r2, #3
 800febc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800febe:	189b      	adds	r3, r3, r2
 800fec0:	9c08      	ldr	r4, [sp, #32]
 800fec2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	2900      	cmp	r1, #0
 800feca:	d051      	beq.n	800ff70 <_dtoa_r+0x598>
 800fecc:	2000      	movs	r0, #0
 800fece:	4986      	ldr	r1, [pc, #536]	; (80100e8 <_dtoa_r+0x710>)
 800fed0:	f7f0 ffd2 	bl	8000e78 <__aeabi_ddiv>
 800fed4:	0022      	movs	r2, r4
 800fed6:	002b      	movs	r3, r5
 800fed8:	f7f1 fe8a 	bl	8001bf0 <__aeabi_dsub>
 800fedc:	9a06      	ldr	r2, [sp, #24]
 800fede:	0004      	movs	r4, r0
 800fee0:	4694      	mov	ip, r2
 800fee2:	000d      	movs	r5, r1
 800fee4:	9b06      	ldr	r3, [sp, #24]
 800fee6:	9314      	str	r3, [sp, #80]	; 0x50
 800fee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feea:	4463      	add	r3, ip
 800feec:	9318      	str	r3, [sp, #96]	; 0x60
 800feee:	0039      	movs	r1, r7
 800fef0:	0030      	movs	r0, r6
 800fef2:	f7f2 fa1d 	bl	8002330 <__aeabi_d2iz>
 800fef6:	9012      	str	r0, [sp, #72]	; 0x48
 800fef8:	f7f2 fa50 	bl	800239c <__aeabi_i2d>
 800fefc:	0002      	movs	r2, r0
 800fefe:	000b      	movs	r3, r1
 800ff00:	0030      	movs	r0, r6
 800ff02:	0039      	movs	r1, r7
 800ff04:	f7f1 fe74 	bl	8001bf0 <__aeabi_dsub>
 800ff08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	9308      	str	r3, [sp, #32]
 800ff10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff12:	0006      	movs	r6, r0
 800ff14:	3330      	adds	r3, #48	; 0x30
 800ff16:	7013      	strb	r3, [r2, #0]
 800ff18:	0022      	movs	r2, r4
 800ff1a:	002b      	movs	r3, r5
 800ff1c:	000f      	movs	r7, r1
 800ff1e:	f7f0 fa99 	bl	8000454 <__aeabi_dcmplt>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d174      	bne.n	8010010 <_dtoa_r+0x638>
 800ff26:	0032      	movs	r2, r6
 800ff28:	003b      	movs	r3, r7
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	4968      	ldr	r1, [pc, #416]	; (80100d0 <_dtoa_r+0x6f8>)
 800ff2e:	f7f1 fe5f 	bl	8001bf0 <__aeabi_dsub>
 800ff32:	0022      	movs	r2, r4
 800ff34:	002b      	movs	r3, r5
 800ff36:	f7f0 fa8d 	bl	8000454 <__aeabi_dcmplt>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d000      	beq.n	800ff40 <_dtoa_r+0x568>
 800ff3e:	e0d7      	b.n	80100f0 <_dtoa_r+0x718>
 800ff40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ff42:	9a08      	ldr	r2, [sp, #32]
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d100      	bne.n	800ff4a <_dtoa_r+0x572>
 800ff48:	e771      	b.n	800fe2e <_dtoa_r+0x456>
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	0020      	movs	r0, r4
 800ff4e:	0029      	movs	r1, r5
 800ff50:	4b60      	ldr	r3, [pc, #384]	; (80100d4 <_dtoa_r+0x6fc>)
 800ff52:	f7f1 fb8b 	bl	800166c <__aeabi_dmul>
 800ff56:	4b5f      	ldr	r3, [pc, #380]	; (80100d4 <_dtoa_r+0x6fc>)
 800ff58:	0004      	movs	r4, r0
 800ff5a:	000d      	movs	r5, r1
 800ff5c:	0030      	movs	r0, r6
 800ff5e:	0039      	movs	r1, r7
 800ff60:	2200      	movs	r2, #0
 800ff62:	f7f1 fb83 	bl	800166c <__aeabi_dmul>
 800ff66:	9b08      	ldr	r3, [sp, #32]
 800ff68:	0006      	movs	r6, r0
 800ff6a:	000f      	movs	r7, r1
 800ff6c:	9314      	str	r3, [sp, #80]	; 0x50
 800ff6e:	e7be      	b.n	800feee <_dtoa_r+0x516>
 800ff70:	0020      	movs	r0, r4
 800ff72:	0029      	movs	r1, r5
 800ff74:	f7f1 fb7a 	bl	800166c <__aeabi_dmul>
 800ff78:	9a06      	ldr	r2, [sp, #24]
 800ff7a:	9b06      	ldr	r3, [sp, #24]
 800ff7c:	4694      	mov	ip, r2
 800ff7e:	9308      	str	r3, [sp, #32]
 800ff80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff82:	9014      	str	r0, [sp, #80]	; 0x50
 800ff84:	9115      	str	r1, [sp, #84]	; 0x54
 800ff86:	4463      	add	r3, ip
 800ff88:	9319      	str	r3, [sp, #100]	; 0x64
 800ff8a:	0030      	movs	r0, r6
 800ff8c:	0039      	movs	r1, r7
 800ff8e:	f7f2 f9cf 	bl	8002330 <__aeabi_d2iz>
 800ff92:	9018      	str	r0, [sp, #96]	; 0x60
 800ff94:	f7f2 fa02 	bl	800239c <__aeabi_i2d>
 800ff98:	0002      	movs	r2, r0
 800ff9a:	000b      	movs	r3, r1
 800ff9c:	0030      	movs	r0, r6
 800ff9e:	0039      	movs	r1, r7
 800ffa0:	f7f1 fe26 	bl	8001bf0 <__aeabi_dsub>
 800ffa4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ffa6:	9b08      	ldr	r3, [sp, #32]
 800ffa8:	3630      	adds	r6, #48	; 0x30
 800ffaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ffac:	701e      	strb	r6, [r3, #0]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	0004      	movs	r4, r0
 800ffb2:	000d      	movs	r5, r1
 800ffb4:	9308      	str	r3, [sp, #32]
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d12d      	bne.n	8010016 <_dtoa_r+0x63e>
 800ffba:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ffbc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ffbe:	9a06      	ldr	r2, [sp, #24]
 800ffc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffc2:	4694      	mov	ip, r2
 800ffc4:	4463      	add	r3, ip
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	9308      	str	r3, [sp, #32]
 800ffca:	4b47      	ldr	r3, [pc, #284]	; (80100e8 <_dtoa_r+0x710>)
 800ffcc:	f7f0 fbf4 	bl	80007b8 <__aeabi_dadd>
 800ffd0:	0002      	movs	r2, r0
 800ffd2:	000b      	movs	r3, r1
 800ffd4:	0020      	movs	r0, r4
 800ffd6:	0029      	movs	r1, r5
 800ffd8:	f7f0 fa50 	bl	800047c <__aeabi_dcmpgt>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d000      	beq.n	800ffe2 <_dtoa_r+0x60a>
 800ffe0:	e086      	b.n	80100f0 <_dtoa_r+0x718>
 800ffe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	493f      	ldr	r1, [pc, #252]	; (80100e8 <_dtoa_r+0x710>)
 800ffea:	f7f1 fe01 	bl	8001bf0 <__aeabi_dsub>
 800ffee:	0002      	movs	r2, r0
 800fff0:	000b      	movs	r3, r1
 800fff2:	0020      	movs	r0, r4
 800fff4:	0029      	movs	r1, r5
 800fff6:	f7f0 fa2d 	bl	8000454 <__aeabi_dcmplt>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d100      	bne.n	8010000 <_dtoa_r+0x628>
 800fffe:	e716      	b.n	800fe2e <_dtoa_r+0x456>
 8010000:	9b08      	ldr	r3, [sp, #32]
 8010002:	001a      	movs	r2, r3
 8010004:	3a01      	subs	r2, #1
 8010006:	9208      	str	r2, [sp, #32]
 8010008:	7812      	ldrb	r2, [r2, #0]
 801000a:	2a30      	cmp	r2, #48	; 0x30
 801000c:	d0f8      	beq.n	8010000 <_dtoa_r+0x628>
 801000e:	9308      	str	r3, [sp, #32]
 8010010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010012:	9303      	str	r3, [sp, #12]
 8010014:	e046      	b.n	80100a4 <_dtoa_r+0x6cc>
 8010016:	2200      	movs	r2, #0
 8010018:	4b2e      	ldr	r3, [pc, #184]	; (80100d4 <_dtoa_r+0x6fc>)
 801001a:	f7f1 fb27 	bl	800166c <__aeabi_dmul>
 801001e:	0006      	movs	r6, r0
 8010020:	000f      	movs	r7, r1
 8010022:	e7b2      	b.n	800ff8a <_dtoa_r+0x5b2>
 8010024:	9b06      	ldr	r3, [sp, #24]
 8010026:	9a06      	ldr	r2, [sp, #24]
 8010028:	930a      	str	r3, [sp, #40]	; 0x28
 801002a:	9b07      	ldr	r3, [sp, #28]
 801002c:	9c08      	ldr	r4, [sp, #32]
 801002e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010030:	3b01      	subs	r3, #1
 8010032:	189b      	adds	r3, r3, r2
 8010034:	930b      	str	r3, [sp, #44]	; 0x2c
 8010036:	0032      	movs	r2, r6
 8010038:	003b      	movs	r3, r7
 801003a:	0020      	movs	r0, r4
 801003c:	0029      	movs	r1, r5
 801003e:	f7f0 ff1b 	bl	8000e78 <__aeabi_ddiv>
 8010042:	f7f2 f975 	bl	8002330 <__aeabi_d2iz>
 8010046:	9007      	str	r0, [sp, #28]
 8010048:	f7f2 f9a8 	bl	800239c <__aeabi_i2d>
 801004c:	0032      	movs	r2, r6
 801004e:	003b      	movs	r3, r7
 8010050:	f7f1 fb0c 	bl	800166c <__aeabi_dmul>
 8010054:	0002      	movs	r2, r0
 8010056:	000b      	movs	r3, r1
 8010058:	0020      	movs	r0, r4
 801005a:	0029      	movs	r1, r5
 801005c:	f7f1 fdc8 	bl	8001bf0 <__aeabi_dsub>
 8010060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010062:	001a      	movs	r2, r3
 8010064:	3201      	adds	r2, #1
 8010066:	920a      	str	r2, [sp, #40]	; 0x28
 8010068:	9208      	str	r2, [sp, #32]
 801006a:	9a07      	ldr	r2, [sp, #28]
 801006c:	3230      	adds	r2, #48	; 0x30
 801006e:	701a      	strb	r2, [r3, #0]
 8010070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010072:	429a      	cmp	r2, r3
 8010074:	d14f      	bne.n	8010116 <_dtoa_r+0x73e>
 8010076:	0002      	movs	r2, r0
 8010078:	000b      	movs	r3, r1
 801007a:	f7f0 fb9d 	bl	80007b8 <__aeabi_dadd>
 801007e:	0032      	movs	r2, r6
 8010080:	003b      	movs	r3, r7
 8010082:	0004      	movs	r4, r0
 8010084:	000d      	movs	r5, r1
 8010086:	f7f0 f9f9 	bl	800047c <__aeabi_dcmpgt>
 801008a:	2800      	cmp	r0, #0
 801008c:	d12e      	bne.n	80100ec <_dtoa_r+0x714>
 801008e:	0032      	movs	r2, r6
 8010090:	003b      	movs	r3, r7
 8010092:	0020      	movs	r0, r4
 8010094:	0029      	movs	r1, r5
 8010096:	f7f0 f9d7 	bl	8000448 <__aeabi_dcmpeq>
 801009a:	2800      	cmp	r0, #0
 801009c:	d002      	beq.n	80100a4 <_dtoa_r+0x6cc>
 801009e:	9b07      	ldr	r3, [sp, #28]
 80100a0:	07de      	lsls	r6, r3, #31
 80100a2:	d423      	bmi.n	80100ec <_dtoa_r+0x714>
 80100a4:	9905      	ldr	r1, [sp, #20]
 80100a6:	9804      	ldr	r0, [sp, #16]
 80100a8:	f7fc f8fe 	bl	800c2a8 <_Bfree>
 80100ac:	2300      	movs	r3, #0
 80100ae:	9a08      	ldr	r2, [sp, #32]
 80100b0:	7013      	strb	r3, [r2, #0]
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80100b6:	3301      	adds	r3, #1
 80100b8:	6013      	str	r3, [r2, #0]
 80100ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d100      	bne.n	80100c2 <_dtoa_r+0x6ea>
 80100c0:	e4bd      	b.n	800fa3e <_dtoa_r+0x66>
 80100c2:	9a08      	ldr	r2, [sp, #32]
 80100c4:	601a      	str	r2, [r3, #0]
 80100c6:	e4ba      	b.n	800fa3e <_dtoa_r+0x66>
 80100c8:	08013fc8 	.word	0x08013fc8
 80100cc:	08013fa0 	.word	0x08013fa0
 80100d0:	3ff00000 	.word	0x3ff00000
 80100d4:	40240000 	.word	0x40240000
 80100d8:	401c0000 	.word	0x401c0000
 80100dc:	fcc00000 	.word	0xfcc00000
 80100e0:	40140000 	.word	0x40140000
 80100e4:	7cc00000 	.word	0x7cc00000
 80100e8:	3fe00000 	.word	0x3fe00000
 80100ec:	9b03      	ldr	r3, [sp, #12]
 80100ee:	930e      	str	r3, [sp, #56]	; 0x38
 80100f0:	9b08      	ldr	r3, [sp, #32]
 80100f2:	9308      	str	r3, [sp, #32]
 80100f4:	3b01      	subs	r3, #1
 80100f6:	781a      	ldrb	r2, [r3, #0]
 80100f8:	2a39      	cmp	r2, #57	; 0x39
 80100fa:	d108      	bne.n	801010e <_dtoa_r+0x736>
 80100fc:	9a06      	ldr	r2, [sp, #24]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d1f7      	bne.n	80100f2 <_dtoa_r+0x71a>
 8010102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010104:	9906      	ldr	r1, [sp, #24]
 8010106:	3201      	adds	r2, #1
 8010108:	920e      	str	r2, [sp, #56]	; 0x38
 801010a:	2230      	movs	r2, #48	; 0x30
 801010c:	700a      	strb	r2, [r1, #0]
 801010e:	781a      	ldrb	r2, [r3, #0]
 8010110:	3201      	adds	r2, #1
 8010112:	701a      	strb	r2, [r3, #0]
 8010114:	e77c      	b.n	8010010 <_dtoa_r+0x638>
 8010116:	2200      	movs	r2, #0
 8010118:	4ba9      	ldr	r3, [pc, #676]	; (80103c0 <_dtoa_r+0x9e8>)
 801011a:	f7f1 faa7 	bl	800166c <__aeabi_dmul>
 801011e:	2200      	movs	r2, #0
 8010120:	2300      	movs	r3, #0
 8010122:	0004      	movs	r4, r0
 8010124:	000d      	movs	r5, r1
 8010126:	f7f0 f98f 	bl	8000448 <__aeabi_dcmpeq>
 801012a:	2800      	cmp	r0, #0
 801012c:	d100      	bne.n	8010130 <_dtoa_r+0x758>
 801012e:	e782      	b.n	8010036 <_dtoa_r+0x65e>
 8010130:	e7b8      	b.n	80100a4 <_dtoa_r+0x6cc>
 8010132:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010134:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010138:	2f00      	cmp	r7, #0
 801013a:	d012      	beq.n	8010162 <_dtoa_r+0x78a>
 801013c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801013e:	2a01      	cmp	r2, #1
 8010140:	dc6e      	bgt.n	8010220 <_dtoa_r+0x848>
 8010142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010144:	2a00      	cmp	r2, #0
 8010146:	d065      	beq.n	8010214 <_dtoa_r+0x83c>
 8010148:	4a9e      	ldr	r2, [pc, #632]	; (80103c4 <_dtoa_r+0x9ec>)
 801014a:	189b      	adds	r3, r3, r2
 801014c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801014e:	2101      	movs	r1, #1
 8010150:	18d2      	adds	r2, r2, r3
 8010152:	920a      	str	r2, [sp, #40]	; 0x28
 8010154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010156:	9804      	ldr	r0, [sp, #16]
 8010158:	18d3      	adds	r3, r2, r3
 801015a:	930c      	str	r3, [sp, #48]	; 0x30
 801015c:	f7fc f986 	bl	800c46c <__i2b>
 8010160:	0007      	movs	r7, r0
 8010162:	2c00      	cmp	r4, #0
 8010164:	d00e      	beq.n	8010184 <_dtoa_r+0x7ac>
 8010166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010168:	2b00      	cmp	r3, #0
 801016a:	dd0b      	ble.n	8010184 <_dtoa_r+0x7ac>
 801016c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801016e:	0023      	movs	r3, r4
 8010170:	4294      	cmp	r4, r2
 8010172:	dd00      	ble.n	8010176 <_dtoa_r+0x79e>
 8010174:	0013      	movs	r3, r2
 8010176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010178:	1ae4      	subs	r4, r4, r3
 801017a:	1ad2      	subs	r2, r2, r3
 801017c:	920a      	str	r2, [sp, #40]	; 0x28
 801017e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	930c      	str	r3, [sp, #48]	; 0x30
 8010184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010186:	2b00      	cmp	r3, #0
 8010188:	d01e      	beq.n	80101c8 <_dtoa_r+0x7f0>
 801018a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801018c:	2b00      	cmp	r3, #0
 801018e:	d05c      	beq.n	801024a <_dtoa_r+0x872>
 8010190:	2d00      	cmp	r5, #0
 8010192:	dd10      	ble.n	80101b6 <_dtoa_r+0x7de>
 8010194:	0039      	movs	r1, r7
 8010196:	002a      	movs	r2, r5
 8010198:	9804      	ldr	r0, [sp, #16]
 801019a:	f7fc fa2f 	bl	800c5fc <__pow5mult>
 801019e:	9a05      	ldr	r2, [sp, #20]
 80101a0:	0001      	movs	r1, r0
 80101a2:	0007      	movs	r7, r0
 80101a4:	9804      	ldr	r0, [sp, #16]
 80101a6:	f7fc f979 	bl	800c49c <__multiply>
 80101aa:	0006      	movs	r6, r0
 80101ac:	9905      	ldr	r1, [sp, #20]
 80101ae:	9804      	ldr	r0, [sp, #16]
 80101b0:	f7fc f87a 	bl	800c2a8 <_Bfree>
 80101b4:	9605      	str	r6, [sp, #20]
 80101b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101b8:	1b5a      	subs	r2, r3, r5
 80101ba:	42ab      	cmp	r3, r5
 80101bc:	d004      	beq.n	80101c8 <_dtoa_r+0x7f0>
 80101be:	9905      	ldr	r1, [sp, #20]
 80101c0:	9804      	ldr	r0, [sp, #16]
 80101c2:	f7fc fa1b 	bl	800c5fc <__pow5mult>
 80101c6:	9005      	str	r0, [sp, #20]
 80101c8:	2101      	movs	r1, #1
 80101ca:	9804      	ldr	r0, [sp, #16]
 80101cc:	f7fc f94e 	bl	800c46c <__i2b>
 80101d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101d2:	0006      	movs	r6, r0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dd3a      	ble.n	801024e <_dtoa_r+0x876>
 80101d8:	001a      	movs	r2, r3
 80101da:	0001      	movs	r1, r0
 80101dc:	9804      	ldr	r0, [sp, #16]
 80101de:	f7fc fa0d 	bl	800c5fc <__pow5mult>
 80101e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80101e4:	0006      	movs	r6, r0
 80101e6:	2500      	movs	r5, #0
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	dc38      	bgt.n	801025e <_dtoa_r+0x886>
 80101ec:	2500      	movs	r5, #0
 80101ee:	9b08      	ldr	r3, [sp, #32]
 80101f0:	42ab      	cmp	r3, r5
 80101f2:	d130      	bne.n	8010256 <_dtoa_r+0x87e>
 80101f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f6:	031b      	lsls	r3, r3, #12
 80101f8:	42ab      	cmp	r3, r5
 80101fa:	d12c      	bne.n	8010256 <_dtoa_r+0x87e>
 80101fc:	4b72      	ldr	r3, [pc, #456]	; (80103c8 <_dtoa_r+0x9f0>)
 80101fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010200:	4213      	tst	r3, r2
 8010202:	d028      	beq.n	8010256 <_dtoa_r+0x87e>
 8010204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010206:	3501      	adds	r5, #1
 8010208:	3301      	adds	r3, #1
 801020a:	930a      	str	r3, [sp, #40]	; 0x28
 801020c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801020e:	3301      	adds	r3, #1
 8010210:	930c      	str	r3, [sp, #48]	; 0x30
 8010212:	e020      	b.n	8010256 <_dtoa_r+0x87e>
 8010214:	2336      	movs	r3, #54	; 0x36
 8010216:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010218:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801021a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801021c:	1a9b      	subs	r3, r3, r2
 801021e:	e795      	b.n	801014c <_dtoa_r+0x774>
 8010220:	9b07      	ldr	r3, [sp, #28]
 8010222:	1e5d      	subs	r5, r3, #1
 8010224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010226:	42ab      	cmp	r3, r5
 8010228:	db07      	blt.n	801023a <_dtoa_r+0x862>
 801022a:	1b5d      	subs	r5, r3, r5
 801022c:	9b07      	ldr	r3, [sp, #28]
 801022e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010230:	2b00      	cmp	r3, #0
 8010232:	da8b      	bge.n	801014c <_dtoa_r+0x774>
 8010234:	1ae4      	subs	r4, r4, r3
 8010236:	2300      	movs	r3, #0
 8010238:	e788      	b.n	801014c <_dtoa_r+0x774>
 801023a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801023c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801023e:	1aeb      	subs	r3, r5, r3
 8010240:	18d3      	adds	r3, r2, r3
 8010242:	950d      	str	r5, [sp, #52]	; 0x34
 8010244:	9313      	str	r3, [sp, #76]	; 0x4c
 8010246:	2500      	movs	r5, #0
 8010248:	e7f0      	b.n	801022c <_dtoa_r+0x854>
 801024a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801024c:	e7b7      	b.n	80101be <_dtoa_r+0x7e6>
 801024e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010250:	2500      	movs	r5, #0
 8010252:	2b01      	cmp	r3, #1
 8010254:	ddca      	ble.n	80101ec <_dtoa_r+0x814>
 8010256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010258:	2001      	movs	r0, #1
 801025a:	2b00      	cmp	r3, #0
 801025c:	d008      	beq.n	8010270 <_dtoa_r+0x898>
 801025e:	6933      	ldr	r3, [r6, #16]
 8010260:	3303      	adds	r3, #3
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	18f3      	adds	r3, r6, r3
 8010266:	6858      	ldr	r0, [r3, #4]
 8010268:	f7fc f8b8 	bl	800c3dc <__hi0bits>
 801026c:	2320      	movs	r3, #32
 801026e:	1a18      	subs	r0, r3, r0
 8010270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010272:	1818      	adds	r0, r3, r0
 8010274:	0002      	movs	r2, r0
 8010276:	231f      	movs	r3, #31
 8010278:	401a      	ands	r2, r3
 801027a:	4218      	tst	r0, r3
 801027c:	d047      	beq.n	801030e <_dtoa_r+0x936>
 801027e:	3301      	adds	r3, #1
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	2b04      	cmp	r3, #4
 8010284:	dd3f      	ble.n	8010306 <_dtoa_r+0x92e>
 8010286:	231c      	movs	r3, #28
 8010288:	1a9b      	subs	r3, r3, r2
 801028a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801028c:	18e4      	adds	r4, r4, r3
 801028e:	18d2      	adds	r2, r2, r3
 8010290:	920a      	str	r2, [sp, #40]	; 0x28
 8010292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010294:	18d3      	adds	r3, r2, r3
 8010296:	930c      	str	r3, [sp, #48]	; 0x30
 8010298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801029a:	2b00      	cmp	r3, #0
 801029c:	dd05      	ble.n	80102aa <_dtoa_r+0x8d2>
 801029e:	001a      	movs	r2, r3
 80102a0:	9905      	ldr	r1, [sp, #20]
 80102a2:	9804      	ldr	r0, [sp, #16]
 80102a4:	f7fc f9ec 	bl	800c680 <__lshift>
 80102a8:	9005      	str	r0, [sp, #20]
 80102aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	dd05      	ble.n	80102bc <_dtoa_r+0x8e4>
 80102b0:	0031      	movs	r1, r6
 80102b2:	001a      	movs	r2, r3
 80102b4:	9804      	ldr	r0, [sp, #16]
 80102b6:	f7fc f9e3 	bl	800c680 <__lshift>
 80102ba:	0006      	movs	r6, r0
 80102bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d027      	beq.n	8010312 <_dtoa_r+0x93a>
 80102c2:	0031      	movs	r1, r6
 80102c4:	9805      	ldr	r0, [sp, #20]
 80102c6:	f7fc fa49 	bl	800c75c <__mcmp>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	da21      	bge.n	8010312 <_dtoa_r+0x93a>
 80102ce:	9b03      	ldr	r3, [sp, #12]
 80102d0:	220a      	movs	r2, #10
 80102d2:	3b01      	subs	r3, #1
 80102d4:	9303      	str	r3, [sp, #12]
 80102d6:	9905      	ldr	r1, [sp, #20]
 80102d8:	2300      	movs	r3, #0
 80102da:	9804      	ldr	r0, [sp, #16]
 80102dc:	f7fb ffee 	bl	800c2bc <__multadd>
 80102e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102e2:	9005      	str	r0, [sp, #20]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d100      	bne.n	80102ea <_dtoa_r+0x912>
 80102e8:	e15d      	b.n	80105a6 <_dtoa_r+0xbce>
 80102ea:	2300      	movs	r3, #0
 80102ec:	0039      	movs	r1, r7
 80102ee:	220a      	movs	r2, #10
 80102f0:	9804      	ldr	r0, [sp, #16]
 80102f2:	f7fb ffe3 	bl	800c2bc <__multadd>
 80102f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102f8:	0007      	movs	r7, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	dc49      	bgt.n	8010392 <_dtoa_r+0x9ba>
 80102fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010300:	2b02      	cmp	r3, #2
 8010302:	dc0e      	bgt.n	8010322 <_dtoa_r+0x94a>
 8010304:	e045      	b.n	8010392 <_dtoa_r+0x9ba>
 8010306:	2b04      	cmp	r3, #4
 8010308:	d0c6      	beq.n	8010298 <_dtoa_r+0x8c0>
 801030a:	331c      	adds	r3, #28
 801030c:	e7bd      	b.n	801028a <_dtoa_r+0x8b2>
 801030e:	0013      	movs	r3, r2
 8010310:	e7fb      	b.n	801030a <_dtoa_r+0x932>
 8010312:	9b07      	ldr	r3, [sp, #28]
 8010314:	2b00      	cmp	r3, #0
 8010316:	dc36      	bgt.n	8010386 <_dtoa_r+0x9ae>
 8010318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801031a:	2b02      	cmp	r3, #2
 801031c:	dd33      	ble.n	8010386 <_dtoa_r+0x9ae>
 801031e:	9b07      	ldr	r3, [sp, #28]
 8010320:	930b      	str	r3, [sp, #44]	; 0x2c
 8010322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10c      	bne.n	8010342 <_dtoa_r+0x96a>
 8010328:	0031      	movs	r1, r6
 801032a:	2205      	movs	r2, #5
 801032c:	9804      	ldr	r0, [sp, #16]
 801032e:	f7fb ffc5 	bl	800c2bc <__multadd>
 8010332:	0006      	movs	r6, r0
 8010334:	0001      	movs	r1, r0
 8010336:	9805      	ldr	r0, [sp, #20]
 8010338:	f7fc fa10 	bl	800c75c <__mcmp>
 801033c:	2800      	cmp	r0, #0
 801033e:	dd00      	ble.n	8010342 <_dtoa_r+0x96a>
 8010340:	e59f      	b.n	800fe82 <_dtoa_r+0x4aa>
 8010342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010344:	43db      	mvns	r3, r3
 8010346:	9303      	str	r3, [sp, #12]
 8010348:	9b06      	ldr	r3, [sp, #24]
 801034a:	9308      	str	r3, [sp, #32]
 801034c:	2500      	movs	r5, #0
 801034e:	0031      	movs	r1, r6
 8010350:	9804      	ldr	r0, [sp, #16]
 8010352:	f7fb ffa9 	bl	800c2a8 <_Bfree>
 8010356:	2f00      	cmp	r7, #0
 8010358:	d100      	bne.n	801035c <_dtoa_r+0x984>
 801035a:	e6a3      	b.n	80100a4 <_dtoa_r+0x6cc>
 801035c:	2d00      	cmp	r5, #0
 801035e:	d005      	beq.n	801036c <_dtoa_r+0x994>
 8010360:	42bd      	cmp	r5, r7
 8010362:	d003      	beq.n	801036c <_dtoa_r+0x994>
 8010364:	0029      	movs	r1, r5
 8010366:	9804      	ldr	r0, [sp, #16]
 8010368:	f7fb ff9e 	bl	800c2a8 <_Bfree>
 801036c:	0039      	movs	r1, r7
 801036e:	9804      	ldr	r0, [sp, #16]
 8010370:	f7fb ff9a 	bl	800c2a8 <_Bfree>
 8010374:	e696      	b.n	80100a4 <_dtoa_r+0x6cc>
 8010376:	2600      	movs	r6, #0
 8010378:	0037      	movs	r7, r6
 801037a:	e7e2      	b.n	8010342 <_dtoa_r+0x96a>
 801037c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801037e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010380:	9303      	str	r3, [sp, #12]
 8010382:	0037      	movs	r7, r6
 8010384:	e57d      	b.n	800fe82 <_dtoa_r+0x4aa>
 8010386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010388:	2b00      	cmp	r3, #0
 801038a:	d100      	bne.n	801038e <_dtoa_r+0x9b6>
 801038c:	e0c3      	b.n	8010516 <_dtoa_r+0xb3e>
 801038e:	9b07      	ldr	r3, [sp, #28]
 8010390:	930b      	str	r3, [sp, #44]	; 0x2c
 8010392:	2c00      	cmp	r4, #0
 8010394:	dd05      	ble.n	80103a2 <_dtoa_r+0x9ca>
 8010396:	0039      	movs	r1, r7
 8010398:	0022      	movs	r2, r4
 801039a:	9804      	ldr	r0, [sp, #16]
 801039c:	f7fc f970 	bl	800c680 <__lshift>
 80103a0:	0007      	movs	r7, r0
 80103a2:	0038      	movs	r0, r7
 80103a4:	2d00      	cmp	r5, #0
 80103a6:	d024      	beq.n	80103f2 <_dtoa_r+0xa1a>
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	9804      	ldr	r0, [sp, #16]
 80103ac:	f7fb ff54 	bl	800c258 <_Balloc>
 80103b0:	1e04      	subs	r4, r0, #0
 80103b2:	d111      	bne.n	80103d8 <_dtoa_r+0xa00>
 80103b4:	0022      	movs	r2, r4
 80103b6:	4b05      	ldr	r3, [pc, #20]	; (80103cc <_dtoa_r+0x9f4>)
 80103b8:	4805      	ldr	r0, [pc, #20]	; (80103d0 <_dtoa_r+0x9f8>)
 80103ba:	4906      	ldr	r1, [pc, #24]	; (80103d4 <_dtoa_r+0x9fc>)
 80103bc:	e43c      	b.n	800fc38 <_dtoa_r+0x260>
 80103be:	46c0      	nop			; (mov r8, r8)
 80103c0:	40240000 	.word	0x40240000
 80103c4:	00000433 	.word	0x00000433
 80103c8:	7ff00000 	.word	0x7ff00000
 80103cc:	08013ed1 	.word	0x08013ed1
 80103d0:	08014161 	.word	0x08014161
 80103d4:	000002ef 	.word	0x000002ef
 80103d8:	0039      	movs	r1, r7
 80103da:	693a      	ldr	r2, [r7, #16]
 80103dc:	310c      	adds	r1, #12
 80103de:	3202      	adds	r2, #2
 80103e0:	0092      	lsls	r2, r2, #2
 80103e2:	300c      	adds	r0, #12
 80103e4:	f7fb fa9d 	bl	800b922 <memcpy>
 80103e8:	2201      	movs	r2, #1
 80103ea:	0021      	movs	r1, r4
 80103ec:	9804      	ldr	r0, [sp, #16]
 80103ee:	f7fc f947 	bl	800c680 <__lshift>
 80103f2:	9b06      	ldr	r3, [sp, #24]
 80103f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103f6:	9307      	str	r3, [sp, #28]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	189b      	adds	r3, r3, r2
 80103fc:	2201      	movs	r2, #1
 80103fe:	003d      	movs	r5, r7
 8010400:	0007      	movs	r7, r0
 8010402:	930e      	str	r3, [sp, #56]	; 0x38
 8010404:	9b08      	ldr	r3, [sp, #32]
 8010406:	4013      	ands	r3, r2
 8010408:	930d      	str	r3, [sp, #52]	; 0x34
 801040a:	0031      	movs	r1, r6
 801040c:	9805      	ldr	r0, [sp, #20]
 801040e:	f7ff fa53 	bl	800f8b8 <quorem>
 8010412:	0029      	movs	r1, r5
 8010414:	0004      	movs	r4, r0
 8010416:	900b      	str	r0, [sp, #44]	; 0x2c
 8010418:	9805      	ldr	r0, [sp, #20]
 801041a:	f7fc f99f 	bl	800c75c <__mcmp>
 801041e:	003a      	movs	r2, r7
 8010420:	900c      	str	r0, [sp, #48]	; 0x30
 8010422:	0031      	movs	r1, r6
 8010424:	9804      	ldr	r0, [sp, #16]
 8010426:	f7fc f9b5 	bl	800c794 <__mdiff>
 801042a:	2201      	movs	r2, #1
 801042c:	68c3      	ldr	r3, [r0, #12]
 801042e:	3430      	adds	r4, #48	; 0x30
 8010430:	9008      	str	r0, [sp, #32]
 8010432:	920a      	str	r2, [sp, #40]	; 0x28
 8010434:	2b00      	cmp	r3, #0
 8010436:	d104      	bne.n	8010442 <_dtoa_r+0xa6a>
 8010438:	0001      	movs	r1, r0
 801043a:	9805      	ldr	r0, [sp, #20]
 801043c:	f7fc f98e 	bl	800c75c <__mcmp>
 8010440:	900a      	str	r0, [sp, #40]	; 0x28
 8010442:	9908      	ldr	r1, [sp, #32]
 8010444:	9804      	ldr	r0, [sp, #16]
 8010446:	f7fb ff2f 	bl	800c2a8 <_Bfree>
 801044a:	9b07      	ldr	r3, [sp, #28]
 801044c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801044e:	3301      	adds	r3, #1
 8010450:	9308      	str	r3, [sp, #32]
 8010452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010454:	4313      	orrs	r3, r2
 8010456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010458:	4313      	orrs	r3, r2
 801045a:	d109      	bne.n	8010470 <_dtoa_r+0xa98>
 801045c:	2c39      	cmp	r4, #57	; 0x39
 801045e:	d022      	beq.n	80104a6 <_dtoa_r+0xace>
 8010460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010462:	2b00      	cmp	r3, #0
 8010464:	dd01      	ble.n	801046a <_dtoa_r+0xa92>
 8010466:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010468:	3431      	adds	r4, #49	; 0x31
 801046a:	9b07      	ldr	r3, [sp, #28]
 801046c:	701c      	strb	r4, [r3, #0]
 801046e:	e76e      	b.n	801034e <_dtoa_r+0x976>
 8010470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010472:	2b00      	cmp	r3, #0
 8010474:	db04      	blt.n	8010480 <_dtoa_r+0xaa8>
 8010476:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010478:	4313      	orrs	r3, r2
 801047a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801047c:	4313      	orrs	r3, r2
 801047e:	d11e      	bne.n	80104be <_dtoa_r+0xae6>
 8010480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010482:	2b00      	cmp	r3, #0
 8010484:	ddf1      	ble.n	801046a <_dtoa_r+0xa92>
 8010486:	9905      	ldr	r1, [sp, #20]
 8010488:	2201      	movs	r2, #1
 801048a:	9804      	ldr	r0, [sp, #16]
 801048c:	f7fc f8f8 	bl	800c680 <__lshift>
 8010490:	0031      	movs	r1, r6
 8010492:	9005      	str	r0, [sp, #20]
 8010494:	f7fc f962 	bl	800c75c <__mcmp>
 8010498:	2800      	cmp	r0, #0
 801049a:	dc02      	bgt.n	80104a2 <_dtoa_r+0xaca>
 801049c:	d1e5      	bne.n	801046a <_dtoa_r+0xa92>
 801049e:	07e3      	lsls	r3, r4, #31
 80104a0:	d5e3      	bpl.n	801046a <_dtoa_r+0xa92>
 80104a2:	2c39      	cmp	r4, #57	; 0x39
 80104a4:	d1df      	bne.n	8010466 <_dtoa_r+0xa8e>
 80104a6:	2339      	movs	r3, #57	; 0x39
 80104a8:	9a07      	ldr	r2, [sp, #28]
 80104aa:	7013      	strb	r3, [r2, #0]
 80104ac:	9b08      	ldr	r3, [sp, #32]
 80104ae:	9308      	str	r3, [sp, #32]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	781a      	ldrb	r2, [r3, #0]
 80104b4:	2a39      	cmp	r2, #57	; 0x39
 80104b6:	d063      	beq.n	8010580 <_dtoa_r+0xba8>
 80104b8:	3201      	adds	r2, #1
 80104ba:	701a      	strb	r2, [r3, #0]
 80104bc:	e747      	b.n	801034e <_dtoa_r+0x976>
 80104be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	dd03      	ble.n	80104cc <_dtoa_r+0xaf4>
 80104c4:	2c39      	cmp	r4, #57	; 0x39
 80104c6:	d0ee      	beq.n	80104a6 <_dtoa_r+0xace>
 80104c8:	3401      	adds	r4, #1
 80104ca:	e7ce      	b.n	801046a <_dtoa_r+0xa92>
 80104cc:	9b07      	ldr	r3, [sp, #28]
 80104ce:	9a07      	ldr	r2, [sp, #28]
 80104d0:	701c      	strb	r4, [r3, #0]
 80104d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d03e      	beq.n	8010556 <_dtoa_r+0xb7e>
 80104d8:	2300      	movs	r3, #0
 80104da:	220a      	movs	r2, #10
 80104dc:	9905      	ldr	r1, [sp, #20]
 80104de:	9804      	ldr	r0, [sp, #16]
 80104e0:	f7fb feec 	bl	800c2bc <__multadd>
 80104e4:	2300      	movs	r3, #0
 80104e6:	9005      	str	r0, [sp, #20]
 80104e8:	220a      	movs	r2, #10
 80104ea:	0029      	movs	r1, r5
 80104ec:	9804      	ldr	r0, [sp, #16]
 80104ee:	42bd      	cmp	r5, r7
 80104f0:	d106      	bne.n	8010500 <_dtoa_r+0xb28>
 80104f2:	f7fb fee3 	bl	800c2bc <__multadd>
 80104f6:	0005      	movs	r5, r0
 80104f8:	0007      	movs	r7, r0
 80104fa:	9b08      	ldr	r3, [sp, #32]
 80104fc:	9307      	str	r3, [sp, #28]
 80104fe:	e784      	b.n	801040a <_dtoa_r+0xa32>
 8010500:	f7fb fedc 	bl	800c2bc <__multadd>
 8010504:	0039      	movs	r1, r7
 8010506:	0005      	movs	r5, r0
 8010508:	2300      	movs	r3, #0
 801050a:	220a      	movs	r2, #10
 801050c:	9804      	ldr	r0, [sp, #16]
 801050e:	f7fb fed5 	bl	800c2bc <__multadd>
 8010512:	0007      	movs	r7, r0
 8010514:	e7f1      	b.n	80104fa <_dtoa_r+0xb22>
 8010516:	9b07      	ldr	r3, [sp, #28]
 8010518:	930b      	str	r3, [sp, #44]	; 0x2c
 801051a:	2500      	movs	r5, #0
 801051c:	0031      	movs	r1, r6
 801051e:	9805      	ldr	r0, [sp, #20]
 8010520:	f7ff f9ca 	bl	800f8b8 <quorem>
 8010524:	9b06      	ldr	r3, [sp, #24]
 8010526:	3030      	adds	r0, #48	; 0x30
 8010528:	5558      	strb	r0, [r3, r5]
 801052a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801052c:	3501      	adds	r5, #1
 801052e:	0004      	movs	r4, r0
 8010530:	42ab      	cmp	r3, r5
 8010532:	dd07      	ble.n	8010544 <_dtoa_r+0xb6c>
 8010534:	2300      	movs	r3, #0
 8010536:	220a      	movs	r2, #10
 8010538:	9905      	ldr	r1, [sp, #20]
 801053a:	9804      	ldr	r0, [sp, #16]
 801053c:	f7fb febe 	bl	800c2bc <__multadd>
 8010540:	9005      	str	r0, [sp, #20]
 8010542:	e7eb      	b.n	801051c <_dtoa_r+0xb44>
 8010544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010546:	2301      	movs	r3, #1
 8010548:	2a00      	cmp	r2, #0
 801054a:	dd00      	ble.n	801054e <_dtoa_r+0xb76>
 801054c:	0013      	movs	r3, r2
 801054e:	2500      	movs	r5, #0
 8010550:	9a06      	ldr	r2, [sp, #24]
 8010552:	18d3      	adds	r3, r2, r3
 8010554:	9308      	str	r3, [sp, #32]
 8010556:	9905      	ldr	r1, [sp, #20]
 8010558:	2201      	movs	r2, #1
 801055a:	9804      	ldr	r0, [sp, #16]
 801055c:	f7fc f890 	bl	800c680 <__lshift>
 8010560:	0031      	movs	r1, r6
 8010562:	9005      	str	r0, [sp, #20]
 8010564:	f7fc f8fa 	bl	800c75c <__mcmp>
 8010568:	2800      	cmp	r0, #0
 801056a:	dc9f      	bgt.n	80104ac <_dtoa_r+0xad4>
 801056c:	d101      	bne.n	8010572 <_dtoa_r+0xb9a>
 801056e:	07e4      	lsls	r4, r4, #31
 8010570:	d49c      	bmi.n	80104ac <_dtoa_r+0xad4>
 8010572:	9b08      	ldr	r3, [sp, #32]
 8010574:	9308      	str	r3, [sp, #32]
 8010576:	3b01      	subs	r3, #1
 8010578:	781a      	ldrb	r2, [r3, #0]
 801057a:	2a30      	cmp	r2, #48	; 0x30
 801057c:	d0fa      	beq.n	8010574 <_dtoa_r+0xb9c>
 801057e:	e6e6      	b.n	801034e <_dtoa_r+0x976>
 8010580:	9a06      	ldr	r2, [sp, #24]
 8010582:	429a      	cmp	r2, r3
 8010584:	d193      	bne.n	80104ae <_dtoa_r+0xad6>
 8010586:	9b03      	ldr	r3, [sp, #12]
 8010588:	3301      	adds	r3, #1
 801058a:	9303      	str	r3, [sp, #12]
 801058c:	2331      	movs	r3, #49	; 0x31
 801058e:	7013      	strb	r3, [r2, #0]
 8010590:	e6dd      	b.n	801034e <_dtoa_r+0x976>
 8010592:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <_dtoa_r+0xbe0>)
 8010594:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010596:	9306      	str	r3, [sp, #24]
 8010598:	4b08      	ldr	r3, [pc, #32]	; (80105bc <_dtoa_r+0xbe4>)
 801059a:	2a00      	cmp	r2, #0
 801059c:	d001      	beq.n	80105a2 <_dtoa_r+0xbca>
 801059e:	f7ff fa4c 	bl	800fa3a <_dtoa_r+0x62>
 80105a2:	f7ff fa4c 	bl	800fa3e <_dtoa_r+0x66>
 80105a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	dcb6      	bgt.n	801051a <_dtoa_r+0xb42>
 80105ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105ae:	2b02      	cmp	r3, #2
 80105b0:	dd00      	ble.n	80105b4 <_dtoa_r+0xbdc>
 80105b2:	e6b6      	b.n	8010322 <_dtoa_r+0x94a>
 80105b4:	e7b1      	b.n	801051a <_dtoa_r+0xb42>
 80105b6:	46c0      	nop			; (mov r8, r8)
 80105b8:	08014154 	.word	0x08014154
 80105bc:	0801415c 	.word	0x0801415c

080105c0 <realloc>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	4b03      	ldr	r3, [pc, #12]	; (80105d0 <realloc+0x10>)
 80105c4:	000a      	movs	r2, r1
 80105c6:	0001      	movs	r1, r0
 80105c8:	6818      	ldr	r0, [r3, #0]
 80105ca:	f000 f803 	bl	80105d4 <_realloc_r>
 80105ce:	bd10      	pop	{r4, pc}
 80105d0:	200006c8 	.word	0x200006c8

080105d4 <_realloc_r>:
 80105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d6:	b087      	sub	sp, #28
 80105d8:	1e0c      	subs	r4, r1, #0
 80105da:	9001      	str	r0, [sp, #4]
 80105dc:	9205      	str	r2, [sp, #20]
 80105de:	d106      	bne.n	80105ee <_realloc_r+0x1a>
 80105e0:	0011      	movs	r1, r2
 80105e2:	f7f9 fe39 	bl	800a258 <_malloc_r>
 80105e6:	0007      	movs	r7, r0
 80105e8:	0038      	movs	r0, r7
 80105ea:	b007      	add	sp, #28
 80105ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ee:	9801      	ldr	r0, [sp, #4]
 80105f0:	f7fa f846 	bl	800a680 <__malloc_lock>
 80105f4:	0023      	movs	r3, r4
 80105f6:	3b08      	subs	r3, #8
 80105f8:	685f      	ldr	r7, [r3, #4]
 80105fa:	9304      	str	r3, [sp, #16]
 80105fc:	9b05      	ldr	r3, [sp, #20]
 80105fe:	330b      	adds	r3, #11
 8010600:	2b16      	cmp	r3, #22
 8010602:	d908      	bls.n	8010616 <_realloc_r+0x42>
 8010604:	2207      	movs	r2, #7
 8010606:	4393      	bics	r3, r2
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	d506      	bpl.n	801061a <_realloc_r+0x46>
 801060c:	230c      	movs	r3, #12
 801060e:	9a01      	ldr	r2, [sp, #4]
 8010610:	2700      	movs	r7, #0
 8010612:	6013      	str	r3, [r2, #0]
 8010614:	e7e8      	b.n	80105e8 <_realloc_r+0x14>
 8010616:	2310      	movs	r3, #16
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	9b00      	ldr	r3, [sp, #0]
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	4293      	cmp	r3, r2
 8010620:	d3f4      	bcc.n	801060c <_realloc_r+0x38>
 8010622:	9b04      	ldr	r3, [sp, #16]
 8010624:	003a      	movs	r2, r7
 8010626:	9302      	str	r3, [sp, #8]
 8010628:	2303      	movs	r3, #3
 801062a:	439a      	bics	r2, r3
 801062c:	9b00      	ldr	r3, [sp, #0]
 801062e:	9203      	str	r2, [sp, #12]
 8010630:	4293      	cmp	r3, r2
 8010632:	dc00      	bgt.n	8010636 <_realloc_r+0x62>
 8010634:	e169      	b.n	801090a <_realloc_r+0x336>
 8010636:	9b04      	ldr	r3, [sp, #16]
 8010638:	48b8      	ldr	r0, [pc, #736]	; (801091c <_realloc_r+0x348>)
 801063a:	189b      	adds	r3, r3, r2
 801063c:	6882      	ldr	r2, [r0, #8]
 801063e:	4694      	mov	ip, r2
 8010640:	685a      	ldr	r2, [r3, #4]
 8010642:	459c      	cmp	ip, r3
 8010644:	d006      	beq.n	8010654 <_realloc_r+0x80>
 8010646:	2501      	movs	r5, #1
 8010648:	0011      	movs	r1, r2
 801064a:	43a9      	bics	r1, r5
 801064c:	1859      	adds	r1, r3, r1
 801064e:	6849      	ldr	r1, [r1, #4]
 8010650:	4229      	tst	r1, r5
 8010652:	d144      	bne.n	80106de <_realloc_r+0x10a>
 8010654:	2103      	movs	r1, #3
 8010656:	438a      	bics	r2, r1
 8010658:	9903      	ldr	r1, [sp, #12]
 801065a:	188e      	adds	r6, r1, r2
 801065c:	9900      	ldr	r1, [sp, #0]
 801065e:	459c      	cmp	ip, r3
 8010660:	d117      	bne.n	8010692 <_realloc_r+0xbe>
 8010662:	3110      	adds	r1, #16
 8010664:	42b1      	cmp	r1, r6
 8010666:	dc3c      	bgt.n	80106e2 <_realloc_r+0x10e>
 8010668:	9a00      	ldr	r2, [sp, #0]
 801066a:	2101      	movs	r1, #1
 801066c:	4694      	mov	ip, r2
 801066e:	1ab6      	subs	r6, r6, r2
 8010670:	0022      	movs	r2, r4
 8010672:	9b04      	ldr	r3, [sp, #16]
 8010674:	430e      	orrs	r6, r1
 8010676:	4463      	add	r3, ip
 8010678:	6083      	str	r3, [r0, #8]
 801067a:	3a08      	subs	r2, #8
 801067c:	605e      	str	r6, [r3, #4]
 801067e:	6853      	ldr	r3, [r2, #4]
 8010680:	9801      	ldr	r0, [sp, #4]
 8010682:	400b      	ands	r3, r1
 8010684:	4661      	mov	r1, ip
 8010686:	430b      	orrs	r3, r1
 8010688:	6053      	str	r3, [r2, #4]
 801068a:	f7fa f801 	bl	800a690 <__malloc_unlock>
 801068e:	0027      	movs	r7, r4
 8010690:	e7aa      	b.n	80105e8 <_realloc_r+0x14>
 8010692:	42b1      	cmp	r1, r6
 8010694:	dc25      	bgt.n	80106e2 <_realloc_r+0x10e>
 8010696:	68da      	ldr	r2, [r3, #12]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	60da      	str	r2, [r3, #12]
 801069c:	6093      	str	r3, [r2, #8]
 801069e:	9b00      	ldr	r3, [sp, #0]
 80106a0:	9a02      	ldr	r2, [sp, #8]
 80106a2:	1af4      	subs	r4, r6, r3
 80106a4:	9b02      	ldr	r3, [sp, #8]
 80106a6:	1992      	adds	r2, r2, r6
 80106a8:	6858      	ldr	r0, [r3, #4]
 80106aa:	2301      	movs	r3, #1
 80106ac:	4018      	ands	r0, r3
 80106ae:	2c0f      	cmp	r4, #15
 80106b0:	d800      	bhi.n	80106b4 <_realloc_r+0xe0>
 80106b2:	e12c      	b.n	801090e <_realloc_r+0x33a>
 80106b4:	9d00      	ldr	r5, [sp, #0]
 80106b6:	9902      	ldr	r1, [sp, #8]
 80106b8:	4328      	orrs	r0, r5
 80106ba:	1949      	adds	r1, r1, r5
 80106bc:	9d02      	ldr	r5, [sp, #8]
 80106be:	431c      	orrs	r4, r3
 80106c0:	6068      	str	r0, [r5, #4]
 80106c2:	604c      	str	r4, [r1, #4]
 80106c4:	6850      	ldr	r0, [r2, #4]
 80106c6:	3108      	adds	r1, #8
 80106c8:	4303      	orrs	r3, r0
 80106ca:	6053      	str	r3, [r2, #4]
 80106cc:	9801      	ldr	r0, [sp, #4]
 80106ce:	f7fb f9a3 	bl	800ba18 <_free_r>
 80106d2:	9801      	ldr	r0, [sp, #4]
 80106d4:	f7f9 ffdc 	bl	800a690 <__malloc_unlock>
 80106d8:	9f02      	ldr	r7, [sp, #8]
 80106da:	3708      	adds	r7, #8
 80106dc:	e784      	b.n	80105e8 <_realloc_r+0x14>
 80106de:	2200      	movs	r2, #0
 80106e0:	0013      	movs	r3, r2
 80106e2:	07ff      	lsls	r7, r7, #31
 80106e4:	d500      	bpl.n	80106e8 <_realloc_r+0x114>
 80106e6:	e0c6      	b.n	8010876 <_realloc_r+0x2a2>
 80106e8:	0021      	movs	r1, r4
 80106ea:	2003      	movs	r0, #3
 80106ec:	3908      	subs	r1, #8
 80106ee:	680d      	ldr	r5, [r1, #0]
 80106f0:	9904      	ldr	r1, [sp, #16]
 80106f2:	1b4d      	subs	r5, r1, r5
 80106f4:	6869      	ldr	r1, [r5, #4]
 80106f6:	4381      	bics	r1, r0
 80106f8:	9803      	ldr	r0, [sp, #12]
 80106fa:	180f      	adds	r7, r1, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d100      	bne.n	8010702 <_realloc_r+0x12e>
 8010700:	e084      	b.n	801080c <_realloc_r+0x238>
 8010702:	19d6      	adds	r6, r2, r7
 8010704:	459c      	cmp	ip, r3
 8010706:	d148      	bne.n	801079a <_realloc_r+0x1c6>
 8010708:	9b00      	ldr	r3, [sp, #0]
 801070a:	3310      	adds	r3, #16
 801070c:	42b3      	cmp	r3, r6
 801070e:	dc7d      	bgt.n	801080c <_realloc_r+0x238>
 8010710:	68aa      	ldr	r2, [r5, #8]
 8010712:	68eb      	ldr	r3, [r5, #12]
 8010714:	002f      	movs	r7, r5
 8010716:	60d3      	str	r3, [r2, #12]
 8010718:	609a      	str	r2, [r3, #8]
 801071a:	0002      	movs	r2, r0
 801071c:	3a04      	subs	r2, #4
 801071e:	3708      	adds	r7, #8
 8010720:	2a24      	cmp	r2, #36	; 0x24
 8010722:	d835      	bhi.n	8010790 <_realloc_r+0x1bc>
 8010724:	003b      	movs	r3, r7
 8010726:	2a13      	cmp	r2, #19
 8010728:	d908      	bls.n	801073c <_realloc_r+0x168>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	60ab      	str	r3, [r5, #8]
 801072e:	6863      	ldr	r3, [r4, #4]
 8010730:	60eb      	str	r3, [r5, #12]
 8010732:	2a1b      	cmp	r2, #27
 8010734:	d81a      	bhi.n	801076c <_realloc_r+0x198>
 8010736:	002b      	movs	r3, r5
 8010738:	3408      	adds	r4, #8
 801073a:	3310      	adds	r3, #16
 801073c:	6822      	ldr	r2, [r4, #0]
 801073e:	601a      	str	r2, [r3, #0]
 8010740:	6862      	ldr	r2, [r4, #4]
 8010742:	605a      	str	r2, [r3, #4]
 8010744:	68a2      	ldr	r2, [r4, #8]
 8010746:	609a      	str	r2, [r3, #8]
 8010748:	9b00      	ldr	r3, [sp, #0]
 801074a:	4a74      	ldr	r2, [pc, #464]	; (801091c <_realloc_r+0x348>)
 801074c:	18eb      	adds	r3, r5, r3
 801074e:	6093      	str	r3, [r2, #8]
 8010750:	9a00      	ldr	r2, [sp, #0]
 8010752:	1ab6      	subs	r6, r6, r2
 8010754:	2201      	movs	r2, #1
 8010756:	4316      	orrs	r6, r2
 8010758:	605e      	str	r6, [r3, #4]
 801075a:	686b      	ldr	r3, [r5, #4]
 801075c:	4013      	ands	r3, r2
 801075e:	9a00      	ldr	r2, [sp, #0]
 8010760:	4313      	orrs	r3, r2
 8010762:	606b      	str	r3, [r5, #4]
 8010764:	9801      	ldr	r0, [sp, #4]
 8010766:	f7f9 ff93 	bl	800a690 <__malloc_unlock>
 801076a:	e73d      	b.n	80105e8 <_realloc_r+0x14>
 801076c:	68a3      	ldr	r3, [r4, #8]
 801076e:	612b      	str	r3, [r5, #16]
 8010770:	68e3      	ldr	r3, [r4, #12]
 8010772:	616b      	str	r3, [r5, #20]
 8010774:	2a24      	cmp	r2, #36	; 0x24
 8010776:	d003      	beq.n	8010780 <_realloc_r+0x1ac>
 8010778:	002b      	movs	r3, r5
 801077a:	3410      	adds	r4, #16
 801077c:	3318      	adds	r3, #24
 801077e:	e7dd      	b.n	801073c <_realloc_r+0x168>
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	61ab      	str	r3, [r5, #24]
 8010784:	002b      	movs	r3, r5
 8010786:	6962      	ldr	r2, [r4, #20]
 8010788:	3320      	adds	r3, #32
 801078a:	61ea      	str	r2, [r5, #28]
 801078c:	3418      	adds	r4, #24
 801078e:	e7d5      	b.n	801073c <_realloc_r+0x168>
 8010790:	0021      	movs	r1, r4
 8010792:	0038      	movs	r0, r7
 8010794:	f001 fbb5 	bl	8011f02 <memmove>
 8010798:	e7d6      	b.n	8010748 <_realloc_r+0x174>
 801079a:	9a00      	ldr	r2, [sp, #0]
 801079c:	42b2      	cmp	r2, r6
 801079e:	dc35      	bgt.n	801080c <_realloc_r+0x238>
 80107a0:	0028      	movs	r0, r5
 80107a2:	68da      	ldr	r2, [r3, #12]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	3008      	adds	r0, #8
 80107a8:	60da      	str	r2, [r3, #12]
 80107aa:	6093      	str	r3, [r2, #8]
 80107ac:	68aa      	ldr	r2, [r5, #8]
 80107ae:	68eb      	ldr	r3, [r5, #12]
 80107b0:	60d3      	str	r3, [r2, #12]
 80107b2:	609a      	str	r2, [r3, #8]
 80107b4:	9a03      	ldr	r2, [sp, #12]
 80107b6:	3a04      	subs	r2, #4
 80107b8:	2a24      	cmp	r2, #36	; 0x24
 80107ba:	d823      	bhi.n	8010804 <_realloc_r+0x230>
 80107bc:	2a13      	cmp	r2, #19
 80107be:	d907      	bls.n	80107d0 <_realloc_r+0x1fc>
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	60ab      	str	r3, [r5, #8]
 80107c4:	6863      	ldr	r3, [r4, #4]
 80107c6:	60eb      	str	r3, [r5, #12]
 80107c8:	2a1b      	cmp	r2, #27
 80107ca:	d809      	bhi.n	80107e0 <_realloc_r+0x20c>
 80107cc:	3408      	adds	r4, #8
 80107ce:	3008      	adds	r0, #8
 80107d0:	6823      	ldr	r3, [r4, #0]
 80107d2:	6003      	str	r3, [r0, #0]
 80107d4:	6863      	ldr	r3, [r4, #4]
 80107d6:	6043      	str	r3, [r0, #4]
 80107d8:	68a3      	ldr	r3, [r4, #8]
 80107da:	6083      	str	r3, [r0, #8]
 80107dc:	9502      	str	r5, [sp, #8]
 80107de:	e75e      	b.n	801069e <_realloc_r+0xca>
 80107e0:	68a3      	ldr	r3, [r4, #8]
 80107e2:	612b      	str	r3, [r5, #16]
 80107e4:	68e3      	ldr	r3, [r4, #12]
 80107e6:	616b      	str	r3, [r5, #20]
 80107e8:	2a24      	cmp	r2, #36	; 0x24
 80107ea:	d003      	beq.n	80107f4 <_realloc_r+0x220>
 80107ec:	0028      	movs	r0, r5
 80107ee:	3410      	adds	r4, #16
 80107f0:	3018      	adds	r0, #24
 80107f2:	e7ed      	b.n	80107d0 <_realloc_r+0x1fc>
 80107f4:	0028      	movs	r0, r5
 80107f6:	6923      	ldr	r3, [r4, #16]
 80107f8:	3020      	adds	r0, #32
 80107fa:	61ab      	str	r3, [r5, #24]
 80107fc:	6963      	ldr	r3, [r4, #20]
 80107fe:	3418      	adds	r4, #24
 8010800:	61eb      	str	r3, [r5, #28]
 8010802:	e7e5      	b.n	80107d0 <_realloc_r+0x1fc>
 8010804:	0021      	movs	r1, r4
 8010806:	f001 fb7c 	bl	8011f02 <memmove>
 801080a:	e7e7      	b.n	80107dc <_realloc_r+0x208>
 801080c:	9b00      	ldr	r3, [sp, #0]
 801080e:	42bb      	cmp	r3, r7
 8010810:	dc31      	bgt.n	8010876 <_realloc_r+0x2a2>
 8010812:	0028      	movs	r0, r5
 8010814:	68aa      	ldr	r2, [r5, #8]
 8010816:	68eb      	ldr	r3, [r5, #12]
 8010818:	3008      	adds	r0, #8
 801081a:	60d3      	str	r3, [r2, #12]
 801081c:	609a      	str	r2, [r3, #8]
 801081e:	9a03      	ldr	r2, [sp, #12]
 8010820:	3a04      	subs	r2, #4
 8010822:	2a24      	cmp	r2, #36	; 0x24
 8010824:	d823      	bhi.n	801086e <_realloc_r+0x29a>
 8010826:	2a13      	cmp	r2, #19
 8010828:	d907      	bls.n	801083a <_realloc_r+0x266>
 801082a:	6823      	ldr	r3, [r4, #0]
 801082c:	60ab      	str	r3, [r5, #8]
 801082e:	6863      	ldr	r3, [r4, #4]
 8010830:	60eb      	str	r3, [r5, #12]
 8010832:	2a1b      	cmp	r2, #27
 8010834:	d809      	bhi.n	801084a <_realloc_r+0x276>
 8010836:	3408      	adds	r4, #8
 8010838:	3008      	adds	r0, #8
 801083a:	6823      	ldr	r3, [r4, #0]
 801083c:	6003      	str	r3, [r0, #0]
 801083e:	6863      	ldr	r3, [r4, #4]
 8010840:	6043      	str	r3, [r0, #4]
 8010842:	68a3      	ldr	r3, [r4, #8]
 8010844:	6083      	str	r3, [r0, #8]
 8010846:	003e      	movs	r6, r7
 8010848:	e7c8      	b.n	80107dc <_realloc_r+0x208>
 801084a:	68a3      	ldr	r3, [r4, #8]
 801084c:	612b      	str	r3, [r5, #16]
 801084e:	68e3      	ldr	r3, [r4, #12]
 8010850:	616b      	str	r3, [r5, #20]
 8010852:	2a24      	cmp	r2, #36	; 0x24
 8010854:	d003      	beq.n	801085e <_realloc_r+0x28a>
 8010856:	0028      	movs	r0, r5
 8010858:	3410      	adds	r4, #16
 801085a:	3018      	adds	r0, #24
 801085c:	e7ed      	b.n	801083a <_realloc_r+0x266>
 801085e:	0028      	movs	r0, r5
 8010860:	6923      	ldr	r3, [r4, #16]
 8010862:	3020      	adds	r0, #32
 8010864:	61ab      	str	r3, [r5, #24]
 8010866:	6963      	ldr	r3, [r4, #20]
 8010868:	3418      	adds	r4, #24
 801086a:	61eb      	str	r3, [r5, #28]
 801086c:	e7e5      	b.n	801083a <_realloc_r+0x266>
 801086e:	0021      	movs	r1, r4
 8010870:	f001 fb47 	bl	8011f02 <memmove>
 8010874:	e7e7      	b.n	8010846 <_realloc_r+0x272>
 8010876:	9905      	ldr	r1, [sp, #20]
 8010878:	9801      	ldr	r0, [sp, #4]
 801087a:	f7f9 fced 	bl	800a258 <_malloc_r>
 801087e:	1e07      	subs	r7, r0, #0
 8010880:	d100      	bne.n	8010884 <_realloc_r+0x2b0>
 8010882:	e76f      	b.n	8010764 <_realloc_r+0x190>
 8010884:	0023      	movs	r3, r4
 8010886:	2201      	movs	r2, #1
 8010888:	3b08      	subs	r3, #8
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	4393      	bics	r3, r2
 801088e:	9a04      	ldr	r2, [sp, #16]
 8010890:	18d3      	adds	r3, r2, r3
 8010892:	0002      	movs	r2, r0
 8010894:	3a08      	subs	r2, #8
 8010896:	4293      	cmp	r3, r2
 8010898:	d105      	bne.n	80108a6 <_realloc_r+0x2d2>
 801089a:	685e      	ldr	r6, [r3, #4]
 801089c:	2303      	movs	r3, #3
 801089e:	439e      	bics	r6, r3
 80108a0:	9b03      	ldr	r3, [sp, #12]
 80108a2:	18f6      	adds	r6, r6, r3
 80108a4:	e6fb      	b.n	801069e <_realloc_r+0xca>
 80108a6:	9a03      	ldr	r2, [sp, #12]
 80108a8:	3a04      	subs	r2, #4
 80108aa:	2a24      	cmp	r2, #36	; 0x24
 80108ac:	d829      	bhi.n	8010902 <_realloc_r+0x32e>
 80108ae:	0003      	movs	r3, r0
 80108b0:	0021      	movs	r1, r4
 80108b2:	2a13      	cmp	r2, #19
 80108b4:	d908      	bls.n	80108c8 <_realloc_r+0x2f4>
 80108b6:	6823      	ldr	r3, [r4, #0]
 80108b8:	6003      	str	r3, [r0, #0]
 80108ba:	6863      	ldr	r3, [r4, #4]
 80108bc:	6043      	str	r3, [r0, #4]
 80108be:	2a1b      	cmp	r2, #27
 80108c0:	d80d      	bhi.n	80108de <_realloc_r+0x30a>
 80108c2:	0003      	movs	r3, r0
 80108c4:	3108      	adds	r1, #8
 80108c6:	3308      	adds	r3, #8
 80108c8:	680a      	ldr	r2, [r1, #0]
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	684a      	ldr	r2, [r1, #4]
 80108ce:	605a      	str	r2, [r3, #4]
 80108d0:	688a      	ldr	r2, [r1, #8]
 80108d2:	609a      	str	r2, [r3, #8]
 80108d4:	0021      	movs	r1, r4
 80108d6:	9801      	ldr	r0, [sp, #4]
 80108d8:	f7fb f89e 	bl	800ba18 <_free_r>
 80108dc:	e742      	b.n	8010764 <_realloc_r+0x190>
 80108de:	68a3      	ldr	r3, [r4, #8]
 80108e0:	6083      	str	r3, [r0, #8]
 80108e2:	68e3      	ldr	r3, [r4, #12]
 80108e4:	60c3      	str	r3, [r0, #12]
 80108e6:	2a24      	cmp	r2, #36	; 0x24
 80108e8:	d003      	beq.n	80108f2 <_realloc_r+0x31e>
 80108ea:	0003      	movs	r3, r0
 80108ec:	3110      	adds	r1, #16
 80108ee:	3310      	adds	r3, #16
 80108f0:	e7ea      	b.n	80108c8 <_realloc_r+0x2f4>
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	3118      	adds	r1, #24
 80108f6:	6103      	str	r3, [r0, #16]
 80108f8:	0003      	movs	r3, r0
 80108fa:	6962      	ldr	r2, [r4, #20]
 80108fc:	3318      	adds	r3, #24
 80108fe:	6142      	str	r2, [r0, #20]
 8010900:	e7e2      	b.n	80108c8 <_realloc_r+0x2f4>
 8010902:	0021      	movs	r1, r4
 8010904:	f001 fafd 	bl	8011f02 <memmove>
 8010908:	e7e4      	b.n	80108d4 <_realloc_r+0x300>
 801090a:	9e03      	ldr	r6, [sp, #12]
 801090c:	e6c7      	b.n	801069e <_realloc_r+0xca>
 801090e:	9902      	ldr	r1, [sp, #8]
 8010910:	4306      	orrs	r6, r0
 8010912:	604e      	str	r6, [r1, #4]
 8010914:	6851      	ldr	r1, [r2, #4]
 8010916:	430b      	orrs	r3, r1
 8010918:	6053      	str	r3, [r2, #4]
 801091a:	e6da      	b.n	80106d2 <_realloc_r+0xfe>
 801091c:	20000020 	.word	0x20000020

08010920 <_strtoul_l.constprop.0>:
 8010920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010922:	b087      	sub	sp, #28
 8010924:	9202      	str	r2, [sp, #8]
 8010926:	4a3e      	ldr	r2, [pc, #248]	; (8010a20 <_strtoul_l.constprop.0+0x100>)
 8010928:	001e      	movs	r6, r3
 801092a:	9101      	str	r1, [sp, #4]
 801092c:	000b      	movs	r3, r1
 801092e:	4694      	mov	ip, r2
 8010930:	2108      	movs	r1, #8
 8010932:	9005      	str	r0, [sp, #20]
 8010934:	001a      	movs	r2, r3
 8010936:	4660      	mov	r0, ip
 8010938:	7814      	ldrb	r4, [r2, #0]
 801093a:	3301      	adds	r3, #1
 801093c:	5d00      	ldrb	r0, [r0, r4]
 801093e:	001d      	movs	r5, r3
 8010940:	0007      	movs	r7, r0
 8010942:	400f      	ands	r7, r1
 8010944:	4208      	tst	r0, r1
 8010946:	d1f5      	bne.n	8010934 <_strtoul_l.constprop.0+0x14>
 8010948:	2c2d      	cmp	r4, #45	; 0x2d
 801094a:	d13d      	bne.n	80109c8 <_strtoul_l.constprop.0+0xa8>
 801094c:	2701      	movs	r7, #1
 801094e:	781c      	ldrb	r4, [r3, #0]
 8010950:	1c95      	adds	r5, r2, #2
 8010952:	2e00      	cmp	r6, #0
 8010954:	d05f      	beq.n	8010a16 <_strtoul_l.constprop.0+0xf6>
 8010956:	2e10      	cmp	r6, #16
 8010958:	d109      	bne.n	801096e <_strtoul_l.constprop.0+0x4e>
 801095a:	2c30      	cmp	r4, #48	; 0x30
 801095c:	d107      	bne.n	801096e <_strtoul_l.constprop.0+0x4e>
 801095e:	2220      	movs	r2, #32
 8010960:	782b      	ldrb	r3, [r5, #0]
 8010962:	4393      	bics	r3, r2
 8010964:	2b58      	cmp	r3, #88	; 0x58
 8010966:	d151      	bne.n	8010a0c <_strtoul_l.constprop.0+0xec>
 8010968:	2610      	movs	r6, #16
 801096a:	786c      	ldrb	r4, [r5, #1]
 801096c:	3502      	adds	r5, #2
 801096e:	2001      	movs	r0, #1
 8010970:	0031      	movs	r1, r6
 8010972:	4240      	negs	r0, r0
 8010974:	f7ef fbe2 	bl	800013c <__udivsi3>
 8010978:	9003      	str	r0, [sp, #12]
 801097a:	2001      	movs	r0, #1
 801097c:	0031      	movs	r1, r6
 801097e:	4240      	negs	r0, r0
 8010980:	f7ef fc62 	bl	8000248 <__aeabi_uidivmod>
 8010984:	2300      	movs	r3, #0
 8010986:	2201      	movs	r2, #1
 8010988:	9104      	str	r1, [sp, #16]
 801098a:	2101      	movs	r1, #1
 801098c:	0018      	movs	r0, r3
 801098e:	4694      	mov	ip, r2
 8010990:	4249      	negs	r1, r1
 8010992:	0022      	movs	r2, r4
 8010994:	3a30      	subs	r2, #48	; 0x30
 8010996:	2a09      	cmp	r2, #9
 8010998:	d903      	bls.n	80109a2 <_strtoul_l.constprop.0+0x82>
 801099a:	3a11      	subs	r2, #17
 801099c:	2a19      	cmp	r2, #25
 801099e:	d818      	bhi.n	80109d2 <_strtoul_l.constprop.0+0xb2>
 80109a0:	320a      	adds	r2, #10
 80109a2:	4296      	cmp	r6, r2
 80109a4:	dd19      	ble.n	80109da <_strtoul_l.constprop.0+0xba>
 80109a6:	1c5c      	adds	r4, r3, #1
 80109a8:	d00b      	beq.n	80109c2 <_strtoul_l.constprop.0+0xa2>
 80109aa:	9c03      	ldr	r4, [sp, #12]
 80109ac:	000b      	movs	r3, r1
 80109ae:	4284      	cmp	r4, r0
 80109b0:	d307      	bcc.n	80109c2 <_strtoul_l.constprop.0+0xa2>
 80109b2:	d103      	bne.n	80109bc <_strtoul_l.constprop.0+0x9c>
 80109b4:	9c04      	ldr	r4, [sp, #16]
 80109b6:	000b      	movs	r3, r1
 80109b8:	4294      	cmp	r4, r2
 80109ba:	db02      	blt.n	80109c2 <_strtoul_l.constprop.0+0xa2>
 80109bc:	4663      	mov	r3, ip
 80109be:	4370      	muls	r0, r6
 80109c0:	1810      	adds	r0, r2, r0
 80109c2:	782c      	ldrb	r4, [r5, #0]
 80109c4:	3501      	adds	r5, #1
 80109c6:	e7e4      	b.n	8010992 <_strtoul_l.constprop.0+0x72>
 80109c8:	2c2b      	cmp	r4, #43	; 0x2b
 80109ca:	d1c2      	bne.n	8010952 <_strtoul_l.constprop.0+0x32>
 80109cc:	781c      	ldrb	r4, [r3, #0]
 80109ce:	1c95      	adds	r5, r2, #2
 80109d0:	e7bf      	b.n	8010952 <_strtoul_l.constprop.0+0x32>
 80109d2:	0022      	movs	r2, r4
 80109d4:	3a61      	subs	r2, #97	; 0x61
 80109d6:	2a19      	cmp	r2, #25
 80109d8:	d9e2      	bls.n	80109a0 <_strtoul_l.constprop.0+0x80>
 80109da:	1c5a      	adds	r2, r3, #1
 80109dc:	d108      	bne.n	80109f0 <_strtoul_l.constprop.0+0xd0>
 80109de:	2222      	movs	r2, #34	; 0x22
 80109e0:	9905      	ldr	r1, [sp, #20]
 80109e2:	0018      	movs	r0, r3
 80109e4:	600a      	str	r2, [r1, #0]
 80109e6:	9a02      	ldr	r2, [sp, #8]
 80109e8:	2a00      	cmp	r2, #0
 80109ea:	d109      	bne.n	8010a00 <_strtoul_l.constprop.0+0xe0>
 80109ec:	b007      	add	sp, #28
 80109ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109f0:	2f00      	cmp	r7, #0
 80109f2:	d000      	beq.n	80109f6 <_strtoul_l.constprop.0+0xd6>
 80109f4:	4240      	negs	r0, r0
 80109f6:	9a02      	ldr	r2, [sp, #8]
 80109f8:	2a00      	cmp	r2, #0
 80109fa:	d0f7      	beq.n	80109ec <_strtoul_l.constprop.0+0xcc>
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d001      	beq.n	8010a04 <_strtoul_l.constprop.0+0xe4>
 8010a00:	1e6b      	subs	r3, r5, #1
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	9b02      	ldr	r3, [sp, #8]
 8010a06:	9a01      	ldr	r2, [sp, #4]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	e7ef      	b.n	80109ec <_strtoul_l.constprop.0+0xcc>
 8010a0c:	2430      	movs	r4, #48	; 0x30
 8010a0e:	2e00      	cmp	r6, #0
 8010a10:	d1ad      	bne.n	801096e <_strtoul_l.constprop.0+0x4e>
 8010a12:	3608      	adds	r6, #8
 8010a14:	e7ab      	b.n	801096e <_strtoul_l.constprop.0+0x4e>
 8010a16:	2c30      	cmp	r4, #48	; 0x30
 8010a18:	d0a1      	beq.n	801095e <_strtoul_l.constprop.0+0x3e>
 8010a1a:	260a      	movs	r6, #10
 8010a1c:	e7a7      	b.n	801096e <_strtoul_l.constprop.0+0x4e>
 8010a1e:	46c0      	nop			; (mov r8, r8)
 8010a20:	08013dc9 	.word	0x08013dc9

08010a24 <_strtoul_r>:
 8010a24:	b510      	push	{r4, lr}
 8010a26:	f7ff ff7b 	bl	8010920 <_strtoul_l.constprop.0>
 8010a2a:	bd10      	pop	{r4, pc}

08010a2c <_strtoll_l.constprop.0>:
 8010a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a2e:	b08d      	sub	sp, #52	; 0x34
 8010a30:	9203      	str	r2, [sp, #12]
 8010a32:	4a53      	ldr	r2, [pc, #332]	; (8010b80 <_strtoll_l.constprop.0+0x154>)
 8010a34:	001e      	movs	r6, r3
 8010a36:	9102      	str	r1, [sp, #8]
 8010a38:	000b      	movs	r3, r1
 8010a3a:	4694      	mov	ip, r2
 8010a3c:	2108      	movs	r1, #8
 8010a3e:	900a      	str	r0, [sp, #40]	; 0x28
 8010a40:	001a      	movs	r2, r3
 8010a42:	4660      	mov	r0, ip
 8010a44:	7814      	ldrb	r4, [r2, #0]
 8010a46:	3301      	adds	r3, #1
 8010a48:	5d00      	ldrb	r0, [r0, r4]
 8010a4a:	001d      	movs	r5, r3
 8010a4c:	0007      	movs	r7, r0
 8010a4e:	400f      	ands	r7, r1
 8010a50:	4208      	tst	r0, r1
 8010a52:	d1f5      	bne.n	8010a40 <_strtoll_l.constprop.0+0x14>
 8010a54:	2c2d      	cmp	r4, #45	; 0x2d
 8010a56:	d153      	bne.n	8010b00 <_strtoll_l.constprop.0+0xd4>
 8010a58:	781c      	ldrb	r4, [r3, #0]
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	1c95      	adds	r5, r2, #2
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	2e00      	cmp	r6, #0
 8010a62:	d100      	bne.n	8010a66 <_strtoll_l.constprop.0+0x3a>
 8010a64:	e086      	b.n	8010b74 <_strtoll_l.constprop.0+0x148>
 8010a66:	2e10      	cmp	r6, #16
 8010a68:	d10a      	bne.n	8010a80 <_strtoll_l.constprop.0+0x54>
 8010a6a:	2c30      	cmp	r4, #48	; 0x30
 8010a6c:	d108      	bne.n	8010a80 <_strtoll_l.constprop.0+0x54>
 8010a6e:	2220      	movs	r2, #32
 8010a70:	782b      	ldrb	r3, [r5, #0]
 8010a72:	4393      	bics	r3, r2
 8010a74:	2b58      	cmp	r3, #88	; 0x58
 8010a76:	d000      	beq.n	8010a7a <_strtoll_l.constprop.0+0x4e>
 8010a78:	e076      	b.n	8010b68 <_strtoll_l.constprop.0+0x13c>
 8010a7a:	2610      	movs	r6, #16
 8010a7c:	786c      	ldrb	r4, [r5, #1]
 8010a7e:	3502      	adds	r5, #2
 8010a80:	2001      	movs	r0, #1
 8010a82:	2300      	movs	r3, #0
 8010a84:	493f      	ldr	r1, [pc, #252]	; (8010b84 <_strtoll_l.constprop.0+0x158>)
 8010a86:	9a01      	ldr	r2, [sp, #4]
 8010a88:	4240      	negs	r0, r0
 8010a8a:	1812      	adds	r2, r2, r0
 8010a8c:	414b      	adcs	r3, r1
 8010a8e:	9204      	str	r2, [sp, #16]
 8010a90:	9305      	str	r3, [sp, #20]
 8010a92:	9804      	ldr	r0, [sp, #16]
 8010a94:	9905      	ldr	r1, [sp, #20]
 8010a96:	17f3      	asrs	r3, r6, #31
 8010a98:	0032      	movs	r2, r6
 8010a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a9c:	f7ef fd02 	bl	80004a4 <__aeabi_uldivmod>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	000f      	movs	r7, r1
 8010aa4:	9008      	str	r0, [sp, #32]
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8010aac:	0022      	movs	r2, r4
 8010aae:	3a30      	subs	r2, #48	; 0x30
 8010ab0:	2a09      	cmp	r2, #9
 8010ab2:	d82b      	bhi.n	8010b0c <_strtoll_l.constprop.0+0xe0>
 8010ab4:	0014      	movs	r4, r2
 8010ab6:	42a6      	cmp	r6, r4
 8010ab8:	dd37      	ble.n	8010b2a <_strtoll_l.constprop.0+0xfe>
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	d01d      	beq.n	8010afa <_strtoll_l.constprop.0+0xce>
 8010abe:	42b9      	cmp	r1, r7
 8010ac0:	d830      	bhi.n	8010b24 <_strtoll_l.constprop.0+0xf8>
 8010ac2:	d102      	bne.n	8010aca <_strtoll_l.constprop.0+0x9e>
 8010ac4:	9b08      	ldr	r3, [sp, #32]
 8010ac6:	4298      	cmp	r0, r3
 8010ac8:	d82c      	bhi.n	8010b24 <_strtoll_l.constprop.0+0xf8>
 8010aca:	9b08      	ldr	r3, [sp, #32]
 8010acc:	4283      	cmp	r3, r0
 8010ace:	d106      	bne.n	8010ade <_strtoll_l.constprop.0+0xb2>
 8010ad0:	428f      	cmp	r7, r1
 8010ad2:	d104      	bne.n	8010ade <_strtoll_l.constprop.0+0xb2>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ad8:	425b      	negs	r3, r3
 8010ada:	42a2      	cmp	r2, r4
 8010adc:	db0d      	blt.n	8010afa <_strtoll_l.constprop.0+0xce>
 8010ade:	000b      	movs	r3, r1
 8010ae0:	0002      	movs	r2, r0
 8010ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ae4:	0030      	movs	r0, r6
 8010ae6:	f7ef fcfd 	bl	80004e4 <__aeabi_lmul>
 8010aea:	17e3      	asrs	r3, r4, #31
 8010aec:	9406      	str	r4, [sp, #24]
 8010aee:	9307      	str	r3, [sp, #28]
 8010af0:	9b06      	ldr	r3, [sp, #24]
 8010af2:	9c07      	ldr	r4, [sp, #28]
 8010af4:	18c0      	adds	r0, r0, r3
 8010af6:	4161      	adcs	r1, r4
 8010af8:	2301      	movs	r3, #1
 8010afa:	782c      	ldrb	r4, [r5, #0]
 8010afc:	3501      	adds	r5, #1
 8010afe:	e7d5      	b.n	8010aac <_strtoll_l.constprop.0+0x80>
 8010b00:	9701      	str	r7, [sp, #4]
 8010b02:	2c2b      	cmp	r4, #43	; 0x2b
 8010b04:	d1ac      	bne.n	8010a60 <_strtoll_l.constprop.0+0x34>
 8010b06:	781c      	ldrb	r4, [r3, #0]
 8010b08:	1c95      	adds	r5, r2, #2
 8010b0a:	e7a9      	b.n	8010a60 <_strtoll_l.constprop.0+0x34>
 8010b0c:	0022      	movs	r2, r4
 8010b0e:	3a41      	subs	r2, #65	; 0x41
 8010b10:	2a19      	cmp	r2, #25
 8010b12:	d801      	bhi.n	8010b18 <_strtoll_l.constprop.0+0xec>
 8010b14:	3c37      	subs	r4, #55	; 0x37
 8010b16:	e7ce      	b.n	8010ab6 <_strtoll_l.constprop.0+0x8a>
 8010b18:	0022      	movs	r2, r4
 8010b1a:	3a61      	subs	r2, #97	; 0x61
 8010b1c:	2a19      	cmp	r2, #25
 8010b1e:	d804      	bhi.n	8010b2a <_strtoll_l.constprop.0+0xfe>
 8010b20:	3c57      	subs	r4, #87	; 0x57
 8010b22:	e7c8      	b.n	8010ab6 <_strtoll_l.constprop.0+0x8a>
 8010b24:	2301      	movs	r3, #1
 8010b26:	425b      	negs	r3, r3
 8010b28:	e7e7      	b.n	8010afa <_strtoll_l.constprop.0+0xce>
 8010b2a:	1c5a      	adds	r2, r3, #1
 8010b2c:	d109      	bne.n	8010b42 <_strtoll_l.constprop.0+0x116>
 8010b2e:	9804      	ldr	r0, [sp, #16]
 8010b30:	9905      	ldr	r1, [sp, #20]
 8010b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b34:	3323      	adds	r3, #35	; 0x23
 8010b36:	6013      	str	r3, [r2, #0]
 8010b38:	9b03      	ldr	r3, [sp, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d10e      	bne.n	8010b5c <_strtoll_l.constprop.0+0x130>
 8010b3e:	b00d      	add	sp, #52	; 0x34
 8010b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b42:	9a01      	ldr	r2, [sp, #4]
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	d004      	beq.n	8010b52 <_strtoll_l.constprop.0+0x126>
 8010b48:	0006      	movs	r6, r0
 8010b4a:	000f      	movs	r7, r1
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	4270      	negs	r0, r6
 8010b50:	41b9      	sbcs	r1, r7
 8010b52:	9a03      	ldr	r2, [sp, #12]
 8010b54:	2a00      	cmp	r2, #0
 8010b56:	d0f2      	beq.n	8010b3e <_strtoll_l.constprop.0+0x112>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <_strtoll_l.constprop.0+0x134>
 8010b5c:	1e6b      	subs	r3, r5, #1
 8010b5e:	9302      	str	r3, [sp, #8]
 8010b60:	9b03      	ldr	r3, [sp, #12]
 8010b62:	9a02      	ldr	r2, [sp, #8]
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	e7ea      	b.n	8010b3e <_strtoll_l.constprop.0+0x112>
 8010b68:	2430      	movs	r4, #48	; 0x30
 8010b6a:	2e00      	cmp	r6, #0
 8010b6c:	d000      	beq.n	8010b70 <_strtoll_l.constprop.0+0x144>
 8010b6e:	e787      	b.n	8010a80 <_strtoll_l.constprop.0+0x54>
 8010b70:	3608      	adds	r6, #8
 8010b72:	e785      	b.n	8010a80 <_strtoll_l.constprop.0+0x54>
 8010b74:	2c30      	cmp	r4, #48	; 0x30
 8010b76:	d100      	bne.n	8010b7a <_strtoll_l.constprop.0+0x14e>
 8010b78:	e779      	b.n	8010a6e <_strtoll_l.constprop.0+0x42>
 8010b7a:	260a      	movs	r6, #10
 8010b7c:	e780      	b.n	8010a80 <_strtoll_l.constprop.0+0x54>
 8010b7e:	46c0      	nop			; (mov r8, r8)
 8010b80:	08013dc9 	.word	0x08013dc9
 8010b84:	7fffffff 	.word	0x7fffffff

08010b88 <_strtoll_r>:
 8010b88:	b510      	push	{r4, lr}
 8010b8a:	f7ff ff4f 	bl	8010a2c <_strtoll_l.constprop.0>
 8010b8e:	bd10      	pop	{r4, pc}

08010b90 <_strtoull_l.constprop.0>:
 8010b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b92:	b08b      	sub	sp, #44	; 0x2c
 8010b94:	9202      	str	r2, [sp, #8]
 8010b96:	4a54      	ldr	r2, [pc, #336]	; (8010ce8 <_strtoull_l.constprop.0+0x158>)
 8010b98:	001e      	movs	r6, r3
 8010b9a:	9101      	str	r1, [sp, #4]
 8010b9c:	000b      	movs	r3, r1
 8010b9e:	4694      	mov	ip, r2
 8010ba0:	2108      	movs	r1, #8
 8010ba2:	9009      	str	r0, [sp, #36]	; 0x24
 8010ba4:	001a      	movs	r2, r3
 8010ba6:	4660      	mov	r0, ip
 8010ba8:	7814      	ldrb	r4, [r2, #0]
 8010baa:	3301      	adds	r3, #1
 8010bac:	5d00      	ldrb	r0, [r0, r4]
 8010bae:	001d      	movs	r5, r3
 8010bb0:	0007      	movs	r7, r0
 8010bb2:	400f      	ands	r7, r1
 8010bb4:	4208      	tst	r0, r1
 8010bb6:	d1f5      	bne.n	8010ba4 <_strtoull_l.constprop.0+0x14>
 8010bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8010bba:	d154      	bne.n	8010c66 <_strtoull_l.constprop.0+0xd6>
 8010bbc:	781c      	ldrb	r4, [r3, #0]
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	1c95      	adds	r5, r2, #2
 8010bc2:	9306      	str	r3, [sp, #24]
 8010bc4:	2e00      	cmp	r6, #0
 8010bc6:	d100      	bne.n	8010bca <_strtoull_l.constprop.0+0x3a>
 8010bc8:	e088      	b.n	8010cdc <_strtoull_l.constprop.0+0x14c>
 8010bca:	2e10      	cmp	r6, #16
 8010bcc:	d10a      	bne.n	8010be4 <_strtoull_l.constprop.0+0x54>
 8010bce:	2c30      	cmp	r4, #48	; 0x30
 8010bd0:	d108      	bne.n	8010be4 <_strtoull_l.constprop.0+0x54>
 8010bd2:	2220      	movs	r2, #32
 8010bd4:	782b      	ldrb	r3, [r5, #0]
 8010bd6:	4393      	bics	r3, r2
 8010bd8:	2b58      	cmp	r3, #88	; 0x58
 8010bda:	d000      	beq.n	8010bde <_strtoull_l.constprop.0+0x4e>
 8010bdc:	e078      	b.n	8010cd0 <_strtoull_l.constprop.0+0x140>
 8010bde:	2610      	movs	r6, #16
 8010be0:	786c      	ldrb	r4, [r5, #1]
 8010be2:	3502      	adds	r5, #2
 8010be4:	17f7      	asrs	r7, r6, #31
 8010be6:	0032      	movs	r2, r6
 8010be8:	003b      	movs	r3, r7
 8010bea:	2001      	movs	r0, #1
 8010bec:	4240      	negs	r0, r0
 8010bee:	17c1      	asrs	r1, r0, #31
 8010bf0:	f7ef fc58 	bl	80004a4 <__aeabi_uldivmod>
 8010bf4:	0032      	movs	r2, r6
 8010bf6:	9007      	str	r0, [sp, #28]
 8010bf8:	9103      	str	r1, [sp, #12]
 8010bfa:	003b      	movs	r3, r7
 8010bfc:	2001      	movs	r0, #1
 8010bfe:	4240      	negs	r0, r0
 8010c00:	17c1      	asrs	r1, r0, #31
 8010c02:	f7ef fc4f 	bl	80004a4 <__aeabi_uldivmod>
 8010c06:	2300      	movs	r3, #0
 8010c08:	2000      	movs	r0, #0
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	9208      	str	r2, [sp, #32]
 8010c0e:	0022      	movs	r2, r4
 8010c10:	3a30      	subs	r2, #48	; 0x30
 8010c12:	2a09      	cmp	r2, #9
 8010c14:	d82d      	bhi.n	8010c72 <_strtoull_l.constprop.0+0xe2>
 8010c16:	0014      	movs	r4, r2
 8010c18:	42a6      	cmp	r6, r4
 8010c1a:	dd39      	ble.n	8010c90 <_strtoull_l.constprop.0+0x100>
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	d01f      	beq.n	8010c60 <_strtoull_l.constprop.0+0xd0>
 8010c20:	9b03      	ldr	r3, [sp, #12]
 8010c22:	4299      	cmp	r1, r3
 8010c24:	d831      	bhi.n	8010c8a <_strtoull_l.constprop.0+0xfa>
 8010c26:	d102      	bne.n	8010c2e <_strtoull_l.constprop.0+0x9e>
 8010c28:	9b07      	ldr	r3, [sp, #28]
 8010c2a:	4298      	cmp	r0, r3
 8010c2c:	d82d      	bhi.n	8010c8a <_strtoull_l.constprop.0+0xfa>
 8010c2e:	9b07      	ldr	r3, [sp, #28]
 8010c30:	4283      	cmp	r3, r0
 8010c32:	d107      	bne.n	8010c44 <_strtoull_l.constprop.0+0xb4>
 8010c34:	9b03      	ldr	r3, [sp, #12]
 8010c36:	428b      	cmp	r3, r1
 8010c38:	d104      	bne.n	8010c44 <_strtoull_l.constprop.0+0xb4>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	9a08      	ldr	r2, [sp, #32]
 8010c3e:	425b      	negs	r3, r3
 8010c40:	42a2      	cmp	r2, r4
 8010c42:	db0d      	blt.n	8010c60 <_strtoull_l.constprop.0+0xd0>
 8010c44:	000b      	movs	r3, r1
 8010c46:	0002      	movs	r2, r0
 8010c48:	0039      	movs	r1, r7
 8010c4a:	0030      	movs	r0, r6
 8010c4c:	f7ef fc4a 	bl	80004e4 <__aeabi_lmul>
 8010c50:	17e3      	asrs	r3, r4, #31
 8010c52:	9404      	str	r4, [sp, #16]
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	9c05      	ldr	r4, [sp, #20]
 8010c5a:	18c0      	adds	r0, r0, r3
 8010c5c:	4161      	adcs	r1, r4
 8010c5e:	2301      	movs	r3, #1
 8010c60:	782c      	ldrb	r4, [r5, #0]
 8010c62:	3501      	adds	r5, #1
 8010c64:	e7d3      	b.n	8010c0e <_strtoull_l.constprop.0+0x7e>
 8010c66:	9706      	str	r7, [sp, #24]
 8010c68:	2c2b      	cmp	r4, #43	; 0x2b
 8010c6a:	d1ab      	bne.n	8010bc4 <_strtoull_l.constprop.0+0x34>
 8010c6c:	781c      	ldrb	r4, [r3, #0]
 8010c6e:	1c95      	adds	r5, r2, #2
 8010c70:	e7a8      	b.n	8010bc4 <_strtoull_l.constprop.0+0x34>
 8010c72:	0022      	movs	r2, r4
 8010c74:	3a41      	subs	r2, #65	; 0x41
 8010c76:	2a19      	cmp	r2, #25
 8010c78:	d801      	bhi.n	8010c7e <_strtoull_l.constprop.0+0xee>
 8010c7a:	3c37      	subs	r4, #55	; 0x37
 8010c7c:	e7cc      	b.n	8010c18 <_strtoull_l.constprop.0+0x88>
 8010c7e:	0022      	movs	r2, r4
 8010c80:	3a61      	subs	r2, #97	; 0x61
 8010c82:	2a19      	cmp	r2, #25
 8010c84:	d804      	bhi.n	8010c90 <_strtoull_l.constprop.0+0x100>
 8010c86:	3c57      	subs	r4, #87	; 0x57
 8010c88:	e7c6      	b.n	8010c18 <_strtoull_l.constprop.0+0x88>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	425b      	negs	r3, r3
 8010c8e:	e7e7      	b.n	8010c60 <_strtoull_l.constprop.0+0xd0>
 8010c90:	1c5a      	adds	r2, r3, #1
 8010c92:	d10a      	bne.n	8010caa <_strtoull_l.constprop.0+0x11a>
 8010c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c96:	3323      	adds	r3, #35	; 0x23
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	9b02      	ldr	r3, [sp, #8]
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	4240      	negs	r0, r0
 8010ca0:	17c1      	asrs	r1, r0, #31
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10e      	bne.n	8010cc4 <_strtoull_l.constprop.0+0x134>
 8010ca6:	b00b      	add	sp, #44	; 0x2c
 8010ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010caa:	9a06      	ldr	r2, [sp, #24]
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	d004      	beq.n	8010cba <_strtoull_l.constprop.0+0x12a>
 8010cb0:	0006      	movs	r6, r0
 8010cb2:	000f      	movs	r7, r1
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	4270      	negs	r0, r6
 8010cb8:	41b9      	sbcs	r1, r7
 8010cba:	9a02      	ldr	r2, [sp, #8]
 8010cbc:	2a00      	cmp	r2, #0
 8010cbe:	d0f2      	beq.n	8010ca6 <_strtoull_l.constprop.0+0x116>
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d001      	beq.n	8010cc8 <_strtoull_l.constprop.0+0x138>
 8010cc4:	1e6b      	subs	r3, r5, #1
 8010cc6:	9301      	str	r3, [sp, #4]
 8010cc8:	9b02      	ldr	r3, [sp, #8]
 8010cca:	9a01      	ldr	r2, [sp, #4]
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	e7ea      	b.n	8010ca6 <_strtoull_l.constprop.0+0x116>
 8010cd0:	2430      	movs	r4, #48	; 0x30
 8010cd2:	2e00      	cmp	r6, #0
 8010cd4:	d000      	beq.n	8010cd8 <_strtoull_l.constprop.0+0x148>
 8010cd6:	e785      	b.n	8010be4 <_strtoull_l.constprop.0+0x54>
 8010cd8:	3608      	adds	r6, #8
 8010cda:	e783      	b.n	8010be4 <_strtoull_l.constprop.0+0x54>
 8010cdc:	2c30      	cmp	r4, #48	; 0x30
 8010cde:	d100      	bne.n	8010ce2 <_strtoull_l.constprop.0+0x152>
 8010ce0:	e777      	b.n	8010bd2 <_strtoull_l.constprop.0+0x42>
 8010ce2:	260a      	movs	r6, #10
 8010ce4:	e77e      	b.n	8010be4 <_strtoull_l.constprop.0+0x54>
 8010ce6:	46c0      	nop			; (mov r8, r8)
 8010ce8:	08013dc9 	.word	0x08013dc9

08010cec <_strtoull_r>:
 8010cec:	b510      	push	{r4, lr}
 8010cee:	f7ff ff4f 	bl	8010b90 <_strtoull_l.constprop.0>
 8010cf2:	bd10      	pop	{r4, pc}

08010cf4 <_mbrtowc_r>:
 8010cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cf6:	0004      	movs	r4, r0
 8010cf8:	0010      	movs	r0, r2
 8010cfa:	4a0b      	ldr	r2, [pc, #44]	; (8010d28 <_mbrtowc_r+0x34>)
 8010cfc:	9d06      	ldr	r5, [sp, #24]
 8010cfe:	32e4      	adds	r2, #228	; 0xe4
 8010d00:	6816      	ldr	r6, [r2, #0]
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d10c      	bne.n	8010d20 <_mbrtowc_r+0x2c>
 8010d06:	2301      	movs	r3, #1
 8010d08:	0001      	movs	r1, r0
 8010d0a:	4a08      	ldr	r2, [pc, #32]	; (8010d2c <_mbrtowc_r+0x38>)
 8010d0c:	9500      	str	r5, [sp, #0]
 8010d0e:	0020      	movs	r0, r4
 8010d10:	47b0      	blx	r6
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	d103      	bne.n	8010d1e <_mbrtowc_r+0x2a>
 8010d16:	2300      	movs	r3, #0
 8010d18:	602b      	str	r3, [r5, #0]
 8010d1a:	338a      	adds	r3, #138	; 0x8a
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010d20:	0002      	movs	r2, r0
 8010d22:	9500      	str	r5, [sp, #0]
 8010d24:	e7f3      	b.n	8010d0e <_mbrtowc_r+0x1a>
 8010d26:	46c0      	nop			; (mov r8, r8)
 8010d28:	2000043c 	.word	0x2000043c
 8010d2c:	08014153 	.word	0x08014153

08010d30 <iswspace>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	2100      	movs	r1, #0
 8010d34:	f000 f802 	bl	8010d3c <iswspace_l>
 8010d38:	bd10      	pop	{r4, pc}
	...

08010d3c <iswspace_l>:
 8010d3c:	0003      	movs	r3, r0
 8010d3e:	2000      	movs	r0, #0
 8010d40:	2bff      	cmp	r3, #255	; 0xff
 8010d42:	d803      	bhi.n	8010d4c <iswspace_l+0x10>
 8010d44:	4a02      	ldr	r2, [pc, #8]	; (8010d50 <iswspace_l+0x14>)
 8010d46:	5cd0      	ldrb	r0, [r2, r3]
 8010d48:	2308      	movs	r3, #8
 8010d4a:	4018      	ands	r0, r3
 8010d4c:	4770      	bx	lr
 8010d4e:	46c0      	nop			; (mov r8, r8)
 8010d50:	08013dc9 	.word	0x08013dc9

08010d54 <fiprintf>:
 8010d54:	b40e      	push	{r1, r2, r3}
 8010d56:	b517      	push	{r0, r1, r2, r4, lr}
 8010d58:	4c05      	ldr	r4, [pc, #20]	; (8010d70 <fiprintf+0x1c>)
 8010d5a:	ab05      	add	r3, sp, #20
 8010d5c:	cb04      	ldmia	r3!, {r2}
 8010d5e:	0001      	movs	r1, r0
 8010d60:	6820      	ldr	r0, [r4, #0]
 8010d62:	9301      	str	r3, [sp, #4]
 8010d64:	f000 f954 	bl	8011010 <_vfiprintf_r>
 8010d68:	bc1e      	pop	{r1, r2, r3, r4}
 8010d6a:	bc08      	pop	{r3}
 8010d6c:	b003      	add	sp, #12
 8010d6e:	4718      	bx	r3
 8010d70:	200006c8 	.word	0x200006c8

08010d74 <__ssprint_r>:
 8010d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d76:	6813      	ldr	r3, [r2, #0]
 8010d78:	b087      	sub	sp, #28
 8010d7a:	0017      	movs	r7, r2
 8010d7c:	9303      	str	r3, [sp, #12]
 8010d7e:	6893      	ldr	r3, [r2, #8]
 8010d80:	2200      	movs	r2, #0
 8010d82:	000c      	movs	r4, r1
 8010d84:	9005      	str	r0, [sp, #20]
 8010d86:	9202      	str	r2, [sp, #8]
 8010d88:	9201      	str	r2, [sp, #4]
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d10d      	bne.n	8010daa <__ssprint_r+0x36>
 8010d8e:	2000      	movs	r0, #0
 8010d90:	2300      	movs	r3, #0
 8010d92:	607b      	str	r3, [r7, #4]
 8010d94:	b007      	add	sp, #28
 8010d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d98:	9b03      	ldr	r3, [sp, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	9302      	str	r3, [sp, #8]
 8010d9e:	9b03      	ldr	r3, [sp, #12]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	9b03      	ldr	r3, [sp, #12]
 8010da6:	3308      	adds	r3, #8
 8010da8:	9303      	str	r3, [sp, #12]
 8010daa:	9a01      	ldr	r2, [sp, #4]
 8010dac:	68a6      	ldr	r6, [r4, #8]
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	2a00      	cmp	r2, #0
 8010db2:	d0f1      	beq.n	8010d98 <__ssprint_r+0x24>
 8010db4:	42b2      	cmp	r2, r6
 8010db6:	d32e      	bcc.n	8010e16 <__ssprint_r+0xa2>
 8010db8:	2190      	movs	r1, #144	; 0x90
 8010dba:	89a2      	ldrh	r2, [r4, #12]
 8010dbc:	00c9      	lsls	r1, r1, #3
 8010dbe:	420a      	tst	r2, r1
 8010dc0:	d029      	beq.n	8010e16 <__ssprint_r+0xa2>
 8010dc2:	2003      	movs	r0, #3
 8010dc4:	6921      	ldr	r1, [r4, #16]
 8010dc6:	1a5b      	subs	r3, r3, r1
 8010dc8:	9304      	str	r3, [sp, #16]
 8010dca:	6963      	ldr	r3, [r4, #20]
 8010dcc:	4343      	muls	r3, r0
 8010dce:	0fdd      	lsrs	r5, r3, #31
 8010dd0:	18ed      	adds	r5, r5, r3
 8010dd2:	9b04      	ldr	r3, [sp, #16]
 8010dd4:	9801      	ldr	r0, [sp, #4]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	181b      	adds	r3, r3, r0
 8010dda:	106d      	asrs	r5, r5, #1
 8010ddc:	42ab      	cmp	r3, r5
 8010dde:	d900      	bls.n	8010de2 <__ssprint_r+0x6e>
 8010de0:	001d      	movs	r5, r3
 8010de2:	0552      	lsls	r2, r2, #21
 8010de4:	d532      	bpl.n	8010e4c <__ssprint_r+0xd8>
 8010de6:	0029      	movs	r1, r5
 8010de8:	9805      	ldr	r0, [sp, #20]
 8010dea:	f7f9 fa35 	bl	800a258 <_malloc_r>
 8010dee:	1e06      	subs	r6, r0, #0
 8010df0:	d036      	beq.n	8010e60 <__ssprint_r+0xec>
 8010df2:	9a04      	ldr	r2, [sp, #16]
 8010df4:	6921      	ldr	r1, [r4, #16]
 8010df6:	f7fa fd94 	bl	800b922 <memcpy>
 8010dfa:	89a2      	ldrh	r2, [r4, #12]
 8010dfc:	4b1e      	ldr	r3, [pc, #120]	; (8010e78 <__ssprint_r+0x104>)
 8010dfe:	401a      	ands	r2, r3
 8010e00:	2380      	movs	r3, #128	; 0x80
 8010e02:	4313      	orrs	r3, r2
 8010e04:	81a3      	strh	r3, [r4, #12]
 8010e06:	9b04      	ldr	r3, [sp, #16]
 8010e08:	6126      	str	r6, [r4, #16]
 8010e0a:	18f6      	adds	r6, r6, r3
 8010e0c:	6026      	str	r6, [r4, #0]
 8010e0e:	6165      	str	r5, [r4, #20]
 8010e10:	9e01      	ldr	r6, [sp, #4]
 8010e12:	1aed      	subs	r5, r5, r3
 8010e14:	60a5      	str	r5, [r4, #8]
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	429e      	cmp	r6, r3
 8010e1a:	d900      	bls.n	8010e1e <__ssprint_r+0xaa>
 8010e1c:	001e      	movs	r6, r3
 8010e1e:	0032      	movs	r2, r6
 8010e20:	9902      	ldr	r1, [sp, #8]
 8010e22:	6820      	ldr	r0, [r4, #0]
 8010e24:	f001 f86d 	bl	8011f02 <memmove>
 8010e28:	9a01      	ldr	r2, [sp, #4]
 8010e2a:	68a3      	ldr	r3, [r4, #8]
 8010e2c:	4694      	mov	ip, r2
 8010e2e:	1b9b      	subs	r3, r3, r6
 8010e30:	60a3      	str	r3, [r4, #8]
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	199b      	adds	r3, r3, r6
 8010e36:	6023      	str	r3, [r4, #0]
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	4463      	add	r3, ip
 8010e3c:	9302      	str	r3, [sp, #8]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	60bb      	str	r3, [r7, #8]
 8010e44:	d0a3      	beq.n	8010d8e <__ssprint_r+0x1a>
 8010e46:	2300      	movs	r3, #0
 8010e48:	9301      	str	r3, [sp, #4]
 8010e4a:	e7ae      	b.n	8010daa <__ssprint_r+0x36>
 8010e4c:	002a      	movs	r2, r5
 8010e4e:	9805      	ldr	r0, [sp, #20]
 8010e50:	f7ff fbc0 	bl	80105d4 <_realloc_r>
 8010e54:	1e06      	subs	r6, r0, #0
 8010e56:	d1d6      	bne.n	8010e06 <__ssprint_r+0x92>
 8010e58:	6921      	ldr	r1, [r4, #16]
 8010e5a:	9805      	ldr	r0, [sp, #20]
 8010e5c:	f7fa fddc 	bl	800ba18 <_free_r>
 8010e60:	230c      	movs	r3, #12
 8010e62:	9a05      	ldr	r2, [sp, #20]
 8010e64:	2001      	movs	r0, #1
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	89a2      	ldrh	r2, [r4, #12]
 8010e6a:	3334      	adds	r3, #52	; 0x34
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	81a3      	strh	r3, [r4, #12]
 8010e70:	2300      	movs	r3, #0
 8010e72:	4240      	negs	r0, r0
 8010e74:	60bb      	str	r3, [r7, #8]
 8010e76:	e78b      	b.n	8010d90 <__ssprint_r+0x1c>
 8010e78:	fffffb7f 	.word	0xfffffb7f

08010e7c <_sungetc_r>:
 8010e7c:	b570      	push	{r4, r5, r6, lr}
 8010e7e:	0014      	movs	r4, r2
 8010e80:	1c4b      	adds	r3, r1, #1
 8010e82:	d103      	bne.n	8010e8c <_sungetc_r+0x10>
 8010e84:	2501      	movs	r5, #1
 8010e86:	426d      	negs	r5, r5
 8010e88:	0028      	movs	r0, r5
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}
 8010e8c:	8993      	ldrh	r3, [r2, #12]
 8010e8e:	2220      	movs	r2, #32
 8010e90:	4393      	bics	r3, r2
 8010e92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e94:	81a3      	strh	r3, [r4, #12]
 8010e96:	b2ce      	uxtb	r6, r1
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	b2cd      	uxtb	r5, r1
 8010e9c:	2a00      	cmp	r2, #0
 8010e9e:	d010      	beq.n	8010ec2 <_sungetc_r+0x46>
 8010ea0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	dd07      	ble.n	8010eb6 <_sungetc_r+0x3a>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	6023      	str	r3, [r4, #0]
 8010eac:	701e      	strb	r6, [r3, #0]
 8010eae:	6863      	ldr	r3, [r4, #4]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	6063      	str	r3, [r4, #4]
 8010eb4:	e7e8      	b.n	8010e88 <_sungetc_r+0xc>
 8010eb6:	0021      	movs	r1, r4
 8010eb8:	f000 ff1a 	bl	8011cf0 <__submore>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d0f2      	beq.n	8010ea6 <_sungetc_r+0x2a>
 8010ec0:	e7e0      	b.n	8010e84 <_sungetc_r+0x8>
 8010ec2:	6921      	ldr	r1, [r4, #16]
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	2900      	cmp	r1, #0
 8010ec8:	d007      	beq.n	8010eda <_sungetc_r+0x5e>
 8010eca:	4291      	cmp	r1, r2
 8010ecc:	d205      	bcs.n	8010eda <_sungetc_r+0x5e>
 8010ece:	1e51      	subs	r1, r2, #1
 8010ed0:	7808      	ldrb	r0, [r1, #0]
 8010ed2:	42a8      	cmp	r0, r5
 8010ed4:	d101      	bne.n	8010eda <_sungetc_r+0x5e>
 8010ed6:	6021      	str	r1, [r4, #0]
 8010ed8:	e7ea      	b.n	8010eb0 <_sungetc_r+0x34>
 8010eda:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010edc:	0023      	movs	r3, r4
 8010ede:	3340      	adds	r3, #64	; 0x40
 8010ee0:	6323      	str	r3, [r4, #48]	; 0x30
 8010ee2:	2303      	movs	r3, #3
 8010ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8010ee6:	0023      	movs	r3, r4
 8010ee8:	3342      	adds	r3, #66	; 0x42
 8010eea:	63a2      	str	r2, [r4, #56]	; 0x38
 8010eec:	701e      	strb	r6, [r3, #0]
 8010eee:	6023      	str	r3, [r4, #0]
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e7de      	b.n	8010eb2 <_sungetc_r+0x36>

08010ef4 <__ssrefill_r>:
 8010ef4:	b510      	push	{r4, lr}
 8010ef6:	000c      	movs	r4, r1
 8010ef8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8010efa:	2900      	cmp	r1, #0
 8010efc:	d00e      	beq.n	8010f1c <__ssrefill_r+0x28>
 8010efe:	0023      	movs	r3, r4
 8010f00:	3340      	adds	r3, #64	; 0x40
 8010f02:	4299      	cmp	r1, r3
 8010f04:	d001      	beq.n	8010f0a <__ssrefill_r+0x16>
 8010f06:	f7fa fd87 	bl	800ba18 <_free_r>
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010f0e:	6320      	str	r0, [r4, #48]	; 0x30
 8010f10:	6063      	str	r3, [r4, #4]
 8010f12:	4283      	cmp	r3, r0
 8010f14:	d002      	beq.n	8010f1c <__ssrefill_r+0x28>
 8010f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd10      	pop	{r4, pc}
 8010f1c:	6923      	ldr	r3, [r4, #16]
 8010f1e:	2001      	movs	r0, #1
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	2300      	movs	r3, #0
 8010f24:	89a2      	ldrh	r2, [r4, #12]
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	3320      	adds	r3, #32
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	81a3      	strh	r3, [r4, #12]
 8010f2e:	4240      	negs	r0, r0
 8010f30:	e7f3      	b.n	8010f1a <__ssrefill_r+0x26>

08010f32 <_sfread_r>:
 8010f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f34:	0014      	movs	r4, r2
 8010f36:	435c      	muls	r4, r3
 8010f38:	b087      	sub	sp, #28
 8010f3a:	1e26      	subs	r6, r4, #0
 8010f3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f3e:	9005      	str	r0, [sp, #20]
 8010f40:	9101      	str	r1, [sp, #4]
 8010f42:	9202      	str	r2, [sp, #8]
 8010f44:	9303      	str	r3, [sp, #12]
 8010f46:	d11e      	bne.n	8010f86 <_sfread_r+0x54>
 8010f48:	0020      	movs	r0, r4
 8010f4a:	b007      	add	sp, #28
 8010f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f4e:	003a      	movs	r2, r7
 8010f50:	9801      	ldr	r0, [sp, #4]
 8010f52:	f7fa fce6 	bl	800b922 <memcpy>
 8010f56:	682b      	ldr	r3, [r5, #0]
 8010f58:	0029      	movs	r1, r5
 8010f5a:	19db      	adds	r3, r3, r7
 8010f5c:	602b      	str	r3, [r5, #0]
 8010f5e:	2300      	movs	r3, #0
 8010f60:	606b      	str	r3, [r5, #4]
 8010f62:	9b01      	ldr	r3, [sp, #4]
 8010f64:	9805      	ldr	r0, [sp, #20]
 8010f66:	19db      	adds	r3, r3, r7
 8010f68:	9301      	str	r3, [sp, #4]
 8010f6a:	1bf3      	subs	r3, r6, r7
 8010f6c:	9304      	str	r3, [sp, #16]
 8010f6e:	f7ff ffc1 	bl	8010ef4 <__ssrefill_r>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d006      	beq.n	8010f84 <_sfread_r+0x52>
 8010f76:	193c      	adds	r4, r7, r4
 8010f78:	1ba0      	subs	r0, r4, r6
 8010f7a:	9902      	ldr	r1, [sp, #8]
 8010f7c:	f7ef f8de 	bl	800013c <__udivsi3>
 8010f80:	0004      	movs	r4, r0
 8010f82:	e7e1      	b.n	8010f48 <_sfread_r+0x16>
 8010f84:	9e04      	ldr	r6, [sp, #16]
 8010f86:	686f      	ldr	r7, [r5, #4]
 8010f88:	6829      	ldr	r1, [r5, #0]
 8010f8a:	42b7      	cmp	r7, r6
 8010f8c:	d3df      	bcc.n	8010f4e <_sfread_r+0x1c>
 8010f8e:	0032      	movs	r2, r6
 8010f90:	9801      	ldr	r0, [sp, #4]
 8010f92:	f7fa fcc6 	bl	800b922 <memcpy>
 8010f96:	686b      	ldr	r3, [r5, #4]
 8010f98:	9c03      	ldr	r4, [sp, #12]
 8010f9a:	1b9b      	subs	r3, r3, r6
 8010f9c:	606b      	str	r3, [r5, #4]
 8010f9e:	682b      	ldr	r3, [r5, #0]
 8010fa0:	199b      	adds	r3, r3, r6
 8010fa2:	602b      	str	r3, [r5, #0]
 8010fa4:	e7d0      	b.n	8010f48 <_sfread_r+0x16>

08010fa6 <__sprint_r>:
 8010fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa8:	6893      	ldr	r3, [r2, #8]
 8010faa:	b085      	sub	sp, #20
 8010fac:	9001      	str	r0, [sp, #4]
 8010fae:	000d      	movs	r5, r1
 8010fb0:	0014      	movs	r4, r2
 8010fb2:	1e18      	subs	r0, r3, #0
 8010fb4:	d018      	beq.n	8010fe8 <__sprint_r+0x42>
 8010fb6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010fb8:	049b      	lsls	r3, r3, #18
 8010fba:	d524      	bpl.n	8011006 <__sprint_r+0x60>
 8010fbc:	6817      	ldr	r7, [r2, #0]
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	9302      	str	r3, [sp, #8]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	089b      	lsrs	r3, r3, #2
 8010fca:	9303      	str	r3, [sp, #12]
 8010fcc:	9b03      	ldr	r3, [sp, #12]
 8010fce:	42b3      	cmp	r3, r6
 8010fd0:	dc0e      	bgt.n	8010ff0 <__sprint_r+0x4a>
 8010fd2:	2203      	movs	r2, #3
 8010fd4:	9b00      	ldr	r3, [sp, #0]
 8010fd6:	68a0      	ldr	r0, [r4, #8]
 8010fd8:	4393      	bics	r3, r2
 8010fda:	1ac0      	subs	r0, r0, r3
 8010fdc:	60a0      	str	r0, [r4, #8]
 8010fde:	3708      	adds	r7, #8
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d1ec      	bne.n	8010fbe <__sprint_r+0x18>
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	60a3      	str	r3, [r4, #8]
 8010fe8:	2300      	movs	r3, #0
 8010fea:	6063      	str	r3, [r4, #4]
 8010fec:	b005      	add	sp, #20
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff0:	9902      	ldr	r1, [sp, #8]
 8010ff2:	00b3      	lsls	r3, r6, #2
 8010ff4:	58c9      	ldr	r1, [r1, r3]
 8010ff6:	002a      	movs	r2, r5
 8010ff8:	9801      	ldr	r0, [sp, #4]
 8010ffa:	f000 ff59 	bl	8011eb0 <_fputwc_r>
 8010ffe:	1c43      	adds	r3, r0, #1
 8011000:	d0f0      	beq.n	8010fe4 <__sprint_r+0x3e>
 8011002:	3601      	adds	r6, #1
 8011004:	e7e2      	b.n	8010fcc <__sprint_r+0x26>
 8011006:	9801      	ldr	r0, [sp, #4]
 8011008:	f000 fd14 	bl	8011a34 <__sfvwrite_r>
 801100c:	e7ea      	b.n	8010fe4 <__sprint_r+0x3e>
	...

08011010 <_vfiprintf_r>:
 8011010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011012:	b0c1      	sub	sp, #260	; 0x104
 8011014:	001c      	movs	r4, r3
 8011016:	001f      	movs	r7, r3
 8011018:	9006      	str	r0, [sp, #24]
 801101a:	9103      	str	r1, [sp, #12]
 801101c:	9207      	str	r2, [sp, #28]
 801101e:	2800      	cmp	r0, #0
 8011020:	d004      	beq.n	801102c <_vfiprintf_r+0x1c>
 8011022:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011024:	2b00      	cmp	r3, #0
 8011026:	d101      	bne.n	801102c <_vfiprintf_r+0x1c>
 8011028:	f7fa fa98 	bl	800b55c <__sinit>
 801102c:	9b03      	ldr	r3, [sp, #12]
 801102e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011030:	07db      	lsls	r3, r3, #31
 8011032:	d407      	bmi.n	8011044 <_vfiprintf_r+0x34>
 8011034:	9b03      	ldr	r3, [sp, #12]
 8011036:	899b      	ldrh	r3, [r3, #12]
 8011038:	059b      	lsls	r3, r3, #22
 801103a:	d403      	bmi.n	8011044 <_vfiprintf_r+0x34>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011040:	f7fa fc62 	bl	800b908 <__retarget_lock_acquire_recursive>
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	220c      	movs	r2, #12
 8011048:	5e9a      	ldrsh	r2, [r3, r2]
 801104a:	2380      	movs	r3, #128	; 0x80
 801104c:	019b      	lsls	r3, r3, #6
 801104e:	421a      	tst	r2, r3
 8011050:	d107      	bne.n	8011062 <_vfiprintf_r+0x52>
 8011052:	4313      	orrs	r3, r2
 8011054:	9a03      	ldr	r2, [sp, #12]
 8011056:	8193      	strh	r3, [r2, #12]
 8011058:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801105a:	4aa3      	ldr	r2, [pc, #652]	; (80112e8 <_vfiprintf_r+0x2d8>)
 801105c:	4013      	ands	r3, r2
 801105e:	9a03      	ldr	r2, [sp, #12]
 8011060:	6653      	str	r3, [r2, #100]	; 0x64
 8011062:	9b03      	ldr	r3, [sp, #12]
 8011064:	899b      	ldrh	r3, [r3, #12]
 8011066:	071b      	lsls	r3, r3, #28
 8011068:	d503      	bpl.n	8011072 <_vfiprintf_r+0x62>
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	691b      	ldr	r3, [r3, #16]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d118      	bne.n	80110a4 <_vfiprintf_r+0x94>
 8011072:	9903      	ldr	r1, [sp, #12]
 8011074:	9806      	ldr	r0, [sp, #24]
 8011076:	f000 fe79 	bl	8011d6c <__swsetup_r>
 801107a:	2800      	cmp	r0, #0
 801107c:	d012      	beq.n	80110a4 <_vfiprintf_r+0x94>
 801107e:	9b03      	ldr	r3, [sp, #12]
 8011080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011082:	07db      	lsls	r3, r3, #31
 8011084:	d505      	bpl.n	8011092 <_vfiprintf_r+0x82>
 8011086:	2301      	movs	r3, #1
 8011088:	425b      	negs	r3, r3
 801108a:	9308      	str	r3, [sp, #32]
 801108c:	9808      	ldr	r0, [sp, #32]
 801108e:	b041      	add	sp, #260	; 0x104
 8011090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011092:	9b03      	ldr	r3, [sp, #12]
 8011094:	899b      	ldrh	r3, [r3, #12]
 8011096:	059b      	lsls	r3, r3, #22
 8011098:	d4f5      	bmi.n	8011086 <_vfiprintf_r+0x76>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801109e:	f7fa fc34 	bl	800b90a <__retarget_lock_release_recursive>
 80110a2:	e7f0      	b.n	8011086 <_vfiprintf_r+0x76>
 80110a4:	221a      	movs	r2, #26
 80110a6:	9b03      	ldr	r3, [sp, #12]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	401a      	ands	r2, r3
 80110ac:	2a0a      	cmp	r2, #10
 80110ae:	d116      	bne.n	80110de <_vfiprintf_r+0xce>
 80110b0:	9a03      	ldr	r2, [sp, #12]
 80110b2:	210e      	movs	r1, #14
 80110b4:	5e52      	ldrsh	r2, [r2, r1]
 80110b6:	2a00      	cmp	r2, #0
 80110b8:	db11      	blt.n	80110de <_vfiprintf_r+0xce>
 80110ba:	9a03      	ldr	r2, [sp, #12]
 80110bc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80110be:	07d2      	lsls	r2, r2, #31
 80110c0:	d405      	bmi.n	80110ce <_vfiprintf_r+0xbe>
 80110c2:	059b      	lsls	r3, r3, #22
 80110c4:	d403      	bmi.n	80110ce <_vfiprintf_r+0xbe>
 80110c6:	9b03      	ldr	r3, [sp, #12]
 80110c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80110ca:	f7fa fc1e 	bl	800b90a <__retarget_lock_release_recursive>
 80110ce:	0023      	movs	r3, r4
 80110d0:	9a07      	ldr	r2, [sp, #28]
 80110d2:	9903      	ldr	r1, [sp, #12]
 80110d4:	9806      	ldr	r0, [sp, #24]
 80110d6:	f000 fc69 	bl	80119ac <__sbprintf>
 80110da:	9008      	str	r0, [sp, #32]
 80110dc:	e7d6      	b.n	801108c <_vfiprintf_r+0x7c>
 80110de:	2300      	movs	r3, #0
 80110e0:	ad17      	add	r5, sp, #92	; 0x5c
 80110e2:	9514      	str	r5, [sp, #80]	; 0x50
 80110e4:	9316      	str	r3, [sp, #88]	; 0x58
 80110e6:	9315      	str	r3, [sp, #84]	; 0x54
 80110e8:	930c      	str	r3, [sp, #48]	; 0x30
 80110ea:	930d      	str	r3, [sp, #52]	; 0x34
 80110ec:	930e      	str	r3, [sp, #56]	; 0x38
 80110ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80110f0:	9308      	str	r3, [sp, #32]
 80110f2:	9c07      	ldr	r4, [sp, #28]
 80110f4:	7823      	ldrb	r3, [r4, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d002      	beq.n	8011100 <_vfiprintf_r+0xf0>
 80110fa:	2b25      	cmp	r3, #37	; 0x25
 80110fc:	d000      	beq.n	8011100 <_vfiprintf_r+0xf0>
 80110fe:	e08d      	b.n	801121c <_vfiprintf_r+0x20c>
 8011100:	9b07      	ldr	r3, [sp, #28]
 8011102:	1ae6      	subs	r6, r4, r3
 8011104:	429c      	cmp	r4, r3
 8011106:	d016      	beq.n	8011136 <_vfiprintf_r+0x126>
 8011108:	602b      	str	r3, [r5, #0]
 801110a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801110c:	606e      	str	r6, [r5, #4]
 801110e:	199b      	adds	r3, r3, r6
 8011110:	9316      	str	r3, [sp, #88]	; 0x58
 8011112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011114:	3508      	adds	r5, #8
 8011116:	3301      	adds	r3, #1
 8011118:	9315      	str	r3, [sp, #84]	; 0x54
 801111a:	2b07      	cmp	r3, #7
 801111c:	dd08      	ble.n	8011130 <_vfiprintf_r+0x120>
 801111e:	9903      	ldr	r1, [sp, #12]
 8011120:	9806      	ldr	r0, [sp, #24]
 8011122:	aa14      	add	r2, sp, #80	; 0x50
 8011124:	f7ff ff3f 	bl	8010fa6 <__sprint_r>
 8011128:	2800      	cmp	r0, #0
 801112a:	d000      	beq.n	801112e <_vfiprintf_r+0x11e>
 801112c:	e3d9      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 801112e:	ad17      	add	r5, sp, #92	; 0x5c
 8011130:	9b08      	ldr	r3, [sp, #32]
 8011132:	199b      	adds	r3, r3, r6
 8011134:	9308      	str	r3, [sp, #32]
 8011136:	7823      	ldrb	r3, [r4, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d101      	bne.n	8011140 <_vfiprintf_r+0x130>
 801113c:	f000 fbf6 	bl	801192c <_vfiprintf_r+0x91c>
 8011140:	2200      	movs	r2, #0
 8011142:	a912      	add	r1, sp, #72	; 0x48
 8011144:	70ca      	strb	r2, [r1, #3]
 8011146:	2101      	movs	r1, #1
 8011148:	1c63      	adds	r3, r4, #1
 801114a:	0014      	movs	r4, r2
 801114c:	4249      	negs	r1, r1
 801114e:	9105      	str	r1, [sp, #20]
 8011150:	9209      	str	r2, [sp, #36]	; 0x24
 8011152:	1c5a      	adds	r2, r3, #1
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	9207      	str	r2, [sp, #28]
 8011158:	0018      	movs	r0, r3
 801115a:	3820      	subs	r0, #32
 801115c:	285a      	cmp	r0, #90	; 0x5a
 801115e:	d900      	bls.n	8011162 <_vfiprintf_r+0x152>
 8011160:	e362      	b.n	8011828 <_vfiprintf_r+0x818>
 8011162:	f7ee ffe1 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011166:	0078      	.short	0x0078
 8011168:	03610361 	.word	0x03610361
 801116c:	03610081 	.word	0x03610081
 8011170:	03610361 	.word	0x03610361
 8011174:	0361005d 	.word	0x0361005d
 8011178:	00830361 	.word	0x00830361
 801117c:	0361008b 	.word	0x0361008b
 8011180:	008f0089 	.word	0x008f0089
 8011184:	00ad0361 	.word	0x00ad0361
 8011188:	00af00af 	.word	0x00af00af
 801118c:	00af00af 	.word	0x00af00af
 8011190:	00af00af 	.word	0x00af00af
 8011194:	00af00af 	.word	0x00af00af
 8011198:	036100af 	.word	0x036100af
 801119c:	03610361 	.word	0x03610361
 80111a0:	03610361 	.word	0x03610361
 80111a4:	03610361 	.word	0x03610361
 80111a8:	03610361 	.word	0x03610361
 80111ac:	00e600da 	.word	0x00e600da
 80111b0:	03610361 	.word	0x03610361
 80111b4:	03610361 	.word	0x03610361
 80111b8:	03610361 	.word	0x03610361
 80111bc:	03610361 	.word	0x03610361
 80111c0:	03610361 	.word	0x03610361
 80111c4:	03610143 	.word	0x03610143
 80111c8:	03610361 	.word	0x03610361
 80111cc:	03610182 	.word	0x03610182
 80111d0:	0361027c 	.word	0x0361027c
 80111d4:	02ae0361 	.word	0x02ae0361
 80111d8:	03610361 	.word	0x03610361
 80111dc:	03610361 	.word	0x03610361
 80111e0:	03610361 	.word	0x03610361
 80111e4:	03610361 	.word	0x03610361
 80111e8:	03610361 	.word	0x03610361
 80111ec:	00e800da 	.word	0x00e800da
 80111f0:	03610361 	.word	0x03610361
 80111f4:	00c30361 	.word	0x00c30361
 80111f8:	00d600e8 	.word	0x00d600e8
 80111fc:	00cf0361 	.word	0x00cf0361
 8011200:	01260361 	.word	0x01260361
 8011204:	01740145 	.word	0x01740145
 8011208:	036100d6 	.word	0x036100d6
 801120c:	007f0182 	.word	0x007f0182
 8011210:	0361027e 	.word	0x0361027e
 8011214:	02cd0361 	.word	0x02cd0361
 8011218:	007f0361 	.word	0x007f0361
 801121c:	3401      	adds	r4, #1
 801121e:	e769      	b.n	80110f4 <_vfiprintf_r+0xe4>
 8011220:	9806      	ldr	r0, [sp, #24]
 8011222:	f7fe fa47 	bl	800f6b4 <_localeconv_r>
 8011226:	6843      	ldr	r3, [r0, #4]
 8011228:	0018      	movs	r0, r3
 801122a:	930f      	str	r3, [sp, #60]	; 0x3c
 801122c:	f7ee ff6a 	bl	8000104 <strlen>
 8011230:	900e      	str	r0, [sp, #56]	; 0x38
 8011232:	9806      	ldr	r0, [sp, #24]
 8011234:	f7fe fa3e 	bl	800f6b4 <_localeconv_r>
 8011238:	6883      	ldr	r3, [r0, #8]
 801123a:	930d      	str	r3, [sp, #52]	; 0x34
 801123c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801123e:	2b00      	cmp	r3, #0
 8011240:	d010      	beq.n	8011264 <_vfiprintf_r+0x254>
 8011242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00d      	beq.n	8011264 <_vfiprintf_r+0x254>
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d00a      	beq.n	8011264 <_vfiprintf_r+0x254>
 801124e:	2380      	movs	r3, #128	; 0x80
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	431c      	orrs	r4, r3
 8011254:	e006      	b.n	8011264 <_vfiprintf_r+0x254>
 8011256:	ab12      	add	r3, sp, #72	; 0x48
 8011258:	78da      	ldrb	r2, [r3, #3]
 801125a:	3303      	adds	r3, #3
 801125c:	2a00      	cmp	r2, #0
 801125e:	d101      	bne.n	8011264 <_vfiprintf_r+0x254>
 8011260:	3220      	adds	r2, #32
 8011262:	701a      	strb	r2, [r3, #0]
 8011264:	9b07      	ldr	r3, [sp, #28]
 8011266:	e774      	b.n	8011152 <_vfiprintf_r+0x142>
 8011268:	2301      	movs	r3, #1
 801126a:	e7f2      	b.n	8011252 <_vfiprintf_r+0x242>
 801126c:	cf08      	ldmia	r7!, {r3}
 801126e:	9309      	str	r3, [sp, #36]	; 0x24
 8011270:	2b00      	cmp	r3, #0
 8011272:	daf7      	bge.n	8011264 <_vfiprintf_r+0x254>
 8011274:	425b      	negs	r3, r3
 8011276:	9309      	str	r3, [sp, #36]	; 0x24
 8011278:	2304      	movs	r3, #4
 801127a:	e7ea      	b.n	8011252 <_vfiprintf_r+0x242>
 801127c:	222b      	movs	r2, #43	; 0x2b
 801127e:	ab12      	add	r3, sp, #72	; 0x48
 8011280:	70da      	strb	r2, [r3, #3]
 8011282:	e7ef      	b.n	8011264 <_vfiprintf_r+0x254>
 8011284:	9b07      	ldr	r3, [sp, #28]
 8011286:	1c5a      	adds	r2, r3, #1
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b2a      	cmp	r3, #42	; 0x2a
 801128c:	d00f      	beq.n	80112ae <_vfiprintf_r+0x29e>
 801128e:	2100      	movs	r1, #0
 8011290:	9105      	str	r1, [sp, #20]
 8011292:	0019      	movs	r1, r3
 8011294:	3930      	subs	r1, #48	; 0x30
 8011296:	9207      	str	r2, [sp, #28]
 8011298:	2909      	cmp	r1, #9
 801129a:	d900      	bls.n	801129e <_vfiprintf_r+0x28e>
 801129c:	e75c      	b.n	8011158 <_vfiprintf_r+0x148>
 801129e:	200a      	movs	r0, #10
 80112a0:	9b05      	ldr	r3, [sp, #20]
 80112a2:	4343      	muls	r3, r0
 80112a4:	185b      	adds	r3, r3, r1
 80112a6:	9305      	str	r3, [sp, #20]
 80112a8:	7813      	ldrb	r3, [r2, #0]
 80112aa:	3201      	adds	r2, #1
 80112ac:	e7f1      	b.n	8011292 <_vfiprintf_r+0x282>
 80112ae:	cf08      	ldmia	r7!, {r3}
 80112b0:	9305      	str	r3, [sp, #20]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	da02      	bge.n	80112bc <_vfiprintf_r+0x2ac>
 80112b6:	2301      	movs	r3, #1
 80112b8:	425b      	negs	r3, r3
 80112ba:	9305      	str	r3, [sp, #20]
 80112bc:	9207      	str	r2, [sp, #28]
 80112be:	e7d1      	b.n	8011264 <_vfiprintf_r+0x254>
 80112c0:	2380      	movs	r3, #128	; 0x80
 80112c2:	e7c6      	b.n	8011252 <_vfiprintf_r+0x242>
 80112c4:	2100      	movs	r1, #0
 80112c6:	9a07      	ldr	r2, [sp, #28]
 80112c8:	9109      	str	r1, [sp, #36]	; 0x24
 80112ca:	200a      	movs	r0, #10
 80112cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112ce:	3b30      	subs	r3, #48	; 0x30
 80112d0:	4341      	muls	r1, r0
 80112d2:	185b      	adds	r3, r3, r1
 80112d4:	9309      	str	r3, [sp, #36]	; 0x24
 80112d6:	0013      	movs	r3, r2
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	3201      	adds	r2, #1
 80112dc:	0019      	movs	r1, r3
 80112de:	3930      	subs	r1, #48	; 0x30
 80112e0:	9207      	str	r2, [sp, #28]
 80112e2:	2909      	cmp	r1, #9
 80112e4:	d9f1      	bls.n	80112ca <_vfiprintf_r+0x2ba>
 80112e6:	e737      	b.n	8011158 <_vfiprintf_r+0x148>
 80112e8:	ffffdfff 	.word	0xffffdfff
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b68      	cmp	r3, #104	; 0x68
 80112f2:	d105      	bne.n	8011300 <_vfiprintf_r+0x2f0>
 80112f4:	9b07      	ldr	r3, [sp, #28]
 80112f6:	3301      	adds	r3, #1
 80112f8:	9307      	str	r3, [sp, #28]
 80112fa:	2380      	movs	r3, #128	; 0x80
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	e7a8      	b.n	8011252 <_vfiprintf_r+0x242>
 8011300:	2340      	movs	r3, #64	; 0x40
 8011302:	e7a6      	b.n	8011252 <_vfiprintf_r+0x242>
 8011304:	9b07      	ldr	r3, [sp, #28]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	2b6c      	cmp	r3, #108	; 0x6c
 801130a:	d104      	bne.n	8011316 <_vfiprintf_r+0x306>
 801130c:	9b07      	ldr	r3, [sp, #28]
 801130e:	3301      	adds	r3, #1
 8011310:	9307      	str	r3, [sp, #28]
 8011312:	2320      	movs	r3, #32
 8011314:	e79d      	b.n	8011252 <_vfiprintf_r+0x242>
 8011316:	2310      	movs	r3, #16
 8011318:	e79b      	b.n	8011252 <_vfiprintf_r+0x242>
 801131a:	003a      	movs	r2, r7
 801131c:	ca08      	ldmia	r2!, {r3}
 801131e:	ae27      	add	r6, sp, #156	; 0x9c
 8011320:	7033      	strb	r3, [r6, #0]
 8011322:	2300      	movs	r3, #0
 8011324:	9204      	str	r2, [sp, #16]
 8011326:	aa12      	add	r2, sp, #72	; 0x48
 8011328:	70d3      	strb	r3, [r2, #3]
 801132a:	2201      	movs	r2, #1
 801132c:	930b      	str	r3, [sp, #44]	; 0x2c
 801132e:	9205      	str	r2, [sp, #20]
 8011330:	e0b0      	b.n	8011494 <_vfiprintf_r+0x484>
 8011332:	2310      	movs	r3, #16
 8011334:	431c      	orrs	r4, r3
 8011336:	06a3      	lsls	r3, r4, #26
 8011338:	d52a      	bpl.n	8011390 <_vfiprintf_r+0x380>
 801133a:	2307      	movs	r3, #7
 801133c:	3707      	adds	r7, #7
 801133e:	439f      	bics	r7, r3
 8011340:	0039      	movs	r1, r7
 8011342:	c90c      	ldmia	r1!, {r2, r3}
 8011344:	9200      	str	r2, [sp, #0]
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	9104      	str	r1, [sp, #16]
 801134a:	9a01      	ldr	r2, [sp, #4]
 801134c:	2301      	movs	r3, #1
 801134e:	2a00      	cmp	r2, #0
 8011350:	da09      	bge.n	8011366 <_vfiprintf_r+0x356>
 8011352:	9e00      	ldr	r6, [sp, #0]
 8011354:	9f01      	ldr	r7, [sp, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	4271      	negs	r1, r6
 801135a:	41ba      	sbcs	r2, r7
 801135c:	9100      	str	r1, [sp, #0]
 801135e:	9201      	str	r2, [sp, #4]
 8011360:	212d      	movs	r1, #45	; 0x2d
 8011362:	aa12      	add	r2, sp, #72	; 0x48
 8011364:	70d1      	strb	r1, [r2, #3]
 8011366:	9901      	ldr	r1, [sp, #4]
 8011368:	9a00      	ldr	r2, [sp, #0]
 801136a:	430a      	orrs	r2, r1
 801136c:	9905      	ldr	r1, [sp, #20]
 801136e:	3101      	adds	r1, #1
 8011370:	d100      	bne.n	8011374 <_vfiprintf_r+0x364>
 8011372:	e2e9      	b.n	8011948 <_vfiprintf_r+0x938>
 8011374:	2180      	movs	r1, #128	; 0x80
 8011376:	0027      	movs	r7, r4
 8011378:	438f      	bics	r7, r1
 801137a:	2a00      	cmp	r2, #0
 801137c:	d000      	beq.n	8011380 <_vfiprintf_r+0x370>
 801137e:	e2e7      	b.n	8011950 <_vfiprintf_r+0x940>
 8011380:	9a05      	ldr	r2, [sp, #20]
 8011382:	2a00      	cmp	r2, #0
 8011384:	d100      	bne.n	8011388 <_vfiprintf_r+0x378>
 8011386:	e243      	b.n	8011810 <_vfiprintf_r+0x800>
 8011388:	2b01      	cmp	r3, #1
 801138a:	d000      	beq.n	801138e <_vfiprintf_r+0x37e>
 801138c:	e2e3      	b.n	8011956 <_vfiprintf_r+0x946>
 801138e:	e1e7      	b.n	8011760 <_vfiprintf_r+0x750>
 8011390:	003a      	movs	r2, r7
 8011392:	ca08      	ldmia	r2!, {r3}
 8011394:	9204      	str	r2, [sp, #16]
 8011396:	06e2      	lsls	r2, r4, #27
 8011398:	d503      	bpl.n	80113a2 <_vfiprintf_r+0x392>
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	17db      	asrs	r3, r3, #31
 801139e:	9301      	str	r3, [sp, #4]
 80113a0:	e7d3      	b.n	801134a <_vfiprintf_r+0x33a>
 80113a2:	0662      	lsls	r2, r4, #25
 80113a4:	d501      	bpl.n	80113aa <_vfiprintf_r+0x39a>
 80113a6:	b21b      	sxth	r3, r3
 80113a8:	e7f7      	b.n	801139a <_vfiprintf_r+0x38a>
 80113aa:	05a2      	lsls	r2, r4, #22
 80113ac:	d5f5      	bpl.n	801139a <_vfiprintf_r+0x38a>
 80113ae:	b25b      	sxtb	r3, r3
 80113b0:	e7f3      	b.n	801139a <_vfiprintf_r+0x38a>
 80113b2:	1d3b      	adds	r3, r7, #4
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	06a3      	lsls	r3, r4, #26
 80113b8:	d506      	bpl.n	80113c8 <_vfiprintf_r+0x3b8>
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	9a08      	ldr	r2, [sp, #32]
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	17d2      	asrs	r2, r2, #31
 80113c2:	605a      	str	r2, [r3, #4]
 80113c4:	9f04      	ldr	r7, [sp, #16]
 80113c6:	e694      	b.n	80110f2 <_vfiprintf_r+0xe2>
 80113c8:	06e3      	lsls	r3, r4, #27
 80113ca:	d503      	bpl.n	80113d4 <_vfiprintf_r+0x3c4>
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	9a08      	ldr	r2, [sp, #32]
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	e7f7      	b.n	80113c4 <_vfiprintf_r+0x3b4>
 80113d4:	0663      	lsls	r3, r4, #25
 80113d6:	d503      	bpl.n	80113e0 <_vfiprintf_r+0x3d0>
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	9a08      	ldr	r2, [sp, #32]
 80113dc:	801a      	strh	r2, [r3, #0]
 80113de:	e7f1      	b.n	80113c4 <_vfiprintf_r+0x3b4>
 80113e0:	05a4      	lsls	r4, r4, #22
 80113e2:	d5f3      	bpl.n	80113cc <_vfiprintf_r+0x3bc>
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	9a08      	ldr	r2, [sp, #32]
 80113e8:	701a      	strb	r2, [r3, #0]
 80113ea:	e7eb      	b.n	80113c4 <_vfiprintf_r+0x3b4>
 80113ec:	2310      	movs	r3, #16
 80113ee:	431c      	orrs	r4, r3
 80113f0:	2320      	movs	r3, #32
 80113f2:	0020      	movs	r0, r4
 80113f4:	4018      	ands	r0, r3
 80113f6:	421c      	tst	r4, r3
 80113f8:	d00d      	beq.n	8011416 <_vfiprintf_r+0x406>
 80113fa:	3b19      	subs	r3, #25
 80113fc:	3707      	adds	r7, #7
 80113fe:	439f      	bics	r7, r3
 8011400:	0039      	movs	r1, r7
 8011402:	c90c      	ldmia	r1!, {r2, r3}
 8011404:	9200      	str	r2, [sp, #0]
 8011406:	9301      	str	r3, [sp, #4]
 8011408:	9104      	str	r1, [sp, #16]
 801140a:	4bcc      	ldr	r3, [pc, #816]	; (801173c <_vfiprintf_r+0x72c>)
 801140c:	401c      	ands	r4, r3
 801140e:	2300      	movs	r3, #0
 8011410:	2100      	movs	r1, #0
 8011412:	aa12      	add	r2, sp, #72	; 0x48
 8011414:	e7a6      	b.n	8011364 <_vfiprintf_r+0x354>
 8011416:	003a      	movs	r2, r7
 8011418:	ca08      	ldmia	r2!, {r3}
 801141a:	0021      	movs	r1, r4
 801141c:	9204      	str	r2, [sp, #16]
 801141e:	2210      	movs	r2, #16
 8011420:	4011      	ands	r1, r2
 8011422:	4214      	tst	r4, r2
 8011424:	d002      	beq.n	801142c <_vfiprintf_r+0x41c>
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	9001      	str	r0, [sp, #4]
 801142a:	e7ee      	b.n	801140a <_vfiprintf_r+0x3fa>
 801142c:	2240      	movs	r2, #64	; 0x40
 801142e:	0020      	movs	r0, r4
 8011430:	4010      	ands	r0, r2
 8011432:	4214      	tst	r4, r2
 8011434:	d003      	beq.n	801143e <_vfiprintf_r+0x42e>
 8011436:	b29b      	uxth	r3, r3
 8011438:	9300      	str	r3, [sp, #0]
 801143a:	9101      	str	r1, [sp, #4]
 801143c:	e7e5      	b.n	801140a <_vfiprintf_r+0x3fa>
 801143e:	2280      	movs	r2, #128	; 0x80
 8011440:	0021      	movs	r1, r4
 8011442:	0092      	lsls	r2, r2, #2
 8011444:	4011      	ands	r1, r2
 8011446:	4214      	tst	r4, r2
 8011448:	d0f6      	beq.n	8011438 <_vfiprintf_r+0x428>
 801144a:	b2db      	uxtb	r3, r3
 801144c:	e7eb      	b.n	8011426 <_vfiprintf_r+0x416>
 801144e:	003b      	movs	r3, r7
 8011450:	cb04      	ldmia	r3!, {r2}
 8011452:	49bb      	ldr	r1, [pc, #748]	; (8011740 <_vfiprintf_r+0x730>)
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	2300      	movs	r3, #0
 8011458:	9200      	str	r2, [sp, #0]
 801145a:	aa13      	add	r2, sp, #76	; 0x4c
 801145c:	8011      	strh	r1, [r2, #0]
 801145e:	4ab9      	ldr	r2, [pc, #740]	; (8011744 <_vfiprintf_r+0x734>)
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	3302      	adds	r3, #2
 8011464:	431c      	orrs	r4, r3
 8011466:	920c      	str	r2, [sp, #48]	; 0x30
 8011468:	e7d2      	b.n	8011410 <_vfiprintf_r+0x400>
 801146a:	003b      	movs	r3, r7
 801146c:	2700      	movs	r7, #0
 801146e:	cb40      	ldmia	r3!, {r6}
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	ab12      	add	r3, sp, #72	; 0x48
 8011474:	70df      	strb	r7, [r3, #3]
 8011476:	9b05      	ldr	r3, [sp, #20]
 8011478:	3301      	adds	r3, #1
 801147a:	d100      	bne.n	801147e <_vfiprintf_r+0x46e>
 801147c:	e0ea      	b.n	8011654 <_vfiprintf_r+0x644>
 801147e:	0039      	movs	r1, r7
 8011480:	0030      	movs	r0, r6
 8011482:	9a05      	ldr	r2, [sp, #20]
 8011484:	f7fe f92e 	bl	800f6e4 <memchr>
 8011488:	900b      	str	r0, [sp, #44]	; 0x2c
 801148a:	42b8      	cmp	r0, r7
 801148c:	d002      	beq.n	8011494 <_vfiprintf_r+0x484>
 801148e:	1b83      	subs	r3, r0, r6
 8011490:	9305      	str	r3, [sp, #20]
 8011492:	970b      	str	r7, [sp, #44]	; 0x2c
 8011494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011496:	9a05      	ldr	r2, [sp, #20]
 8011498:	930a      	str	r3, [sp, #40]	; 0x28
 801149a:	4293      	cmp	r3, r2
 801149c:	da00      	bge.n	80114a0 <_vfiprintf_r+0x490>
 801149e:	920a      	str	r2, [sp, #40]	; 0x28
 80114a0:	ab12      	add	r3, sp, #72	; 0x48
 80114a2:	3303      	adds	r3, #3
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	1e5a      	subs	r2, r3, #1
 80114a8:	4193      	sbcs	r3, r2
 80114aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114ac:	18d3      	adds	r3, r2, r3
 80114ae:	930a      	str	r3, [sp, #40]	; 0x28
 80114b0:	0022      	movs	r2, r4
 80114b2:	2302      	movs	r3, #2
 80114b4:	401a      	ands	r2, r3
 80114b6:	9210      	str	r2, [sp, #64]	; 0x40
 80114b8:	421c      	tst	r4, r3
 80114ba:	d002      	beq.n	80114c2 <_vfiprintf_r+0x4b2>
 80114bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114be:	3302      	adds	r3, #2
 80114c0:	930a      	str	r3, [sp, #40]	; 0x28
 80114c2:	2384      	movs	r3, #132	; 0x84
 80114c4:	0022      	movs	r2, r4
 80114c6:	401a      	ands	r2, r3
 80114c8:	9211      	str	r2, [sp, #68]	; 0x44
 80114ca:	421c      	tst	r4, r3
 80114cc:	d11e      	bne.n	801150c <_vfiprintf_r+0x4fc>
 80114ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114d2:	1a9f      	subs	r7, r3, r2
 80114d4:	2f00      	cmp	r7, #0
 80114d6:	dd19      	ble.n	801150c <_vfiprintf_r+0x4fc>
 80114d8:	0029      	movs	r1, r5
 80114da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114dc:	489a      	ldr	r0, [pc, #616]	; (8011748 <_vfiprintf_r+0x738>)
 80114de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80114e0:	3301      	adds	r3, #1
 80114e2:	3108      	adds	r1, #8
 80114e4:	6028      	str	r0, [r5, #0]
 80114e6:	2f10      	cmp	r7, #16
 80114e8:	dd00      	ble.n	80114ec <_vfiprintf_r+0x4dc>
 80114ea:	e1a7      	b.n	801183c <_vfiprintf_r+0x82c>
 80114ec:	606f      	str	r7, [r5, #4]
 80114ee:	18bf      	adds	r7, r7, r2
 80114f0:	000d      	movs	r5, r1
 80114f2:	9716      	str	r7, [sp, #88]	; 0x58
 80114f4:	9315      	str	r3, [sp, #84]	; 0x54
 80114f6:	2b07      	cmp	r3, #7
 80114f8:	dd08      	ble.n	801150c <_vfiprintf_r+0x4fc>
 80114fa:	9903      	ldr	r1, [sp, #12]
 80114fc:	9806      	ldr	r0, [sp, #24]
 80114fe:	aa14      	add	r2, sp, #80	; 0x50
 8011500:	f7ff fd51 	bl	8010fa6 <__sprint_r>
 8011504:	2800      	cmp	r0, #0
 8011506:	d000      	beq.n	801150a <_vfiprintf_r+0x4fa>
 8011508:	e1eb      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 801150a:	ad17      	add	r5, sp, #92	; 0x5c
 801150c:	a912      	add	r1, sp, #72	; 0x48
 801150e:	78c8      	ldrb	r0, [r1, #3]
 8011510:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011514:	3103      	adds	r1, #3
 8011516:	2800      	cmp	r0, #0
 8011518:	d012      	beq.n	8011540 <_vfiprintf_r+0x530>
 801151a:	6029      	str	r1, [r5, #0]
 801151c:	2101      	movs	r1, #1
 801151e:	3301      	adds	r3, #1
 8011520:	1852      	adds	r2, r2, r1
 8011522:	6069      	str	r1, [r5, #4]
 8011524:	9216      	str	r2, [sp, #88]	; 0x58
 8011526:	9315      	str	r3, [sp, #84]	; 0x54
 8011528:	3508      	adds	r5, #8
 801152a:	2b07      	cmp	r3, #7
 801152c:	dd08      	ble.n	8011540 <_vfiprintf_r+0x530>
 801152e:	9903      	ldr	r1, [sp, #12]
 8011530:	9806      	ldr	r0, [sp, #24]
 8011532:	aa14      	add	r2, sp, #80	; 0x50
 8011534:	f7ff fd37 	bl	8010fa6 <__sprint_r>
 8011538:	2800      	cmp	r0, #0
 801153a:	d000      	beq.n	801153e <_vfiprintf_r+0x52e>
 801153c:	e1d1      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 801153e:	ad17      	add	r5, sp, #92	; 0x5c
 8011540:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011542:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011546:	2900      	cmp	r1, #0
 8011548:	d013      	beq.n	8011572 <_vfiprintf_r+0x562>
 801154a:	a913      	add	r1, sp, #76	; 0x4c
 801154c:	6029      	str	r1, [r5, #0]
 801154e:	2102      	movs	r1, #2
 8011550:	3301      	adds	r3, #1
 8011552:	1852      	adds	r2, r2, r1
 8011554:	6069      	str	r1, [r5, #4]
 8011556:	9216      	str	r2, [sp, #88]	; 0x58
 8011558:	9315      	str	r3, [sp, #84]	; 0x54
 801155a:	3508      	adds	r5, #8
 801155c:	2b07      	cmp	r3, #7
 801155e:	dd08      	ble.n	8011572 <_vfiprintf_r+0x562>
 8011560:	9903      	ldr	r1, [sp, #12]
 8011562:	9806      	ldr	r0, [sp, #24]
 8011564:	aa14      	add	r2, sp, #80	; 0x50
 8011566:	f7ff fd1e 	bl	8010fa6 <__sprint_r>
 801156a:	2800      	cmp	r0, #0
 801156c:	d000      	beq.n	8011570 <_vfiprintf_r+0x560>
 801156e:	e1b8      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 8011570:	ad17      	add	r5, sp, #92	; 0x5c
 8011572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011574:	2b80      	cmp	r3, #128	; 0x80
 8011576:	d11e      	bne.n	80115b6 <_vfiprintf_r+0x5a6>
 8011578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801157a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801157c:	1a9f      	subs	r7, r3, r2
 801157e:	2f00      	cmp	r7, #0
 8011580:	dd19      	ble.n	80115b6 <_vfiprintf_r+0x5a6>
 8011582:	0029      	movs	r1, r5
 8011584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011586:	4871      	ldr	r0, [pc, #452]	; (801174c <_vfiprintf_r+0x73c>)
 8011588:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801158a:	3301      	adds	r3, #1
 801158c:	3108      	adds	r1, #8
 801158e:	6028      	str	r0, [r5, #0]
 8011590:	2f10      	cmp	r7, #16
 8011592:	dd00      	ble.n	8011596 <_vfiprintf_r+0x586>
 8011594:	e164      	b.n	8011860 <_vfiprintf_r+0x850>
 8011596:	606f      	str	r7, [r5, #4]
 8011598:	18bf      	adds	r7, r7, r2
 801159a:	000d      	movs	r5, r1
 801159c:	9716      	str	r7, [sp, #88]	; 0x58
 801159e:	9315      	str	r3, [sp, #84]	; 0x54
 80115a0:	2b07      	cmp	r3, #7
 80115a2:	dd08      	ble.n	80115b6 <_vfiprintf_r+0x5a6>
 80115a4:	9903      	ldr	r1, [sp, #12]
 80115a6:	9806      	ldr	r0, [sp, #24]
 80115a8:	aa14      	add	r2, sp, #80	; 0x50
 80115aa:	f7ff fcfc 	bl	8010fa6 <__sprint_r>
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d000      	beq.n	80115b4 <_vfiprintf_r+0x5a4>
 80115b2:	e196      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 80115b4:	ad17      	add	r5, sp, #92	; 0x5c
 80115b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115b8:	9a05      	ldr	r2, [sp, #20]
 80115ba:	1a9f      	subs	r7, r3, r2
 80115bc:	2f00      	cmp	r7, #0
 80115be:	dd19      	ble.n	80115f4 <_vfiprintf_r+0x5e4>
 80115c0:	0029      	movs	r1, r5
 80115c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115c4:	4861      	ldr	r0, [pc, #388]	; (801174c <_vfiprintf_r+0x73c>)
 80115c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80115c8:	3301      	adds	r3, #1
 80115ca:	3108      	adds	r1, #8
 80115cc:	6028      	str	r0, [r5, #0]
 80115ce:	2f10      	cmp	r7, #16
 80115d0:	dd00      	ble.n	80115d4 <_vfiprintf_r+0x5c4>
 80115d2:	e157      	b.n	8011884 <_vfiprintf_r+0x874>
 80115d4:	606f      	str	r7, [r5, #4]
 80115d6:	18bf      	adds	r7, r7, r2
 80115d8:	000d      	movs	r5, r1
 80115da:	9716      	str	r7, [sp, #88]	; 0x58
 80115dc:	9315      	str	r3, [sp, #84]	; 0x54
 80115de:	2b07      	cmp	r3, #7
 80115e0:	dd08      	ble.n	80115f4 <_vfiprintf_r+0x5e4>
 80115e2:	9903      	ldr	r1, [sp, #12]
 80115e4:	9806      	ldr	r0, [sp, #24]
 80115e6:	aa14      	add	r2, sp, #80	; 0x50
 80115e8:	f7ff fcdd 	bl	8010fa6 <__sprint_r>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d000      	beq.n	80115f2 <_vfiprintf_r+0x5e2>
 80115f0:	e177      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 80115f2:	ad17      	add	r5, sp, #92	; 0x5c
 80115f4:	9b05      	ldr	r3, [sp, #20]
 80115f6:	9a05      	ldr	r2, [sp, #20]
 80115f8:	606b      	str	r3, [r5, #4]
 80115fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80115fc:	602e      	str	r6, [r5, #0]
 80115fe:	189b      	adds	r3, r3, r2
 8011600:	9316      	str	r3, [sp, #88]	; 0x58
 8011602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011604:	3508      	adds	r5, #8
 8011606:	3301      	adds	r3, #1
 8011608:	9315      	str	r3, [sp, #84]	; 0x54
 801160a:	2b07      	cmp	r3, #7
 801160c:	dd08      	ble.n	8011620 <_vfiprintf_r+0x610>
 801160e:	9903      	ldr	r1, [sp, #12]
 8011610:	9806      	ldr	r0, [sp, #24]
 8011612:	aa14      	add	r2, sp, #80	; 0x50
 8011614:	f7ff fcc7 	bl	8010fa6 <__sprint_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	d000      	beq.n	801161e <_vfiprintf_r+0x60e>
 801161c:	e161      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 801161e:	ad17      	add	r5, sp, #92	; 0x5c
 8011620:	0764      	lsls	r4, r4, #29
 8011622:	d500      	bpl.n	8011626 <_vfiprintf_r+0x616>
 8011624:	e140      	b.n	80118a8 <_vfiprintf_r+0x898>
 8011626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801162a:	4293      	cmp	r3, r2
 801162c:	da00      	bge.n	8011630 <_vfiprintf_r+0x620>
 801162e:	0013      	movs	r3, r2
 8011630:	9a08      	ldr	r2, [sp, #32]
 8011632:	18d3      	adds	r3, r2, r3
 8011634:	9308      	str	r3, [sp, #32]
 8011636:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011638:	2b00      	cmp	r3, #0
 801163a:	d007      	beq.n	801164c <_vfiprintf_r+0x63c>
 801163c:	9903      	ldr	r1, [sp, #12]
 801163e:	9806      	ldr	r0, [sp, #24]
 8011640:	aa14      	add	r2, sp, #80	; 0x50
 8011642:	f7ff fcb0 	bl	8010fa6 <__sprint_r>
 8011646:	2800      	cmp	r0, #0
 8011648:	d000      	beq.n	801164c <_vfiprintf_r+0x63c>
 801164a:	e14a      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 801164c:	2300      	movs	r3, #0
 801164e:	ad17      	add	r5, sp, #92	; 0x5c
 8011650:	9315      	str	r3, [sp, #84]	; 0x54
 8011652:	e6b7      	b.n	80113c4 <_vfiprintf_r+0x3b4>
 8011654:	0030      	movs	r0, r6
 8011656:	f7ee fd55 	bl	8000104 <strlen>
 801165a:	9005      	str	r0, [sp, #20]
 801165c:	e719      	b.n	8011492 <_vfiprintf_r+0x482>
 801165e:	2310      	movs	r3, #16
 8011660:	431c      	orrs	r4, r3
 8011662:	2320      	movs	r3, #32
 8011664:	0020      	movs	r0, r4
 8011666:	4018      	ands	r0, r3
 8011668:	421c      	tst	r4, r3
 801166a:	d009      	beq.n	8011680 <_vfiprintf_r+0x670>
 801166c:	3b19      	subs	r3, #25
 801166e:	3707      	adds	r7, #7
 8011670:	439f      	bics	r7, r3
 8011672:	0039      	movs	r1, r7
 8011674:	c90c      	ldmia	r1!, {r2, r3}
 8011676:	9200      	str	r2, [sp, #0]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	9104      	str	r1, [sp, #16]
 801167c:	2301      	movs	r3, #1
 801167e:	e6c7      	b.n	8011410 <_vfiprintf_r+0x400>
 8011680:	003b      	movs	r3, r7
 8011682:	cb04      	ldmia	r3!, {r2}
 8011684:	0021      	movs	r1, r4
 8011686:	9304      	str	r3, [sp, #16]
 8011688:	2310      	movs	r3, #16
 801168a:	4019      	ands	r1, r3
 801168c:	421c      	tst	r4, r3
 801168e:	d003      	beq.n	8011698 <_vfiprintf_r+0x688>
 8011690:	9200      	str	r2, [sp, #0]
 8011692:	9001      	str	r0, [sp, #4]
 8011694:	3b0f      	subs	r3, #15
 8011696:	e6bb      	b.n	8011410 <_vfiprintf_r+0x400>
 8011698:	2340      	movs	r3, #64	; 0x40
 801169a:	0020      	movs	r0, r4
 801169c:	4018      	ands	r0, r3
 801169e:	421c      	tst	r4, r3
 80116a0:	d003      	beq.n	80116aa <_vfiprintf_r+0x69a>
 80116a2:	b293      	uxth	r3, r2
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	9101      	str	r1, [sp, #4]
 80116a8:	e7e8      	b.n	801167c <_vfiprintf_r+0x66c>
 80116aa:	2380      	movs	r3, #128	; 0x80
 80116ac:	0021      	movs	r1, r4
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4019      	ands	r1, r3
 80116b2:	421c      	tst	r4, r3
 80116b4:	d003      	beq.n	80116be <_vfiprintf_r+0x6ae>
 80116b6:	b2d3      	uxtb	r3, r2
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	9001      	str	r0, [sp, #4]
 80116bc:	e7de      	b.n	801167c <_vfiprintf_r+0x66c>
 80116be:	9200      	str	r2, [sp, #0]
 80116c0:	e7f1      	b.n	80116a6 <_vfiprintf_r+0x696>
 80116c2:	4a23      	ldr	r2, [pc, #140]	; (8011750 <_vfiprintf_r+0x740>)
 80116c4:	0020      	movs	r0, r4
 80116c6:	920c      	str	r2, [sp, #48]	; 0x30
 80116c8:	2220      	movs	r2, #32
 80116ca:	4010      	ands	r0, r2
 80116cc:	4214      	tst	r4, r2
 80116ce:	d019      	beq.n	8011704 <_vfiprintf_r+0x6f4>
 80116d0:	3a19      	subs	r2, #25
 80116d2:	3707      	adds	r7, #7
 80116d4:	4397      	bics	r7, r2
 80116d6:	0038      	movs	r0, r7
 80116d8:	c806      	ldmia	r0!, {r1, r2}
 80116da:	9100      	str	r1, [sp, #0]
 80116dc:	9201      	str	r2, [sp, #4]
 80116de:	9004      	str	r0, [sp, #16]
 80116e0:	07e2      	lsls	r2, r4, #31
 80116e2:	d509      	bpl.n	80116f8 <_vfiprintf_r+0x6e8>
 80116e4:	9a00      	ldr	r2, [sp, #0]
 80116e6:	9901      	ldr	r1, [sp, #4]
 80116e8:	430a      	orrs	r2, r1
 80116ea:	d005      	beq.n	80116f8 <_vfiprintf_r+0x6e8>
 80116ec:	aa13      	add	r2, sp, #76	; 0x4c
 80116ee:	2130      	movs	r1, #48	; 0x30
 80116f0:	7053      	strb	r3, [r2, #1]
 80116f2:	2302      	movs	r3, #2
 80116f4:	7011      	strb	r1, [r2, #0]
 80116f6:	431c      	orrs	r4, r3
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <_vfiprintf_r+0x72c>)
 80116fa:	401c      	ands	r4, r3
 80116fc:	2302      	movs	r3, #2
 80116fe:	e687      	b.n	8011410 <_vfiprintf_r+0x400>
 8011700:	4a10      	ldr	r2, [pc, #64]	; (8011744 <_vfiprintf_r+0x734>)
 8011702:	e7df      	b.n	80116c4 <_vfiprintf_r+0x6b4>
 8011704:	0039      	movs	r1, r7
 8011706:	c904      	ldmia	r1!, {r2}
 8011708:	0026      	movs	r6, r4
 801170a:	9104      	str	r1, [sp, #16]
 801170c:	2110      	movs	r1, #16
 801170e:	400e      	ands	r6, r1
 8011710:	420c      	tst	r4, r1
 8011712:	d002      	beq.n	801171a <_vfiprintf_r+0x70a>
 8011714:	9200      	str	r2, [sp, #0]
 8011716:	9001      	str	r0, [sp, #4]
 8011718:	e7e2      	b.n	80116e0 <_vfiprintf_r+0x6d0>
 801171a:	2140      	movs	r1, #64	; 0x40
 801171c:	0020      	movs	r0, r4
 801171e:	4008      	ands	r0, r1
 8011720:	420c      	tst	r4, r1
 8011722:	d003      	beq.n	801172c <_vfiprintf_r+0x71c>
 8011724:	b292      	uxth	r2, r2
 8011726:	9200      	str	r2, [sp, #0]
 8011728:	9601      	str	r6, [sp, #4]
 801172a:	e7d9      	b.n	80116e0 <_vfiprintf_r+0x6d0>
 801172c:	2180      	movs	r1, #128	; 0x80
 801172e:	0026      	movs	r6, r4
 8011730:	0089      	lsls	r1, r1, #2
 8011732:	400e      	ands	r6, r1
 8011734:	420c      	tst	r4, r1
 8011736:	d0f6      	beq.n	8011726 <_vfiprintf_r+0x716>
 8011738:	b2d2      	uxtb	r2, r2
 801173a:	e7eb      	b.n	8011714 <_vfiprintf_r+0x704>
 801173c:	fffffbff 	.word	0xfffffbff
 8011740:	00007830 	.word	0x00007830
 8011744:	080140ac 	.word	0x080140ac
 8011748:	080141b9 	.word	0x080141b9
 801174c:	080141c9 	.word	0x080141c9
 8011750:	080140bd 	.word	0x080140bd
 8011754:	9b01      	ldr	r3, [sp, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d109      	bne.n	801176e <_vfiprintf_r+0x75e>
 801175a:	9b00      	ldr	r3, [sp, #0]
 801175c:	2b09      	cmp	r3, #9
 801175e:	d806      	bhi.n	801176e <_vfiprintf_r+0x75e>
 8011760:	26b7      	movs	r6, #183	; 0xb7
 8011762:	ab12      	add	r3, sp, #72	; 0x48
 8011764:	18f6      	adds	r6, r6, r3
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	3330      	adds	r3, #48	; 0x30
 801176a:	7033      	strb	r3, [r6, #0]
 801176c:	e115      	b.n	801199a <_vfiprintf_r+0x98a>
 801176e:	2380      	movs	r3, #128	; 0x80
 8011770:	2400      	movs	r4, #0
 8011772:	00db      	lsls	r3, r3, #3
 8011774:	403b      	ands	r3, r7
 8011776:	ae40      	add	r6, sp, #256	; 0x100
 8011778:	930a      	str	r3, [sp, #40]	; 0x28
 801177a:	220a      	movs	r2, #10
 801177c:	9800      	ldr	r0, [sp, #0]
 801177e:	9901      	ldr	r1, [sp, #4]
 8011780:	2300      	movs	r3, #0
 8011782:	f7ee fe8f 	bl	80004a4 <__aeabi_uldivmod>
 8011786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011788:	3e01      	subs	r6, #1
 801178a:	3230      	adds	r2, #48	; 0x30
 801178c:	900b      	str	r0, [sp, #44]	; 0x2c
 801178e:	9110      	str	r1, [sp, #64]	; 0x40
 8011790:	7032      	strb	r2, [r6, #0]
 8011792:	3401      	adds	r4, #1
 8011794:	2b00      	cmp	r3, #0
 8011796:	d01a      	beq.n	80117ce <_vfiprintf_r+0x7be>
 8011798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	42a3      	cmp	r3, r4
 801179e:	d116      	bne.n	80117ce <_vfiprintf_r+0x7be>
 80117a0:	2cff      	cmp	r4, #255	; 0xff
 80117a2:	d014      	beq.n	80117ce <_vfiprintf_r+0x7be>
 80117a4:	9b01      	ldr	r3, [sp, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d102      	bne.n	80117b0 <_vfiprintf_r+0x7a0>
 80117aa:	9b00      	ldr	r3, [sp, #0]
 80117ac:	2b09      	cmp	r3, #9
 80117ae:	d90e      	bls.n	80117ce <_vfiprintf_r+0x7be>
 80117b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80117b4:	1af6      	subs	r6, r6, r3
 80117b6:	001a      	movs	r2, r3
 80117b8:	0030      	movs	r0, r6
 80117ba:	f7f9 ffe6 	bl	800b78a <strncpy>
 80117be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117c0:	2400      	movs	r4, #0
 80117c2:	785b      	ldrb	r3, [r3, #1]
 80117c4:	1e5a      	subs	r2, r3, #1
 80117c6:	4193      	sbcs	r3, r2
 80117c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117ca:	18d3      	adds	r3, r2, r3
 80117cc:	930d      	str	r3, [sp, #52]	; 0x34
 80117ce:	9b01      	ldr	r3, [sp, #4]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d103      	bne.n	80117dc <_vfiprintf_r+0x7cc>
 80117d4:	9b00      	ldr	r3, [sp, #0]
 80117d6:	2b09      	cmp	r3, #9
 80117d8:	d800      	bhi.n	80117dc <_vfiprintf_r+0x7cc>
 80117da:	e0de      	b.n	801199a <_vfiprintf_r+0x98a>
 80117dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117e2:	9301      	str	r3, [sp, #4]
 80117e4:	e7c9      	b.n	801177a <_vfiprintf_r+0x76a>
 80117e6:	200f      	movs	r0, #15
 80117e8:	9b00      	ldr	r3, [sp, #0]
 80117ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117ec:	4003      	ands	r3, r0
 80117ee:	5cd3      	ldrb	r3, [r2, r3]
 80117f0:	3e01      	subs	r6, #1
 80117f2:	7033      	strb	r3, [r6, #0]
 80117f4:	9b01      	ldr	r3, [sp, #4]
 80117f6:	0719      	lsls	r1, r3, #28
 80117f8:	9b00      	ldr	r3, [sp, #0]
 80117fa:	091a      	lsrs	r2, r3, #4
 80117fc:	9b01      	ldr	r3, [sp, #4]
 80117fe:	4311      	orrs	r1, r2
 8011800:	091b      	lsrs	r3, r3, #4
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	000b      	movs	r3, r1
 8011806:	9a01      	ldr	r2, [sp, #4]
 8011808:	9100      	str	r1, [sp, #0]
 801180a:	4313      	orrs	r3, r2
 801180c:	d1ec      	bne.n	80117e8 <_vfiprintf_r+0x7d8>
 801180e:	e0c4      	b.n	801199a <_vfiprintf_r+0x98a>
 8011810:	ae40      	add	r6, sp, #256	; 0x100
 8011812:	2b00      	cmp	r3, #0
 8011814:	d000      	beq.n	8011818 <_vfiprintf_r+0x808>
 8011816:	e0c0      	b.n	801199a <_vfiprintf_r+0x98a>
 8011818:	07e4      	lsls	r4, r4, #31
 801181a:	d400      	bmi.n	801181e <_vfiprintf_r+0x80e>
 801181c:	e0bd      	b.n	801199a <_vfiprintf_r+0x98a>
 801181e:	26b7      	movs	r6, #183	; 0xb7
 8011820:	ab12      	add	r3, sp, #72	; 0x48
 8011822:	18f6      	adds	r6, r6, r3
 8011824:	2330      	movs	r3, #48	; 0x30
 8011826:	e7a0      	b.n	801176a <_vfiprintf_r+0x75a>
 8011828:	2b00      	cmp	r3, #0
 801182a:	d100      	bne.n	801182e <_vfiprintf_r+0x81e>
 801182c:	e07e      	b.n	801192c <_vfiprintf_r+0x91c>
 801182e:	ae27      	add	r6, sp, #156	; 0x9c
 8011830:	7033      	strb	r3, [r6, #0]
 8011832:	2300      	movs	r3, #0
 8011834:	aa12      	add	r2, sp, #72	; 0x48
 8011836:	70d3      	strb	r3, [r2, #3]
 8011838:	9704      	str	r7, [sp, #16]
 801183a:	e576      	b.n	801132a <_vfiprintf_r+0x31a>
 801183c:	2010      	movs	r0, #16
 801183e:	1812      	adds	r2, r2, r0
 8011840:	6068      	str	r0, [r5, #4]
 8011842:	9216      	str	r2, [sp, #88]	; 0x58
 8011844:	9315      	str	r3, [sp, #84]	; 0x54
 8011846:	2b07      	cmp	r3, #7
 8011848:	dd07      	ble.n	801185a <_vfiprintf_r+0x84a>
 801184a:	9903      	ldr	r1, [sp, #12]
 801184c:	9806      	ldr	r0, [sp, #24]
 801184e:	aa14      	add	r2, sp, #80	; 0x50
 8011850:	f7ff fba9 	bl	8010fa6 <__sprint_r>
 8011854:	2800      	cmp	r0, #0
 8011856:	d144      	bne.n	80118e2 <_vfiprintf_r+0x8d2>
 8011858:	a917      	add	r1, sp, #92	; 0x5c
 801185a:	000d      	movs	r5, r1
 801185c:	3f10      	subs	r7, #16
 801185e:	e63b      	b.n	80114d8 <_vfiprintf_r+0x4c8>
 8011860:	2010      	movs	r0, #16
 8011862:	1812      	adds	r2, r2, r0
 8011864:	6068      	str	r0, [r5, #4]
 8011866:	9216      	str	r2, [sp, #88]	; 0x58
 8011868:	9315      	str	r3, [sp, #84]	; 0x54
 801186a:	2b07      	cmp	r3, #7
 801186c:	dd07      	ble.n	801187e <_vfiprintf_r+0x86e>
 801186e:	9903      	ldr	r1, [sp, #12]
 8011870:	9806      	ldr	r0, [sp, #24]
 8011872:	aa14      	add	r2, sp, #80	; 0x50
 8011874:	f7ff fb97 	bl	8010fa6 <__sprint_r>
 8011878:	2800      	cmp	r0, #0
 801187a:	d132      	bne.n	80118e2 <_vfiprintf_r+0x8d2>
 801187c:	a917      	add	r1, sp, #92	; 0x5c
 801187e:	000d      	movs	r5, r1
 8011880:	3f10      	subs	r7, #16
 8011882:	e67e      	b.n	8011582 <_vfiprintf_r+0x572>
 8011884:	2010      	movs	r0, #16
 8011886:	1812      	adds	r2, r2, r0
 8011888:	6068      	str	r0, [r5, #4]
 801188a:	9216      	str	r2, [sp, #88]	; 0x58
 801188c:	9315      	str	r3, [sp, #84]	; 0x54
 801188e:	2b07      	cmp	r3, #7
 8011890:	dd07      	ble.n	80118a2 <_vfiprintf_r+0x892>
 8011892:	9903      	ldr	r1, [sp, #12]
 8011894:	9806      	ldr	r0, [sp, #24]
 8011896:	aa14      	add	r2, sp, #80	; 0x50
 8011898:	f7ff fb85 	bl	8010fa6 <__sprint_r>
 801189c:	2800      	cmp	r0, #0
 801189e:	d120      	bne.n	80118e2 <_vfiprintf_r+0x8d2>
 80118a0:	a917      	add	r1, sp, #92	; 0x5c
 80118a2:	000d      	movs	r5, r1
 80118a4:	3f10      	subs	r7, #16
 80118a6:	e68b      	b.n	80115c0 <_vfiprintf_r+0x5b0>
 80118a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118ac:	2610      	movs	r6, #16
 80118ae:	1a9c      	subs	r4, r3, r2
 80118b0:	2c00      	cmp	r4, #0
 80118b2:	dc00      	bgt.n	80118b6 <_vfiprintf_r+0x8a6>
 80118b4:	e6b7      	b.n	8011626 <_vfiprintf_r+0x616>
 80118b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80118b8:	4a3b      	ldr	r2, [pc, #236]	; (80119a8 <_vfiprintf_r+0x998>)
 80118ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80118bc:	3101      	adds	r1, #1
 80118be:	602a      	str	r2, [r5, #0]
 80118c0:	2c10      	cmp	r4, #16
 80118c2:	dc22      	bgt.n	801190a <_vfiprintf_r+0x8fa>
 80118c4:	606c      	str	r4, [r5, #4]
 80118c6:	18e4      	adds	r4, r4, r3
 80118c8:	9416      	str	r4, [sp, #88]	; 0x58
 80118ca:	9115      	str	r1, [sp, #84]	; 0x54
 80118cc:	2907      	cmp	r1, #7
 80118ce:	dc00      	bgt.n	80118d2 <_vfiprintf_r+0x8c2>
 80118d0:	e6a9      	b.n	8011626 <_vfiprintf_r+0x616>
 80118d2:	9903      	ldr	r1, [sp, #12]
 80118d4:	9806      	ldr	r0, [sp, #24]
 80118d6:	aa14      	add	r2, sp, #80	; 0x50
 80118d8:	f7ff fb65 	bl	8010fa6 <__sprint_r>
 80118dc:	2800      	cmp	r0, #0
 80118de:	d100      	bne.n	80118e2 <_vfiprintf_r+0x8d2>
 80118e0:	e6a1      	b.n	8011626 <_vfiprintf_r+0x616>
 80118e2:	9b03      	ldr	r3, [sp, #12]
 80118e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118e6:	07db      	lsls	r3, r3, #31
 80118e8:	d407      	bmi.n	80118fa <_vfiprintf_r+0x8ea>
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	899b      	ldrh	r3, [r3, #12]
 80118ee:	059b      	lsls	r3, r3, #22
 80118f0:	d403      	bmi.n	80118fa <_vfiprintf_r+0x8ea>
 80118f2:	9b03      	ldr	r3, [sp, #12]
 80118f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80118f6:	f7fa f808 	bl	800b90a <__retarget_lock_release_recursive>
 80118fa:	9b03      	ldr	r3, [sp, #12]
 80118fc:	899b      	ldrh	r3, [r3, #12]
 80118fe:	065b      	lsls	r3, r3, #25
 8011900:	d401      	bmi.n	8011906 <_vfiprintf_r+0x8f6>
 8011902:	f7ff fbc3 	bl	801108c <_vfiprintf_r+0x7c>
 8011906:	f7ff fbbe 	bl	8011086 <_vfiprintf_r+0x76>
 801190a:	3310      	adds	r3, #16
 801190c:	606e      	str	r6, [r5, #4]
 801190e:	9316      	str	r3, [sp, #88]	; 0x58
 8011910:	9115      	str	r1, [sp, #84]	; 0x54
 8011912:	3508      	adds	r5, #8
 8011914:	2907      	cmp	r1, #7
 8011916:	dd07      	ble.n	8011928 <_vfiprintf_r+0x918>
 8011918:	9903      	ldr	r1, [sp, #12]
 801191a:	9806      	ldr	r0, [sp, #24]
 801191c:	aa14      	add	r2, sp, #80	; 0x50
 801191e:	f7ff fb42 	bl	8010fa6 <__sprint_r>
 8011922:	2800      	cmp	r0, #0
 8011924:	d1dd      	bne.n	80118e2 <_vfiprintf_r+0x8d2>
 8011926:	ad17      	add	r5, sp, #92	; 0x5c
 8011928:	3c10      	subs	r4, #16
 801192a:	e7c4      	b.n	80118b6 <_vfiprintf_r+0x8a6>
 801192c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801192e:	2b00      	cmp	r3, #0
 8011930:	d102      	bne.n	8011938 <_vfiprintf_r+0x928>
 8011932:	2300      	movs	r3, #0
 8011934:	9315      	str	r3, [sp, #84]	; 0x54
 8011936:	e7d4      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 8011938:	9903      	ldr	r1, [sp, #12]
 801193a:	9806      	ldr	r0, [sp, #24]
 801193c:	aa14      	add	r2, sp, #80	; 0x50
 801193e:	f7ff fb32 	bl	8010fa6 <__sprint_r>
 8011942:	2800      	cmp	r0, #0
 8011944:	d0f5      	beq.n	8011932 <_vfiprintf_r+0x922>
 8011946:	e7cc      	b.n	80118e2 <_vfiprintf_r+0x8d2>
 8011948:	0027      	movs	r7, r4
 801194a:	2a00      	cmp	r2, #0
 801194c:	d100      	bne.n	8011950 <_vfiprintf_r+0x940>
 801194e:	e51b      	b.n	8011388 <_vfiprintf_r+0x378>
 8011950:	2b01      	cmp	r3, #1
 8011952:	d100      	bne.n	8011956 <_vfiprintf_r+0x946>
 8011954:	e6fe      	b.n	8011754 <_vfiprintf_r+0x744>
 8011956:	ae40      	add	r6, sp, #256	; 0x100
 8011958:	2b02      	cmp	r3, #2
 801195a:	d100      	bne.n	801195e <_vfiprintf_r+0x94e>
 801195c:	e743      	b.n	80117e6 <_vfiprintf_r+0x7d6>
 801195e:	2307      	movs	r3, #7
 8011960:	469c      	mov	ip, r3
 8011962:	4663      	mov	r3, ip
 8011964:	9900      	ldr	r1, [sp, #0]
 8011966:	0032      	movs	r2, r6
 8011968:	400b      	ands	r3, r1
 801196a:	9901      	ldr	r1, [sp, #4]
 801196c:	3e01      	subs	r6, #1
 801196e:	074c      	lsls	r4, r1, #29
 8011970:	9900      	ldr	r1, [sp, #0]
 8011972:	3330      	adds	r3, #48	; 0x30
 8011974:	08c8      	lsrs	r0, r1, #3
 8011976:	9901      	ldr	r1, [sp, #4]
 8011978:	4304      	orrs	r4, r0
 801197a:	08c9      	lsrs	r1, r1, #3
 801197c:	9101      	str	r1, [sp, #4]
 801197e:	0021      	movs	r1, r4
 8011980:	9801      	ldr	r0, [sp, #4]
 8011982:	7033      	strb	r3, [r6, #0]
 8011984:	9400      	str	r4, [sp, #0]
 8011986:	4301      	orrs	r1, r0
 8011988:	d1eb      	bne.n	8011962 <_vfiprintf_r+0x952>
 801198a:	07f9      	lsls	r1, r7, #31
 801198c:	d505      	bpl.n	801199a <_vfiprintf_r+0x98a>
 801198e:	2b30      	cmp	r3, #48	; 0x30
 8011990:	d003      	beq.n	801199a <_vfiprintf_r+0x98a>
 8011992:	2330      	movs	r3, #48	; 0x30
 8011994:	3e01      	subs	r6, #1
 8011996:	7033      	strb	r3, [r6, #0]
 8011998:	1e96      	subs	r6, r2, #2
 801199a:	9b05      	ldr	r3, [sp, #20]
 801199c:	003c      	movs	r4, r7
 801199e:	930b      	str	r3, [sp, #44]	; 0x2c
 80119a0:	ab40      	add	r3, sp, #256	; 0x100
 80119a2:	1b9b      	subs	r3, r3, r6
 80119a4:	9305      	str	r3, [sp, #20]
 80119a6:	e575      	b.n	8011494 <_vfiprintf_r+0x484>
 80119a8:	080141b9 	.word	0x080141b9

080119ac <__sbprintf>:
 80119ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ae:	0015      	movs	r5, r2
 80119b0:	2202      	movs	r2, #2
 80119b2:	4c1e      	ldr	r4, [pc, #120]	; (8011a2c <__sbprintf+0x80>)
 80119b4:	001f      	movs	r7, r3
 80119b6:	898b      	ldrh	r3, [r1, #12]
 80119b8:	44a5      	add	sp, r4
 80119ba:	4393      	bics	r3, r2
 80119bc:	466a      	mov	r2, sp
 80119be:	8193      	strh	r3, [r2, #12]
 80119c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80119c2:	0006      	movs	r6, r0
 80119c4:	9319      	str	r3, [sp, #100]	; 0x64
 80119c6:	89cb      	ldrh	r3, [r1, #14]
 80119c8:	a816      	add	r0, sp, #88	; 0x58
 80119ca:	81d3      	strh	r3, [r2, #14]
 80119cc:	69cb      	ldr	r3, [r1, #28]
 80119ce:	000c      	movs	r4, r1
 80119d0:	9307      	str	r3, [sp, #28]
 80119d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80119d4:	9309      	str	r3, [sp, #36]	; 0x24
 80119d6:	ab1a      	add	r3, sp, #104	; 0x68
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	9304      	str	r3, [sp, #16]
 80119dc:	2380      	movs	r3, #128	; 0x80
 80119de:	00db      	lsls	r3, r3, #3
 80119e0:	9302      	str	r3, [sp, #8]
 80119e2:	9305      	str	r3, [sp, #20]
 80119e4:	2300      	movs	r3, #0
 80119e6:	9306      	str	r3, [sp, #24]
 80119e8:	f7f9 ff8c 	bl	800b904 <__retarget_lock_init_recursive>
 80119ec:	002a      	movs	r2, r5
 80119ee:	003b      	movs	r3, r7
 80119f0:	4669      	mov	r1, sp
 80119f2:	0030      	movs	r0, r6
 80119f4:	f7ff fb0c 	bl	8011010 <_vfiprintf_r>
 80119f8:	1e05      	subs	r5, r0, #0
 80119fa:	db07      	blt.n	8011a0c <__sbprintf+0x60>
 80119fc:	4669      	mov	r1, sp
 80119fe:	0030      	movs	r0, r6
 8011a00:	f7fd fdf6 	bl	800f5f0 <_fflush_r>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d001      	beq.n	8011a0c <__sbprintf+0x60>
 8011a08:	2501      	movs	r5, #1
 8011a0a:	426d      	negs	r5, r5
 8011a0c:	466b      	mov	r3, sp
 8011a0e:	899a      	ldrh	r2, [r3, #12]
 8011a10:	2340      	movs	r3, #64	; 0x40
 8011a12:	421a      	tst	r2, r3
 8011a14:	d002      	beq.n	8011a1c <__sbprintf+0x70>
 8011a16:	89a2      	ldrh	r2, [r4, #12]
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	81a3      	strh	r3, [r4, #12]
 8011a1c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011a1e:	f7f9 ff72 	bl	800b906 <__retarget_lock_close_recursive>
 8011a22:	0028      	movs	r0, r5
 8011a24:	4b02      	ldr	r3, [pc, #8]	; (8011a30 <__sbprintf+0x84>)
 8011a26:	449d      	add	sp, r3
 8011a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a2a:	46c0      	nop			; (mov r8, r8)
 8011a2c:	fffffb94 	.word	0xfffffb94
 8011a30:	0000046c 	.word	0x0000046c

08011a34 <__sfvwrite_r>:
 8011a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a36:	6893      	ldr	r3, [r2, #8]
 8011a38:	b087      	sub	sp, #28
 8011a3a:	000c      	movs	r4, r1
 8011a3c:	9002      	str	r0, [sp, #8]
 8011a3e:	9204      	str	r2, [sp, #16]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d102      	bne.n	8011a4a <__sfvwrite_r+0x16>
 8011a44:	2000      	movs	r0, #0
 8011a46:	b007      	add	sp, #28
 8011a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a4a:	898b      	ldrh	r3, [r1, #12]
 8011a4c:	071b      	lsls	r3, r3, #28
 8011a4e:	d557      	bpl.n	8011b00 <__sfvwrite_r+0xcc>
 8011a50:	690b      	ldr	r3, [r1, #16]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d054      	beq.n	8011b00 <__sfvwrite_r+0xcc>
 8011a56:	9b04      	ldr	r3, [sp, #16]
 8011a58:	2202      	movs	r2, #2
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	001f      	movs	r7, r3
 8011a62:	4017      	ands	r7, r2
 8011a64:	4213      	tst	r3, r2
 8011a66:	d171      	bne.n	8011b4c <__sfvwrite_r+0x118>
 8011a68:	2201      	movs	r2, #1
 8011a6a:	2101      	movs	r1, #1
 8011a6c:	401a      	ands	r2, r3
 8011a6e:	420b      	tst	r3, r1
 8011a70:	d100      	bne.n	8011a74 <__sfvwrite_r+0x40>
 8011a72:	e0a5      	b.n	8011bc0 <__sfvwrite_r+0x18c>
 8011a74:	0038      	movs	r0, r7
 8011a76:	003e      	movs	r6, r7
 8011a78:	9703      	str	r7, [sp, #12]
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d100      	bne.n	8011a82 <__sfvwrite_r+0x4e>
 8011a80:	e10b      	b.n	8011c9a <__sfvwrite_r+0x266>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d10a      	bne.n	8011a9c <__sfvwrite_r+0x68>
 8011a86:	001a      	movs	r2, r3
 8011a88:	210a      	movs	r1, #10
 8011a8a:	0030      	movs	r0, r6
 8011a8c:	f7fd fe2a 	bl	800f6e4 <memchr>
 8011a90:	9b03      	ldr	r3, [sp, #12]
 8011a92:	1c5f      	adds	r7, r3, #1
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d001      	beq.n	8011a9c <__sfvwrite_r+0x68>
 8011a98:	3001      	adds	r0, #1
 8011a9a:	1b87      	subs	r7, r0, r6
 8011a9c:	9b03      	ldr	r3, [sp, #12]
 8011a9e:	9705      	str	r7, [sp, #20]
 8011aa0:	429f      	cmp	r7, r3
 8011aa2:	d900      	bls.n	8011aa6 <__sfvwrite_r+0x72>
 8011aa4:	9305      	str	r3, [sp, #20]
 8011aa6:	6820      	ldr	r0, [r4, #0]
 8011aa8:	6922      	ldr	r2, [r4, #16]
 8011aaa:	68a5      	ldr	r5, [r4, #8]
 8011aac:	6963      	ldr	r3, [r4, #20]
 8011aae:	4290      	cmp	r0, r2
 8011ab0:	d800      	bhi.n	8011ab4 <__sfvwrite_r+0x80>
 8011ab2:	e0fb      	b.n	8011cac <__sfvwrite_r+0x278>
 8011ab4:	9a05      	ldr	r2, [sp, #20]
 8011ab6:	18ed      	adds	r5, r5, r3
 8011ab8:	42aa      	cmp	r2, r5
 8011aba:	dc00      	bgt.n	8011abe <__sfvwrite_r+0x8a>
 8011abc:	e0f6      	b.n	8011cac <__sfvwrite_r+0x278>
 8011abe:	0031      	movs	r1, r6
 8011ac0:	002a      	movs	r2, r5
 8011ac2:	f000 fa1e 	bl	8011f02 <memmove>
 8011ac6:	6823      	ldr	r3, [r4, #0]
 8011ac8:	0021      	movs	r1, r4
 8011aca:	195b      	adds	r3, r3, r5
 8011acc:	9802      	ldr	r0, [sp, #8]
 8011ace:	6023      	str	r3, [r4, #0]
 8011ad0:	f7fd fd8e 	bl	800f5f0 <_fflush_r>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d16e      	bne.n	8011bb6 <__sfvwrite_r+0x182>
 8011ad8:	2001      	movs	r0, #1
 8011ada:	1b7f      	subs	r7, r7, r5
 8011adc:	d105      	bne.n	8011aea <__sfvwrite_r+0xb6>
 8011ade:	0021      	movs	r1, r4
 8011ae0:	9802      	ldr	r0, [sp, #8]
 8011ae2:	f7fd fd85 	bl	800f5f0 <_fflush_r>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d165      	bne.n	8011bb6 <__sfvwrite_r+0x182>
 8011aea:	9b03      	ldr	r3, [sp, #12]
 8011aec:	9a04      	ldr	r2, [sp, #16]
 8011aee:	1b5b      	subs	r3, r3, r5
 8011af0:	9303      	str	r3, [sp, #12]
 8011af2:	9b04      	ldr	r3, [sp, #16]
 8011af4:	1976      	adds	r6, r6, r5
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	1b5b      	subs	r3, r3, r5
 8011afa:	6093      	str	r3, [r2, #8]
 8011afc:	d1bd      	bne.n	8011a7a <__sfvwrite_r+0x46>
 8011afe:	e7a1      	b.n	8011a44 <__sfvwrite_r+0x10>
 8011b00:	0021      	movs	r1, r4
 8011b02:	9802      	ldr	r0, [sp, #8]
 8011b04:	f000 f932 	bl	8011d6c <__swsetup_r>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d0a4      	beq.n	8011a56 <__sfvwrite_r+0x22>
 8011b0c:	2001      	movs	r0, #1
 8011b0e:	4240      	negs	r0, r0
 8011b10:	e799      	b.n	8011a46 <__sfvwrite_r+0x12>
 8011b12:	9b01      	ldr	r3, [sp, #4]
 8011b14:	681e      	ldr	r6, [r3, #0]
 8011b16:	685d      	ldr	r5, [r3, #4]
 8011b18:	3308      	adds	r3, #8
 8011b1a:	9301      	str	r3, [sp, #4]
 8011b1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011b1e:	69e1      	ldr	r1, [r4, #28]
 8011b20:	2d00      	cmp	r5, #0
 8011b22:	d0f6      	beq.n	8011b12 <__sfvwrite_r+0xde>
 8011b24:	4a6e      	ldr	r2, [pc, #440]	; (8011ce0 <__sfvwrite_r+0x2ac>)
 8011b26:	002b      	movs	r3, r5
 8011b28:	4295      	cmp	r5, r2
 8011b2a:	d900      	bls.n	8011b2e <__sfvwrite_r+0xfa>
 8011b2c:	0013      	movs	r3, r2
 8011b2e:	0032      	movs	r2, r6
 8011b30:	9802      	ldr	r0, [sp, #8]
 8011b32:	47b8      	blx	r7
 8011b34:	2800      	cmp	r0, #0
 8011b36:	dd3e      	ble.n	8011bb6 <__sfvwrite_r+0x182>
 8011b38:	9b04      	ldr	r3, [sp, #16]
 8011b3a:	9a04      	ldr	r2, [sp, #16]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	1836      	adds	r6, r6, r0
 8011b40:	1a1b      	subs	r3, r3, r0
 8011b42:	1a2d      	subs	r5, r5, r0
 8011b44:	6093      	str	r3, [r2, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d1e8      	bne.n	8011b1c <__sfvwrite_r+0xe8>
 8011b4a:	e77b      	b.n	8011a44 <__sfvwrite_r+0x10>
 8011b4c:	2600      	movs	r6, #0
 8011b4e:	0035      	movs	r5, r6
 8011b50:	e7e4      	b.n	8011b1c <__sfvwrite_r+0xe8>
 8011b52:	9b01      	ldr	r3, [sp, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	9303      	str	r3, [sp, #12]
 8011b58:	9b01      	ldr	r3, [sp, #4]
 8011b5a:	685d      	ldr	r5, [r3, #4]
 8011b5c:	3308      	adds	r3, #8
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	220c      	movs	r2, #12
 8011b62:	5ea3      	ldrsh	r3, [r4, r2]
 8011b64:	6820      	ldr	r0, [r4, #0]
 8011b66:	68a6      	ldr	r6, [r4, #8]
 8011b68:	2d00      	cmp	r5, #0
 8011b6a:	d0f2      	beq.n	8011b52 <__sfvwrite_r+0x11e>
 8011b6c:	2180      	movs	r1, #128	; 0x80
 8011b6e:	0089      	lsls	r1, r1, #2
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	420b      	tst	r3, r1
 8011b74:	d062      	beq.n	8011c3c <__sfvwrite_r+0x208>
 8011b76:	42ae      	cmp	r6, r5
 8011b78:	d837      	bhi.n	8011bea <__sfvwrite_r+0x1b6>
 8011b7a:	2390      	movs	r3, #144	; 0x90
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	421a      	tst	r2, r3
 8011b80:	d033      	beq.n	8011bea <__sfvwrite_r+0x1b6>
 8011b82:	6921      	ldr	r1, [r4, #16]
 8011b84:	1a43      	subs	r3, r0, r1
 8011b86:	2003      	movs	r0, #3
 8011b88:	9305      	str	r3, [sp, #20]
 8011b8a:	6963      	ldr	r3, [r4, #20]
 8011b8c:	4343      	muls	r3, r0
 8011b8e:	0fdf      	lsrs	r7, r3, #31
 8011b90:	18ff      	adds	r7, r7, r3
 8011b92:	9b05      	ldr	r3, [sp, #20]
 8011b94:	107f      	asrs	r7, r7, #1
 8011b96:	3301      	adds	r3, #1
 8011b98:	195b      	adds	r3, r3, r5
 8011b9a:	42bb      	cmp	r3, r7
 8011b9c:	d900      	bls.n	8011ba0 <__sfvwrite_r+0x16c>
 8011b9e:	001f      	movs	r7, r3
 8011ba0:	0552      	lsls	r2, r2, #21
 8011ba2:	d53c      	bpl.n	8011c1e <__sfvwrite_r+0x1ea>
 8011ba4:	0039      	movs	r1, r7
 8011ba6:	9802      	ldr	r0, [sp, #8]
 8011ba8:	f7f8 fb56 	bl	800a258 <_malloc_r>
 8011bac:	1e06      	subs	r6, r0, #0
 8011bae:	d10a      	bne.n	8011bc6 <__sfvwrite_r+0x192>
 8011bb0:	230c      	movs	r3, #12
 8011bb2:	9a02      	ldr	r2, [sp, #8]
 8011bb4:	6013      	str	r3, [r2, #0]
 8011bb6:	2340      	movs	r3, #64	; 0x40
 8011bb8:	89a2      	ldrh	r2, [r4, #12]
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	81a3      	strh	r3, [r4, #12]
 8011bbe:	e7a5      	b.n	8011b0c <__sfvwrite_r+0xd8>
 8011bc0:	0015      	movs	r5, r2
 8011bc2:	9203      	str	r2, [sp, #12]
 8011bc4:	e7cc      	b.n	8011b60 <__sfvwrite_r+0x12c>
 8011bc6:	9a05      	ldr	r2, [sp, #20]
 8011bc8:	6921      	ldr	r1, [r4, #16]
 8011bca:	f7f9 feaa 	bl	800b922 <memcpy>
 8011bce:	89a2      	ldrh	r2, [r4, #12]
 8011bd0:	4b44      	ldr	r3, [pc, #272]	; (8011ce4 <__sfvwrite_r+0x2b0>)
 8011bd2:	401a      	ands	r2, r3
 8011bd4:	2380      	movs	r3, #128	; 0x80
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	81a3      	strh	r3, [r4, #12]
 8011bda:	9b05      	ldr	r3, [sp, #20]
 8011bdc:	6126      	str	r6, [r4, #16]
 8011bde:	18f6      	adds	r6, r6, r3
 8011be0:	6026      	str	r6, [r4, #0]
 8011be2:	002e      	movs	r6, r5
 8011be4:	6167      	str	r7, [r4, #20]
 8011be6:	1aff      	subs	r7, r7, r3
 8011be8:	60a7      	str	r7, [r4, #8]
 8011bea:	002f      	movs	r7, r5
 8011bec:	42ae      	cmp	r6, r5
 8011bee:	d900      	bls.n	8011bf2 <__sfvwrite_r+0x1be>
 8011bf0:	002e      	movs	r6, r5
 8011bf2:	0032      	movs	r2, r6
 8011bf4:	9903      	ldr	r1, [sp, #12]
 8011bf6:	6820      	ldr	r0, [r4, #0]
 8011bf8:	f000 f983 	bl	8011f02 <memmove>
 8011bfc:	68a3      	ldr	r3, [r4, #8]
 8011bfe:	1b9b      	subs	r3, r3, r6
 8011c00:	60a3      	str	r3, [r4, #8]
 8011c02:	6823      	ldr	r3, [r4, #0]
 8011c04:	199b      	adds	r3, r3, r6
 8011c06:	6023      	str	r3, [r4, #0]
 8011c08:	9b03      	ldr	r3, [sp, #12]
 8011c0a:	9a04      	ldr	r2, [sp, #16]
 8011c0c:	19db      	adds	r3, r3, r7
 8011c0e:	9303      	str	r3, [sp, #12]
 8011c10:	9b04      	ldr	r3, [sp, #16]
 8011c12:	1bed      	subs	r5, r5, r7
 8011c14:	689b      	ldr	r3, [r3, #8]
 8011c16:	1bdb      	subs	r3, r3, r7
 8011c18:	6093      	str	r3, [r2, #8]
 8011c1a:	d1a1      	bne.n	8011b60 <__sfvwrite_r+0x12c>
 8011c1c:	e712      	b.n	8011a44 <__sfvwrite_r+0x10>
 8011c1e:	003a      	movs	r2, r7
 8011c20:	9802      	ldr	r0, [sp, #8]
 8011c22:	f7fe fcd7 	bl	80105d4 <_realloc_r>
 8011c26:	1e06      	subs	r6, r0, #0
 8011c28:	d1d7      	bne.n	8011bda <__sfvwrite_r+0x1a6>
 8011c2a:	6921      	ldr	r1, [r4, #16]
 8011c2c:	9802      	ldr	r0, [sp, #8]
 8011c2e:	f7f9 fef3 	bl	800ba18 <_free_r>
 8011c32:	2280      	movs	r2, #128	; 0x80
 8011c34:	89a3      	ldrh	r3, [r4, #12]
 8011c36:	4393      	bics	r3, r2
 8011c38:	81a3      	strh	r3, [r4, #12]
 8011c3a:	e7b9      	b.n	8011bb0 <__sfvwrite_r+0x17c>
 8011c3c:	6923      	ldr	r3, [r4, #16]
 8011c3e:	4283      	cmp	r3, r0
 8011c40:	d302      	bcc.n	8011c48 <__sfvwrite_r+0x214>
 8011c42:	6967      	ldr	r7, [r4, #20]
 8011c44:	42af      	cmp	r7, r5
 8011c46:	d916      	bls.n	8011c76 <__sfvwrite_r+0x242>
 8011c48:	42ae      	cmp	r6, r5
 8011c4a:	d900      	bls.n	8011c4e <__sfvwrite_r+0x21a>
 8011c4c:	002e      	movs	r6, r5
 8011c4e:	0032      	movs	r2, r6
 8011c50:	9903      	ldr	r1, [sp, #12]
 8011c52:	f000 f956 	bl	8011f02 <memmove>
 8011c56:	68a3      	ldr	r3, [r4, #8]
 8011c58:	6822      	ldr	r2, [r4, #0]
 8011c5a:	1b9b      	subs	r3, r3, r6
 8011c5c:	1992      	adds	r2, r2, r6
 8011c5e:	0037      	movs	r7, r6
 8011c60:	60a3      	str	r3, [r4, #8]
 8011c62:	6022      	str	r2, [r4, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1cf      	bne.n	8011c08 <__sfvwrite_r+0x1d4>
 8011c68:	0021      	movs	r1, r4
 8011c6a:	9802      	ldr	r0, [sp, #8]
 8011c6c:	f7fd fcc0 	bl	800f5f0 <_fflush_r>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d0c9      	beq.n	8011c08 <__sfvwrite_r+0x1d4>
 8011c74:	e79f      	b.n	8011bb6 <__sfvwrite_r+0x182>
 8011c76:	4b1c      	ldr	r3, [pc, #112]	; (8011ce8 <__sfvwrite_r+0x2b4>)
 8011c78:	0028      	movs	r0, r5
 8011c7a:	429d      	cmp	r5, r3
 8011c7c:	d900      	bls.n	8011c80 <__sfvwrite_r+0x24c>
 8011c7e:	481b      	ldr	r0, [pc, #108]	; (8011cec <__sfvwrite_r+0x2b8>)
 8011c80:	0039      	movs	r1, r7
 8011c82:	f7ee fae5 	bl	8000250 <__divsi3>
 8011c86:	003b      	movs	r3, r7
 8011c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c8a:	4343      	muls	r3, r0
 8011c8c:	9a03      	ldr	r2, [sp, #12]
 8011c8e:	69e1      	ldr	r1, [r4, #28]
 8011c90:	9802      	ldr	r0, [sp, #8]
 8011c92:	47b0      	blx	r6
 8011c94:	1e07      	subs	r7, r0, #0
 8011c96:	dcb7      	bgt.n	8011c08 <__sfvwrite_r+0x1d4>
 8011c98:	e78d      	b.n	8011bb6 <__sfvwrite_r+0x182>
 8011c9a:	9b01      	ldr	r3, [sp, #4]
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	681e      	ldr	r6, [r3, #0]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	9303      	str	r3, [sp, #12]
 8011ca4:	9b01      	ldr	r3, [sp, #4]
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	e6e6      	b.n	8011a7a <__sfvwrite_r+0x46>
 8011cac:	9a05      	ldr	r2, [sp, #20]
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	dc08      	bgt.n	8011cc4 <__sfvwrite_r+0x290>
 8011cb2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011cb4:	0032      	movs	r2, r6
 8011cb6:	69e1      	ldr	r1, [r4, #28]
 8011cb8:	9802      	ldr	r0, [sp, #8]
 8011cba:	47a8      	blx	r5
 8011cbc:	1e05      	subs	r5, r0, #0
 8011cbe:	dd00      	ble.n	8011cc2 <__sfvwrite_r+0x28e>
 8011cc0:	e70a      	b.n	8011ad8 <__sfvwrite_r+0xa4>
 8011cc2:	e778      	b.n	8011bb6 <__sfvwrite_r+0x182>
 8011cc4:	9a05      	ldr	r2, [sp, #20]
 8011cc6:	0031      	movs	r1, r6
 8011cc8:	f000 f91b 	bl	8011f02 <memmove>
 8011ccc:	9a05      	ldr	r2, [sp, #20]
 8011cce:	68a3      	ldr	r3, [r4, #8]
 8011cd0:	0015      	movs	r5, r2
 8011cd2:	1a9b      	subs	r3, r3, r2
 8011cd4:	60a3      	str	r3, [r4, #8]
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	189b      	adds	r3, r3, r2
 8011cda:	6023      	str	r3, [r4, #0]
 8011cdc:	e6fc      	b.n	8011ad8 <__sfvwrite_r+0xa4>
 8011cde:	46c0      	nop			; (mov r8, r8)
 8011ce0:	7ffffc00 	.word	0x7ffffc00
 8011ce4:	fffffb7f 	.word	0xfffffb7f
 8011ce8:	7ffffffe 	.word	0x7ffffffe
 8011cec:	7fffffff 	.word	0x7fffffff

08011cf0 <__submore>:
 8011cf0:	000b      	movs	r3, r1
 8011cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cf4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8011cf6:	3340      	adds	r3, #64	; 0x40
 8011cf8:	000c      	movs	r4, r1
 8011cfa:	429d      	cmp	r5, r3
 8011cfc:	d11c      	bne.n	8011d38 <__submore+0x48>
 8011cfe:	2680      	movs	r6, #128	; 0x80
 8011d00:	00f6      	lsls	r6, r6, #3
 8011d02:	0031      	movs	r1, r6
 8011d04:	f7f8 faa8 	bl	800a258 <_malloc_r>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d102      	bne.n	8011d12 <__submore+0x22>
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	4240      	negs	r0, r0
 8011d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d12:	0023      	movs	r3, r4
 8011d14:	6320      	str	r0, [r4, #48]	; 0x30
 8011d16:	6366      	str	r6, [r4, #52]	; 0x34
 8011d18:	3342      	adds	r3, #66	; 0x42
 8011d1a:	781a      	ldrb	r2, [r3, #0]
 8011d1c:	4b10      	ldr	r3, [pc, #64]	; (8011d60 <__submore+0x70>)
 8011d1e:	54c2      	strb	r2, [r0, r3]
 8011d20:	0023      	movs	r3, r4
 8011d22:	3341      	adds	r3, #65	; 0x41
 8011d24:	781a      	ldrb	r2, [r3, #0]
 8011d26:	4b0f      	ldr	r3, [pc, #60]	; (8011d64 <__submore+0x74>)
 8011d28:	54c2      	strb	r2, [r0, r3]
 8011d2a:	782a      	ldrb	r2, [r5, #0]
 8011d2c:	4b0e      	ldr	r3, [pc, #56]	; (8011d68 <__submore+0x78>)
 8011d2e:	54c2      	strb	r2, [r0, r3]
 8011d30:	18c0      	adds	r0, r0, r3
 8011d32:	6020      	str	r0, [r4, #0]
 8011d34:	2000      	movs	r0, #0
 8011d36:	e7eb      	b.n	8011d10 <__submore+0x20>
 8011d38:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8011d3a:	0029      	movs	r1, r5
 8011d3c:	0073      	lsls	r3, r6, #1
 8011d3e:	001a      	movs	r2, r3
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	f7fe fc47 	bl	80105d4 <_realloc_r>
 8011d46:	1e05      	subs	r5, r0, #0
 8011d48:	d0e0      	beq.n	8011d0c <__submore+0x1c>
 8011d4a:	1987      	adds	r7, r0, r6
 8011d4c:	0001      	movs	r1, r0
 8011d4e:	0032      	movs	r2, r6
 8011d50:	0038      	movs	r0, r7
 8011d52:	f7f9 fde6 	bl	800b922 <memcpy>
 8011d56:	9b01      	ldr	r3, [sp, #4]
 8011d58:	6027      	str	r7, [r4, #0]
 8011d5a:	6325      	str	r5, [r4, #48]	; 0x30
 8011d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8011d5e:	e7e9      	b.n	8011d34 <__submore+0x44>
 8011d60:	000003ff 	.word	0x000003ff
 8011d64:	000003fe 	.word	0x000003fe
 8011d68:	000003fd 	.word	0x000003fd

08011d6c <__swsetup_r>:
 8011d6c:	4b30      	ldr	r3, [pc, #192]	; (8011e30 <__swsetup_r+0xc4>)
 8011d6e:	b570      	push	{r4, r5, r6, lr}
 8011d70:	0005      	movs	r5, r0
 8011d72:	6818      	ldr	r0, [r3, #0]
 8011d74:	000c      	movs	r4, r1
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d004      	beq.n	8011d84 <__swsetup_r+0x18>
 8011d7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d101      	bne.n	8011d84 <__swsetup_r+0x18>
 8011d80:	f7f9 fbec 	bl	800b55c <__sinit>
 8011d84:	230c      	movs	r3, #12
 8011d86:	5ee2      	ldrsh	r2, [r4, r3]
 8011d88:	b293      	uxth	r3, r2
 8011d8a:	0711      	lsls	r1, r2, #28
 8011d8c:	d423      	bmi.n	8011dd6 <__swsetup_r+0x6a>
 8011d8e:	06d9      	lsls	r1, r3, #27
 8011d90:	d407      	bmi.n	8011da2 <__swsetup_r+0x36>
 8011d92:	2309      	movs	r3, #9
 8011d94:	2001      	movs	r0, #1
 8011d96:	602b      	str	r3, [r5, #0]
 8011d98:	3337      	adds	r3, #55	; 0x37
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	4240      	negs	r0, r0
 8011da0:	bd70      	pop	{r4, r5, r6, pc}
 8011da2:	075b      	lsls	r3, r3, #29
 8011da4:	d513      	bpl.n	8011dce <__swsetup_r+0x62>
 8011da6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011da8:	2900      	cmp	r1, #0
 8011daa:	d008      	beq.n	8011dbe <__swsetup_r+0x52>
 8011dac:	0023      	movs	r3, r4
 8011dae:	3340      	adds	r3, #64	; 0x40
 8011db0:	4299      	cmp	r1, r3
 8011db2:	d002      	beq.n	8011dba <__swsetup_r+0x4e>
 8011db4:	0028      	movs	r0, r5
 8011db6:	f7f9 fe2f 	bl	800ba18 <_free_r>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6323      	str	r3, [r4, #48]	; 0x30
 8011dbe:	2224      	movs	r2, #36	; 0x24
 8011dc0:	89a3      	ldrh	r3, [r4, #12]
 8011dc2:	4393      	bics	r3, r2
 8011dc4:	81a3      	strh	r3, [r4, #12]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	6063      	str	r3, [r4, #4]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	2308      	movs	r3, #8
 8011dd0:	89a2      	ldrh	r2, [r4, #12]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	81a3      	strh	r3, [r4, #12]
 8011dd6:	6923      	ldr	r3, [r4, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d10b      	bne.n	8011df4 <__swsetup_r+0x88>
 8011ddc:	21a0      	movs	r1, #160	; 0xa0
 8011dde:	2280      	movs	r2, #128	; 0x80
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	0089      	lsls	r1, r1, #2
 8011de4:	0092      	lsls	r2, r2, #2
 8011de6:	400b      	ands	r3, r1
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d003      	beq.n	8011df4 <__swsetup_r+0x88>
 8011dec:	0021      	movs	r1, r4
 8011dee:	0028      	movs	r0, r5
 8011df0:	f000 f8e8 	bl	8011fc4 <__smakebuf_r>
 8011df4:	220c      	movs	r2, #12
 8011df6:	5ea3      	ldrsh	r3, [r4, r2]
 8011df8:	2001      	movs	r0, #1
 8011dfa:	001a      	movs	r2, r3
 8011dfc:	b299      	uxth	r1, r3
 8011dfe:	4002      	ands	r2, r0
 8011e00:	4203      	tst	r3, r0
 8011e02:	d00f      	beq.n	8011e24 <__swsetup_r+0xb8>
 8011e04:	2200      	movs	r2, #0
 8011e06:	60a2      	str	r2, [r4, #8]
 8011e08:	6962      	ldr	r2, [r4, #20]
 8011e0a:	4252      	negs	r2, r2
 8011e0c:	61a2      	str	r2, [r4, #24]
 8011e0e:	2000      	movs	r0, #0
 8011e10:	6922      	ldr	r2, [r4, #16]
 8011e12:	4282      	cmp	r2, r0
 8011e14:	d1c4      	bne.n	8011da0 <__swsetup_r+0x34>
 8011e16:	0609      	lsls	r1, r1, #24
 8011e18:	d5c2      	bpl.n	8011da0 <__swsetup_r+0x34>
 8011e1a:	2240      	movs	r2, #64	; 0x40
 8011e1c:	4313      	orrs	r3, r2
 8011e1e:	81a3      	strh	r3, [r4, #12]
 8011e20:	3801      	subs	r0, #1
 8011e22:	e7bd      	b.n	8011da0 <__swsetup_r+0x34>
 8011e24:	0788      	lsls	r0, r1, #30
 8011e26:	d400      	bmi.n	8011e2a <__swsetup_r+0xbe>
 8011e28:	6962      	ldr	r2, [r4, #20]
 8011e2a:	60a2      	str	r2, [r4, #8]
 8011e2c:	e7ef      	b.n	8011e0e <__swsetup_r+0xa2>
 8011e2e:	46c0      	nop			; (mov r8, r8)
 8011e30:	200006c8 	.word	0x200006c8

08011e34 <__fputwc>:
 8011e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e36:	b085      	sub	sp, #20
 8011e38:	000e      	movs	r6, r1
 8011e3a:	0015      	movs	r5, r2
 8011e3c:	9001      	str	r0, [sp, #4]
 8011e3e:	f7f9 fccf 	bl	800b7e0 <__locale_mb_cur_max>
 8011e42:	0004      	movs	r4, r0
 8011e44:	2801      	cmp	r0, #1
 8011e46:	d119      	bne.n	8011e7c <__fputwc+0x48>
 8011e48:	1e73      	subs	r3, r6, #1
 8011e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8011e4c:	d816      	bhi.n	8011e7c <__fputwc+0x48>
 8011e4e:	ab02      	add	r3, sp, #8
 8011e50:	711e      	strb	r6, [r3, #4]
 8011e52:	2700      	movs	r7, #0
 8011e54:	42a7      	cmp	r7, r4
 8011e56:	d020      	beq.n	8011e9a <__fputwc+0x66>
 8011e58:	ab03      	add	r3, sp, #12
 8011e5a:	5dd9      	ldrb	r1, [r3, r7]
 8011e5c:	68ab      	ldr	r3, [r5, #8]
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	60ab      	str	r3, [r5, #8]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	da04      	bge.n	8011e70 <__fputwc+0x3c>
 8011e66:	69aa      	ldr	r2, [r5, #24]
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	db19      	blt.n	8011ea0 <__fputwc+0x6c>
 8011e6c:	290a      	cmp	r1, #10
 8011e6e:	d017      	beq.n	8011ea0 <__fputwc+0x6c>
 8011e70:	682b      	ldr	r3, [r5, #0]
 8011e72:	1c5a      	adds	r2, r3, #1
 8011e74:	602a      	str	r2, [r5, #0]
 8011e76:	7019      	strb	r1, [r3, #0]
 8011e78:	3701      	adds	r7, #1
 8011e7a:	e7eb      	b.n	8011e54 <__fputwc+0x20>
 8011e7c:	002b      	movs	r3, r5
 8011e7e:	0032      	movs	r2, r6
 8011e80:	9801      	ldr	r0, [sp, #4]
 8011e82:	335c      	adds	r3, #92	; 0x5c
 8011e84:	a903      	add	r1, sp, #12
 8011e86:	f000 f857 	bl	8011f38 <_wcrtomb_r>
 8011e8a:	0004      	movs	r4, r0
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	d1e0      	bne.n	8011e52 <__fputwc+0x1e>
 8011e90:	2340      	movs	r3, #64	; 0x40
 8011e92:	0006      	movs	r6, r0
 8011e94:	89aa      	ldrh	r2, [r5, #12]
 8011e96:	4313      	orrs	r3, r2
 8011e98:	81ab      	strh	r3, [r5, #12]
 8011e9a:	0030      	movs	r0, r6
 8011e9c:	b005      	add	sp, #20
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea0:	002a      	movs	r2, r5
 8011ea2:	9801      	ldr	r0, [sp, #4]
 8011ea4:	f000 f8cc 	bl	8012040 <__swbuf_r>
 8011ea8:	1c43      	adds	r3, r0, #1
 8011eaa:	d1e5      	bne.n	8011e78 <__fputwc+0x44>
 8011eac:	0006      	movs	r6, r0
 8011eae:	e7f4      	b.n	8011e9a <__fputwc+0x66>

08011eb0 <_fputwc_r>:
 8011eb0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011eb2:	b570      	push	{r4, r5, r6, lr}
 8011eb4:	0005      	movs	r5, r0
 8011eb6:	000e      	movs	r6, r1
 8011eb8:	0014      	movs	r4, r2
 8011eba:	07db      	lsls	r3, r3, #31
 8011ebc:	d405      	bmi.n	8011eca <_fputwc_r+0x1a>
 8011ebe:	8993      	ldrh	r3, [r2, #12]
 8011ec0:	059b      	lsls	r3, r3, #22
 8011ec2:	d402      	bmi.n	8011eca <_fputwc_r+0x1a>
 8011ec4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8011ec6:	f7f9 fd1f 	bl	800b908 <__retarget_lock_acquire_recursive>
 8011eca:	230c      	movs	r3, #12
 8011ecc:	5ee2      	ldrsh	r2, [r4, r3]
 8011ece:	2380      	movs	r3, #128	; 0x80
 8011ed0:	019b      	lsls	r3, r3, #6
 8011ed2:	421a      	tst	r2, r3
 8011ed4:	d104      	bne.n	8011ee0 <_fputwc_r+0x30>
 8011ed6:	431a      	orrs	r2, r3
 8011ed8:	81a2      	strh	r2, [r4, #12]
 8011eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011edc:	4313      	orrs	r3, r2
 8011ede:	6663      	str	r3, [r4, #100]	; 0x64
 8011ee0:	0028      	movs	r0, r5
 8011ee2:	0022      	movs	r2, r4
 8011ee4:	0031      	movs	r1, r6
 8011ee6:	f7ff ffa5 	bl	8011e34 <__fputwc>
 8011eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011eec:	0005      	movs	r5, r0
 8011eee:	07db      	lsls	r3, r3, #31
 8011ef0:	d405      	bmi.n	8011efe <_fputwc_r+0x4e>
 8011ef2:	89a3      	ldrh	r3, [r4, #12]
 8011ef4:	059b      	lsls	r3, r3, #22
 8011ef6:	d402      	bmi.n	8011efe <_fputwc_r+0x4e>
 8011ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011efa:	f7f9 fd06 	bl	800b90a <__retarget_lock_release_recursive>
 8011efe:	0028      	movs	r0, r5
 8011f00:	bd70      	pop	{r4, r5, r6, pc}

08011f02 <memmove>:
 8011f02:	b510      	push	{r4, lr}
 8011f04:	4288      	cmp	r0, r1
 8011f06:	d902      	bls.n	8011f0e <memmove+0xc>
 8011f08:	188b      	adds	r3, r1, r2
 8011f0a:	4298      	cmp	r0, r3
 8011f0c:	d303      	bcc.n	8011f16 <memmove+0x14>
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e007      	b.n	8011f22 <memmove+0x20>
 8011f12:	5c8b      	ldrb	r3, [r1, r2]
 8011f14:	5483      	strb	r3, [r0, r2]
 8011f16:	3a01      	subs	r2, #1
 8011f18:	d2fb      	bcs.n	8011f12 <memmove+0x10>
 8011f1a:	bd10      	pop	{r4, pc}
 8011f1c:	5ccc      	ldrb	r4, [r1, r3]
 8011f1e:	54c4      	strb	r4, [r0, r3]
 8011f20:	3301      	adds	r3, #1
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d1fa      	bne.n	8011f1c <memmove+0x1a>
 8011f26:	e7f8      	b.n	8011f1a <memmove+0x18>

08011f28 <abort>:
 8011f28:	2006      	movs	r0, #6
 8011f2a:	b510      	push	{r4, lr}
 8011f2c:	f000 f906 	bl	801213c <raise>
 8011f30:	2001      	movs	r0, #1
 8011f32:	f7f1 fca9 	bl	8003888 <_exit>
	...

08011f38 <_wcrtomb_r>:
 8011f38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011f3a:	001d      	movs	r5, r3
 8011f3c:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <_wcrtomb_r+0x2c>)
 8011f3e:	0004      	movs	r4, r0
 8011f40:	33e0      	adds	r3, #224	; 0xe0
 8011f42:	681e      	ldr	r6, [r3, #0]
 8011f44:	002b      	movs	r3, r5
 8011f46:	2900      	cmp	r1, #0
 8011f48:	d101      	bne.n	8011f4e <_wcrtomb_r+0x16>
 8011f4a:	000a      	movs	r2, r1
 8011f4c:	a901      	add	r1, sp, #4
 8011f4e:	0020      	movs	r0, r4
 8011f50:	47b0      	blx	r6
 8011f52:	1c43      	adds	r3, r0, #1
 8011f54:	d103      	bne.n	8011f5e <_wcrtomb_r+0x26>
 8011f56:	2300      	movs	r3, #0
 8011f58:	602b      	str	r3, [r5, #0]
 8011f5a:	338a      	adds	r3, #138	; 0x8a
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	b004      	add	sp, #16
 8011f60:	bd70      	pop	{r4, r5, r6, pc}
 8011f62:	46c0      	nop			; (mov r8, r8)
 8011f64:	2000043c 	.word	0x2000043c

08011f68 <__swhatbuf_r>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	000e      	movs	r6, r1
 8011f6c:	001d      	movs	r5, r3
 8011f6e:	230e      	movs	r3, #14
 8011f70:	5ec9      	ldrsh	r1, [r1, r3]
 8011f72:	0014      	movs	r4, r2
 8011f74:	b096      	sub	sp, #88	; 0x58
 8011f76:	2900      	cmp	r1, #0
 8011f78:	da09      	bge.n	8011f8e <__swhatbuf_r+0x26>
 8011f7a:	89b2      	ldrh	r2, [r6, #12]
 8011f7c:	2380      	movs	r3, #128	; 0x80
 8011f7e:	0011      	movs	r1, r2
 8011f80:	4019      	ands	r1, r3
 8011f82:	421a      	tst	r2, r3
 8011f84:	d018      	beq.n	8011fb8 <__swhatbuf_r+0x50>
 8011f86:	2100      	movs	r1, #0
 8011f88:	3b40      	subs	r3, #64	; 0x40
 8011f8a:	0008      	movs	r0, r1
 8011f8c:	e010      	b.n	8011fb0 <__swhatbuf_r+0x48>
 8011f8e:	466a      	mov	r2, sp
 8011f90:	f000 f8de 	bl	8012150 <_fstat_r>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	dbf0      	blt.n	8011f7a <__swhatbuf_r+0x12>
 8011f98:	23f0      	movs	r3, #240	; 0xf0
 8011f9a:	9901      	ldr	r1, [sp, #4]
 8011f9c:	021b      	lsls	r3, r3, #8
 8011f9e:	4019      	ands	r1, r3
 8011fa0:	4b07      	ldr	r3, [pc, #28]	; (8011fc0 <__swhatbuf_r+0x58>)
 8011fa2:	2080      	movs	r0, #128	; 0x80
 8011fa4:	18c9      	adds	r1, r1, r3
 8011fa6:	424b      	negs	r3, r1
 8011fa8:	4159      	adcs	r1, r3
 8011faa:	2380      	movs	r3, #128	; 0x80
 8011fac:	0100      	lsls	r0, r0, #4
 8011fae:	00db      	lsls	r3, r3, #3
 8011fb0:	6029      	str	r1, [r5, #0]
 8011fb2:	6023      	str	r3, [r4, #0]
 8011fb4:	b016      	add	sp, #88	; 0x58
 8011fb6:	bd70      	pop	{r4, r5, r6, pc}
 8011fb8:	2380      	movs	r3, #128	; 0x80
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	e7e5      	b.n	8011f8a <__swhatbuf_r+0x22>
 8011fbe:	46c0      	nop			; (mov r8, r8)
 8011fc0:	ffffe000 	.word	0xffffe000

08011fc4 <__smakebuf_r>:
 8011fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc6:	2602      	movs	r6, #2
 8011fc8:	898b      	ldrh	r3, [r1, #12]
 8011fca:	0005      	movs	r5, r0
 8011fcc:	000c      	movs	r4, r1
 8011fce:	4233      	tst	r3, r6
 8011fd0:	d006      	beq.n	8011fe0 <__smakebuf_r+0x1c>
 8011fd2:	0023      	movs	r3, r4
 8011fd4:	3343      	adds	r3, #67	; 0x43
 8011fd6:	6023      	str	r3, [r4, #0]
 8011fd8:	6123      	str	r3, [r4, #16]
 8011fda:	2301      	movs	r3, #1
 8011fdc:	6163      	str	r3, [r4, #20]
 8011fde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011fe0:	466a      	mov	r2, sp
 8011fe2:	ab01      	add	r3, sp, #4
 8011fe4:	f7ff ffc0 	bl	8011f68 <__swhatbuf_r>
 8011fe8:	9900      	ldr	r1, [sp, #0]
 8011fea:	0007      	movs	r7, r0
 8011fec:	0028      	movs	r0, r5
 8011fee:	f7f8 f933 	bl	800a258 <_malloc_r>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d108      	bne.n	8012008 <__smakebuf_r+0x44>
 8011ff6:	220c      	movs	r2, #12
 8011ff8:	5ea3      	ldrsh	r3, [r4, r2]
 8011ffa:	059a      	lsls	r2, r3, #22
 8011ffc:	d4ef      	bmi.n	8011fde <__smakebuf_r+0x1a>
 8011ffe:	2203      	movs	r2, #3
 8012000:	4393      	bics	r3, r2
 8012002:	431e      	orrs	r6, r3
 8012004:	81a6      	strh	r6, [r4, #12]
 8012006:	e7e4      	b.n	8011fd2 <__smakebuf_r+0xe>
 8012008:	2380      	movs	r3, #128	; 0x80
 801200a:	89a2      	ldrh	r2, [r4, #12]
 801200c:	6020      	str	r0, [r4, #0]
 801200e:	4313      	orrs	r3, r2
 8012010:	81a3      	strh	r3, [r4, #12]
 8012012:	9b00      	ldr	r3, [sp, #0]
 8012014:	6120      	str	r0, [r4, #16]
 8012016:	6163      	str	r3, [r4, #20]
 8012018:	9b01      	ldr	r3, [sp, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d00c      	beq.n	8012038 <__smakebuf_r+0x74>
 801201e:	0028      	movs	r0, r5
 8012020:	230e      	movs	r3, #14
 8012022:	5ee1      	ldrsh	r1, [r4, r3]
 8012024:	f000 f8a6 	bl	8012174 <_isatty_r>
 8012028:	2800      	cmp	r0, #0
 801202a:	d005      	beq.n	8012038 <__smakebuf_r+0x74>
 801202c:	2303      	movs	r3, #3
 801202e:	89a2      	ldrh	r2, [r4, #12]
 8012030:	439a      	bics	r2, r3
 8012032:	3b02      	subs	r3, #2
 8012034:	4313      	orrs	r3, r2
 8012036:	81a3      	strh	r3, [r4, #12]
 8012038:	89a3      	ldrh	r3, [r4, #12]
 801203a:	433b      	orrs	r3, r7
 801203c:	81a3      	strh	r3, [r4, #12]
 801203e:	e7ce      	b.n	8011fde <__smakebuf_r+0x1a>

08012040 <__swbuf_r>:
 8012040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012042:	0006      	movs	r6, r0
 8012044:	000d      	movs	r5, r1
 8012046:	0014      	movs	r4, r2
 8012048:	2800      	cmp	r0, #0
 801204a:	d004      	beq.n	8012056 <__swbuf_r+0x16>
 801204c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801204e:	2b00      	cmp	r3, #0
 8012050:	d101      	bne.n	8012056 <__swbuf_r+0x16>
 8012052:	f7f9 fa83 	bl	800b55c <__sinit>
 8012056:	69a3      	ldr	r3, [r4, #24]
 8012058:	60a3      	str	r3, [r4, #8]
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	071b      	lsls	r3, r3, #28
 801205e:	d52e      	bpl.n	80120be <__swbuf_r+0x7e>
 8012060:	6923      	ldr	r3, [r4, #16]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d02b      	beq.n	80120be <__swbuf_r+0x7e>
 8012066:	230c      	movs	r3, #12
 8012068:	5ee2      	ldrsh	r2, [r4, r3]
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	019b      	lsls	r3, r3, #6
 801206e:	b2ef      	uxtb	r7, r5
 8012070:	b2ed      	uxtb	r5, r5
 8012072:	421a      	tst	r2, r3
 8012074:	d02c      	beq.n	80120d0 <__swbuf_r+0x90>
 8012076:	6923      	ldr	r3, [r4, #16]
 8012078:	6820      	ldr	r0, [r4, #0]
 801207a:	1ac0      	subs	r0, r0, r3
 801207c:	6963      	ldr	r3, [r4, #20]
 801207e:	4283      	cmp	r3, r0
 8012080:	dc05      	bgt.n	801208e <__swbuf_r+0x4e>
 8012082:	0021      	movs	r1, r4
 8012084:	0030      	movs	r0, r6
 8012086:	f7fd fab3 	bl	800f5f0 <_fflush_r>
 801208a:	2800      	cmp	r0, #0
 801208c:	d11d      	bne.n	80120ca <__swbuf_r+0x8a>
 801208e:	68a3      	ldr	r3, [r4, #8]
 8012090:	3001      	adds	r0, #1
 8012092:	3b01      	subs	r3, #1
 8012094:	60a3      	str	r3, [r4, #8]
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	1c5a      	adds	r2, r3, #1
 801209a:	6022      	str	r2, [r4, #0]
 801209c:	701f      	strb	r7, [r3, #0]
 801209e:	6963      	ldr	r3, [r4, #20]
 80120a0:	4283      	cmp	r3, r0
 80120a2:	d004      	beq.n	80120ae <__swbuf_r+0x6e>
 80120a4:	89a3      	ldrh	r3, [r4, #12]
 80120a6:	07db      	lsls	r3, r3, #31
 80120a8:	d507      	bpl.n	80120ba <__swbuf_r+0x7a>
 80120aa:	2d0a      	cmp	r5, #10
 80120ac:	d105      	bne.n	80120ba <__swbuf_r+0x7a>
 80120ae:	0021      	movs	r1, r4
 80120b0:	0030      	movs	r0, r6
 80120b2:	f7fd fa9d 	bl	800f5f0 <_fflush_r>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d107      	bne.n	80120ca <__swbuf_r+0x8a>
 80120ba:	0028      	movs	r0, r5
 80120bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120be:	0021      	movs	r1, r4
 80120c0:	0030      	movs	r0, r6
 80120c2:	f7ff fe53 	bl	8011d6c <__swsetup_r>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d0cd      	beq.n	8012066 <__swbuf_r+0x26>
 80120ca:	2501      	movs	r5, #1
 80120cc:	426d      	negs	r5, r5
 80120ce:	e7f4      	b.n	80120ba <__swbuf_r+0x7a>
 80120d0:	4313      	orrs	r3, r2
 80120d2:	81a3      	strh	r3, [r4, #12]
 80120d4:	4a02      	ldr	r2, [pc, #8]	; (80120e0 <__swbuf_r+0xa0>)
 80120d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120d8:	4013      	ands	r3, r2
 80120da:	6663      	str	r3, [r4, #100]	; 0x64
 80120dc:	e7cb      	b.n	8012076 <__swbuf_r+0x36>
 80120de:	46c0      	nop			; (mov r8, r8)
 80120e0:	ffffdfff 	.word	0xffffdfff

080120e4 <_raise_r>:
 80120e4:	b570      	push	{r4, r5, r6, lr}
 80120e6:	0004      	movs	r4, r0
 80120e8:	000d      	movs	r5, r1
 80120ea:	291f      	cmp	r1, #31
 80120ec:	d904      	bls.n	80120f8 <_raise_r+0x14>
 80120ee:	2316      	movs	r3, #22
 80120f0:	6003      	str	r3, [r0, #0]
 80120f2:	2001      	movs	r0, #1
 80120f4:	4240      	negs	r0, r0
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	0003      	movs	r3, r0
 80120fa:	33fc      	adds	r3, #252	; 0xfc
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d004      	beq.n	801210c <_raise_r+0x28>
 8012102:	008a      	lsls	r2, r1, #2
 8012104:	189b      	adds	r3, r3, r2
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	2a00      	cmp	r2, #0
 801210a:	d108      	bne.n	801211e <_raise_r+0x3a>
 801210c:	0020      	movs	r0, r4
 801210e:	f000 f855 	bl	80121bc <_getpid_r>
 8012112:	002a      	movs	r2, r5
 8012114:	0001      	movs	r1, r0
 8012116:	0020      	movs	r0, r4
 8012118:	f000 f83e 	bl	8012198 <_kill_r>
 801211c:	e7eb      	b.n	80120f6 <_raise_r+0x12>
 801211e:	2000      	movs	r0, #0
 8012120:	2a01      	cmp	r2, #1
 8012122:	d0e8      	beq.n	80120f6 <_raise_r+0x12>
 8012124:	1c51      	adds	r1, r2, #1
 8012126:	d103      	bne.n	8012130 <_raise_r+0x4c>
 8012128:	2316      	movs	r3, #22
 801212a:	3001      	adds	r0, #1
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	e7e2      	b.n	80120f6 <_raise_r+0x12>
 8012130:	2400      	movs	r4, #0
 8012132:	0028      	movs	r0, r5
 8012134:	601c      	str	r4, [r3, #0]
 8012136:	4790      	blx	r2
 8012138:	0020      	movs	r0, r4
 801213a:	e7dc      	b.n	80120f6 <_raise_r+0x12>

0801213c <raise>:
 801213c:	b510      	push	{r4, lr}
 801213e:	4b03      	ldr	r3, [pc, #12]	; (801214c <raise+0x10>)
 8012140:	0001      	movs	r1, r0
 8012142:	6818      	ldr	r0, [r3, #0]
 8012144:	f7ff ffce 	bl	80120e4 <_raise_r>
 8012148:	bd10      	pop	{r4, pc}
 801214a:	46c0      	nop			; (mov r8, r8)
 801214c:	200006c8 	.word	0x200006c8

08012150 <_fstat_r>:
 8012150:	2300      	movs	r3, #0
 8012152:	b570      	push	{r4, r5, r6, lr}
 8012154:	4d06      	ldr	r5, [pc, #24]	; (8012170 <_fstat_r+0x20>)
 8012156:	0004      	movs	r4, r0
 8012158:	0008      	movs	r0, r1
 801215a:	0011      	movs	r1, r2
 801215c:	602b      	str	r3, [r5, #0]
 801215e:	f7f1 fbe2 	bl	8003926 <_fstat>
 8012162:	1c43      	adds	r3, r0, #1
 8012164:	d103      	bne.n	801216e <_fstat_r+0x1e>
 8012166:	682b      	ldr	r3, [r5, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d000      	beq.n	801216e <_fstat_r+0x1e>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd70      	pop	{r4, r5, r6, pc}
 8012170:	20000d6c 	.word	0x20000d6c

08012174 <_isatty_r>:
 8012174:	2300      	movs	r3, #0
 8012176:	b570      	push	{r4, r5, r6, lr}
 8012178:	4d06      	ldr	r5, [pc, #24]	; (8012194 <_isatty_r+0x20>)
 801217a:	0004      	movs	r4, r0
 801217c:	0008      	movs	r0, r1
 801217e:	602b      	str	r3, [r5, #0]
 8012180:	f7f1 fbdf 	bl	8003942 <_isatty>
 8012184:	1c43      	adds	r3, r0, #1
 8012186:	d103      	bne.n	8012190 <_isatty_r+0x1c>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d000      	beq.n	8012190 <_isatty_r+0x1c>
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	46c0      	nop			; (mov r8, r8)
 8012194:	20000d6c 	.word	0x20000d6c

08012198 <_kill_r>:
 8012198:	2300      	movs	r3, #0
 801219a:	b570      	push	{r4, r5, r6, lr}
 801219c:	4d06      	ldr	r5, [pc, #24]	; (80121b8 <_kill_r+0x20>)
 801219e:	0004      	movs	r4, r0
 80121a0:	0008      	movs	r0, r1
 80121a2:	0011      	movs	r1, r2
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	f7f1 fb5f 	bl	8003868 <_kill>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	d103      	bne.n	80121b6 <_kill_r+0x1e>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d000      	beq.n	80121b6 <_kill_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd70      	pop	{r4, r5, r6, pc}
 80121b8:	20000d6c 	.word	0x20000d6c

080121bc <_getpid_r>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	f7f1 fb4d 	bl	800385c <_getpid>
 80121c2:	bd10      	pop	{r4, pc}

080121c4 <round>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	004a      	lsls	r2, r1, #1
 80121c8:	000d      	movs	r5, r1
 80121ca:	4920      	ldr	r1, [pc, #128]	; (801224c <round+0x88>)
 80121cc:	0d52      	lsrs	r2, r2, #21
 80121ce:	1851      	adds	r1, r2, r1
 80121d0:	0006      	movs	r6, r0
 80121d2:	2913      	cmp	r1, #19
 80121d4:	dc18      	bgt.n	8012208 <round+0x44>
 80121d6:	2900      	cmp	r1, #0
 80121d8:	da09      	bge.n	80121ee <round+0x2a>
 80121da:	0feb      	lsrs	r3, r5, #31
 80121dc:	2200      	movs	r2, #0
 80121de:	07db      	lsls	r3, r3, #31
 80121e0:	3101      	adds	r1, #1
 80121e2:	d101      	bne.n	80121e8 <round+0x24>
 80121e4:	491a      	ldr	r1, [pc, #104]	; (8012250 <round+0x8c>)
 80121e6:	430b      	orrs	r3, r1
 80121e8:	0019      	movs	r1, r3
 80121ea:	0010      	movs	r0, r2
 80121ec:	e017      	b.n	801221e <round+0x5a>
 80121ee:	4c19      	ldr	r4, [pc, #100]	; (8012254 <round+0x90>)
 80121f0:	410c      	asrs	r4, r1
 80121f2:	0022      	movs	r2, r4
 80121f4:	402a      	ands	r2, r5
 80121f6:	4302      	orrs	r2, r0
 80121f8:	d013      	beq.n	8012222 <round+0x5e>
 80121fa:	2280      	movs	r2, #128	; 0x80
 80121fc:	0312      	lsls	r2, r2, #12
 80121fe:	410a      	asrs	r2, r1
 8012200:	1953      	adds	r3, r2, r5
 8012202:	43a3      	bics	r3, r4
 8012204:	2200      	movs	r2, #0
 8012206:	e7ef      	b.n	80121e8 <round+0x24>
 8012208:	2933      	cmp	r1, #51	; 0x33
 801220a:	dd0d      	ble.n	8012228 <round+0x64>
 801220c:	2380      	movs	r3, #128	; 0x80
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	4299      	cmp	r1, r3
 8012212:	d106      	bne.n	8012222 <round+0x5e>
 8012214:	0002      	movs	r2, r0
 8012216:	002b      	movs	r3, r5
 8012218:	0029      	movs	r1, r5
 801221a:	f7ee facd 	bl	80007b8 <__aeabi_dadd>
 801221e:	0006      	movs	r6, r0
 8012220:	000d      	movs	r5, r1
 8012222:	0030      	movs	r0, r6
 8012224:	0029      	movs	r1, r5
 8012226:	bd70      	pop	{r4, r5, r6, pc}
 8012228:	4c0b      	ldr	r4, [pc, #44]	; (8012258 <round+0x94>)
 801222a:	1912      	adds	r2, r2, r4
 801222c:	2401      	movs	r4, #1
 801222e:	4264      	negs	r4, r4
 8012230:	40d4      	lsrs	r4, r2
 8012232:	4220      	tst	r0, r4
 8012234:	d0f5      	beq.n	8012222 <round+0x5e>
 8012236:	2233      	movs	r2, #51	; 0x33
 8012238:	1a51      	subs	r1, r2, r1
 801223a:	3a32      	subs	r2, #50	; 0x32
 801223c:	408a      	lsls	r2, r1
 801223e:	1812      	adds	r2, r2, r0
 8012240:	4282      	cmp	r2, r0
 8012242:	4180      	sbcs	r0, r0
 8012244:	4240      	negs	r0, r0
 8012246:	182b      	adds	r3, r5, r0
 8012248:	43a2      	bics	r2, r4
 801224a:	e7cd      	b.n	80121e8 <round+0x24>
 801224c:	fffffc01 	.word	0xfffffc01
 8012250:	3ff00000 	.word	0x3ff00000
 8012254:	000fffff 	.word	0x000fffff
 8012258:	fffffbed 	.word	0xfffffbed

0801225c <_init>:
 801225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225e:	46c0      	nop			; (mov r8, r8)
 8012260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012262:	bc08      	pop	{r3}
 8012264:	469e      	mov	lr, r3
 8012266:	4770      	bx	lr

08012268 <_fini>:
 8012268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801226a:	46c0      	nop			; (mov r8, r8)
 801226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801226e:	bc08      	pop	{r3}
 8012270:	469e      	mov	lr, r3
 8012272:	4770      	bx	lr
