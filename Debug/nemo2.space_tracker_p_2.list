
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002448  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002544  08002544  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002544  08002544  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002544  08002544  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08002560  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08002560  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c405  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e2e  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab7  00000000  00000000  0002f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba1f  00000000  00000000  0002fb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f116  00000000  00000000  0004b55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b854b  00000000  00000000  0005a674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  00112bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00115f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080024ec 	.word	0x080024ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080024ec 	.word	0x080024ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa3c 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f808 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f93c 	bl	80004a4 <MX_GPIO_Init>
  MX_RTC_Init();
 800022c:	f000 f85a 	bl	80002e4 <MX_RTC_Init>
  MX_TIM6_Init();
 8000230:	f000 f8fc 	bl	800042c <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x18>
	...

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b095      	sub	sp, #84	; 0x54
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	2414      	movs	r4, #20
 8000240:	193b      	adds	r3, r7, r4
 8000242:	0018      	movs	r0, r3
 8000244:	233c      	movs	r3, #60	; 0x3c
 8000246:	001a      	movs	r2, r3
 8000248:	2100      	movs	r1, #0
 800024a:	f002 f8b9 	bl	80023c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	0018      	movs	r0, r3
 8000252:	2310      	movs	r3, #16
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 f8b2 	bl	80023c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f000 fba3 	bl	80009ac <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000266:	f000 fb93 	bl	8000990 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800026a:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <SystemClock_Config+0xa8>)
 800026c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <SystemClock_Config+0xa8>)
 8000270:	2118      	movs	r1, #24
 8000272:	438a      	bics	r2, r1
 8000274:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2206      	movs	r2, #6
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2201      	movs	r2, #1
 8000280:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2280      	movs	r2, #128	; 0x80
 8000286:	0052      	lsls	r2, r2, #1
 8000288:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2240      	movs	r2, #64	; 0x40
 8000294:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2200      	movs	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fbc4 	bl	8000a2c <HAL_RCC_OscConfig>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002a8:	f000 f912 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2207      	movs	r2, #7
 80002b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2100      	movs	r1, #0
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ff0f 	bl	80010ec <HAL_RCC_ClockConfig>
 80002ce:	1e03      	subs	r3, r0, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002d2:	f000 f8fd 	bl	80004d0 <Error_Handler>
  }
}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b015      	add	sp, #84	; 0x54
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	40021000 	.word	0x40021000

080002e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	; 0x40
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002ea:	232c      	movs	r3, #44	; 0x2c
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	0018      	movs	r0, r3
 80002f0:	2314      	movs	r3, #20
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f002 f863 	bl	80023c0 <memset>
  RTC_DateTypeDef sDate = {0};
 80002fa:	2328      	movs	r3, #40	; 0x28
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	2328      	movs	r3, #40	; 0x28
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 f858 	bl	80023c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000310:	4b44      	ldr	r3, [pc, #272]	; (8000424 <MX_RTC_Init+0x140>)
 8000312:	4a45      	ldr	r2, [pc, #276]	; (8000428 <MX_RTC_Init+0x144>)
 8000314:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000316:	4b43      	ldr	r3, [pc, #268]	; (8000424 <MX_RTC_Init+0x140>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800031c:	4b41      	ldr	r3, [pc, #260]	; (8000424 <MX_RTC_Init+0x140>)
 800031e:	227f      	movs	r2, #127	; 0x7f
 8000320:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000322:	4b40      	ldr	r3, [pc, #256]	; (8000424 <MX_RTC_Init+0x140>)
 8000324:	22ff      	movs	r2, #255	; 0xff
 8000326:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000328:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <MX_RTC_Init+0x140>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800032e:	4b3d      	ldr	r3, [pc, #244]	; (8000424 <MX_RTC_Init+0x140>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000334:	4b3b      	ldr	r3, [pc, #236]	; (8000424 <MX_RTC_Init+0x140>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800033a:	4b3a      	ldr	r3, [pc, #232]	; (8000424 <MX_RTC_Init+0x140>)
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	05d2      	lsls	r2, r2, #23
 8000340:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000342:	4b38      	ldr	r3, [pc, #224]	; (8000424 <MX_RTC_Init+0x140>)
 8000344:	2200      	movs	r2, #0
 8000346:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000348:	4b36      	ldr	r3, [pc, #216]	; (8000424 <MX_RTC_Init+0x140>)
 800034a:	0018      	movs	r0, r3
 800034c:	f001 fa94 	bl	8001878 <HAL_RTC_Init>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000354:	f000 f8bc 	bl	80004d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000358:	212c      	movs	r1, #44	; 0x2c
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800037e:	1879      	adds	r1, r7, r1
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_RTC_Init+0x140>)
 8000382:	2201      	movs	r2, #1
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fb19 	bl	80019bc <HAL_RTC_SetTime>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800038e:	f000 f89f 	bl	80004d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000392:	2128      	movs	r1, #40	; 0x28
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2206      	movs	r2, #6
 8000398:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2201      	movs	r2, #1
 800039e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2201      	movs	r2, #1
 80003a4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_RTC_Init+0x140>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fbaa 	bl	8001b0c <HAL_RTC_SetDate>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80003bc:	f000 f888 	bl	80004d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80003c0:	003b      	movs	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d8:	003b      	movs	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003de:	003b      	movs	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80003f6:	003b      	movs	r3, r7
 80003f8:	2220      	movs	r2, #32
 80003fa:	2101      	movs	r1, #1
 80003fc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80003fe:	003b      	movs	r3, r7
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000406:	0039      	movs	r1, r7
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_RTC_Init+0x140>)
 800040a:	2201      	movs	r2, #1
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fc0f 	bl	8001c30 <HAL_RTC_SetAlarm_IT>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000416:	f000 f85b 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b010      	add	sp, #64	; 0x40
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	2000002c 	.word	0x2000002c
 8000428:	40002800 	.word	0x40002800

0800042c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	230c      	movs	r3, #12
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f001 ffc0 	bl	80023c0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_TIM6_Init+0x6c>)
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <MX_TIM6_Init+0x70>)
 8000444:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_TIM6_Init+0x6c>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_TIM6_Init+0x6c>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_TIM6_Init+0x6c>)
 8000454:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <MX_TIM6_Init+0x74>)
 8000456:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_TIM6_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_TIM6_Init+0x6c>)
 8000460:	0018      	movs	r0, r3
 8000462:	f001 fe47 	bl	80020f4 <HAL_TIM_Base_Init>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800046a:	f000 f831 	bl	80004d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800047a:	1d3a      	adds	r2, r7, #4
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_TIM6_Init+0x6c>)
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f001 ff27 	bl	80022d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800048a:	f000 f821 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b004      	add	sp, #16
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	20000058 	.word	0x20000058
 800049c:	40001000 	.word	0x40001000
 80004a0:	0000ffff 	.word	0x0000ffff

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_GPIO_Init+0x28>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MX_GPIO_Init+0x28>)
 80004b0:	2104      	movs	r1, #4
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_GPIO_Init+0x28>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	2204      	movs	r2, #4
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <HAL_MspInit+0x4c>)
 80004e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <HAL_MspInit+0x4c>)
 80004e8:	2101      	movs	r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_MspInit+0x4c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_MspInit+0x4c>)
 80004fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_MspInit+0x4c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0549      	lsls	r1, r1, #21
 8000504:	430a      	orrs	r2, r1
 8000506:	63da      	str	r2, [r3, #60]	; 0x3c
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_MspInit+0x4c>)
 800050a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	055b      	lsls	r3, r3, #21
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000516:	23c0      	movs	r3, #192	; 0xc0
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f944 	bl	80007a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b097      	sub	sp, #92	; 0x5c
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	240c      	movs	r4, #12
 8000536:	193b      	adds	r3, r7, r4
 8000538:	0018      	movs	r0, r3
 800053a:	234c      	movs	r3, #76	; 0x4c
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f001 ff3e 	bl	80023c0 <memset>
  if(hrtc->Instance==RTC)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <HAL_RTC_MspInit+0x84>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d12c      	bne.n	80005a8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	0292      	lsls	r2, r2, #10
 8000554:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0052      	lsls	r2, r2, #1
 800055c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	f000 ff4d 	bl	8001400 <HAL_RCCEx_PeriphCLKConfig>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800056a:	f7ff ffb1 	bl	80004d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_RTC_MspInit+0x88>)
 8000570:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_RTC_MspInit+0x88>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0209      	lsls	r1, r1, #8
 8000578:	430a      	orrs	r2, r1
 800057a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_RTC_MspInit+0x88>)
 800057e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_RTC_MspInit+0x88>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	00c9      	lsls	r1, r1, #3
 8000586:	430a      	orrs	r2, r1
 8000588:	63da      	str	r2, [r3, #60]	; 0x3c
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_RTC_MspInit+0x88>)
 800058c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	4013      	ands	r3, r2
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2103      	movs	r1, #3
 800059c:	2002      	movs	r0, #2
 800059e:	f000 f9c5 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80005a2:	2002      	movs	r0, #2
 80005a4:	f000 f9d7 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b017      	add	sp, #92	; 0x5c
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40002800 	.word	0x40002800
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_TIM_Base_MspInit+0x34>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10b      	bne.n	80005e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_TIM_Base_MspInit+0x38>)
 80005cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_TIM_Base_MspInit+0x38>)
 80005d0:	2110      	movs	r1, #16
 80005d2:	430a      	orrs	r2, r1
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_TIM_Base_MspInit+0x38>)
 80005d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005da:	2210      	movs	r2, #16
 80005dc:	4013      	ands	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b004      	add	sp, #16
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40001000 	.word	0x40001000
 80005f0:	40021000 	.word	0x40021000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f8aa 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <RTC_TAMP_IRQHandler+0x14>)
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fc40 	bl	8001eb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	2000002c 	.word	0x2000002c

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f7ff fff6 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f001 feab 	bl	80023d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800067a:	f7ff fdcf 	bl	800021c <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800068c:	08002550 	.word	0x08002550
  ldr r2, =_sbss
 8000690:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000694:	20000240 	.word	0x20000240

08000698 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_COMP_IRQHandler>
	...

0800069c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_Init+0x3c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_Init+0x3c>)
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0049      	lsls	r1, r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f810 	bl	80006dc <HAL_InitTick>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d003      	beq.n	80006c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e001      	b.n	80006cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff ff08 	bl	80004dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <HAL_InitTick+0x88>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d02b      	beq.n	800074c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_InitTick+0x8c>)
 80006f6:	681c      	ldr	r4, [r3, #0]
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_InitTick+0x88>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	0019      	movs	r1, r3
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	0098      	lsls	r0, r3, #2
 8000702:	f7ff fcff 	bl	8000104 <__udivsi3>
 8000706:	0003      	movs	r3, r0
 8000708:	0019      	movs	r1, r3
 800070a:	0020      	movs	r0, r4
 800070c:	f7ff fcfa 	bl	8000104 <__udivsi3>
 8000710:	0003      	movs	r3, r0
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f92f 	bl	8000976 <HAL_SYSTICK_Config>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d112      	bne.n	8000742 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80a      	bhi.n	8000738 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8fe 	bl	800092c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_InitTick+0x90>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e00d      	b.n	8000754 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e008      	b.n	8000754 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e003      	b.n	8000754 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800074c:	230f      	movs	r3, #15
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000754:	230f      	movs	r3, #15
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b005      	add	sp, #20
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000008 	.word	0x20000008
 8000768:	20000000 	.word	0x20000000
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	18d2      	adds	r2, r2, r3
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000008 	.word	0x20000008
 8000790:	200000a4 	.word	0x200000a4

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	200000a4 	.word	0x200000a4

080007a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	0019      	movs	r1, r3
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40010000 	.word	0x40010000
 80007d0:	fffff9ff 	.word	0xfffff9ff

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b7f      	cmp	r3, #127	; 0x7f
 80007e6:	d809      	bhi.n	80007fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	231f      	movs	r3, #31
 80007f0:	401a      	ands	r2, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_EnableIRQ+0x30>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	4091      	lsls	r1, r2
 80007f8:	000a      	movs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	e000e100 	.word	0xe000e100

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b7f      	cmp	r3, #127	; 0x7f
 800081c:	d828      	bhi.n	8000870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081e:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <__NVIC_SetPriority+0xd4>)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b25b      	sxtb	r3, r3
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	33c0      	adds	r3, #192	; 0xc0
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	589b      	ldr	r3, [r3, r2]
 800082e:	1dfa      	adds	r2, r7, #7
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	0011      	movs	r1, r2
 8000834:	2203      	movs	r2, #3
 8000836:	400a      	ands	r2, r1
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	21ff      	movs	r1, #255	; 0xff
 800083c:	4091      	lsls	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	43d2      	mvns	r2, r2
 8000842:	401a      	ands	r2, r3
 8000844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	22ff      	movs	r2, #255	; 0xff
 800084c:	401a      	ands	r2, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	2303      	movs	r3, #3
 8000856:	4003      	ands	r3, r0
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	481f      	ldr	r0, [pc, #124]	; (80008dc <__NVIC_SetPriority+0xd4>)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	430a      	orrs	r2, r1
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800086e:	e031      	b.n	80008d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <__NVIC_SetPriority+0xd8>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0019      	movs	r1, r3
 8000878:	230f      	movs	r3, #15
 800087a:	400b      	ands	r3, r1
 800087c:	3b08      	subs	r3, #8
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	3306      	adds	r3, #6
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	3304      	adds	r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1dfa      	adds	r2, r7, #7
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	0011      	movs	r1, r2
 8000890:	2203      	movs	r2, #3
 8000892:	400a      	ands	r2, r1
 8000894:	00d2      	lsls	r2, r2, #3
 8000896:	21ff      	movs	r1, #255	; 0xff
 8000898:	4091      	lsls	r1, r2
 800089a:	000a      	movs	r2, r1
 800089c:	43d2      	mvns	r2, r2
 800089e:	401a      	ands	r2, r3
 80008a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	401a      	ands	r2, r3
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	0018      	movs	r0, r3
 80008b0:	2303      	movs	r3, #3
 80008b2:	4003      	ands	r3, r0
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <__NVIC_SetPriority+0xd8>)
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	001c      	movs	r4, r3
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	3b08      	subs	r3, #8
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	430a      	orrs	r2, r1
 80008ca:	3306      	adds	r3, #6
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	18c3      	adds	r3, r0, r3
 80008d0:	3304      	adds	r3, #4
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b003      	add	sp, #12
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	045b      	lsls	r3, r3, #17
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d301      	bcc.n	80008fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f8:	2301      	movs	r3, #1
 80008fa:	e010      	b.n	800091e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SysTick_Config+0x44>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	3a01      	subs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000904:	2301      	movs	r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	2103      	movs	r1, #3
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff ff7c 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x44>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	210f      	movs	r1, #15
 8000938:	187b      	adds	r3, r7, r1
 800093a:	1c02      	adds	r2, r0, #0
 800093c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	187b      	adds	r3, r7, r1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	0002      	movs	r2, r0
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ff33 	bl	80007d4 <__NVIC_EnableIRQ>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffaf 	bl	80008e4 <SysTick_Config>
 8000986:	0003      	movs	r3, r0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0049      	lsls	r1, r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40007000 	.word	0x40007000

080009ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	0019      	movs	r1, r3
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d11f      	bne.n	8000a10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	0013      	movs	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4912      	ldr	r1, [pc, #72]	; (8000a28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fb90 	bl	8000104 <__udivsi3>
 80009e4:	0003      	movs	r3, r0
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009ea:	e008      	b.n	80009fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e001      	b.n	80009fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e009      	b.n	8000a12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	401a      	ands	r2, r3
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d0ed      	beq.n	80009ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40007000 	.word	0x40007000
 8000a20:	fffff9ff 	.word	0xfffff9ff
 8000a24:	20000000 	.word	0x20000000
 8000a28:	000f4240 	.word	0x000f4240

08000a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f000 fb50 	bl	80010e0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4013      	ands	r3, r2
 8000a48:	d100      	bne.n	8000a4c <HAL_RCC_OscConfig+0x20>
 8000a4a:	e07c      	b.n	8000b46 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a4c:	4bc3      	ldr	r3, [pc, #780]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2238      	movs	r2, #56	; 0x38
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a56:	4bc1      	ldr	r3, [pc, #772]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	2b10      	cmp	r3, #16
 8000a64:	d102      	bne.n	8000a6c <HAL_RCC_OscConfig+0x40>
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d002      	beq.n	8000a72 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d10b      	bne.n	8000a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a72:	4bba      	ldr	r3, [pc, #744]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	029b      	lsls	r3, r3, #10
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	d062      	beq.n	8000b44 <HAL_RCC_OscConfig+0x118>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d15e      	bne.n	8000b44 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e32a      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	025b      	lsls	r3, r3, #9
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d107      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x7a>
 8000a96:	4bb1      	ldr	r3, [pc, #708]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4bb0      	ldr	r3, [pc, #704]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0249      	lsls	r1, r1, #9
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	e020      	b.n	8000ae8 <HAL_RCC_OscConfig+0xbc>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	02db      	lsls	r3, r3, #11
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d10e      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xa4>
 8000ab2:	4baa      	ldr	r3, [pc, #680]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4ba9      	ldr	r3, [pc, #676]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	02c9      	lsls	r1, r1, #11
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	4ba6      	ldr	r3, [pc, #664]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4ba5      	ldr	r3, [pc, #660]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0249      	lsls	r1, r1, #9
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e00b      	b.n	8000ae8 <HAL_RCC_OscConfig+0xbc>
 8000ad0:	4ba2      	ldr	r3, [pc, #648]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4ba1      	ldr	r3, [pc, #644]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ad6:	49a2      	ldr	r1, [pc, #648]	; (8000d60 <HAL_RCC_OscConfig+0x334>)
 8000ad8:	400a      	ands	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	4b9f      	ldr	r3, [pc, #636]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b9e      	ldr	r3, [pc, #632]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ae2:	49a0      	ldr	r1, [pc, #640]	; (8000d64 <HAL_RCC_OscConfig+0x338>)
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d014      	beq.n	8000b1a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000af0:	f7ff fe50 	bl	8000794 <HAL_GetTick>
 8000af4:	0003      	movs	r3, r0
 8000af6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000afa:	f7ff fe4b 	bl	8000794 <HAL_GetTick>
 8000afe:	0002      	movs	r2, r0
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b64      	cmp	r3, #100	; 0x64
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e2e9      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b0c:	4b93      	ldr	r3, [pc, #588]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	4013      	ands	r3, r2
 8000b16:	d0f0      	beq.n	8000afa <HAL_RCC_OscConfig+0xce>
 8000b18:	e015      	b.n	8000b46 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fe3b 	bl	8000794 <HAL_GetTick>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fe36 	bl	8000794 <HAL_GetTick>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b64      	cmp	r3, #100	; 0x64
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e2d4      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b36:	4b89      	ldr	r3, [pc, #548]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	029b      	lsls	r3, r3, #10
 8000b3e:	4013      	ands	r3, r2
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0xf8>
 8000b42:	e000      	b.n	8000b46 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d100      	bne.n	8000b52 <HAL_RCC_OscConfig+0x126>
 8000b50:	e099      	b.n	8000c86 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b52:	4b82      	ldr	r3, [pc, #520]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2238      	movs	r2, #56	; 0x38
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b5c:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	2203      	movs	r2, #3
 8000b62:	4013      	ands	r3, r2
 8000b64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	2b10      	cmp	r3, #16
 8000b6a:	d102      	bne.n	8000b72 <HAL_RCC_OscConfig+0x146>
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d002      	beq.n	8000b78 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d135      	bne.n	8000be4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b78:	4b78      	ldr	r3, [pc, #480]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	4013      	ands	r3, r2
 8000b82:	d005      	beq.n	8000b90 <HAL_RCC_OscConfig+0x164>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e2a7      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b90:	4b72      	ldr	r3, [pc, #456]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	0019      	movs	r1, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	021a      	lsls	r2, r3, #8
 8000ba0:	4b6e      	ldr	r3, [pc, #440]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d112      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000bac:	4b6b      	ldr	r3, [pc, #428]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a6e      	ldr	r2, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x340>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000bc0:	4b66      	ldr	r3, [pc, #408]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0adb      	lsrs	r3, r3, #11
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	4013      	ands	r3, r2
 8000bca:	4a69      	ldr	r2, [pc, #420]	; (8000d70 <HAL_RCC_OscConfig+0x344>)
 8000bcc:	40da      	lsrs	r2, r3
 8000bce:	4b69      	ldr	r3, [pc, #420]	; (8000d74 <HAL_RCC_OscConfig+0x348>)
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000bd2:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <HAL_RCC_OscConfig+0x34c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fd80 	bl	80006dc <HAL_InitTick>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d051      	beq.n	8000c84 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e27d      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d030      	beq.n	8000c4e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000bec:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a5e      	ldr	r2, [pc, #376]	; (8000d6c <HAL_RCC_OscConfig+0x340>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000c00:	4b56      	ldr	r3, [pc, #344]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	0049      	lsls	r1, r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fdc1 	bl	8000794 <HAL_GetTick>
 8000c12:	0003      	movs	r3, r0
 8000c14:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c18:	f7ff fdbc 	bl	8000794 <HAL_GetTick>
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e25a      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	d0f0      	beq.n	8000c18 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <HAL_RCC_OscConfig+0x33c>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	0019      	movs	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	021a      	lsls	r2, r3, #8
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	e01b      	b.n	8000c86 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c54:	4949      	ldr	r1, [pc, #292]	; (8000d7c <HAL_RCC_OscConfig+0x350>)
 8000c56:	400a      	ands	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fd9b 	bl	8000794 <HAL_GetTick>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fd96 	bl	8000794 <HAL_GetTick>
 8000c68:	0002      	movs	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e234      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x238>
 8000c82:	e000      	b.n	8000c86 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d047      	beq.n	8000d20 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2238      	movs	r2, #56	; 0x38
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b18      	cmp	r3, #24
 8000c9a:	d10a      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d03c      	beq.n	8000d20 <HAL_RCC_OscConfig+0x2f4>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d138      	bne.n	8000d20 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e216      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d019      	beq.n	8000cee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fd65 	bl	8000794 <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fd60 	bl	8000794 <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1fe      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d0f1      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x2a4>
 8000cec:	e018      	b.n	8000d20 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fd4b 	bl	8000794 <HAL_GetTick>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fd46 	bl	8000794 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e1e4      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d1f1      	bne.n	8000d04 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2204      	movs	r2, #4
 8000d26:	4013      	ands	r3, r2
 8000d28:	d100      	bne.n	8000d2c <HAL_RCC_OscConfig+0x300>
 8000d2a:	e0c7      	b.n	8000ebc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d2c:	231f      	movs	r3, #31
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2238      	movs	r2, #56	; 0x38
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d11f      	bne.n	8000d80 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_RCC_OscConfig+0x330>)
 8000d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d44:	2202      	movs	r2, #2
 8000d46:	4013      	ands	r3, r2
 8000d48:	d100      	bne.n	8000d4c <HAL_RCC_OscConfig+0x320>
 8000d4a:	e0b7      	b.n	8000ebc <HAL_RCC_OscConfig+0x490>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d000      	beq.n	8000d56 <HAL_RCC_OscConfig+0x32a>
 8000d54:	e0b2      	b.n	8000ebc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1c2      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	fffeffff 	.word	0xfffeffff
 8000d64:	fffbffff 	.word	0xfffbffff
 8000d68:	ffff80ff 	.word	0xffff80ff
 8000d6c:	ffffc7ff 	.word	0xffffc7ff
 8000d70:	00f42400 	.word	0x00f42400
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000d80:	4bb5      	ldr	r3, [pc, #724]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	055b      	lsls	r3, r3, #21
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_RCC_OscConfig+0x364>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <HAL_RCC_OscConfig+0x366>
 8000d90:	2300      	movs	r3, #0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d011      	beq.n	8000dba <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4bb0      	ldr	r3, [pc, #704]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d9a:	4baf      	ldr	r3, [pc, #700]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0549      	lsls	r1, r1, #21
 8000da0:	430a      	orrs	r2, r1
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000da4:	4bac      	ldr	r3, [pc, #688]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000db2:	231f      	movs	r3, #31
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dba:	4ba8      	ldr	r3, [pc, #672]	; (800105c <HAL_RCC_OscConfig+0x630>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d11a      	bne.n	8000dfc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dc6:	4ba5      	ldr	r3, [pc, #660]	; (800105c <HAL_RCC_OscConfig+0x630>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4ba4      	ldr	r3, [pc, #656]	; (800105c <HAL_RCC_OscConfig+0x630>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0049      	lsls	r1, r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fcde 	bl	8000794 <HAL_GetTick>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dde:	f7ff fcd9 	bl	8000794 <HAL_GetTick>
 8000de2:	0002      	movs	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e177      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000df0:	4b9a      	ldr	r3, [pc, #616]	; (800105c <HAL_RCC_OscConfig+0x630>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d0f0      	beq.n	8000dde <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x3e6>
 8000e04:	4b94      	ldr	r3, [pc, #592]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e08:	4b93      	ldr	r3, [pc, #588]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e10:	e01c      	b.n	8000e4c <HAL_RCC_OscConfig+0x420>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x408>
 8000e1a:	4b8f      	ldr	r3, [pc, #572]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e1e:	4b8e      	ldr	r3, [pc, #568]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e20:	2104      	movs	r1, #4
 8000e22:	430a      	orrs	r2, r1
 8000e24:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e26:	4b8c      	ldr	r3, [pc, #560]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e2a:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e32:	e00b      	b.n	8000e4c <HAL_RCC_OscConfig+0x420>
 8000e34:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e40:	4b85      	ldr	r3, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e44:	4b84      	ldr	r3, [pc, #528]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e46:	2104      	movs	r1, #4
 8000e48:	438a      	bics	r2, r1
 8000e4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d014      	beq.n	8000e7e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc9e 	bl	8000794 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e5c:	e009      	b.n	8000e72 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc99 	bl	8000794 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	4a7d      	ldr	r2, [pc, #500]	; (8001060 <HAL_RCC_OscConfig+0x634>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e136      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e72:	4b79      	ldr	r3, [pc, #484]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x432>
 8000e7c:	e013      	b.n	8000ea6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fc89 	bl	8000794 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e86:	e009      	b.n	8000e9c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc84 	bl	8000794 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a73      	ldr	r2, [pc, #460]	; (8001060 <HAL_RCC_OscConfig+0x634>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e121      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d105      	bne.n	8000ebc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000eb0:	4b69      	ldr	r3, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb4:	4b68      	ldr	r3, [pc, #416]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000eb6:	496b      	ldr	r1, [pc, #428]	; (8001064 <HAL_RCC_OscConfig+0x638>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d039      	beq.n	8000f3a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01b      	beq.n	8000f06 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ece:	4b62      	ldr	r3, [pc, #392]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	03c9      	lsls	r1, r1, #15
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc5a 	bl	8000794 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ee6:	f7ff fc55 	bl	8000794 <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e0f3      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000ef8:	4b57      	ldr	r3, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	4013      	ands	r3, r2
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x4ba>
 8000f04:	e019      	b.n	8000f3a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f06:	4b54      	ldr	r3, [pc, #336]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b53      	ldr	r3, [pc, #332]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f0c:	4956      	ldr	r1, [pc, #344]	; (8001068 <HAL_RCC_OscConfig+0x63c>)
 8000f0e:	400a      	ands	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f12:	f7ff fc3f 	bl	8000794 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f1c:	f7ff fc3a 	bl	8000794 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e0d8      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4013      	ands	r3, r2
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d100      	bne.n	8000f44 <HAL_RCC_OscConfig+0x518>
 8000f42:	e0cc      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2238      	movs	r2, #56	; 0x38
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x526>
 8000f50:	e07b      	b.n	800104a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d156      	bne.n	8001008 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f60:	4942      	ldr	r1, [pc, #264]	; (800106c <HAL_RCC_OscConfig+0x640>)
 8000f62:	400a      	ands	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f66:	f7ff fc15 	bl	8000794 <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff fc10 	bl	8000794 <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e0ae      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	049b      	lsls	r3, r3, #18
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a37      	ldr	r2, [pc, #220]	; (8001070 <HAL_RCC_OscConfig+0x644>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0449      	lsls	r1, r1, #17
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0549      	lsls	r1, r1, #21
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fbd9 	bl	8000794 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fbd4 	bl	8000794 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e072      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	049b      	lsls	r3, r3, #18
 8001002:	4013      	ands	r3, r2
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x5bc>
 8001006:	e06a      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 800100e:	4917      	ldr	r1, [pc, #92]	; (800106c <HAL_RCC_OscConfig+0x640>)
 8001010:	400a      	ands	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fbbe 	bl	8000794 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fbb9 	bl	8000794 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e057      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	049b      	lsls	r3, r3, #18
 8001038:	4013      	ands	r3, r2
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_RCC_OscConfig+0x62c>)
 8001042:	490c      	ldr	r1, [pc, #48]	; (8001074 <HAL_RCC_OscConfig+0x648>)
 8001044:	400a      	ands	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	e049      	b.n	80010de <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d112      	bne.n	8001078 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e044      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	40007000 	.word	0x40007000
 8001060:	00001388 	.word	0x00001388
 8001064:	efffffff 	.word	0xefffffff
 8001068:	ffbfffff 	.word	0xffbfffff
 800106c:	feffffff 	.word	0xfeffffff
 8001070:	11c1808c 	.word	0x11c1808c
 8001074:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_RCC_OscConfig+0x6bc>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2203      	movs	r2, #3
 8001082:	401a      	ands	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	429a      	cmp	r2, r3
 800108a:	d126      	bne.n	80010da <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2270      	movs	r2, #112	; 0x70
 8001090:	401a      	ands	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001096:	429a      	cmp	r2, r3
 8001098:	d11f      	bne.n	80010da <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	23fe      	movs	r3, #254	; 0xfe
 800109e:	01db      	lsls	r3, r3, #7
 80010a0:	401a      	ands	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d116      	bne.n	80010da <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	23f8      	movs	r3, #248	; 0xf8
 80010b0:	039b      	lsls	r3, r3, #14
 80010b2:	401a      	ands	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d10e      	bne.n	80010da <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	23e0      	movs	r3, #224	; 0xe0
 80010c0:	051b      	lsls	r3, r3, #20
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	0f5b      	lsrs	r3, r3, #29
 80010d0:	075a      	lsls	r2, r3, #29
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b008      	add	sp, #32
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0e9      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001100:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2207      	movs	r2, #7
 8001106:	4013      	ands	r3, r2
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d91e      	bls.n	800114c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2207      	movs	r2, #7
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	4b70      	ldr	r3, [pc, #448]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001120:	f7ff fb38 	bl	8000794 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001128:	e009      	b.n	800113e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112a:	f7ff fb33 	bl	8000794 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4a6a      	ldr	r2, [pc, #424]	; (80012e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e0ca      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d1ee      	bne.n	800112a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d015      	beq.n	8001182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2204      	movs	r2, #4
 800115c:	4013      	ands	r3, r2
 800115e:	d006      	beq.n	800116e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001160:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001166:	21e0      	movs	r1, #224	; 0xe0
 8001168:	01c9      	lsls	r1, r1, #7
 800116a:	430a      	orrs	r2, r1
 800116c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4a5d      	ldr	r2, [pc, #372]	; (80012e8 <HAL_RCC_ClockConfig+0x1fc>)
 8001174:	4013      	ands	r3, r2
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 800117e:	430a      	orrs	r2, r1
 8001180:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	d057      	beq.n	800123c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	d12b      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e097      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d107      	bne.n	80011bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	049b      	lsls	r3, r3, #18
 80011b4:	4013      	ands	r3, r2
 80011b6:	d11f      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e08b      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d107      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	d113      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e07f      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d106      	bne.n	80011ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011dc:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e074      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80011ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e06d      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2207      	movs	r2, #7
 80011fe:	4393      	bics	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001208:	430a      	orrs	r2, r1
 800120a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800120c:	f7ff fac2 	bl	8000794 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001214:	e009      	b.n	800122a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001216:	f7ff fabd 	bl	8000794 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e054      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2238      	movs	r2, #56	; 0x38
 8001230:	401a      	ands	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	429a      	cmp	r2, r3
 800123a:	d1ec      	bne.n	8001216 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2207      	movs	r2, #7
 8001242:	4013      	ands	r3, r2
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d21e      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2207      	movs	r2, #7
 8001250:	4393      	bics	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800125c:	f7ff fa9a 	bl	8000794 <HAL_GetTick>
 8001260:	0003      	movs	r3, r0
 8001262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001264:	e009      	b.n	800127a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001266:	f7ff fa95 	bl	8000794 <HAL_GetTick>
 800126a:	0002      	movs	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_RCC_ClockConfig+0x1f4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e02c      	b.n	80012d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_RCC_ClockConfig+0x1f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2207      	movs	r2, #7
 8001280:	4013      	ands	r3, r2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d1ee      	bne.n	8001266 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2204      	movs	r2, #4
 800128e:	4013      	ands	r3, r2
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <HAL_RCC_ClockConfig+0x200>)
 8001298:	4013      	ands	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80012a2:	430a      	orrs	r2, r1
 80012a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80012a6:	f000 f829 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 80012aa:	0001      	movs	r1, r0
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_RCC_ClockConfig+0x1f8>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	220f      	movs	r2, #15
 80012b4:	401a      	ands	r2, r3
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_RCC_ClockConfig+0x204>)
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	58d3      	ldr	r3, [r2, r3]
 80012bc:	221f      	movs	r2, #31
 80012be:	4013      	ands	r3, r2
 80012c0:	000a      	movs	r2, r1
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x208>)
 80012c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_ClockConfig+0x20c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fa05 	bl	80006dc <HAL_InitTick>
 80012d2:	0003      	movs	r3, r0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b004      	add	sp, #16
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40022000 	.word	0x40022000
 80012e0:	00001388 	.word	0x00001388
 80012e4:	40021000 	.word	0x40021000
 80012e8:	fffff0ff 	.word	0xfffff0ff
 80012ec:	ffff8fff 	.word	0xffff8fff
 80012f0:	08002504 	.word	0x08002504
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2238      	movs	r2, #56	; 0x38
 8001308:	4013      	ands	r3, r2
 800130a:	d10f      	bne.n	800132c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0adb      	lsrs	r3, r3, #11
 8001312:	2207      	movs	r2, #7
 8001314:	4013      	ands	r3, r2
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
 800131a:	0013      	movs	r3, r2
 800131c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	4835      	ldr	r0, [pc, #212]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001322:	f7fe feef 	bl	8000104 <__udivsi3>
 8001326:	0003      	movs	r3, r0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e05d      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2238      	movs	r2, #56	; 0x38
 8001332:	4013      	ands	r3, r2
 8001334:	2b08      	cmp	r3, #8
 8001336:	d102      	bne.n	800133e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_RCC_GetSysClockFreq+0x100>)
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e054      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2238      	movs	r2, #56	; 0x38
 8001344:	4013      	ands	r3, r2
 8001346:	2b10      	cmp	r3, #16
 8001348:	d138      	bne.n	80013bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2203      	movs	r2, #3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	2207      	movs	r2, #7
 800135c:	4013      	ands	r3, r2
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d10d      	bne.n	8001384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	4824      	ldr	r0, [pc, #144]	; (80013fc <HAL_RCC_GetSysClockFreq+0x100>)
 800136c:	f7fe feca 	bl	8000104 <__udivsi3>
 8001370:	0003      	movs	r3, r0
 8001372:	0019      	movs	r1, r3
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	227f      	movs	r2, #127	; 0x7f
 800137c:	4013      	ands	r3, r2
 800137e:	434b      	muls	r3, r1
 8001380:	617b      	str	r3, [r7, #20]
        break;
 8001382:	e00d      	b.n	80013a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	481c      	ldr	r0, [pc, #112]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001388:	f7fe febc 	bl	8000104 <__udivsi3>
 800138c:	0003      	movs	r3, r0
 800138e:	0019      	movs	r1, r3
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	227f      	movs	r2, #127	; 0x7f
 8001398:	4013      	ands	r3, r2
 800139a:	434b      	muls	r3, r1
 800139c:	617b      	str	r3, [r7, #20]
        break;
 800139e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0f5b      	lsrs	r3, r3, #29
 80013a6:	2207      	movs	r2, #7
 80013a8:	4013      	ands	r3, r2
 80013aa:	3301      	adds	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7fe fea7 	bl	8000104 <__udivsi3>
 80013b6:	0003      	movs	r3, r0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	e015      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2238      	movs	r2, #56	; 0x38
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b20      	cmp	r3, #32
 80013c6:	d103      	bne.n	80013d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2238      	movs	r2, #56	; 0x38
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b18      	cmp	r3, #24
 80013da:	d103      	bne.n	80013e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80013dc:	23fa      	movs	r3, #250	; 0xfa
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e001      	b.n	80013e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80013e8:	693b      	ldr	r3, [r7, #16]
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b006      	add	sp, #24
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	00f42400 	.word	0x00f42400
 80013fc:	007a1200 	.word	0x007a1200

08001400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001408:	2313      	movs	r3, #19
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001410:	2312      	movs	r3, #18
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d100      	bne.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001424:	e0ad      	b.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2011      	movs	r0, #17
 8001428:	183b      	adds	r3, r7, r0
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	055b      	lsls	r3, r3, #21
 8001436:	4013      	ands	r3, r2
 8001438:	d110      	bne.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800143c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	0549      	lsls	r1, r1, #21
 8001444:	430a      	orrs	r2, r1
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800144a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	183b      	adds	r3, r7, r0
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145c:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0049      	lsls	r1, r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800146a:	f7ff f993 	bl	8000794 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001472:	e00b      	b.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001474:	f7ff f98e 	bl	8000794 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d904      	bls.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001482:	2313      	movs	r3, #19
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2203      	movs	r2, #3
 8001488:	701a      	strb	r2, [r3, #0]
        break;
 800148a:	e005      	b.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4013      	ands	r3, r2
 8001496:	d0ed      	beq.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001498:	2313      	movs	r3, #19
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d15e      	bne.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d019      	beq.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d014      	beq.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0249      	lsls	r1, r1, #9
 80014d2:	430a      	orrs	r2, r1
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014dc:	491e      	ldr	r1, [pc, #120]	; (8001558 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80014de:	400a      	ands	r2, r1
 80014e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d016      	beq.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff f950 	bl	8000794 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f8:	e00c      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff f94b 	bl	8000794 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d904      	bls.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800150a:	2313      	movs	r3, #19
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2203      	movs	r2, #3
 8001510:	701a      	strb	r2, [r3, #0]
            break;
 8001512:	e004      	b.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d0ed      	beq.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800151e:	2313      	movs	r3, #19
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001538:	430a      	orrs	r2, r1
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c
 800153c:	e016      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800153e:	2312      	movs	r3, #18
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	2213      	movs	r2, #19
 8001544:	18ba      	adds	r2, r7, r2
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e00f      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	fffffcff 	.word	0xfffffcff
 8001558:	fffeffff 	.word	0xfffeffff
 800155c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001560:	2312      	movs	r3, #18
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2213      	movs	r2, #19
 8001566:	18ba      	adds	r2, r7, r2
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800156c:	2311      	movs	r3, #17
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4bb6      	ldr	r3, [pc, #728]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157a:	4bb5      	ldr	r3, [pc, #724]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800157c:	49b5      	ldr	r1, [pc, #724]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800157e:	400a      	ands	r2, r1
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d009      	beq.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800158c:	4bb0      	ldr	r3, [pc, #704]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	2203      	movs	r2, #3
 8001592:	4393      	bics	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4bad      	ldr	r3, [pc, #692]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800159c:	430a      	orrs	r2, r1
 800159e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015aa:	4ba9      	ldr	r3, [pc, #676]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	220c      	movs	r2, #12
 80015b0:	4393      	bics	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	4ba5      	ldr	r3, [pc, #660]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015c8:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	2230      	movs	r2, #48	; 0x30
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	4b9e      	ldr	r3, [pc, #632]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2210      	movs	r2, #16
 80015e2:	4013      	ands	r3, r2
 80015e4:	d009      	beq.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80015e6:	4b9a      	ldr	r3, [pc, #616]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	4a9b      	ldr	r2, [pc, #620]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	4b96      	ldr	r3, [pc, #600]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	4013      	ands	r3, r2
 8001604:	d009      	beq.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001606:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	4a94      	ldr	r2, [pc, #592]	; (800185c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800160c:	4013      	ands	r3, r2
 800160e:	0019      	movs	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001616:	430a      	orrs	r2, r1
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d009      	beq.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001626:	4b8a      	ldr	r3, [pc, #552]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	4a8d      	ldr	r2, [pc, #564]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800162c:	4013      	ands	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001634:	4b86      	ldr	r3, [pc, #536]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001636:	430a      	orrs	r2, r1
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4013      	ands	r3, r2
 8001644:	d009      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	4a86      	ldr	r2, [pc, #536]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001656:	430a      	orrs	r2, r1
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2220      	movs	r2, #32
 8001660:	4013      	ands	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001674:	430a      	orrs	r2, r1
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	4013      	ands	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001682:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	4a79      	ldr	r2, [pc, #484]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001688:	4013      	ands	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001692:	430a      	orrs	r2, r1
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	01db      	lsls	r3, r3, #7
 800169e:	4013      	ands	r3, r2
 80016a0:	d015      	beq.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016a2:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	0899      	lsrs	r1, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80016c0:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4b62      	ldr	r3, [pc, #392]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0249      	lsls	r1, r1, #9
 80016ca:	430a      	orrs	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	031b      	lsls	r3, r3, #12
 80016d6:	4013      	ands	r3, r2
 80016d8:	d009      	beq.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	039b      	lsls	r3, r3, #14
 80016f6:	4013      	ands	r3, r2
 80016f8:	d016      	beq.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80016fa:	4b55      	ldr	r3, [pc, #340]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	4a5c      	ldr	r2, [pc, #368]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001700:	4013      	ands	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800170a:	430a      	orrs	r2, r1
 800170c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	03db      	lsls	r3, r3, #15
 8001716:	429a      	cmp	r2, r3
 8001718:	d106      	bne.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0449      	lsls	r1, r1, #17
 8001724:	430a      	orrs	r2, r1
 8001726:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	03db      	lsls	r3, r3, #15
 8001730:	4013      	ands	r3, r2
 8001732:	d016      	beq.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001744:	430a      	orrs	r2, r1
 8001746:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	045b      	lsls	r3, r3, #17
 8001750:	429a      	cmp	r2, r3
 8001752:	d106      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0449      	lsls	r1, r1, #17
 800175e:	430a      	orrs	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d014      	beq.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	2203      	movs	r2, #3
 8001774:	4393      	bics	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800177e:	430a      	orrs	r2, r1
 8001780:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d106      	bne.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0249      	lsls	r1, r1, #9
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	4013      	ands	r3, r2
 80017a2:	d014      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	220c      	movs	r2, #12
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d106      	bne.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0249      	lsls	r1, r1, #9
 80017ca:	430a      	orrs	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	045b      	lsls	r3, r3, #17
 80017d6:	4013      	ands	r3, r2
 80017d8:	d016      	beq.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d106      	bne.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0449      	lsls	r1, r1, #17
 8001804:	430a      	orrs	r2, r1
 8001806:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	049b      	lsls	r3, r3, #18
 8001810:	4013      	ands	r3, r2
 8001812:	d016      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	4a10      	ldr	r2, [pc, #64]	; (800185c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001824:	430a      	orrs	r2, r1
 8001826:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0449      	lsls	r1, r1, #17
 800183e:	430a      	orrs	r2, r1
 8001840:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001842:	2312      	movs	r3, #18
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	efffffff 	.word	0xefffffff
 8001858:	fffff3ff 	.word	0xfffff3ff
 800185c:	fffffcff 	.word	0xfffffcff
 8001860:	fff3ffff 	.word	0xfff3ffff
 8001864:	ffcfffff 	.word	0xffcfffff
 8001868:	ffffcfff 	.word	0xffffcfff
 800186c:	ffff3fff 	.word	0xffff3fff
 8001870:	ffbfffff 	.word	0xffbfffff
 8001874:	feffffff 	.word	0xfeffffff

08001878 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001880:	230f      	movs	r3, #15
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d100      	bne.n	8001890 <HAL_RTC_Init+0x18>
 800188e:	e08c      	b.n	80019aa <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2229      	movs	r2, #41	; 0x29
 8001894:	5c9b      	ldrb	r3, [r3, r2]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2228      	movs	r2, #40	; 0x28
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2288      	movs	r2, #136	; 0x88
 80018a8:	0212      	lsls	r2, r2, #8
 80018aa:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7fe fe3c 	bl	800052c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2229      	movs	r2, #41	; 0x29
 80018b8:	2102      	movs	r1, #2
 80018ba:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2210      	movs	r2, #16
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d062      	beq.n	8001990 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	22ca      	movs	r2, #202	; 0xca
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2253      	movs	r2, #83	; 0x53
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80018da:	250f      	movs	r5, #15
 80018dc:	197c      	adds	r4, r7, r5
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fb51 	bl	8001f88 <RTC_EnterInitMode>
 80018e6:	0003      	movs	r3, r0
 80018e8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80018ea:	0028      	movs	r0, r5
 80018ec:	183b      	adds	r3, r7, r0
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d12c      	bne.n	800194e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	492e      	ldr	r1, [pc, #184]	; (80019b8 <HAL_RTC_Init+0x140>)
 8001900:	400a      	ands	r2, r1
 8001902:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6999      	ldr	r1, [r3, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6912      	ldr	r2, [r2, #16]
 800192a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001940:	183c      	adds	r4, r7, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 fb61 	bl	800200c <RTC_ExitInitMode>
 800194a:	0003      	movs	r3, r0
 800194c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d116      	bne.n	8001986 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	00d2      	lsls	r2, r2, #3
 8001964:	08d2      	lsrs	r2, r2, #3
 8001966:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6999      	ldr	r1, [r3, #24]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
 800198e:	e003      	b.n	8001998 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001990:	230f      	movs	r3, #15
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001998:	230f      	movs	r3, #15
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2229      	movs	r2, #41	; 0x29
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80019aa:	230f      	movs	r3, #15
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	fb8fffbf 	.word	0xfb8fffbf

080019bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2228      	movs	r2, #40	; 0x28
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_RTC_SetTime+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e092      	b.n	8001afc <HAL_RTC_SetTime+0x140>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2228      	movs	r2, #40	; 0x28
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2229      	movs	r2, #41	; 0x29
 80019e2:	2102      	movs	r1, #2
 80019e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	22ca      	movs	r2, #202	; 0xca
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2253      	movs	r2, #83	; 0x53
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019f6:	2513      	movs	r5, #19
 80019f8:	197c      	adds	r4, r7, r5
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 fac3 	bl	8001f88 <RTC_EnterInitMode>
 8001a02:	0003      	movs	r3, r0
 8001a04:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d162      	bne.n	8001ad4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d125      	bne.n	8001a60 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2200      	movs	r2, #0
 8001a24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fb32 	bl	8002094 <RTC_ByteToBcd2>
 8001a30:	0003      	movs	r3, r0
 8001a32:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fb2b 	bl	8002094 <RTC_ByteToBcd2>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a42:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 fb23 	bl	8002094 <RTC_ByteToBcd2>
 8001a4e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a50:	0022      	movs	r2, r4
 8001a52:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e017      	b.n	8001a90 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a7e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a84:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	78db      	ldrb	r3, [r3, #3]
 8001a8a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	491b      	ldr	r1, [pc, #108]	; (8001b04 <HAL_RTC_SetTime+0x148>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4918      	ldr	r1, [pc, #96]	; (8001b08 <HAL_RTC_SetTime+0x14c>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6999      	ldr	r1, [r3, #24]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ac4:	2313      	movs	r3, #19
 8001ac6:	18fc      	adds	r4, r7, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fa9e 	bl	800200c <RTC_ExitInitMode>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	22ff      	movs	r2, #255	; 0xff
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8001adc:	2313      	movs	r3, #19
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2229      	movs	r2, #41	; 0x29
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2228      	movs	r2, #40	; 0x28
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

  return status;
 8001af6:	2313      	movs	r3, #19
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b006      	add	sp, #24
 8001b02:	bdb0      	pop	{r4, r5, r7, pc}
 8001b04:	007f7f7f 	.word	0x007f7f7f
 8001b08:	fffbffff 	.word	0xfffbffff

08001b0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2228      	movs	r2, #40	; 0x28
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RTC_SetDate+0x1a>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e07e      	b.n	8001c24 <HAL_RTC_SetDate+0x118>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2228      	movs	r2, #40	; 0x28
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2229      	movs	r2, #41	; 0x29
 8001b32:	2102      	movs	r1, #2
 8001b34:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10e      	bne.n	8001b5a <HAL_RTC_SetDate+0x4e>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	001a      	movs	r2, r3
 8001b42:	2310      	movs	r3, #16
 8001b44:	4013      	ands	r3, r2
 8001b46:	d008      	beq.n	8001b5a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	785b      	ldrb	r3, [r3, #1]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	4393      	bics	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	330a      	adds	r3, #10
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11c      	bne.n	8001b9a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 fa95 	bl	8002094 <RTC_ByteToBcd2>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fa8e 	bl	8002094 <RTC_ByteToBcd2>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b7c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	789b      	ldrb	r3, [r3, #2]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 fa86 	bl	8002094 <RTC_ByteToBcd2>
 8001b88:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b8a:	0022      	movs	r2, r4
 8001b8c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e00e      	b.n	8001bb8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001ba6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001bac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	22ca      	movs	r2, #202	; 0xca
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2253      	movs	r2, #83	; 0x53
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001bc8:	2513      	movs	r5, #19
 8001bca:	197c      	adds	r4, r7, r5
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 f9da 	bl	8001f88 <RTC_EnterInitMode>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8001bd8:	0028      	movs	r0, r5
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4910      	ldr	r1, [pc, #64]	; (8001c2c <HAL_RTC_SetDate+0x120>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001bee:	183c      	adds	r4, r7, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fa0a 	bl	800200c <RTC_ExitInitMode>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8001c04:	2313      	movs	r3, #19
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2229      	movs	r2, #41	; 0x29
 8001c12:	2101      	movs	r1, #1
 8001c14:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2228      	movs	r2, #40	; 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]

  return status;
 8001c1e:	2313      	movs	r3, #19
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	781b      	ldrb	r3, [r3, #0]
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b006      	add	sp, #24
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	00ffff3f 	.word	0x00ffff3f

08001c30 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2228      	movs	r2, #40	; 0x28
 8001c40:	5c9b      	ldrb	r3, [r3, r2]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_RTC_SetAlarm_IT+0x1a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e127      	b.n	8001e9a <HAL_RTC_SetAlarm_IT+0x26a>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2228      	movs	r2, #40	; 0x28
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2229      	movs	r2, #41	; 0x29
 8001c56:	2102      	movs	r1, #2
 8001c58:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d136      	bne.n	8001cce <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d102      	bne.n	8001c72 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fa0c 	bl	8002094 <RTC_ByteToBcd2>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 fa05 	bl	8002094 <RTC_ByteToBcd2>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001c8e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f9fd 	bl	8002094 <RTC_ByteToBcd2>
 8001c9a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001c9c:	0022      	movs	r2, r4
 8001c9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2220      	movs	r2, #32
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 f9ef 	bl	8002094 <RTC_ByteToBcd2>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001cba:	0022      	movs	r2, r4
 8001cbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001cc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	e022      	b.n	8001d14 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001cec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001cf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001cfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2120      	movs	r1, #32
 8001d00:	5c5b      	ldrb	r3, [r3, r1]
 8001d02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001d0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	22ca      	movs	r2, #202	; 0xca
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2253      	movs	r2, #83	; 0x53
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d14c      	bne.n	8001dd6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4957      	ldr	r1, [pc, #348]	; (8001ea4 <HAL_RTC_SetAlarm_IT+0x274>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8001d5c:	f7fe fd1a 	bl	8000794 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001d64:	e016      	b.n	8001d94 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d66:	f7fe fd15 	bl	8000794 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	23fa      	movs	r3, #250	; 0xfa
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d90d      	bls.n	8001d94 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	22ff      	movs	r2, #255	; 0xff
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2229      	movs	r2, #41	; 0x29
 8001d84:	2103      	movs	r1, #3
 8001d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2228      	movs	r2, #40	; 0x28
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e082      	b.n	8001e9a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0e2      	beq.n	8001d66 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0049      	lsls	r1, r1, #1
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0149      	lsls	r1, r1, #5
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	619a      	str	r2, [r3, #24]
 8001dd4:	e04b      	b.n	8001e6e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4931      	ldr	r1, [pc, #196]	; (8001ea8 <HAL_RTC_SetAlarm_IT+0x278>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2102      	movs	r1, #2
 8001df2:	430a      	orrs	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8001df6:	f7fe fccd 	bl	8000794 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001dfe:	e016      	b.n	8001e2e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e00:	f7fe fcc8 	bl	8000794 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	23fa      	movs	r3, #250	; 0xfa
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90d      	bls.n	8001e2e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2229      	movs	r2, #41	; 0x29
 8001e1e:	2103      	movs	r1, #3
 8001e20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2228      	movs	r2, #40	; 0x28
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e035      	b.n	8001e9a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d0e2      	beq.n	8001e00 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0089      	lsls	r1, r1, #2
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0189      	lsls	r1, r1, #6
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_RTC_SetAlarm_IT+0x27c>)
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	58d3      	ldr	r3, [r2, r3]
 8001e74:	490d      	ldr	r1, [pc, #52]	; (8001eac <HAL_RTC_SetAlarm_IT+0x27c>)
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0312      	lsls	r2, r2, #12
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2229      	movs	r2, #41	; 0x29
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2228      	movs	r2, #40	; 0x28
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b009      	add	sp, #36	; 0x24
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	fffffeff 	.word	0xfffffeff
 8001ea8:	fffffdff 	.word	0xfffffdff
 8001eac:	40021800 	.word	0x40021800

08001eb0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	015b      	lsls	r3, r3, #5
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d011      	beq.n	8001eea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f821 	bl	8001f2c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d011      	beq.n	8001f1c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2102      	movs	r1, #2
 8001f10:	430a      	orrs	r2, r1
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f8e4 	bl	80020e4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2229      	movs	r2, #41	; 0x29
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_RTC_WaitForSynchro+0x48>)
 8001f4a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001f4c:	f7fe fc22 	bl	8000794 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001f54:	e00a      	b.n	8001f6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001f56:	f7fe fc1d 	bl	8000794 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	23fa      	movs	r3, #250	; 0xfa
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d901      	bls.n	8001f6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e006      	b.n	8001f7a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d0ee      	beq.n	8001f56 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	0001005f 	.word	0x0001005f

08001f88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8001f90:	230f      	movs	r3, #15
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d12c      	bne.n	8001ffe <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001fb4:	f7fe fbee 	bl	8000794 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001fbc:	e014      	b.n	8001fe8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001fbe:	f7fe fbe9 	bl	8000794 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1ad2      	subs	r2, r2, r3
 8001fc8:	200f      	movs	r0, #15
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	1839      	adds	r1, r7, r0
 8001fce:	7809      	ldrb	r1, [r1, #0]
 8001fd0:	7019      	strb	r1, [r3, #0]
 8001fd2:	23fa      	movs	r3, #250	; 0xfa
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d906      	bls.n	8001fe8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8001fda:	183b      	adds	r3, r7, r0
 8001fdc:	2203      	movs	r2, #3
 8001fde:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2229      	movs	r2, #41	; 0x29
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d104      	bne.n	8001ffe <RTC_EnterInitMode+0x76>
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d1df      	bne.n	8001fbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001ffe:	230f      	movs	r3, #15
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	781b      	ldrb	r3, [r3, #0]
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b004      	add	sp, #16
 800200a:	bd80      	pop	{r7, pc}

0800200c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002014:	240f      	movs	r4, #15
 8002016:	193b      	adds	r3, r7, r4
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <RTC_ExitInitMode+0x84>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <RTC_ExitInitMode+0x84>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	438a      	bics	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <RTC_ExitInitMode+0x84>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2220      	movs	r2, #32
 800202e:	4013      	ands	r3, r2
 8002030:	d10d      	bne.n	800204e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff ff81 	bl	8001f3c <HAL_RTC_WaitForSynchro>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d021      	beq.n	8002082 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2229      	movs	r2, #41	; 0x29
 8002042:	2103      	movs	r1, #3
 8002044:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002046:	193b      	adds	r3, r7, r4
 8002048:	2203      	movs	r2, #3
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e019      	b.n	8002082 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <RTC_ExitInitMode+0x84>)
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <RTC_ExitInitMode+0x84>)
 8002054:	2120      	movs	r1, #32
 8002056:	438a      	bics	r2, r1
 8002058:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff ff6d 	bl	8001f3c <HAL_RTC_WaitForSynchro>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d007      	beq.n	8002076 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2229      	movs	r2, #41	; 0x29
 800206a:	2103      	movs	r1, #3
 800206c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800206e:	230f      	movs	r3, #15
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2203      	movs	r2, #3
 8002074:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <RTC_ExitInitMode+0x84>)
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <RTC_ExitInitMode+0x84>)
 800207c:	2120      	movs	r1, #32
 800207e:	430a      	orrs	r2, r1
 8002080:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002082:	230f      	movs	r3, #15
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	781b      	ldrb	r3, [r3, #0]
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b005      	add	sp, #20
 800208e:	bd90      	pop	{r4, r7, pc}
 8002090:	40002800 	.word	0x40002800

08002094 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80020a4:	230b      	movs	r3, #11
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	1dfa      	adds	r2, r7, #7
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80020ae:	e008      	b.n	80020c2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80020b6:	220b      	movs	r2, #11
 80020b8:	18bb      	adds	r3, r7, r2
 80020ba:	18ba      	adds	r2, r7, r2
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	3a0a      	subs	r2, #10
 80020c0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80020c2:	210b      	movs	r1, #11
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d8f1      	bhi.n	80020b0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	b2db      	uxtb	r3, r3
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b004      	add	sp, #16
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e04a      	b.n	800219c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	223d      	movs	r2, #61	; 0x3d
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d107      	bne.n	8002122 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	223c      	movs	r2, #60	; 0x3c
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f7fe fa4b 	bl	80005b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	223d      	movs	r2, #61	; 0x3d
 8002126:	2102      	movs	r1, #2
 8002128:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	0019      	movs	r1, r3
 8002134:	0010      	movs	r0, r2
 8002136:	f000 f835 	bl	80021a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2248      	movs	r2, #72	; 0x48
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223e      	movs	r2, #62	; 0x3e
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2241      	movs	r2, #65	; 0x41
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2242      	movs	r2, #66	; 0x42
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2243      	movs	r2, #67	; 0x43
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2244      	movs	r2, #68	; 0x44
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2245      	movs	r2, #69	; 0x45
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2246      	movs	r2, #70	; 0x46
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2247      	movs	r2, #71	; 0x47
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223d      	movs	r2, #61	; 0x3d
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <TIM_Base_SetConfig+0x110>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00c      	beq.n	80021d6 <TIM_Base_SetConfig+0x32>
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x32>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <TIM_Base_SetConfig+0x114>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x32>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <TIM_Base_SetConfig+0x118>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2270      	movs	r2, #112	; 0x70
 80021da:	4393      	bics	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <TIM_Base_SetConfig+0x110>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01c      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	05db      	lsls	r3, r3, #23
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <TIM_Base_SetConfig+0x114>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <TIM_Base_SetConfig+0x118>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <TIM_Base_SetConfig+0x11c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <TIM_Base_SetConfig+0x120>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <TIM_Base_SetConfig+0x124>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x86>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <TIM_Base_SetConfig+0x128>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <TIM_Base_SetConfig+0x12c>)
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	4393      	bics	r3, r2
 8002242:	001a      	movs	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <TIM_Base_SetConfig+0x110>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00b      	beq.n	8002282 <TIM_Base_SetConfig+0xde>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <TIM_Base_SetConfig+0x120>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <TIM_Base_SetConfig+0xde>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <TIM_Base_SetConfig+0x124>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d003      	beq.n	8002282 <TIM_Base_SetConfig+0xde>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <TIM_Base_SetConfig+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d103      	bne.n	800228a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4393      	bics	r3, r2
 80022a4:	001a      	movs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  }
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40002000 	.word	0x40002000
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800
 80022d0:	fffffcff 	.word	0xfffffcff

080022d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223c      	movs	r2, #60	; 0x3c
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e05a      	b.n	80023a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	223c      	movs	r2, #60	; 0x3c
 80022f0:	2101      	movs	r1, #1
 80022f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	223d      	movs	r2, #61	; 0x3d
 80022f8:	2102      	movs	r1, #2
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2270      	movs	r2, #112	; 0x70
 800232c:	4393      	bics	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d014      	beq.n	8002376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	05db      	lsls	r3, r3, #23
 8002354:	429a      	cmp	r2, r3
 8002356:	d00e      	beq.n	8002376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	4393      	bics	r3, r2
 800237c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4313      	orrs	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223d      	movs	r2, #61	; 0x3d
 8002394:	2101      	movs	r1, #1
 8002396:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	223c      	movs	r2, #60	; 0x3c
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	ff0fffff 	.word	0xff0fffff
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40014000 	.word	0x40014000

080023c0 <memset>:
 80023c0:	0003      	movs	r3, r0
 80023c2:	1882      	adds	r2, r0, r2
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d100      	bne.n	80023ca <memset+0xa>
 80023c8:	4770      	bx	lr
 80023ca:	7019      	strb	r1, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	e7f9      	b.n	80023c4 <memset+0x4>

080023d0 <__libc_init_array>:
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	2600      	movs	r6, #0
 80023d4:	4c0c      	ldr	r4, [pc, #48]	; (8002408 <__libc_init_array+0x38>)
 80023d6:	4d0d      	ldr	r5, [pc, #52]	; (800240c <__libc_init_array+0x3c>)
 80023d8:	1b64      	subs	r4, r4, r5
 80023da:	10a4      	asrs	r4, r4, #2
 80023dc:	42a6      	cmp	r6, r4
 80023de:	d109      	bne.n	80023f4 <__libc_init_array+0x24>
 80023e0:	2600      	movs	r6, #0
 80023e2:	f000 f883 	bl	80024ec <_init>
 80023e6:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <__libc_init_array+0x40>)
 80023e8:	4d0a      	ldr	r5, [pc, #40]	; (8002414 <__libc_init_array+0x44>)
 80023ea:	1b64      	subs	r4, r4, r5
 80023ec:	10a4      	asrs	r4, r4, #2
 80023ee:	42a6      	cmp	r6, r4
 80023f0:	d105      	bne.n	80023fe <__libc_init_array+0x2e>
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
 80023f4:	00b3      	lsls	r3, r6, #2
 80023f6:	58eb      	ldr	r3, [r5, r3]
 80023f8:	4798      	blx	r3
 80023fa:	3601      	adds	r6, #1
 80023fc:	e7ee      	b.n	80023dc <__libc_init_array+0xc>
 80023fe:	00b3      	lsls	r3, r6, #2
 8002400:	58eb      	ldr	r3, [r5, r3]
 8002402:	4798      	blx	r3
 8002404:	3601      	adds	r6, #1
 8002406:	e7f2      	b.n	80023ee <__libc_init_array+0x1e>
 8002408:	08002544 	.word	0x08002544
 800240c:	08002544 	.word	0x08002544
 8002410:	0800254c 	.word	0x0800254c
 8002414:	08002544 	.word	0x08002544

08002418 <__retarget_lock_acquire_recursive>:
 8002418:	4770      	bx	lr

0800241a <__retarget_lock_release_recursive>:
 800241a:	4770      	bx	lr

0800241c <register_fini>:
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <register_fini+0x10>)
 800241e:	b510      	push	{r4, lr}
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <register_fini+0xe>
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <register_fini+0x14>)
 8002426:	f000 f805 	bl	8002434 <atexit>
 800242a:	bd10      	pop	{r4, pc}
 800242c:	00000000 	.word	0x00000000
 8002430:	08002445 	.word	0x08002445

08002434 <atexit>:
 8002434:	2300      	movs	r3, #0
 8002436:	b510      	push	{r4, lr}
 8002438:	0001      	movs	r1, r0
 800243a:	001a      	movs	r2, r3
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f815 	bl	800246c <__register_exitproc>
 8002442:	bd10      	pop	{r4, pc}

08002444 <__libc_fini_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4c07      	ldr	r4, [pc, #28]	; (8002464 <__libc_fini_array+0x20>)
 8002448:	4d07      	ldr	r5, [pc, #28]	; (8002468 <__libc_fini_array+0x24>)
 800244a:	1b64      	subs	r4, r4, r5
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	2c00      	cmp	r4, #0
 8002450:	d102      	bne.n	8002458 <__libc_fini_array+0x14>
 8002452:	f000 f851 	bl	80024f8 <_fini>
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	3c01      	subs	r4, #1
 800245a:	00a3      	lsls	r3, r4, #2
 800245c:	58eb      	ldr	r3, [r5, r3]
 800245e:	4798      	blx	r3
 8002460:	e7f5      	b.n	800244e <__libc_fini_array+0xa>
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	08002550 	.word	0x08002550
 8002468:	0800254c 	.word	0x0800254c

0800246c <__register_exitproc>:
 800246c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800246e:	4f1c      	ldr	r7, [pc, #112]	; (80024e0 <__register_exitproc+0x74>)
 8002470:	0004      	movs	r4, r0
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	0016      	movs	r6, r2
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	9100      	str	r1, [sp, #0]
 800247a:	f7ff ffcd 	bl	8002418 <__retarget_lock_acquire_recursive>
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <__register_exitproc+0x78>)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <__register_exitproc+0x1e>
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <__register_exitproc+0x7c>)
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	2a1f      	cmp	r2, #31
 8002490:	dd04      	ble.n	800249c <__register_exitproc+0x30>
 8002492:	f7ff ffc2 	bl	800241a <__retarget_lock_release_recursive>
 8002496:	2001      	movs	r0, #1
 8002498:	4240      	negs	r0, r0
 800249a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800249c:	2c00      	cmp	r4, #0
 800249e:	d014      	beq.n	80024ca <__register_exitproc+0x5e>
 80024a0:	0091      	lsls	r1, r2, #2
 80024a2:	1859      	adds	r1, r3, r1
 80024a4:	000f      	movs	r7, r1
 80024a6:	3788      	adds	r7, #136	; 0x88
 80024a8:	603e      	str	r6, [r7, #0]
 80024aa:	2701      	movs	r7, #1
 80024ac:	001e      	movs	r6, r3
 80024ae:	4097      	lsls	r7, r2
 80024b0:	3685      	adds	r6, #133	; 0x85
 80024b2:	36ff      	adds	r6, #255	; 0xff
 80024b4:	6875      	ldr	r5, [r6, #4]
 80024b6:	31fc      	adds	r1, #252	; 0xfc
 80024b8:	433d      	orrs	r5, r7
 80024ba:	6075      	str	r5, [r6, #4]
 80024bc:	9d01      	ldr	r5, [sp, #4]
 80024be:	60cd      	str	r5, [r1, #12]
 80024c0:	2c02      	cmp	r4, #2
 80024c2:	d102      	bne.n	80024ca <__register_exitproc+0x5e>
 80024c4:	68b1      	ldr	r1, [r6, #8]
 80024c6:	4339      	orrs	r1, r7
 80024c8:	60b1      	str	r1, [r6, #8]
 80024ca:	1c51      	adds	r1, r2, #1
 80024cc:	6059      	str	r1, [r3, #4]
 80024ce:	3202      	adds	r2, #2
 80024d0:	9900      	ldr	r1, [sp, #0]
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	50d1      	str	r1, [r2, r3]
 80024d6:	f7ff ffa0 	bl	800241a <__retarget_lock_release_recursive>
 80024da:	2000      	movs	r0, #0
 80024dc:	e7dd      	b.n	800249a <__register_exitproc+0x2e>
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	200000ac 	.word	0x200000ac
 80024e8:	200000b0 	.word	0x200000b0

080024ec <_init>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr

080024f8 <_fini>:
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fe:	bc08      	pop	{r3}
 8002500:	469e      	mov	lr, r3
 8002502:	4770      	bx	lr
