
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000014  08004888  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08004888  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001542e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  000354ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00037e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd41  00000000  00000000  0003a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e0c  00000000  00000000  00057dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45d6  00000000  00000000  0006ebd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000484c  00000000  00000000  001331ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001379f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004798 	.word	0x08004798

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08004798 	.word	0x08004798

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe1c 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f830 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fac2 	bl	8000bc0 <MX_GPIO_Init>
  MX_RTC_Init();
 800063c:	f000 f882 	bl	8000744 <MX_RTC_Init>
  MX_TIM6_Init();
 8000640:	f000 f962 	bl	8000908 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000644:	f000 f922 	bl	800088c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f99c 	bl	8000984 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f9e8 	bl	8000a20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000650:	f000 fa34 	bl	8000abc <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000654:	f000 fa80 	bl	8000b58 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <main+0x60>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <main+0x60>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fd4f 	bl	8000104 <strlen>
 8000666:	0003      	movs	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x64>)
 8000670:	0021      	movs	r1, r4
 8000672:	f003 f8b3 	bl	80037dc <HAL_UART_Transmit>
  HAL_GPIO_TogglePin ( LDG_GPIO_Port , LDG_Pin ) ;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <main+0x68>)
 8000678:	2101      	movs	r1, #1
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f8f9 	bl	8001872 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin ( LDB_GPIO_Port , LDB_Pin ) ;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <main+0x68>)
 8000682:	2102      	movs	r1, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f8f4 	bl	8001872 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x5e>
 800068c:	20000000 	.word	0x20000000
 8000690:	200001a0 	.word	0x200001a0
 8000694:	50000c00 	.word	0x50000c00

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b095      	sub	sp, #84	; 0x54
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	233c      	movs	r3, #60	; 0x3c
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f003 ffdf 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f003 ffd8 	bl	800466c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 f8ff 	bl	80018c4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c6:	f001 f8ef 	bl	80018a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <SystemClock_Config+0xa8>)
 80006cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <SystemClock_Config+0xa8>)
 80006d0:	2118      	movs	r1, #24
 80006d2:	438a      	bics	r2, r1
 80006d4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2206      	movs	r2, #6
 80006da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 f92c 	bl	800195c <HAL_RCC_OscConfig>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000708:	f000 fb40 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2207      	movs	r2, #7
 8000710:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fc77 	bl	800201c <HAL_RCC_ClockConfig>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 fb2b 	bl	8000d8c <Error_Handler>
  }
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b015      	add	sp, #84	; 0x54
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b090      	sub	sp, #64	; 0x40
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800074a:	232c      	movs	r3, #44	; 0x2c
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	0018      	movs	r0, r3
 8000750:	2314      	movs	r3, #20
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f003 ff89 	bl	800466c <memset>
  RTC_DateTypeDef sDate = {0};
 800075a:	2328      	movs	r3, #40	; 0x28
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000762:	003b      	movs	r3, r7
 8000764:	0018      	movs	r0, r3
 8000766:	2328      	movs	r3, #40	; 0x28
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f003 ff7e 	bl	800466c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000770:	4b44      	ldr	r3, [pc, #272]	; (8000884 <MX_RTC_Init+0x140>)
 8000772:	4a45      	ldr	r2, [pc, #276]	; (8000888 <MX_RTC_Init+0x144>)
 8000774:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000776:	4b43      	ldr	r3, [pc, #268]	; (8000884 <MX_RTC_Init+0x140>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <MX_RTC_Init+0x140>)
 800077e:	227f      	movs	r2, #127	; 0x7f
 8000780:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000782:	4b40      	ldr	r3, [pc, #256]	; (8000884 <MX_RTC_Init+0x140>)
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <MX_RTC_Init+0x140>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <MX_RTC_Init+0x140>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <MX_RTC_Init+0x140>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <MX_RTC_Init+0x140>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	05d2      	lsls	r2, r2, #23
 80007a0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_RTC_Init+0x140>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <MX_RTC_Init+0x140>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 f81c 	bl	80027e8 <HAL_RTC_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80007b4:	f000 faea 	bl	8000d8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007b8:	212c      	movs	r1, #44	; 0x2c
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007de:	1879      	adds	r1, r7, r1
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_RTC_Init+0x140>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 f8a1 	bl	800292c <HAL_RTC_SetTime>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80007ee:	f000 facd 	bl	8000d8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80007f2:	2128      	movs	r1, #40	; 0x28
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2206      	movs	r2, #6
 80007f8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2201      	movs	r2, #1
 80007fe:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800080c:	1879      	adds	r1, r7, r1
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_RTC_Init+0x140>)
 8000810:	2201      	movs	r2, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f002 f932 	bl	8002a7c <HAL_RTC_SetDate>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800081c:	f000 fab6 	bl	8000d8c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000844:	003b      	movs	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000856:	003b      	movs	r3, r7
 8000858:	2220      	movs	r2, #32
 800085a:	2101      	movs	r1, #1
 800085c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800085e:	003b      	movs	r3, r7
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000866:	0039      	movs	r1, r7
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_RTC_Init+0x140>)
 800086a:	2201      	movs	r2, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f002 f997 	bl	8002ba0 <HAL_RTC_SetAlarm_IT>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000876:	f000 fa89 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b010      	add	sp, #64	; 0x40
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000030 	.word	0x20000030
 8000888:	40002800 	.word	0x40002800

0800088c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_SPI1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_SPI1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_SPI1_Init+0x74>)
 8000898:	2282      	movs	r2, #130	; 0x82
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_SPI1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI1_Init+0x74>)
 80008a6:	22e0      	movs	r2, #224	; 0xe0
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI1_Init+0x74>)
 80008da:	2207      	movs	r2, #7
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI1_Init+0x74>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 fbb9 	bl	8003064 <HAL_SPI_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 fa49 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000005c 	.word	0x2000005c
 8000904:	40013000 	.word	0x40013000

08000908 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	230c      	movs	r3, #12
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f003 fea8 	bl	800466c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_TIM6_Init+0x6c>)
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <MX_TIM6_Init+0x70>)
 8000920:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_TIM6_Init+0x6c>)
 8000924:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_TIM6_Init+0x74>)
 8000926:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_TIM6_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_TIM6_Init+0x6c>)
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_TIM6_Init+0x78>)
 8000932:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_TIM6_Init+0x6c>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_TIM6_Init+0x6c>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 fc49 	bl	80031d4 <HAL_TIM_Base_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000946:	f000 fa21 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000956:	1d3a      	adds	r2, r7, #4
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_TIM6_Init+0x6c>)
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f002 fe59 	bl	8003614 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000966:	f000 fa11 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	200000c0 	.word	0x200000c0
 8000978:	40001000 	.word	0x40001000
 800097c:	00003e7f 	.word	0x00003e7f
 8000980:	000003e7 	.word	0x000003e7

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <MX_USART1_UART_Init+0x98>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000990:	22e1      	movs	r2, #225	; 0xe1
 8000992:	0252      	lsls	r2, r2, #9
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 feae 	bl	8003730 <HAL_UART_Init>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f9d8 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009de:	2100      	movs	r1, #0
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 fd63 	bl	80044ac <HAL_UARTEx_SetTxFifoThreshold>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f9cf 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fd9a 	bl	800452c <HAL_UARTEx_SetRxFifoThreshold>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f9c6 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_USART1_UART_Init+0x94>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 fd18 	bl	8004438 <HAL_UARTEx_DisableFifoMode>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f9be 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	2000010c 	.word	0x2000010c
 8000a1c:	40013800 	.word	0x40013800

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_USART2_UART_Init+0x98>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a2c:	22e1      	movs	r2, #225	; 0xe1
 8000a2e:	0252      	lsls	r2, r2, #9
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fe60 	bl	8003730 <HAL_UART_Init>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 f98a 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f003 fd15 	bl	80044ac <HAL_UARTEx_SetTxFifoThreshold>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 f981 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fd4c 	bl	800452c <HAL_UARTEx_SetRxFifoThreshold>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a98:	f000 f978 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f003 fcca 	bl	8004438 <HAL_UARTEx_DisableFifoMode>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f000 f970 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	200001a0 	.word	0x200001a0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ac2:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <MX_USART3_UART_Init+0x98>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ac8:	2296      	movs	r2, #150	; 0x96
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 fe12 	bl	8003730 <HAL_UART_Init>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b10:	f000 f93c 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f003 fcc7 	bl	80044ac <HAL_UARTEx_SetTxFifoThreshold>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 f933 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 fcfe 	bl	800452c <HAL_UARTEx_SetRxFifoThreshold>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 f92a 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_USART3_UART_Init+0x94>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f003 fc7c 	bl	8004438 <HAL_UARTEx_DisableFifoMode>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f922 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000234 	.word	0x20000234
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <MX_USART5_UART_Init+0x64>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b64:	22e1      	movs	r2, #225	; 0xe1
 8000b66:	0252      	lsls	r2, r2, #9
 8000b68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <MX_USART5_UART_Init+0x60>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fdc4 	bl	8003730 <HAL_UART_Init>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 f8ee 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	200002c8 	.word	0x200002c8
 8000bbc:	40005000 	.word	0x40005000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	2414      	movs	r4, #20
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2314      	movs	r3, #20
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f003 fd4b 	bl	800466c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bda:	4b67      	ldr	r3, [pc, #412]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000bdc:	2104      	movs	r1, #4
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
 8000be2:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2204      	movs	r2, #4
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf2:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfa:	4b5f      	ldr	r3, [pc, #380]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	2202      	movs	r2, #2
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c22:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c24:	2108      	movs	r1, #8
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <MX_GPIO_Init+0x1b8>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	2208      	movs	r2, #8
 8000c30:	4013      	ands	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c36:	23a0      	movs	r3, #160	; 0xa0
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fdfa 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000c44:	494d      	ldr	r1, [pc, #308]	; (8000d7c <MX_GPIO_Init+0x1bc>)
 8000c46:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <MX_GPIO_Init+0x1c0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fdf4 	bl	8001838 <HAL_GPIO_WritePin>
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8000c50:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <MX_GPIO_Init+0x1c4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	2103      	movs	r1, #3
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fdee 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2288      	movs	r2, #136	; 0x88
 8000c66:	0352      	lsls	r2, r2, #13
 8000c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8000c70:	193a      	adds	r2, r7, r4
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fc71 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2202      	movs	r2, #2
 8000c82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fc61 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fc4e 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <MX_GPIO_Init+0x1bc>)
 8000cc8:	601a      	str	r2, [r3, #0]
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2201      	movs	r2, #1
 8000cce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <MX_GPIO_Init+0x1c0>)
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f000 fc3c 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8000ce8:	0021      	movs	r1, r4
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2224      	movs	r2, #36	; 0x24
 8000cee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2288      	movs	r2, #136	; 0x88
 8000cf4:	0352      	lsls	r2, r2, #13
 8000cf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	000c      	movs	r4, r1
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_GPIO_Init+0x1c0>)
 8000d04:	0019      	movs	r1, r3
 8000d06:	0010      	movs	r0, r2
 8000d08:	f000 fc2a 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_GPIO_Init+0x1c8>)
 8000d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_GPIO_Init+0x1c0>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f000 fc1b 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x1c4>)
 8000d46:	0019      	movs	r1, r3
 8000d48:	0010      	movs	r0, r2
 8000d4a:	f000 fc09 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000d4e:	0021      	movs	r1, r4
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <MX_GPIO_Init+0x1c4>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f000 fbf9 	bl	8001560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b00b      	add	sp, #44	; 0x2c
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	0000ac03 	.word	0x0000ac03
 8000d80:	50000400 	.word	0x50000400
 8000d84:	50000c00 	.word	0x50000c00
 8000d88:	00004040 	.word	0x00004040

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0549      	lsls	r1, r1, #21
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	4013      	ands	r3, r2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000dd2:	23c0      	movs	r3, #192	; 0xc0
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 face 	bl	8001378 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b097      	sub	sp, #92	; 0x5c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	240c      	movs	r4, #12
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	234c      	movs	r3, #76	; 0x4c
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fc36 	bl	800466c <memset>
  if(hrtc->Instance==RTC)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_RTC_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0292      	lsls	r2, r2, #10
 8000e10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0052      	lsls	r2, r2, #1
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 faa7 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e26:	f7ff ffb1 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_RTC_MspInit+0x88>)
 8000e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_RTC_MspInit+0x88>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0209      	lsls	r1, r1, #8
 8000e34:	430a      	orrs	r2, r1
 8000e36:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_RTC_MspInit+0x88>)
 8000e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_RTC_MspInit+0x88>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	00c9      	lsls	r1, r1, #3
 8000e42:	430a      	orrs	r2, r1
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_RTC_MspInit+0x88>)
 8000e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2103      	movs	r1, #3
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f000 fb4f 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 fb61 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b017      	add	sp, #92	; 0x5c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40002800 	.word	0x40002800
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	2414      	movs	r4, #20
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	2314      	movs	r3, #20
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f003 fbf0 	bl	800466c <memset>
  if(hspi->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_SPI_MspInit+0x8c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d130      	bne.n	8000ef8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0149      	lsls	r1, r1, #5
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	015b      	lsls	r3, r3, #5
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_SPI_MspInit+0x90>)
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8000eca:	0021      	movs	r1, r4
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	22e0      	movs	r2, #224	; 0xe0
 8000ed0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	187a      	adds	r2, r7, r1
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fb34 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b00b      	add	sp, #44	; 0x2c
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	40013000 	.word	0x40013000
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_TIM_Base_MspInit+0x44>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d113      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	2110      	movs	r1, #16
 8000f22:	430a      	orrs	r2, r1
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	2011      	movs	r0, #17
 8000f38:	f000 fae0 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000f3c:	2011      	movs	r0, #17
 8000f3e:	f000 faf2 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40001000 	.word	0x40001000
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b0a3      	sub	sp, #140	; 0x8c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2374      	movs	r3, #116	; 0x74
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f003 fb80 	bl	800466c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	2428      	movs	r4, #40	; 0x28
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	0018      	movs	r0, r3
 8000f72:	234c      	movs	r3, #76	; 0x4c
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f003 fb78 	bl	800466c <memset>
  if(huart->Instance==USART1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a84      	ldr	r2, [pc, #528]	; (8001194 <HAL_UART_MspInit+0x240>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d140      	bne.n	8001008 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	0018      	movs	r0, r3
 8000f96:	f001 f9eb 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f9e:	f7ff fef5 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa2:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	01c9      	lsls	r1, r1, #7
 8000fac:	430a      	orrs	r2, r1
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b76      	ldr	r3, [pc, #472]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc2:	4b75      	ldr	r3, [pc, #468]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <HAL_UART_MspInit+0x244>)
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8000fd6:	2174      	movs	r1, #116	; 0x74
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	22c0      	movs	r2, #192	; 0xc0
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	187a      	adds	r2, r7, r1
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f000 faad 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001006:	e0c0      	b.n	800118a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a63      	ldr	r2, [pc, #396]	; (800119c <HAL_UART_MspInit+0x248>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d140      	bne.n	8001094 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001012:	2128      	movs	r1, #40	; 0x28
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2202      	movs	r2, #2
 8001018:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	187b      	adds	r3, r7, r1
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f9a4 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800102c:	f7ff feae 	bl	8000d8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001030:	4b59      	ldr	r3, [pc, #356]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0289      	lsls	r1, r1, #10
 800103a:	430a      	orrs	r2, r1
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c
 800103e:	4b56      	ldr	r3, [pc, #344]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	029b      	lsls	r3, r3, #10
 8001046:	4013      	ands	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b52      	ldr	r3, [pc, #328]	; (8001198 <HAL_UART_MspInit+0x244>)
 800104e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001050:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001052:	2101      	movs	r1, #1
 8001054:	430a      	orrs	r2, r1
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <HAL_UART_MspInit+0x244>)
 800105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105c:	2201      	movs	r2, #1
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001064:	2174      	movs	r1, #116	; 0x74
 8001066:	187b      	adds	r3, r7, r1
 8001068:	220c      	movs	r2, #12
 800106a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2202      	movs	r2, #2
 8001070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2201      	movs	r2, #1
 8001082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	187a      	adds	r2, r7, r1
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fa67 	bl	8001560 <HAL_GPIO_Init>
}
 8001092:	e07a      	b.n	800118a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a41      	ldr	r2, [pc, #260]	; (80011a0 <HAL_UART_MspInit+0x24c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d140      	bne.n	8001120 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109e:	2128      	movs	r1, #40	; 0x28
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2204      	movs	r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f95e 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	1e03      	subs	r3, r0, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x168>
      Error_Handler();
 80010b8:	f7ff fe68 	bl	8000d8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	02c9      	lsls	r1, r1, #11
 80010c6:	430a      	orrs	r2, r1
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	02db      	lsls	r3, r3, #11
 80010d2:	4013      	ands	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010de:	2102      	movs	r1, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_UART_MspInit+0x244>)
 80010e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80010f0:	2174      	movs	r1, #116	; 0x74
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	22c0      	movs	r2, #192	; 0xc0
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2202      	movs	r2, #2
 80010fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2204      	movs	r2, #4
 8001110:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	187b      	adds	r3, r7, r1
 8001114:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_UART_MspInit+0x250>)
 8001116:	0019      	movs	r1, r3
 8001118:	0010      	movs	r0, r2
 800111a:	f000 fa21 	bl	8001560 <HAL_GPIO_Init>
}
 800111e:	e034      	b.n	800118a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_UART_MspInit+0x254>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12f      	bne.n	800118a <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x244>)
 800112c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0049      	lsls	r1, r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_UART_MspInit+0x244>)
 800113a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_UART_MspInit+0x244>)
 800114c:	2102      	movs	r1, #2
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x244>)
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800115e:	2174      	movs	r1, #116	; 0x74
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2218      	movs	r2, #24
 8001164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2202      	movs	r2, #2
 800116a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2203      	movs	r2, #3
 800117c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	187b      	adds	r3, r7, r1
 8001180:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_UART_MspInit+0x250>)
 8001182:	0019      	movs	r1, r3
 8001184:	0010      	movs	r0, r2
 8001186:	f000 f9eb 	bl	8001560 <HAL_GPIO_Init>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b023      	add	sp, #140	; 0x8c
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40013800 	.word	0x40013800
 8001198:	40021000 	.word	0x40021000
 800119c:	40004400 	.word	0x40004400
 80011a0:	40004800 	.word	0x40004800
 80011a4:	50000400 	.word	0x50000400
 80011a8:	40005000 	.word	0x40005000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f8b6 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <RTC_TAMP_IRQHandler+0x14>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 fe1c 	bl	8002e20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000030 	.word	0x20000030

080011f4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f002 f842 	bl	8003284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	200000c0 	.word	0x200000c0

0800120c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800121c:	f7ff fff6 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <LoopForever+0x6>)
  ldr r1, =_edata
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <LoopForever+0xe>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001238:	4c0a      	ldr	r4, [pc, #40]	; (8001264 <LoopForever+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001246:	f003 fa19 	bl	800467c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800124a:	f7ff f9ef 	bl	800062c <main>

0800124e <LoopForever>:

LoopForever:
  b LoopForever
 800124e:	e7fe      	b.n	800124e <LoopForever>
  ldr   r0, =_estack
 8001250:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800125c:	08004874 	.word	0x08004874
  ldr r2, =_sbss
 8001260:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001264:	200004f8 	.word	0x200004f8

08001268 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_COMP_IRQHandler>
	...

0800126c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_Init+0x3c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_Init+0x3c>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0049      	lsls	r1, r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f810 	bl	80012ac <HAL_InitTick>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d003      	beq.n	8001298 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e001      	b.n	800129c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fd7e 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40022000 	.word	0x40022000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	230f      	movs	r3, #15
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_InitTick+0x88>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d02b      	beq.n	800131c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_InitTick+0x8c>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_InitTick+0x88>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	0019      	movs	r1, r3
 80012ce:	23fa      	movs	r3, #250	; 0xfa
 80012d0:	0098      	lsls	r0, r3, #2
 80012d2:	f7fe ff1f 	bl	8000114 <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	0019      	movs	r1, r3
 80012da:	0020      	movs	r0, r4
 80012dc:	f7fe ff1a 	bl	8000114 <__udivsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f92f 	bl	8001546 <HAL_SYSTICK_Config>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d112      	bne.n	8001312 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d80a      	bhi.n	8001308 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	2301      	movs	r3, #1
 80012f6:	425b      	negs	r3, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f8fe 	bl	80014fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_InitTick+0x90>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e00d      	b.n	8001324 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e008      	b.n	8001324 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001312:	230f      	movs	r3, #15
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e003      	b.n	8001324 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001324:	230f      	movs	r3, #15
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b005      	add	sp, #20
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000004 	.word	0x20000004
 800133c:	20000008 	.word	0x20000008

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x1c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	001a      	movs	r2, r3
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x20>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	18d2      	adds	r2, r2, r3
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_IncTick+0x20>)
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	2000000c 	.word	0x2000000c
 8001360:	2000035c 	.word	0x2000035c

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_GetTick+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000035c 	.word	0x2000035c

08001378 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001386:	4013      	ands	r3, r2
 8001388:	0019      	movs	r1, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40010000 	.word	0x40010000
 80013a0:	fffff9ff 	.word	0xfffff9ff

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b7f      	cmp	r3, #127	; 0x7f
 80013b6:	d809      	bhi.n	80013cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	001a      	movs	r2, r3
 80013be:	231f      	movs	r3, #31
 80013c0:	401a      	ands	r2, r3
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_EnableIRQ+0x30>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	4091      	lsls	r1, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	0002      	movs	r2, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b7f      	cmp	r3, #127	; 0x7f
 80013ec:	d828      	bhi.n	8001440 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <__NVIC_SetPriority+0xd4>)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	33c0      	adds	r3, #192	; 0xc0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	589b      	ldr	r3, [r3, r2]
 80013fe:	1dfa      	adds	r2, r7, #7
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	0011      	movs	r1, r2
 8001404:	2203      	movs	r2, #3
 8001406:	400a      	ands	r2, r1
 8001408:	00d2      	lsls	r2, r2, #3
 800140a:	21ff      	movs	r1, #255	; 0xff
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	401a      	ands	r2, r3
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	2303      	movs	r3, #3
 8001426:	4003      	ands	r3, r0
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <__NVIC_SetPriority+0xd4>)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	33c0      	adds	r3, #192	; 0xc0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800143e:	e031      	b.n	80014a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0019      	movs	r1, r3
 8001448:	230f      	movs	r3, #15
 800144a:	400b      	ands	r3, r1
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3306      	adds	r3, #6
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1dfa      	adds	r2, r7, #7
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	0011      	movs	r1, r2
 8001460:	2203      	movs	r2, #3
 8001462:	400a      	ands	r2, r1
 8001464:	00d2      	lsls	r2, r2, #3
 8001466:	21ff      	movs	r1, #255	; 0xff
 8001468:	4091      	lsls	r1, r2
 800146a:	000a      	movs	r2, r1
 800146c:	43d2      	mvns	r2, r2
 800146e:	401a      	ands	r2, r3
 8001470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	22ff      	movs	r2, #255	; 0xff
 8001478:	401a      	ands	r2, r3
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	2303      	movs	r3, #3
 8001482:	4003      	ands	r3, r0
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001c      	movs	r4, r3
 8001490:	230f      	movs	r3, #15
 8001492:	4023      	ands	r3, r4
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	430a      	orrs	r2, r1
 800149a:	3306      	adds	r3, #6
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	18c3      	adds	r3, r0, r3
 80014a0:	3304      	adds	r3, #4
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b003      	add	sp, #12
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	045b      	lsls	r3, r3, #17
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d301      	bcc.n	80014cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c8:	2301      	movs	r3, #1
 80014ca:	e010      	b.n	80014ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <SysTick_Config+0x44>)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d4:	2301      	movs	r3, #1
 80014d6:	425b      	negs	r3, r3
 80014d8:	2103      	movs	r1, #3
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff ff7c 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x44>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x44>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	210f      	movs	r1, #15
 8001508:	187b      	adds	r3, r7, r1
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	187b      	adds	r3, r7, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	0002      	movs	r2, r0
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff33 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ffaf 	bl	80014b4 <SysTick_Config>
 8001556:	0003      	movs	r3, r0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e14d      	b.n	800180c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d100      	bne.n	8001588 <HAL_GPIO_Init+0x28>
 8001586:	e13e      	b.n	8001806 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	4013      	ands	r3, r2
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	409a      	lsls	r2, r3
 80015ae:	0013      	movs	r3, r2
 80015b0:	43da      	mvns	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	2201      	movs	r2, #1
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	4013      	ands	r3, r2
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	4013      	ands	r3, r2
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	58d3      	ldr	r3, [r2, r3]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2207      	movs	r2, #7
 800165c:	4013      	ands	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2107      	movs	r1, #7
 8001676:	400b      	ands	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	401a      	ands	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	d100      	bne.n	80016d4 <HAL_GPIO_Init+0x174>
 80016d2:	e098      	b.n	8001806 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016d4:	4a53      	ldr	r2, [pc, #332]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3318      	adds	r3, #24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	589b      	ldr	r3, [r3, r2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4013      	ands	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	220f      	movs	r2, #15
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	429a      	cmp	r2, r3
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x1d6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x1d2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_GPIO_Init+0x2cc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x1ce>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a46      	ldr	r2, [pc, #280]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x1ca>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_GPIO_Init+0x2d4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x1c6>
 8001722:	2304      	movs	r3, #4
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x1d8>
 8001726:	2305      	movs	r3, #5
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x1d8>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x1d8>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x1d8>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x1d8>
 8001736:	2300      	movs	r3, #0
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	2103      	movs	r1, #3
 800173c:	400a      	ands	r2, r1
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	4093      	lsls	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001748:	4936      	ldr	r1, [pc, #216]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3318      	adds	r3, #24
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	035b      	lsls	r3, r3, #13
 800176e:	4013      	ands	r3, r2
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	039b      	lsls	r3, r3, #14
 8001798:	4013      	ands	r3, r2
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80017ac:	2384      	movs	r3, #132	; 0x84
 80017ae:	58d3      	ldr	r3, [r2, r3]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d0:	4914      	ldr	r1, [pc, #80]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80017d2:	2284      	movs	r2, #132	; 0x84
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	58d3      	ldr	r3, [r2, r3]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017fe:	4909      	ldr	r1, [pc, #36]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	40da      	lsrs	r2, r3
 8001814:	1e13      	subs	r3, r2, #0
 8001816:	d000      	beq.n	800181a <HAL_GPIO_Init+0x2ba>
 8001818:	e6aa      	b.n	8001570 <HAL_GPIO_Init+0x10>
  }
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b006      	add	sp, #24
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021800 	.word	0x40021800
 8001828:	50000400 	.word	0x50000400
 800182c:	50000800 	.word	0x50000800
 8001830:	50000c00 	.word	0x50000c00
 8001834:	50001000 	.word	0x50001000

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	0008      	movs	r0, r1
 8001842:	0011      	movs	r1, r2
 8001844:	1cbb      	adds	r3, r7, #2
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	1c7b      	adds	r3, r7, #1
 800184c:	1c0a      	adds	r2, r1, #0
 800184e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001850:	1c7b      	adds	r3, r7, #1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001858:	1cbb      	adds	r3, r7, #2
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001862:	1cbb      	adds	r3, r7, #2
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	000a      	movs	r2, r1
 800187c:	1cbb      	adds	r3, r7, #2
 800187e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	1cb9      	adds	r1, r7, #2
 8001896:	8809      	ldrh	r1, [r1, #0]
 8001898:	400b      	ands	r3, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0049      	lsls	r1, r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40007000 	.word	0x40007000

080018c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d11f      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	0013      	movs	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	189b      	adds	r3, r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4912      	ldr	r1, [pc, #72]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fc0c 	bl	8000114 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	3301      	adds	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001902:	e008      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e001      	b.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e009      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	401a      	ands	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	429a      	cmp	r2, r3
 8001926:	d0ed      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40007000 	.word	0x40007000
 8001938:	fffff9ff 	.word	0xfffff9ff
 800193c:	20000004 	.word	0x20000004
 8001940:	000f4240 	.word	0x000f4240

08001944 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <LL_RCC_GetAPB1Prescaler+0x14>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	23e0      	movs	r3, #224	; 0xe0
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	4013      	ands	r3, r2
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f000 fb50 	bl	8002010 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d100      	bne.n	800197c <HAL_RCC_OscConfig+0x20>
 800197a:	e07c      	b.n	8001a76 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	4bc3      	ldr	r3, [pc, #780]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2238      	movs	r2, #56	; 0x38
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001986:	4bc1      	ldr	r3, [pc, #772]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d102      	bne.n	800199c <HAL_RCC_OscConfig+0x40>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d002      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4bba      	ldr	r3, [pc, #744]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d062      	beq.n	8001a74 <HAL_RCC_OscConfig+0x118>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d15e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e32a      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_OscConfig+0x7a>
 80019c6:	4bb1      	ldr	r3, [pc, #708]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4bb0      	ldr	r3, [pc, #704]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0249      	lsls	r1, r1, #9
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e020      	b.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	23a0      	movs	r3, #160	; 0xa0
 80019dc:	02db      	lsls	r3, r3, #11
 80019de:	429a      	cmp	r2, r3
 80019e0:	d10e      	bne.n	8001a00 <HAL_RCC_OscConfig+0xa4>
 80019e2:	4baa      	ldr	r3, [pc, #680]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4ba9      	ldr	r3, [pc, #676]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	02c9      	lsls	r1, r1, #11
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	4ba6      	ldr	r3, [pc, #664]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4ba5      	ldr	r3, [pc, #660]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0249      	lsls	r1, r1, #9
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 8001a00:	4ba2      	ldr	r3, [pc, #648]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4ba1      	ldr	r3, [pc, #644]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a06:	49a2      	ldr	r1, [pc, #648]	; (8001c90 <HAL_RCC_OscConfig+0x334>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	4b9f      	ldr	r3, [pc, #636]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a12:	49a0      	ldr	r1, [pc, #640]	; (8001c94 <HAL_RCC_OscConfig+0x338>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d014      	beq.n	8001a4a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fca0 	bl	8001364 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fc9b 	bl	8001364 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2e9      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0xce>
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fc8b 	bl	8001364 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc86 	bl	8001364 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e2d4      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	029b      	lsls	r3, r3, #10
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xf8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x126>
 8001a80:	e099      	b.n	8001bb6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2203      	movs	r2, #3
 8001a92:	4013      	ands	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x146>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d135      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x164>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2a7      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a74      	ldr	r2, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x33c>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	021a      	lsls	r2, r3, #8
 8001ad0:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x340>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0adb      	lsrs	r3, r3, #11
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_RCC_OscConfig+0x344>)
 8001afc:	40da      	lsrs	r2, r3
 8001afe:	4b69      	ldr	r3, [pc, #420]	; (8001ca4 <HAL_RCC_OscConfig+0x348>)
 8001b00:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b02:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x34c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff fbd0 	bl	80012ac <HAL_InitTick>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d051      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e27d      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d030      	beq.n	8001b7e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x340>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	0049      	lsls	r1, r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc11 	bl	8001364 <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc0c 	bl	8001364 <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e25a      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4013      	ands	r3, r2
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_RCC_OscConfig+0x33c>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	021a      	lsls	r2, r3, #8
 8001b76:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	e01b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001b84:	4949      	ldr	r1, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x350>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fbeb 	bl	8001364 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fbe6 	bl	8001364 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e234      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x238>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d047      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2238      	movs	r2, #56	; 0x38
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b18      	cmp	r3, #24
 8001bca:	d10a      	bne.n	8001be2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d03c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2f4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d138      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e216      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001bec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fbb5 	bl	8001364 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fbb0 	bl	8001364 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1fe      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f1      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a4>
 8001c1c:	e018      	b.n	8001c50 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	438a      	bics	r2, r1
 8001c28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fb9b 	bl	8001364 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7ff fb96 	bl	8001364 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1e4      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d1f1      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2204      	movs	r2, #4
 8001c56:	4013      	ands	r3, r2
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x300>
 8001c5a:	e0c7      	b.n	8001dec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2238      	movs	r2, #56	; 0x38
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x330>)
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x320>
 8001c7a:	e0b7      	b.n	8001dec <HAL_RCC_OscConfig+0x490>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d000      	beq.n	8001c86 <HAL_RCC_OscConfig+0x32a>
 8001c84:	e0b2      	b.n	8001dec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c2      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	fffbffff 	.word	0xfffbffff
 8001c98:	ffff80ff 	.word	0xffff80ff
 8001c9c:	ffffc7ff 	.word	0xffffc7ff
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cb0:	4bb5      	ldr	r3, [pc, #724]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x364>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x366>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d011      	beq.n	8001cea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4bb0      	ldr	r3, [pc, #704]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cca:	4baf      	ldr	r3, [pc, #700]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	0549      	lsls	r1, r1, #21
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd4:	4bac      	ldr	r3, [pc, #688]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	055b      	lsls	r3, r3, #21
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cea:	4ba8      	ldr	r3, [pc, #672]	; (8001f8c <HAL_RCC_OscConfig+0x630>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf6:	4ba5      	ldr	r3, [pc, #660]	; (8001f8c <HAL_RCC_OscConfig+0x630>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4ba4      	ldr	r3, [pc, #656]	; (8001f8c <HAL_RCC_OscConfig+0x630>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0049      	lsls	r1, r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb2e 	bl	8001364 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff fb29 	bl	8001364 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e177      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b9a      	ldr	r3, [pc, #616]	; (8001f8c <HAL_RCC_OscConfig+0x630>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3e6>
 8001d34:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d38:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x420>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x408>
 8001d4a:	4b8f      	ldr	r3, [pc, #572]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d50:	2104      	movs	r1, #4
 8001d52:	430a      	orrs	r2, r1
 8001d54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x420>
 8001d64:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d68:	4b87      	ldr	r3, [pc, #540]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d70:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d74:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001d76:	2104      	movs	r1, #4
 8001d78:	438a      	bics	r2, r1
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff faee 	bl	8001364 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fae9 	bl	8001364 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a7d      	ldr	r2, [pc, #500]	; (8001f90 <HAL_RCC_OscConfig+0x634>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e136      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da2:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x432>
 8001dac:	e013      	b.n	8001dd6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff fad9 	bl	8001364 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db6:	e009      	b.n	8001dcc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff fad4 	bl	8001364 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4a73      	ldr	r2, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x634>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e121      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dcc:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b69      	ldr	r3, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de4:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001de6:	496b      	ldr	r1, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x638>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d039      	beq.n	8001e6a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dfe:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	03c9      	lsls	r1, r1, #15
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff faaa 	bl	8001364 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7ff faa5 	bl	8001364 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0f3      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e28:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x4ba>
 8001e34:	e019      	b.n	8001e6a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e3c:	4956      	ldr	r1, [pc, #344]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa8f 	bl	8001364 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4c:	f7ff fa8a 	bl	8001364 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0d8      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x518>
 8001e72:	e0cc      	b.n	800200e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x526>
 8001e80:	e07b      	b.n	8001f7a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d156      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001e90:	4942      	ldr	r1, [pc, #264]	; (8001f9c <HAL_RCC_OscConfig+0x640>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff fa65 	bl	8001364 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fa60 	bl	8001364 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0ae      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	049b      	lsls	r3, r3, #18
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4a37      	ldr	r2, [pc, #220]	; (8001fa0 <HAL_RCC_OscConfig+0x644>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	431a      	orrs	r2, r3
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	0449      	lsls	r1, r1, #17
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0549      	lsls	r1, r1, #21
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fa29 	bl	8001364 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fa24 	bl	8001364 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e072      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	049b      	lsls	r3, r3, #18
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x5bc>
 8001f36:	e06a      	b.n	800200e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f3e:	4917      	ldr	r1, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x640>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fa0e 	bl	8001364 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fa09 	bl	8001364 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e057      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	049b      	lsls	r3, r3, #18
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_OscConfig+0x62c>)
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x648>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	e049      	b.n	800200e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e044      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	00001388 	.word	0x00001388
 8001f94:	efffffff 	.word	0xefffffff
 8001f98:	ffbfffff 	.word	0xffbfffff
 8001f9c:	feffffff 	.word	0xfeffffff
 8001fa0:	11c1808c 	.word	0x11c1808c
 8001fa4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x6bc>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d126      	bne.n	800200a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2270      	movs	r2, #112	; 0x70
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11f      	bne.n	800200a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	23fe      	movs	r3, #254	; 0xfe
 8001fce:	01db      	lsls	r3, r3, #7
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d116      	bne.n	800200a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	23f8      	movs	r3, #248	; 0xf8
 8001fe0:	039b      	lsls	r3, r3, #14
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d10e      	bne.n	800200a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	23e0      	movs	r3, #224	; 0xe0
 8001ff0:	051b      	lsls	r3, r3, #20
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	0f5b      	lsrs	r3, r3, #29
 8002000:	075a      	lsls	r2, r3, #29
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b008      	add	sp, #32
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0e9      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2207      	movs	r2, #7
 8002036:	4013      	ands	r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d91e      	bls.n	800207c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002050:	f7ff f988 	bl	8001364 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002058:	e009      	b.n	800206e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7ff f983 	bl	8001364 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_RCC_ClockConfig+0x1f4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0ca      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2207      	movs	r2, #7
 8002074:	4013      	ands	r3, r2
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d015      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	4013      	ands	r3, r2
 800208e:	d006      	beq.n	800209e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002090:	4b60      	ldr	r3, [pc, #384]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 8002096:	21e0      	movs	r1, #224	; 0xe0
 8002098:	01c9      	lsls	r1, r1, #7
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_RCC_ClockConfig+0x1fc>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d057      	beq.n	800216c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d12b      	bne.n	8002128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e097      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d107      	bne.n	80020ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	049b      	lsls	r3, r3, #18
 80020e4:	4013      	ands	r3, r2
 80020e6:	d11f      	bne.n	8002128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e08b      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	d113      	bne.n	8002128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e07f      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d106      	bne.n	800211a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d108      	bne.n	8002128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e074      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e06d      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2207      	movs	r2, #7
 800212e:	4393      	bics	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213c:	f7ff f912 	bl	8001364 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002144:	e009      	b.n	800215a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002146:	f7ff f90d 	bl	8001364 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <HAL_RCC_ClockConfig+0x1f4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e054      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2238      	movs	r2, #56	; 0x38
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	429a      	cmp	r2, r3
 800216a:	d1ec      	bne.n	8002146 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2207      	movs	r2, #7
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d21e      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2207      	movs	r2, #7
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218c:	f7ff f8ea 	bl	8001364 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002194:	e009      	b.n	80021aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002196:	f7ff f8e5 	bl	8001364 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_RCC_ClockConfig+0x1f4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e02c      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2207      	movs	r2, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1ee      	bne.n	8002196 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2204      	movs	r2, #4
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_RCC_ClockConfig+0x200>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021d6:	f000 f829 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021da:	0001      	movs	r1, r0
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	220f      	movs	r2, #15
 80021e4:	401a      	ands	r2, r3
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x204>)
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	58d3      	ldr	r3, [r2, r3]
 80021ec:	221f      	movs	r2, #31
 80021ee:	4013      	ands	r3, r2
 80021f0:	000a      	movs	r2, r1
 80021f2:	40da      	lsrs	r2, r3
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x208>)
 80021f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x20c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff f855 	bl	80012ac <HAL_InitTick>
 8002202:	0003      	movs	r3, r0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	00001388 	.word	0x00001388
 8002214:	40021000 	.word	0x40021000
 8002218:	fffff0ff 	.word	0xfffff0ff
 800221c:	ffff8fff 	.word	0xffff8fff
 8002220:	080047d8 	.word	0x080047d8
 8002224:	20000004 	.word	0x20000004
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2238      	movs	r2, #56	; 0x38
 8002238:	4013      	ands	r3, r2
 800223a:	d10f      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0adb      	lsrs	r3, r3, #11
 8002242:	2207      	movs	r2, #7
 8002244:	4013      	ands	r3, r2
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	4835      	ldr	r0, [pc, #212]	; (8002328 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002252:	f7fd ff5f 	bl	8000114 <__udivsi3>
 8002256:	0003      	movs	r3, r0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e05d      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2238      	movs	r2, #56	; 0x38
 8002262:	4013      	ands	r3, r2
 8002264:	2b08      	cmp	r3, #8
 8002266:	d102      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002268:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_RCC_GetSysClockFreq+0x100>)
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e054      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2238      	movs	r2, #56	; 0x38
 8002274:	4013      	ands	r3, r2
 8002276:	2b10      	cmp	r3, #16
 8002278:	d138      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2203      	movs	r2, #3
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	2207      	movs	r2, #7
 800228c:	4013      	ands	r3, r2
 800228e:	3301      	adds	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	4824      	ldr	r0, [pc, #144]	; (800232c <HAL_RCC_GetSysClockFreq+0x100>)
 800229c:	f7fd ff3a 	bl	8000114 <__udivsi3>
 80022a0:	0003      	movs	r3, r0
 80022a2:	0019      	movs	r1, r3
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	227f      	movs	r2, #127	; 0x7f
 80022ac:	4013      	ands	r3, r2
 80022ae:	434b      	muls	r3, r1
 80022b0:	617b      	str	r3, [r7, #20]
        break;
 80022b2:	e00d      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	481c      	ldr	r0, [pc, #112]	; (8002328 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022b8:	f7fd ff2c 	bl	8000114 <__udivsi3>
 80022bc:	0003      	movs	r3, r0
 80022be:	0019      	movs	r1, r3
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	227f      	movs	r2, #127	; 0x7f
 80022c8:	4013      	ands	r3, r2
 80022ca:	434b      	muls	r3, r1
 80022cc:	617b      	str	r3, [r7, #20]
        break;
 80022ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0f5b      	lsrs	r3, r3, #29
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	3301      	adds	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	6978      	ldr	r0, [r7, #20]
 80022e2:	f7fd ff17 	bl	8000114 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e015      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2238      	movs	r2, #56	; 0x38
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d103      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2238      	movs	r2, #56	; 0x38
 8002306:	4013      	ands	r3, r2
 8002308:	2b18      	cmp	r3, #24
 800230a:	d103      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800230c:	23fa      	movs	r3, #250	; 0xfa
 800230e:	01db      	lsls	r3, r3, #7
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	e001      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002318:	693b      	ldr	r3, [r7, #16]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_RCC_GetHCLKFreq+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002348:	f7ff fff2 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800234c:	0004      	movs	r4, r0
 800234e:	f7ff faf9 	bl	8001944 <LL_RCC_GetAPB1Prescaler>
 8002352:	0003      	movs	r3, r0
 8002354:	0b1a      	lsrs	r2, r3, #12
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	58d3      	ldr	r3, [r2, r3]
 800235c:	221f      	movs	r2, #31
 800235e:	4013      	ands	r3, r2
 8002360:	40dc      	lsrs	r4, r3
 8002362:	0023      	movs	r3, r4
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	08004818 	.word	0x08004818

08002370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002378:	2313      	movs	r3, #19
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002380:	2312      	movs	r3, #18
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	029b      	lsls	r3, r3, #10
 8002390:	4013      	ands	r3, r2
 8002392:	d100      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002394:	e0ad      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2011      	movs	r0, #17
 8002398:	183b      	adds	r3, r7, r0
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	055b      	lsls	r3, r3, #21
 80023a6:	4013      	ands	r3, r2
 80023a8:	d110      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0549      	lsls	r1, r1, #21
 80023b4:	430a      	orrs	r2, r1
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	183b      	adds	r3, r7, r0
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0049      	lsls	r1, r1, #1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023da:	f7fe ffc3 	bl	8001364 <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023e2:	e00b      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe ffbe 	bl	8001364 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d904      	bls.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023f2:	2313      	movs	r3, #19
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2203      	movs	r2, #3
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	e005      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4013      	ands	r3, r2
 8002406:	d0ed      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002408:	2313      	movs	r3, #19
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d15e      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002416:	23c0      	movs	r3, #192	; 0xc0
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4013      	ands	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d019      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	429a      	cmp	r2, r3
 800242c:	d014      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002434:	4013      	ands	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800243a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	430a      	orrs	r2, r1
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244c:	491e      	ldr	r1, [pc, #120]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800244e:	400a      	ands	r2, r1
 8002450:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d016      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe ff80 	bl	8001364 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002468:	e00c      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe ff7b 	bl	8001364 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d904      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800247a:	2313      	movs	r3, #19
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
            break;
 8002482:	e004      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d0ed      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800248e:	2313      	movs	r3, #19
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80024ac:	e016      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ae:	2312      	movs	r3, #18
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2213      	movs	r2, #19
 80024b4:	18ba      	adds	r2, r7, r2
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e00f      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	fffffcff 	.word	0xfffffcff
 80024c8:	fffeffff 	.word	0xfffeffff
 80024cc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	2312      	movs	r3, #18
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2213      	movs	r2, #19
 80024d6:	18ba      	adds	r2, r7, r2
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024dc:	2311      	movs	r3, #17
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4bb6      	ldr	r3, [pc, #728]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ea:	4bb5      	ldr	r3, [pc, #724]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ec:	49b5      	ldr	r1, [pc, #724]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fc:	4bb0      	ldr	r3, [pc, #704]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	2203      	movs	r2, #3
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4bad      	ldr	r3, [pc, #692]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250c:	430a      	orrs	r2, r1
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800251a:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	220c      	movs	r2, #12
 8002520:	4393      	bics	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4ba5      	ldr	r3, [pc, #660]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252a:	430a      	orrs	r2, r1
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002538:	4ba1      	ldr	r3, [pc, #644]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	2230      	movs	r2, #48	; 0x30
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	4b9e      	ldr	r3, [pc, #632]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002548:	430a      	orrs	r2, r1
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	4013      	ands	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002556:	4b9a      	ldr	r3, [pc, #616]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4a9b      	ldr	r2, [pc, #620]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800255c:	4013      	ands	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	4b96      	ldr	r3, [pc, #600]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002566:	430a      	orrs	r2, r1
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	4013      	ands	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	4a94      	ldr	r2, [pc, #592]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	4b8e      	ldr	r3, [pc, #568]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002586:	430a      	orrs	r2, r1
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002596:	4b8a      	ldr	r3, [pc, #552]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a4:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b6:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	4013      	ands	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d4:	4b7a      	ldr	r3, [pc, #488]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	4013      	ands	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	4a79      	ldr	r2, [pc, #484]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002602:	430a      	orrs	r2, r1
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	01db      	lsls	r3, r3, #7
 800260e:	4013      	ands	r3, r2
 8002610:	d015      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002612:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	0899      	lsrs	r1, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261e:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002620:	430a      	orrs	r2, r1
 8002622:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	0249      	lsls	r1, r1, #9
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	4013      	ands	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	4393      	bics	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265a:	430a      	orrs	r2, r1
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	039b      	lsls	r3, r3, #14
 8002666:	4013      	ands	r3, r2
 8002668:	d016      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800266a:	4b55      	ldr	r3, [pc, #340]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	4a5c      	ldr	r2, [pc, #368]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002670:	4013      	ands	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002678:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	430a      	orrs	r2, r1
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	03db      	lsls	r3, r3, #15
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0449      	lsls	r1, r1, #17
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	03db      	lsls	r3, r3, #15
 80026a0:	4013      	ands	r3, r2
 80026a2:	d016      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026a4:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	045b      	lsls	r3, r3, #17
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d106      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0449      	lsls	r1, r1, #17
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d014      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	2203      	movs	r2, #3
 80026e4:	4393      	bics	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d106      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0249      	lsls	r1, r1, #9
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	019b      	lsls	r3, r3, #6
 8002710:	4013      	ands	r3, r2
 8002712:	d014      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	220c      	movs	r2, #12
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002724:	430a      	orrs	r2, r1
 8002726:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b04      	cmp	r3, #4
 800272e:	d106      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	045b      	lsls	r3, r3, #17
 8002746:	4013      	ands	r3, r2
 8002748:	d016      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275a:	430a      	orrs	r2, r1
 800275c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	429a      	cmp	r2, r3
 8002768:	d106      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0449      	lsls	r1, r1, #17
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	4013      	ands	r3, r2
 8002782:	d016      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002794:	430a      	orrs	r2, r1
 8002796:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0449      	lsls	r1, r1, #17
 80027ae:	430a      	orrs	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027b2:	2312      	movs	r3, #18
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b006      	add	sp, #24
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	efffffff 	.word	0xefffffff
 80027c8:	fffff3ff 	.word	0xfffff3ff
 80027cc:	fffffcff 	.word	0xfffffcff
 80027d0:	fff3ffff 	.word	0xfff3ffff
 80027d4:	ffcfffff 	.word	0xffcfffff
 80027d8:	ffffcfff 	.word	0xffffcfff
 80027dc:	ffff3fff 	.word	0xffff3fff
 80027e0:	ffbfffff 	.word	0xffbfffff
 80027e4:	feffffff 	.word	0xfeffffff

080027e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d100      	bne.n	8002800 <HAL_RTC_Init+0x18>
 80027fe:	e08c      	b.n	800291a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2229      	movs	r2, #41	; 0x29
 8002804:	5c9b      	ldrb	r3, [r3, r2]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2228      	movs	r2, #40	; 0x28
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2288      	movs	r2, #136	; 0x88
 8002818:	0212      	lsls	r2, r2, #8
 800281a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f7fe fae2 	bl	8000de8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2229      	movs	r2, #41	; 0x29
 8002828:	2102      	movs	r1, #2
 800282a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2210      	movs	r2, #16
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d062      	beq.n	8002900 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	22ca      	movs	r2, #202	; 0xca
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2253      	movs	r2, #83	; 0x53
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800284a:	250f      	movs	r5, #15
 800284c:	197c      	adds	r4, r7, r5
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fb51 	bl	8002ef8 <RTC_EnterInitMode>
 8002856:	0003      	movs	r3, r0
 8002858:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800285a:	0028      	movs	r0, r5
 800285c:	183b      	adds	r3, r7, r0
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d12c      	bne.n	80028be <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	492e      	ldr	r1, [pc, #184]	; (8002928 <HAL_RTC_Init+0x140>)
 8002870:	400a      	ands	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6999      	ldr	r1, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6919      	ldr	r1, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	041a      	lsls	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80028b0:	183c      	adds	r4, r7, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 fb61 	bl	8002f7c <RTC_ExitInitMode>
 80028ba:	0003      	movs	r3, r0
 80028bc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80028be:	230f      	movs	r3, #15
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	00d2      	lsls	r2, r2, #3
 80028d4:	08d2      	lsrs	r2, r2, #3
 80028d6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6999      	ldr	r1, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	22ff      	movs	r2, #255	; 0xff
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
 80028fe:	e003      	b.n	8002908 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002900:	230f      	movs	r3, #15
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002908:	230f      	movs	r3, #15
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2229      	movs	r2, #41	; 0x29
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bdb0      	pop	{r4, r5, r7, pc}
 8002928:	fb8fffbf 	.word	0xfb8fffbf

0800292c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2228      	movs	r2, #40	; 0x28
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_RTC_SetTime+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e092      	b.n	8002a6c <HAL_RTC_SetTime+0x140>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2228      	movs	r2, #40	; 0x28
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2229      	movs	r2, #41	; 0x29
 8002952:	2102      	movs	r1, #2
 8002954:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	22ca      	movs	r2, #202	; 0xca
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2253      	movs	r2, #83	; 0x53
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002966:	2513      	movs	r5, #19
 8002968:	197c      	adds	r4, r7, r5
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fac3 	bl	8002ef8 <RTC_EnterInitMode>
 8002972:	0003      	movs	r3, r0
 8002974:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002976:	197b      	adds	r3, r7, r5
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d162      	bne.n	8002a44 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d125      	bne.n	80029d0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	4013      	ands	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fb32 	bl	8003004 <RTC_ByteToBcd2>
 80029a0:	0003      	movs	r3, r0
 80029a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fb2b 	bl	8003004 <RTC_ByteToBcd2>
 80029ae:	0003      	movs	r3, r0
 80029b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	789b      	ldrb	r3, [r3, #2]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fb23 	bl	8003004 <RTC_ByteToBcd2>
 80029be:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029c0:	0022      	movs	r2, r4
 80029c2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	78db      	ldrb	r3, [r3, #3]
 80029c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e017      	b.n	8002a00 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	4013      	ands	r3, r2
 80029da:	d102      	bne.n	80029e2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	491b      	ldr	r1, [pc, #108]	; (8002a74 <HAL_RTC_SetTime+0x148>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_RTC_SetTime+0x14c>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6999      	ldr	r1, [r3, #24]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a34:	2313      	movs	r3, #19
 8002a36:	18fc      	adds	r4, r7, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa9e 	bl	8002f7c <RTC_ExitInitMode>
 8002a40:	0003      	movs	r3, r0
 8002a42:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002a4c:	2313      	movs	r3, #19
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2229      	movs	r2, #41	; 0x29
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2228      	movs	r2, #40	; 0x28
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]

  return status;
 8002a66:	2313      	movs	r3, #19
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bdb0      	pop	{r4, r5, r7, pc}
 8002a74:	007f7f7f 	.word	0x007f7f7f
 8002a78:	fffbffff 	.word	0xfffbffff

08002a7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2228      	movs	r2, #40	; 0x28
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_RTC_SetDate+0x1a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e07e      	b.n	8002b94 <HAL_RTC_SetDate+0x118>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2228      	movs	r2, #40	; 0x28
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2229      	movs	r2, #41	; 0x29
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10e      	bne.n	8002aca <HAL_RTC_SetDate+0x4e>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d008      	beq.n	8002aca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2210      	movs	r2, #16
 8002abe:	4393      	bics	r3, r2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	330a      	adds	r3, #10
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11c      	bne.n	8002b0a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	78db      	ldrb	r3, [r3, #3]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fa95 	bl	8003004 <RTC_ByteToBcd2>
 8002ada:	0003      	movs	r3, r0
 8002adc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fa8e 	bl	8003004 <RTC_ByteToBcd2>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002aec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	789b      	ldrb	r3, [r3, #2]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fa86 	bl	8003004 <RTC_ByteToBcd2>
 8002af8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002afa:	0022      	movs	r2, r4
 8002afc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e00e      	b.n	8002b28 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	78db      	ldrb	r3, [r3, #3]
 8002b0e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b16:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002b1c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	22ca      	movs	r2, #202	; 0xca
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2253      	movs	r2, #83	; 0x53
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b38:	2513      	movs	r5, #19
 8002b3a:	197c      	adds	r4, r7, r5
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f9da 	bl	8002ef8 <RTC_EnterInitMode>
 8002b44:	0003      	movs	r3, r0
 8002b46:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002b48:	0028      	movs	r0, r5
 8002b4a:	183b      	adds	r3, r7, r0
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4910      	ldr	r1, [pc, #64]	; (8002b9c <HAL_RTC_SetDate+0x120>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b5e:	183c      	adds	r4, r7, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fa0a 	bl	8002f7c <RTC_ExitInitMode>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22ff      	movs	r2, #255	; 0xff
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b74:	2313      	movs	r3, #19
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2229      	movs	r2, #41	; 0x29
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2228      	movs	r2, #40	; 0x28
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]

  return status;
 8002b8e:	2313      	movs	r3, #19
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	781b      	ldrb	r3, [r3, #0]
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9c:	00ffff3f 	.word	0x00ffff3f

08002ba0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2228      	movs	r2, #40	; 0x28
 8002bb0:	5c9b      	ldrb	r3, [r3, r2]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_RTC_SetAlarm_IT+0x1a>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e127      	b.n	8002e0a <HAL_RTC_SetAlarm_IT+0x26a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2228      	movs	r2, #40	; 0x28
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2229      	movs	r2, #41	; 0x29
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d136      	bne.n	8002c3e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 fa0c 	bl	8003004 <RTC_ByteToBcd2>
 8002bec:	0003      	movs	r3, r0
 8002bee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fa05 	bl	8003004 <RTC_ByteToBcd2>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002bfe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	789b      	ldrb	r3, [r3, #2]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f9fd 	bl	8003004 <RTC_ByteToBcd2>
 8002c0a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c0c:	0022      	movs	r2, r4
 8002c0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c16:	431a      	orrs	r2, r3
 8002c18:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f9ef 	bl	8003004 <RTC_ByteToBcd2>
 8002c26:	0003      	movs	r3, r0
 8002c28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c2a:	0022      	movs	r2, r4
 8002c2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e022      	b.n	8002c84 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	4013      	ands	r3, r2
 8002c48:	d102      	bne.n	8002c50 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c5c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	78db      	ldrb	r3, [r3, #3]
 8002c68:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2120      	movs	r1, #32
 8002c70:	5c5b      	ldrb	r3, [r3, r1]
 8002c72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ca      	movs	r2, #202	; 0xca
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2253      	movs	r2, #83	; 0x53
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d14c      	bne.n	8002d46 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4957      	ldr	r1, [pc, #348]	; (8002e14 <HAL_RTC_SetAlarm_IT+0x274>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002ccc:	f7fe fb4a 	bl	8001364 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002cd4:	e016      	b.n	8002d04 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cd6:	f7fe fb45 	bl	8001364 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	23fa      	movs	r3, #250	; 0xfa
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d90d      	bls.n	8002d04 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2229      	movs	r2, #41	; 0x29
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e082      	b.n	8002e0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0e2      	beq.n	8002cd6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0049      	lsls	r1, r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0149      	lsls	r1, r1, #5
 8002d40:	430a      	orrs	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]
 8002d44:	e04b      	b.n	8002dde <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4931      	ldr	r1, [pc, #196]	; (8002e18 <HAL_RTC_SetAlarm_IT+0x278>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2102      	movs	r1, #2
 8002d62:	430a      	orrs	r2, r1
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002d66:	f7fe fafd 	bl	8001364 <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d6e:	e016      	b.n	8002d9e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d70:	f7fe faf8 	bl	8001364 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad2      	subs	r2, r2, r3
 8002d7a:	23fa      	movs	r3, #250	; 0xfa
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d90d      	bls.n	8002d9e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2229      	movs	r2, #41	; 0x29
 8002d8e:	2103      	movs	r1, #3
 8002d90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2228      	movs	r2, #40	; 0x28
 8002d96:	2100      	movs	r1, #0
 8002d98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e035      	b.n	8002e0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2202      	movs	r2, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	d0e2      	beq.n	8002d70 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0089      	lsls	r1, r1, #2
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0189      	lsls	r1, r1, #6
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	58d3      	ldr	r3, [r2, r3]
 8002de4:	490d      	ldr	r1, [pc, #52]	; (8002e1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0312      	lsls	r2, r2, #12
 8002dea:	4313      	orrs	r3, r2
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2229      	movs	r2, #41	; 0x29
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2228      	movs	r2, #40	; 0x28
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b009      	add	sp, #36	; 0x24
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	fffffeff 	.word	0xfffffeff
 8002e18:	fffffdff 	.word	0xfffffdff
 8002e1c:	40021800 	.word	0x40021800

08002e20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	4013      	ands	r3, r2
 8002e34:	d011      	beq.n	8002e5a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f000 f821 	bl	8002e9c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	019b      	lsls	r3, r3, #6
 8002e64:	4013      	ands	r3, r2
 8002e66:	d011      	beq.n	8002e8c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2102      	movs	r1, #2
 8002e80:	430a      	orrs	r2, r1
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f8e4 	bl	8003054 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2229      	movs	r2, #41	; 0x29
 8002e90:	2101      	movs	r1, #1
 8002e92:	5499      	strb	r1, [r3, r2]
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_RTC_WaitForSynchro+0x48>)
 8002eba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002ebc:	f7fe fa52 	bl	8001364 <HAL_GetTick>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ec4:	e00a      	b.n	8002edc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ec6:	f7fe fa4d 	bl	8001364 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	23fa      	movs	r3, #250	; 0xfa
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d901      	bls.n	8002edc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e006      	b.n	8002eea <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b004      	add	sp, #16
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	0001005f 	.word	0x0001005f

08002ef8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	4013      	ands	r3, r2
 8002f12:	d12c      	bne.n	8002f6e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	430a      	orrs	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f24:	f7fe fa1e 	bl	8001364 <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f2c:	e014      	b.n	8002f58 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f2e:	f7fe fa19 	bl	8001364 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	200f      	movs	r0, #15
 8002f3a:	183b      	adds	r3, r7, r0
 8002f3c:	1839      	adds	r1, r7, r0
 8002f3e:	7809      	ldrb	r1, [r1, #0]
 8002f40:	7019      	strb	r1, [r3, #0]
 8002f42:	23fa      	movs	r3, #250	; 0xfa
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d906      	bls.n	8002f58 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002f4a:	183b      	adds	r3, r7, r0
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2229      	movs	r2, #41	; 0x29
 8002f54:	2103      	movs	r1, #3
 8002f56:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	4013      	ands	r3, r2
 8002f62:	d104      	bne.n	8002f6e <RTC_EnterInitMode+0x76>
 8002f64:	230f      	movs	r3, #15
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d1df      	bne.n	8002f2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f6e:	230f      	movs	r3, #15
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	240f      	movs	r4, #15
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	438a      	bics	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d10d      	bne.n	8002fbe <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ff81 	bl	8002eac <HAL_RTC_WaitForSynchro>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d021      	beq.n	8002ff2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2229      	movs	r2, #41	; 0x29
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2203      	movs	r2, #3
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e019      	b.n	8002ff2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff ff6d 	bl	8002eac <HAL_RTC_WaitForSynchro>
 8002fd2:	1e03      	subs	r3, r0, #0
 8002fd4:	d007      	beq.n	8002fe6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2229      	movs	r2, #41	; 0x29
 8002fda:	2103      	movs	r1, #3
 8002fdc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002fde:	230f      	movs	r3, #15
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <RTC_ExitInitMode+0x84>)
 8002fec:	2120      	movs	r1, #32
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b005      	add	sp, #20
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	40002800 	.word	0x40002800

08003004 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003014:	230b      	movs	r3, #11
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	1dfa      	adds	r2, r7, #7
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800301e:	e008      	b.n	8003032 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003026:	220b      	movs	r2, #11
 8003028:	18bb      	adds	r3, r7, r2
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	3a0a      	subs	r2, #10
 8003030:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003032:	210b      	movs	r1, #11
 8003034:	187b      	adds	r3, r7, r1
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b09      	cmp	r3, #9
 800303a:	d8f1      	bhi.n	8003020 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	b2da      	uxtb	r2, r3
 8003044:	187b      	adds	r3, r7, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	b2db      	uxtb	r3, r3
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0a8      	b.n	80031c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	2382      	movs	r3, #130	; 0x82
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	429a      	cmp	r2, r3
 8003088:	d009      	beq.n	800309e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
 8003090:	e005      	b.n	800309e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	225d      	movs	r2, #93	; 0x5d
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	225c      	movs	r2, #92	; 0x5c
 80030b4:	2100      	movs	r1, #0
 80030b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd feda 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	225d      	movs	r2, #93	; 0x5d
 80030c4:	2102      	movs	r1, #2
 80030c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	23e0      	movs	r3, #224	; 0xe0
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e002      	b.n	80030f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	015b      	lsls	r3, r3, #5
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	23f0      	movs	r3, #240	; 0xf0
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d008      	beq.n	800310e <HAL_SPI_Init+0xaa>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	23e0      	movs	r3, #224	; 0xe0
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	429a      	cmp	r2, r3
 8003106:	d002      	beq.n	800310e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	2382      	movs	r3, #130	; 0x82
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	2384      	movs	r3, #132	; 0x84
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	400b      	ands	r3, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2102      	movs	r1, #2
 800312a:	400b      	ands	r3, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2101      	movs	r1, #1
 8003134:	400b      	ands	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6999      	ldr	r1, [r3, #24]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	400b      	ands	r3, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2138      	movs	r1, #56	; 0x38
 800314a:	400b      	ands	r3, r1
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	400b      	ands	r3, r1
 8003156:	431a      	orrs	r2, r3
 8003158:	0011      	movs	r1, r2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	2204      	movs	r2, #4
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2110      	movs	r1, #16
 800317c:	400b      	ands	r3, r1
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	2108      	movs	r1, #8
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	23f0      	movs	r3, #240	; 0xf0
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	400b      	ands	r3, r1
 8003194:	431a      	orrs	r2, r3
 8003196:	0011      	movs	r1, r2
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	015b      	lsls	r3, r3, #5
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4907      	ldr	r1, [pc, #28]	; (80031d0 <HAL_SPI_Init+0x16c>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	225d      	movs	r2, #93	; 0x5d
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b004      	add	sp, #16
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fffff7ff 	.word	0xfffff7ff

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e04a      	b.n	800327c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223d      	movs	r2, #61	; 0x3d
 80031ea:	5c9b      	ldrb	r3, [r3, r2]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	223c      	movs	r2, #60	; 0x3c
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fd fe83 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223d      	movs	r2, #61	; 0x3d
 8003206:	2102      	movs	r1, #2
 8003208:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	0019      	movs	r1, r3
 8003214:	0010      	movs	r0, r2
 8003216:	f000 f965 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2248      	movs	r2, #72	; 0x48
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223e      	movs	r2, #62	; 0x3e
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	223f      	movs	r2, #63	; 0x3f
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2241      	movs	r2, #65	; 0x41
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2242      	movs	r2, #66	; 0x42
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2243      	movs	r2, #67	; 0x43
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2244      	movs	r2, #68	; 0x44
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2245      	movs	r2, #69	; 0x45
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2246      	movs	r2, #70	; 0x46
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2247      	movs	r2, #71	; 0x47
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223d      	movs	r2, #61	; 0x3d
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2202      	movs	r2, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d021      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2202      	movs	r2, #2
 80032a8:	4013      	ands	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4252      	negs	r2, r2
 80032b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2203      	movs	r2, #3
 80032c4:	4013      	ands	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 f8f2 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e007      	b.n	80032e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f8e5 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 f8f1 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d01e      	beq.n	8003336 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2205      	movs	r2, #5
 80032fe:	4252      	negs	r2, r2
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	23c0      	movs	r3, #192	; 0xc0
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f8cb 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 800331e:	e007      	b.n	8003330 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0018      	movs	r0, r3
 8003324:	f000 f8be 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f8ca 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2208      	movs	r2, #8
 800333a:	4013      	ands	r3, r2
 800333c:	d021      	beq.n	8003382 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2208      	movs	r2, #8
 8003342:	4013      	ands	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2209      	movs	r2, #9
 800334c:	4252      	negs	r2, r2
 800334e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2203      	movs	r2, #3
 800335e:	4013      	ands	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f8a5 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 800336a:	e007      	b.n	800337c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f898 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f8a4 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2210      	movs	r2, #16
 8003386:	4013      	ands	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2210      	movs	r2, #16
 800338e:	4013      	ands	r3, r2
 8003390:	d01e      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2211      	movs	r2, #17
 8003398:	4252      	negs	r2, r2
 800339a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2208      	movs	r2, #8
 80033a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	23c0      	movs	r3, #192	; 0xc0
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f87e 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80033b8:	e007      	b.n	80033ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 f871 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f87d 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00c      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d008      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4252      	negs	r2, r2
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 f851 	bl	8003494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	4013      	ands	r3, r2
 80033f8:	d104      	bne.n	8003404 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003402:	d00b      	beq.n	800341c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	4013      	ands	r3, r2
 800340a:	d007      	beq.n	800341c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_TIM_IRQHandler+0x208>)
 8003412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f97a 	bl	8003710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4013      	ands	r3, r2
 8003424:	d00b      	beq.n	800343e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	4013      	ands	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_TIM_IRQHandler+0x20c>)
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f000 f971 	bl	8003720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	4013      	ands	r3, r2
 8003444:	d00c      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	4013      	ands	r3, r2
 800344c:	d008      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2241      	movs	r2, #65	; 0x41
 8003454:	4252      	negs	r2, r2
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 f83a 	bl	80034d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2220      	movs	r2, #32
 8003464:	4013      	ands	r3, r2
 8003466:	d00c      	beq.n	8003482 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	4013      	ands	r3, r2
 800346e:	d008      	beq.n	8003482 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	4252      	negs	r2, r2
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f93f 	bl	8003700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	ffffdf7f 	.word	0xffffdf7f
 8003490:	fffffeff 	.word	0xfffffeff

08003494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <TIM_Base_SetConfig+0x110>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00c      	beq.n	8003516 <TIM_Base_SetConfig+0x32>
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	429a      	cmp	r2, r3
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x32>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x32>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <TIM_Base_SetConfig+0x118>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2270      	movs	r2, #112	; 0x70
 800351a:	4393      	bics	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a32      	ldr	r2, [pc, #200]	; (80035f4 <TIM_Base_SetConfig+0x110>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01c      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	05db      	lsls	r3, r3, #23
 8003536:	429a      	cmp	r2, r3
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <TIM_Base_SetConfig+0x114>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <TIM_Base_SetConfig+0x118>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <TIM_Base_SetConfig+0x11c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <TIM_Base_SetConfig+0x120>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <TIM_Base_SetConfig+0x124>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x86>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <TIM_Base_SetConfig+0x128>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <TIM_Base_SetConfig+0x12c>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	4393      	bics	r3, r2
 8003582:	001a      	movs	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <TIM_Base_SetConfig+0x110>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0xde>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <TIM_Base_SetConfig+0x120>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0xde>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <TIM_Base_SetConfig+0x124>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0xde>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <TIM_Base_SetConfig+0x128>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d103      	bne.n	80035ca <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4393      	bics	r3, r2
 80035e4:	001a      	movs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]
  }
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40002000 	.word	0x40002000
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800
 8003610:	fffffcff 	.word	0xfffffcff

08003614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	223c      	movs	r2, #60	; 0x3c
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e05a      	b.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	223c      	movs	r2, #60	; 0x3c
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223d      	movs	r2, #61	; 0x3d
 8003638:	2102      	movs	r1, #2
 800363a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2270      	movs	r2, #112	; 0x70
 800366c:	4393      	bics	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d014      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	05db      	lsls	r3, r3, #23
 8003694:	429a      	cmp	r2, r3
 8003696:	d00e      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10c      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	4393      	bics	r3, r2
 80036bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	223d      	movs	r2, #61	; 0x3d
 80036d4:	2101      	movs	r1, #1
 80036d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	223c      	movs	r2, #60	; 0x3c
 80036dc:	2100      	movs	r1, #0
 80036de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	ff0fffff 	.word	0xff0fffff
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40014000 	.word	0x40014000

08003700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e046      	b.n	80037d0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2288      	movs	r2, #136	; 0x88
 8003746:	589b      	ldr	r3, [r3, r2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2284      	movs	r2, #132	; 0x84
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f7fd fbfc 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2288      	movs	r2, #136	; 0x88
 8003760:	2124      	movs	r1, #36	; 0x24
 8003762:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	438a      	bics	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0018      	movs	r0, r3
 8003780:	f000 fc26 	bl	8003fd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f8cc 	bl	8003924 <UART_SetConfig>
 800378c:	0003      	movs	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e01c      	b.n	80037d0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	490d      	ldr	r1, [pc, #52]	; (80037d8 <HAL_UART_Init+0xa8>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	212a      	movs	r1, #42	; 0x2a
 80037b2:	438a      	bics	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 fcb5 	bl	8004138 <UART_CheckIdleState>
 80037ce:	0003      	movs	r3, r0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffffb7ff 	.word	0xffffb7ff

080037dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	1dbb      	adds	r3, r7, #6
 80037ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2288      	movs	r2, #136	; 0x88
 80037f0:	589b      	ldr	r3, [r3, r2]
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d000      	beq.n	80037f8 <HAL_UART_Transmit+0x1c>
 80037f6:	e090      	b.n	800391a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_UART_Transmit+0x2a>
 80037fe:	1dbb      	adds	r3, r7, #6
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e088      	b.n	800391c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	429a      	cmp	r2, r3
 8003814:	d109      	bne.n	800382a <HAL_UART_Transmit+0x4e>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e078      	b.n	800391c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2290      	movs	r2, #144	; 0x90
 800382e:	2100      	movs	r1, #0
 8003830:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2288      	movs	r2, #136	; 0x88
 8003836:	2121      	movs	r1, #33	; 0x21
 8003838:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800383a:	f7fd fd93 	bl	8001364 <HAL_GetTick>
 800383e:	0003      	movs	r3, r0
 8003840:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1dba      	adds	r2, r7, #6
 8003846:	2154      	movs	r1, #84	; 0x54
 8003848:	8812      	ldrh	r2, [r2, #0]
 800384a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1dba      	adds	r2, r7, #6
 8003850:	2156      	movs	r1, #86	; 0x56
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	015b      	lsls	r3, r3, #5
 800385e:	429a      	cmp	r2, r3
 8003860:	d108      	bne.n	8003874 <HAL_UART_Transmit+0x98>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800387c:	e030      	b.n	80038e0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	0013      	movs	r3, r2
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	f000 fcfe 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d005      	beq.n	80038a0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2288      	movs	r2, #136	; 0x88
 8003898:	2120      	movs	r1, #32
 800389a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e03d      	b.n	800391c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	001a      	movs	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	05d2      	lsls	r2, r2, #23
 80038b2:	0dd2      	lsrs	r2, r2, #23
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3302      	adds	r3, #2
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e007      	b.n	80038ce <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2256      	movs	r2, #86	; 0x56
 80038d2:	5a9b      	ldrh	r3, [r3, r2]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b299      	uxth	r1, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2256      	movs	r2, #86	; 0x56
 80038de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2256      	movs	r2, #86	; 0x56
 80038e4:	5a9b      	ldrh	r3, [r3, r2]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1c8      	bne.n	800387e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	0013      	movs	r3, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	f000 fcc7 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2288      	movs	r2, #136	; 0x88
 8003906:	2120      	movs	r1, #32
 8003908:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e006      	b.n	800391c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2288      	movs	r2, #136	; 0x88
 8003912:	2120      	movs	r1, #32
 8003914:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b008      	add	sp, #32
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b090      	sub	sp, #64	; 0x40
 8003928:	af00      	add	r7, sp, #0
 800392a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800392c:	231a      	movs	r3, #26
 800392e:	2220      	movs	r2, #32
 8003930:	189b      	adds	r3, r3, r2
 8003932:	19db      	adds	r3, r3, r7
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	431a      	orrs	r2, r3
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4ac1      	ldr	r2, [pc, #772]	; (8003c5c <UART_SetConfig+0x338>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	430b      	orrs	r3, r1
 8003964:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4abc      	ldr	r2, [pc, #752]	; (8003c60 <UART_SetConfig+0x33c>)
 800396e:	4013      	ands	r3, r2
 8003970:	0018      	movs	r0, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	68d9      	ldr	r1, [r3, #12]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	0003      	movs	r3, r0
 800397c:	430b      	orrs	r3, r1
 800397e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4ab6      	ldr	r2, [pc, #728]	; (8003c64 <UART_SetConfig+0x340>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <UART_SetConfig+0x80>
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4ab4      	ldr	r2, [pc, #720]	; (8003c68 <UART_SetConfig+0x344>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039a0:	4313      	orrs	r3, r2
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4ab0      	ldr	r2, [pc, #704]	; (8003c6c <UART_SetConfig+0x348>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	220f      	movs	r2, #15
 80039c2:	4393      	bics	r3, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	0003      	movs	r3, r0
 80039d0:	430b      	orrs	r3, r1
 80039d2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4aa5      	ldr	r2, [pc, #660]	; (8003c70 <UART_SetConfig+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d131      	bne.n	8003a42 <UART_SetConfig+0x11e>
 80039de:	4ba5      	ldr	r3, [pc, #660]	; (8003c74 <UART_SetConfig+0x350>)
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	2203      	movs	r2, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d01d      	beq.n	8003a26 <UART_SetConfig+0x102>
 80039ea:	d823      	bhi.n	8003a34 <UART_SetConfig+0x110>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00c      	beq.n	8003a0a <UART_SetConfig+0xe6>
 80039f0:	d820      	bhi.n	8003a34 <UART_SetConfig+0x110>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <UART_SetConfig+0xd8>
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d00e      	beq.n	8003a18 <UART_SetConfig+0xf4>
 80039fa:	e01b      	b.n	8003a34 <UART_SetConfig+0x110>
 80039fc:	231b      	movs	r3, #27
 80039fe:	2220      	movs	r2, #32
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	19db      	adds	r3, r3, r7
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e154      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a0a:	231b      	movs	r3, #27
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	19db      	adds	r3, r3, r7
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e14d      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a18:	231b      	movs	r3, #27
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	19db      	adds	r3, r3, r7
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e146      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a26:	231b      	movs	r3, #27
 8003a28:	2220      	movs	r2, #32
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	2208      	movs	r2, #8
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e13f      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a34:	231b      	movs	r3, #27
 8003a36:	2220      	movs	r2, #32
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e138      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a8c      	ldr	r2, [pc, #560]	; (8003c78 <UART_SetConfig+0x354>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d131      	bne.n	8003ab0 <UART_SetConfig+0x18c>
 8003a4c:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <UART_SetConfig+0x350>)
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	220c      	movs	r2, #12
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d01d      	beq.n	8003a94 <UART_SetConfig+0x170>
 8003a58:	d823      	bhi.n	8003aa2 <UART_SetConfig+0x17e>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d00c      	beq.n	8003a78 <UART_SetConfig+0x154>
 8003a5e:	d820      	bhi.n	8003aa2 <UART_SetConfig+0x17e>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <UART_SetConfig+0x146>
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d00e      	beq.n	8003a86 <UART_SetConfig+0x162>
 8003a68:	e01b      	b.n	8003aa2 <UART_SetConfig+0x17e>
 8003a6a:	231b      	movs	r3, #27
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	19db      	adds	r3, r3, r7
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e11d      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	19db      	adds	r3, r3, r7
 8003a80:	2202      	movs	r2, #2
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e116      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a86:	231b      	movs	r3, #27
 8003a88:	2220      	movs	r2, #32
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	19db      	adds	r3, r3, r7
 8003a8e:	2204      	movs	r2, #4
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	e10f      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003a94:	231b      	movs	r3, #27
 8003a96:	2220      	movs	r2, #32
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	19db      	adds	r3, r3, r7
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e108      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003aa2:	231b      	movs	r3, #27
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2210      	movs	r2, #16
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e101      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a71      	ldr	r2, [pc, #452]	; (8003c7c <UART_SetConfig+0x358>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d131      	bne.n	8003b1e <UART_SetConfig+0x1fa>
 8003aba:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <UART_SetConfig+0x350>)
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	2230      	movs	r2, #48	; 0x30
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b30      	cmp	r3, #48	; 0x30
 8003ac4:	d01d      	beq.n	8003b02 <UART_SetConfig+0x1de>
 8003ac6:	d823      	bhi.n	8003b10 <UART_SetConfig+0x1ec>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d00c      	beq.n	8003ae6 <UART_SetConfig+0x1c2>
 8003acc:	d820      	bhi.n	8003b10 <UART_SetConfig+0x1ec>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <UART_SetConfig+0x1b4>
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d00e      	beq.n	8003af4 <UART_SetConfig+0x1d0>
 8003ad6:	e01b      	b.n	8003b10 <UART_SetConfig+0x1ec>
 8003ad8:	231b      	movs	r3, #27
 8003ada:	2220      	movs	r2, #32
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e0e6      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003ae6:	231b      	movs	r3, #27
 8003ae8:	2220      	movs	r2, #32
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e0df      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003af4:	231b      	movs	r3, #27
 8003af6:	2220      	movs	r2, #32
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	2204      	movs	r2, #4
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e0d8      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b02:	231b      	movs	r3, #27
 8003b04:	2220      	movs	r2, #32
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	19db      	adds	r3, r3, r7
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e0d1      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b10:	231b      	movs	r3, #27
 8003b12:	2220      	movs	r2, #32
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	2210      	movs	r2, #16
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e0ca      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a57      	ldr	r2, [pc, #348]	; (8003c80 <UART_SetConfig+0x35c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d106      	bne.n	8003b36 <UART_SetConfig+0x212>
 8003b28:	231b      	movs	r3, #27
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	189b      	adds	r3, r3, r2
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e0be      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <UART_SetConfig+0x360>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <UART_SetConfig+0x22a>
 8003b40:	231b      	movs	r3, #27
 8003b42:	2220      	movs	r2, #32
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e0b2      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4d      	ldr	r2, [pc, #308]	; (8003c88 <UART_SetConfig+0x364>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d106      	bne.n	8003b66 <UART_SetConfig+0x242>
 8003b58:	231b      	movs	r3, #27
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e0a6      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <UART_SetConfig+0x340>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d13e      	bne.n	8003bee <UART_SetConfig+0x2ca>
 8003b70:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <UART_SetConfig+0x350>)
 8003b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b74:	23c0      	movs	r3, #192	; 0xc0
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	22c0      	movs	r2, #192	; 0xc0
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <UART_SetConfig+0x2ae>
 8003b82:	22c0      	movs	r2, #192	; 0xc0
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d82a      	bhi.n	8003be0 <UART_SetConfig+0x2bc>
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	0112      	lsls	r2, r2, #4
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d011      	beq.n	8003bb6 <UART_SetConfig+0x292>
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d822      	bhi.n	8003be0 <UART_SetConfig+0x2bc>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <UART_SetConfig+0x284>
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	00d2      	lsls	r2, r2, #3
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <UART_SetConfig+0x2a0>
 8003ba6:	e01b      	b.n	8003be0 <UART_SetConfig+0x2bc>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2220      	movs	r2, #32
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e07e      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e077      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003bc4:	231b      	movs	r3, #27
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e070      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2208      	movs	r2, #8
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e069      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003be0:	231b      	movs	r3, #27
 8003be2:	2220      	movs	r2, #32
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	2210      	movs	r2, #16
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e062      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <UART_SetConfig+0x344>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d157      	bne.n	8003ca8 <UART_SetConfig+0x384>
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <UART_SetConfig+0x350>)
 8003bfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfc:	23c0      	movs	r3, #192	; 0xc0
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4013      	ands	r3, r2
 8003c02:	22c0      	movs	r2, #192	; 0xc0
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d040      	beq.n	8003c8c <UART_SetConfig+0x368>
 8003c0a:	22c0      	movs	r2, #192	; 0xc0
 8003c0c:	0092      	lsls	r2, r2, #2
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d843      	bhi.n	8003c9a <UART_SetConfig+0x376>
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d011      	beq.n	8003c3e <UART_SetConfig+0x31a>
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d83b      	bhi.n	8003c9a <UART_SetConfig+0x376>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <UART_SetConfig+0x30c>
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	0052      	lsls	r2, r2, #1
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <UART_SetConfig+0x328>
 8003c2e:	e034      	b.n	8003c9a <UART_SetConfig+0x376>
 8003c30:	231b      	movs	r3, #27
 8003c32:	2220      	movs	r2, #32
 8003c34:	189b      	adds	r3, r3, r2
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e03a      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003c3e:	231b      	movs	r3, #27
 8003c40:	2220      	movs	r2, #32
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	19db      	adds	r3, r3, r7
 8003c46:	2202      	movs	r2, #2
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e033      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003c4c:	231b      	movs	r3, #27
 8003c4e:	2220      	movs	r2, #32
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	2204      	movs	r2, #4
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e02c      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	cfff69f3 	.word	0xcfff69f3
 8003c60:	ffffcfff 	.word	0xffffcfff
 8003c64:	40008000 	.word	0x40008000
 8003c68:	40008400 	.word	0x40008400
 8003c6c:	11fff4ff 	.word	0x11fff4ff
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	40013c00 	.word	0x40013c00
 8003c8c:	231b      	movs	r3, #27
 8003c8e:	2220      	movs	r2, #32
 8003c90:	189b      	adds	r3, r3, r2
 8003c92:	19db      	adds	r3, r3, r7
 8003c94:	2208      	movs	r2, #8
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e00c      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003c9a:	231b      	movs	r3, #27
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	19db      	adds	r3, r3, r7
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e005      	b.n	8003cb4 <UART_SetConfig+0x390>
 8003ca8:	231b      	movs	r3, #27
 8003caa:	2220      	movs	r2, #32
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4ac1      	ldr	r2, [pc, #772]	; (8003fc0 <UART_SetConfig+0x69c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d005      	beq.n	8003cca <UART_SetConfig+0x3a6>
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4ac0      	ldr	r2, [pc, #768]	; (8003fc4 <UART_SetConfig+0x6a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d000      	beq.n	8003cca <UART_SetConfig+0x3a6>
 8003cc8:	e093      	b.n	8003df2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cca:	231b      	movs	r3, #27
 8003ccc:	2220      	movs	r2, #32
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d015      	beq.n	8003d04 <UART_SetConfig+0x3e0>
 8003cd8:	dc18      	bgt.n	8003d0c <UART_SetConfig+0x3e8>
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00d      	beq.n	8003cfa <UART_SetConfig+0x3d6>
 8003cde:	dc15      	bgt.n	8003d0c <UART_SetConfig+0x3e8>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <UART_SetConfig+0x3c6>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d005      	beq.n	8003cf4 <UART_SetConfig+0x3d0>
 8003ce8:	e010      	b.n	8003d0c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7fe fb2b 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cf2:	e014      	b.n	8003d1e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	; (8003fc8 <UART_SetConfig+0x6a4>)
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cf8:	e011      	b.n	8003d1e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fa97 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d02:	e00c      	b.n	8003d1e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d0a:	e008      	b.n	8003d1e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d10:	231a      	movs	r3, #26
 8003d12:	2220      	movs	r2, #32
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
        break;
 8003d1c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d100      	bne.n	8003d26 <UART_SetConfig+0x402>
 8003d24:	e135      	b.n	8003f92 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	4ba8      	ldr	r3, [pc, #672]	; (8003fcc <UART_SetConfig+0x6a8>)
 8003d2c:	0052      	lsls	r2, r2, #1
 8003d2e:	5ad3      	ldrh	r3, [r2, r3]
 8003d30:	0019      	movs	r1, r3
 8003d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d34:	f7fc f9ee 	bl	8000114 <__udivsi3>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	0013      	movs	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d305      	bcc.n	8003d58 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d906      	bls.n	8003d66 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003d58:	231a      	movs	r3, #26
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e044      	b.n	8003df0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d72:	4b96      	ldr	r3, [pc, #600]	; (8003fcc <UART_SetConfig+0x6a8>)
 8003d74:	0052      	lsls	r2, r2, #1
 8003d76:	5ad3      	ldrh	r3, [r2, r3]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	f7fc fb3b 	bl	8000400 <__aeabi_uldivmod>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	0e11      	lsrs	r1, r2, #24
 8003d90:	021d      	lsls	r5, r3, #8
 8003d92:	430d      	orrs	r5, r1
 8003d94:	0214      	lsls	r4, r2, #8
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	1900      	adds	r0, r0, r4
 8003da8:	4169      	adcs	r1, r5
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	2300      	movs	r3, #0
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f7fc fb22 	bl	8000400 <__aeabi_uldivmod>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc6:	23c0      	movs	r3, #192	; 0xc0
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d309      	bcc.n	8003de2 <UART_SetConfig+0x4be>
 8003dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	035b      	lsls	r3, r3, #13
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d204      	bcs.n	8003de2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e006      	b.n	8003df0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003de2:	231a      	movs	r3, #26
 8003de4:	2220      	movs	r2, #32
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	19db      	adds	r3, r3, r7
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003dee:	e0d0      	b.n	8003f92 <UART_SetConfig+0x66e>
 8003df0:	e0cf      	b.n	8003f92 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d000      	beq.n	8003e00 <UART_SetConfig+0x4dc>
 8003dfe:	e070      	b.n	8003ee2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003e00:	231b      	movs	r3, #27
 8003e02:	2220      	movs	r2, #32
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	19db      	adds	r3, r3, r7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d015      	beq.n	8003e3a <UART_SetConfig+0x516>
 8003e0e:	dc18      	bgt.n	8003e42 <UART_SetConfig+0x51e>
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d00d      	beq.n	8003e30 <UART_SetConfig+0x50c>
 8003e14:	dc15      	bgt.n	8003e42 <UART_SetConfig+0x51e>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <UART_SetConfig+0x4fc>
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d005      	beq.n	8003e2a <UART_SetConfig+0x506>
 8003e1e:	e010      	b.n	8003e42 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e20:	f7fe fa90 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003e24:	0003      	movs	r3, r0
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e28:	e014      	b.n	8003e54 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2a:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <UART_SetConfig+0x6a4>)
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e2e:	e011      	b.n	8003e54 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e30:	f7fe f9fc 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8003e34:	0003      	movs	r3, r0
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e38:	e00c      	b.n	8003e54 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e40:	e008      	b.n	8003e54 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e46:	231a      	movs	r3, #26
 8003e48:	2220      	movs	r2, #32
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	19db      	adds	r3, r3, r7
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
        break;
 8003e52:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d100      	bne.n	8003e5c <UART_SetConfig+0x538>
 8003e5a:	e09a      	b.n	8003f92 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e60:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <UART_SetConfig+0x6a8>)
 8003e62:	0052      	lsls	r2, r2, #1
 8003e64:	5ad3      	ldrh	r3, [r2, r3]
 8003e66:	0019      	movs	r1, r3
 8003e68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e6a:	f7fc f953 	bl	8000114 <__udivsi3>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	005a      	lsls	r2, r3, #1
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	18d2      	adds	r2, r2, r3
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0019      	movs	r1, r3
 8003e80:	0010      	movs	r0, r2
 8003e82:	f7fc f947 	bl	8000114 <__udivsi3>
 8003e86:	0003      	movs	r3, r0
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	2b0f      	cmp	r3, #15
 8003e8e:	d921      	bls.n	8003ed4 <UART_SetConfig+0x5b0>
 8003e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	025b      	lsls	r3, r3, #9
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d21c      	bcs.n	8003ed4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	200e      	movs	r0, #14
 8003ea0:	2420      	movs	r4, #32
 8003ea2:	1903      	adds	r3, r0, r4
 8003ea4:	19db      	adds	r3, r3, r7
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b299      	uxth	r1, r3
 8003eb8:	1903      	adds	r3, r0, r4
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	1902      	adds	r2, r0, r4
 8003ebe:	19d2      	adds	r2, r2, r7
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1902      	adds	r2, r0, r4
 8003ecc:	19d2      	adds	r2, r2, r7
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e05e      	b.n	8003f92 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	231a      	movs	r3, #26
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	189b      	adds	r3, r3, r2
 8003eda:	19db      	adds	r3, r3, r7
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e057      	b.n	8003f92 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee2:	231b      	movs	r3, #27
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	19db      	adds	r3, r3, r7
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d015      	beq.n	8003f1c <UART_SetConfig+0x5f8>
 8003ef0:	dc18      	bgt.n	8003f24 <UART_SetConfig+0x600>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d00d      	beq.n	8003f12 <UART_SetConfig+0x5ee>
 8003ef6:	dc15      	bgt.n	8003f24 <UART_SetConfig+0x600>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <UART_SetConfig+0x5de>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d005      	beq.n	8003f0c <UART_SetConfig+0x5e8>
 8003f00:	e010      	b.n	8003f24 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f02:	f7fe fa1f 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003f06:	0003      	movs	r3, r0
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f0a:	e014      	b.n	8003f36 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <UART_SetConfig+0x6a4>)
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f10:	e011      	b.n	8003f36 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe f98b 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8003f16:	0003      	movs	r3, r0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f1a:	e00c      	b.n	8003f36 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f22:	e008      	b.n	8003f36 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f28:	231a      	movs	r3, #26
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
        break;
 8003f34:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02a      	beq.n	8003f92 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f40:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <UART_SetConfig+0x6a8>)
 8003f42:	0052      	lsls	r2, r2, #1
 8003f44:	5ad3      	ldrh	r3, [r2, r3]
 8003f46:	0019      	movs	r1, r3
 8003f48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f4a:	f7fc f8e3 	bl	8000114 <__udivsi3>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	001a      	movs	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	18d2      	adds	r2, r2, r3
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	0010      	movs	r0, r2
 8003f62:	f7fc f8d7 	bl	8000114 <__udivsi3>
 8003f66:	0003      	movs	r3, r0
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	2b0f      	cmp	r3, #15
 8003f6e:	d90a      	bls.n	8003f86 <UART_SetConfig+0x662>
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	025b      	lsls	r3, r3, #9
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d205      	bcs.n	8003f86 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003f86:	231a      	movs	r3, #26
 8003f88:	2220      	movs	r2, #32
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	19db      	adds	r3, r3, r7
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	226a      	movs	r2, #106	; 0x6a
 8003f96:	2101      	movs	r1, #1
 8003f98:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2268      	movs	r2, #104	; 0x68
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	2200      	movs	r2, #0
 8003fac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003fae:	231a      	movs	r3, #26
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	781b      	ldrb	r3, [r3, #0]
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b010      	add	sp, #64	; 0x40
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	40008000 	.word	0x40008000
 8003fc4:	40008400 	.word	0x40008400
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	08004838 	.word	0x08004838

08003fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	2208      	movs	r2, #8
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <UART_AdvFeatureConfig+0x144>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	2201      	movs	r2, #1
 8004000:	4013      	ands	r3, r2
 8004002:	d00b      	beq.n	800401c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4a43      	ldr	r2, [pc, #268]	; (8004118 <UART_AdvFeatureConfig+0x148>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2202      	movs	r2, #2
 8004022:	4013      	ands	r3, r2
 8004024:	d00b      	beq.n	800403e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a3b      	ldr	r2, [pc, #236]	; (800411c <UART_AdvFeatureConfig+0x14c>)
 800402e:	4013      	ands	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	2204      	movs	r2, #4
 8004044:	4013      	ands	r3, r2
 8004046:	d00b      	beq.n	8004060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4a34      	ldr	r2, [pc, #208]	; (8004120 <UART_AdvFeatureConfig+0x150>)
 8004050:	4013      	ands	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2210      	movs	r2, #16
 8004066:	4013      	ands	r3, r2
 8004068:	d00b      	beq.n	8004082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a2c      	ldr	r2, [pc, #176]	; (8004124 <UART_AdvFeatureConfig+0x154>)
 8004072:	4013      	ands	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	2220      	movs	r2, #32
 8004088:	4013      	ands	r3, r2
 800408a:	d00b      	beq.n	80040a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <UART_AdvFeatureConfig+0x158>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	4013      	ands	r3, r2
 80040ac:	d01d      	beq.n	80040ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <UART_AdvFeatureConfig+0x15c>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	035b      	lsls	r3, r3, #13
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d10b      	bne.n	80040ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <UART_AdvFeatureConfig+0x160>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00b      	beq.n	800410c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <UART_AdvFeatureConfig+0x164>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffff7fff 	.word	0xffff7fff
 8004118:	fffdffff 	.word	0xfffdffff
 800411c:	fffeffff 	.word	0xfffeffff
 8004120:	fffbffff 	.word	0xfffbffff
 8004124:	ffffefff 	.word	0xffffefff
 8004128:	ffffdfff 	.word	0xffffdfff
 800412c:	ffefffff 	.word	0xffefffff
 8004130:	ff9fffff 	.word	0xff9fffff
 8004134:	fff7ffff 	.word	0xfff7ffff

08004138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b092      	sub	sp, #72	; 0x48
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2290      	movs	r2, #144	; 0x90
 8004144:	2100      	movs	r1, #0
 8004146:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004148:	f7fd f90c 	bl	8001364 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2208      	movs	r2, #8
 8004158:	4013      	ands	r3, r2
 800415a:	2b08      	cmp	r3, #8
 800415c:	d12d      	bne.n	80041ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	0391      	lsls	r1, r2, #14
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4a47      	ldr	r2, [pc, #284]	; (8004284 <UART_CheckIdleState+0x14c>)
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	f000 f88e 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 8004170:	1e03      	subs	r3, r0, #0
 8004172:	d022      	beq.n	80041ba <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004174:	f3ef 8310 	mrs	r3, PRIMASK
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
 800417e:	2301      	movs	r3, #1
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	f383 8810 	msr	PRIMASK, r3
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	438a      	bics	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2288      	movs	r2, #136	; 0x88
 80041aa:	2120      	movs	r1, #32
 80041ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2284      	movs	r2, #132	; 0x84
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e060      	b.n	800427c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d146      	bne.n	8004256 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	03d1      	lsls	r1, r2, #15
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <UART_CheckIdleState+0x14c>)
 80041d2:	9200      	str	r2, [sp, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f000 f859 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d03b      	beq.n	8004256 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041de:	f3ef 8310 	mrs	r3, PRIMASK
 80041e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80041e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4922      	ldr	r1, [pc, #136]	; (8004288 <UART_CheckIdleState+0x150>)
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004210:	f3ef 8310 	mrs	r3, PRIMASK
 8004214:	61bb      	str	r3, [r7, #24]
  return(result);
 8004216:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
 800421a:	2301      	movs	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	438a      	bics	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	228c      	movs	r2, #140	; 0x8c
 8004246:	2120      	movs	r1, #32
 8004248:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2284      	movs	r2, #132	; 0x84
 800424e:	2100      	movs	r1, #0
 8004250:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e012      	b.n	800427c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2288      	movs	r2, #136	; 0x88
 800425a:	2120      	movs	r1, #32
 800425c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	228c      	movs	r2, #140	; 0x8c
 8004262:	2120      	movs	r1, #32
 8004264:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2284      	movs	r2, #132	; 0x84
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b010      	add	sp, #64	; 0x40
 8004282:	bd80      	pop	{r7, pc}
 8004284:	01ffffff 	.word	0x01ffffff
 8004288:	fffffedf 	.word	0xfffffedf

0800428c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	e051      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	3301      	adds	r3, #1
 80042a2:	d04e      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd f85e 	bl	8001364 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e051      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2204      	movs	r2, #4
 80042c6:	4013      	ands	r3, r2
 80042c8:	d03b      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d038      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d035      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2208      	movs	r2, #8
 80042de:	4013      	ands	r3, r2
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d111      	bne.n	8004308 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 f83c 	bl	800436c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2290      	movs	r2, #144	; 0x90
 80042f8:	2108      	movs	r1, #8
 80042fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2284      	movs	r2, #132	; 0x84
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e02c      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	401a      	ands	r2, r3
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	429a      	cmp	r2, r3
 800431a:	d112      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f81f 	bl	800436c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2290      	movs	r2, #144	; 0x90
 8004332:	2120      	movs	r1, #32
 8004334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2284      	movs	r2, #132	; 0x84
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	425a      	negs	r2, r3
 8004352:	4153      	adcs	r3, r2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	001a      	movs	r2, r3
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d09e      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	617b      	str	r3, [r7, #20]
  return(result);
 800437a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4926      	ldr	r1, [pc, #152]	; (8004430 <UART_EndRxTransfer+0xc4>)
 8004396:	400a      	ands	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	623b      	str	r3, [r7, #32]
  return(result);
 80043ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 80043b0:	2301      	movs	r3, #1
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	491b      	ldr	r1, [pc, #108]	; (8004434 <UART_EndRxTransfer+0xc8>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d118      	bne.n	8004412 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e0:	f3ef 8310 	mrs	r3, PRIMASK
 80043e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	2301      	movs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2110      	movs	r1, #16
 8004402:	438a      	bics	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	228c      	movs	r2, #140	; 0x8c
 8004416:	2120      	movs	r1, #32
 8004418:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	b00e      	add	sp, #56	; 0x38
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	fffffedf 	.word	0xfffffedf
 8004434:	effffffe 	.word	0xeffffffe

08004438 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2284      	movs	r2, #132	; 0x84
 8004444:	5c9b      	ldrb	r3, [r3, r2]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UARTEx_DisableFifoMode+0x16>
 800444a:	2302      	movs	r3, #2
 800444c:	e027      	b.n	800449e <HAL_UARTEx_DisableFifoMode+0x66>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2284      	movs	r2, #132	; 0x84
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2288      	movs	r2, #136	; 0x88
 800445a:	2124      	movs	r1, #36	; 0x24
 800445c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	438a      	bics	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800447a:	4013      	ands	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2288      	movs	r2, #136	; 0x88
 8004490:	2120      	movs	r1, #32
 8004492:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2284      	movs	r2, #132	; 0x84
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b004      	add	sp, #16
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	dfffffff 	.word	0xdfffffff

080044ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2284      	movs	r2, #132	; 0x84
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e02e      	b.n	8004522 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2284      	movs	r2, #132	; 0x84
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2288      	movs	r2, #136	; 0x88
 80044d0:	2124      	movs	r1, #36	; 0x24
 80044d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2101      	movs	r1, #1
 80044e8:	438a      	bics	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	08d9      	lsrs	r1, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f854 	bl	80045b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2288      	movs	r2, #136	; 0x88
 8004514:	2120      	movs	r1, #32
 8004516:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2284      	movs	r2, #132	; 0x84
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b004      	add	sp, #16
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2284      	movs	r2, #132	; 0x84
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004540:	2302      	movs	r3, #2
 8004542:	e02f      	b.n	80045a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2284      	movs	r2, #132	; 0x84
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2288      	movs	r2, #136	; 0x88
 8004550:	2124      	movs	r1, #36	; 0x24
 8004552:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	438a      	bics	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004574:	4013      	ands	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f000 f813 	bl	80045b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2288      	movs	r2, #136	; 0x88
 8004596:	2120      	movs	r1, #32
 8004598:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2284      	movs	r2, #132	; 0x84
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	f1ffffff 	.word	0xf1ffffff

080045b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	226a      	movs	r2, #106	; 0x6a
 80045c4:	2101      	movs	r1, #1
 80045c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2268      	movs	r2, #104	; 0x68
 80045cc:	2101      	movs	r1, #1
 80045ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045d0:	e043      	b.n	800465a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045d2:	260f      	movs	r6, #15
 80045d4:	19bb      	adds	r3, r7, r6
 80045d6:	2208      	movs	r2, #8
 80045d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045da:	200e      	movs	r0, #14
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	2208      	movs	r2, #8
 80045e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	0e5b      	lsrs	r3, r3, #25
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	240d      	movs	r4, #13
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	2107      	movs	r1, #7
 80045f2:	400a      	ands	r2, r1
 80045f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	0f5b      	lsrs	r3, r3, #29
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	250c      	movs	r5, #12
 8004602:	197b      	adds	r3, r7, r5
 8004604:	2107      	movs	r1, #7
 8004606:	400a      	ands	r2, r1
 8004608:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800460a:	183b      	adds	r3, r7, r0
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	197a      	adds	r2, r7, r5
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	4914      	ldr	r1, [pc, #80]	; (8004664 <UARTEx_SetNbDataToProcess+0xb4>)
 8004614:	5c8a      	ldrb	r2, [r1, r2]
 8004616:	435a      	muls	r2, r3
 8004618:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800461a:	197b      	adds	r3, r7, r5
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <UARTEx_SetNbDataToProcess+0xb8>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004622:	0019      	movs	r1, r3
 8004624:	f7fb fe00 	bl	8000228 <__divsi3>
 8004628:	0003      	movs	r3, r0
 800462a:	b299      	uxth	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	226a      	movs	r2, #106	; 0x6a
 8004630:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004632:	19bb      	adds	r3, r7, r6
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	193a      	adds	r2, r7, r4
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	490a      	ldr	r1, [pc, #40]	; (8004664 <UARTEx_SetNbDataToProcess+0xb4>)
 800463c:	5c8a      	ldrb	r2, [r1, r2]
 800463e:	435a      	muls	r2, r3
 8004640:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004642:	193b      	adds	r3, r7, r4
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <UARTEx_SetNbDataToProcess+0xb8>)
 8004648:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464a:	0019      	movs	r1, r3
 800464c:	f7fb fdec 	bl	8000228 <__divsi3>
 8004650:	0003      	movs	r3, r0
 8004652:	b299      	uxth	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2268      	movs	r2, #104	; 0x68
 8004658:	5299      	strh	r1, [r3, r2]
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b005      	add	sp, #20
 8004660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	08004850 	.word	0x08004850
 8004668:	08004858 	.word	0x08004858

0800466c <memset>:
 800466c:	0003      	movs	r3, r0
 800466e:	1882      	adds	r2, r0, r2
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	7019      	strb	r1, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	2600      	movs	r6, #0
 8004680:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x38>)
 8004682:	4d0d      	ldr	r5, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004684:	1b64      	subs	r4, r4, r5
 8004686:	10a4      	asrs	r4, r4, #2
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	2600      	movs	r6, #0
 800468e:	f000 f883 	bl	8004798 <_init>
 8004692:	4c0a      	ldr	r4, [pc, #40]	; (80046bc <__libc_init_array+0x40>)
 8004694:	4d0a      	ldr	r5, [pc, #40]	; (80046c0 <__libc_init_array+0x44>)
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	00b3      	lsls	r3, r6, #2
 80046a2:	58eb      	ldr	r3, [r5, r3]
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	00b3      	lsls	r3, r6, #2
 80046ac:	58eb      	ldr	r3, [r5, r3]
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	08004868 	.word	0x08004868
 80046b8:	08004868 	.word	0x08004868
 80046bc:	08004870 	.word	0x08004870
 80046c0:	08004868 	.word	0x08004868

080046c4 <__retarget_lock_acquire_recursive>:
 80046c4:	4770      	bx	lr

080046c6 <__retarget_lock_release_recursive>:
 80046c6:	4770      	bx	lr

080046c8 <register_fini>:
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <register_fini+0x10>)
 80046ca:	b510      	push	{r4, lr}
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <register_fini+0xe>
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <register_fini+0x14>)
 80046d2:	f000 f805 	bl	80046e0 <atexit>
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	00000000 	.word	0x00000000
 80046dc:	080046f1 	.word	0x080046f1

080046e0 <atexit>:
 80046e0:	2300      	movs	r3, #0
 80046e2:	b510      	push	{r4, lr}
 80046e4:	0001      	movs	r1, r0
 80046e6:	001a      	movs	r2, r3
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f815 	bl	8004718 <__register_exitproc>
 80046ee:	bd10      	pop	{r4, pc}

080046f0 <__libc_fini_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4c07      	ldr	r4, [pc, #28]	; (8004710 <__libc_fini_array+0x20>)
 80046f4:	4d07      	ldr	r5, [pc, #28]	; (8004714 <__libc_fini_array+0x24>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	d102      	bne.n	8004704 <__libc_fini_array+0x14>
 80046fe:	f000 f851 	bl	80047a4 <_fini>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	3c01      	subs	r4, #1
 8004706:	00a3      	lsls	r3, r4, #2
 8004708:	58eb      	ldr	r3, [r5, r3]
 800470a:	4798      	blx	r3
 800470c:	e7f5      	b.n	80046fa <__libc_fini_array+0xa>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	08004874 	.word	0x08004874
 8004714:	08004870 	.word	0x08004870

08004718 <__register_exitproc>:
 8004718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800471a:	4f1c      	ldr	r7, [pc, #112]	; (800478c <__register_exitproc+0x74>)
 800471c:	0004      	movs	r4, r0
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	0016      	movs	r6, r2
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	9100      	str	r1, [sp, #0]
 8004726:	f7ff ffcd 	bl	80046c4 <__retarget_lock_acquire_recursive>
 800472a:	4a19      	ldr	r2, [pc, #100]	; (8004790 <__register_exitproc+0x78>)
 800472c:	6813      	ldr	r3, [r2, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <__register_exitproc+0x1e>
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <__register_exitproc+0x7c>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	2a1f      	cmp	r2, #31
 800473c:	dd04      	ble.n	8004748 <__register_exitproc+0x30>
 800473e:	f7ff ffc2 	bl	80046c6 <__retarget_lock_release_recursive>
 8004742:	2001      	movs	r0, #1
 8004744:	4240      	negs	r0, r0
 8004746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004748:	2c00      	cmp	r4, #0
 800474a:	d014      	beq.n	8004776 <__register_exitproc+0x5e>
 800474c:	0091      	lsls	r1, r2, #2
 800474e:	1859      	adds	r1, r3, r1
 8004750:	000f      	movs	r7, r1
 8004752:	3788      	adds	r7, #136	; 0x88
 8004754:	603e      	str	r6, [r7, #0]
 8004756:	2701      	movs	r7, #1
 8004758:	001e      	movs	r6, r3
 800475a:	4097      	lsls	r7, r2
 800475c:	3685      	adds	r6, #133	; 0x85
 800475e:	36ff      	adds	r6, #255	; 0xff
 8004760:	6875      	ldr	r5, [r6, #4]
 8004762:	31fc      	adds	r1, #252	; 0xfc
 8004764:	433d      	orrs	r5, r7
 8004766:	6075      	str	r5, [r6, #4]
 8004768:	9d01      	ldr	r5, [sp, #4]
 800476a:	60cd      	str	r5, [r1, #12]
 800476c:	2c02      	cmp	r4, #2
 800476e:	d102      	bne.n	8004776 <__register_exitproc+0x5e>
 8004770:	68b1      	ldr	r1, [r6, #8]
 8004772:	4339      	orrs	r1, r7
 8004774:	60b1      	str	r1, [r6, #8]
 8004776:	1c51      	adds	r1, r2, #1
 8004778:	6059      	str	r1, [r3, #4]
 800477a:	3202      	adds	r2, #2
 800477c:	9900      	ldr	r1, [sp, #0]
 800477e:	0092      	lsls	r2, r2, #2
 8004780:	50d1      	str	r1, [r2, r3]
 8004782:	f7ff ffa0 	bl	80046c6 <__retarget_lock_release_recursive>
 8004786:	2000      	movs	r0, #0
 8004788:	e7dd      	b.n	8004746 <__register_exitproc+0x2e>
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000010 	.word	0x20000010
 8004790:	20000364 	.word	0x20000364
 8004794:	20000368 	.word	0x20000368

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
