
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001234c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002004  08012408  08012408  00022408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801440c  0801440c  000306d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801440c  0801440c  0002440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014414  08014414  000306d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014414  08014414  00024414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801441c  0801441c  0002441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d0  20000000  08014420  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200006d0  08014af0  000306d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  08014af0  00030f08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001989d  00000000  00000000  0003073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398e  00000000  00000000  00049fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  0004d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d5  00000000  00000000  0004f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217ab  00000000  00000000  0005044d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e560  00000000  00000000  00071bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad93  00000000  00000000  00090158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071dc  00000000  00000000  0015aeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001620c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d0 	.word	0x200006d0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080123f0 	.word	0x080123f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006d4 	.word	0x200006d4
 8000100:	080123f0 	.word	0x080123f0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08013ea4 	.word	0x08013ea4
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 fb0b 	bl	8003bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 fa35 	bl	8002a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fcc7 	bl	8002f48 <MX_GPIO_Init>
  MX_RTC_Init();
 80025ba:	f000 fa87 	bl	8002acc <MX_RTC_Init>
  MX_TIM6_Init();
 80025be:	f000 fb67 	bl	8002c90 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c2:	f000 fb27 	bl	8002c14 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c6:	f000 fba1 	bl	8002d0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ca:	f000 fbed 	bl	8002da8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025ce:	f000 fc39 	bl	8002e44 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d2:	f000 fc85 	bl	8002ee0 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025d6:	4bb0      	ldr	r3, [pc, #704]	; (8002898 <main+0x2f0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fdb8 	bl	8003150 <send_debug_logs>

  my_tim_init () ;
 80025e0:	f000 feee 	bl	80033c0 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 80025e4:	2002      	movs	r0, #2
 80025e6:	f000 fde3 	bl	80031b0 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 80025ea:	f000 fe13 	bl	8003214 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <main+0x2f4>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f006 fe69 	bl	80092c8 <my_gnss_acq_coordinates>
 80025f6:	0003      	movs	r3, r0
 80025f8:	001a      	movs	r2, r3
 80025fa:	4ba9      	ldr	r3, [pc, #676]	; (80028a0 <main+0x2f8>)
 80025fc:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 80025fe:	f000 fe23 	bl	8003248 <my_gnss_sw_off>
  sprintf ( dbg_payload , "%s,%d,fix_mode=%h,pdop=%f,acq_time=%u" , __FILE__ , __LINE__ , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time ) ;
 8002602:	4ba6      	ldr	r3, [pc, #664]	; (800289c <main+0x2f4>)
 8002604:	7c1b      	ldrb	r3, [r3, #16]
 8002606:	001d      	movs	r5, r3
 8002608:	4ba4      	ldr	r3, [pc, #656]	; (800289c <main+0x2f4>)
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	49a3      	ldr	r1, [pc, #652]	; (800289c <main+0x2f4>)
 8002610:	8a49      	ldrh	r1, [r1, #18]
 8002612:	000e      	movs	r6, r1
 8002614:	4ca3      	ldr	r4, [pc, #652]	; (80028a4 <main+0x2fc>)
 8002616:	49a4      	ldr	r1, [pc, #656]	; (80028a8 <main+0x300>)
 8002618:	48a4      	ldr	r0, [pc, #656]	; (80028ac <main+0x304>)
 800261a:	9604      	str	r6, [sp, #16]
 800261c:	9202      	str	r2, [sp, #8]
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	9500      	str	r5, [sp, #0]
 8002622:	23a4      	movs	r3, #164	; 0xa4
 8002624:	0022      	movs	r2, r4
 8002626:	f009 f8cb 	bl	800b7c0 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800262a:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <main+0x304>)
 800262c:	0018      	movs	r0, r3
 800262e:	f000 fd8f 	bl	8003150 <send_debug_logs>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002632:	4b9f      	ldr	r3, [pc, #636]	; (80028b0 <main+0x308>)
 8002634:	0018      	movs	r0, r3
 8002636:	f006 ffc5 	bl	80095c4 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800263a:	4a9a      	ldr	r2, [pc, #616]	; (80028a4 <main+0x2fc>)
 800263c:	499d      	ldr	r1, [pc, #628]	; (80028b4 <main+0x30c>)
 800263e:	489b      	ldr	r0, [pc, #620]	; (80028ac <main+0x304>)
 8002640:	4b9b      	ldr	r3, [pc, #620]	; (80028b0 <main+0x308>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	23a7      	movs	r3, #167	; 0xa7
 8002646:	f009 f8bb 	bl	800b7c0 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800264a:	4b98      	ldr	r3, [pc, #608]	; (80028ac <main+0x304>)
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fd7f 	bl	8003150 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <main+0x2f8>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4053      	eors	r3, r2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d027      	beq.n	80026b0 <main+0x108>
  {
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 8002660:	23e1      	movs	r3, #225	; 0xe1
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	0018      	movs	r0, r3
 8002666:	f006 ffef 	bl	8009648 <my_rtc_set_alarm>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d020      	beq.n	80026b0 <main+0x108>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800266e:	4a8d      	ldr	r2, [pc, #564]	; (80028a4 <main+0x2fc>)
 8002670:	4991      	ldr	r1, [pc, #580]	; (80028b8 <main+0x310>)
 8002672:	488e      	ldr	r0, [pc, #568]	; (80028ac <main+0x304>)
 8002674:	23ad      	movs	r3, #173	; 0xad
 8002676:	f009 f8a3 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800267a:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <main+0x304>)
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fd67 	bl	8003150 <send_debug_logs>
		  my_tim_stop () ;
 8002682:	f000 feb9 	bl	80033f8 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <main+0x314>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 800268c:	f001 ff30 	bl	80044f0 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002690:	4b87      	ldr	r3, [pc, #540]	; (80028b0 <main+0x308>)
 8002692:	0018      	movs	r0, r3
 8002694:	f006 ff96 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002698:	4a82      	ldr	r2, [pc, #520]	; (80028a4 <main+0x2fc>)
 800269a:	4986      	ldr	r1, [pc, #536]	; (80028b4 <main+0x30c>)
 800269c:	4883      	ldr	r0, [pc, #524]	; (80028ac <main+0x304>)
 800269e:	4b84      	ldr	r3, [pc, #528]	; (80028b0 <main+0x308>)
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	23b3      	movs	r3, #179	; 0xb3
 80026a4:	f009 f88c 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <main+0x304>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fd50 	bl	8003150 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026b0:	f006 fd64 	bl	800917c <my_astro_init>
 80026b4:	0003      	movs	r3, r0
 80026b6:	001a      	movs	r2, r3
 80026b8:	2301      	movs	r3, #1
 80026ba:	4053      	eors	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01e      	beq.n	8002700 <main+0x158>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <main+0x308>)
 80026c4:	0018      	movs	r0, r3
 80026c6:	f006 ff7d 	bl	80095c4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026ca:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <main+0x2fc>)
 80026cc:	497c      	ldr	r1, [pc, #496]	; (80028c0 <main+0x318>)
 80026ce:	4877      	ldr	r0, [pc, #476]	; (80028ac <main+0x304>)
 80026d0:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <main+0x308>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	23bb      	movs	r3, #187	; 0xbb
 80026d6:	f009 f873 	bl	800b7c0 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <main+0x304>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fd37 	bl	8003150 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 80026e2:	f001 fc30 	bl	8003f46 <HAL_NVIC_SystemReset>
 80026e6:	e079      	b.n	80027dc <main+0x234>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026e8:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <main+0x2fc>)
 80026ea:	4976      	ldr	r1, [pc, #472]	; (80028c4 <main+0x31c>)
 80026ec:	486f      	ldr	r0, [pc, #444]	; (80028ac <main+0x304>)
 80026ee:	23c3      	movs	r3, #195	; 0xc3
 80026f0:	f009 f866 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026f4:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <main+0x304>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fd2a 	bl	8003150 <send_debug_logs>
		  my_astro_handle_evt () ;
 80026fc:	f006 fd9e 	bl	800923c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002700:	f000 fe4c 	bl	800339c <my_astro_evt_pin>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d1ef      	bne.n	80026e8 <main+0x140>
	  }
	  sprintf ( my_astro_payload , "%u,%u,%s" , (uint16_t) fix3d.pdop , fix3d.acq_time , fv ) ;
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <main+0x2f4>)
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0010      	movs	r0, r2
 8002710:	0019      	movs	r1, r3
 8002712:	f7fd ff15 	bl	8000540 <__aeabi_d2uiz>
 8002716:	0003      	movs	r3, r0
 8002718:	b29b      	uxth	r3, r3
 800271a:	001a      	movs	r2, r3
 800271c:	4b5f      	ldr	r3, [pc, #380]	; (800289c <main+0x2f4>)
 800271e:	8a5b      	ldrh	r3, [r3, #18]
 8002720:	001c      	movs	r4, r3
 8002722:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <main+0x320>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4969      	ldr	r1, [pc, #420]	; (80028cc <main+0x324>)
 8002728:	4869      	ldr	r0, [pc, #420]	; (80028d0 <main+0x328>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	0023      	movs	r3, r4
 800272e:	f009 f847 	bl	800b7c0 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload_id: %u, %s" , __FILE__ , __LINE__ , my_astro_payload_id , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002732:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <main+0x32c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	001c      	movs	r4, r3
 8002738:	4a5a      	ldr	r2, [pc, #360]	; (80028a4 <main+0x2fc>)
 800273a:	4967      	ldr	r1, [pc, #412]	; (80028d8 <main+0x330>)
 800273c:	485b      	ldr	r0, [pc, #364]	; (80028ac <main+0x304>)
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <main+0x328>)
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	9400      	str	r4, [sp, #0]
 8002744:	23c8      	movs	r3, #200	; 0xc8
 8002746:	f009 f83b 	bl	800b7c0 <sprintf>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800274a:	4b54      	ldr	r3, [pc, #336]	; (800289c <main+0x2f4>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b53      	ldr	r3, [pc, #332]	; (800289c <main+0x2f4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f006 fda7 	bl	80092a8 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 800275a:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <main+0x32c>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	b291      	uxth	r1, r2
 8002762:	4a5c      	ldr	r2, [pc, #368]	; (80028d4 <main+0x32c>)
 8002764:	8011      	strh	r1, [r2, #0]
 8002766:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <main+0x328>)
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f006 fd3e 	bl	80091ec <my_astro_add_payload_2_queue>
	  send_debug_logs ( dbg_payload ) ;
 8002770:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <main+0x304>)
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fcec 	bl	8003150 <send_debug_logs>
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 8002778:	23e1      	movs	r3, #225	; 0xe1
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	0018      	movs	r0, r3
 800277e:	f006 ff63 	bl	8009648 <my_rtc_set_alarm>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d02a      	beq.n	80027dc <main+0x234>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <main+0x308>)
 8002788:	0018      	movs	r0, r3
 800278a:	f006 ff1b 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800278e:	4a45      	ldr	r2, [pc, #276]	; (80028a4 <main+0x2fc>)
 8002790:	4952      	ldr	r1, [pc, #328]	; (80028dc <main+0x334>)
 8002792:	4846      	ldr	r0, [pc, #280]	; (80028ac <main+0x304>)
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <main+0x308>)
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	23cf      	movs	r3, #207	; 0xcf
 800279a:	f009 f811 	bl	800b7c0 <sprintf>
		  my_tim_stop () ;
 800279e:	f000 fe2b 	bl	80033f8 <my_tim_stop>
		  HAL_SuspendTick () ;
 80027a2:	f001 fabb 	bl	8003d1c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <main+0x314>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	01db      	lsls	r3, r3, #7
 80027b0:	2102      	movs	r1, #2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 fe64 	bl	8004480 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80027b8:	f001 fabe 	bl	8003d38 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027bc:	4b3c      	ldr	r3, [pc, #240]	; (80028b0 <main+0x308>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f006 ff00 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80027c4:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <main+0x2fc>)
 80027c6:	493b      	ldr	r1, [pc, #236]	; (80028b4 <main+0x30c>)
 80027c8:	4838      	ldr	r0, [pc, #224]	; (80028ac <main+0x304>)
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <main+0x308>)
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	23d6      	movs	r3, #214	; 0xd6
 80027d0:	f008 fff6 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <main+0x304>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 fcba 	bl	8003150 <send_debug_logs>
	  }
  }
  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 80027dc:	23e1      	movs	r3, #225	; 0xe1
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	0018      	movs	r0, r3
 80027e2:	f006 ff31 	bl	8009648 <my_rtc_set_alarm>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d037      	beq.n	800285a <main+0x2b2>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <main+0x308>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f006 fee9 	bl	80095c4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80027f2:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <main+0x2fc>)
 80027f4:	4939      	ldr	r1, [pc, #228]	; (80028dc <main+0x334>)
 80027f6:	482d      	ldr	r0, [pc, #180]	; (80028ac <main+0x304>)
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <main+0x308>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	23dd      	movs	r3, #221	; 0xdd
 80027fe:	f008 ffdf 	bl	800b7c0 <sprintf>
	  my_tim_stop () ;
 8002802:	f000 fdf9 	bl	80033f8 <my_tim_stop>
	  HAL_SuspendTick () ;
 8002806:	f001 fa89 	bl	8003d1c <HAL_SuspendTick>
	  my_rtc_alarm_flag = false ;
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <main+0x314>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	01db      	lsls	r3, r3, #7
 8002814:	2102      	movs	r1, #2
 8002816:	0018      	movs	r0, r3
 8002818:	f001 fe32 	bl	8004480 <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 800281c:	f001 fa8c 	bl	8003d38 <HAL_ResumeTick>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <main+0x308>)
 8002822:	0018      	movs	r0, r3
 8002824:	f006 fece 	bl	80095c4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002828:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <main+0x2fc>)
 800282a:	4922      	ldr	r1, [pc, #136]	; (80028b4 <main+0x30c>)
 800282c:	481f      	ldr	r0, [pc, #124]	; (80028ac <main+0x304>)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <main+0x308>)
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	23e4      	movs	r3, #228	; 0xe4
 8002834:	f008 ffc4 	bl	800b7c0 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <main+0x304>)
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fc88 	bl	8003150 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002840:	e00b      	b.n	800285a <main+0x2b2>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <main+0x2fc>)
 8002844:	491f      	ldr	r1, [pc, #124]	; (80028c4 <main+0x31c>)
 8002846:	4819      	ldr	r0, [pc, #100]	; (80028ac <main+0x304>)
 8002848:	23ef      	movs	r3, #239	; 0xef
 800284a:	f008 ffb9 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <main+0x304>)
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fc7d 	bl	8003150 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002856:	f006 fcf1 	bl	800923c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800285a:	f000 fd9f 	bl	800339c <my_astro_evt_pin>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d1ef      	bne.n	8002842 <main+0x29a>
	  }
	  if ( my_rtc_alarm_flag )
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <main+0x314>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <main+0x2c4>
 800286a:	e08a      	b.n	8002982 <main+0x3da>
	  {
		  my_rtc_alarm_flag = false ;
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <main+0x314>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002872:	f000 fccf 	bl	8003214 <my_gnss_sw_on>
		  if ( my_gnss_acq_coordinates ( &fix3d ) )
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <main+0x2f4>)
 8002878:	0018      	movs	r0, r3
 800287a:	f006 fd25 	bl	80092c8 <my_gnss_acq_coordinates>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d030      	beq.n	80028e4 <main+0x33c>
		  {
			  sprintf ( dbg_payload , "%s,%d,No 3D Fix" , __FILE__ , __LINE__ ) ;
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <main+0x2fc>)
 8002884:	4916      	ldr	r1, [pc, #88]	; (80028e0 <main+0x338>)
 8002886:	4809      	ldr	r0, [pc, #36]	; (80028ac <main+0x304>)
 8002888:	23f9      	movs	r3, #249	; 0xf9
 800288a:	f008 ff99 	bl	800b7c0 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <main+0x304>)
 8002890:	0018      	movs	r0, r3
 8002892:	f000 fc5d 	bl	8003150 <send_debug_logs>
 8002896:	e02f      	b.n	80028f8 <main+0x350>
 8002898:	20000000 	.word	0x20000000
 800289c:	20000bd0 	.word	0x20000bd0
 80028a0:	20000be9 	.word	0x20000be9
 80028a4:	08012430 	.word	0x08012430
 80028a8:	08012444 	.word	0x08012444
 80028ac:	20000a18 	.word	0x20000a18
 80028b0:	20000b14 	.word	0x20000b14
 80028b4:	0801246c 	.word	0x0801246c
 80028b8:	08012478 	.word	0x08012478
 80028bc:	20000be8 	.word	0x20000be8
 80028c0:	08012498 	.word	0x08012498
 80028c4:	080124b8 	.word	0x080124b8
 80028c8:	20000004 	.word	0x20000004
 80028cc:	080124d0 	.word	0x080124d0
 80028d0:	20000b2c 	.word	0x20000b2c
 80028d4:	20000b28 	.word	0x20000b28
 80028d8:	080124dc 	.word	0x080124dc
 80028dc:	080124f8 	.word	0x080124f8
 80028e0:	0801252c 	.word	0x0801252c
		  }
		  else
		  {
			  sprintf ( dbg_payload , "%s,%d,3D Fix" , __FILE__ , __LINE__ ) ;
 80028e4:	4a43      	ldr	r2, [pc, #268]	; (80029f4 <main+0x44c>)
 80028e6:	4944      	ldr	r1, [pc, #272]	; (80029f8 <main+0x450>)
 80028e8:	4844      	ldr	r0, [pc, #272]	; (80029fc <main+0x454>)
 80028ea:	23fe      	movs	r3, #254	; 0xfe
 80028ec:	f008 ff68 	bl	800b7c0 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 80028f0:	4b42      	ldr	r3, [pc, #264]	; (80029fc <main+0x454>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fc2c 	bl	8003150 <send_debug_logs>
		  }
		  my_gnss_sw_off () ;
 80028f8:	f000 fca6 	bl	8003248 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028fc:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <main+0x458>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f006 fe60 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002904:	2304      	movs	r3, #4
 8002906:	33ff      	adds	r3, #255	; 0xff
 8002908:	001c      	movs	r4, r3
 800290a:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <main+0x44c>)
 800290c:	493d      	ldr	r1, [pc, #244]	; (8002a04 <main+0x45c>)
 800290e:	483b      	ldr	r0, [pc, #236]	; (80029fc <main+0x454>)
 8002910:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <main+0x458>)
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	0023      	movs	r3, r4
 8002916:	f008 ff53 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <main+0x454>)
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fc17 	bl	8003150 <send_debug_logs>
		  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <main+0x460>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <main+0x460>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f006 fcbb 	bl	80092a8 <my_astro_write_coordinates>
		  sprintf ( my_astro_payload , "%u,%u,%ld,%ld" , (uint16_t) fix3d.pdop , fix3d.acq_time , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002932:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <main+0x460>)
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0010      	movs	r0, r2
 800293a:	0019      	movs	r1, r3
 800293c:	f7fd fe00 	bl	8000540 <__aeabi_d2uiz>
 8002940:	0003      	movs	r3, r0
 8002942:	b29b      	uxth	r3, r3
 8002944:	001c      	movs	r4, r3
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <main+0x460>)
 8002948:	8a5b      	ldrh	r3, [r3, #18]
 800294a:	001d      	movs	r5, r3
 800294c:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <main+0x460>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <main+0x460>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	492d      	ldr	r1, [pc, #180]	; (8002a0c <main+0x464>)
 8002956:	482e      	ldr	r0, [pc, #184]	; (8002a10 <main+0x468>)
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9200      	str	r2, [sp, #0]
 800295c:	002b      	movs	r3, r5
 800295e:	0022      	movs	r2, r4
 8002960:	f008 ff2e 	bl	800b7c0 <sprintf>
		  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <main+0x46c>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	b291      	uxth	r1, r2
 800296c:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <main+0x46c>)
 800296e:	8011      	strh	r1, [r2, #0]
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <main+0x468>)
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f006 fc39 	bl	80091ec <my_astro_add_payload_2_queue>
		  send_debug_logs ( dbg_payload ) ;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <main+0x454>)
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fbe7 	bl	8003150 <send_debug_logs>
	  }
	  if ( my_rtc_set_alarm ( MY_RTC_ALARM_1H ) )
 8002982:	23e1      	movs	r3, #225	; 0xe1
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	0018      	movs	r0, r3
 8002988:	f006 fe5e 	bl	8009648 <my_rtc_set_alarm>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d100      	bne.n	8002992 <main+0x3ea>
 8002990:	e763      	b.n	800285a <main+0x2b2>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <main+0x458>)
 8002994:	0018      	movs	r0, r3
 8002996:	f006 fe15 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800299a:	230e      	movs	r3, #14
 800299c:	33ff      	adds	r3, #255	; 0xff
 800299e:	001c      	movs	r4, r3
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <main+0x44c>)
 80029a2:	491d      	ldr	r1, [pc, #116]	; (8002a18 <main+0x470>)
 80029a4:	4815      	ldr	r0, [pc, #84]	; (80029fc <main+0x454>)
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <main+0x458>)
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	0023      	movs	r3, r4
 80029ac:	f008 ff08 	bl	800b7c0 <sprintf>
		  my_tim_stop () ;
 80029b0:	f000 fd22 	bl	80033f8 <my_tim_stop>
		  HAL_SuspendTick () ;
 80029b4:	f001 f9b2 	bl	8003d1c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <main+0x474>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	2102      	movs	r1, #2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 fd5b 	bl	8004480 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80029ca:	f001 f9b5 	bl	8003d38 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <main+0x458>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f006 fdf7 	bl	80095c4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80029d6:	238a      	movs	r3, #138	; 0x8a
 80029d8:	005c      	lsls	r4, r3, #1
 80029da:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <main+0x44c>)
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <main+0x45c>)
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <main+0x454>)
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <main+0x458>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	0023      	movs	r3, r4
 80029e6:	f008 feeb 	bl	800b7c0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <main+0x454>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fbaf 	bl	8003150 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 80029f2:	e732      	b.n	800285a <main+0x2b2>
 80029f4:	08012430 	.word	0x08012430
 80029f8:	0801253c 	.word	0x0801253c
 80029fc:	20000a18 	.word	0x20000a18
 8002a00:	20000b14 	.word	0x20000b14
 8002a04:	0801246c 	.word	0x0801246c
 8002a08:	20000bd0 	.word	0x20000bd0
 8002a0c:	0801254c 	.word	0x0801254c
 8002a10:	20000b2c 	.word	0x20000b2c
 8002a14:	20000b28 	.word	0x20000b28
 8002a18:	080124f8 	.word	0x080124f8
 8002a1c:	20000be8 	.word	0x20000be8

08002a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b095      	sub	sp, #84	; 0x54
 8002a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a26:	2414      	movs	r4, #20
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	233c      	movs	r3, #60	; 0x3c
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f008 ff5b 	bl	800b8ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	0018      	movs	r0, r3
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f008 ff54 	bl	800b8ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f001 fd6b 	bl	8004524 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a4e:	f001 fd09 	bl	8004464 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <SystemClock_Config+0xa8>)
 8002a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <SystemClock_Config+0xa8>)
 8002a58:	2118      	movs	r1, #24
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	2206      	movs	r2, #6
 8002a62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	2201      	movs	r2, #1
 8002a68:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0052      	lsls	r2, r2, #1
 8002a70:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	0018      	movs	r0, r3
 8002a88:	f001 fd98 	bl	80045bc <HAL_RCC_OscConfig>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d001      	beq.n	8002a94 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a90:	f000 fd06 	bl	80034a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2207      	movs	r2, #7
 8002a98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f002 f8e3 	bl	8004c7c <HAL_RCC_ClockConfig>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002aba:	f000 fcf1 	bl	80034a0 <Error_Handler>
  }
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b015      	add	sp, #84	; 0x54
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000

08002acc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b090      	sub	sp, #64	; 0x40
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ad2:	232c      	movs	r3, #44	; 0x2c
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	2314      	movs	r3, #20
 8002ada:	001a      	movs	r2, r3
 8002adc:	2100      	movs	r1, #0
 8002ade:	f008 ff05 	bl	800b8ec <memset>
  RTC_DateTypeDef sDate = {0};
 8002ae2:	2328      	movs	r3, #40	; 0x28
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002aea:	003b      	movs	r3, r7
 8002aec:	0018      	movs	r0, r3
 8002aee:	2328      	movs	r3, #40	; 0x28
 8002af0:	001a      	movs	r2, r3
 8002af2:	2100      	movs	r1, #0
 8002af4:	f008 fefa 	bl	800b8ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002af8:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <MX_RTC_Init+0x140>)
 8002afa:	4a45      	ldr	r2, [pc, #276]	; (8002c10 <MX_RTC_Init+0x144>)
 8002afc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002afe:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b06:	227f      	movs	r2, #127	; 0x7f
 8002b08:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b10:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b22:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	05d2      	lsls	r2, r2, #23
 8002b28:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f002 fc88 	bl	8005448 <HAL_RTC_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b3c:	f000 fcb0 	bl	80034a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2200      	movs	r2, #0
 8002b52:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2200      	movs	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b66:	1879      	adds	r1, r7, r1
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f002 fd0d 	bl	800558c <HAL_RTC_SetTime>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d001      	beq.n	8002b7a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b76:	f000 fc93 	bl	80034a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b7a:	2128      	movs	r1, #40	; 0x28
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	2206      	movs	r2, #6
 8002b80:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2201      	movs	r2, #1
 8002b86:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2200      	movs	r2, #0
 8002b92:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b94:	1879      	adds	r1, r7, r1
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <MX_RTC_Init+0x140>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f002 fdfa 	bl	8005794 <HAL_RTC_SetDate>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002ba4:	f000 fc7c 	bl	80034a0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002ba8:	003b      	movs	r3, r7
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002bae:	003b      	movs	r3, r7
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002bb4:	003b      	movs	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002bba:	003b      	movs	r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bc0:	003b      	movs	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bc6:	003b      	movs	r3, r7
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bcc:	003b      	movs	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002bde:	003b      	movs	r3, r7
 8002be0:	2220      	movs	r2, #32
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002be6:	003b      	movs	r3, r7
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bee:	0039      	movs	r1, r7
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_RTC_Init+0x140>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 fead 	bl	8005954 <HAL_RTC_SetAlarm_IT>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002bfe:	f000 fc4f 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b010      	add	sp, #64	; 0x40
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	200006ec 	.word	0x200006ec
 8002c10:	40002800 	.word	0x40002800

08002c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <MX_SPI1_Init+0x78>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c20:	2282      	movs	r2, #130	; 0x82
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c2e:	22e0      	movs	r2, #224	; 0xe0
 8002c30:	00d2      	lsls	r2, r2, #3
 8002c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c62:	2207      	movs	r2, #7
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c6e:	2208      	movs	r2, #8
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c74:	0018      	movs	r0, r3
 8002c76:	f003 f94d 	bl	8005f14 <HAL_SPI_Init>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c7e:	f000 fc0f 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000718 	.word	0x20000718
 8002c8c:	40013000 	.word	0x40013000

08002c90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	0018      	movs	r0, r3
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f008 fe24 	bl	800b8ec <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <MX_TIM6_Init+0x70>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <MX_TIM6_Init+0x74>)
 8002cae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002cb8:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <MX_TIM6_Init+0x78>)
 8002cba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f003 f9dd 	bl	8006084 <HAL_TIM_Base_Init>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cce:	f000 fbe7 	bl	80034a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cde:	1d3a      	adds	r2, r7, #4
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_TIM6_Init+0x6c>)
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f003 fc75 	bl	80065d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002cee:	f000 fbd7 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b004      	add	sp, #16
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	2000077c 	.word	0x2000077c
 8002d00:	40001000 	.word	0x40001000
 8002d04:	00003e7f 	.word	0x00003e7f
 8002d08:	000003e7 	.word	0x000003e7

08002d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <MX_USART1_UART_Init+0x98>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d18:	22e1      	movs	r2, #225	; 0xe1
 8002d1a:	0252      	lsls	r2, r2, #9
 8002d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f003 fcca 	bl	80066f0 <HAL_UART_Init>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d60:	f000 fb9e 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d66:	2100      	movs	r1, #0
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f004 fca5 	bl	80076b8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d72:	f000 fb95 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 fcdc 	bl	8007738 <HAL_UARTEx_SetRxFifoThreshold>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d84:	f000 fb8c 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <MX_USART1_UART_Init+0x94>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f004 fc5a 	bl	8007644 <HAL_UARTEx_DisableFifoMode>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d001      	beq.n	8002d98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d94:	f000 fb84 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	200007c8 	.word	0x200007c8
 8002da4:	40013800 	.word	0x40013800

08002da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dac:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dae:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <MX_USART2_UART_Init+0x98>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002db4:	22e1      	movs	r2, #225	; 0xe1
 8002db6:	0252      	lsls	r2, r2, #9
 8002db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002de4:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002df2:	0018      	movs	r0, r3
 8002df4:	f003 fc7c 	bl	80066f0 <HAL_UART_Init>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dfc:	f000 fb50 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002e02:	2100      	movs	r1, #0
 8002e04:	0018      	movs	r0, r3
 8002e06:	f004 fc57 	bl	80076b8 <HAL_UARTEx_SetTxFifoThreshold>
 8002e0a:	1e03      	subs	r3, r0, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e0e:	f000 fb47 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	0018      	movs	r0, r3
 8002e18:	f004 fc8e 	bl	8007738 <HAL_UARTEx_SetRxFifoThreshold>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002e20:	f000 fb3e 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <MX_USART2_UART_Init+0x94>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f004 fc0c 	bl	8007644 <HAL_UARTEx_DisableFifoMode>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e30:	f000 fb36 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	2000085c 	.word	0x2000085c
 8002e40:	40004400 	.word	0x40004400

08002e44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e4a:	4a24      	ldr	r2, [pc, #144]	; (8002edc <MX_USART3_UART_Init+0x98>)
 8002e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e50:	2296      	movs	r2, #150	; 0x96
 8002e52:	0192      	lsls	r2, r2, #6
 8002e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e80:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f003 fc2e 	bl	80066f0 <HAL_UART_Init>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d001      	beq.n	8002e9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e98:	f000 fb02 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f004 fc09 	bl	80076b8 <HAL_UARTEx_SetTxFifoThreshold>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002eaa:	f000 faf9 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f004 fc40 	bl	8007738 <HAL_UARTEx_SetRxFifoThreshold>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ebc:	f000 faf0 	bl	80034a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <MX_USART3_UART_Init+0x94>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f004 fbbe 	bl	8007644 <HAL_UARTEx_DisableFifoMode>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ecc:	f000 fae8 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	200008f0 	.word	0x200008f0
 8002edc:	40004800 	.word	0x40004800

08002ee0 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <MX_USART5_UART_Init+0x64>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002eec:	2296      	movs	r2, #150	; 0x96
 8002eee:	0192      	lsls	r2, r2, #6
 8002ef0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <MX_USART5_UART_Init+0x60>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f003 fbe0 	bl	80066f0 <HAL_UART_Init>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d001      	beq.n	8002f38 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002f34:	f000 fab4 	bl	80034a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	20000984 	.word	0x20000984
 8002f44:	40005000 	.word	0x40005000

08002f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4e:	2414      	movs	r4, #20
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	0018      	movs	r0, r3
 8002f54:	2314      	movs	r3, #20
 8002f56:	001a      	movs	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f008 fcc7 	bl	800b8ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f62:	4b75      	ldr	r3, [pc, #468]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f64:	2104      	movs	r1, #4
 8002f66:	430a      	orrs	r2, r1
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	4b69      	ldr	r3, [pc, #420]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f94:	2102      	movs	r1, #2
 8002f96:	430a      	orrs	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa6:	4b64      	ldr	r3, [pc, #400]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002fac:	2108      	movs	r1, #8
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <MX_GPIO_Init+0x1f0>)
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002fbe:	23a0      	movs	r3, #160	; 0xa0
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 fa2f 	bl	800442a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002fcc:	495b      	ldr	r1, [pc, #364]	; (800313c <MX_GPIO_Init+0x1f4>)
 8002fce:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <MX_GPIO_Init+0x1f8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 fa29 	bl	800442a <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4858      	ldr	r0, [pc, #352]	; (8003140 <MX_GPIO_Init+0x1f8>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	f001 fa22 	bl	800442a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <MX_GPIO_Init+0x1fc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2103      	movs	r1, #3
 8002fec:	0018      	movs	r0, r3
 8002fee:	f001 fa1c 	bl	800442a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2288      	movs	r2, #136	; 0x88
 8002ffc:	0352      	lsls	r2, r2, #13
 8002ffe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8003006:	193a      	adds	r2, r7, r4
 8003008:	23a0      	movs	r3, #160	; 0xa0
 800300a:	05db      	lsls	r3, r3, #23
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f000 ffaa 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2202      	movs	r2, #2
 8003018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	193b      	adds	r3, r7, r4
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8003026:	193a      	adds	r2, r7, r4
 8003028:	23a0      	movs	r3, #160	; 0xa0
 800302a:	05db      	lsls	r3, r3, #23
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f000 ff9a 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8003034:	193b      	adds	r3, r7, r4
 8003036:	2210      	movs	r2, #16
 8003038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	193b      	adds	r3, r7, r4
 800303c:	2201      	movs	r2, #1
 800303e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	193b      	adds	r3, r7, r4
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	193b      	adds	r3, r7, r4
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800304c:	193a      	adds	r2, r7, r4
 800304e:	23a0      	movs	r3, #160	; 0xa0
 8003050:	05db      	lsls	r3, r3, #23
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f000 ff87 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 800305a:	193b      	adds	r3, r7, r4
 800305c:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <MX_GPIO_Init+0x200>)
 800305e:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	193b      	adds	r3, r7, r4
 8003062:	2201      	movs	r2, #1
 8003064:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	193b      	adds	r3, r7, r4
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	193b      	adds	r3, r7, r4
 8003074:	4a32      	ldr	r2, [pc, #200]	; (8003140 <MX_GPIO_Init+0x1f8>)
 8003076:	0019      	movs	r1, r3
 8003078:	0010      	movs	r0, r2
 800307a:	f000 ff75 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 800307e:	0021      	movs	r1, r4
 8003080:	187b      	adds	r3, r7, r1
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003086:	187b      	adds	r3, r7, r1
 8003088:	2288      	movs	r2, #136	; 0x88
 800308a:	0352      	lsls	r2, r2, #13
 800308c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	187b      	adds	r3, r7, r1
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	000c      	movs	r4, r1
 8003096:	187b      	adds	r3, r7, r1
 8003098:	4a29      	ldr	r2, [pc, #164]	; (8003140 <MX_GPIO_Init+0x1f8>)
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f000 ff63 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80030a2:	0021      	movs	r1, r4
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	0192      	lsls	r2, r2, #6
 80030aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030ac:	000c      	movs	r4, r1
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	2211      	movs	r2, #17
 80030b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <MX_GPIO_Init+0x1f8>)
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f000 ff4e 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <MX_GPIO_Init+0x204>)
 80030d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2200      	movs	r2, #0
 80030d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	4a17      	ldr	r2, [pc, #92]	; (8003140 <MX_GPIO_Init+0x1f8>)
 80030e2:	0019      	movs	r1, r3
 80030e4:	0010      	movs	r0, r2
 80030e6:	f000 ff3f 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2203      	movs	r2, #3
 80030ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2201      	movs	r2, #1
 80030f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003102:	193b      	adds	r3, r7, r4
 8003104:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <MX_GPIO_Init+0x1fc>)
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f000 ff2d 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800310e:	0021      	movs	r1, r4
 8003110:	187b      	adds	r3, r7, r1
 8003112:	220c      	movs	r2, #12
 8003114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003116:	187b      	adds	r3, r7, r1
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003122:	187b      	adds	r3, r7, r1
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <MX_GPIO_Init+0x1fc>)
 8003126:	0019      	movs	r1, r3
 8003128:	0010      	movs	r0, r2
 800312a:	f000 ff1d 	bl	8003f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b00b      	add	sp, #44	; 0x2c
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40021000 	.word	0x40021000
 800313c:	0000a403 	.word	0x0000a403
 8003140:	50000400 	.word	0x50000400
 8003144:	50000c00 	.word	0x50000c00
 8003148:	00008c03 	.word	0x00008c03
 800314c:	00004040 	.word	0x00004040

08003150 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f7fc ffd2 	bl	8000104 <strlen>
 8003160:	0003      	movs	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2bfa      	cmp	r3, #250	; 0xfa
 8003168:	d908      	bls.n	800317c <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800316a:	23fa      	movs	r3, #250	; 0xfa
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <send_debug_logs+0x54>)
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <send_debug_logs+0x58>)
 8003172:	222a      	movs	r2, #42	; 0x2a
 8003174:	f003 fb52 	bl	800681c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8003178:	23fa      	movs	r3, #250	; 0xfa
 800317a:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	b29a      	uxth	r2, r3
 8003180:	23fa      	movs	r3, #250	; 0xfa
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4808      	ldr	r0, [pc, #32]	; (80031a8 <send_debug_logs+0x58>)
 8003188:	f003 fb48 	bl	800681c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 800318c:	23fa      	movs	r3, #250	; 0xfa
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4906      	ldr	r1, [pc, #24]	; (80031ac <send_debug_logs+0x5c>)
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <send_debug_logs+0x58>)
 8003194:	2201      	movs	r2, #1
 8003196:	f003 fb41 	bl	800681c <HAL_UART_Transmit>
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	0801255c 	.word	0x0801255c
 80031a8:	2000085c 	.word	0x2000085c
 80031ac:	08012588 	.word	0x08012588

080031b0 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	0002      	movs	r2, r0
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10e      	bne.n	80031e2 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4811      	ldr	r0, [pc, #68]	; (8003210 <my_ant_sw_pos+0x60>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	0019      	movs	r1, r3
 80031ce:	f001 f92c 	bl	800442a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	480e      	ldr	r0, [pc, #56]	; (8003210 <my_ant_sw_pos+0x60>)
 80031d8:	2201      	movs	r2, #1
 80031da:	0019      	movs	r1, r3
 80031dc:	f001 f925 	bl	800442a <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80031e0:	e011      	b.n	8003206 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80031e2:	1dfb      	adds	r3, r7, #7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d10d      	bne.n	8003206 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4808      	ldr	r0, [pc, #32]	; (8003210 <my_ant_sw_pos+0x60>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	0019      	movs	r1, r3
 80031f4:	f001 f919 	bl	800442a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4804      	ldr	r0, [pc, #16]	; (8003210 <my_ant_sw_pos+0x60>)
 80031fe:	2200      	movs	r2, #0
 8003200:	0019      	movs	r1, r3
 8003202:	f001 f912 	bl	800442a <HAL_GPIO_WritePin>
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	50000400 	.word	0x50000400

08003214 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff ffc9 	bl	80031b0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <my_gnss_sw_on+0x30>)
 8003224:	2201      	movs	r2, #1
 8003226:	0019      	movs	r1, r3
 8003228:	f001 f8ff 	bl	800442a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	4804      	ldr	r0, [pc, #16]	; (8003244 <my_gnss_sw_on+0x30>)
 8003232:	2201      	movs	r2, #1
 8003234:	0019      	movs	r1, r3
 8003236:	f001 f8f8 	bl	800442a <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800323a:	f7ff fe51 	bl	8002ee0 <MX_USART5_UART_Init>
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	50000400 	.word	0x50000400

08003248 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 800324c:	2002      	movs	r0, #2
 800324e:	f7ff ffaf 	bl	80031b0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	4809      	ldr	r0, [pc, #36]	; (800327c <my_gnss_sw_off+0x34>)
 8003258:	2200      	movs	r2, #0
 800325a:	0019      	movs	r1, r3
 800325c:	f001 f8e5 	bl	800442a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <my_gnss_sw_off+0x34>)
 8003266:	2200      	movs	r2, #0
 8003268:	0019      	movs	r1, r3
 800326a:	f001 f8de 	bl	800442a <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &HUART_GNSS ) ;
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <my_gnss_sw_off+0x38>)
 8003270:	0018      	movs	r0, r3
 8003272:	f003 fa93 	bl	800679c <HAL_UART_DeInit>

}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	50000400 	.word	0x50000400
 8003280:	20000984 	.word	0x20000984

08003284 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	000a      	movs	r2, r1
 800328e:	1cfb      	adds	r3, r7, #3
 8003290:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003292:	23fa      	movs	r3, #250	; 0xfa
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4809      	ldr	r0, [pc, #36]	; (80032c0 <my_gnss_receive_byte+0x3c>)
 800329a:	2201      	movs	r2, #1
 800329c:	f003 fb62 	bl	8006964 <HAL_UART_Receive>
	if ( verbose )
 80032a0:	1cfb      	adds	r3, r7, #3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80032a8:	23fa      	movs	r3, #250	; 0xfa
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4805      	ldr	r0, [pc, #20]	; (80032c4 <my_gnss_receive_byte+0x40>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	f003 fab3 	bl	800681c <HAL_UART_Transmit>
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	20000984 	.word	0x20000984
 80032c4:	2000085c 	.word	0x2000085c

080032c8 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <my_astronode_reset+0x30>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	2102      	movs	r1, #2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f001 f8a9 	bl	800442a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80032d8:	2001      	movs	r0, #1
 80032da:	f000 fcfb 	bl	8003cd4 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <my_astronode_reset+0x30>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	2102      	movs	r1, #2
 80032e4:	0018      	movs	r0, r3
 80032e6:	f001 f8a0 	bl	800442a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80032ea:	20fa      	movs	r0, #250	; 0xfa
 80032ec:	f000 fcf2 	bl	8003cd4 <HAL_Delay>
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	50000400 	.word	0x50000400

080032fc <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <send_astronode_request+0x34>)
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ff21 	bl	8003150 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff ff1d 	bl	8003150 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b29a      	uxth	r2, r3
 800331a:	23fa      	movs	r3, #250	; 0xfa
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4804      	ldr	r0, [pc, #16]	; (8003334 <send_astronode_request+0x38>)
 8003322:	f003 fa7b 	bl	800681c <HAL_UART_Transmit>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	08012594 	.word	0x08012594
 8003334:	200008f0 	.word	0x200008f0

08003338 <get_systick>:
uint32_t get_systick ( void )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 800333c:	f000 fcc0 	bl	8003cc0 <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	000a      	movs	r2, r1
 8003352:	1cbb      	adds	r3, r7, #2
 8003354:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003356:	f7ff ffef 	bl	8003338 <get_systick>
 800335a:	0002      	movs	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	1cba      	adds	r2, r7, #2
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	419b      	sbcs	r3, r3
 8003368:	425b      	negs	r3, r3
 800336a:	b2db      	uxtb	r3, r3
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4806      	ldr	r0, [pc, #24]	; (8003398 <is_astronode_character_received+0x24>)
 8003380:	2364      	movs	r3, #100	; 0x64
 8003382:	2201      	movs	r2, #1
 8003384:	f003 faee 	bl	8006964 <HAL_UART_Receive>
 8003388:	0003      	movs	r3, r0
 800338a:	425a      	negs	r2, r3
 800338c:	4153      	adcs	r3, r2
 800338e:	b2db      	uxtb	r3, r3
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200008f0 	.word	0x200008f0

0800339c <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <my_astro_evt_pin+0x20>)
 80033a2:	2104      	movs	r1, #4
 80033a4:	0018      	movs	r0, r3
 80033a6:	f001 f823 	bl	80043f0 <HAL_GPIO_ReadPin>
 80033aa:	0003      	movs	r3, r0
 80033ac:	3b01      	subs	r3, #1
 80033ae:	425a      	negs	r2, r3
 80033b0:	4153      	adcs	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	50000400 	.word	0x50000400

080033c0 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <my_tim_init+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4252      	negs	r2, r2
 80033cc:	611a      	str	r2, [r3, #16]
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000077c 	.word	0x2000077c

080033d8 <my_tim_start>:

void my_tim_start ()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <my_tim_start+0x18>)
 80033de:	2200      	movs	r2, #0
 80033e0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <my_tim_start+0x1c>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f002 fea5 	bl	8006134 <HAL_TIM_Base_Start_IT>
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000bf8 	.word	0x20000bf8
 80033f4:	2000077c 	.word	0x2000077c

080033f8 <my_tim_stop>:

void my_tim_stop ()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <my_tim_stop+0x14>)
 80033fe:	0018      	movs	r0, r3
 8003400:	f002 fefa 	bl	80061f8 <HAL_TIM_Base_Stop_IT>
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	2000077c 	.word	0x2000077c

08003410 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d11e      	bne.n	8003460 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800342c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	2396      	movs	r3, #150	; 0x96
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	429a      	cmp	r2, r3
 8003438:	d912      	bls.n	8003460 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800343c:	0018      	movs	r0, r3
 800343e:	f006 f8c1 	bl	80095c4 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003442:	4c0c      	ldr	r4, [pc, #48]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003446:	490d      	ldr	r1, [pc, #52]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	0023      	movs	r3, r4
 8003450:	f008 f9b6 	bl	800b7c0 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fe7a 	bl	8003150 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 800345c:	f000 fd73 	bl	8003f46 <HAL_NVIC_SystemReset>
		}
	}
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b003      	add	sp, #12
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	40001000 	.word	0x40001000
 800346c:	20000bf8 	.word	0x20000bf8
 8003470:	20000b14 	.word	0x20000b14
 8003474:	000003ba 	.word	0x000003ba
 8003478:	08012430 	.word	0x08012430
 800347c:	08012498 	.word	0x08012498
 8003480:	20000a18 	.word	0x20000a18

08003484 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RTC_AlarmAEventCallback+0x18>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	20000be8 	.word	0x20000be8

080034a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034a4:	b672      	cpsid	i
}
 80034a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <Error_Handler+0x8>
	...

080034ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_MspInit+0x4c>)
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_MspInit+0x4c>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	430a      	orrs	r2, r1
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_MspInit+0x4c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2201      	movs	r2, #1
 80034c4:	4013      	ands	r3, r2
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_MspInit+0x4c>)
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_MspInit+0x4c>)
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	0549      	lsls	r1, r1, #21
 80034d4:	430a      	orrs	r2, r1
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_MspInit+0x4c>)
 80034da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	055b      	lsls	r3, r3, #21
 80034e0:	4013      	ands	r3, r2
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fc32 	bl	8003d54 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b097      	sub	sp, #92	; 0x5c
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003504:	240c      	movs	r4, #12
 8003506:	193b      	adds	r3, r7, r4
 8003508:	0018      	movs	r0, r3
 800350a:	234c      	movs	r3, #76	; 0x4c
 800350c:	001a      	movs	r2, r3
 800350e:	2100      	movs	r1, #0
 8003510:	f008 f9ec 	bl	800b8ec <memset>
  if(hrtc->Instance==RTC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_RTC_MspInit+0x84>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d12c      	bne.n	8003578 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800351e:	193b      	adds	r3, r7, r4
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	0292      	lsls	r2, r2, #10
 8003524:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003526:	193b      	adds	r3, r7, r4
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	0052      	lsls	r2, r2, #1
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800352e:	193b      	adds	r3, r7, r4
 8003530:	0018      	movs	r0, r3
 8003532:	f001 fd4d 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800353a:	f7ff ffb1 	bl	80034a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RTC_MspInit+0x88>)
 8003540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RTC_MspInit+0x88>)
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	0209      	lsls	r1, r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_RTC_MspInit+0x88>)
 800354e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RTC_MspInit+0x88>)
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	00c9      	lsls	r1, r1, #3
 8003556:	430a      	orrs	r2, r1
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RTC_MspInit+0x88>)
 800355c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4013      	ands	r3, r2
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2103      	movs	r1, #3
 800356c:	2002      	movs	r0, #2
 800356e:	f000 fcc5 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003572:	2002      	movs	r0, #2
 8003574:	f000 fcd7 	bl	8003f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b017      	add	sp, #92	; 0x5c
 800357e:	bd90      	pop	{r4, r7, pc}
 8003580:	40002800 	.word	0x40002800
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08b      	sub	sp, #44	; 0x2c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	2414      	movs	r4, #20
 8003592:	193b      	adds	r3, r7, r4
 8003594:	0018      	movs	r0, r3
 8003596:	2314      	movs	r3, #20
 8003598:	001a      	movs	r2, r3
 800359a:	2100      	movs	r1, #0
 800359c:	f008 f9a6 	bl	800b8ec <memset>
  if(hspi->Instance==SPI1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_SPI_MspInit+0x8c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d130      	bne.n	800360c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	0149      	lsls	r1, r1, #5
 80035b4:	430a      	orrs	r2, r1
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	430a      	orrs	r2, r1
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_SPI_MspInit+0x90>)
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	2201      	movs	r2, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80035de:	0021      	movs	r1, r4
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	22e0      	movs	r2, #224	; 0xe0
 80035e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2202      	movs	r2, #2
 80035ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	187a      	adds	r2, r7, r1
 8003600:	23a0      	movs	r3, #160	; 0xa0
 8003602:	05db      	lsls	r3, r3, #23
 8003604:	0011      	movs	r1, r2
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fcae 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b00b      	add	sp, #44	; 0x2c
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	40013000 	.word	0x40013000
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <HAL_TIM_Base_MspInit+0x44>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <HAL_TIM_Base_MspInit+0x48>)
 8003630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_TIM_Base_MspInit+0x48>)
 8003634:	2110      	movs	r1, #16
 8003636:	430a      	orrs	r2, r1
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_TIM_Base_MspInit+0x48>)
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	2210      	movs	r2, #16
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2102      	movs	r1, #2
 800364a:	2011      	movs	r0, #17
 800364c:	f000 fc56 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003650:	2011      	movs	r0, #17
 8003652:	f000 fc68 	bl	8003f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b004      	add	sp, #16
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40001000 	.word	0x40001000
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b0a3      	sub	sp, #140	; 0x8c
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	2374      	movs	r3, #116	; 0x74
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	0018      	movs	r0, r3
 8003676:	2314      	movs	r3, #20
 8003678:	001a      	movs	r2, r3
 800367a:	2100      	movs	r1, #0
 800367c:	f008 f936 	bl	800b8ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003680:	2428      	movs	r4, #40	; 0x28
 8003682:	193b      	adds	r3, r7, r4
 8003684:	0018      	movs	r0, r3
 8003686:	234c      	movs	r3, #76	; 0x4c
 8003688:	001a      	movs	r2, r3
 800368a:	2100      	movs	r1, #0
 800368c:	f008 f92e 	bl	800b8ec <memset>
  if(huart->Instance==USART1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a84      	ldr	r2, [pc, #528]	; (80038a8 <HAL_UART_MspInit+0x240>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d140      	bne.n	800371c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	2200      	movs	r2, #0
 80036a4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	0018      	movs	r0, r3
 80036aa:	f001 fc91 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80036b2:	f7ff fef5 	bl	80034a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036b6:	4b7d      	ldr	r3, [pc, #500]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	4b7c      	ldr	r3, [pc, #496]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	01c9      	lsls	r1, r1, #7
 80036c0:	430a      	orrs	r2, r1
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
 80036c4:	4b79      	ldr	r3, [pc, #484]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	01db      	lsls	r3, r3, #7
 80036cc:	4013      	ands	r3, r2
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d6:	4b75      	ldr	r3, [pc, #468]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036d8:	2101      	movs	r1, #1
 80036da:	430a      	orrs	r2, r1
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34
 80036de:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_UART_MspInit+0x244>)
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	2201      	movs	r2, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80036ea:	2174      	movs	r1, #116	; 0x74
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	22c0      	movs	r2, #192	; 0xc0
 80036f0:	00d2      	lsls	r2, r2, #3
 80036f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	2202      	movs	r2, #2
 80036f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2201      	movs	r2, #1
 800370a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370c:	187a      	adds	r2, r7, r1
 800370e:	23a0      	movs	r3, #160	; 0xa0
 8003710:	05db      	lsls	r3, r3, #23
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fc27 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800371a:	e0c0      	b.n	800389e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a63      	ldr	r2, [pc, #396]	; (80038b0 <HAL_UART_MspInit+0x248>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d140      	bne.n	80037a8 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003726:	2128      	movs	r1, #40	; 0x28
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2202      	movs	r2, #2
 800372c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003734:	187b      	adds	r3, r7, r1
 8003736:	0018      	movs	r0, r3
 8003738:	f001 fc4a 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003740:	f7ff feae 	bl	80034a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003744:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003748:	4b58      	ldr	r3, [pc, #352]	; (80038ac <HAL_UART_MspInit+0x244>)
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	0289      	lsls	r1, r1, #10
 800374e:	430a      	orrs	r2, r1
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	4013      	ands	r3, r2
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003764:	4b51      	ldr	r3, [pc, #324]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003766:	2101      	movs	r1, #1
 8003768:	430a      	orrs	r2, r1
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
 800376c:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <HAL_UART_MspInit+0x244>)
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003778:	2174      	movs	r1, #116	; 0x74
 800377a:	187b      	adds	r3, r7, r1
 800377c:	220c      	movs	r2, #12
 800377e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2202      	movs	r2, #2
 8003784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2201      	movs	r2, #1
 8003796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003798:	187a      	adds	r2, r7, r1
 800379a:	23a0      	movs	r3, #160	; 0xa0
 800379c:	05db      	lsls	r3, r3, #23
 800379e:	0011      	movs	r1, r2
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fbe1 	bl	8003f68 <HAL_GPIO_Init>
}
 80037a6:	e07a      	b.n	800389e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a41      	ldr	r2, [pc, #260]	; (80038b4 <HAL_UART_MspInit+0x24c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d140      	bne.n	8003834 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037b2:	2128      	movs	r1, #40	; 0x28
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2204      	movs	r2, #4
 80037b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	0018      	movs	r0, r3
 80037c4:	f001 fc04 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80037cc:	f7ff fe68 	bl	80034a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037d6:	2180      	movs	r1, #128	; 0x80
 80037d8:	02c9      	lsls	r1, r1, #11
 80037da:	430a      	orrs	r2, r1
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80037de:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	02db      	lsls	r3, r3, #11
 80037e6:	4013      	ands	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ec:	4b2f      	ldr	r3, [pc, #188]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037f2:	2102      	movs	r1, #2
 80037f4:	430a      	orrs	r2, r1
 80037f6:	635a      	str	r2, [r3, #52]	; 0x34
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_UART_MspInit+0x244>)
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	2202      	movs	r2, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003804:	2174      	movs	r1, #116	; 0x74
 8003806:	187b      	adds	r3, r7, r1
 8003808:	22c0      	movs	r2, #192	; 0xc0
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	187b      	adds	r3, r7, r1
 8003810:	2202      	movs	r2, #2
 8003812:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	187b      	adds	r3, r7, r1
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	187b      	adds	r3, r7, r1
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003820:	187b      	adds	r3, r7, r1
 8003822:	2204      	movs	r2, #4
 8003824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	187b      	adds	r3, r7, r1
 8003828:	4a23      	ldr	r2, [pc, #140]	; (80038b8 <HAL_UART_MspInit+0x250>)
 800382a:	0019      	movs	r1, r3
 800382c:	0010      	movs	r0, r2
 800382e:	f000 fb9b 	bl	8003f68 <HAL_GPIO_Init>
}
 8003832:	e034      	b.n	800389e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a20      	ldr	r2, [pc, #128]	; (80038bc <HAL_UART_MspInit+0x254>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12f      	bne.n	800389e <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800383e:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003842:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	0049      	lsls	r1, r1, #1
 8003848:	430a      	orrs	r2, r1
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <HAL_UART_MspInit+0x244>)
 800384e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_UART_MspInit+0x244>)
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003860:	2102      	movs	r1, #2
 8003862:	430a      	orrs	r2, r1
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_UART_MspInit+0x244>)
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003872:	2174      	movs	r1, #116	; 0x74
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2218      	movs	r2, #24
 8003878:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2202      	movs	r2, #2
 800387e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	187b      	adds	r3, r7, r1
 8003888:	2200      	movs	r2, #0
 800388a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800388c:	187b      	adds	r3, r7, r1
 800388e:	2203      	movs	r2, #3
 8003890:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003892:	187b      	adds	r3, r7, r1
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_UART_MspInit+0x250>)
 8003896:	0019      	movs	r1, r3
 8003898:	0010      	movs	r0, r2
 800389a:	f000 fb65 	bl	8003f68 <HAL_GPIO_Init>
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b023      	add	sp, #140	; 0x8c
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40004800 	.word	0x40004800
 80038b8:	50000400 	.word	0x50000400
 80038bc:	40005000 	.word	0x40005000

080038c0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <HAL_UART_MspDeInit+0xa4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10e      	bne.n	80038f0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 80038d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 80038d8:	4924      	ldr	r1, [pc, #144]	; (800396c <HAL_UART_MspDeInit+0xac>)
 80038da:	400a      	ands	r2, r1
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	00da      	lsls	r2, r3, #3
 80038e2:	23a0      	movs	r3, #160	; 0xa0
 80038e4:	05db      	lsls	r3, r3, #23
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fca9 	bl	8004240 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80038ee:	e034      	b.n	800395a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_UART_MspDeInit+0xb0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10c      	bne.n	8003914 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 80038fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 8003900:	491c      	ldr	r1, [pc, #112]	; (8003974 <HAL_UART_MspDeInit+0xb4>)
 8003902:	400a      	ands	r2, r1
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003906:	23a0      	movs	r3, #160	; 0xa0
 8003908:	05db      	lsls	r3, r3, #23
 800390a:	210c      	movs	r1, #12
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fc97 	bl	8004240 <HAL_GPIO_DeInit>
}
 8003912:	e022      	b.n	800395a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_UART_MspDeInit+0xb8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10d      	bne.n	800393a <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 8003920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 8003924:	4915      	ldr	r1, [pc, #84]	; (800397c <HAL_UART_MspDeInit+0xbc>)
 8003926:	400a      	ands	r2, r1
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800392a:	23c0      	movs	r3, #192	; 0xc0
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_UART_MspDeInit+0xc0>)
 8003930:	0019      	movs	r1, r3
 8003932:	0010      	movs	r0, r2
 8003934:	f000 fc84 	bl	8004240 <HAL_GPIO_DeInit>
}
 8003938:	e00f      	b.n	800395a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_UART_MspDeInit+0xc4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10a      	bne.n	800395a <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_UART_MspDeInit+0xa8>)
 800394a:	490f      	ldr	r1, [pc, #60]	; (8003988 <HAL_UART_MspDeInit+0xc8>)
 800394c:	400a      	ands	r2, r1
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_UART_MspDeInit+0xc0>)
 8003952:	2118      	movs	r1, #24
 8003954:	0018      	movs	r0, r3
 8003956:	f000 fc73 	bl	8004240 <HAL_GPIO_DeInit>
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	40013800 	.word	0x40013800
 8003968:	40021000 	.word	0x40021000
 800396c:	ffffbfff 	.word	0xffffbfff
 8003970:	40004400 	.word	0x40004400
 8003974:	fffdffff 	.word	0xfffdffff
 8003978:	40004800 	.word	0x40004800
 800397c:	fffbffff 	.word	0xfffbffff
 8003980:	50000400 	.word	0x50000400
 8003984:	40005000 	.word	0x40005000
 8003988:	fffffeff 	.word	0xfffffeff

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003990:	e7fe      	b.n	8003990 <NMI_Handler+0x4>

08003992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <HardFault_Handler+0x4>

08003998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b0:	f000 f974 	bl	8003c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <RTC_TAMP_IRQHandler+0x14>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f002 f906 	bl	8005bd4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	200006ec 	.word	0x200006ec

080039d4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f002 fc3a 	bl	8006254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	2000077c 	.word	0x2000077c

080039ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  return 1;
 80039f0:	2301      	movs	r3, #1
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_kill>:

int _kill(int pid, int sig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a02:	f008 f81f 	bl	800ba44 <__errno>
 8003a06:	0003      	movs	r3, r0
 8003a08:	2216      	movs	r2, #22
 8003a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	425b      	negs	r3, r3
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_exit>:

void _exit (int status)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a20:	2301      	movs	r3, #1
 8003a22:	425a      	negs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff ffe5 	bl	80039f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a2e:	e7fe      	b.n	8003a2e <_exit+0x16>

08003a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e00a      	b.n	8003a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a42:	e000      	b.n	8003a46 <_read+0x16>
 8003a44:	bf00      	nop
 8003a46:	0001      	movs	r1, r0
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	60ba      	str	r2, [r7, #8]
 8003a4e:	b2ca      	uxtb	r2, r1
 8003a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dbf0      	blt.n	8003a42 <_read+0x12>
  }

  return len;
 8003a60:	687b      	ldr	r3, [r7, #4]
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b006      	add	sp, #24
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e009      	b.n	8003a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	60ba      	str	r2, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	e000      	b.n	8003a8a <_write+0x20>
 8003a88:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	dbf1      	blt.n	8003a7c <_write+0x12>
  }
  return len;
 8003a98:	687b      	ldr	r3, [r7, #4]
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b006      	add	sp, #24
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_close>:

int _close(int file)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	425b      	negs	r3, r3
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b002      	add	sp, #8
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	0192      	lsls	r2, r2, #6
 8003ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_isatty>:

int _isatty(int file)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ada:	2301      	movs	r3, #1
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <_sbrk+0x5c>)
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <_sbrk+0x60>)
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <_sbrk+0x64>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <_sbrk+0x64>)
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <_sbrk+0x68>)
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <_sbrk+0x64>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	18d3      	adds	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d207      	bcs.n	8003b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b2c:	f007 ff8a 	bl	800ba44 <__errno>
 8003b30:	0003      	movs	r3, r0
 8003b32:	220c      	movs	r2, #12
 8003b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b36:	2301      	movs	r3, #1
 8003b38:	425b      	negs	r3, r3
 8003b3a:	e009      	b.n	8003b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <_sbrk+0x64>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	18d2      	adds	r2, r2, r3
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <_sbrk+0x64>)
 8003b4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b006      	add	sp, #24
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20024000 	.word	0x20024000
 8003b5c:	00000400 	.word	0x00000400
 8003b60:	20000bec 	.word	0x20000bec
 8003b64:	20000f08 	.word	0x20000f08

08003b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b74:	480d      	ldr	r0, [pc, #52]	; (8003bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b78:	f7ff fff6 	bl	8003b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b7e:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <LoopForever+0xe>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b84:	e002      	b.n	8003b8c <LoopCopyDataInit>

08003b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8a:	3304      	adds	r3, #4

08003b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b90:	d3f9      	bcc.n	8003b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b94:	4c0a      	ldr	r4, [pc, #40]	; (8003bc0 <LoopForever+0x16>)
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b98:	e001      	b.n	8003b9e <LoopFillZerobss>

08003b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9c:	3204      	adds	r2, #4

08003b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba0:	d3fb      	bcc.n	8003b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ba2:	f007 ff55 	bl	800ba50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003ba6:	f7fe fcff 	bl	80025a8 <main>

08003baa <LoopForever>:

LoopForever:
  b LoopForever
 8003baa:	e7fe      	b.n	8003baa <LoopForever>
  ldr   r0, =_estack
 8003bac:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb4:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 8003bb8:	08014420 	.word	0x08014420
  ldr r2, =_sbss
 8003bbc:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8003bc0:	20000f08 	.word	0x20000f08

08003bc4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bc4:	e7fe      	b.n	8003bc4 <ADC1_COMP_IRQHandler>
	...

08003bc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_Init+0x3c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_Init+0x3c>)
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0049      	lsls	r1, r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003be2:	2003      	movs	r0, #3
 8003be4:	f000 f810 	bl	8003c08 <HAL_InitTick>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003bec:	1dfb      	adds	r3, r7, #7
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e001      	b.n	8003bf8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003bf4:	f7ff fc5a 	bl	80034ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40022000 	.word	0x40022000

08003c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c10:	230f      	movs	r3, #15
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_InitTick+0x88>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02b      	beq.n	8003c78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_InitTick+0x8c>)
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_InitTick+0x88>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	0019      	movs	r1, r3
 8003c2a:	23fa      	movs	r3, #250	; 0xfa
 8003c2c:	0098      	lsls	r0, r3, #2
 8003c2e:	f7fc fa85 	bl	800013c <__udivsi3>
 8003c32:	0003      	movs	r3, r0
 8003c34:	0019      	movs	r1, r3
 8003c36:	0020      	movs	r0, r4
 8003c38:	f7fc fa80 	bl	800013c <__udivsi3>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f985 	bl	8003f4e <HAL_SYSTICK_Config>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d112      	bne.n	8003c6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d80a      	bhi.n	8003c64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	2301      	movs	r3, #1
 8003c52:	425b      	negs	r3, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	0018      	movs	r0, r3
 8003c58:	f000 f950 	bl	8003efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_InitTick+0x90>)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e00d      	b.n	8003c80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003c64:	230f      	movs	r3, #15
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e008      	b.n	8003c80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e003      	b.n	8003c80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003c80:	230f      	movs	r3, #15
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b005      	add	sp, #20
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000010 	.word	0x20000010
 8003c94:	20000008 	.word	0x20000008
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_IncTick+0x1c>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_IncTick+0x20>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	18d2      	adds	r2, r2, r3
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_IncTick+0x20>)
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	20000010 	.word	0x20000010
 8003cbc:	20000bf0 	.word	0x20000bf0

08003cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_GetTick+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000bf0 	.word	0x20000bf0

08003cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7ff fff0 	bl	8003cc0 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	d005      	beq.n	8003cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_Delay+0x44>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	f7ff ffe0 	bl	8003cc0 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d8f7      	bhi.n	8003cfc <HAL_Delay+0x28>
  {
  }
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000010 	.word	0x20000010

08003d1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_SuspendTick+0x18>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_SuspendTick+0x18>)
 8003d26:	2102      	movs	r1, #2
 8003d28:	438a      	bics	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	e000e010 	.word	0xe000e010

08003d38 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_ResumeTick+0x18>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_ResumeTick+0x18>)
 8003d42:	2102      	movs	r1, #2
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	e000e010 	.word	0xe000e010

08003d54 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a06      	ldr	r2, [pc, #24]	; (8003d7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b002      	add	sp, #8
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	fffff9ff 	.word	0xfffff9ff

08003d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	0002      	movs	r2, r0
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b7f      	cmp	r3, #127	; 0x7f
 8003d92:	d809      	bhi.n	8003da8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	001a      	movs	r2, r3
 8003d9a:	231f      	movs	r3, #31
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__NVIC_EnableIRQ+0x30>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	4091      	lsls	r1, r2
 8003da4:	000a      	movs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	0002      	movs	r2, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc8:	d828      	bhi.n	8003e1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dca:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <__NVIC_SetPriority+0xd4>)
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	33c0      	adds	r3, #192	; 0xc0
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	589b      	ldr	r3, [r3, r2]
 8003dda:	1dfa      	adds	r2, r7, #7
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	0011      	movs	r1, r2
 8003de0:	2203      	movs	r2, #3
 8003de2:	400a      	ands	r2, r1
 8003de4:	00d2      	lsls	r2, r2, #3
 8003de6:	21ff      	movs	r1, #255	; 0xff
 8003de8:	4091      	lsls	r1, r2
 8003dea:	000a      	movs	r2, r1
 8003dec:	43d2      	mvns	r2, r2
 8003dee:	401a      	ands	r2, r3
 8003df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	401a      	ands	r2, r3
 8003dfa:	1dfb      	adds	r3, r7, #7
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	2303      	movs	r3, #3
 8003e02:	4003      	ands	r3, r0
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e08:	481f      	ldr	r0, [pc, #124]	; (8003e88 <__NVIC_SetPriority+0xd4>)
 8003e0a:	1dfb      	adds	r3, r7, #7
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	430a      	orrs	r2, r1
 8003e14:	33c0      	adds	r3, #192	; 0xc0
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e1a:	e031      	b.n	8003e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <__NVIC_SetPriority+0xd8>)
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	0019      	movs	r1, r3
 8003e24:	230f      	movs	r3, #15
 8003e26:	400b      	ands	r3, r1
 8003e28:	3b08      	subs	r3, #8
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3306      	adds	r3, #6
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	18d3      	adds	r3, r2, r3
 8003e32:	3304      	adds	r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1dfa      	adds	r2, r7, #7
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	400a      	ands	r2, r1
 8003e40:	00d2      	lsls	r2, r2, #3
 8003e42:	21ff      	movs	r1, #255	; 0xff
 8003e44:	4091      	lsls	r1, r2
 8003e46:	000a      	movs	r2, r1
 8003e48:	43d2      	mvns	r2, r2
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	401a      	ands	r2, r3
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	4003      	ands	r3, r0
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e64:	4809      	ldr	r0, [pc, #36]	; (8003e8c <__NVIC_SetPriority+0xd8>)
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	001c      	movs	r4, r3
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	4023      	ands	r3, r4
 8003e70:	3b08      	subs	r3, #8
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	430a      	orrs	r2, r1
 8003e76:	3306      	adds	r3, #6
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	18c3      	adds	r3, r0, r3
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b003      	add	sp, #12
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e94:	f3bf 8f4f 	dsb	sy
}
 8003e98:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <__NVIC_SystemReset+0x1c>)
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <__NVIC_SystemReset+0x20>)
 8003e9e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea0:	f3bf 8f4f 	dsb	sy
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	e7fd      	b.n	8003ea6 <__NVIC_SystemReset+0x16>
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	e000ed00 	.word	0xe000ed00
 8003eb0:	05fa0004 	.word	0x05fa0004

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	045b      	lsls	r3, r3, #17
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d301      	bcc.n	8003ecc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e010      	b.n	8003eee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <SysTick_Config+0x44>)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	425b      	negs	r3, r3
 8003ed8:	2103      	movs	r1, #3
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff ff6a 	bl	8003db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <SysTick_Config+0x44>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <SysTick_Config+0x44>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	e000e010 	.word	0xe000e010

08003efc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	210f      	movs	r1, #15
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	1c02      	adds	r2, r0, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	0011      	movs	r1, r2
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff ff4b 	bl	8003db4 <__NVIC_SetPriority>
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b004      	add	sp, #16
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff ff21 	bl	8003d80 <__NVIC_EnableIRQ>
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b002      	add	sp, #8
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f4a:	f7ff ffa1 	bl	8003e90 <__NVIC_SystemReset>

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff ffab 	bl	8003eb4 <SysTick_Config>
 8003f5e:	0003      	movs	r3, r0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f76:	e14d      	b.n	8004214 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4091      	lsls	r1, r2
 8003f82:	000a      	movs	r2, r1
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d100      	bne.n	8003f90 <HAL_GPIO_Init+0x28>
 8003f8e:	e13e      	b.n	800420e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d005      	beq.n	8003fa8 <HAL_GPIO_Init+0x40>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d130      	bne.n	800400a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	0013      	movs	r3, r2
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	0013      	movs	r3, r2
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	0013      	movs	r3, r2
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	0013      	movs	r3, r2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2203      	movs	r2, #3
 8004010:	4013      	ands	r3, r2
 8004012:	2b03      	cmp	r3, #3
 8004014:	d017      	beq.n	8004046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	409a      	lsls	r2, r3
 8004024:	0013      	movs	r3, r2
 8004026:	43da      	mvns	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	0013      	movs	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2203      	movs	r2, #3
 800404c:	4013      	ands	r3, r2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d123      	bne.n	800409a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	0092      	lsls	r2, r2, #2
 800405c:	58d3      	ldr	r3, [r2, r3]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2207      	movs	r2, #7
 8004064:	4013      	ands	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	409a      	lsls	r2, r3
 800406c:	0013      	movs	r3, r2
 800406e:	43da      	mvns	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2107      	movs	r1, #7
 800407e:	400b      	ands	r3, r1
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	409a      	lsls	r2, r3
 8004084:	0013      	movs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	0092      	lsls	r2, r2, #2
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	409a      	lsls	r2, r3
 80040a8:	0013      	movs	r3, r2
 80040aa:	43da      	mvns	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2203      	movs	r2, #3
 80040b8:	401a      	ands	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	0013      	movs	r3, r2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	23c0      	movs	r3, #192	; 0xc0
 80040d4:	029b      	lsls	r3, r3, #10
 80040d6:	4013      	ands	r3, r2
 80040d8:	d100      	bne.n	80040dc <HAL_GPIO_Init+0x174>
 80040da:	e098      	b.n	800420e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040dc:	4a53      	ldr	r2, [pc, #332]	; (800422c <HAL_GPIO_Init+0x2c4>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3318      	adds	r3, #24
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	589b      	ldr	r3, [r3, r2]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4013      	ands	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	220f      	movs	r2, #15
 80040f4:	409a      	lsls	r2, r3
 80040f6:	0013      	movs	r3, r2
 80040f8:	43da      	mvns	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	23a0      	movs	r3, #160	; 0xa0
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	429a      	cmp	r2, r3
 8004108:	d019      	beq.n	800413e <HAL_GPIO_Init+0x1d6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a48      	ldr	r2, [pc, #288]	; (8004230 <HAL_GPIO_Init+0x2c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0x1d2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a47      	ldr	r2, [pc, #284]	; (8004234 <HAL_GPIO_Init+0x2cc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <HAL_GPIO_Init+0x1ce>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a46      	ldr	r2, [pc, #280]	; (8004238 <HAL_GPIO_Init+0x2d0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x1ca>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <HAL_GPIO_Init+0x2d4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_GPIO_Init+0x1c6>
 800412a:	2304      	movs	r3, #4
 800412c:	e008      	b.n	8004140 <HAL_GPIO_Init+0x1d8>
 800412e:	2305      	movs	r3, #5
 8004130:	e006      	b.n	8004140 <HAL_GPIO_Init+0x1d8>
 8004132:	2303      	movs	r3, #3
 8004134:	e004      	b.n	8004140 <HAL_GPIO_Init+0x1d8>
 8004136:	2302      	movs	r3, #2
 8004138:	e002      	b.n	8004140 <HAL_GPIO_Init+0x1d8>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_GPIO_Init+0x1d8>
 800413e:	2300      	movs	r3, #0
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	2103      	movs	r1, #3
 8004144:	400a      	ands	r2, r1
 8004146:	00d2      	lsls	r2, r2, #3
 8004148:	4093      	lsls	r3, r2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004150:	4936      	ldr	r1, [pc, #216]	; (800422c <HAL_GPIO_Init+0x2c4>)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	3318      	adds	r3, #24
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_GPIO_Init+0x2c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43da      	mvns	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	035b      	lsls	r3, r3, #13
 8004176:	4013      	ands	r3, r2
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_GPIO_Init+0x2c4>)
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_GPIO_Init+0x2c4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43da      	mvns	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	039b      	lsls	r3, r3, #14
 80041a0:	4013      	ands	r3, r2
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_GPIO_Init+0x2c4>)
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_GPIO_Init+0x2c4>)
 80041b4:	2384      	movs	r3, #132	; 0x84
 80041b6:	58d3      	ldr	r3, [r2, r3]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43da      	mvns	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041d8:	4914      	ldr	r1, [pc, #80]	; (800422c <HAL_GPIO_Init+0x2c4>)
 80041da:	2284      	movs	r2, #132	; 0x84
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <HAL_GPIO_Init+0x2c4>)
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	58d3      	ldr	r3, [r2, r3]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43da      	mvns	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	025b      	lsls	r3, r3, #9
 80041fa:	4013      	ands	r3, r2
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004206:	4909      	ldr	r1, [pc, #36]	; (800422c <HAL_GPIO_Init+0x2c4>)
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3301      	adds	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	40da      	lsrs	r2, r3
 800421c:	1e13      	subs	r3, r2, #0
 800421e:	d000      	beq.n	8004222 <HAL_GPIO_Init+0x2ba>
 8004220:	e6aa      	b.n	8003f78 <HAL_GPIO_Init+0x10>
  }
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b006      	add	sp, #24
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021800 	.word	0x40021800
 8004230:	50000400 	.word	0x50000400
 8004234:	50000800 	.word	0x50000800
 8004238:	50000c00 	.word	0x50000c00
 800423c:	50001000 	.word	0x50001000

08004240 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800424e:	e0ba      	b.n	80043c6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004250:	2201      	movs	r2, #1
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	409a      	lsls	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d100      	bne.n	8004264 <HAL_GPIO_DeInit+0x24>
 8004262:	e0ad      	b.n	80043c0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004264:	4a5d      	ldr	r2, [pc, #372]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3318      	adds	r3, #24
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	589b      	ldr	r3, [r3, r2]
 8004270:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2203      	movs	r2, #3
 8004276:	4013      	ands	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	220f      	movs	r2, #15
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	23a0      	movs	r3, #160	; 0xa0
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	429a      	cmp	r2, r3
 800428c:	d019      	beq.n	80042c2 <HAL_GPIO_DeInit+0x82>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a53      	ldr	r2, [pc, #332]	; (80043e0 <HAL_GPIO_DeInit+0x1a0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_GPIO_DeInit+0x7e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_GPIO_DeInit+0x1a4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00d      	beq.n	80042ba <HAL_GPIO_DeInit+0x7a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a51      	ldr	r2, [pc, #324]	; (80043e8 <HAL_GPIO_DeInit+0x1a8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <HAL_GPIO_DeInit+0x76>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a50      	ldr	r2, [pc, #320]	; (80043ec <HAL_GPIO_DeInit+0x1ac>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_GPIO_DeInit+0x72>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e008      	b.n	80042c4 <HAL_GPIO_DeInit+0x84>
 80042b2:	2305      	movs	r3, #5
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_DeInit+0x84>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e004      	b.n	80042c4 <HAL_GPIO_DeInit+0x84>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_DeInit+0x84>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_GPIO_DeInit+0x84>
 80042c2:	2300      	movs	r3, #0
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	2103      	movs	r1, #3
 80042c8:	400a      	ands	r2, r1
 80042ca:	00d2      	lsls	r2, r2, #3
 80042cc:	4093      	lsls	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d136      	bne.n	8004342 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80042d4:	4a41      	ldr	r2, [pc, #260]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	58d3      	ldr	r3, [r2, r3]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	43d2      	mvns	r2, r2
 80042de:	493f      	ldr	r1, [pc, #252]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 80042e8:	2384      	movs	r3, #132	; 0x84
 80042ea:	58d3      	ldr	r3, [r2, r3]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	43d2      	mvns	r2, r2
 80042f0:	493a      	ldr	r1, [pc, #232]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	2284      	movs	r2, #132	; 0x84
 80042f6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80042f8:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43d9      	mvns	r1, r3
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004302:	400a      	ands	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004306:	4b35      	ldr	r3, [pc, #212]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43d9      	mvns	r1, r3
 800430e:	4b33      	ldr	r3, [pc, #204]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004310:	400a      	ands	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2203      	movs	r2, #3
 8004318:	4013      	ands	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	220f      	movs	r2, #15
 800431e:	409a      	lsls	r2, r3
 8004320:	0013      	movs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004324:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3318      	adds	r3, #24
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	589a      	ldr	r2, [r3, r2]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43d9      	mvns	r1, r3
 8004334:	4829      	ldr	r0, [pc, #164]	; (80043dc <HAL_GPIO_DeInit+0x19c>)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	400a      	ands	r2, r1
 800433c:	3318      	adds	r3, #24
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2103      	movs	r1, #3
 800434c:	4099      	lsls	r1, r3
 800434e:	000b      	movs	r3, r1
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	58d3      	ldr	r3, [r2, r3]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	2107      	movs	r1, #7
 8004366:	400a      	ands	r2, r1
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	210f      	movs	r1, #15
 800436c:	4091      	lsls	r1, r2
 800436e:	000a      	movs	r2, r1
 8004370:	43d1      	mvns	r1, r2
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	08d2      	lsrs	r2, r2, #3
 8004376:	4019      	ands	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	0092      	lsls	r2, r2, #2
 800437e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	2103      	movs	r1, #3
 800438a:	4091      	lsls	r1, r2
 800438c:	000a      	movs	r2, r1
 800438e:	43d2      	mvns	r2, r2
 8004390:	401a      	ands	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2101      	movs	r1, #1
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4091      	lsls	r1, r2
 80043a0:	000a      	movs	r2, r1
 80043a2:	43d2      	mvns	r2, r2
 80043a4:	401a      	ands	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	0052      	lsls	r2, r2, #1
 80043b2:	2103      	movs	r1, #3
 80043b4:	4091      	lsls	r1, r2
 80043b6:	000a      	movs	r2, r1
 80043b8:	43d2      	mvns	r2, r2
 80043ba:	401a      	ands	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
    }

    position++;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	40da      	lsrs	r2, r3
 80043cc:	1e13      	subs	r3, r2, #0
 80043ce:	d000      	beq.n	80043d2 <HAL_GPIO_DeInit+0x192>
 80043d0:	e73e      	b.n	8004250 <HAL_GPIO_DeInit+0x10>
  }
}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b006      	add	sp, #24
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021800 	.word	0x40021800
 80043e0:	50000400 	.word	0x50000400
 80043e4:	50000800 	.word	0x50000800
 80043e8:	50000c00 	.word	0x50000c00
 80043ec:	50001000 	.word	0x50001000

080043f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	000a      	movs	r2, r1
 80043fa:	1cbb      	adds	r3, r7, #2
 80043fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	1cba      	adds	r2, r7, #2
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	4013      	ands	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800440a:	230f      	movs	r3, #15
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e003      	b.n	800441c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800441c:	230f      	movs	r3, #15
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	781b      	ldrb	r3, [r3, #0]
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	0008      	movs	r0, r1
 8004434:	0011      	movs	r1, r2
 8004436:	1cbb      	adds	r3, r7, #2
 8004438:	1c02      	adds	r2, r0, #0
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	1c7b      	adds	r3, r7, #1
 800443e:	1c0a      	adds	r2, r1, #0
 8004440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004442:	1c7b      	adds	r3, r7, #1
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800444a:	1cbb      	adds	r3, r7, #2
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004452:	e003      	b.n	800445c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004454:	1cbb      	adds	r3, r7, #2
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_PWR_EnableBkUpAccess+0x18>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_PWR_EnableBkUpAccess+0x18>)
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	0049      	lsls	r1, r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40007000 	.word	0x40007000

08004480 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	000a      	movs	r2, r1
 800448a:	1cfb      	adds	r3, r7, #3
 800448c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2207      	movs	r2, #7
 800449a:	4393      	bics	r3, r2
 800449c:	001a      	movs	r2, r3
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <HAL_PWR_EnterSTOPMode+0x68>)
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e005      	b.n	80044b4 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <HAL_PWR_EnterSTOPMode+0x68>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_PWR_EnterSTOPMode+0x68>)
 80044ae:	2107      	movs	r1, #7
 80044b0:	438a      	bics	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_PWR_EnterSTOPMode+0x6c>)
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_PWR_EnterSTOPMode+0x6c>)
 80044ba:	2104      	movs	r1, #4
 80044bc:	430a      	orrs	r2, r1
 80044be:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80044c0:	1cfb      	adds	r3, r7, #3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80044c8:	bf30      	wfi
 80044ca:	e002      	b.n	80044d2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80044cc:	bf40      	sev
    __WFE();
 80044ce:	bf20      	wfe
    __WFE();
 80044d0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_PWR_EnterSTOPMode+0x6c>)
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_PWR_EnterSTOPMode+0x6c>)
 80044d8:	2104      	movs	r1, #4
 80044da:	438a      	bics	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	40007000 	.word	0x40007000
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2207      	movs	r2, #7
 80044fa:	4393      	bics	r3, r2
 80044fc:	001a      	movs	r2, r3
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004500:	2103      	movs	r1, #3
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800450c:	2104      	movs	r1, #4
 800450e:	430a      	orrs	r2, r1
 8004510:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004512:	bf30      	wfi
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40007000 	.word	0x40007000
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	429a      	cmp	r2, r3
 8004546:	d11f      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	0013      	movs	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	189b      	adds	r3, r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4912      	ldr	r1, [pc, #72]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004556:	0018      	movs	r0, r3
 8004558:	f7fb fdf0 	bl	800013c <__udivsi3>
 800455c:	0003      	movs	r3, r0
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004562:	e008      	b.n	8004576 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e001      	b.n	8004576 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e009      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	401a      	ands	r2, r3
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	429a      	cmp	r2, r3
 8004586:	d0ed      	beq.n	8004564 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40007000 	.word	0x40007000
 8004598:	fffff9ff 	.word	0xfffff9ff
 800459c:	20000008 	.word	0x20000008
 80045a0:	000f4240 	.word	0x000f4240

080045a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	23e0      	movs	r3, #224	; 0xe0
 80045ae:	01db      	lsls	r3, r3, #7
 80045b0:	4013      	ands	r3, r2
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000

080045bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f000 fb50 	bl	8004c70 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2201      	movs	r2, #1
 80045d6:	4013      	ands	r3, r2
 80045d8:	d100      	bne.n	80045dc <HAL_RCC_OscConfig+0x20>
 80045da:	e07c      	b.n	80046d6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045dc:	4bc3      	ldr	r3, [pc, #780]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2238      	movs	r2, #56	; 0x38
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e6:	4bc1      	ldr	r3, [pc, #772]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d102      	bne.n	80045fc <HAL_RCC_OscConfig+0x40>
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d002      	beq.n	8004602 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d10b      	bne.n	800461a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004602:	4bba      	ldr	r3, [pc, #744]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	4013      	ands	r3, r2
 800460c:	d062      	beq.n	80046d4 <HAL_RCC_OscConfig+0x118>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d15e      	bne.n	80046d4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e32a      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	429a      	cmp	r2, r3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_OscConfig+0x7a>
 8004626:	4bb1      	ldr	r3, [pc, #708]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4bb0      	ldr	r3, [pc, #704]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	0249      	lsls	r1, r1, #9
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e020      	b.n	8004678 <HAL_RCC_OscConfig+0xbc>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	23a0      	movs	r3, #160	; 0xa0
 800463c:	02db      	lsls	r3, r3, #11
 800463e:	429a      	cmp	r2, r3
 8004640:	d10e      	bne.n	8004660 <HAL_RCC_OscConfig+0xa4>
 8004642:	4baa      	ldr	r3, [pc, #680]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4ba9      	ldr	r3, [pc, #676]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	02c9      	lsls	r1, r1, #11
 800464c:	430a      	orrs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	4ba6      	ldr	r3, [pc, #664]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4ba5      	ldr	r3, [pc, #660]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	0249      	lsls	r1, r1, #9
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0xbc>
 8004660:	4ba2      	ldr	r3, [pc, #648]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4ba1      	ldr	r3, [pc, #644]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004666:	49a2      	ldr	r1, [pc, #648]	; (80048f0 <HAL_RCC_OscConfig+0x334>)
 8004668:	400a      	ands	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	4b9f      	ldr	r3, [pc, #636]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b9e      	ldr	r3, [pc, #632]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004672:	49a0      	ldr	r1, [pc, #640]	; (80048f4 <HAL_RCC_OscConfig+0x338>)
 8004674:	400a      	ands	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7ff fb1e 	bl	8003cc0 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
 8004686:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468a:	f7ff fb19 	bl	8003cc0 <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e2e9      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469c:	4b93      	ldr	r3, [pc, #588]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	4013      	ands	r3, r2
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0xce>
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7ff fb09 	bl	8003cc0 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b4:	f7ff fb04 	bl	8003cc0 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e2d4      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	4b89      	ldr	r3, [pc, #548]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	029b      	lsls	r3, r3, #10
 80046ce:	4013      	ands	r3, r2
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0xf8>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2202      	movs	r2, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	d100      	bne.n	80046e2 <HAL_RCC_OscConfig+0x126>
 80046e0:	e099      	b.n	8004816 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b82      	ldr	r3, [pc, #520]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2238      	movs	r2, #56	; 0x38
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ec:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2203      	movs	r2, #3
 80046f2:	4013      	ands	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d102      	bne.n	8004702 <HAL_RCC_OscConfig+0x146>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d002      	beq.n	8004708 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d135      	bne.n	8004774 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	4b78      	ldr	r3, [pc, #480]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4013      	ands	r3, r2
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x164>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e2a7      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b72      	ldr	r3, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a74      	ldr	r2, [pc, #464]	; (80048f8 <HAL_RCC_OscConfig+0x33c>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	4b6e      	ldr	r3, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d112      	bne.n	8004762 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800473c:	4b6b      	ldr	r3, [pc, #428]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x340>)
 8004742:	4013      	ands	r3, r2
 8004744:	0019      	movs	r1, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	4b68      	ldr	r3, [pc, #416]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004750:	4b66      	ldr	r3, [pc, #408]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0adb      	lsrs	r3, r3, #11
 8004756:	2207      	movs	r2, #7
 8004758:	4013      	ands	r3, r2
 800475a:	4a69      	ldr	r2, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x344>)
 800475c:	40da      	lsrs	r2, r3
 800475e:	4b69      	ldr	r3, [pc, #420]	; (8004904 <HAL_RCC_OscConfig+0x348>)
 8004760:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004762:	4b69      	ldr	r3, [pc, #420]	; (8004908 <HAL_RCC_OscConfig+0x34c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff fa4e 	bl	8003c08 <HAL_InitTick>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d051      	beq.n	8004814 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e27d      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d030      	beq.n	80047de <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800477c:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a5e      	ldr	r2, [pc, #376]	; (80048fc <HAL_RCC_OscConfig+0x340>)
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	4b58      	ldr	r3, [pc, #352]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004790:	4b56      	ldr	r3, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b55      	ldr	r3, [pc, #340]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	0049      	lsls	r1, r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7ff fa8f 	bl	8003cc0 <HAL_GetTick>
 80047a2:	0003      	movs	r3, r0
 80047a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7ff fa8a 	bl	8003cc0 <HAL_GetTick>
 80047ac:	0002      	movs	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e25a      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ba:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4013      	ands	r3, r2
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c6:	4b49      	ldr	r3, [pc, #292]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a4b      	ldr	r2, [pc, #300]	; (80048f8 <HAL_RCC_OscConfig+0x33c>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	4b45      	ldr	r3, [pc, #276]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	e01b      	b.n	8004816 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b43      	ldr	r3, [pc, #268]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80047e4:	4949      	ldr	r1, [pc, #292]	; (800490c <HAL_RCC_OscConfig+0x350>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7ff fa69 	bl	8003cc0 <HAL_GetTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7ff fa64 	bl	8003cc0 <HAL_GetTick>
 80047f8:	0002      	movs	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e234      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4013      	ands	r3, r2
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x238>
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	4013      	ands	r3, r2
 800481e:	d047      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2238      	movs	r2, #56	; 0x38
 8004826:	4013      	ands	r3, r2
 8004828:	2b18      	cmp	r3, #24
 800482a:	d10a      	bne.n	8004842 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	2202      	movs	r2, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d03c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2f4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d138      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e216      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d019      	beq.n	800487e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800484a:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 800484c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800484e:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004850:	2101      	movs	r1, #1
 8004852:	430a      	orrs	r2, r1
 8004854:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7ff fa33 	bl	8003cc0 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004860:	f7ff fa2e 	bl	8003cc0 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1fe      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	d0f1      	beq.n	8004860 <HAL_RCC_OscConfig+0x2a4>
 800487c:	e018      	b.n	80048b0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004882:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 8004884:	2101      	movs	r1, #1
 8004886:	438a      	bics	r2, r1
 8004888:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7ff fa19 	bl	8003cc0 <HAL_GetTick>
 800488e:	0003      	movs	r3, r0
 8004890:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7ff fa14 	bl	8003cc0 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1e4      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2202      	movs	r2, #2
 80048ac:	4013      	ands	r3, r2
 80048ae:	d1f1      	bne.n	8004894 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2204      	movs	r2, #4
 80048b6:	4013      	ands	r3, r2
 80048b8:	d100      	bne.n	80048bc <HAL_RCC_OscConfig+0x300>
 80048ba:	e0c7      	b.n	8004a4c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048bc:	231f      	movs	r3, #31
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2238      	movs	r2, #56	; 0x38
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d11f      	bne.n	8004910 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCC_OscConfig+0x330>)
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d100      	bne.n	80048dc <HAL_RCC_OscConfig+0x320>
 80048da:	e0b7      	b.n	8004a4c <HAL_RCC_OscConfig+0x490>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d000      	beq.n	80048e6 <HAL_RCC_OscConfig+0x32a>
 80048e4:	e0b2      	b.n	8004a4c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e1c2      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	40021000 	.word	0x40021000
 80048f0:	fffeffff 	.word	0xfffeffff
 80048f4:	fffbffff 	.word	0xfffbffff
 80048f8:	ffff80ff 	.word	0xffff80ff
 80048fc:	ffffc7ff 	.word	0xffffc7ff
 8004900:	00f42400 	.word	0x00f42400
 8004904:	20000008 	.word	0x20000008
 8004908:	2000000c 	.word	0x2000000c
 800490c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004910:	4bb5      	ldr	r3, [pc, #724]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	055b      	lsls	r3, r3, #21
 8004918:	4013      	ands	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x364>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x366>
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	4bb0      	ldr	r3, [pc, #704]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492a:	4baf      	ldr	r3, [pc, #700]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	0549      	lsls	r1, r1, #21
 8004930:	430a      	orrs	r2, r1
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
 8004934:	4bac      	ldr	r3, [pc, #688]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	055b      	lsls	r3, r3, #21
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004942:	231f      	movs	r3, #31
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494a:	4ba8      	ldr	r3, [pc, #672]	; (8004bec <HAL_RCC_OscConfig+0x630>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4013      	ands	r3, r2
 8004954:	d11a      	bne.n	800498c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004956:	4ba5      	ldr	r3, [pc, #660]	; (8004bec <HAL_RCC_OscConfig+0x630>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4ba4      	ldr	r3, [pc, #656]	; (8004bec <HAL_RCC_OscConfig+0x630>)
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	0049      	lsls	r1, r1, #1
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004964:	f7ff f9ac 	bl	8003cc0 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7ff f9a7 	bl	8003cc0 <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e177      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004980:	4b9a      	ldr	r3, [pc, #616]	; (8004bec <HAL_RCC_OscConfig+0x630>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4013      	ands	r3, r2
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3e6>
 8004994:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004998:	4b93      	ldr	r3, [pc, #588]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	65da      	str	r2, [r3, #92]	; 0x5c
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x420>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x408>
 80049aa:	4b8f      	ldr	r3, [pc, #572]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ae:	4b8e      	ldr	r3, [pc, #568]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049b0:	2104      	movs	r1, #4
 80049b2:	430a      	orrs	r2, r1
 80049b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80049b6:	4b8c      	ldr	r3, [pc, #560]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ba:	4b8b      	ldr	r3, [pc, #556]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049bc:	2101      	movs	r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x420>
 80049c4:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049c8:	4b87      	ldr	r3, [pc, #540]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80049d0:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049d4:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 80049d6:	2104      	movs	r1, #4
 80049d8:	438a      	bics	r2, r1
 80049da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d014      	beq.n	8004a0e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7ff f96c 	bl	8003cc0 <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	e009      	b.n	8004a02 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7ff f967 	bl	8003cc0 <HAL_GetTick>
 80049f2:	0002      	movs	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	4a7d      	ldr	r2, [pc, #500]	; (8004bf0 <HAL_RCC_OscConfig+0x634>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e136      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2202      	movs	r2, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x432>
 8004a0c:	e013      	b.n	8004a36 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7ff f957 	bl	8003cc0 <HAL_GetTick>
 8004a12:	0003      	movs	r3, r0
 8004a14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a16:	e009      	b.n	8004a2c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7ff f952 	bl	8003cc0 <HAL_GetTick>
 8004a1c:	0002      	movs	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a73      	ldr	r2, [pc, #460]	; (8004bf0 <HAL_RCC_OscConfig+0x634>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e121      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a2c:	4b6e      	ldr	r3, [pc, #440]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	2202      	movs	r2, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a36:	231f      	movs	r3, #31
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b69      	ldr	r3, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a44:	4b68      	ldr	r3, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a46:	496b      	ldr	r1, [pc, #428]	; (8004bf4 <HAL_RCC_OscConfig+0x638>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	4013      	ands	r3, r2
 8004a54:	d039      	beq.n	8004aca <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01b      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	03c9      	lsls	r1, r1, #15
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7ff f928 	bl	8003cc0 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a76:	f7ff f923 	bl	8003cc0 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0f3      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	4013      	ands	r3, r2
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4ba>
 8004a94:	e019      	b.n	8004aca <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a96:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004a9c:	4956      	ldr	r1, [pc, #344]	; (8004bf8 <HAL_RCC_OscConfig+0x63c>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7ff f90d 	bl	8003cc0 <HAL_GetTick>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7ff f908 	bl	8003cc0 <HAL_GetTick>
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0d8      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004abe:	4b4a      	ldr	r3, [pc, #296]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	041b      	lsls	r3, r3, #16
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d100      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x518>
 8004ad2:	e0cc      	b.n	8004c6e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad4:	4b44      	ldr	r3, [pc, #272]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2238      	movs	r2, #56	; 0x38
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d100      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x526>
 8004ae0:	e07b      	b.n	8004bda <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d156      	bne.n	8004b98 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004af0:	4942      	ldr	r1, [pc, #264]	; (8004bfc <HAL_RCC_OscConfig+0x640>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7ff f8e3 	bl	8003cc0 <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7ff f8de 	bl	8003cc0 <HAL_GetTick>
 8004b04:	0002      	movs	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0ae      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b12:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	049b      	lsls	r3, r3, #18
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1e:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4a37      	ldr	r2, [pc, #220]	; (8004c00 <HAL_RCC_OscConfig+0x644>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	0019      	movs	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b52:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	0449      	lsls	r1, r1, #17
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b60:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	0549      	lsls	r1, r1, #21
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7ff f8a7 	bl	8003cc0 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7ff f8a2 	bl	8003cc0 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e072      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	049b      	lsls	r3, r3, #18
 8004b92:	4013      	ands	r3, r2
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x5bc>
 8004b96:	e06a      	b.n	8004c6e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004b9e:	4917      	ldr	r1, [pc, #92]	; (8004bfc <HAL_RCC_OscConfig+0x640>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7ff f88c 	bl	8003cc0 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bae:	f7ff f887 	bl	8003cc0 <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e057      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	049b      	lsls	r3, r3, #18
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_OscConfig+0x62c>)
 8004bd2:	490c      	ldr	r1, [pc, #48]	; (8004c04 <HAL_RCC_OscConfig+0x648>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e049      	b.n	8004c6e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e044      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	00001388 	.word	0x00001388
 8004bf4:	efffffff 	.word	0xefffffff
 8004bf8:	ffbfffff 	.word	0xffbfffff
 8004bfc:	feffffff 	.word	0xfeffffff
 8004c00:	11c1808c 	.word	0x11c1808c
 8004c04:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x6bc>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2203      	movs	r2, #3
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d126      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2270      	movs	r2, #112	; 0x70
 8004c20:	401a      	ands	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d11f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	23fe      	movs	r3, #254	; 0xfe
 8004c2e:	01db      	lsls	r3, r3, #7
 8004c30:	401a      	ands	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d116      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	23f8      	movs	r3, #248	; 0xf8
 8004c40:	039b      	lsls	r3, r3, #14
 8004c42:	401a      	ands	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d10e      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	23e0      	movs	r3, #224	; 0xe0
 8004c50:	051b      	lsls	r3, r3, #20
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d106      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	0f5b      	lsrs	r3, r3, #29
 8004c60:	075a      	lsls	r2, r3, #29
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b008      	add	sp, #32
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0e9      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2207      	movs	r2, #7
 8004c96:	4013      	ands	r3, r2
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d91e      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cb0:	f7ff f806 	bl	8003cc0 <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cb8:	e009      	b.n	8004cce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cba:	f7ff f801 	bl	8003cc0 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	4a6a      	ldr	r2, [pc, #424]	; (8004e70 <HAL_RCC_ClockConfig+0x1f4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0ca      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cce:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1ee      	bne.n	8004cba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d015      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2204      	movs	r2, #4
 8004cec:	4013      	ands	r3, r2
 8004cee:	d006      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cf0:	4b60      	ldr	r3, [pc, #384]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004cf6:	21e0      	movs	r1, #224	; 0xe0
 8004cf8:	01c9      	lsls	r1, r1, #7
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4a5d      	ldr	r2, [pc, #372]	; (8004e78 <HAL_RCC_ClockConfig+0x1fc>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d057      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d107      	bne.n	8004d34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	029b      	lsls	r3, r3, #10
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d12b      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e097      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3c:	4b4d      	ldr	r3, [pc, #308]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	049b      	lsls	r3, r3, #18
 8004d44:	4013      	ands	r3, r2
 8004d46:	d11f      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e08b      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d54:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d113      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e07f      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6c:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	d108      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e074      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2202      	movs	r2, #2
 8004d80:	4013      	ands	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e06d      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d88:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	4393      	bics	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9c:	f7fe ff90 	bl	8003cc0 <HAL_GetTick>
 8004da0:	0003      	movs	r3, r0
 8004da2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da4:	e009      	b.n	8004dba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fe ff8b 	bl	8003cc0 <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <HAL_RCC_ClockConfig+0x1f4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e054      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2238      	movs	r2, #56	; 0x38
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1ec      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d21e      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2207      	movs	r2, #7
 8004de0:	4393      	bics	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dec:	f7fe ff68 	bl	8003cc0 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004df4:	e009      	b.n	8004e0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df6:	f7fe ff63 	bl	8003cc0 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_RCC_ClockConfig+0x1f4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e02c      	b.n	8004e64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2207      	movs	r2, #7
 8004e10:	4013      	ands	r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1ee      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e22:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_RCC_ClockConfig+0x200>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e36:	f000 f829 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e3a:	0001      	movs	r1, r0
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	220f      	movs	r2, #15
 8004e44:	401a      	ands	r2, r3
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <HAL_RCC_ClockConfig+0x204>)
 8004e48:	0092      	lsls	r2, r2, #2
 8004e4a:	58d3      	ldr	r3, [r2, r3]
 8004e4c:	221f      	movs	r2, #31
 8004e4e:	4013      	ands	r3, r2
 8004e50:	000a      	movs	r2, r1
 8004e52:	40da      	lsrs	r2, r3
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_ClockConfig+0x208>)
 8004e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_ClockConfig+0x20c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fe fed3 	bl	8003c08 <HAL_InitTick>
 8004e62:	0003      	movs	r3, r0
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	00001388 	.word	0x00001388
 8004e74:	40021000 	.word	0x40021000
 8004e78:	fffff0ff 	.word	0xfffff0ff
 8004e7c:	ffff8fff 	.word	0xffff8fff
 8004e80:	08013ee4 	.word	0x08013ee4
 8004e84:	20000008 	.word	0x20000008
 8004e88:	2000000c 	.word	0x2000000c

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2238      	movs	r2, #56	; 0x38
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d10f      	bne.n	8004ebc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e9c:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	0adb      	lsrs	r3, r3, #11
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	0013      	movs	r3, r2
 8004eac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	4835      	ldr	r0, [pc, #212]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004eb2:	f7fb f943 	bl	800013c <__udivsi3>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e05d      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2238      	movs	r2, #56	; 0x38
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d102      	bne.n	8004ece <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec8:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x100>)
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e054      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ece:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2238      	movs	r2, #56	; 0x38
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d138      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004eda:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	2207      	movs	r2, #7
 8004eec:	4013      	ands	r3, r2
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4824      	ldr	r0, [pc, #144]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x100>)
 8004efc:	f7fb f91e 	bl	800013c <__udivsi3>
 8004f00:	0003      	movs	r3, r0
 8004f02:	0019      	movs	r1, r3
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	227f      	movs	r2, #127	; 0x7f
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	434b      	muls	r3, r1
 8004f10:	617b      	str	r3, [r7, #20]
        break;
 8004f12:	e00d      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	481c      	ldr	r0, [pc, #112]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f18:	f7fb f910 	bl	800013c <__udivsi3>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	0019      	movs	r1, r3
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	227f      	movs	r2, #127	; 0x7f
 8004f28:	4013      	ands	r3, r2
 8004f2a:	434b      	muls	r3, r1
 8004f2c:	617b      	str	r3, [r7, #20]
        break;
 8004f2e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0f5b      	lsrs	r3, r3, #29
 8004f36:	2207      	movs	r2, #7
 8004f38:	4013      	ands	r3, r2
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	6978      	ldr	r0, [r7, #20]
 8004f42:	f7fb f8fb 	bl	800013c <__udivsi3>
 8004f46:	0003      	movs	r3, r0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e015      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2238      	movs	r2, #56	; 0x38
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d103      	bne.n	8004f60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2238      	movs	r2, #56	; 0x38
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b18      	cmp	r3, #24
 8004f6a:	d103      	bne.n	8004f74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f6c:	23fa      	movs	r3, #250	; 0xfa
 8004f6e:	01db      	lsls	r3, r3, #7
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e001      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f78:	693b      	ldr	r3, [r7, #16]
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b006      	add	sp, #24
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	40021000 	.word	0x40021000
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	007a1200 	.word	0x007a1200

08004f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f94:	4b02      	ldr	r3, [pc, #8]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	20000008 	.word	0x20000008

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004fa8:	f7ff fff2 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fac:	0004      	movs	r4, r0
 8004fae:	f7ff faf9 	bl	80045a4 <LL_RCC_GetAPB1Prescaler>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	0b1a      	lsrs	r2, r3, #12
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb8:	0092      	lsls	r2, r2, #2
 8004fba:	58d3      	ldr	r3, [r2, r3]
 8004fbc:	221f      	movs	r2, #31
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	40dc      	lsrs	r4, r3
 8004fc2:	0023      	movs	r3, r4
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	08013f24 	.word	0x08013f24

08004fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004fd8:	2313      	movs	r3, #19
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe0:	2312      	movs	r3, #18
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	029b      	lsls	r3, r3, #10
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004ff4:	e0ad      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2011      	movs	r0, #17
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	055b      	lsls	r3, r3, #21
 8005006:	4013      	ands	r3, r2
 8005008:	d110      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	4b44      	ldr	r3, [pc, #272]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800500c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	0549      	lsls	r1, r1, #21
 8005014:	430a      	orrs	r2, r1
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c
 8005018:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800501a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	055b      	lsls	r3, r3, #21
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005026:	183b      	adds	r3, r7, r0
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502c:	4b3c      	ldr	r3, [pc, #240]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0049      	lsls	r1, r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503a:	f7fe fe41 	bl	8003cc0 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005042:	e00b      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fe fe3c 	bl	8003cc0 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d904      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005052:	2313      	movs	r3, #19
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	2203      	movs	r2, #3
 8005058:	701a      	strb	r2, [r3, #0]
        break;
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d0ed      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005068:	2313      	movs	r3, #19
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d15e      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005076:	23c0      	movs	r3, #192	; 0xc0
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4013      	ands	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d019      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	429a      	cmp	r2, r3
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005094:	4013      	ands	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005098:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800509a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800509c:	4b1f      	ldr	r3, [pc, #124]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	0249      	lsls	r1, r1, #9
 80050a2:	430a      	orrs	r2, r1
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a6:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050aa:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050ac:	491e      	ldr	r1, [pc, #120]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80050ae:	400a      	ands	r2, r1
 80050b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050b2:	4b1a      	ldr	r3, [pc, #104]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2201      	movs	r2, #1
 80050bc:	4013      	ands	r3, r2
 80050be:	d016      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fe fdfe 	bl	8003cc0 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	e00c      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fe fdf9 	bl	8003cc0 <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d904      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80050da:	2313      	movs	r3, #19
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	2203      	movs	r2, #3
 80050e0:	701a      	strb	r2, [r3, #0]
            break;
 80050e2:	e004      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	2202      	movs	r2, #2
 80050ea:	4013      	ands	r3, r2
 80050ec:	d0ed      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80050ee:	2313      	movs	r3, #19
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	4a09      	ldr	r2, [pc, #36]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005108:	430a      	orrs	r2, r1
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c
 800510c:	e016      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800510e:	2312      	movs	r3, #18
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	2213      	movs	r2, #19
 8005114:	18ba      	adds	r2, r7, r2
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e00f      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800511c:	40021000 	.word	0x40021000
 8005120:	40007000 	.word	0x40007000
 8005124:	fffffcff 	.word	0xfffffcff
 8005128:	fffeffff 	.word	0xfffeffff
 800512c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	2312      	movs	r3, #18
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	2213      	movs	r2, #19
 8005136:	18ba      	adds	r2, r7, r2
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800513c:	2311      	movs	r3, #17
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005146:	4bb6      	ldr	r3, [pc, #728]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514a:	4bb5      	ldr	r3, [pc, #724]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800514c:	49b5      	ldr	r1, [pc, #724]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800514e:	400a      	ands	r2, r1
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800515c:	4bb0      	ldr	r3, [pc, #704]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2203      	movs	r2, #3
 8005162:	4393      	bics	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4bad      	ldr	r3, [pc, #692]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800516c:	430a      	orrs	r2, r1
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800517a:	4ba9      	ldr	r3, [pc, #676]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	220c      	movs	r2, #12
 8005180:	4393      	bics	r3, r2
 8005182:	0019      	movs	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	4ba5      	ldr	r3, [pc, #660]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800518a:	430a      	orrs	r2, r1
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2204      	movs	r2, #4
 8005194:	4013      	ands	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005198:	4ba1      	ldr	r3, [pc, #644]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	2230      	movs	r2, #48	; 0x30
 800519e:	4393      	bics	r3, r2
 80051a0:	0019      	movs	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	4b9e      	ldr	r3, [pc, #632]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051a8:	430a      	orrs	r2, r1
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	4013      	ands	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b6:	4b9a      	ldr	r3, [pc, #616]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	4a9b      	ldr	r2, [pc, #620]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80051bc:	4013      	ands	r3, r2
 80051be:	0019      	movs	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	4b96      	ldr	r3, [pc, #600]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051c6:	430a      	orrs	r2, r1
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	015b      	lsls	r3, r3, #5
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80051d6:	4b92      	ldr	r3, [pc, #584]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	4a94      	ldr	r2, [pc, #592]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051dc:	4013      	ands	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	4b8e      	ldr	r3, [pc, #568]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f6:	4b8a      	ldr	r3, [pc, #552]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	4a8d      	ldr	r2, [pc, #564]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005204:	4b86      	ldr	r3, [pc, #536]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005206:	430a      	orrs	r2, r1
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4013      	ands	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005216:	4b82      	ldr	r3, [pc, #520]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	4a86      	ldr	r2, [pc, #536]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b7e      	ldr	r3, [pc, #504]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2220      	movs	r2, #32
 8005230:	4013      	ands	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005234:	4b7a      	ldr	r3, [pc, #488]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	4a7f      	ldr	r2, [pc, #508]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	4b77      	ldr	r3, [pc, #476]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005244:	430a      	orrs	r2, r1
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	4013      	ands	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005252:	4b73      	ldr	r3, [pc, #460]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	4a79      	ldr	r2, [pc, #484]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005258:	4013      	ands	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005262:	430a      	orrs	r2, r1
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	01db      	lsls	r3, r3, #7
 800526e:	4013      	ands	r3, r2
 8005270:	d015      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005272:	4b6b      	ldr	r3, [pc, #428]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	0899      	lsrs	r1, r3, #2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527e:	4b68      	ldr	r3, [pc, #416]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005280:	430a      	orrs	r2, r1
 8005282:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	429a      	cmp	r2, r3
 800528e:	d106      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005290:	4b63      	ldr	r3, [pc, #396]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	4b62      	ldr	r3, [pc, #392]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	0249      	lsls	r1, r1, #9
 800529a:	430a      	orrs	r2, r1
 800529c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	4013      	ands	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052aa:	4b5d      	ldr	r3, [pc, #372]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	4393      	bics	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	039b      	lsls	r3, r3, #14
 80052c6:	4013      	ands	r3, r2
 80052c8:	d016      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052ca:	4b55      	ldr	r3, [pc, #340]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	4a5c      	ldr	r2, [pc, #368]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	0019      	movs	r1, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d8:	4b51      	ldr	r3, [pc, #324]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	03db      	lsls	r3, r3, #15
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d106      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80052ea:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	0449      	lsls	r1, r1, #17
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	03db      	lsls	r3, r3, #15
 8005300:	4013      	ands	r3, r2
 8005302:	d016      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005304:	4b46      	ldr	r3, [pc, #280]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	4a4e      	ldr	r2, [pc, #312]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005312:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005314:	430a      	orrs	r2, r1
 8005316:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	045b      	lsls	r3, r3, #17
 8005320:	429a      	cmp	r2, r3
 8005322:	d106      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005324:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	0449      	lsls	r1, r1, #17
 800532e:	430a      	orrs	r2, r1
 8005330:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	4013      	ands	r3, r2
 800533c:	d014      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	2203      	movs	r2, #3
 8005344:	4393      	bics	r3, r2
 8005346:	0019      	movs	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800534e:	430a      	orrs	r2, r1
 8005350:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d106      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	0249      	lsls	r1, r1, #9
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	019b      	lsls	r3, r3, #6
 8005370:	4013      	ands	r3, r2
 8005372:	d014      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005374:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005378:	220c      	movs	r2, #12
 800537a:	4393      	bics	r3, r2
 800537c:	0019      	movs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005382:	4b27      	ldr	r3, [pc, #156]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005384:	430a      	orrs	r2, r1
 8005386:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2b04      	cmp	r3, #4
 800538e:	d106      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	0249      	lsls	r1, r1, #9
 800539a:	430a      	orrs	r2, r1
 800539c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	045b      	lsls	r3, r3, #17
 80053a6:	4013      	ands	r3, r2
 80053a8:	d016      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d106      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	0449      	lsls	r1, r1, #17
 80053d4:	430a      	orrs	r2, r1
 80053d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	049b      	lsls	r3, r3, #18
 80053e0:	4013      	ands	r3, r2
 80053e2:	d016      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	4a10      	ldr	r2, [pc, #64]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	0019      	movs	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053f2:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f4:	430a      	orrs	r2, r1
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	429a      	cmp	r2, r3
 8005402:	d106      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	0449      	lsls	r1, r1, #17
 800540e:	430a      	orrs	r2, r1
 8005410:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005412:	2312      	movs	r3, #18
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b006      	add	sp, #24
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	efffffff 	.word	0xefffffff
 8005428:	fffff3ff 	.word	0xfffff3ff
 800542c:	fffffcff 	.word	0xfffffcff
 8005430:	fff3ffff 	.word	0xfff3ffff
 8005434:	ffcfffff 	.word	0xffcfffff
 8005438:	ffffcfff 	.word	0xffffcfff
 800543c:	ffff3fff 	.word	0xffff3fff
 8005440:	ffbfffff 	.word	0xffbfffff
 8005444:	feffffff 	.word	0xfeffffff

08005448 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d100      	bne.n	8005460 <HAL_RTC_Init+0x18>
 800545e:	e08c      	b.n	800557a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2229      	movs	r2, #41	; 0x29
 8005464:	5c9b      	ldrb	r3, [r3, r2]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2228      	movs	r2, #40	; 0x28
 8005470:	2100      	movs	r1, #0
 8005472:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2288      	movs	r2, #136	; 0x88
 8005478:	0212      	lsls	r2, r2, #8
 800547a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0018      	movs	r0, r3
 8005480:	f7fe f83c 	bl	80034fc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2229      	movs	r2, #41	; 0x29
 8005488:	2102      	movs	r1, #2
 800548a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2210      	movs	r2, #16
 8005494:	4013      	ands	r3, r2
 8005496:	2b10      	cmp	r3, #16
 8005498:	d062      	beq.n	8005560 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	22ca      	movs	r2, #202	; 0xca
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2253      	movs	r2, #83	; 0x53
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80054aa:	250f      	movs	r5, #15
 80054ac:	197c      	adds	r4, r7, r5
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 fbf3 	bl	8005c9c <RTC_EnterInitMode>
 80054b6:	0003      	movs	r3, r0
 80054b8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80054ba:	0028      	movs	r0, r5
 80054bc:	183b      	adds	r3, r7, r0
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d12c      	bne.n	800551e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	492e      	ldr	r1, [pc, #184]	; (8005588 <HAL_RTC_Init+0x140>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6912      	ldr	r2, [r2, #16]
 80054fa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6919      	ldr	r1, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	041a      	lsls	r2, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005510:	183c      	adds	r4, r7, r0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f000 fc03 	bl	8005d20 <RTC_ExitInitMode>
 800551a:	0003      	movs	r3, r0
 800551c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800551e:	230f      	movs	r3, #15
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	00d2      	lsls	r2, r2, #3
 8005534:	08d2      	lsrs	r2, r2, #3
 8005536:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	22ff      	movs	r2, #255	; 0xff
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
 800555e:	e003      	b.n	8005568 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005560:	230f      	movs	r3, #15
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005568:	230f      	movs	r3, #15
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2229      	movs	r2, #41	; 0x29
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800557a:	230f      	movs	r3, #15
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	781b      	ldrb	r3, [r3, #0]
}
 8005580:	0018      	movs	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bdb0      	pop	{r4, r5, r7, pc}
 8005588:	fb8fffbf 	.word	0xfb8fffbf

0800558c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2228      	movs	r2, #40	; 0x28
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_RTC_SetTime+0x1a>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e092      	b.n	80056cc <HAL_RTC_SetTime+0x140>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2229      	movs	r2, #41	; 0x29
 80055b2:	2102      	movs	r1, #2
 80055b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	22ca      	movs	r2, #202	; 0xca
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2253      	movs	r2, #83	; 0x53
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c6:	2513      	movs	r5, #19
 80055c8:	197c      	adds	r4, r7, r5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 fb65 	bl	8005c9c <RTC_EnterInitMode>
 80055d2:	0003      	movs	r3, r0
 80055d4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80055d6:	197b      	adds	r3, r7, r5
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d162      	bne.n	80056a4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d125      	bne.n	8005630 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	4013      	ands	r3, r2
 80055ee:	d102      	bne.n	80055f6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 fbd4 	bl	8005da8 <RTC_ByteToBcd2>
 8005600:	0003      	movs	r3, r0
 8005602:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 fbcd 	bl	8005da8 <RTC_ByteToBcd2>
 800560e:	0003      	movs	r3, r0
 8005610:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005612:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	789b      	ldrb	r3, [r3, #2]
 8005618:	0018      	movs	r0, r3
 800561a:	f000 fbc5 	bl	8005da8 <RTC_ByteToBcd2>
 800561e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005620:	0022      	movs	r2, r4
 8005622:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e017      	b.n	8005660 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2240      	movs	r2, #64	; 0x40
 8005638:	4013      	ands	r3, r2
 800563a:	d102      	bne.n	8005642 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800564e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005654:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	78db      	ldrb	r3, [r3, #3]
 800565a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	491b      	ldr	r1, [pc, #108]	; (80056d4 <HAL_RTC_SetTime+0x148>)
 8005668:	400a      	ands	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4918      	ldr	r1, [pc, #96]	; (80056d8 <HAL_RTC_SetTime+0x14c>)
 8005678:	400a      	ands	r2, r1
 800567a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	431a      	orrs	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005694:	2313      	movs	r3, #19
 8005696:	18fc      	adds	r4, r7, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	0018      	movs	r0, r3
 800569c:	f000 fb40 	bl	8005d20 <RTC_ExitInitMode>
 80056a0:	0003      	movs	r3, r0
 80056a2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80056ac:	2313      	movs	r3, #19
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2229      	movs	r2, #41	; 0x29
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2228      	movs	r2, #40	; 0x28
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

  return status;
 80056c6:	2313      	movs	r3, #19
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	781b      	ldrb	r3, [r3, #0]
}
 80056cc:	0018      	movs	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b006      	add	sp, #24
 80056d2:	bdb0      	pop	{r4, r5, r7, pc}
 80056d4:	007f7f7f 	.word	0x007f7f7f
 80056d8:	fffbffff 	.word	0xfffbffff

080056dc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	045b      	lsls	r3, r3, #17
 80056fa:	0c5a      	lsrs	r2, r3, #17
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_RTC_GetTime+0xb4>)
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b2db      	uxtb	r3, r3
 8005712:	223f      	movs	r2, #63	; 0x3f
 8005714:	4013      	ands	r3, r2
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	b2db      	uxtb	r3, r3
 8005722:	227f      	movs	r2, #127	; 0x7f
 8005724:	4013      	ands	r3, r2
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	227f      	movs	r2, #127	; 0x7f
 8005732:	4013      	ands	r3, r2
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	0d9b      	lsrs	r3, r3, #22
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2201      	movs	r2, #1
 8005742:	4013      	ands	r3, r2
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11a      	bne.n	8005786 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	0018      	movs	r0, r3
 8005756:	f000 fb4f 	bl	8005df8 <RTC_Bcd2ToByte>
 800575a:	0003      	movs	r3, r0
 800575c:	001a      	movs	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fb46 	bl	8005df8 <RTC_Bcd2ToByte>
 800576c:	0003      	movs	r3, r0
 800576e:	001a      	movs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	0018      	movs	r0, r3
 800577a:	f000 fb3d 	bl	8005df8 <RTC_Bcd2ToByte>
 800577e:	0003      	movs	r3, r0
 8005780:	001a      	movs	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b006      	add	sp, #24
 800578e:	bd80      	pop	{r7, pc}
 8005790:	007f7f7f 	.word	0x007f7f7f

08005794 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2228      	movs	r2, #40	; 0x28
 80057a4:	5c9b      	ldrb	r3, [r3, r2]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_RTC_SetDate+0x1a>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e07e      	b.n	80058ac <HAL_RTC_SetDate+0x118>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2228      	movs	r2, #40	; 0x28
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2229      	movs	r2, #41	; 0x29
 80057ba:	2102      	movs	r1, #2
 80057bc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <HAL_RTC_SetDate+0x4e>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	001a      	movs	r2, r3
 80057ca:	2310      	movs	r3, #16
 80057cc:	4013      	ands	r3, r2
 80057ce:	d008      	beq.n	80057e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2210      	movs	r2, #16
 80057d6:	4393      	bics	r3, r2
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	330a      	adds	r3, #10
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11c      	bne.n	8005822 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 fadb 	bl	8005da8 <RTC_ByteToBcd2>
 80057f2:	0003      	movs	r3, r0
 80057f4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 fad4 	bl	8005da8 <RTC_ByteToBcd2>
 8005800:	0003      	movs	r3, r0
 8005802:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005804:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	789b      	ldrb	r3, [r3, #2]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 facc 	bl	8005da8 <RTC_ByteToBcd2>
 8005810:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005812:	0022      	movs	r2, r4
 8005814:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e00e      	b.n	8005840 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	78db      	ldrb	r3, [r3, #3]
 8005826:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800582e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005834:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	22ca      	movs	r2, #202	; 0xca
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2253      	movs	r2, #83	; 0x53
 800584e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005850:	2513      	movs	r5, #19
 8005852:	197c      	adds	r4, r7, r5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 fa20 	bl	8005c9c <RTC_EnterInitMode>
 800585c:	0003      	movs	r3, r0
 800585e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005860:	0028      	movs	r0, r5
 8005862:	183b      	adds	r3, r7, r0
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4910      	ldr	r1, [pc, #64]	; (80058b4 <HAL_RTC_SetDate+0x120>)
 8005872:	400a      	ands	r2, r1
 8005874:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005876:	183c      	adds	r4, r7, r0
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fa50 	bl	8005d20 <RTC_ExitInitMode>
 8005880:	0003      	movs	r3, r0
 8005882:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800588c:	2313      	movs	r3, #19
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2229      	movs	r2, #41	; 0x29
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2228      	movs	r2, #40	; 0x28
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return status;
 80058a6:	2313      	movs	r3, #19
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781b      	ldrb	r3, [r3, #0]
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b006      	add	sp, #24
 80058b2:	bdb0      	pop	{r4, r5, r7, pc}
 80058b4:	00ffff3f 	.word	0x00ffff3f

080058b8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a21      	ldr	r2, [pc, #132]	; (8005950 <HAL_RTC_GetDate+0x98>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	221f      	movs	r2, #31
 80058e2:	4013      	ands	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	223f      	movs	r2, #63	; 0x3f
 80058f0:	4013      	ands	r3, r2
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	0b5b      	lsrs	r3, r3, #13
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2207      	movs	r2, #7
 8005900:	4013      	ands	r3, r2
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11a      	bne.n	8005944 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	0018      	movs	r0, r3
 8005914:	f000 fa70 	bl	8005df8 <RTC_Bcd2ToByte>
 8005918:	0003      	movs	r3, r0
 800591a:	001a      	movs	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 fa67 	bl	8005df8 <RTC_Bcd2ToByte>
 800592a:	0003      	movs	r3, r0
 800592c:	001a      	movs	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	789b      	ldrb	r3, [r3, #2]
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fa5e 	bl	8005df8 <RTC_Bcd2ToByte>
 800593c:	0003      	movs	r3, r0
 800593e:	001a      	movs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b006      	add	sp, #24
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	00ffff3f 	.word	0x00ffff3f

08005954 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2228      	movs	r2, #40	; 0x28
 8005964:	5c9b      	ldrb	r3, [r3, r2]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_RTC_SetAlarm_IT+0x1a>
 800596a:	2302      	movs	r3, #2
 800596c:	e127      	b.n	8005bbe <HAL_RTC_SetAlarm_IT+0x26a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2228      	movs	r2, #40	; 0x28
 8005972:	2101      	movs	r1, #1
 8005974:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2229      	movs	r2, #41	; 0x29
 800597a:	2102      	movs	r1, #2
 800597c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d136      	bne.n	80059f2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	4013      	ands	r3, r2
 800598e:	d102      	bne.n	8005996 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	f000 fa04 	bl	8005da8 <RTC_ByteToBcd2>
 80059a0:	0003      	movs	r3, r0
 80059a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 f9fd 	bl	8005da8 <RTC_ByteToBcd2>
 80059ae:	0003      	movs	r3, r0
 80059b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	789b      	ldrb	r3, [r3, #2]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 f9f5 	bl	8005da8 <RTC_ByteToBcd2>
 80059be:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059c0:	0022      	movs	r2, r4
 80059c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059ca:	431a      	orrs	r2, r3
 80059cc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2220      	movs	r2, #32
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 f9e7 	bl	8005da8 <RTC_ByteToBcd2>
 80059da:	0003      	movs	r3, r0
 80059dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059de:	0022      	movs	r2, r4
 80059e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e022      	b.n	8005a38 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2240      	movs	r2, #64	; 0x40
 80059fa:	4013      	ands	r3, r2
 80059fc:	d102      	bne.n	8005a04 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a10:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	78db      	ldrb	r3, [r3, #3]
 8005a1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2120      	movs	r1, #32
 8005a24:	5c5b      	ldrb	r3, [r3, r1]
 8005a26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	22ca      	movs	r2, #202	; 0xca
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2253      	movs	r2, #83	; 0x53
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d14c      	bne.n	8005afa <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4957      	ldr	r1, [pc, #348]	; (8005bc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005a80:	f7fe f91e 	bl	8003cc0 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005a88:	e016      	b.n	8005ab8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a8a:	f7fe f919 	bl	8003cc0 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	23fa      	movs	r3, #250	; 0xfa
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d90d      	bls.n	8005ab8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2229      	movs	r2, #41	; 0x29
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2228      	movs	r2, #40	; 0x28
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e082      	b.n	8005bbe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d0e2      	beq.n	8005a8a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	0049      	lsls	r1, r1, #1
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2180      	movs	r1, #128	; 0x80
 8005af2:	0149      	lsls	r1, r1, #5
 8005af4:	430a      	orrs	r2, r1
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	e04b      	b.n	8005b92 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4931      	ldr	r1, [pc, #196]	; (8005bcc <HAL_RTC_SetAlarm_IT+0x278>)
 8005b06:	400a      	ands	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2102      	movs	r1, #2
 8005b16:	430a      	orrs	r2, r1
 8005b18:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005b1a:	f7fe f8d1 	bl	8003cc0 <HAL_GetTick>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b22:	e016      	b.n	8005b52 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b24:	f7fe f8cc 	bl	8003cc0 <HAL_GetTick>
 8005b28:	0002      	movs	r2, r0
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1ad2      	subs	r2, r2, r3
 8005b2e:	23fa      	movs	r3, #250	; 0xfa
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d90d      	bls.n	8005b52 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	22ff      	movs	r2, #255	; 0xff
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2229      	movs	r2, #41	; 0x29
 8005b42:	2103      	movs	r1, #3
 8005b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2228      	movs	r2, #40	; 0x28
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e035      	b.n	8005bbe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d0e2      	beq.n	8005b24 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	0089      	lsls	r1, r1, #2
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	0189      	lsls	r1, r1, #6
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005b92:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	58d3      	ldr	r3, [r2, r3]
 8005b98:	490d      	ldr	r1, [pc, #52]	; (8005bd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	0312      	lsls	r2, r2, #12
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	22ff      	movs	r2, #255	; 0xff
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2229      	movs	r2, #41	; 0x29
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2228      	movs	r2, #40	; 0x28
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b009      	add	sp, #36	; 0x24
 8005bc4:	bd90      	pop	{r4, r7, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	fffffeff 	.word	0xfffffeff
 8005bcc:	fffffdff 	.word	0xfffffdff
 8005bd0:	40021800 	.word	0x40021800

08005bd4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	015b      	lsls	r3, r3, #5
 8005be6:	4013      	ands	r3, r2
 8005be8:	d011      	beq.n	8005c0e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2101      	movs	r1, #1
 8005c02:	430a      	orrs	r2, r1
 8005c04:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fd fc3b 	bl	8003484 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699a      	ldr	r2, [r3, #24]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	019b      	lsls	r3, r3, #6
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d011      	beq.n	8005c40 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c22:	2202      	movs	r2, #2
 8005c24:	4013      	ands	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2102      	movs	r1, #2
 8005c34:	430a      	orrs	r2, r1
 8005c36:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 f961 	bl	8005f02 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2229      	movs	r2, #41	; 0x29
 8005c44:	2101      	movs	r1, #1
 8005c46:	5499      	strb	r1, [r3, r2]
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b002      	add	sp, #8
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <HAL_RTC_WaitForSynchro+0x48>)
 8005c5e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c60:	f7fe f82e 	bl	8003cc0 <HAL_GetTick>
 8005c64:	0003      	movs	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005c68:	e00a      	b.n	8005c80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c6a:	f7fe f829 	bl	8003cc0 <HAL_GetTick>
 8005c6e:	0002      	movs	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	23fa      	movs	r3, #250	; 0xfa
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d901      	bls.n	8005c80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d0ee      	beq.n	8005c6a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	0001005f 	.word	0x0001005f

08005c9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005ca4:	230f      	movs	r3, #15
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2240      	movs	r2, #64	; 0x40
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d12c      	bne.n	8005d12 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2180      	movs	r1, #128	; 0x80
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005cc8:	f7fd fffa 	bl	8003cc0 <HAL_GetTick>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cd0:	e014      	b.n	8005cfc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cd2:	f7fd fff5 	bl	8003cc0 <HAL_GetTick>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	200f      	movs	r0, #15
 8005cde:	183b      	adds	r3, r7, r0
 8005ce0:	1839      	adds	r1, r7, r0
 8005ce2:	7809      	ldrb	r1, [r1, #0]
 8005ce4:	7019      	strb	r1, [r3, #0]
 8005ce6:	23fa      	movs	r3, #250	; 0xfa
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d906      	bls.n	8005cfc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2229      	movs	r2, #41	; 0x29
 8005cf8:	2103      	movs	r1, #3
 8005cfa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	4013      	ands	r3, r2
 8005d06:	d104      	bne.n	8005d12 <RTC_EnterInitMode+0x76>
 8005d08:	230f      	movs	r3, #15
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d1df      	bne.n	8005cd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d12:	230f      	movs	r3, #15
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	781b      	ldrb	r3, [r3, #0]
}
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b004      	add	sp, #16
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	240f      	movs	r4, #15
 8005d2a:	193b      	adds	r3, r7, r4
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	438a      	bics	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2220      	movs	r2, #32
 8005d42:	4013      	ands	r3, r2
 8005d44:	d10d      	bne.n	8005d62 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7ff ff81 	bl	8005c50 <HAL_RTC_WaitForSynchro>
 8005d4e:	1e03      	subs	r3, r0, #0
 8005d50:	d021      	beq.n	8005d96 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2229      	movs	r2, #41	; 0x29
 8005d56:	2103      	movs	r1, #3
 8005d58:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005d5a:	193b      	adds	r3, r7, r4
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e019      	b.n	8005d96 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d68:	2120      	movs	r1, #32
 8005d6a:	438a      	bics	r2, r1
 8005d6c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff ff6d 	bl	8005c50 <HAL_RTC_WaitForSynchro>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d007      	beq.n	8005d8a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2229      	movs	r2, #41	; 0x29
 8005d7e:	2103      	movs	r1, #3
 8005d80:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005d82:	230f      	movs	r3, #15
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	2203      	movs	r2, #3
 8005d88:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <RTC_ExitInitMode+0x84>)
 8005d90:	2120      	movs	r1, #32
 8005d92:	430a      	orrs	r2, r1
 8005d94:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005d96:	230f      	movs	r3, #15
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	781b      	ldrb	r3, [r3, #0]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b005      	add	sp, #20
 8005da2:	bd90      	pop	{r4, r7, pc}
 8005da4:	40002800 	.word	0x40002800

08005da8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	0002      	movs	r2, r0
 8005db0:	1dfb      	adds	r3, r7, #7
 8005db2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005db8:	230b      	movs	r3, #11
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	1dfa      	adds	r2, r7, #7
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005dc2:	e008      	b.n	8005dd6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005dca:	220b      	movs	r2, #11
 8005dcc:	18bb      	adds	r3, r7, r2
 8005dce:	18ba      	adds	r2, r7, r2
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	3a0a      	subs	r2, #10
 8005dd4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005dd6:	210b      	movs	r1, #11
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b09      	cmp	r3, #9
 8005dde:	d8f1      	bhi.n	8005dc4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	187b      	adds	r3, r7, r1
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	b2db      	uxtb	r3, r3
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b004      	add	sp, #16
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	0002      	movs	r2, r0
 8005e00:	1dfb      	adds	r3, r7, #7
 8005e02:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	0013      	movs	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	210f      	movs	r1, #15
 8005e22:	400b      	ands	r3, r1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	b2db      	uxtb	r3, r3
}
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	b004      	add	sp, #16
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2228      	movs	r2, #40	; 0x28
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e024      	b.n	8005e92 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2228      	movs	r2, #40	; 0x28
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2229      	movs	r2, #41	; 0x29
 8005e54:	2102      	movs	r1, #2
 8005e56:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	22ca      	movs	r2, #202	; 0xca
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2253      	movs	r2, #83	; 0x53
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2120      	movs	r1, #32
 8005e74:	430a      	orrs	r2, r1
 8005e76:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	22ff      	movs	r2, #255	; 0xff
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2229      	movs	r2, #41	; 0x29
 8005e84:	2101      	movs	r1, #1
 8005e86:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2228      	movs	r2, #40	; 0x28
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2228      	movs	r2, #40	; 0x28
 8005ea6:	5c9b      	ldrb	r3, [r3, r2]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e024      	b.n	8005efa <HAL_RTCEx_DisableBypassShadow+0x60>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2228      	movs	r2, #40	; 0x28
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2229      	movs	r2, #41	; 0x29
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	22ca      	movs	r2, #202	; 0xca
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2253      	movs	r2, #83	; 0x53
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	21df      	movs	r1, #223	; 0xdf
 8005edc:	400a      	ands	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2229      	movs	r2, #41	; 0x29
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2228      	movs	r2, #40	; 0x28
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	0018      	movs	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b002      	add	sp, #8
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0a8      	b.n	8006078 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	2382      	movs	r3, #130	; 0x82
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d009      	beq.n	8005f4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
 8005f40:	e005      	b.n	8005f4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	225d      	movs	r2, #93	; 0x5d
 8005f58:	5c9b      	ldrb	r3, [r3, r2]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d107      	bne.n	8005f70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	225c      	movs	r2, #92	; 0x5c
 8005f64:	2100      	movs	r1, #0
 8005f66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7fd fb0c 	bl	8003588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	225d      	movs	r2, #93	; 0x5d
 8005f74:	2102      	movs	r1, #2
 8005f76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2140      	movs	r1, #64	; 0x40
 8005f84:	438a      	bics	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	23e0      	movs	r3, #224	; 0xe0
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d902      	bls.n	8005f9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e002      	b.n	8005fa0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	23f0      	movs	r3, #240	; 0xf0
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d008      	beq.n	8005fbe <HAL_SPI_Init+0xaa>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	23e0      	movs	r3, #224	; 0xe0
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	2382      	movs	r3, #130	; 0x82
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	2384      	movs	r3, #132	; 0x84
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	400b      	ands	r3, r1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2102      	movs	r1, #2
 8005fda:	400b      	ands	r3, r1
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	400b      	ands	r3, r1
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6999      	ldr	r1, [r3, #24]
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	400b      	ands	r3, r1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2138      	movs	r1, #56	; 0x38
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	400b      	ands	r3, r1
 8006006:	431a      	orrs	r2, r3
 8006008:	0011      	movs	r1, r2
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	019b      	lsls	r3, r3, #6
 8006012:	401a      	ands	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	2204      	movs	r2, #4
 8006024:	401a      	ands	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2110      	movs	r1, #16
 800602c:	400b      	ands	r3, r1
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	2108      	movs	r1, #8
 8006036:	400b      	ands	r3, r1
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68d9      	ldr	r1, [r3, #12]
 800603e:	23f0      	movs	r3, #240	; 0xf0
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	400b      	ands	r3, r1
 8006044:	431a      	orrs	r2, r3
 8006046:	0011      	movs	r1, r2
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	2380      	movs	r3, #128	; 0x80
 800604c:	015b      	lsls	r3, r3, #5
 800604e:	401a      	ands	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4907      	ldr	r1, [pc, #28]	; (8006080 <HAL_SPI_Init+0x16c>)
 8006064:	400a      	ands	r2, r1
 8006066:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	225d      	movs	r2, #93	; 0x5d
 8006072:	2101      	movs	r1, #1
 8006074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	b004      	add	sp, #16
 800607e:	bd80      	pop	{r7, pc}
 8006080:	fffff7ff 	.word	0xfffff7ff

08006084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e04a      	b.n	800612c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223d      	movs	r2, #61	; 0x3d
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	223c      	movs	r2, #60	; 0x3c
 80060a6:	2100      	movs	r1, #0
 80060a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7fd fab5 	bl	800361c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	223d      	movs	r2, #61	; 0x3d
 80060b6:	2102      	movs	r1, #2
 80060b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	0019      	movs	r1, r3
 80060c4:	0010      	movs	r0, r2
 80060c6:	f000 f9ed 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2248      	movs	r2, #72	; 0x48
 80060ce:	2101      	movs	r1, #1
 80060d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	223e      	movs	r2, #62	; 0x3e
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223f      	movs	r2, #63	; 0x3f
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2240      	movs	r2, #64	; 0x40
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2241      	movs	r2, #65	; 0x41
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2242      	movs	r2, #66	; 0x42
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2243      	movs	r2, #67	; 0x43
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2244      	movs	r2, #68	; 0x44
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2245      	movs	r2, #69	; 0x45
 800610e:	2101      	movs	r1, #1
 8006110:	5499      	strb	r1, [r3, r2]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2246      	movs	r2, #70	; 0x46
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2247      	movs	r2, #71	; 0x47
 800611e:	2101      	movs	r1, #1
 8006120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	223d      	movs	r2, #61	; 0x3d
 8006126:	2101      	movs	r1, #1
 8006128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	0018      	movs	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	b002      	add	sp, #8
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	223d      	movs	r2, #61	; 0x3d
 8006140:	5c9b      	ldrb	r3, [r3, r2]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d001      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e047      	b.n	80061dc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	223d      	movs	r2, #61	; 0x3d
 8006150:	2102      	movs	r1, #2
 8006152:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	430a      	orrs	r2, r1
 8006162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d014      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x64>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	05db      	lsls	r3, r3, #23
 8006176:	429a      	cmp	r2, r3
 8006178:	d00e      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x64>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x64>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a18      	ldr	r2, [pc, #96]	; (80061ec <HAL_TIM_Base_Start_IT+0xb8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIM_Base_Start_IT+0x64>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d116      	bne.n	80061c6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <HAL_TIM_Base_Start_IT+0xc0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d016      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0xa4>
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	025b      	lsls	r3, r3, #9
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d011      	beq.n	80061d8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2101      	movs	r1, #1
 80061c0:	430a      	orrs	r2, r1
 80061c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c4:	e008      	b.n	80061d8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2101      	movs	r1, #1
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e000      	b.n	80061da <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	0018      	movs	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	b004      	add	sp, #16
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40014000 	.word	0x40014000
 80061f4:	00010007 	.word	0x00010007

080061f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2101      	movs	r1, #1
 800620c:	438a      	bics	r2, r1
 800620e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	4a0d      	ldr	r2, [pc, #52]	; (800624c <HAL_TIM_Base_Stop_IT+0x54>)
 8006218:	4013      	ands	r3, r2
 800621a:	d10d      	bne.n	8006238 <HAL_TIM_Base_Stop_IT+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4a0b      	ldr	r2, [pc, #44]	; (8006250 <HAL_TIM_Base_Stop_IT+0x58>)
 8006224:	4013      	ands	r3, r2
 8006226:	d107      	bne.n	8006238 <HAL_TIM_Base_Stop_IT+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2101      	movs	r1, #1
 8006234:	438a      	bics	r2, r1
 8006236:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	223d      	movs	r2, #61	; 0x3d
 800623c:	2101      	movs	r1, #1
 800623e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	0018      	movs	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	00001111 	.word	0x00001111
 8006250:	00000444 	.word	0x00000444

08006254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2202      	movs	r2, #2
 8006270:	4013      	ands	r3, r2
 8006272:	d021      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2202      	movs	r2, #2
 8006278:	4013      	ands	r3, r2
 800627a:	d01d      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2203      	movs	r2, #3
 8006282:	4252      	negs	r2, r2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2203      	movs	r2, #3
 8006294:	4013      	ands	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	0018      	movs	r0, r3
 800629c:	f000 f8ea 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e007      	b.n	80062b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f8dd 	bl	8006464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 f8e9 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2204      	movs	r2, #4
 80062bc:	4013      	ands	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2204      	movs	r2, #4
 80062c4:	4013      	ands	r3, r2
 80062c6:	d01e      	beq.n	8006306 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2205      	movs	r2, #5
 80062ce:	4252      	negs	r2, r2
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	23c0      	movs	r3, #192	; 0xc0
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4013      	ands	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f8c3 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 80062ee:	e007      	b.n	8006300 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 f8b6 	bl	8006464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 f8c2 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2208      	movs	r2, #8
 800630a:	4013      	ands	r3, r2
 800630c:	d021      	beq.n	8006352 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2208      	movs	r2, #8
 8006312:	4013      	ands	r3, r2
 8006314:	d01d      	beq.n	8006352 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2209      	movs	r2, #9
 800631c:	4252      	negs	r2, r2
 800631e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2204      	movs	r2, #4
 8006324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2203      	movs	r2, #3
 800632e:	4013      	ands	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0018      	movs	r0, r3
 8006336:	f000 f89d 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 800633a:	e007      	b.n	800634c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f000 f890 	bl	8006464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0018      	movs	r0, r3
 8006348:	f000 f89c 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2210      	movs	r2, #16
 8006356:	4013      	ands	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2210      	movs	r2, #16
 800635e:	4013      	ands	r3, r2
 8006360:	d01e      	beq.n	80063a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2211      	movs	r2, #17
 8006368:	4252      	negs	r2, r2
 800636a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2208      	movs	r2, #8
 8006370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	23c0      	movs	r3, #192	; 0xc0
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4013      	ands	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	0018      	movs	r0, r3
 8006384:	f000 f876 	bl	8006474 <HAL_TIM_IC_CaptureCallback>
 8006388:	e007      	b.n	800639a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0018      	movs	r0, r3
 800638e:	f000 f869 	bl	8006464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 f875 	bl	8006484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2201      	movs	r2, #1
 80063a4:	4013      	ands	r3, r2
 80063a6:	d00c      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	d008      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2202      	movs	r2, #2
 80063b6:	4252      	negs	r2, r2
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7fd f827 	bl	8003410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	4013      	ands	r3, r2
 80063c8:	d104      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063d2:	d00b      	beq.n	80063ec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	4013      	ands	r3, r2
 80063da:	d007      	beq.n	80063ec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1e      	ldr	r2, [pc, #120]	; (800645c <HAL_TIM_IRQHandler+0x208>)
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 f972 	bl	80066d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	4013      	ands	r3, r2
 80063f4:	d00b      	beq.n	800640e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2280      	movs	r2, #128	; 0x80
 80063fa:	4013      	ands	r3, r2
 80063fc:	d007      	beq.n	800640e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a17      	ldr	r2, [pc, #92]	; (8006460 <HAL_TIM_IRQHandler+0x20c>)
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f969 	bl	80066e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2240      	movs	r2, #64	; 0x40
 8006412:	4013      	ands	r3, r2
 8006414:	d00c      	beq.n	8006430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2240      	movs	r2, #64	; 0x40
 800641a:	4013      	ands	r3, r2
 800641c:	d008      	beq.n	8006430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2241      	movs	r2, #65	; 0x41
 8006424:	4252      	negs	r2, r2
 8006426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0018      	movs	r0, r3
 800642c:	f000 f832 	bl	8006494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2220      	movs	r2, #32
 8006434:	4013      	ands	r3, r2
 8006436:	d00c      	beq.n	8006452 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	4013      	ands	r3, r2
 800643e:	d008      	beq.n	8006452 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	4252      	negs	r2, r2
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 f937 	bl	80066c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	46bd      	mov	sp, r7
 8006456:	b004      	add	sp, #16
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	ffffdf7f 	.word	0xffffdf7f
 8006460:	fffffeff 	.word	0xfffffeff

08006464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800647c:	46c0      	nop			; (mov r8, r8)
 800647e:	46bd      	mov	sp, r7
 8006480:	b002      	add	sp, #8
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800648c:	46c0      	nop			; (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b002      	add	sp, #8
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b002      	add	sp, #8
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00c      	beq.n	80064d6 <TIM_Base_SetConfig+0x32>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	05db      	lsls	r3, r3, #23
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d007      	beq.n	80064d6 <TIM_Base_SetConfig+0x32>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a3b      	ldr	r2, [pc, #236]	; (80065b8 <TIM_Base_SetConfig+0x114>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_Base_SetConfig+0x32>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a3a      	ldr	r2, [pc, #232]	; (80065bc <TIM_Base_SetConfig+0x118>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d108      	bne.n	80064e8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2270      	movs	r2, #112	; 0x70
 80064da:	4393      	bics	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a32      	ldr	r2, [pc, #200]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01c      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	05db      	lsls	r3, r3, #23
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d017      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2e      	ldr	r2, [pc, #184]	; (80065b8 <TIM_Base_SetConfig+0x114>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <TIM_Base_SetConfig+0x118>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00f      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <TIM_Base_SetConfig+0x11c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <TIM_Base_SetConfig+0x120>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a2a      	ldr	r2, [pc, #168]	; (80065c8 <TIM_Base_SetConfig+0x124>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_Base_SetConfig+0x86>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a29      	ldr	r2, [pc, #164]	; (80065cc <TIM_Base_SetConfig+0x128>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d108      	bne.n	800653c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a28      	ldr	r2, [pc, #160]	; (80065d0 <TIM_Base_SetConfig+0x12c>)
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	4393      	bics	r3, r2
 8006542:	001a      	movs	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <TIM_Base_SetConfig+0x110>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00b      	beq.n	8006582 <TIM_Base_SetConfig+0xde>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <TIM_Base_SetConfig+0x120>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_Base_SetConfig+0xde>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <TIM_Base_SetConfig+0x124>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_Base_SetConfig+0xde>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <TIM_Base_SetConfig+0x128>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d103      	bne.n	800658a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2201      	movs	r2, #1
 8006596:	4013      	ands	r3, r2
 8006598:	2b01      	cmp	r3, #1
 800659a:	d106      	bne.n	80065aa <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2201      	movs	r2, #1
 80065a2:	4393      	bics	r3, r2
 80065a4:	001a      	movs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]
  }
}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b004      	add	sp, #16
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40002000 	.word	0x40002000
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800
 80065d0:	fffffcff 	.word	0xfffffcff

080065d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	223c      	movs	r2, #60	; 0x3c
 80065e2:	5c9b      	ldrb	r3, [r3, r2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e05a      	b.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	223c      	movs	r2, #60	; 0x3c
 80065f0:	2101      	movs	r1, #1
 80065f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	223d      	movs	r2, #61	; 0x3d
 80065f8:	2102      	movs	r1, #2
 80065fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a26      	ldr	r2, [pc, #152]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2270      	movs	r2, #112	; 0x70
 800662c:	4393      	bics	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a19      	ldr	r2, [pc, #100]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d014      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	05db      	lsls	r3, r3, #23
 8006654:	429a      	cmp	r2, r3
 8006656:	d00e      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a12      	ldr	r2, [pc, #72]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10c      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2280      	movs	r2, #128	; 0x80
 800667a:	4393      	bics	r3, r2
 800667c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4313      	orrs	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223d      	movs	r2, #61	; 0x3d
 8006694:	2101      	movs	r1, #1
 8006696:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	223c      	movs	r2, #60	; 0x3c
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	ff0fffff 	.word	0xff0fffff
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40014000 	.word	0x40014000

080066c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066c8:	46c0      	nop			; (mov r8, r8)
 80066ca:	46bd      	mov	sp, r7
 80066cc:	b002      	add	sp, #8
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	46bd      	mov	sp, r7
 80066dc:	b002      	add	sp, #8
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b002      	add	sp, #8
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e046      	b.n	8006790 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2288      	movs	r2, #136	; 0x88
 8006706:	589b      	ldr	r3, [r3, r2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2284      	movs	r2, #132	; 0x84
 8006710:	2100      	movs	r1, #0
 8006712:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0018      	movs	r0, r3
 8006718:	f7fc ffa6 	bl	8003668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2288      	movs	r2, #136	; 0x88
 8006720:	2124      	movs	r1, #36	; 0x24
 8006722:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2101      	movs	r1, #1
 8006730:	438a      	bics	r2, r1
 8006732:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0018      	movs	r0, r3
 8006740:	f000 fd4c 	bl	80071dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	0018      	movs	r0, r3
 8006748:	f000 f9f2 	bl	8006b30 <UART_SetConfig>
 800674c:	0003      	movs	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e01c      	b.n	8006790 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	490d      	ldr	r1, [pc, #52]	; (8006798 <HAL_UART_Init+0xa8>)
 8006762:	400a      	ands	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	212a      	movs	r1, #42	; 0x2a
 8006772:	438a      	bics	r2, r1
 8006774:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2101      	movs	r1, #1
 8006782:	430a      	orrs	r2, r1
 8006784:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0018      	movs	r0, r3
 800678a:	f000 fddb 	bl	8007344 <UART_CheckIdleState>
 800678e:	0003      	movs	r3, r0
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	b002      	add	sp, #8
 8006796:	bd80      	pop	{r7, pc}
 8006798:	ffffb7ff 	.word	0xffffb7ff

0800679c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e032      	b.n	8006814 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2288      	movs	r2, #136	; 0x88
 80067b2:	2124      	movs	r1, #36	; 0x24
 80067b4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2101      	movs	r1, #1
 80067c2:	438a      	bics	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7fd f86d 	bl	80038c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2290      	movs	r2, #144	; 0x90
 80067ea:	2100      	movs	r1, #0
 80067ec:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2288      	movs	r2, #136	; 0x88
 80067f2:	2100      	movs	r1, #0
 80067f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	228c      	movs	r2, #140	; 0x8c
 80067fa:	2100      	movs	r1, #0
 80067fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2284      	movs	r2, #132	; 0x84
 800680e:	2100      	movs	r1, #0
 8006810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	0018      	movs	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	1dbb      	adds	r3, r7, #6
 800682a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2288      	movs	r2, #136	; 0x88
 8006830:	589b      	ldr	r3, [r3, r2]
 8006832:	2b20      	cmp	r3, #32
 8006834:	d000      	beq.n	8006838 <HAL_UART_Transmit+0x1c>
 8006836:	e090      	b.n	800695a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_UART_Transmit+0x2a>
 800683e:	1dbb      	adds	r3, r7, #6
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e088      	b.n	800695c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	015b      	lsls	r3, r3, #5
 8006852:	429a      	cmp	r2, r3
 8006854:	d109      	bne.n	800686a <HAL_UART_Transmit+0x4e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2201      	movs	r2, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d001      	beq.n	800686a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e078      	b.n	800695c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2290      	movs	r2, #144	; 0x90
 800686e:	2100      	movs	r1, #0
 8006870:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2288      	movs	r2, #136	; 0x88
 8006876:	2121      	movs	r1, #33	; 0x21
 8006878:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687a:	f7fd fa21 	bl	8003cc0 <HAL_GetTick>
 800687e:	0003      	movs	r3, r0
 8006880:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1dba      	adds	r2, r7, #6
 8006886:	2154      	movs	r1, #84	; 0x54
 8006888:	8812      	ldrh	r2, [r2, #0]
 800688a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1dba      	adds	r2, r7, #6
 8006890:	2156      	movs	r1, #86	; 0x56
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	015b      	lsls	r3, r3, #5
 800689e:	429a      	cmp	r2, r3
 80068a0:	d108      	bne.n	80068b4 <HAL_UART_Transmit+0x98>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e003      	b.n	80068bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068bc:	e030      	b.n	8006920 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	0013      	movs	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	f000 fde4 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2288      	movs	r2, #136	; 0x88
 80068d8:	2120      	movs	r1, #32
 80068da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e03d      	b.n	800695c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	001a      	movs	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	05d2      	lsls	r2, r2, #23
 80068f2:	0dd2      	lsrs	r2, r2, #23
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	3302      	adds	r3, #2
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e007      	b.n	800690e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2256      	movs	r2, #86	; 0x56
 8006912:	5a9b      	ldrh	r3, [r3, r2]
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b299      	uxth	r1, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2256      	movs	r2, #86	; 0x56
 800691e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2256      	movs	r2, #86	; 0x56
 8006924:	5a9b      	ldrh	r3, [r3, r2]
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1c8      	bne.n	80068be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	0013      	movs	r3, r2
 8006936:	2200      	movs	r2, #0
 8006938:	2140      	movs	r1, #64	; 0x40
 800693a:	f000 fdad 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 800693e:	1e03      	subs	r3, r0, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2288      	movs	r2, #136	; 0x88
 8006946:	2120      	movs	r1, #32
 8006948:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e006      	b.n	800695c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2288      	movs	r2, #136	; 0x88
 8006952:	2120      	movs	r1, #32
 8006954:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	0018      	movs	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	b008      	add	sp, #32
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	228c      	movs	r2, #140	; 0x8c
 8006978:	589b      	ldr	r3, [r3, r2]
 800697a:	2b20      	cmp	r3, #32
 800697c:	d000      	beq.n	8006980 <HAL_UART_Receive+0x1c>
 800697e:	e0d0      	b.n	8006b22 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_UART_Receive+0x2a>
 8006986:	1dbb      	adds	r3, r7, #6
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0c8      	b.n	8006b24 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	2380      	movs	r3, #128	; 0x80
 8006998:	015b      	lsls	r3, r3, #5
 800699a:	429a      	cmp	r2, r3
 800699c:	d109      	bne.n	80069b2 <HAL_UART_Receive+0x4e>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d105      	bne.n	80069b2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2201      	movs	r2, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	d001      	beq.n	80069b2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e0b8      	b.n	8006b24 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2290      	movs	r2, #144	; 0x90
 80069b6:	2100      	movs	r1, #0
 80069b8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	228c      	movs	r2, #140	; 0x8c
 80069be:	2122      	movs	r1, #34	; 0x22
 80069c0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c8:	f7fd f97a 	bl	8003cc0 <HAL_GetTick>
 80069cc:	0003      	movs	r3, r0
 80069ce:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	1dba      	adds	r2, r7, #6
 80069d4:	215c      	movs	r1, #92	; 0x5c
 80069d6:	8812      	ldrh	r2, [r2, #0]
 80069d8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	1dba      	adds	r2, r7, #6
 80069de:	215e      	movs	r1, #94	; 0x5e
 80069e0:	8812      	ldrh	r2, [r2, #0]
 80069e2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	015b      	lsls	r3, r3, #5
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d10d      	bne.n	8006a0c <HAL_UART_Receive+0xa8>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_UART_Receive+0x9e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2260      	movs	r2, #96	; 0x60
 80069fc:	494b      	ldr	r1, [pc, #300]	; (8006b2c <HAL_UART_Receive+0x1c8>)
 80069fe:	5299      	strh	r1, [r3, r2]
 8006a00:	e02e      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2260      	movs	r2, #96	; 0x60
 8006a06:	21ff      	movs	r1, #255	; 0xff
 8006a08:	5299      	strh	r1, [r3, r2]
 8006a0a:	e029      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10d      	bne.n	8006a30 <HAL_UART_Receive+0xcc>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <HAL_UART_Receive+0xc2>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2260      	movs	r2, #96	; 0x60
 8006a20:	21ff      	movs	r1, #255	; 0xff
 8006a22:	5299      	strh	r1, [r3, r2]
 8006a24:	e01c      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2260      	movs	r2, #96	; 0x60
 8006a2a:	217f      	movs	r1, #127	; 0x7f
 8006a2c:	5299      	strh	r1, [r3, r2]
 8006a2e:	e017      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	055b      	lsls	r3, r3, #21
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d10d      	bne.n	8006a58 <HAL_UART_Receive+0xf4>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <HAL_UART_Receive+0xea>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2260      	movs	r2, #96	; 0x60
 8006a48:	217f      	movs	r1, #127	; 0x7f
 8006a4a:	5299      	strh	r1, [r3, r2]
 8006a4c:	e008      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2260      	movs	r2, #96	; 0x60
 8006a52:	213f      	movs	r1, #63	; 0x3f
 8006a54:	5299      	strh	r1, [r3, r2]
 8006a56:	e003      	b.n	8006a60 <HAL_UART_Receive+0xfc>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2260      	movs	r2, #96	; 0x60
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006a60:	2312      	movs	r3, #18
 8006a62:	18fb      	adds	r3, r7, r3
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	2160      	movs	r1, #96	; 0x60
 8006a68:	5a52      	ldrh	r2, [r2, r1]
 8006a6a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	015b      	lsls	r3, r3, #5
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d108      	bne.n	8006a8a <HAL_UART_Receive+0x126>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e003      	b.n	8006a92 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a92:	e03a      	b.n	8006b0a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	0013      	movs	r3, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2120      	movs	r1, #32
 8006aa2:	f000 fcf9 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 8006aa6:	1e03      	subs	r3, r0, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	228c      	movs	r2, #140	; 0x8c
 8006aae:	2120      	movs	r1, #32
 8006ab0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e036      	b.n	8006b24 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10e      	bne.n	8006ada <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2212      	movs	r2, #18
 8006ac6:	18ba      	adds	r2, r7, r2
 8006ac8:	8812      	ldrh	r2, [r2, #0]
 8006aca:	4013      	ands	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e00e      	b.n	8006af8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2212      	movs	r2, #18
 8006ae4:	18ba      	adds	r2, r7, r2
 8006ae6:	8812      	ldrh	r2, [r2, #0]
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	4013      	ands	r3, r2
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3301      	adds	r3, #1
 8006af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	225e      	movs	r2, #94	; 0x5e
 8006afc:	5a9b      	ldrh	r3, [r3, r2]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b299      	uxth	r1, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	225e      	movs	r2, #94	; 0x5e
 8006b08:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	225e      	movs	r2, #94	; 0x5e
 8006b0e:	5a9b      	ldrh	r3, [r3, r2]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1be      	bne.n	8006a94 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	228c      	movs	r2, #140	; 0x8c
 8006b1a:	2120      	movs	r1, #32
 8006b1c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e000      	b.n	8006b24 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006b22:	2302      	movs	r3, #2
  }
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b008      	add	sp, #32
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	000001ff 	.word	0x000001ff

08006b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b30:	b5b0      	push	{r4, r5, r7, lr}
 8006b32:	b090      	sub	sp, #64	; 0x40
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b38:	231a      	movs	r3, #26
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	19db      	adds	r3, r3, r7
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4ac1      	ldr	r2, [pc, #772]	; (8006e68 <UART_SetConfig+0x338>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	0019      	movs	r1, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	4abc      	ldr	r2, [pc, #752]	; (8006e6c <UART_SetConfig+0x33c>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	68d9      	ldr	r1, [r3, #12]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	0003      	movs	r3, r0
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4ab6      	ldr	r2, [pc, #728]	; (8006e70 <UART_SetConfig+0x340>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <UART_SetConfig+0x80>
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4ab4      	ldr	r2, [pc, #720]	; (8006e74 <UART_SetConfig+0x344>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bac:	4313      	orrs	r3, r2
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	4ab0      	ldr	r2, [pc, #704]	; (8006e78 <UART_SetConfig+0x348>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	0019      	movs	r1, r3
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	220f      	movs	r2, #15
 8006bce:	4393      	bics	r3, r2
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	0003      	movs	r3, r0
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4aa5      	ldr	r2, [pc, #660]	; (8006e7c <UART_SetConfig+0x34c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d131      	bne.n	8006c4e <UART_SetConfig+0x11e>
 8006bea:	4ba5      	ldr	r3, [pc, #660]	; (8006e80 <UART_SetConfig+0x350>)
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	2203      	movs	r2, #3
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d01d      	beq.n	8006c32 <UART_SetConfig+0x102>
 8006bf6:	d823      	bhi.n	8006c40 <UART_SetConfig+0x110>
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d00c      	beq.n	8006c16 <UART_SetConfig+0xe6>
 8006bfc:	d820      	bhi.n	8006c40 <UART_SetConfig+0x110>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <UART_SetConfig+0xd8>
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d00e      	beq.n	8006c24 <UART_SetConfig+0xf4>
 8006c06:	e01b      	b.n	8006c40 <UART_SetConfig+0x110>
 8006c08:	231b      	movs	r3, #27
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	19db      	adds	r3, r3, r7
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e154      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c16:	231b      	movs	r3, #27
 8006c18:	2220      	movs	r2, #32
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	19db      	adds	r3, r3, r7
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e14d      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c24:	231b      	movs	r3, #27
 8006c26:	2220      	movs	r2, #32
 8006c28:	189b      	adds	r3, r3, r2
 8006c2a:	19db      	adds	r3, r3, r7
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e146      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c32:	231b      	movs	r3, #27
 8006c34:	2220      	movs	r2, #32
 8006c36:	189b      	adds	r3, r3, r2
 8006c38:	19db      	adds	r3, r3, r7
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e13f      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c40:	231b      	movs	r3, #27
 8006c42:	2220      	movs	r2, #32
 8006c44:	189b      	adds	r3, r3, r2
 8006c46:	19db      	adds	r3, r3, r7
 8006c48:	2210      	movs	r2, #16
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e138      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a8c      	ldr	r2, [pc, #560]	; (8006e84 <UART_SetConfig+0x354>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d131      	bne.n	8006cbc <UART_SetConfig+0x18c>
 8006c58:	4b89      	ldr	r3, [pc, #548]	; (8006e80 <UART_SetConfig+0x350>)
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	220c      	movs	r2, #12
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b0c      	cmp	r3, #12
 8006c62:	d01d      	beq.n	8006ca0 <UART_SetConfig+0x170>
 8006c64:	d823      	bhi.n	8006cae <UART_SetConfig+0x17e>
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d00c      	beq.n	8006c84 <UART_SetConfig+0x154>
 8006c6a:	d820      	bhi.n	8006cae <UART_SetConfig+0x17e>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <UART_SetConfig+0x146>
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d00e      	beq.n	8006c92 <UART_SetConfig+0x162>
 8006c74:	e01b      	b.n	8006cae <UART_SetConfig+0x17e>
 8006c76:	231b      	movs	r3, #27
 8006c78:	2220      	movs	r2, #32
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	19db      	adds	r3, r3, r7
 8006c7e:	2200      	movs	r2, #0
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	e11d      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c84:	231b      	movs	r3, #27
 8006c86:	2220      	movs	r2, #32
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	19db      	adds	r3, r3, r7
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	e116      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006c92:	231b      	movs	r3, #27
 8006c94:	2220      	movs	r2, #32
 8006c96:	189b      	adds	r3, r3, r2
 8006c98:	19db      	adds	r3, r3, r7
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	e10f      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006ca0:	231b      	movs	r3, #27
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	189b      	adds	r3, r3, r2
 8006ca6:	19db      	adds	r3, r3, r7
 8006ca8:	2208      	movs	r2, #8
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e108      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006cae:	231b      	movs	r3, #27
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	189b      	adds	r3, r3, r2
 8006cb4:	19db      	adds	r3, r3, r7
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	e101      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a71      	ldr	r2, [pc, #452]	; (8006e88 <UART_SetConfig+0x358>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d131      	bne.n	8006d2a <UART_SetConfig+0x1fa>
 8006cc6:	4b6e      	ldr	r3, [pc, #440]	; (8006e80 <UART_SetConfig+0x350>)
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	2230      	movs	r2, #48	; 0x30
 8006ccc:	4013      	ands	r3, r2
 8006cce:	2b30      	cmp	r3, #48	; 0x30
 8006cd0:	d01d      	beq.n	8006d0e <UART_SetConfig+0x1de>
 8006cd2:	d823      	bhi.n	8006d1c <UART_SetConfig+0x1ec>
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d00c      	beq.n	8006cf2 <UART_SetConfig+0x1c2>
 8006cd8:	d820      	bhi.n	8006d1c <UART_SetConfig+0x1ec>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <UART_SetConfig+0x1b4>
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d00e      	beq.n	8006d00 <UART_SetConfig+0x1d0>
 8006ce2:	e01b      	b.n	8006d1c <UART_SetConfig+0x1ec>
 8006ce4:	231b      	movs	r3, #27
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	19db      	adds	r3, r3, r7
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e0e6      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006cf2:	231b      	movs	r3, #27
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	19db      	adds	r3, r3, r7
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e0df      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d00:	231b      	movs	r3, #27
 8006d02:	2220      	movs	r2, #32
 8006d04:	189b      	adds	r3, r3, r2
 8006d06:	19db      	adds	r3, r3, r7
 8006d08:	2204      	movs	r2, #4
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e0d8      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d0e:	231b      	movs	r3, #27
 8006d10:	2220      	movs	r2, #32
 8006d12:	189b      	adds	r3, r3, r2
 8006d14:	19db      	adds	r3, r3, r7
 8006d16:	2208      	movs	r2, #8
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e0d1      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d1c:	231b      	movs	r3, #27
 8006d1e:	2220      	movs	r2, #32
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	19db      	adds	r3, r3, r7
 8006d24:	2210      	movs	r2, #16
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e0ca      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a57      	ldr	r2, [pc, #348]	; (8006e8c <UART_SetConfig+0x35c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d106      	bne.n	8006d42 <UART_SetConfig+0x212>
 8006d34:	231b      	movs	r3, #27
 8006d36:	2220      	movs	r2, #32
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	19db      	adds	r3, r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e0be      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a52      	ldr	r2, [pc, #328]	; (8006e90 <UART_SetConfig+0x360>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d106      	bne.n	8006d5a <UART_SetConfig+0x22a>
 8006d4c:	231b      	movs	r3, #27
 8006d4e:	2220      	movs	r2, #32
 8006d50:	189b      	adds	r3, r3, r2
 8006d52:	19db      	adds	r3, r3, r7
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e0b2      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a4d      	ldr	r2, [pc, #308]	; (8006e94 <UART_SetConfig+0x364>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d106      	bne.n	8006d72 <UART_SetConfig+0x242>
 8006d64:	231b      	movs	r3, #27
 8006d66:	2220      	movs	r2, #32
 8006d68:	189b      	adds	r3, r3, r2
 8006d6a:	19db      	adds	r3, r3, r7
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e0a6      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3e      	ldr	r2, [pc, #248]	; (8006e70 <UART_SetConfig+0x340>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d13e      	bne.n	8006dfa <UART_SetConfig+0x2ca>
 8006d7c:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <UART_SetConfig+0x350>)
 8006d7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d80:	23c0      	movs	r3, #192	; 0xc0
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	4013      	ands	r3, r2
 8006d86:	22c0      	movs	r2, #192	; 0xc0
 8006d88:	0112      	lsls	r2, r2, #4
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <UART_SetConfig+0x2ae>
 8006d8e:	22c0      	movs	r2, #192	; 0xc0
 8006d90:	0112      	lsls	r2, r2, #4
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d82a      	bhi.n	8006dec <UART_SetConfig+0x2bc>
 8006d96:	2280      	movs	r2, #128	; 0x80
 8006d98:	0112      	lsls	r2, r2, #4
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d011      	beq.n	8006dc2 <UART_SetConfig+0x292>
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	0112      	lsls	r2, r2, #4
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d822      	bhi.n	8006dec <UART_SetConfig+0x2bc>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d004      	beq.n	8006db4 <UART_SetConfig+0x284>
 8006daa:	2280      	movs	r2, #128	; 0x80
 8006dac:	00d2      	lsls	r2, r2, #3
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <UART_SetConfig+0x2a0>
 8006db2:	e01b      	b.n	8006dec <UART_SetConfig+0x2bc>
 8006db4:	231b      	movs	r3, #27
 8006db6:	2220      	movs	r2, #32
 8006db8:	189b      	adds	r3, r3, r2
 8006dba:	19db      	adds	r3, r3, r7
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e07e      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006dc2:	231b      	movs	r3, #27
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	19db      	adds	r3, r3, r7
 8006dca:	2202      	movs	r2, #2
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e077      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006dd0:	231b      	movs	r3, #27
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	19db      	adds	r3, r3, r7
 8006dd8:	2204      	movs	r2, #4
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e070      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006dde:	231b      	movs	r3, #27
 8006de0:	2220      	movs	r2, #32
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	19db      	adds	r3, r3, r7
 8006de6:	2208      	movs	r2, #8
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e069      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006dec:	231b      	movs	r3, #27
 8006dee:	2220      	movs	r2, #32
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	19db      	adds	r3, r3, r7
 8006df4:	2210      	movs	r2, #16
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e062      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <UART_SetConfig+0x344>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d157      	bne.n	8006eb4 <UART_SetConfig+0x384>
 8006e04:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <UART_SetConfig+0x350>)
 8006e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e08:	23c0      	movs	r3, #192	; 0xc0
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	22c0      	movs	r2, #192	; 0xc0
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d040      	beq.n	8006e98 <UART_SetConfig+0x368>
 8006e16:	22c0      	movs	r2, #192	; 0xc0
 8006e18:	0092      	lsls	r2, r2, #2
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d843      	bhi.n	8006ea6 <UART_SetConfig+0x376>
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	0092      	lsls	r2, r2, #2
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d011      	beq.n	8006e4a <UART_SetConfig+0x31a>
 8006e26:	2280      	movs	r2, #128	; 0x80
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d83b      	bhi.n	8006ea6 <UART_SetConfig+0x376>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <UART_SetConfig+0x30c>
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	0052      	lsls	r2, r2, #1
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <UART_SetConfig+0x328>
 8006e3a:	e034      	b.n	8006ea6 <UART_SetConfig+0x376>
 8006e3c:	231b      	movs	r3, #27
 8006e3e:	2220      	movs	r2, #32
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	19db      	adds	r3, r3, r7
 8006e44:	2200      	movs	r2, #0
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e03a      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006e4a:	231b      	movs	r3, #27
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	19db      	adds	r3, r3, r7
 8006e52:	2202      	movs	r2, #2
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e033      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006e58:	231b      	movs	r3, #27
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	189b      	adds	r3, r3, r2
 8006e5e:	19db      	adds	r3, r3, r7
 8006e60:	2204      	movs	r2, #4
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e02c      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	cfff69f3 	.word	0xcfff69f3
 8006e6c:	ffffcfff 	.word	0xffffcfff
 8006e70:	40008000 	.word	0x40008000
 8006e74:	40008400 	.word	0x40008400
 8006e78:	11fff4ff 	.word	0x11fff4ff
 8006e7c:	40013800 	.word	0x40013800
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40004400 	.word	0x40004400
 8006e88:	40004800 	.word	0x40004800
 8006e8c:	40004c00 	.word	0x40004c00
 8006e90:	40005000 	.word	0x40005000
 8006e94:	40013c00 	.word	0x40013c00
 8006e98:	231b      	movs	r3, #27
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	189b      	adds	r3, r3, r2
 8006e9e:	19db      	adds	r3, r3, r7
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e00c      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006ea6:	231b      	movs	r3, #27
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	19db      	adds	r3, r3, r7
 8006eae:	2210      	movs	r2, #16
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e005      	b.n	8006ec0 <UART_SetConfig+0x390>
 8006eb4:	231b      	movs	r3, #27
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	189b      	adds	r3, r3, r2
 8006eba:	19db      	adds	r3, r3, r7
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4ac1      	ldr	r2, [pc, #772]	; (80071cc <UART_SetConfig+0x69c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d005      	beq.n	8006ed6 <UART_SetConfig+0x3a6>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4ac0      	ldr	r2, [pc, #768]	; (80071d0 <UART_SetConfig+0x6a0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d000      	beq.n	8006ed6 <UART_SetConfig+0x3a6>
 8006ed4:	e093      	b.n	8006ffe <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ed6:	231b      	movs	r3, #27
 8006ed8:	2220      	movs	r2, #32
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	19db      	adds	r3, r3, r7
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d015      	beq.n	8006f10 <UART_SetConfig+0x3e0>
 8006ee4:	dc18      	bgt.n	8006f18 <UART_SetConfig+0x3e8>
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d00d      	beq.n	8006f06 <UART_SetConfig+0x3d6>
 8006eea:	dc15      	bgt.n	8006f18 <UART_SetConfig+0x3e8>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <UART_SetConfig+0x3c6>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d005      	beq.n	8006f00 <UART_SetConfig+0x3d0>
 8006ef4:	e010      	b.n	8006f18 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef6:	f7fe f855 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8006efa:	0003      	movs	r3, r0
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006efe:	e014      	b.n	8006f2a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f00:	4bb4      	ldr	r3, [pc, #720]	; (80071d4 <UART_SetConfig+0x6a4>)
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f04:	e011      	b.n	8006f2a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f06:	f7fd ffc1 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f0e:	e00c      	b.n	8006f2a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f16:	e008      	b.n	8006f2a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f1c:	231a      	movs	r3, #26
 8006f1e:	2220      	movs	r2, #32
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	19db      	adds	r3, r3, r7
 8006f24:	2201      	movs	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]
        break;
 8006f28:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d100      	bne.n	8006f32 <UART_SetConfig+0x402>
 8006f30:	e135      	b.n	800719e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f36:	4ba8      	ldr	r3, [pc, #672]	; (80071d8 <UART_SetConfig+0x6a8>)
 8006f38:	0052      	lsls	r2, r2, #1
 8006f3a:	5ad3      	ldrh	r3, [r2, r3]
 8006f3c:	0019      	movs	r1, r3
 8006f3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f40:	f7f9 f8fc 	bl	800013c <__udivsi3>
 8006f44:	0003      	movs	r3, r0
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	0013      	movs	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	189b      	adds	r3, r3, r2
 8006f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d305      	bcc.n	8006f64 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d906      	bls.n	8006f72 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006f64:	231a      	movs	r3, #26
 8006f66:	2220      	movs	r2, #32
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	19db      	adds	r3, r3, r7
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e044      	b.n	8006ffc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7e:	4b96      	ldr	r3, [pc, #600]	; (80071d8 <UART_SetConfig+0x6a8>)
 8006f80:	0052      	lsls	r2, r2, #1
 8006f82:	5ad3      	ldrh	r3, [r2, r3]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	69b8      	ldr	r0, [r7, #24]
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	f7f9 fa87 	bl	80004a4 <__aeabi_uldivmod>
 8006f96:	0002      	movs	r2, r0
 8006f98:	000b      	movs	r3, r1
 8006f9a:	0e11      	lsrs	r1, r2, #24
 8006f9c:	021d      	lsls	r5, r3, #8
 8006f9e:	430d      	orrs	r5, r1
 8006fa0:	0214      	lsls	r4, r2, #8
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	68b8      	ldr	r0, [r7, #8]
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	1900      	adds	r0, r0, r4
 8006fb4:	4169      	adcs	r1, r5
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f7f9 fa6e 	bl	80004a4 <__aeabi_uldivmod>
 8006fc8:	0002      	movs	r2, r0
 8006fca:	000b      	movs	r3, r1
 8006fcc:	0013      	movs	r3, r2
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd2:	23c0      	movs	r3, #192	; 0xc0
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d309      	bcc.n	8006fee <UART_SetConfig+0x4be>
 8006fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fdc:	2380      	movs	r3, #128	; 0x80
 8006fde:	035b      	lsls	r3, r3, #13
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d204      	bcs.n	8006fee <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fea:	60da      	str	r2, [r3, #12]
 8006fec:	e006      	b.n	8006ffc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006fee:	231a      	movs	r3, #26
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	19db      	adds	r3, r3, r7
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006ffa:	e0d0      	b.n	800719e <UART_SetConfig+0x66e>
 8006ffc:	e0cf      	b.n	800719e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	429a      	cmp	r2, r3
 8007008:	d000      	beq.n	800700c <UART_SetConfig+0x4dc>
 800700a:	e070      	b.n	80070ee <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800700c:	231b      	movs	r3, #27
 800700e:	2220      	movs	r2, #32
 8007010:	189b      	adds	r3, r3, r2
 8007012:	19db      	adds	r3, r3, r7
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b08      	cmp	r3, #8
 8007018:	d015      	beq.n	8007046 <UART_SetConfig+0x516>
 800701a:	dc18      	bgt.n	800704e <UART_SetConfig+0x51e>
 800701c:	2b04      	cmp	r3, #4
 800701e:	d00d      	beq.n	800703c <UART_SetConfig+0x50c>
 8007020:	dc15      	bgt.n	800704e <UART_SetConfig+0x51e>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <UART_SetConfig+0x4fc>
 8007026:	2b02      	cmp	r3, #2
 8007028:	d005      	beq.n	8007036 <UART_SetConfig+0x506>
 800702a:	e010      	b.n	800704e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fd ffba 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8007030:	0003      	movs	r3, r0
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007034:	e014      	b.n	8007060 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007036:	4b67      	ldr	r3, [pc, #412]	; (80071d4 <UART_SetConfig+0x6a4>)
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703a:	e011      	b.n	8007060 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703c:	f7fd ff26 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8007040:	0003      	movs	r3, r0
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007044:	e00c      	b.n	8007060 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	2380      	movs	r3, #128	; 0x80
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800704c:	e008      	b.n	8007060 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007052:	231a      	movs	r3, #26
 8007054:	2220      	movs	r2, #32
 8007056:	189b      	adds	r3, r3, r2
 8007058:	19db      	adds	r3, r3, r7
 800705a:	2201      	movs	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
        break;
 800705e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	2b00      	cmp	r3, #0
 8007064:	d100      	bne.n	8007068 <UART_SetConfig+0x538>
 8007066:	e09a      	b.n	800719e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706c:	4b5a      	ldr	r3, [pc, #360]	; (80071d8 <UART_SetConfig+0x6a8>)
 800706e:	0052      	lsls	r2, r2, #1
 8007070:	5ad3      	ldrh	r3, [r2, r3]
 8007072:	0019      	movs	r1, r3
 8007074:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007076:	f7f9 f861 	bl	800013c <__udivsi3>
 800707a:	0003      	movs	r3, r0
 800707c:	005a      	lsls	r2, r3, #1
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	18d2      	adds	r2, r2, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	0019      	movs	r1, r3
 800708c:	0010      	movs	r0, r2
 800708e:	f7f9 f855 	bl	800013c <__udivsi3>
 8007092:	0003      	movs	r3, r0
 8007094:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d921      	bls.n	80070e0 <UART_SetConfig+0x5b0>
 800709c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	025b      	lsls	r3, r3, #9
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d21c      	bcs.n	80070e0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	200e      	movs	r0, #14
 80070ac:	2420      	movs	r4, #32
 80070ae:	1903      	adds	r3, r0, r4
 80070b0:	19db      	adds	r3, r3, r7
 80070b2:	210f      	movs	r1, #15
 80070b4:	438a      	bics	r2, r1
 80070b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2207      	movs	r2, #7
 80070c0:	4013      	ands	r3, r2
 80070c2:	b299      	uxth	r1, r3
 80070c4:	1903      	adds	r3, r0, r4
 80070c6:	19db      	adds	r3, r3, r7
 80070c8:	1902      	adds	r2, r0, r4
 80070ca:	19d2      	adds	r2, r2, r7
 80070cc:	8812      	ldrh	r2, [r2, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	1902      	adds	r2, r0, r4
 80070d8:	19d2      	adds	r2, r2, r7
 80070da:	8812      	ldrh	r2, [r2, #0]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e05e      	b.n	800719e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80070e0:	231a      	movs	r3, #26
 80070e2:	2220      	movs	r2, #32
 80070e4:	189b      	adds	r3, r3, r2
 80070e6:	19db      	adds	r3, r3, r7
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e057      	b.n	800719e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ee:	231b      	movs	r3, #27
 80070f0:	2220      	movs	r2, #32
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	19db      	adds	r3, r3, r7
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d015      	beq.n	8007128 <UART_SetConfig+0x5f8>
 80070fc:	dc18      	bgt.n	8007130 <UART_SetConfig+0x600>
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00d      	beq.n	800711e <UART_SetConfig+0x5ee>
 8007102:	dc15      	bgt.n	8007130 <UART_SetConfig+0x600>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <UART_SetConfig+0x5de>
 8007108:	2b02      	cmp	r3, #2
 800710a:	d005      	beq.n	8007118 <UART_SetConfig+0x5e8>
 800710c:	e010      	b.n	8007130 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800710e:	f7fd ff49 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8007112:	0003      	movs	r3, r0
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007116:	e014      	b.n	8007142 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007118:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <UART_SetConfig+0x6a4>)
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800711c:	e011      	b.n	8007142 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800711e:	f7fd feb5 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8007122:	0003      	movs	r3, r0
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007126:	e00c      	b.n	8007142 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800712e:	e008      	b.n	8007142 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007134:	231a      	movs	r3, #26
 8007136:	2220      	movs	r2, #32
 8007138:	189b      	adds	r3, r3, r2
 800713a:	19db      	adds	r3, r3, r7
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
        break;
 8007140:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	2b00      	cmp	r3, #0
 8007146:	d02a      	beq.n	800719e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800714c:	4b22      	ldr	r3, [pc, #136]	; (80071d8 <UART_SetConfig+0x6a8>)
 800714e:	0052      	lsls	r2, r2, #1
 8007150:	5ad3      	ldrh	r3, [r2, r3]
 8007152:	0019      	movs	r1, r3
 8007154:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007156:	f7f8 fff1 	bl	800013c <__udivsi3>
 800715a:	0003      	movs	r3, r0
 800715c:	001a      	movs	r2, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	18d2      	adds	r2, r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	0019      	movs	r1, r3
 800716c:	0010      	movs	r0, r2
 800716e:	f7f8 ffe5 	bl	800013c <__udivsi3>
 8007172:	0003      	movs	r3, r0
 8007174:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	2b0f      	cmp	r3, #15
 800717a:	d90a      	bls.n	8007192 <UART_SetConfig+0x662>
 800717c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717e:	2380      	movs	r3, #128	; 0x80
 8007180:	025b      	lsls	r3, r3, #9
 8007182:	429a      	cmp	r2, r3
 8007184:	d205      	bcs.n	8007192 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	b29a      	uxth	r2, r3
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e005      	b.n	800719e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007192:	231a      	movs	r3, #26
 8007194:	2220      	movs	r2, #32
 8007196:	189b      	adds	r3, r3, r2
 8007198:	19db      	adds	r3, r3, r7
 800719a:	2201      	movs	r2, #1
 800719c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	226a      	movs	r2, #106	; 0x6a
 80071a2:	2101      	movs	r1, #1
 80071a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	2268      	movs	r2, #104	; 0x68
 80071aa:	2101      	movs	r1, #1
 80071ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2200      	movs	r2, #0
 80071b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	2200      	movs	r2, #0
 80071b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071ba:	231a      	movs	r3, #26
 80071bc:	2220      	movs	r2, #32
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	19db      	adds	r3, r3, r7
 80071c2:	781b      	ldrb	r3, [r3, #0]
}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b010      	add	sp, #64	; 0x40
 80071ca:	bdb0      	pop	{r4, r5, r7, pc}
 80071cc:	40008000 	.word	0x40008000
 80071d0:	40008400 	.word	0x40008400
 80071d4:	00f42400 	.word	0x00f42400
 80071d8:	08013f44 	.word	0x08013f44

080071dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	2208      	movs	r2, #8
 80071ea:	4013      	ands	r3, r2
 80071ec:	d00b      	beq.n	8007206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4a4a      	ldr	r2, [pc, #296]	; (8007320 <UART_AdvFeatureConfig+0x144>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	0019      	movs	r1, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	2201      	movs	r2, #1
 800720c:	4013      	ands	r3, r2
 800720e:	d00b      	beq.n	8007228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4a43      	ldr	r2, [pc, #268]	; (8007324 <UART_AdvFeatureConfig+0x148>)
 8007218:	4013      	ands	r3, r2
 800721a:	0019      	movs	r1, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	2202      	movs	r2, #2
 800722e:	4013      	ands	r3, r2
 8007230:	d00b      	beq.n	800724a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a3b      	ldr	r2, [pc, #236]	; (8007328 <UART_AdvFeatureConfig+0x14c>)
 800723a:	4013      	ands	r3, r2
 800723c:	0019      	movs	r1, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	2204      	movs	r2, #4
 8007250:	4013      	ands	r3, r2
 8007252:	d00b      	beq.n	800726c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4a34      	ldr	r2, [pc, #208]	; (800732c <UART_AdvFeatureConfig+0x150>)
 800725c:	4013      	ands	r3, r2
 800725e:	0019      	movs	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	2210      	movs	r2, #16
 8007272:	4013      	ands	r3, r2
 8007274:	d00b      	beq.n	800728e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <UART_AdvFeatureConfig+0x154>)
 800727e:	4013      	ands	r3, r2
 8007280:	0019      	movs	r1, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	2220      	movs	r2, #32
 8007294:	4013      	ands	r3, r2
 8007296:	d00b      	beq.n	80072b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4a25      	ldr	r2, [pc, #148]	; (8007334 <UART_AdvFeatureConfig+0x158>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	0019      	movs	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	2240      	movs	r2, #64	; 0x40
 80072b6:	4013      	ands	r3, r2
 80072b8:	d01d      	beq.n	80072f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <UART_AdvFeatureConfig+0x15c>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	0019      	movs	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072d6:	2380      	movs	r3, #128	; 0x80
 80072d8:	035b      	lsls	r3, r3, #13
 80072da:	429a      	cmp	r2, r3
 80072dc:	d10b      	bne.n	80072f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <UART_AdvFeatureConfig+0x160>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	0019      	movs	r1, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	2280      	movs	r2, #128	; 0x80
 80072fc:	4013      	ands	r3, r2
 80072fe:	d00b      	beq.n	8007318 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <UART_AdvFeatureConfig+0x164>)
 8007308:	4013      	ands	r3, r2
 800730a:	0019      	movs	r1, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }
}
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	46bd      	mov	sp, r7
 800731c:	b002      	add	sp, #8
 800731e:	bd80      	pop	{r7, pc}
 8007320:	ffff7fff 	.word	0xffff7fff
 8007324:	fffdffff 	.word	0xfffdffff
 8007328:	fffeffff 	.word	0xfffeffff
 800732c:	fffbffff 	.word	0xfffbffff
 8007330:	ffffefff 	.word	0xffffefff
 8007334:	ffffdfff 	.word	0xffffdfff
 8007338:	ffefffff 	.word	0xffefffff
 800733c:	ff9fffff 	.word	0xff9fffff
 8007340:	fff7ffff 	.word	0xfff7ffff

08007344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b092      	sub	sp, #72	; 0x48
 8007348:	af02      	add	r7, sp, #8
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2290      	movs	r2, #144	; 0x90
 8007350:	2100      	movs	r1, #0
 8007352:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007354:	f7fc fcb4 	bl	8003cc0 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2208      	movs	r2, #8
 8007364:	4013      	ands	r3, r2
 8007366:	2b08      	cmp	r3, #8
 8007368:	d12d      	bne.n	80073c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	0391      	lsls	r1, r2, #14
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4a47      	ldr	r2, [pc, #284]	; (8007490 <UART_CheckIdleState+0x14c>)
 8007374:	9200      	str	r2, [sp, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	f000 f88e 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 800737c:	1e03      	subs	r3, r0, #0
 800737e:	d022      	beq.n	80073c6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007380:	f3ef 8310 	mrs	r3, PRIMASK
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38
 800738a:	2301      	movs	r3, #1
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	438a      	bics	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	f383 8810 	msr	PRIMASK, r3
}
 80073b0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2288      	movs	r2, #136	; 0x88
 80073b6:	2120      	movs	r1, #32
 80073b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2284      	movs	r2, #132	; 0x84
 80073be:	2100      	movs	r1, #0
 80073c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e060      	b.n	8007488 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2204      	movs	r2, #4
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d146      	bne.n	8007462 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	2280      	movs	r2, #128	; 0x80
 80073d8:	03d1      	lsls	r1, r2, #15
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <UART_CheckIdleState+0x14c>)
 80073de:	9200      	str	r2, [sp, #0]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f000 f859 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 80073e6:	1e03      	subs	r3, r0, #0
 80073e8:	d03b      	beq.n	8007462 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ea:	f3ef 8310 	mrs	r3, PRIMASK
 80073ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80073f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
 80073f4:	2301      	movs	r3, #1
 80073f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f383 8810 	msr	PRIMASK, r3
}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4922      	ldr	r1, [pc, #136]	; (8007494 <UART_CheckIdleState+0x150>)
 800740c:	400a      	ands	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f383 8810 	msr	PRIMASK, r3
}
 800741a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800741c:	f3ef 8310 	mrs	r3, PRIMASK
 8007420:	61bb      	str	r3, [r7, #24]
  return(result);
 8007422:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
 8007426:	2301      	movs	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f383 8810 	msr	PRIMASK, r3
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2101      	movs	r1, #1
 800743e:	438a      	bics	r2, r1
 8007440:	609a      	str	r2, [r3, #8]
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f383 8810 	msr	PRIMASK, r3
}
 800744c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	228c      	movs	r2, #140	; 0x8c
 8007452:	2120      	movs	r1, #32
 8007454:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2284      	movs	r2, #132	; 0x84
 800745a:	2100      	movs	r1, #0
 800745c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e012      	b.n	8007488 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2288      	movs	r2, #136	; 0x88
 8007466:	2120      	movs	r1, #32
 8007468:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	228c      	movs	r2, #140	; 0x8c
 800746e:	2120      	movs	r1, #32
 8007470:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2284      	movs	r2, #132	; 0x84
 8007482:	2100      	movs	r1, #0
 8007484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b010      	add	sp, #64	; 0x40
 800748e:	bd80      	pop	{r7, pc}
 8007490:	01ffffff 	.word	0x01ffffff
 8007494:	fffffedf 	.word	0xfffffedf

08007498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	1dfb      	adds	r3, r7, #7
 80074a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a8:	e051      	b.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	3301      	adds	r3, #1
 80074ae:	d04e      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b0:	f7fc fc06 	bl	8003cc0 <HAL_GetTick>
 80074b4:	0002      	movs	r2, r0
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e051      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2204      	movs	r2, #4
 80074d2:	4013      	ands	r3, r2
 80074d4:	d03b      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d038      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d035      	beq.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	2208      	movs	r2, #8
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d111      	bne.n	8007514 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2208      	movs	r2, #8
 80074f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 f83c 	bl	8007578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2290      	movs	r2, #144	; 0x90
 8007504:	2108      	movs	r1, #8
 8007506:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2284      	movs	r2, #132	; 0x84
 800750c:	2100      	movs	r1, #0
 800750e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e02c      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69da      	ldr	r2, [r3, #28]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	401a      	ands	r2, r3
 8007520:	2380      	movs	r3, #128	; 0x80
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	429a      	cmp	r2, r3
 8007526:	d112      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2280      	movs	r2, #128	; 0x80
 800752e:	0112      	lsls	r2, r2, #4
 8007530:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f81f 	bl	8007578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2290      	movs	r2, #144	; 0x90
 800753e:	2120      	movs	r1, #32
 8007540:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2284      	movs	r2, #132	; 0x84
 8007546:	2100      	movs	r1, #0
 8007548:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e00f      	b.n	800756e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	425a      	negs	r2, r3
 800755e:	4153      	adcs	r3, r2
 8007560:	b2db      	uxtb	r3, r3
 8007562:	001a      	movs	r2, r3
 8007564:	1dfb      	adds	r3, r7, #7
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d09e      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	0018      	movs	r0, r3
 8007570:	46bd      	mov	sp, r7
 8007572:	b004      	add	sp, #16
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08e      	sub	sp, #56	; 0x38
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007580:	f3ef 8310 	mrs	r3, PRIMASK
 8007584:	617b      	str	r3, [r7, #20]
  return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
 800758a:	2301      	movs	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f383 8810 	msr	PRIMASK, r3
}
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4926      	ldr	r1, [pc, #152]	; (800763c <UART_EndRxTransfer+0xc4>)
 80075a2:	400a      	ands	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b2:	f3ef 8310 	mrs	r3, PRIMASK
 80075b6:	623b      	str	r3, [r7, #32]
  return(result);
 80075b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
 80075bc:	2301      	movs	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	491b      	ldr	r1, [pc, #108]	; (8007640 <UART_EndRxTransfer+0xc8>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d118      	bne.n	800761e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f6:	2301      	movs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2110      	movs	r1, #16
 800760e:	438a      	bics	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f383 8810 	msr	PRIMASK, r3
}
 800761c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	228c      	movs	r2, #140	; 0x8c
 8007622:	2120      	movs	r1, #32
 8007624:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	46bd      	mov	sp, r7
 8007636:	b00e      	add	sp, #56	; 0x38
 8007638:	bd80      	pop	{r7, pc}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	fffffedf 	.word	0xfffffedf
 8007640:	effffffe 	.word	0xeffffffe

08007644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2284      	movs	r2, #132	; 0x84
 8007650:	5c9b      	ldrb	r3, [r3, r2]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_UARTEx_DisableFifoMode+0x16>
 8007656:	2302      	movs	r3, #2
 8007658:	e027      	b.n	80076aa <HAL_UARTEx_DisableFifoMode+0x66>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2284      	movs	r2, #132	; 0x84
 800765e:	2101      	movs	r1, #1
 8007660:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2288      	movs	r2, #136	; 0x88
 8007666:	2124      	movs	r1, #36	; 0x24
 8007668:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2101      	movs	r1, #1
 800767e:	438a      	bics	r2, r1
 8007680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a0b      	ldr	r2, [pc, #44]	; (80076b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007686:	4013      	ands	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2288      	movs	r2, #136	; 0x88
 800769c:	2120      	movs	r1, #32
 800769e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2284      	movs	r2, #132	; 0x84
 80076a4:	2100      	movs	r1, #0
 80076a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	0018      	movs	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b004      	add	sp, #16
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	dfffffff 	.word	0xdfffffff

080076b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2284      	movs	r2, #132	; 0x84
 80076c6:	5c9b      	ldrb	r3, [r3, r2]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e02e      	b.n	800772e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2284      	movs	r2, #132	; 0x84
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2288      	movs	r2, #136	; 0x88
 80076dc:	2124      	movs	r1, #36	; 0x24
 80076de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2101      	movs	r1, #1
 80076f4:	438a      	bics	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	08d9      	lsrs	r1, r3, #3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	0018      	movs	r0, r3
 8007710:	f000 f854 	bl	80077bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2288      	movs	r2, #136	; 0x88
 8007720:	2120      	movs	r1, #32
 8007722:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2284      	movs	r2, #132	; 0x84
 8007728:	2100      	movs	r1, #0
 800772a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	0018      	movs	r0, r3
 8007730:	46bd      	mov	sp, r7
 8007732:	b004      	add	sp, #16
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2284      	movs	r2, #132	; 0x84
 8007746:	5c9b      	ldrb	r3, [r3, r2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800774c:	2302      	movs	r3, #2
 800774e:	e02f      	b.n	80077b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2284      	movs	r2, #132	; 0x84
 8007754:	2101      	movs	r1, #1
 8007756:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2288      	movs	r2, #136	; 0x88
 800775c:	2124      	movs	r1, #36	; 0x24
 800775e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2101      	movs	r1, #1
 8007774:	438a      	bics	r2, r1
 8007776:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007780:	4013      	ands	r3, r2
 8007782:	0019      	movs	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	0018      	movs	r0, r3
 8007792:	f000 f813 	bl	80077bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2288      	movs	r2, #136	; 0x88
 80077a2:	2120      	movs	r1, #32
 80077a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2284      	movs	r2, #132	; 0x84
 80077aa:	2100      	movs	r1, #0
 80077ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	0018      	movs	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b004      	add	sp, #16
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	f1ffffff 	.word	0xf1ffffff

080077bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	226a      	movs	r2, #106	; 0x6a
 80077d0:	2101      	movs	r1, #1
 80077d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2268      	movs	r2, #104	; 0x68
 80077d8:	2101      	movs	r1, #1
 80077da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077dc:	e043      	b.n	8007866 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077de:	260f      	movs	r6, #15
 80077e0:	19bb      	adds	r3, r7, r6
 80077e2:	2208      	movs	r2, #8
 80077e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077e6:	200e      	movs	r0, #14
 80077e8:	183b      	adds	r3, r7, r0
 80077ea:	2208      	movs	r2, #8
 80077ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	0e5b      	lsrs	r3, r3, #25
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	240d      	movs	r4, #13
 80077fa:	193b      	adds	r3, r7, r4
 80077fc:	2107      	movs	r1, #7
 80077fe:	400a      	ands	r2, r1
 8007800:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	0f5b      	lsrs	r3, r3, #29
 800780a:	b2da      	uxtb	r2, r3
 800780c:	250c      	movs	r5, #12
 800780e:	197b      	adds	r3, r7, r5
 8007810:	2107      	movs	r1, #7
 8007812:	400a      	ands	r2, r1
 8007814:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007816:	183b      	adds	r3, r7, r0
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	197a      	adds	r2, r7, r5
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	4914      	ldr	r1, [pc, #80]	; (8007870 <UARTEx_SetNbDataToProcess+0xb4>)
 8007820:	5c8a      	ldrb	r2, [r1, r2]
 8007822:	435a      	muls	r2, r3
 8007824:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007826:	197b      	adds	r3, r7, r5
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	4a12      	ldr	r2, [pc, #72]	; (8007874 <UARTEx_SetNbDataToProcess+0xb8>)
 800782c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800782e:	0019      	movs	r1, r3
 8007830:	f7f8 fd0e 	bl	8000250 <__divsi3>
 8007834:	0003      	movs	r3, r0
 8007836:	b299      	uxth	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	226a      	movs	r2, #106	; 0x6a
 800783c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800783e:	19bb      	adds	r3, r7, r6
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	193a      	adds	r2, r7, r4
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	490a      	ldr	r1, [pc, #40]	; (8007870 <UARTEx_SetNbDataToProcess+0xb4>)
 8007848:	5c8a      	ldrb	r2, [r1, r2]
 800784a:	435a      	muls	r2, r3
 800784c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800784e:	193b      	adds	r3, r7, r4
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	4a08      	ldr	r2, [pc, #32]	; (8007874 <UARTEx_SetNbDataToProcess+0xb8>)
 8007854:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007856:	0019      	movs	r1, r3
 8007858:	f7f8 fcfa 	bl	8000250 <__divsi3>
 800785c:	0003      	movs	r3, r0
 800785e:	b299      	uxth	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2268      	movs	r2, #104	; 0x68
 8007864:	5299      	strh	r1, [r3, r2]
}
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	46bd      	mov	sp, r7
 800786a:	b005      	add	sp, #20
 800786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	08013f5c 	.word	0x08013f5c
 8007874:	08013f64 	.word	0x08013f64

08007878 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b0e4      	sub	sp, #400	; 0x190
 800787c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800787e:	24c8      	movs	r4, #200	; 0xc8
 8007880:	193b      	adds	r3, r7, r4
 8007882:	0018      	movs	r0, r3
 8007884:	23c6      	movs	r3, #198	; 0xc6
 8007886:	001a      	movs	r2, r3
 8007888:	2100      	movs	r1, #0
 800788a:	f004 f82f 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <astronode_send_cfg_sr+0x64>)
 8007890:	25c8      	movs	r5, #200	; 0xc8
 8007892:	006d      	lsls	r5, r5, #1
 8007894:	195b      	adds	r3, r3, r5
 8007896:	19db      	adds	r3, r3, r7
 8007898:	0018      	movs	r0, r3
 800789a:	23c6      	movs	r3, #198	; 0xc6
 800789c:	001a      	movs	r2, r3
 800789e:	2100      	movs	r1, #0
 80078a0:	f004 f824 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 80078a4:	193b      	adds	r3, r7, r4
 80078a6:	2210      	movs	r2, #16
 80078a8:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 80078aa:	003a      	movs	r2, r7
 80078ac:	193b      	adds	r3, r7, r4
 80078ae:	0011      	movs	r1, r2
 80078b0:	0018      	movs	r0, r3
 80078b2:	f001 fa4d 	bl	8008d50 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <astronode_send_cfg_sr+0x64>)
 80078b8:	195b      	adds	r3, r3, r5
 80078ba:	19db      	adds	r3, r3, r7
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b90      	cmp	r3, #144	; 0x90
 80078c0:	d104      	bne.n	80078cc <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 80078c2:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <astronode_send_cfg_sr+0x68>)
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7fb fc43 	bl	8003150 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 80078ca:	e003      	b.n	80078d4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <astronode_send_cfg_sr+0x6c>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7fb fc3e 	bl	8003150 <send_debug_logs>
}
 80078d4:	46c0      	nop			; (mov r8, r8)
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b064      	add	sp, #400	; 0x190
 80078da:	bdb0      	pop	{r4, r5, r7, pc}
 80078dc:	fffffe70 	.word	0xfffffe70
 80078e0:	080129c8 	.word	0x080129c8
 80078e4:	080129fc 	.word	0x080129fc

080078e8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80078e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ea:	b0e7      	sub	sp, #412	; 0x19c
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	0005      	movs	r5, r0
 80078f0:	000c      	movs	r4, r1
 80078f2:	0010      	movs	r0, r2
 80078f4:	0019      	movs	r1, r3
 80078f6:	4b4b      	ldr	r3, [pc, #300]	; (8007a24 <astronode_send_cfg_wr+0x13c>)
 80078f8:	26cc      	movs	r6, #204	; 0xcc
 80078fa:	0076      	lsls	r6, r6, #1
 80078fc:	199b      	adds	r3, r3, r6
 80078fe:	19db      	adds	r3, r3, r7
 8007900:	1c2a      	adds	r2, r5, #0
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	4b48      	ldr	r3, [pc, #288]	; (8007a28 <astronode_send_cfg_wr+0x140>)
 8007906:	0035      	movs	r5, r6
 8007908:	195b      	adds	r3, r3, r5
 800790a:	19db      	adds	r3, r3, r7
 800790c:	1c22      	adds	r2, r4, #0
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	4b46      	ldr	r3, [pc, #280]	; (8007a2c <astronode_send_cfg_wr+0x144>)
 8007912:	002c      	movs	r4, r5
 8007914:	191b      	adds	r3, r3, r4
 8007916:	19db      	adds	r3, r3, r7
 8007918:	1c02      	adds	r2, r0, #0
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	4b44      	ldr	r3, [pc, #272]	; (8007a30 <astronode_send_cfg_wr+0x148>)
 800791e:	191b      	adds	r3, r3, r4
 8007920:	19db      	adds	r3, r3, r7
 8007922:	1c0a      	adds	r2, r1, #0
 8007924:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007926:	25d0      	movs	r5, #208	; 0xd0
 8007928:	197b      	adds	r3, r7, r5
 800792a:	0018      	movs	r0, r3
 800792c:	23c6      	movs	r3, #198	; 0xc6
 800792e:	001a      	movs	r2, r3
 8007930:	2100      	movs	r1, #0
 8007932:	f003 ffdb 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007936:	4b3f      	ldr	r3, [pc, #252]	; (8007a34 <astronode_send_cfg_wr+0x14c>)
 8007938:	191b      	adds	r3, r3, r4
 800793a:	19db      	adds	r3, r3, r7
 800793c:	0018      	movs	r0, r3
 800793e:	23c6      	movs	r3, #198	; 0xc6
 8007940:	001a      	movs	r2, r3
 8007942:	2100      	movs	r1, #0
 8007944:	f003 ffd2 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007948:	0029      	movs	r1, r5
 800794a:	187b      	adds	r3, r7, r1
 800794c:	2205      	movs	r2, #5
 800794e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007950:	4b34      	ldr	r3, [pc, #208]	; (8007a24 <astronode_send_cfg_wr+0x13c>)
 8007952:	191b      	adds	r3, r3, r4
 8007954:	19db      	adds	r3, r3, r7
 8007956:	2200      	movs	r2, #0
 8007958:	569a      	ldrsb	r2, [r3, r2]
 800795a:	4b33      	ldr	r3, [pc, #204]	; (8007a28 <astronode_send_cfg_wr+0x140>)
 800795c:	191b      	adds	r3, r3, r4
 800795e:	19db      	adds	r3, r3, r7
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	b25b      	sxtb	r3, r3
 8007966:	4313      	orrs	r3, r2
 8007968:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800796a:	4b30      	ldr	r3, [pc, #192]	; (8007a2c <astronode_send_cfg_wr+0x144>)
 800796c:	191b      	adds	r3, r3, r4
 800796e:	19db      	adds	r3, r3, r7
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	b25b      	sxtb	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800797a:	4b2d      	ldr	r3, [pc, #180]	; (8007a30 <astronode_send_cfg_wr+0x148>)
 800797c:	191b      	adds	r3, r3, r4
 800797e:	19db      	adds	r3, r3, r7
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	b25b      	sxtb	r3, r3
 8007986:	4313      	orrs	r3, r2
 8007988:	b25b      	sxtb	r3, r3
 800798a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 800798c:	187b      	adds	r3, r7, r1
 800798e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007990:	23d4      	movs	r3, #212	; 0xd4
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	2508      	movs	r5, #8
 8007996:	195b      	adds	r3, r3, r5
 8007998:	19db      	adds	r3, r3, r7
 800799a:	2200      	movs	r2, #0
 800799c:	569a      	ldrsb	r2, [r3, r2]
 800799e:	23d6      	movs	r3, #214	; 0xd6
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	195b      	adds	r3, r3, r5
 80079a4:	19db      	adds	r3, r3, r7
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80079b0:	23d8      	movs	r3, #216	; 0xd8
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	195b      	adds	r3, r3, r5
 80079b6:	19db      	adds	r3, r3, r7
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	b25b      	sxtb	r3, r3
 80079be:	4313      	orrs	r3, r2
 80079c0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80079c2:	23da      	movs	r3, #218	; 0xda
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	195b      	adds	r3, r3, r5
 80079c8:	19db      	adds	r3, r3, r7
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b25b      	sxtb	r3, r3
 80079d4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80079d6:	187b      	adds	r3, r7, r1
 80079d8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80079da:	0008      	movs	r0, r1
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	22c4      	movs	r2, #196	; 0xc4
 80079e0:	2103      	movs	r1, #3
 80079e2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80079e4:	002b      	movs	r3, r5
 80079e6:	18fa      	adds	r2, r7, r3
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	0011      	movs	r1, r2
 80079ec:	0018      	movs	r0, r3
 80079ee:	f001 f9af 	bl	8008d50 <astronode_transport_send_receive>
 80079f2:	0003      	movs	r3, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10f      	bne.n	8007a18 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80079f8:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <astronode_send_cfg_wr+0x14c>)
 80079fa:	191b      	adds	r3, r3, r4
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b85      	cmp	r3, #133	; 0x85
 8007a02:	d105      	bne.n	8007a10 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <astronode_send_cfg_wr+0x150>)
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7fb fba2 	bl	8003150 <send_debug_logs>
            return true ;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e004      	b.n	8007a1a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <astronode_send_cfg_wr+0x154>)
 8007a12:	0018      	movs	r0, r3
 8007a14:	f7fb fb9c 	bl	8003150 <send_debug_logs>
        }
    }
    return false ;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b067      	add	sp, #412	; 0x19c
 8007a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	fffffe6f 	.word	0xfffffe6f
 8007a28:	fffffe6e 	.word	0xfffffe6e
 8007a2c:	fffffe6d 	.word	0xfffffe6d
 8007a30:	fffffe6c 	.word	0xfffffe6c
 8007a34:	fffffe70 	.word	0xfffffe70
 8007a38:	08012a30 	.word	0x08012a30
 8007a3c:	08012a5c 	.word	0x08012a5c

08007a40 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	b0ed      	sub	sp, #436	; 0x1b4
 8007a44:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a46:	21c8      	movs	r1, #200	; 0xc8
 8007a48:	2318      	movs	r3, #24
 8007a4a:	18cb      	adds	r3, r1, r3
 8007a4c:	19db      	adds	r3, r3, r7
 8007a4e:	0018      	movs	r0, r3
 8007a50:	23c6      	movs	r3, #198	; 0xc6
 8007a52:	001a      	movs	r2, r3
 8007a54:	2100      	movs	r1, #0
 8007a56:	f003 ff49 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007a5a:	4b4a      	ldr	r3, [pc, #296]	; (8007b84 <astronode_send_mgi_rr+0x144>)
 8007a5c:	26cc      	movs	r6, #204	; 0xcc
 8007a5e:	0076      	lsls	r6, r6, #1
 8007a60:	199b      	adds	r3, r3, r6
 8007a62:	2218      	movs	r2, #24
 8007a64:	4694      	mov	ip, r2
 8007a66:	44bc      	add	ip, r7
 8007a68:	4463      	add	r3, ip
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	23c6      	movs	r3, #198	; 0xc6
 8007a6e:	001a      	movs	r2, r3
 8007a70:	2100      	movs	r1, #0
 8007a72:	f003 ff3b 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007a76:	21c8      	movs	r1, #200	; 0xc8
 8007a78:	2318      	movs	r3, #24
 8007a7a:	18cb      	adds	r3, r1, r3
 8007a7c:	19db      	adds	r3, r3, r7
 8007a7e:	2219      	movs	r2, #25
 8007a80:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a82:	2318      	movs	r3, #24
 8007a84:	18fa      	adds	r2, r7, r3
 8007a86:	2318      	movs	r3, #24
 8007a88:	18cb      	adds	r3, r1, r3
 8007a8a:	19db      	adds	r3, r3, r7
 8007a8c:	0011      	movs	r1, r2
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f001 f95e 	bl	8008d50 <astronode_transport_send_receive>
 8007a94:	0003      	movs	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d16f      	bne.n	8007b7a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007a9a:	4b3a      	ldr	r3, [pc, #232]	; (8007b84 <astronode_send_mgi_rr+0x144>)
 8007a9c:	0032      	movs	r2, r6
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	2118      	movs	r1, #24
 8007aa2:	468c      	mov	ip, r1
 8007aa4:	44bc      	add	ip, r7
 8007aa6:	4463      	add	r3, ip
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b99      	cmp	r3, #153	; 0x99
 8007aac:	d161      	bne.n	8007b72 <astronode_send_mgi_rr+0x132>
        {
 8007aae:	466b      	mov	r3, sp
 8007ab0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007ab2:	4b34      	ldr	r3, [pc, #208]	; (8007b84 <astronode_send_mgi_rr+0x144>)
 8007ab4:	189b      	adds	r3, r3, r2
 8007ab6:	2218      	movs	r2, #24
 8007ab8:	4694      	mov	ip, r2
 8007aba:	44bc      	add	ip, r7
 8007abc:	4463      	add	r3, ip
 8007abe:	22c4      	movs	r2, #196	; 0xc4
 8007ac0:	5a9b      	ldrh	r3, [r3, r2]
 8007ac2:	001a      	movs	r2, r3
 8007ac4:	3a01      	subs	r2, #1
 8007ac6:	21ca      	movs	r1, #202	; 0xca
 8007ac8:	0049      	lsls	r1, r1, #1
 8007aca:	2018      	movs	r0, #24
 8007acc:	1809      	adds	r1, r1, r0
 8007ace:	19c9      	adds	r1, r1, r7
 8007ad0:	600a      	str	r2, [r1, #0]
 8007ad2:	001c      	movs	r4, r3
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	0015      	movs	r5, r2
 8007ad8:	0020      	movs	r0, r4
 8007ada:	0029      	movs	r1, r5
 8007adc:	0004      	movs	r4, r0
 8007ade:	0f62      	lsrs	r2, r4, #29
 8007ae0:	000c      	movs	r4, r1
 8007ae2:	00e4      	lsls	r4, r4, #3
 8007ae4:	617c      	str	r4, [r7, #20]
 8007ae6:	697c      	ldr	r4, [r7, #20]
 8007ae8:	4314      	orrs	r4, r2
 8007aea:	617c      	str	r4, [r7, #20]
 8007aec:	0001      	movs	r1, r0
 8007aee:	00c9      	lsls	r1, r1, #3
 8007af0:	6139      	str	r1, [r7, #16]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	2200      	movs	r2, #0
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	0004      	movs	r4, r0
 8007afe:	0f62      	lsrs	r2, r4, #29
 8007b00:	000c      	movs	r4, r1
 8007b02:	00e4      	lsls	r4, r4, #3
 8007b04:	60fc      	str	r4, [r7, #12]
 8007b06:	68fc      	ldr	r4, [r7, #12]
 8007b08:	4314      	orrs	r4, r2
 8007b0a:	60fc      	str	r4, [r7, #12]
 8007b0c:	0001      	movs	r1, r0
 8007b0e:	00ca      	lsls	r2, r1, #3
 8007b10:	60ba      	str	r2, [r7, #8]
 8007b12:	3307      	adds	r3, #7
 8007b14:	08db      	lsrs	r3, r3, #3
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4669      	mov	r1, sp
 8007b1a:	1acb      	subs	r3, r1, r3
 8007b1c:	469d      	mov	sp, r3
 8007b1e:	466b      	mov	r3, sp
 8007b20:	3300      	adds	r3, #0
 8007b22:	24c8      	movs	r4, #200	; 0xc8
 8007b24:	0064      	lsls	r4, r4, #1
 8007b26:	2218      	movs	r2, #24
 8007b28:	18a2      	adds	r2, r4, r2
 8007b2a:	19d1      	adds	r1, r2, r7
 8007b2c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007b2e:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <astronode_send_mgi_rr+0x148>)
 8007b30:	0018      	movs	r0, r3
 8007b32:	f7fb fb0d 	bl	8003150 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <astronode_send_mgi_rr+0x144>)
 8007b38:	22cc      	movs	r2, #204	; 0xcc
 8007b3a:	0052      	lsls	r2, r2, #1
 8007b3c:	189b      	adds	r3, r3, r2
 8007b3e:	2218      	movs	r2, #24
 8007b40:	4694      	mov	ip, r2
 8007b42:	44bc      	add	ip, r7
 8007b44:	4463      	add	r3, ip
 8007b46:	22c4      	movs	r2, #196	; 0xc4
 8007b48:	5a9b      	ldrh	r3, [r3, r2]
 8007b4a:	0019      	movs	r1, r3
 8007b4c:	2318      	movs	r3, #24
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	3301      	adds	r3, #1
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <astronode_send_mgi_rr+0x14c>)
 8007b54:	2018      	movs	r0, #24
 8007b56:	1820      	adds	r0, r4, r0
 8007b58:	19c0      	adds	r0, r0, r7
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	f003 fdfc 	bl	800b758 <snprintf>
            send_debug_logs(guid);
 8007b60:	2318      	movs	r3, #24
 8007b62:	18e3      	adds	r3, r4, r3
 8007b64:	19db      	adds	r3, r3, r7
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7fb faf1 	bl	8003150 <send_debug_logs>
 8007b6e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007b70:	e003      	b.n	8007b7a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007b72:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <astronode_send_mgi_rr+0x150>)
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7fb faeb 	bl	8003150 <send_debug_logs>
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b06d      	add	sp, #436	; 0x1b4
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	fffffe68 	.word	0xfffffe68
 8007b88:	08012ae8 	.word	0x08012ae8
 8007b8c:	08012af8 	.word	0x08012af8
 8007b90:	08012afc 	.word	0x08012afc

08007b94 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b96:	b0ed      	sub	sp, #436	; 0x1b4
 8007b98:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b9a:	21c8      	movs	r1, #200	; 0xc8
 8007b9c:	2318      	movs	r3, #24
 8007b9e:	18cb      	adds	r3, r1, r3
 8007ba0:	19db      	adds	r3, r3, r7
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	23c6      	movs	r3, #198	; 0xc6
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f003 fe9f 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007bae:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <astronode_send_msn_rr+0x144>)
 8007bb0:	26cc      	movs	r6, #204	; 0xcc
 8007bb2:	0076      	lsls	r6, r6, #1
 8007bb4:	199b      	adds	r3, r3, r6
 8007bb6:	2218      	movs	r2, #24
 8007bb8:	4694      	mov	ip, r2
 8007bba:	44bc      	add	ip, r7
 8007bbc:	4463      	add	r3, ip
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	23c6      	movs	r3, #198	; 0xc6
 8007bc2:	001a      	movs	r2, r3
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	f003 fe91 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007bca:	21c8      	movs	r1, #200	; 0xc8
 8007bcc:	2318      	movs	r3, #24
 8007bce:	18cb      	adds	r3, r1, r3
 8007bd0:	19db      	adds	r3, r3, r7
 8007bd2:	221a      	movs	r2, #26
 8007bd4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bd6:	2318      	movs	r3, #24
 8007bd8:	18fa      	adds	r2, r7, r3
 8007bda:	2318      	movs	r3, #24
 8007bdc:	18cb      	adds	r3, r1, r3
 8007bde:	19db      	adds	r3, r3, r7
 8007be0:	0011      	movs	r1, r2
 8007be2:	0018      	movs	r0, r3
 8007be4:	f001 f8b4 	bl	8008d50 <astronode_transport_send_receive>
 8007be8:	0003      	movs	r3, r0
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d16f      	bne.n	8007cce <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007bee:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <astronode_send_msn_rr+0x144>)
 8007bf0:	0032      	movs	r2, r6
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	2118      	movs	r1, #24
 8007bf6:	468c      	mov	ip, r1
 8007bf8:	44bc      	add	ip, r7
 8007bfa:	4463      	add	r3, ip
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b9a      	cmp	r3, #154	; 0x9a
 8007c00:	d161      	bne.n	8007cc6 <astronode_send_msn_rr+0x132>
        {
 8007c02:	466b      	mov	r3, sp
 8007c04:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007c06:	4b34      	ldr	r3, [pc, #208]	; (8007cd8 <astronode_send_msn_rr+0x144>)
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	2218      	movs	r2, #24
 8007c0c:	4694      	mov	ip, r2
 8007c0e:	44bc      	add	ip, r7
 8007c10:	4463      	add	r3, ip
 8007c12:	22c4      	movs	r2, #196	; 0xc4
 8007c14:	5a9b      	ldrh	r3, [r3, r2]
 8007c16:	001a      	movs	r2, r3
 8007c18:	3a01      	subs	r2, #1
 8007c1a:	21ca      	movs	r1, #202	; 0xca
 8007c1c:	0049      	lsls	r1, r1, #1
 8007c1e:	2018      	movs	r0, #24
 8007c20:	1809      	adds	r1, r1, r0
 8007c22:	19c9      	adds	r1, r1, r7
 8007c24:	600a      	str	r2, [r1, #0]
 8007c26:	001c      	movs	r4, r3
 8007c28:	2200      	movs	r2, #0
 8007c2a:	0015      	movs	r5, r2
 8007c2c:	0020      	movs	r0, r4
 8007c2e:	0029      	movs	r1, r5
 8007c30:	0004      	movs	r4, r0
 8007c32:	0f62      	lsrs	r2, r4, #29
 8007c34:	000c      	movs	r4, r1
 8007c36:	00e4      	lsls	r4, r4, #3
 8007c38:	617c      	str	r4, [r7, #20]
 8007c3a:	697c      	ldr	r4, [r7, #20]
 8007c3c:	4314      	orrs	r4, r2
 8007c3e:	617c      	str	r4, [r7, #20]
 8007c40:	0001      	movs	r1, r0
 8007c42:	00c9      	lsls	r1, r1, #3
 8007c44:	6139      	str	r1, [r7, #16]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	6838      	ldr	r0, [r7, #0]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	0004      	movs	r4, r0
 8007c52:	0f62      	lsrs	r2, r4, #29
 8007c54:	000c      	movs	r4, r1
 8007c56:	00e4      	lsls	r4, r4, #3
 8007c58:	60fc      	str	r4, [r7, #12]
 8007c5a:	68fc      	ldr	r4, [r7, #12]
 8007c5c:	4314      	orrs	r4, r2
 8007c5e:	60fc      	str	r4, [r7, #12]
 8007c60:	0001      	movs	r1, r0
 8007c62:	00ca      	lsls	r2, r1, #3
 8007c64:	60ba      	str	r2, [r7, #8]
 8007c66:	3307      	adds	r3, #7
 8007c68:	08db      	lsrs	r3, r3, #3
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4669      	mov	r1, sp
 8007c6e:	1acb      	subs	r3, r1, r3
 8007c70:	469d      	mov	sp, r3
 8007c72:	466b      	mov	r3, sp
 8007c74:	3300      	adds	r3, #0
 8007c76:	24c8      	movs	r4, #200	; 0xc8
 8007c78:	0064      	lsls	r4, r4, #1
 8007c7a:	2218      	movs	r2, #24
 8007c7c:	18a2      	adds	r2, r4, r2
 8007c7e:	19d1      	adds	r1, r2, r7
 8007c80:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <astronode_send_msn_rr+0x148>)
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7fb fa63 	bl	8003150 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <astronode_send_msn_rr+0x144>)
 8007c8c:	22cc      	movs	r2, #204	; 0xcc
 8007c8e:	0052      	lsls	r2, r2, #1
 8007c90:	189b      	adds	r3, r3, r2
 8007c92:	2218      	movs	r2, #24
 8007c94:	4694      	mov	ip, r2
 8007c96:	44bc      	add	ip, r7
 8007c98:	4463      	add	r3, ip
 8007c9a:	22c4      	movs	r2, #196	; 0xc4
 8007c9c:	5a9b      	ldrh	r3, [r3, r2]
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	2318      	movs	r3, #24
 8007ca2:	18fb      	adds	r3, r7, r3
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	4a0e      	ldr	r2, [pc, #56]	; (8007ce0 <astronode_send_msn_rr+0x14c>)
 8007ca8:	2018      	movs	r0, #24
 8007caa:	1820      	adds	r0, r4, r0
 8007cac:	19c0      	adds	r0, r0, r7
 8007cae:	6800      	ldr	r0, [r0, #0]
 8007cb0:	f003 fd52 	bl	800b758 <snprintf>
            send_debug_logs(serial_number);
 8007cb4:	2318      	movs	r3, #24
 8007cb6:	18e3      	adds	r3, r4, r3
 8007cb8:	19db      	adds	r3, r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f7fb fa47 	bl	8003150 <send_debug_logs>
 8007cc2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007cc4:	e003      	b.n	8007cce <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <astronode_send_msn_rr+0x150>)
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f7fb fa41 	bl	8003150 <send_debug_logs>
}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	b06d      	add	sp, #436	; 0x1b4
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	fffffe68 	.word	0xfffffe68
 8007cdc:	08012b18 	.word	0x08012b18
 8007ce0:	08012af8 	.word	0x08012af8
 8007ce4:	08012b34 	.word	0x08012b34

08007ce8 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b0e4      	sub	sp, #400	; 0x190
 8007cec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cee:	24c8      	movs	r4, #200	; 0xc8
 8007cf0:	193b      	adds	r3, r7, r4
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	23c6      	movs	r3, #198	; 0xc6
 8007cf6:	001a      	movs	r2, r3
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f003 fdf7 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007cfe:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d00:	25c8      	movs	r5, #200	; 0xc8
 8007d02:	006d      	lsls	r5, r5, #1
 8007d04:	195b      	adds	r3, r3, r5
 8007d06:	19db      	adds	r3, r3, r7
 8007d08:	0018      	movs	r0, r3
 8007d0a:	23c6      	movs	r3, #198	; 0xc6
 8007d0c:	001a      	movs	r2, r3
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f003 fdec 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007d14:	193b      	adds	r3, r7, r4
 8007d16:	2265      	movs	r2, #101	; 0x65
 8007d18:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d1a:	003a      	movs	r2, r7
 8007d1c:	193b      	adds	r3, r7, r4
 8007d1e:	0011      	movs	r1, r2
 8007d20:	0018      	movs	r0, r3
 8007d22:	f001 f815 	bl	8008d50 <astronode_transport_send_receive>
 8007d26:	0003      	movs	r3, r0
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d147      	bne.n	8007dbc <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007d2c:	4b25      	ldr	r3, [pc, #148]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d2e:	195b      	adds	r3, r3, r5
 8007d30:	19db      	adds	r3, r3, r7
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2be5      	cmp	r3, #229	; 0xe5
 8007d36:	d141      	bne.n	8007dbc <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007d38:	4b22      	ldr	r3, [pc, #136]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d3a:	195b      	adds	r3, r3, r5
 8007d3c:	19db      	adds	r3, r3, r7
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	001a      	movs	r2, r3
 8007d42:	2301      	movs	r3, #1
 8007d44:	4013      	ands	r3, r2
 8007d46:	d006      	beq.n	8007d56 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007d48:	4b1f      	ldr	r3, [pc, #124]	; (8007dc8 <astronode_send_evt_rr+0xe0>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007d4e:	4b1f      	ldr	r3, [pc, #124]	; (8007dcc <astronode_send_evt_rr+0xe4>)
 8007d50:	0018      	movs	r0, r3
 8007d52:	f7fb f9fd 	bl	8003150 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d58:	22c8      	movs	r2, #200	; 0xc8
 8007d5a:	0052      	lsls	r2, r2, #1
 8007d5c:	189b      	adds	r3, r3, r2
 8007d5e:	19db      	adds	r3, r3, r7
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	001a      	movs	r2, r3
 8007d64:	2302      	movs	r3, #2
 8007d66:	4013      	ands	r3, r2
 8007d68:	d006      	beq.n	8007d78 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007d6a:	4b19      	ldr	r3, [pc, #100]	; (8007dd0 <astronode_send_evt_rr+0xe8>)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007d70:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <astronode_send_evt_rr+0xec>)
 8007d72:	0018      	movs	r0, r3
 8007d74:	f7fb f9ec 	bl	8003150 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007d78:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d7a:	22c8      	movs	r2, #200	; 0xc8
 8007d7c:	0052      	lsls	r2, r2, #1
 8007d7e:	189b      	adds	r3, r3, r2
 8007d80:	19db      	adds	r3, r3, r7
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	001a      	movs	r2, r3
 8007d86:	2304      	movs	r3, #4
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d006      	beq.n	8007d9a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007d8c:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <astronode_send_evt_rr+0xf0>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <astronode_send_evt_rr+0xf4>)
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7fb f9db 	bl	8003150 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <astronode_send_evt_rr+0xdc>)
 8007d9c:	22c8      	movs	r2, #200	; 0xc8
 8007d9e:	0052      	lsls	r2, r2, #1
 8007da0:	189b      	adds	r3, r3, r2
 8007da2:	19db      	adds	r3, r3, r7
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	001a      	movs	r2, r3
 8007da8:	2308      	movs	r3, #8
 8007daa:	4013      	ands	r3, r2
 8007dac:	d006      	beq.n	8007dbc <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <astronode_send_evt_rr+0xf8>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <astronode_send_evt_rr+0xfc>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7fb f9ca 	bl	8003150 <send_debug_logs>
            }

        }
    }
}
 8007dbc:	46c0      	nop			; (mov r8, r8)
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b064      	add	sp, #400	; 0x190
 8007dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc4:	fffffe70 	.word	0xfffffe70
 8007dc8:	20000bf4 	.word	0x20000bf4
 8007dcc:	08012bdc 	.word	0x08012bdc
 8007dd0:	20000bf5 	.word	0x20000bf5
 8007dd4:	08012c00 	.word	0x08012c00
 8007dd8:	20000bf6 	.word	0x20000bf6
 8007ddc:	08012c18 	.word	0x08012c18
 8007de0:	20000bf7 	.word	0x20000bf7
 8007de4:	08012c2c 	.word	0x08012c2c

08007de8 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dea:	b0e7      	sub	sp, #412	; 0x19c
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007df2:	24d0      	movs	r4, #208	; 0xd0
 8007df4:	193b      	adds	r3, r7, r4
 8007df6:	0018      	movs	r0, r3
 8007df8:	23c6      	movs	r3, #198	; 0xc6
 8007dfa:	001a      	movs	r2, r3
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f003 fd75 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007e02:	4b56      	ldr	r3, [pc, #344]	; (8007f5c <astronode_send_geo_wr+0x174>)
 8007e04:	26cc      	movs	r6, #204	; 0xcc
 8007e06:	0076      	lsls	r6, r6, #1
 8007e08:	199b      	adds	r3, r3, r6
 8007e0a:	19db      	adds	r3, r3, r7
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	23c6      	movs	r3, #198	; 0xc6
 8007e10:	001a      	movs	r2, r3
 8007e12:	2100      	movs	r1, #0
 8007e14:	f003 fd6a 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007e18:	193b      	adds	r3, r7, r4
 8007e1a:	2235      	movs	r2, #53	; 0x35
 8007e1c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007e1e:	193b      	adds	r3, r7, r4
 8007e20:	22c4      	movs	r2, #196	; 0xc4
 8007e22:	5a9b      	ldrh	r3, [r3, r2]
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	b290      	uxth	r0, r2
 8007e28:	193a      	adds	r2, r7, r4
 8007e2a:	21c4      	movs	r1, #196	; 0xc4
 8007e2c:	5250      	strh	r0, [r2, r1]
 8007e2e:	0019      	movs	r1, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	193b      	adds	r3, r7, r4
 8007e36:	185b      	adds	r3, r3, r1
 8007e38:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1218      	asrs	r0, r3, #8
 8007e3e:	0025      	movs	r5, r4
 8007e40:	197b      	adds	r3, r7, r5
 8007e42:	22c4      	movs	r2, #196	; 0xc4
 8007e44:	5a9b      	ldrh	r3, [r3, r2]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	b294      	uxth	r4, r2
 8007e4a:	197a      	adds	r2, r7, r5
 8007e4c:	21c4      	movs	r1, #196	; 0xc4
 8007e4e:	5254      	strh	r4, [r2, r1]
 8007e50:	0019      	movs	r1, r3
 8007e52:	b2c2      	uxtb	r2, r0
 8007e54:	002c      	movs	r4, r5
 8007e56:	193b      	adds	r3, r7, r4
 8007e58:	185b      	adds	r3, r3, r1
 8007e5a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1418      	asrs	r0, r3, #16
 8007e60:	0025      	movs	r5, r4
 8007e62:	197b      	adds	r3, r7, r5
 8007e64:	22c4      	movs	r2, #196	; 0xc4
 8007e66:	5a9b      	ldrh	r3, [r3, r2]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	b294      	uxth	r4, r2
 8007e6c:	197a      	adds	r2, r7, r5
 8007e6e:	21c4      	movs	r1, #196	; 0xc4
 8007e70:	5254      	strh	r4, [r2, r1]
 8007e72:	0019      	movs	r1, r3
 8007e74:	b2c2      	uxtb	r2, r0
 8007e76:	002c      	movs	r4, r5
 8007e78:	193b      	adds	r3, r7, r4
 8007e7a:	185b      	adds	r3, r3, r1
 8007e7c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	1618      	asrs	r0, r3, #24
 8007e82:	0025      	movs	r5, r4
 8007e84:	197b      	adds	r3, r7, r5
 8007e86:	22c4      	movs	r2, #196	; 0xc4
 8007e88:	5a9b      	ldrh	r3, [r3, r2]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	b294      	uxth	r4, r2
 8007e8e:	197a      	adds	r2, r7, r5
 8007e90:	21c4      	movs	r1, #196	; 0xc4
 8007e92:	5254      	strh	r4, [r2, r1]
 8007e94:	0019      	movs	r1, r3
 8007e96:	b2c2      	uxtb	r2, r0
 8007e98:	002c      	movs	r4, r5
 8007e9a:	193b      	adds	r3, r7, r4
 8007e9c:	185b      	adds	r3, r3, r1
 8007e9e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007ea0:	193b      	adds	r3, r7, r4
 8007ea2:	22c4      	movs	r2, #196	; 0xc4
 8007ea4:	5a9b      	ldrh	r3, [r3, r2]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	b290      	uxth	r0, r2
 8007eaa:	193a      	adds	r2, r7, r4
 8007eac:	21c4      	movs	r1, #196	; 0xc4
 8007eae:	5250      	strh	r0, [r2, r1]
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	193b      	adds	r3, r7, r4
 8007eb8:	185b      	adds	r3, r3, r1
 8007eba:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	1218      	asrs	r0, r3, #8
 8007ec0:	0025      	movs	r5, r4
 8007ec2:	197b      	adds	r3, r7, r5
 8007ec4:	22c4      	movs	r2, #196	; 0xc4
 8007ec6:	5a9b      	ldrh	r3, [r3, r2]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	b294      	uxth	r4, r2
 8007ecc:	197a      	adds	r2, r7, r5
 8007ece:	21c4      	movs	r1, #196	; 0xc4
 8007ed0:	5254      	strh	r4, [r2, r1]
 8007ed2:	0019      	movs	r1, r3
 8007ed4:	b2c2      	uxtb	r2, r0
 8007ed6:	002c      	movs	r4, r5
 8007ed8:	193b      	adds	r3, r7, r4
 8007eda:	185b      	adds	r3, r3, r1
 8007edc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	1418      	asrs	r0, r3, #16
 8007ee2:	0025      	movs	r5, r4
 8007ee4:	197b      	adds	r3, r7, r5
 8007ee6:	22c4      	movs	r2, #196	; 0xc4
 8007ee8:	5a9b      	ldrh	r3, [r3, r2]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	b294      	uxth	r4, r2
 8007eee:	197a      	adds	r2, r7, r5
 8007ef0:	21c4      	movs	r1, #196	; 0xc4
 8007ef2:	5254      	strh	r4, [r2, r1]
 8007ef4:	0019      	movs	r1, r3
 8007ef6:	b2c2      	uxtb	r2, r0
 8007ef8:	002c      	movs	r4, r5
 8007efa:	193b      	adds	r3, r7, r4
 8007efc:	185b      	adds	r3, r3, r1
 8007efe:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	1618      	asrs	r0, r3, #24
 8007f04:	0025      	movs	r5, r4
 8007f06:	197b      	adds	r3, r7, r5
 8007f08:	22c4      	movs	r2, #196	; 0xc4
 8007f0a:	5a9b      	ldrh	r3, [r3, r2]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	b294      	uxth	r4, r2
 8007f10:	197a      	adds	r2, r7, r5
 8007f12:	21c4      	movs	r1, #196	; 0xc4
 8007f14:	5254      	strh	r4, [r2, r1]
 8007f16:	0019      	movs	r1, r3
 8007f18:	b2c2      	uxtb	r2, r0
 8007f1a:	0028      	movs	r0, r5
 8007f1c:	183b      	adds	r3, r7, r0
 8007f1e:	185b      	adds	r3, r3, r1
 8007f20:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f22:	2308      	movs	r3, #8
 8007f24:	18fa      	adds	r2, r7, r3
 8007f26:	183b      	adds	r3, r7, r0
 8007f28:	0011      	movs	r1, r2
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 ff10 	bl	8008d50 <astronode_transport_send_receive>
 8007f30:	0003      	movs	r3, r0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d10e      	bne.n	8007f54 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <astronode_send_geo_wr+0x174>)
 8007f38:	199b      	adds	r3, r3, r6
 8007f3a:	19db      	adds	r3, r3, r7
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2bb5      	cmp	r3, #181	; 0xb5
 8007f40:	d104      	bne.n	8007f4c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <astronode_send_geo_wr+0x178>)
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7fb f903 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007f4a:	e003      	b.n	8007f54 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <astronode_send_geo_wr+0x17c>)
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7fb f8fe 	bl	8003150 <send_debug_logs>
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b067      	add	sp, #412	; 0x19c
 8007f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f5c:	fffffe70 	.word	0xfffffe70
 8007f60:	08012c40 	.word	0x08012c40
 8007f64:	08012c6c 	.word	0x08012c6c

08007f68 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8007f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f6a:	b0fb      	sub	sp, #492	; 0x1ec
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6039      	str	r1, [r7, #0]
 8007f70:	0011      	movs	r1, r2
 8007f72:	4b4a      	ldr	r3, [pc, #296]	; (800809c <astronode_send_pld_er+0x134>)
 8007f74:	26f4      	movs	r6, #244	; 0xf4
 8007f76:	0076      	lsls	r6, r6, #1
 8007f78:	199b      	adds	r3, r3, r6
 8007f7a:	19db      	adds	r3, r3, r7
 8007f7c:	1c02      	adds	r2, r0, #0
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	4b47      	ldr	r3, [pc, #284]	; (80080a0 <astronode_send_pld_er+0x138>)
 8007f82:	199b      	adds	r3, r3, r6
 8007f84:	19db      	adds	r3, r3, r7
 8007f86:	1c0a      	adds	r2, r1, #0
 8007f88:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007f8a:	2490      	movs	r4, #144	; 0x90
 8007f8c:	0064      	lsls	r4, r4, #1
 8007f8e:	193b      	adds	r3, r7, r4
 8007f90:	0018      	movs	r0, r3
 8007f92:	23c6      	movs	r3, #198	; 0xc6
 8007f94:	001a      	movs	r2, r3
 8007f96:	2100      	movs	r1, #0
 8007f98:	f003 fca8 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8007f9c:	4b41      	ldr	r3, [pc, #260]	; (80080a4 <astronode_send_pld_er+0x13c>)
 8007f9e:	199b      	adds	r3, r3, r6
 8007fa0:	19db      	adds	r3, r3, r7
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	23c6      	movs	r3, #198	; 0xc6
 8007fa6:	001a      	movs	r2, r3
 8007fa8:	2100      	movs	r1, #0
 8007faa:	f003 fc9f 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007fae:	193b      	adds	r3, r7, r4
 8007fb0:	2225      	movs	r2, #37	; 0x25
 8007fb2:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8007fb4:	193b      	adds	r3, r7, r4
 8007fb6:	22c4      	movs	r2, #196	; 0xc4
 8007fb8:	5a9b      	ldrh	r3, [r3, r2]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	b290      	uxth	r0, r2
 8007fbe:	193a      	adds	r2, r7, r4
 8007fc0:	21c4      	movs	r1, #196	; 0xc4
 8007fc2:	5250      	strh	r0, [r2, r1]
 8007fc4:	0019      	movs	r1, r3
 8007fc6:	4b35      	ldr	r3, [pc, #212]	; (800809c <astronode_send_pld_er+0x134>)
 8007fc8:	199b      	adds	r3, r3, r6
 8007fca:	19db      	adds	r3, r3, r7
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	193b      	adds	r3, r7, r4
 8007fd2:	185b      	adds	r3, r3, r1
 8007fd4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8007fd6:	4b31      	ldr	r3, [pc, #196]	; (800809c <astronode_send_pld_er+0x134>)
 8007fd8:	199b      	adds	r3, r3, r6
 8007fda:	19db      	adds	r3, r3, r7
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b298      	uxth	r0, r3
 8007fe2:	0025      	movs	r5, r4
 8007fe4:	197b      	adds	r3, r7, r5
 8007fe6:	22c4      	movs	r2, #196	; 0xc4
 8007fe8:	5a9b      	ldrh	r3, [r3, r2]
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	b294      	uxth	r4, r2
 8007fee:	197a      	adds	r2, r7, r5
 8007ff0:	21c4      	movs	r1, #196	; 0xc4
 8007ff2:	5254      	strh	r4, [r2, r1]
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	b2c2      	uxtb	r2, r0
 8007ff8:	002c      	movs	r4, r5
 8007ffa:	193b      	adds	r3, r7, r4
 8007ffc:	185b      	adds	r3, r3, r1
 8007ffe:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008000:	193b      	adds	r3, r7, r4
 8008002:	22c4      	movs	r2, #196	; 0xc4
 8008004:	5a9b      	ldrh	r3, [r3, r2]
 8008006:	001a      	movs	r2, r3
 8008008:	193b      	adds	r3, r7, r4
 800800a:	189b      	adds	r3, r3, r2
 800800c:	1c58      	adds	r0, r3, #1
 800800e:	4b24      	ldr	r3, [pc, #144]	; (80080a0 <astronode_send_pld_er+0x138>)
 8008010:	199b      	adds	r3, r3, r6
 8008012:	19db      	adds	r3, r3, r7
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	0019      	movs	r1, r3
 800801a:	f003 fd4c 	bl	800bab6 <memcpy>
    request.payload_len = 2 + payload_length;
 800801e:	4b20      	ldr	r3, [pc, #128]	; (80080a0 <astronode_send_pld_er+0x138>)
 8008020:	199b      	adds	r3, r3, r6
 8008022:	19db      	adds	r3, r3, r7
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	3302      	adds	r3, #2
 8008028:	b299      	uxth	r1, r3
 800802a:	193b      	adds	r3, r7, r4
 800802c:	22c4      	movs	r2, #196	; 0xc4
 800802e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008030:	2358      	movs	r3, #88	; 0x58
 8008032:	18fa      	adds	r2, r7, r3
 8008034:	193b      	adds	r3, r7, r4
 8008036:	0011      	movs	r1, r2
 8008038:	0018      	movs	r0, r3
 800803a:	f000 fe89 	bl	8008d50 <astronode_transport_send_receive>
 800803e:	0003      	movs	r3, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	d125      	bne.n	8008090 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008044:	4b17      	ldr	r3, [pc, #92]	; (80080a4 <astronode_send_pld_er+0x13c>)
 8008046:	199b      	adds	r3, r3, r6
 8008048:	19db      	adds	r3, r3, r7
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2ba5      	cmp	r3, #165	; 0xa5
 800804e:	d10f      	bne.n	8008070 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008050:	4b12      	ldr	r3, [pc, #72]	; (800809c <astronode_send_pld_er+0x134>)
 8008052:	199b      	adds	r3, r3, r6
 8008054:	19db      	adds	r3, r3, r7
 8008056:	881a      	ldrh	r2, [r3, #0]
 8008058:	4913      	ldr	r1, [pc, #76]	; (80080a8 <astronode_send_pld_er+0x140>)
 800805a:	2408      	movs	r4, #8
 800805c:	193b      	adds	r3, r7, r4
 800805e:	0018      	movs	r0, r3
 8008060:	f003 fbae 	bl	800b7c0 <sprintf>
            send_debug_logs ( s ) ;
 8008064:	193b      	adds	r3, r7, r4
 8008066:	0018      	movs	r0, r3
 8008068:	f7fb f872 	bl	8003150 <send_debug_logs>
            return true ;
 800806c:	2301      	movs	r3, #1
 800806e:	e010      	b.n	8008092 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008070:	4b0a      	ldr	r3, [pc, #40]	; (800809c <astronode_send_pld_er+0x134>)
 8008072:	22f4      	movs	r2, #244	; 0xf4
 8008074:	0052      	lsls	r2, r2, #1
 8008076:	189b      	adds	r3, r3, r2
 8008078:	19db      	adds	r3, r3, r7
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	490b      	ldr	r1, [pc, #44]	; (80080ac <astronode_send_pld_er+0x144>)
 800807e:	2408      	movs	r4, #8
 8008080:	193b      	adds	r3, r7, r4
 8008082:	0018      	movs	r0, r3
 8008084:	f003 fb9c 	bl	800b7c0 <sprintf>
            send_debug_logs ( s ) ;
 8008088:	193b      	adds	r3, r7, r4
 800808a:	0018      	movs	r0, r3
 800808c:	f7fb f860 	bl	8003150 <send_debug_logs>
        }
    }
    return false ;
 8008090:	2300      	movs	r3, #0
}
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b07b      	add	sp, #492	; 0x1ec
 8008098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	fffffe1e 	.word	0xfffffe1e
 80080a0:	fffffe1c 	.word	0xfffffe1c
 80080a4:	fffffe70 	.word	0xfffffe70
 80080a8:	08012ce4 	.word	0x08012ce4
 80080ac:	08012d10 	.word	0x08012d10

080080b0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b0e4      	sub	sp, #400	; 0x190
 80080b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80080b6:	24c8      	movs	r4, #200	; 0xc8
 80080b8:	193b      	adds	r3, r7, r4
 80080ba:	0018      	movs	r0, r3
 80080bc:	23c6      	movs	r3, #198	; 0xc6
 80080be:	001a      	movs	r2, r3
 80080c0:	2100      	movs	r1, #0
 80080c2:	f003 fc13 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <astronode_send_pld_fr+0x6c>)
 80080c8:	25c8      	movs	r5, #200	; 0xc8
 80080ca:	006d      	lsls	r5, r5, #1
 80080cc:	195b      	adds	r3, r3, r5
 80080ce:	19db      	adds	r3, r3, r7
 80080d0:	0018      	movs	r0, r3
 80080d2:	23c6      	movs	r3, #198	; 0xc6
 80080d4:	001a      	movs	r2, r3
 80080d6:	2100      	movs	r1, #0
 80080d8:	f003 fc08 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80080dc:	193b      	adds	r3, r7, r4
 80080de:	2227      	movs	r2, #39	; 0x27
 80080e0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080e2:	003a      	movs	r2, r7
 80080e4:	193b      	adds	r3, r7, r4
 80080e6:	0011      	movs	r1, r2
 80080e8:	0018      	movs	r0, r3
 80080ea:	f000 fe31 	bl	8008d50 <astronode_transport_send_receive>
 80080ee:	0003      	movs	r3, r0
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d10e      	bne.n	8008112 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <astronode_send_pld_fr+0x6c>)
 80080f6:	195b      	adds	r3, r3, r5
 80080f8:	19db      	adds	r3, r3, r7
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2ba7      	cmp	r3, #167	; 0xa7
 80080fe:	d104      	bne.n	800810a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <astronode_send_pld_fr+0x70>)
 8008102:	0018      	movs	r0, r3
 8008104:	f7fb f824 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008108:	e003      	b.n	8008112 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <astronode_send_pld_fr+0x74>)
 800810c:	0018      	movs	r0, r3
 800810e:	f7fb f81f 	bl	8003150 <send_debug_logs>
}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	46bd      	mov	sp, r7
 8008116:	b064      	add	sp, #400	; 0x190
 8008118:	bdb0      	pop	{r4, r5, r7, pc}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	fffffe70 	.word	0xfffffe70
 8008120:	08012d40 	.word	0x08012d40
 8008124:	08012d78 	.word	0x08012d78

08008128 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b0e4      	sub	sp, #400	; 0x190
 800812c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800812e:	24c8      	movs	r4, #200	; 0xc8
 8008130:	193b      	adds	r3, r7, r4
 8008132:	0018      	movs	r0, r3
 8008134:	23c6      	movs	r3, #198	; 0xc6
 8008136:	001a      	movs	r2, r3
 8008138:	2100      	movs	r1, #0
 800813a:	f003 fbd7 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 800813e:	4b16      	ldr	r3, [pc, #88]	; (8008198 <astronode_send_res_cr+0x70>)
 8008140:	25c8      	movs	r5, #200	; 0xc8
 8008142:	006d      	lsls	r5, r5, #1
 8008144:	195b      	adds	r3, r3, r5
 8008146:	19db      	adds	r3, r3, r7
 8008148:	0018      	movs	r0, r3
 800814a:	23c6      	movs	r3, #198	; 0xc6
 800814c:	001a      	movs	r2, r3
 800814e:	2100      	movs	r1, #0
 8008150:	f003 fbcc 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008154:	193b      	adds	r3, r7, r4
 8008156:	2255      	movs	r2, #85	; 0x55
 8008158:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800815a:	003a      	movs	r2, r7
 800815c:	193b      	adds	r3, r7, r4
 800815e:	0011      	movs	r1, r2
 8008160:	0018      	movs	r0, r3
 8008162:	f000 fdf5 	bl	8008d50 <astronode_transport_send_receive>
 8008166:	0003      	movs	r3, r0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d111      	bne.n	8008190 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <astronode_send_res_cr+0x70>)
 800816e:	195b      	adds	r3, r3, r5
 8008170:	19db      	adds	r3, r3, r7
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2bd5      	cmp	r3, #213	; 0xd5
 8008176:	d107      	bne.n	8008188 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008178:	4b08      	ldr	r3, [pc, #32]	; (800819c <astronode_send_res_cr+0x74>)
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800817e:	4b08      	ldr	r3, [pc, #32]	; (80081a0 <astronode_send_res_cr+0x78>)
 8008180:	0018      	movs	r0, r3
 8008182:	f7fa ffe5 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008186:	e003      	b.n	8008190 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <astronode_send_res_cr+0x7c>)
 800818a:	0018      	movs	r0, r3
 800818c:	f7fa ffe0 	bl	8003150 <send_debug_logs>
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b064      	add	sp, #400	; 0x190
 8008196:	bdb0      	pop	{r4, r5, r7, pc}
 8008198:	fffffe70 	.word	0xfffffe70
 800819c:	20000bf5 	.word	0x20000bf5
 80081a0:	08012db4 	.word	0x08012db4
 80081a4:	08012de8 	.word	0x08012de8

080081a8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80081a8:	b5b0      	push	{r4, r5, r7, lr}
 80081aa:	b0fa      	sub	sp, #488	; 0x1e8
 80081ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80081ae:	258e      	movs	r5, #142	; 0x8e
 80081b0:	006d      	lsls	r5, r5, #1
 80081b2:	197b      	adds	r3, r7, r5
 80081b4:	0018      	movs	r0, r3
 80081b6:	23c6      	movs	r3, #198	; 0xc6
 80081b8:	001a      	movs	r2, r3
 80081ba:	2100      	movs	r1, #0
 80081bc:	f003 fb96 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0} ;
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 80081c2:	24f4      	movs	r4, #244	; 0xf4
 80081c4:	0064      	lsls	r4, r4, #1
 80081c6:	191b      	adds	r3, r3, r4
 80081c8:	19db      	adds	r3, r3, r7
 80081ca:	0018      	movs	r0, r3
 80081cc:	23c6      	movs	r3, #198	; 0xc6
 80081ce:	001a      	movs	r2, r3
 80081d0:	2100      	movs	r1, #0
 80081d2:	f003 fb8b 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80081d6:	197b      	adds	r3, r7, r5
 80081d8:	2217      	movs	r2, #23
 80081da:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80081dc:	2354      	movs	r3, #84	; 0x54
 80081de:	18fa      	adds	r2, r7, r3
 80081e0:	197b      	adds	r3, r7, r5
 80081e2:	0011      	movs	r1, r2
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 fdb3 	bl	8008d50 <astronode_transport_send_receive>
 80081ea:	0003      	movs	r3, r0
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d133      	bne.n	8008258 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 80081f2:	0021      	movs	r1, r4
 80081f4:	185b      	adds	r3, r3, r1
 80081f6:	19db      	adds	r3, r3, r7
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b97      	cmp	r3, #151	; 0x97
 80081fc:	d128      	bne.n	8008250 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 8008200:	185b      	adds	r3, r3, r1
 8008202:	19db      	adds	r3, r3, r7
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 800820a:	185b      	adds	r3, r3, r1
 800820c:	19db      	adds	r3, r3, r7
 800820e:	789b      	ldrb	r3, [r3, #2]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008214:	4b13      	ldr	r3, [pc, #76]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 8008216:	185b      	adds	r3, r3, r1
 8008218:	19db      	adds	r3, r3, r7
 800821a:	78db      	ldrb	r3, [r3, #3]
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008220:	4b10      	ldr	r3, [pc, #64]	; (8008264 <astronode_send_rtc_rr+0xbc>)
 8008222:	185b      	adds	r3, r3, r1
 8008224:	19db      	adds	r3, r3, r7
 8008226:	791b      	ldrb	r3, [r3, #4]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800822c:	24f2      	movs	r4, #242	; 0xf2
 800822e:	0064      	lsls	r4, r4, #1
 8008230:	193a      	adds	r2, r7, r4
 8008232:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008234:	193b      	adds	r3, r7, r4
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	490b      	ldr	r1, [pc, #44]	; (8008268 <astronode_send_rtc_rr+0xc0>)
 800823a:	1d3b      	adds	r3, r7, #4
 800823c:	0018      	movs	r0, r3
 800823e:	f003 fabf 	bl	800b7c0 <sprintf>
            send_debug_logs ( str ) ;
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	0018      	movs	r0, r3
 8008246:	f7fa ff83 	bl	8003150 <send_debug_logs>
            return rtc_time ;
 800824a:	193b      	adds	r3, r7, r4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	e004      	b.n	800825a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <astronode_send_rtc_rr+0xc4>)
 8008252:	0018      	movs	r0, r3
 8008254:	f7fa ff7c 	bl	8003150 <send_debug_logs>
        }
    }
    return 0 ;
 8008258:	2300      	movs	r3, #0
}
 800825a:	0018      	movs	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	b07a      	add	sp, #488	; 0x1e8
 8008260:	bdb0      	pop	{r4, r5, r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	fffffe6c 	.word	0xfffffe6c
 8008268:	08012e14 	.word	0x08012e14
 800826c:	08012e54 	.word	0x08012e54

08008270 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008270:	b5b0      	push	{r4, r5, r7, lr}
 8008272:	b0f8      	sub	sp, #480	; 0x1e0
 8008274:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008276:	258c      	movs	r5, #140	; 0x8c
 8008278:	006d      	lsls	r5, r5, #1
 800827a:	197b      	adds	r3, r7, r5
 800827c:	0018      	movs	r0, r3
 800827e:	23c6      	movs	r3, #198	; 0xc6
 8008280:	001a      	movs	r2, r3
 8008282:	2100      	movs	r1, #0
 8008284:	f003 fb32 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8008288:	4b21      	ldr	r3, [pc, #132]	; (8008310 <astronode_send_sak_rr+0xa0>)
 800828a:	24f0      	movs	r4, #240	; 0xf0
 800828c:	0064      	lsls	r4, r4, #1
 800828e:	191b      	adds	r3, r3, r4
 8008290:	19db      	adds	r3, r3, r7
 8008292:	0018      	movs	r0, r3
 8008294:	23c6      	movs	r3, #198	; 0xc6
 8008296:	001a      	movs	r2, r3
 8008298:	2100      	movs	r1, #0
 800829a:	f003 fb27 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800829e:	197b      	adds	r3, r7, r5
 80082a0:	2245      	movs	r2, #69	; 0x45
 80082a2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082a4:	2350      	movs	r3, #80	; 0x50
 80082a6:	18fa      	adds	r2, r7, r3
 80082a8:	197b      	adds	r3, r7, r5
 80082aa:	0011      	movs	r1, r2
 80082ac:	0018      	movs	r0, r3
 80082ae:	f000 fd4f 	bl	8008d50 <astronode_transport_send_receive>
 80082b2:	0003      	movs	r3, r0
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d126      	bne.n	8008306 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80082b8:	4b15      	ldr	r3, [pc, #84]	; (8008310 <astronode_send_sak_rr+0xa0>)
 80082ba:	191b      	adds	r3, r3, r4
 80082bc:	19db      	adds	r3, r3, r7
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2bc5      	cmp	r3, #197	; 0xc5
 80082c2:	d11c      	bne.n	80082fe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80082c4:	4b12      	ldr	r3, [pc, #72]	; (8008310 <astronode_send_sak_rr+0xa0>)
 80082c6:	191b      	adds	r3, r3, r4
 80082c8:	19db      	adds	r3, r3, r7
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	b299      	uxth	r1, r3
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <astronode_send_sak_rr+0xa0>)
 80082d0:	191b      	adds	r3, r3, r4
 80082d2:	19db      	adds	r3, r3, r7
 80082d4:	789b      	ldrb	r3, [r3, #2]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	b29a      	uxth	r2, r3
 80082dc:	20ef      	movs	r0, #239	; 0xef
 80082de:	0040      	lsls	r0, r0, #1
 80082e0:	183b      	adds	r3, r7, r0
 80082e2:	188a      	adds	r2, r1, r2
 80082e4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80082e6:	183b      	adds	r3, r7, r0
 80082e8:	881a      	ldrh	r2, [r3, #0]
 80082ea:	490a      	ldr	r1, [pc, #40]	; (8008314 <astronode_send_sak_rr+0xa4>)
 80082ec:	003b      	movs	r3, r7
 80082ee:	0018      	movs	r0, r3
 80082f0:	f003 fa66 	bl	800b7c0 <sprintf>
            send_debug_logs(str);
 80082f4:	003b      	movs	r3, r7
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7fa ff2a 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80082fc:	e003      	b.n	8008306 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <astronode_send_sak_rr+0xa8>)
 8008300:	0018      	movs	r0, r3
 8008302:	f7fa ff25 	bl	8003150 <send_debug_logs>
}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b078      	add	sp, #480	; 0x1e0
 800830c:	bdb0      	pop	{r4, r5, r7, pc}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	fffffe70 	.word	0xfffffe70
 8008314:	08012e70 	.word	0x08012e70
 8008318:	08012e9c 	.word	0x08012e9c

0800831c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800831c:	b5b0      	push	{r4, r5, r7, lr}
 800831e:	b0e4      	sub	sp, #400	; 0x190
 8008320:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008322:	24c8      	movs	r4, #200	; 0xc8
 8008324:	193b      	adds	r3, r7, r4
 8008326:	0018      	movs	r0, r3
 8008328:	23c6      	movs	r3, #198	; 0xc6
 800832a:	001a      	movs	r2, r3
 800832c:	2100      	movs	r1, #0
 800832e:	f003 fadd 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8008332:	4b16      	ldr	r3, [pc, #88]	; (800838c <astronode_send_sak_cr+0x70>)
 8008334:	25c8      	movs	r5, #200	; 0xc8
 8008336:	006d      	lsls	r5, r5, #1
 8008338:	195b      	adds	r3, r3, r5
 800833a:	19db      	adds	r3, r3, r7
 800833c:	0018      	movs	r0, r3
 800833e:	23c6      	movs	r3, #198	; 0xc6
 8008340:	001a      	movs	r2, r3
 8008342:	2100      	movs	r1, #0
 8008344:	f003 fad2 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008348:	193b      	adds	r3, r7, r4
 800834a:	2246      	movs	r2, #70	; 0x46
 800834c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800834e:	003a      	movs	r2, r7
 8008350:	193b      	adds	r3, r7, r4
 8008352:	0011      	movs	r1, r2
 8008354:	0018      	movs	r0, r3
 8008356:	f000 fcfb 	bl	8008d50 <astronode_transport_send_receive>
 800835a:	0003      	movs	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d111      	bne.n	8008384 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <astronode_send_sak_cr+0x70>)
 8008362:	195b      	adds	r3, r3, r5
 8008364:	19db      	adds	r3, r3, r7
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2bc6      	cmp	r3, #198	; 0xc6
 800836a:	d107      	bne.n	800837c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800836c:	4b08      	ldr	r3, [pc, #32]	; (8008390 <astronode_send_sak_cr+0x74>)
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <astronode_send_sak_cr+0x78>)
 8008374:	0018      	movs	r0, r3
 8008376:	f7fa feeb 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800837a:	e003      	b.n	8008384 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <astronode_send_sak_cr+0x7c>)
 800837e:	0018      	movs	r0, r3
 8008380:	f7fa fee6 	bl	8003150 <send_debug_logs>
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b064      	add	sp, #400	; 0x190
 800838a:	bdb0      	pop	{r4, r5, r7, pc}
 800838c:	fffffe70 	.word	0xfffffe70
 8008390:	20000bf4 	.word	0x20000bf4
 8008394:	08012ed0 	.word	0x08012ed0
 8008398:	08012ef8 	.word	0x08012ef8

0800839c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b0ed      	sub	sp, #436	; 0x1b4
 80083a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083a2:	21c8      	movs	r1, #200	; 0xc8
 80083a4:	2318      	movs	r3, #24
 80083a6:	18cb      	adds	r3, r1, r3
 80083a8:	19db      	adds	r3, r3, r7
 80083aa:	0018      	movs	r0, r3
 80083ac:	23c6      	movs	r3, #198	; 0xc6
 80083ae:	001a      	movs	r2, r3
 80083b0:	2100      	movs	r1, #0
 80083b2:	f003 fa9b 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 80083b6:	4b4a      	ldr	r3, [pc, #296]	; (80084e0 <astronode_send_mpn_rr+0x144>)
 80083b8:	26cc      	movs	r6, #204	; 0xcc
 80083ba:	0076      	lsls	r6, r6, #1
 80083bc:	199b      	adds	r3, r3, r6
 80083be:	2218      	movs	r2, #24
 80083c0:	4694      	mov	ip, r2
 80083c2:	44bc      	add	ip, r7
 80083c4:	4463      	add	r3, ip
 80083c6:	0018      	movs	r0, r3
 80083c8:	23c6      	movs	r3, #198	; 0xc6
 80083ca:	001a      	movs	r2, r3
 80083cc:	2100      	movs	r1, #0
 80083ce:	f003 fa8d 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80083d2:	21c8      	movs	r1, #200	; 0xc8
 80083d4:	2318      	movs	r3, #24
 80083d6:	18cb      	adds	r3, r1, r3
 80083d8:	19db      	adds	r3, r3, r7
 80083da:	221b      	movs	r2, #27
 80083dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083de:	2318      	movs	r3, #24
 80083e0:	18fa      	adds	r2, r7, r3
 80083e2:	2318      	movs	r3, #24
 80083e4:	18cb      	adds	r3, r1, r3
 80083e6:	19db      	adds	r3, r3, r7
 80083e8:	0011      	movs	r1, r2
 80083ea:	0018      	movs	r0, r3
 80083ec:	f000 fcb0 	bl	8008d50 <astronode_transport_send_receive>
 80083f0:	0003      	movs	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d16f      	bne.n	80084d6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80083f6:	4b3a      	ldr	r3, [pc, #232]	; (80084e0 <astronode_send_mpn_rr+0x144>)
 80083f8:	0032      	movs	r2, r6
 80083fa:	189b      	adds	r3, r3, r2
 80083fc:	2118      	movs	r1, #24
 80083fe:	468c      	mov	ip, r1
 8008400:	44bc      	add	ip, r7
 8008402:	4463      	add	r3, ip
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b9b      	cmp	r3, #155	; 0x9b
 8008408:	d161      	bne.n	80084ce <astronode_send_mpn_rr+0x132>
        {
 800840a:	466b      	mov	r3, sp
 800840c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800840e:	4b34      	ldr	r3, [pc, #208]	; (80084e0 <astronode_send_mpn_rr+0x144>)
 8008410:	189b      	adds	r3, r3, r2
 8008412:	2218      	movs	r2, #24
 8008414:	4694      	mov	ip, r2
 8008416:	44bc      	add	ip, r7
 8008418:	4463      	add	r3, ip
 800841a:	22c4      	movs	r2, #196	; 0xc4
 800841c:	5a9b      	ldrh	r3, [r3, r2]
 800841e:	001a      	movs	r2, r3
 8008420:	3a01      	subs	r2, #1
 8008422:	21ca      	movs	r1, #202	; 0xca
 8008424:	0049      	lsls	r1, r1, #1
 8008426:	2018      	movs	r0, #24
 8008428:	1809      	adds	r1, r1, r0
 800842a:	19c9      	adds	r1, r1, r7
 800842c:	600a      	str	r2, [r1, #0]
 800842e:	001c      	movs	r4, r3
 8008430:	2200      	movs	r2, #0
 8008432:	0015      	movs	r5, r2
 8008434:	0020      	movs	r0, r4
 8008436:	0029      	movs	r1, r5
 8008438:	0004      	movs	r4, r0
 800843a:	0f62      	lsrs	r2, r4, #29
 800843c:	000c      	movs	r4, r1
 800843e:	00e4      	lsls	r4, r4, #3
 8008440:	617c      	str	r4, [r7, #20]
 8008442:	697c      	ldr	r4, [r7, #20]
 8008444:	4314      	orrs	r4, r2
 8008446:	617c      	str	r4, [r7, #20]
 8008448:	0001      	movs	r1, r0
 800844a:	00c9      	lsls	r1, r1, #3
 800844c:	6139      	str	r1, [r7, #16]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	2200      	movs	r2, #0
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	6838      	ldr	r0, [r7, #0]
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	0004      	movs	r4, r0
 800845a:	0f62      	lsrs	r2, r4, #29
 800845c:	000c      	movs	r4, r1
 800845e:	00e4      	lsls	r4, r4, #3
 8008460:	60fc      	str	r4, [r7, #12]
 8008462:	68fc      	ldr	r4, [r7, #12]
 8008464:	4314      	orrs	r4, r2
 8008466:	60fc      	str	r4, [r7, #12]
 8008468:	0001      	movs	r1, r0
 800846a:	00ca      	lsls	r2, r1, #3
 800846c:	60ba      	str	r2, [r7, #8]
 800846e:	3307      	adds	r3, #7
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	4669      	mov	r1, sp
 8008476:	1acb      	subs	r3, r1, r3
 8008478:	469d      	mov	sp, r3
 800847a:	466b      	mov	r3, sp
 800847c:	3300      	adds	r3, #0
 800847e:	24c8      	movs	r4, #200	; 0xc8
 8008480:	0064      	lsls	r4, r4, #1
 8008482:	2218      	movs	r2, #24
 8008484:	18a2      	adds	r2, r4, r2
 8008486:	19d1      	adds	r1, r2, r7
 8008488:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <astronode_send_mpn_rr+0x148>)
 800848c:	0018      	movs	r0, r3
 800848e:	f7fa fe5f 	bl	8003150 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008492:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <astronode_send_mpn_rr+0x144>)
 8008494:	22cc      	movs	r2, #204	; 0xcc
 8008496:	0052      	lsls	r2, r2, #1
 8008498:	189b      	adds	r3, r3, r2
 800849a:	2218      	movs	r2, #24
 800849c:	4694      	mov	ip, r2
 800849e:	44bc      	add	ip, r7
 80084a0:	4463      	add	r3, ip
 80084a2:	22c4      	movs	r2, #196	; 0xc4
 80084a4:	5a9b      	ldrh	r3, [r3, r2]
 80084a6:	0019      	movs	r1, r3
 80084a8:	2318      	movs	r3, #24
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	3301      	adds	r3, #1
 80084ae:	4a0e      	ldr	r2, [pc, #56]	; (80084e8 <astronode_send_mpn_rr+0x14c>)
 80084b0:	2018      	movs	r0, #24
 80084b2:	1820      	adds	r0, r4, r0
 80084b4:	19c0      	adds	r0, r0, r7
 80084b6:	6800      	ldr	r0, [r0, #0]
 80084b8:	f003 f94e 	bl	800b758 <snprintf>
            send_debug_logs(product_number);
 80084bc:	2318      	movs	r3, #24
 80084be:	18e3      	adds	r3, r4, r3
 80084c0:	19db      	adds	r3, r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fa fe43 	bl	8003150 <send_debug_logs>
 80084ca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80084cc:	e003      	b.n	80084d6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80084ce:	4b07      	ldr	r3, [pc, #28]	; (80084ec <astronode_send_mpn_rr+0x150>)
 80084d0:	0018      	movs	r0, r3
 80084d2:	f7fa fe3d 	bl	8003150 <send_debug_logs>
}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	46bd      	mov	sp, r7
 80084da:	b06d      	add	sp, #436	; 0x1b4
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084de:	46c0      	nop			; (mov r8, r8)
 80084e0:	fffffe68 	.word	0xfffffe68
 80084e4:	08012fc0 	.word	0x08012fc0
 80084e8:	08012af8 	.word	0x08012af8
 80084ec:	08012b34 	.word	0x08012b34

080084f0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b0e4      	sub	sp, #400	; 0x190
 80084f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084f6:	24c8      	movs	r4, #200	; 0xc8
 80084f8:	193b      	adds	r3, r7, r4
 80084fa:	0018      	movs	r0, r3
 80084fc:	23c6      	movs	r3, #198	; 0xc6
 80084fe:	001a      	movs	r2, r3
 8008500:	2100      	movs	r1, #0
 8008502:	f003 f9f3 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 8008506:	4b16      	ldr	r3, [pc, #88]	; (8008560 <astronode_send_cmd_cr+0x70>)
 8008508:	25c8      	movs	r5, #200	; 0xc8
 800850a:	006d      	lsls	r5, r5, #1
 800850c:	195b      	adds	r3, r3, r5
 800850e:	19db      	adds	r3, r3, r7
 8008510:	0018      	movs	r0, r3
 8008512:	23c6      	movs	r3, #198	; 0xc6
 8008514:	001a      	movs	r2, r3
 8008516:	2100      	movs	r1, #0
 8008518:	f003 f9e8 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800851c:	193b      	adds	r3, r7, r4
 800851e:	2248      	movs	r2, #72	; 0x48
 8008520:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008522:	003a      	movs	r2, r7
 8008524:	193b      	adds	r3, r7, r4
 8008526:	0011      	movs	r1, r2
 8008528:	0018      	movs	r0, r3
 800852a:	f000 fc11 	bl	8008d50 <astronode_transport_send_receive>
 800852e:	0003      	movs	r3, r0
 8008530:	2b01      	cmp	r3, #1
 8008532:	d111      	bne.n	8008558 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <astronode_send_cmd_cr+0x70>)
 8008536:	195b      	adds	r3, r3, r5
 8008538:	19db      	adds	r3, r3, r7
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2bc8      	cmp	r3, #200	; 0xc8
 800853e:	d107      	bne.n	8008550 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008540:	4b08      	ldr	r3, [pc, #32]	; (8008564 <astronode_send_cmd_cr+0x74>)
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <astronode_send_cmd_cr+0x78>)
 8008548:	0018      	movs	r0, r3
 800854a:	f7fa fe01 	bl	8003150 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800854e:	e003      	b.n	8008558 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <astronode_send_cmd_cr+0x7c>)
 8008552:	0018      	movs	r0, r3
 8008554:	f7fa fdfc 	bl	8003150 <send_debug_logs>
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b064      	add	sp, #400	; 0x190
 800855e:	bdb0      	pop	{r4, r5, r7, pc}
 8008560:	fffffe70 	.word	0xfffffe70
 8008564:	20000bf6 	.word	0x20000bf6
 8008568:	08013410 	.word	0x08013410
 800856c:	08013434 	.word	0x08013434

08008570 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008572:	4cac      	ldr	r4, [pc, #688]	; (8008824 <astronode_send_cmd_rr+0x2b4>)
 8008574:	44a5      	add	sp, r4
 8008576:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008578:	218c      	movs	r1, #140	; 0x8c
 800857a:	0049      	lsls	r1, r1, #1
 800857c:	2318      	movs	r3, #24
 800857e:	18cb      	adds	r3, r1, r3
 8008580:	19db      	adds	r3, r3, r7
 8008582:	0018      	movs	r0, r3
 8008584:	23c6      	movs	r3, #198	; 0xc6
 8008586:	001a      	movs	r2, r3
 8008588:	2100      	movs	r1, #0
 800858a:	f003 f9af 	bl	800b8ec <memset>
    astronode_app_msg_t answer = {0};
 800858e:	4ba6      	ldr	r3, [pc, #664]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 8008590:	26f8      	movs	r6, #248	; 0xf8
 8008592:	0076      	lsls	r6, r6, #1
 8008594:	199b      	adds	r3, r3, r6
 8008596:	2218      	movs	r2, #24
 8008598:	4694      	mov	ip, r2
 800859a:	44bc      	add	ip, r7
 800859c:	4463      	add	r3, ip
 800859e:	0018      	movs	r0, r3
 80085a0:	23c6      	movs	r3, #198	; 0xc6
 80085a2:	001a      	movs	r2, r3
 80085a4:	2100      	movs	r1, #0
 80085a6:	f003 f9a1 	bl	800b8ec <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80085aa:	218c      	movs	r1, #140	; 0x8c
 80085ac:	0049      	lsls	r1, r1, #1
 80085ae:	2318      	movs	r3, #24
 80085b0:	18cb      	adds	r3, r1, r3
 80085b2:	19db      	adds	r3, r3, r7
 80085b4:	2247      	movs	r2, #71	; 0x47
 80085b6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085b8:	2350      	movs	r3, #80	; 0x50
 80085ba:	2218      	movs	r2, #24
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	19da      	adds	r2, r3, r7
 80085c0:	2318      	movs	r3, #24
 80085c2:	18cb      	adds	r3, r1, r3
 80085c4:	19db      	adds	r3, r3, r7
 80085c6:	0011      	movs	r1, r2
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fbc1 	bl	8008d50 <astronode_transport_send_receive>
 80085ce:	0003      	movs	r3, r0
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d000      	beq.n	80085d6 <astronode_send_cmd_rr+0x66>
 80085d4:	e121      	b.n	800881a <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80085d6:	4b94      	ldr	r3, [pc, #592]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 80085d8:	199b      	adds	r3, r3, r6
 80085da:	2218      	movs	r2, #24
 80085dc:	4694      	mov	ip, r2
 80085de:	44bc      	add	ip, r7
 80085e0:	4463      	add	r3, ip
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2bc7      	cmp	r3, #199	; 0xc7
 80085e6:	d000      	beq.n	80085ea <astronode_send_cmd_rr+0x7a>
 80085e8:	e113      	b.n	8008812 <astronode_send_cmd_rr+0x2a2>
        {
 80085ea:	466b      	mov	r3, sp
 80085ec:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80085ee:	4b8f      	ldr	r3, [pc, #572]	; (800882c <astronode_send_cmd_rr+0x2bc>)
 80085f0:	0018      	movs	r0, r3
 80085f2:	f7fa fdad 	bl	8003150 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 80085f6:	4b8c      	ldr	r3, [pc, #560]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 80085f8:	21f8      	movs	r1, #248	; 0xf8
 80085fa:	0049      	lsls	r1, r1, #1
 80085fc:	185b      	adds	r3, r3, r1
 80085fe:	2218      	movs	r2, #24
 8008600:	4694      	mov	ip, r2
 8008602:	44bc      	add	ip, r7
 8008604:	4463      	add	r3, ip
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 800860a:	4b87      	ldr	r3, [pc, #540]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 800860c:	185b      	adds	r3, r3, r1
 800860e:	2018      	movs	r0, #24
 8008610:	4684      	mov	ip, r0
 8008612:	44bc      	add	ip, r7
 8008614:	4463      	add	r3, ip
 8008616:	789b      	ldrb	r3, [r3, #2]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 800861c:	4b82      	ldr	r3, [pc, #520]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 800861e:	185b      	adds	r3, r3, r1
 8008620:	2018      	movs	r0, #24
 8008622:	4684      	mov	ip, r0
 8008624:	44bc      	add	ip, r7
 8008626:	4463      	add	r3, ip
 8008628:	78db      	ldrb	r3, [r3, #3]
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800862e:	4b7e      	ldr	r3, [pc, #504]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 8008630:	185b      	adds	r3, r3, r1
 8008632:	2118      	movs	r1, #24
 8008634:	468c      	mov	ip, r1
 8008636:	44bc      	add	ip, r7
 8008638:	4463      	add	r3, ip
 800863a:	791b      	ldrb	r3, [r3, #4]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008640:	22f4      	movs	r2, #244	; 0xf4
 8008642:	0052      	lsls	r2, r2, #1
 8008644:	2118      	movs	r1, #24
 8008646:	1851      	adds	r1, r2, r1
 8008648:	19c8      	adds	r0, r1, r7
 800864a:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 800864c:	2318      	movs	r3, #24
 800864e:	18d3      	adds	r3, r2, r3
 8008650:	19db      	adds	r3, r3, r7
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	4976      	ldr	r1, [pc, #472]	; (8008830 <astronode_send_cmd_rr+0x2c0>)
 8008656:	2318      	movs	r3, #24
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	0018      	movs	r0, r3
 800865c:	f003 f8b0 	bl	800b7c0 <sprintf>
            send_debug_logs(str);
 8008660:	2318      	movs	r3, #24
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	0018      	movs	r0, r3
 8008666:	f7fa fd73 	bl	8003150 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 800866a:	4b6f      	ldr	r3, [pc, #444]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 800866c:	21f8      	movs	r1, #248	; 0xf8
 800866e:	0049      	lsls	r1, r1, #1
 8008670:	185b      	adds	r3, r3, r1
 8008672:	2218      	movs	r2, #24
 8008674:	4694      	mov	ip, r2
 8008676:	44bc      	add	ip, r7
 8008678:	4463      	add	r3, ip
 800867a:	22c4      	movs	r2, #196	; 0xc4
 800867c:	5a9b      	ldrh	r3, [r3, r2]
 800867e:	2b2c      	cmp	r3, #44	; 0x2c
 8008680:	d00e      	beq.n	80086a0 <astronode_send_cmd_rr+0x130>
 8008682:	4b69      	ldr	r3, [pc, #420]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 8008684:	185b      	adds	r3, r3, r1
 8008686:	2218      	movs	r2, #24
 8008688:	4694      	mov	ip, r2
 800868a:	44bc      	add	ip, r7
 800868c:	4463      	add	r3, ip
 800868e:	22c4      	movs	r2, #196	; 0xc4
 8008690:	5a9b      	ldrh	r3, [r3, r2]
 8008692:	2b0c      	cmp	r3, #12
 8008694:	d004      	beq.n	80086a0 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008696:	4b67      	ldr	r3, [pc, #412]	; (8008834 <astronode_send_cmd_rr+0x2c4>)
 8008698:	0018      	movs	r0, r3
 800869a:	f7fa fd59 	bl	8003150 <send_debug_logs>
                return;
 800869e:	e0b6      	b.n	800880e <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 80086a0:	4b61      	ldr	r3, [pc, #388]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 80086a2:	22f8      	movs	r2, #248	; 0xf8
 80086a4:	0052      	lsls	r2, r2, #1
 80086a6:	189b      	adds	r3, r3, r2
 80086a8:	2218      	movs	r2, #24
 80086aa:	4694      	mov	ip, r2
 80086ac:	44bc      	add	ip, r7
 80086ae:	4463      	add	r3, ip
 80086b0:	22c4      	movs	r2, #196	; 0xc4
 80086b2:	5a9b      	ldrh	r3, [r3, r2]
 80086b4:	001a      	movs	r2, r3
 80086b6:	3a01      	subs	r2, #1
 80086b8:	21f2      	movs	r1, #242	; 0xf2
 80086ba:	0049      	lsls	r1, r1, #1
 80086bc:	2018      	movs	r0, #24
 80086be:	1809      	adds	r1, r1, r0
 80086c0:	19c9      	adds	r1, r1, r7
 80086c2:	600a      	str	r2, [r1, #0]
 80086c4:	001c      	movs	r4, r3
 80086c6:	2200      	movs	r2, #0
 80086c8:	0015      	movs	r5, r2
 80086ca:	0020      	movs	r0, r4
 80086cc:	0029      	movs	r1, r5
 80086ce:	0004      	movs	r4, r0
 80086d0:	0f62      	lsrs	r2, r4, #29
 80086d2:	000c      	movs	r4, r1
 80086d4:	00e4      	lsls	r4, r4, #3
 80086d6:	617c      	str	r4, [r7, #20]
 80086d8:	697c      	ldr	r4, [r7, #20]
 80086da:	4314      	orrs	r4, r2
 80086dc:	617c      	str	r4, [r7, #20]
 80086de:	0001      	movs	r1, r0
 80086e0:	00c9      	lsls	r1, r1, #3
 80086e2:	6139      	str	r1, [r7, #16]
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	607a      	str	r2, [r7, #4]
 80086ea:	6838      	ldr	r0, [r7, #0]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	0004      	movs	r4, r0
 80086f0:	0f62      	lsrs	r2, r4, #29
 80086f2:	000c      	movs	r4, r1
 80086f4:	00e4      	lsls	r4, r4, #3
 80086f6:	60fc      	str	r4, [r7, #12]
 80086f8:	68fc      	ldr	r4, [r7, #12]
 80086fa:	4314      	orrs	r4, r2
 80086fc:	60fc      	str	r4, [r7, #12]
 80086fe:	0001      	movs	r1, r0
 8008700:	00ca      	lsls	r2, r1, #3
 8008702:	60ba      	str	r2, [r7, #8]
 8008704:	3307      	adds	r3, #7
 8008706:	08db      	lsrs	r3, r3, #3
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4669      	mov	r1, sp
 800870c:	1acb      	subs	r3, r1, r3
 800870e:	469d      	mov	sp, r3
 8008710:	466b      	mov	r3, sp
 8008712:	3300      	adds	r3, #0
 8008714:	20f0      	movs	r0, #240	; 0xf0
 8008716:	0040      	lsls	r0, r0, #1
 8008718:	2218      	movs	r2, #24
 800871a:	1882      	adds	r2, r0, r2
 800871c:	19d1      	adds	r1, r2, r7
 800871e:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008720:	4b41      	ldr	r3, [pc, #260]	; (8008828 <astronode_send_cmd_rr+0x2b8>)
 8008722:	22f8      	movs	r2, #248	; 0xf8
 8008724:	0052      	lsls	r2, r2, #1
 8008726:	189b      	adds	r3, r3, r2
 8008728:	2218      	movs	r2, #24
 800872a:	4694      	mov	ip, r2
 800872c:	44bc      	add	ip, r7
 800872e:	4463      	add	r3, ip
 8008730:	22c4      	movs	r2, #196	; 0xc4
 8008732:	5a9b      	ldrh	r3, [r3, r2]
 8008734:	3b03      	subs	r3, #3
 8008736:	0019      	movs	r1, r3
 8008738:	2350      	movs	r3, #80	; 0x50
 800873a:	2218      	movs	r2, #24
 800873c:	189b      	adds	r3, r3, r2
 800873e:	19db      	adds	r3, r3, r7
 8008740:	3305      	adds	r3, #5
 8008742:	4a3d      	ldr	r2, [pc, #244]	; (8008838 <astronode_send_cmd_rr+0x2c8>)
 8008744:	2418      	movs	r4, #24
 8008746:	1900      	adds	r0, r0, r4
 8008748:	19c0      	adds	r0, r0, r7
 800874a:	6800      	ldr	r0, [r0, #0]
 800874c:	f003 f804 	bl	800b758 <snprintf>
 8008750:	0002      	movs	r2, r0
 8008752:	23ef      	movs	r3, #239	; 0xef
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	2118      	movs	r1, #24
 8008758:	185b      	adds	r3, r3, r1
 800875a:	19db      	adds	r3, r3, r7
 800875c:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 800875e:	23f0      	movs	r3, #240	; 0xf0
 8008760:	33ff      	adds	r3, #255	; 0xff
 8008762:	2218      	movs	r2, #24
 8008764:	189b      	adds	r3, r3, r2
 8008766:	19db      	adds	r3, r3, r7
 8008768:	2200      	movs	r2, #0
 800876a:	701a      	strb	r2, [r3, #0]
 800876c:	e024      	b.n	80087b8 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 800876e:	23f0      	movs	r3, #240	; 0xf0
 8008770:	33ff      	adds	r3, #255	; 0xff
 8008772:	2218      	movs	r2, #24
 8008774:	189b      	adds	r3, r3, r2
 8008776:	19db      	adds	r3, r3, r7
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	22f0      	movs	r2, #240	; 0xf0
 800877c:	0052      	lsls	r2, r2, #1
 800877e:	2118      	movs	r1, #24
 8008780:	1852      	adds	r2, r2, r1
 8008782:	19d2      	adds	r2, r2, r7
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	5cd3      	ldrb	r3, [r2, r3]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	4b2c      	ldr	r3, [pc, #176]	; (800883c <astronode_send_cmd_rr+0x2cc>)
 800878c:	18d3      	adds	r3, r2, r3
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	001a      	movs	r2, r3
 8008792:	2397      	movs	r3, #151	; 0x97
 8008794:	4013      	ands	r3, r2
 8008796:	d104      	bne.n	80087a2 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008798:	4b29      	ldr	r3, [pc, #164]	; (8008840 <astronode_send_cmd_rr+0x2d0>)
 800879a:	0018      	movs	r0, r3
 800879c:	f7fa fcd8 	bl	8003150 <send_debug_logs>
                    return;
 80087a0:	e035      	b.n	800880e <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 80087a2:	21f0      	movs	r1, #240	; 0xf0
 80087a4:	31ff      	adds	r1, #255	; 0xff
 80087a6:	2318      	movs	r3, #24
 80087a8:	18cb      	adds	r3, r1, r3
 80087aa:	19db      	adds	r3, r3, r7
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	2318      	movs	r3, #24
 80087b0:	18cb      	adds	r3, r1, r3
 80087b2:	19db      	adds	r3, r3, r7
 80087b4:	3201      	adds	r2, #1
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	23f0      	movs	r3, #240	; 0xf0
 80087ba:	33ff      	adds	r3, #255	; 0xff
 80087bc:	2218      	movs	r2, #24
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	19db      	adds	r3, r3, r7
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	22ef      	movs	r2, #239	; 0xef
 80087c8:	0052      	lsls	r2, r2, #1
 80087ca:	2118      	movs	r1, #24
 80087cc:	1852      	adds	r2, r2, r1
 80087ce:	19d2      	adds	r2, r2, r7
 80087d0:	8812      	ldrh	r2, [r2, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d8cb      	bhi.n	800876e <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 80087d6:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <astronode_send_cmd_rr+0x2d4>)
 80087d8:	0018      	movs	r0, r3
 80087da:	f7fa fcb9 	bl	8003150 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80087de:	2350      	movs	r3, #80	; 0x50
 80087e0:	2218      	movs	r2, #24
 80087e2:	189b      	adds	r3, r3, r2
 80087e4:	19db      	adds	r3, r3, r7
 80087e6:	1d5a      	adds	r2, r3, #5
 80087e8:	4917      	ldr	r1, [pc, #92]	; (8008848 <astronode_send_cmd_rr+0x2d8>)
 80087ea:	24f0      	movs	r4, #240	; 0xf0
 80087ec:	0064      	lsls	r4, r4, #1
 80087ee:	2318      	movs	r3, #24
 80087f0:	18e3      	adds	r3, r4, r3
 80087f2:	19db      	adds	r3, r3, r7
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	0018      	movs	r0, r3
 80087f8:	f002 ffe2 	bl	800b7c0 <sprintf>
            send_debug_logs(command_content);
 80087fc:	2318      	movs	r3, #24
 80087fe:	18e3      	adds	r3, r4, r3
 8008800:	19db      	adds	r3, r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	0018      	movs	r0, r3
 8008806:	f7fa fca3 	bl	8003150 <send_debug_logs>
 800880a:	46b5      	mov	sp, r6
 800880c:	e005      	b.n	800881a <astronode_send_cmd_rr+0x2aa>
                return;
 800880e:	46b5      	mov	sp, r6
 8008810:	e003      	b.n	800881a <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <astronode_send_cmd_rr+0x2dc>)
 8008814:	0018      	movs	r0, r3
 8008816:	f7fa fc9b 	bl	8003150 <send_debug_logs>
        }
    }
}
 800881a:	46bd      	mov	sp, r7
 800881c:	2383      	movs	r3, #131	; 0x83
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	449d      	add	sp, r3
 8008822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008824:	fffffdf4 	.word	0xfffffdf4
 8008828:	fffffe60 	.word	0xfffffe60
 800882c:	0801344c 	.word	0x0801344c
 8008830:	08013468 	.word	0x08013468
 8008834:	080134b8 	.word	0x080134b8
 8008838:	08012af8 	.word	0x08012af8
 800883c:	08013ff8 	.word	0x08013ff8
 8008840:	080134cc 	.word	0x080134cc
 8008844:	080134f8 	.word	0x080134f8
 8008848:	08013510 	.word	0x08013510
 800884c:	08013514 	.word	0x08013514

08008850 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <is_sak_available+0x10>)
 8008856:	781b      	ldrb	r3, [r3, #0]
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	20000bf4 	.word	0x20000bf4

08008864 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <is_astronode_reset+0x10>)
 800886a:	781b      	ldrb	r3, [r3, #0]
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	20000bf5 	.word	0x20000bf5

08008878 <is_command_available>:

bool is_command_available()
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <is_command_available+0x10>)
 800887e:	781b      	ldrb	r3, [r3, #0]
}
 8008880:	0018      	movs	r0, r3
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	20000bf6 	.word	0x20000bf6

0800888c <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	0002      	movs	r2, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	1dfb      	adds	r3, r7, #7
 8008898:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 800889a:	1dfb      	adds	r3, r7, #7
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b2f      	cmp	r3, #47	; 0x2f
 80088a0:	d90b      	bls.n	80088ba <ascii_to_value+0x2e>
 80088a2:	1dfb      	adds	r3, r7, #7
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b39      	cmp	r3, #57	; 0x39
 80088a8:	d807      	bhi.n	80088ba <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80088aa:	1dfb      	adds	r3, r7, #7
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	3b30      	subs	r3, #48	; 0x30
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	701a      	strb	r2, [r3, #0]
        return true;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e010      	b.n	80088dc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80088ba:	1dfb      	adds	r3, r7, #7
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d90b      	bls.n	80088da <ascii_to_value+0x4e>
 80088c2:	1dfb      	adds	r3, r7, #7
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b46      	cmp	r3, #70	; 0x46
 80088c8:	d807      	bhi.n	80088da <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80088ca:	1dfb      	adds	r3, r7, #7
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	3b37      	subs	r3, #55	; 0x37
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	701a      	strb	r2, [r3, #0]
        return true;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80088da:	2300      	movs	r3, #0
    }
}
 80088dc:	0018      	movs	r0, r3
 80088de:	46bd      	mov	sp, r7
 80088e0:	b002      	add	sp, #8
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80088ee:	250e      	movs	r5, #14
 80088f0:	197b      	adds	r3, r7, r5
 80088f2:	2200      	movs	r2, #0
 80088f4:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80088f6:	197b      	adds	r3, r7, r5
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	197a      	adds	r2, r7, r5
 80088fc:	1c59      	adds	r1, r3, #1
 80088fe:	8011      	strh	r1, [r2, #0]
 8008900:	001a      	movs	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	189b      	adds	r3, r3, r2
 8008906:	2202      	movs	r2, #2
 8008908:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	260a      	movs	r6, #10
 800890e:	19bc      	adds	r4, r7, r6
 8008910:	4a44      	ldr	r2, [pc, #272]	; (8008a24 <astronode_create_request_transport+0x140>)
 8008912:	2101      	movs	r1, #1
 8008914:	0018      	movs	r0, r3
 8008916:	f000 fa7d 	bl	8008e14 <calculate_crc>
 800891a:	0003      	movs	r3, r0
 800891c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	1c58      	adds	r0, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	22c4      	movs	r2, #196	; 0xc4
 8008926:	5a99      	ldrh	r1, [r3, r2]
 8008928:	19bc      	adds	r4, r7, r6
 800892a:	19bb      	adds	r3, r7, r6
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	001a      	movs	r2, r3
 8008930:	f000 fa70 	bl	8008e14 <calculate_crc>
 8008934:	0003      	movs	r3, r0
 8008936:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008938:	19bb      	adds	r3, r7, r6
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	b21a      	sxth	r2, r3
 8008940:	0031      	movs	r1, r6
 8008942:	19bb      	adds	r3, r7, r6
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	b29b      	uxth	r3, r3
 800894a:	b21b      	sxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b21a      	sxth	r2, r3
 8008950:	187b      	adds	r3, r7, r1
 8008952:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7818      	ldrb	r0, [r3, #0]
 8008958:	197b      	adds	r3, r7, r5
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	18d3      	adds	r3, r2, r3
 8008960:	0019      	movs	r1, r3
 8008962:	f000 fbeb 	bl	800913c <uint8_to_ascii_buffer>
    index += 2;
 8008966:	197b      	adds	r3, r7, r5
 8008968:	197a      	adds	r2, r7, r5
 800896a:	8812      	ldrh	r2, [r2, #0]
 800896c:	3202      	adds	r2, #2
 800896e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008970:	230c      	movs	r3, #12
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	2200      	movs	r2, #0
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e017      	b.n	80089aa <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800897a:	240c      	movs	r4, #12
 800897c:	193b      	adds	r3, r7, r4
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	18d3      	adds	r3, r2, r3
 8008984:	7858      	ldrb	r0, [r3, #1]
 8008986:	250e      	movs	r5, #14
 8008988:	197b      	adds	r3, r7, r5
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	18d3      	adds	r3, r2, r3
 8008990:	0019      	movs	r1, r3
 8008992:	f000 fbd3 	bl	800913c <uint8_to_ascii_buffer>
        index += 2;
 8008996:	197b      	adds	r3, r7, r5
 8008998:	197a      	adds	r2, r7, r5
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	3202      	adds	r2, #2
 800899e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80089a0:	193b      	adds	r3, r7, r4
 80089a2:	881a      	ldrh	r2, [r3, #0]
 80089a4:	193b      	adds	r3, r7, r4
 80089a6:	3201      	adds	r2, #1
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	22c4      	movs	r2, #196	; 0xc4
 80089ae:	5a9b      	ldrh	r3, [r3, r2]
 80089b0:	220c      	movs	r2, #12
 80089b2:	18ba      	adds	r2, r7, r2
 80089b4:	8812      	ldrh	r2, [r2, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3df      	bcc.n	800897a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80089ba:	250a      	movs	r5, #10
 80089bc:	197b      	adds	r3, r7, r5
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	0a1b      	lsrs	r3, r3, #8
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	b2d8      	uxtb	r0, r3
 80089c6:	240e      	movs	r4, #14
 80089c8:	193b      	adds	r3, r7, r4
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	18d3      	adds	r3, r2, r3
 80089d0:	0019      	movs	r1, r3
 80089d2:	f000 fbb3 	bl	800913c <uint8_to_ascii_buffer>
    index += 2;
 80089d6:	0021      	movs	r1, r4
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	187a      	adds	r2, r7, r1
 80089dc:	8812      	ldrh	r2, [r2, #0]
 80089de:	3202      	adds	r2, #2
 80089e0:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 80089e2:	197b      	adds	r3, r7, r5
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b2d8      	uxtb	r0, r3
 80089e8:	000c      	movs	r4, r1
 80089ea:	187b      	adds	r3, r7, r1
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	18d3      	adds	r3, r2, r3
 80089f2:	0019      	movs	r1, r3
 80089f4:	f000 fba2 	bl	800913c <uint8_to_ascii_buffer>
    index += 2;
 80089f8:	0020      	movs	r0, r4
 80089fa:	183b      	adds	r3, r7, r0
 80089fc:	183a      	adds	r2, r7, r0
 80089fe:	8812      	ldrh	r2, [r2, #0]
 8008a00:	3202      	adds	r2, #2
 8008a02:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008a04:	183b      	adds	r3, r7, r0
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	183a      	adds	r2, r7, r0
 8008a0a:	1c59      	adds	r1, r3, #1
 8008a0c:	8011      	strh	r1, [r2, #0]
 8008a0e:	001a      	movs	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	189b      	adds	r3, r3, r2
 8008a14:	2203      	movs	r2, #3
 8008a16:	701a      	strb	r2, [r3, #0]

    return index;
 8008a18:	183b      	adds	r3, r7, r0
 8008a1a:	881b      	ldrh	r3, [r3, #0]
}
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b005      	add	sp, #20
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	0000ffff 	.word	0x0000ffff

08008a28 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2a:	b089      	sub	sp, #36	; 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	230a      	movs	r3, #10
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	1c0a      	adds	r2, r1, #0
 8008a38:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d005      	beq.n	8008a4e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008a42:	4bbd      	ldr	r3, [pc, #756]	; (8008d38 <astronode_decode_answer_transport+0x310>)
 8008a44:	0018      	movs	r0, r3
 8008a46:	f7fa fb83 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e170      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008a4e:	210a      	movs	r1, #10
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	4013      	ands	r3, r2
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <astronode_decode_answer_transport+0x3e>
 8008a5e:	187b      	adds	r3, r7, r1
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	2b07      	cmp	r3, #7
 8008a64:	d805      	bhi.n	8008a72 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008a66:	4bb5      	ldr	r3, [pc, #724]	; (8008d3c <astronode_decode_answer_transport+0x314>)
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f7fa fb71 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e15e      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008a72:	230a      	movs	r3, #10
 8008a74:	18fb      	adds	r3, r7, r3
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	3b08      	subs	r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da00      	bge.n	8008a80 <astronode_decode_answer_transport+0x58>
 8008a7e:	3301      	adds	r3, #1
 8008a80:	105b      	asrs	r3, r3, #1
 8008a82:	b299      	uxth	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	22c4      	movs	r2, #196	; 0xc4
 8008a88:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	18d3      	adds	r3, r2, r3
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d005      	beq.n	8008aa8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008a9c:	4ba8      	ldr	r3, [pc, #672]	; (8008d40 <astronode_decode_answer_transport+0x318>)
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7fa fb56 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e143      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008aa8:	2117      	movs	r1, #23
 8008aaa:	187b      	adds	r3, r7, r1
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008ab0:	2416      	movs	r4, #22
 8008ab2:	193b      	adds	r3, r7, r4
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	187a      	adds	r2, r7, r1
 8008ac0:	0011      	movs	r1, r2
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7ff fee2 	bl	800888c <ascii_to_value>
 8008ac8:	0003      	movs	r3, r0
 8008aca:	001a      	movs	r2, r3
 8008acc:	2301      	movs	r3, #1
 8008ace:	4053      	eors	r3, r2
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10e      	bne.n	8008af4 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	193a      	adds	r2, r7, r4
 8008ade:	0011      	movs	r1, r2
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7ff fed3 	bl	800888c <ascii_to_value>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	001a      	movs	r2, r3
 8008aea:	2301      	movs	r3, #1
 8008aec:	4053      	eors	r3, r2
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008af4:	4b93      	ldr	r3, [pc, #588]	; (8008d44 <astronode_decode_answer_transport+0x31c>)
 8008af6:	0018      	movs	r0, r3
 8008af8:	f7fa fb2a 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e117      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008b00:	2317      	movs	r3, #23
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	2316      	movs	r3, #22
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	18d3      	adds	r3, r2, r3
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008b18:	231e      	movs	r3, #30
 8008b1a:	18fb      	adds	r3, r7, r3
 8008b1c:	2203      	movs	r2, #3
 8008b1e:	801a      	strh	r2, [r3, #0]
 8008b20:	231c      	movs	r3, #28
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	2200      	movs	r2, #0
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e045      	b.n	8008bb6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008b2a:	241e      	movs	r4, #30
 8008b2c:	193b      	adds	r3, r7, r4
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	18d3      	adds	r3, r2, r3
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2217      	movs	r2, #23
 8008b38:	18ba      	adds	r2, r7, r2
 8008b3a:	0011      	movs	r1, r2
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f7ff fea5 	bl	800888c <ascii_to_value>
 8008b42:	0003      	movs	r3, r0
 8008b44:	001a      	movs	r2, r3
 8008b46:	2301      	movs	r3, #1
 8008b48:	4053      	eors	r3, r2
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d112      	bne.n	8008b76 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008b50:	193b      	adds	r3, r7, r4
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2216      	movs	r2, #22
 8008b5e:	18ba      	adds	r2, r7, r2
 8008b60:	0011      	movs	r1, r2
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff fe92 	bl	800888c <ascii_to_value>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4053      	eors	r3, r2
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008b76:	4b73      	ldr	r3, [pc, #460]	; (8008d44 <astronode_decode_answer_transport+0x31c>)
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7fa fae9 	bl	8003150 <send_debug_logs>
            return RS_FAILURE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e0d6      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008b82:	2317      	movs	r3, #23
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	b2d9      	uxtb	r1, r3
 8008b8c:	2316      	movs	r3, #22
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	201c      	movs	r0, #28
 8008b94:	183b      	adds	r3, r7, r0
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	1838      	adds	r0, r7, r0
 8008b9a:	1c5c      	adds	r4, r3, #1
 8008b9c:	8004      	strh	r4, [r0, #0]
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	188b      	adds	r3, r1, r2
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	181b      	adds	r3, r3, r0
 8008ba8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008baa:	221e      	movs	r2, #30
 8008bac:	18bb      	adds	r3, r7, r2
 8008bae:	18ba      	adds	r2, r7, r2
 8008bb0:	8812      	ldrh	r2, [r2, #0]
 8008bb2:	3202      	adds	r2, #2
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	231e      	movs	r3, #30
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	881a      	ldrh	r2, [r3, #0]
 8008bbc:	260a      	movs	r6, #10
 8008bbe:	19bb      	adds	r3, r7, r6
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	3b05      	subs	r3, #5
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	dbb0      	blt.n	8008b2a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	251a      	movs	r5, #26
 8008bcc:	197c      	adds	r4, r7, r5
 8008bce:	4a5e      	ldr	r2, [pc, #376]	; (8008d48 <astronode_decode_answer_transport+0x320>)
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f000 f91e 	bl	8008e14 <calculate_crc>
 8008bd8:	0003      	movs	r3, r0
 8008bda:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	1c58      	adds	r0, r3, #1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	22c4      	movs	r2, #196	; 0xc4
 8008be4:	5a99      	ldrh	r1, [r3, r2]
 8008be6:	197c      	adds	r4, r7, r5
 8008be8:	197b      	adds	r3, r7, r5
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	001a      	movs	r2, r3
 8008bee:	f000 f911 	bl	8008e14 <calculate_crc>
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008bf6:	197b      	adds	r3, r7, r5
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	b21a      	sxth	r2, r3
 8008bfe:	0029      	movs	r1, r5
 8008c00:	197b      	adds	r3, r7, r5
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b21a      	sxth	r2, r3
 8008c0e:	187b      	adds	r3, r7, r1
 8008c10:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008c12:	19bb      	adds	r3, r7, r6
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	3b05      	subs	r3, #5
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	18d3      	adds	r3, r2, r3
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2217      	movs	r2, #23
 8008c20:	18ba      	adds	r2, r7, r2
 8008c22:	0011      	movs	r1, r2
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7ff fe31 	bl	800888c <ascii_to_value>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	001a      	movs	r2, r3
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4053      	eors	r3, r2
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d112      	bne.n	8008c5e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008c38:	19bb      	adds	r3, r7, r6
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2216      	movs	r2, #22
 8008c46:	18ba      	adds	r2, r7, r2
 8008c48:	0011      	movs	r1, r2
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7ff fe1e 	bl	800888c <ascii_to_value>
 8008c50:	0003      	movs	r3, r0
 8008c52:	001a      	movs	r2, r3
 8008c54:	2301      	movs	r3, #1
 8008c56:	4053      	eors	r3, r2
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <astronode_decode_answer_transport+0x31c>)
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7fa fa75 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e062      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008c6a:	2017      	movs	r0, #23
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	031b      	lsls	r3, r3, #12
 8008c74:	b299      	uxth	r1, r3
 8008c76:	2416      	movs	r4, #22
 8008c78:	193b      	adds	r3, r7, r4
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	2318      	movs	r3, #24
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	188a      	adds	r2, r1, r2
 8008c88:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008c8a:	250a      	movs	r5, #10
 8008c8c:	197b      	adds	r3, r7, r5
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	3b03      	subs	r3, #3
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	18d3      	adds	r3, r2, r3
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	183a      	adds	r2, r7, r0
 8008c9a:	0011      	movs	r1, r2
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7ff fdf5 	bl	800888c <ascii_to_value>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	001a      	movs	r2, r3
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4053      	eors	r3, r2
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d111      	bne.n	8008cd4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008cb0:	197b      	adds	r3, r7, r5
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	3b02      	subs	r3, #2
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	18d3      	adds	r3, r2, r3
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	193a      	adds	r2, r7, r4
 8008cbe:	0011      	movs	r1, r2
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f7ff fde3 	bl	800888c <ascii_to_value>
 8008cc6:	0003      	movs	r3, r0
 8008cc8:	001a      	movs	r2, r3
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4053      	eors	r3, r2
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <astronode_decode_answer_transport+0x31c>)
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7fa fa3a 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e027      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008ce0:	2317      	movs	r3, #23
 8008ce2:	18fb      	adds	r3, r7, r3
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	2316      	movs	r3, #22
 8008cee:	18fb      	adds	r3, r7, r3
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	18d3      	adds	r3, r2, r3
 8008cf6:	b299      	uxth	r1, r3
 8008cf8:	2018      	movs	r0, #24
 8008cfa:	183b      	adds	r3, r7, r0
 8008cfc:	183a      	adds	r2, r7, r0
 8008cfe:	8812      	ldrh	r2, [r2, #0]
 8008d00:	188a      	adds	r2, r1, r2
 8008d02:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008d04:	183a      	adds	r2, r7, r0
 8008d06:	231a      	movs	r3, #26
 8008d08:	18fb      	adds	r3, r7, r3
 8008d0a:	8812      	ldrh	r2, [r2, #0]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d005      	beq.n	8008d1e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008d12:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <astronode_decode_answer_transport+0x324>)
 8008d14:	0018      	movs	r0, r3
 8008d16:	f7fa fa1b 	bl	8003150 <send_debug_logs>
        return RS_FAILURE;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e008      	b.n	8008d30 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2bff      	cmp	r3, #255	; 0xff
 8008d24:	d103      	bne.n	8008d2e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f000 f8c3 	bl	8008eb4 <check_for_error>
    }

    return RS_SUCCESS;
 8008d2e:	2301      	movs	r3, #1
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b009      	add	sp, #36	; 0x24
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	080135a4 	.word	0x080135a4
 8008d3c:	080135f4 	.word	0x080135f4
 8008d40:	08013644 	.word	0x08013644
 8008d44:	08013694 	.word	0x08013694
 8008d48:	0000ffff 	.word	0x0000ffff
 8008d4c:	080136e0 	.word	0x080136e0

08008d50 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	4c2b      	ldr	r4, [pc, #172]	; (8008e00 <astronode_transport_send_receive+0xb0>)
 8008d54:	44a5      	add	sp, r4
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008d5c:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <astronode_transport_send_receive+0xb4>)
 8008d5e:	25ca      	movs	r5, #202	; 0xca
 8008d60:	00ad      	lsls	r5, r5, #2
 8008d62:	195b      	adds	r3, r3, r5
 8008d64:	19db      	adds	r3, r3, r7
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	22c4      	movs	r2, #196	; 0xc4
 8008d6e:	0052      	lsls	r2, r2, #1
 8008d70:	2100      	movs	r1, #0
 8008d72:	0018      	movs	r0, r3
 8008d74:	f002 fdba 	bl	800b8ec <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008d78:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <astronode_transport_send_receive+0xb8>)
 8008d7a:	195b      	adds	r3, r3, r5
 8008d7c:	19db      	adds	r3, r3, r7
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	3304      	adds	r3, #4
 8008d84:	22c4      	movs	r2, #196	; 0xc4
 8008d86:	0052      	lsls	r2, r2, #1
 8008d88:	2100      	movs	r1, #0
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f002 fdae 	bl	800b8ec <memset>
    uint16_t answer_length =  0;
 8008d90:	4b1e      	ldr	r3, [pc, #120]	; (8008e0c <astronode_transport_send_receive+0xbc>)
 8008d92:	195b      	adds	r3, r3, r5
 8008d94:	19db      	adds	r3, r3, r7
 8008d96:	2200      	movs	r2, #0
 8008d98:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008d9a:	4e1d      	ldr	r6, [pc, #116]	; (8008e10 <astronode_transport_send_receive+0xc0>)
 8008d9c:	19bc      	adds	r4, r7, r6
 8008d9e:	23cc      	movs	r3, #204	; 0xcc
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	18fa      	adds	r2, r7, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	0011      	movs	r1, r2
 8008da8:	0018      	movs	r0, r3
 8008daa:	f7ff fd9b 	bl	80088e4 <astronode_create_request_transport>
 8008dae:	0003      	movs	r3, r0
 8008db0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8008db2:	19bb      	adds	r3, r7, r6
 8008db4:	881a      	ldrh	r2, [r3, #0]
 8008db6:	23cc      	movs	r3, #204	; 0xcc
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fa fa9c 	bl	80032fc <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008dc4:	230a      	movs	r3, #10
 8008dc6:	18fa      	adds	r2, r7, r3
 8008dc8:	240c      	movs	r4, #12
 8008dca:	193b      	adds	r3, r7, r4
 8008dcc:	0011      	movs	r1, r2
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f000 f92c 	bl	800902c <receive_astronode_answer>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d10a      	bne.n	8008df0 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <astronode_transport_send_receive+0xbc>)
 8008ddc:	195b      	adds	r3, r3, r5
 8008dde:	19db      	adds	r3, r3, r7
 8008de0:	8819      	ldrh	r1, [r3, #0]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	193b      	adds	r3, r7, r4
 8008de6:	0018      	movs	r0, r3
 8008de8:	f7ff fe1e 	bl	8008a28 <astronode_decode_answer_transport>
 8008dec:	0003      	movs	r3, r0
 8008dee:	e000      	b.n	8008df2 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008df0:	2300      	movs	r3, #0
    }
}
 8008df2:	0018      	movs	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	23cb      	movs	r3, #203	; 0xcb
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	449d      	add	sp, r3
 8008dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	fffffcd4 	.word	0xfffffcd4
 8008e04:	fffffe70 	.word	0xfffffe70
 8008e08:	fffffce4 	.word	0xfffffce4
 8008e0c:	fffffce2 	.word	0xfffffce2
 8008e10:	00000326 	.word	0x00000326

08008e14 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	0008      	movs	r0, r1
 8008e1e:	0011      	movs	r1, r2
 8008e20:	1cbb      	adds	r3, r7, #2
 8008e22:	1c02      	adds	r2, r0, #0
 8008e24:	801a      	strh	r2, [r3, #0]
 8008e26:	003b      	movs	r3, r7
 8008e28:	1c0a      	adds	r2, r1, #0
 8008e2a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008e2c:	230e      	movs	r3, #14
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	003a      	movs	r2, r7
 8008e32:	8812      	ldrh	r2, [r2, #0]
 8008e34:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008e36:	e02e      	b.n	8008e96 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008e38:	240e      	movs	r4, #14
 8008e3a:	193b      	adds	r3, r7, r4
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	b299      	uxth	r1, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	200c      	movs	r0, #12
 8008e4e:	183b      	adds	r3, r7, r0
 8008e50:	404a      	eors	r2, r1
 8008e52:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008e54:	183b      	adds	r3, r7, r0
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	091b      	lsrs	r3, r3, #4
 8008e5a:	b299      	uxth	r1, r3
 8008e5c:	183b      	adds	r3, r7, r0
 8008e5e:	183a      	adds	r2, r7, r0
 8008e60:	8812      	ldrh	r2, [r2, #0]
 8008e62:	404a      	eors	r2, r1
 8008e64:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008e66:	0021      	movs	r1, r4
 8008e68:	187b      	adds	r3, r7, r1
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	b21a      	sxth	r2, r3
 8008e70:	183b      	adds	r3, r7, r0
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	031b      	lsls	r3, r3, #12
 8008e76:	b21b      	sxth	r3, r3
 8008e78:	4053      	eors	r3, r2
 8008e7a:	b21a      	sxth	r2, r3
 8008e7c:	183b      	adds	r3, r7, r0
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	015b      	lsls	r3, r3, #5
 8008e82:	b21b      	sxth	r3, r3
 8008e84:	4053      	eors	r3, r2
 8008e86:	b21a      	sxth	r2, r3
 8008e88:	183b      	adds	r3, r7, r0
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	5e1b      	ldrsh	r3, [r3, r0]
 8008e8e:	4053      	eors	r3, r2
 8008e90:	b21a      	sxth	r2, r3
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008e96:	1cbb      	adds	r3, r7, #2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	1cba      	adds	r2, r7, #2
 8008e9c:	1e59      	subs	r1, r3, #1
 8008e9e:	8011      	strh	r1, [r2, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1c9      	bne.n	8008e38 <calculate_crc+0x24>
    }
    return crc;
 8008ea4:	230e      	movs	r3, #14
 8008ea6:	18fb      	adds	r3, r7, r3
 8008ea8:	881b      	ldrh	r3, [r3, #0]
}
 8008eaa:	0018      	movs	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	b005      	add	sp, #20
 8008eb0:	bd90      	pop	{r4, r7, pc}
	...

08008eb4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	b299      	uxth	r1, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	789b      	ldrb	r3, [r3, #2]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	200e      	movs	r0, #14
 8008ece:	183b      	adds	r3, r7, r0
 8008ed0:	188a      	adds	r2, r1, r2
 8008ed2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008ed4:	183b      	adds	r3, r7, r0
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	4a40      	ldr	r2, [pc, #256]	; (8008fdc <check_for_error+0x128>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d100      	bne.n	8008ee0 <check_for_error+0x2c>
 8008ede:	e06f      	b.n	8008fc0 <check_for_error+0x10c>
 8008ee0:	4a3e      	ldr	r2, [pc, #248]	; (8008fdc <check_for_error+0x128>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	dd00      	ble.n	8008ee8 <check_for_error+0x34>
 8008ee6:	e070      	b.n	8008fca <check_for_error+0x116>
 8008ee8:	4a3d      	ldr	r2, [pc, #244]	; (8008fe0 <check_for_error+0x12c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d100      	bne.n	8008ef0 <check_for_error+0x3c>
 8008eee:	e062      	b.n	8008fb6 <check_for_error+0x102>
 8008ef0:	4a3b      	ldr	r2, [pc, #236]	; (8008fe0 <check_for_error+0x12c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	dd00      	ble.n	8008ef8 <check_for_error+0x44>
 8008ef6:	e068      	b.n	8008fca <check_for_error+0x116>
 8008ef8:	4a3a      	ldr	r2, [pc, #232]	; (8008fe4 <check_for_error+0x130>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d056      	beq.n	8008fac <check_for_error+0xf8>
 8008efe:	4a39      	ldr	r2, [pc, #228]	; (8008fe4 <check_for_error+0x130>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	dd00      	ble.n	8008f06 <check_for_error+0x52>
 8008f04:	e061      	b.n	8008fca <check_for_error+0x116>
 8008f06:	4a38      	ldr	r2, [pc, #224]	; (8008fe8 <check_for_error+0x134>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d04a      	beq.n	8008fa2 <check_for_error+0xee>
 8008f0c:	4a36      	ldr	r2, [pc, #216]	; (8008fe8 <check_for_error+0x134>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	dc5b      	bgt.n	8008fca <check_for_error+0x116>
 8008f12:	4a36      	ldr	r2, [pc, #216]	; (8008fec <check_for_error+0x138>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d03f      	beq.n	8008f98 <check_for_error+0xe4>
 8008f18:	4a34      	ldr	r2, [pc, #208]	; (8008fec <check_for_error+0x138>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	dc55      	bgt.n	8008fca <check_for_error+0x116>
 8008f1e:	4a34      	ldr	r2, [pc, #208]	; (8008ff0 <check_for_error+0x13c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d034      	beq.n	8008f8e <check_for_error+0xda>
 8008f24:	4a32      	ldr	r2, [pc, #200]	; (8008ff0 <check_for_error+0x13c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	dc4f      	bgt.n	8008fca <check_for_error+0x116>
 8008f2a:	4a32      	ldr	r2, [pc, #200]	; (8008ff4 <check_for_error+0x140>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d029      	beq.n	8008f84 <check_for_error+0xd0>
 8008f30:	4a30      	ldr	r2, [pc, #192]	; (8008ff4 <check_for_error+0x140>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	dc49      	bgt.n	8008fca <check_for_error+0x116>
 8008f36:	4a30      	ldr	r2, [pc, #192]	; (8008ff8 <check_for_error+0x144>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d01e      	beq.n	8008f7a <check_for_error+0xc6>
 8008f3c:	4a2e      	ldr	r2, [pc, #184]	; (8008ff8 <check_for_error+0x144>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	dc43      	bgt.n	8008fca <check_for_error+0x116>
 8008f42:	2222      	movs	r2, #34	; 0x22
 8008f44:	32ff      	adds	r2, #255	; 0xff
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d012      	beq.n	8008f70 <check_for_error+0xbc>
 8008f4a:	2291      	movs	r2, #145	; 0x91
 8008f4c:	0052      	lsls	r2, r2, #1
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	da3b      	bge.n	8008fca <check_for_error+0x116>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d002      	beq.n	8008f5c <check_for_error+0xa8>
 8008f56:	2b11      	cmp	r3, #17
 8008f58:	d005      	beq.n	8008f66 <check_for_error+0xb2>
 8008f5a:	e036      	b.n	8008fca <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008f5c:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <check_for_error+0x148>)
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f7fa f8f6 	bl	8003150 <send_debug_logs>
            break;
 8008f64:	e036      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8008f66:	4b26      	ldr	r3, [pc, #152]	; (8009000 <check_for_error+0x14c>)
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7fa f8f1 	bl	8003150 <send_debug_logs>
            break;
 8008f6e:	e031      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8008f70:	4b24      	ldr	r3, [pc, #144]	; (8009004 <check_for_error+0x150>)
 8008f72:	0018      	movs	r0, r3
 8008f74:	f7fa f8ec 	bl	8003150 <send_debug_logs>
            break;
 8008f78:	e02c      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008f7a:	4b23      	ldr	r3, [pc, #140]	; (8009008 <check_for_error+0x154>)
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f7fa f8e7 	bl	8003150 <send_debug_logs>
            break;
 8008f82:	e027      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8008f84:	4b21      	ldr	r3, [pc, #132]	; (800900c <check_for_error+0x158>)
 8008f86:	0018      	movs	r0, r3
 8008f88:	f7fa f8e2 	bl	8003150 <send_debug_logs>
            break;
 8008f8c:	e022      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8008f8e:	4b20      	ldr	r3, [pc, #128]	; (8009010 <check_for_error+0x15c>)
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7fa f8dd 	bl	8003150 <send_debug_logs>
            break;
 8008f96:	e01d      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008f98:	4b1e      	ldr	r3, [pc, #120]	; (8009014 <check_for_error+0x160>)
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f7fa f8d8 	bl	8003150 <send_debug_logs>
            break;
 8008fa0:	e018      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8008fa2:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <check_for_error+0x164>)
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7fa f8d3 	bl	8003150 <send_debug_logs>
            break;
 8008faa:	e013      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008fac:	4b1b      	ldr	r3, [pc, #108]	; (800901c <check_for_error+0x168>)
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f7fa f8ce 	bl	8003150 <send_debug_logs>
            break;
 8008fb4:	e00e      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <check_for_error+0x16c>)
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f7fa f8c9 	bl	8003150 <send_debug_logs>
            break;
 8008fbe:	e009      	b.n	8008fd4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8008fc0:	4b18      	ldr	r3, [pc, #96]	; (8009024 <check_for_error+0x170>)
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7fa f8c4 	bl	8003150 <send_debug_logs>
            break;
 8008fc8:	e004      	b.n	8008fd4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8008fca:	4b17      	ldr	r3, [pc, #92]	; (8009028 <check_for_error+0x174>)
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7fa f8bf 	bl	8003150 <send_debug_logs>
            break;
 8008fd2:	46c0      	nop			; (mov r8, r8)
    }
}
 8008fd4:	46c0      	nop			; (mov r8, r8)
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b004      	add	sp, #16
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	00004601 	.word	0x00004601
 8008fe0:	00004501 	.word	0x00004501
 8008fe4:	00003501 	.word	0x00003501
 8008fe8:	00002601 	.word	0x00002601
 8008fec:	00002511 	.word	0x00002511
 8008ff0:	00002501 	.word	0x00002501
 8008ff4:	00000611 	.word	0x00000611
 8008ff8:	00000601 	.word	0x00000601
 8008ffc:	08013724 	.word	0x08013724
 8009000:	08013770 	.word	0x08013770
 8009004:	080137d4 	.word	0x080137d4
 8009008:	0801380c 	.word	0x0801380c
 800900c:	080138b0 	.word	0x080138b0
 8009010:	08013918 	.word	0x08013918
 8009014:	08013978 	.word	0x08013978
 8009018:	08013a04 	.word	0x08013a04
 800901c:	08013a64 	.word	0x08013a64
 8009020:	08013b10 	.word	0x08013b10
 8009024:	08013b5c 	.word	0x08013b5c
 8009028:	08013ba4 	.word	0x08013ba4

0800902c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800902c:	b5b0      	push	{r4, r5, r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009036:	230f      	movs	r3, #15
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800903e:	2316      	movs	r3, #22
 8009040:	18fb      	adds	r3, r7, r3
 8009042:	2200      	movs	r2, #0
 8009044:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009046:	f7fa f977 	bl	8003338 <get_systick>
 800904a:	0003      	movs	r3, r0
 800904c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800904e:	2315      	movs	r3, #21
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8009056:	e054      	b.n	8009102 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009058:	4a34      	ldr	r2, [pc, #208]	; (800912c <receive_astronode_answer+0x100>)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	0011      	movs	r1, r2
 800905e:	0018      	movs	r0, r3
 8009060:	f7fa f972 	bl	8003348 <is_systick_timeout_over>
 8009064:	1e03      	subs	r3, r0, #0
 8009066:	d005      	beq.n	8009074 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009068:	4b31      	ldr	r3, [pc, #196]	; (8009130 <receive_astronode_answer+0x104>)
 800906a:	0018      	movs	r0, r3
 800906c:	f7fa f870 	bl	8003150 <send_debug_logs>
            return RS_FAILURE;
 8009070:	2300      	movs	r3, #0
 8009072:	e057      	b.n	8009124 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009074:	250f      	movs	r5, #15
 8009076:	197b      	adds	r3, r7, r5
 8009078:	0018      	movs	r0, r3
 800907a:	f7fa f97b 	bl	8003374 <is_astronode_character_received>
 800907e:	0003      	movs	r3, r0
 8009080:	0019      	movs	r1, r3
 8009082:	2016      	movs	r0, #22
 8009084:	183b      	adds	r3, r7, r0
 8009086:	183a      	adds	r2, r7, r0
 8009088:	8812      	ldrh	r2, [r2, #0]
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	2415      	movs	r4, #21
 800908e:	193b      	adds	r3, r7, r4
 8009090:	193a      	adds	r2, r7, r4
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	2900      	cmp	r1, #0
 8009098:	d033      	beq.n	8009102 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800909a:	197b      	adds	r3, r7, r5
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d105      	bne.n	80090ae <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	2200      	movs	r2, #0
 80090a6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	2200      	movs	r2, #0
 80090ac:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80090ae:	2116      	movs	r1, #22
 80090b0:	187b      	adds	r3, r7, r1
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	18d3      	adds	r3, r2, r3
 80090b8:	220f      	movs	r2, #15
 80090ba:	18ba      	adds	r2, r7, r2
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	701a      	strb	r2, [r3, #0]
            length++;
 80090c0:	187b      	adds	r3, r7, r1
 80090c2:	881a      	ldrh	r2, [r3, #0]
 80090c4:	187b      	adds	r3, r7, r1
 80090c6:	3201      	adds	r2, #1
 80090c8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80090ca:	187b      	adds	r3, r7, r1
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	2bb2      	cmp	r3, #178	; 0xb2
 80090d0:	d905      	bls.n	80090de <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80090d2:	4b18      	ldr	r3, [pc, #96]	; (8009134 <receive_astronode_answer+0x108>)
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7fa f83b 	bl	8003150 <send_debug_logs>
                return RS_FAILURE;
 80090da:	2300      	movs	r3, #0
 80090dc:	e022      	b.n	8009124 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80090de:	230f      	movs	r3, #15
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d10c      	bne.n	8009102 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80090e8:	2216      	movs	r2, #22
 80090ea:	18bb      	adds	r3, r7, r2
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d907      	bls.n	8009102 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	18ba      	adds	r2, r7, r2
 80090f6:	8812      	ldrh	r2, [r2, #0]
 80090f8:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80090fa:	2315      	movs	r3, #21
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	2201      	movs	r2, #1
 8009100:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009102:	2315      	movs	r3, #21
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2201      	movs	r2, #1
 800910a:	4053      	eors	r3, r2
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1a2      	bne.n	8009058 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <receive_astronode_answer+0x10c>)
 8009114:	0018      	movs	r0, r3
 8009116:	f7fa f81b 	bl	8003150 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0018      	movs	r0, r3
 800911e:	f7fa f817 	bl	8003150 <send_debug_logs>

    return RS_SUCCESS;
 8009122:	2301      	movs	r3, #1
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b006      	add	sp, #24
 800912a:	bdb0      	pop	{r4, r5, r7, pc}
 800912c:	000005dc 	.word	0x000005dc
 8009130:	08013bc8 	.word	0x08013bc8
 8009134:	08013bec 	.word	0x08013bec
 8009138:	08013c38 	.word	0x08013c38

0800913c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	0002      	movs	r2, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	1dfb      	adds	r3, r7, #7
 8009148:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800914a:	1dfb      	adds	r3, r7, #7
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	091b      	lsrs	r3, r3, #4
 8009150:	b2db      	uxtb	r3, r3
 8009152:	001a      	movs	r2, r3
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <uint8_to_ascii_buffer+0x3c>)
 8009156:	5c9a      	ldrb	r2, [r3, r2]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800915c:	1dfb      	adds	r3, r7, #7
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	220f      	movs	r2, #15
 8009162:	401a      	ands	r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4903      	ldr	r1, [pc, #12]	; (8009178 <uint8_to_ascii_buffer+0x3c>)
 800916a:	5c8a      	ldrb	r2, [r1, r2]
 800916c:	701a      	strb	r2, [r3, #0]
}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b002      	add	sp, #8
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	08013f6c 	.word	0x08013f6c

0800917c <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800917c:	b590      	push	{r4, r7, lr}
 800917e:	b087      	sub	sp, #28
 8009180:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8009188:	e012      	b.n	80091b0 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800918a:	f7fa f89d 	bl	80032c8 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800918e:	1dfc      	adds	r4, r7, #7
 8009190:	2300      	movs	r3, #0
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	2301      	movs	r3, #1
 8009196:	9302      	str	r3, [sp, #8]
 8009198:	2301      	movs	r3, #1
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	2301      	movs	r3, #1
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	2201      	movs	r2, #1
 80091a4:	2101      	movs	r1, #1
 80091a6:	2001      	movs	r0, #1
 80091a8:	f7fe fb9e 	bl	80078e8 <astronode_send_cfg_wr>
 80091ac:	0003      	movs	r3, r0
 80091ae:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80091b0:	1dfb      	adds	r3, r7, #7
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2201      	movs	r2, #1
 80091b6:	4053      	eors	r3, r2
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00d      	beq.n	80091e2 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80091c6:	f7fe ffef 	bl	80081a8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80091ca:	f7fe fb55 	bl	8007878 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80091ce:	f7ff f8e5 	bl	800839c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80091d2:	f7fe fcdf 	bl	8007b94 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80091d6:	f7fe fc33 	bl	8007a40 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80091da:	f7fe ff69 	bl	80080b0 <astronode_send_pld_fr>
		return true ;
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80091e2:	2300      	movs	r3, #0
	}
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b003      	add	sp, #12
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	0002      	movs	r2, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	1dbb      	adds	r3, r7, #6
 80091f8:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f6 ff81 	bl	8000104 <strlen>
 8009202:	0003      	movs	r3, r0
 8009204:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2ba0      	cmp	r3, #160	; 0xa0
 800920a:	d80b      	bhi.n	8009224 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	b29a      	uxth	r2, r3
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	1dbb      	adds	r3, r7, #6
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	0018      	movs	r0, r3
 8009218:	f7fe fea6 	bl	8007f68 <astronode_send_pld_er>
 800921c:	1e03      	subs	r3, r0, #0
 800921e:	d005      	beq.n	800922c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009220:	2301      	movs	r3, #1
 8009222:	e004      	b.n	800922e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <my_astro_add_payload_2_queue+0x4c>)
 8009226:	0018      	movs	r0, r3
 8009228:	f7f9 ff92 	bl	8003150 <send_debug_logs>
	}
	return false ;
 800922c:	2300      	movs	r3, #0
}
 800922e:	0018      	movs	r0, r3
 8009230:	46bd      	mov	sp, r7
 8009232:	b004      	add	sp, #16
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	08013c64 	.word	0x08013c64

0800923c <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009240:	4b15      	ldr	r3, [pc, #84]	; (8009298 <my_astro_handle_evt+0x5c>)
 8009242:	0018      	movs	r0, r3
 8009244:	f7f9 ff84 	bl	8003150 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009248:	f7fe fd4e 	bl	8007ce8 <astronode_send_evt_rr>
	if (is_sak_available () )
 800924c:	f7ff fb00 	bl	8008850 <is_sak_available>
 8009250:	1e03      	subs	r3, r0, #0
 8009252:	d007      	beq.n	8009264 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009254:	f7ff f80c 	bl	8008270 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009258:	f7ff f860 	bl	800831c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <my_astro_handle_evt+0x60>)
 800925e:	0018      	movs	r0, r3
 8009260:	f7f9 ff76 	bl	8003150 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009264:	f7ff fafe 	bl	8008864 <is_astronode_reset>
 8009268:	1e03      	subs	r3, r0, #0
 800926a:	d005      	beq.n	8009278 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800926c:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <my_astro_handle_evt+0x64>)
 800926e:	0018      	movs	r0, r3
 8009270:	f7f9 ff6e 	bl	8003150 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009274:	f7fe ff58 	bl	8008128 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009278:	f7ff fafe 	bl	8008878 <is_command_available>
 800927c:	1e03      	subs	r3, r0, #0
 800927e:	d007      	beq.n	8009290 <my_astro_handle_evt+0x54>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009280:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <my_astro_handle_evt+0x68>)
 8009282:	0018      	movs	r0, r3
 8009284:	f7f9 ff64 	bl	8003150 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009288:	f7ff f972 	bl	8008570 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 800928c:	f7ff f930 	bl	80084f0 <astronode_send_cmd_cr>
	}
	return true ;
 8009290:	2301      	movs	r3, #1
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	08013ccc 	.word	0x08013ccc
 800929c:	08013d00 	.word	0x08013d00
 80092a0:	08013d44 	.word	0x08013d44
 80092a4:	08013d80 	.word	0x08013d80

080092a8 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	0011      	movs	r1, r2
 80092b8:	0018      	movs	r0, r3
 80092ba:	f7fe fd95 	bl	8007de8 <astronode_send_geo_wr>
}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	46bd      	mov	sp, r7
 80092c2:	b002      	add	sp, #8
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80092c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ca:	4ca1      	ldr	r4, [pc, #644]	; (8009550 <my_gnss_acq_coordinates+0x288>)
 80092cc:	44a5      	add	sp, r4
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 80092d2:	4ba0      	ldr	r3, [pc, #640]	; (8009554 <my_gnss_acq_coordinates+0x28c>)
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 80092da:	4b9f      	ldr	r3, [pc, #636]	; (8009558 <my_gnss_acq_coordinates+0x290>)
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 80092e2:	4b9e      	ldr	r3, [pc, #632]	; (800955c <my_gnss_acq_coordinates+0x294>)
 80092e4:	18fb      	adds	r3, r7, r3
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 80092ea:	4b9d      	ldr	r3, [pc, #628]	; (8009560 <my_gnss_acq_coordinates+0x298>)
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 80092f2:	4b9c      	ldr	r3, [pc, #624]	; (8009564 <my_gnss_acq_coordinates+0x29c>)
 80092f4:	18fb      	adds	r3, r7, r3
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 80092fa:	4b9b      	ldr	r3, [pc, #620]	; (8009568 <my_gnss_acq_coordinates+0x2a0>)
 80092fc:	2486      	movs	r4, #134	; 0x86
 80092fe:	00a4      	lsls	r4, r4, #2
 8009300:	191b      	adds	r3, r3, r4
 8009302:	19db      	adds	r3, r3, r7
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	3304      	adds	r3, #4
 800930a:	22f6      	movs	r2, #246	; 0xf6
 800930c:	2100      	movs	r1, #0
 800930e:	0018      	movs	r0, r3
 8009310:	f002 faec 	bl	800b8ec <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009314:	4b95      	ldr	r3, [pc, #596]	; (800956c <my_gnss_acq_coordinates+0x2a4>)
 8009316:	191b      	adds	r3, r3, r4
 8009318:	19db      	adds	r3, r3, r7
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	3304      	adds	r3, #4
 8009320:	22f6      	movs	r2, #246	; 0xf6
 8009322:	2100      	movs	r1, #0
 8009324:	0018      	movs	r0, r3
 8009326:	f002 fae1 	bl	800b8ec <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <my_gnss_acq_coordinates+0x2a8>)
 800932c:	2284      	movs	r2, #132	; 0x84
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	18ba      	adds	r2, r7, r2
 8009332:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009334:	4b8f      	ldr	r3, [pc, #572]	; (8009574 <my_gnss_acq_coordinates+0x2ac>)
 8009336:	2283      	movs	r2, #131	; 0x83
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	18ba      	adds	r2, r7, r2
 800933c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800933e:	4b8e      	ldr	r3, [pc, #568]	; (8009578 <my_gnss_acq_coordinates+0x2b0>)
 8009340:	2282      	movs	r2, #130	; 0x82
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	18ba      	adds	r2, r7, r2
 8009346:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009348:	4b8c      	ldr	r3, [pc, #560]	; (800957c <my_gnss_acq_coordinates+0x2b4>)
 800934a:	2281      	movs	r2, #129	; 0x81
 800934c:	0092      	lsls	r2, r2, #2
 800934e:	18ba      	adds	r2, r7, r2
 8009350:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '\0' ;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 100 ;
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	4b88      	ldr	r3, [pc, #544]	; (8009580 <my_gnss_acq_coordinates+0x2b8>)
 800935e:	608a      	str	r2, [r1, #8]
 8009360:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009362:	f7fa f839 	bl	80033d8 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009366:	e0c5      	b.n	80094f4 <my_gnss_acq_coordinates+0x22c>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009368:	4c7c      	ldr	r4, [pc, #496]	; (800955c <my_gnss_acq_coordinates+0x294>)
 800936a:	193b      	adds	r3, r7, r4
 800936c:	2101      	movs	r1, #1
 800936e:	0018      	movs	r0, r3
 8009370:	f7f9 ff88 	bl	8003284 <my_gnss_receive_byte>
		if ( rx_byte )
 8009374:	0020      	movs	r0, r4
 8009376:	183b      	adds	r3, r7, r0
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	4c77      	ldr	r4, [pc, #476]	; (8009558 <my_gnss_acq_coordinates+0x290>)
 800937c:	193a      	adds	r2, r7, r4
 800937e:	1939      	adds	r1, r7, r4
 8009380:	7809      	ldrb	r1, [r1, #0]
 8009382:	7011      	strb	r1, [r2, #0]
 8009384:	4d77      	ldr	r5, [pc, #476]	; (8009564 <my_gnss_acq_coordinates+0x29c>)
 8009386:	197a      	adds	r2, r7, r5
 8009388:	1979      	adds	r1, r7, r5
 800938a:	7809      	ldrb	r1, [r1, #0]
 800938c:	7011      	strb	r1, [r2, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d100      	bne.n	8009394 <my_gnss_acq_coordinates+0xcc>
 8009392:	e0af      	b.n	80094f4 <my_gnss_acq_coordinates+0x22c>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009394:	4b72      	ldr	r3, [pc, #456]	; (8009560 <my_gnss_acq_coordinates+0x298>)
 8009396:	18fa      	adds	r2, r7, r3
 8009398:	2684      	movs	r6, #132	; 0x84
 800939a:	0076      	lsls	r6, r6, #1
 800939c:	19b9      	adds	r1, r7, r6
 800939e:	183b      	adds	r3, r7, r0
 80093a0:	0018      	movs	r0, r3
 80093a2:	f000 fbe1 	bl	8009b68 <my_nmea_message>
 80093a6:	0001      	movs	r1, r0
 80093a8:	193b      	adds	r3, r7, r4
 80093aa:	193a      	adds	r2, r7, r4
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	197b      	adds	r3, r7, r5
 80093b2:	197a      	adds	r2, r7, r5
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	2902      	cmp	r1, #2
 80093ba:	d000      	beq.n	80093be <my_gnss_acq_coordinates+0xf6>
 80093bc:	e09a      	b.n	80094f4 <my_gnss_acq_coordinates+0x22c>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80093be:	19bb      	adds	r3, r7, r6
 80093c0:	0018      	movs	r0, r3
 80093c2:	f000 fc91 	bl	8009ce8 <is_my_nmea_checksum_ok>
 80093c6:	0003      	movs	r3, r0
 80093c8:	0019      	movs	r1, r3
 80093ca:	193b      	adds	r3, r7, r4
 80093cc:	193a      	adds	r2, r7, r4
 80093ce:	7812      	ldrb	r2, [r2, #0]
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	197b      	adds	r3, r7, r5
 80093d4:	197a      	adds	r2, r7, r5
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	2900      	cmp	r1, #0
 80093dc:	d100      	bne.n	80093e0 <my_gnss_acq_coordinates+0x118>
 80093de:	e089      	b.n	80094f4 <my_gnss_acq_coordinates+0x22c>
				{
					if ( !is_utc_saved )
 80093e0:	193b      	adds	r3, r7, r4
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2201      	movs	r2, #1
 80093e6:	4053      	eors	r3, r2
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d015      	beq.n	800941a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7c1b      	ldrb	r3, [r3, #16]
 80093f2:	2b33      	cmp	r3, #51	; 0x33
 80093f4:	d111      	bne.n	800941a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 80093f6:	2383      	movs	r3, #131	; 0x83
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	19bb      	adds	r3, r7, r6
 8009400:	0011      	movs	r1, r2
 8009402:	0018      	movs	r0, r3
 8009404:	f002 fa9f 	bl	800b946 <strstr>
 8009408:	1e03      	subs	r3, r0, #0
 800940a:	d006      	beq.n	800941a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800940c:	19bb      	adds	r3, r7, r6
 800940e:	0018      	movs	r0, r3
 8009410:	f000 f99e 	bl	8009750 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009414:	193b      	adds	r3, r7, r4
 8009416:	2201      	movs	r2, #1
 8009418:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS )
 800941a:	2384      	movs	r3, #132	; 0x84
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	2484      	movs	r4, #132	; 0x84
 8009424:	0064      	lsls	r4, r4, #1
 8009426:	193b      	adds	r3, r7, r4
 8009428:	0011      	movs	r1, r2
 800942a:	0018      	movs	r0, r3
 800942c:	f002 fa8b 	bl	800b946 <strstr>
 8009430:	1e03      	subs	r3, r0, #0
 8009432:	d012      	beq.n	800945a <my_gnss_acq_coordinates+0x192>
 8009434:	4d4b      	ldr	r5, [pc, #300]	; (8009564 <my_gnss_acq_coordinates+0x29c>)
 8009436:	197b      	adds	r3, r7, r5
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d80d      	bhi.n	800945a <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800943e:	4b51      	ldr	r3, [pc, #324]	; (8009584 <my_gnss_acq_coordinates+0x2bc>)
 8009440:	881a      	ldrh	r2, [r3, #0]
 8009442:	4b51      	ldr	r3, [pc, #324]	; (8009588 <my_gnss_acq_coordinates+0x2c0>)
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d85c      	bhi.n	8009504 <my_gnss_acq_coordinates+0x23c>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800944a:	193b      	adds	r3, r7, r4
 800944c:	0018      	movs	r0, r3
 800944e:	f000 fdf1 	bl	800a034 <my_nmea_get_gsv_tns>
 8009452:	0003      	movs	r3, r0
 8009454:	001a      	movs	r2, r3
 8009456:	197b      	adds	r3, r7, r5
 8009458:	701a      	strb	r2, [r3, #0]
					}
					if ( gsv_tns > MIN_TNS ) // Tutaj cały czas miałem błąd, bo nigdy gsv_tns nie mógł się zwięszyć przy warunku gsv_tns < MIN_TNS powyżej
 800945a:	4b42      	ldr	r3, [pc, #264]	; (8009564 <my_gnss_acq_coordinates+0x29c>)
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b03      	cmp	r3, #3
 8009462:	d91d      	bls.n	80094a0 <my_gnss_acq_coordinates+0x1d8>
					{
						if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 8009464:	2382      	movs	r3, #130	; 0x82
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	2484      	movs	r4, #132	; 0x84
 800946e:	0064      	lsls	r4, r4, #1
 8009470:	193b      	adds	r3, r7, r4
 8009472:	0011      	movs	r1, r2
 8009474:	0018      	movs	r0, r3
 8009476:	f002 fa66 	bl	800b946 <strstr>
 800947a:	1e03      	subs	r3, r0, #0
 800947c:	d010      	beq.n	80094a0 <my_gnss_acq_coordinates+0x1d8>
						{
							fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800947e:	193b      	adds	r3, r7, r4
 8009480:	0018      	movs	r0, r3
 8009482:	f000 fbdd 	bl	8009c40 <get_my_nmea_gngsa_fixed_mode_s>
 8009486:	0003      	movs	r3, r0
 8009488:	001a      	movs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	741a      	strb	r2, [r3, #16]
							fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800948e:	193b      	adds	r3, r7, r4
 8009490:	0018      	movs	r0, r3
 8009492:	f000 fbe0 	bl	8009c56 <get_my_nmea_gngsa_pdop_d>
 8009496:	0002      	movs	r2, r0
 8009498:	000b      	movs	r3, r1
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	608a      	str	r2, [r1, #8]
 800949e:	60cb      	str	r3, [r1, #12]
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 80094a0:	2381      	movs	r3, #129	; 0x81
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	2384      	movs	r3, #132	; 0x84
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	0011      	movs	r1, r2
 80094b0:	0018      	movs	r0, r3
 80094b2:	f002 fa48 	bl	800b946 <strstr>
 80094b6:	1e03      	subs	r3, r0, #0
 80094b8:	d01c      	beq.n	80094f4 <my_gnss_acq_coordinates+0x22c>
 80094ba:	4b27      	ldr	r3, [pc, #156]	; (8009558 <my_gnss_acq_coordinates+0x290>)
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d017      	beq.n	80094f4 <my_gnss_acq_coordinates+0x22c>
					{
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 80094c4:	4b29      	ldr	r3, [pc, #164]	; (800956c <my_gnss_acq_coordinates+0x2a4>)
 80094c6:	2186      	movs	r1, #134	; 0x86
 80094c8:	0089      	lsls	r1, r1, #2
 80094ca:	185b      	adds	r3, r3, r1
 80094cc:	19da      	adds	r2, r3, r7
 80094ce:	4b26      	ldr	r3, [pc, #152]	; (8009568 <my_gnss_acq_coordinates+0x2a0>)
 80094d0:	185b      	adds	r3, r3, r1
 80094d2:	19db      	adds	r3, r3, r7
 80094d4:	0010      	movs	r0, r2
 80094d6:	0019      	movs	r1, r3
 80094d8:	23fa      	movs	r3, #250	; 0xfa
 80094da:	001a      	movs	r2, r3
 80094dc:	f002 faeb 	bl	800bab6 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6898      	ldr	r0, [r3, #8]
 80094e4:	68d9      	ldr	r1, [r3, #12]
 80094e6:	4b29      	ldr	r3, [pc, #164]	; (800958c <my_gnss_acq_coordinates+0x2c4>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f7f6 ffbc 	bl	8000468 <__aeabi_dcmple>
 80094f0:	1e03      	subs	r3, r0, #0
 80094f2:	d109      	bne.n	8009508 <my_gnss_acq_coordinates+0x240>
	while ( tim_seconds < fix_acq_ths )
 80094f4:	4b23      	ldr	r3, [pc, #140]	; (8009584 <my_gnss_acq_coordinates+0x2bc>)
 80094f6:	881a      	ldrh	r2, [r3, #0]
 80094f8:	4b25      	ldr	r3, [pc, #148]	; (8009590 <my_gnss_acq_coordinates+0x2c8>)
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d200      	bcs.n	8009502 <my_gnss_acq_coordinates+0x23a>
 8009500:	e732      	b.n	8009368 <my_gnss_acq_coordinates+0xa0>
 8009502:	e002      	b.n	800950a <my_gnss_acq_coordinates+0x242>
							break ;
 8009504:	46c0      	nop			; (mov r8, r8)
 8009506:	e000      	b.n	800950a <my_gnss_acq_coordinates+0x242>
						{
							break ;
 8009508:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800950a:	f7f9 ff75 	bl	80033f8 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800950e:	4b17      	ldr	r3, [pc, #92]	; (800956c <my_gnss_acq_coordinates+0x2a4>)
 8009510:	2286      	movs	r2, #134	; 0x86
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	189b      	adds	r3, r3, r2
 8009516:	19db      	adds	r3, r3, r7
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <my_gnss_acq_coordinates+0x274>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	230c      	movs	r3, #12
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	0011      	movs	r1, r2
 8009526:	0018      	movs	r0, r3
 8009528:	f000 fc9a 	bl	8009e60 <my_nmea_get_gngll_coordinates>
		fix3d->acq_time = tim_seconds ;
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <my_gnss_acq_coordinates+0x2bc>)
 800952e:	881a      	ldrh	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	825a      	strh	r2, [r3, #18]
		r = true ;
 8009534:	4b07      	ldr	r3, [pc, #28]	; (8009554 <my_gnss_acq_coordinates+0x28c>)
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	2201      	movs	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <my_gnss_acq_coordinates+0x28c>)
 800953e:	18fb      	adds	r3, r7, r3
 8009540:	781b      	ldrb	r3, [r3, #0]
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	2387      	movs	r3, #135	; 0x87
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	449d      	add	sp, r3
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	fffffde4 	.word	0xfffffde4
 8009554:	00000217 	.word	0x00000217
 8009558:	00000216 	.word	0x00000216
 800955c:	00000203 	.word	0x00000203
 8009560:	00000202 	.word	0x00000202
 8009564:	00000215 	.word	0x00000215
 8009568:	fffffef0 	.word	0xfffffef0
 800956c:	fffffdf4 	.word	0xfffffdf4
 8009570:	08013dc0 	.word	0x08013dc0
 8009574:	08013dc8 	.word	0x08013dc8
 8009578:	08013dd0 	.word	0x08013dd0
 800957c:	08013dd8 	.word	0x08013dd8
 8009580:	40590000 	.word	0x40590000
 8009584:	20000bf8 	.word	0x20000bf8
 8009588:	20000014 	.word	0x20000014
 800958c:	20000018 	.word	0x20000018
 8009590:	20000012 	.word	0x20000012

08009594 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <my_rtc_get_dt+0x2c>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	0018      	movs	r0, r3
 80095a6:	f7fc f987 	bl	80058b8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <my_rtc_get_dt+0x2c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7fc f893 	bl	80056dc <HAL_RTC_GetTime>
}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	46bd      	mov	sp, r7
 80095ba:	b002      	add	sp, #8
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	200006ec 	.word	0x200006ec

080095c4 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	b08d      	sub	sp, #52	; 0x34
 80095c8:	af04      	add	r7, sp, #16
 80095ca:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 80095cc:	2508      	movs	r5, #8
 80095ce:	1979      	adds	r1, r7, r5
 80095d0:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <my_rtc_get_dt_s+0x7c>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	0018      	movs	r0, r3
 80095d6:	f7fc f881 	bl	80056dc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80095da:	241c      	movs	r4, #28
 80095dc:	1939      	adds	r1, r7, r4
 80095de:	4b18      	ldr	r3, [pc, #96]	; (8009640 <my_rtc_get_dt_s+0x7c>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	0018      	movs	r0, r3
 80095e4:	f7fc f968 	bl	80058b8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 80095e8:	0021      	movs	r1, r4
 80095ea:	187b      	adds	r3, r7, r1
 80095ec:	78db      	ldrb	r3, [r3, #3]
 80095ee:	22fa      	movs	r2, #250	; 0xfa
 80095f0:	00d2      	lsls	r2, r2, #3
 80095f2:	189a      	adds	r2, r3, r2
 80095f4:	187b      	adds	r3, r7, r1
 80095f6:	785b      	ldrb	r3, [r3, #1]
 80095f8:	469c      	mov	ip, r3
 80095fa:	187b      	adds	r3, r7, r1
 80095fc:	789b      	ldrb	r3, [r3, #2]
 80095fe:	001c      	movs	r4, r3
 8009600:	0028      	movs	r0, r5
 8009602:	183b      	adds	r3, r7, r0
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	001d      	movs	r5, r3
 8009608:	183b      	adds	r3, r7, r0
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	001e      	movs	r6, r3
 800960e:	183b      	adds	r3, r7, r0
 8009610:	789b      	ldrb	r3, [r3, #2]
 8009612:	490c      	ldr	r1, [pc, #48]	; (8009644 <my_rtc_get_dt_s+0x80>)
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	9303      	str	r3, [sp, #12]
 8009618:	9602      	str	r6, [sp, #8]
 800961a:	9501      	str	r5, [sp, #4]
 800961c:	9400      	str	r4, [sp, #0]
 800961e:	4663      	mov	r3, ip
 8009620:	f002 f8ce 	bl	800b7c0 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009624:	211c      	movs	r1, #28
 8009626:	187b      	adds	r3, r7, r1
 8009628:	78db      	ldrb	r3, [r3, #3]
 800962a:	b29b      	uxth	r3, r3
 800962c:	22fa      	movs	r2, #250	; 0xfa
 800962e:	00d2      	lsls	r2, r2, #3
 8009630:	4694      	mov	ip, r2
 8009632:	4463      	add	r3, ip
 8009634:	b29b      	uxth	r3, r3
}
 8009636:	0018      	movs	r0, r3
 8009638:	46bd      	mov	sp, r7
 800963a:	b009      	add	sp, #36	; 0x24
 800963c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	200006ec 	.word	0x200006ec
 8009644:	08013e28 	.word	0x08013e28

08009648 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964a:	b0a9      	sub	sp, #164	; 0xa4
 800964c:	af02      	add	r7, sp, #8
 800964e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009650:	2434      	movs	r4, #52	; 0x34
 8009652:	193a      	adds	r2, r7, r4
 8009654:	2548      	movs	r5, #72	; 0x48
 8009656:	197b      	adds	r3, r7, r5
 8009658:	0011      	movs	r1, r2
 800965a:	0018      	movs	r0, r3
 800965c:	f7ff ff9a 	bl	8009594 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009660:	2680      	movs	r6, #128	; 0x80
 8009662:	19bb      	adds	r3, r7, r6
 8009664:	0018      	movs	r0, r3
 8009666:	f7ff ffad 	bl	80095c4 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800966a:	4a36      	ldr	r2, [pc, #216]	; (8009744 <my_rtc_set_alarm+0xfc>)
 800966c:	4936      	ldr	r1, [pc, #216]	; (8009748 <my_rtc_set_alarm+0x100>)
 800966e:	234c      	movs	r3, #76	; 0x4c
 8009670:	18f8      	adds	r0, r7, r3
 8009672:	19bb      	adds	r3, r7, r6
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	232d      	movs	r3, #45	; 0x2d
 8009678:	f002 f8a2 	bl	800b7c0 <sprintf>
	send_debug_logs ( m ) ;
 800967c:	234c      	movs	r3, #76	; 0x4c
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	0018      	movs	r0, r3
 8009682:	f7f9 fd65 	bl	8003150 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009686:	193a      	adds	r2, r7, r4
 8009688:	197b      	adds	r3, r7, r5
 800968a:	0011      	movs	r1, r2
 800968c:	0018      	movs	r0, r3
 800968e:	f000 f90d 	bl	80098ac <my_conv_rtc2timestamp>
 8009692:	0002      	movs	r2, r0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	189b      	adds	r3, r3, r2
 8009698:	2094      	movs	r0, #148	; 0x94
 800969a:	183a      	adds	r2, r7, r0
 800969c:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800969e:	193a      	adds	r2, r7, r4
 80096a0:	1979      	adds	r1, r7, r5
 80096a2:	1838      	adds	r0, r7, r0
 80096a4:	6803      	ldr	r3, [r0, #0]
 80096a6:	0018      	movs	r0, r3
 80096a8:	f000 f974 	bl	8009994 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 80096ac:	193b      	adds	r3, r7, r4
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	210c      	movs	r1, #12
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 80096b6:	193b      	adds	r3, r7, r4
 80096b8:	785a      	ldrb	r2, [r3, #1]
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 80096be:	193b      	adds	r3, r7, r4
 80096c0:	789a      	ldrb	r2, [r3, #2]
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 80096c6:	0008      	movs	r0, r1
 80096c8:	183b      	adds	r3, r7, r0
 80096ca:	2200      	movs	r2, #0
 80096cc:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80096ce:	183b      	adds	r3, r7, r0
 80096d0:	2200      	movs	r2, #0
 80096d2:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 80096d4:	183b      	adds	r3, r7, r0
 80096d6:	2200      	movs	r2, #0
 80096d8:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 80096da:	183b      	adds	r3, r7, r0
 80096dc:	2200      	movs	r2, #0
 80096de:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 80096e0:	183b      	adds	r3, r7, r0
 80096e2:	2200      	movs	r2, #0
 80096e4:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 80096e6:	183b      	adds	r3, r7, r0
 80096e8:	2200      	movs	r2, #0
 80096ea:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 80096ec:	197b      	adds	r3, r7, r5
 80096ee:	7899      	ldrb	r1, [r3, #2]
 80096f0:	183b      	adds	r3, r7, r0
 80096f2:	2220      	movs	r2, #32
 80096f4:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 80096f6:	183b      	adds	r3, r7, r0
 80096f8:	2280      	movs	r2, #128	; 0x80
 80096fa:	0052      	lsls	r2, r2, #1
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 80096fe:	1839      	adds	r1, r7, r0
 8009700:	4b12      	ldr	r3, [pc, #72]	; (800974c <my_rtc_set_alarm+0x104>)
 8009702:	2200      	movs	r2, #0
 8009704:	0018      	movs	r0, r3
 8009706:	f7fc f925 	bl	8005954 <HAL_RTC_SetAlarm_IT>
 800970a:	1e03      	subs	r3, r0, #0
 800970c:	d114      	bne.n	8009738 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800970e:	19ba      	adds	r2, r7, r6
 8009710:	1939      	adds	r1, r7, r4
 8009712:	197b      	adds	r3, r7, r5
 8009714:	0018      	movs	r0, r3
 8009716:	f000 f9ff 	bl	8009b18 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800971a:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <my_rtc_set_alarm+0xfc>)
 800971c:	490a      	ldr	r1, [pc, #40]	; (8009748 <my_rtc_set_alarm+0x100>)
 800971e:	244c      	movs	r4, #76	; 0x4c
 8009720:	1938      	adds	r0, r7, r4
 8009722:	19bb      	adds	r3, r7, r6
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2341      	movs	r3, #65	; 0x41
 8009728:	f002 f84a 	bl	800b7c0 <sprintf>
		send_debug_logs ( m ) ;
 800972c:	193b      	adds	r3, r7, r4
 800972e:	0018      	movs	r0, r3
 8009730:	f7f9 fd0e 	bl	8003150 <send_debug_logs>
		return true ;
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009738:	2300      	movs	r3, #0
}
 800973a:	0018      	movs	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	b027      	add	sp, #156	; 0x9c
 8009740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	08013e48 	.word	0x08013e48
 8009748:	08013e64 	.word	0x08013e64
 800974c:	200006ec 	.word	0x200006ec

08009750 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009758:	2508      	movs	r5, #8
 800975a:	197b      	adds	r3, r7, r5
 800975c:	1cda      	adds	r2, r3, #3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0011      	movs	r1, r2
 8009762:	0018      	movs	r0, r3
 8009764:	f000 fc9e 	bl	800a0a4 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009768:	197b      	adds	r3, r7, r5
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	0011      	movs	r1, r2
 8009770:	0018      	movs	r0, r3
 8009772:	f000 fcd1 	bl	800a118 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009776:	197b      	adds	r3, r7, r5
 8009778:	1c9a      	adds	r2, r3, #2
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	0011      	movs	r1, r2
 800977e:	0018      	movs	r0, r3
 8009780:	f000 fd04 	bl	800a18c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009784:	240c      	movs	r4, #12
 8009786:	193a      	adds	r2, r7, r4
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	0011      	movs	r1, r2
 800978c:	0018      	movs	r0, r3
 800978e:	f000 fd37 	bl	800a200 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009792:	193b      	adds	r3, r7, r4
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	0011      	movs	r1, r2
 800979a:	0018      	movs	r0, r3
 800979c:	f000 fd6a 	bl	800a274 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 80097a0:	193b      	adds	r3, r7, r4
 80097a2:	1c9a      	adds	r2, r3, #2
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	0011      	movs	r1, r2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f000 fd9d 	bl	800a2e8 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 80097ae:	193b      	adds	r3, r7, r4
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	0011      	movs	r1, r2
 80097b6:	0018      	movs	r0, r3
 80097b8:	f000 fdd0 	bl	800a35c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80097bc:	193b      	adds	r3, r7, r4
 80097be:	2200      	movs	r2, #0
 80097c0:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80097c2:	193b      	adds	r3, r7, r4
 80097c4:	2200      	movs	r2, #0
 80097c6:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80097ca:	0018      	movs	r0, r3
 80097cc:	f7fc fb31 	bl	8005e32 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 80097d0:	1939      	adds	r1, r7, r4
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7fb fed8 	bl	800558c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 80097dc:	1979      	adds	r1, r7, r5
 80097de:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7fb ffd6 	bl	8005794 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 80097e8:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7fc fb55 	bl	8005e9a <HAL_RTCEx_DisableBypassShadow>
}
 80097f0:	46c0      	nop			; (mov r8, r8)
 80097f2:	46bd      	mov	sp, r7
 80097f4:	b008      	add	sp, #32
 80097f6:	bdb0      	pop	{r4, r5, r7, pc}
 80097f8:	200006ec 	.word	0x200006ec

080097fc <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2100      	movs	r1, #0
 8009808:	0018      	movs	r0, r3
 800980a:	f001 fe3d 	bl	800b488 <strtod>
 800980e:	0002      	movs	r2, r0
 8009810:	000b      	movs	r3, r1
 8009812:	60ba      	str	r2, [r7, #8]
 8009814:	60fb      	str	r3, [r7, #12]
    return d ;
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	68fb      	ldr	r3, [r7, #12]
}
 800981a:	0010      	movs	r0, r2
 800981c:	0019      	movs	r1, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	b004      	add	sp, #16
 8009822:	bd80      	pop	{r7, pc}

08009824 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	0008      	movs	r0, r1
 800982e:	0011      	movs	r1, r2
 8009830:	1cfb      	adds	r3, r7, #3
 8009832:	1c02      	adds	r2, r0, #0
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	1cbb      	adds	r3, r7, #2
 8009838:	1c0a      	adds	r2, r1, #0
 800983a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800983c:	230f      	movs	r3, #15
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009844:	230e      	movs	r3, #14
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800984c:	e01c      	b.n	8009888 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800984e:	230f      	movs	r3, #15
 8009850:	18fb      	adds	r3, r7, r3
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	18d3      	adds	r3, r2, r3
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	1cfa      	adds	r2, r7, #3
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d105      	bne.n	800986e <my_find_char_position+0x4a>
			p++ ;
 8009862:	210e      	movs	r1, #14
 8009864:	187b      	adds	r3, r7, r1
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	187b      	adds	r3, r7, r1
 800986a:	3201      	adds	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800986e:	230e      	movs	r3, #14
 8009870:	18fa      	adds	r2, r7, r3
 8009872:	1cbb      	adds	r3, r7, #2
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d00e      	beq.n	800989a <my_find_char_position+0x76>
			break ;
		i++ ;
 800987c:	210f      	movs	r1, #15
 800987e:	187b      	adds	r3, r7, r1
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	187b      	adds	r3, r7, r1
 8009884:	3201      	adds	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009888:	230f      	movs	r3, #15
 800988a:	18fb      	adds	r3, r7, r3
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	18d3      	adds	r3, r2, r3
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1da      	bne.n	800984e <my_find_char_position+0x2a>
 8009898:	e000      	b.n	800989c <my_find_char_position+0x78>
			break ;
 800989a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800989c:	230f      	movs	r3, #15
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	781b      	ldrb	r3, [r3, #0]
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b004      	add	sp, #16
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	78db      	ldrb	r3, [r3, #3]
 80098ba:	22fa      	movs	r2, #250	; 0xfa
 80098bc:	00d2      	lsls	r2, r2, #3
 80098be:	4694      	mov	ip, r2
 80098c0:	4463      	add	r3, ip
 80098c2:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	0013      	movs	r3, r2
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	189b      	adds	r3, r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	189b      	adds	r3, r3, r2
 80098d0:	009a      	lsls	r2, r3, #2
 80098d2:	189a      	adds	r2, r3, r2
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	492c      	ldr	r1, [pc, #176]	; (8009988 <my_conv_rtc2timestamp+0xdc>)
 80098d8:	468c      	mov	ip, r1
 80098da:	4463      	add	r3, ip
 80098dc:	089b      	lsrs	r3, r3, #2
 80098de:	18d3      	adds	r3, r2, r3
 80098e0:	4a2a      	ldr	r2, [pc, #168]	; (800998c <my_conv_rtc2timestamp+0xe0>)
 80098e2:	4694      	mov	ip, r2
 80098e4:	4463      	add	r3, ip
 80098e6:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80098e8:	2300      	movs	r3, #0
 80098ea:	613b      	str	r3, [r7, #16]
 80098ec:	e00a      	b.n	8009904 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 80098ee:	4a28      	ldr	r2, [pc, #160]	; (8009990 <my_conv_rtc2timestamp+0xe4>)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	18d3      	adds	r3, r2, r3
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	001a      	movs	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	3301      	adds	r3, #1
 8009902:	613b      	str	r3, [r7, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	785b      	ldrb	r3, [r3, #1]
 8009908:	3b01      	subs	r3, #1
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	dbee      	blt.n	80098ee <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d908      	bls.n	800992a <my_conv_rtc2timestamp+0x7e>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	0018      	movs	r0, r3
 800991c:	f000 f8de 	bl	8009adc <my_conv_is_leap_year>
 8009920:	1e03      	subs	r3, r0, #0
 8009922:	d002      	beq.n	800992a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	3301      	adds	r3, #1
 8009928:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	789b      	ldrb	r3, [r3, #2]
 800992e:	001a      	movs	r2, r3
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	18d3      	adds	r3, r2, r3
 8009934:	3b01      	subs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	0013      	movs	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	189b      	adds	r3, r3, r2
 8009940:	011a      	lsls	r2, r3, #4
 8009942:	1ad2      	subs	r2, r2, r3
 8009944:	0113      	lsls	r3, r2, #4
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	01db      	lsls	r3, r3, #7
 800994a:	0019      	movs	r1, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	001a      	movs	r2, r3
 8009952:	0013      	movs	r3, r2
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	011a      	lsls	r2, r3, #4
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	0113      	lsls	r3, r2, #4
 800995e:	001a      	movs	r2, r3
 8009960:	0013      	movs	r3, r2
 8009962:	18ca      	adds	r2, r1, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	0019      	movs	r1, r3
 800996a:	000b      	movs	r3, r1
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	1a5b      	subs	r3, r3, r1
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	7892      	ldrb	r2, [r2, #2]
 8009978:	189b      	adds	r3, r3, r2
 800997a:	60bb      	str	r3, [r7, #8]

    return ts ;
 800997c:	68bb      	ldr	r3, [r7, #8]
}
 800997e:	0018      	movs	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	b006      	add	sp, #24
 8009984:	bd80      	pop	{r7, pc}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	fffff84f 	.word	0xfffff84f
 800998c:	fff50736 	.word	0xfff50736
 8009990:	08013f7c 	.word	0x08013f7c

08009994 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009994:	b590      	push	{r4, r7, lr}
 8009996:	b08b      	sub	sp, #44	; 0x2c
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	213c      	movs	r1, #60	; 0x3c
 80099a4:	0018      	movs	r0, r3
 80099a6:	f7f6 fc4f 	bl	8000248 <__aeabi_uidivmod>
 80099aa:	000b      	movs	r3, r1
 80099ac:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	213c      	movs	r1, #60	; 0x3c
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7f6 fbc2 	bl	800013c <__udivsi3>
 80099b8:	0003      	movs	r3, r0
 80099ba:	213c      	movs	r1, #60	; 0x3c
 80099bc:	0018      	movs	r0, r3
 80099be:	f7f6 fc43 	bl	8000248 <__aeabi_uidivmod>
 80099c2:	000b      	movs	r3, r1
 80099c4:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	22e1      	movs	r2, #225	; 0xe1
 80099ca:	0111      	lsls	r1, r2, #4
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7f6 fbb5 	bl	800013c <__udivsi3>
 80099d2:	0003      	movs	r3, r0
 80099d4:	2118      	movs	r1, #24
 80099d6:	0018      	movs	r0, r3
 80099d8:	f7f6 fc36 	bl	8000248 <__aeabi_uidivmod>
 80099dc:	000b      	movs	r3, r1
 80099de:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	493b      	ldr	r1, [pc, #236]	; (8009ad0 <my_conv_timestamp2rtc+0x13c>)
 80099e4:	0018      	movs	r0, r3
 80099e6:	f7f6 fba9 	bl	800013c <__udivsi3>
 80099ea:	0003      	movs	r3, r0
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 80099ee:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <my_conv_timestamp2rtc+0x140>)
 80099f0:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 80099f2:	e00d      	b.n	8009a10 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	0018      	movs	r0, r3
 80099f8:	f000 f870 	bl	8009adc <my_conv_is_leap_year>
 80099fc:	0003      	movs	r3, r0
 80099fe:	336e      	adds	r3, #110	; 0x6e
 8009a00:	33ff      	adds	r3, #255	; 0xff
 8009a02:	001a      	movs	r2, r3
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	0018      	movs	r0, r3
 8009a14:	f000 f862 	bl	8009adc <my_conv_is_leap_year>
 8009a18:	0003      	movs	r3, r0
 8009a1a:	336e      	adds	r3, #110	; 0x6e
 8009a1c:	33ff      	adds	r3, #255	; 0xff
 8009a1e:	001a      	movs	r2, r3
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d2e6      	bcs.n	80099f4 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009a2a:	e018      	b.n	8009a5e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009a2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ad8 <my_conv_timestamp2rtc+0x144>)
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	0052      	lsls	r2, r2, #1
 8009a32:	5ad3      	ldrh	r3, [r2, r3]
 8009a34:	001c      	movs	r4, r3
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d107      	bne.n	8009a4c <my_conv_timestamp2rtc+0xb8>
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f000 f84c 	bl	8009adc <my_conv_is_leap_year>
 8009a44:	1e03      	subs	r3, r0, #0
 8009a46:	d001      	beq.n	8009a4c <my_conv_timestamp2rtc+0xb8>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e000      	b.n	8009a4e <my_conv_timestamp2rtc+0xba>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	191b      	adds	r3, r3, r4
 8009a50:	001a      	movs	r2, r3
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009a5e:	4b1e      	ldr	r3, [pc, #120]	; (8009ad8 <my_conv_timestamp2rtc+0x144>)
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	0052      	lsls	r2, r2, #1
 8009a64:	5ad3      	ldrh	r3, [r2, r3]
 8009a66:	001c      	movs	r4, r3
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d107      	bne.n	8009a7e <my_conv_timestamp2rtc+0xea>
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	0018      	movs	r0, r3
 8009a72:	f000 f833 	bl	8009adc <my_conv_is_leap_year>
 8009a76:	1e03      	subs	r3, r0, #0
 8009a78:	d001      	beq.n	8009a7e <my_conv_timestamp2rtc+0xea>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <my_conv_timestamp2rtc+0xec>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	191b      	adds	r3, r3, r4
 8009a82:	001a      	movs	r2, r3
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d2d0      	bcs.n	8009a2c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	3330      	adds	r3, #48	; 0x30
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	709a      	strb	r2, [r3, #2]
}
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b00b      	add	sp, #44	; 0x2c
 8009acc:	bd90      	pop	{r4, r7, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	00015180 	.word	0x00015180
 8009ad4:	000007b2 	.word	0x000007b2
 8009ad8:	08013f88 	.word	0x08013f88

08009adc <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	4013      	ands	r3, r2
 8009aea:	d106      	bne.n	8009afa <my_conv_is_leap_year+0x1e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2164      	movs	r1, #100	; 0x64
 8009af0:	0018      	movs	r0, r3
 8009af2:	f7f6 fc93 	bl	800041c <__aeabi_idivmod>
 8009af6:	1e0b      	subs	r3, r1, #0
 8009af8:	d107      	bne.n	8009b0a <my_conv_is_leap_year+0x2e>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	22c8      	movs	r2, #200	; 0xc8
 8009afe:	0051      	lsls	r1, r2, #1
 8009b00:	0018      	movs	r0, r3
 8009b02:	f7f6 fc8b 	bl	800041c <__aeabi_idivmod>
 8009b06:	1e0b      	subs	r3, r1, #0
 8009b08:	d101      	bne.n	8009b0e <my_conv_is_leap_year+0x32>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <my_conv_is_leap_year+0x34>
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	0018      	movs	r0, r3
 8009b12:	46bd      	mov	sp, r7
 8009b14:	b002      	add	sp, #8
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af04      	add	r7, sp, #16
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	78db      	ldrb	r3, [r3, #3]
 8009b28:	22fa      	movs	r2, #250	; 0xfa
 8009b2a:	00d2      	lsls	r2, r2, #3
 8009b2c:	189a      	adds	r2, r3, r2
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	469c      	mov	ip, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	789b      	ldrb	r3, [r3, #2]
 8009b38:	001c      	movs	r4, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	001d      	movs	r5, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	001e      	movs	r6, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	789b      	ldrb	r3, [r3, #2]
 8009b4a:	4906      	ldr	r1, [pc, #24]	; (8009b64 <my_conv_dt_2_dts+0x4c>)
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	9303      	str	r3, [sp, #12]
 8009b50:	9602      	str	r6, [sp, #8]
 8009b52:	9501      	str	r5, [sp, #4]
 8009b54:	9400      	str	r4, [sp, #0]
 8009b56:	4663      	mov	r3, ip
 8009b58:	f001 fe32 	bl	800b7c0 <sprintf>
}
 8009b5c:	46c0      	nop			; (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b005      	add	sp, #20
 8009b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b64:	08013e70 	.word	0x08013e70

08009b68 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b24      	cmp	r3, #36	; 0x24
 8009b7a:	d117      	bne.n	8009bac <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	b2d1      	uxtb	r1, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	7011      	strb	r1, [r2, #0]
 8009b8e:	001a      	movs	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	189b      	adds	r3, r3, r2
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	7812      	ldrb	r2, [r2, #0]
 8009b98:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	001a      	movs	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e045      	b.n	8009c38 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b1f      	cmp	r3, #31
 8009bb2:	d907      	bls.n	8009bc4 <my_nmea_message+0x5c>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b7e      	cmp	r3, #126	; 0x7e
 8009bba:	d803      	bhi.n	8009bc4 <my_nmea_message+0x5c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <my_nmea_message+0x64>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b0d      	cmp	r3, #13
 8009bca:	d114      	bne.n	8009bf6 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	b2d1      	uxtb	r1, r2
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	7011      	strb	r1, [r2, #0]
 8009bd8:	001a      	movs	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	189b      	adds	r3, r3, r2
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	7812      	ldrb	r2, [r2, #0]
 8009be2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	001a      	movs	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	189b      	adds	r3, r3, r2
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e020      	b.n	8009c38 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b0a      	cmp	r3, #10
 8009bfc:	d11a      	bne.n	8009c34 <my_nmea_message+0xcc>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d916      	bls.n	8009c34 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	001a      	movs	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	189b      	adds	r3, r3, r2
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b0d      	cmp	r3, #13
 8009c20:	d108      	bne.n	8009c34 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	001a      	movs	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	189b      	adds	r3, r3, r2
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009c30:	2302      	movs	r3, #2
 8009c32:	e001      	b.n	8009c38 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009c34:	2301      	movs	r3, #1
 8009c36:	425b      	negs	r3, r3
}
 8009c38:	0018      	movs	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	b004      	add	sp, #16
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3309      	adds	r3, #9
 8009c4c:	781b      	ldrb	r3, [r3, #0]
}
 8009c4e:	0018      	movs	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	b002      	add	sp, #8
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009c56:	b5b0      	push	{r4, r5, r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	220f      	movs	r2, #15
 8009c62:	212c      	movs	r1, #44	; 0x2c
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7ff fddd 	bl	8009824 <my_find_char_position>
 8009c6a:	0003      	movs	r3, r0
 8009c6c:	001a      	movs	r2, r3
 8009c6e:	2517      	movs	r5, #23
 8009c70:	197b      	adds	r3, r7, r5
 8009c72:	3201      	adds	r2, #1
 8009c74:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2210      	movs	r2, #16
 8009c7a:	212c      	movs	r1, #44	; 0x2c
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f7ff fdd1 	bl	8009824 <my_find_char_position>
 8009c82:	0003      	movs	r3, r0
 8009c84:	0019      	movs	r1, r3
 8009c86:	2416      	movs	r4, #22
 8009c88:	193b      	adds	r3, r7, r4
 8009c8a:	197a      	adds	r2, r7, r5
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	1a8a      	subs	r2, r1, r2
 8009c90:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009c92:	193b      	adds	r3, r7, r4
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	3301      	adds	r3, #1
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f000 fb93 	bl	800a3c4 <malloc>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009ca2:	197b      	adds	r3, r7, r5
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	18d1      	adds	r1, r2, r3
 8009caa:	193b      	adds	r3, r7, r4
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	f001 fe34 	bl	800b91e <strncpy>
	pdop_s[pdop_length] = '\0';
 8009cb6:	193b      	adds	r3, r7, r4
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	18d3      	adds	r3, r2, r3
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f7ff fd99 	bl	80097fc <my_string2double_conv>
 8009cca:	0002      	movs	r2, r0
 8009ccc:	000b      	movs	r3, r1
 8009cce:	60ba      	str	r2, [r7, #8]
 8009cd0:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	f000 fb7f 	bl	800a3d8 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
}
 8009cde:	0010      	movs	r0, r2
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b006      	add	sp, #24
 8009ce6:	bdb0      	pop	{r4, r5, r7, pc}

08009ce8 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009cf0:	230f      	movs	r3, #15
 8009cf2:	18fb      	adds	r3, r7, r3
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009cf8:	230e      	movs	r3, #14
 8009cfa:	18fb      	adds	r3, r7, r3
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009d00:	e00f      	b.n	8009d22 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009d02:	220e      	movs	r2, #14
 8009d04:	18bb      	adds	r3, r7, r2
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	18ba      	adds	r2, r7, r2
 8009d0a:	1c59      	adds	r1, r3, #1
 8009d0c:	7011      	strb	r1, [r2, #0]
 8009d0e:	001a      	movs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	189b      	adds	r3, r3, r2
 8009d14:	7819      	ldrb	r1, [r3, #0]
 8009d16:	220f      	movs	r2, #15
 8009d18:	18bb      	adds	r3, r7, r2
 8009d1a:	18ba      	adds	r2, r7, r2
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	404a      	eors	r2, r1
 8009d20:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009d22:	210e      	movs	r1, #14
 8009d24:	187b      	adds	r3, r7, r1
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	18d3      	adds	r3, r2, r3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d30:	d00a      	beq.n	8009d48 <is_my_nmea_checksum_ok+0x60>
 8009d32:	187b      	adds	r3, r7, r1
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	18d3      	adds	r3, r2, r3
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <is_my_nmea_checksum_ok+0x60>
 8009d40:	187b      	adds	r3, r7, r1
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1dc      	bne.n	8009d02 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009d48:	230f      	movs	r3, #15
 8009d4a:	18fb      	adds	r3, r7, r3
 8009d4c:	781c      	ldrb	r4, [r3, #0]
 8009d4e:	210e      	movs	r1, #14
 8009d50:	187b      	adds	r3, r7, r1
 8009d52:	187a      	adds	r2, r7, r1
 8009d54:	7812      	ldrb	r2, [r2, #0]
 8009d56:	3201      	adds	r2, #1
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	187b      	adds	r3, r7, r1
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	18d3      	adds	r3, r2, r3
 8009d62:	2210      	movs	r2, #16
 8009d64:	2100      	movs	r1, #0
 8009d66:	0018      	movs	r0, r3
 8009d68:	f001 fc26 	bl	800b5b8 <strtol>
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	1ae3      	subs	r3, r4, r3
 8009d70:	425a      	negs	r2, r3
 8009d72:	4153      	adcs	r3, r2
 8009d74:	b2db      	uxtb	r3, r3
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b005      	add	sp, #20
 8009d7c:	bd90      	pop	{r4, r7, pc}
	...

08009d80 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009d80:	b5b0      	push	{r4, r5, r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	000a      	movs	r2, r1
 8009d8a:	1cfb      	adds	r3, r7, #3
 8009d8c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009d8e:	2308      	movs	r3, #8
 8009d90:	18fa      	adds	r2, r7, r3
 8009d92:	492f      	ldr	r1, [pc, #188]	; (8009e50 <nmea2decimal+0xd0>)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	0018      	movs	r0, r3
 8009d98:	f001 fd32 	bl	800b800 <sscanf>
    min = deg / 100 ;
 8009d9c:	68b8      	ldr	r0, [r7, #8]
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <nmea2decimal+0xd4>)
 8009da4:	f7f7 f868 	bl	8000e78 <__aeabi_ddiv>
 8009da8:	0002      	movs	r2, r0
 8009daa:	000b      	movs	r3, r1
 8009dac:	613a      	str	r2, [r7, #16]
 8009dae:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009db0:	6938      	ldr	r0, [r7, #16]
 8009db2:	6979      	ldr	r1, [r7, #20]
 8009db4:	f7f8 fabc 	bl	8002330 <__aeabi_d2iz>
 8009db8:	0003      	movs	r3, r0
 8009dba:	0018      	movs	r0, r3
 8009dbc:	f7f8 faee 	bl	800239c <__aeabi_i2d>
 8009dc0:	0002      	movs	r2, r0
 8009dc2:	000b      	movs	r3, r1
 8009dc4:	60ba      	str	r2, [r7, #8]
 8009dc6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6938      	ldr	r0, [r7, #16]
 8009dce:	6979      	ldr	r1, [r7, #20]
 8009dd0:	f7f7 ff0e 	bl	8001bf0 <__aeabi_dsub>
 8009dd4:	0002      	movs	r2, r0
 8009dd6:	000b      	movs	r3, r1
 8009dd8:	0010      	movs	r0, r2
 8009dda:	0019      	movs	r1, r3
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4b1e      	ldr	r3, [pc, #120]	; (8009e58 <nmea2decimal+0xd8>)
 8009de0:	f7f7 fc44 	bl	800166c <__aeabi_dmul>
 8009de4:	0002      	movs	r2, r0
 8009de6:	000b      	movs	r3, r1
 8009de8:	613a      	str	r2, [r7, #16]
 8009dea:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009dec:	2200      	movs	r2, #0
 8009dee:	4b1b      	ldr	r3, [pc, #108]	; (8009e5c <nmea2decimal+0xdc>)
 8009df0:	6938      	ldr	r0, [r7, #16]
 8009df2:	6979      	ldr	r1, [r7, #20]
 8009df4:	f7f7 f840 	bl	8000e78 <__aeabi_ddiv>
 8009df8:	0002      	movs	r2, r0
 8009dfa:	000b      	movs	r3, r1
 8009dfc:	613a      	str	r2, [r7, #16]
 8009dfe:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009e00:	1cfb      	adds	r3, r7, #3
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b53      	cmp	r3, #83	; 0x53
 8009e06:	d003      	beq.n	8009e10 <nmea2decimal+0x90>
 8009e08:	1cfb      	adds	r3, r7, #3
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b57      	cmp	r3, #87	; 0x57
 8009e0e:	d10e      	bne.n	8009e2e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009e10:	68b8      	ldr	r0, [r7, #8]
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f7f6 fcce 	bl	80007b8 <__aeabi_dadd>
 8009e1c:	0002      	movs	r2, r0
 8009e1e:	000b      	movs	r3, r1
 8009e20:	0011      	movs	r1, r2
 8009e22:	000c      	movs	r4, r1
 8009e24:	2180      	movs	r1, #128	; 0x80
 8009e26:	0609      	lsls	r1, r1, #24
 8009e28:	4059      	eors	r1, r3
 8009e2a:	000d      	movs	r5, r1
 8009e2c:	e009      	b.n	8009e42 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009e2e:	68b8      	ldr	r0, [r7, #8]
 8009e30:	68f9      	ldr	r1, [r7, #12]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f7f6 fcbf 	bl	80007b8 <__aeabi_dadd>
 8009e3a:	0002      	movs	r2, r0
 8009e3c:	000b      	movs	r3, r1
 8009e3e:	0014      	movs	r4, r2
 8009e40:	001d      	movs	r5, r3
}
 8009e42:	0022      	movs	r2, r4
 8009e44:	002b      	movs	r3, r5
 8009e46:	0010      	movs	r0, r2
 8009e48:	0019      	movs	r1, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b006      	add	sp, #24
 8009e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e50:	08013e90 	.word	0x08013e90
 8009e54:	40590000 	.word	0x40590000
 8009e58:	40240000 	.word	0x40240000
 8009e5c:	40180000 	.word	0x40180000

08009e60 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e62:	b08d      	sub	sp, #52	; 0x34
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	212c      	movs	r1, #44	; 0x2c
 8009e70:	0018      	movs	r0, r3
 8009e72:	f7ff fcd7 	bl	8009824 <my_find_char_position>
 8009e76:	0003      	movs	r3, r0
 8009e78:	001a      	movs	r2, r3
 8009e7a:	252f      	movs	r5, #47	; 0x2f
 8009e7c:	197b      	adds	r3, r7, r5
 8009e7e:	3201      	adds	r2, #1
 8009e80:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2202      	movs	r2, #2
 8009e86:	212c      	movs	r1, #44	; 0x2c
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f7ff fccb 	bl	8009824 <my_find_char_position>
 8009e8e:	0003      	movs	r3, r0
 8009e90:	0019      	movs	r1, r3
 8009e92:	242e      	movs	r4, #46	; 0x2e
 8009e94:	193b      	adds	r3, r7, r4
 8009e96:	197a      	adds	r2, r7, r5
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	1a8a      	subs	r2, r1, r2
 8009e9c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009e9e:	193b      	adds	r3, r7, r4
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 fa8d 	bl	800a3c4 <malloc>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009eae:	197b      	adds	r3, r7, r5
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	18d1      	adds	r1, r2, r3
 8009eb6:	193b      	adds	r3, r7, r4
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f001 fd2e 	bl	800b91e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8009ec2:	193b      	adds	r3, r7, r4
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec8:	18d3      	adds	r3, r2, r3
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009ece:	197b      	adds	r3, r7, r5
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	193b      	adds	r3, r7, r4
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	18d3      	adds	r3, r2, r3
 8009ed8:	3301      	adds	r3, #1
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	18d2      	adds	r2, r2, r3
 8009ede:	2627      	movs	r6, #39	; 0x27
 8009ee0:	19bb      	adds	r3, r7, r6
 8009ee2:	7812      	ldrb	r2, [r2, #0]
 8009ee4:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8009ee6:	19bb      	adds	r3, r7, r6
 8009ee8:	781a      	ldrb	r2, [r3, #0]
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	0011      	movs	r1, r2
 8009eee:	0018      	movs	r0, r3
 8009ef0:	f7ff ff46 	bl	8009d80 <nmea2decimal>
 8009ef4:	0002      	movs	r2, r0
 8009ef6:	000b      	movs	r3, r1
 8009ef8:	61ba      	str	r2, [r7, #24]
 8009efa:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	0018      	movs	r0, r3
 8009f00:	f000 fa6a 	bl	800a3d8 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8009f04:	2200      	movs	r2, #0
 8009f06:	4b49      	ldr	r3, [pc, #292]	; (800a02c <my_nmea_get_gngll_coordinates+0x1cc>)
 8009f08:	69b8      	ldr	r0, [r7, #24]
 8009f0a:	69f9      	ldr	r1, [r7, #28]
 8009f0c:	f7f7 fbae 	bl	800166c <__aeabi_dmul>
 8009f10:	0002      	movs	r2, r0
 8009f12:	000b      	movs	r3, r1
 8009f14:	0010      	movs	r0, r2
 8009f16:	0019      	movs	r1, r3
 8009f18:	f008 fa1e 	bl	8012358 <round>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4b43      	ldr	r3, [pc, #268]	; (800a02c <my_nmea_get_gngll_coordinates+0x1cc>)
 8009f20:	f7f6 ffaa 	bl	8000e78 <__aeabi_ddiv>
 8009f24:	0002      	movs	r2, r0
 8009f26:	000b      	movs	r3, r1
 8009f28:	61ba      	str	r2, [r7, #24]
 8009f2a:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4b40      	ldr	r3, [pc, #256]	; (800a030 <my_nmea_get_gngll_coordinates+0x1d0>)
 8009f30:	69b8      	ldr	r0, [r7, #24]
 8009f32:	69f9      	ldr	r1, [r7, #28]
 8009f34:	f7f7 fb9a 	bl	800166c <__aeabi_dmul>
 8009f38:	0002      	movs	r2, r0
 8009f3a:	000b      	movs	r3, r1
 8009f3c:	0010      	movs	r0, r2
 8009f3e:	0019      	movs	r1, r3
 8009f40:	f7f8 f9f6 	bl	8002330 <__aeabi_d2iz>
 8009f44:	0002      	movs	r2, r0
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2203      	movs	r2, #3
 8009f4e:	212c      	movs	r1, #44	; 0x2c
 8009f50:	0018      	movs	r0, r3
 8009f52:	f7ff fc67 	bl	8009824 <my_find_char_position>
 8009f56:	0003      	movs	r3, r0
 8009f58:	001a      	movs	r2, r3
 8009f5a:	197b      	adds	r3, r7, r5
 8009f5c:	3201      	adds	r2, #1
 8009f5e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2204      	movs	r2, #4
 8009f64:	212c      	movs	r1, #44	; 0x2c
 8009f66:	0018      	movs	r0, r3
 8009f68:	f7ff fc5c 	bl	8009824 <my_find_char_position>
 8009f6c:	0003      	movs	r3, r0
 8009f6e:	0019      	movs	r1, r3
 8009f70:	193b      	adds	r3, r7, r4
 8009f72:	197a      	adds	r2, r7, r5
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	1a8a      	subs	r2, r1, r2
 8009f78:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009f7a:	193b      	adds	r3, r7, r4
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 fa1f 	bl	800a3c4 <malloc>
 8009f86:	0003      	movs	r3, r0
 8009f88:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009f8a:	197b      	adds	r3, r7, r5
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	18d1      	adds	r1, r2, r3
 8009f92:	193b      	adds	r3, r7, r4
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f001 fcc0 	bl	800b91e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 8009f9e:	193b      	adds	r3, r7, r4
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	18d3      	adds	r3, r2, r3
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8009faa:	197b      	adds	r3, r7, r5
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	193b      	adds	r3, r7, r4
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	18d2      	adds	r2, r2, r3
 8009fba:	19bb      	adds	r3, r7, r6
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8009fc0:	19bb      	adds	r3, r7, r6
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	0011      	movs	r1, r2
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7ff fed9 	bl	8009d80 <nmea2decimal>
 8009fce:	0002      	movs	r2, r0
 8009fd0:	000b      	movs	r3, r1
 8009fd2:	60ba      	str	r2, [r7, #8]
 8009fd4:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 f9fd 	bl	800a3d8 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4b12      	ldr	r3, [pc, #72]	; (800a02c <my_nmea_get_gngll_coordinates+0x1cc>)
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	f7f7 fb41 	bl	800166c <__aeabi_dmul>
 8009fea:	0002      	movs	r2, r0
 8009fec:	000b      	movs	r3, r1
 8009fee:	0010      	movs	r0, r2
 8009ff0:	0019      	movs	r1, r3
 8009ff2:	f008 f9b1 	bl	8012358 <round>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <my_nmea_get_gngll_coordinates+0x1cc>)
 8009ffa:	f7f6 ff3d 	bl	8000e78 <__aeabi_ddiv>
 8009ffe:	0002      	movs	r2, r0
 800a000:	000b      	movs	r3, r1
 800a002:	60ba      	str	r2, [r7, #8]
 800a004:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a006:	2200      	movs	r2, #0
 800a008:	4b09      	ldr	r3, [pc, #36]	; (800a030 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	f7f7 fb2d 	bl	800166c <__aeabi_dmul>
 800a012:	0002      	movs	r2, r0
 800a014:	000b      	movs	r3, r1
 800a016:	0010      	movs	r0, r2
 800a018:	0019      	movs	r1, r3
 800a01a:	f7f8 f989 	bl	8002330 <__aeabi_d2iz>
 800a01e:	0002      	movs	r2, r0
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	605a      	str	r2, [r3, #4]
}
 800a024:	46c0      	nop			; (mov r8, r8)
 800a026:	46bd      	mov	sp, r7
 800a028:	b00d      	add	sp, #52	; 0x34
 800a02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a02c:	412e8480 	.word	0x412e8480
 800a030:	416312d0 	.word	0x416312d0

0800a034 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a034:	b5b0      	push	{r4, r5, r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a03c:	240e      	movs	r4, #14
 800a03e:	193b      	adds	r3, r7, r4
 800a040:	2200      	movs	r2, #0
 800a042:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2203      	movs	r2, #3
 800a048:	212c      	movs	r1, #44	; 0x2c
 800a04a:	0018      	movs	r0, r3
 800a04c:	f7ff fbea 	bl	8009824 <my_find_char_position>
 800a050:	0003      	movs	r3, r0
 800a052:	001a      	movs	r2, r3
 800a054:	2517      	movs	r5, #23
 800a056:	197b      	adds	r3, r7, r5
 800a058:	3201      	adds	r2, #1
 800a05a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a05c:	2003      	movs	r0, #3
 800a05e:	f000 f9b1 	bl	800a3c4 <malloc>
 800a062:	0003      	movs	r3, r0
 800a064:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a066:	197b      	adds	r3, r7, r5
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	18d1      	adds	r1, r2, r3
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2202      	movs	r2, #2
 800a072:	0018      	movs	r0, r3
 800a074:	f001 fc53 	bl	800b91e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	3302      	adds	r3, #2
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a080:	193a      	adds	r2, r7, r4
 800a082:	4907      	ldr	r1, [pc, #28]	; (800a0a0 <my_nmea_get_gsv_tns+0x6c>)
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	0018      	movs	r0, r3
 800a088:	f001 fbba 	bl	800b800 <sscanf>
	free ( s ) ;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	0018      	movs	r0, r3
 800a090:	f000 f9a2 	bl	800a3d8 <free>
	return tns ;
 800a094:	193b      	adds	r3, r7, r4
 800a096:	881b      	ldrh	r3, [r3, #0]
}
 800a098:	0018      	movs	r0, r3
 800a09a:	46bd      	mov	sp, r7
 800a09c:	b006      	add	sp, #24
 800a09e:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a0:	08013e9c 	.word	0x08013e9c

0800a0a4 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a0a4:	b590      	push	{r4, r7, lr}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2209      	movs	r2, #9
 800a0b2:	212c      	movs	r1, #44	; 0x2c
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7ff fbb5 	bl	8009824 <my_find_char_position>
 800a0ba:	0003      	movs	r3, r0
 800a0bc:	001a      	movs	r2, r3
 800a0be:	2417      	movs	r4, #23
 800a0c0:	193b      	adds	r3, r7, r4
 800a0c2:	3205      	adds	r2, #5
 800a0c4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a0c6:	2003      	movs	r0, #3
 800a0c8:	f000 f97c 	bl	800a3c4 <malloc>
 800a0cc:	0003      	movs	r3, r0
 800a0ce:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a0d0:	193b      	adds	r3, r7, r4
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	18d1      	adds	r1, r2, r3
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f001 fc1e 	bl	800b91e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a0ea:	240e      	movs	r4, #14
 800a0ec:	193a      	adds	r2, r7, r4
 800a0ee:	4909      	ldr	r1, [pc, #36]	; (800a114 <my_nmea_get_rmc_date_yy+0x70>)
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f001 fb84 	bl	800b800 <sscanf>
	free ( s ) ;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 f96c 	bl	800a3d8 <free>
	*yy = (uint8_t) temp ;
 800a100:	193b      	adds	r3, r7, r4
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	701a      	strb	r2, [r3, #0]

}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b007      	add	sp, #28
 800a110:	bd90      	pop	{r4, r7, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	08013e9c 	.word	0x08013e9c

0800a118 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a118:	b590      	push	{r4, r7, lr}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2209      	movs	r2, #9
 800a126:	212c      	movs	r1, #44	; 0x2c
 800a128:	0018      	movs	r0, r3
 800a12a:	f7ff fb7b 	bl	8009824 <my_find_char_position>
 800a12e:	0003      	movs	r3, r0
 800a130:	001a      	movs	r2, r3
 800a132:	2417      	movs	r4, #23
 800a134:	193b      	adds	r3, r7, r4
 800a136:	3203      	adds	r2, #3
 800a138:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a13a:	2003      	movs	r0, #3
 800a13c:	f000 f942 	bl	800a3c4 <malloc>
 800a140:	0003      	movs	r3, r0
 800a142:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a144:	193b      	adds	r3, r7, r4
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	18d1      	adds	r1, r2, r3
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2202      	movs	r2, #2
 800a150:	0018      	movs	r0, r3
 800a152:	f001 fbe4 	bl	800b91e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	3302      	adds	r3, #2
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a15e:	240e      	movs	r4, #14
 800a160:	193a      	adds	r2, r7, r4
 800a162:	4909      	ldr	r1, [pc, #36]	; (800a188 <my_nmea_get_rmc_date_mm+0x70>)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	0018      	movs	r0, r3
 800a168:	f001 fb4a 	bl	800b800 <sscanf>
	free ( s ) ;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	0018      	movs	r0, r3
 800a170:	f000 f932 	bl	800a3d8 <free>
	*mm = (uint8_t) temp ;
 800a174:	193b      	adds	r3, r7, r4
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	701a      	strb	r2, [r3, #0]

}
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	46bd      	mov	sp, r7
 800a182:	b007      	add	sp, #28
 800a184:	bd90      	pop	{r4, r7, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	08013e9c 	.word	0x08013e9c

0800a18c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a18c:	b590      	push	{r4, r7, lr}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2209      	movs	r2, #9
 800a19a:	212c      	movs	r1, #44	; 0x2c
 800a19c:	0018      	movs	r0, r3
 800a19e:	f7ff fb41 	bl	8009824 <my_find_char_position>
 800a1a2:	0003      	movs	r3, r0
 800a1a4:	001a      	movs	r2, r3
 800a1a6:	2417      	movs	r4, #23
 800a1a8:	193b      	adds	r3, r7, r4
 800a1aa:	3201      	adds	r2, #1
 800a1ac:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a1ae:	2003      	movs	r0, #3
 800a1b0:	f000 f908 	bl	800a3c4 <malloc>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1b8:	193b      	adds	r3, r7, r4
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	18d1      	adds	r1, r2, r3
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	f001 fbaa 	bl	800b91e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a1d2:	240e      	movs	r4, #14
 800a1d4:	193a      	adds	r2, r7, r4
 800a1d6:	4909      	ldr	r1, [pc, #36]	; (800a1fc <my_nmea_get_rmc_date_dd+0x70>)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f001 fb10 	bl	800b800 <sscanf>
	free ( s ) ;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f000 f8f8 	bl	800a3d8 <free>
	*dd = (uint8_t) temp ;
 800a1e8:	193b      	adds	r3, r7, r4
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	701a      	strb	r2, [r3, #0]

}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	b007      	add	sp, #28
 800a1f8:	bd90      	pop	{r4, r7, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	08013e9c 	.word	0x08013e9c

0800a200 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	212c      	movs	r1, #44	; 0x2c
 800a210:	0018      	movs	r0, r3
 800a212:	f7ff fb07 	bl	8009824 <my_find_char_position>
 800a216:	0003      	movs	r3, r0
 800a218:	001a      	movs	r2, r3
 800a21a:	2417      	movs	r4, #23
 800a21c:	193b      	adds	r3, r7, r4
 800a21e:	3201      	adds	r2, #1
 800a220:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a222:	2003      	movs	r0, #3
 800a224:	f000 f8ce 	bl	800a3c4 <malloc>
 800a228:	0003      	movs	r3, r0
 800a22a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a22c:	193b      	adds	r3, r7, r4
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	18d1      	adds	r1, r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2202      	movs	r2, #2
 800a238:	0018      	movs	r0, r3
 800a23a:	f001 fb70 	bl	800b91e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	3302      	adds	r3, #2
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a246:	240e      	movs	r4, #14
 800a248:	193a      	adds	r2, r7, r4
 800a24a:	4909      	ldr	r1, [pc, #36]	; (800a270 <my_nmea_get_rmc_utc_hh+0x70>)
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	0018      	movs	r0, r3
 800a250:	f001 fad6 	bl	800b800 <sscanf>
	free ( s ) ;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f8be 	bl	800a3d8 <free>
	*hh = (uint8_t) temp ;
 800a25c:	193b      	adds	r3, r7, r4
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b2da      	uxtb	r2, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	701a      	strb	r2, [r3, #0]

}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	46bd      	mov	sp, r7
 800a26a:	b007      	add	sp, #28
 800a26c:	bd90      	pop	{r4, r7, pc}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	08013e9c 	.word	0x08013e9c

0800a274 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	212c      	movs	r1, #44	; 0x2c
 800a284:	0018      	movs	r0, r3
 800a286:	f7ff facd 	bl	8009824 <my_find_char_position>
 800a28a:	0003      	movs	r3, r0
 800a28c:	001a      	movs	r2, r3
 800a28e:	2417      	movs	r4, #23
 800a290:	193b      	adds	r3, r7, r4
 800a292:	3203      	adds	r2, #3
 800a294:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a296:	2003      	movs	r0, #3
 800a298:	f000 f894 	bl	800a3c4 <malloc>
 800a29c:	0003      	movs	r3, r0
 800a29e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2a0:	193b      	adds	r3, r7, r4
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	18d1      	adds	r1, r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f001 fb36 	bl	800b91e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	3302      	adds	r3, #2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a2ba:	240e      	movs	r4, #14
 800a2bc:	193a      	adds	r2, r7, r4
 800a2be:	4909      	ldr	r1, [pc, #36]	; (800a2e4 <my_nmea_get_rmc_utc_mm+0x70>)
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f001 fa9c 	bl	800b800 <sscanf>
	free ( s ) ;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f000 f884 	bl	800a3d8 <free>
	*mm = (uint8_t) temp ;
 800a2d0:	193b      	adds	r3, r7, r4
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	701a      	strb	r2, [r3, #0]

}
 800a2da:	46c0      	nop			; (mov r8, r8)
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	b007      	add	sp, #28
 800a2e0:	bd90      	pop	{r4, r7, pc}
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	08013e9c 	.word	0x08013e9c

0800a2e8 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	212c      	movs	r1, #44	; 0x2c
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f7ff fa93 	bl	8009824 <my_find_char_position>
 800a2fe:	0003      	movs	r3, r0
 800a300:	001a      	movs	r2, r3
 800a302:	2417      	movs	r4, #23
 800a304:	193b      	adds	r3, r7, r4
 800a306:	3205      	adds	r2, #5
 800a308:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a30a:	2003      	movs	r0, #3
 800a30c:	f000 f85a 	bl	800a3c4 <malloc>
 800a310:	0003      	movs	r3, r0
 800a312:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a314:	193b      	adds	r3, r7, r4
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	18d1      	adds	r1, r2, r3
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2202      	movs	r2, #2
 800a320:	0018      	movs	r0, r3
 800a322:	f001 fafc 	bl	800b91e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3302      	adds	r3, #2
 800a32a:	2200      	movs	r2, #0
 800a32c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a32e:	240e      	movs	r4, #14
 800a330:	193a      	adds	r2, r7, r4
 800a332:	4909      	ldr	r1, [pc, #36]	; (800a358 <my_nmea_get_rmc_utc_ss+0x70>)
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	0018      	movs	r0, r3
 800a338:	f001 fa62 	bl	800b800 <sscanf>
	free ( s ) ;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	0018      	movs	r0, r3
 800a340:	f000 f84a 	bl	800a3d8 <free>
	*ss = (uint8_t) temp ;
 800a344:	193b      	adds	r3, r7, r4
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	701a      	strb	r2, [r3, #0]

}
 800a34e:	46c0      	nop			; (mov r8, r8)
 800a350:	46bd      	mov	sp, r7
 800a352:	b007      	add	sp, #28
 800a354:	bd90      	pop	{r4, r7, pc}
 800a356:	46c0      	nop			; (mov r8, r8)
 800a358:	08013e9c 	.word	0x08013e9c

0800a35c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a35c:	b590      	push	{r4, r7, lr}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	212c      	movs	r1, #44	; 0x2c
 800a36c:	0018      	movs	r0, r3
 800a36e:	f7ff fa59 	bl	8009824 <my_find_char_position>
 800a372:	0003      	movs	r3, r0
 800a374:	001a      	movs	r2, r3
 800a376:	240f      	movs	r4, #15
 800a378:	193b      	adds	r3, r7, r4
 800a37a:	3208      	adds	r2, #8
 800a37c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a37e:	2004      	movs	r0, #4
 800a380:	f000 f820 	bl	800a3c4 <malloc>
 800a384:	0003      	movs	r3, r0
 800a386:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a388:	193b      	adds	r3, r7, r4
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	18d1      	adds	r1, r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2203      	movs	r2, #3
 800a394:	0018      	movs	r0, r3
 800a396:	f001 fac2 	bl	800b91e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	3303      	adds	r3, #3
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	4906      	ldr	r1, [pc, #24]	; (800a3c0 <my_nmea_get_rmc_utc_sss+0x64>)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f001 fa29 	bl	800b800 <sscanf>
	free ( s ) ;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f000 f811 	bl	800a3d8 <free>
}
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	b005      	add	sp, #20
 800a3bc:	bd90      	pop	{r4, r7, pc}
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	08013ea0 	.word	0x08013ea0

0800a3c4 <malloc>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <malloc+0x10>)
 800a3c8:	0001      	movs	r1, r0
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	f000 f80e 	bl	800a3ec <_malloc_r>
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	200006c8 	.word	0x200006c8

0800a3d8 <free>:
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <free+0x10>)
 800a3dc:	0001      	movs	r1, r0
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	f001 fbe4 	bl	800bbac <_free_r>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	200006c8 	.word	0x200006c8

0800a3ec <_malloc_r>:
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	000d      	movs	r5, r1
 800a3f0:	b087      	sub	sp, #28
 800a3f2:	350b      	adds	r5, #11
 800a3f4:	9001      	str	r0, [sp, #4]
 800a3f6:	2d16      	cmp	r5, #22
 800a3f8:	d908      	bls.n	800a40c <_malloc_r+0x20>
 800a3fa:	2207      	movs	r2, #7
 800a3fc:	4395      	bics	r5, r2
 800a3fe:	d506      	bpl.n	800a40e <_malloc_r+0x22>
 800a400:	230c      	movs	r3, #12
 800a402:	9a01      	ldr	r2, [sp, #4]
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	2000      	movs	r0, #0
 800a408:	b007      	add	sp, #28
 800a40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40c:	2510      	movs	r5, #16
 800a40e:	42a9      	cmp	r1, r5
 800a410:	d8f6      	bhi.n	800a400 <_malloc_r+0x14>
 800a412:	9801      	ldr	r0, [sp, #4]
 800a414:	f000 f9fe 	bl	800a814 <__malloc_lock>
 800a418:	23fc      	movs	r3, #252	; 0xfc
 800a41a:	4ebe      	ldr	r6, [pc, #760]	; (800a714 <_malloc_r+0x328>)
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	429d      	cmp	r5, r3
 800a420:	d219      	bcs.n	800a456 <_malloc_r+0x6a>
 800a422:	002a      	movs	r2, r5
 800a424:	3208      	adds	r2, #8
 800a426:	18b2      	adds	r2, r6, r2
 800a428:	0011      	movs	r1, r2
 800a42a:	6854      	ldr	r4, [r2, #4]
 800a42c:	3908      	subs	r1, #8
 800a42e:	08eb      	lsrs	r3, r5, #3
 800a430:	428c      	cmp	r4, r1
 800a432:	d103      	bne.n	800a43c <_malloc_r+0x50>
 800a434:	68d4      	ldr	r4, [r2, #12]
 800a436:	3302      	adds	r3, #2
 800a438:	42a2      	cmp	r2, r4
 800a43a:	d022      	beq.n	800a482 <_malloc_r+0x96>
 800a43c:	2203      	movs	r2, #3
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	68a1      	ldr	r1, [r4, #8]
 800a442:	4393      	bics	r3, r2
 800a444:	68e2      	ldr	r2, [r4, #12]
 800a446:	18e3      	adds	r3, r4, r3
 800a448:	60ca      	str	r2, [r1, #12]
 800a44a:	6091      	str	r1, [r2, #8]
 800a44c:	2201      	movs	r2, #1
 800a44e:	6859      	ldr	r1, [r3, #4]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
 800a454:	e02a      	b.n	800a4ac <_malloc_r+0xc0>
 800a456:	233f      	movs	r3, #63	; 0x3f
 800a458:	0a6a      	lsrs	r2, r5, #9
 800a45a:	d003      	beq.n	800a464 <_malloc_r+0x78>
 800a45c:	2a04      	cmp	r2, #4
 800a45e:	d82b      	bhi.n	800a4b8 <_malloc_r+0xcc>
 800a460:	09ab      	lsrs	r3, r5, #6
 800a462:	3338      	adds	r3, #56	; 0x38
 800a464:	2203      	movs	r2, #3
 800a466:	4694      	mov	ip, r2
 800a468:	00d9      	lsls	r1, r3, #3
 800a46a:	1989      	adds	r1, r1, r6
 800a46c:	68cc      	ldr	r4, [r1, #12]
 800a46e:	428c      	cmp	r4, r1
 800a470:	d006      	beq.n	800a480 <_malloc_r+0x94>
 800a472:	4660      	mov	r0, ip
 800a474:	6862      	ldr	r2, [r4, #4]
 800a476:	4382      	bics	r2, r0
 800a478:	1b57      	subs	r7, r2, r5
 800a47a:	2f0f      	cmp	r7, #15
 800a47c:	dd34      	ble.n	800a4e8 <_malloc_r+0xfc>
 800a47e:	3b01      	subs	r3, #1
 800a480:	3301      	adds	r3, #1
 800a482:	6934      	ldr	r4, [r6, #16]
 800a484:	49a4      	ldr	r1, [pc, #656]	; (800a718 <_malloc_r+0x32c>)
 800a486:	428c      	cmp	r4, r1
 800a488:	d055      	beq.n	800a536 <_malloc_r+0x14a>
 800a48a:	2003      	movs	r0, #3
 800a48c:	6862      	ldr	r2, [r4, #4]
 800a48e:	4382      	bics	r2, r0
 800a490:	1b50      	subs	r0, r2, r5
 800a492:	280f      	cmp	r0, #15
 800a494:	dd36      	ble.n	800a504 <_malloc_r+0x118>
 800a496:	2301      	movs	r3, #1
 800a498:	1967      	adds	r7, r4, r5
 800a49a:	431d      	orrs	r5, r3
 800a49c:	4303      	orrs	r3, r0
 800a49e:	6065      	str	r5, [r4, #4]
 800a4a0:	6177      	str	r7, [r6, #20]
 800a4a2:	6137      	str	r7, [r6, #16]
 800a4a4:	60f9      	str	r1, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607b      	str	r3, [r7, #4]
 800a4aa:	50a0      	str	r0, [r4, r2]
 800a4ac:	9801      	ldr	r0, [sp, #4]
 800a4ae:	f000 f9b9 	bl	800a824 <__malloc_unlock>
 800a4b2:	0020      	movs	r0, r4
 800a4b4:	3008      	adds	r0, #8
 800a4b6:	e7a7      	b.n	800a408 <_malloc_r+0x1c>
 800a4b8:	2a14      	cmp	r2, #20
 800a4ba:	d802      	bhi.n	800a4c2 <_malloc_r+0xd6>
 800a4bc:	0013      	movs	r3, r2
 800a4be:	335b      	adds	r3, #91	; 0x5b
 800a4c0:	e7d0      	b.n	800a464 <_malloc_r+0x78>
 800a4c2:	2a54      	cmp	r2, #84	; 0x54
 800a4c4:	d802      	bhi.n	800a4cc <_malloc_r+0xe0>
 800a4c6:	0b2b      	lsrs	r3, r5, #12
 800a4c8:	336e      	adds	r3, #110	; 0x6e
 800a4ca:	e7cb      	b.n	800a464 <_malloc_r+0x78>
 800a4cc:	23aa      	movs	r3, #170	; 0xaa
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d802      	bhi.n	800a4da <_malloc_r+0xee>
 800a4d4:	0beb      	lsrs	r3, r5, #15
 800a4d6:	3377      	adds	r3, #119	; 0x77
 800a4d8:	e7c4      	b.n	800a464 <_malloc_r+0x78>
 800a4da:	4990      	ldr	r1, [pc, #576]	; (800a71c <_malloc_r+0x330>)
 800a4dc:	237e      	movs	r3, #126	; 0x7e
 800a4de:	428a      	cmp	r2, r1
 800a4e0:	d8c0      	bhi.n	800a464 <_malloc_r+0x78>
 800a4e2:	0cab      	lsrs	r3, r5, #18
 800a4e4:	337c      	adds	r3, #124	; 0x7c
 800a4e6:	e7bd      	b.n	800a464 <_malloc_r+0x78>
 800a4e8:	68e0      	ldr	r0, [r4, #12]
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	db08      	blt.n	800a500 <_malloc_r+0x114>
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	60d8      	str	r0, [r3, #12]
 800a4f2:	6083      	str	r3, [r0, #8]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	18a2      	adds	r2, r4, r2
 800a4f8:	6851      	ldr	r1, [r2, #4]
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	e7d5      	b.n	800a4ac <_malloc_r+0xc0>
 800a500:	0004      	movs	r4, r0
 800a502:	e7b4      	b.n	800a46e <_malloc_r+0x82>
 800a504:	6171      	str	r1, [r6, #20]
 800a506:	6131      	str	r1, [r6, #16]
 800a508:	2800      	cmp	r0, #0
 800a50a:	daf3      	bge.n	800a4f4 <_malloc_r+0x108>
 800a50c:	6871      	ldr	r1, [r6, #4]
 800a50e:	468c      	mov	ip, r1
 800a510:	2180      	movs	r1, #128	; 0x80
 800a512:	0089      	lsls	r1, r1, #2
 800a514:	428a      	cmp	r2, r1
 800a516:	d300      	bcc.n	800a51a <_malloc_r+0x12e>
 800a518:	e08c      	b.n	800a634 <_malloc_r+0x248>
 800a51a:	08d1      	lsrs	r1, r2, #3
 800a51c:	0950      	lsrs	r0, r2, #5
 800a51e:	2201      	movs	r2, #1
 800a520:	4082      	lsls	r2, r0
 800a522:	4660      	mov	r0, ip
 800a524:	4302      	orrs	r2, r0
 800a526:	6072      	str	r2, [r6, #4]
 800a528:	00ca      	lsls	r2, r1, #3
 800a52a:	1992      	adds	r2, r2, r6
 800a52c:	6891      	ldr	r1, [r2, #8]
 800a52e:	60e2      	str	r2, [r4, #12]
 800a530:	60a1      	str	r1, [r4, #8]
 800a532:	6094      	str	r4, [r2, #8]
 800a534:	60cc      	str	r4, [r1, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	4876      	ldr	r0, [pc, #472]	; (800a714 <_malloc_r+0x328>)
 800a53a:	1099      	asrs	r1, r3, #2
 800a53c:	408a      	lsls	r2, r1
 800a53e:	6841      	ldr	r1, [r0, #4]
 800a540:	4291      	cmp	r1, r2
 800a542:	d328      	bcc.n	800a596 <_malloc_r+0x1aa>
 800a544:	420a      	tst	r2, r1
 800a546:	d105      	bne.n	800a554 <_malloc_r+0x168>
 800a548:	2403      	movs	r4, #3
 800a54a:	43a3      	bics	r3, r4
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	3304      	adds	r3, #4
 800a550:	420a      	tst	r2, r1
 800a552:	d0fb      	beq.n	800a54c <_malloc_r+0x160>
 800a554:	496f      	ldr	r1, [pc, #444]	; (800a714 <_malloc_r+0x328>)
 800a556:	9104      	str	r1, [sp, #16]
 800a558:	00d9      	lsls	r1, r3, #3
 800a55a:	1841      	adds	r1, r0, r1
 800a55c:	468c      	mov	ip, r1
 800a55e:	000f      	movs	r7, r1
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	68fc      	ldr	r4, [r7, #12]
 800a564:	42bc      	cmp	r4, r7
 800a566:	d000      	beq.n	800a56a <_malloc_r+0x17e>
 800a568:	e09b      	b.n	800a6a2 <_malloc_r+0x2b6>
 800a56a:	2403      	movs	r4, #3
 800a56c:	9902      	ldr	r1, [sp, #8]
 800a56e:	3708      	adds	r7, #8
 800a570:	3101      	adds	r1, #1
 800a572:	9102      	str	r1, [sp, #8]
 800a574:	4221      	tst	r1, r4
 800a576:	d1f4      	bne.n	800a562 <_malloc_r+0x176>
 800a578:	2103      	movs	r1, #3
 800a57a:	420b      	tst	r3, r1
 800a57c:	d000      	beq.n	800a580 <_malloc_r+0x194>
 800a57e:	e0b7      	b.n	800a6f0 <_malloc_r+0x304>
 800a580:	6843      	ldr	r3, [r0, #4]
 800a582:	4393      	bics	r3, r2
 800a584:	6043      	str	r3, [r0, #4]
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	0052      	lsls	r2, r2, #1
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	4291      	cmp	r1, r2
 800a58e:	d302      	bcc.n	800a596 <_malloc_r+0x1aa>
 800a590:	2a00      	cmp	r2, #0
 800a592:	d000      	beq.n	800a596 <_malloc_r+0x1aa>
 800a594:	e0bb      	b.n	800a70e <_malloc_r+0x322>
 800a596:	2203      	movs	r2, #3
 800a598:	6883      	ldr	r3, [r0, #8]
 800a59a:	9302      	str	r3, [sp, #8]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	4393      	bics	r3, r2
 800a5a0:	9303      	str	r3, [sp, #12]
 800a5a2:	42ab      	cmp	r3, r5
 800a5a4:	d303      	bcc.n	800a5ae <_malloc_r+0x1c2>
 800a5a6:	1b59      	subs	r1, r3, r5
 800a5a8:	290f      	cmp	r1, #15
 800a5aa:	dd00      	ble.n	800a5ae <_malloc_r+0x1c2>
 800a5ac:	e123      	b.n	800a7f6 <_malloc_r+0x40a>
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	9a03      	ldr	r2, [sp, #12]
 800a5b2:	2008      	movs	r0, #8
 800a5b4:	189e      	adds	r6, r3, r2
 800a5b6:	4b5a      	ldr	r3, [pc, #360]	; (800a720 <_malloc_r+0x334>)
 800a5b8:	681f      	ldr	r7, [r3, #0]
 800a5ba:	f001 fa71 	bl	800baa0 <sysconf>
 800a5be:	4b59      	ldr	r3, [pc, #356]	; (800a724 <_malloc_r+0x338>)
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	197f      	adds	r7, r7, r5
 800a5c6:	9004      	str	r0, [sp, #16]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	d003      	beq.n	800a5d4 <_malloc_r+0x1e8>
 800a5cc:	1e7b      	subs	r3, r7, #1
 800a5ce:	181b      	adds	r3, r3, r0
 800a5d0:	4247      	negs	r7, r0
 800a5d2:	401f      	ands	r7, r3
 800a5d4:	0039      	movs	r1, r7
 800a5d6:	9801      	ldr	r0, [sp, #4]
 800a5d8:	f001 fa0e 	bl	800b9f8 <_sbrk_r>
 800a5dc:	0004      	movs	r4, r0
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	d100      	bne.n	800a5e4 <_malloc_r+0x1f8>
 800a5e2:	e0de      	b.n	800a7a2 <_malloc_r+0x3b6>
 800a5e4:	4286      	cmp	r6, r0
 800a5e6:	d904      	bls.n	800a5f2 <_malloc_r+0x206>
 800a5e8:	4b4a      	ldr	r3, [pc, #296]	; (800a714 <_malloc_r+0x328>)
 800a5ea:	9a02      	ldr	r2, [sp, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d000      	beq.n	800a5f2 <_malloc_r+0x206>
 800a5f0:	e0d7      	b.n	800a7a2 <_malloc_r+0x3b6>
 800a5f2:	4a4d      	ldr	r2, [pc, #308]	; (800a728 <_malloc_r+0x33c>)
 800a5f4:	6813      	ldr	r3, [r2, #0]
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9a04      	ldr	r2, [sp, #16]
 800a5fc:	3a01      	subs	r2, #1
 800a5fe:	42a6      	cmp	r6, r4
 800a600:	d000      	beq.n	800a604 <_malloc_r+0x218>
 800a602:	e097      	b.n	800a734 <_malloc_r+0x348>
 800a604:	4216      	tst	r6, r2
 800a606:	d000      	beq.n	800a60a <_malloc_r+0x21e>
 800a608:	e094      	b.n	800a734 <_malloc_r+0x348>
 800a60a:	4b42      	ldr	r3, [pc, #264]	; (800a714 <_malloc_r+0x328>)
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	19df      	adds	r7, r3, r7
 800a612:	2301      	movs	r3, #1
 800a614:	433b      	orrs	r3, r7
 800a616:	6053      	str	r3, [r2, #4]
 800a618:	4b43      	ldr	r3, [pc, #268]	; (800a728 <_malloc_r+0x33c>)
 800a61a:	4a44      	ldr	r2, [pc, #272]	; (800a72c <_malloc_r+0x340>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6811      	ldr	r1, [r2, #0]
 800a620:	428b      	cmp	r3, r1
 800a622:	d900      	bls.n	800a626 <_malloc_r+0x23a>
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	4a42      	ldr	r2, [pc, #264]	; (800a730 <_malloc_r+0x344>)
 800a628:	6811      	ldr	r1, [r2, #0]
 800a62a:	428b      	cmp	r3, r1
 800a62c:	d800      	bhi.n	800a630 <_malloc_r+0x244>
 800a62e:	e0b8      	b.n	800a7a2 <_malloc_r+0x3b6>
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	e0b6      	b.n	800a7a2 <_malloc_r+0x3b6>
 800a634:	0a50      	lsrs	r0, r2, #9
 800a636:	2804      	cmp	r0, #4
 800a638:	d811      	bhi.n	800a65e <_malloc_r+0x272>
 800a63a:	0991      	lsrs	r1, r2, #6
 800a63c:	3138      	adds	r1, #56	; 0x38
 800a63e:	00cf      	lsls	r7, r1, #3
 800a640:	19bf      	adds	r7, r7, r6
 800a642:	68b8      	ldr	r0, [r7, #8]
 800a644:	4287      	cmp	r7, r0
 800a646:	d125      	bne.n	800a694 <_malloc_r+0x2a8>
 800a648:	2201      	movs	r2, #1
 800a64a:	1089      	asrs	r1, r1, #2
 800a64c:	408a      	lsls	r2, r1
 800a64e:	4661      	mov	r1, ip
 800a650:	430a      	orrs	r2, r1
 800a652:	6072      	str	r2, [r6, #4]
 800a654:	60e7      	str	r7, [r4, #12]
 800a656:	60a0      	str	r0, [r4, #8]
 800a658:	60bc      	str	r4, [r7, #8]
 800a65a:	60c4      	str	r4, [r0, #12]
 800a65c:	e76b      	b.n	800a536 <_malloc_r+0x14a>
 800a65e:	2814      	cmp	r0, #20
 800a660:	d802      	bhi.n	800a668 <_malloc_r+0x27c>
 800a662:	0001      	movs	r1, r0
 800a664:	315b      	adds	r1, #91	; 0x5b
 800a666:	e7ea      	b.n	800a63e <_malloc_r+0x252>
 800a668:	2854      	cmp	r0, #84	; 0x54
 800a66a:	d802      	bhi.n	800a672 <_malloc_r+0x286>
 800a66c:	0b11      	lsrs	r1, r2, #12
 800a66e:	316e      	adds	r1, #110	; 0x6e
 800a670:	e7e5      	b.n	800a63e <_malloc_r+0x252>
 800a672:	21aa      	movs	r1, #170	; 0xaa
 800a674:	0049      	lsls	r1, r1, #1
 800a676:	4288      	cmp	r0, r1
 800a678:	d802      	bhi.n	800a680 <_malloc_r+0x294>
 800a67a:	0bd1      	lsrs	r1, r2, #15
 800a67c:	3177      	adds	r1, #119	; 0x77
 800a67e:	e7de      	b.n	800a63e <_malloc_r+0x252>
 800a680:	4f26      	ldr	r7, [pc, #152]	; (800a71c <_malloc_r+0x330>)
 800a682:	217e      	movs	r1, #126	; 0x7e
 800a684:	42b8      	cmp	r0, r7
 800a686:	d8da      	bhi.n	800a63e <_malloc_r+0x252>
 800a688:	0c91      	lsrs	r1, r2, #18
 800a68a:	317c      	adds	r1, #124	; 0x7c
 800a68c:	e7d7      	b.n	800a63e <_malloc_r+0x252>
 800a68e:	6880      	ldr	r0, [r0, #8]
 800a690:	4287      	cmp	r7, r0
 800a692:	d004      	beq.n	800a69e <_malloc_r+0x2b2>
 800a694:	2603      	movs	r6, #3
 800a696:	6841      	ldr	r1, [r0, #4]
 800a698:	43b1      	bics	r1, r6
 800a69a:	4291      	cmp	r1, r2
 800a69c:	d8f7      	bhi.n	800a68e <_malloc_r+0x2a2>
 800a69e:	68c7      	ldr	r7, [r0, #12]
 800a6a0:	e7d8      	b.n	800a654 <_malloc_r+0x268>
 800a6a2:	2603      	movs	r6, #3
 800a6a4:	6861      	ldr	r1, [r4, #4]
 800a6a6:	43b1      	bics	r1, r6
 800a6a8:	9103      	str	r1, [sp, #12]
 800a6aa:	68e6      	ldr	r6, [r4, #12]
 800a6ac:	1b49      	subs	r1, r1, r5
 800a6ae:	290f      	cmp	r1, #15
 800a6b0:	dd10      	ble.n	800a6d4 <_malloc_r+0x2e8>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	1963      	adds	r3, r4, r5
 800a6b6:	4315      	orrs	r5, r2
 800a6b8:	6065      	str	r5, [r4, #4]
 800a6ba:	68a5      	ldr	r5, [r4, #8]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	60ee      	str	r6, [r5, #12]
 800a6c0:	60b5      	str	r5, [r6, #8]
 800a6c2:	6143      	str	r3, [r0, #20]
 800a6c4:	6103      	str	r3, [r0, #16]
 800a6c6:	4814      	ldr	r0, [pc, #80]	; (800a718 <_malloc_r+0x32c>)
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	60d8      	str	r0, [r3, #12]
 800a6cc:	6098      	str	r0, [r3, #8]
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	50e1      	str	r1, [r4, r3]
 800a6d2:	e6eb      	b.n	800a4ac <_malloc_r+0xc0>
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	db09      	blt.n	800a6ec <_malloc_r+0x300>
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	18e1      	adds	r1, r4, r3
 800a6dc:	2301      	movs	r3, #1
 800a6de:	684a      	ldr	r2, [r1, #4]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	604b      	str	r3, [r1, #4]
 800a6e4:	68a3      	ldr	r3, [r4, #8]
 800a6e6:	60de      	str	r6, [r3, #12]
 800a6e8:	60b3      	str	r3, [r6, #8]
 800a6ea:	e6df      	b.n	800a4ac <_malloc_r+0xc0>
 800a6ec:	0034      	movs	r4, r6
 800a6ee:	e739      	b.n	800a564 <_malloc_r+0x178>
 800a6f0:	2108      	movs	r1, #8
 800a6f2:	4249      	negs	r1, r1
 800a6f4:	448c      	add	ip, r1
 800a6f6:	4661      	mov	r1, ip
 800a6f8:	6889      	ldr	r1, [r1, #8]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4561      	cmp	r1, ip
 800a6fe:	d100      	bne.n	800a702 <_malloc_r+0x316>
 800a700:	e73a      	b.n	800a578 <_malloc_r+0x18c>
 800a702:	e740      	b.n	800a586 <_malloc_r+0x19a>
 800a704:	3304      	adds	r3, #4
 800a706:	0052      	lsls	r2, r2, #1
 800a708:	420a      	tst	r2, r1
 800a70a:	d0fb      	beq.n	800a704 <_malloc_r+0x318>
 800a70c:	e724      	b.n	800a558 <_malloc_r+0x16c>
 800a70e:	9b02      	ldr	r3, [sp, #8]
 800a710:	e7fa      	b.n	800a708 <_malloc_r+0x31c>
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	20000020 	.word	0x20000020
 800a718:	20000028 	.word	0x20000028
 800a71c:	00000554 	.word	0x00000554
 800a720:	20000c2c 	.word	0x20000c2c
 800a724:	20000428 	.word	0x20000428
 800a728:	20000bfc 	.word	0x20000bfc
 800a72c:	20000c24 	.word	0x20000c24
 800a730:	20000c28 	.word	0x20000c28
 800a734:	4934      	ldr	r1, [pc, #208]	; (800a808 <_malloc_r+0x41c>)
 800a736:	6808      	ldr	r0, [r1, #0]
 800a738:	3001      	adds	r0, #1
 800a73a:	d140      	bne.n	800a7be <_malloc_r+0x3d2>
 800a73c:	600c      	str	r4, [r1, #0]
 800a73e:	2107      	movs	r1, #7
 800a740:	0026      	movs	r6, r4
 800a742:	2300      	movs	r3, #0
 800a744:	400e      	ands	r6, r1
 800a746:	420c      	tst	r4, r1
 800a748:	d002      	beq.n	800a750 <_malloc_r+0x364>
 800a74a:	3308      	adds	r3, #8
 800a74c:	1b9b      	subs	r3, r3, r6
 800a74e:	18e4      	adds	r4, r4, r3
 800a750:	19e1      	adds	r1, r4, r7
 800a752:	9105      	str	r1, [sp, #20]
 800a754:	9f05      	ldr	r7, [sp, #20]
 800a756:	9904      	ldr	r1, [sp, #16]
 800a758:	4017      	ands	r7, r2
 800a75a:	18cb      	adds	r3, r1, r3
 800a75c:	1bdf      	subs	r7, r3, r7
 800a75e:	4017      	ands	r7, r2
 800a760:	0039      	movs	r1, r7
 800a762:	9801      	ldr	r0, [sp, #4]
 800a764:	f001 f948 	bl	800b9f8 <_sbrk_r>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d107      	bne.n	800a77c <_malloc_r+0x390>
 800a76c:	1e37      	subs	r7, r6, #0
 800a76e:	9805      	ldr	r0, [sp, #20]
 800a770:	d004      	beq.n	800a77c <_malloc_r+0x390>
 800a772:	0030      	movs	r0, r6
 800a774:	2700      	movs	r7, #0
 800a776:	9b05      	ldr	r3, [sp, #20]
 800a778:	3808      	subs	r0, #8
 800a77a:	1818      	adds	r0, r3, r0
 800a77c:	4a23      	ldr	r2, [pc, #140]	; (800a80c <_malloc_r+0x420>)
 800a77e:	1b00      	subs	r0, r0, r4
 800a780:	6813      	ldr	r3, [r2, #0]
 800a782:	19c0      	adds	r0, r0, r7
 800a784:	19db      	adds	r3, r3, r7
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	2201      	movs	r2, #1
 800a78a:	4b21      	ldr	r3, [pc, #132]	; (800a810 <_malloc_r+0x424>)
 800a78c:	9902      	ldr	r1, [sp, #8]
 800a78e:	4310      	orrs	r0, r2
 800a790:	609c      	str	r4, [r3, #8]
 800a792:	6060      	str	r0, [r4, #4]
 800a794:	4299      	cmp	r1, r3
 800a796:	d100      	bne.n	800a79a <_malloc_r+0x3ae>
 800a798:	e73e      	b.n	800a618 <_malloc_r+0x22c>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	2b0f      	cmp	r3, #15
 800a79e:	d813      	bhi.n	800a7c8 <_malloc_r+0x3dc>
 800a7a0:	6062      	str	r2, [r4, #4]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <_malloc_r+0x424>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	4393      	bics	r3, r2
 800a7ac:	1b59      	subs	r1, r3, r5
 800a7ae:	42ab      	cmp	r3, r5
 800a7b0:	d301      	bcc.n	800a7b6 <_malloc_r+0x3ca>
 800a7b2:	290f      	cmp	r1, #15
 800a7b4:	dc1f      	bgt.n	800a7f6 <_malloc_r+0x40a>
 800a7b6:	9801      	ldr	r0, [sp, #4]
 800a7b8:	f000 f834 	bl	800a824 <__malloc_unlock>
 800a7bc:	e623      	b.n	800a406 <_malloc_r+0x1a>
 800a7be:	4913      	ldr	r1, [pc, #76]	; (800a80c <_malloc_r+0x420>)
 800a7c0:	1ba6      	subs	r6, r4, r6
 800a7c2:	18f6      	adds	r6, r6, r3
 800a7c4:	600e      	str	r6, [r1, #0]
 800a7c6:	e7ba      	b.n	800a73e <_malloc_r+0x352>
 800a7c8:	2107      	movs	r1, #7
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	3b0c      	subs	r3, #12
 800a7ce:	438b      	bics	r3, r1
 800a7d0:	9902      	ldr	r1, [sp, #8]
 800a7d2:	6849      	ldr	r1, [r1, #4]
 800a7d4:	400a      	ands	r2, r1
 800a7d6:	9902      	ldr	r1, [sp, #8]
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	604a      	str	r2, [r1, #4]
 800a7dc:	18ca      	adds	r2, r1, r3
 800a7de:	2105      	movs	r1, #5
 800a7e0:	6051      	str	r1, [r2, #4]
 800a7e2:	6091      	str	r1, [r2, #8]
 800a7e4:	2b0f      	cmp	r3, #15
 800a7e6:	d800      	bhi.n	800a7ea <_malloc_r+0x3fe>
 800a7e8:	e716      	b.n	800a618 <_malloc_r+0x22c>
 800a7ea:	9902      	ldr	r1, [sp, #8]
 800a7ec:	9801      	ldr	r0, [sp, #4]
 800a7ee:	3108      	adds	r1, #8
 800a7f0:	f001 f9dc 	bl	800bbac <_free_r>
 800a7f4:	e710      	b.n	800a618 <_malloc_r+0x22c>
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	0013      	movs	r3, r2
 800a7fa:	4805      	ldr	r0, [pc, #20]	; (800a810 <_malloc_r+0x424>)
 800a7fc:	432b      	orrs	r3, r5
 800a7fe:	6884      	ldr	r4, [r0, #8]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	1963      	adds	r3, r4, r5
 800a804:	6083      	str	r3, [r0, #8]
 800a806:	e623      	b.n	800a450 <_malloc_r+0x64>
 800a808:	20000428 	.word	0x20000428
 800a80c:	20000bfc 	.word	0x20000bfc
 800a810:	20000020 	.word	0x20000020

0800a814 <__malloc_lock>:
 800a814:	b510      	push	{r4, lr}
 800a816:	4802      	ldr	r0, [pc, #8]	; (800a820 <__malloc_lock+0xc>)
 800a818:	f001 f940 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	20000d71 	.word	0x20000d71

0800a824 <__malloc_unlock>:
 800a824:	b510      	push	{r4, lr}
 800a826:	4802      	ldr	r0, [pc, #8]	; (800a830 <__malloc_unlock+0xc>)
 800a828:	f001 f939 	bl	800ba9e <__retarget_lock_release_recursive>
 800a82c:	bd10      	pop	{r4, pc}
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	20000d71 	.word	0x20000d71

0800a834 <sulp>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	0016      	movs	r6, r2
 800a838:	000d      	movs	r5, r1
 800a83a:	f002 f90d 	bl	800ca58 <__ulp>
 800a83e:	2e00      	cmp	r6, #0
 800a840:	d00d      	beq.n	800a85e <sulp+0x2a>
 800a842:	236b      	movs	r3, #107	; 0x6b
 800a844:	006a      	lsls	r2, r5, #1
 800a846:	0d52      	lsrs	r2, r2, #21
 800a848:	1a9b      	subs	r3, r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dd07      	ble.n	800a85e <sulp+0x2a>
 800a84e:	2400      	movs	r4, #0
 800a850:	4a03      	ldr	r2, [pc, #12]	; (800a860 <sulp+0x2c>)
 800a852:	051b      	lsls	r3, r3, #20
 800a854:	189d      	adds	r5, r3, r2
 800a856:	002b      	movs	r3, r5
 800a858:	0022      	movs	r2, r4
 800a85a:	f7f6 ff07 	bl	800166c <__aeabi_dmul>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	3ff00000 	.word	0x3ff00000

0800a864 <_strtod_l>:
 800a864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a866:	b0a1      	sub	sp, #132	; 0x84
 800a868:	9219      	str	r2, [sp, #100]	; 0x64
 800a86a:	2200      	movs	r2, #0
 800a86c:	2600      	movs	r6, #0
 800a86e:	2700      	movs	r7, #0
 800a870:	9004      	str	r0, [sp, #16]
 800a872:	9107      	str	r1, [sp, #28]
 800a874:	921c      	str	r2, [sp, #112]	; 0x70
 800a876:	911b      	str	r1, [sp, #108]	; 0x6c
 800a878:	780a      	ldrb	r2, [r1, #0]
 800a87a:	2a2b      	cmp	r2, #43	; 0x2b
 800a87c:	d055      	beq.n	800a92a <_strtod_l+0xc6>
 800a87e:	d841      	bhi.n	800a904 <_strtod_l+0xa0>
 800a880:	2a0d      	cmp	r2, #13
 800a882:	d83b      	bhi.n	800a8fc <_strtod_l+0x98>
 800a884:	2a08      	cmp	r2, #8
 800a886:	d83b      	bhi.n	800a900 <_strtod_l+0x9c>
 800a888:	2a00      	cmp	r2, #0
 800a88a:	d044      	beq.n	800a916 <_strtod_l+0xb2>
 800a88c:	2200      	movs	r2, #0
 800a88e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a890:	2100      	movs	r1, #0
 800a892:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a894:	9109      	str	r1, [sp, #36]	; 0x24
 800a896:	782a      	ldrb	r2, [r5, #0]
 800a898:	2a30      	cmp	r2, #48	; 0x30
 800a89a:	d000      	beq.n	800a89e <_strtod_l+0x3a>
 800a89c:	e085      	b.n	800a9aa <_strtod_l+0x146>
 800a89e:	786a      	ldrb	r2, [r5, #1]
 800a8a0:	3120      	adds	r1, #32
 800a8a2:	438a      	bics	r2, r1
 800a8a4:	2a58      	cmp	r2, #88	; 0x58
 800a8a6:	d000      	beq.n	800a8aa <_strtod_l+0x46>
 800a8a8:	e075      	b.n	800a996 <_strtod_l+0x132>
 800a8aa:	9302      	str	r3, [sp, #8]
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8ae:	4a97      	ldr	r2, [pc, #604]	; (800ab0c <_strtod_l+0x2a8>)
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	ab1c      	add	r3, sp, #112	; 0x70
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	9804      	ldr	r0, [sp, #16]
 800a8b8:	ab1d      	add	r3, sp, #116	; 0x74
 800a8ba:	a91b      	add	r1, sp, #108	; 0x6c
 800a8bc:	f001 fa92 	bl	800bde4 <__gethex>
 800a8c0:	230f      	movs	r3, #15
 800a8c2:	0002      	movs	r2, r0
 800a8c4:	401a      	ands	r2, r3
 800a8c6:	0004      	movs	r4, r0
 800a8c8:	9205      	str	r2, [sp, #20]
 800a8ca:	4218      	tst	r0, r3
 800a8cc:	d005      	beq.n	800a8da <_strtod_l+0x76>
 800a8ce:	2a06      	cmp	r2, #6
 800a8d0:	d12d      	bne.n	800a92e <_strtod_l+0xca>
 800a8d2:	1c6b      	adds	r3, r5, #1
 800a8d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <_strtod_l+0x82>
 800a8e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01b      	beq.n	800a924 <_strtod_l+0xc0>
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	0032      	movs	r2, r6
 800a8f0:	061b      	lsls	r3, r3, #24
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	0010      	movs	r0, r2
 800a8f6:	0019      	movs	r1, r3
 800a8f8:	b021      	add	sp, #132	; 0x84
 800a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fc:	2a20      	cmp	r2, #32
 800a8fe:	d1c5      	bne.n	800a88c <_strtod_l+0x28>
 800a900:	3101      	adds	r1, #1
 800a902:	e7b8      	b.n	800a876 <_strtod_l+0x12>
 800a904:	2a2d      	cmp	r2, #45	; 0x2d
 800a906:	d1c1      	bne.n	800a88c <_strtod_l+0x28>
 800a908:	3a2c      	subs	r2, #44	; 0x2c
 800a90a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a90c:	1c4a      	adds	r2, r1, #1
 800a90e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a910:	784a      	ldrb	r2, [r1, #1]
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1bc      	bne.n	800a890 <_strtod_l+0x2c>
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	931b      	str	r3, [sp, #108]	; 0x6c
 800a91a:	2300      	movs	r3, #0
 800a91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a91e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1dd      	bne.n	800a8e0 <_strtod_l+0x7c>
 800a924:	0032      	movs	r2, r6
 800a926:	003b      	movs	r3, r7
 800a928:	e7e4      	b.n	800a8f4 <_strtod_l+0x90>
 800a92a:	2200      	movs	r2, #0
 800a92c:	e7ed      	b.n	800a90a <_strtod_l+0xa6>
 800a92e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a930:	2a00      	cmp	r2, #0
 800a932:	d007      	beq.n	800a944 <_strtod_l+0xe0>
 800a934:	2135      	movs	r1, #53	; 0x35
 800a936:	a81e      	add	r0, sp, #120	; 0x78
 800a938:	f002 f97f 	bl	800cc3a <__copybits>
 800a93c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a93e:	9804      	ldr	r0, [sp, #16]
 800a940:	f001 fd7c 	bl	800c43c <_Bfree>
 800a944:	9805      	ldr	r0, [sp, #20]
 800a946:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a948:	3801      	subs	r0, #1
 800a94a:	2804      	cmp	r0, #4
 800a94c:	d806      	bhi.n	800a95c <_strtod_l+0xf8>
 800a94e:	f7f5 fbe1 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a952:	0312      	.short	0x0312
 800a954:	1e1c      	.short	0x1e1c
 800a956:	12          	.byte	0x12
 800a957:	00          	.byte	0x00
 800a958:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a95a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a95c:	05e4      	lsls	r4, r4, #23
 800a95e:	d502      	bpl.n	800a966 <_strtod_l+0x102>
 800a960:	2380      	movs	r3, #128	; 0x80
 800a962:	061b      	lsls	r3, r3, #24
 800a964:	431f      	orrs	r7, r3
 800a966:	4b6a      	ldr	r3, [pc, #424]	; (800ab10 <_strtod_l+0x2ac>)
 800a968:	423b      	tst	r3, r7
 800a96a:	d1b6      	bne.n	800a8da <_strtod_l+0x76>
 800a96c:	f001 f86a 	bl	800ba44 <__errno>
 800a970:	2322      	movs	r3, #34	; 0x22
 800a972:	6003      	str	r3, [r0, #0]
 800a974:	e7b1      	b.n	800a8da <_strtod_l+0x76>
 800a976:	4967      	ldr	r1, [pc, #412]	; (800ab14 <_strtod_l+0x2b0>)
 800a978:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a97a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a97c:	400a      	ands	r2, r1
 800a97e:	4966      	ldr	r1, [pc, #408]	; (800ab18 <_strtod_l+0x2b4>)
 800a980:	185b      	adds	r3, r3, r1
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	431a      	orrs	r2, r3
 800a986:	0017      	movs	r7, r2
 800a988:	e7e8      	b.n	800a95c <_strtod_l+0xf8>
 800a98a:	4f61      	ldr	r7, [pc, #388]	; (800ab10 <_strtod_l+0x2ac>)
 800a98c:	e7e6      	b.n	800a95c <_strtod_l+0xf8>
 800a98e:	2601      	movs	r6, #1
 800a990:	4f62      	ldr	r7, [pc, #392]	; (800ab1c <_strtod_l+0x2b8>)
 800a992:	4276      	negs	r6, r6
 800a994:	e7e2      	b.n	800a95c <_strtod_l+0xf8>
 800a996:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	2b30      	cmp	r3, #48	; 0x30
 800a9a0:	d0f9      	beq.n	800a996 <_strtod_l+0x132>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d099      	beq.n	800a8da <_strtod_l+0x76>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	220a      	movs	r2, #10
 800a9ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9b0:	950d      	str	r5, [sp, #52]	; 0x34
 800a9b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9b4:	9508      	str	r5, [sp, #32]
 800a9b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a9b8:	7804      	ldrb	r4, [r0, #0]
 800a9ba:	0023      	movs	r3, r4
 800a9bc:	3b30      	subs	r3, #48	; 0x30
 800a9be:	b2d9      	uxtb	r1, r3
 800a9c0:	2909      	cmp	r1, #9
 800a9c2:	d927      	bls.n	800aa14 <_strtod_l+0x1b0>
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4956      	ldr	r1, [pc, #344]	; (800ab20 <_strtod_l+0x2bc>)
 800a9c8:	f000 ff98 	bl	800b8fc <strncmp>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d031      	beq.n	800aa34 <_strtod_l+0x1d0>
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	0023      	movs	r3, r4
 800a9d4:	4684      	mov	ip, r0
 800a9d6:	9a08      	ldr	r2, [sp, #32]
 800a9d8:	900c      	str	r0, [sp, #48]	; 0x30
 800a9da:	9205      	str	r2, [sp, #20]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	0019      	movs	r1, r3
 800a9e0:	4391      	bics	r1, r2
 800a9e2:	000a      	movs	r2, r1
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	9106      	str	r1, [sp, #24]
 800a9e8:	2a45      	cmp	r2, #69	; 0x45
 800a9ea:	d000      	beq.n	800a9ee <_strtod_l+0x18a>
 800a9ec:	e0c2      	b.n	800ab74 <_strtod_l+0x310>
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f2:	4303      	orrs	r3, r0
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	428b      	cmp	r3, r1
 800a9f8:	d08d      	beq.n	800a916 <_strtod_l+0xb2>
 800a9fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa02:	9b07      	ldr	r3, [sp, #28]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b2b      	cmp	r3, #43	; 0x2b
 800aa08:	d071      	beq.n	800aaee <_strtod_l+0x28a>
 800aa0a:	000c      	movs	r4, r1
 800aa0c:	2b2d      	cmp	r3, #45	; 0x2d
 800aa0e:	d174      	bne.n	800aafa <_strtod_l+0x296>
 800aa10:	2401      	movs	r4, #1
 800aa12:	e06d      	b.n	800aaf0 <_strtod_l+0x28c>
 800aa14:	9908      	ldr	r1, [sp, #32]
 800aa16:	2908      	cmp	r1, #8
 800aa18:	dc09      	bgt.n	800aa2e <_strtod_l+0x1ca>
 800aa1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa1c:	4351      	muls	r1, r2
 800aa1e:	185b      	adds	r3, r3, r1
 800aa20:	930d      	str	r3, [sp, #52]	; 0x34
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3001      	adds	r0, #1
 800aa26:	3301      	adds	r3, #1
 800aa28:	9308      	str	r3, [sp, #32]
 800aa2a:	901b      	str	r0, [sp, #108]	; 0x6c
 800aa2c:	e7c3      	b.n	800a9b6 <_strtod_l+0x152>
 800aa2e:	4355      	muls	r5, r2
 800aa30:	195d      	adds	r5, r3, r5
 800aa32:	e7f6      	b.n	800aa22 <_strtod_l+0x1be>
 800aa34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa3a:	9a08      	ldr	r2, [sp, #32]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d03a      	beq.n	800aab8 <_strtod_l+0x254>
 800aa42:	900c      	str	r0, [sp, #48]	; 0x30
 800aa44:	9205      	str	r2, [sp, #20]
 800aa46:	001a      	movs	r2, r3
 800aa48:	3a30      	subs	r2, #48	; 0x30
 800aa4a:	2a09      	cmp	r2, #9
 800aa4c:	d912      	bls.n	800aa74 <_strtod_l+0x210>
 800aa4e:	2201      	movs	r2, #1
 800aa50:	4694      	mov	ip, r2
 800aa52:	e7c3      	b.n	800a9dc <_strtod_l+0x178>
 800aa54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa56:	3001      	adds	r0, #1
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b30      	cmp	r3, #48	; 0x30
 800aa60:	d0f8      	beq.n	800aa54 <_strtod_l+0x1f0>
 800aa62:	001a      	movs	r2, r3
 800aa64:	3a31      	subs	r2, #49	; 0x31
 800aa66:	2a08      	cmp	r2, #8
 800aa68:	d83c      	bhi.n	800aae4 <_strtod_l+0x280>
 800aa6a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aa70:	9005      	str	r0, [sp, #20]
 800aa72:	9210      	str	r2, [sp, #64]	; 0x40
 800aa74:	001a      	movs	r2, r3
 800aa76:	1c41      	adds	r1, r0, #1
 800aa78:	3a30      	subs	r2, #48	; 0x30
 800aa7a:	2b30      	cmp	r3, #48	; 0x30
 800aa7c:	d016      	beq.n	800aaac <_strtod_l+0x248>
 800aa7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa80:	185b      	adds	r3, r3, r1
 800aa82:	930c      	str	r3, [sp, #48]	; 0x30
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	210a      	movs	r1, #10
 800aa88:	469c      	mov	ip, r3
 800aa8a:	4484      	add	ip, r0
 800aa8c:	4563      	cmp	r3, ip
 800aa8e:	d115      	bne.n	800aabc <_strtod_l+0x258>
 800aa90:	9905      	ldr	r1, [sp, #20]
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	3101      	adds	r1, #1
 800aa96:	1809      	adds	r1, r1, r0
 800aa98:	181b      	adds	r3, r3, r0
 800aa9a:	9105      	str	r1, [sp, #20]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	dc19      	bgt.n	800aad4 <_strtod_l+0x270>
 800aaa0:	230a      	movs	r3, #10
 800aaa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aaa4:	434b      	muls	r3, r1
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	18d3      	adds	r3, r2, r3
 800aaaa:	930d      	str	r3, [sp, #52]	; 0x34
 800aaac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aaae:	0008      	movs	r0, r1
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	921b      	str	r2, [sp, #108]	; 0x6c
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	e7c6      	b.n	800aa46 <_strtod_l+0x1e2>
 800aab8:	9808      	ldr	r0, [sp, #32]
 800aaba:	e7d0      	b.n	800aa5e <_strtod_l+0x1fa>
 800aabc:	1c5c      	adds	r4, r3, #1
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	dc04      	bgt.n	800aacc <_strtod_l+0x268>
 800aac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac4:	434b      	muls	r3, r1
 800aac6:	930d      	str	r3, [sp, #52]	; 0x34
 800aac8:	0023      	movs	r3, r4
 800aaca:	e7df      	b.n	800aa8c <_strtod_l+0x228>
 800aacc:	2c10      	cmp	r4, #16
 800aace:	dcfb      	bgt.n	800aac8 <_strtod_l+0x264>
 800aad0:	434d      	muls	r5, r1
 800aad2:	e7f9      	b.n	800aac8 <_strtod_l+0x264>
 800aad4:	9b05      	ldr	r3, [sp, #20]
 800aad6:	2100      	movs	r1, #0
 800aad8:	2b10      	cmp	r3, #16
 800aada:	dce7      	bgt.n	800aaac <_strtod_l+0x248>
 800aadc:	230a      	movs	r3, #10
 800aade:	435d      	muls	r5, r3
 800aae0:	1955      	adds	r5, r2, r5
 800aae2:	e7e3      	b.n	800aaac <_strtod_l+0x248>
 800aae4:	2200      	movs	r2, #0
 800aae6:	920c      	str	r2, [sp, #48]	; 0x30
 800aae8:	9205      	str	r2, [sp, #20]
 800aaea:	3201      	adds	r2, #1
 800aaec:	e7b0      	b.n	800aa50 <_strtod_l+0x1ec>
 800aaee:	2400      	movs	r4, #0
 800aaf0:	9b07      	ldr	r3, [sp, #28]
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	931b      	str	r3, [sp, #108]	; 0x6c
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	789b      	ldrb	r3, [r3, #2]
 800aafa:	001a      	movs	r2, r3
 800aafc:	3a30      	subs	r2, #48	; 0x30
 800aafe:	2a09      	cmp	r2, #9
 800ab00:	d914      	bls.n	800ab2c <_strtod_l+0x2c8>
 800ab02:	9a07      	ldr	r2, [sp, #28]
 800ab04:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab06:	2200      	movs	r2, #0
 800ab08:	e033      	b.n	800ab72 <_strtod_l+0x30e>
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	08013fa4 	.word	0x08013fa4
 800ab10:	7ff00000 	.word	0x7ff00000
 800ab14:	ffefffff 	.word	0xffefffff
 800ab18:	00000433 	.word	0x00000433
 800ab1c:	7fffffff 	.word	0x7fffffff
 800ab20:	08013fa0 	.word	0x08013fa0
 800ab24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b30      	cmp	r3, #48	; 0x30
 800ab2e:	d0f9      	beq.n	800ab24 <_strtod_l+0x2c0>
 800ab30:	2200      	movs	r2, #0
 800ab32:	9206      	str	r2, [sp, #24]
 800ab34:	001a      	movs	r2, r3
 800ab36:	3a31      	subs	r2, #49	; 0x31
 800ab38:	2a08      	cmp	r2, #8
 800ab3a:	d81b      	bhi.n	800ab74 <_strtod_l+0x310>
 800ab3c:	3b30      	subs	r3, #48	; 0x30
 800ab3e:	930e      	str	r3, [sp, #56]	; 0x38
 800ab40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab42:	9306      	str	r3, [sp, #24]
 800ab44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab46:	1c59      	adds	r1, r3, #1
 800ab48:	911b      	str	r1, [sp, #108]	; 0x6c
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	001a      	movs	r2, r3
 800ab4e:	3a30      	subs	r2, #48	; 0x30
 800ab50:	2a09      	cmp	r2, #9
 800ab52:	d93a      	bls.n	800abca <_strtod_l+0x366>
 800ab54:	9a06      	ldr	r2, [sp, #24]
 800ab56:	1a8a      	subs	r2, r1, r2
 800ab58:	49b2      	ldr	r1, [pc, #712]	; (800ae24 <_strtod_l+0x5c0>)
 800ab5a:	9106      	str	r1, [sp, #24]
 800ab5c:	2a08      	cmp	r2, #8
 800ab5e:	dc04      	bgt.n	800ab6a <_strtod_l+0x306>
 800ab60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab62:	9206      	str	r2, [sp, #24]
 800ab64:	428a      	cmp	r2, r1
 800ab66:	dd00      	ble.n	800ab6a <_strtod_l+0x306>
 800ab68:	9106      	str	r1, [sp, #24]
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d002      	beq.n	800ab74 <_strtod_l+0x310>
 800ab6e:	9a06      	ldr	r2, [sp, #24]
 800ab70:	4252      	negs	r2, r2
 800ab72:	9206      	str	r2, [sp, #24]
 800ab74:	9a05      	ldr	r2, [sp, #20]
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	d14d      	bne.n	800ac16 <_strtod_l+0x3b2>
 800ab7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab7c:	4310      	orrs	r0, r2
 800ab7e:	d000      	beq.n	800ab82 <_strtod_l+0x31e>
 800ab80:	e6ab      	b.n	800a8da <_strtod_l+0x76>
 800ab82:	4662      	mov	r2, ip
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	d000      	beq.n	800ab8a <_strtod_l+0x326>
 800ab88:	e6c5      	b.n	800a916 <_strtod_l+0xb2>
 800ab8a:	2b69      	cmp	r3, #105	; 0x69
 800ab8c:	d027      	beq.n	800abde <_strtod_l+0x37a>
 800ab8e:	dc23      	bgt.n	800abd8 <_strtod_l+0x374>
 800ab90:	2b49      	cmp	r3, #73	; 0x49
 800ab92:	d024      	beq.n	800abde <_strtod_l+0x37a>
 800ab94:	2b4e      	cmp	r3, #78	; 0x4e
 800ab96:	d000      	beq.n	800ab9a <_strtod_l+0x336>
 800ab98:	e6bd      	b.n	800a916 <_strtod_l+0xb2>
 800ab9a:	49a3      	ldr	r1, [pc, #652]	; (800ae28 <_strtod_l+0x5c4>)
 800ab9c:	a81b      	add	r0, sp, #108	; 0x6c
 800ab9e:	f001 fb57 	bl	800c250 <__match>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d100      	bne.n	800aba8 <_strtod_l+0x344>
 800aba6:	e6b6      	b.n	800a916 <_strtod_l+0xb2>
 800aba8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b28      	cmp	r3, #40	; 0x28
 800abae:	d12c      	bne.n	800ac0a <_strtod_l+0x3a6>
 800abb0:	499e      	ldr	r1, [pc, #632]	; (800ae2c <_strtod_l+0x5c8>)
 800abb2:	aa1e      	add	r2, sp, #120	; 0x78
 800abb4:	a81b      	add	r0, sp, #108	; 0x6c
 800abb6:	f001 fb5f 	bl	800c278 <__hexnan>
 800abba:	2805      	cmp	r0, #5
 800abbc:	d125      	bne.n	800ac0a <_strtod_l+0x3a6>
 800abbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abc0:	4a9b      	ldr	r2, [pc, #620]	; (800ae30 <_strtod_l+0x5cc>)
 800abc2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800abc4:	431a      	orrs	r2, r3
 800abc6:	0017      	movs	r7, r2
 800abc8:	e687      	b.n	800a8da <_strtod_l+0x76>
 800abca:	220a      	movs	r2, #10
 800abcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800abce:	434a      	muls	r2, r1
 800abd0:	18d2      	adds	r2, r2, r3
 800abd2:	3a30      	subs	r2, #48	; 0x30
 800abd4:	920e      	str	r2, [sp, #56]	; 0x38
 800abd6:	e7b5      	b.n	800ab44 <_strtod_l+0x2e0>
 800abd8:	2b6e      	cmp	r3, #110	; 0x6e
 800abda:	d0de      	beq.n	800ab9a <_strtod_l+0x336>
 800abdc:	e69b      	b.n	800a916 <_strtod_l+0xb2>
 800abde:	4995      	ldr	r1, [pc, #596]	; (800ae34 <_strtod_l+0x5d0>)
 800abe0:	a81b      	add	r0, sp, #108	; 0x6c
 800abe2:	f001 fb35 	bl	800c250 <__match>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d100      	bne.n	800abec <_strtod_l+0x388>
 800abea:	e694      	b.n	800a916 <_strtod_l+0xb2>
 800abec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abee:	4992      	ldr	r1, [pc, #584]	; (800ae38 <_strtod_l+0x5d4>)
 800abf0:	3b01      	subs	r3, #1
 800abf2:	a81b      	add	r0, sp, #108	; 0x6c
 800abf4:	931b      	str	r3, [sp, #108]	; 0x6c
 800abf6:	f001 fb2b 	bl	800c250 <__match>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d102      	bne.n	800ac04 <_strtod_l+0x3a0>
 800abfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac00:	3301      	adds	r3, #1
 800ac02:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac04:	2600      	movs	r6, #0
 800ac06:	4f8a      	ldr	r7, [pc, #552]	; (800ae30 <_strtod_l+0x5cc>)
 800ac08:	e667      	b.n	800a8da <_strtod_l+0x76>
 800ac0a:	488c      	ldr	r0, [pc, #560]	; (800ae3c <_strtod_l+0x5d8>)
 800ac0c:	f000 ff5c 	bl	800bac8 <nan>
 800ac10:	0006      	movs	r6, r0
 800ac12:	000f      	movs	r7, r1
 800ac14:	e661      	b.n	800a8da <_strtod_l+0x76>
 800ac16:	9b06      	ldr	r3, [sp, #24]
 800ac18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac1a:	1a9b      	subs	r3, r3, r2
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	9b08      	ldr	r3, [sp, #32]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <_strtod_l+0x3c4>
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	9308      	str	r3, [sp, #32]
 800ac28:	9c05      	ldr	r4, [sp, #20]
 800ac2a:	2c10      	cmp	r4, #16
 800ac2c:	dd00      	ble.n	800ac30 <_strtod_l+0x3cc>
 800ac2e:	2410      	movs	r4, #16
 800ac30:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ac32:	f7f7 fbe3 	bl	80023fc <__aeabi_ui2d>
 800ac36:	9b05      	ldr	r3, [sp, #20]
 800ac38:	0006      	movs	r6, r0
 800ac3a:	000f      	movs	r7, r1
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	dd15      	ble.n	800ac6c <_strtod_l+0x408>
 800ac40:	0022      	movs	r2, r4
 800ac42:	4b7f      	ldr	r3, [pc, #508]	; (800ae40 <_strtod_l+0x5dc>)
 800ac44:	3a09      	subs	r2, #9
 800ac46:	00d2      	lsls	r2, r2, #3
 800ac48:	189b      	adds	r3, r3, r2
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f7f6 fd0d 	bl	800166c <__aeabi_dmul>
 800ac52:	0006      	movs	r6, r0
 800ac54:	0028      	movs	r0, r5
 800ac56:	000f      	movs	r7, r1
 800ac58:	f7f7 fbd0 	bl	80023fc <__aeabi_ui2d>
 800ac5c:	0002      	movs	r2, r0
 800ac5e:	000b      	movs	r3, r1
 800ac60:	0030      	movs	r0, r6
 800ac62:	0039      	movs	r1, r7
 800ac64:	f7f5 fda8 	bl	80007b8 <__aeabi_dadd>
 800ac68:	0006      	movs	r6, r0
 800ac6a:	000f      	movs	r7, r1
 800ac6c:	9b05      	ldr	r3, [sp, #20]
 800ac6e:	2b0f      	cmp	r3, #15
 800ac70:	dc39      	bgt.n	800ace6 <_strtod_l+0x482>
 800ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d100      	bne.n	800ac7a <_strtod_l+0x416>
 800ac78:	e62f      	b.n	800a8da <_strtod_l+0x76>
 800ac7a:	dd24      	ble.n	800acc6 <_strtod_l+0x462>
 800ac7c:	2b16      	cmp	r3, #22
 800ac7e:	dc09      	bgt.n	800ac94 <_strtod_l+0x430>
 800ac80:	496f      	ldr	r1, [pc, #444]	; (800ae40 <_strtod_l+0x5dc>)
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	18c9      	adds	r1, r1, r3
 800ac86:	0032      	movs	r2, r6
 800ac88:	6808      	ldr	r0, [r1, #0]
 800ac8a:	6849      	ldr	r1, [r1, #4]
 800ac8c:	003b      	movs	r3, r7
 800ac8e:	f7f6 fced 	bl	800166c <__aeabi_dmul>
 800ac92:	e7bd      	b.n	800ac10 <_strtod_l+0x3ac>
 800ac94:	2325      	movs	r3, #37	; 0x25
 800ac96:	9a05      	ldr	r2, [sp, #20]
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	db22      	blt.n	800ace6 <_strtod_l+0x482>
 800aca0:	240f      	movs	r4, #15
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	4d66      	ldr	r5, [pc, #408]	; (800ae40 <_strtod_l+0x5dc>)
 800aca6:	1ae4      	subs	r4, r4, r3
 800aca8:	00e1      	lsls	r1, r4, #3
 800acaa:	1869      	adds	r1, r5, r1
 800acac:	0032      	movs	r2, r6
 800acae:	6808      	ldr	r0, [r1, #0]
 800acb0:	6849      	ldr	r1, [r1, #4]
 800acb2:	003b      	movs	r3, r7
 800acb4:	f7f6 fcda 	bl	800166c <__aeabi_dmul>
 800acb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acba:	1b1c      	subs	r4, r3, r4
 800acbc:	00e4      	lsls	r4, r4, #3
 800acbe:	192d      	adds	r5, r5, r4
 800acc0:	682a      	ldr	r2, [r5, #0]
 800acc2:	686b      	ldr	r3, [r5, #4]
 800acc4:	e7e3      	b.n	800ac8e <_strtod_l+0x42a>
 800acc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc8:	3316      	adds	r3, #22
 800acca:	db0c      	blt.n	800ace6 <_strtod_l+0x482>
 800accc:	9906      	ldr	r1, [sp, #24]
 800acce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acd0:	4b5b      	ldr	r3, [pc, #364]	; (800ae40 <_strtod_l+0x5dc>)
 800acd2:	1a52      	subs	r2, r2, r1
 800acd4:	00d2      	lsls	r2, r2, #3
 800acd6:	189b      	adds	r3, r3, r2
 800acd8:	0030      	movs	r0, r6
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	0039      	movs	r1, r7
 800ace0:	f7f6 f8ca 	bl	8000e78 <__aeabi_ddiv>
 800ace4:	e794      	b.n	800ac10 <_strtod_l+0x3ac>
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	1b1c      	subs	r4, r3, r4
 800acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acec:	18e4      	adds	r4, r4, r3
 800acee:	2c00      	cmp	r4, #0
 800acf0:	dd72      	ble.n	800add8 <_strtod_l+0x574>
 800acf2:	220f      	movs	r2, #15
 800acf4:	0023      	movs	r3, r4
 800acf6:	4013      	ands	r3, r2
 800acf8:	4214      	tst	r4, r2
 800acfa:	d00a      	beq.n	800ad12 <_strtod_l+0x4ae>
 800acfc:	4950      	ldr	r1, [pc, #320]	; (800ae40 <_strtod_l+0x5dc>)
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	18c9      	adds	r1, r1, r3
 800ad02:	0032      	movs	r2, r6
 800ad04:	6808      	ldr	r0, [r1, #0]
 800ad06:	6849      	ldr	r1, [r1, #4]
 800ad08:	003b      	movs	r3, r7
 800ad0a:	f7f6 fcaf 	bl	800166c <__aeabi_dmul>
 800ad0e:	0006      	movs	r6, r0
 800ad10:	000f      	movs	r7, r1
 800ad12:	230f      	movs	r3, #15
 800ad14:	439c      	bics	r4, r3
 800ad16:	d04a      	beq.n	800adae <_strtod_l+0x54a>
 800ad18:	3326      	adds	r3, #38	; 0x26
 800ad1a:	33ff      	adds	r3, #255	; 0xff
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	dd22      	ble.n	800ad66 <_strtod_l+0x502>
 800ad20:	2300      	movs	r3, #0
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	9306      	str	r3, [sp, #24]
 800ad26:	930d      	str	r3, [sp, #52]	; 0x34
 800ad28:	9308      	str	r3, [sp, #32]
 800ad2a:	2322      	movs	r3, #34	; 0x22
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	9a04      	ldr	r2, [sp, #16]
 800ad30:	4f3f      	ldr	r7, [pc, #252]	; (800ae30 <_strtod_l+0x5cc>)
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad36:	42b3      	cmp	r3, r6
 800ad38:	d100      	bne.n	800ad3c <_strtod_l+0x4d8>
 800ad3a:	e5ce      	b.n	800a8da <_strtod_l+0x76>
 800ad3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad3e:	9804      	ldr	r0, [sp, #16]
 800ad40:	f001 fb7c 	bl	800c43c <_Bfree>
 800ad44:	9908      	ldr	r1, [sp, #32]
 800ad46:	9804      	ldr	r0, [sp, #16]
 800ad48:	f001 fb78 	bl	800c43c <_Bfree>
 800ad4c:	9906      	ldr	r1, [sp, #24]
 800ad4e:	9804      	ldr	r0, [sp, #16]
 800ad50:	f001 fb74 	bl	800c43c <_Bfree>
 800ad54:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad56:	9804      	ldr	r0, [sp, #16]
 800ad58:	f001 fb70 	bl	800c43c <_Bfree>
 800ad5c:	9905      	ldr	r1, [sp, #20]
 800ad5e:	9804      	ldr	r0, [sp, #16]
 800ad60:	f001 fb6c 	bl	800c43c <_Bfree>
 800ad64:	e5b9      	b.n	800a8da <_strtod_l+0x76>
 800ad66:	2300      	movs	r3, #0
 800ad68:	0030      	movs	r0, r6
 800ad6a:	0039      	movs	r1, r7
 800ad6c:	4d35      	ldr	r5, [pc, #212]	; (800ae44 <_strtod_l+0x5e0>)
 800ad6e:	1124      	asrs	r4, r4, #4
 800ad70:	9307      	str	r3, [sp, #28]
 800ad72:	2c01      	cmp	r4, #1
 800ad74:	dc1e      	bgt.n	800adb4 <_strtod_l+0x550>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <_strtod_l+0x51a>
 800ad7a:	0006      	movs	r6, r0
 800ad7c:	000f      	movs	r7, r1
 800ad7e:	4b32      	ldr	r3, [pc, #200]	; (800ae48 <_strtod_l+0x5e4>)
 800ad80:	9a07      	ldr	r2, [sp, #28]
 800ad82:	18ff      	adds	r7, r7, r3
 800ad84:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <_strtod_l+0x5e0>)
 800ad86:	00d2      	lsls	r2, r2, #3
 800ad88:	189d      	adds	r5, r3, r2
 800ad8a:	6828      	ldr	r0, [r5, #0]
 800ad8c:	6869      	ldr	r1, [r5, #4]
 800ad8e:	0032      	movs	r2, r6
 800ad90:	003b      	movs	r3, r7
 800ad92:	f7f6 fc6b 	bl	800166c <__aeabi_dmul>
 800ad96:	4b26      	ldr	r3, [pc, #152]	; (800ae30 <_strtod_l+0x5cc>)
 800ad98:	4a2c      	ldr	r2, [pc, #176]	; (800ae4c <_strtod_l+0x5e8>)
 800ad9a:	0006      	movs	r6, r0
 800ad9c:	400b      	ands	r3, r1
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d8be      	bhi.n	800ad20 <_strtod_l+0x4bc>
 800ada2:	4a2b      	ldr	r2, [pc, #172]	; (800ae50 <_strtod_l+0x5ec>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d913      	bls.n	800add0 <_strtod_l+0x56c>
 800ada8:	2601      	movs	r6, #1
 800adaa:	4f2a      	ldr	r7, [pc, #168]	; (800ae54 <_strtod_l+0x5f0>)
 800adac:	4276      	negs	r6, r6
 800adae:	2300      	movs	r3, #0
 800adb0:	9307      	str	r3, [sp, #28]
 800adb2:	e088      	b.n	800aec6 <_strtod_l+0x662>
 800adb4:	2201      	movs	r2, #1
 800adb6:	4214      	tst	r4, r2
 800adb8:	d004      	beq.n	800adc4 <_strtod_l+0x560>
 800adba:	682a      	ldr	r2, [r5, #0]
 800adbc:	686b      	ldr	r3, [r5, #4]
 800adbe:	f7f6 fc55 	bl	800166c <__aeabi_dmul>
 800adc2:	2301      	movs	r3, #1
 800adc4:	9a07      	ldr	r2, [sp, #28]
 800adc6:	1064      	asrs	r4, r4, #1
 800adc8:	3201      	adds	r2, #1
 800adca:	9207      	str	r2, [sp, #28]
 800adcc:	3508      	adds	r5, #8
 800adce:	e7d0      	b.n	800ad72 <_strtod_l+0x50e>
 800add0:	23d4      	movs	r3, #212	; 0xd4
 800add2:	049b      	lsls	r3, r3, #18
 800add4:	18cf      	adds	r7, r1, r3
 800add6:	e7ea      	b.n	800adae <_strtod_l+0x54a>
 800add8:	2c00      	cmp	r4, #0
 800adda:	d0e8      	beq.n	800adae <_strtod_l+0x54a>
 800addc:	4264      	negs	r4, r4
 800adde:	230f      	movs	r3, #15
 800ade0:	0022      	movs	r2, r4
 800ade2:	401a      	ands	r2, r3
 800ade4:	421c      	tst	r4, r3
 800ade6:	d00a      	beq.n	800adfe <_strtod_l+0x59a>
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <_strtod_l+0x5dc>)
 800adea:	00d2      	lsls	r2, r2, #3
 800adec:	189b      	adds	r3, r3, r2
 800adee:	0030      	movs	r0, r6
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	0039      	movs	r1, r7
 800adf6:	f7f6 f83f 	bl	8000e78 <__aeabi_ddiv>
 800adfa:	0006      	movs	r6, r0
 800adfc:	000f      	movs	r7, r1
 800adfe:	1124      	asrs	r4, r4, #4
 800ae00:	d0d5      	beq.n	800adae <_strtod_l+0x54a>
 800ae02:	2c1f      	cmp	r4, #31
 800ae04:	dd28      	ble.n	800ae58 <_strtod_l+0x5f4>
 800ae06:	2300      	movs	r3, #0
 800ae08:	9305      	str	r3, [sp, #20]
 800ae0a:	9306      	str	r3, [sp, #24]
 800ae0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ae0e:	9308      	str	r3, [sp, #32]
 800ae10:	2322      	movs	r3, #34	; 0x22
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	2600      	movs	r6, #0
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1a:	2700      	movs	r7, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d18d      	bne.n	800ad3c <_strtod_l+0x4d8>
 800ae20:	e55b      	b.n	800a8da <_strtod_l+0x76>
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	00004e1f 	.word	0x00004e1f
 800ae28:	080142d9 	.word	0x080142d9
 800ae2c:	08013fb8 	.word	0x08013fb8
 800ae30:	7ff00000 	.word	0x7ff00000
 800ae34:	080142d1 	.word	0x080142d1
 800ae38:	08014387 	.word	0x08014387
 800ae3c:	08014383 	.word	0x08014383
 800ae40:	080141f8 	.word	0x080141f8
 800ae44:	080141d0 	.word	0x080141d0
 800ae48:	fcb00000 	.word	0xfcb00000
 800ae4c:	7ca00000 	.word	0x7ca00000
 800ae50:	7c900000 	.word	0x7c900000
 800ae54:	7fefffff 	.word	0x7fefffff
 800ae58:	2310      	movs	r3, #16
 800ae5a:	0022      	movs	r2, r4
 800ae5c:	401a      	ands	r2, r3
 800ae5e:	9207      	str	r2, [sp, #28]
 800ae60:	421c      	tst	r4, r3
 800ae62:	d001      	beq.n	800ae68 <_strtod_l+0x604>
 800ae64:	335a      	adds	r3, #90	; 0x5a
 800ae66:	9307      	str	r3, [sp, #28]
 800ae68:	0030      	movs	r0, r6
 800ae6a:	0039      	movs	r1, r7
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4dc4      	ldr	r5, [pc, #784]	; (800b180 <_strtod_l+0x91c>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	4214      	tst	r4, r2
 800ae74:	d004      	beq.n	800ae80 <_strtod_l+0x61c>
 800ae76:	682a      	ldr	r2, [r5, #0]
 800ae78:	686b      	ldr	r3, [r5, #4]
 800ae7a:	f7f6 fbf7 	bl	800166c <__aeabi_dmul>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	1064      	asrs	r4, r4, #1
 800ae82:	3508      	adds	r5, #8
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	d1f3      	bne.n	800ae70 <_strtod_l+0x60c>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <_strtod_l+0x62c>
 800ae8c:	0006      	movs	r6, r0
 800ae8e:	000f      	movs	r7, r1
 800ae90:	9b07      	ldr	r3, [sp, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00f      	beq.n	800aeb6 <_strtod_l+0x652>
 800ae96:	236b      	movs	r3, #107	; 0x6b
 800ae98:	007a      	lsls	r2, r7, #1
 800ae9a:	0d52      	lsrs	r2, r2, #21
 800ae9c:	0039      	movs	r1, r7
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dd08      	ble.n	800aeb6 <_strtod_l+0x652>
 800aea4:	2b1f      	cmp	r3, #31
 800aea6:	dc00      	bgt.n	800aeaa <_strtod_l+0x646>
 800aea8:	e121      	b.n	800b0ee <_strtod_l+0x88a>
 800aeaa:	2600      	movs	r6, #0
 800aeac:	2b34      	cmp	r3, #52	; 0x34
 800aeae:	dc00      	bgt.n	800aeb2 <_strtod_l+0x64e>
 800aeb0:	e116      	b.n	800b0e0 <_strtod_l+0x87c>
 800aeb2:	27dc      	movs	r7, #220	; 0xdc
 800aeb4:	04bf      	lsls	r7, r7, #18
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	0030      	movs	r0, r6
 800aebc:	0039      	movs	r1, r7
 800aebe:	f7f5 fac3 	bl	8000448 <__aeabi_dcmpeq>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d19f      	bne.n	800ae06 <_strtod_l+0x5a2>
 800aec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec8:	9a08      	ldr	r2, [sp, #32]
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	9804      	ldr	r0, [sp, #16]
 800aed2:	f001 fb01 	bl	800c4d8 <__s2b>
 800aed6:	900d      	str	r0, [sp, #52]	; 0x34
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d100      	bne.n	800aede <_strtod_l+0x67a>
 800aedc:	e720      	b.n	800ad20 <_strtod_l+0x4bc>
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	9906      	ldr	r1, [sp, #24]
 800aee2:	17da      	asrs	r2, r3, #31
 800aee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aee6:	1a5b      	subs	r3, r3, r1
 800aee8:	401a      	ands	r2, r3
 800aeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeec:	9215      	str	r2, [sp, #84]	; 0x54
 800aeee:	43db      	mvns	r3, r3
 800aef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef2:	17db      	asrs	r3, r3, #31
 800aef4:	401a      	ands	r2, r3
 800aef6:	2300      	movs	r3, #0
 800aef8:	9218      	str	r2, [sp, #96]	; 0x60
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	9306      	str	r3, [sp, #24]
 800aefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af00:	9804      	ldr	r0, [sp, #16]
 800af02:	6859      	ldr	r1, [r3, #4]
 800af04:	f001 fa72 	bl	800c3ec <_Balloc>
 800af08:	9008      	str	r0, [sp, #32]
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d100      	bne.n	800af10 <_strtod_l+0x6ac>
 800af0e:	e70c      	b.n	800ad2a <_strtod_l+0x4c6>
 800af10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af12:	300c      	adds	r0, #12
 800af14:	0019      	movs	r1, r3
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	310c      	adds	r1, #12
 800af1a:	3202      	adds	r2, #2
 800af1c:	0092      	lsls	r2, r2, #2
 800af1e:	f000 fdca 	bl	800bab6 <memcpy>
 800af22:	ab1e      	add	r3, sp, #120	; 0x78
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	ab1d      	add	r3, sp, #116	; 0x74
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	0032      	movs	r2, r6
 800af2c:	003b      	movs	r3, r7
 800af2e:	9804      	ldr	r0, [sp, #16]
 800af30:	9610      	str	r6, [sp, #64]	; 0x40
 800af32:	9711      	str	r7, [sp, #68]	; 0x44
 800af34:	f001 fdf8 	bl	800cb28 <__d2b>
 800af38:	901c      	str	r0, [sp, #112]	; 0x70
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d100      	bne.n	800af40 <_strtod_l+0x6dc>
 800af3e:	e6f4      	b.n	800ad2a <_strtod_l+0x4c6>
 800af40:	2101      	movs	r1, #1
 800af42:	9804      	ldr	r0, [sp, #16]
 800af44:	f001 fb5c 	bl	800c600 <__i2b>
 800af48:	9006      	str	r0, [sp, #24]
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d100      	bne.n	800af50 <_strtod_l+0x6ec>
 800af4e:	e6ec      	b.n	800ad2a <_strtod_l+0x4c6>
 800af50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af54:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af56:	1ad4      	subs	r4, r2, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	db01      	blt.n	800af60 <_strtod_l+0x6fc>
 800af5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800af5e:	195d      	adds	r5, r3, r5
 800af60:	9907      	ldr	r1, [sp, #28]
 800af62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af64:	1a5b      	subs	r3, r3, r1
 800af66:	2136      	movs	r1, #54	; 0x36
 800af68:	189b      	adds	r3, r3, r2
 800af6a:	1a8a      	subs	r2, r1, r2
 800af6c:	4985      	ldr	r1, [pc, #532]	; (800b184 <_strtod_l+0x920>)
 800af6e:	2001      	movs	r0, #1
 800af70:	468c      	mov	ip, r1
 800af72:	2100      	movs	r1, #0
 800af74:	3b01      	subs	r3, #1
 800af76:	9114      	str	r1, [sp, #80]	; 0x50
 800af78:	9012      	str	r0, [sp, #72]	; 0x48
 800af7a:	4563      	cmp	r3, ip
 800af7c:	da07      	bge.n	800af8e <_strtod_l+0x72a>
 800af7e:	4661      	mov	r1, ip
 800af80:	1ac9      	subs	r1, r1, r3
 800af82:	1a52      	subs	r2, r2, r1
 800af84:	291f      	cmp	r1, #31
 800af86:	dd00      	ble.n	800af8a <_strtod_l+0x726>
 800af88:	e0b6      	b.n	800b0f8 <_strtod_l+0x894>
 800af8a:	4088      	lsls	r0, r1
 800af8c:	9012      	str	r0, [sp, #72]	; 0x48
 800af8e:	18ab      	adds	r3, r5, r2
 800af90:	930c      	str	r3, [sp, #48]	; 0x30
 800af92:	18a4      	adds	r4, r4, r2
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af98:	191c      	adds	r4, r3, r4
 800af9a:	002b      	movs	r3, r5
 800af9c:	4295      	cmp	r5, r2
 800af9e:	dd00      	ble.n	800afa2 <_strtod_l+0x73e>
 800afa0:	0013      	movs	r3, r2
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	dd00      	ble.n	800afa8 <_strtod_l+0x744>
 800afa6:	0023      	movs	r3, r4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dd04      	ble.n	800afb6 <_strtod_l+0x752>
 800afac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afae:	1ae4      	subs	r4, r4, r3
 800afb0:	1ad2      	subs	r2, r2, r3
 800afb2:	920c      	str	r2, [sp, #48]	; 0x30
 800afb4:	1aed      	subs	r5, r5, r3
 800afb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dd17      	ble.n	800afec <_strtod_l+0x788>
 800afbc:	001a      	movs	r2, r3
 800afbe:	9906      	ldr	r1, [sp, #24]
 800afc0:	9804      	ldr	r0, [sp, #16]
 800afc2:	f001 fbe5 	bl	800c790 <__pow5mult>
 800afc6:	9006      	str	r0, [sp, #24]
 800afc8:	2800      	cmp	r0, #0
 800afca:	d100      	bne.n	800afce <_strtod_l+0x76a>
 800afcc:	e6ad      	b.n	800ad2a <_strtod_l+0x4c6>
 800afce:	0001      	movs	r1, r0
 800afd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afd2:	9804      	ldr	r0, [sp, #16]
 800afd4:	f001 fb2c 	bl	800c630 <__multiply>
 800afd8:	900e      	str	r0, [sp, #56]	; 0x38
 800afda:	2800      	cmp	r0, #0
 800afdc:	d100      	bne.n	800afe0 <_strtod_l+0x77c>
 800afde:	e6a4      	b.n	800ad2a <_strtod_l+0x4c6>
 800afe0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afe2:	9804      	ldr	r0, [sp, #16]
 800afe4:	f001 fa2a 	bl	800c43c <_Bfree>
 800afe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afea:	931c      	str	r3, [sp, #112]	; 0x70
 800afec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dd00      	ble.n	800aff4 <_strtod_l+0x790>
 800aff2:	e087      	b.n	800b104 <_strtod_l+0x8a0>
 800aff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd08      	ble.n	800b00c <_strtod_l+0x7a8>
 800affa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800affc:	9908      	ldr	r1, [sp, #32]
 800affe:	9804      	ldr	r0, [sp, #16]
 800b000:	f001 fbc6 	bl	800c790 <__pow5mult>
 800b004:	9008      	str	r0, [sp, #32]
 800b006:	2800      	cmp	r0, #0
 800b008:	d100      	bne.n	800b00c <_strtod_l+0x7a8>
 800b00a:	e68e      	b.n	800ad2a <_strtod_l+0x4c6>
 800b00c:	2c00      	cmp	r4, #0
 800b00e:	dd08      	ble.n	800b022 <_strtod_l+0x7be>
 800b010:	0022      	movs	r2, r4
 800b012:	9908      	ldr	r1, [sp, #32]
 800b014:	9804      	ldr	r0, [sp, #16]
 800b016:	f001 fbfd 	bl	800c814 <__lshift>
 800b01a:	9008      	str	r0, [sp, #32]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d100      	bne.n	800b022 <_strtod_l+0x7be>
 800b020:	e683      	b.n	800ad2a <_strtod_l+0x4c6>
 800b022:	2d00      	cmp	r5, #0
 800b024:	dd08      	ble.n	800b038 <_strtod_l+0x7d4>
 800b026:	002a      	movs	r2, r5
 800b028:	9906      	ldr	r1, [sp, #24]
 800b02a:	9804      	ldr	r0, [sp, #16]
 800b02c:	f001 fbf2 	bl	800c814 <__lshift>
 800b030:	9006      	str	r0, [sp, #24]
 800b032:	2800      	cmp	r0, #0
 800b034:	d100      	bne.n	800b038 <_strtod_l+0x7d4>
 800b036:	e678      	b.n	800ad2a <_strtod_l+0x4c6>
 800b038:	9a08      	ldr	r2, [sp, #32]
 800b03a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b03c:	9804      	ldr	r0, [sp, #16]
 800b03e:	f001 fc73 	bl	800c928 <__mdiff>
 800b042:	9005      	str	r0, [sp, #20]
 800b044:	2800      	cmp	r0, #0
 800b046:	d100      	bne.n	800b04a <_strtod_l+0x7e6>
 800b048:	e66f      	b.n	800ad2a <_strtod_l+0x4c6>
 800b04a:	2200      	movs	r2, #0
 800b04c:	68c3      	ldr	r3, [r0, #12]
 800b04e:	9906      	ldr	r1, [sp, #24]
 800b050:	60c2      	str	r2, [r0, #12]
 800b052:	930c      	str	r3, [sp, #48]	; 0x30
 800b054:	f001 fc4c 	bl	800c8f0 <__mcmp>
 800b058:	2800      	cmp	r0, #0
 800b05a:	da5d      	bge.n	800b118 <_strtod_l+0x8b4>
 800b05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b05e:	4333      	orrs	r3, r6
 800b060:	d000      	beq.n	800b064 <_strtod_l+0x800>
 800b062:	e088      	b.n	800b176 <_strtod_l+0x912>
 800b064:	033b      	lsls	r3, r7, #12
 800b066:	d000      	beq.n	800b06a <_strtod_l+0x806>
 800b068:	e085      	b.n	800b176 <_strtod_l+0x912>
 800b06a:	22d6      	movs	r2, #214	; 0xd6
 800b06c:	4b46      	ldr	r3, [pc, #280]	; (800b188 <_strtod_l+0x924>)
 800b06e:	04d2      	lsls	r2, r2, #19
 800b070:	403b      	ands	r3, r7
 800b072:	4293      	cmp	r3, r2
 800b074:	d97f      	bls.n	800b176 <_strtod_l+0x912>
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d103      	bne.n	800b086 <_strtod_l+0x822>
 800b07e:	9b05      	ldr	r3, [sp, #20]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b01      	cmp	r3, #1
 800b084:	dd77      	ble.n	800b176 <_strtod_l+0x912>
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	2201      	movs	r2, #1
 800b08a:	9804      	ldr	r0, [sp, #16]
 800b08c:	f001 fbc2 	bl	800c814 <__lshift>
 800b090:	9906      	ldr	r1, [sp, #24]
 800b092:	9005      	str	r0, [sp, #20]
 800b094:	f001 fc2c 	bl	800c8f0 <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dd6c      	ble.n	800b176 <_strtod_l+0x912>
 800b09c:	9907      	ldr	r1, [sp, #28]
 800b09e:	003b      	movs	r3, r7
 800b0a0:	4a39      	ldr	r2, [pc, #228]	; (800b188 <_strtod_l+0x924>)
 800b0a2:	2900      	cmp	r1, #0
 800b0a4:	d100      	bne.n	800b0a8 <_strtod_l+0x844>
 800b0a6:	e094      	b.n	800b1d2 <_strtod_l+0x96e>
 800b0a8:	0011      	movs	r1, r2
 800b0aa:	20d6      	movs	r0, #214	; 0xd6
 800b0ac:	4039      	ands	r1, r7
 800b0ae:	04c0      	lsls	r0, r0, #19
 800b0b0:	4281      	cmp	r1, r0
 800b0b2:	dd00      	ble.n	800b0b6 <_strtod_l+0x852>
 800b0b4:	e08d      	b.n	800b1d2 <_strtod_l+0x96e>
 800b0b6:	23dc      	movs	r3, #220	; 0xdc
 800b0b8:	049b      	lsls	r3, r3, #18
 800b0ba:	4299      	cmp	r1, r3
 800b0bc:	dc00      	bgt.n	800b0c0 <_strtod_l+0x85c>
 800b0be:	e6a7      	b.n	800ae10 <_strtod_l+0x5ac>
 800b0c0:	0030      	movs	r0, r6
 800b0c2:	0039      	movs	r1, r7
 800b0c4:	4b31      	ldr	r3, [pc, #196]	; (800b18c <_strtod_l+0x928>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f7f6 fad0 	bl	800166c <__aeabi_dmul>
 800b0cc:	4b2e      	ldr	r3, [pc, #184]	; (800b188 <_strtod_l+0x924>)
 800b0ce:	0006      	movs	r6, r0
 800b0d0:	000f      	movs	r7, r1
 800b0d2:	420b      	tst	r3, r1
 800b0d4:	d000      	beq.n	800b0d8 <_strtod_l+0x874>
 800b0d6:	e631      	b.n	800ad3c <_strtod_l+0x4d8>
 800b0d8:	2322      	movs	r3, #34	; 0x22
 800b0da:	9a04      	ldr	r2, [sp, #16]
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	e62d      	b.n	800ad3c <_strtod_l+0x4d8>
 800b0e0:	234b      	movs	r3, #75	; 0x4b
 800b0e2:	1a9a      	subs	r2, r3, r2
 800b0e4:	3b4c      	subs	r3, #76	; 0x4c
 800b0e6:	4093      	lsls	r3, r2
 800b0e8:	4019      	ands	r1, r3
 800b0ea:	000f      	movs	r7, r1
 800b0ec:	e6e3      	b.n	800aeb6 <_strtod_l+0x652>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4252      	negs	r2, r2
 800b0f2:	409a      	lsls	r2, r3
 800b0f4:	4016      	ands	r6, r2
 800b0f6:	e6de      	b.n	800aeb6 <_strtod_l+0x652>
 800b0f8:	4925      	ldr	r1, [pc, #148]	; (800b190 <_strtod_l+0x92c>)
 800b0fa:	1acb      	subs	r3, r1, r3
 800b0fc:	0001      	movs	r1, r0
 800b0fe:	4099      	lsls	r1, r3
 800b100:	9114      	str	r1, [sp, #80]	; 0x50
 800b102:	e743      	b.n	800af8c <_strtod_l+0x728>
 800b104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b106:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b108:	9804      	ldr	r0, [sp, #16]
 800b10a:	f001 fb83 	bl	800c814 <__lshift>
 800b10e:	901c      	str	r0, [sp, #112]	; 0x70
 800b110:	2800      	cmp	r0, #0
 800b112:	d000      	beq.n	800b116 <_strtod_l+0x8b2>
 800b114:	e76e      	b.n	800aff4 <_strtod_l+0x790>
 800b116:	e608      	b.n	800ad2a <_strtod_l+0x4c6>
 800b118:	970e      	str	r7, [sp, #56]	; 0x38
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d177      	bne.n	800b20e <_strtod_l+0x9aa>
 800b11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b120:	033b      	lsls	r3, r7, #12
 800b122:	0b1b      	lsrs	r3, r3, #12
 800b124:	2a00      	cmp	r2, #0
 800b126:	d039      	beq.n	800b19c <_strtod_l+0x938>
 800b128:	4a1a      	ldr	r2, [pc, #104]	; (800b194 <_strtod_l+0x930>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d139      	bne.n	800b1a2 <_strtod_l+0x93e>
 800b12e:	2101      	movs	r1, #1
 800b130:	9b07      	ldr	r3, [sp, #28]
 800b132:	4249      	negs	r1, r1
 800b134:	0032      	movs	r2, r6
 800b136:	0008      	movs	r0, r1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <_strtod_l+0x8f0>
 800b13c:	24d4      	movs	r4, #212	; 0xd4
 800b13e:	4b12      	ldr	r3, [pc, #72]	; (800b188 <_strtod_l+0x924>)
 800b140:	0008      	movs	r0, r1
 800b142:	403b      	ands	r3, r7
 800b144:	04e4      	lsls	r4, r4, #19
 800b146:	42a3      	cmp	r3, r4
 800b148:	d804      	bhi.n	800b154 <_strtod_l+0x8f0>
 800b14a:	306c      	adds	r0, #108	; 0x6c
 800b14c:	0d1b      	lsrs	r3, r3, #20
 800b14e:	1ac3      	subs	r3, r0, r3
 800b150:	4099      	lsls	r1, r3
 800b152:	0008      	movs	r0, r1
 800b154:	4282      	cmp	r2, r0
 800b156:	d124      	bne.n	800b1a2 <_strtod_l+0x93e>
 800b158:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <_strtod_l+0x934>)
 800b15a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b15c:	4299      	cmp	r1, r3
 800b15e:	d102      	bne.n	800b166 <_strtod_l+0x902>
 800b160:	3201      	adds	r2, #1
 800b162:	d100      	bne.n	800b166 <_strtod_l+0x902>
 800b164:	e5e1      	b.n	800ad2a <_strtod_l+0x4c6>
 800b166:	4b08      	ldr	r3, [pc, #32]	; (800b188 <_strtod_l+0x924>)
 800b168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b16a:	2600      	movs	r6, #0
 800b16c:	401a      	ands	r2, r3
 800b16e:	0013      	movs	r3, r2
 800b170:	2280      	movs	r2, #128	; 0x80
 800b172:	0352      	lsls	r2, r2, #13
 800b174:	189f      	adds	r7, r3, r2
 800b176:	9b07      	ldr	r3, [sp, #28]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1a1      	bne.n	800b0c0 <_strtod_l+0x85c>
 800b17c:	e5de      	b.n	800ad3c <_strtod_l+0x4d8>
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	08013fd0 	.word	0x08013fd0
 800b184:	fffffc02 	.word	0xfffffc02
 800b188:	7ff00000 	.word	0x7ff00000
 800b18c:	39500000 	.word	0x39500000
 800b190:	fffffbe2 	.word	0xfffffbe2
 800b194:	000fffff 	.word	0x000fffff
 800b198:	7fefffff 	.word	0x7fefffff
 800b19c:	4333      	orrs	r3, r6
 800b19e:	d100      	bne.n	800b1a2 <_strtod_l+0x93e>
 800b1a0:	e77c      	b.n	800b09c <_strtod_l+0x838>
 800b1a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01d      	beq.n	800b1e4 <_strtod_l+0x980>
 800b1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1ac:	4213      	tst	r3, r2
 800b1ae:	d0e2      	beq.n	800b176 <_strtod_l+0x912>
 800b1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1b2:	0030      	movs	r0, r6
 800b1b4:	0039      	movs	r1, r7
 800b1b6:	9a07      	ldr	r2, [sp, #28]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d017      	beq.n	800b1ec <_strtod_l+0x988>
 800b1bc:	f7ff fb3a 	bl	800a834 <sulp>
 800b1c0:	0002      	movs	r2, r0
 800b1c2:	000b      	movs	r3, r1
 800b1c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1c8:	f7f5 faf6 	bl	80007b8 <__aeabi_dadd>
 800b1cc:	0006      	movs	r6, r0
 800b1ce:	000f      	movs	r7, r1
 800b1d0:	e7d1      	b.n	800b176 <_strtod_l+0x912>
 800b1d2:	2601      	movs	r6, #1
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	4a98      	ldr	r2, [pc, #608]	; (800b438 <_strtod_l+0xbd4>)
 800b1d8:	4276      	negs	r6, r6
 800b1da:	189b      	adds	r3, r3, r2
 800b1dc:	4a97      	ldr	r2, [pc, #604]	; (800b43c <_strtod_l+0xbd8>)
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	0017      	movs	r7, r2
 800b1e2:	e7c8      	b.n	800b176 <_strtod_l+0x912>
 800b1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1e6:	4233      	tst	r3, r6
 800b1e8:	d0c5      	beq.n	800b176 <_strtod_l+0x912>
 800b1ea:	e7e1      	b.n	800b1b0 <_strtod_l+0x94c>
 800b1ec:	f7ff fb22 	bl	800a834 <sulp>
 800b1f0:	0002      	movs	r2, r0
 800b1f2:	000b      	movs	r3, r1
 800b1f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1f8:	f7f6 fcfa 	bl	8001bf0 <__aeabi_dsub>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2300      	movs	r3, #0
 800b200:	0006      	movs	r6, r0
 800b202:	000f      	movs	r7, r1
 800b204:	f7f5 f920 	bl	8000448 <__aeabi_dcmpeq>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0b4      	beq.n	800b176 <_strtod_l+0x912>
 800b20c:	e600      	b.n	800ae10 <_strtod_l+0x5ac>
 800b20e:	9906      	ldr	r1, [sp, #24]
 800b210:	9805      	ldr	r0, [sp, #20]
 800b212:	f001 fce9 	bl	800cbe8 <__ratio>
 800b216:	2380      	movs	r3, #128	; 0x80
 800b218:	2200      	movs	r2, #0
 800b21a:	05db      	lsls	r3, r3, #23
 800b21c:	0004      	movs	r4, r0
 800b21e:	000d      	movs	r5, r1
 800b220:	f7f5 f922 	bl	8000468 <__aeabi_dcmple>
 800b224:	2800      	cmp	r0, #0
 800b226:	d06d      	beq.n	800b304 <_strtod_l+0xaa0>
 800b228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d000      	beq.n	800b230 <_strtod_l+0x9cc>
 800b22e:	e07e      	b.n	800b32e <_strtod_l+0xaca>
 800b230:	2e00      	cmp	r6, #0
 800b232:	d158      	bne.n	800b2e6 <_strtod_l+0xa82>
 800b234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b236:	031b      	lsls	r3, r3, #12
 800b238:	d000      	beq.n	800b23c <_strtod_l+0x9d8>
 800b23a:	e07f      	b.n	800b33c <_strtod_l+0xad8>
 800b23c:	2200      	movs	r2, #0
 800b23e:	0020      	movs	r0, r4
 800b240:	0029      	movs	r1, r5
 800b242:	4b7f      	ldr	r3, [pc, #508]	; (800b440 <_strtod_l+0xbdc>)
 800b244:	f7f5 f906 	bl	8000454 <__aeabi_dcmplt>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d158      	bne.n	800b2fe <_strtod_l+0xa9a>
 800b24c:	0020      	movs	r0, r4
 800b24e:	0029      	movs	r1, r5
 800b250:	2200      	movs	r2, #0
 800b252:	4b7c      	ldr	r3, [pc, #496]	; (800b444 <_strtod_l+0xbe0>)
 800b254:	f7f6 fa0a 	bl	800166c <__aeabi_dmul>
 800b258:	0004      	movs	r4, r0
 800b25a:	000d      	movs	r5, r1
 800b25c:	2380      	movs	r3, #128	; 0x80
 800b25e:	061b      	lsls	r3, r3, #24
 800b260:	940a      	str	r4, [sp, #40]	; 0x28
 800b262:	18eb      	adds	r3, r5, r3
 800b264:	930b      	str	r3, [sp, #44]	; 0x2c
 800b266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b26a:	9212      	str	r2, [sp, #72]	; 0x48
 800b26c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b26e:	4a76      	ldr	r2, [pc, #472]	; (800b448 <_strtod_l+0xbe4>)
 800b270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b272:	4013      	ands	r3, r2
 800b274:	9314      	str	r3, [sp, #80]	; 0x50
 800b276:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b278:	4b74      	ldr	r3, [pc, #464]	; (800b44c <_strtod_l+0xbe8>)
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d000      	beq.n	800b280 <_strtod_l+0xa1c>
 800b27e:	e091      	b.n	800b3a4 <_strtod_l+0xb40>
 800b280:	4a73      	ldr	r2, [pc, #460]	; (800b450 <_strtod_l+0xbec>)
 800b282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b284:	4694      	mov	ip, r2
 800b286:	4463      	add	r3, ip
 800b288:	001f      	movs	r7, r3
 800b28a:	0030      	movs	r0, r6
 800b28c:	0019      	movs	r1, r3
 800b28e:	f001 fbe3 	bl	800ca58 <__ulp>
 800b292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b296:	f7f6 f9e9 	bl	800166c <__aeabi_dmul>
 800b29a:	0032      	movs	r2, r6
 800b29c:	003b      	movs	r3, r7
 800b29e:	f7f5 fa8b 	bl	80007b8 <__aeabi_dadd>
 800b2a2:	4a69      	ldr	r2, [pc, #420]	; (800b448 <_strtod_l+0xbe4>)
 800b2a4:	4b6b      	ldr	r3, [pc, #428]	; (800b454 <_strtod_l+0xbf0>)
 800b2a6:	0006      	movs	r6, r0
 800b2a8:	400a      	ands	r2, r1
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d949      	bls.n	800b342 <_strtod_l+0xade>
 800b2ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b2b0:	4b69      	ldr	r3, [pc, #420]	; (800b458 <_strtod_l+0xbf4>)
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d103      	bne.n	800b2be <_strtod_l+0xa5a>
 800b2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	d100      	bne.n	800b2be <_strtod_l+0xa5a>
 800b2bc:	e535      	b.n	800ad2a <_strtod_l+0x4c6>
 800b2be:	2601      	movs	r6, #1
 800b2c0:	4f65      	ldr	r7, [pc, #404]	; (800b458 <_strtod_l+0xbf4>)
 800b2c2:	4276      	negs	r6, r6
 800b2c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2c6:	9804      	ldr	r0, [sp, #16]
 800b2c8:	f001 f8b8 	bl	800c43c <_Bfree>
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	9804      	ldr	r0, [sp, #16]
 800b2d0:	f001 f8b4 	bl	800c43c <_Bfree>
 800b2d4:	9906      	ldr	r1, [sp, #24]
 800b2d6:	9804      	ldr	r0, [sp, #16]
 800b2d8:	f001 f8b0 	bl	800c43c <_Bfree>
 800b2dc:	9905      	ldr	r1, [sp, #20]
 800b2de:	9804      	ldr	r0, [sp, #16]
 800b2e0:	f001 f8ac 	bl	800c43c <_Bfree>
 800b2e4:	e60b      	b.n	800aefe <_strtod_l+0x69a>
 800b2e6:	2e01      	cmp	r6, #1
 800b2e8:	d103      	bne.n	800b2f2 <_strtod_l+0xa8e>
 800b2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d100      	bne.n	800b2f2 <_strtod_l+0xa8e>
 800b2f0:	e58e      	b.n	800ae10 <_strtod_l+0x5ac>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	4c59      	ldr	r4, [pc, #356]	; (800b45c <_strtod_l+0xbf8>)
 800b2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b2fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b2fc:	e01c      	b.n	800b338 <_strtod_l+0xad4>
 800b2fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b300:	4d50      	ldr	r5, [pc, #320]	; (800b444 <_strtod_l+0xbe0>)
 800b302:	e7ab      	b.n	800b25c <_strtod_l+0x9f8>
 800b304:	2200      	movs	r2, #0
 800b306:	0020      	movs	r0, r4
 800b308:	0029      	movs	r1, r5
 800b30a:	4b4e      	ldr	r3, [pc, #312]	; (800b444 <_strtod_l+0xbe0>)
 800b30c:	f7f6 f9ae 	bl	800166c <__aeabi_dmul>
 800b310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b312:	0004      	movs	r4, r0
 800b314:	000b      	movs	r3, r1
 800b316:	000d      	movs	r5, r1
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d104      	bne.n	800b326 <_strtod_l+0xac2>
 800b31c:	2280      	movs	r2, #128	; 0x80
 800b31e:	0612      	lsls	r2, r2, #24
 800b320:	900a      	str	r0, [sp, #40]	; 0x28
 800b322:	188b      	adds	r3, r1, r2
 800b324:	e79e      	b.n	800b264 <_strtod_l+0xa00>
 800b326:	0002      	movs	r2, r0
 800b328:	920a      	str	r2, [sp, #40]	; 0x28
 800b32a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b32c:	e79b      	b.n	800b266 <_strtod_l+0xa02>
 800b32e:	2300      	movs	r3, #0
 800b330:	4c43      	ldr	r4, [pc, #268]	; (800b440 <_strtod_l+0xbdc>)
 800b332:	930a      	str	r3, [sp, #40]	; 0x28
 800b334:	940b      	str	r4, [sp, #44]	; 0x2c
 800b336:	2400      	movs	r4, #0
 800b338:	4d41      	ldr	r5, [pc, #260]	; (800b440 <_strtod_l+0xbdc>)
 800b33a:	e794      	b.n	800b266 <_strtod_l+0xa02>
 800b33c:	2300      	movs	r3, #0
 800b33e:	4c47      	ldr	r4, [pc, #284]	; (800b45c <_strtod_l+0xbf8>)
 800b340:	e7f7      	b.n	800b332 <_strtod_l+0xace>
 800b342:	23d4      	movs	r3, #212	; 0xd4
 800b344:	049b      	lsls	r3, r3, #18
 800b346:	18cf      	adds	r7, r1, r3
 800b348:	9b07      	ldr	r3, [sp, #28]
 800b34a:	970e      	str	r7, [sp, #56]	; 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1b9      	bne.n	800b2c4 <_strtod_l+0xa60>
 800b350:	4b3d      	ldr	r3, [pc, #244]	; (800b448 <_strtod_l+0xbe4>)
 800b352:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b354:	403b      	ands	r3, r7
 800b356:	429a      	cmp	r2, r3
 800b358:	d1b4      	bne.n	800b2c4 <_strtod_l+0xa60>
 800b35a:	0020      	movs	r0, r4
 800b35c:	0029      	movs	r1, r5
 800b35e:	f7f5 f90d 	bl	800057c <__aeabi_d2lz>
 800b362:	f7f5 f947 	bl	80005f4 <__aeabi_l2d>
 800b366:	0002      	movs	r2, r0
 800b368:	000b      	movs	r3, r1
 800b36a:	0020      	movs	r0, r4
 800b36c:	0029      	movs	r1, r5
 800b36e:	f7f6 fc3f 	bl	8001bf0 <__aeabi_dsub>
 800b372:	033b      	lsls	r3, r7, #12
 800b374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b376:	0b1b      	lsrs	r3, r3, #12
 800b378:	4333      	orrs	r3, r6
 800b37a:	4313      	orrs	r3, r2
 800b37c:	0004      	movs	r4, r0
 800b37e:	000d      	movs	r5, r1
 800b380:	4a37      	ldr	r2, [pc, #220]	; (800b460 <_strtod_l+0xbfc>)
 800b382:	2b00      	cmp	r3, #0
 800b384:	d054      	beq.n	800b430 <_strtod_l+0xbcc>
 800b386:	4b37      	ldr	r3, [pc, #220]	; (800b464 <_strtod_l+0xc00>)
 800b388:	f7f5 f864 	bl	8000454 <__aeabi_dcmplt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d000      	beq.n	800b392 <_strtod_l+0xb2e>
 800b390:	e4d4      	b.n	800ad3c <_strtod_l+0x4d8>
 800b392:	0020      	movs	r0, r4
 800b394:	0029      	movs	r1, r5
 800b396:	4a34      	ldr	r2, [pc, #208]	; (800b468 <_strtod_l+0xc04>)
 800b398:	4b2a      	ldr	r3, [pc, #168]	; (800b444 <_strtod_l+0xbe0>)
 800b39a:	f7f5 f86f 	bl	800047c <__aeabi_dcmpgt>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d090      	beq.n	800b2c4 <_strtod_l+0xa60>
 800b3a2:	e4cb      	b.n	800ad3c <_strtod_l+0x4d8>
 800b3a4:	9b07      	ldr	r3, [sp, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d02b      	beq.n	800b402 <_strtod_l+0xb9e>
 800b3aa:	23d4      	movs	r3, #212	; 0xd4
 800b3ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ae:	04db      	lsls	r3, r3, #19
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d826      	bhi.n	800b402 <_strtod_l+0xb9e>
 800b3b4:	0020      	movs	r0, r4
 800b3b6:	0029      	movs	r1, r5
 800b3b8:	4a2c      	ldr	r2, [pc, #176]	; (800b46c <_strtod_l+0xc08>)
 800b3ba:	4b2d      	ldr	r3, [pc, #180]	; (800b470 <_strtod_l+0xc0c>)
 800b3bc:	f7f5 f854 	bl	8000468 <__aeabi_dcmple>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d017      	beq.n	800b3f4 <_strtod_l+0xb90>
 800b3c4:	0020      	movs	r0, r4
 800b3c6:	0029      	movs	r1, r5
 800b3c8:	f7f5 f8ba 	bl	8000540 <__aeabi_d2uiz>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d100      	bne.n	800b3d2 <_strtod_l+0xb6e>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f7f7 f813 	bl	80023fc <__aeabi_ui2d>
 800b3d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d8:	0004      	movs	r4, r0
 800b3da:	000b      	movs	r3, r1
 800b3dc:	000d      	movs	r5, r1
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	d122      	bne.n	800b428 <_strtod_l+0xbc4>
 800b3e2:	2280      	movs	r2, #128	; 0x80
 800b3e4:	0612      	lsls	r2, r2, #24
 800b3e6:	188b      	adds	r3, r1, r2
 800b3e8:	9016      	str	r0, [sp, #88]	; 0x58
 800b3ea:	9317      	str	r3, [sp, #92]	; 0x5c
 800b3ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3f0:	9212      	str	r2, [sp, #72]	; 0x48
 800b3f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3f4:	22d6      	movs	r2, #214	; 0xd6
 800b3f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3f8:	04d2      	lsls	r2, r2, #19
 800b3fa:	189b      	adds	r3, r3, r2
 800b3fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3fe:	1a9b      	subs	r3, r3, r2
 800b400:	9313      	str	r3, [sp, #76]	; 0x4c
 800b402:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b404:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b406:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b408:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b40a:	f001 fb25 	bl	800ca58 <__ulp>
 800b40e:	0002      	movs	r2, r0
 800b410:	000b      	movs	r3, r1
 800b412:	0030      	movs	r0, r6
 800b414:	0039      	movs	r1, r7
 800b416:	f7f6 f929 	bl	800166c <__aeabi_dmul>
 800b41a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b41c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b41e:	f7f5 f9cb 	bl	80007b8 <__aeabi_dadd>
 800b422:	0006      	movs	r6, r0
 800b424:	000f      	movs	r7, r1
 800b426:	e78f      	b.n	800b348 <_strtod_l+0xae4>
 800b428:	0002      	movs	r2, r0
 800b42a:	9216      	str	r2, [sp, #88]	; 0x58
 800b42c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b42e:	e7dd      	b.n	800b3ec <_strtod_l+0xb88>
 800b430:	4b10      	ldr	r3, [pc, #64]	; (800b474 <_strtod_l+0xc10>)
 800b432:	f7f5 f80f 	bl	8000454 <__aeabi_dcmplt>
 800b436:	e7b2      	b.n	800b39e <_strtod_l+0xb3a>
 800b438:	fff00000 	.word	0xfff00000
 800b43c:	000fffff 	.word	0x000fffff
 800b440:	3ff00000 	.word	0x3ff00000
 800b444:	3fe00000 	.word	0x3fe00000
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	7fe00000 	.word	0x7fe00000
 800b450:	fcb00000 	.word	0xfcb00000
 800b454:	7c9fffff 	.word	0x7c9fffff
 800b458:	7fefffff 	.word	0x7fefffff
 800b45c:	bff00000 	.word	0xbff00000
 800b460:	94a03595 	.word	0x94a03595
 800b464:	3fdfffff 	.word	0x3fdfffff
 800b468:	35afe535 	.word	0x35afe535
 800b46c:	ffc00000 	.word	0xffc00000
 800b470:	41dfffff 	.word	0x41dfffff
 800b474:	3fcfffff 	.word	0x3fcfffff

0800b478 <_strtod_r>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	4b02      	ldr	r3, [pc, #8]	; (800b484 <_strtod_r+0xc>)
 800b47c:	f7ff f9f2 	bl	800a864 <_strtod_l>
 800b480:	bd10      	pop	{r4, pc}
 800b482:	46c0      	nop			; (mov r8, r8)
 800b484:	2000043c 	.word	0x2000043c

0800b488 <strtod>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4c04      	ldr	r4, [pc, #16]	; (800b49c <strtod+0x14>)
 800b48c:	000a      	movs	r2, r1
 800b48e:	0001      	movs	r1, r0
 800b490:	4b03      	ldr	r3, [pc, #12]	; (800b4a0 <strtod+0x18>)
 800b492:	6820      	ldr	r0, [r4, #0]
 800b494:	f7ff f9e6 	bl	800a864 <_strtod_l>
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	46c0      	nop			; (mov r8, r8)
 800b49c:	200006c8 	.word	0x200006c8
 800b4a0:	2000043c 	.word	0x2000043c

0800b4a4 <_strtol_l.constprop.0>:
 800b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	001e      	movs	r6, r3
 800b4aa:	9005      	str	r0, [sp, #20]
 800b4ac:	9101      	str	r1, [sp, #4]
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d048      	beq.n	800b546 <_strtol_l.constprop.0+0xa2>
 800b4b4:	000b      	movs	r3, r1
 800b4b6:	2e24      	cmp	r6, #36	; 0x24
 800b4b8:	d845      	bhi.n	800b546 <_strtol_l.constprop.0+0xa2>
 800b4ba:	4a3b      	ldr	r2, [pc, #236]	; (800b5a8 <_strtol_l.constprop.0+0x104>)
 800b4bc:	2108      	movs	r1, #8
 800b4be:	4694      	mov	ip, r2
 800b4c0:	001a      	movs	r2, r3
 800b4c2:	4660      	mov	r0, ip
 800b4c4:	7814      	ldrb	r4, [r2, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	5d00      	ldrb	r0, [r0, r4]
 800b4ca:	001d      	movs	r5, r3
 800b4cc:	0007      	movs	r7, r0
 800b4ce:	400f      	ands	r7, r1
 800b4d0:	4208      	tst	r0, r1
 800b4d2:	d1f5      	bne.n	800b4c0 <_strtol_l.constprop.0+0x1c>
 800b4d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b4d6:	d13d      	bne.n	800b554 <_strtol_l.constprop.0+0xb0>
 800b4d8:	2701      	movs	r7, #1
 800b4da:	781c      	ldrb	r4, [r3, #0]
 800b4dc:	1c95      	adds	r5, r2, #2
 800b4de:	2e00      	cmp	r6, #0
 800b4e0:	d05e      	beq.n	800b5a0 <_strtol_l.constprop.0+0xfc>
 800b4e2:	2e10      	cmp	r6, #16
 800b4e4:	d109      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b4e6:	2c30      	cmp	r4, #48	; 0x30
 800b4e8:	d107      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	782b      	ldrb	r3, [r5, #0]
 800b4ee:	4393      	bics	r3, r2
 800b4f0:	2b58      	cmp	r3, #88	; 0x58
 800b4f2:	d150      	bne.n	800b596 <_strtol_l.constprop.0+0xf2>
 800b4f4:	2610      	movs	r6, #16
 800b4f6:	786c      	ldrb	r4, [r5, #1]
 800b4f8:	3502      	adds	r5, #2
 800b4fa:	4b2c      	ldr	r3, [pc, #176]	; (800b5ac <_strtol_l.constprop.0+0x108>)
 800b4fc:	0031      	movs	r1, r6
 800b4fe:	18fb      	adds	r3, r7, r3
 800b500:	0018      	movs	r0, r3
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	f7f4 fea0 	bl	8000248 <__aeabi_uidivmod>
 800b508:	2200      	movs	r2, #0
 800b50a:	9104      	str	r1, [sp, #16]
 800b50c:	2101      	movs	r1, #1
 800b50e:	4684      	mov	ip, r0
 800b510:	0010      	movs	r0, r2
 800b512:	4249      	negs	r1, r1
 800b514:	0023      	movs	r3, r4
 800b516:	3b30      	subs	r3, #48	; 0x30
 800b518:	2b09      	cmp	r3, #9
 800b51a:	d903      	bls.n	800b524 <_strtol_l.constprop.0+0x80>
 800b51c:	3b11      	subs	r3, #17
 800b51e:	2b19      	cmp	r3, #25
 800b520:	d81d      	bhi.n	800b55e <_strtol_l.constprop.0+0xba>
 800b522:	330a      	adds	r3, #10
 800b524:	429e      	cmp	r6, r3
 800b526:	dd1e      	ble.n	800b566 <_strtol_l.constprop.0+0xc2>
 800b528:	1c54      	adds	r4, r2, #1
 800b52a:	d009      	beq.n	800b540 <_strtol_l.constprop.0+0x9c>
 800b52c:	000a      	movs	r2, r1
 800b52e:	4584      	cmp	ip, r0
 800b530:	d306      	bcc.n	800b540 <_strtol_l.constprop.0+0x9c>
 800b532:	d102      	bne.n	800b53a <_strtol_l.constprop.0+0x96>
 800b534:	9c04      	ldr	r4, [sp, #16]
 800b536:	429c      	cmp	r4, r3
 800b538:	db02      	blt.n	800b540 <_strtol_l.constprop.0+0x9c>
 800b53a:	2201      	movs	r2, #1
 800b53c:	4370      	muls	r0, r6
 800b53e:	1818      	adds	r0, r3, r0
 800b540:	782c      	ldrb	r4, [r5, #0]
 800b542:	3501      	adds	r5, #1
 800b544:	e7e6      	b.n	800b514 <_strtol_l.constprop.0+0x70>
 800b546:	f000 fa7d 	bl	800ba44 <__errno>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	2000      	movs	r0, #0
 800b550:	b007      	add	sp, #28
 800b552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b554:	2c2b      	cmp	r4, #43	; 0x2b
 800b556:	d1c2      	bne.n	800b4de <_strtol_l.constprop.0+0x3a>
 800b558:	781c      	ldrb	r4, [r3, #0]
 800b55a:	1c95      	adds	r5, r2, #2
 800b55c:	e7bf      	b.n	800b4de <_strtol_l.constprop.0+0x3a>
 800b55e:	0023      	movs	r3, r4
 800b560:	3b61      	subs	r3, #97	; 0x61
 800b562:	2b19      	cmp	r3, #25
 800b564:	d9dd      	bls.n	800b522 <_strtol_l.constprop.0+0x7e>
 800b566:	1c53      	adds	r3, r2, #1
 800b568:	d109      	bne.n	800b57e <_strtol_l.constprop.0+0xda>
 800b56a:	2322      	movs	r3, #34	; 0x22
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	9803      	ldr	r0, [sp, #12]
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0eb      	beq.n	800b550 <_strtol_l.constprop.0+0xac>
 800b578:	1e6b      	subs	r3, r5, #1
 800b57a:	9301      	str	r3, [sp, #4]
 800b57c:	e007      	b.n	800b58e <_strtol_l.constprop.0+0xea>
 800b57e:	2f00      	cmp	r7, #0
 800b580:	d000      	beq.n	800b584 <_strtol_l.constprop.0+0xe0>
 800b582:	4240      	negs	r0, r0
 800b584:	9b02      	ldr	r3, [sp, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0e2      	beq.n	800b550 <_strtol_l.constprop.0+0xac>
 800b58a:	2a00      	cmp	r2, #0
 800b58c:	d1f4      	bne.n	800b578 <_strtol_l.constprop.0+0xd4>
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	9a01      	ldr	r2, [sp, #4]
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	e7dc      	b.n	800b550 <_strtol_l.constprop.0+0xac>
 800b596:	2430      	movs	r4, #48	; 0x30
 800b598:	2e00      	cmp	r6, #0
 800b59a:	d1ae      	bne.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b59c:	3608      	adds	r6, #8
 800b59e:	e7ac      	b.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b5a0:	2c30      	cmp	r4, #48	; 0x30
 800b5a2:	d0a2      	beq.n	800b4ea <_strtol_l.constprop.0+0x46>
 800b5a4:	260a      	movs	r6, #10
 800b5a6:	e7a8      	b.n	800b4fa <_strtol_l.constprop.0+0x56>
 800b5a8:	08013ff9 	.word	0x08013ff9
 800b5ac:	7fffffff 	.word	0x7fffffff

0800b5b0 <_strtol_r>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	f7ff ff77 	bl	800b4a4 <_strtol_l.constprop.0>
 800b5b6:	bd10      	pop	{r4, pc}

0800b5b8 <strtol>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4c04      	ldr	r4, [pc, #16]	; (800b5cc <strtol+0x14>)
 800b5bc:	0013      	movs	r3, r2
 800b5be:	000a      	movs	r2, r1
 800b5c0:	0001      	movs	r1, r0
 800b5c2:	6820      	ldr	r0, [r4, #0]
 800b5c4:	f7ff ff6e 	bl	800b4a4 <_strtol_l.constprop.0>
 800b5c8:	bd10      	pop	{r4, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	200006c8 	.word	0x200006c8

0800b5d0 <std>:
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	0004      	movs	r4, r0
 800b5d6:	6003      	str	r3, [r0, #0]
 800b5d8:	6043      	str	r3, [r0, #4]
 800b5da:	6083      	str	r3, [r0, #8]
 800b5dc:	8181      	strh	r1, [r0, #12]
 800b5de:	6643      	str	r3, [r0, #100]	; 0x64
 800b5e0:	81c2      	strh	r2, [r0, #14]
 800b5e2:	6103      	str	r3, [r0, #16]
 800b5e4:	6143      	str	r3, [r0, #20]
 800b5e6:	6183      	str	r3, [r0, #24]
 800b5e8:	0019      	movs	r1, r3
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	305c      	adds	r0, #92	; 0x5c
 800b5ee:	f000 f97d 	bl	800b8ec <memset>
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <std+0x50>)
 800b5f4:	61e4      	str	r4, [r4, #28]
 800b5f6:	6223      	str	r3, [r4, #32]
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <std+0x54>)
 800b5fa:	6263      	str	r3, [r4, #36]	; 0x24
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <std+0x58>)
 800b5fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <std+0x5c>)
 800b602:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <std+0x60>)
 800b606:	429c      	cmp	r4, r3
 800b608:	d005      	beq.n	800b616 <std+0x46>
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <std+0x64>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d002      	beq.n	800b616 <std+0x46>
 800b610:	4b09      	ldr	r3, [pc, #36]	; (800b638 <std+0x68>)
 800b612:	429c      	cmp	r4, r3
 800b614:	d103      	bne.n	800b61e <std+0x4e>
 800b616:	0020      	movs	r0, r4
 800b618:	3058      	adds	r0, #88	; 0x58
 800b61a:	f000 fa3d 	bl	800ba98 <__retarget_lock_init_recursive>
 800b61e:	bd10      	pop	{r4, pc}
 800b620:	0800b851 	.word	0x0800b851
 800b624:	0800b87d 	.word	0x0800b87d
 800b628:	0800b8b5 	.word	0x0800b8b5
 800b62c:	0800b8e1 	.word	0x0800b8e1
 800b630:	20000c30 	.word	0x20000c30
 800b634:	20000c98 	.word	0x20000c98
 800b638:	20000d00 	.word	0x20000d00

0800b63c <stdio_exit_handler>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	4a03      	ldr	r2, [pc, #12]	; (800b64c <stdio_exit_handler+0x10>)
 800b640:	4903      	ldr	r1, [pc, #12]	; (800b650 <stdio_exit_handler+0x14>)
 800b642:	4804      	ldr	r0, [pc, #16]	; (800b654 <stdio_exit_handler+0x18>)
 800b644:	f000 f86c 	bl	800b720 <_fwalk_sglue>
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	20000430 	.word	0x20000430
 800b650:	0800f599 	.word	0x0800f599
 800b654:	200005a8 	.word	0x200005a8

0800b658 <cleanup_stdio>:
 800b658:	6841      	ldr	r1, [r0, #4]
 800b65a:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <cleanup_stdio+0x30>)
 800b65c:	b510      	push	{r4, lr}
 800b65e:	0004      	movs	r4, r0
 800b660:	4299      	cmp	r1, r3
 800b662:	d001      	beq.n	800b668 <cleanup_stdio+0x10>
 800b664:	f003 ff98 	bl	800f598 <_fclose_r>
 800b668:	68a1      	ldr	r1, [r4, #8]
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <cleanup_stdio+0x34>)
 800b66c:	4299      	cmp	r1, r3
 800b66e:	d002      	beq.n	800b676 <cleanup_stdio+0x1e>
 800b670:	0020      	movs	r0, r4
 800b672:	f003 ff91 	bl	800f598 <_fclose_r>
 800b676:	68e1      	ldr	r1, [r4, #12]
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <cleanup_stdio+0x38>)
 800b67a:	4299      	cmp	r1, r3
 800b67c:	d002      	beq.n	800b684 <cleanup_stdio+0x2c>
 800b67e:	0020      	movs	r0, r4
 800b680:	f003 ff8a 	bl	800f598 <_fclose_r>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	20000c30 	.word	0x20000c30
 800b68c:	20000c98 	.word	0x20000c98
 800b690:	20000d00 	.word	0x20000d00

0800b694 <global_stdio_init.part.0>:
 800b694:	b510      	push	{r4, lr}
 800b696:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <global_stdio_init.part.0+0x28>)
 800b698:	4a09      	ldr	r2, [pc, #36]	; (800b6c0 <global_stdio_init.part.0+0x2c>)
 800b69a:	2104      	movs	r1, #4
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	4809      	ldr	r0, [pc, #36]	; (800b6c4 <global_stdio_init.part.0+0x30>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f7ff ff95 	bl	800b5d0 <std>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	2109      	movs	r1, #9
 800b6aa:	4807      	ldr	r0, [pc, #28]	; (800b6c8 <global_stdio_init.part.0+0x34>)
 800b6ac:	f7ff ff90 	bl	800b5d0 <std>
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	2112      	movs	r1, #18
 800b6b4:	4805      	ldr	r0, [pc, #20]	; (800b6cc <global_stdio_init.part.0+0x38>)
 800b6b6:	f7ff ff8b 	bl	800b5d0 <std>
 800b6ba:	bd10      	pop	{r4, pc}
 800b6bc:	20000d68 	.word	0x20000d68
 800b6c0:	0800b63d 	.word	0x0800b63d
 800b6c4:	20000c30 	.word	0x20000c30
 800b6c8:	20000c98 	.word	0x20000c98
 800b6cc:	20000d00 	.word	0x20000d00

0800b6d0 <__sfp_lock_acquire>:
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4802      	ldr	r0, [pc, #8]	; (800b6dc <__sfp_lock_acquire+0xc>)
 800b6d4:	f000 f9e2 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	20000d72 	.word	0x20000d72

0800b6e0 <__sfp_lock_release>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	4802      	ldr	r0, [pc, #8]	; (800b6ec <__sfp_lock_release+0xc>)
 800b6e4:	f000 f9db 	bl	800ba9e <__retarget_lock_release_recursive>
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	20000d72 	.word	0x20000d72

0800b6f0 <__sinit>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	f7ff ffec 	bl	800b6d0 <__sfp_lock_acquire>
 800b6f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <__sinit+0x14>
 800b6fe:	f7ff ffef 	bl	800b6e0 <__sfp_lock_release>
 800b702:	bd10      	pop	{r4, pc}
 800b704:	4b04      	ldr	r3, [pc, #16]	; (800b718 <__sinit+0x28>)
 800b706:	6363      	str	r3, [r4, #52]	; 0x34
 800b708:	4b04      	ldr	r3, [pc, #16]	; (800b71c <__sinit+0x2c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1f6      	bne.n	800b6fe <__sinit+0xe>
 800b710:	f7ff ffc0 	bl	800b694 <global_stdio_init.part.0>
 800b714:	e7f3      	b.n	800b6fe <__sinit+0xe>
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	0800b659 	.word	0x0800b659
 800b71c:	20000d68 	.word	0x20000d68

0800b720 <_fwalk_sglue>:
 800b720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b722:	0014      	movs	r4, r2
 800b724:	2600      	movs	r6, #0
 800b726:	9000      	str	r0, [sp, #0]
 800b728:	9101      	str	r1, [sp, #4]
 800b72a:	68a5      	ldr	r5, [r4, #8]
 800b72c:	6867      	ldr	r7, [r4, #4]
 800b72e:	3f01      	subs	r7, #1
 800b730:	d504      	bpl.n	800b73c <_fwalk_sglue+0x1c>
 800b732:	6824      	ldr	r4, [r4, #0]
 800b734:	2c00      	cmp	r4, #0
 800b736:	d1f8      	bne.n	800b72a <_fwalk_sglue+0xa>
 800b738:	0030      	movs	r0, r6
 800b73a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b73c:	89ab      	ldrh	r3, [r5, #12]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d908      	bls.n	800b754 <_fwalk_sglue+0x34>
 800b742:	220e      	movs	r2, #14
 800b744:	5eab      	ldrsh	r3, [r5, r2]
 800b746:	3301      	adds	r3, #1
 800b748:	d004      	beq.n	800b754 <_fwalk_sglue+0x34>
 800b74a:	0029      	movs	r1, r5
 800b74c:	9800      	ldr	r0, [sp, #0]
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	4798      	blx	r3
 800b752:	4306      	orrs	r6, r0
 800b754:	3568      	adds	r5, #104	; 0x68
 800b756:	e7ea      	b.n	800b72e <_fwalk_sglue+0xe>

0800b758 <snprintf>:
 800b758:	b40c      	push	{r2, r3}
 800b75a:	b530      	push	{r4, r5, lr}
 800b75c:	4b17      	ldr	r3, [pc, #92]	; (800b7bc <snprintf+0x64>)
 800b75e:	000c      	movs	r4, r1
 800b760:	681d      	ldr	r5, [r3, #0]
 800b762:	b09d      	sub	sp, #116	; 0x74
 800b764:	2900      	cmp	r1, #0
 800b766:	da08      	bge.n	800b77a <snprintf+0x22>
 800b768:	238b      	movs	r3, #139	; 0x8b
 800b76a:	2001      	movs	r0, #1
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	4240      	negs	r0, r0
 800b770:	b01d      	add	sp, #116	; 0x74
 800b772:	bc30      	pop	{r4, r5}
 800b774:	bc08      	pop	{r3}
 800b776:	b002      	add	sp, #8
 800b778:	4718      	bx	r3
 800b77a:	2382      	movs	r3, #130	; 0x82
 800b77c:	466a      	mov	r2, sp
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	8293      	strh	r3, [r2, #20]
 800b782:	2300      	movs	r3, #0
 800b784:	9002      	str	r0, [sp, #8]
 800b786:	9006      	str	r0, [sp, #24]
 800b788:	4299      	cmp	r1, r3
 800b78a:	d000      	beq.n	800b78e <snprintf+0x36>
 800b78c:	1e4b      	subs	r3, r1, #1
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	9307      	str	r3, [sp, #28]
 800b792:	2301      	movs	r3, #1
 800b794:	466a      	mov	r2, sp
 800b796:	425b      	negs	r3, r3
 800b798:	82d3      	strh	r3, [r2, #22]
 800b79a:	0028      	movs	r0, r5
 800b79c:	ab21      	add	r3, sp, #132	; 0x84
 800b79e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7a0:	a902      	add	r1, sp, #8
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	f001 fa9a 	bl	800ccdc <_svfprintf_r>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	da01      	bge.n	800b7b0 <snprintf+0x58>
 800b7ac:	238b      	movs	r3, #139	; 0x8b
 800b7ae:	602b      	str	r3, [r5, #0]
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	d0dd      	beq.n	800b770 <snprintf+0x18>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	701a      	strb	r2, [r3, #0]
 800b7ba:	e7d9      	b.n	800b770 <snprintf+0x18>
 800b7bc:	200006c8 	.word	0x200006c8

0800b7c0 <sprintf>:
 800b7c0:	b40e      	push	{r1, r2, r3}
 800b7c2:	b500      	push	{lr}
 800b7c4:	490b      	ldr	r1, [pc, #44]	; (800b7f4 <sprintf+0x34>)
 800b7c6:	b09c      	sub	sp, #112	; 0x70
 800b7c8:	ab1d      	add	r3, sp, #116	; 0x74
 800b7ca:	9002      	str	r0, [sp, #8]
 800b7cc:	9006      	str	r0, [sp, #24]
 800b7ce:	9107      	str	r1, [sp, #28]
 800b7d0:	9104      	str	r1, [sp, #16]
 800b7d2:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <sprintf+0x38>)
 800b7d4:	4909      	ldr	r1, [pc, #36]	; (800b7fc <sprintf+0x3c>)
 800b7d6:	cb04      	ldmia	r3!, {r2}
 800b7d8:	9105      	str	r1, [sp, #20]
 800b7da:	6800      	ldr	r0, [r0, #0]
 800b7dc:	a902      	add	r1, sp, #8
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	f001 fa7c 	bl	800ccdc <_svfprintf_r>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	9b02      	ldr	r3, [sp, #8]
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	b01c      	add	sp, #112	; 0x70
 800b7ec:	bc08      	pop	{r3}
 800b7ee:	b003      	add	sp, #12
 800b7f0:	4718      	bx	r3
 800b7f2:	46c0      	nop			; (mov r8, r8)
 800b7f4:	7fffffff 	.word	0x7fffffff
 800b7f8:	200006c8 	.word	0x200006c8
 800b7fc:	ffff0208 	.word	0xffff0208

0800b800 <sscanf>:
 800b800:	b40e      	push	{r1, r2, r3}
 800b802:	b530      	push	{r4, r5, lr}
 800b804:	2381      	movs	r3, #129	; 0x81
 800b806:	b09c      	sub	sp, #112	; 0x70
 800b808:	466a      	mov	r2, sp
 800b80a:	ac1f      	add	r4, sp, #124	; 0x7c
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	cc20      	ldmia	r4!, {r5}
 800b810:	8293      	strh	r3, [r2, #20]
 800b812:	9002      	str	r0, [sp, #8]
 800b814:	9006      	str	r0, [sp, #24]
 800b816:	f7f4 fc75 	bl	8000104 <strlen>
 800b81a:	4b0b      	ldr	r3, [pc, #44]	; (800b848 <sscanf+0x48>)
 800b81c:	466a      	mov	r2, sp
 800b81e:	930a      	str	r3, [sp, #40]	; 0x28
 800b820:	2300      	movs	r3, #0
 800b822:	9003      	str	r0, [sp, #12]
 800b824:	9007      	str	r0, [sp, #28]
 800b826:	4809      	ldr	r0, [pc, #36]	; (800b84c <sscanf+0x4c>)
 800b828:	930e      	str	r3, [sp, #56]	; 0x38
 800b82a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b82c:	3b01      	subs	r3, #1
 800b82e:	82d3      	strh	r3, [r2, #22]
 800b830:	a902      	add	r1, sp, #8
 800b832:	0023      	movs	r3, r4
 800b834:	002a      	movs	r2, r5
 800b836:	6800      	ldr	r0, [r0, #0]
 800b838:	9401      	str	r4, [sp, #4]
 800b83a:	f002 fc91 	bl	800e160 <__ssvfscanf_r>
 800b83e:	b01c      	add	sp, #112	; 0x70
 800b840:	bc30      	pop	{r4, r5}
 800b842:	bc08      	pop	{r3}
 800b844:	b003      	add	sp, #12
 800b846:	4718      	bx	r3
 800b848:	0800b879 	.word	0x0800b879
 800b84c:	200006c8 	.word	0x200006c8

0800b850 <__sread>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	000c      	movs	r4, r1
 800b854:	250e      	movs	r5, #14
 800b856:	5f49      	ldrsh	r1, [r1, r5]
 800b858:	f000 f8ba 	bl	800b9d0 <_read_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	db03      	blt.n	800b868 <__sread+0x18>
 800b860:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b862:	181b      	adds	r3, r3, r0
 800b864:	6523      	str	r3, [r4, #80]	; 0x50
 800b866:	bd70      	pop	{r4, r5, r6, pc}
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	4a02      	ldr	r2, [pc, #8]	; (800b874 <__sread+0x24>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	81a3      	strh	r3, [r4, #12]
 800b870:	e7f9      	b.n	800b866 <__sread+0x16>
 800b872:	46c0      	nop			; (mov r8, r8)
 800b874:	ffffefff 	.word	0xffffefff

0800b878 <__seofread>:
 800b878:	2000      	movs	r0, #0
 800b87a:	4770      	bx	lr

0800b87c <__swrite>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	001f      	movs	r7, r3
 800b880:	898b      	ldrh	r3, [r1, #12]
 800b882:	0005      	movs	r5, r0
 800b884:	000c      	movs	r4, r1
 800b886:	0016      	movs	r6, r2
 800b888:	05db      	lsls	r3, r3, #23
 800b88a:	d505      	bpl.n	800b898 <__swrite+0x1c>
 800b88c:	230e      	movs	r3, #14
 800b88e:	5ec9      	ldrsh	r1, [r1, r3]
 800b890:	2200      	movs	r2, #0
 800b892:	2302      	movs	r3, #2
 800b894:	f000 f888 	bl	800b9a8 <_lseek_r>
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	4a05      	ldr	r2, [pc, #20]	; (800b8b0 <__swrite+0x34>)
 800b89c:	0028      	movs	r0, r5
 800b89e:	4013      	ands	r3, r2
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	0032      	movs	r2, r6
 800b8a4:	230e      	movs	r3, #14
 800b8a6:	5ee1      	ldrsh	r1, [r4, r3]
 800b8a8:	003b      	movs	r3, r7
 800b8aa:	f000 f8b7 	bl	800ba1c <_write_r>
 800b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b0:	ffffefff 	.word	0xffffefff

0800b8b4 <__sseek>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	000c      	movs	r4, r1
 800b8b8:	250e      	movs	r5, #14
 800b8ba:	5f49      	ldrsh	r1, [r1, r5]
 800b8bc:	f000 f874 	bl	800b9a8 <_lseek_r>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	1c42      	adds	r2, r0, #1
 800b8c4:	d103      	bne.n	800b8ce <__sseek+0x1a>
 800b8c6:	4a05      	ldr	r2, [pc, #20]	; (800b8dc <__sseek+0x28>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	bd70      	pop	{r4, r5, r6, pc}
 800b8ce:	2280      	movs	r2, #128	; 0x80
 800b8d0:	0152      	lsls	r2, r2, #5
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	6520      	str	r0, [r4, #80]	; 0x50
 800b8d8:	e7f8      	b.n	800b8cc <__sseek+0x18>
 800b8da:	46c0      	nop			; (mov r8, r8)
 800b8dc:	ffffefff 	.word	0xffffefff

0800b8e0 <__sclose>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	230e      	movs	r3, #14
 800b8e4:	5ec9      	ldrsh	r1, [r1, r3]
 800b8e6:	f000 f84d 	bl	800b984 <_close_r>
 800b8ea:	bd10      	pop	{r4, pc}

0800b8ec <memset>:
 800b8ec:	0003      	movs	r3, r0
 800b8ee:	1882      	adds	r2, r0, r2
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d100      	bne.n	800b8f6 <memset+0xa>
 800b8f4:	4770      	bx	lr
 800b8f6:	7019      	strb	r1, [r3, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	e7f9      	b.n	800b8f0 <memset+0x4>

0800b8fc <strncmp>:
 800b8fc:	b530      	push	{r4, r5, lr}
 800b8fe:	0005      	movs	r5, r0
 800b900:	1e10      	subs	r0, r2, #0
 800b902:	d00b      	beq.n	800b91c <strncmp+0x20>
 800b904:	2400      	movs	r4, #0
 800b906:	3a01      	subs	r2, #1
 800b908:	5d2b      	ldrb	r3, [r5, r4]
 800b90a:	5d08      	ldrb	r0, [r1, r4]
 800b90c:	4283      	cmp	r3, r0
 800b90e:	d104      	bne.n	800b91a <strncmp+0x1e>
 800b910:	42a2      	cmp	r2, r4
 800b912:	d002      	beq.n	800b91a <strncmp+0x1e>
 800b914:	3401      	adds	r4, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1f6      	bne.n	800b908 <strncmp+0xc>
 800b91a:	1a18      	subs	r0, r3, r0
 800b91c:	bd30      	pop	{r4, r5, pc}

0800b91e <strncpy>:
 800b91e:	0003      	movs	r3, r0
 800b920:	b530      	push	{r4, r5, lr}
 800b922:	001d      	movs	r5, r3
 800b924:	2a00      	cmp	r2, #0
 800b926:	d006      	beq.n	800b936 <strncpy+0x18>
 800b928:	780c      	ldrb	r4, [r1, #0]
 800b92a:	3a01      	subs	r2, #1
 800b92c:	3301      	adds	r3, #1
 800b92e:	702c      	strb	r4, [r5, #0]
 800b930:	3101      	adds	r1, #1
 800b932:	2c00      	cmp	r4, #0
 800b934:	d1f5      	bne.n	800b922 <strncpy+0x4>
 800b936:	2100      	movs	r1, #0
 800b938:	189a      	adds	r2, r3, r2
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d100      	bne.n	800b940 <strncpy+0x22>
 800b93e:	bd30      	pop	{r4, r5, pc}
 800b940:	7019      	strb	r1, [r3, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	e7f9      	b.n	800b93a <strncpy+0x1c>

0800b946 <strstr>:
 800b946:	780a      	ldrb	r2, [r1, #0]
 800b948:	b530      	push	{r4, r5, lr}
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d10c      	bne.n	800b968 <strstr+0x22>
 800b94e:	bd30      	pop	{r4, r5, pc}
 800b950:	429a      	cmp	r2, r3
 800b952:	d108      	bne.n	800b966 <strstr+0x20>
 800b954:	2301      	movs	r3, #1
 800b956:	5ccc      	ldrb	r4, [r1, r3]
 800b958:	2c00      	cmp	r4, #0
 800b95a:	d0f8      	beq.n	800b94e <strstr+0x8>
 800b95c:	5cc5      	ldrb	r5, [r0, r3]
 800b95e:	42a5      	cmp	r5, r4
 800b960:	d101      	bne.n	800b966 <strstr+0x20>
 800b962:	3301      	adds	r3, #1
 800b964:	e7f7      	b.n	800b956 <strstr+0x10>
 800b966:	3001      	adds	r0, #1
 800b968:	7803      	ldrb	r3, [r0, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f0      	bne.n	800b950 <strstr+0xa>
 800b96e:	0018      	movs	r0, r3
 800b970:	e7ed      	b.n	800b94e <strstr+0x8>
	...

0800b974 <__locale_mb_cur_max>:
 800b974:	2294      	movs	r2, #148	; 0x94
 800b976:	4b02      	ldr	r3, [pc, #8]	; (800b980 <__locale_mb_cur_max+0xc>)
 800b978:	0052      	lsls	r2, r2, #1
 800b97a:	5c98      	ldrb	r0, [r3, r2]
 800b97c:	4770      	bx	lr
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	2000043c 	.word	0x2000043c

0800b984 <_close_r>:
 800b984:	2300      	movs	r3, #0
 800b986:	b570      	push	{r4, r5, r6, lr}
 800b988:	4d06      	ldr	r5, [pc, #24]	; (800b9a4 <_close_r+0x20>)
 800b98a:	0004      	movs	r4, r0
 800b98c:	0008      	movs	r0, r1
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	f7f8 f887 	bl	8003aa2 <_close>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d103      	bne.n	800b9a0 <_close_r+0x1c>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d000      	beq.n	800b9a0 <_close_r+0x1c>
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	46c0      	nop			; (mov r8, r8)
 800b9a4:	20000d6c 	.word	0x20000d6c

0800b9a8 <_lseek_r>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	0004      	movs	r4, r0
 800b9ac:	0008      	movs	r0, r1
 800b9ae:	0011      	movs	r1, r2
 800b9b0:	001a      	movs	r2, r3
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4d05      	ldr	r5, [pc, #20]	; (800b9cc <_lseek_r+0x24>)
 800b9b6:	602b      	str	r3, [r5, #0]
 800b9b8:	f7f8 f894 	bl	8003ae4 <_lseek>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d103      	bne.n	800b9c8 <_lseek_r+0x20>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d000      	beq.n	800b9c8 <_lseek_r+0x20>
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	20000d6c 	.word	0x20000d6c

0800b9d0 <_read_r>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	0004      	movs	r4, r0
 800b9d4:	0008      	movs	r0, r1
 800b9d6:	0011      	movs	r1, r2
 800b9d8:	001a      	movs	r2, r3
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4d05      	ldr	r5, [pc, #20]	; (800b9f4 <_read_r+0x24>)
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f8 f826 	bl	8003a30 <_read>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d103      	bne.n	800b9f0 <_read_r+0x20>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d000      	beq.n	800b9f0 <_read_r+0x20>
 800b9ee:	6023      	str	r3, [r4, #0]
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	46c0      	nop			; (mov r8, r8)
 800b9f4:	20000d6c 	.word	0x20000d6c

0800b9f8 <_sbrk_r>:
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	4d06      	ldr	r5, [pc, #24]	; (800ba18 <_sbrk_r+0x20>)
 800b9fe:	0004      	movs	r4, r0
 800ba00:	0008      	movs	r0, r1
 800ba02:	602b      	str	r3, [r5, #0]
 800ba04:	f7f8 f87a 	bl	8003afc <_sbrk>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d103      	bne.n	800ba14 <_sbrk_r+0x1c>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d000      	beq.n	800ba14 <_sbrk_r+0x1c>
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	bd70      	pop	{r4, r5, r6, pc}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	20000d6c 	.word	0x20000d6c

0800ba1c <_write_r>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	0004      	movs	r4, r0
 800ba20:	0008      	movs	r0, r1
 800ba22:	0011      	movs	r1, r2
 800ba24:	001a      	movs	r2, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	4d05      	ldr	r5, [pc, #20]	; (800ba40 <_write_r+0x24>)
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f8 f81d 	bl	8003a6a <_write>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d103      	bne.n	800ba3c <_write_r+0x20>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d000      	beq.n	800ba3c <_write_r+0x20>
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	20000d6c 	.word	0x20000d6c

0800ba44 <__errno>:
 800ba44:	4b01      	ldr	r3, [pc, #4]	; (800ba4c <__errno+0x8>)
 800ba46:	6818      	ldr	r0, [r3, #0]
 800ba48:	4770      	bx	lr
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	200006c8 	.word	0x200006c8

0800ba50 <__libc_init_array>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	2600      	movs	r6, #0
 800ba54:	4c0c      	ldr	r4, [pc, #48]	; (800ba88 <__libc_init_array+0x38>)
 800ba56:	4d0d      	ldr	r5, [pc, #52]	; (800ba8c <__libc_init_array+0x3c>)
 800ba58:	1b64      	subs	r4, r4, r5
 800ba5a:	10a4      	asrs	r4, r4, #2
 800ba5c:	42a6      	cmp	r6, r4
 800ba5e:	d109      	bne.n	800ba74 <__libc_init_array+0x24>
 800ba60:	2600      	movs	r6, #0
 800ba62:	f006 fcc5 	bl	80123f0 <_init>
 800ba66:	4c0a      	ldr	r4, [pc, #40]	; (800ba90 <__libc_init_array+0x40>)
 800ba68:	4d0a      	ldr	r5, [pc, #40]	; (800ba94 <__libc_init_array+0x44>)
 800ba6a:	1b64      	subs	r4, r4, r5
 800ba6c:	10a4      	asrs	r4, r4, #2
 800ba6e:	42a6      	cmp	r6, r4
 800ba70:	d105      	bne.n	800ba7e <__libc_init_array+0x2e>
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	00b3      	lsls	r3, r6, #2
 800ba76:	58eb      	ldr	r3, [r5, r3]
 800ba78:	4798      	blx	r3
 800ba7a:	3601      	adds	r6, #1
 800ba7c:	e7ee      	b.n	800ba5c <__libc_init_array+0xc>
 800ba7e:	00b3      	lsls	r3, r6, #2
 800ba80:	58eb      	ldr	r3, [r5, r3]
 800ba82:	4798      	blx	r3
 800ba84:	3601      	adds	r6, #1
 800ba86:	e7f2      	b.n	800ba6e <__libc_init_array+0x1e>
 800ba88:	08014414 	.word	0x08014414
 800ba8c:	08014414 	.word	0x08014414
 800ba90:	0801441c 	.word	0x0801441c
 800ba94:	08014414 	.word	0x08014414

0800ba98 <__retarget_lock_init_recursive>:
 800ba98:	4770      	bx	lr

0800ba9a <__retarget_lock_close_recursive>:
 800ba9a:	4770      	bx	lr

0800ba9c <__retarget_lock_acquire_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_release_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <sysconf>:
 800baa0:	2380      	movs	r3, #128	; 0x80
 800baa2:	b510      	push	{r4, lr}
 800baa4:	2808      	cmp	r0, #8
 800baa6:	d004      	beq.n	800bab2 <sysconf+0x12>
 800baa8:	f7ff ffcc 	bl	800ba44 <__errno>
 800baac:	2316      	movs	r3, #22
 800baae:	6003      	str	r3, [r0, #0]
 800bab0:	3b17      	subs	r3, #23
 800bab2:	0018      	movs	r0, r3
 800bab4:	bd10      	pop	{r4, pc}

0800bab6 <memcpy>:
 800bab6:	2300      	movs	r3, #0
 800bab8:	b510      	push	{r4, lr}
 800baba:	429a      	cmp	r2, r3
 800babc:	d100      	bne.n	800bac0 <memcpy+0xa>
 800babe:	bd10      	pop	{r4, pc}
 800bac0:	5ccc      	ldrb	r4, [r1, r3]
 800bac2:	54c4      	strb	r4, [r0, r3]
 800bac4:	3301      	adds	r3, #1
 800bac6:	e7f8      	b.n	800baba <memcpy+0x4>

0800bac8 <nan>:
 800bac8:	2000      	movs	r0, #0
 800baca:	4901      	ldr	r1, [pc, #4]	; (800bad0 <nan+0x8>)
 800bacc:	4770      	bx	lr
 800bace:	46c0      	nop			; (mov r8, r8)
 800bad0:	7ff80000 	.word	0x7ff80000

0800bad4 <nanf>:
 800bad4:	4800      	ldr	r0, [pc, #0]	; (800bad8 <nanf+0x4>)
 800bad6:	4770      	bx	lr
 800bad8:	7fc00000 	.word	0x7fc00000

0800badc <register_fini>:
 800badc:	4b03      	ldr	r3, [pc, #12]	; (800baec <register_fini+0x10>)
 800bade:	b510      	push	{r4, lr}
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <register_fini+0xe>
 800bae4:	4802      	ldr	r0, [pc, #8]	; (800baf0 <register_fini+0x14>)
 800bae6:	f000 f805 	bl	800baf4 <atexit>
 800baea:	bd10      	pop	{r4, pc}
 800baec:	00000000 	.word	0x00000000
 800baf0:	0800f851 	.word	0x0800f851

0800baf4 <atexit>:
 800baf4:	2300      	movs	r3, #0
 800baf6:	b510      	push	{r4, lr}
 800baf8:	0001      	movs	r1, r0
 800bafa:	001a      	movs	r2, r3
 800bafc:	0018      	movs	r0, r3
 800bafe:	f003 fef9 	bl	800f8f4 <__register_exitproc>
 800bb02:	bd10      	pop	{r4, pc}

0800bb04 <_malloc_trim_r>:
 800bb04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb06:	0004      	movs	r4, r0
 800bb08:	2008      	movs	r0, #8
 800bb0a:	000d      	movs	r5, r1
 800bb0c:	f7ff ffc8 	bl	800baa0 <sysconf>
 800bb10:	0006      	movs	r6, r0
 800bb12:	0020      	movs	r0, r4
 800bb14:	f7fe fe7e 	bl	800a814 <__malloc_lock>
 800bb18:	2203      	movs	r2, #3
 800bb1a:	4f21      	ldr	r7, [pc, #132]	; (800bba0 <_malloc_trim_r+0x9c>)
 800bb1c:	0031      	movs	r1, r6
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	4393      	bics	r3, r2
 800bb24:	1b58      	subs	r0, r3, r5
 800bb26:	3811      	subs	r0, #17
 800bb28:	1980      	adds	r0, r0, r6
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	f7f4 fb06 	bl	800013c <__udivsi3>
 800bb30:	1e45      	subs	r5, r0, #1
 800bb32:	4375      	muls	r5, r6
 800bb34:	42ae      	cmp	r6, r5
 800bb36:	dd04      	ble.n	800bb42 <_malloc_trim_r+0x3e>
 800bb38:	0020      	movs	r0, r4
 800bb3a:	f7fe fe73 	bl	800a824 <__malloc_unlock>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb42:	2100      	movs	r1, #0
 800bb44:	0020      	movs	r0, r4
 800bb46:	f7ff ff57 	bl	800b9f8 <_sbrk_r>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	9a01      	ldr	r2, [sp, #4]
 800bb4e:	189b      	adds	r3, r3, r2
 800bb50:	4298      	cmp	r0, r3
 800bb52:	d1f1      	bne.n	800bb38 <_malloc_trim_r+0x34>
 800bb54:	0020      	movs	r0, r4
 800bb56:	4269      	negs	r1, r5
 800bb58:	f7ff ff4e 	bl	800b9f8 <_sbrk_r>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d110      	bne.n	800bb82 <_malloc_trim_r+0x7e>
 800bb60:	2100      	movs	r1, #0
 800bb62:	0020      	movs	r0, r4
 800bb64:	f7ff ff48 	bl	800b9f8 <_sbrk_r>
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	1a81      	subs	r1, r0, r2
 800bb6c:	290f      	cmp	r1, #15
 800bb6e:	dde3      	ble.n	800bb38 <_malloc_trim_r+0x34>
 800bb70:	4d0c      	ldr	r5, [pc, #48]	; (800bba4 <_malloc_trim_r+0xa0>)
 800bb72:	4b0d      	ldr	r3, [pc, #52]	; (800bba8 <_malloc_trim_r+0xa4>)
 800bb74:	682d      	ldr	r5, [r5, #0]
 800bb76:	1b40      	subs	r0, r0, r5
 800bb78:	6018      	str	r0, [r3, #0]
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	6053      	str	r3, [r2, #4]
 800bb80:	e7da      	b.n	800bb38 <_malloc_trim_r+0x34>
 800bb82:	2601      	movs	r6, #1
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	1b5b      	subs	r3, r3, r5
 800bb8a:	4333      	orrs	r3, r6
 800bb8c:	6053      	str	r3, [r2, #4]
 800bb8e:	4a06      	ldr	r2, [pc, #24]	; (800bba8 <_malloc_trim_r+0xa4>)
 800bb90:	0020      	movs	r0, r4
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	1b5b      	subs	r3, r3, r5
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	f7fe fe44 	bl	800a824 <__malloc_unlock>
 800bb9c:	0030      	movs	r0, r6
 800bb9e:	e7cf      	b.n	800bb40 <_malloc_trim_r+0x3c>
 800bba0:	20000020 	.word	0x20000020
 800bba4:	20000428 	.word	0x20000428
 800bba8:	20000bfc 	.word	0x20000bfc

0800bbac <_free_r>:
 800bbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbae:	1e0d      	subs	r5, r1, #0
 800bbb0:	9001      	str	r0, [sp, #4]
 800bbb2:	d02d      	beq.n	800bc10 <_free_r+0x64>
 800bbb4:	f7fe fe2e 	bl	800a814 <__malloc_lock>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	0029      	movs	r1, r5
 800bbbc:	469c      	mov	ip, r3
 800bbbe:	3908      	subs	r1, #8
 800bbc0:	684f      	ldr	r7, [r1, #4]
 800bbc2:	4662      	mov	r2, ip
 800bbc4:	003b      	movs	r3, r7
 800bbc6:	4664      	mov	r4, ip
 800bbc8:	4393      	bics	r3, r2
 800bbca:	18c8      	adds	r0, r1, r3
 800bbcc:	6845      	ldr	r5, [r0, #4]
 800bbce:	3202      	adds	r2, #2
 800bbd0:	4395      	bics	r5, r2
 800bbd2:	4a4a      	ldr	r2, [pc, #296]	; (800bcfc <_free_r+0x150>)
 800bbd4:	4027      	ands	r7, r4
 800bbd6:	6896      	ldr	r6, [r2, #8]
 800bbd8:	4286      	cmp	r6, r0
 800bbda:	d11a      	bne.n	800bc12 <_free_r+0x66>
 800bbdc:	195b      	adds	r3, r3, r5
 800bbde:	2f00      	cmp	r7, #0
 800bbe0:	d106      	bne.n	800bbf0 <_free_r+0x44>
 800bbe2:	6808      	ldr	r0, [r1, #0]
 800bbe4:	1a09      	subs	r1, r1, r0
 800bbe6:	688d      	ldr	r5, [r1, #8]
 800bbe8:	181b      	adds	r3, r3, r0
 800bbea:	68c8      	ldr	r0, [r1, #12]
 800bbec:	60e8      	str	r0, [r5, #12]
 800bbee:	6085      	str	r5, [r0, #8]
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	4318      	orrs	r0, r3
 800bbf4:	6048      	str	r0, [r1, #4]
 800bbf6:	6091      	str	r1, [r2, #8]
 800bbf8:	4a41      	ldr	r2, [pc, #260]	; (800bd00 <_free_r+0x154>)
 800bbfa:	6812      	ldr	r2, [r2, #0]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d804      	bhi.n	800bc0a <_free_r+0x5e>
 800bc00:	4b40      	ldr	r3, [pc, #256]	; (800bd04 <_free_r+0x158>)
 800bc02:	9801      	ldr	r0, [sp, #4]
 800bc04:	6819      	ldr	r1, [r3, #0]
 800bc06:	f7ff ff7d 	bl	800bb04 <_malloc_trim_r>
 800bc0a:	9801      	ldr	r0, [sp, #4]
 800bc0c:	f7fe fe0a 	bl	800a824 <__malloc_unlock>
 800bc10:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bc12:	2600      	movs	r6, #0
 800bc14:	6045      	str	r5, [r0, #4]
 800bc16:	42b7      	cmp	r7, r6
 800bc18:	d109      	bne.n	800bc2e <_free_r+0x82>
 800bc1a:	680f      	ldr	r7, [r1, #0]
 800bc1c:	4c3a      	ldr	r4, [pc, #232]	; (800bd08 <_free_r+0x15c>)
 800bc1e:	1bc9      	subs	r1, r1, r7
 800bc20:	19db      	adds	r3, r3, r7
 800bc22:	688f      	ldr	r7, [r1, #8]
 800bc24:	42a7      	cmp	r7, r4
 800bc26:	d02c      	beq.n	800bc82 <_free_r+0xd6>
 800bc28:	68cc      	ldr	r4, [r1, #12]
 800bc2a:	60fc      	str	r4, [r7, #12]
 800bc2c:	60a7      	str	r7, [r4, #8]
 800bc2e:	1947      	adds	r7, r0, r5
 800bc30:	687c      	ldr	r4, [r7, #4]
 800bc32:	2701      	movs	r7, #1
 800bc34:	423c      	tst	r4, r7
 800bc36:	d10b      	bne.n	800bc50 <_free_r+0xa4>
 800bc38:	195b      	adds	r3, r3, r5
 800bc3a:	6885      	ldr	r5, [r0, #8]
 800bc3c:	2e00      	cmp	r6, #0
 800bc3e:	d122      	bne.n	800bc86 <_free_r+0xda>
 800bc40:	4c31      	ldr	r4, [pc, #196]	; (800bd08 <_free_r+0x15c>)
 800bc42:	42a5      	cmp	r5, r4
 800bc44:	d11f      	bne.n	800bc86 <_free_r+0xda>
 800bc46:	003e      	movs	r6, r7
 800bc48:	6151      	str	r1, [r2, #20]
 800bc4a:	6111      	str	r1, [r2, #16]
 800bc4c:	60cd      	str	r5, [r1, #12]
 800bc4e:	608d      	str	r5, [r1, #8]
 800bc50:	2501      	movs	r5, #1
 800bc52:	0028      	movs	r0, r5
 800bc54:	4318      	orrs	r0, r3
 800bc56:	6048      	str	r0, [r1, #4]
 800bc58:	50cb      	str	r3, [r1, r3]
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d1d5      	bne.n	800bc0a <_free_r+0x5e>
 800bc5e:	2080      	movs	r0, #128	; 0x80
 800bc60:	0080      	lsls	r0, r0, #2
 800bc62:	4283      	cmp	r3, r0
 800bc64:	d213      	bcs.n	800bc8e <_free_r+0xe2>
 800bc66:	08d8      	lsrs	r0, r3, #3
 800bc68:	095b      	lsrs	r3, r3, #5
 800bc6a:	409d      	lsls	r5, r3
 800bc6c:	6853      	ldr	r3, [r2, #4]
 800bc6e:	431d      	orrs	r5, r3
 800bc70:	00c3      	lsls	r3, r0, #3
 800bc72:	189b      	adds	r3, r3, r2
 800bc74:	6055      	str	r5, [r2, #4]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	60cb      	str	r3, [r1, #12]
 800bc7a:	608a      	str	r2, [r1, #8]
 800bc7c:	6099      	str	r1, [r3, #8]
 800bc7e:	60d1      	str	r1, [r2, #12]
 800bc80:	e7c3      	b.n	800bc0a <_free_r+0x5e>
 800bc82:	4666      	mov	r6, ip
 800bc84:	e7d3      	b.n	800bc2e <_free_r+0x82>
 800bc86:	68c0      	ldr	r0, [r0, #12]
 800bc88:	60e8      	str	r0, [r5, #12]
 800bc8a:	6085      	str	r5, [r0, #8]
 800bc8c:	e7e0      	b.n	800bc50 <_free_r+0xa4>
 800bc8e:	0a5d      	lsrs	r5, r3, #9
 800bc90:	2d04      	cmp	r5, #4
 800bc92:	d812      	bhi.n	800bcba <_free_r+0x10e>
 800bc94:	0998      	lsrs	r0, r3, #6
 800bc96:	3038      	adds	r0, #56	; 0x38
 800bc98:	00c6      	lsls	r6, r0, #3
 800bc9a:	18b6      	adds	r6, r6, r2
 800bc9c:	68b5      	ldr	r5, [r6, #8]
 800bc9e:	2703      	movs	r7, #3
 800bca0:	42ae      	cmp	r6, r5
 800bca2:	d125      	bne.n	800bcf0 <_free_r+0x144>
 800bca4:	2301      	movs	r3, #1
 800bca6:	1080      	asrs	r0, r0, #2
 800bca8:	4083      	lsls	r3, r0
 800bcaa:	6850      	ldr	r0, [r2, #4]
 800bcac:	4303      	orrs	r3, r0
 800bcae:	6053      	str	r3, [r2, #4]
 800bcb0:	60ce      	str	r6, [r1, #12]
 800bcb2:	608d      	str	r5, [r1, #8]
 800bcb4:	60b1      	str	r1, [r6, #8]
 800bcb6:	60e9      	str	r1, [r5, #12]
 800bcb8:	e7a7      	b.n	800bc0a <_free_r+0x5e>
 800bcba:	2d14      	cmp	r5, #20
 800bcbc:	d802      	bhi.n	800bcc4 <_free_r+0x118>
 800bcbe:	0028      	movs	r0, r5
 800bcc0:	305b      	adds	r0, #91	; 0x5b
 800bcc2:	e7e9      	b.n	800bc98 <_free_r+0xec>
 800bcc4:	2d54      	cmp	r5, #84	; 0x54
 800bcc6:	d802      	bhi.n	800bcce <_free_r+0x122>
 800bcc8:	0b18      	lsrs	r0, r3, #12
 800bcca:	306e      	adds	r0, #110	; 0x6e
 800bccc:	e7e4      	b.n	800bc98 <_free_r+0xec>
 800bcce:	20aa      	movs	r0, #170	; 0xaa
 800bcd0:	0040      	lsls	r0, r0, #1
 800bcd2:	4285      	cmp	r5, r0
 800bcd4:	d802      	bhi.n	800bcdc <_free_r+0x130>
 800bcd6:	0bd8      	lsrs	r0, r3, #15
 800bcd8:	3077      	adds	r0, #119	; 0x77
 800bcda:	e7dd      	b.n	800bc98 <_free_r+0xec>
 800bcdc:	4e0b      	ldr	r6, [pc, #44]	; (800bd0c <_free_r+0x160>)
 800bcde:	207e      	movs	r0, #126	; 0x7e
 800bce0:	42b5      	cmp	r5, r6
 800bce2:	d8d9      	bhi.n	800bc98 <_free_r+0xec>
 800bce4:	0c98      	lsrs	r0, r3, #18
 800bce6:	307c      	adds	r0, #124	; 0x7c
 800bce8:	e7d6      	b.n	800bc98 <_free_r+0xec>
 800bcea:	68ad      	ldr	r5, [r5, #8]
 800bcec:	42ae      	cmp	r6, r5
 800bcee:	d003      	beq.n	800bcf8 <_free_r+0x14c>
 800bcf0:	686a      	ldr	r2, [r5, #4]
 800bcf2:	43ba      	bics	r2, r7
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d8f8      	bhi.n	800bcea <_free_r+0x13e>
 800bcf8:	68ee      	ldr	r6, [r5, #12]
 800bcfa:	e7d9      	b.n	800bcb0 <_free_r+0x104>
 800bcfc:	20000020 	.word	0x20000020
 800bd00:	2000042c 	.word	0x2000042c
 800bd04:	20000c2c 	.word	0x20000c2c
 800bd08:	20000028 	.word	0x20000028
 800bd0c:	00000554 	.word	0x00000554

0800bd10 <rshift>:
 800bd10:	0002      	movs	r2, r0
 800bd12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd14:	6904      	ldr	r4, [r0, #16]
 800bd16:	114b      	asrs	r3, r1, #5
 800bd18:	b085      	sub	sp, #20
 800bd1a:	3214      	adds	r2, #20
 800bd1c:	9302      	str	r3, [sp, #8]
 800bd1e:	114d      	asrs	r5, r1, #5
 800bd20:	0013      	movs	r3, r2
 800bd22:	42ac      	cmp	r4, r5
 800bd24:	dd32      	ble.n	800bd8c <rshift+0x7c>
 800bd26:	261f      	movs	r6, #31
 800bd28:	000f      	movs	r7, r1
 800bd2a:	114b      	asrs	r3, r1, #5
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	00a5      	lsls	r5, r4, #2
 800bd30:	18d3      	adds	r3, r2, r3
 800bd32:	4037      	ands	r7, r6
 800bd34:	1955      	adds	r5, r2, r5
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	9701      	str	r7, [sp, #4]
 800bd3a:	4231      	tst	r1, r6
 800bd3c:	d10d      	bne.n	800bd5a <rshift+0x4a>
 800bd3e:	0016      	movs	r6, r2
 800bd40:	0019      	movs	r1, r3
 800bd42:	428d      	cmp	r5, r1
 800bd44:	d836      	bhi.n	800bdb4 <rshift+0xa4>
 800bd46:	9900      	ldr	r1, [sp, #0]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	3903      	subs	r1, #3
 800bd4c:	428d      	cmp	r5, r1
 800bd4e:	d302      	bcc.n	800bd56 <rshift+0x46>
 800bd50:	9b02      	ldr	r3, [sp, #8]
 800bd52:	1ae4      	subs	r4, r4, r3
 800bd54:	00a3      	lsls	r3, r4, #2
 800bd56:	18d3      	adds	r3, r2, r3
 800bd58:	e018      	b.n	800bd8c <rshift+0x7c>
 800bd5a:	2120      	movs	r1, #32
 800bd5c:	9e01      	ldr	r6, [sp, #4]
 800bd5e:	9f01      	ldr	r7, [sp, #4]
 800bd60:	1b89      	subs	r1, r1, r6
 800bd62:	9e00      	ldr	r6, [sp, #0]
 800bd64:	9103      	str	r1, [sp, #12]
 800bd66:	ce02      	ldmia	r6!, {r1}
 800bd68:	4694      	mov	ip, r2
 800bd6a:	40f9      	lsrs	r1, r7
 800bd6c:	42b5      	cmp	r5, r6
 800bd6e:	d816      	bhi.n	800bd9e <rshift+0x8e>
 800bd70:	9e00      	ldr	r6, [sp, #0]
 800bd72:	2300      	movs	r3, #0
 800bd74:	3601      	adds	r6, #1
 800bd76:	42b5      	cmp	r5, r6
 800bd78:	d303      	bcc.n	800bd82 <rshift+0x72>
 800bd7a:	9b02      	ldr	r3, [sp, #8]
 800bd7c:	1ae3      	subs	r3, r4, r3
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	3b04      	subs	r3, #4
 800bd82:	18d3      	adds	r3, r2, r3
 800bd84:	6019      	str	r1, [r3, #0]
 800bd86:	2900      	cmp	r1, #0
 800bd88:	d000      	beq.n	800bd8c <rshift+0x7c>
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	1a99      	subs	r1, r3, r2
 800bd8e:	1089      	asrs	r1, r1, #2
 800bd90:	6101      	str	r1, [r0, #16]
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d101      	bne.n	800bd9a <rshift+0x8a>
 800bd96:	2300      	movs	r3, #0
 800bd98:	6143      	str	r3, [r0, #20]
 800bd9a:	b005      	add	sp, #20
 800bd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd9e:	6837      	ldr	r7, [r6, #0]
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	409f      	lsls	r7, r3
 800bda4:	430f      	orrs	r7, r1
 800bda6:	4661      	mov	r1, ip
 800bda8:	c180      	stmia	r1!, {r7}
 800bdaa:	468c      	mov	ip, r1
 800bdac:	9b01      	ldr	r3, [sp, #4]
 800bdae:	ce02      	ldmia	r6!, {r1}
 800bdb0:	40d9      	lsrs	r1, r3
 800bdb2:	e7db      	b.n	800bd6c <rshift+0x5c>
 800bdb4:	c980      	ldmia	r1!, {r7}
 800bdb6:	c680      	stmia	r6!, {r7}
 800bdb8:	e7c3      	b.n	800bd42 <rshift+0x32>

0800bdba <__hexdig_fun>:
 800bdba:	0002      	movs	r2, r0
 800bdbc:	3a30      	subs	r2, #48	; 0x30
 800bdbe:	0003      	movs	r3, r0
 800bdc0:	2a09      	cmp	r2, #9
 800bdc2:	d802      	bhi.n	800bdca <__hexdig_fun+0x10>
 800bdc4:	3b20      	subs	r3, #32
 800bdc6:	b2d8      	uxtb	r0, r3
 800bdc8:	4770      	bx	lr
 800bdca:	0002      	movs	r2, r0
 800bdcc:	3a61      	subs	r2, #97	; 0x61
 800bdce:	2a05      	cmp	r2, #5
 800bdd0:	d801      	bhi.n	800bdd6 <__hexdig_fun+0x1c>
 800bdd2:	3b47      	subs	r3, #71	; 0x47
 800bdd4:	e7f7      	b.n	800bdc6 <__hexdig_fun+0xc>
 800bdd6:	001a      	movs	r2, r3
 800bdd8:	3a41      	subs	r2, #65	; 0x41
 800bdda:	2000      	movs	r0, #0
 800bddc:	2a05      	cmp	r2, #5
 800bdde:	d8f3      	bhi.n	800bdc8 <__hexdig_fun+0xe>
 800bde0:	3b27      	subs	r3, #39	; 0x27
 800bde2:	e7f0      	b.n	800bdc6 <__hexdig_fun+0xc>

0800bde4 <__gethex>:
 800bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde6:	b089      	sub	sp, #36	; 0x24
 800bde8:	9307      	str	r3, [sp, #28]
 800bdea:	2302      	movs	r3, #2
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	680a      	ldr	r2, [r1, #0]
 800bdf0:	425b      	negs	r3, r3
 800bdf2:	9003      	str	r0, [sp, #12]
 800bdf4:	9106      	str	r1, [sp, #24]
 800bdf6:	1c96      	adds	r6, r2, #2
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	199a      	adds	r2, r3, r6
 800bdfc:	9600      	str	r6, [sp, #0]
 800bdfe:	9205      	str	r2, [sp, #20]
 800be00:	9a00      	ldr	r2, [sp, #0]
 800be02:	3601      	adds	r6, #1
 800be04:	7810      	ldrb	r0, [r2, #0]
 800be06:	2830      	cmp	r0, #48	; 0x30
 800be08:	d0f7      	beq.n	800bdfa <__gethex+0x16>
 800be0a:	f7ff ffd6 	bl	800bdba <__hexdig_fun>
 800be0e:	2300      	movs	r3, #0
 800be10:	001d      	movs	r5, r3
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	4298      	cmp	r0, r3
 800be16:	d11d      	bne.n	800be54 <__gethex+0x70>
 800be18:	2201      	movs	r2, #1
 800be1a:	49a6      	ldr	r1, [pc, #664]	; (800c0b4 <__gethex+0x2d0>)
 800be1c:	9800      	ldr	r0, [sp, #0]
 800be1e:	f7ff fd6d 	bl	800b8fc <strncmp>
 800be22:	0007      	movs	r7, r0
 800be24:	42a8      	cmp	r0, r5
 800be26:	d169      	bne.n	800befc <__gethex+0x118>
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	0034      	movs	r4, r6
 800be2c:	7858      	ldrb	r0, [r3, #1]
 800be2e:	f7ff ffc4 	bl	800bdba <__hexdig_fun>
 800be32:	2301      	movs	r3, #1
 800be34:	9302      	str	r3, [sp, #8]
 800be36:	42a8      	cmp	r0, r5
 800be38:	d02f      	beq.n	800be9a <__gethex+0xb6>
 800be3a:	9600      	str	r6, [sp, #0]
 800be3c:	9b00      	ldr	r3, [sp, #0]
 800be3e:	7818      	ldrb	r0, [r3, #0]
 800be40:	2830      	cmp	r0, #48	; 0x30
 800be42:	d009      	beq.n	800be58 <__gethex+0x74>
 800be44:	f7ff ffb9 	bl	800bdba <__hexdig_fun>
 800be48:	4242      	negs	r2, r0
 800be4a:	4142      	adcs	r2, r0
 800be4c:	2301      	movs	r3, #1
 800be4e:	0035      	movs	r5, r6
 800be50:	9202      	str	r2, [sp, #8]
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	9c00      	ldr	r4, [sp, #0]
 800be56:	e004      	b.n	800be62 <__gethex+0x7e>
 800be58:	9b00      	ldr	r3, [sp, #0]
 800be5a:	3301      	adds	r3, #1
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	e7ed      	b.n	800be3c <__gethex+0x58>
 800be60:	3401      	adds	r4, #1
 800be62:	7820      	ldrb	r0, [r4, #0]
 800be64:	f7ff ffa9 	bl	800bdba <__hexdig_fun>
 800be68:	1e07      	subs	r7, r0, #0
 800be6a:	d1f9      	bne.n	800be60 <__gethex+0x7c>
 800be6c:	2201      	movs	r2, #1
 800be6e:	0020      	movs	r0, r4
 800be70:	4990      	ldr	r1, [pc, #576]	; (800c0b4 <__gethex+0x2d0>)
 800be72:	f7ff fd43 	bl	800b8fc <strncmp>
 800be76:	2800      	cmp	r0, #0
 800be78:	d10d      	bne.n	800be96 <__gethex+0xb2>
 800be7a:	2d00      	cmp	r5, #0
 800be7c:	d106      	bne.n	800be8c <__gethex+0xa8>
 800be7e:	3401      	adds	r4, #1
 800be80:	0025      	movs	r5, r4
 800be82:	7820      	ldrb	r0, [r4, #0]
 800be84:	f7ff ff99 	bl	800bdba <__hexdig_fun>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d102      	bne.n	800be92 <__gethex+0xae>
 800be8c:	1b2d      	subs	r5, r5, r4
 800be8e:	00af      	lsls	r7, r5, #2
 800be90:	e003      	b.n	800be9a <__gethex+0xb6>
 800be92:	3401      	adds	r4, #1
 800be94:	e7f5      	b.n	800be82 <__gethex+0x9e>
 800be96:	2d00      	cmp	r5, #0
 800be98:	d1f8      	bne.n	800be8c <__gethex+0xa8>
 800be9a:	2220      	movs	r2, #32
 800be9c:	7823      	ldrb	r3, [r4, #0]
 800be9e:	0026      	movs	r6, r4
 800bea0:	4393      	bics	r3, r2
 800bea2:	2b50      	cmp	r3, #80	; 0x50
 800bea4:	d11d      	bne.n	800bee2 <__gethex+0xfe>
 800bea6:	7863      	ldrb	r3, [r4, #1]
 800bea8:	2b2b      	cmp	r3, #43	; 0x2b
 800beaa:	d02c      	beq.n	800bf06 <__gethex+0x122>
 800beac:	2b2d      	cmp	r3, #45	; 0x2d
 800beae:	d02e      	beq.n	800bf0e <__gethex+0x12a>
 800beb0:	2300      	movs	r3, #0
 800beb2:	1c66      	adds	r6, r4, #1
 800beb4:	9304      	str	r3, [sp, #16]
 800beb6:	7830      	ldrb	r0, [r6, #0]
 800beb8:	f7ff ff7f 	bl	800bdba <__hexdig_fun>
 800bebc:	1e43      	subs	r3, r0, #1
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b18      	cmp	r3, #24
 800bec2:	d82b      	bhi.n	800bf1c <__gethex+0x138>
 800bec4:	3810      	subs	r0, #16
 800bec6:	0005      	movs	r5, r0
 800bec8:	7870      	ldrb	r0, [r6, #1]
 800beca:	f7ff ff76 	bl	800bdba <__hexdig_fun>
 800bece:	1e43      	subs	r3, r0, #1
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	3601      	adds	r6, #1
 800bed4:	2b18      	cmp	r3, #24
 800bed6:	d91c      	bls.n	800bf12 <__gethex+0x12e>
 800bed8:	9b04      	ldr	r3, [sp, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d000      	beq.n	800bee0 <__gethex+0xfc>
 800bede:	426d      	negs	r5, r5
 800bee0:	197f      	adds	r7, r7, r5
 800bee2:	9b06      	ldr	r3, [sp, #24]
 800bee4:	601e      	str	r6, [r3, #0]
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d019      	beq.n	800bf20 <__gethex+0x13c>
 800beec:	2600      	movs	r6, #0
 800beee:	9b05      	ldr	r3, [sp, #20]
 800bef0:	42b3      	cmp	r3, r6
 800bef2:	d100      	bne.n	800bef6 <__gethex+0x112>
 800bef4:	3606      	adds	r6, #6
 800bef6:	0030      	movs	r0, r6
 800bef8:	b009      	add	sp, #36	; 0x24
 800befa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befc:	2301      	movs	r3, #1
 800befe:	2700      	movs	r7, #0
 800bf00:	9c00      	ldr	r4, [sp, #0]
 800bf02:	9302      	str	r3, [sp, #8]
 800bf04:	e7c9      	b.n	800be9a <__gethex+0xb6>
 800bf06:	2300      	movs	r3, #0
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	1ca6      	adds	r6, r4, #2
 800bf0c:	e7d3      	b.n	800beb6 <__gethex+0xd2>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e7fa      	b.n	800bf08 <__gethex+0x124>
 800bf12:	230a      	movs	r3, #10
 800bf14:	435d      	muls	r5, r3
 800bf16:	182d      	adds	r5, r5, r0
 800bf18:	3d10      	subs	r5, #16
 800bf1a:	e7d5      	b.n	800bec8 <__gethex+0xe4>
 800bf1c:	0026      	movs	r6, r4
 800bf1e:	e7e0      	b.n	800bee2 <__gethex+0xfe>
 800bf20:	9b00      	ldr	r3, [sp, #0]
 800bf22:	9902      	ldr	r1, [sp, #8]
 800bf24:	1ae3      	subs	r3, r4, r3
 800bf26:	3b01      	subs	r3, #1
 800bf28:	2b07      	cmp	r3, #7
 800bf2a:	dc0a      	bgt.n	800bf42 <__gethex+0x15e>
 800bf2c:	9803      	ldr	r0, [sp, #12]
 800bf2e:	f000 fa5d 	bl	800c3ec <_Balloc>
 800bf32:	1e05      	subs	r5, r0, #0
 800bf34:	d108      	bne.n	800bf48 <__gethex+0x164>
 800bf36:	002a      	movs	r2, r5
 800bf38:	21e4      	movs	r1, #228	; 0xe4
 800bf3a:	4b5f      	ldr	r3, [pc, #380]	; (800c0b8 <__gethex+0x2d4>)
 800bf3c:	485f      	ldr	r0, [pc, #380]	; (800c0bc <__gethex+0x2d8>)
 800bf3e:	f003 fd19 	bl	800f974 <__assert_func>
 800bf42:	3101      	adds	r1, #1
 800bf44:	105b      	asrs	r3, r3, #1
 800bf46:	e7ef      	b.n	800bf28 <__gethex+0x144>
 800bf48:	0003      	movs	r3, r0
 800bf4a:	3314      	adds	r3, #20
 800bf4c:	9302      	str	r3, [sp, #8]
 800bf4e:	9305      	str	r3, [sp, #20]
 800bf50:	2300      	movs	r3, #0
 800bf52:	001e      	movs	r6, r3
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	9b00      	ldr	r3, [sp, #0]
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d33f      	bcc.n	800bfdc <__gethex+0x1f8>
 800bf5c:	9c05      	ldr	r4, [sp, #20]
 800bf5e:	9b02      	ldr	r3, [sp, #8]
 800bf60:	c440      	stmia	r4!, {r6}
 800bf62:	1ae4      	subs	r4, r4, r3
 800bf64:	10a4      	asrs	r4, r4, #2
 800bf66:	0030      	movs	r0, r6
 800bf68:	612c      	str	r4, [r5, #16]
 800bf6a:	f000 fb01 	bl	800c570 <__hi0bits>
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	0164      	lsls	r4, r4, #5
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	1a26      	subs	r6, r4, r0
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	429e      	cmp	r6, r3
 800bf7a:	dd51      	ble.n	800c020 <__gethex+0x23c>
 800bf7c:	1af6      	subs	r6, r6, r3
 800bf7e:	0031      	movs	r1, r6
 800bf80:	0028      	movs	r0, r5
 800bf82:	f000 fe7b 	bl	800cc7c <__any_on>
 800bf86:	1e04      	subs	r4, r0, #0
 800bf88:	d016      	beq.n	800bfb8 <__gethex+0x1d4>
 800bf8a:	2401      	movs	r4, #1
 800bf8c:	231f      	movs	r3, #31
 800bf8e:	0020      	movs	r0, r4
 800bf90:	1e72      	subs	r2, r6, #1
 800bf92:	4013      	ands	r3, r2
 800bf94:	4098      	lsls	r0, r3
 800bf96:	0003      	movs	r3, r0
 800bf98:	1151      	asrs	r1, r2, #5
 800bf9a:	9802      	ldr	r0, [sp, #8]
 800bf9c:	0089      	lsls	r1, r1, #2
 800bf9e:	5809      	ldr	r1, [r1, r0]
 800bfa0:	4219      	tst	r1, r3
 800bfa2:	d009      	beq.n	800bfb8 <__gethex+0x1d4>
 800bfa4:	42a2      	cmp	r2, r4
 800bfa6:	dd06      	ble.n	800bfb6 <__gethex+0x1d2>
 800bfa8:	0028      	movs	r0, r5
 800bfaa:	1eb1      	subs	r1, r6, #2
 800bfac:	f000 fe66 	bl	800cc7c <__any_on>
 800bfb0:	3402      	adds	r4, #2
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d100      	bne.n	800bfb8 <__gethex+0x1d4>
 800bfb6:	2402      	movs	r4, #2
 800bfb8:	0031      	movs	r1, r6
 800bfba:	0028      	movs	r0, r5
 800bfbc:	f7ff fea8 	bl	800bd10 <rshift>
 800bfc0:	19bf      	adds	r7, r7, r6
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	42bb      	cmp	r3, r7
 800bfc8:	da3a      	bge.n	800c040 <__gethex+0x25c>
 800bfca:	0029      	movs	r1, r5
 800bfcc:	9803      	ldr	r0, [sp, #12]
 800bfce:	f000 fa35 	bl	800c43c <_Bfree>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfd6:	26a3      	movs	r6, #163	; 0xa3
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	e78c      	b.n	800bef6 <__gethex+0x112>
 800bfdc:	3c01      	subs	r4, #1
 800bfde:	7823      	ldrb	r3, [r4, #0]
 800bfe0:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe2:	d012      	beq.n	800c00a <__gethex+0x226>
 800bfe4:	9b04      	ldr	r3, [sp, #16]
 800bfe6:	2b20      	cmp	r3, #32
 800bfe8:	d104      	bne.n	800bff4 <__gethex+0x210>
 800bfea:	9b05      	ldr	r3, [sp, #20]
 800bfec:	c340      	stmia	r3!, {r6}
 800bfee:	2600      	movs	r6, #0
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	9604      	str	r6, [sp, #16]
 800bff4:	7820      	ldrb	r0, [r4, #0]
 800bff6:	f7ff fee0 	bl	800bdba <__hexdig_fun>
 800bffa:	230f      	movs	r3, #15
 800bffc:	4018      	ands	r0, r3
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	4098      	lsls	r0, r3
 800c002:	3304      	adds	r3, #4
 800c004:	4306      	orrs	r6, r0
 800c006:	9304      	str	r3, [sp, #16]
 800c008:	e7a5      	b.n	800bf56 <__gethex+0x172>
 800c00a:	9b00      	ldr	r3, [sp, #0]
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	d8e9      	bhi.n	800bfe4 <__gethex+0x200>
 800c010:	2201      	movs	r2, #1
 800c012:	0020      	movs	r0, r4
 800c014:	4927      	ldr	r1, [pc, #156]	; (800c0b4 <__gethex+0x2d0>)
 800c016:	f7ff fc71 	bl	800b8fc <strncmp>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d1e2      	bne.n	800bfe4 <__gethex+0x200>
 800c01e:	e79a      	b.n	800bf56 <__gethex+0x172>
 800c020:	9b00      	ldr	r3, [sp, #0]
 800c022:	2400      	movs	r4, #0
 800c024:	429e      	cmp	r6, r3
 800c026:	dacc      	bge.n	800bfc2 <__gethex+0x1de>
 800c028:	1b9e      	subs	r6, r3, r6
 800c02a:	0029      	movs	r1, r5
 800c02c:	0032      	movs	r2, r6
 800c02e:	9803      	ldr	r0, [sp, #12]
 800c030:	f000 fbf0 	bl	800c814 <__lshift>
 800c034:	0003      	movs	r3, r0
 800c036:	3314      	adds	r3, #20
 800c038:	0005      	movs	r5, r0
 800c03a:	1bbf      	subs	r7, r7, r6
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	e7c0      	b.n	800bfc2 <__gethex+0x1de>
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	685e      	ldr	r6, [r3, #4]
 800c044:	42be      	cmp	r6, r7
 800c046:	dd70      	ble.n	800c12a <__gethex+0x346>
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	1bf6      	subs	r6, r6, r7
 800c04c:	42b3      	cmp	r3, r6
 800c04e:	dc37      	bgt.n	800c0c0 <__gethex+0x2dc>
 800c050:	9b01      	ldr	r3, [sp, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b02      	cmp	r3, #2
 800c056:	d024      	beq.n	800c0a2 <__gethex+0x2be>
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d026      	beq.n	800c0aa <__gethex+0x2c6>
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d117      	bne.n	800c090 <__gethex+0x2ac>
 800c060:	9b00      	ldr	r3, [sp, #0]
 800c062:	42b3      	cmp	r3, r6
 800c064:	d114      	bne.n	800c090 <__gethex+0x2ac>
 800c066:	2b01      	cmp	r3, #1
 800c068:	d10b      	bne.n	800c082 <__gethex+0x29e>
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	9a07      	ldr	r2, [sp, #28]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	2662      	movs	r6, #98	; 0x62
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	2301      	movs	r3, #1
 800c076:	9a02      	ldr	r2, [sp, #8]
 800c078:	612b      	str	r3, [r5, #16]
 800c07a:	6013      	str	r3, [r2, #0]
 800c07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07e:	601d      	str	r5, [r3, #0]
 800c080:	e739      	b.n	800bef6 <__gethex+0x112>
 800c082:	9900      	ldr	r1, [sp, #0]
 800c084:	0028      	movs	r0, r5
 800c086:	3901      	subs	r1, #1
 800c088:	f000 fdf8 	bl	800cc7c <__any_on>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d1ec      	bne.n	800c06a <__gethex+0x286>
 800c090:	0029      	movs	r1, r5
 800c092:	9803      	ldr	r0, [sp, #12]
 800c094:	f000 f9d2 	bl	800c43c <_Bfree>
 800c098:	2300      	movs	r3, #0
 800c09a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c09c:	2650      	movs	r6, #80	; 0x50
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	e729      	b.n	800bef6 <__gethex+0x112>
 800c0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1f3      	bne.n	800c090 <__gethex+0x2ac>
 800c0a8:	e7df      	b.n	800c06a <__gethex+0x286>
 800c0aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1dc      	bne.n	800c06a <__gethex+0x286>
 800c0b0:	e7ee      	b.n	800c090 <__gethex+0x2ac>
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	08013fa0 	.word	0x08013fa0
 800c0b8:	08014101 	.word	0x08014101
 800c0bc:	08014112 	.word	0x08014112
 800c0c0:	1e77      	subs	r7, r6, #1
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d12f      	bne.n	800c126 <__gethex+0x342>
 800c0c6:	2f00      	cmp	r7, #0
 800c0c8:	d004      	beq.n	800c0d4 <__gethex+0x2f0>
 800c0ca:	0039      	movs	r1, r7
 800c0cc:	0028      	movs	r0, r5
 800c0ce:	f000 fdd5 	bl	800cc7c <__any_on>
 800c0d2:	0004      	movs	r4, r0
 800c0d4:	231f      	movs	r3, #31
 800c0d6:	117a      	asrs	r2, r7, #5
 800c0d8:	401f      	ands	r7, r3
 800c0da:	3b1e      	subs	r3, #30
 800c0dc:	40bb      	lsls	r3, r7
 800c0de:	9902      	ldr	r1, [sp, #8]
 800c0e0:	0092      	lsls	r2, r2, #2
 800c0e2:	5852      	ldr	r2, [r2, r1]
 800c0e4:	421a      	tst	r2, r3
 800c0e6:	d001      	beq.n	800c0ec <__gethex+0x308>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	431c      	orrs	r4, r3
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	0031      	movs	r1, r6
 800c0f0:	1b9b      	subs	r3, r3, r6
 800c0f2:	2602      	movs	r6, #2
 800c0f4:	0028      	movs	r0, r5
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	f7ff fe0a 	bl	800bd10 <rshift>
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	685f      	ldr	r7, [r3, #4]
 800c100:	2c00      	cmp	r4, #0
 800c102:	d041      	beq.n	800c188 <__gethex+0x3a4>
 800c104:	9b01      	ldr	r3, [sp, #4]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	2b02      	cmp	r3, #2
 800c10a:	d010      	beq.n	800c12e <__gethex+0x34a>
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d012      	beq.n	800c136 <__gethex+0x352>
 800c110:	2b01      	cmp	r3, #1
 800c112:	d106      	bne.n	800c122 <__gethex+0x33e>
 800c114:	07a2      	lsls	r2, r4, #30
 800c116:	d504      	bpl.n	800c122 <__gethex+0x33e>
 800c118:	9a02      	ldr	r2, [sp, #8]
 800c11a:	6812      	ldr	r2, [r2, #0]
 800c11c:	4314      	orrs	r4, r2
 800c11e:	421c      	tst	r4, r3
 800c120:	d10c      	bne.n	800c13c <__gethex+0x358>
 800c122:	2310      	movs	r3, #16
 800c124:	e02f      	b.n	800c186 <__gethex+0x3a2>
 800c126:	2401      	movs	r4, #1
 800c128:	e7d4      	b.n	800c0d4 <__gethex+0x2f0>
 800c12a:	2601      	movs	r6, #1
 800c12c:	e7e8      	b.n	800c100 <__gethex+0x31c>
 800c12e:	2301      	movs	r3, #1
 800c130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c132:	1a9b      	subs	r3, r3, r2
 800c134:	930f      	str	r3, [sp, #60]	; 0x3c
 800c136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0f2      	beq.n	800c122 <__gethex+0x33e>
 800c13c:	692b      	ldr	r3, [r5, #16]
 800c13e:	2000      	movs	r0, #0
 800c140:	9302      	str	r3, [sp, #8]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	9304      	str	r3, [sp, #16]
 800c146:	002b      	movs	r3, r5
 800c148:	9a04      	ldr	r2, [sp, #16]
 800c14a:	3314      	adds	r3, #20
 800c14c:	1899      	adds	r1, r3, r2
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	1c54      	adds	r4, r2, #1
 800c152:	d01e      	beq.n	800c192 <__gethex+0x3ae>
 800c154:	3201      	adds	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	002b      	movs	r3, r5
 800c15a:	3314      	adds	r3, #20
 800c15c:	2e02      	cmp	r6, #2
 800c15e:	d141      	bne.n	800c1e4 <__gethex+0x400>
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	9900      	ldr	r1, [sp, #0]
 800c164:	6812      	ldr	r2, [r2, #0]
 800c166:	3a01      	subs	r2, #1
 800c168:	428a      	cmp	r2, r1
 800c16a:	d10b      	bne.n	800c184 <__gethex+0x3a0>
 800c16c:	221f      	movs	r2, #31
 800c16e:	9800      	ldr	r0, [sp, #0]
 800c170:	1149      	asrs	r1, r1, #5
 800c172:	4002      	ands	r2, r0
 800c174:	2001      	movs	r0, #1
 800c176:	0004      	movs	r4, r0
 800c178:	4094      	lsls	r4, r2
 800c17a:	0089      	lsls	r1, r1, #2
 800c17c:	58cb      	ldr	r3, [r1, r3]
 800c17e:	4223      	tst	r3, r4
 800c180:	d000      	beq.n	800c184 <__gethex+0x3a0>
 800c182:	2601      	movs	r6, #1
 800c184:	2320      	movs	r3, #32
 800c186:	431e      	orrs	r6, r3
 800c188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18a:	601d      	str	r5, [r3, #0]
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	601f      	str	r7, [r3, #0]
 800c190:	e6b1      	b.n	800bef6 <__gethex+0x112>
 800c192:	c301      	stmia	r3!, {r0}
 800c194:	4299      	cmp	r1, r3
 800c196:	d8da      	bhi.n	800c14e <__gethex+0x36a>
 800c198:	68ab      	ldr	r3, [r5, #8]
 800c19a:	9a02      	ldr	r2, [sp, #8]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	db18      	blt.n	800c1d2 <__gethex+0x3ee>
 800c1a0:	6869      	ldr	r1, [r5, #4]
 800c1a2:	9803      	ldr	r0, [sp, #12]
 800c1a4:	3101      	adds	r1, #1
 800c1a6:	f000 f921 	bl	800c3ec <_Balloc>
 800c1aa:	1e04      	subs	r4, r0, #0
 800c1ac:	d104      	bne.n	800c1b8 <__gethex+0x3d4>
 800c1ae:	0022      	movs	r2, r4
 800c1b0:	2184      	movs	r1, #132	; 0x84
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <__gethex+0x440>)
 800c1b4:	481c      	ldr	r0, [pc, #112]	; (800c228 <__gethex+0x444>)
 800c1b6:	e6c2      	b.n	800bf3e <__gethex+0x15a>
 800c1b8:	0029      	movs	r1, r5
 800c1ba:	692a      	ldr	r2, [r5, #16]
 800c1bc:	310c      	adds	r1, #12
 800c1be:	3202      	adds	r2, #2
 800c1c0:	0092      	lsls	r2, r2, #2
 800c1c2:	300c      	adds	r0, #12
 800c1c4:	f7ff fc77 	bl	800bab6 <memcpy>
 800c1c8:	0029      	movs	r1, r5
 800c1ca:	9803      	ldr	r0, [sp, #12]
 800c1cc:	f000 f936 	bl	800c43c <_Bfree>
 800c1d0:	0025      	movs	r5, r4
 800c1d2:	692b      	ldr	r3, [r5, #16]
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	612a      	str	r2, [r5, #16]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	3304      	adds	r3, #4
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	18eb      	adds	r3, r5, r3
 800c1e0:	605a      	str	r2, [r3, #4]
 800c1e2:	e7b9      	b.n	800c158 <__gethex+0x374>
 800c1e4:	692a      	ldr	r2, [r5, #16]
 800c1e6:	9902      	ldr	r1, [sp, #8]
 800c1e8:	428a      	cmp	r2, r1
 800c1ea:	dd09      	ble.n	800c200 <__gethex+0x41c>
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	0028      	movs	r0, r5
 800c1f0:	f7ff fd8e 	bl	800bd10 <rshift>
 800c1f4:	9b01      	ldr	r3, [sp, #4]
 800c1f6:	3701      	adds	r7, #1
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	42bb      	cmp	r3, r7
 800c1fc:	dac1      	bge.n	800c182 <__gethex+0x39e>
 800c1fe:	e6e4      	b.n	800bfca <__gethex+0x1e6>
 800c200:	221f      	movs	r2, #31
 800c202:	9c00      	ldr	r4, [sp, #0]
 800c204:	9900      	ldr	r1, [sp, #0]
 800c206:	2601      	movs	r6, #1
 800c208:	4014      	ands	r4, r2
 800c20a:	4211      	tst	r1, r2
 800c20c:	d0ba      	beq.n	800c184 <__gethex+0x3a0>
 800c20e:	9a04      	ldr	r2, [sp, #16]
 800c210:	189b      	adds	r3, r3, r2
 800c212:	3b04      	subs	r3, #4
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	f000 f9ab 	bl	800c570 <__hi0bits>
 800c21a:	2320      	movs	r3, #32
 800c21c:	1b1b      	subs	r3, r3, r4
 800c21e:	4298      	cmp	r0, r3
 800c220:	dbe4      	blt.n	800c1ec <__gethex+0x408>
 800c222:	e7af      	b.n	800c184 <__gethex+0x3a0>
 800c224:	08014101 	.word	0x08014101
 800c228:	08014112 	.word	0x08014112

0800c22c <L_shift>:
 800c22c:	2308      	movs	r3, #8
 800c22e:	b570      	push	{r4, r5, r6, lr}
 800c230:	2520      	movs	r5, #32
 800c232:	1a9a      	subs	r2, r3, r2
 800c234:	0092      	lsls	r2, r2, #2
 800c236:	1aad      	subs	r5, r5, r2
 800c238:	6843      	ldr	r3, [r0, #4]
 800c23a:	6804      	ldr	r4, [r0, #0]
 800c23c:	001e      	movs	r6, r3
 800c23e:	40ae      	lsls	r6, r5
 800c240:	40d3      	lsrs	r3, r2
 800c242:	4334      	orrs	r4, r6
 800c244:	6004      	str	r4, [r0, #0]
 800c246:	6043      	str	r3, [r0, #4]
 800c248:	3004      	adds	r0, #4
 800c24a:	4288      	cmp	r0, r1
 800c24c:	d3f4      	bcc.n	800c238 <L_shift+0xc>
 800c24e:	bd70      	pop	{r4, r5, r6, pc}

0800c250 <__match>:
 800c250:	b530      	push	{r4, r5, lr}
 800c252:	6803      	ldr	r3, [r0, #0]
 800c254:	780c      	ldrb	r4, [r1, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	2c00      	cmp	r4, #0
 800c25a:	d102      	bne.n	800c262 <__match+0x12>
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	2001      	movs	r0, #1
 800c260:	bd30      	pop	{r4, r5, pc}
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	0015      	movs	r5, r2
 800c266:	3d41      	subs	r5, #65	; 0x41
 800c268:	2d19      	cmp	r5, #25
 800c26a:	d800      	bhi.n	800c26e <__match+0x1e>
 800c26c:	3220      	adds	r2, #32
 800c26e:	3101      	adds	r1, #1
 800c270:	42a2      	cmp	r2, r4
 800c272:	d0ef      	beq.n	800c254 <__match+0x4>
 800c274:	2000      	movs	r0, #0
 800c276:	e7f3      	b.n	800c260 <__match+0x10>

0800c278 <__hexnan>:
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	680b      	ldr	r3, [r1, #0]
 800c27c:	b08b      	sub	sp, #44	; 0x2c
 800c27e:	9201      	str	r2, [sp, #4]
 800c280:	9901      	ldr	r1, [sp, #4]
 800c282:	115a      	asrs	r2, r3, #5
 800c284:	0092      	lsls	r2, r2, #2
 800c286:	188a      	adds	r2, r1, r2
 800c288:	9202      	str	r2, [sp, #8]
 800c28a:	0019      	movs	r1, r3
 800c28c:	221f      	movs	r2, #31
 800c28e:	4011      	ands	r1, r2
 800c290:	9008      	str	r0, [sp, #32]
 800c292:	9106      	str	r1, [sp, #24]
 800c294:	4213      	tst	r3, r2
 800c296:	d002      	beq.n	800c29e <__hexnan+0x26>
 800c298:	9b02      	ldr	r3, [sp, #8]
 800c29a:	3304      	adds	r3, #4
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	9b02      	ldr	r3, [sp, #8]
 800c2a0:	2500      	movs	r5, #0
 800c2a2:	1f1f      	subs	r7, r3, #4
 800c2a4:	003e      	movs	r6, r7
 800c2a6:	003c      	movs	r4, r7
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	603d      	str	r5, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9507      	str	r5, [sp, #28]
 800c2b0:	9305      	str	r3, [sp, #20]
 800c2b2:	9503      	str	r5, [sp, #12]
 800c2b4:	9b05      	ldr	r3, [sp, #20]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ba:	9b05      	ldr	r3, [sp, #20]
 800c2bc:	785b      	ldrb	r3, [r3, #1]
 800c2be:	9304      	str	r3, [sp, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d028      	beq.n	800c316 <__hexnan+0x9e>
 800c2c4:	9804      	ldr	r0, [sp, #16]
 800c2c6:	f7ff fd78 	bl	800bdba <__hexdig_fun>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d154      	bne.n	800c378 <__hexnan+0x100>
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	2b20      	cmp	r3, #32
 800c2d2:	d819      	bhi.n	800c308 <__hexnan+0x90>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	9a07      	ldr	r2, [sp, #28]
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	dd12      	ble.n	800c302 <__hexnan+0x8a>
 800c2dc:	42b4      	cmp	r4, r6
 800c2de:	d206      	bcs.n	800c2ee <__hexnan+0x76>
 800c2e0:	2d07      	cmp	r5, #7
 800c2e2:	dc04      	bgt.n	800c2ee <__hexnan+0x76>
 800c2e4:	002a      	movs	r2, r5
 800c2e6:	0031      	movs	r1, r6
 800c2e8:	0020      	movs	r0, r4
 800c2ea:	f7ff ff9f 	bl	800c22c <L_shift>
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	2508      	movs	r5, #8
 800c2f2:	429c      	cmp	r4, r3
 800c2f4:	d905      	bls.n	800c302 <__hexnan+0x8a>
 800c2f6:	1f26      	subs	r6, r4, #4
 800c2f8:	2500      	movs	r5, #0
 800c2fa:	0034      	movs	r4, r6
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	6035      	str	r5, [r6, #0]
 800c300:	9307      	str	r3, [sp, #28]
 800c302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	e7d5      	b.n	800c2b4 <__hexnan+0x3c>
 800c308:	9b04      	ldr	r3, [sp, #16]
 800c30a:	2b29      	cmp	r3, #41	; 0x29
 800c30c:	d159      	bne.n	800c3c2 <__hexnan+0x14a>
 800c30e:	9b05      	ldr	r3, [sp, #20]
 800c310:	9a08      	ldr	r2, [sp, #32]
 800c312:	3302      	adds	r3, #2
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d052      	beq.n	800c3c2 <__hexnan+0x14a>
 800c31c:	42b4      	cmp	r4, r6
 800c31e:	d206      	bcs.n	800c32e <__hexnan+0xb6>
 800c320:	2d07      	cmp	r5, #7
 800c322:	dc04      	bgt.n	800c32e <__hexnan+0xb6>
 800c324:	002a      	movs	r2, r5
 800c326:	0031      	movs	r1, r6
 800c328:	0020      	movs	r0, r4
 800c32a:	f7ff ff7f 	bl	800c22c <L_shift>
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	429c      	cmp	r4, r3
 800c332:	d935      	bls.n	800c3a0 <__hexnan+0x128>
 800c334:	001a      	movs	r2, r3
 800c336:	0023      	movs	r3, r4
 800c338:	cb02      	ldmia	r3!, {r1}
 800c33a:	c202      	stmia	r2!, {r1}
 800c33c:	429f      	cmp	r7, r3
 800c33e:	d2fb      	bcs.n	800c338 <__hexnan+0xc0>
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	1c62      	adds	r2, r4, #1
 800c344:	1ed9      	subs	r1, r3, #3
 800c346:	2304      	movs	r3, #4
 800c348:	4291      	cmp	r1, r2
 800c34a:	d305      	bcc.n	800c358 <__hexnan+0xe0>
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	3b04      	subs	r3, #4
 800c350:	1b1b      	subs	r3, r3, r4
 800c352:	089b      	lsrs	r3, r3, #2
 800c354:	3301      	adds	r3, #1
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	9a01      	ldr	r2, [sp, #4]
 800c35a:	18d3      	adds	r3, r2, r3
 800c35c:	2200      	movs	r2, #0
 800c35e:	c304      	stmia	r3!, {r2}
 800c360:	429f      	cmp	r7, r3
 800c362:	d2fc      	bcs.n	800c35e <__hexnan+0xe6>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d104      	bne.n	800c374 <__hexnan+0xfc>
 800c36a:	9b01      	ldr	r3, [sp, #4]
 800c36c:	429f      	cmp	r7, r3
 800c36e:	d126      	bne.n	800c3be <__hexnan+0x146>
 800c370:	2301      	movs	r3, #1
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	2005      	movs	r0, #5
 800c376:	e025      	b.n	800c3c4 <__hexnan+0x14c>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	3501      	adds	r5, #1
 800c37c:	3301      	adds	r3, #1
 800c37e:	9303      	str	r3, [sp, #12]
 800c380:	2d08      	cmp	r5, #8
 800c382:	dd06      	ble.n	800c392 <__hexnan+0x11a>
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	429c      	cmp	r4, r3
 800c388:	d9bb      	bls.n	800c302 <__hexnan+0x8a>
 800c38a:	2300      	movs	r3, #0
 800c38c:	2501      	movs	r5, #1
 800c38e:	3c04      	subs	r4, #4
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	220f      	movs	r2, #15
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	4010      	ands	r0, r2
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	4303      	orrs	r3, r0
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	e7b0      	b.n	800c302 <__hexnan+0x8a>
 800c3a0:	9b06      	ldr	r3, [sp, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0de      	beq.n	800c364 <__hexnan+0xec>
 800c3a6:	2320      	movs	r3, #32
 800c3a8:	9a06      	ldr	r2, [sp, #24]
 800c3aa:	9902      	ldr	r1, [sp, #8]
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4252      	negs	r2, r2
 800c3b2:	40da      	lsrs	r2, r3
 800c3b4:	3904      	subs	r1, #4
 800c3b6:	680b      	ldr	r3, [r1, #0]
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	600b      	str	r3, [r1, #0]
 800c3bc:	e7d2      	b.n	800c364 <__hexnan+0xec>
 800c3be:	3f04      	subs	r7, #4
 800c3c0:	e7d0      	b.n	800c364 <__hexnan+0xec>
 800c3c2:	2004      	movs	r0, #4
 800c3c4:	b00b      	add	sp, #44	; 0x2c
 800c3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3c8 <__ascii_mbtowc>:
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d100      	bne.n	800c3d0 <__ascii_mbtowc+0x8>
 800c3ce:	a901      	add	r1, sp, #4
 800c3d0:	1e10      	subs	r0, r2, #0
 800c3d2:	d006      	beq.n	800c3e2 <__ascii_mbtowc+0x1a>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <__ascii_mbtowc+0x1e>
 800c3d8:	7813      	ldrb	r3, [r2, #0]
 800c3da:	600b      	str	r3, [r1, #0]
 800c3dc:	7810      	ldrb	r0, [r2, #0]
 800c3de:	1e43      	subs	r3, r0, #1
 800c3e0:	4198      	sbcs	r0, r3
 800c3e2:	b002      	add	sp, #8
 800c3e4:	4770      	bx	lr
 800c3e6:	2002      	movs	r0, #2
 800c3e8:	4240      	negs	r0, r0
 800c3ea:	e7fa      	b.n	800c3e2 <__ascii_mbtowc+0x1a>

0800c3ec <_Balloc>:
 800c3ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c3ee:	b570      	push	{r4, r5, r6, lr}
 800c3f0:	0006      	movs	r6, r0
 800c3f2:	000c      	movs	r4, r1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d012      	beq.n	800c41e <_Balloc+0x32>
 800c3f8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c3fa:	00a2      	lsls	r2, r4, #2
 800c3fc:	189b      	adds	r3, r3, r2
 800c3fe:	6818      	ldr	r0, [r3, #0]
 800c400:	2800      	cmp	r0, #0
 800c402:	d115      	bne.n	800c430 <_Balloc+0x44>
 800c404:	2101      	movs	r1, #1
 800c406:	000d      	movs	r5, r1
 800c408:	40a5      	lsls	r5, r4
 800c40a:	1d6a      	adds	r2, r5, #5
 800c40c:	0030      	movs	r0, r6
 800c40e:	0092      	lsls	r2, r2, #2
 800c410:	f003 face 	bl	800f9b0 <_calloc_r>
 800c414:	2800      	cmp	r0, #0
 800c416:	d009      	beq.n	800c42c <_Balloc+0x40>
 800c418:	6044      	str	r4, [r0, #4]
 800c41a:	6085      	str	r5, [r0, #8]
 800c41c:	e00a      	b.n	800c434 <_Balloc+0x48>
 800c41e:	2221      	movs	r2, #33	; 0x21
 800c420:	2104      	movs	r1, #4
 800c422:	f003 fac5 	bl	800f9b0 <_calloc_r>
 800c426:	6470      	str	r0, [r6, #68]	; 0x44
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1e5      	bne.n	800c3f8 <_Balloc+0xc>
 800c42c:	2000      	movs	r0, #0
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	6802      	ldr	r2, [r0, #0]
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	2300      	movs	r3, #0
 800c436:	6103      	str	r3, [r0, #16]
 800c438:	60c3      	str	r3, [r0, #12]
 800c43a:	e7f8      	b.n	800c42e <_Balloc+0x42>

0800c43c <_Bfree>:
 800c43c:	2900      	cmp	r1, #0
 800c43e:	d006      	beq.n	800c44e <_Bfree+0x12>
 800c440:	684a      	ldr	r2, [r1, #4]
 800c442:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c444:	0092      	lsls	r2, r2, #2
 800c446:	189b      	adds	r3, r3, r2
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	600a      	str	r2, [r1, #0]
 800c44c:	6019      	str	r1, [r3, #0]
 800c44e:	4770      	bx	lr

0800c450 <__multadd>:
 800c450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c452:	000e      	movs	r6, r1
 800c454:	9001      	str	r0, [sp, #4]
 800c456:	000c      	movs	r4, r1
 800c458:	001d      	movs	r5, r3
 800c45a:	2000      	movs	r0, #0
 800c45c:	690f      	ldr	r7, [r1, #16]
 800c45e:	3614      	adds	r6, #20
 800c460:	6833      	ldr	r3, [r6, #0]
 800c462:	3001      	adds	r0, #1
 800c464:	b299      	uxth	r1, r3
 800c466:	4351      	muls	r1, r2
 800c468:	0c1b      	lsrs	r3, r3, #16
 800c46a:	4353      	muls	r3, r2
 800c46c:	1949      	adds	r1, r1, r5
 800c46e:	0c0d      	lsrs	r5, r1, #16
 800c470:	195b      	adds	r3, r3, r5
 800c472:	0c1d      	lsrs	r5, r3, #16
 800c474:	b289      	uxth	r1, r1
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	185b      	adds	r3, r3, r1
 800c47a:	c608      	stmia	r6!, {r3}
 800c47c:	4287      	cmp	r7, r0
 800c47e:	dcef      	bgt.n	800c460 <__multadd+0x10>
 800c480:	2d00      	cmp	r5, #0
 800c482:	d022      	beq.n	800c4ca <__multadd+0x7a>
 800c484:	68a3      	ldr	r3, [r4, #8]
 800c486:	42bb      	cmp	r3, r7
 800c488:	dc19      	bgt.n	800c4be <__multadd+0x6e>
 800c48a:	6861      	ldr	r1, [r4, #4]
 800c48c:	9801      	ldr	r0, [sp, #4]
 800c48e:	3101      	adds	r1, #1
 800c490:	f7ff ffac 	bl	800c3ec <_Balloc>
 800c494:	1e06      	subs	r6, r0, #0
 800c496:	d105      	bne.n	800c4a4 <__multadd+0x54>
 800c498:	0032      	movs	r2, r6
 800c49a:	21ba      	movs	r1, #186	; 0xba
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <__multadd+0x80>)
 800c49e:	480d      	ldr	r0, [pc, #52]	; (800c4d4 <__multadd+0x84>)
 800c4a0:	f003 fa68 	bl	800f974 <__assert_func>
 800c4a4:	0021      	movs	r1, r4
 800c4a6:	6922      	ldr	r2, [r4, #16]
 800c4a8:	310c      	adds	r1, #12
 800c4aa:	3202      	adds	r2, #2
 800c4ac:	0092      	lsls	r2, r2, #2
 800c4ae:	300c      	adds	r0, #12
 800c4b0:	f7ff fb01 	bl	800bab6 <memcpy>
 800c4b4:	0021      	movs	r1, r4
 800c4b6:	9801      	ldr	r0, [sp, #4]
 800c4b8:	f7ff ffc0 	bl	800c43c <_Bfree>
 800c4bc:	0034      	movs	r4, r6
 800c4be:	1d3b      	adds	r3, r7, #4
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	18e3      	adds	r3, r4, r3
 800c4c4:	605d      	str	r5, [r3, #4]
 800c4c6:	1c7b      	adds	r3, r7, #1
 800c4c8:	6123      	str	r3, [r4, #16]
 800c4ca:	0020      	movs	r0, r4
 800c4cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4ce:	46c0      	nop			; (mov r8, r8)
 800c4d0:	08014101 	.word	0x08014101
 800c4d4:	08014172 	.word	0x08014172

0800c4d8 <__s2b>:
 800c4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4da:	0006      	movs	r6, r0
 800c4dc:	0018      	movs	r0, r3
 800c4de:	000c      	movs	r4, r1
 800c4e0:	3008      	adds	r0, #8
 800c4e2:	2109      	movs	r1, #9
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	0015      	movs	r5, r2
 800c4e8:	f7f3 feb2 	bl	8000250 <__divsi3>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	4283      	cmp	r3, r0
 800c4f2:	db0a      	blt.n	800c50a <__s2b+0x32>
 800c4f4:	0030      	movs	r0, r6
 800c4f6:	f7ff ff79 	bl	800c3ec <_Balloc>
 800c4fa:	1e01      	subs	r1, r0, #0
 800c4fc:	d108      	bne.n	800c510 <__s2b+0x38>
 800c4fe:	000a      	movs	r2, r1
 800c500:	4b19      	ldr	r3, [pc, #100]	; (800c568 <__s2b+0x90>)
 800c502:	481a      	ldr	r0, [pc, #104]	; (800c56c <__s2b+0x94>)
 800c504:	31d3      	adds	r1, #211	; 0xd3
 800c506:	f003 fa35 	bl	800f974 <__assert_func>
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	3101      	adds	r1, #1
 800c50e:	e7ef      	b.n	800c4f0 <__s2b+0x18>
 800c510:	9b08      	ldr	r3, [sp, #32]
 800c512:	6143      	str	r3, [r0, #20]
 800c514:	2301      	movs	r3, #1
 800c516:	6103      	str	r3, [r0, #16]
 800c518:	2d09      	cmp	r5, #9
 800c51a:	dd18      	ble.n	800c54e <__s2b+0x76>
 800c51c:	0023      	movs	r3, r4
 800c51e:	3309      	adds	r3, #9
 800c520:	001f      	movs	r7, r3
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	1964      	adds	r4, r4, r5
 800c526:	783b      	ldrb	r3, [r7, #0]
 800c528:	220a      	movs	r2, #10
 800c52a:	0030      	movs	r0, r6
 800c52c:	3b30      	subs	r3, #48	; 0x30
 800c52e:	f7ff ff8f 	bl	800c450 <__multadd>
 800c532:	3701      	adds	r7, #1
 800c534:	0001      	movs	r1, r0
 800c536:	42a7      	cmp	r7, r4
 800c538:	d1f5      	bne.n	800c526 <__s2b+0x4e>
 800c53a:	002c      	movs	r4, r5
 800c53c:	9b00      	ldr	r3, [sp, #0]
 800c53e:	3c08      	subs	r4, #8
 800c540:	191c      	adds	r4, r3, r4
 800c542:	002f      	movs	r7, r5
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	429f      	cmp	r7, r3
 800c548:	db04      	blt.n	800c554 <__s2b+0x7c>
 800c54a:	0008      	movs	r0, r1
 800c54c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c54e:	2509      	movs	r5, #9
 800c550:	340a      	adds	r4, #10
 800c552:	e7f6      	b.n	800c542 <__s2b+0x6a>
 800c554:	1b63      	subs	r3, r4, r5
 800c556:	5ddb      	ldrb	r3, [r3, r7]
 800c558:	220a      	movs	r2, #10
 800c55a:	0030      	movs	r0, r6
 800c55c:	3b30      	subs	r3, #48	; 0x30
 800c55e:	f7ff ff77 	bl	800c450 <__multadd>
 800c562:	3701      	adds	r7, #1
 800c564:	0001      	movs	r1, r0
 800c566:	e7ed      	b.n	800c544 <__s2b+0x6c>
 800c568:	08014101 	.word	0x08014101
 800c56c:	08014172 	.word	0x08014172

0800c570 <__hi0bits>:
 800c570:	0003      	movs	r3, r0
 800c572:	0c02      	lsrs	r2, r0, #16
 800c574:	2000      	movs	r0, #0
 800c576:	4282      	cmp	r2, r0
 800c578:	d101      	bne.n	800c57e <__hi0bits+0xe>
 800c57a:	041b      	lsls	r3, r3, #16
 800c57c:	3010      	adds	r0, #16
 800c57e:	0e1a      	lsrs	r2, r3, #24
 800c580:	d101      	bne.n	800c586 <__hi0bits+0x16>
 800c582:	3008      	adds	r0, #8
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	0f1a      	lsrs	r2, r3, #28
 800c588:	d101      	bne.n	800c58e <__hi0bits+0x1e>
 800c58a:	3004      	adds	r0, #4
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	0f9a      	lsrs	r2, r3, #30
 800c590:	d101      	bne.n	800c596 <__hi0bits+0x26>
 800c592:	3002      	adds	r0, #2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	db03      	blt.n	800c5a2 <__hi0bits+0x32>
 800c59a:	3001      	adds	r0, #1
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	d400      	bmi.n	800c5a2 <__hi0bits+0x32>
 800c5a0:	2020      	movs	r0, #32
 800c5a2:	4770      	bx	lr

0800c5a4 <__lo0bits>:
 800c5a4:	6803      	ldr	r3, [r0, #0]
 800c5a6:	0001      	movs	r1, r0
 800c5a8:	2207      	movs	r2, #7
 800c5aa:	0018      	movs	r0, r3
 800c5ac:	4010      	ands	r0, r2
 800c5ae:	4213      	tst	r3, r2
 800c5b0:	d00d      	beq.n	800c5ce <__lo0bits+0x2a>
 800c5b2:	3a06      	subs	r2, #6
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	4213      	tst	r3, r2
 800c5b8:	d105      	bne.n	800c5c6 <__lo0bits+0x22>
 800c5ba:	3002      	adds	r0, #2
 800c5bc:	4203      	tst	r3, r0
 800c5be:	d003      	beq.n	800c5c8 <__lo0bits+0x24>
 800c5c0:	40d3      	lsrs	r3, r2
 800c5c2:	0010      	movs	r0, r2
 800c5c4:	600b      	str	r3, [r1, #0]
 800c5c6:	4770      	bx	lr
 800c5c8:	089b      	lsrs	r3, r3, #2
 800c5ca:	600b      	str	r3, [r1, #0]
 800c5cc:	e7fb      	b.n	800c5c6 <__lo0bits+0x22>
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	d101      	bne.n	800c5d8 <__lo0bits+0x34>
 800c5d4:	2010      	movs	r0, #16
 800c5d6:	0c1b      	lsrs	r3, r3, #16
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	d101      	bne.n	800c5e2 <__lo0bits+0x3e>
 800c5de:	3008      	adds	r0, #8
 800c5e0:	0a1b      	lsrs	r3, r3, #8
 800c5e2:	071a      	lsls	r2, r3, #28
 800c5e4:	d101      	bne.n	800c5ea <__lo0bits+0x46>
 800c5e6:	3004      	adds	r0, #4
 800c5e8:	091b      	lsrs	r3, r3, #4
 800c5ea:	079a      	lsls	r2, r3, #30
 800c5ec:	d101      	bne.n	800c5f2 <__lo0bits+0x4e>
 800c5ee:	3002      	adds	r0, #2
 800c5f0:	089b      	lsrs	r3, r3, #2
 800c5f2:	07da      	lsls	r2, r3, #31
 800c5f4:	d4e9      	bmi.n	800c5ca <__lo0bits+0x26>
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	085b      	lsrs	r3, r3, #1
 800c5fa:	d1e6      	bne.n	800c5ca <__lo0bits+0x26>
 800c5fc:	2020      	movs	r0, #32
 800c5fe:	e7e2      	b.n	800c5c6 <__lo0bits+0x22>

0800c600 <__i2b>:
 800c600:	b510      	push	{r4, lr}
 800c602:	000c      	movs	r4, r1
 800c604:	2101      	movs	r1, #1
 800c606:	f7ff fef1 	bl	800c3ec <_Balloc>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d107      	bne.n	800c61e <__i2b+0x1e>
 800c60e:	2146      	movs	r1, #70	; 0x46
 800c610:	4c05      	ldr	r4, [pc, #20]	; (800c628 <__i2b+0x28>)
 800c612:	0002      	movs	r2, r0
 800c614:	4b05      	ldr	r3, [pc, #20]	; (800c62c <__i2b+0x2c>)
 800c616:	0020      	movs	r0, r4
 800c618:	31ff      	adds	r1, #255	; 0xff
 800c61a:	f003 f9ab 	bl	800f974 <__assert_func>
 800c61e:	2301      	movs	r3, #1
 800c620:	6144      	str	r4, [r0, #20]
 800c622:	6103      	str	r3, [r0, #16]
 800c624:	bd10      	pop	{r4, pc}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	08014172 	.word	0x08014172
 800c62c:	08014101 	.word	0x08014101

0800c630 <__multiply>:
 800c630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c632:	0015      	movs	r5, r2
 800c634:	690a      	ldr	r2, [r1, #16]
 800c636:	692b      	ldr	r3, [r5, #16]
 800c638:	000c      	movs	r4, r1
 800c63a:	b08b      	sub	sp, #44	; 0x2c
 800c63c:	429a      	cmp	r2, r3
 800c63e:	da01      	bge.n	800c644 <__multiply+0x14>
 800c640:	002c      	movs	r4, r5
 800c642:	000d      	movs	r5, r1
 800c644:	6927      	ldr	r7, [r4, #16]
 800c646:	692e      	ldr	r6, [r5, #16]
 800c648:	6861      	ldr	r1, [r4, #4]
 800c64a:	19bb      	adds	r3, r7, r6
 800c64c:	9303      	str	r3, [sp, #12]
 800c64e:	68a3      	ldr	r3, [r4, #8]
 800c650:	19ba      	adds	r2, r7, r6
 800c652:	4293      	cmp	r3, r2
 800c654:	da00      	bge.n	800c658 <__multiply+0x28>
 800c656:	3101      	adds	r1, #1
 800c658:	f7ff fec8 	bl	800c3ec <_Balloc>
 800c65c:	9002      	str	r0, [sp, #8]
 800c65e:	2800      	cmp	r0, #0
 800c660:	d106      	bne.n	800c670 <__multiply+0x40>
 800c662:	21b1      	movs	r1, #177	; 0xb1
 800c664:	4b48      	ldr	r3, [pc, #288]	; (800c788 <__multiply+0x158>)
 800c666:	4849      	ldr	r0, [pc, #292]	; (800c78c <__multiply+0x15c>)
 800c668:	9a02      	ldr	r2, [sp, #8]
 800c66a:	0049      	lsls	r1, r1, #1
 800c66c:	f003 f982 	bl	800f974 <__assert_func>
 800c670:	9b02      	ldr	r3, [sp, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	3314      	adds	r3, #20
 800c676:	469c      	mov	ip, r3
 800c678:	19bb      	adds	r3, r7, r6
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4463      	add	r3, ip
 800c67e:	9304      	str	r3, [sp, #16]
 800c680:	4663      	mov	r3, ip
 800c682:	9904      	ldr	r1, [sp, #16]
 800c684:	428b      	cmp	r3, r1
 800c686:	d32a      	bcc.n	800c6de <__multiply+0xae>
 800c688:	0023      	movs	r3, r4
 800c68a:	00bf      	lsls	r7, r7, #2
 800c68c:	3314      	adds	r3, #20
 800c68e:	3514      	adds	r5, #20
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	00b6      	lsls	r6, r6, #2
 800c694:	19db      	adds	r3, r3, r7
 800c696:	9305      	str	r3, [sp, #20]
 800c698:	19ab      	adds	r3, r5, r6
 800c69a:	9309      	str	r3, [sp, #36]	; 0x24
 800c69c:	2304      	movs	r3, #4
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	0023      	movs	r3, r4
 800c6a2:	9a05      	ldr	r2, [sp, #20]
 800c6a4:	3315      	adds	r3, #21
 800c6a6:	9501      	str	r5, [sp, #4]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d305      	bcc.n	800c6b8 <__multiply+0x88>
 800c6ac:	1b13      	subs	r3, r2, r4
 800c6ae:	3b15      	subs	r3, #21
 800c6b0:	089b      	lsrs	r3, r3, #2
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	9306      	str	r3, [sp, #24]
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d310      	bcc.n	800c6e2 <__multiply+0xb2>
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dd05      	ble.n	800c6d2 <__multiply+0xa2>
 800c6c6:	9b04      	ldr	r3, [sp, #16]
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d056      	beq.n	800c780 <__multiply+0x150>
 800c6d2:	9b02      	ldr	r3, [sp, #8]
 800c6d4:	9a03      	ldr	r2, [sp, #12]
 800c6d6:	0018      	movs	r0, r3
 800c6d8:	611a      	str	r2, [r3, #16]
 800c6da:	b00b      	add	sp, #44	; 0x2c
 800c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6de:	c304      	stmia	r3!, {r2}
 800c6e0:	e7cf      	b.n	800c682 <__multiply+0x52>
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	b280      	uxth	r0, r0
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d01e      	beq.n	800c72a <__multiply+0xfa>
 800c6ec:	4667      	mov	r7, ip
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	9e08      	ldr	r6, [sp, #32]
 800c6f2:	ce02      	ldmia	r6!, {r1}
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	9307      	str	r3, [sp, #28]
 800c6f8:	b28b      	uxth	r3, r1
 800c6fa:	4343      	muls	r3, r0
 800c6fc:	001a      	movs	r2, r3
 800c6fe:	466b      	mov	r3, sp
 800c700:	8b9b      	ldrh	r3, [r3, #28]
 800c702:	18d3      	adds	r3, r2, r3
 800c704:	195b      	adds	r3, r3, r5
 800c706:	0c0d      	lsrs	r5, r1, #16
 800c708:	4345      	muls	r5, r0
 800c70a:	9a07      	ldr	r2, [sp, #28]
 800c70c:	0c11      	lsrs	r1, r2, #16
 800c70e:	1869      	adds	r1, r5, r1
 800c710:	0c1a      	lsrs	r2, r3, #16
 800c712:	188a      	adds	r2, r1, r2
 800c714:	b29b      	uxth	r3, r3
 800c716:	0c15      	lsrs	r5, r2, #16
 800c718:	0412      	lsls	r2, r2, #16
 800c71a:	431a      	orrs	r2, r3
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	c704      	stmia	r7!, {r2}
 800c720:	42b3      	cmp	r3, r6
 800c722:	d8e6      	bhi.n	800c6f2 <__multiply+0xc2>
 800c724:	4663      	mov	r3, ip
 800c726:	9a06      	ldr	r2, [sp, #24]
 800c728:	509d      	str	r5, [r3, r2]
 800c72a:	9b01      	ldr	r3, [sp, #4]
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	0c00      	lsrs	r0, r0, #16
 800c730:	d020      	beq.n	800c774 <__multiply+0x144>
 800c732:	4663      	mov	r3, ip
 800c734:	0025      	movs	r5, r4
 800c736:	4661      	mov	r1, ip
 800c738:	2700      	movs	r7, #0
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3514      	adds	r5, #20
 800c73e:	682a      	ldr	r2, [r5, #0]
 800c740:	680e      	ldr	r6, [r1, #0]
 800c742:	b292      	uxth	r2, r2
 800c744:	4342      	muls	r2, r0
 800c746:	0c36      	lsrs	r6, r6, #16
 800c748:	1992      	adds	r2, r2, r6
 800c74a:	19d2      	adds	r2, r2, r7
 800c74c:	0416      	lsls	r6, r2, #16
 800c74e:	b29b      	uxth	r3, r3
 800c750:	431e      	orrs	r6, r3
 800c752:	600e      	str	r6, [r1, #0]
 800c754:	cd40      	ldmia	r5!, {r6}
 800c756:	684b      	ldr	r3, [r1, #4]
 800c758:	0c36      	lsrs	r6, r6, #16
 800c75a:	4346      	muls	r6, r0
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	0c12      	lsrs	r2, r2, #16
 800c760:	18f3      	adds	r3, r6, r3
 800c762:	189b      	adds	r3, r3, r2
 800c764:	9a05      	ldr	r2, [sp, #20]
 800c766:	0c1f      	lsrs	r7, r3, #16
 800c768:	3104      	adds	r1, #4
 800c76a:	42aa      	cmp	r2, r5
 800c76c:	d8e7      	bhi.n	800c73e <__multiply+0x10e>
 800c76e:	4662      	mov	r2, ip
 800c770:	9906      	ldr	r1, [sp, #24]
 800c772:	5053      	str	r3, [r2, r1]
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	3304      	adds	r3, #4
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	2304      	movs	r3, #4
 800c77c:	449c      	add	ip, r3
 800c77e:	e79b      	b.n	800c6b8 <__multiply+0x88>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	3b01      	subs	r3, #1
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	e79b      	b.n	800c6c0 <__multiply+0x90>
 800c788:	08014101 	.word	0x08014101
 800c78c:	08014172 	.word	0x08014172

0800c790 <__pow5mult>:
 800c790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c792:	2303      	movs	r3, #3
 800c794:	0015      	movs	r5, r2
 800c796:	0007      	movs	r7, r0
 800c798:	000e      	movs	r6, r1
 800c79a:	401a      	ands	r2, r3
 800c79c:	421d      	tst	r5, r3
 800c79e:	d008      	beq.n	800c7b2 <__pow5mult+0x22>
 800c7a0:	491a      	ldr	r1, [pc, #104]	; (800c80c <__pow5mult+0x7c>)
 800c7a2:	3a01      	subs	r2, #1
 800c7a4:	0092      	lsls	r2, r2, #2
 800c7a6:	5852      	ldr	r2, [r2, r1]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	0031      	movs	r1, r6
 800c7ac:	f7ff fe50 	bl	800c450 <__multadd>
 800c7b0:	0006      	movs	r6, r0
 800c7b2:	10ad      	asrs	r5, r5, #2
 800c7b4:	d027      	beq.n	800c806 <__pow5mult+0x76>
 800c7b6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c7b8:	2c00      	cmp	r4, #0
 800c7ba:	d107      	bne.n	800c7cc <__pow5mult+0x3c>
 800c7bc:	0038      	movs	r0, r7
 800c7be:	4914      	ldr	r1, [pc, #80]	; (800c810 <__pow5mult+0x80>)
 800c7c0:	f7ff ff1e 	bl	800c600 <__i2b>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	0004      	movs	r4, r0
 800c7c8:	6438      	str	r0, [r7, #64]	; 0x40
 800c7ca:	6003      	str	r3, [r0, #0]
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	421d      	tst	r5, r3
 800c7d0:	d00a      	beq.n	800c7e8 <__pow5mult+0x58>
 800c7d2:	0031      	movs	r1, r6
 800c7d4:	0022      	movs	r2, r4
 800c7d6:	0038      	movs	r0, r7
 800c7d8:	f7ff ff2a 	bl	800c630 <__multiply>
 800c7dc:	0031      	movs	r1, r6
 800c7de:	9001      	str	r0, [sp, #4]
 800c7e0:	0038      	movs	r0, r7
 800c7e2:	f7ff fe2b 	bl	800c43c <_Bfree>
 800c7e6:	9e01      	ldr	r6, [sp, #4]
 800c7e8:	106d      	asrs	r5, r5, #1
 800c7ea:	d00c      	beq.n	800c806 <__pow5mult+0x76>
 800c7ec:	6820      	ldr	r0, [r4, #0]
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d107      	bne.n	800c802 <__pow5mult+0x72>
 800c7f2:	0022      	movs	r2, r4
 800c7f4:	0021      	movs	r1, r4
 800c7f6:	0038      	movs	r0, r7
 800c7f8:	f7ff ff1a 	bl	800c630 <__multiply>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6020      	str	r0, [r4, #0]
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	0004      	movs	r4, r0
 800c804:	e7e2      	b.n	800c7cc <__pow5mult+0x3c>
 800c806:	0030      	movs	r0, r6
 800c808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c80a:	46c0      	nop			; (mov r8, r8)
 800c80c:	080142c0 	.word	0x080142c0
 800c810:	00000271 	.word	0x00000271

0800c814 <__lshift>:
 800c814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c816:	000c      	movs	r4, r1
 800c818:	0017      	movs	r7, r2
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	1155      	asrs	r5, r2, #5
 800c81e:	b087      	sub	sp, #28
 800c820:	18eb      	adds	r3, r5, r3
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	3301      	adds	r3, #1
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	6849      	ldr	r1, [r1, #4]
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	9004      	str	r0, [sp, #16]
 800c82e:	9a01      	ldr	r2, [sp, #4]
 800c830:	4293      	cmp	r3, r2
 800c832:	db10      	blt.n	800c856 <__lshift+0x42>
 800c834:	9804      	ldr	r0, [sp, #16]
 800c836:	f7ff fdd9 	bl	800c3ec <_Balloc>
 800c83a:	2300      	movs	r3, #0
 800c83c:	0002      	movs	r2, r0
 800c83e:	0006      	movs	r6, r0
 800c840:	0019      	movs	r1, r3
 800c842:	3214      	adds	r2, #20
 800c844:	4298      	cmp	r0, r3
 800c846:	d10c      	bne.n	800c862 <__lshift+0x4e>
 800c848:	31df      	adds	r1, #223	; 0xdf
 800c84a:	0032      	movs	r2, r6
 800c84c:	4b26      	ldr	r3, [pc, #152]	; (800c8e8 <__lshift+0xd4>)
 800c84e:	4827      	ldr	r0, [pc, #156]	; (800c8ec <__lshift+0xd8>)
 800c850:	31ff      	adds	r1, #255	; 0xff
 800c852:	f003 f88f 	bl	800f974 <__assert_func>
 800c856:	3101      	adds	r1, #1
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	e7e8      	b.n	800c82e <__lshift+0x1a>
 800c85c:	0098      	lsls	r0, r3, #2
 800c85e:	5011      	str	r1, [r2, r0]
 800c860:	3301      	adds	r3, #1
 800c862:	42ab      	cmp	r3, r5
 800c864:	dbfa      	blt.n	800c85c <__lshift+0x48>
 800c866:	43eb      	mvns	r3, r5
 800c868:	17db      	asrs	r3, r3, #31
 800c86a:	401d      	ands	r5, r3
 800c86c:	211f      	movs	r1, #31
 800c86e:	0023      	movs	r3, r4
 800c870:	0038      	movs	r0, r7
 800c872:	00ad      	lsls	r5, r5, #2
 800c874:	1955      	adds	r5, r2, r5
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	3314      	adds	r3, #20
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	4008      	ands	r0, r1
 800c87e:	4684      	mov	ip, r0
 800c880:	189a      	adds	r2, r3, r2
 800c882:	420f      	tst	r7, r1
 800c884:	d02a      	beq.n	800c8dc <__lshift+0xc8>
 800c886:	3101      	adds	r1, #1
 800c888:	1a09      	subs	r1, r1, r0
 800c88a:	9105      	str	r1, [sp, #20]
 800c88c:	2100      	movs	r1, #0
 800c88e:	9503      	str	r5, [sp, #12]
 800c890:	4667      	mov	r7, ip
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	40b8      	lsls	r0, r7
 800c896:	4308      	orrs	r0, r1
 800c898:	9903      	ldr	r1, [sp, #12]
 800c89a:	c101      	stmia	r1!, {r0}
 800c89c:	9103      	str	r1, [sp, #12]
 800c89e:	9805      	ldr	r0, [sp, #20]
 800c8a0:	cb02      	ldmia	r3!, {r1}
 800c8a2:	40c1      	lsrs	r1, r0
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d8f3      	bhi.n	800c890 <__lshift+0x7c>
 800c8a8:	0020      	movs	r0, r4
 800c8aa:	3015      	adds	r0, #21
 800c8ac:	2304      	movs	r3, #4
 800c8ae:	4282      	cmp	r2, r0
 800c8b0:	d304      	bcc.n	800c8bc <__lshift+0xa8>
 800c8b2:	1b13      	subs	r3, r2, r4
 800c8b4:	3b15      	subs	r3, #21
 800c8b6:	089b      	lsrs	r3, r3, #2
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	50e9      	str	r1, [r5, r3]
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	d002      	beq.n	800c8c8 <__lshift+0xb4>
 800c8c2:	9b02      	ldr	r3, [sp, #8]
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	9804      	ldr	r0, [sp, #16]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	0021      	movs	r1, r4
 800c8d0:	6133      	str	r3, [r6, #16]
 800c8d2:	f7ff fdb3 	bl	800c43c <_Bfree>
 800c8d6:	0030      	movs	r0, r6
 800c8d8:	b007      	add	sp, #28
 800c8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8dc:	cb02      	ldmia	r3!, {r1}
 800c8de:	c502      	stmia	r5!, {r1}
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d8fb      	bhi.n	800c8dc <__lshift+0xc8>
 800c8e4:	e7f0      	b.n	800c8c8 <__lshift+0xb4>
 800c8e6:	46c0      	nop			; (mov r8, r8)
 800c8e8:	08014101 	.word	0x08014101
 800c8ec:	08014172 	.word	0x08014172

0800c8f0 <__mcmp>:
 800c8f0:	b530      	push	{r4, r5, lr}
 800c8f2:	690b      	ldr	r3, [r1, #16]
 800c8f4:	6904      	ldr	r4, [r0, #16]
 800c8f6:	0002      	movs	r2, r0
 800c8f8:	1ae0      	subs	r0, r4, r3
 800c8fa:	429c      	cmp	r4, r3
 800c8fc:	d10e      	bne.n	800c91c <__mcmp+0x2c>
 800c8fe:	3214      	adds	r2, #20
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	3114      	adds	r1, #20
 800c904:	0014      	movs	r4, r2
 800c906:	18c9      	adds	r1, r1, r3
 800c908:	18d2      	adds	r2, r2, r3
 800c90a:	3a04      	subs	r2, #4
 800c90c:	3904      	subs	r1, #4
 800c90e:	6815      	ldr	r5, [r2, #0]
 800c910:	680b      	ldr	r3, [r1, #0]
 800c912:	429d      	cmp	r5, r3
 800c914:	d003      	beq.n	800c91e <__mcmp+0x2e>
 800c916:	2001      	movs	r0, #1
 800c918:	429d      	cmp	r5, r3
 800c91a:	d303      	bcc.n	800c924 <__mcmp+0x34>
 800c91c:	bd30      	pop	{r4, r5, pc}
 800c91e:	4294      	cmp	r4, r2
 800c920:	d3f3      	bcc.n	800c90a <__mcmp+0x1a>
 800c922:	e7fb      	b.n	800c91c <__mcmp+0x2c>
 800c924:	4240      	negs	r0, r0
 800c926:	e7f9      	b.n	800c91c <__mcmp+0x2c>

0800c928 <__mdiff>:
 800c928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c92a:	000e      	movs	r6, r1
 800c92c:	0007      	movs	r7, r0
 800c92e:	0011      	movs	r1, r2
 800c930:	0030      	movs	r0, r6
 800c932:	b087      	sub	sp, #28
 800c934:	0014      	movs	r4, r2
 800c936:	f7ff ffdb 	bl	800c8f0 <__mcmp>
 800c93a:	1e05      	subs	r5, r0, #0
 800c93c:	d110      	bne.n	800c960 <__mdiff+0x38>
 800c93e:	0001      	movs	r1, r0
 800c940:	0038      	movs	r0, r7
 800c942:	f7ff fd53 	bl	800c3ec <_Balloc>
 800c946:	1e02      	subs	r2, r0, #0
 800c948:	d104      	bne.n	800c954 <__mdiff+0x2c>
 800c94a:	4b3f      	ldr	r3, [pc, #252]	; (800ca48 <__mdiff+0x120>)
 800c94c:	483f      	ldr	r0, [pc, #252]	; (800ca4c <__mdiff+0x124>)
 800c94e:	4940      	ldr	r1, [pc, #256]	; (800ca50 <__mdiff+0x128>)
 800c950:	f003 f810 	bl	800f974 <__assert_func>
 800c954:	2301      	movs	r3, #1
 800c956:	6145      	str	r5, [r0, #20]
 800c958:	6103      	str	r3, [r0, #16]
 800c95a:	0010      	movs	r0, r2
 800c95c:	b007      	add	sp, #28
 800c95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c960:	2301      	movs	r3, #1
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	2800      	cmp	r0, #0
 800c966:	db04      	blt.n	800c972 <__mdiff+0x4a>
 800c968:	0023      	movs	r3, r4
 800c96a:	0034      	movs	r4, r6
 800c96c:	001e      	movs	r6, r3
 800c96e:	2300      	movs	r3, #0
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	0038      	movs	r0, r7
 800c974:	6861      	ldr	r1, [r4, #4]
 800c976:	f7ff fd39 	bl	800c3ec <_Balloc>
 800c97a:	1e02      	subs	r2, r0, #0
 800c97c:	d103      	bne.n	800c986 <__mdiff+0x5e>
 800c97e:	4b32      	ldr	r3, [pc, #200]	; (800ca48 <__mdiff+0x120>)
 800c980:	4832      	ldr	r0, [pc, #200]	; (800ca4c <__mdiff+0x124>)
 800c982:	4934      	ldr	r1, [pc, #208]	; (800ca54 <__mdiff+0x12c>)
 800c984:	e7e4      	b.n	800c950 <__mdiff+0x28>
 800c986:	9b01      	ldr	r3, [sp, #4]
 800c988:	2700      	movs	r7, #0
 800c98a:	60c3      	str	r3, [r0, #12]
 800c98c:	6920      	ldr	r0, [r4, #16]
 800c98e:	3414      	adds	r4, #20
 800c990:	0083      	lsls	r3, r0, #2
 800c992:	18e3      	adds	r3, r4, r3
 800c994:	0021      	movs	r1, r4
 800c996:	9401      	str	r4, [sp, #4]
 800c998:	0034      	movs	r4, r6
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	6933      	ldr	r3, [r6, #16]
 800c99e:	3414      	adds	r4, #20
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	18e3      	adds	r3, r4, r3
 800c9a4:	9303      	str	r3, [sp, #12]
 800c9a6:	0013      	movs	r3, r2
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	469c      	mov	ip, r3
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	9104      	str	r1, [sp, #16]
 800c9b0:	9b04      	ldr	r3, [sp, #16]
 800c9b2:	cc02      	ldmia	r4!, {r1}
 800c9b4:	cb20      	ldmia	r3!, {r5}
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	b2ab      	uxth	r3, r5
 800c9ba:	19df      	adds	r7, r3, r7
 800c9bc:	b28b      	uxth	r3, r1
 800c9be:	1afb      	subs	r3, r7, r3
 800c9c0:	0c09      	lsrs	r1, r1, #16
 800c9c2:	0c2d      	lsrs	r5, r5, #16
 800c9c4:	1a6d      	subs	r5, r5, r1
 800c9c6:	1419      	asrs	r1, r3, #16
 800c9c8:	1869      	adds	r1, r5, r1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	140f      	asrs	r7, r1, #16
 800c9ce:	0409      	lsls	r1, r1, #16
 800c9d0:	4319      	orrs	r1, r3
 800c9d2:	4663      	mov	r3, ip
 800c9d4:	c302      	stmia	r3!, {r1}
 800c9d6:	469c      	mov	ip, r3
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	42a3      	cmp	r3, r4
 800c9dc:	d8e8      	bhi.n	800c9b0 <__mdiff+0x88>
 800c9de:	0031      	movs	r1, r6
 800c9e0:	9c03      	ldr	r4, [sp, #12]
 800c9e2:	3115      	adds	r1, #21
 800c9e4:	2304      	movs	r3, #4
 800c9e6:	428c      	cmp	r4, r1
 800c9e8:	d304      	bcc.n	800c9f4 <__mdiff+0xcc>
 800c9ea:	1ba3      	subs	r3, r4, r6
 800c9ec:	3b15      	subs	r3, #21
 800c9ee:	089b      	lsrs	r3, r3, #2
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	9901      	ldr	r1, [sp, #4]
 800c9f6:	18cd      	adds	r5, r1, r3
 800c9f8:	9905      	ldr	r1, [sp, #20]
 800c9fa:	002e      	movs	r6, r5
 800c9fc:	18cb      	adds	r3, r1, r3
 800c9fe:	469c      	mov	ip, r3
 800ca00:	9902      	ldr	r1, [sp, #8]
 800ca02:	428e      	cmp	r6, r1
 800ca04:	d310      	bcc.n	800ca28 <__mdiff+0x100>
 800ca06:	9e02      	ldr	r6, [sp, #8]
 800ca08:	1ee9      	subs	r1, r5, #3
 800ca0a:	2400      	movs	r4, #0
 800ca0c:	428e      	cmp	r6, r1
 800ca0e:	d304      	bcc.n	800ca1a <__mdiff+0xf2>
 800ca10:	0031      	movs	r1, r6
 800ca12:	3103      	adds	r1, #3
 800ca14:	1b49      	subs	r1, r1, r5
 800ca16:	0889      	lsrs	r1, r1, #2
 800ca18:	008c      	lsls	r4, r1, #2
 800ca1a:	191b      	adds	r3, r3, r4
 800ca1c:	3b04      	subs	r3, #4
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	2900      	cmp	r1, #0
 800ca22:	d00f      	beq.n	800ca44 <__mdiff+0x11c>
 800ca24:	6110      	str	r0, [r2, #16]
 800ca26:	e798      	b.n	800c95a <__mdiff+0x32>
 800ca28:	ce02      	ldmia	r6!, {r1}
 800ca2a:	b28c      	uxth	r4, r1
 800ca2c:	19e4      	adds	r4, r4, r7
 800ca2e:	0c0f      	lsrs	r7, r1, #16
 800ca30:	1421      	asrs	r1, r4, #16
 800ca32:	1879      	adds	r1, r7, r1
 800ca34:	b2a4      	uxth	r4, r4
 800ca36:	140f      	asrs	r7, r1, #16
 800ca38:	0409      	lsls	r1, r1, #16
 800ca3a:	4321      	orrs	r1, r4
 800ca3c:	4664      	mov	r4, ip
 800ca3e:	c402      	stmia	r4!, {r1}
 800ca40:	46a4      	mov	ip, r4
 800ca42:	e7dd      	b.n	800ca00 <__mdiff+0xd8>
 800ca44:	3801      	subs	r0, #1
 800ca46:	e7e9      	b.n	800ca1c <__mdiff+0xf4>
 800ca48:	08014101 	.word	0x08014101
 800ca4c:	08014172 	.word	0x08014172
 800ca50:	00000237 	.word	0x00000237
 800ca54:	00000245 	.word	0x00000245

0800ca58 <__ulp>:
 800ca58:	2000      	movs	r0, #0
 800ca5a:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <__ulp+0x30>)
 800ca5c:	4019      	ands	r1, r3
 800ca5e:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <__ulp+0x34>)
 800ca60:	18c9      	adds	r1, r1, r3
 800ca62:	4281      	cmp	r1, r0
 800ca64:	dc06      	bgt.n	800ca74 <__ulp+0x1c>
 800ca66:	4249      	negs	r1, r1
 800ca68:	150b      	asrs	r3, r1, #20
 800ca6a:	2b13      	cmp	r3, #19
 800ca6c:	dc03      	bgt.n	800ca76 <__ulp+0x1e>
 800ca6e:	2180      	movs	r1, #128	; 0x80
 800ca70:	0309      	lsls	r1, r1, #12
 800ca72:	4119      	asrs	r1, r3
 800ca74:	4770      	bx	lr
 800ca76:	3b14      	subs	r3, #20
 800ca78:	2001      	movs	r0, #1
 800ca7a:	2b1e      	cmp	r3, #30
 800ca7c:	dc02      	bgt.n	800ca84 <__ulp+0x2c>
 800ca7e:	2080      	movs	r0, #128	; 0x80
 800ca80:	0600      	lsls	r0, r0, #24
 800ca82:	40d8      	lsrs	r0, r3
 800ca84:	2100      	movs	r1, #0
 800ca86:	e7f5      	b.n	800ca74 <__ulp+0x1c>
 800ca88:	7ff00000 	.word	0x7ff00000
 800ca8c:	fcc00000 	.word	0xfcc00000

0800ca90 <__b2d>:
 800ca90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca92:	0006      	movs	r6, r0
 800ca94:	6903      	ldr	r3, [r0, #16]
 800ca96:	3614      	adds	r6, #20
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	18f3      	adds	r3, r6, r3
 800ca9c:	1f1d      	subs	r5, r3, #4
 800ca9e:	682c      	ldr	r4, [r5, #0]
 800caa0:	000f      	movs	r7, r1
 800caa2:	0020      	movs	r0, r4
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	f7ff fd63 	bl	800c570 <__hi0bits>
 800caaa:	2220      	movs	r2, #32
 800caac:	1a12      	subs	r2, r2, r0
 800caae:	603a      	str	r2, [r7, #0]
 800cab0:	0003      	movs	r3, r0
 800cab2:	4a1c      	ldr	r2, [pc, #112]	; (800cb24 <__b2d+0x94>)
 800cab4:	280a      	cmp	r0, #10
 800cab6:	dc15      	bgt.n	800cae4 <__b2d+0x54>
 800cab8:	210b      	movs	r1, #11
 800caba:	0027      	movs	r7, r4
 800cabc:	1a09      	subs	r1, r1, r0
 800cabe:	40cf      	lsrs	r7, r1
 800cac0:	433a      	orrs	r2, r7
 800cac2:	468c      	mov	ip, r1
 800cac4:	0011      	movs	r1, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	42ae      	cmp	r6, r5
 800caca:	d202      	bcs.n	800cad2 <__b2d+0x42>
 800cacc:	9a01      	ldr	r2, [sp, #4]
 800cace:	3a08      	subs	r2, #8
 800cad0:	6812      	ldr	r2, [r2, #0]
 800cad2:	3315      	adds	r3, #21
 800cad4:	409c      	lsls	r4, r3
 800cad6:	4663      	mov	r3, ip
 800cad8:	0027      	movs	r7, r4
 800cada:	40da      	lsrs	r2, r3
 800cadc:	4317      	orrs	r7, r2
 800cade:	0038      	movs	r0, r7
 800cae0:	b003      	add	sp, #12
 800cae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae4:	2700      	movs	r7, #0
 800cae6:	42ae      	cmp	r6, r5
 800cae8:	d202      	bcs.n	800caf0 <__b2d+0x60>
 800caea:	9d01      	ldr	r5, [sp, #4]
 800caec:	3d08      	subs	r5, #8
 800caee:	682f      	ldr	r7, [r5, #0]
 800caf0:	210b      	movs	r1, #11
 800caf2:	4249      	negs	r1, r1
 800caf4:	468c      	mov	ip, r1
 800caf6:	449c      	add	ip, r3
 800caf8:	2b0b      	cmp	r3, #11
 800cafa:	d010      	beq.n	800cb1e <__b2d+0x8e>
 800cafc:	4661      	mov	r1, ip
 800cafe:	2320      	movs	r3, #32
 800cb00:	408c      	lsls	r4, r1
 800cb02:	1a5b      	subs	r3, r3, r1
 800cb04:	0039      	movs	r1, r7
 800cb06:	40d9      	lsrs	r1, r3
 800cb08:	430c      	orrs	r4, r1
 800cb0a:	4322      	orrs	r2, r4
 800cb0c:	0011      	movs	r1, r2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	42b5      	cmp	r5, r6
 800cb12:	d901      	bls.n	800cb18 <__b2d+0x88>
 800cb14:	3d04      	subs	r5, #4
 800cb16:	682a      	ldr	r2, [r5, #0]
 800cb18:	4664      	mov	r4, ip
 800cb1a:	40a7      	lsls	r7, r4
 800cb1c:	e7dd      	b.n	800cada <__b2d+0x4a>
 800cb1e:	4322      	orrs	r2, r4
 800cb20:	0011      	movs	r1, r2
 800cb22:	e7dc      	b.n	800cade <__b2d+0x4e>
 800cb24:	3ff00000 	.word	0x3ff00000

0800cb28 <__d2b>:
 800cb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	0014      	movs	r4, r2
 800cb2e:	001d      	movs	r5, r3
 800cb30:	9f08      	ldr	r7, [sp, #32]
 800cb32:	f7ff fc5b 	bl	800c3ec <_Balloc>
 800cb36:	1e06      	subs	r6, r0, #0
 800cb38:	d105      	bne.n	800cb46 <__d2b+0x1e>
 800cb3a:	0032      	movs	r2, r6
 800cb3c:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <__d2b+0xa8>)
 800cb3e:	4825      	ldr	r0, [pc, #148]	; (800cbd4 <__d2b+0xac>)
 800cb40:	4925      	ldr	r1, [pc, #148]	; (800cbd8 <__d2b+0xb0>)
 800cb42:	f002 ff17 	bl	800f974 <__assert_func>
 800cb46:	032b      	lsls	r3, r5, #12
 800cb48:	006d      	lsls	r5, r5, #1
 800cb4a:	0b1b      	lsrs	r3, r3, #12
 800cb4c:	0d6d      	lsrs	r5, r5, #21
 800cb4e:	d125      	bne.n	800cb9c <__d2b+0x74>
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	d028      	beq.n	800cba8 <__d2b+0x80>
 800cb56:	4668      	mov	r0, sp
 800cb58:	9400      	str	r4, [sp, #0]
 800cb5a:	f7ff fd23 	bl	800c5a4 <__lo0bits>
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	9900      	ldr	r1, [sp, #0]
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d01e      	beq.n	800cba4 <__d2b+0x7c>
 800cb66:	2220      	movs	r2, #32
 800cb68:	001c      	movs	r4, r3
 800cb6a:	1a12      	subs	r2, r2, r0
 800cb6c:	4094      	lsls	r4, r2
 800cb6e:	0022      	movs	r2, r4
 800cb70:	40c3      	lsrs	r3, r0
 800cb72:	430a      	orrs	r2, r1
 800cb74:	6172      	str	r2, [r6, #20]
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	9c01      	ldr	r4, [sp, #4]
 800cb7a:	61b4      	str	r4, [r6, #24]
 800cb7c:	1e63      	subs	r3, r4, #1
 800cb7e:	419c      	sbcs	r4, r3
 800cb80:	3401      	adds	r4, #1
 800cb82:	6134      	str	r4, [r6, #16]
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	d017      	beq.n	800cbb8 <__d2b+0x90>
 800cb88:	2435      	movs	r4, #53	; 0x35
 800cb8a:	4b14      	ldr	r3, [pc, #80]	; (800cbdc <__d2b+0xb4>)
 800cb8c:	18ed      	adds	r5, r5, r3
 800cb8e:	182d      	adds	r5, r5, r0
 800cb90:	603d      	str	r5, [r7, #0]
 800cb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb94:	1a24      	subs	r4, r4, r0
 800cb96:	601c      	str	r4, [r3, #0]
 800cb98:	0030      	movs	r0, r6
 800cb9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb9c:	2280      	movs	r2, #128	; 0x80
 800cb9e:	0352      	lsls	r2, r2, #13
 800cba0:	4313      	orrs	r3, r2
 800cba2:	e7d5      	b.n	800cb50 <__d2b+0x28>
 800cba4:	6171      	str	r1, [r6, #20]
 800cba6:	e7e7      	b.n	800cb78 <__d2b+0x50>
 800cba8:	a801      	add	r0, sp, #4
 800cbaa:	f7ff fcfb 	bl	800c5a4 <__lo0bits>
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	2401      	movs	r4, #1
 800cbb2:	6173      	str	r3, [r6, #20]
 800cbb4:	3020      	adds	r0, #32
 800cbb6:	e7e4      	b.n	800cb82 <__d2b+0x5a>
 800cbb8:	4b09      	ldr	r3, [pc, #36]	; (800cbe0 <__d2b+0xb8>)
 800cbba:	18c0      	adds	r0, r0, r3
 800cbbc:	4b09      	ldr	r3, [pc, #36]	; (800cbe4 <__d2b+0xbc>)
 800cbbe:	6038      	str	r0, [r7, #0]
 800cbc0:	18e3      	adds	r3, r4, r3
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	18f3      	adds	r3, r6, r3
 800cbc6:	6958      	ldr	r0, [r3, #20]
 800cbc8:	f7ff fcd2 	bl	800c570 <__hi0bits>
 800cbcc:	0164      	lsls	r4, r4, #5
 800cbce:	e7e0      	b.n	800cb92 <__d2b+0x6a>
 800cbd0:	08014101 	.word	0x08014101
 800cbd4:	08014172 	.word	0x08014172
 800cbd8:	0000030f 	.word	0x0000030f
 800cbdc:	fffffbcd 	.word	0xfffffbcd
 800cbe0:	fffffbce 	.word	0xfffffbce
 800cbe4:	3fffffff 	.word	0x3fffffff

0800cbe8 <__ratio>:
 800cbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbea:	b087      	sub	sp, #28
 800cbec:	000f      	movs	r7, r1
 800cbee:	a904      	add	r1, sp, #16
 800cbf0:	0006      	movs	r6, r0
 800cbf2:	f7ff ff4d 	bl	800ca90 <__b2d>
 800cbf6:	9000      	str	r0, [sp, #0]
 800cbf8:	9101      	str	r1, [sp, #4]
 800cbfa:	9c00      	ldr	r4, [sp, #0]
 800cbfc:	9d01      	ldr	r5, [sp, #4]
 800cbfe:	0038      	movs	r0, r7
 800cc00:	a905      	add	r1, sp, #20
 800cc02:	f7ff ff45 	bl	800ca90 <__b2d>
 800cc06:	9002      	str	r0, [sp, #8]
 800cc08:	9103      	str	r1, [sp, #12]
 800cc0a:	9a02      	ldr	r2, [sp, #8]
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	6930      	ldr	r0, [r6, #16]
 800cc10:	6939      	ldr	r1, [r7, #16]
 800cc12:	9e04      	ldr	r6, [sp, #16]
 800cc14:	1a40      	subs	r0, r0, r1
 800cc16:	9905      	ldr	r1, [sp, #20]
 800cc18:	0140      	lsls	r0, r0, #5
 800cc1a:	1a71      	subs	r1, r6, r1
 800cc1c:	1841      	adds	r1, r0, r1
 800cc1e:	0508      	lsls	r0, r1, #20
 800cc20:	2900      	cmp	r1, #0
 800cc22:	dd07      	ble.n	800cc34 <__ratio+0x4c>
 800cc24:	9901      	ldr	r1, [sp, #4]
 800cc26:	1845      	adds	r5, r0, r1
 800cc28:	0020      	movs	r0, r4
 800cc2a:	0029      	movs	r1, r5
 800cc2c:	f7f4 f924 	bl	8000e78 <__aeabi_ddiv>
 800cc30:	b007      	add	sp, #28
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	9903      	ldr	r1, [sp, #12]
 800cc36:	1a0b      	subs	r3, r1, r0
 800cc38:	e7f6      	b.n	800cc28 <__ratio+0x40>

0800cc3a <__copybits>:
 800cc3a:	b570      	push	{r4, r5, r6, lr}
 800cc3c:	0014      	movs	r4, r2
 800cc3e:	0005      	movs	r5, r0
 800cc40:	3901      	subs	r1, #1
 800cc42:	6913      	ldr	r3, [r2, #16]
 800cc44:	1149      	asrs	r1, r1, #5
 800cc46:	3101      	adds	r1, #1
 800cc48:	0089      	lsls	r1, r1, #2
 800cc4a:	3414      	adds	r4, #20
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	1841      	adds	r1, r0, r1
 800cc50:	18e3      	adds	r3, r4, r3
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	d80d      	bhi.n	800cc72 <__copybits+0x38>
 800cc56:	0014      	movs	r4, r2
 800cc58:	3411      	adds	r4, #17
 800cc5a:	2500      	movs	r5, #0
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	d803      	bhi.n	800cc68 <__copybits+0x2e>
 800cc60:	1a9b      	subs	r3, r3, r2
 800cc62:	3b11      	subs	r3, #17
 800cc64:	089b      	lsrs	r3, r3, #2
 800cc66:	009d      	lsls	r5, r3, #2
 800cc68:	2300      	movs	r3, #0
 800cc6a:	1940      	adds	r0, r0, r5
 800cc6c:	4281      	cmp	r1, r0
 800cc6e:	d803      	bhi.n	800cc78 <__copybits+0x3e>
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
 800cc72:	cc40      	ldmia	r4!, {r6}
 800cc74:	c540      	stmia	r5!, {r6}
 800cc76:	e7ec      	b.n	800cc52 <__copybits+0x18>
 800cc78:	c008      	stmia	r0!, {r3}
 800cc7a:	e7f7      	b.n	800cc6c <__copybits+0x32>

0800cc7c <__any_on>:
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	6900      	ldr	r0, [r0, #16]
 800cc80:	b510      	push	{r4, lr}
 800cc82:	3214      	adds	r2, #20
 800cc84:	114b      	asrs	r3, r1, #5
 800cc86:	4298      	cmp	r0, r3
 800cc88:	db13      	blt.n	800ccb2 <__any_on+0x36>
 800cc8a:	dd0c      	ble.n	800cca6 <__any_on+0x2a>
 800cc8c:	241f      	movs	r4, #31
 800cc8e:	0008      	movs	r0, r1
 800cc90:	4020      	ands	r0, r4
 800cc92:	4221      	tst	r1, r4
 800cc94:	d007      	beq.n	800cca6 <__any_on+0x2a>
 800cc96:	0099      	lsls	r1, r3, #2
 800cc98:	588c      	ldr	r4, [r1, r2]
 800cc9a:	0021      	movs	r1, r4
 800cc9c:	40c1      	lsrs	r1, r0
 800cc9e:	4081      	lsls	r1, r0
 800cca0:	2001      	movs	r0, #1
 800cca2:	428c      	cmp	r4, r1
 800cca4:	d104      	bne.n	800ccb0 <__any_on+0x34>
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	18d3      	adds	r3, r2, r3
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d803      	bhi.n	800ccb6 <__any_on+0x3a>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	0003      	movs	r3, r0
 800ccb4:	e7f7      	b.n	800cca6 <__any_on+0x2a>
 800ccb6:	3b04      	subs	r3, #4
 800ccb8:	6819      	ldr	r1, [r3, #0]
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	d0f5      	beq.n	800ccaa <__any_on+0x2e>
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	e7f6      	b.n	800ccb0 <__any_on+0x34>

0800ccc2 <__ascii_wctomb>:
 800ccc2:	0003      	movs	r3, r0
 800ccc4:	1e08      	subs	r0, r1, #0
 800ccc6:	d005      	beq.n	800ccd4 <__ascii_wctomb+0x12>
 800ccc8:	2aff      	cmp	r2, #255	; 0xff
 800ccca:	d904      	bls.n	800ccd6 <__ascii_wctomb+0x14>
 800cccc:	228a      	movs	r2, #138	; 0x8a
 800ccce:	2001      	movs	r0, #1
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	4240      	negs	r0, r0
 800ccd4:	4770      	bx	lr
 800ccd6:	2001      	movs	r0, #1
 800ccd8:	700a      	strb	r2, [r1, #0]
 800ccda:	e7fb      	b.n	800ccd4 <__ascii_wctomb+0x12>

0800ccdc <_svfprintf_r>:
 800ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccde:	b0d9      	sub	sp, #356	; 0x164
 800cce0:	001c      	movs	r4, r3
 800cce2:	910b      	str	r1, [sp, #44]	; 0x2c
 800cce4:	9208      	str	r2, [sp, #32]
 800cce6:	900a      	str	r0, [sp, #40]	; 0x28
 800cce8:	f002 fdae 	bl	800f848 <_localeconv_r>
 800ccec:	6803      	ldr	r3, [r0, #0]
 800ccee:	0018      	movs	r0, r3
 800ccf0:	931c      	str	r3, [sp, #112]	; 0x70
 800ccf2:	f7f3 fa07 	bl	8000104 <strlen>
 800ccf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccf8:	9016      	str	r0, [sp, #88]	; 0x58
 800ccfa:	899b      	ldrh	r3, [r3, #12]
 800ccfc:	061b      	lsls	r3, r3, #24
 800ccfe:	d517      	bpl.n	800cd30 <_svfprintf_r+0x54>
 800cd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d113      	bne.n	800cd30 <_svfprintf_r+0x54>
 800cd08:	2140      	movs	r1, #64	; 0x40
 800cd0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd0c:	f7fd fb6e 	bl	800a3ec <_malloc_r>
 800cd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd12:	6018      	str	r0, [r3, #0]
 800cd14:	6118      	str	r0, [r3, #16]
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d107      	bne.n	800cd2a <_svfprintf_r+0x4e>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	3b0d      	subs	r3, #13
 800cd22:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd26:	b059      	add	sp, #356	; 0x164
 800cd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd2e:	6153      	str	r3, [r2, #20]
 800cd30:	2300      	movs	r3, #0
 800cd32:	2200      	movs	r2, #0
 800cd34:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd36:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd38:	930e      	str	r3, [sp, #56]	; 0x38
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9214      	str	r2, [sp, #80]	; 0x50
 800cd3e:	9315      	str	r3, [sp, #84]	; 0x54
 800cd40:	2300      	movs	r3, #0
 800cd42:	af2f      	add	r7, sp, #188	; 0xbc
 800cd44:	972c      	str	r7, [sp, #176]	; 0xb0
 800cd46:	931f      	str	r3, [sp, #124]	; 0x7c
 800cd48:	931e      	str	r3, [sp, #120]	; 0x78
 800cd4a:	9312      	str	r3, [sp, #72]	; 0x48
 800cd4c:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd4e:	931d      	str	r3, [sp, #116]	; 0x74
 800cd50:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd52:	9d08      	ldr	r5, [sp, #32]
 800cd54:	782b      	ldrb	r3, [r5, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d002      	beq.n	800cd60 <_svfprintf_r+0x84>
 800cd5a:	2b25      	cmp	r3, #37	; 0x25
 800cd5c:	d000      	beq.n	800cd60 <_svfprintf_r+0x84>
 800cd5e:	e091      	b.n	800ce84 <_svfprintf_r+0x1a8>
 800cd60:	9b08      	ldr	r3, [sp, #32]
 800cd62:	1aee      	subs	r6, r5, r3
 800cd64:	429d      	cmp	r5, r3
 800cd66:	d016      	beq.n	800cd96 <_svfprintf_r+0xba>
 800cd68:	603b      	str	r3, [r7, #0]
 800cd6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cd6c:	607e      	str	r6, [r7, #4]
 800cd6e:	199b      	adds	r3, r3, r6
 800cd70:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd74:	3708      	adds	r7, #8
 800cd76:	3301      	adds	r3, #1
 800cd78:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd7a:	2b07      	cmp	r3, #7
 800cd7c:	dd08      	ble.n	800cd90 <_svfprintf_r+0xb4>
 800cd7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd82:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd84:	f004 f8c0 	bl	8010f08 <__ssprint_r>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d000      	beq.n	800cd8e <_svfprintf_r+0xb2>
 800cd8c:	e1cf      	b.n	800d12e <_svfprintf_r+0x452>
 800cd8e:	af2f      	add	r7, sp, #188	; 0xbc
 800cd90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd92:	199b      	adds	r3, r3, r6
 800cd94:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd96:	782b      	ldrb	r3, [r5, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d101      	bne.n	800cda0 <_svfprintf_r+0xc4>
 800cd9c:	f001 f99e 	bl	800e0dc <_svfprintf_r+0x1400>
 800cda0:	221b      	movs	r2, #27
 800cda2:	2300      	movs	r3, #0
 800cda4:	a91e      	add	r1, sp, #120	; 0x78
 800cda6:	1852      	adds	r2, r2, r1
 800cda8:	7013      	strb	r3, [r2, #0]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	001e      	movs	r6, r3
 800cdae:	4252      	negs	r2, r2
 800cdb0:	3501      	adds	r5, #1
 800cdb2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdb4:	9318      	str	r3, [sp, #96]	; 0x60
 800cdb6:	1c6b      	adds	r3, r5, #1
 800cdb8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdba:	782b      	ldrb	r3, [r5, #0]
 800cdbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cdc0:	3820      	subs	r0, #32
 800cdc2:	285a      	cmp	r0, #90	; 0x5a
 800cdc4:	d901      	bls.n	800cdca <_svfprintf_r+0xee>
 800cdc6:	f000 fe20 	bl	800da0a <_svfprintf_r+0xd2e>
 800cdca:	f7f3 f9ad 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cdce:	0078      	.short	0x0078
 800cdd0:	061e061e 	.word	0x061e061e
 800cdd4:	061e0082 	.word	0x061e0082
 800cdd8:	061e061e 	.word	0x061e061e
 800cddc:	061e005d 	.word	0x061e005d
 800cde0:	0084061e 	.word	0x0084061e
 800cde4:	061e008c 	.word	0x061e008c
 800cde8:	0091008a 	.word	0x0091008a
 800cdec:	00b2061e 	.word	0x00b2061e
 800cdf0:	00b400b4 	.word	0x00b400b4
 800cdf4:	00b400b4 	.word	0x00b400b4
 800cdf8:	00b400b4 	.word	0x00b400b4
 800cdfc:	00b400b4 	.word	0x00b400b4
 800ce00:	061e00b4 	.word	0x061e00b4
 800ce04:	061e061e 	.word	0x061e061e
 800ce08:	061e061e 	.word	0x061e061e
 800ce0c:	061e061e 	.word	0x061e061e
 800ce10:	061e013b 	.word	0x061e013b
 800ce14:	00f400e0 	.word	0x00f400e0
 800ce18:	013b013b 	.word	0x013b013b
 800ce1c:	061e013b 	.word	0x061e013b
 800ce20:	061e061e 	.word	0x061e061e
 800ce24:	00c7061e 	.word	0x00c7061e
 800ce28:	061e061e 	.word	0x061e061e
 800ce2c:	061e04c7 	.word	0x061e04c7
 800ce30:	061e061e 	.word	0x061e061e
 800ce34:	061e050a 	.word	0x061e050a
 800ce38:	061e052a 	.word	0x061e052a
 800ce3c:	055c061e 	.word	0x055c061e
 800ce40:	061e061e 	.word	0x061e061e
 800ce44:	061e061e 	.word	0x061e061e
 800ce48:	061e061e 	.word	0x061e061e
 800ce4c:	061e061e 	.word	0x061e061e
 800ce50:	061e013b 	.word	0x061e013b
 800ce54:	00f600e0 	.word	0x00f600e0
 800ce58:	013b013b 	.word	0x013b013b
 800ce5c:	00c9013b 	.word	0x00c9013b
 800ce60:	00dc00f6 	.word	0x00dc00f6
 800ce64:	00d5061e 	.word	0x00d5061e
 800ce68:	04a7061e 	.word	0x04a7061e
 800ce6c:	04fa04c9 	.word	0x04fa04c9
 800ce70:	061e00dc 	.word	0x061e00dc
 800ce74:	0080050a 	.word	0x0080050a
 800ce78:	061e052c 	.word	0x061e052c
 800ce7c:	057c061e 	.word	0x057c061e
 800ce80:	0080061e 	.word	0x0080061e
 800ce84:	3501      	adds	r5, #1
 800ce86:	e765      	b.n	800cd54 <_svfprintf_r+0x78>
 800ce88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce8a:	f002 fcdd 	bl	800f848 <_localeconv_r>
 800ce8e:	6843      	ldr	r3, [r0, #4]
 800ce90:	0018      	movs	r0, r3
 800ce92:	931d      	str	r3, [sp, #116]	; 0x74
 800ce94:	f7f3 f936 	bl	8000104 <strlen>
 800ce98:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce9c:	f002 fcd4 	bl	800f848 <_localeconv_r>
 800cea0:	6883      	ldr	r3, [r0, #8]
 800cea2:	9312      	str	r3, [sp, #72]	; 0x48
 800cea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d011      	beq.n	800cece <_svfprintf_r+0x1f2>
 800ceaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00e      	beq.n	800cece <_svfprintf_r+0x1f2>
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00b      	beq.n	800cece <_svfprintf_r+0x1f2>
 800ceb6:	2380      	movs	r3, #128	; 0x80
 800ceb8:	00db      	lsls	r3, r3, #3
 800ceba:	431e      	orrs	r6, r3
 800cebc:	e007      	b.n	800cece <_svfprintf_r+0x1f2>
 800cebe:	231b      	movs	r3, #27
 800cec0:	aa1e      	add	r2, sp, #120	; 0x78
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	d101      	bne.n	800cece <_svfprintf_r+0x1f2>
 800ceca:	3220      	adds	r2, #32
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ced0:	e771      	b.n	800cdb6 <_svfprintf_r+0xda>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e7f1      	b.n	800ceba <_svfprintf_r+0x1de>
 800ced6:	cc08      	ldmia	r4!, {r3}
 800ced8:	9318      	str	r3, [sp, #96]	; 0x60
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	daf7      	bge.n	800cece <_svfprintf_r+0x1f2>
 800cede:	425b      	negs	r3, r3
 800cee0:	9318      	str	r3, [sp, #96]	; 0x60
 800cee2:	2304      	movs	r3, #4
 800cee4:	e7e9      	b.n	800ceba <_svfprintf_r+0x1de>
 800cee6:	231b      	movs	r3, #27
 800cee8:	aa1e      	add	r2, sp, #120	; 0x78
 800ceea:	189b      	adds	r3, r3, r2
 800ceec:	222b      	movs	r2, #43	; 0x2b
 800ceee:	e7ed      	b.n	800cecc <_svfprintf_r+0x1f0>
 800cef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cef2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cef4:	7812      	ldrb	r2, [r2, #0]
 800cef6:	3301      	adds	r3, #1
 800cef8:	920f      	str	r2, [sp, #60]	; 0x3c
 800cefa:	2a2a      	cmp	r2, #42	; 0x2a
 800cefc:	d010      	beq.n	800cf20 <_svfprintf_r+0x244>
 800cefe:	2200      	movs	r2, #0
 800cf00:	9209      	str	r2, [sp, #36]	; 0x24
 800cf02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf04:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf06:	3a30      	subs	r2, #48	; 0x30
 800cf08:	2a09      	cmp	r2, #9
 800cf0a:	d900      	bls.n	800cf0e <_svfprintf_r+0x232>
 800cf0c:	e757      	b.n	800cdbe <_svfprintf_r+0xe2>
 800cf0e:	200a      	movs	r0, #10
 800cf10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf12:	4341      	muls	r1, r0
 800cf14:	188a      	adds	r2, r1, r2
 800cf16:	9209      	str	r2, [sp, #36]	; 0x24
 800cf18:	781a      	ldrb	r2, [r3, #0]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	920f      	str	r2, [sp, #60]	; 0x3c
 800cf1e:	e7f0      	b.n	800cf02 <_svfprintf_r+0x226>
 800cf20:	cc04      	ldmia	r4!, {r2}
 800cf22:	9209      	str	r2, [sp, #36]	; 0x24
 800cf24:	2a00      	cmp	r2, #0
 800cf26:	da02      	bge.n	800cf2e <_svfprintf_r+0x252>
 800cf28:	2201      	movs	r2, #1
 800cf2a:	4252      	negs	r2, r2
 800cf2c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf30:	e7cd      	b.n	800cece <_svfprintf_r+0x1f2>
 800cf32:	2380      	movs	r3, #128	; 0x80
 800cf34:	e7c1      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf36:	2200      	movs	r2, #0
 800cf38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf3a:	9218      	str	r2, [sp, #96]	; 0x60
 800cf3c:	210a      	movs	r1, #10
 800cf3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf40:	434a      	muls	r2, r1
 800cf42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf44:	3930      	subs	r1, #48	; 0x30
 800cf46:	188a      	adds	r2, r1, r2
 800cf48:	9218      	str	r2, [sp, #96]	; 0x60
 800cf4a:	001a      	movs	r2, r3
 800cf4c:	7812      	ldrb	r2, [r2, #0]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	920f      	str	r2, [sp, #60]	; 0x3c
 800cf52:	3a30      	subs	r2, #48	; 0x30
 800cf54:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf56:	2a09      	cmp	r2, #9
 800cf58:	d9f0      	bls.n	800cf3c <_svfprintf_r+0x260>
 800cf5a:	e730      	b.n	800cdbe <_svfprintf_r+0xe2>
 800cf5c:	2308      	movs	r3, #8
 800cf5e:	e7ac      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b68      	cmp	r3, #104	; 0x68
 800cf66:	d105      	bne.n	800cf74 <_svfprintf_r+0x298>
 800cf68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf6e:	2380      	movs	r3, #128	; 0x80
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	e7a2      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf74:	2340      	movs	r3, #64	; 0x40
 800cf76:	e7a0      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b6c      	cmp	r3, #108	; 0x6c
 800cf7e:	d104      	bne.n	800cf8a <_svfprintf_r+0x2ae>
 800cf80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf82:	3301      	adds	r3, #1
 800cf84:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf86:	2320      	movs	r3, #32
 800cf88:	e797      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf8a:	2310      	movs	r3, #16
 800cf8c:	e795      	b.n	800ceba <_svfprintf_r+0x1de>
 800cf8e:	0021      	movs	r1, r4
 800cf90:	c904      	ldmia	r1!, {r2}
 800cf92:	ab3f      	add	r3, sp, #252	; 0xfc
 800cf94:	910d      	str	r1, [sp, #52]	; 0x34
 800cf96:	211b      	movs	r1, #27
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	a81e      	add	r0, sp, #120	; 0x78
 800cf9e:	1809      	adds	r1, r1, r0
 800cfa0:	700a      	strb	r2, [r1, #0]
 800cfa2:	920c      	str	r2, [sp, #48]	; 0x30
 800cfa4:	3201      	adds	r2, #1
 800cfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	9308      	str	r3, [sp, #32]
 800cfac:	0015      	movs	r5, r2
 800cfae:	9219      	str	r2, [sp, #100]	; 0x64
 800cfb0:	9210      	str	r2, [sp, #64]	; 0x40
 800cfb2:	9211      	str	r2, [sp, #68]	; 0x44
 800cfb4:	e1f1      	b.n	800d39a <_svfprintf_r+0x6be>
 800cfb6:	2310      	movs	r3, #16
 800cfb8:	431e      	orrs	r6, r3
 800cfba:	06b3      	lsls	r3, r6, #26
 800cfbc:	d531      	bpl.n	800d022 <_svfprintf_r+0x346>
 800cfbe:	2307      	movs	r3, #7
 800cfc0:	3407      	adds	r4, #7
 800cfc2:	439c      	bics	r4, r3
 800cfc4:	0022      	movs	r2, r4
 800cfc6:	ca18      	ldmia	r2!, {r3, r4}
 800cfc8:	9306      	str	r3, [sp, #24]
 800cfca:	9407      	str	r4, [sp, #28]
 800cfcc:	920d      	str	r2, [sp, #52]	; 0x34
 800cfce:	9a07      	ldr	r2, [sp, #28]
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	2a00      	cmp	r2, #0
 800cfd4:	da0b      	bge.n	800cfee <_svfprintf_r+0x312>
 800cfd6:	9c06      	ldr	r4, [sp, #24]
 800cfd8:	9d07      	ldr	r5, [sp, #28]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4261      	negs	r1, r4
 800cfde:	41aa      	sbcs	r2, r5
 800cfe0:	9106      	str	r1, [sp, #24]
 800cfe2:	9207      	str	r2, [sp, #28]
 800cfe4:	221b      	movs	r2, #27
 800cfe6:	a91e      	add	r1, sp, #120	; 0x78
 800cfe8:	1852      	adds	r2, r2, r1
 800cfea:	212d      	movs	r1, #45	; 0x2d
 800cfec:	7011      	strb	r1, [r2, #0]
 800cfee:	9907      	ldr	r1, [sp, #28]
 800cff0:	9a06      	ldr	r2, [sp, #24]
 800cff2:	430a      	orrs	r2, r1
 800cff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cff6:	3101      	adds	r1, #1
 800cff8:	d101      	bne.n	800cffe <_svfprintf_r+0x322>
 800cffa:	f001 f87b 	bl	800e0f4 <_svfprintf_r+0x1418>
 800cffe:	2180      	movs	r1, #128	; 0x80
 800d000:	0034      	movs	r4, r6
 800d002:	438c      	bics	r4, r1
 800d004:	2a00      	cmp	r2, #0
 800d006:	d001      	beq.n	800d00c <_svfprintf_r+0x330>
 800d008:	f001 f879 	bl	800e0fe <_svfprintf_r+0x1422>
 800d00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d00e:	2a00      	cmp	r2, #0
 800d010:	d101      	bne.n	800d016 <_svfprintf_r+0x33a>
 800d012:	f000 fcef 	bl	800d9f4 <_svfprintf_r+0xd18>
 800d016:	2b01      	cmp	r3, #1
 800d018:	d001      	beq.n	800d01e <_svfprintf_r+0x342>
 800d01a:	f001 f874 	bl	800e106 <_svfprintf_r+0x142a>
 800d01e:	f000 fc79 	bl	800d914 <_svfprintf_r+0xc38>
 800d022:	0022      	movs	r2, r4
 800d024:	ca08      	ldmia	r2!, {r3}
 800d026:	920d      	str	r2, [sp, #52]	; 0x34
 800d028:	06f2      	lsls	r2, r6, #27
 800d02a:	d503      	bpl.n	800d034 <_svfprintf_r+0x358>
 800d02c:	9306      	str	r3, [sp, #24]
 800d02e:	17db      	asrs	r3, r3, #31
 800d030:	9307      	str	r3, [sp, #28]
 800d032:	e7cc      	b.n	800cfce <_svfprintf_r+0x2f2>
 800d034:	0672      	lsls	r2, r6, #25
 800d036:	d501      	bpl.n	800d03c <_svfprintf_r+0x360>
 800d038:	b21b      	sxth	r3, r3
 800d03a:	e7f7      	b.n	800d02c <_svfprintf_r+0x350>
 800d03c:	05b2      	lsls	r2, r6, #22
 800d03e:	d5f5      	bpl.n	800d02c <_svfprintf_r+0x350>
 800d040:	b25b      	sxtb	r3, r3
 800d042:	e7f3      	b.n	800d02c <_svfprintf_r+0x350>
 800d044:	2307      	movs	r3, #7
 800d046:	3407      	adds	r4, #7
 800d048:	439c      	bics	r4, r3
 800d04a:	0022      	movs	r2, r4
 800d04c:	ca18      	ldmia	r2!, {r3, r4}
 800d04e:	920d      	str	r2, [sp, #52]	; 0x34
 800d050:	2201      	movs	r2, #1
 800d052:	9314      	str	r3, [sp, #80]	; 0x50
 800d054:	9415      	str	r4, [sp, #84]	; 0x54
 800d056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d058:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d05a:	005c      	lsls	r4, r3, #1
 800d05c:	0864      	lsrs	r4, r4, #1
 800d05e:	0028      	movs	r0, r5
 800d060:	0021      	movs	r1, r4
 800d062:	4b3e      	ldr	r3, [pc, #248]	; (800d15c <_svfprintf_r+0x480>)
 800d064:	4252      	negs	r2, r2
 800d066:	f7f5 f945 	bl	80022f4 <__aeabi_dcmpun>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d126      	bne.n	800d0bc <_svfprintf_r+0x3e0>
 800d06e:	2201      	movs	r2, #1
 800d070:	0028      	movs	r0, r5
 800d072:	0021      	movs	r1, r4
 800d074:	4b39      	ldr	r3, [pc, #228]	; (800d15c <_svfprintf_r+0x480>)
 800d076:	4252      	negs	r2, r2
 800d078:	f7f3 f9f6 	bl	8000468 <__aeabi_dcmple>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d11d      	bne.n	800d0bc <_svfprintf_r+0x3e0>
 800d080:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d082:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d084:	2200      	movs	r2, #0
 800d086:	2300      	movs	r3, #0
 800d088:	f7f3 f9e4 	bl	8000454 <__aeabi_dcmplt>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d004      	beq.n	800d09a <_svfprintf_r+0x3be>
 800d090:	231b      	movs	r3, #27
 800d092:	aa1e      	add	r2, sp, #120	; 0x78
 800d094:	189b      	adds	r3, r3, r2
 800d096:	222d      	movs	r2, #45	; 0x2d
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	4b31      	ldr	r3, [pc, #196]	; (800d160 <_svfprintf_r+0x484>)
 800d09c:	9308      	str	r3, [sp, #32]
 800d09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0a0:	2b47      	cmp	r3, #71	; 0x47
 800d0a2:	dd01      	ble.n	800d0a8 <_svfprintf_r+0x3cc>
 800d0a4:	4b2f      	ldr	r3, [pc, #188]	; (800d164 <_svfprintf_r+0x488>)
 800d0a6:	9308      	str	r3, [sp, #32]
 800d0a8:	2380      	movs	r3, #128	; 0x80
 800d0aa:	439e      	bics	r6, r3
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d0b0:	3303      	adds	r3, #3
 800d0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9319      	str	r3, [sp, #100]	; 0x64
 800d0b8:	f000 fc78 	bl	800d9ac <_svfprintf_r+0xcd0>
 800d0bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0c0:	0010      	movs	r0, r2
 800d0c2:	0019      	movs	r1, r3
 800d0c4:	f7f5 f916 	bl	80022f4 <__aeabi_dcmpun>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d00e      	beq.n	800d0ea <_svfprintf_r+0x40e>
 800d0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da04      	bge.n	800d0dc <_svfprintf_r+0x400>
 800d0d2:	231b      	movs	r3, #27
 800d0d4:	aa1e      	add	r2, sp, #120	; 0x78
 800d0d6:	189b      	adds	r3, r3, r2
 800d0d8:	222d      	movs	r2, #45	; 0x2d
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	4b22      	ldr	r3, [pc, #136]	; (800d168 <_svfprintf_r+0x48c>)
 800d0de:	9308      	str	r3, [sp, #32]
 800d0e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0e2:	2b47      	cmp	r3, #71	; 0x47
 800d0e4:	dde0      	ble.n	800d0a8 <_svfprintf_r+0x3cc>
 800d0e6:	4b21      	ldr	r3, [pc, #132]	; (800d16c <_svfprintf_r+0x490>)
 800d0e8:	e7dd      	b.n	800d0a6 <_svfprintf_r+0x3ca>
 800d0ea:	2320      	movs	r3, #32
 800d0ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0ee:	439a      	bics	r2, r3
 800d0f0:	9210      	str	r2, [sp, #64]	; 0x40
 800d0f2:	2a41      	cmp	r2, #65	; 0x41
 800d0f4:	d123      	bne.n	800d13e <_svfprintf_r+0x462>
 800d0f6:	2230      	movs	r2, #48	; 0x30
 800d0f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0fa:	ab25      	add	r3, sp, #148	; 0x94
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	3248      	adds	r2, #72	; 0x48
 800d100:	2961      	cmp	r1, #97	; 0x61
 800d102:	d000      	beq.n	800d106 <_svfprintf_r+0x42a>
 800d104:	3a20      	subs	r2, #32
 800d106:	705a      	strb	r2, [r3, #1]
 800d108:	2302      	movs	r3, #2
 800d10a:	431e      	orrs	r6, r3
 800d10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10e:	2b63      	cmp	r3, #99	; 0x63
 800d110:	dd2e      	ble.n	800d170 <_svfprintf_r+0x494>
 800d112:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d114:	1c59      	adds	r1, r3, #1
 800d116:	f7fd f969 	bl	800a3ec <_malloc_r>
 800d11a:	9008      	str	r0, [sp, #32]
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d000      	beq.n	800d122 <_svfprintf_r+0x446>
 800d120:	e216      	b.n	800d550 <_svfprintf_r+0x874>
 800d122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d124:	899a      	ldrh	r2, [r3, #12]
 800d126:	2340      	movs	r3, #64	; 0x40
 800d128:	4313      	orrs	r3, r2
 800d12a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d12c:	8193      	strh	r3, [r2, #12]
 800d12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d130:	899b      	ldrh	r3, [r3, #12]
 800d132:	065b      	lsls	r3, r3, #25
 800d134:	d400      	bmi.n	800d138 <_svfprintf_r+0x45c>
 800d136:	e5f5      	b.n	800cd24 <_svfprintf_r+0x48>
 800d138:	2301      	movs	r3, #1
 800d13a:	425b      	negs	r3, r3
 800d13c:	e5f1      	b.n	800cd22 <_svfprintf_r+0x46>
 800d13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d140:	900c      	str	r0, [sp, #48]	; 0x30
 800d142:	3301      	adds	r3, #1
 800d144:	d100      	bne.n	800d148 <_svfprintf_r+0x46c>
 800d146:	e206      	b.n	800d556 <_svfprintf_r+0x87a>
 800d148:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d14a:	2b47      	cmp	r3, #71	; 0x47
 800d14c:	d114      	bne.n	800d178 <_svfprintf_r+0x49c>
 800d14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d111      	bne.n	800d178 <_svfprintf_r+0x49c>
 800d154:	3301      	adds	r3, #1
 800d156:	9309      	str	r3, [sp, #36]	; 0x24
 800d158:	e00e      	b.n	800d178 <_svfprintf_r+0x49c>
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	7fefffff 	.word	0x7fefffff
 800d160:	080142cc 	.word	0x080142cc
 800d164:	080142d0 	.word	0x080142d0
 800d168:	080142d4 	.word	0x080142d4
 800d16c:	080142d8 	.word	0x080142d8
 800d170:	2300      	movs	r3, #0
 800d172:	930c      	str	r3, [sp, #48]	; 0x30
 800d174:	ab3f      	add	r3, sp, #252	; 0xfc
 800d176:	9308      	str	r3, [sp, #32]
 800d178:	2380      	movs	r3, #128	; 0x80
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	4333      	orrs	r3, r6
 800d17e:	931a      	str	r3, [sp, #104]	; 0x68
 800d180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d182:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d184:	2b00      	cmp	r3, #0
 800d186:	db00      	blt.n	800d18a <_svfprintf_r+0x4ae>
 800d188:	e1e7      	b.n	800d55a <_svfprintf_r+0x87e>
 800d18a:	2280      	movs	r2, #128	; 0x80
 800d18c:	0612      	lsls	r2, r2, #24
 800d18e:	4694      	mov	ip, r2
 800d190:	4463      	add	r3, ip
 800d192:	930e      	str	r3, [sp, #56]	; 0x38
 800d194:	232d      	movs	r3, #45	; 0x2d
 800d196:	9322      	str	r3, [sp, #136]	; 0x88
 800d198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d19a:	2b41      	cmp	r3, #65	; 0x41
 800d19c:	d000      	beq.n	800d1a0 <_svfprintf_r+0x4c4>
 800d19e:	e1f5      	b.n	800d58c <_svfprintf_r+0x8b0>
 800d1a0:	0028      	movs	r0, r5
 800d1a2:	aa26      	add	r2, sp, #152	; 0x98
 800d1a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d1a6:	f002 fb73 	bl	800f890 <frexp>
 800d1aa:	23ff      	movs	r3, #255	; 0xff
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	059b      	lsls	r3, r3, #22
 800d1b0:	f7f4 fa5c 	bl	800166c <__aeabi_dmul>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	0004      	movs	r4, r0
 800d1ba:	000d      	movs	r5, r1
 800d1bc:	f7f3 f944 	bl	8000448 <__aeabi_dcmpeq>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d001      	beq.n	800d1c8 <_svfprintf_r+0x4ec>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	9326      	str	r3, [sp, #152]	; 0x98
 800d1c8:	4bda      	ldr	r3, [pc, #872]	; (800d534 <_svfprintf_r+0x858>)
 800d1ca:	9319      	str	r3, [sp, #100]	; 0x64
 800d1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1ce:	2b61      	cmp	r3, #97	; 0x61
 800d1d0:	d001      	beq.n	800d1d6 <_svfprintf_r+0x4fa>
 800d1d2:	4bd9      	ldr	r3, [pc, #868]	; (800d538 <_svfprintf_r+0x85c>)
 800d1d4:	9319      	str	r3, [sp, #100]	; 0x64
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	930e      	str	r3, [sp, #56]	; 0x38
 800d1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	9311      	str	r3, [sp, #68]	; 0x44
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4bd6      	ldr	r3, [pc, #856]	; (800d53c <_svfprintf_r+0x860>)
 800d1e4:	0020      	movs	r0, r4
 800d1e6:	0029      	movs	r1, r5
 800d1e8:	f7f4 fa40 	bl	800166c <__aeabi_dmul>
 800d1ec:	000d      	movs	r5, r1
 800d1ee:	0004      	movs	r4, r0
 800d1f0:	f7f5 f89e 	bl	8002330 <__aeabi_d2iz>
 800d1f4:	9021      	str	r0, [sp, #132]	; 0x84
 800d1f6:	f7f5 f8d1 	bl	800239c <__aeabi_i2d>
 800d1fa:	0002      	movs	r2, r0
 800d1fc:	000b      	movs	r3, r1
 800d1fe:	0020      	movs	r0, r4
 800d200:	0029      	movs	r1, r5
 800d202:	f7f4 fcf5 	bl	8001bf0 <__aeabi_dsub>
 800d206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d208:	000d      	movs	r5, r1
 800d20a:	001a      	movs	r2, r3
 800d20c:	3201      	adds	r2, #1
 800d20e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d210:	920e      	str	r2, [sp, #56]	; 0x38
 800d212:	9223      	str	r2, [sp, #140]	; 0x8c
 800d214:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d216:	0004      	movs	r4, r0
 800d218:	5c52      	ldrb	r2, [r2, r1]
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d21e:	9320      	str	r3, [sp, #128]	; 0x80
 800d220:	3301      	adds	r3, #1
 800d222:	d00a      	beq.n	800d23a <_svfprintf_r+0x55e>
 800d224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d226:	2200      	movs	r2, #0
 800d228:	3b01      	subs	r3, #1
 800d22a:	9311      	str	r3, [sp, #68]	; 0x44
 800d22c:	0020      	movs	r0, r4
 800d22e:	2300      	movs	r3, #0
 800d230:	0029      	movs	r1, r5
 800d232:	f7f3 f909 	bl	8000448 <__aeabi_dcmpeq>
 800d236:	2800      	cmp	r0, #0
 800d238:	d0d2      	beq.n	800d1e0 <_svfprintf_r+0x504>
 800d23a:	2200      	movs	r2, #0
 800d23c:	0020      	movs	r0, r4
 800d23e:	0029      	movs	r1, r5
 800d240:	4bbf      	ldr	r3, [pc, #764]	; (800d540 <_svfprintf_r+0x864>)
 800d242:	f7f3 f91b 	bl	800047c <__aeabi_dcmpgt>
 800d246:	2800      	cmp	r0, #0
 800d248:	d10c      	bne.n	800d264 <_svfprintf_r+0x588>
 800d24a:	2200      	movs	r2, #0
 800d24c:	0020      	movs	r0, r4
 800d24e:	0029      	movs	r1, r5
 800d250:	4bbb      	ldr	r3, [pc, #748]	; (800d540 <_svfprintf_r+0x864>)
 800d252:	f7f3 f8f9 	bl	8000448 <__aeabi_dcmpeq>
 800d256:	2800      	cmp	r0, #0
 800d258:	d100      	bne.n	800d25c <_svfprintf_r+0x580>
 800d25a:	e191      	b.n	800d580 <_svfprintf_r+0x8a4>
 800d25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d25e:	07db      	lsls	r3, r3, #31
 800d260:	d400      	bmi.n	800d264 <_svfprintf_r+0x588>
 800d262:	e18d      	b.n	800d580 <_svfprintf_r+0x8a4>
 800d264:	2030      	movs	r0, #48	; 0x30
 800d266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d268:	932a      	str	r3, [sp, #168]	; 0xa8
 800d26a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d26c:	7bdb      	ldrb	r3, [r3, #15]
 800d26e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d270:	3a01      	subs	r2, #1
 800d272:	922a      	str	r2, [sp, #168]	; 0xa8
 800d274:	7811      	ldrb	r1, [r2, #0]
 800d276:	4299      	cmp	r1, r3
 800d278:	d100      	bne.n	800d27c <_svfprintf_r+0x5a0>
 800d27a:	e171      	b.n	800d560 <_svfprintf_r+0x884>
 800d27c:	1c4b      	adds	r3, r1, #1
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2939      	cmp	r1, #57	; 0x39
 800d282:	d101      	bne.n	800d288 <_svfprintf_r+0x5ac>
 800d284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d286:	7a9b      	ldrb	r3, [r3, #10]
 800d288:	7013      	strb	r3, [r2, #0]
 800d28a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d28c:	9a08      	ldr	r2, [sp, #32]
 800d28e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	930e      	str	r3, [sp, #56]	; 0x38
 800d294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d296:	2b47      	cmp	r3, #71	; 0x47
 800d298:	d000      	beq.n	800d29c <_svfprintf_r+0x5c0>
 800d29a:	e1c4      	b.n	800d626 <_svfprintf_r+0x94a>
 800d29c:	1ceb      	adds	r3, r5, #3
 800d29e:	db03      	blt.n	800d2a8 <_svfprintf_r+0x5cc>
 800d2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	db00      	blt.n	800d2a8 <_svfprintf_r+0x5cc>
 800d2a6:	e1e6      	b.n	800d676 <_svfprintf_r+0x99a>
 800d2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2aa:	3b02      	subs	r3, #2
 800d2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2ae:	223c      	movs	r2, #60	; 0x3c
 800d2b0:	466b      	mov	r3, sp
 800d2b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d2b4:	189b      	adds	r3, r3, r2
 800d2b6:	1e6c      	subs	r4, r5, #1
 800d2b8:	3a1c      	subs	r2, #28
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	9426      	str	r4, [sp, #152]	; 0x98
 800d2c0:	4391      	bics	r1, r2
 800d2c2:	2941      	cmp	r1, #65	; 0x41
 800d2c4:	d102      	bne.n	800d2cc <_svfprintf_r+0x5f0>
 800d2c6:	330f      	adds	r3, #15
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	a928      	add	r1, sp, #160	; 0xa0
 800d2ce:	700b      	strb	r3, [r1, #0]
 800d2d0:	232b      	movs	r3, #43	; 0x2b
 800d2d2:	2c00      	cmp	r4, #0
 800d2d4:	da02      	bge.n	800d2dc <_svfprintf_r+0x600>
 800d2d6:	2401      	movs	r4, #1
 800d2d8:	3302      	adds	r3, #2
 800d2da:	1b64      	subs	r4, r4, r5
 800d2dc:	704b      	strb	r3, [r1, #1]
 800d2de:	2c09      	cmp	r4, #9
 800d2e0:	dc00      	bgt.n	800d2e4 <_svfprintf_r+0x608>
 800d2e2:	e1ba      	b.n	800d65a <_svfprintf_r+0x97e>
 800d2e4:	2337      	movs	r3, #55	; 0x37
 800d2e6:	250a      	movs	r5, #10
 800d2e8:	aa1e      	add	r2, sp, #120	; 0x78
 800d2ea:	189b      	adds	r3, r3, r2
 800d2ec:	9310      	str	r3, [sp, #64]	; 0x40
 800d2ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2f0:	0020      	movs	r0, r4
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f4:	0029      	movs	r1, r5
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	9310      	str	r3, [sp, #64]	; 0x40
 800d2fa:	f7f3 f88f 	bl	800041c <__aeabi_idivmod>
 800d2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d300:	3130      	adds	r1, #48	; 0x30
 800d302:	7019      	strb	r1, [r3, #0]
 800d304:	0020      	movs	r0, r4
 800d306:	0029      	movs	r1, r5
 800d308:	9411      	str	r4, [sp, #68]	; 0x44
 800d30a:	f7f2 ffa1 	bl	8000250 <__divsi3>
 800d30e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d310:	0004      	movs	r4, r0
 800d312:	2b63      	cmp	r3, #99	; 0x63
 800d314:	dceb      	bgt.n	800d2ee <_svfprintf_r+0x612>
 800d316:	222a      	movs	r2, #42	; 0x2a
 800d318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31a:	a81e      	add	r0, sp, #120	; 0x78
 800d31c:	1e99      	subs	r1, r3, #2
 800d31e:	1812      	adds	r2, r2, r0
 800d320:	2037      	movs	r0, #55	; 0x37
 800d322:	000b      	movs	r3, r1
 800d324:	3430      	adds	r4, #48	; 0x30
 800d326:	700c      	strb	r4, [r1, #0]
 800d328:	ac1e      	add	r4, sp, #120	; 0x78
 800d32a:	1900      	adds	r0, r0, r4
 800d32c:	4283      	cmp	r3, r0
 800d32e:	d200      	bcs.n	800d332 <_svfprintf_r+0x656>
 800d330:	e18e      	b.n	800d650 <_svfprintf_r+0x974>
 800d332:	2300      	movs	r3, #0
 800d334:	4281      	cmp	r1, r0
 800d336:	d804      	bhi.n	800d342 <_svfprintf_r+0x666>
 800d338:	aa1e      	add	r2, sp, #120	; 0x78
 800d33a:	3339      	adds	r3, #57	; 0x39
 800d33c:	189b      	adds	r3, r3, r2
 800d33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d340:	1a9b      	subs	r3, r3, r2
 800d342:	222a      	movs	r2, #42	; 0x2a
 800d344:	a91e      	add	r1, sp, #120	; 0x78
 800d346:	1852      	adds	r2, r2, r1
 800d348:	18d3      	adds	r3, r2, r3
 800d34a:	aa28      	add	r2, sp, #160	; 0xa0
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	931e      	str	r3, [sp, #120]	; 0x78
 800d350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d354:	4694      	mov	ip, r2
 800d356:	4463      	add	r3, ip
 800d358:	9309      	str	r3, [sp, #36]	; 0x24
 800d35a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	dc01      	bgt.n	800d364 <_svfprintf_r+0x688>
 800d360:	07f3      	lsls	r3, r6, #31
 800d362:	d504      	bpl.n	800d36e <_svfprintf_r+0x692>
 800d364:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d368:	4694      	mov	ip, r2
 800d36a:	4463      	add	r3, ip
 800d36c:	9309      	str	r3, [sp, #36]	; 0x24
 800d36e:	2280      	movs	r2, #128	; 0x80
 800d370:	4b74      	ldr	r3, [pc, #464]	; (800d544 <_svfprintf_r+0x868>)
 800d372:	0052      	lsls	r2, r2, #1
 800d374:	4033      	ands	r3, r6
 800d376:	431a      	orrs	r2, r3
 800d378:	2300      	movs	r3, #0
 800d37a:	001d      	movs	r5, r3
 800d37c:	921a      	str	r2, [sp, #104]	; 0x68
 800d37e:	9310      	str	r3, [sp, #64]	; 0x40
 800d380:	9311      	str	r3, [sp, #68]	; 0x44
 800d382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d384:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d386:	9319      	str	r3, [sp, #100]	; 0x64
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d006      	beq.n	800d39a <_svfprintf_r+0x6be>
 800d38c:	231b      	movs	r3, #27
 800d38e:	aa1e      	add	r2, sp, #120	; 0x78
 800d390:	189b      	adds	r3, r3, r2
 800d392:	222d      	movs	r2, #45	; 0x2d
 800d394:	701a      	strb	r2, [r3, #0]
 800d396:	2300      	movs	r3, #0
 800d398:	9319      	str	r3, [sp, #100]	; 0x64
 800d39a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d39e:	931a      	str	r3, [sp, #104]	; 0x68
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	da00      	bge.n	800d3a6 <_svfprintf_r+0x6ca>
 800d3a4:	921a      	str	r2, [sp, #104]	; 0x68
 800d3a6:	231b      	movs	r3, #27
 800d3a8:	aa1e      	add	r2, sp, #120	; 0x78
 800d3aa:	189b      	adds	r3, r3, r2
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	1e5a      	subs	r2, r3, #1
 800d3b0:	4193      	sbcs	r3, r2
 800d3b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3b4:	18d3      	adds	r3, r2, r3
 800d3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b8:	0032      	movs	r2, r6
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	401a      	ands	r2, r3
 800d3be:	9220      	str	r2, [sp, #128]	; 0x80
 800d3c0:	421e      	tst	r6, r3
 800d3c2:	d002      	beq.n	800d3ca <_svfprintf_r+0x6ee>
 800d3c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d3c6:	3302      	adds	r3, #2
 800d3c8:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ca:	2384      	movs	r3, #132	; 0x84
 800d3cc:	0032      	movs	r2, r6
 800d3ce:	401a      	ands	r2, r3
 800d3d0:	9221      	str	r2, [sp, #132]	; 0x84
 800d3d2:	421e      	tst	r6, r3
 800d3d4:	d11f      	bne.n	800d416 <_svfprintf_r+0x73a>
 800d3d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d3d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3da:	1a9c      	subs	r4, r3, r2
 800d3dc:	2c00      	cmp	r4, #0
 800d3de:	dd1a      	ble.n	800d416 <_svfprintf_r+0x73a>
 800d3e0:	0039      	movs	r1, r7
 800d3e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d3e4:	4858      	ldr	r0, [pc, #352]	; (800d548 <_svfprintf_r+0x86c>)
 800d3e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	3108      	adds	r1, #8
 800d3ec:	6038      	str	r0, [r7, #0]
 800d3ee:	2c10      	cmp	r4, #16
 800d3f0:	dd00      	ble.n	800d3f4 <_svfprintf_r+0x718>
 800d3f2:	e31c      	b.n	800da2e <_svfprintf_r+0xd52>
 800d3f4:	607c      	str	r4, [r7, #4]
 800d3f6:	18a4      	adds	r4, r4, r2
 800d3f8:	000f      	movs	r7, r1
 800d3fa:	942e      	str	r4, [sp, #184]	; 0xb8
 800d3fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800d3fe:	2b07      	cmp	r3, #7
 800d400:	dd09      	ble.n	800d416 <_svfprintf_r+0x73a>
 800d402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d404:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d406:	aa2c      	add	r2, sp, #176	; 0xb0
 800d408:	f003 fd7e 	bl	8010f08 <__ssprint_r>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d001      	beq.n	800d414 <_svfprintf_r+0x738>
 800d410:	f000 fe43 	bl	800e09a <_svfprintf_r+0x13be>
 800d414:	af2f      	add	r7, sp, #188	; 0xbc
 800d416:	221b      	movs	r2, #27
 800d418:	a91e      	add	r1, sp, #120	; 0x78
 800d41a:	1852      	adds	r2, r2, r1
 800d41c:	7811      	ldrb	r1, [r2, #0]
 800d41e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d420:	2900      	cmp	r1, #0
 800d422:	d014      	beq.n	800d44e <_svfprintf_r+0x772>
 800d424:	603a      	str	r2, [r7, #0]
 800d426:	2201      	movs	r2, #1
 800d428:	189b      	adds	r3, r3, r2
 800d42a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d42c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	189b      	adds	r3, r3, r2
 800d432:	932d      	str	r3, [sp, #180]	; 0xb4
 800d434:	3708      	adds	r7, #8
 800d436:	2b07      	cmp	r3, #7
 800d438:	dd09      	ble.n	800d44e <_svfprintf_r+0x772>
 800d43a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d43c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d43e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d440:	f003 fd62 	bl	8010f08 <__ssprint_r>
 800d444:	2800      	cmp	r0, #0
 800d446:	d001      	beq.n	800d44c <_svfprintf_r+0x770>
 800d448:	f000 fe27 	bl	800e09a <_svfprintf_r+0x13be>
 800d44c:	af2f      	add	r7, sp, #188	; 0xbc
 800d44e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d450:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d452:	2a00      	cmp	r2, #0
 800d454:	d015      	beq.n	800d482 <_svfprintf_r+0x7a6>
 800d456:	aa25      	add	r2, sp, #148	; 0x94
 800d458:	603a      	str	r2, [r7, #0]
 800d45a:	2202      	movs	r2, #2
 800d45c:	189b      	adds	r3, r3, r2
 800d45e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d460:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	3301      	adds	r3, #1
 800d466:	932d      	str	r3, [sp, #180]	; 0xb4
 800d468:	3708      	adds	r7, #8
 800d46a:	2b07      	cmp	r3, #7
 800d46c:	dd09      	ble.n	800d482 <_svfprintf_r+0x7a6>
 800d46e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d470:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d472:	aa2c      	add	r2, sp, #176	; 0xb0
 800d474:	f003 fd48 	bl	8010f08 <__ssprint_r>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d001      	beq.n	800d480 <_svfprintf_r+0x7a4>
 800d47c:	f000 fe0d 	bl	800e09a <_svfprintf_r+0x13be>
 800d480:	af2f      	add	r7, sp, #188	; 0xbc
 800d482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d484:	2b80      	cmp	r3, #128	; 0x80
 800d486:	d11f      	bne.n	800d4c8 <_svfprintf_r+0x7ec>
 800d488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d48a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d48c:	1a9c      	subs	r4, r3, r2
 800d48e:	2c00      	cmp	r4, #0
 800d490:	dd1a      	ble.n	800d4c8 <_svfprintf_r+0x7ec>
 800d492:	0039      	movs	r1, r7
 800d494:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d496:	482d      	ldr	r0, [pc, #180]	; (800d54c <_svfprintf_r+0x870>)
 800d498:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d49a:	3301      	adds	r3, #1
 800d49c:	3108      	adds	r1, #8
 800d49e:	6038      	str	r0, [r7, #0]
 800d4a0:	2c10      	cmp	r4, #16
 800d4a2:	dd00      	ble.n	800d4a6 <_svfprintf_r+0x7ca>
 800d4a4:	e2d6      	b.n	800da54 <_svfprintf_r+0xd78>
 800d4a6:	607c      	str	r4, [r7, #4]
 800d4a8:	18a4      	adds	r4, r4, r2
 800d4aa:	000f      	movs	r7, r1
 800d4ac:	942e      	str	r4, [sp, #184]	; 0xb8
 800d4ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800d4b0:	2b07      	cmp	r3, #7
 800d4b2:	dd09      	ble.n	800d4c8 <_svfprintf_r+0x7ec>
 800d4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d4b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d4ba:	f003 fd25 	bl	8010f08 <__ssprint_r>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d001      	beq.n	800d4c6 <_svfprintf_r+0x7ea>
 800d4c2:	f000 fdea 	bl	800e09a <_svfprintf_r+0x13be>
 800d4c6:	af2f      	add	r7, sp, #188	; 0xbc
 800d4c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4cc:	1a9c      	subs	r4, r3, r2
 800d4ce:	2c00      	cmp	r4, #0
 800d4d0:	dd1a      	ble.n	800d508 <_svfprintf_r+0x82c>
 800d4d2:	0039      	movs	r1, r7
 800d4d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d4d6:	481d      	ldr	r0, [pc, #116]	; (800d54c <_svfprintf_r+0x870>)
 800d4d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d4da:	3301      	adds	r3, #1
 800d4dc:	3108      	adds	r1, #8
 800d4de:	6038      	str	r0, [r7, #0]
 800d4e0:	2c10      	cmp	r4, #16
 800d4e2:	dd00      	ble.n	800d4e6 <_svfprintf_r+0x80a>
 800d4e4:	e2c9      	b.n	800da7a <_svfprintf_r+0xd9e>
 800d4e6:	18a2      	adds	r2, r4, r2
 800d4e8:	607c      	str	r4, [r7, #4]
 800d4ea:	922e      	str	r2, [sp, #184]	; 0xb8
 800d4ec:	000f      	movs	r7, r1
 800d4ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800d4f0:	2b07      	cmp	r3, #7
 800d4f2:	dd09      	ble.n	800d508 <_svfprintf_r+0x82c>
 800d4f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d4f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d4fa:	f003 fd05 	bl	8010f08 <__ssprint_r>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d001      	beq.n	800d506 <_svfprintf_r+0x82a>
 800d502:	f000 fdca 	bl	800e09a <_svfprintf_r+0x13be>
 800d506:	af2f      	add	r7, sp, #188	; 0xbc
 800d508:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d50a:	9319      	str	r3, [sp, #100]	; 0x64
 800d50c:	05f3      	lsls	r3, r6, #23
 800d50e:	d500      	bpl.n	800d512 <_svfprintf_r+0x836>
 800d510:	e2ce      	b.n	800dab0 <_svfprintf_r+0xdd4>
 800d512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d514:	9b08      	ldr	r3, [sp, #32]
 800d516:	4694      	mov	ip, r2
 800d518:	603b      	str	r3, [r7, #0]
 800d51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51c:	607b      	str	r3, [r7, #4]
 800d51e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d520:	4463      	add	r3, ip
 800d522:	932e      	str	r3, [sp, #184]	; 0xb8
 800d524:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d526:	3301      	adds	r3, #1
 800d528:	932d      	str	r3, [sp, #180]	; 0xb4
 800d52a:	2b07      	cmp	r3, #7
 800d52c:	dd00      	ble.n	800d530 <_svfprintf_r+0x854>
 800d52e:	e3a3      	b.n	800dc78 <_svfprintf_r+0xf9c>
 800d530:	3708      	adds	r7, #8
 800d532:	e301      	b.n	800db38 <_svfprintf_r+0xe5c>
 800d534:	080142dc 	.word	0x080142dc
 800d538:	080142ed 	.word	0x080142ed
 800d53c:	40300000 	.word	0x40300000
 800d540:	3fe00000 	.word	0x3fe00000
 800d544:	fffffbff 	.word	0xfffffbff
 800d548:	08014300 	.word	0x08014300
 800d54c:	08014310 	.word	0x08014310
 800d550:	9b08      	ldr	r3, [sp, #32]
 800d552:	930c      	str	r3, [sp, #48]	; 0x30
 800d554:	e610      	b.n	800d178 <_svfprintf_r+0x49c>
 800d556:	2306      	movs	r3, #6
 800d558:	e5fd      	b.n	800d156 <_svfprintf_r+0x47a>
 800d55a:	930e      	str	r3, [sp, #56]	; 0x38
 800d55c:	2300      	movs	r3, #0
 800d55e:	e61a      	b.n	800d196 <_svfprintf_r+0x4ba>
 800d560:	7010      	strb	r0, [r2, #0]
 800d562:	e684      	b.n	800d26e <_svfprintf_r+0x592>
 800d564:	7018      	strb	r0, [r3, #0]
 800d566:	3301      	adds	r3, #1
 800d568:	1aca      	subs	r2, r1, r3
 800d56a:	d5fb      	bpl.n	800d564 <_svfprintf_r+0x888>
 800d56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d56e:	2300      	movs	r3, #0
 800d570:	3201      	adds	r2, #1
 800d572:	db01      	blt.n	800d578 <_svfprintf_r+0x89c>
 800d574:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d576:	3301      	adds	r3, #1
 800d578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d57a:	18d3      	adds	r3, r2, r3
 800d57c:	9323      	str	r3, [sp, #140]	; 0x8c
 800d57e:	e684      	b.n	800d28a <_svfprintf_r+0x5ae>
 800d580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d582:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d584:	2030      	movs	r0, #48	; 0x30
 800d586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d588:	1851      	adds	r1, r2, r1
 800d58a:	e7ed      	b.n	800d568 <_svfprintf_r+0x88c>
 800d58c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d58e:	2303      	movs	r3, #3
 800d590:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d592:	2a46      	cmp	r2, #70	; 0x46
 800d594:	d006      	beq.n	800d5a4 <_svfprintf_r+0x8c8>
 800d596:	0014      	movs	r4, r2
 800d598:	3c45      	subs	r4, #69	; 0x45
 800d59a:	4262      	negs	r2, r4
 800d59c:	4154      	adcs	r4, r2
 800d59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	1914      	adds	r4, r2, r4
 800d5a4:	aa2a      	add	r2, sp, #168	; 0xa8
 800d5a6:	9204      	str	r2, [sp, #16]
 800d5a8:	aa27      	add	r2, sp, #156	; 0x9c
 800d5aa:	9203      	str	r2, [sp, #12]
 800d5ac:	aa26      	add	r2, sp, #152	; 0x98
 800d5ae:	9202      	str	r2, [sp, #8]
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	002a      	movs	r2, r5
 800d5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5b8:	9401      	str	r4, [sp, #4]
 800d5ba:	f002 fad7 	bl	800fb6c <_dtoa_r>
 800d5be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5c0:	9008      	str	r0, [sp, #32]
 800d5c2:	2b47      	cmp	r3, #71	; 0x47
 800d5c4:	d103      	bne.n	800d5ce <_svfprintf_r+0x8f2>
 800d5c6:	07f3      	lsls	r3, r6, #31
 800d5c8:	d401      	bmi.n	800d5ce <_svfprintf_r+0x8f2>
 800d5ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d5cc:	e65e      	b.n	800d28c <_svfprintf_r+0x5b0>
 800d5ce:	9b08      	ldr	r3, [sp, #32]
 800d5d0:	191b      	adds	r3, r3, r4
 800d5d2:	9311      	str	r3, [sp, #68]	; 0x44
 800d5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5d6:	2b46      	cmp	r3, #70	; 0x46
 800d5d8:	d112      	bne.n	800d600 <_svfprintf_r+0x924>
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b30      	cmp	r3, #48	; 0x30
 800d5e0:	d10a      	bne.n	800d5f8 <_svfprintf_r+0x91c>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	0028      	movs	r0, r5
 800d5e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d5ea:	f7f2 ff2d 	bl	8000448 <__aeabi_dcmpeq>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d102      	bne.n	800d5f8 <_svfprintf_r+0x91c>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	1b1b      	subs	r3, r3, r4
 800d5f6:	9326      	str	r3, [sp, #152]	; 0x98
 800d5f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d5fc:	18d3      	adds	r3, r2, r3
 800d5fe:	9311      	str	r3, [sp, #68]	; 0x44
 800d600:	2200      	movs	r2, #0
 800d602:	2300      	movs	r3, #0
 800d604:	0028      	movs	r0, r5
 800d606:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d608:	f7f2 ff1e 	bl	8000448 <__aeabi_dcmpeq>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d001      	beq.n	800d614 <_svfprintf_r+0x938>
 800d610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d612:	932a      	str	r3, [sp, #168]	; 0xa8
 800d614:	2230      	movs	r2, #48	; 0x30
 800d616:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d9d5      	bls.n	800d5ca <_svfprintf_r+0x8ee>
 800d61e:	1c59      	adds	r1, r3, #1
 800d620:	912a      	str	r1, [sp, #168]	; 0xa8
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	e7f7      	b.n	800d616 <_svfprintf_r+0x93a>
 800d626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d628:	2b46      	cmp	r3, #70	; 0x46
 800d62a:	d000      	beq.n	800d62e <_svfprintf_r+0x952>
 800d62c:	e63f      	b.n	800d2ae <_svfprintf_r+0x5d2>
 800d62e:	2201      	movs	r2, #1
 800d630:	0033      	movs	r3, r6
 800d632:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d634:	4013      	ands	r3, r2
 800d636:	430b      	orrs	r3, r1
 800d638:	2d00      	cmp	r5, #0
 800d63a:	dd2c      	ble.n	800d696 <_svfprintf_r+0x9ba>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d046      	beq.n	800d6ce <_svfprintf_r+0x9f2>
 800d640:	000a      	movs	r2, r1
 800d642:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d644:	18eb      	adds	r3, r5, r3
 800d646:	18d3      	adds	r3, r2, r3
 800d648:	9309      	str	r3, [sp, #36]	; 0x24
 800d64a:	2366      	movs	r3, #102	; 0x66
 800d64c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d64e:	e030      	b.n	800d6b2 <_svfprintf_r+0x9d6>
 800d650:	781c      	ldrb	r4, [r3, #0]
 800d652:	3301      	adds	r3, #1
 800d654:	7014      	strb	r4, [r2, #0]
 800d656:	3201      	adds	r2, #1
 800d658:	e668      	b.n	800d32c <_svfprintf_r+0x650>
 800d65a:	222a      	movs	r2, #42	; 0x2a
 800d65c:	ab1e      	add	r3, sp, #120	; 0x78
 800d65e:	18d2      	adds	r2, r2, r3
 800d660:	2800      	cmp	r0, #0
 800d662:	d104      	bne.n	800d66e <_svfprintf_r+0x992>
 800d664:	2330      	movs	r3, #48	; 0x30
 800d666:	222b      	movs	r2, #43	; 0x2b
 800d668:	708b      	strb	r3, [r1, #2]
 800d66a:	ab1e      	add	r3, sp, #120	; 0x78
 800d66c:	18d2      	adds	r2, r2, r3
 800d66e:	3430      	adds	r4, #48	; 0x30
 800d670:	1c53      	adds	r3, r2, #1
 800d672:	7014      	strb	r4, [r2, #0]
 800d674:	e669      	b.n	800d34a <_svfprintf_r+0x66e>
 800d676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d678:	42ab      	cmp	r3, r5
 800d67a:	dd12      	ble.n	800d6a2 <_svfprintf_r+0x9c6>
 800d67c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d680:	4694      	mov	ip, r2
 800d682:	4463      	add	r3, ip
 800d684:	9309      	str	r3, [sp, #36]	; 0x24
 800d686:	2367      	movs	r3, #103	; 0x67
 800d688:	930f      	str	r3, [sp, #60]	; 0x3c
 800d68a:	2d00      	cmp	r5, #0
 800d68c:	dc11      	bgt.n	800d6b2 <_svfprintf_r+0x9d6>
 800d68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d690:	1b5b      	subs	r3, r3, r5
 800d692:	3301      	adds	r3, #1
 800d694:	e00c      	b.n	800d6b0 <_svfprintf_r+0x9d4>
 800d696:	2b00      	cmp	r3, #0
 800d698:	d01b      	beq.n	800d6d2 <_svfprintf_r+0x9f6>
 800d69a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d69e:	3301      	adds	r3, #1
 800d6a0:	e7d1      	b.n	800d646 <_svfprintf_r+0x96a>
 800d6a2:	2367      	movs	r3, #103	; 0x67
 800d6a4:	9509      	str	r5, [sp, #36]	; 0x24
 800d6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6a8:	07f3      	lsls	r3, r6, #31
 800d6aa:	d502      	bpl.n	800d6b2 <_svfprintf_r+0x9d6>
 800d6ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d6ae:	18eb      	adds	r3, r5, r3
 800d6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b2:	2380      	movs	r3, #128	; 0x80
 800d6b4:	0032      	movs	r2, r6
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	401a      	ands	r2, r3
 800d6ba:	9211      	str	r2, [sp, #68]	; 0x44
 800d6bc:	2200      	movs	r2, #0
 800d6be:	9210      	str	r2, [sp, #64]	; 0x40
 800d6c0:	421e      	tst	r6, r3
 800d6c2:	d100      	bne.n	800d6c6 <_svfprintf_r+0x9ea>
 800d6c4:	e65d      	b.n	800d382 <_svfprintf_r+0x6a6>
 800d6c6:	4295      	cmp	r5, r2
 800d6c8:	dc25      	bgt.n	800d716 <_svfprintf_r+0xa3a>
 800d6ca:	9211      	str	r2, [sp, #68]	; 0x44
 800d6cc:	e659      	b.n	800d382 <_svfprintf_r+0x6a6>
 800d6ce:	9509      	str	r5, [sp, #36]	; 0x24
 800d6d0:	e7bb      	b.n	800d64a <_svfprintf_r+0x96e>
 800d6d2:	2366      	movs	r3, #102	; 0x66
 800d6d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6d8:	e7eb      	b.n	800d6b2 <_svfprintf_r+0x9d6>
 800d6da:	42ab      	cmp	r3, r5
 800d6dc:	da0e      	bge.n	800d6fc <_svfprintf_r+0xa20>
 800d6de:	1aed      	subs	r5, r5, r3
 800d6e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6e2:	785b      	ldrb	r3, [r3, #1]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d012      	beq.n	800d70e <_svfprintf_r+0xa32>
 800d6e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	9311      	str	r3, [sp, #68]	; 0x44
 800d6ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	9312      	str	r3, [sp, #72]	; 0x48
 800d6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	2bff      	cmp	r3, #255	; 0xff
 800d6fa:	d1ee      	bne.n	800d6da <_svfprintf_r+0x9fe>
 800d6fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d700:	189b      	adds	r3, r3, r2
 800d702:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d704:	4353      	muls	r3, r2
 800d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d708:	189b      	adds	r3, r3, r2
 800d70a:	9309      	str	r3, [sp, #36]	; 0x24
 800d70c:	e639      	b.n	800d382 <_svfprintf_r+0x6a6>
 800d70e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d710:	3301      	adds	r3, #1
 800d712:	9310      	str	r3, [sp, #64]	; 0x40
 800d714:	e7ee      	b.n	800d6f4 <_svfprintf_r+0xa18>
 800d716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d718:	9311      	str	r3, [sp, #68]	; 0x44
 800d71a:	e7eb      	b.n	800d6f4 <_svfprintf_r+0xa18>
 800d71c:	1d23      	adds	r3, r4, #4
 800d71e:	930d      	str	r3, [sp, #52]	; 0x34
 800d720:	06b3      	lsls	r3, r6, #26
 800d722:	d509      	bpl.n	800d738 <_svfprintf_r+0xa5c>
 800d724:	6823      	ldr	r3, [r4, #0]
 800d726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	17d2      	asrs	r2, r2, #31
 800d72c:	605a      	str	r2, [r3, #4]
 800d72e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d732:	9308      	str	r3, [sp, #32]
 800d734:	f7ff fb0d 	bl	800cd52 <_svfprintf_r+0x76>
 800d738:	06f3      	lsls	r3, r6, #27
 800d73a:	d503      	bpl.n	800d744 <_svfprintf_r+0xa68>
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	e7f4      	b.n	800d72e <_svfprintf_r+0xa52>
 800d744:	0673      	lsls	r3, r6, #25
 800d746:	d503      	bpl.n	800d750 <_svfprintf_r+0xa74>
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d74c:	801a      	strh	r2, [r3, #0]
 800d74e:	e7ee      	b.n	800d72e <_svfprintf_r+0xa52>
 800d750:	05b6      	lsls	r6, r6, #22
 800d752:	d5f3      	bpl.n	800d73c <_svfprintf_r+0xa60>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	e7e8      	b.n	800d72e <_svfprintf_r+0xa52>
 800d75c:	2310      	movs	r3, #16
 800d75e:	431e      	orrs	r6, r3
 800d760:	2320      	movs	r3, #32
 800d762:	0030      	movs	r0, r6
 800d764:	4018      	ands	r0, r3
 800d766:	421e      	tst	r6, r3
 800d768:	d00f      	beq.n	800d78a <_svfprintf_r+0xaae>
 800d76a:	3b19      	subs	r3, #25
 800d76c:	3407      	adds	r4, #7
 800d76e:	439c      	bics	r4, r3
 800d770:	0022      	movs	r2, r4
 800d772:	ca18      	ldmia	r2!, {r3, r4}
 800d774:	9306      	str	r3, [sp, #24]
 800d776:	9407      	str	r4, [sp, #28]
 800d778:	920d      	str	r2, [sp, #52]	; 0x34
 800d77a:	4bc9      	ldr	r3, [pc, #804]	; (800daa0 <_svfprintf_r+0xdc4>)
 800d77c:	401e      	ands	r6, r3
 800d77e:	2300      	movs	r3, #0
 800d780:	221b      	movs	r2, #27
 800d782:	a91e      	add	r1, sp, #120	; 0x78
 800d784:	1852      	adds	r2, r2, r1
 800d786:	2100      	movs	r1, #0
 800d788:	e430      	b.n	800cfec <_svfprintf_r+0x310>
 800d78a:	0022      	movs	r2, r4
 800d78c:	ca08      	ldmia	r2!, {r3}
 800d78e:	0031      	movs	r1, r6
 800d790:	920d      	str	r2, [sp, #52]	; 0x34
 800d792:	2210      	movs	r2, #16
 800d794:	4011      	ands	r1, r2
 800d796:	4216      	tst	r6, r2
 800d798:	d002      	beq.n	800d7a0 <_svfprintf_r+0xac4>
 800d79a:	9306      	str	r3, [sp, #24]
 800d79c:	9007      	str	r0, [sp, #28]
 800d79e:	e7ec      	b.n	800d77a <_svfprintf_r+0xa9e>
 800d7a0:	2240      	movs	r2, #64	; 0x40
 800d7a2:	0030      	movs	r0, r6
 800d7a4:	4010      	ands	r0, r2
 800d7a6:	4216      	tst	r6, r2
 800d7a8:	d003      	beq.n	800d7b2 <_svfprintf_r+0xad6>
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	9306      	str	r3, [sp, #24]
 800d7ae:	9107      	str	r1, [sp, #28]
 800d7b0:	e7e3      	b.n	800d77a <_svfprintf_r+0xa9e>
 800d7b2:	2280      	movs	r2, #128	; 0x80
 800d7b4:	0031      	movs	r1, r6
 800d7b6:	0092      	lsls	r2, r2, #2
 800d7b8:	4011      	ands	r1, r2
 800d7ba:	4216      	tst	r6, r2
 800d7bc:	d0f6      	beq.n	800d7ac <_svfprintf_r+0xad0>
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	e7eb      	b.n	800d79a <_svfprintf_r+0xabe>
 800d7c2:	0023      	movs	r3, r4
 800d7c4:	cb04      	ldmia	r3!, {r2}
 800d7c6:	49b7      	ldr	r1, [pc, #732]	; (800daa4 <_svfprintf_r+0xdc8>)
 800d7c8:	9206      	str	r2, [sp, #24]
 800d7ca:	aa25      	add	r2, sp, #148	; 0x94
 800d7cc:	8011      	strh	r1, [r2, #0]
 800d7ce:	4ab6      	ldr	r2, [pc, #728]	; (800daa8 <_svfprintf_r+0xdcc>)
 800d7d0:	930d      	str	r3, [sp, #52]	; 0x34
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	921f      	str	r2, [sp, #124]	; 0x7c
 800d7d6:	2278      	movs	r2, #120	; 0x78
 800d7d8:	9307      	str	r3, [sp, #28]
 800d7da:	3302      	adds	r3, #2
 800d7dc:	431e      	orrs	r6, r3
 800d7de:	920f      	str	r2, [sp, #60]	; 0x3c
 800d7e0:	e7ce      	b.n	800d780 <_svfprintf_r+0xaa4>
 800d7e2:	0023      	movs	r3, r4
 800d7e4:	cb04      	ldmia	r3!, {r2}
 800d7e6:	2400      	movs	r4, #0
 800d7e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d7ea:	231b      	movs	r3, #27
 800d7ec:	9208      	str	r2, [sp, #32]
 800d7ee:	aa1e      	add	r2, sp, #120	; 0x78
 800d7f0:	189b      	adds	r3, r3, r2
 800d7f2:	701c      	strb	r4, [r3, #0]
 800d7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	d00e      	beq.n	800d818 <_svfprintf_r+0xb3c>
 800d7fa:	0021      	movs	r1, r4
 800d7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7fe:	9808      	ldr	r0, [sp, #32]
 800d800:	f002 f83a 	bl	800f878 <memchr>
 800d804:	900c      	str	r0, [sp, #48]	; 0x30
 800d806:	42a0      	cmp	r0, r4
 800d808:	d100      	bne.n	800d80c <_svfprintf_r+0xb30>
 800d80a:	e10d      	b.n	800da28 <_svfprintf_r+0xd4c>
 800d80c:	9a08      	ldr	r2, [sp, #32]
 800d80e:	1a83      	subs	r3, r0, r2
 800d810:	9309      	str	r3, [sp, #36]	; 0x24
 800d812:	0023      	movs	r3, r4
 800d814:	940c      	str	r4, [sp, #48]	; 0x30
 800d816:	e44e      	b.n	800d0b6 <_svfprintf_r+0x3da>
 800d818:	9808      	ldr	r0, [sp, #32]
 800d81a:	f7f2 fc73 	bl	8000104 <strlen>
 800d81e:	9009      	str	r0, [sp, #36]	; 0x24
 800d820:	e7f7      	b.n	800d812 <_svfprintf_r+0xb36>
 800d822:	2310      	movs	r3, #16
 800d824:	431e      	orrs	r6, r3
 800d826:	2320      	movs	r3, #32
 800d828:	0030      	movs	r0, r6
 800d82a:	4018      	ands	r0, r3
 800d82c:	421e      	tst	r6, r3
 800d82e:	d009      	beq.n	800d844 <_svfprintf_r+0xb68>
 800d830:	3b19      	subs	r3, #25
 800d832:	3407      	adds	r4, #7
 800d834:	439c      	bics	r4, r3
 800d836:	0022      	movs	r2, r4
 800d838:	ca18      	ldmia	r2!, {r3, r4}
 800d83a:	9306      	str	r3, [sp, #24]
 800d83c:	9407      	str	r4, [sp, #28]
 800d83e:	920d      	str	r2, [sp, #52]	; 0x34
 800d840:	2301      	movs	r3, #1
 800d842:	e79d      	b.n	800d780 <_svfprintf_r+0xaa4>
 800d844:	0023      	movs	r3, r4
 800d846:	cb04      	ldmia	r3!, {r2}
 800d848:	0031      	movs	r1, r6
 800d84a:	930d      	str	r3, [sp, #52]	; 0x34
 800d84c:	2310      	movs	r3, #16
 800d84e:	4019      	ands	r1, r3
 800d850:	421e      	tst	r6, r3
 800d852:	d003      	beq.n	800d85c <_svfprintf_r+0xb80>
 800d854:	9206      	str	r2, [sp, #24]
 800d856:	9007      	str	r0, [sp, #28]
 800d858:	3b0f      	subs	r3, #15
 800d85a:	e791      	b.n	800d780 <_svfprintf_r+0xaa4>
 800d85c:	2340      	movs	r3, #64	; 0x40
 800d85e:	0030      	movs	r0, r6
 800d860:	4018      	ands	r0, r3
 800d862:	421e      	tst	r6, r3
 800d864:	d003      	beq.n	800d86e <_svfprintf_r+0xb92>
 800d866:	b293      	uxth	r3, r2
 800d868:	9306      	str	r3, [sp, #24]
 800d86a:	9107      	str	r1, [sp, #28]
 800d86c:	e7e8      	b.n	800d840 <_svfprintf_r+0xb64>
 800d86e:	2380      	movs	r3, #128	; 0x80
 800d870:	0031      	movs	r1, r6
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	4019      	ands	r1, r3
 800d876:	421e      	tst	r6, r3
 800d878:	d003      	beq.n	800d882 <_svfprintf_r+0xba6>
 800d87a:	b2d3      	uxtb	r3, r2
 800d87c:	9306      	str	r3, [sp, #24]
 800d87e:	9007      	str	r0, [sp, #28]
 800d880:	e7de      	b.n	800d840 <_svfprintf_r+0xb64>
 800d882:	9206      	str	r2, [sp, #24]
 800d884:	e7f1      	b.n	800d86a <_svfprintf_r+0xb8e>
 800d886:	4b89      	ldr	r3, [pc, #548]	; (800daac <_svfprintf_r+0xdd0>)
 800d888:	0030      	movs	r0, r6
 800d88a:	931f      	str	r3, [sp, #124]	; 0x7c
 800d88c:	2320      	movs	r3, #32
 800d88e:	4018      	ands	r0, r3
 800d890:	421e      	tst	r6, r3
 800d892:	d01a      	beq.n	800d8ca <_svfprintf_r+0xbee>
 800d894:	3b19      	subs	r3, #25
 800d896:	3407      	adds	r4, #7
 800d898:	439c      	bics	r4, r3
 800d89a:	0022      	movs	r2, r4
 800d89c:	ca18      	ldmia	r2!, {r3, r4}
 800d89e:	9306      	str	r3, [sp, #24]
 800d8a0:	9407      	str	r4, [sp, #28]
 800d8a2:	920d      	str	r2, [sp, #52]	; 0x34
 800d8a4:	07f3      	lsls	r3, r6, #31
 800d8a6:	d50a      	bpl.n	800d8be <_svfprintf_r+0xbe2>
 800d8a8:	9b06      	ldr	r3, [sp, #24]
 800d8aa:	9a07      	ldr	r2, [sp, #28]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	d006      	beq.n	800d8be <_svfprintf_r+0xbe2>
 800d8b0:	2230      	movs	r2, #48	; 0x30
 800d8b2:	ab25      	add	r3, sp, #148	; 0x94
 800d8b4:	701a      	strb	r2, [r3, #0]
 800d8b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8b8:	705a      	strb	r2, [r3, #1]
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	431e      	orrs	r6, r3
 800d8be:	4b78      	ldr	r3, [pc, #480]	; (800daa0 <_svfprintf_r+0xdc4>)
 800d8c0:	401e      	ands	r6, r3
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	e75c      	b.n	800d780 <_svfprintf_r+0xaa4>
 800d8c6:	4b78      	ldr	r3, [pc, #480]	; (800daa8 <_svfprintf_r+0xdcc>)
 800d8c8:	e7de      	b.n	800d888 <_svfprintf_r+0xbac>
 800d8ca:	0023      	movs	r3, r4
 800d8cc:	cb04      	ldmia	r3!, {r2}
 800d8ce:	0031      	movs	r1, r6
 800d8d0:	930d      	str	r3, [sp, #52]	; 0x34
 800d8d2:	2310      	movs	r3, #16
 800d8d4:	4019      	ands	r1, r3
 800d8d6:	421e      	tst	r6, r3
 800d8d8:	d002      	beq.n	800d8e0 <_svfprintf_r+0xc04>
 800d8da:	9206      	str	r2, [sp, #24]
 800d8dc:	9007      	str	r0, [sp, #28]
 800d8de:	e7e1      	b.n	800d8a4 <_svfprintf_r+0xbc8>
 800d8e0:	2340      	movs	r3, #64	; 0x40
 800d8e2:	0030      	movs	r0, r6
 800d8e4:	4018      	ands	r0, r3
 800d8e6:	421e      	tst	r6, r3
 800d8e8:	d003      	beq.n	800d8f2 <_svfprintf_r+0xc16>
 800d8ea:	b293      	uxth	r3, r2
 800d8ec:	9306      	str	r3, [sp, #24]
 800d8ee:	9107      	str	r1, [sp, #28]
 800d8f0:	e7d8      	b.n	800d8a4 <_svfprintf_r+0xbc8>
 800d8f2:	2380      	movs	r3, #128	; 0x80
 800d8f4:	0031      	movs	r1, r6
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4019      	ands	r1, r3
 800d8fa:	421e      	tst	r6, r3
 800d8fc:	d002      	beq.n	800d904 <_svfprintf_r+0xc28>
 800d8fe:	b2d3      	uxtb	r3, r2
 800d900:	9306      	str	r3, [sp, #24]
 800d902:	e7eb      	b.n	800d8dc <_svfprintf_r+0xc00>
 800d904:	9206      	str	r2, [sp, #24]
 800d906:	e7f2      	b.n	800d8ee <_svfprintf_r+0xc12>
 800d908:	9b07      	ldr	r3, [sp, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10a      	bne.n	800d924 <_svfprintf_r+0xc48>
 800d90e:	9b06      	ldr	r3, [sp, #24]
 800d910:	2b09      	cmp	r3, #9
 800d912:	d807      	bhi.n	800d924 <_svfprintf_r+0xc48>
 800d914:	23e7      	movs	r3, #231	; 0xe7
 800d916:	aa1e      	add	r2, sp, #120	; 0x78
 800d918:	189b      	adds	r3, r3, r2
 800d91a:	9a06      	ldr	r2, [sp, #24]
 800d91c:	3230      	adds	r2, #48	; 0x30
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	f000 fc18 	bl	800e154 <_svfprintf_r+0x1478>
 800d924:	2680      	movs	r6, #128	; 0x80
 800d926:	2300      	movs	r3, #0
 800d928:	00f6      	lsls	r6, r6, #3
 800d92a:	930e      	str	r3, [sp, #56]	; 0x38
 800d92c:	ad58      	add	r5, sp, #352	; 0x160
 800d92e:	4026      	ands	r6, r4
 800d930:	220a      	movs	r2, #10
 800d932:	9806      	ldr	r0, [sp, #24]
 800d934:	9907      	ldr	r1, [sp, #28]
 800d936:	2300      	movs	r3, #0
 800d938:	f7f2 fdb4 	bl	80004a4 <__aeabi_uldivmod>
 800d93c:	1e6b      	subs	r3, r5, #1
 800d93e:	3230      	adds	r2, #48	; 0x30
 800d940:	9308      	str	r3, [sp, #32]
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d946:	900c      	str	r0, [sp, #48]	; 0x30
 800d948:	3301      	adds	r3, #1
 800d94a:	9110      	str	r1, [sp, #64]	; 0x40
 800d94c:	930e      	str	r3, [sp, #56]	; 0x38
 800d94e:	2e00      	cmp	r6, #0
 800d950:	d01d      	beq.n	800d98e <_svfprintf_r+0xcb2>
 800d952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d118      	bne.n	800d98e <_svfprintf_r+0xcb2>
 800d95c:	2aff      	cmp	r2, #255	; 0xff
 800d95e:	d016      	beq.n	800d98e <_svfprintf_r+0xcb2>
 800d960:	9b07      	ldr	r3, [sp, #28]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d102      	bne.n	800d96c <_svfprintf_r+0xc90>
 800d966:	9b06      	ldr	r3, [sp, #24]
 800d968:	2b09      	cmp	r3, #9
 800d96a:	d910      	bls.n	800d98e <_svfprintf_r+0xcb2>
 800d96c:	9b08      	ldr	r3, [sp, #32]
 800d96e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d970:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d972:	1a9b      	subs	r3, r3, r2
 800d974:	0018      	movs	r0, r3
 800d976:	9308      	str	r3, [sp, #32]
 800d978:	f7fd ffd1 	bl	800b91e <strncpy>
 800d97c:	2200      	movs	r2, #0
 800d97e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d980:	920e      	str	r2, [sp, #56]	; 0x38
 800d982:	785b      	ldrb	r3, [r3, #1]
 800d984:	1e5a      	subs	r2, r3, #1
 800d986:	4193      	sbcs	r3, r2
 800d988:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d98a:	18d3      	adds	r3, r2, r3
 800d98c:	9312      	str	r3, [sp, #72]	; 0x48
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10f      	bne.n	800d9b4 <_svfprintf_r+0xcd8>
 800d994:	9b06      	ldr	r3, [sp, #24]
 800d996:	2b09      	cmp	r3, #9
 800d998:	d80c      	bhi.n	800d9b4 <_svfprintf_r+0xcd8>
 800d99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d99c:	9a08      	ldr	r2, [sp, #32]
 800d99e:	9319      	str	r3, [sp, #100]	; 0x64
 800d9a0:	ab58      	add	r3, sp, #352	; 0x160
 800d9a2:	1a9b      	subs	r3, r3, r2
 800d9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	0026      	movs	r6, r4
 800d9aa:	930c      	str	r3, [sp, #48]	; 0x30
 800d9ac:	001d      	movs	r5, r3
 800d9ae:	9310      	str	r3, [sp, #64]	; 0x40
 800d9b0:	9311      	str	r3, [sp, #68]	; 0x44
 800d9b2:	e4f2      	b.n	800d39a <_svfprintf_r+0x6be>
 800d9b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9b6:	9d08      	ldr	r5, [sp, #32]
 800d9b8:	9306      	str	r3, [sp, #24]
 800d9ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9bc:	9307      	str	r3, [sp, #28]
 800d9be:	e7b7      	b.n	800d930 <_svfprintf_r+0xc54>
 800d9c0:	200f      	movs	r0, #15
 800d9c2:	ab58      	add	r3, sp, #352	; 0x160
 800d9c4:	9308      	str	r3, [sp, #32]
 800d9c6:	9b08      	ldr	r3, [sp, #32]
 800d9c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	9308      	str	r3, [sp, #32]
 800d9ce:	9b06      	ldr	r3, [sp, #24]
 800d9d0:	4003      	ands	r3, r0
 800d9d2:	5cd3      	ldrb	r3, [r2, r3]
 800d9d4:	9a08      	ldr	r2, [sp, #32]
 800d9d6:	7013      	strb	r3, [r2, #0]
 800d9d8:	9b07      	ldr	r3, [sp, #28]
 800d9da:	0719      	lsls	r1, r3, #28
 800d9dc:	9b06      	ldr	r3, [sp, #24]
 800d9de:	091a      	lsrs	r2, r3, #4
 800d9e0:	9b07      	ldr	r3, [sp, #28]
 800d9e2:	4311      	orrs	r1, r2
 800d9e4:	091b      	lsrs	r3, r3, #4
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	000b      	movs	r3, r1
 800d9ea:	9a07      	ldr	r2, [sp, #28]
 800d9ec:	9106      	str	r1, [sp, #24]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	d1e9      	bne.n	800d9c6 <_svfprintf_r+0xcea>
 800d9f2:	e7d2      	b.n	800d99a <_svfprintf_r+0xcbe>
 800d9f4:	aa58      	add	r2, sp, #352	; 0x160
 800d9f6:	9208      	str	r2, [sp, #32]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1ce      	bne.n	800d99a <_svfprintf_r+0xcbe>
 800d9fc:	07f6      	lsls	r6, r6, #31
 800d9fe:	d5cc      	bpl.n	800d99a <_svfprintf_r+0xcbe>
 800da00:	aa1e      	add	r2, sp, #120	; 0x78
 800da02:	33e7      	adds	r3, #231	; 0xe7
 800da04:	189b      	adds	r3, r3, r2
 800da06:	2230      	movs	r2, #48	; 0x30
 800da08:	e789      	b.n	800d91e <_svfprintf_r+0xc42>
 800da0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d100      	bne.n	800da12 <_svfprintf_r+0xd36>
 800da10:	e364      	b.n	800e0dc <_svfprintf_r+0x1400>
 800da12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da14:	211b      	movs	r1, #27
 800da16:	ab3f      	add	r3, sp, #252	; 0xfc
 800da18:	701a      	strb	r2, [r3, #0]
 800da1a:	2200      	movs	r2, #0
 800da1c:	a81e      	add	r0, sp, #120	; 0x78
 800da1e:	1809      	adds	r1, r1, r0
 800da20:	700a      	strb	r2, [r1, #0]
 800da22:	940d      	str	r4, [sp, #52]	; 0x34
 800da24:	f7ff fabd 	bl	800cfa2 <_svfprintf_r+0x2c6>
 800da28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da2a:	f7ff fb44 	bl	800d0b6 <_svfprintf_r+0x3da>
 800da2e:	2010      	movs	r0, #16
 800da30:	1812      	adds	r2, r2, r0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	922e      	str	r2, [sp, #184]	; 0xb8
 800da36:	932d      	str	r3, [sp, #180]	; 0xb4
 800da38:	2b07      	cmp	r3, #7
 800da3a:	dd08      	ble.n	800da4e <_svfprintf_r+0xd72>
 800da3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da40:	aa2c      	add	r2, sp, #176	; 0xb0
 800da42:	f003 fa61 	bl	8010f08 <__ssprint_r>
 800da46:	2800      	cmp	r0, #0
 800da48:	d000      	beq.n	800da4c <_svfprintf_r+0xd70>
 800da4a:	e326      	b.n	800e09a <_svfprintf_r+0x13be>
 800da4c:	a92f      	add	r1, sp, #188	; 0xbc
 800da4e:	000f      	movs	r7, r1
 800da50:	3c10      	subs	r4, #16
 800da52:	e4c5      	b.n	800d3e0 <_svfprintf_r+0x704>
 800da54:	2010      	movs	r0, #16
 800da56:	1812      	adds	r2, r2, r0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	922e      	str	r2, [sp, #184]	; 0xb8
 800da5c:	932d      	str	r3, [sp, #180]	; 0xb4
 800da5e:	2b07      	cmp	r3, #7
 800da60:	dd08      	ble.n	800da74 <_svfprintf_r+0xd98>
 800da62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da64:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da66:	aa2c      	add	r2, sp, #176	; 0xb0
 800da68:	f003 fa4e 	bl	8010f08 <__ssprint_r>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d000      	beq.n	800da72 <_svfprintf_r+0xd96>
 800da70:	e313      	b.n	800e09a <_svfprintf_r+0x13be>
 800da72:	a92f      	add	r1, sp, #188	; 0xbc
 800da74:	000f      	movs	r7, r1
 800da76:	3c10      	subs	r4, #16
 800da78:	e50b      	b.n	800d492 <_svfprintf_r+0x7b6>
 800da7a:	2010      	movs	r0, #16
 800da7c:	1812      	adds	r2, r2, r0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	922e      	str	r2, [sp, #184]	; 0xb8
 800da82:	932d      	str	r3, [sp, #180]	; 0xb4
 800da84:	2b07      	cmp	r3, #7
 800da86:	dd08      	ble.n	800da9a <_svfprintf_r+0xdbe>
 800da88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800da8e:	f003 fa3b 	bl	8010f08 <__ssprint_r>
 800da92:	2800      	cmp	r0, #0
 800da94:	d000      	beq.n	800da98 <_svfprintf_r+0xdbc>
 800da96:	e300      	b.n	800e09a <_svfprintf_r+0x13be>
 800da98:	a92f      	add	r1, sp, #188	; 0xbc
 800da9a:	000f      	movs	r7, r1
 800da9c:	3c10      	subs	r4, #16
 800da9e:	e518      	b.n	800d4d2 <_svfprintf_r+0x7f6>
 800daa0:	fffffbff 	.word	0xfffffbff
 800daa4:	00007830 	.word	0x00007830
 800daa8:	080142dc 	.word	0x080142dc
 800daac:	080142ed 	.word	0x080142ed
 800dab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dab2:	2b65      	cmp	r3, #101	; 0x65
 800dab4:	dc00      	bgt.n	800dab8 <_svfprintf_r+0xddc>
 800dab6:	e241      	b.n	800df3c <_svfprintf_r+0x1260>
 800dab8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800daba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dabc:	2200      	movs	r2, #0
 800dabe:	2300      	movs	r3, #0
 800dac0:	f7f2 fcc2 	bl	8000448 <__aeabi_dcmpeq>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d077      	beq.n	800dbb8 <_svfprintf_r+0xedc>
 800dac8:	4bca      	ldr	r3, [pc, #808]	; (800ddf4 <_svfprintf_r+0x1118>)
 800daca:	603b      	str	r3, [r7, #0]
 800dacc:	2301      	movs	r3, #1
 800dace:	607b      	str	r3, [r7, #4]
 800dad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dad2:	3708      	adds	r7, #8
 800dad4:	3301      	adds	r3, #1
 800dad6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dad8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dada:	3301      	adds	r3, #1
 800dadc:	932d      	str	r3, [sp, #180]	; 0xb4
 800dade:	2b07      	cmp	r3, #7
 800dae0:	dd08      	ble.n	800daf4 <_svfprintf_r+0xe18>
 800dae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dae4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dae6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dae8:	f003 fa0e 	bl	8010f08 <__ssprint_r>
 800daec:	2800      	cmp	r0, #0
 800daee:	d000      	beq.n	800daf2 <_svfprintf_r+0xe16>
 800daf0:	e2d3      	b.n	800e09a <_svfprintf_r+0x13be>
 800daf2:	af2f      	add	r7, sp, #188	; 0xbc
 800daf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800daf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daf8:	4293      	cmp	r3, r2
 800dafa:	db01      	blt.n	800db00 <_svfprintf_r+0xe24>
 800dafc:	07f3      	lsls	r3, r6, #31
 800dafe:	d51b      	bpl.n	800db38 <_svfprintf_r+0xe5c>
 800db00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800db02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800db04:	603b      	str	r3, [r7, #0]
 800db06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db08:	607b      	str	r3, [r7, #4]
 800db0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800db0c:	3708      	adds	r7, #8
 800db0e:	189b      	adds	r3, r3, r2
 800db10:	932e      	str	r3, [sp, #184]	; 0xb8
 800db12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db14:	3301      	adds	r3, #1
 800db16:	932d      	str	r3, [sp, #180]	; 0xb4
 800db18:	2b07      	cmp	r3, #7
 800db1a:	dd08      	ble.n	800db2e <_svfprintf_r+0xe52>
 800db1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db20:	aa2c      	add	r2, sp, #176	; 0xb0
 800db22:	f003 f9f1 	bl	8010f08 <__ssprint_r>
 800db26:	2800      	cmp	r0, #0
 800db28:	d000      	beq.n	800db2c <_svfprintf_r+0xe50>
 800db2a:	e2b6      	b.n	800e09a <_svfprintf_r+0x13be>
 800db2c:	af2f      	add	r7, sp, #188	; 0xbc
 800db2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db30:	2510      	movs	r5, #16
 800db32:	1e5c      	subs	r4, r3, #1
 800db34:	2c00      	cmp	r4, #0
 800db36:	dc2e      	bgt.n	800db96 <_svfprintf_r+0xeba>
 800db38:	0776      	lsls	r6, r6, #29
 800db3a:	d500      	bpl.n	800db3e <_svfprintf_r+0xe62>
 800db3c:	e290      	b.n	800e060 <_svfprintf_r+0x1384>
 800db3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db42:	4293      	cmp	r3, r2
 800db44:	da00      	bge.n	800db48 <_svfprintf_r+0xe6c>
 800db46:	0013      	movs	r3, r2
 800db48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db4a:	18d3      	adds	r3, r2, r3
 800db4c:	9317      	str	r3, [sp, #92]	; 0x5c
 800db4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800db50:	2b00      	cmp	r3, #0
 800db52:	d007      	beq.n	800db64 <_svfprintf_r+0xe88>
 800db54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db58:	aa2c      	add	r2, sp, #176	; 0xb0
 800db5a:	f003 f9d5 	bl	8010f08 <__ssprint_r>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d000      	beq.n	800db64 <_svfprintf_r+0xe88>
 800db62:	e29a      	b.n	800e09a <_svfprintf_r+0x13be>
 800db64:	2300      	movs	r3, #0
 800db66:	932d      	str	r3, [sp, #180]	; 0xb4
 800db68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d000      	beq.n	800db70 <_svfprintf_r+0xe94>
 800db6e:	e2b0      	b.n	800e0d2 <_svfprintf_r+0x13f6>
 800db70:	af2f      	add	r7, sp, #188	; 0xbc
 800db72:	e5dc      	b.n	800d72e <_svfprintf_r+0xa52>
 800db74:	3210      	adds	r2, #16
 800db76:	607d      	str	r5, [r7, #4]
 800db78:	922e      	str	r2, [sp, #184]	; 0xb8
 800db7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800db7c:	2b07      	cmp	r3, #7
 800db7e:	dd08      	ble.n	800db92 <_svfprintf_r+0xeb6>
 800db80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db84:	aa2c      	add	r2, sp, #176	; 0xb0
 800db86:	f003 f9bf 	bl	8010f08 <__ssprint_r>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d000      	beq.n	800db90 <_svfprintf_r+0xeb4>
 800db8e:	e284      	b.n	800e09a <_svfprintf_r+0x13be>
 800db90:	a92f      	add	r1, sp, #188	; 0xbc
 800db92:	000f      	movs	r7, r1
 800db94:	3c10      	subs	r4, #16
 800db96:	0039      	movs	r1, r7
 800db98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db9a:	4897      	ldr	r0, [pc, #604]	; (800ddf8 <_svfprintf_r+0x111c>)
 800db9c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800db9e:	3301      	adds	r3, #1
 800dba0:	3108      	adds	r1, #8
 800dba2:	6038      	str	r0, [r7, #0]
 800dba4:	2c10      	cmp	r4, #16
 800dba6:	dce5      	bgt.n	800db74 <_svfprintf_r+0xe98>
 800dba8:	607c      	str	r4, [r7, #4]
 800dbaa:	18a4      	adds	r4, r4, r2
 800dbac:	942e      	str	r4, [sp, #184]	; 0xb8
 800dbae:	000f      	movs	r7, r1
 800dbb0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbb2:	2b07      	cmp	r3, #7
 800dbb4:	ddc0      	ble.n	800db38 <_svfprintf_r+0xe5c>
 800dbb6:	e05f      	b.n	800dc78 <_svfprintf_r+0xf9c>
 800dbb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	dc78      	bgt.n	800dcb0 <_svfprintf_r+0xfd4>
 800dbbe:	4b8d      	ldr	r3, [pc, #564]	; (800ddf4 <_svfprintf_r+0x1118>)
 800dbc0:	603b      	str	r3, [r7, #0]
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	607b      	str	r3, [r7, #4]
 800dbc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbc8:	3708      	adds	r7, #8
 800dbca:	3301      	adds	r3, #1
 800dbcc:	932e      	str	r3, [sp, #184]	; 0xb8
 800dbce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbd4:	2b07      	cmp	r3, #7
 800dbd6:	dd08      	ble.n	800dbea <_svfprintf_r+0xf0e>
 800dbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbdc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbde:	f003 f993 	bl	8010f08 <__ssprint_r>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d000      	beq.n	800dbe8 <_svfprintf_r+0xf0c>
 800dbe6:	e258      	b.n	800e09a <_svfprintf_r+0x13be>
 800dbe8:	af2f      	add	r7, sp, #188	; 0xbc
 800dbea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dbec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dbf0:	430b      	orrs	r3, r1
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	4031      	ands	r1, r6
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	d09e      	beq.n	800db38 <_svfprintf_r+0xe5c>
 800dbfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dbfc:	603b      	str	r3, [r7, #0]
 800dbfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc00:	607b      	str	r3, [r7, #4]
 800dc02:	189a      	adds	r2, r3, r2
 800dc04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc06:	922e      	str	r2, [sp, #184]	; 0xb8
 800dc08:	3301      	adds	r3, #1
 800dc0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	2b07      	cmp	r3, #7
 800dc10:	dd08      	ble.n	800dc24 <_svfprintf_r+0xf48>
 800dc12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc16:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc18:	f003 f976 	bl	8010f08 <__ssprint_r>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d000      	beq.n	800dc22 <_svfprintf_r+0xf46>
 800dc20:	e23b      	b.n	800e09a <_svfprintf_r+0x13be>
 800dc22:	af2f      	add	r7, sp, #188	; 0xbc
 800dc24:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dc26:	2c00      	cmp	r4, #0
 800dc28:	da19      	bge.n	800dc5e <_svfprintf_r+0xf82>
 800dc2a:	0038      	movs	r0, r7
 800dc2c:	2510      	movs	r5, #16
 800dc2e:	4264      	negs	r4, r4
 800dc30:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800dc32:	4a71      	ldr	r2, [pc, #452]	; (800ddf8 <_svfprintf_r+0x111c>)
 800dc34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc36:	3101      	adds	r1, #1
 800dc38:	3708      	adds	r7, #8
 800dc3a:	6002      	str	r2, [r0, #0]
 800dc3c:	2c10      	cmp	r4, #16
 800dc3e:	dc25      	bgt.n	800dc8c <_svfprintf_r+0xfb0>
 800dc40:	6044      	str	r4, [r0, #4]
 800dc42:	18e4      	adds	r4, r4, r3
 800dc44:	942e      	str	r4, [sp, #184]	; 0xb8
 800dc46:	912d      	str	r1, [sp, #180]	; 0xb4
 800dc48:	2907      	cmp	r1, #7
 800dc4a:	dd08      	ble.n	800dc5e <_svfprintf_r+0xf82>
 800dc4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc50:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc52:	f003 f959 	bl	8010f08 <__ssprint_r>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d000      	beq.n	800dc5c <_svfprintf_r+0xf80>
 800dc5a:	e21e      	b.n	800e09a <_svfprintf_r+0x13be>
 800dc5c:	af2f      	add	r7, sp, #188	; 0xbc
 800dc5e:	9b08      	ldr	r3, [sp, #32]
 800dc60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dc62:	603b      	str	r3, [r7, #0]
 800dc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc66:	18d2      	adds	r2, r2, r3
 800dc68:	922e      	str	r2, [sp, #184]	; 0xb8
 800dc6a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800dc6c:	607b      	str	r3, [r7, #4]
 800dc6e:	3201      	adds	r2, #1
 800dc70:	922d      	str	r2, [sp, #180]	; 0xb4
 800dc72:	2a07      	cmp	r2, #7
 800dc74:	dc00      	bgt.n	800dc78 <_svfprintf_r+0xf9c>
 800dc76:	e45b      	b.n	800d530 <_svfprintf_r+0x854>
 800dc78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc7c:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc7e:	f003 f943 	bl	8010f08 <__ssprint_r>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d000      	beq.n	800dc88 <_svfprintf_r+0xfac>
 800dc86:	e208      	b.n	800e09a <_svfprintf_r+0x13be>
 800dc88:	af2f      	add	r7, sp, #188	; 0xbc
 800dc8a:	e755      	b.n	800db38 <_svfprintf_r+0xe5c>
 800dc8c:	3310      	adds	r3, #16
 800dc8e:	6045      	str	r5, [r0, #4]
 800dc90:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc92:	912d      	str	r1, [sp, #180]	; 0xb4
 800dc94:	2907      	cmp	r1, #7
 800dc96:	dd08      	ble.n	800dcaa <_svfprintf_r+0xfce>
 800dc98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc9c:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc9e:	f003 f933 	bl	8010f08 <__ssprint_r>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d000      	beq.n	800dca8 <_svfprintf_r+0xfcc>
 800dca6:	e1f8      	b.n	800e09a <_svfprintf_r+0x13be>
 800dca8:	af2f      	add	r7, sp, #188	; 0xbc
 800dcaa:	0038      	movs	r0, r7
 800dcac:	3c10      	subs	r4, #16
 800dcae:	e7bf      	b.n	800dc30 <_svfprintf_r+0xf54>
 800dcb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb2:	002c      	movs	r4, r5
 800dcb4:	429d      	cmp	r5, r3
 800dcb6:	dd00      	ble.n	800dcba <_svfprintf_r+0xfde>
 800dcb8:	001c      	movs	r4, r3
 800dcba:	2c00      	cmp	r4, #0
 800dcbc:	dd14      	ble.n	800dce8 <_svfprintf_r+0x100c>
 800dcbe:	9b08      	ldr	r3, [sp, #32]
 800dcc0:	607c      	str	r4, [r7, #4]
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	18e3      	adds	r3, r4, r3
 800dcca:	932e      	str	r3, [sp, #184]	; 0xb8
 800dccc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcce:	3301      	adds	r3, #1
 800dcd0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcd2:	2b07      	cmp	r3, #7
 800dcd4:	dd08      	ble.n	800dce8 <_svfprintf_r+0x100c>
 800dcd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcda:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcdc:	f003 f914 	bl	8010f08 <__ssprint_r>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d000      	beq.n	800dce6 <_svfprintf_r+0x100a>
 800dce4:	e1d9      	b.n	800e09a <_svfprintf_r+0x13be>
 800dce6:	af2f      	add	r7, sp, #188	; 0xbc
 800dce8:	43e3      	mvns	r3, r4
 800dcea:	17db      	asrs	r3, r3, #31
 800dcec:	401c      	ands	r4, r3
 800dcee:	1b2c      	subs	r4, r5, r4
 800dcf0:	2c00      	cmp	r4, #0
 800dcf2:	dd18      	ble.n	800dd26 <_svfprintf_r+0x104a>
 800dcf4:	0039      	movs	r1, r7
 800dcf6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcf8:	483f      	ldr	r0, [pc, #252]	; (800ddf8 <_svfprintf_r+0x111c>)
 800dcfa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	3108      	adds	r1, #8
 800dd00:	6038      	str	r0, [r7, #0]
 800dd02:	2c10      	cmp	r4, #16
 800dd04:	dc7a      	bgt.n	800ddfc <_svfprintf_r+0x1120>
 800dd06:	607c      	str	r4, [r7, #4]
 800dd08:	18a4      	adds	r4, r4, r2
 800dd0a:	000f      	movs	r7, r1
 800dd0c:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd10:	2b07      	cmp	r3, #7
 800dd12:	dd08      	ble.n	800dd26 <_svfprintf_r+0x104a>
 800dd14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd18:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd1a:	f003 f8f5 	bl	8010f08 <__ssprint_r>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d000      	beq.n	800dd24 <_svfprintf_r+0x1048>
 800dd22:	e1ba      	b.n	800e09a <_svfprintf_r+0x13be>
 800dd24:	af2f      	add	r7, sp, #188	; 0xbc
 800dd26:	9b08      	ldr	r3, [sp, #32]
 800dd28:	195d      	adds	r5, r3, r5
 800dd2a:	0573      	lsls	r3, r6, #21
 800dd2c:	d50b      	bpl.n	800dd46 <_svfprintf_r+0x106a>
 800dd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d176      	bne.n	800de22 <_svfprintf_r+0x1146>
 800dd34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d176      	bne.n	800de28 <_svfprintf_r+0x114c>
 800dd3a:	9b08      	ldr	r3, [sp, #32]
 800dd3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd3e:	189b      	adds	r3, r3, r2
 800dd40:	429d      	cmp	r5, r3
 800dd42:	d900      	bls.n	800dd46 <_svfprintf_r+0x106a>
 800dd44:	001d      	movs	r5, r3
 800dd46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	db01      	blt.n	800dd52 <_svfprintf_r+0x1076>
 800dd4e:	07f3      	lsls	r3, r6, #31
 800dd50:	d516      	bpl.n	800dd80 <_svfprintf_r+0x10a4>
 800dd52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd5a:	607b      	str	r3, [r7, #4]
 800dd5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd5e:	3708      	adds	r7, #8
 800dd60:	189b      	adds	r3, r3, r2
 800dd62:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd66:	3301      	adds	r3, #1
 800dd68:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd6a:	2b07      	cmp	r3, #7
 800dd6c:	dd08      	ble.n	800dd80 <_svfprintf_r+0x10a4>
 800dd6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd70:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd72:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd74:	f003 f8c8 	bl	8010f08 <__ssprint_r>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d000      	beq.n	800dd7e <_svfprintf_r+0x10a2>
 800dd7c:	e18d      	b.n	800e09a <_svfprintf_r+0x13be>
 800dd7e:	af2f      	add	r7, sp, #188	; 0xbc
 800dd80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd82:	9b08      	ldr	r3, [sp, #32]
 800dd84:	4694      	mov	ip, r2
 800dd86:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dd88:	4463      	add	r3, ip
 800dd8a:	1b5b      	subs	r3, r3, r5
 800dd8c:	1b14      	subs	r4, r2, r4
 800dd8e:	429c      	cmp	r4, r3
 800dd90:	dd00      	ble.n	800dd94 <_svfprintf_r+0x10b8>
 800dd92:	001c      	movs	r4, r3
 800dd94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd96:	2c00      	cmp	r4, #0
 800dd98:	dd12      	ble.n	800ddc0 <_svfprintf_r+0x10e4>
 800dd9a:	18e3      	adds	r3, r4, r3
 800dd9c:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dda0:	603d      	str	r5, [r7, #0]
 800dda2:	3301      	adds	r3, #1
 800dda4:	607c      	str	r4, [r7, #4]
 800dda6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dda8:	3708      	adds	r7, #8
 800ddaa:	2b07      	cmp	r3, #7
 800ddac:	dd08      	ble.n	800ddc0 <_svfprintf_r+0x10e4>
 800ddae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddb2:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddb4:	f003 f8a8 	bl	8010f08 <__ssprint_r>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d000      	beq.n	800ddbe <_svfprintf_r+0x10e2>
 800ddbc:	e16d      	b.n	800e09a <_svfprintf_r+0x13be>
 800ddbe:	af2f      	add	r7, sp, #188	; 0xbc
 800ddc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ddc4:	2510      	movs	r5, #16
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	43e2      	mvns	r2, r4
 800ddca:	17d2      	asrs	r2, r2, #31
 800ddcc:	4014      	ands	r4, r2
 800ddce:	1b1c      	subs	r4, r3, r4
 800ddd0:	2c00      	cmp	r4, #0
 800ddd2:	dc00      	bgt.n	800ddd6 <_svfprintf_r+0x10fa>
 800ddd4:	e6b0      	b.n	800db38 <_svfprintf_r+0xe5c>
 800ddd6:	0039      	movs	r1, r7
 800ddd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ddda:	4807      	ldr	r0, [pc, #28]	; (800ddf8 <_svfprintf_r+0x111c>)
 800dddc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ddde:	3301      	adds	r3, #1
 800dde0:	3108      	adds	r1, #8
 800dde2:	6038      	str	r0, [r7, #0]
 800dde4:	2c10      	cmp	r4, #16
 800dde6:	dd00      	ble.n	800ddea <_svfprintf_r+0x110e>
 800dde8:	e096      	b.n	800df18 <_svfprintf_r+0x123c>
 800ddea:	1912      	adds	r2, r2, r4
 800ddec:	607c      	str	r4, [r7, #4]
 800ddee:	922e      	str	r2, [sp, #184]	; 0xb8
 800ddf0:	e6dd      	b.n	800dbae <_svfprintf_r+0xed2>
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	080142fe 	.word	0x080142fe
 800ddf8:	08014310 	.word	0x08014310
 800ddfc:	2010      	movs	r0, #16
 800ddfe:	1812      	adds	r2, r2, r0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	922e      	str	r2, [sp, #184]	; 0xb8
 800de04:	932d      	str	r3, [sp, #180]	; 0xb4
 800de06:	2b07      	cmp	r3, #7
 800de08:	dd08      	ble.n	800de1c <_svfprintf_r+0x1140>
 800de0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de0e:	aa2c      	add	r2, sp, #176	; 0xb0
 800de10:	f003 f87a 	bl	8010f08 <__ssprint_r>
 800de14:	2800      	cmp	r0, #0
 800de16:	d000      	beq.n	800de1a <_svfprintf_r+0x113e>
 800de18:	e13f      	b.n	800e09a <_svfprintf_r+0x13be>
 800de1a:	a92f      	add	r1, sp, #188	; 0xbc
 800de1c:	000f      	movs	r7, r1
 800de1e:	3c10      	subs	r4, #16
 800de20:	e768      	b.n	800dcf4 <_svfprintf_r+0x1018>
 800de22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de24:	2b00      	cmp	r3, #0
 800de26:	d05d      	beq.n	800dee4 <_svfprintf_r+0x1208>
 800de28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de2a:	3b01      	subs	r3, #1
 800de2c:	9310      	str	r3, [sp, #64]	; 0x40
 800de2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de36:	607b      	str	r3, [r7, #4]
 800de38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de3a:	3708      	adds	r7, #8
 800de3c:	189b      	adds	r3, r3, r2
 800de3e:	932e      	str	r3, [sp, #184]	; 0xb8
 800de40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de42:	3301      	adds	r3, #1
 800de44:	932d      	str	r3, [sp, #180]	; 0xb4
 800de46:	2b07      	cmp	r3, #7
 800de48:	dd08      	ble.n	800de5c <_svfprintf_r+0x1180>
 800de4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800de50:	f003 f85a 	bl	8010f08 <__ssprint_r>
 800de54:	2800      	cmp	r0, #0
 800de56:	d000      	beq.n	800de5a <_svfprintf_r+0x117e>
 800de58:	e11f      	b.n	800e09a <_svfprintf_r+0x13be>
 800de5a:	af2f      	add	r7, sp, #188	; 0xbc
 800de5c:	9b08      	ldr	r3, [sp, #32]
 800de5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de60:	189c      	adds	r4, r3, r2
 800de62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de64:	1b64      	subs	r4, r4, r5
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	429c      	cmp	r4, r3
 800de6a:	dd00      	ble.n	800de6e <_svfprintf_r+0x1192>
 800de6c:	001c      	movs	r4, r3
 800de6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de70:	2c00      	cmp	r4, #0
 800de72:	dd12      	ble.n	800de9a <_svfprintf_r+0x11be>
 800de74:	18e3      	adds	r3, r4, r3
 800de76:	932e      	str	r3, [sp, #184]	; 0xb8
 800de78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de7a:	603d      	str	r5, [r7, #0]
 800de7c:	3301      	adds	r3, #1
 800de7e:	607c      	str	r4, [r7, #4]
 800de80:	932d      	str	r3, [sp, #180]	; 0xb4
 800de82:	3708      	adds	r7, #8
 800de84:	2b07      	cmp	r3, #7
 800de86:	dd08      	ble.n	800de9a <_svfprintf_r+0x11be>
 800de88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800de8e:	f003 f83b 	bl	8010f08 <__ssprint_r>
 800de92:	2800      	cmp	r0, #0
 800de94:	d000      	beq.n	800de98 <_svfprintf_r+0x11bc>
 800de96:	e100      	b.n	800e09a <_svfprintf_r+0x13be>
 800de98:	af2f      	add	r7, sp, #188	; 0xbc
 800de9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	43e3      	mvns	r3, r4
 800dea0:	17db      	asrs	r3, r3, #31
 800dea2:	401c      	ands	r4, r3
 800dea4:	1b14      	subs	r4, r2, r4
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	dd18      	ble.n	800dedc <_svfprintf_r+0x1200>
 800deaa:	0039      	movs	r1, r7
 800deac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800deae:	48aa      	ldr	r0, [pc, #680]	; (800e158 <_svfprintf_r+0x147c>)
 800deb0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800deb2:	3301      	adds	r3, #1
 800deb4:	3108      	adds	r1, #8
 800deb6:	6038      	str	r0, [r7, #0]
 800deb8:	2c10      	cmp	r4, #16
 800deba:	dc1a      	bgt.n	800def2 <_svfprintf_r+0x1216>
 800debc:	1912      	adds	r2, r2, r4
 800debe:	607c      	str	r4, [r7, #4]
 800dec0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dec2:	000f      	movs	r7, r1
 800dec4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dec6:	2b07      	cmp	r3, #7
 800dec8:	dd08      	ble.n	800dedc <_svfprintf_r+0x1200>
 800deca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800decc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dece:	aa2c      	add	r2, sp, #176	; 0xb0
 800ded0:	f003 f81a 	bl	8010f08 <__ssprint_r>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d000      	beq.n	800deda <_svfprintf_r+0x11fe>
 800ded8:	e0df      	b.n	800e09a <_svfprintf_r+0x13be>
 800deda:	af2f      	add	r7, sp, #188	; 0xbc
 800dedc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	18ed      	adds	r5, r5, r3
 800dee2:	e724      	b.n	800dd2e <_svfprintf_r+0x1052>
 800dee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dee6:	3b01      	subs	r3, #1
 800dee8:	9312      	str	r3, [sp, #72]	; 0x48
 800deea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deec:	3b01      	subs	r3, #1
 800deee:	9311      	str	r3, [sp, #68]	; 0x44
 800def0:	e79d      	b.n	800de2e <_svfprintf_r+0x1152>
 800def2:	2010      	movs	r0, #16
 800def4:	1812      	adds	r2, r2, r0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	922e      	str	r2, [sp, #184]	; 0xb8
 800defa:	932d      	str	r3, [sp, #180]	; 0xb4
 800defc:	2b07      	cmp	r3, #7
 800defe:	dd08      	ble.n	800df12 <_svfprintf_r+0x1236>
 800df00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df04:	aa2c      	add	r2, sp, #176	; 0xb0
 800df06:	f002 ffff 	bl	8010f08 <__ssprint_r>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d000      	beq.n	800df10 <_svfprintf_r+0x1234>
 800df0e:	e0c4      	b.n	800e09a <_svfprintf_r+0x13be>
 800df10:	a92f      	add	r1, sp, #188	; 0xbc
 800df12:	000f      	movs	r7, r1
 800df14:	3c10      	subs	r4, #16
 800df16:	e7c8      	b.n	800deaa <_svfprintf_r+0x11ce>
 800df18:	3210      	adds	r2, #16
 800df1a:	607d      	str	r5, [r7, #4]
 800df1c:	922e      	str	r2, [sp, #184]	; 0xb8
 800df1e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df20:	2b07      	cmp	r3, #7
 800df22:	dd08      	ble.n	800df36 <_svfprintf_r+0x125a>
 800df24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df28:	aa2c      	add	r2, sp, #176	; 0xb0
 800df2a:	f002 ffed 	bl	8010f08 <__ssprint_r>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d000      	beq.n	800df34 <_svfprintf_r+0x1258>
 800df32:	e0b2      	b.n	800e09a <_svfprintf_r+0x13be>
 800df34:	a92f      	add	r1, sp, #188	; 0xbc
 800df36:	000f      	movs	r7, r1
 800df38:	3c10      	subs	r4, #16
 800df3a:	e74c      	b.n	800ddd6 <_svfprintf_r+0x10fa>
 800df3c:	003c      	movs	r4, r7
 800df3e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800df40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df44:	3101      	adds	r1, #1
 800df46:	3301      	adds	r3, #1
 800df48:	3408      	adds	r4, #8
 800df4a:	2a01      	cmp	r2, #1
 800df4c:	dc03      	bgt.n	800df56 <_svfprintf_r+0x127a>
 800df4e:	2201      	movs	r2, #1
 800df50:	4216      	tst	r6, r2
 800df52:	d100      	bne.n	800df56 <_svfprintf_r+0x127a>
 800df54:	e07f      	b.n	800e056 <_svfprintf_r+0x137a>
 800df56:	9a08      	ldr	r2, [sp, #32]
 800df58:	912e      	str	r1, [sp, #184]	; 0xb8
 800df5a:	603a      	str	r2, [r7, #0]
 800df5c:	2201      	movs	r2, #1
 800df5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df60:	607a      	str	r2, [r7, #4]
 800df62:	2b07      	cmp	r3, #7
 800df64:	dd08      	ble.n	800df78 <_svfprintf_r+0x129c>
 800df66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800df6c:	f002 ffcc 	bl	8010f08 <__ssprint_r>
 800df70:	2800      	cmp	r0, #0
 800df72:	d000      	beq.n	800df76 <_svfprintf_r+0x129a>
 800df74:	e091      	b.n	800e09a <_svfprintf_r+0x13be>
 800df76:	ac2f      	add	r4, sp, #188	; 0xbc
 800df78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800df7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df80:	6063      	str	r3, [r4, #4]
 800df82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df84:	3408      	adds	r4, #8
 800df86:	189b      	adds	r3, r3, r2
 800df88:	932e      	str	r3, [sp, #184]	; 0xb8
 800df8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df8c:	3301      	adds	r3, #1
 800df8e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df90:	2b07      	cmp	r3, #7
 800df92:	dd07      	ble.n	800dfa4 <_svfprintf_r+0x12c8>
 800df94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df98:	aa2c      	add	r2, sp, #176	; 0xb0
 800df9a:	f002 ffb5 	bl	8010f08 <__ssprint_r>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d17b      	bne.n	800e09a <_svfprintf_r+0x13be>
 800dfa2:	ac2f      	add	r4, sp, #188	; 0xbc
 800dfa4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dfaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dfac:	9309      	str	r3, [sp, #36]	; 0x24
 800dfae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfb0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800dfb2:	1e5d      	subs	r5, r3, #1
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f7f2 fa47 	bl	8000448 <__aeabi_dcmpeq>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d126      	bne.n	800e00c <_svfprintf_r+0x1330>
 800dfbe:	9b08      	ldr	r3, [sp, #32]
 800dfc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	1e7b      	subs	r3, r7, #1
 800dfca:	3201      	adds	r2, #1
 800dfcc:	185b      	adds	r3, r3, r1
 800dfce:	6065      	str	r5, [r4, #4]
 800dfd0:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfd2:	922d      	str	r2, [sp, #180]	; 0xb4
 800dfd4:	3408      	adds	r4, #8
 800dfd6:	2a07      	cmp	r2, #7
 800dfd8:	dd07      	ble.n	800dfea <_svfprintf_r+0x130e>
 800dfda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfde:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfe0:	f002 ff92 	bl	8010f08 <__ssprint_r>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d158      	bne.n	800e09a <_svfprintf_r+0x13be>
 800dfe8:	ac2f      	add	r4, sp, #188	; 0xbc
 800dfea:	ab28      	add	r3, sp, #160	; 0xa0
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dff0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dff2:	6063      	str	r3, [r4, #4]
 800dff4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dff6:	189b      	adds	r3, r3, r2
 800dff8:	932e      	str	r3, [sp, #184]	; 0xb8
 800dffa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dffc:	3301      	adds	r3, #1
 800dffe:	932d      	str	r3, [sp, #180]	; 0xb4
 800e000:	2b07      	cmp	r3, #7
 800e002:	dd00      	ble.n	800e006 <_svfprintf_r+0x132a>
 800e004:	e638      	b.n	800dc78 <_svfprintf_r+0xf9c>
 800e006:	3408      	adds	r4, #8
 800e008:	0027      	movs	r7, r4
 800e00a:	e595      	b.n	800db38 <_svfprintf_r+0xe5c>
 800e00c:	2710      	movs	r7, #16
 800e00e:	2d00      	cmp	r5, #0
 800e010:	ddeb      	ble.n	800dfea <_svfprintf_r+0x130e>
 800e012:	0021      	movs	r1, r4
 800e014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e016:	4850      	ldr	r0, [pc, #320]	; (800e158 <_svfprintf_r+0x147c>)
 800e018:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e01a:	3301      	adds	r3, #1
 800e01c:	3108      	adds	r1, #8
 800e01e:	6020      	str	r0, [r4, #0]
 800e020:	2d10      	cmp	r5, #16
 800e022:	dc07      	bgt.n	800e034 <_svfprintf_r+0x1358>
 800e024:	6065      	str	r5, [r4, #4]
 800e026:	000c      	movs	r4, r1
 800e028:	18ad      	adds	r5, r5, r2
 800e02a:	952e      	str	r5, [sp, #184]	; 0xb8
 800e02c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e02e:	2b07      	cmp	r3, #7
 800e030:	dddb      	ble.n	800dfea <_svfprintf_r+0x130e>
 800e032:	e7d2      	b.n	800dfda <_svfprintf_r+0x12fe>
 800e034:	3210      	adds	r2, #16
 800e036:	6067      	str	r7, [r4, #4]
 800e038:	922e      	str	r2, [sp, #184]	; 0xb8
 800e03a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e03c:	2b07      	cmp	r3, #7
 800e03e:	dd07      	ble.n	800e050 <_svfprintf_r+0x1374>
 800e040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e042:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e044:	aa2c      	add	r2, sp, #176	; 0xb0
 800e046:	f002 ff5f 	bl	8010f08 <__ssprint_r>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d125      	bne.n	800e09a <_svfprintf_r+0x13be>
 800e04e:	a92f      	add	r1, sp, #188	; 0xbc
 800e050:	000c      	movs	r4, r1
 800e052:	3d10      	subs	r5, #16
 800e054:	e7dd      	b.n	800e012 <_svfprintf_r+0x1336>
 800e056:	9808      	ldr	r0, [sp, #32]
 800e058:	912e      	str	r1, [sp, #184]	; 0xb8
 800e05a:	c705      	stmia	r7!, {r0, r2}
 800e05c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e05e:	e7e6      	b.n	800e02e <_svfprintf_r+0x1352>
 800e060:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e062:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e064:	2510      	movs	r5, #16
 800e066:	1a9c      	subs	r4, r3, r2
 800e068:	2c00      	cmp	r4, #0
 800e06a:	dc00      	bgt.n	800e06e <_svfprintf_r+0x1392>
 800e06c:	e567      	b.n	800db3e <_svfprintf_r+0xe62>
 800e06e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e070:	493a      	ldr	r1, [pc, #232]	; (800e15c <_svfprintf_r+0x1480>)
 800e072:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e074:	3301      	adds	r3, #1
 800e076:	6039      	str	r1, [r7, #0]
 800e078:	2c10      	cmp	r4, #16
 800e07a:	dc19      	bgt.n	800e0b0 <_svfprintf_r+0x13d4>
 800e07c:	607c      	str	r4, [r7, #4]
 800e07e:	18a4      	adds	r4, r4, r2
 800e080:	942e      	str	r4, [sp, #184]	; 0xb8
 800e082:	932d      	str	r3, [sp, #180]	; 0xb4
 800e084:	2b07      	cmp	r3, #7
 800e086:	dc00      	bgt.n	800e08a <_svfprintf_r+0x13ae>
 800e088:	e559      	b.n	800db3e <_svfprintf_r+0xe62>
 800e08a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e08c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e08e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e090:	f002 ff3a 	bl	8010f08 <__ssprint_r>
 800e094:	2800      	cmp	r0, #0
 800e096:	d100      	bne.n	800e09a <_svfprintf_r+0x13be>
 800e098:	e551      	b.n	800db3e <_svfprintf_r+0xe62>
 800e09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <_svfprintf_r+0x13c8>
 800e0a0:	f7ff f845 	bl	800d12e <_svfprintf_r+0x452>
 800e0a4:	0019      	movs	r1, r3
 800e0a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0a8:	f7fd fd80 	bl	800bbac <_free_r>
 800e0ac:	f7ff f83f 	bl	800d12e <_svfprintf_r+0x452>
 800e0b0:	3210      	adds	r2, #16
 800e0b2:	607d      	str	r5, [r7, #4]
 800e0b4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e0b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	2b07      	cmp	r3, #7
 800e0bc:	dd07      	ble.n	800e0ce <_svfprintf_r+0x13f2>
 800e0be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0c2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0c4:	f002 ff20 	bl	8010f08 <__ssprint_r>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1e6      	bne.n	800e09a <_svfprintf_r+0x13be>
 800e0cc:	af2f      	add	r7, sp, #188	; 0xbc
 800e0ce:	3c10      	subs	r4, #16
 800e0d0:	e7cd      	b.n	800e06e <_svfprintf_r+0x1392>
 800e0d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0d6:	f7fd fd69 	bl	800bbac <_free_r>
 800e0da:	e549      	b.n	800db70 <_svfprintf_r+0xe94>
 800e0dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <_svfprintf_r+0x140a>
 800e0e2:	f7ff f824 	bl	800d12e <_svfprintf_r+0x452>
 800e0e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0ea:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0ec:	f002 ff0c 	bl	8010f08 <__ssprint_r>
 800e0f0:	f7ff f81d 	bl	800d12e <_svfprintf_r+0x452>
 800e0f4:	0034      	movs	r4, r6
 800e0f6:	2a00      	cmp	r2, #0
 800e0f8:	d101      	bne.n	800e0fe <_svfprintf_r+0x1422>
 800e0fa:	f7fe ff8c 	bl	800d016 <_svfprintf_r+0x33a>
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d101      	bne.n	800e106 <_svfprintf_r+0x142a>
 800e102:	f7ff fc01 	bl	800d908 <_svfprintf_r+0xc2c>
 800e106:	2b02      	cmp	r3, #2
 800e108:	d100      	bne.n	800e10c <_svfprintf_r+0x1430>
 800e10a:	e459      	b.n	800d9c0 <_svfprintf_r+0xce4>
 800e10c:	2507      	movs	r5, #7
 800e10e:	ab58      	add	r3, sp, #352	; 0x160
 800e110:	9308      	str	r3, [sp, #32]
 800e112:	9a08      	ldr	r2, [sp, #32]
 800e114:	0013      	movs	r3, r2
 800e116:	3b01      	subs	r3, #1
 800e118:	9308      	str	r3, [sp, #32]
 800e11a:	9b06      	ldr	r3, [sp, #24]
 800e11c:	9908      	ldr	r1, [sp, #32]
 800e11e:	402b      	ands	r3, r5
 800e120:	3330      	adds	r3, #48	; 0x30
 800e122:	700b      	strb	r3, [r1, #0]
 800e124:	9907      	ldr	r1, [sp, #28]
 800e126:	074e      	lsls	r6, r1, #29
 800e128:	9906      	ldr	r1, [sp, #24]
 800e12a:	08c8      	lsrs	r0, r1, #3
 800e12c:	9907      	ldr	r1, [sp, #28]
 800e12e:	4306      	orrs	r6, r0
 800e130:	08c9      	lsrs	r1, r1, #3
 800e132:	9107      	str	r1, [sp, #28]
 800e134:	0031      	movs	r1, r6
 800e136:	9807      	ldr	r0, [sp, #28]
 800e138:	9606      	str	r6, [sp, #24]
 800e13a:	4301      	orrs	r1, r0
 800e13c:	d1e9      	bne.n	800e112 <_svfprintf_r+0x1436>
 800e13e:	07e1      	lsls	r1, r4, #31
 800e140:	d400      	bmi.n	800e144 <_svfprintf_r+0x1468>
 800e142:	e42a      	b.n	800d99a <_svfprintf_r+0xcbe>
 800e144:	2b30      	cmp	r3, #48	; 0x30
 800e146:	d100      	bne.n	800e14a <_svfprintf_r+0x146e>
 800e148:	e427      	b.n	800d99a <_svfprintf_r+0xcbe>
 800e14a:	2130      	movs	r1, #48	; 0x30
 800e14c:	9b08      	ldr	r3, [sp, #32]
 800e14e:	3b01      	subs	r3, #1
 800e150:	7019      	strb	r1, [r3, #0]
 800e152:	1e93      	subs	r3, r2, #2
 800e154:	9308      	str	r3, [sp, #32]
 800e156:	e420      	b.n	800d99a <_svfprintf_r+0xcbe>
 800e158:	08014310 	.word	0x08014310
 800e15c:	08014300 	.word	0x08014300

0800e160 <__ssvfscanf_r>:
 800e160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e162:	4ca7      	ldr	r4, [pc, #668]	; (800e400 <__ssvfscanf_r+0x2a0>)
 800e164:	44a5      	add	sp, r4
 800e166:	af02      	add	r7, sp, #8
 800e168:	633b      	str	r3, [r7, #48]	; 0x30
 800e16a:	000b      	movs	r3, r1
 800e16c:	6378      	str	r0, [r7, #52]	; 0x34
 800e16e:	6479      	str	r1, [r7, #68]	; 0x44
 800e170:	61ba      	str	r2, [r7, #24]
 800e172:	220c      	movs	r2, #12
 800e174:	5e9a      	ldrsh	r2, [r3, r2]
 800e176:	2380      	movs	r3, #128	; 0x80
 800e178:	019b      	lsls	r3, r3, #6
 800e17a:	421a      	tst	r2, r3
 800e17c:	d105      	bne.n	800e18a <__ssvfscanf_r+0x2a>
 800e17e:	4313      	orrs	r3, r2
 800e180:	818b      	strh	r3, [r1, #12]
 800e182:	4aa0      	ldr	r2, [pc, #640]	; (800e404 <__ssvfscanf_r+0x2a4>)
 800e184:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e186:	4013      	ands	r3, r2
 800e188:	664b      	str	r3, [r1, #100]	; 0x64
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]
 800e18e:	643b      	str	r3, [r7, #64]	; 0x40
 800e190:	62bb      	str	r3, [r7, #40]	; 0x28
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
 800e194:	63bb      	str	r3, [r7, #56]	; 0x38
 800e196:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	69ba      	ldr	r2, [r7, #24]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	3201      	adds	r2, #1
 800e1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1a2:	61ba      	str	r2, [r7, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d100      	bne.n	800e1aa <__ssvfscanf_r+0x4a>
 800e1a8:	e0d7      	b.n	800e35a <__ssvfscanf_r+0x1fa>
 800e1aa:	2608      	movs	r6, #8
 800e1ac:	2108      	movs	r1, #8
 800e1ae:	4a96      	ldr	r2, [pc, #600]	; (800e408 <__ssvfscanf_r+0x2a8>)
 800e1b0:	5cd2      	ldrb	r2, [r2, r3]
 800e1b2:	4016      	ands	r6, r2
 800e1b4:	420a      	tst	r2, r1
 800e1b6:	d01d      	beq.n	800e1f4 <__ssvfscanf_r+0x94>
 800e1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd12      	ble.n	800e1e6 <__ssvfscanf_r+0x86>
 800e1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c2:	4991      	ldr	r1, [pc, #580]	; (800e408 <__ssvfscanf_r+0x2a8>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	5c8a      	ldrb	r2, [r1, r2]
 800e1ca:	2108      	movs	r1, #8
 800e1cc:	420a      	tst	r2, r1
 800e1ce:	d0e3      	beq.n	800e198 <__ssvfscanf_r+0x38>
 800e1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1d4:	3201      	adds	r2, #1
 800e1d6:	63ba      	str	r2, [r7, #56]	; 0x38
 800e1d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1da:	3301      	adds	r3, #1
 800e1dc:	6852      	ldr	r2, [r2, #4]
 800e1de:	600b      	str	r3, [r1, #0]
 800e1e0:	3a01      	subs	r2, #1
 800e1e2:	604a      	str	r2, [r1, #4]
 800e1e4:	e7e8      	b.n	800e1b8 <__ssvfscanf_r+0x58>
 800e1e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1ea:	f002 ff4d 	bl	8011088 <__ssrefill_r>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d0e6      	beq.n	800e1c0 <__ssvfscanf_r+0x60>
 800e1f2:	e7d1      	b.n	800e198 <__ssvfscanf_r+0x38>
 800e1f4:	2b25      	cmp	r3, #37	; 0x25
 800e1f6:	d165      	bne.n	800e2c4 <__ssvfscanf_r+0x164>
 800e1f8:	250a      	movs	r5, #10
 800e1fa:	2480      	movs	r4, #128	; 0x80
 800e1fc:	69ba      	ldr	r2, [r7, #24]
 800e1fe:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e200:	3b16      	subs	r3, #22
 800e202:	69b9      	ldr	r1, [r7, #24]
 800e204:	3101      	adds	r1, #1
 800e206:	61b9      	str	r1, [r7, #24]
 800e208:	7811      	ldrb	r1, [r2, #0]
 800e20a:	0008      	movs	r0, r1
 800e20c:	3825      	subs	r0, #37	; 0x25
 800e20e:	2855      	cmp	r0, #85	; 0x55
 800e210:	d900      	bls.n	800e214 <__ssvfscanf_r+0xb4>
 800e212:	e170      	b.n	800e4f6 <__ssvfscanf_r+0x396>
 800e214:	f7f1 ff88 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e218:	016f0056 	.word	0x016f0056
 800e21c:	016f016f 	.word	0x016f016f
 800e220:	0081016f 	.word	0x0081016f
 800e224:	016f016f 	.word	0x016f016f
 800e228:	016f016f 	.word	0x016f016f
 800e22c:	00b8016f 	.word	0x00b8016f
 800e230:	00b800b8 	.word	0x00b800b8
 800e234:	00b800b8 	.word	0x00b800b8
 800e238:	00b800b8 	.word	0x00b800b8
 800e23c:	00b800b8 	.word	0x00b800b8
 800e240:	016f00b8 	.word	0x016f00b8
 800e244:	016f016f 	.word	0x016f016f
 800e248:	016f016f 	.word	0x016f016f
 800e24c:	016f016f 	.word	0x016f016f
 800e250:	016f00d8 	.word	0x016f00d8
 800e254:	00c1010a 	.word	0x00c1010a
 800e258:	00d800d8 	.word	0x00d800d8
 800e25c:	016f00d8 	.word	0x016f00d8
 800e260:	016f016f 	.word	0x016f016f
 800e264:	009f016f 	.word	0x009f016f
 800e268:	016f016f 	.word	0x016f016f
 800e26c:	016f00c9 	.word	0x016f00c9
 800e270:	016f016f 	.word	0x016f016f
 800e274:	016f00f0 	.word	0x016f00f0
 800e278:	016f016f 	.word	0x016f016f
 800e27c:	00d1016f 	.word	0x00d1016f
 800e280:	016f016f 	.word	0x016f016f
 800e284:	016f00fe 	.word	0x016f00fe
 800e288:	016f016f 	.word	0x016f016f
 800e28c:	016f016f 	.word	0x016f016f
 800e290:	016f00d8 	.word	0x016f00d8
 800e294:	00c3010c 	.word	0x00c3010c
 800e298:	00d800d8 	.word	0x00d800d8
 800e29c:	009400d8 	.word	0x009400d8
 800e2a0:	009f012f 	.word	0x009f012f
 800e2a4:	0088016f 	.word	0x0088016f
 800e2a8:	011200a9 	.word	0x011200a9
 800e2ac:	011000cb 	.word	0x011000cb
 800e2b0:	016f016f 	.word	0x016f016f
 800e2b4:	00a600f2 	.word	0x00a600f2
 800e2b8:	016f00cf 	.word	0x016f00cf
 800e2bc:	00d1016f 	.word	0x00d1016f
 800e2c0:	00a6016f 	.word	0x00a6016f
 800e2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dd12      	ble.n	800e2f2 <__ssvfscanf_r+0x192>
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ce:	69ba      	ldr	r2, [r7, #24]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3a01      	subs	r2, #1
 800e2d4:	7819      	ldrb	r1, [r3, #0]
 800e2d6:	7812      	ldrb	r2, [r2, #0]
 800e2d8:	4291      	cmp	r1, r2
 800e2da:	d13e      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e2dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2e0:	6852      	ldr	r2, [r2, #4]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	600b      	str	r3, [r1, #0]
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e8:	3a01      	subs	r2, #1
 800e2ea:	604a      	str	r2, [r1, #4]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2f0:	e752      	b.n	800e198 <__ssvfscanf_r+0x38>
 800e2f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2f6:	f002 fec7 	bl	8011088 <__ssrefill_r>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d0e6      	beq.n	800e2cc <__ssvfscanf_r+0x16c>
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	2b00      	cmp	r3, #0
 800e302:	d003      	beq.n	800e30c <__ssvfscanf_r+0x1ac>
 800e304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e306:	899b      	ldrh	r3, [r3, #12]
 800e308:	065b      	lsls	r3, r3, #25
 800e30a:	d526      	bpl.n	800e35a <__ssvfscanf_r+0x1fa>
 800e30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d000      	beq.n	800e314 <__ssvfscanf_r+0x1b4>
 800e312:	e0f6      	b.n	800e502 <__ssvfscanf_r+0x3a2>
 800e314:	3b01      	subs	r3, #1
 800e316:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e318:	e104      	b.n	800e524 <__ssvfscanf_r+0x3c4>
 800e31a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e31c:	4332      	orrs	r2, r6
 800e31e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e320:	d11b      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e322:	2610      	movs	r6, #16
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	e76c      	b.n	800e202 <__ssvfscanf_r+0xa2>
 800e328:	421e      	tst	r6, r3
 800e32a:	d116      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e32c:	7851      	ldrb	r1, [r2, #1]
 800e32e:	296c      	cmp	r1, #108	; 0x6c
 800e330:	d103      	bne.n	800e33a <__ssvfscanf_r+0x1da>
 800e332:	3202      	adds	r2, #2
 800e334:	61ba      	str	r2, [r7, #24]
 800e336:	2202      	movs	r2, #2
 800e338:	e000      	b.n	800e33c <__ssvfscanf_r+0x1dc>
 800e33a:	2201      	movs	r2, #1
 800e33c:	4316      	orrs	r6, r2
 800e33e:	e7f1      	b.n	800e324 <__ssvfscanf_r+0x1c4>
 800e340:	421e      	tst	r6, r3
 800e342:	d10a      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e344:	7851      	ldrb	r1, [r2, #1]
 800e346:	2968      	cmp	r1, #104	; 0x68
 800e348:	d103      	bne.n	800e352 <__ssvfscanf_r+0x1f2>
 800e34a:	3202      	adds	r2, #2
 800e34c:	61ba      	str	r2, [r7, #24]
 800e34e:	2208      	movs	r2, #8
 800e350:	e7f4      	b.n	800e33c <__ssvfscanf_r+0x1dc>
 800e352:	2204      	movs	r2, #4
 800e354:	e7f2      	b.n	800e33c <__ssvfscanf_r+0x1dc>
 800e356:	421e      	tst	r6, r3
 800e358:	d0ed      	beq.n	800e336 <__ssvfscanf_r+0x1d6>
 800e35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d000      	beq.n	800e362 <__ssvfscanf_r+0x202>
 800e360:	e0da      	b.n	800e518 <__ssvfscanf_r+0x3b8>
 800e362:	e0df      	b.n	800e524 <__ssvfscanf_r+0x3c4>
 800e364:	421e      	tst	r6, r3
 800e366:	d0dd      	beq.n	800e324 <__ssvfscanf_r+0x1c4>
 800e368:	e7f7      	b.n	800e35a <__ssvfscanf_r+0x1fa>
 800e36a:	228f      	movs	r2, #143	; 0x8f
 800e36c:	218f      	movs	r1, #143	; 0x8f
 800e36e:	4032      	ands	r2, r6
 800e370:	420e      	tst	r6, r1
 800e372:	d1f2      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e374:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e376:	2900      	cmp	r1, #0
 800e378:	d104      	bne.n	800e384 <__ssvfscanf_r+0x224>
 800e37a:	b082      	sub	sp, #8
 800e37c:	a902      	add	r1, sp, #8
 800e37e:	6439      	str	r1, [r7, #64]	; 0x40
 800e380:	600a      	str	r2, [r1, #0]
 800e382:	604a      	str	r2, [r1, #4]
 800e384:	4326      	orrs	r6, r4
 800e386:	e7cd      	b.n	800e324 <__ssvfscanf_r+0x1c4>
 800e388:	228f      	movs	r2, #143	; 0x8f
 800e38a:	4216      	tst	r6, r2
 800e38c:	d1e5      	bne.n	800e35a <__ssvfscanf_r+0x1fa>
 800e38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e390:	436a      	muls	r2, r5
 800e392:	3a30      	subs	r2, #48	; 0x30
 800e394:	188a      	adds	r2, r1, r2
 800e396:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e398:	e7c4      	b.n	800e324 <__ssvfscanf_r+0x1c4>
 800e39a:	2301      	movs	r3, #1
 800e39c:	431e      	orrs	r6, r3
 800e39e:	4b1b      	ldr	r3, [pc, #108]	; (800e40c <__ssvfscanf_r+0x2ac>)
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	230a      	movs	r3, #10
 800e3a4:	2403      	movs	r4, #3
 800e3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a8:	e00f      	b.n	800e3ca <__ssvfscanf_r+0x26a>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	431e      	orrs	r6, r3
 800e3ae:	4b18      	ldr	r3, [pc, #96]	; (800e410 <__ssvfscanf_r+0x2b0>)
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	2308      	movs	r3, #8
 800e3b4:	e7f6      	b.n	800e3a4 <__ssvfscanf_r+0x244>
 800e3b6:	4b16      	ldr	r3, [pc, #88]	; (800e410 <__ssvfscanf_r+0x2b0>)
 800e3b8:	e7f2      	b.n	800e3a0 <__ssvfscanf_r+0x240>
 800e3ba:	2380      	movs	r3, #128	; 0x80
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	431e      	orrs	r6, r3
 800e3c0:	4b13      	ldr	r3, [pc, #76]	; (800e410 <__ssvfscanf_r+0x2b0>)
 800e3c2:	617b      	str	r3, [r7, #20]
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	e7ed      	b.n	800e3a4 <__ssvfscanf_r+0x244>
 800e3c8:	2404      	movs	r4, #4
 800e3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	dd55      	ble.n	800e47e <__ssvfscanf_r+0x31e>
 800e3d2:	0673      	lsls	r3, r6, #25
 800e3d4:	d407      	bmi.n	800e3e6 <__ssvfscanf_r+0x286>
 800e3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d8:	490b      	ldr	r1, [pc, #44]	; (800e408 <__ssvfscanf_r+0x2a8>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	5c8a      	ldrb	r2, [r1, r2]
 800e3e0:	2108      	movs	r1, #8
 800e3e2:	420a      	tst	r2, r1
 800e3e4:	d152      	bne.n	800e48c <__ssvfscanf_r+0x32c>
 800e3e6:	1e60      	subs	r0, r4, #1
 800e3e8:	2803      	cmp	r0, #3
 800e3ea:	d863      	bhi.n	800e4b4 <__ssvfscanf_r+0x354>
 800e3ec:	f7f1 fe9c 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e3f0:	03bd01da 	.word	0x03bd01da
 800e3f4:	068a0579 	.word	0x068a0579
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	431e      	orrs	r6, r3
 800e3fc:	2402      	movs	r4, #2
 800e3fe:	e7e4      	b.n	800e3ca <__ssvfscanf_r+0x26a>
 800e400:	fffffd34 	.word	0xfffffd34
 800e404:	ffffdfff 	.word	0xffffdfff
 800e408:	08013ff9 	.word	0x08013ff9
 800e40c:	0800b5b1 	.word	0x0800b5b1
 800e410:	08010bb9 	.word	0x08010bb9
 800e414:	2248      	movs	r2, #72	; 0x48
 800e416:	2318      	movs	r3, #24
 800e418:	189b      	adds	r3, r3, r2
 800e41a:	19d8      	adds	r0, r3, r7
 800e41c:	69b9      	ldr	r1, [r7, #24]
 800e41e:	f001 f9d7 	bl	800f7d0 <__sccl>
 800e422:	2340      	movs	r3, #64	; 0x40
 800e424:	2401      	movs	r4, #1
 800e426:	61b8      	str	r0, [r7, #24]
 800e428:	431e      	orrs	r6, r3
 800e42a:	e7ce      	b.n	800e3ca <__ssvfscanf_r+0x26a>
 800e42c:	2301      	movs	r3, #1
 800e42e:	431e      	orrs	r6, r3
 800e430:	2340      	movs	r3, #64	; 0x40
 800e432:	2400      	movs	r4, #0
 800e434:	431e      	orrs	r6, r3
 800e436:	e7c8      	b.n	800e3ca <__ssvfscanf_r+0x26a>
 800e438:	2388      	movs	r3, #136	; 0x88
 800e43a:	e7bf      	b.n	800e3bc <__ssvfscanf_r+0x25c>
 800e43c:	06f3      	lsls	r3, r6, #27
 800e43e:	d500      	bpl.n	800e442 <__ssvfscanf_r+0x2e2>
 800e440:	e6aa      	b.n	800e198 <__ssvfscanf_r+0x38>
 800e442:	2108      	movs	r1, #8
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	cb04      	ldmia	r3!, {r2}
 800e448:	420e      	tst	r6, r1
 800e44a:	d003      	beq.n	800e454 <__ssvfscanf_r+0x2f4>
 800e44c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e44e:	7011      	strb	r1, [r2, #0]
 800e450:	633b      	str	r3, [r7, #48]	; 0x30
 800e452:	e6a1      	b.n	800e198 <__ssvfscanf_r+0x38>
 800e454:	0771      	lsls	r1, r6, #29
 800e456:	d502      	bpl.n	800e45e <__ssvfscanf_r+0x2fe>
 800e458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e45a:	8011      	strh	r1, [r2, #0]
 800e45c:	e7f8      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800e45e:	07f1      	lsls	r1, r6, #31
 800e460:	d502      	bpl.n	800e468 <__ssvfscanf_r+0x308>
 800e462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e464:	6011      	str	r1, [r2, #0]
 800e466:	e7f3      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800e468:	07b6      	lsls	r6, r6, #30
 800e46a:	d5fa      	bpl.n	800e462 <__ssvfscanf_r+0x302>
 800e46c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e46e:	6011      	str	r1, [r2, #0]
 800e470:	17c9      	asrs	r1, r1, #31
 800e472:	6051      	str	r1, [r2, #4]
 800e474:	e7ec      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800e476:	4ba2      	ldr	r3, [pc, #648]	; (800e700 <__ssvfscanf_r+0x5a0>)
 800e478:	617b      	str	r3, [r7, #20]
 800e47a:	2300      	movs	r3, #0
 800e47c:	e792      	b.n	800e3a4 <__ssvfscanf_r+0x244>
 800e47e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e480:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e482:	f002 fe01 	bl	8011088 <__ssrefill_r>
 800e486:	2800      	cmp	r0, #0
 800e488:	d0a3      	beq.n	800e3d2 <__ssvfscanf_r+0x272>
 800e48a:	e738      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e48e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e490:	3201      	adds	r2, #1
 800e492:	63ba      	str	r2, [r7, #56]	; 0x38
 800e494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e496:	6852      	ldr	r2, [r2, #4]
 800e498:	3a01      	subs	r2, #1
 800e49a:	604a      	str	r2, [r1, #4]
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	dd02      	ble.n	800e4a6 <__ssvfscanf_r+0x346>
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	600b      	str	r3, [r1, #0]
 800e4a4:	e797      	b.n	800e3d6 <__ssvfscanf_r+0x276>
 800e4a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e4aa:	f002 fded 	bl	8011088 <__ssrefill_r>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d091      	beq.n	800e3d6 <__ssvfscanf_r+0x276>
 800e4b2:	e724      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e4b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	d100      	bne.n	800e4be <__ssvfscanf_r+0x35e>
 800e4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4be:	2210      	movs	r2, #16
 800e4c0:	0034      	movs	r4, r6
 800e4c2:	4032      	ands	r2, r6
 800e4c4:	623a      	str	r2, [r7, #32]
 800e4c6:	401c      	ands	r4, r3
 800e4c8:	421e      	tst	r6, r3
 800e4ca:	d100      	bne.n	800e4ce <__ssvfscanf_r+0x36e>
 800e4cc:	e0f3      	b.n	800e6b6 <__ssvfscanf_r+0x556>
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	d000      	beq.n	800e4d4 <__ssvfscanf_r+0x374>
 800e4d2:	e0b6      	b.n	800e642 <__ssvfscanf_r+0x4e2>
 800e4d4:	2080      	movs	r0, #128	; 0x80
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d8:	cb10      	ldmia	r3!, {r4}
 800e4da:	613b      	str	r3, [r7, #16]
 800e4dc:	4206      	tst	r6, r0
 800e4de:	d100      	bne.n	800e4e2 <__ssvfscanf_r+0x382>
 800e4e0:	e0b7      	b.n	800e652 <__ssvfscanf_r+0x4f2>
 800e4e2:	2c00      	cmp	r4, #0
 800e4e4:	d007      	beq.n	800e4f6 <__ssvfscanf_r+0x396>
 800e4e6:	f7fb ff6d 	bl	800a3c4 <malloc>
 800e4ea:	6338      	str	r0, [r7, #48]	; 0x30
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d11f      	bne.n	800e530 <__ssvfscanf_r+0x3d0>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	425b      	negs	r3, r3
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d013      	beq.n	800e524 <__ssvfscanf_r+0x3c4>
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	3301      	adds	r3, #1
 800e500:	d10a      	bne.n	800e518 <__ssvfscanf_r+0x3b8>
 800e502:	2400      	movs	r4, #0
 800e504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e506:	681d      	ldr	r5, [r3, #0]
 800e508:	88db      	ldrh	r3, [r3, #6]
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	dd01      	ble.n	800e512 <__ssvfscanf_r+0x3b2>
 800e50e:	f001 f82a 	bl	800f566 <__ssvfscanf_r+0x1406>
 800e512:	2301      	movs	r3, #1
 800e514:	425b      	negs	r3, r3
 800e516:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d001      	beq.n	800e524 <__ssvfscanf_r+0x3c4>
 800e520:	f7fb ff5a 	bl	800a3d8 <free>
 800e524:	46bd      	mov	sp, r7
 800e526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e528:	23b1      	movs	r3, #177	; 0xb1
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	449d      	add	sp, r3
 800e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	6023      	str	r3, [r4, #0]
 800e534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e536:	88de      	ldrh	r6, [r3, #6]
 800e538:	889d      	ldrh	r5, [r3, #4]
 800e53a:	42ae      	cmp	r6, r5
 800e53c:	d30e      	bcc.n	800e55c <__ssvfscanf_r+0x3fc>
 800e53e:	4b71      	ldr	r3, [pc, #452]	; (800e704 <__ssvfscanf_r+0x5a4>)
 800e540:	429d      	cmp	r5, r3
 800e542:	d8d5      	bhi.n	800e4f0 <__ssvfscanf_r+0x390>
 800e544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e546:	3508      	adds	r5, #8
 800e548:	b2ad      	uxth	r5, r5
 800e54a:	6818      	ldr	r0, [r3, #0]
 800e54c:	00a9      	lsls	r1, r5, #2
 800e54e:	f002 f901 	bl	8010754 <realloc>
 800e552:	2800      	cmp	r0, #0
 800e554:	d0cc      	beq.n	800e4f0 <__ssvfscanf_r+0x390>
 800e556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e558:	6018      	str	r0, [r3, #0]
 800e55a:	809d      	strh	r5, [r3, #4]
 800e55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e55e:	1c72      	adds	r2, r6, #1
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	00b6      	lsls	r6, r6, #2
 800e564:	50f4      	str	r4, [r6, r3]
 800e566:	2320      	movs	r3, #32
 800e568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e56a:	0026      	movs	r6, r4
 800e56c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e56e:	80ca      	strh	r2, [r1, #6]
 800e570:	61fb      	str	r3, [r7, #28]
 800e572:	2500      	movs	r5, #0
 800e574:	f7fd f9fe 	bl	800b974 <__locale_mb_cur_max>
 800e578:	42a8      	cmp	r0, r5
 800e57a:	d100      	bne.n	800e57e <__ssvfscanf_r+0x41e>
 800e57c:	e6bf      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e57e:	1c6a      	adds	r2, r5, #1
 800e580:	60fa      	str	r2, [r7, #12]
 800e582:	228c      	movs	r2, #140	; 0x8c
 800e584:	2048      	movs	r0, #72	; 0x48
 800e586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e588:	0052      	lsls	r2, r2, #1
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	1812      	adds	r2, r2, r0
 800e58e:	7819      	ldrb	r1, [r3, #0]
 800e590:	19d2      	adds	r2, r2, r7
 800e592:	5551      	strb	r1, [r2, r5]
 800e594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e598:	6852      	ldr	r2, [r2, #4]
 800e59a:	3301      	adds	r3, #1
 800e59c:	600b      	str	r3, [r1, #0]
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	3a01      	subs	r2, #1
 800e5a2:	604a      	str	r2, [r1, #4]
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d102      	bne.n	800e5ae <__ssvfscanf_r+0x44e>
 800e5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d007      	beq.n	800e5be <__ssvfscanf_r+0x45e>
 800e5ae:	2048      	movs	r0, #72	; 0x48
 800e5b0:	2310      	movs	r3, #16
 800e5b2:	181b      	adds	r3, r3, r0
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	19d8      	adds	r0, r3, r7
 800e5ba:	f7fd f997 	bl	800b8ec <memset>
 800e5be:	2148      	movs	r1, #72	; 0x48
 800e5c0:	2310      	movs	r3, #16
 800e5c2:	228c      	movs	r2, #140	; 0x8c
 800e5c4:	185b      	adds	r3, r3, r1
 800e5c6:	0052      	lsls	r2, r2, #1
 800e5c8:	19db      	adds	r3, r3, r7
 800e5ca:	1852      	adds	r2, r2, r1
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	0021      	movs	r1, r4
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5d4:	19d2      	adds	r2, r2, r7
 800e5d6:	f002 fc57 	bl	8010e88 <_mbrtowc_r>
 800e5da:	0003      	movs	r3, r0
 800e5dc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5de:	3301      	adds	r3, #1
 800e5e0:	d100      	bne.n	800e5e4 <__ssvfscanf_r+0x484>
 800e5e2:	e68c      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d139      	bne.n	800e65c <__ssvfscanf_r+0x4fc>
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d100      	bne.n	800e5f0 <__ssvfscanf_r+0x490>
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	4694      	mov	ip, r2
 800e5f6:	4463      	add	r3, ip
 800e5f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	2b03      	cmp	r3, #3
 800e5fe:	d102      	bne.n	800e606 <__ssvfscanf_r+0x4a6>
 800e600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e602:	2b04      	cmp	r3, #4
 800e604:	d002      	beq.n	800e60c <__ssvfscanf_r+0x4ac>
 800e606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e608:	3b01      	subs	r3, #1
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d115      	bne.n	800e63e <__ssvfscanf_r+0x4de>
 800e612:	2e00      	cmp	r6, #0
 800e614:	d012      	beq.n	800e63c <__ssvfscanf_r+0x4dc>
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	1ae5      	subs	r5, r4, r3
 800e61c:	10ab      	asrs	r3, r5, #2
 800e61e:	4293      	cmp	r3, r2
 800e620:	d30c      	bcc.n	800e63c <__ssvfscanf_r+0x4dc>
 800e622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e624:	00d1      	lsls	r1, r2, #3
 800e626:	f002 f895 	bl	8010754 <realloc>
 800e62a:	6338      	str	r0, [r7, #48]	; 0x30
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d100      	bne.n	800e632 <__ssvfscanf_r+0x4d2>
 800e630:	e75e      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	1944      	adds	r4, r0, r5
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	6030      	str	r0, [r6, #0]
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	3404      	adds	r4, #4
 800e63e:	2500      	movs	r5, #0
 800e640:	e010      	b.n	800e664 <__ssvfscanf_r+0x504>
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	2300      	movs	r3, #0
 800e648:	001e      	movs	r6, r3
 800e64a:	001c      	movs	r4, r3
 800e64c:	61fb      	str	r3, [r7, #28]
 800e64e:	633b      	str	r3, [r7, #48]	; 0x30
 800e650:	e78f      	b.n	800e572 <__ssvfscanf_r+0x412>
 800e652:	6a3b      	ldr	r3, [r7, #32]
 800e654:	001e      	movs	r6, r3
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	633b      	str	r3, [r7, #48]	; 0x30
 800e65a:	e78a      	b.n	800e572 <__ssvfscanf_r+0x412>
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	68fd      	ldr	r5, [r7, #12]
 800e660:	3302      	adds	r3, #2
 800e662:	d1c5      	bne.n	800e5f0 <__ssvfscanf_r+0x490>
 800e664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	dc12      	bgt.n	800e692 <__ssvfscanf_r+0x532>
 800e66c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e66e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e670:	f002 fd0a 	bl	8011088 <__ssrefill_r>
 800e674:	2800      	cmp	r0, #0
 800e676:	d00c      	beq.n	800e692 <__ssvfscanf_r+0x532>
 800e678:	2d00      	cmp	r5, #0
 800e67a:	d000      	beq.n	800e67e <__ssvfscanf_r+0x51e>
 800e67c:	e63f      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e67e:	2e00      	cmp	r6, #0
 800e680:	d10c      	bne.n	800e69c <__ssvfscanf_r+0x53c>
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	425a      	negs	r2, r3
 800e686:	4153      	adcs	r3, r2
 800e688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68a:	18d3      	adds	r3, r2, r3
 800e68c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	e6de      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800e692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e694:	2b00      	cmp	r3, #0
 800e696:	d000      	beq.n	800e69a <__ssvfscanf_r+0x53a>
 800e698:	e76c      	b.n	800e574 <__ssvfscanf_r+0x414>
 800e69a:	e7f0      	b.n	800e67e <__ssvfscanf_r+0x51e>
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	1ae1      	subs	r1, r4, r3
 800e6a2:	108b      	asrs	r3, r1, #2
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d9ec      	bls.n	800e682 <__ssvfscanf_r+0x522>
 800e6a8:	6830      	ldr	r0, [r6, #0]
 800e6aa:	f002 f853 	bl	8010754 <realloc>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d0e7      	beq.n	800e682 <__ssvfscanf_r+0x522>
 800e6b2:	6030      	str	r0, [r6, #0]
 800e6b4:	e7e5      	b.n	800e682 <__ssvfscanf_r+0x522>
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d025      	beq.n	800e708 <__ssvfscanf_r+0x5a8>
 800e6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6c4:	6812      	ldr	r2, [r2, #0]
 800e6c6:	4299      	cmp	r1, r3
 800e6c8:	dd11      	ble.n	800e6ee <__ssvfscanf_r+0x58e>
 800e6ca:	1ac9      	subs	r1, r1, r3
 800e6cc:	18d2      	adds	r2, r2, r3
 800e6ce:	18e4      	adds	r4, r4, r3
 800e6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e6d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6d6:	0019      	movs	r1, r3
 800e6d8:	601a      	str	r2, [r3, #0]
 800e6da:	f002 fcd5 	bl	8011088 <__ssrefill_r>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d0ec      	beq.n	800e6bc <__ssvfscanf_r+0x55c>
 800e6e2:	2c00      	cmp	r4, #0
 800e6e4:	d100      	bne.n	800e6e8 <__ssvfscanf_r+0x588>
 800e6e6:	e60a      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	191b      	adds	r3, r3, r4
 800e6ec:	e5ff      	b.n	800e2ee <__ssvfscanf_r+0x18e>
 800e6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6f0:	1a5b      	subs	r3, r3, r1
 800e6f2:	1864      	adds	r4, r4, r1
 800e6f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6f6:	604b      	str	r3, [r1, #4]
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fa:	18d2      	adds	r2, r2, r3
 800e6fc:	600a      	str	r2, [r1, #0]
 800e6fe:	e7f3      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800e700:	0800b5b1 	.word	0x0800b5b1
 800e704:	0000fff6 	.word	0x0000fff6
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	0034      	movs	r4, r6
 800e70c:	cb20      	ldmia	r3!, {r5}
 800e70e:	633b      	str	r3, [r7, #48]	; 0x30
 800e710:	2380      	movs	r3, #128	; 0x80
 800e712:	401c      	ands	r4, r3
 800e714:	421e      	tst	r6, r3
 800e716:	d028      	beq.n	800e76a <__ssvfscanf_r+0x60a>
 800e718:	2d00      	cmp	r5, #0
 800e71a:	d100      	bne.n	800e71e <__ssvfscanf_r+0x5be>
 800e71c:	e61d      	b.n	800e35a <__ssvfscanf_r+0x1fa>
 800e71e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e720:	f7fb fe50 	bl	800a3c4 <malloc>
 800e724:	6238      	str	r0, [r7, #32]
 800e726:	2800      	cmp	r0, #0
 800e728:	d100      	bne.n	800e72c <__ssvfscanf_r+0x5cc>
 800e72a:	e5ef      	b.n	800e30c <__ssvfscanf_r+0x1ac>
 800e72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e72e:	6028      	str	r0, [r5, #0]
 800e730:	88de      	ldrh	r6, [r3, #6]
 800e732:	889c      	ldrh	r4, [r3, #4]
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	42a6      	cmp	r6, r4
 800e738:	d30e      	bcc.n	800e758 <__ssvfscanf_r+0x5f8>
 800e73a:	4bbf      	ldr	r3, [pc, #764]	; (800ea38 <__ssvfscanf_r+0x8d8>)
 800e73c:	429c      	cmp	r4, r3
 800e73e:	d900      	bls.n	800e742 <__ssvfscanf_r+0x5e2>
 800e740:	e6df      	b.n	800e502 <__ssvfscanf_r+0x3a2>
 800e742:	3408      	adds	r4, #8
 800e744:	b2a4      	uxth	r4, r4
 800e746:	00a1      	lsls	r1, r4, #2
 800e748:	f002 f804 	bl	8010754 <realloc>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d100      	bne.n	800e752 <__ssvfscanf_r+0x5f2>
 800e750:	e6d7      	b.n	800e502 <__ssvfscanf_r+0x3a2>
 800e752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e754:	6018      	str	r0, [r3, #0]
 800e756:	809c      	strh	r4, [r3, #4]
 800e758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75a:	1c72      	adds	r2, r6, #1
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e760:	00b6      	lsls	r6, r6, #2
 800e762:	002c      	movs	r4, r5
 800e764:	50f5      	str	r5, [r6, r3]
 800e766:	6a3d      	ldr	r5, [r7, #32]
 800e768:	80ca      	strh	r2, [r1, #6]
 800e76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e76c:	0029      	movs	r1, r5
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	2201      	movs	r2, #1
 800e772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e776:	f002 fca6 	bl	80110c6 <_sfread_r>
 800e77a:	1e05      	subs	r5, r0, #0
 800e77c:	d100      	bne.n	800e780 <__ssvfscanf_r+0x620>
 800e77e:	e5be      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e780:	2c00      	cmp	r4, #0
 800e782:	d009      	beq.n	800e798 <__ssvfscanf_r+0x638>
 800e784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e786:	4283      	cmp	r3, r0
 800e788:	d906      	bls.n	800e798 <__ssvfscanf_r+0x638>
 800e78a:	0001      	movs	r1, r0
 800e78c:	6820      	ldr	r0, [r4, #0]
 800e78e:	f001 ffe1 	bl	8010754 <realloc>
 800e792:	2800      	cmp	r0, #0
 800e794:	d000      	beq.n	800e798 <__ssvfscanf_r+0x638>
 800e796:	6020      	str	r0, [r4, #0]
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	195b      	adds	r3, r3, r5
 800e79c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	e4f8      	b.n	800e196 <__ssvfscanf_r+0x36>
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <__ssvfscanf_r+0x64e>
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7ae:	2210      	movs	r2, #16
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	0034      	movs	r4, r6
 800e7b4:	4032      	ands	r2, r6
 800e7b6:	401c      	ands	r4, r3
 800e7b8:	623a      	str	r2, [r7, #32]
 800e7ba:	421e      	tst	r6, r3
 800e7bc:	d100      	bne.n	800e7c0 <__ssvfscanf_r+0x660>
 800e7be:	e116      	b.n	800e9ee <__ssvfscanf_r+0x88e>
 800e7c0:	2a00      	cmp	r2, #0
 800e7c2:	d000      	beq.n	800e7c6 <__ssvfscanf_r+0x666>
 800e7c4:	e0b0      	b.n	800e928 <__ssvfscanf_r+0x7c8>
 800e7c6:	2080      	movs	r0, #128	; 0x80
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	cb10      	ldmia	r3!, {r4}
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	4206      	tst	r6, r0
 800e7d0:	d100      	bne.n	800e7d4 <__ssvfscanf_r+0x674>
 800e7d2:	e0b2      	b.n	800e93a <__ssvfscanf_r+0x7da>
 800e7d4:	2c00      	cmp	r4, #0
 800e7d6:	d100      	bne.n	800e7da <__ssvfscanf_r+0x67a>
 800e7d8:	e68d      	b.n	800e4f6 <__ssvfscanf_r+0x396>
 800e7da:	f7fb fdf3 	bl	800a3c4 <malloc>
 800e7de:	6338      	str	r0, [r7, #48]	; 0x30
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d100      	bne.n	800e7e6 <__ssvfscanf_r+0x686>
 800e7e4:	e684      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7ec:	88de      	ldrh	r6, [r3, #6]
 800e7ee:	889d      	ldrh	r5, [r3, #4]
 800e7f0:	42ae      	cmp	r6, r5
 800e7f2:	d310      	bcc.n	800e816 <__ssvfscanf_r+0x6b6>
 800e7f4:	4b90      	ldr	r3, [pc, #576]	; (800ea38 <__ssvfscanf_r+0x8d8>)
 800e7f6:	429d      	cmp	r5, r3
 800e7f8:	d900      	bls.n	800e7fc <__ssvfscanf_r+0x69c>
 800e7fa:	e679      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800e7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7fe:	3508      	adds	r5, #8
 800e800:	b2ad      	uxth	r5, r5
 800e802:	6818      	ldr	r0, [r3, #0]
 800e804:	00a9      	lsls	r1, r5, #2
 800e806:	f001 ffa5 	bl	8010754 <realloc>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d100      	bne.n	800e810 <__ssvfscanf_r+0x6b0>
 800e80e:	e66f      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800e810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e812:	6018      	str	r0, [r3, #0]
 800e814:	809d      	strh	r5, [r3, #4]
 800e816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e818:	1c72      	adds	r2, r6, #1
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	00b6      	lsls	r6, r6, #2
 800e81e:	50f4      	str	r4, [r6, r3]
 800e820:	2320      	movs	r3, #32
 800e822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e824:	0026      	movs	r6, r4
 800e826:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e828:	80ca      	strh	r2, [r1, #6]
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	2500      	movs	r5, #0
 800e82e:	f7fd f8a1 	bl	800b974 <__locale_mb_cur_max>
 800e832:	42a8      	cmp	r0, r5
 800e834:	d100      	bne.n	800e838 <__ssvfscanf_r+0x6d8>
 800e836:	e562      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e838:	1c6a      	adds	r2, r5, #1
 800e83a:	61fa      	str	r2, [r7, #28]
 800e83c:	228c      	movs	r2, #140	; 0x8c
 800e83e:	2048      	movs	r0, #72	; 0x48
 800e840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e842:	0052      	lsls	r2, r2, #1
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	1812      	adds	r2, r2, r0
 800e848:	7819      	ldrb	r1, [r3, #0]
 800e84a:	19d2      	adds	r2, r2, r7
 800e84c:	5551      	strb	r1, [r2, r5]
 800e84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e850:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e852:	6852      	ldr	r2, [r2, #4]
 800e854:	3301      	adds	r3, #1
 800e856:	600b      	str	r3, [r1, #0]
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	3a01      	subs	r2, #1
 800e85c:	604a      	str	r2, [r1, #4]
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d102      	bne.n	800e868 <__ssvfscanf_r+0x708>
 800e862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e864:	2b04      	cmp	r3, #4
 800e866:	d006      	beq.n	800e876 <__ssvfscanf_r+0x716>
 800e868:	2048      	movs	r0, #72	; 0x48
 800e86a:	2208      	movs	r2, #8
 800e86c:	1813      	adds	r3, r2, r0
 800e86e:	2100      	movs	r1, #0
 800e870:	19d8      	adds	r0, r3, r7
 800e872:	f7fd f83b 	bl	800b8ec <memset>
 800e876:	2148      	movs	r1, #72	; 0x48
 800e878:	2308      	movs	r3, #8
 800e87a:	228c      	movs	r2, #140	; 0x8c
 800e87c:	185b      	adds	r3, r3, r1
 800e87e:	0052      	lsls	r2, r2, #1
 800e880:	19db      	adds	r3, r3, r7
 800e882:	1852      	adds	r2, r2, r1
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	0021      	movs	r1, r4
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e88c:	19d2      	adds	r2, r2, r7
 800e88e:	f002 fafb 	bl	8010e88 <_mbrtowc_r>
 800e892:	0003      	movs	r3, r0
 800e894:	62b8      	str	r0, [r7, #40]	; 0x28
 800e896:	3301      	adds	r3, #1
 800e898:	d100      	bne.n	800e89c <__ssvfscanf_r+0x73c>
 800e89a:	e530      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d151      	bne.n	800e944 <__ssvfscanf_r+0x7e4>
 800e8a0:	6020      	str	r0, [r4, #0]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	6825      	ldr	r5, [r4, #0]
 800e8a6:	425b      	negs	r3, r3
 800e8a8:	1c6a      	adds	r2, r5, #1
 800e8aa:	d01a      	beq.n	800e8e2 <__ssvfscanf_r+0x782>
 800e8ac:	2048      	movs	r0, #72	; 0x48
 800e8ae:	3311      	adds	r3, #17
 800e8b0:	181b      	adds	r3, r3, r0
 800e8b2:	2208      	movs	r2, #8
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	19d8      	adds	r0, r3, r7
 800e8b8:	f7fd f818 	bl	800b8ec <memset>
 800e8bc:	4b5f      	ldr	r3, [pc, #380]	; (800ea3c <__ssvfscanf_r+0x8dc>)
 800e8be:	2148      	movs	r1, #72	; 0x48
 800e8c0:	33e0      	adds	r3, #224	; 0xe0
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	4694      	mov	ip, r2
 800e8c8:	185b      	adds	r3, r3, r1
 800e8ca:	002a      	movs	r2, r5
 800e8cc:	19db      	adds	r3, r3, r7
 800e8ce:	4665      	mov	r5, ip
 800e8d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8d2:	1879      	adds	r1, r7, r1
 800e8d4:	47a8      	blx	r5
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	2801      	cmp	r0, #1
 800e8da:	d102      	bne.n	800e8e2 <__ssvfscanf_r+0x782>
 800e8dc:	3348      	adds	r3, #72	; 0x48
 800e8de:	18fb      	adds	r3, r7, r3
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2218      	movs	r2, #24
 800e8e4:	2148      	movs	r1, #72	; 0x48
 800e8e6:	1852      	adds	r2, r2, r1
 800e8e8:	19d2      	adds	r2, r2, r7
 800e8ea:	5cd3      	ldrb	r3, [r2, r3]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d149      	bne.n	800e984 <__ssvfscanf_r+0x824>
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d137      	bne.n	800e966 <__ssvfscanf_r+0x806>
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d113      	bne.n	800e924 <__ssvfscanf_r+0x7c4>
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	2e00      	cmp	r6, #0
 800e900:	d00d      	beq.n	800e91e <__ssvfscanf_r+0x7be>
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	1ae4      	subs	r4, r4, r3
 800e908:	10a3      	asrs	r3, r4, #2
 800e90a:	3301      	adds	r3, #1
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d906      	bls.n	800e91e <__ssvfscanf_r+0x7be>
 800e910:	6830      	ldr	r0, [r6, #0]
 800e912:	1d21      	adds	r1, r4, #4
 800e914:	f001 ff1e 	bl	8010754 <realloc>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d000      	beq.n	800e91e <__ssvfscanf_r+0x7be>
 800e91c:	6030      	str	r0, [r6, #0]
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	3301      	adds	r3, #1
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	e593      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	2300      	movs	r3, #0
 800e92e:	001e      	movs	r6, r3
 800e930:	613b      	str	r3, [r7, #16]
 800e932:	633b      	str	r3, [r7, #48]	; 0x30
 800e934:	334c      	adds	r3, #76	; 0x4c
 800e936:	18fc      	adds	r4, r7, r3
 800e938:	e778      	b.n	800e82c <__ssvfscanf_r+0x6cc>
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	001e      	movs	r6, r3
 800e93e:	613b      	str	r3, [r7, #16]
 800e940:	633b      	str	r3, [r7, #48]	; 0x30
 800e942:	e773      	b.n	800e82c <__ssvfscanf_r+0x6cc>
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	69fd      	ldr	r5, [r7, #28]
 800e948:	3302      	adds	r3, #2
 800e94a:	d1aa      	bne.n	800e8a2 <__ssvfscanf_r+0x742>
 800e94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	dc47      	bgt.n	800e9e4 <__ssvfscanf_r+0x884>
 800e954:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e958:	f002 fb96 	bl	8011088 <__ssrefill_r>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d041      	beq.n	800e9e4 <__ssvfscanf_r+0x884>
 800e960:	2d00      	cmp	r5, #0
 800e962:	d0c8      	beq.n	800e8f6 <__ssvfscanf_r+0x796>
 800e964:	e4cb      	b.n	800e2fe <__ssvfscanf_r+0x19e>
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	2248      	movs	r2, #72	; 0x48
 800e96a:	3b01      	subs	r3, #1
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	238c      	movs	r3, #140	; 0x8c
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	189b      	adds	r3, r3, r2
 800e974:	69fa      	ldr	r2, [r7, #28]
 800e976:	19db      	adds	r3, r3, r7
 800e978:	5cd1      	ldrb	r1, [r2, r3]
 800e97a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e97c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e97e:	f002 fb47 	bl	8011010 <_sungetc_r>
 800e982:	e7b5      	b.n	800e8f0 <__ssvfscanf_r+0x790>
 800e984:	69fa      	ldr	r2, [r7, #28]
 800e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e988:	4694      	mov	ip, r2
 800e98a:	4463      	add	r3, ip
 800e98c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e990:	2b03      	cmp	r3, #3
 800e992:	d102      	bne.n	800e99a <__ssvfscanf_r+0x83a>
 800e994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e996:	2b04      	cmp	r3, #4
 800e998:	d002      	beq.n	800e9a0 <__ssvfscanf_r+0x840>
 800e99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99c:	3b01      	subs	r3, #1
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d11a      	bne.n	800e9dc <__ssvfscanf_r+0x87c>
 800e9a6:	3404      	adds	r4, #4
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	d019      	beq.n	800e9e0 <__ssvfscanf_r+0x880>
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	1ae3      	subs	r3, r4, r3
 800e9b2:	61fb      	str	r3, [r7, #28]
 800e9b4:	6a3d      	ldr	r5, [r7, #32]
 800e9b6:	109b      	asrs	r3, r3, #2
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d3c7      	bcc.n	800e94c <__ssvfscanf_r+0x7ec>
 800e9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9be:	00d1      	lsls	r1, r2, #3
 800e9c0:	f001 fec8 	bl	8010754 <realloc>
 800e9c4:	6338      	str	r0, [r7, #48]	; 0x30
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d100      	bne.n	800e9cc <__ssvfscanf_r+0x86c>
 800e9ca:	e591      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800e9cc:	4684      	mov	ip, r0
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	69fc      	ldr	r4, [r7, #28]
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4464      	add	r4, ip
 800e9d6:	6030      	str	r0, [r6, #0]
 800e9d8:	613b      	str	r3, [r7, #16]
 800e9da:	e7b7      	b.n	800e94c <__ssvfscanf_r+0x7ec>
 800e9dc:	2500      	movs	r5, #0
 800e9de:	e7b5      	b.n	800e94c <__ssvfscanf_r+0x7ec>
 800e9e0:	0035      	movs	r5, r6
 800e9e2:	e7b3      	b.n	800e94c <__ssvfscanf_r+0x7ec>
 800e9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d000      	beq.n	800e9ec <__ssvfscanf_r+0x88c>
 800e9ea:	e720      	b.n	800e82e <__ssvfscanf_r+0x6ce>
 800e9ec:	e783      	b.n	800e8f6 <__ssvfscanf_r+0x796>
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d025      	beq.n	800ea40 <__ssvfscanf_r+0x8e0>
 800e9f4:	2118      	movs	r1, #24
 800e9f6:	2048      	movs	r0, #72	; 0x48
 800e9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9fa:	1809      	adds	r1, r1, r0
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	19c9      	adds	r1, r1, r7
 800ea00:	781a      	ldrb	r2, [r3, #0]
 800ea02:	5c8a      	ldrb	r2, [r1, r2]
 800ea04:	2a00      	cmp	r2, #0
 800ea06:	d103      	bne.n	800ea10 <__ssvfscanf_r+0x8b0>
 800ea08:	2c00      	cmp	r4, #0
 800ea0a:	d000      	beq.n	800ea0e <__ssvfscanf_r+0x8ae>
 800ea0c:	e66c      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800ea0e:	e4a4      	b.n	800e35a <__ssvfscanf_r+0x1fa>
 800ea10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea14:	6852      	ldr	r2, [r2, #4]
 800ea16:	3301      	adds	r3, #1
 800ea18:	600b      	str	r3, [r1, #0]
 800ea1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea1c:	3a01      	subs	r2, #1
 800ea1e:	3401      	adds	r4, #1
 800ea20:	604a      	str	r2, [r1, #4]
 800ea22:	429c      	cmp	r4, r3
 800ea24:	d100      	bne.n	800ea28 <__ssvfscanf_r+0x8c8>
 800ea26:	e65f      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800ea28:	2a00      	cmp	r2, #0
 800ea2a:	dce3      	bgt.n	800e9f4 <__ssvfscanf_r+0x894>
 800ea2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea2e:	f002 fb2b 	bl	8011088 <__ssrefill_r>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d0de      	beq.n	800e9f4 <__ssvfscanf_r+0x894>
 800ea36:	e657      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800ea38:	0000fff6 	.word	0x0000fff6
 800ea3c:	2000043c 	.word	0x2000043c
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	0032      	movs	r2, r6
 800ea44:	cb20      	ldmia	r3!, {r5}
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	2380      	movs	r3, #128	; 0x80
 800ea4a:	401a      	ands	r2, r3
 800ea4c:	421e      	tst	r6, r3
 800ea4e:	d100      	bne.n	800ea52 <__ssvfscanf_r+0x8f2>
 800ea50:	e086      	b.n	800eb60 <__ssvfscanf_r+0xa00>
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	d100      	bne.n	800ea58 <__ssvfscanf_r+0x8f8>
 800ea56:	e480      	b.n	800e35a <__ssvfscanf_r+0x1fa>
 800ea58:	2020      	movs	r0, #32
 800ea5a:	f7fb fcb3 	bl	800a3c4 <malloc>
 800ea5e:	6338      	str	r0, [r7, #48]	; 0x30
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d100      	bne.n	800ea66 <__ssvfscanf_r+0x906>
 800ea64:	e452      	b.n	800e30c <__ssvfscanf_r+0x1ac>
 800ea66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea68:	6028      	str	r0, [r5, #0]
 800ea6a:	88de      	ldrh	r6, [r3, #6]
 800ea6c:	889c      	ldrh	r4, [r3, #4]
 800ea6e:	6818      	ldr	r0, [r3, #0]
 800ea70:	42a6      	cmp	r6, r4
 800ea72:	d30e      	bcc.n	800ea92 <__ssvfscanf_r+0x932>
 800ea74:	4bc3      	ldr	r3, [pc, #780]	; (800ed84 <__ssvfscanf_r+0xc24>)
 800ea76:	429c      	cmp	r4, r3
 800ea78:	d900      	bls.n	800ea7c <__ssvfscanf_r+0x91c>
 800ea7a:	e542      	b.n	800e502 <__ssvfscanf_r+0x3a2>
 800ea7c:	3408      	adds	r4, #8
 800ea7e:	b2a4      	uxth	r4, r4
 800ea80:	00a1      	lsls	r1, r4, #2
 800ea82:	f001 fe67 	bl	8010754 <realloc>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d100      	bne.n	800ea8c <__ssvfscanf_r+0x92c>
 800ea8a:	e53a      	b.n	800e502 <__ssvfscanf_r+0x3a2>
 800ea8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea8e:	6018      	str	r0, [r3, #0]
 800ea90:	809c      	strh	r4, [r3, #4]
 800ea92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea94:	1c72      	adds	r2, r6, #1
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	00b6      	lsls	r6, r6, #2
 800ea9a:	50f5      	str	r5, [r6, r3]
 800ea9c:	2320      	movs	r3, #32
 800ea9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eaa0:	002e      	movs	r6, r5
 800eaa2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800eaa4:	80ca      	strh	r2, [r1, #6]
 800eaa6:	623b      	str	r3, [r7, #32]
 800eaa8:	002c      	movs	r4, r5
 800eaaa:	2118      	movs	r1, #24
 800eaac:	2048      	movs	r0, #72	; 0x48
 800eaae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab0:	1809      	adds	r1, r1, r0
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	19c9      	adds	r1, r1, r7
 800eab6:	781a      	ldrb	r2, [r3, #0]
 800eab8:	5c8a      	ldrb	r2, [r1, r2]
 800eaba:	2a00      	cmp	r2, #0
 800eabc:	d101      	bne.n	800eac2 <__ssvfscanf_r+0x962>
 800eabe:	633d      	str	r5, [r7, #48]	; 0x30
 800eac0:	e031      	b.n	800eb26 <__ssvfscanf_r+0x9c6>
 800eac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eac4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eac6:	6852      	ldr	r2, [r2, #4]
 800eac8:	3a01      	subs	r2, #1
 800eaca:	604a      	str	r2, [r1, #4]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	600a      	str	r2, [r1, #0]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	1c6a      	adds	r2, r5, #1
 800ead4:	633a      	str	r2, [r7, #48]	; 0x30
 800ead6:	702b      	strb	r3, [r5, #0]
 800ead8:	2e00      	cmp	r6, #0
 800eada:	d010      	beq.n	800eafe <__ssvfscanf_r+0x99e>
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	1b15      	subs	r5, r2, r4
 800eae0:	429d      	cmp	r5, r3
 800eae2:	d30c      	bcc.n	800eafe <__ssvfscanf_r+0x99e>
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	0020      	movs	r0, r4
 800eae8:	0019      	movs	r1, r3
 800eaea:	623b      	str	r3, [r7, #32]
 800eaec:	f001 fe32 	bl	8010754 <realloc>
 800eaf0:	1e04      	subs	r4, r0, #0
 800eaf2:	d101      	bne.n	800eaf8 <__ssvfscanf_r+0x998>
 800eaf4:	f7ff fc0a 	bl	800e30c <__ssvfscanf_r+0x1ac>
 800eaf8:	1943      	adds	r3, r0, r5
 800eafa:	633b      	str	r3, [r7, #48]	; 0x30
 800eafc:	6030      	str	r0, [r6, #0]
 800eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb00:	3b01      	subs	r3, #1
 800eb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00e      	beq.n	800eb26 <__ssvfscanf_r+0x9c6>
 800eb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dc2a      	bgt.n	800eb66 <__ssvfscanf_r+0xa06>
 800eb10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb14:	f002 fab8 	bl	8011088 <__ssrefill_r>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	d024      	beq.n	800eb66 <__ssvfscanf_r+0xa06>
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	42a3      	cmp	r3, r4
 800eb20:	d101      	bne.n	800eb26 <__ssvfscanf_r+0x9c6>
 800eb22:	f7ff fbec 	bl	800e2fe <__ssvfscanf_r+0x19e>
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	1b1d      	subs	r5, r3, r4
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	d101      	bne.n	800eb32 <__ssvfscanf_r+0x9d2>
 800eb2e:	f7ff fc14 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800eb32:	2300      	movs	r3, #0
 800eb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb36:	7013      	strb	r3, [r2, #0]
 800eb38:	429e      	cmp	r6, r3
 800eb3a:	d009      	beq.n	800eb50 <__ssvfscanf_r+0x9f0>
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	1c69      	adds	r1, r5, #1
 800eb40:	428b      	cmp	r3, r1
 800eb42:	d905      	bls.n	800eb50 <__ssvfscanf_r+0x9f0>
 800eb44:	6830      	ldr	r0, [r6, #0]
 800eb46:	f001 fe05 	bl	8010754 <realloc>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d000      	beq.n	800eb50 <__ssvfscanf_r+0x9f0>
 800eb4e:	6030      	str	r0, [r6, #0]
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	3301      	adds	r3, #1
 800eb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	195b      	adds	r3, r3, r5
 800eb5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	e477      	b.n	800e450 <__ssvfscanf_r+0x2f0>
 800eb60:	0016      	movs	r6, r2
 800eb62:	623a      	str	r2, [r7, #32]
 800eb64:	e7a0      	b.n	800eaa8 <__ssvfscanf_r+0x948>
 800eb66:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800eb68:	e79f      	b.n	800eaaa <__ssvfscanf_r+0x94a>
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <__ssvfscanf_r+0xa14>
 800eb70:	3b01      	subs	r3, #1
 800eb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb74:	2210      	movs	r2, #16
 800eb76:	2301      	movs	r3, #1
 800eb78:	0034      	movs	r4, r6
 800eb7a:	4032      	ands	r2, r6
 800eb7c:	401c      	ands	r4, r3
 800eb7e:	61fa      	str	r2, [r7, #28]
 800eb80:	421e      	tst	r6, r3
 800eb82:	d100      	bne.n	800eb86 <__ssvfscanf_r+0xa26>
 800eb84:	e102      	b.n	800ed8c <__ssvfscanf_r+0xc2c>
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	d000      	beq.n	800eb8c <__ssvfscanf_r+0xa2c>
 800eb8a:	e09f      	b.n	800eccc <__ssvfscanf_r+0xb6c>
 800eb8c:	2080      	movs	r0, #128	; 0x80
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	cb10      	ldmia	r3!, {r4}
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	4206      	tst	r6, r0
 800eb96:	d100      	bne.n	800eb9a <__ssvfscanf_r+0xa3a>
 800eb98:	e0a1      	b.n	800ecde <__ssvfscanf_r+0xb7e>
 800eb9a:	2c00      	cmp	r4, #0
 800eb9c:	d100      	bne.n	800eba0 <__ssvfscanf_r+0xa40>
 800eb9e:	e4aa      	b.n	800e4f6 <__ssvfscanf_r+0x396>
 800eba0:	f7fb fc10 	bl	800a3c4 <malloc>
 800eba4:	6338      	str	r0, [r7, #48]	; 0x30
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d100      	bne.n	800ebac <__ssvfscanf_r+0xa4c>
 800ebaa:	e4a1      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800ebac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebae:	6023      	str	r3, [r4, #0]
 800ebb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebb2:	88de      	ldrh	r6, [r3, #6]
 800ebb4:	889d      	ldrh	r5, [r3, #4]
 800ebb6:	42ae      	cmp	r6, r5
 800ebb8:	d310      	bcc.n	800ebdc <__ssvfscanf_r+0xa7c>
 800ebba:	4b72      	ldr	r3, [pc, #456]	; (800ed84 <__ssvfscanf_r+0xc24>)
 800ebbc:	429d      	cmp	r5, r3
 800ebbe:	d900      	bls.n	800ebc2 <__ssvfscanf_r+0xa62>
 800ebc0:	e496      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800ebc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc4:	3508      	adds	r5, #8
 800ebc6:	b2ad      	uxth	r5, r5
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	00a9      	lsls	r1, r5, #2
 800ebcc:	f001 fdc2 	bl	8010754 <realloc>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d100      	bne.n	800ebd6 <__ssvfscanf_r+0xa76>
 800ebd4:	e48c      	b.n	800e4f0 <__ssvfscanf_r+0x390>
 800ebd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebd8:	6018      	str	r0, [r3, #0]
 800ebda:	809d      	strh	r5, [r3, #4]
 800ebdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebde:	1c72      	adds	r2, r6, #1
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	00b6      	lsls	r6, r6, #2
 800ebe4:	50f4      	str	r4, [r6, r3]
 800ebe6:	2320      	movs	r3, #32
 800ebe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebea:	0025      	movs	r5, r4
 800ebec:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ebee:	80ca      	strh	r2, [r1, #6]
 800ebf0:	613b      	str	r3, [r7, #16]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	623b      	str	r3, [r7, #32]
 800ebf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebf8:	4a63      	ldr	r2, [pc, #396]	; (800ed88 <__ssvfscanf_r+0xc28>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	5cd3      	ldrb	r3, [r2, r3]
 800ec00:	2208      	movs	r2, #8
 800ec02:	4213      	tst	r3, r2
 800ec04:	d149      	bne.n	800ec9a <__ssvfscanf_r+0xb3a>
 800ec06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d046      	beq.n	800ec9a <__ssvfscanf_r+0xb3a>
 800ec0c:	f7fc feb2 	bl	800b974 <__locale_mb_cur_max>
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	4298      	cmp	r0, r3
 800ec14:	d101      	bne.n	800ec1a <__ssvfscanf_r+0xaba>
 800ec16:	f7ff fb72 	bl	800e2fe <__ssvfscanf_r+0x19e>
 800ec1a:	6a3a      	ldr	r2, [r7, #32]
 800ec1c:	2048      	movs	r0, #72	; 0x48
 800ec1e:	1c56      	adds	r6, r2, #1
 800ec20:	228c      	movs	r2, #140	; 0x8c
 800ec22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec24:	0052      	lsls	r2, r2, #1
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	1812      	adds	r2, r2, r0
 800ec2a:	7819      	ldrb	r1, [r3, #0]
 800ec2c:	6a38      	ldr	r0, [r7, #32]
 800ec2e:	19d2      	adds	r2, r2, r7
 800ec30:	5411      	strb	r1, [r2, r0]
 800ec32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec36:	6852      	ldr	r2, [r2, #4]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	600b      	str	r3, [r1, #0]
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	3a01      	subs	r2, #1
 800ec40:	604a      	str	r2, [r1, #4]
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d102      	bne.n	800ec4c <__ssvfscanf_r+0xaec>
 800ec46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec48:	2b04      	cmp	r3, #4
 800ec4a:	d007      	beq.n	800ec5c <__ssvfscanf_r+0xafc>
 800ec4c:	2048      	movs	r0, #72	; 0x48
 800ec4e:	2310      	movs	r3, #16
 800ec50:	181b      	adds	r3, r3, r0
 800ec52:	2208      	movs	r2, #8
 800ec54:	2100      	movs	r1, #0
 800ec56:	19d8      	adds	r0, r3, r7
 800ec58:	f7fc fe48 	bl	800b8ec <memset>
 800ec5c:	2148      	movs	r1, #72	; 0x48
 800ec5e:	2310      	movs	r3, #16
 800ec60:	228c      	movs	r2, #140	; 0x8c
 800ec62:	185b      	adds	r3, r3, r1
 800ec64:	0052      	lsls	r2, r2, #1
 800ec66:	19db      	adds	r3, r3, r7
 800ec68:	1852      	adds	r2, r2, r1
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	0021      	movs	r1, r4
 800ec6e:	0033      	movs	r3, r6
 800ec70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec72:	19d2      	adds	r2, r2, r7
 800ec74:	f002 f908 	bl	8010e88 <_mbrtowc_r>
 800ec78:	0003      	movs	r3, r0
 800ec7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <__ssvfscanf_r+0xb24>
 800ec80:	f7ff fb3d 	bl	800e2fe <__ssvfscanf_r+0x19e>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d12f      	bne.n	800ece8 <__ssvfscanf_r+0xb88>
 800ec88:	6020      	str	r0, [r4, #0]
 800ec8a:	6820      	ldr	r0, [r4, #0]
 800ec8c:	f002 f91a 	bl	8010ec4 <iswspace>
 800ec90:	6238      	str	r0, [r7, #32]
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d04a      	beq.n	800ed2c <__ssvfscanf_r+0xbcc>
 800ec96:	2e00      	cmp	r6, #0
 800ec98:	d13c      	bne.n	800ed14 <__ssvfscanf_r+0xbb4>
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d000      	beq.n	800eca2 <__ssvfscanf_r+0xb42>
 800eca0:	e640      	b.n	800e924 <__ssvfscanf_r+0x7c4>
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	d100      	bne.n	800ecaa <__ssvfscanf_r+0xb4a>
 800eca8:	e639      	b.n	800e91e <__ssvfscanf_r+0x7be>
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	1ae4      	subs	r4, r4, r3
 800ecb0:	10a3      	asrs	r3, r4, #2
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d800      	bhi.n	800ecba <__ssvfscanf_r+0xb5a>
 800ecb8:	e631      	b.n	800e91e <__ssvfscanf_r+0x7be>
 800ecba:	6828      	ldr	r0, [r5, #0]
 800ecbc:	1d21      	adds	r1, r4, #4
 800ecbe:	f001 fd49 	bl	8010754 <realloc>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d100      	bne.n	800ecc8 <__ssvfscanf_r+0xb68>
 800ecc6:	e62a      	b.n	800e91e <__ssvfscanf_r+0x7be>
 800ecc8:	6028      	str	r0, [r5, #0]
 800ecca:	e628      	b.n	800e91e <__ssvfscanf_r+0x7be>
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	001d      	movs	r5, r3
 800ecd4:	613b      	str	r3, [r7, #16]
 800ecd6:	633b      	str	r3, [r7, #48]	; 0x30
 800ecd8:	334c      	adds	r3, #76	; 0x4c
 800ecda:	18fc      	adds	r4, r7, r3
 800ecdc:	e789      	b.n	800ebf2 <__ssvfscanf_r+0xa92>
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	001d      	movs	r5, r3
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	633b      	str	r3, [r7, #48]	; 0x30
 800ece6:	e784      	b.n	800ebf2 <__ssvfscanf_r+0xa92>
 800ece8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecea:	623e      	str	r6, [r7, #32]
 800ecec:	3302      	adds	r3, #2
 800ecee:	d1cc      	bne.n	800ec8a <__ssvfscanf_r+0xb2a>
 800ecf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dd00      	ble.n	800ecfa <__ssvfscanf_r+0xb9a>
 800ecf8:	e77d      	b.n	800ebf6 <__ssvfscanf_r+0xa96>
 800ecfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecfe:	f002 f9c3 	bl	8011088 <__ssrefill_r>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d100      	bne.n	800ed08 <__ssvfscanf_r+0xba8>
 800ed06:	e776      	b.n	800ebf6 <__ssvfscanf_r+0xa96>
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <__ssvfscanf_r+0xbb2>
 800ed0e:	f7ff faf6 	bl	800e2fe <__ssvfscanf_r+0x19e>
 800ed12:	e7c2      	b.n	800ec9a <__ssvfscanf_r+0xb3a>
 800ed14:	238c      	movs	r3, #140	; 0x8c
 800ed16:	2248      	movs	r2, #72	; 0x48
 800ed18:	005b      	lsls	r3, r3, #1
 800ed1a:	189b      	adds	r3, r3, r2
 800ed1c:	3e01      	subs	r6, #1
 800ed1e:	19db      	adds	r3, r3, r7
 800ed20:	5cf1      	ldrb	r1, [r6, r3]
 800ed22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed26:	f002 f973 	bl	8011010 <_sungetc_r>
 800ed2a:	e7b4      	b.n	800ec96 <__ssvfscanf_r+0xb36>
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	199b      	adds	r3, r3, r6
 800ed30:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	2b03      	cmp	r3, #3
 800ed36:	d102      	bne.n	800ed3e <__ssvfscanf_r+0xbde>
 800ed38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	d002      	beq.n	800ed44 <__ssvfscanf_r+0xbe4>
 800ed3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed40:	3b01      	subs	r3, #1
 800ed42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1d2      	bne.n	800ecf0 <__ssvfscanf_r+0xb90>
 800ed4a:	3404      	adds	r4, #4
 800ed4c:	2d00      	cmp	r5, #0
 800ed4e:	d016      	beq.n	800ed7e <__ssvfscanf_r+0xc1e>
 800ed50:	69fa      	ldr	r2, [r7, #28]
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	623a      	str	r2, [r7, #32]
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	1ae6      	subs	r6, r4, r3
 800ed5a:	10b3      	asrs	r3, r6, #2
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d3c7      	bcc.n	800ecf0 <__ssvfscanf_r+0xb90>
 800ed60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed62:	00d1      	lsls	r1, r2, #3
 800ed64:	f001 fcf6 	bl	8010754 <realloc>
 800ed68:	6338      	str	r0, [r7, #48]	; 0x30
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d101      	bne.n	800ed72 <__ssvfscanf_r+0xc12>
 800ed6e:	f7ff fbbf 	bl	800e4f0 <__ssvfscanf_r+0x390>
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	1984      	adds	r4, r0, r6
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	6028      	str	r0, [r5, #0]
 800ed7a:	613b      	str	r3, [r7, #16]
 800ed7c:	e7b8      	b.n	800ecf0 <__ssvfscanf_r+0xb90>
 800ed7e:	623d      	str	r5, [r7, #32]
 800ed80:	e7b6      	b.n	800ecf0 <__ssvfscanf_r+0xb90>
 800ed82:	46c0      	nop			; (mov r8, r8)
 800ed84:	0000fff6 	.word	0x0000fff6
 800ed88:	08013ff9 	.word	0x08013ff9
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d01c      	beq.n	800edcc <__ssvfscanf_r+0xc6c>
 800ed92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed94:	49bf      	ldr	r1, [pc, #764]	; (800f094 <__ssvfscanf_r+0xf34>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	781a      	ldrb	r2, [r3, #0]
 800ed9a:	5c8a      	ldrb	r2, [r1, r2]
 800ed9c:	2108      	movs	r1, #8
 800ed9e:	420a      	tst	r2, r1
 800eda0:	d000      	beq.n	800eda4 <__ssvfscanf_r+0xc44>
 800eda2:	e4a1      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800eda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eda6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eda8:	6852      	ldr	r2, [r2, #4]
 800edaa:	3301      	adds	r3, #1
 800edac:	600b      	str	r3, [r1, #0]
 800edae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb0:	3a01      	subs	r2, #1
 800edb2:	3401      	adds	r4, #1
 800edb4:	604a      	str	r2, [r1, #4]
 800edb6:	429c      	cmp	r4, r3
 800edb8:	d100      	bne.n	800edbc <__ssvfscanf_r+0xc5c>
 800edba:	e495      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800edbc:	2a00      	cmp	r2, #0
 800edbe:	dce8      	bgt.n	800ed92 <__ssvfscanf_r+0xc32>
 800edc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edc2:	f002 f961 	bl	8011088 <__ssrefill_r>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0e3      	beq.n	800ed92 <__ssvfscanf_r+0xc32>
 800edca:	e48d      	b.n	800e6e8 <__ssvfscanf_r+0x588>
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	0032      	movs	r2, r6
 800edd0:	cb10      	ldmia	r3!, {r4}
 800edd2:	61fb      	str	r3, [r7, #28]
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	401a      	ands	r2, r3
 800edd8:	421e      	tst	r6, r3
 800edda:	d039      	beq.n	800ee50 <__ssvfscanf_r+0xcf0>
 800eddc:	2c00      	cmp	r4, #0
 800edde:	d101      	bne.n	800ede4 <__ssvfscanf_r+0xc84>
 800ede0:	f7ff fabb 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800ede4:	2020      	movs	r0, #32
 800ede6:	f7fb faed 	bl	800a3c4 <malloc>
 800edea:	6338      	str	r0, [r7, #48]	; 0x30
 800edec:	2800      	cmp	r0, #0
 800edee:	d101      	bne.n	800edf4 <__ssvfscanf_r+0xc94>
 800edf0:	f7ff fa8c 	bl	800e30c <__ssvfscanf_r+0x1ac>
 800edf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf6:	6020      	str	r0, [r4, #0]
 800edf8:	88de      	ldrh	r6, [r3, #6]
 800edfa:	889d      	ldrh	r5, [r3, #4]
 800edfc:	6818      	ldr	r0, [r3, #0]
 800edfe:	42ae      	cmp	r6, r5
 800ee00:	d310      	bcc.n	800ee24 <__ssvfscanf_r+0xcc4>
 800ee02:	4ba5      	ldr	r3, [pc, #660]	; (800f098 <__ssvfscanf_r+0xf38>)
 800ee04:	429d      	cmp	r5, r3
 800ee06:	d901      	bls.n	800ee0c <__ssvfscanf_r+0xcac>
 800ee08:	f7ff fb7b 	bl	800e502 <__ssvfscanf_r+0x3a2>
 800ee0c:	3508      	adds	r5, #8
 800ee0e:	b2ad      	uxth	r5, r5
 800ee10:	00a9      	lsls	r1, r5, #2
 800ee12:	f001 fc9f 	bl	8010754 <realloc>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d101      	bne.n	800ee1e <__ssvfscanf_r+0xcbe>
 800ee1a:	f7ff fb72 	bl	800e502 <__ssvfscanf_r+0x3a2>
 800ee1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee20:	6018      	str	r0, [r3, #0]
 800ee22:	809d      	strh	r5, [r3, #4]
 800ee24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee26:	1c72      	adds	r2, r6, #1
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	00b6      	lsls	r6, r6, #2
 800ee2c:	50f4      	str	r4, [r6, r3]
 800ee2e:	2320      	movs	r3, #32
 800ee30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee32:	0026      	movs	r6, r4
 800ee34:	80ca      	strh	r2, [r1, #6]
 800ee36:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ee38:	633b      	str	r3, [r7, #48]	; 0x30
 800ee3a:	0025      	movs	r5, r4
 800ee3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee3e:	4995      	ldr	r1, [pc, #596]	; (800f094 <__ssvfscanf_r+0xf34>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	781a      	ldrb	r2, [r3, #0]
 800ee44:	5c8a      	ldrb	r2, [r1, r2]
 800ee46:	2108      	movs	r1, #8
 800ee48:	420a      	tst	r2, r1
 800ee4a:	d004      	beq.n	800ee56 <__ssvfscanf_r+0xcf6>
 800ee4c:	623c      	str	r4, [r7, #32]
 800ee4e:	e031      	b.n	800eeb4 <__ssvfscanf_r+0xd54>
 800ee50:	0016      	movs	r6, r2
 800ee52:	633a      	str	r2, [r7, #48]	; 0x30
 800ee54:	e7f1      	b.n	800ee3a <__ssvfscanf_r+0xcda>
 800ee56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee5a:	6852      	ldr	r2, [r2, #4]
 800ee5c:	3a01      	subs	r2, #1
 800ee5e:	604a      	str	r2, [r1, #4]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	600a      	str	r2, [r1, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	1c62      	adds	r2, r4, #1
 800ee68:	623a      	str	r2, [r7, #32]
 800ee6a:	7023      	strb	r3, [r4, #0]
 800ee6c:	2e00      	cmp	r6, #0
 800ee6e:	d010      	beq.n	800ee92 <__ssvfscanf_r+0xd32>
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	1b54      	subs	r4, r2, r5
 800ee74:	429c      	cmp	r4, r3
 800ee76:	d30c      	bcc.n	800ee92 <__ssvfscanf_r+0xd32>
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	0028      	movs	r0, r5
 800ee7c:	0019      	movs	r1, r3
 800ee7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ee80:	f001 fc68 	bl	8010754 <realloc>
 800ee84:	1e05      	subs	r5, r0, #0
 800ee86:	d101      	bne.n	800ee8c <__ssvfscanf_r+0xd2c>
 800ee88:	f7ff fa40 	bl	800e30c <__ssvfscanf_r+0x1ac>
 800ee8c:	1903      	adds	r3, r0, r4
 800ee8e:	623b      	str	r3, [r7, #32]
 800ee90:	6030      	str	r0, [r6, #0]
 800ee92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee94:	3b01      	subs	r3, #1
 800ee96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00b      	beq.n	800eeb4 <__ssvfscanf_r+0xd54>
 800ee9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	dd01      	ble.n	800eea8 <__ssvfscanf_r+0xd48>
 800eea4:	6a3c      	ldr	r4, [r7, #32]
 800eea6:	e7c9      	b.n	800ee3c <__ssvfscanf_r+0xcdc>
 800eea8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eeac:	f002 f8ec 	bl	8011088 <__ssrefill_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0f7      	beq.n	800eea4 <__ssvfscanf_r+0xd44>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6a3a      	ldr	r2, [r7, #32]
 800eeb8:	7013      	strb	r3, [r2, #0]
 800eeba:	1b55      	subs	r5, r2, r5
 800eebc:	2e00      	cmp	r6, #0
 800eebe:	d009      	beq.n	800eed4 <__ssvfscanf_r+0xd74>
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	1c69      	adds	r1, r5, #1
 800eec4:	428b      	cmp	r3, r1
 800eec6:	d905      	bls.n	800eed4 <__ssvfscanf_r+0xd74>
 800eec8:	6830      	ldr	r0, [r6, #0]
 800eeca:	f001 fc43 	bl	8010754 <realloc>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d000      	beq.n	800eed4 <__ssvfscanf_r+0xd74>
 800eed2:	6030      	str	r0, [r6, #0]
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	195b      	adds	r3, r3, r5
 800eed8:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	3301      	adds	r3, #1
 800eede:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eee0:	e63c      	b.n	800eb5c <__ssvfscanf_r+0x9fc>
 800eee2:	22ae      	movs	r2, #174	; 0xae
 800eee4:	2100      	movs	r1, #0
 800eee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee8:	0052      	lsls	r2, r2, #1
 800eeea:	3b01      	subs	r3, #1
 800eeec:	6239      	str	r1, [r7, #32]
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d906      	bls.n	800ef00 <__ssvfscanf_r+0xda0>
 800eef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef4:	3b5e      	subs	r3, #94	; 0x5e
 800eef6:	3bff      	subs	r3, #255	; 0xff
 800eef8:	623b      	str	r3, [r7, #32]
 800eefa:	235e      	movs	r3, #94	; 0x5e
 800eefc:	33ff      	adds	r3, #255	; 0xff
 800eefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef00:	24d8      	movs	r4, #216	; 0xd8
 800ef02:	2300      	movs	r3, #0
 800ef04:	2248      	movs	r2, #72	; 0x48
 800ef06:	0124      	lsls	r4, r4, #4
 800ef08:	4334      	orrs	r4, r6
 800ef0a:	2680      	movs	r6, #128	; 0x80
 800ef0c:	61fb      	str	r3, [r7, #28]
 800ef0e:	3319      	adds	r3, #25
 800ef10:	33ff      	adds	r3, #255	; 0xff
 800ef12:	189b      	adds	r3, r3, r2
 800ef14:	19dd      	adds	r5, r3, r7
 800ef16:	00b6      	lsls	r6, r6, #2
 800ef18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	7813      	ldrb	r3, [r2, #0]
 800ef1e:	2b39      	cmp	r3, #57	; 0x39
 800ef20:	d80f      	bhi.n	800ef42 <__ssvfscanf_r+0xde2>
 800ef22:	2b2a      	cmp	r3, #42	; 0x2a
 800ef24:	d91b      	bls.n	800ef5e <__ssvfscanf_r+0xdfe>
 800ef26:	0018      	movs	r0, r3
 800ef28:	382b      	subs	r0, #43	; 0x2b
 800ef2a:	280e      	cmp	r0, #14
 800ef2c:	d817      	bhi.n	800ef5e <__ssvfscanf_r+0xdfe>
 800ef2e:	f7f1 f8f1 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ef32:	168f      	.short	0x168f
 800ef34:	5416168f 	.word	0x5416168f
 800ef38:	80808080 	.word	0x80808080
 800ef3c:	87808080 	.word	0x87808080
 800ef40:	87          	.byte	0x87
 800ef41:	00          	.byte	0x00
 800ef42:	2b66      	cmp	r3, #102	; 0x66
 800ef44:	d83a      	bhi.n	800efbc <__ssvfscanf_r+0xe5c>
 800ef46:	2b60      	cmp	r3, #96	; 0x60
 800ef48:	d803      	bhi.n	800ef52 <__ssvfscanf_r+0xdf2>
 800ef4a:	2b46      	cmp	r3, #70	; 0x46
 800ef4c:	d805      	bhi.n	800ef5a <__ssvfscanf_r+0xdfa>
 800ef4e:	2b40      	cmp	r3, #64	; 0x40
 800ef50:	d905      	bls.n	800ef5e <__ssvfscanf_r+0xdfe>
 800ef52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef54:	290a      	cmp	r1, #10
 800ef56:	dc71      	bgt.n	800f03c <__ssvfscanf_r+0xedc>
 800ef58:	e001      	b.n	800ef5e <__ssvfscanf_r+0xdfe>
 800ef5a:	2b58      	cmp	r3, #88	; 0x58
 800ef5c:	d030      	beq.n	800efc0 <__ssvfscanf_r+0xe60>
 800ef5e:	05e3      	lsls	r3, r4, #23
 800ef60:	d515      	bpl.n	800ef8e <__ssvfscanf_r+0xe2e>
 800ef62:	238c      	movs	r3, #140	; 0x8c
 800ef64:	2248      	movs	r2, #72	; 0x48
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	189b      	adds	r3, r3, r2
 800ef6a:	19db      	adds	r3, r3, r7
 800ef6c:	429d      	cmp	r5, r3
 800ef6e:	d905      	bls.n	800ef7c <__ssvfscanf_r+0xe1c>
 800ef70:	3d01      	subs	r5, #1
 800ef72:	7829      	ldrb	r1, [r5, #0]
 800ef74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef78:	f002 f84a 	bl	8011010 <_sungetc_r>
 800ef7c:	238c      	movs	r3, #140	; 0x8c
 800ef7e:	2248      	movs	r2, #72	; 0x48
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	189b      	adds	r3, r3, r2
 800ef84:	19db      	adds	r3, r3, r7
 800ef86:	429d      	cmp	r5, r3
 800ef88:	d101      	bne.n	800ef8e <__ssvfscanf_r+0xe2e>
 800ef8a:	f7ff f9e6 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800ef8e:	2310      	movs	r3, #16
 800ef90:	0022      	movs	r2, r4
 800ef92:	401a      	ands	r2, r3
 800ef94:	421c      	tst	r4, r3
 800ef96:	d171      	bne.n	800f07c <__ssvfscanf_r+0xf1c>
 800ef98:	218c      	movs	r1, #140	; 0x8c
 800ef9a:	2048      	movs	r0, #72	; 0x48
 800ef9c:	0049      	lsls	r1, r1, #1
 800ef9e:	1809      	adds	r1, r1, r0
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	697e      	ldr	r6, [r7, #20]
 800efa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efa6:	19c9      	adds	r1, r1, r7
 800efa8:	702a      	strb	r2, [r5, #0]
 800efaa:	47b0      	blx	r6
 800efac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efae:	1d1e      	adds	r6, r3, #4
 800efb0:	06a3      	lsls	r3, r4, #26
 800efb2:	d559      	bpl.n	800f068 <__ssvfscanf_r+0xf08>
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6018      	str	r0, [r3, #0]
 800efba:	e05b      	b.n	800f074 <__ssvfscanf_r+0xf14>
 800efbc:	2b78      	cmp	r3, #120	; 0x78
 800efbe:	d1ce      	bne.n	800ef5e <__ssvfscanf_r+0xdfe>
 800efc0:	21c0      	movs	r1, #192	; 0xc0
 800efc2:	00c9      	lsls	r1, r1, #3
 800efc4:	4021      	ands	r1, r4
 800efc6:	42b1      	cmp	r1, r6
 800efc8:	d1c9      	bne.n	800ef5e <__ssvfscanf_r+0xdfe>
 800efca:	4934      	ldr	r1, [pc, #208]	; (800f09c <__ssvfscanf_r+0xf3c>)
 800efcc:	4021      	ands	r1, r4
 800efce:	24a0      	movs	r4, #160	; 0xa0
 800efd0:	00e4      	lsls	r4, r4, #3
 800efd2:	430c      	orrs	r4, r1
 800efd4:	2110      	movs	r1, #16
 800efd6:	6279      	str	r1, [r7, #36]	; 0x24
 800efd8:	e00b      	b.n	800eff2 <__ssvfscanf_r+0xe92>
 800efda:	0521      	lsls	r1, r4, #20
 800efdc:	d509      	bpl.n	800eff2 <__ssvfscanf_r+0xe92>
 800efde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efe0:	2900      	cmp	r1, #0
 800efe2:	d102      	bne.n	800efea <__ssvfscanf_r+0xe8a>
 800efe4:	3108      	adds	r1, #8
 800efe6:	4334      	orrs	r4, r6
 800efe8:	6279      	str	r1, [r7, #36]	; 0x24
 800efea:	0561      	lsls	r1, r4, #21
 800efec:	d504      	bpl.n	800eff8 <__ssvfscanf_r+0xe98>
 800efee:	492c      	ldr	r1, [pc, #176]	; (800f0a0 <__ssvfscanf_r+0xf40>)
 800eff0:	400c      	ands	r4, r1
 800eff2:	702b      	strb	r3, [r5, #0]
 800eff4:	3501      	adds	r5, #1
 800eff6:	e00c      	b.n	800f012 <__ssvfscanf_r+0xeb2>
 800eff8:	4b2a      	ldr	r3, [pc, #168]	; (800f0a4 <__ssvfscanf_r+0xf44>)
 800effa:	401c      	ands	r4, r3
 800effc:	6a3b      	ldr	r3, [r7, #32]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d004      	beq.n	800f00c <__ssvfscanf_r+0xeac>
 800f002:	3b01      	subs	r3, #1
 800f004:	623b      	str	r3, [r7, #32]
 800f006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f008:	3301      	adds	r3, #1
 800f00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	3301      	adds	r3, #1
 800f010:	61fb      	str	r3, [r7, #28]
 800f012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f014:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	3b01      	subs	r3, #1
 800f01a:	604b      	str	r3, [r1, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	dd1c      	ble.n	800f05a <__ssvfscanf_r+0xefa>
 800f020:	3201      	adds	r2, #1
 800f022:	600a      	str	r2, [r1, #0]
 800f024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f026:	3b01      	subs	r3, #1
 800f028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d000      	beq.n	800f030 <__ssvfscanf_r+0xed0>
 800f02e:	e773      	b.n	800ef18 <__ssvfscanf_r+0xdb8>
 800f030:	e795      	b.n	800ef5e <__ssvfscanf_r+0xdfe>
 800f032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f034:	491c      	ldr	r1, [pc, #112]	; (800f0a8 <__ssvfscanf_r+0xf48>)
 800f036:	0040      	lsls	r0, r0, #1
 800f038:	5e41      	ldrsh	r1, [r0, r1]
 800f03a:	6279      	str	r1, [r7, #36]	; 0x24
 800f03c:	491b      	ldr	r1, [pc, #108]	; (800f0ac <__ssvfscanf_r+0xf4c>)
 800f03e:	e7d7      	b.n	800eff0 <__ssvfscanf_r+0xe90>
 800f040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f042:	4919      	ldr	r1, [pc, #100]	; (800f0a8 <__ssvfscanf_r+0xf48>)
 800f044:	0040      	lsls	r0, r0, #1
 800f046:	5e41      	ldrsh	r1, [r0, r1]
 800f048:	6279      	str	r1, [r7, #36]	; 0x24
 800f04a:	2908      	cmp	r1, #8
 800f04c:	dcf6      	bgt.n	800f03c <__ssvfscanf_r+0xedc>
 800f04e:	e786      	b.n	800ef5e <__ssvfscanf_r+0xdfe>
 800f050:	2180      	movs	r1, #128	; 0x80
 800f052:	420c      	tst	r4, r1
 800f054:	d083      	beq.n	800ef5e <__ssvfscanf_r+0xdfe>
 800f056:	438c      	bics	r4, r1
 800f058:	e7cb      	b.n	800eff2 <__ssvfscanf_r+0xe92>
 800f05a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f05c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f05e:	f002 f813 	bl	8011088 <__ssrefill_r>
 800f062:	2800      	cmp	r0, #0
 800f064:	d0de      	beq.n	800f024 <__ssvfscanf_r+0xec4>
 800f066:	e77a      	b.n	800ef5e <__ssvfscanf_r+0xdfe>
 800f068:	2308      	movs	r3, #8
 800f06a:	421c      	tst	r4, r3
 800f06c:	d020      	beq.n	800f0b0 <__ssvfscanf_r+0xf50>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	7018      	strb	r0, [r3, #0]
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	633e      	str	r6, [r7, #48]	; 0x30
 800f078:	3301      	adds	r3, #1
 800f07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f07c:	238c      	movs	r3, #140	; 0x8c
 800f07e:	2248      	movs	r2, #72	; 0x48
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	189b      	adds	r3, r3, r2
 800f084:	19db      	adds	r3, r3, r7
 800f086:	1aed      	subs	r5, r5, r3
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	18ed      	adds	r5, r5, r3
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	195b      	adds	r3, r3, r5
 800f090:	f7ff f92d 	bl	800e2ee <__ssvfscanf_r+0x18e>
 800f094:	08013ff9 	.word	0x08013ff9
 800f098:	0000fff6 	.word	0x0000fff6
 800f09c:	fffffdff 	.word	0xfffffdff
 800f0a0:	fffffa7f 	.word	0xfffffa7f
 800f0a4:	fffffc7f 	.word	0xfffffc7f
 800f0a8:	08014326 	.word	0x08014326
 800f0ac:	fffff47f 	.word	0xfffff47f
 800f0b0:	0763      	lsls	r3, r4, #29
 800f0b2:	d503      	bpl.n	800f0bc <__ssvfscanf_r+0xf5c>
 800f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	8018      	strh	r0, [r3, #0]
 800f0ba:	e7db      	b.n	800f074 <__ssvfscanf_r+0xf14>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	0022      	movs	r2, r4
 800f0c0:	401a      	ands	r2, r3
 800f0c2:	421c      	tst	r4, r3
 800f0c4:	d000      	beq.n	800f0c8 <__ssvfscanf_r+0xf68>
 800f0c6:	e775      	b.n	800efb4 <__ssvfscanf_r+0xe54>
 800f0c8:	07a4      	lsls	r4, r4, #30
 800f0ca:	d400      	bmi.n	800f0ce <__ssvfscanf_r+0xf6e>
 800f0cc:	e772      	b.n	800efb4 <__ssvfscanf_r+0xe54>
 800f0ce:	4ba8      	ldr	r3, [pc, #672]	; (800f370 <__ssvfscanf_r+0x1210>)
 800f0d0:	6979      	ldr	r1, [r7, #20]
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	d10c      	bne.n	800f0f0 <__ssvfscanf_r+0xf90>
 800f0d6:	218c      	movs	r1, #140	; 0x8c
 800f0d8:	2048      	movs	r0, #72	; 0x48
 800f0da:	0049      	lsls	r1, r1, #1
 800f0dc:	1809      	adds	r1, r1, r0
 800f0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0e2:	19c9      	adds	r1, r1, r7
 800f0e4:	f001 fecc 	bl	8010e80 <_strtoull_r>
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	c303      	stmia	r3!, {r0, r1}
 800f0ee:	e7c1      	b.n	800f074 <__ssvfscanf_r+0xf14>
 800f0f0:	218c      	movs	r1, #140	; 0x8c
 800f0f2:	2048      	movs	r0, #72	; 0x48
 800f0f4:	0049      	lsls	r1, r1, #1
 800f0f6:	1809      	adds	r1, r1, r0
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0fc:	19c9      	adds	r1, r1, r7
 800f0fe:	f001 fe0d 	bl	8010d1c <_strtoll_r>
 800f102:	e7f1      	b.n	800f0e8 <__ssvfscanf_r+0xf88>
 800f104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f106:	f000 fb9f 	bl	800f848 <_localeconv_r>
 800f10a:	22ae      	movs	r2, #174	; 0xae
 800f10c:	2100      	movs	r1, #0
 800f10e:	6803      	ldr	r3, [r0, #0]
 800f110:	0052      	lsls	r2, r2, #1
 800f112:	603b      	str	r3, [r7, #0]
 800f114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f116:	60f9      	str	r1, [r7, #12]
 800f118:	3b01      	subs	r3, #1
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d906      	bls.n	800f12c <__ssvfscanf_r+0xfcc>
 800f11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f120:	3b5e      	subs	r3, #94	; 0x5e
 800f122:	3bff      	subs	r3, #255	; 0xff
 800f124:	60fb      	str	r3, [r7, #12]
 800f126:	235e      	movs	r3, #94	; 0x5e
 800f128:	33ff      	adds	r3, #255	; 0xff
 800f12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f12c:	23f0      	movs	r3, #240	; 0xf0
 800f12e:	00db      	lsls	r3, r3, #3
 800f130:	431e      	orrs	r6, r3
 800f132:	238c      	movs	r3, #140	; 0x8c
 800f134:	2248      	movs	r2, #72	; 0x48
 800f136:	2400      	movs	r4, #0
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	189b      	adds	r3, r3, r2
 800f13c:	623c      	str	r4, [r7, #32]
 800f13e:	607c      	str	r4, [r7, #4]
 800f140:	60bc      	str	r4, [r7, #8]
 800f142:	61fc      	str	r4, [r7, #28]
 800f144:	613c      	str	r4, [r7, #16]
 800f146:	19dd      	adds	r5, r3, r7
 800f148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	781a      	ldrb	r2, [r3, #0]
 800f14e:	0010      	movs	r0, r2
 800f150:	382b      	subs	r0, #43	; 0x2b
 800f152:	284e      	cmp	r0, #78	; 0x4e
 800f154:	d900      	bls.n	800f158 <__ssvfscanf_r+0xff8>
 800f156:	e133      	b.n	800f3c0 <__ssvfscanf_r+0x1260>
 800f158:	f7f0 ffe6 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f15c:	0132009b 	.word	0x0132009b
 800f160:	0132009b 	.word	0x0132009b
 800f164:	004f0132 	.word	0x004f0132
 800f168:	00720072 	.word	0x00720072
 800f16c:	00720072 	.word	0x00720072
 800f170:	00720072 	.word	0x00720072
 800f174:	00720072 	.word	0x00720072
 800f178:	01320072 	.word	0x01320072
 800f17c:	01320132 	.word	0x01320132
 800f180:	01320132 	.word	0x01320132
 800f184:	01320132 	.word	0x01320132
 800f188:	007b00bc 	.word	0x007b00bc
 800f18c:	007b007b 	.word	0x007b007b
 800f190:	00f7012f 	.word	0x00f7012f
 800f194:	01320132 	.word	0x01320132
 800f198:	013200e3 	.word	0x013200e3
 800f19c:	01320132 	.word	0x01320132
 800f1a0:	00a00132 	.word	0x00a00132
 800f1a4:	01120132 	.word	0x01120132
 800f1a8:	01320132 	.word	0x01320132
 800f1ac:	01010132 	.word	0x01010132
 800f1b0:	01320132 	.word	0x01320132
 800f1b4:	00820132 	.word	0x00820132
 800f1b8:	01320105 	.word	0x01320105
 800f1bc:	01320132 	.word	0x01320132
 800f1c0:	01320132 	.word	0x01320132
 800f1c4:	01320132 	.word	0x01320132
 800f1c8:	007b00bc 	.word	0x007b00bc
 800f1cc:	007b007b 	.word	0x007b007b
 800f1d0:	00f7012f 	.word	0x00f7012f
 800f1d4:	01320132 	.word	0x01320132
 800f1d8:	013200e3 	.word	0x013200e3
 800f1dc:	01320132 	.word	0x01320132
 800f1e0:	00a00132 	.word	0x00a00132
 800f1e4:	01120132 	.word	0x01120132
 800f1e8:	01320132 	.word	0x01320132
 800f1ec:	01010132 	.word	0x01010132
 800f1f0:	01320132 	.word	0x01320132
 800f1f4:	00820132 	.word	0x00820132
 800f1f8:	0105      	.short	0x0105
 800f1fa:	05f1      	lsls	r1, r6, #23
 800f1fc:	d520      	bpl.n	800f240 <__ssvfscanf_r+0x10e0>
 800f1fe:	2280      	movs	r2, #128	; 0x80
 800f200:	4396      	bics	r6, r2
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	3201      	adds	r2, #1
 800f206:	61fa      	str	r2, [r7, #28]
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	2a00      	cmp	r2, #0
 800f20c:	d004      	beq.n	800f218 <__ssvfscanf_r+0x10b8>
 800f20e:	3a01      	subs	r2, #1
 800f210:	60fa      	str	r2, [r7, #12]
 800f212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f214:	3201      	adds	r2, #1
 800f216:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f21a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f21c:	3a01      	subs	r2, #1
 800f21e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f222:	3201      	adds	r2, #1
 800f224:	63ba      	str	r2, [r7, #56]	; 0x38
 800f226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f228:	6852      	ldr	r2, [r2, #4]
 800f22a:	3a01      	subs	r2, #1
 800f22c:	604a      	str	r2, [r1, #4]
 800f22e:	2a00      	cmp	r2, #0
 800f230:	dc00      	bgt.n	800f234 <__ssvfscanf_r+0x10d4>
 800f232:	e0d6      	b.n	800f3e2 <__ssvfscanf_r+0x1282>
 800f234:	3301      	adds	r3, #1
 800f236:	600b      	str	r3, [r1, #0]
 800f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d184      	bne.n	800f148 <__ssvfscanf_r+0xfe8>
 800f23e:	e057      	b.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f240:	6a39      	ldr	r1, [r7, #32]
 800f242:	1909      	adds	r1, r1, r4
 800f244:	2900      	cmp	r1, #0
 800f246:	d153      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f248:	494a      	ldr	r1, [pc, #296]	; (800f374 <__ssvfscanf_r+0x1214>)
 800f24a:	400e      	ands	r6, r1
 800f24c:	702a      	strb	r2, [r5, #0]
 800f24e:	3501      	adds	r5, #1
 800f250:	e7e2      	b.n	800f218 <__ssvfscanf_r+0x10b8>
 800f252:	0531      	lsls	r1, r6, #20
 800f254:	d54c      	bpl.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f256:	6a39      	ldr	r1, [r7, #32]
 800f258:	1909      	adds	r1, r1, r4
 800f25a:	2900      	cmp	r1, #0
 800f25c:	d040      	beq.n	800f2e0 <__ssvfscanf_r+0x1180>
 800f25e:	e047      	b.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f260:	2198      	movs	r1, #152	; 0x98
 800f262:	2080      	movs	r0, #128	; 0x80
 800f264:	0109      	lsls	r1, r1, #4
 800f266:	4031      	ands	r1, r6
 800f268:	0040      	lsls	r0, r0, #1
 800f26a:	4281      	cmp	r1, r0
 800f26c:	d140      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f26e:	69f9      	ldr	r1, [r7, #28]
 800f270:	2901      	cmp	r1, #1
 800f272:	d13d      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f274:	2080      	movs	r0, #128	; 0x80
 800f276:	4940      	ldr	r1, [pc, #256]	; (800f378 <__ssvfscanf_r+0x1218>)
 800f278:	0100      	lsls	r0, r0, #4
 800f27a:	400e      	ands	r6, r1
 800f27c:	3132      	adds	r1, #50	; 0x32
 800f27e:	31ff      	adds	r1, #255	; 0xff
 800f280:	7029      	strb	r1, [r5, #0]
 800f282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f284:	4306      	orrs	r6, r0
 800f286:	3901      	subs	r1, #1
 800f288:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f28a:	3501      	adds	r5, #1
 800f28c:	2100      	movs	r1, #0
 800f28e:	61f9      	str	r1, [r7, #28]
 800f290:	e7dc      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f292:	2180      	movs	r1, #128	; 0x80
 800f294:	420e      	tst	r6, r1
 800f296:	d02b      	beq.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f298:	438e      	bics	r6, r1
 800f29a:	e7d7      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f29c:	6a39      	ldr	r1, [r7, #32]
 800f29e:	2900      	cmp	r1, #0
 800f2a0:	d10d      	bne.n	800f2be <__ssvfscanf_r+0x115e>
 800f2a2:	69f9      	ldr	r1, [r7, #28]
 800f2a4:	2900      	cmp	r1, #0
 800f2a6:	d10e      	bne.n	800f2c6 <__ssvfscanf_r+0x1166>
 800f2a8:	21e0      	movs	r1, #224	; 0xe0
 800f2aa:	0030      	movs	r0, r6
 800f2ac:	00c9      	lsls	r1, r1, #3
 800f2ae:	4008      	ands	r0, r1
 800f2b0:	4288      	cmp	r0, r1
 800f2b2:	d108      	bne.n	800f2c6 <__ssvfscanf_r+0x1166>
 800f2b4:	4931      	ldr	r1, [pc, #196]	; (800f37c <__ssvfscanf_r+0x121c>)
 800f2b6:	400e      	ands	r6, r1
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	6239      	str	r1, [r7, #32]
 800f2bc:	e7c6      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f2be:	6a39      	ldr	r1, [r7, #32]
 800f2c0:	2902      	cmp	r1, #2
 800f2c2:	d100      	bne.n	800f2c6 <__ssvfscanf_r+0x1166>
 800f2c4:	e089      	b.n	800f3da <__ssvfscanf_r+0x127a>
 800f2c6:	2c01      	cmp	r4, #1
 800f2c8:	d001      	beq.n	800f2ce <__ssvfscanf_r+0x116e>
 800f2ca:	2c04      	cmp	r4, #4
 800f2cc:	d110      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f2ce:	3401      	adds	r4, #1
 800f2d0:	b2e4      	uxtb	r4, r4
 800f2d2:	e7bb      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f2d4:	0531      	lsls	r1, r6, #20
 800f2d6:	d508      	bpl.n	800f2ea <__ssvfscanf_r+0x118a>
 800f2d8:	6a39      	ldr	r1, [r7, #32]
 800f2da:	1909      	adds	r1, r1, r4
 800f2dc:	2900      	cmp	r1, #0
 800f2de:	d104      	bne.n	800f2ea <__ssvfscanf_r+0x118a>
 800f2e0:	4824      	ldr	r0, [pc, #144]	; (800f374 <__ssvfscanf_r+0x1214>)
 800f2e2:	000c      	movs	r4, r1
 800f2e4:	4006      	ands	r6, r0
 800f2e6:	6239      	str	r1, [r7, #32]
 800f2e8:	e7b0      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f2ea:	6a39      	ldr	r1, [r7, #32]
 800f2ec:	2901      	cmp	r1, #1
 800f2ee:	d076      	beq.n	800f3de <__ssvfscanf_r+0x127e>
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <__ssvfscanf_r+0x119a>
 800f2f6:	4b20      	ldr	r3, [pc, #128]	; (800f378 <__ssvfscanf_r+0x1218>)
 800f2f8:	401e      	ands	r6, r3
 800f2fa:	6a3b      	ldr	r3, [r7, #32]
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d877      	bhi.n	800f3f2 <__ssvfscanf_r+0x1292>
 800f302:	238c      	movs	r3, #140	; 0x8c
 800f304:	2248      	movs	r2, #72	; 0x48
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	189b      	adds	r3, r3, r2
 800f30a:	19db      	adds	r3, r3, r7
 800f30c:	429d      	cmp	r5, r3
 800f30e:	d801      	bhi.n	800f314 <__ssvfscanf_r+0x11b4>
 800f310:	f7ff f823 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800f314:	3d01      	subs	r5, #1
 800f316:	7829      	ldrb	r1, [r5, #0]
 800f318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f31a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f31c:	f001 fe78 	bl	8011010 <_sungetc_r>
 800f320:	e7ef      	b.n	800f302 <__ssvfscanf_r+0x11a2>
 800f322:	2c00      	cmp	r4, #0
 800f324:	d10c      	bne.n	800f340 <__ssvfscanf_r+0x11e0>
 800f326:	69f9      	ldr	r1, [r7, #28]
 800f328:	2900      	cmp	r1, #0
 800f32a:	d1e4      	bne.n	800f2f6 <__ssvfscanf_r+0x1196>
 800f32c:	21e0      	movs	r1, #224	; 0xe0
 800f32e:	0030      	movs	r0, r6
 800f330:	00c9      	lsls	r1, r1, #3
 800f332:	4008      	ands	r0, r1
 800f334:	4288      	cmp	r0, r1
 800f336:	d1e0      	bne.n	800f2fa <__ssvfscanf_r+0x119a>
 800f338:	4910      	ldr	r1, [pc, #64]	; (800f37c <__ssvfscanf_r+0x121c>)
 800f33a:	3401      	adds	r4, #1
 800f33c:	400e      	ands	r6, r1
 800f33e:	e785      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f340:	20fd      	movs	r0, #253	; 0xfd
 800f342:	1ee1      	subs	r1, r4, #3
 800f344:	4201      	tst	r1, r0
 800f346:	d1d3      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f348:	e7c1      	b.n	800f2ce <__ssvfscanf_r+0x116e>
 800f34a:	0531      	lsls	r1, r6, #20
 800f34c:	d503      	bpl.n	800f356 <__ssvfscanf_r+0x11f6>
 800f34e:	6a39      	ldr	r1, [r7, #32]
 800f350:	1909      	adds	r1, r1, r4
 800f352:	2900      	cmp	r1, #0
 800f354:	d0c4      	beq.n	800f2e0 <__ssvfscanf_r+0x1180>
 800f356:	2c02      	cmp	r4, #2
 800f358:	d1ca      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f35a:	2403      	movs	r4, #3
 800f35c:	e776      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f35e:	2c06      	cmp	r4, #6
 800f360:	d1c6      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f362:	2407      	movs	r4, #7
 800f364:	e772      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f366:	2c07      	cmp	r4, #7
 800f368:	d1c2      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f36a:	2408      	movs	r4, #8
 800f36c:	e76e      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f36e:	46c0      	nop			; (mov r8, r8)
 800f370:	08010bb9 	.word	0x08010bb9
 800f374:	fffffe7f 	.word	0xfffffe7f
 800f378:	fffffeff 	.word	0xfffffeff
 800f37c:	fffff87f 	.word	0xfffff87f
 800f380:	0531      	lsls	r1, r6, #20
 800f382:	d5b5      	bpl.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f384:	21a0      	movs	r1, #160	; 0xa0
 800f386:	2080      	movs	r0, #128	; 0x80
 800f388:	00c9      	lsls	r1, r1, #3
 800f38a:	00c0      	lsls	r0, r0, #3
 800f38c:	4031      	ands	r1, r6
 800f38e:	4281      	cmp	r1, r0
 800f390:	d004      	beq.n	800f39c <__ssvfscanf_r+0x123c>
 800f392:	4206      	tst	r6, r0
 800f394:	d0ac      	beq.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f396:	69f9      	ldr	r1, [r7, #28]
 800f398:	2900      	cmp	r1, #0
 800f39a:	d0ae      	beq.n	800f2fa <__ssvfscanf_r+0x119a>
 800f39c:	2180      	movs	r1, #128	; 0x80
 800f39e:	0089      	lsls	r1, r1, #2
 800f3a0:	420e      	tst	r6, r1
 800f3a2:	d104      	bne.n	800f3ae <__ssvfscanf_r+0x124e>
 800f3a4:	69f9      	ldr	r1, [r7, #28]
 800f3a6:	6938      	ldr	r0, [r7, #16]
 800f3a8:	607d      	str	r5, [r7, #4]
 800f3aa:	1a09      	subs	r1, r1, r0
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	20c0      	movs	r0, #192	; 0xc0
 800f3b0:	4973      	ldr	r1, [pc, #460]	; (800f580 <__ssvfscanf_r+0x1420>)
 800f3b2:	0040      	lsls	r0, r0, #1
 800f3b4:	400e      	ands	r6, r1
 800f3b6:	4306      	orrs	r6, r0
 800f3b8:	e768      	b.n	800f28c <__ssvfscanf_r+0x112c>
 800f3ba:	0531      	lsls	r1, r6, #20
 800f3bc:	d5e2      	bpl.n	800f384 <__ssvfscanf_r+0x1224>
 800f3be:	e74a      	b.n	800f256 <__ssvfscanf_r+0x10f6>
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	7809      	ldrb	r1, [r1, #0]
 800f3c4:	4291      	cmp	r1, r2
 800f3c6:	d193      	bne.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f3c8:	2180      	movs	r1, #128	; 0x80
 800f3ca:	0089      	lsls	r1, r1, #2
 800f3cc:	420e      	tst	r6, r1
 800f3ce:	d08f      	beq.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f3d0:	496c      	ldr	r1, [pc, #432]	; (800f584 <__ssvfscanf_r+0x1424>)
 800f3d2:	400e      	ands	r6, r1
 800f3d4:	69f9      	ldr	r1, [r7, #28]
 800f3d6:	6139      	str	r1, [r7, #16]
 800f3d8:	e738      	b.n	800f24c <__ssvfscanf_r+0x10ec>
 800f3da:	2103      	movs	r1, #3
 800f3dc:	e76d      	b.n	800f2ba <__ssvfscanf_r+0x115a>
 800f3de:	2102      	movs	r1, #2
 800f3e0:	e76b      	b.n	800f2ba <__ssvfscanf_r+0x115a>
 800f3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3e6:	f001 fe4f 	bl	8011088 <__ssrefill_r>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	d100      	bne.n	800f3f0 <__ssvfscanf_r+0x1290>
 800f3ee:	e723      	b.n	800f238 <__ssvfscanf_r+0x10d8>
 800f3f0:	e77e      	b.n	800f2f0 <__ssvfscanf_r+0x1190>
 800f3f2:	1e63      	subs	r3, r4, #1
 800f3f4:	2b06      	cmp	r3, #6
 800f3f6:	d825      	bhi.n	800f444 <__ssvfscanf_r+0x12e4>
 800f3f8:	2c02      	cmp	r4, #2
 800f3fa:	d837      	bhi.n	800f46c <__ssvfscanf_r+0x130c>
 800f3fc:	238c      	movs	r3, #140	; 0x8c
 800f3fe:	2248      	movs	r2, #72	; 0x48
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	189b      	adds	r3, r3, r2
 800f404:	19db      	adds	r3, r3, r7
 800f406:	429d      	cmp	r5, r3
 800f408:	d801      	bhi.n	800f40e <__ssvfscanf_r+0x12ae>
 800f40a:	f7fe ffa6 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800f40e:	3d01      	subs	r5, #1
 800f410:	7829      	ldrb	r1, [r5, #0]
 800f412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f414:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f416:	f001 fdfb 	bl	8011010 <_sungetc_r>
 800f41a:	e7ef      	b.n	800f3fc <__ssvfscanf_r+0x129c>
 800f41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f420:	3b01      	subs	r3, #1
 800f422:	7819      	ldrb	r1, [r3, #0]
 800f424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f428:	f001 fdf2 	bl	8011010 <_sungetc_r>
 800f42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42e:	6a3a      	ldr	r2, [r7, #32]
 800f430:	189b      	adds	r3, r3, r2
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b03      	cmp	r3, #3
 800f436:	d8f1      	bhi.n	800f41c <__ssvfscanf_r+0x12bc>
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	3c03      	subs	r4, #3
 800f43c:	b2e4      	uxtb	r4, r4
 800f43e:	1b1b      	subs	r3, r3, r4
 800f440:	1b2d      	subs	r5, r5, r4
 800f442:	63bb      	str	r3, [r7, #56]	; 0x38
 800f444:	05f3      	lsls	r3, r6, #23
 800f446:	d52f      	bpl.n	800f4a8 <__ssvfscanf_r+0x1348>
 800f448:	0573      	lsls	r3, r6, #21
 800f44a:	d514      	bpl.n	800f476 <__ssvfscanf_r+0x1316>
 800f44c:	238c      	movs	r3, #140	; 0x8c
 800f44e:	2248      	movs	r2, #72	; 0x48
 800f450:	005b      	lsls	r3, r3, #1
 800f452:	189b      	adds	r3, r3, r2
 800f454:	19db      	adds	r3, r3, r7
 800f456:	429d      	cmp	r5, r3
 800f458:	d801      	bhi.n	800f45e <__ssvfscanf_r+0x12fe>
 800f45a:	f7fe ff7e 	bl	800e35a <__ssvfscanf_r+0x1fa>
 800f45e:	3d01      	subs	r5, #1
 800f460:	7829      	ldrb	r1, [r5, #0]
 800f462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f464:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f466:	f001 fdd3 	bl	8011010 <_sungetc_r>
 800f46a:	e7ef      	b.n	800f44c <__ssvfscanf_r+0x12ec>
 800f46c:	1b63      	subs	r3, r4, r5
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f472:	623b      	str	r3, [r7, #32]
 800f474:	e7da      	b.n	800f42c <__ssvfscanf_r+0x12cc>
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	1e6c      	subs	r4, r5, #1
 800f47a:	7821      	ldrb	r1, [r4, #0]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f480:	2965      	cmp	r1, #101	; 0x65
 800f482:	d00a      	beq.n	800f49a <__ssvfscanf_r+0x133a>
 800f484:	2945      	cmp	r1, #69	; 0x45
 800f486:	d008      	beq.n	800f49a <__ssvfscanf_r+0x133a>
 800f488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f48a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f48c:	f001 fdc0 	bl	8011010 <_sungetc_r>
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	1eac      	subs	r4, r5, #2
 800f494:	3b02      	subs	r3, #2
 800f496:	7821      	ldrb	r1, [r4, #0]
 800f498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f49a:	0025      	movs	r5, r4
 800f49c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f49e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4a0:	f001 fdb6 	bl	8011010 <_sungetc_r>
 800f4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4a8:	2310      	movs	r3, #16
 800f4aa:	0032      	movs	r2, r6
 800f4ac:	401a      	ands	r2, r3
 800f4ae:	421e      	tst	r6, r3
 800f4b0:	d001      	beq.n	800f4b6 <__ssvfscanf_r+0x1356>
 800f4b2:	f7fe fe71 	bl	800e198 <__ssvfscanf_r+0x38>
 800f4b6:	23c0      	movs	r3, #192	; 0xc0
 800f4b8:	2180      	movs	r1, #128	; 0x80
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	702a      	strb	r2, [r5, #0]
 800f4be:	4033      	ands	r3, r6
 800f4c0:	00c9      	lsls	r1, r1, #3
 800f4c2:	428b      	cmp	r3, r1
 800f4c4:	d11f      	bne.n	800f506 <__ssvfscanf_r+0x13a6>
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	69fa      	ldr	r2, [r7, #28]
 800f4ca:	69f9      	ldr	r1, [r7, #28]
 800f4cc:	1a9a      	subs	r2, r3, r2
 800f4ce:	428b      	cmp	r3, r1
 800f4d0:	d125      	bne.n	800f51e <__ssvfscanf_r+0x13be>
 800f4d2:	238c      	movs	r3, #140	; 0x8c
 800f4d4:	2148      	movs	r1, #72	; 0x48
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	185b      	adds	r3, r3, r1
 800f4da:	19d9      	adds	r1, r3, r7
 800f4dc:	2200      	movs	r2, #0
 800f4de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4e0:	f7fb ffca 	bl	800b478 <_strtod_r>
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	0004      	movs	r4, r0
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	000d      	movs	r5, r1
 800f4ec:	623b      	str	r3, [r7, #32]
 800f4ee:	07f3      	lsls	r3, r6, #31
 800f4f0:	d523      	bpl.n	800f53a <__ssvfscanf_r+0x13da>
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	601c      	str	r4, [r3, #0]
 800f4f8:	605d      	str	r5, [r3, #4]
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	f7fe ffa5 	bl	800e450 <__ssvfscanf_r+0x2f0>
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d0e2      	beq.n	800f4d2 <__ssvfscanf_r+0x1372>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f510:	1c59      	adds	r1, r3, #1
 800f512:	230a      	movs	r3, #10
 800f514:	f7fc f84c 	bl	800b5b0 <_strtol_r>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	687d      	ldr	r5, [r7, #4]
 800f51c:	1ac2      	subs	r2, r0, r3
 800f51e:	2148      	movs	r1, #72	; 0x48
 800f520:	4b19      	ldr	r3, [pc, #100]	; (800f588 <__ssvfscanf_r+0x1428>)
 800f522:	185b      	adds	r3, r3, r1
 800f524:	19db      	adds	r3, r3, r7
 800f526:	429d      	cmp	r5, r3
 800f528:	d302      	bcc.n	800f530 <__ssvfscanf_r+0x13d0>
 800f52a:	4b18      	ldr	r3, [pc, #96]	; (800f58c <__ssvfscanf_r+0x142c>)
 800f52c:	185b      	adds	r3, r3, r1
 800f52e:	19dd      	adds	r5, r3, r7
 800f530:	0028      	movs	r0, r5
 800f532:	4917      	ldr	r1, [pc, #92]	; (800f590 <__ssvfscanf_r+0x1430>)
 800f534:	f7fc f944 	bl	800b7c0 <sprintf>
 800f538:	e7cb      	b.n	800f4d2 <__ssvfscanf_r+0x1372>
 800f53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f540:	07b6      	lsls	r6, r6, #30
 800f542:	d4d8      	bmi.n	800f4f6 <__ssvfscanf_r+0x1396>
 800f544:	0002      	movs	r2, r0
 800f546:	000b      	movs	r3, r1
 800f548:	f7f2 fed4 	bl	80022f4 <__aeabi_dcmpun>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d005      	beq.n	800f55c <__ssvfscanf_r+0x13fc>
 800f550:	4810      	ldr	r0, [pc, #64]	; (800f594 <__ssvfscanf_r+0x1434>)
 800f552:	f7fc fabf 	bl	800bad4 <nanf>
 800f556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f558:	6018      	str	r0, [r3, #0]
 800f55a:	e7ce      	b.n	800f4fa <__ssvfscanf_r+0x139a>
 800f55c:	0020      	movs	r0, r4
 800f55e:	0029      	movs	r1, r5
 800f560:	f7f2 ff72 	bl	8002448 <__aeabi_d2f>
 800f564:	e7f7      	b.n	800f556 <__ssvfscanf_r+0x13f6>
 800f566:	00a3      	lsls	r3, r4, #2
 800f568:	18ed      	adds	r5, r5, r3
 800f56a:	682b      	ldr	r3, [r5, #0]
 800f56c:	3401      	adds	r4, #1
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	f7fa ff32 	bl	800a3d8 <free>
 800f574:	2200      	movs	r2, #0
 800f576:	682b      	ldr	r3, [r5, #0]
 800f578:	601a      	str	r2, [r3, #0]
 800f57a:	f7fe ffc3 	bl	800e504 <__ssvfscanf_r+0x3a4>
 800f57e:	46c0      	nop			; (mov r8, r8)
 800f580:	fffff07f 	.word	0xfffff07f
 800f584:	fffffd7f 	.word	0xfffffd7f
 800f588:	0000026b 	.word	0x0000026b
 800f58c:	0000026a 	.word	0x0000026a
 800f590:	08014320 	.word	0x08014320
 800f594:	08014383 	.word	0x08014383

0800f598 <_fclose_r>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	0005      	movs	r5, r0
 800f59c:	1e0c      	subs	r4, r1, #0
 800f59e:	d102      	bne.n	800f5a6 <_fclose_r+0xe>
 800f5a0:	2600      	movs	r6, #0
 800f5a2:	0030      	movs	r0, r6
 800f5a4:	bd70      	pop	{r4, r5, r6, pc}
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d004      	beq.n	800f5b4 <_fclose_r+0x1c>
 800f5aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d101      	bne.n	800f5b4 <_fclose_r+0x1c>
 800f5b0:	f7fc f89e 	bl	800b6f0 <__sinit>
 800f5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b6:	07db      	lsls	r3, r3, #31
 800f5b8:	d405      	bmi.n	800f5c6 <_fclose_r+0x2e>
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	059b      	lsls	r3, r3, #22
 800f5be:	d402      	bmi.n	800f5c6 <_fclose_r+0x2e>
 800f5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c2:	f7fc fa6b 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800f5c6:	220c      	movs	r2, #12
 800f5c8:	5ea3      	ldrsh	r3, [r4, r2]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d109      	bne.n	800f5e2 <_fclose_r+0x4a>
 800f5ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	0016      	movs	r6, r2
 800f5d4:	401e      	ands	r6, r3
 800f5d6:	421a      	tst	r2, r3
 800f5d8:	d1e2      	bne.n	800f5a0 <_fclose_r+0x8>
 800f5da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5dc:	f7fc fa5f 	bl	800ba9e <__retarget_lock_release_recursive>
 800f5e0:	e7df      	b.n	800f5a2 <_fclose_r+0xa>
 800f5e2:	0021      	movs	r1, r4
 800f5e4:	0028      	movs	r0, r5
 800f5e6:	f000 f837 	bl	800f658 <__sflush_r>
 800f5ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5ec:	0006      	movs	r6, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d006      	beq.n	800f600 <_fclose_r+0x68>
 800f5f2:	0028      	movs	r0, r5
 800f5f4:	69e1      	ldr	r1, [r4, #28]
 800f5f6:	4798      	blx	r3
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	da01      	bge.n	800f600 <_fclose_r+0x68>
 800f5fc:	2601      	movs	r6, #1
 800f5fe:	4276      	negs	r6, r6
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	061b      	lsls	r3, r3, #24
 800f604:	d503      	bpl.n	800f60e <_fclose_r+0x76>
 800f606:	0028      	movs	r0, r5
 800f608:	6921      	ldr	r1, [r4, #16]
 800f60a:	f7fc facf 	bl	800bbac <_free_r>
 800f60e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f610:	2900      	cmp	r1, #0
 800f612:	d008      	beq.n	800f626 <_fclose_r+0x8e>
 800f614:	0023      	movs	r3, r4
 800f616:	3340      	adds	r3, #64	; 0x40
 800f618:	4299      	cmp	r1, r3
 800f61a:	d002      	beq.n	800f622 <_fclose_r+0x8a>
 800f61c:	0028      	movs	r0, r5
 800f61e:	f7fc fac5 	bl	800bbac <_free_r>
 800f622:	2300      	movs	r3, #0
 800f624:	6323      	str	r3, [r4, #48]	; 0x30
 800f626:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f628:	2900      	cmp	r1, #0
 800f62a:	d004      	beq.n	800f636 <_fclose_r+0x9e>
 800f62c:	0028      	movs	r0, r5
 800f62e:	f7fc fabd 	bl	800bbac <_free_r>
 800f632:	2300      	movs	r3, #0
 800f634:	6463      	str	r3, [r4, #68]	; 0x44
 800f636:	f7fc f84b 	bl	800b6d0 <__sfp_lock_acquire>
 800f63a:	2300      	movs	r3, #0
 800f63c:	81a3      	strh	r3, [r4, #12]
 800f63e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f640:	07db      	lsls	r3, r3, #31
 800f642:	d402      	bmi.n	800f64a <_fclose_r+0xb2>
 800f644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f646:	f7fc fa2a 	bl	800ba9e <__retarget_lock_release_recursive>
 800f64a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f64c:	f7fc fa25 	bl	800ba9a <__retarget_lock_close_recursive>
 800f650:	f7fc f846 	bl	800b6e0 <__sfp_lock_release>
 800f654:	e7a5      	b.n	800f5a2 <_fclose_r+0xa>
	...

0800f658 <__sflush_r>:
 800f658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f65a:	230c      	movs	r3, #12
 800f65c:	5eca      	ldrsh	r2, [r1, r3]
 800f65e:	000c      	movs	r4, r1
 800f660:	0005      	movs	r5, r0
 800f662:	b291      	uxth	r1, r2
 800f664:	0713      	lsls	r3, r2, #28
 800f666:	d464      	bmi.n	800f732 <__sflush_r+0xda>
 800f668:	2380      	movs	r3, #128	; 0x80
 800f66a:	011b      	lsls	r3, r3, #4
 800f66c:	4313      	orrs	r3, r2
 800f66e:	6862      	ldr	r2, [r4, #4]
 800f670:	81a3      	strh	r3, [r4, #12]
 800f672:	2a00      	cmp	r2, #0
 800f674:	dc04      	bgt.n	800f680 <__sflush_r+0x28>
 800f676:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f678:	2a00      	cmp	r2, #0
 800f67a:	dc01      	bgt.n	800f680 <__sflush_r+0x28>
 800f67c:	2000      	movs	r0, #0
 800f67e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f680:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f682:	2f00      	cmp	r7, #0
 800f684:	d0fa      	beq.n	800f67c <__sflush_r+0x24>
 800f686:	2200      	movs	r2, #0
 800f688:	2080      	movs	r0, #128	; 0x80
 800f68a:	682e      	ldr	r6, [r5, #0]
 800f68c:	602a      	str	r2, [r5, #0]
 800f68e:	001a      	movs	r2, r3
 800f690:	0140      	lsls	r0, r0, #5
 800f692:	69e1      	ldr	r1, [r4, #28]
 800f694:	4002      	ands	r2, r0
 800f696:	4203      	tst	r3, r0
 800f698:	d038      	beq.n	800f70c <__sflush_r+0xb4>
 800f69a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	075b      	lsls	r3, r3, #29
 800f6a0:	d506      	bpl.n	800f6b0 <__sflush_r+0x58>
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	1ac0      	subs	r0, r0, r3
 800f6a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d001      	beq.n	800f6b0 <__sflush_r+0x58>
 800f6ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6ae:	1ac0      	subs	r0, r0, r3
 800f6b0:	0002      	movs	r2, r0
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	0028      	movs	r0, r5
 800f6b6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f6b8:	69e1      	ldr	r1, [r4, #28]
 800f6ba:	47b8      	blx	r7
 800f6bc:	89a2      	ldrh	r2, [r4, #12]
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	d106      	bne.n	800f6d0 <__sflush_r+0x78>
 800f6c2:	6829      	ldr	r1, [r5, #0]
 800f6c4:	291d      	cmp	r1, #29
 800f6c6:	d830      	bhi.n	800f72a <__sflush_r+0xd2>
 800f6c8:	4b2c      	ldr	r3, [pc, #176]	; (800f77c <__sflush_r+0x124>)
 800f6ca:	410b      	asrs	r3, r1
 800f6cc:	07db      	lsls	r3, r3, #31
 800f6ce:	d42c      	bmi.n	800f72a <__sflush_r+0xd2>
 800f6d0:	4b2b      	ldr	r3, [pc, #172]	; (800f780 <__sflush_r+0x128>)
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	6062      	str	r2, [r4, #4]
 800f6d8:	6922      	ldr	r2, [r4, #16]
 800f6da:	b21b      	sxth	r3, r3
 800f6dc:	81a3      	strh	r3, [r4, #12]
 800f6de:	6022      	str	r2, [r4, #0]
 800f6e0:	04db      	lsls	r3, r3, #19
 800f6e2:	d505      	bpl.n	800f6f0 <__sflush_r+0x98>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <__sflush_r+0x96>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d100      	bne.n	800f6f0 <__sflush_r+0x98>
 800f6ee:	6520      	str	r0, [r4, #80]	; 0x50
 800f6f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f6f2:	602e      	str	r6, [r5, #0]
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	d0c1      	beq.n	800f67c <__sflush_r+0x24>
 800f6f8:	0023      	movs	r3, r4
 800f6fa:	3340      	adds	r3, #64	; 0x40
 800f6fc:	4299      	cmp	r1, r3
 800f6fe:	d002      	beq.n	800f706 <__sflush_r+0xae>
 800f700:	0028      	movs	r0, r5
 800f702:	f7fc fa53 	bl	800bbac <_free_r>
 800f706:	2000      	movs	r0, #0
 800f708:	6320      	str	r0, [r4, #48]	; 0x30
 800f70a:	e7b8      	b.n	800f67e <__sflush_r+0x26>
 800f70c:	2301      	movs	r3, #1
 800f70e:	0028      	movs	r0, r5
 800f710:	47b8      	blx	r7
 800f712:	1c43      	adds	r3, r0, #1
 800f714:	d1c2      	bne.n	800f69c <__sflush_r+0x44>
 800f716:	682b      	ldr	r3, [r5, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0bf      	beq.n	800f69c <__sflush_r+0x44>
 800f71c:	2b1d      	cmp	r3, #29
 800f71e:	d001      	beq.n	800f724 <__sflush_r+0xcc>
 800f720:	2b16      	cmp	r3, #22
 800f722:	d101      	bne.n	800f728 <__sflush_r+0xd0>
 800f724:	602e      	str	r6, [r5, #0]
 800f726:	e7a9      	b.n	800f67c <__sflush_r+0x24>
 800f728:	89a2      	ldrh	r2, [r4, #12]
 800f72a:	2340      	movs	r3, #64	; 0x40
 800f72c:	4313      	orrs	r3, r2
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	e7a5      	b.n	800f67e <__sflush_r+0x26>
 800f732:	6926      	ldr	r6, [r4, #16]
 800f734:	2e00      	cmp	r6, #0
 800f736:	d0a1      	beq.n	800f67c <__sflush_r+0x24>
 800f738:	6827      	ldr	r7, [r4, #0]
 800f73a:	6026      	str	r6, [r4, #0]
 800f73c:	1bbb      	subs	r3, r7, r6
 800f73e:	9301      	str	r3, [sp, #4]
 800f740:	2300      	movs	r3, #0
 800f742:	0789      	lsls	r1, r1, #30
 800f744:	d100      	bne.n	800f748 <__sflush_r+0xf0>
 800f746:	6963      	ldr	r3, [r4, #20]
 800f748:	60a3      	str	r3, [r4, #8]
 800f74a:	9b01      	ldr	r3, [sp, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	dc00      	bgt.n	800f752 <__sflush_r+0xfa>
 800f750:	e794      	b.n	800f67c <__sflush_r+0x24>
 800f752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f754:	0032      	movs	r2, r6
 800f756:	001f      	movs	r7, r3
 800f758:	0028      	movs	r0, r5
 800f75a:	9b01      	ldr	r3, [sp, #4]
 800f75c:	69e1      	ldr	r1, [r4, #28]
 800f75e:	47b8      	blx	r7
 800f760:	2800      	cmp	r0, #0
 800f762:	dc06      	bgt.n	800f772 <__sflush_r+0x11a>
 800f764:	2340      	movs	r3, #64	; 0x40
 800f766:	2001      	movs	r0, #1
 800f768:	89a2      	ldrh	r2, [r4, #12]
 800f76a:	4240      	negs	r0, r0
 800f76c:	4313      	orrs	r3, r2
 800f76e:	81a3      	strh	r3, [r4, #12]
 800f770:	e785      	b.n	800f67e <__sflush_r+0x26>
 800f772:	9b01      	ldr	r3, [sp, #4]
 800f774:	1836      	adds	r6, r6, r0
 800f776:	1a1b      	subs	r3, r3, r0
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	e7e6      	b.n	800f74a <__sflush_r+0xf2>
 800f77c:	dfbffffe 	.word	0xdfbffffe
 800f780:	fffff7ff 	.word	0xfffff7ff

0800f784 <_fflush_r>:
 800f784:	b570      	push	{r4, r5, r6, lr}
 800f786:	0005      	movs	r5, r0
 800f788:	000c      	movs	r4, r1
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d004      	beq.n	800f798 <_fflush_r+0x14>
 800f78e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <_fflush_r+0x14>
 800f794:	f7fb ffac 	bl	800b6f0 <__sinit>
 800f798:	220c      	movs	r2, #12
 800f79a:	5ea3      	ldrsh	r3, [r4, r2]
 800f79c:	1e1e      	subs	r6, r3, #0
 800f79e:	d015      	beq.n	800f7cc <_fflush_r+0x48>
 800f7a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7a2:	07d2      	lsls	r2, r2, #31
 800f7a4:	d404      	bmi.n	800f7b0 <_fflush_r+0x2c>
 800f7a6:	059b      	lsls	r3, r3, #22
 800f7a8:	d402      	bmi.n	800f7b0 <_fflush_r+0x2c>
 800f7aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ac:	f7fc f976 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800f7b0:	0021      	movs	r1, r4
 800f7b2:	0028      	movs	r0, r5
 800f7b4:	f7ff ff50 	bl	800f658 <__sflush_r>
 800f7b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7ba:	0006      	movs	r6, r0
 800f7bc:	07db      	lsls	r3, r3, #31
 800f7be:	d405      	bmi.n	800f7cc <_fflush_r+0x48>
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	059b      	lsls	r3, r3, #22
 800f7c4:	d402      	bmi.n	800f7cc <_fflush_r+0x48>
 800f7c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c8:	f7fc f969 	bl	800ba9e <__retarget_lock_release_recursive>
 800f7cc:	0030      	movs	r0, r6
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}

0800f7d0 <__sccl>:
 800f7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d2:	780b      	ldrb	r3, [r1, #0]
 800f7d4:	0004      	movs	r4, r0
 800f7d6:	2b5e      	cmp	r3, #94	; 0x5e
 800f7d8:	d019      	beq.n	800f80e <__sccl+0x3e>
 800f7da:	2200      	movs	r2, #0
 800f7dc:	1c4d      	adds	r5, r1, #1
 800f7de:	0021      	movs	r1, r4
 800f7e0:	1c60      	adds	r0, r4, #1
 800f7e2:	30ff      	adds	r0, #255	; 0xff
 800f7e4:	700a      	strb	r2, [r1, #0]
 800f7e6:	3101      	adds	r1, #1
 800f7e8:	4281      	cmp	r1, r0
 800f7ea:	d1fb      	bne.n	800f7e4 <__sccl+0x14>
 800f7ec:	1e68      	subs	r0, r5, #1
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00c      	beq.n	800f80c <__sccl+0x3c>
 800f7f2:	2101      	movs	r1, #1
 800f7f4:	262d      	movs	r6, #45	; 0x2d
 800f7f6:	404a      	eors	r2, r1
 800f7f8:	0028      	movs	r0, r5
 800f7fa:	54e2      	strb	r2, [r4, r3]
 800f7fc:	7801      	ldrb	r1, [r0, #0]
 800f7fe:	1c45      	adds	r5, r0, #1
 800f800:	292d      	cmp	r1, #45	; 0x2d
 800f802:	d00c      	beq.n	800f81e <__sccl+0x4e>
 800f804:	295d      	cmp	r1, #93	; 0x5d
 800f806:	d01d      	beq.n	800f844 <__sccl+0x74>
 800f808:	2900      	cmp	r1, #0
 800f80a:	d104      	bne.n	800f816 <__sccl+0x46>
 800f80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80e:	2201      	movs	r2, #1
 800f810:	784b      	ldrb	r3, [r1, #1]
 800f812:	1c8d      	adds	r5, r1, #2
 800f814:	e7e3      	b.n	800f7de <__sccl+0xe>
 800f816:	000b      	movs	r3, r1
 800f818:	e7ee      	b.n	800f7f8 <__sccl+0x28>
 800f81a:	0033      	movs	r3, r6
 800f81c:	e7ec      	b.n	800f7f8 <__sccl+0x28>
 800f81e:	7841      	ldrb	r1, [r0, #1]
 800f820:	295d      	cmp	r1, #93	; 0x5d
 800f822:	d0fa      	beq.n	800f81a <__sccl+0x4a>
 800f824:	428b      	cmp	r3, r1
 800f826:	dcf8      	bgt.n	800f81a <__sccl+0x4a>
 800f828:	001d      	movs	r5, r3
 800f82a:	3002      	adds	r0, #2
 800f82c:	3501      	adds	r5, #1
 800f82e:	5562      	strb	r2, [r4, r5]
 800f830:	42a9      	cmp	r1, r5
 800f832:	dcfb      	bgt.n	800f82c <__sccl+0x5c>
 800f834:	2500      	movs	r5, #0
 800f836:	1c5f      	adds	r7, r3, #1
 800f838:	428b      	cmp	r3, r1
 800f83a:	da01      	bge.n	800f840 <__sccl+0x70>
 800f83c:	1acd      	subs	r5, r1, r3
 800f83e:	3d01      	subs	r5, #1
 800f840:	197b      	adds	r3, r7, r5
 800f842:	e7db      	b.n	800f7fc <__sccl+0x2c>
 800f844:	0028      	movs	r0, r5
 800f846:	e7e1      	b.n	800f80c <__sccl+0x3c>

0800f848 <_localeconv_r>:
 800f848:	4800      	ldr	r0, [pc, #0]	; (800f84c <_localeconv_r+0x4>)
 800f84a:	4770      	bx	lr
 800f84c:	2000052c 	.word	0x2000052c

0800f850 <__libc_fini_array>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	4c07      	ldr	r4, [pc, #28]	; (800f870 <__libc_fini_array+0x20>)
 800f854:	4d07      	ldr	r5, [pc, #28]	; (800f874 <__libc_fini_array+0x24>)
 800f856:	1b64      	subs	r4, r4, r5
 800f858:	10a4      	asrs	r4, r4, #2
 800f85a:	2c00      	cmp	r4, #0
 800f85c:	d102      	bne.n	800f864 <__libc_fini_array+0x14>
 800f85e:	f002 fdcd 	bl	80123fc <_fini>
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	3c01      	subs	r4, #1
 800f866:	00a3      	lsls	r3, r4, #2
 800f868:	58eb      	ldr	r3, [r5, r3]
 800f86a:	4798      	blx	r3
 800f86c:	e7f5      	b.n	800f85a <__libc_fini_array+0xa>
 800f86e:	46c0      	nop			; (mov r8, r8)
 800f870:	08014420 	.word	0x08014420
 800f874:	0801441c 	.word	0x0801441c

0800f878 <memchr>:
 800f878:	b2c9      	uxtb	r1, r1
 800f87a:	1882      	adds	r2, r0, r2
 800f87c:	4290      	cmp	r0, r2
 800f87e:	d101      	bne.n	800f884 <memchr+0xc>
 800f880:	2000      	movs	r0, #0
 800f882:	4770      	bx	lr
 800f884:	7803      	ldrb	r3, [r0, #0]
 800f886:	428b      	cmp	r3, r1
 800f888:	d0fb      	beq.n	800f882 <memchr+0xa>
 800f88a:	3001      	adds	r0, #1
 800f88c:	e7f6      	b.n	800f87c <memchr+0x4>
	...

0800f890 <frexp>:
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	0014      	movs	r4, r2
 800f894:	2500      	movs	r5, #0
 800f896:	6025      	str	r5, [r4, #0]
 800f898:	4d10      	ldr	r5, [pc, #64]	; (800f8dc <frexp+0x4c>)
 800f89a:	004b      	lsls	r3, r1, #1
 800f89c:	000a      	movs	r2, r1
 800f89e:	085b      	lsrs	r3, r3, #1
 800f8a0:	42ab      	cmp	r3, r5
 800f8a2:	dc1a      	bgt.n	800f8da <frexp+0x4a>
 800f8a4:	001d      	movs	r5, r3
 800f8a6:	4305      	orrs	r5, r0
 800f8a8:	d017      	beq.n	800f8da <frexp+0x4a>
 800f8aa:	4d0d      	ldr	r5, [pc, #52]	; (800f8e0 <frexp+0x50>)
 800f8ac:	4229      	tst	r1, r5
 800f8ae:	d109      	bne.n	800f8c4 <frexp+0x34>
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	4b0c      	ldr	r3, [pc, #48]	; (800f8e4 <frexp+0x54>)
 800f8b4:	f7f1 feda 	bl	800166c <__aeabi_dmul>
 800f8b8:	2536      	movs	r5, #54	; 0x36
 800f8ba:	000a      	movs	r2, r1
 800f8bc:	004b      	lsls	r3, r1, #1
 800f8be:	426d      	negs	r5, r5
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	6025      	str	r5, [r4, #0]
 800f8c4:	4d08      	ldr	r5, [pc, #32]	; (800f8e8 <frexp+0x58>)
 800f8c6:	151b      	asrs	r3, r3, #20
 800f8c8:	195b      	adds	r3, r3, r5
 800f8ca:	6825      	ldr	r5, [r4, #0]
 800f8cc:	18eb      	adds	r3, r5, r3
 800f8ce:	6023      	str	r3, [r4, #0]
 800f8d0:	4b06      	ldr	r3, [pc, #24]	; (800f8ec <frexp+0x5c>)
 800f8d2:	401a      	ands	r2, r3
 800f8d4:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <frexp+0x60>)
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	0019      	movs	r1, r3
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
 800f8dc:	7fefffff 	.word	0x7fefffff
 800f8e0:	7ff00000 	.word	0x7ff00000
 800f8e4:	43500000 	.word	0x43500000
 800f8e8:	fffffc02 	.word	0xfffffc02
 800f8ec:	800fffff 	.word	0x800fffff
 800f8f0:	3fe00000 	.word	0x3fe00000

0800f8f4 <__register_exitproc>:
 800f8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8f6:	4f1c      	ldr	r7, [pc, #112]	; (800f968 <__register_exitproc+0x74>)
 800f8f8:	0004      	movs	r4, r0
 800f8fa:	6838      	ldr	r0, [r7, #0]
 800f8fc:	0016      	movs	r6, r2
 800f8fe:	9301      	str	r3, [sp, #4]
 800f900:	9100      	str	r1, [sp, #0]
 800f902:	f7fc f8cb 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800f906:	4a19      	ldr	r2, [pc, #100]	; (800f96c <__register_exitproc+0x78>)
 800f908:	6813      	ldr	r3, [r2, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <__register_exitproc+0x1e>
 800f90e:	4b18      	ldr	r3, [pc, #96]	; (800f970 <__register_exitproc+0x7c>)
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	6838      	ldr	r0, [r7, #0]
 800f916:	2a1f      	cmp	r2, #31
 800f918:	dd04      	ble.n	800f924 <__register_exitproc+0x30>
 800f91a:	f7fc f8c0 	bl	800ba9e <__retarget_lock_release_recursive>
 800f91e:	2001      	movs	r0, #1
 800f920:	4240      	negs	r0, r0
 800f922:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f924:	2c00      	cmp	r4, #0
 800f926:	d014      	beq.n	800f952 <__register_exitproc+0x5e>
 800f928:	0091      	lsls	r1, r2, #2
 800f92a:	1859      	adds	r1, r3, r1
 800f92c:	000f      	movs	r7, r1
 800f92e:	3788      	adds	r7, #136	; 0x88
 800f930:	603e      	str	r6, [r7, #0]
 800f932:	2701      	movs	r7, #1
 800f934:	001e      	movs	r6, r3
 800f936:	4097      	lsls	r7, r2
 800f938:	3685      	adds	r6, #133	; 0x85
 800f93a:	36ff      	adds	r6, #255	; 0xff
 800f93c:	6875      	ldr	r5, [r6, #4]
 800f93e:	31fc      	adds	r1, #252	; 0xfc
 800f940:	433d      	orrs	r5, r7
 800f942:	6075      	str	r5, [r6, #4]
 800f944:	9d01      	ldr	r5, [sp, #4]
 800f946:	60cd      	str	r5, [r1, #12]
 800f948:	2c02      	cmp	r4, #2
 800f94a:	d102      	bne.n	800f952 <__register_exitproc+0x5e>
 800f94c:	68b1      	ldr	r1, [r6, #8]
 800f94e:	4339      	orrs	r1, r7
 800f950:	60b1      	str	r1, [r6, #8]
 800f952:	1c51      	adds	r1, r2, #1
 800f954:	6059      	str	r1, [r3, #4]
 800f956:	3202      	adds	r2, #2
 800f958:	9900      	ldr	r1, [sp, #0]
 800f95a:	0092      	lsls	r2, r2, #2
 800f95c:	50d1      	str	r1, [r2, r3]
 800f95e:	f7fc f89e 	bl	800ba9e <__retarget_lock_release_recursive>
 800f962:	2000      	movs	r0, #0
 800f964:	e7dd      	b.n	800f922 <__register_exitproc+0x2e>
 800f966:	46c0      	nop			; (mov r8, r8)
 800f968:	200006cc 	.word	0x200006cc
 800f96c:	20000d74 	.word	0x20000d74
 800f970:	20000d78 	.word	0x20000d78

0800f974 <__assert_func>:
 800f974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f976:	0014      	movs	r4, r2
 800f978:	001a      	movs	r2, r3
 800f97a:	4b09      	ldr	r3, [pc, #36]	; (800f9a0 <__assert_func+0x2c>)
 800f97c:	0005      	movs	r5, r0
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	000e      	movs	r6, r1
 800f982:	68d8      	ldr	r0, [r3, #12]
 800f984:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <__assert_func+0x30>)
 800f986:	2c00      	cmp	r4, #0
 800f988:	d101      	bne.n	800f98e <__assert_func+0x1a>
 800f98a:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <__assert_func+0x34>)
 800f98c:	001c      	movs	r4, r3
 800f98e:	4907      	ldr	r1, [pc, #28]	; (800f9ac <__assert_func+0x38>)
 800f990:	9301      	str	r3, [sp, #4]
 800f992:	9402      	str	r4, [sp, #8]
 800f994:	002b      	movs	r3, r5
 800f996:	9600      	str	r6, [sp, #0]
 800f998:	f001 faa6 	bl	8010ee8 <fiprintf>
 800f99c:	f002 fb8e 	bl	80120bc <abort>
 800f9a0:	200006c8 	.word	0x200006c8
 800f9a4:	08014348 	.word	0x08014348
 800f9a8:	08014383 	.word	0x08014383
 800f9ac:	08014355 	.word	0x08014355

0800f9b0 <_calloc_r>:
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	2400      	movs	r4, #0
 800f9b4:	0c0b      	lsrs	r3, r1, #16
 800f9b6:	0c16      	lsrs	r6, r2, #16
 800f9b8:	42a3      	cmp	r3, r4
 800f9ba:	d133      	bne.n	800fa24 <_calloc_r+0x74>
 800f9bc:	42a6      	cmp	r6, r4
 800f9be:	d121      	bne.n	800fa04 <_calloc_r+0x54>
 800f9c0:	b28b      	uxth	r3, r1
 800f9c2:	b291      	uxth	r1, r2
 800f9c4:	4359      	muls	r1, r3
 800f9c6:	f7fa fd11 	bl	800a3ec <_malloc_r>
 800f9ca:	1e05      	subs	r5, r0, #0
 800f9cc:	d033      	beq.n	800fa36 <_calloc_r+0x86>
 800f9ce:	0003      	movs	r3, r0
 800f9d0:	3b08      	subs	r3, #8
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	2303      	movs	r3, #3
 800f9d6:	439a      	bics	r2, r3
 800f9d8:	3a04      	subs	r2, #4
 800f9da:	2a24      	cmp	r2, #36	; 0x24
 800f9dc:	d832      	bhi.n	800fa44 <_calloc_r+0x94>
 800f9de:	0003      	movs	r3, r0
 800f9e0:	2a13      	cmp	r2, #19
 800f9e2:	d90a      	bls.n	800f9fa <_calloc_r+0x4a>
 800f9e4:	6004      	str	r4, [r0, #0]
 800f9e6:	6044      	str	r4, [r0, #4]
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	2a1b      	cmp	r2, #27
 800f9ec:	d905      	bls.n	800f9fa <_calloc_r+0x4a>
 800f9ee:	6084      	str	r4, [r0, #8]
 800f9f0:	60c4      	str	r4, [r0, #12]
 800f9f2:	2a24      	cmp	r2, #36	; 0x24
 800f9f4:	d021      	beq.n	800fa3a <_calloc_r+0x8a>
 800f9f6:	0003      	movs	r3, r0
 800f9f8:	3310      	adds	r3, #16
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	601a      	str	r2, [r3, #0]
 800f9fe:	605a      	str	r2, [r3, #4]
 800fa00:	609a      	str	r2, [r3, #8]
 800fa02:	e018      	b.n	800fa36 <_calloc_r+0x86>
 800fa04:	1c33      	adds	r3, r6, #0
 800fa06:	1c0d      	adds	r5, r1, #0
 800fa08:	b289      	uxth	r1, r1
 800fa0a:	b292      	uxth	r2, r2
 800fa0c:	434a      	muls	r2, r1
 800fa0e:	b2ad      	uxth	r5, r5
 800fa10:	b299      	uxth	r1, r3
 800fa12:	4369      	muls	r1, r5
 800fa14:	0c13      	lsrs	r3, r2, #16
 800fa16:	18c9      	adds	r1, r1, r3
 800fa18:	0c0b      	lsrs	r3, r1, #16
 800fa1a:	d107      	bne.n	800fa2c <_calloc_r+0x7c>
 800fa1c:	0409      	lsls	r1, r1, #16
 800fa1e:	b292      	uxth	r2, r2
 800fa20:	4311      	orrs	r1, r2
 800fa22:	e7d0      	b.n	800f9c6 <_calloc_r+0x16>
 800fa24:	2e00      	cmp	r6, #0
 800fa26:	d101      	bne.n	800fa2c <_calloc_r+0x7c>
 800fa28:	1c15      	adds	r5, r2, #0
 800fa2a:	e7ed      	b.n	800fa08 <_calloc_r+0x58>
 800fa2c:	f7fc f80a 	bl	800ba44 <__errno>
 800fa30:	230c      	movs	r3, #12
 800fa32:	2500      	movs	r5, #0
 800fa34:	6003      	str	r3, [r0, #0]
 800fa36:	0028      	movs	r0, r5
 800fa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa3a:	0003      	movs	r3, r0
 800fa3c:	6104      	str	r4, [r0, #16]
 800fa3e:	3318      	adds	r3, #24
 800fa40:	6144      	str	r4, [r0, #20]
 800fa42:	e7da      	b.n	800f9fa <_calloc_r+0x4a>
 800fa44:	2100      	movs	r1, #0
 800fa46:	f7fb ff51 	bl	800b8ec <memset>
 800fa4a:	e7f4      	b.n	800fa36 <_calloc_r+0x86>

0800fa4c <quorem>:
 800fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4e:	6902      	ldr	r2, [r0, #16]
 800fa50:	690b      	ldr	r3, [r1, #16]
 800fa52:	b089      	sub	sp, #36	; 0x24
 800fa54:	0007      	movs	r7, r0
 800fa56:	9104      	str	r1, [sp, #16]
 800fa58:	2000      	movs	r0, #0
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	db69      	blt.n	800fb32 <quorem+0xe6>
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	009c      	lsls	r4, r3, #2
 800fa62:	9301      	str	r3, [sp, #4]
 800fa64:	000b      	movs	r3, r1
 800fa66:	3314      	adds	r3, #20
 800fa68:	9306      	str	r3, [sp, #24]
 800fa6a:	191b      	adds	r3, r3, r4
 800fa6c:	9305      	str	r3, [sp, #20]
 800fa6e:	003b      	movs	r3, r7
 800fa70:	3314      	adds	r3, #20
 800fa72:	9303      	str	r3, [sp, #12]
 800fa74:	191c      	adds	r4, r3, r4
 800fa76:	9b05      	ldr	r3, [sp, #20]
 800fa78:	6826      	ldr	r6, [r4, #0]
 800fa7a:	681d      	ldr	r5, [r3, #0]
 800fa7c:	0030      	movs	r0, r6
 800fa7e:	3501      	adds	r5, #1
 800fa80:	0029      	movs	r1, r5
 800fa82:	f7f0 fb5b 	bl	800013c <__udivsi3>
 800fa86:	9002      	str	r0, [sp, #8]
 800fa88:	42ae      	cmp	r6, r5
 800fa8a:	d329      	bcc.n	800fae0 <quorem+0x94>
 800fa8c:	9b06      	ldr	r3, [sp, #24]
 800fa8e:	2600      	movs	r6, #0
 800fa90:	469c      	mov	ip, r3
 800fa92:	9d03      	ldr	r5, [sp, #12]
 800fa94:	9606      	str	r6, [sp, #24]
 800fa96:	4662      	mov	r2, ip
 800fa98:	ca08      	ldmia	r2!, {r3}
 800fa9a:	6828      	ldr	r0, [r5, #0]
 800fa9c:	4694      	mov	ip, r2
 800fa9e:	9a02      	ldr	r2, [sp, #8]
 800faa0:	b299      	uxth	r1, r3
 800faa2:	4351      	muls	r1, r2
 800faa4:	0c1b      	lsrs	r3, r3, #16
 800faa6:	4353      	muls	r3, r2
 800faa8:	1989      	adds	r1, r1, r6
 800faaa:	0c0a      	lsrs	r2, r1, #16
 800faac:	189b      	adds	r3, r3, r2
 800faae:	9307      	str	r3, [sp, #28]
 800fab0:	0c1e      	lsrs	r6, r3, #16
 800fab2:	9b06      	ldr	r3, [sp, #24]
 800fab4:	b282      	uxth	r2, r0
 800fab6:	18d2      	adds	r2, r2, r3
 800fab8:	466b      	mov	r3, sp
 800faba:	b289      	uxth	r1, r1
 800fabc:	8b9b      	ldrh	r3, [r3, #28]
 800fabe:	1a52      	subs	r2, r2, r1
 800fac0:	0c01      	lsrs	r1, r0, #16
 800fac2:	1ac9      	subs	r1, r1, r3
 800fac4:	1413      	asrs	r3, r2, #16
 800fac6:	18cb      	adds	r3, r1, r3
 800fac8:	1419      	asrs	r1, r3, #16
 800faca:	b292      	uxth	r2, r2
 800facc:	041b      	lsls	r3, r3, #16
 800face:	4313      	orrs	r3, r2
 800fad0:	c508      	stmia	r5!, {r3}
 800fad2:	9b05      	ldr	r3, [sp, #20]
 800fad4:	9106      	str	r1, [sp, #24]
 800fad6:	4563      	cmp	r3, ip
 800fad8:	d2dd      	bcs.n	800fa96 <quorem+0x4a>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d030      	beq.n	800fb42 <quorem+0xf6>
 800fae0:	0038      	movs	r0, r7
 800fae2:	9904      	ldr	r1, [sp, #16]
 800fae4:	f7fc ff04 	bl	800c8f0 <__mcmp>
 800fae8:	2800      	cmp	r0, #0
 800faea:	db21      	blt.n	800fb30 <quorem+0xe4>
 800faec:	0038      	movs	r0, r7
 800faee:	2600      	movs	r6, #0
 800faf0:	9b02      	ldr	r3, [sp, #8]
 800faf2:	9c04      	ldr	r4, [sp, #16]
 800faf4:	3301      	adds	r3, #1
 800faf6:	9302      	str	r3, [sp, #8]
 800faf8:	3014      	adds	r0, #20
 800fafa:	3414      	adds	r4, #20
 800fafc:	6803      	ldr	r3, [r0, #0]
 800fafe:	cc02      	ldmia	r4!, {r1}
 800fb00:	b29d      	uxth	r5, r3
 800fb02:	19ad      	adds	r5, r5, r6
 800fb04:	b28a      	uxth	r2, r1
 800fb06:	1aaa      	subs	r2, r5, r2
 800fb08:	0c09      	lsrs	r1, r1, #16
 800fb0a:	0c1b      	lsrs	r3, r3, #16
 800fb0c:	1a5b      	subs	r3, r3, r1
 800fb0e:	1411      	asrs	r1, r2, #16
 800fb10:	185b      	adds	r3, r3, r1
 800fb12:	141e      	asrs	r6, r3, #16
 800fb14:	b292      	uxth	r2, r2
 800fb16:	041b      	lsls	r3, r3, #16
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	c008      	stmia	r0!, {r3}
 800fb1c:	9b05      	ldr	r3, [sp, #20]
 800fb1e:	42a3      	cmp	r3, r4
 800fb20:	d2ec      	bcs.n	800fafc <quorem+0xb0>
 800fb22:	9b01      	ldr	r3, [sp, #4]
 800fb24:	9a03      	ldr	r2, [sp, #12]
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	18d3      	adds	r3, r2, r3
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	d015      	beq.n	800fb5c <quorem+0x110>
 800fb30:	9802      	ldr	r0, [sp, #8]
 800fb32:	b009      	add	sp, #36	; 0x24
 800fb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb36:	6823      	ldr	r3, [r4, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d106      	bne.n	800fb4a <quorem+0xfe>
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	9b03      	ldr	r3, [sp, #12]
 800fb44:	3c04      	subs	r4, #4
 800fb46:	42a3      	cmp	r3, r4
 800fb48:	d3f5      	bcc.n	800fb36 <quorem+0xea>
 800fb4a:	9b01      	ldr	r3, [sp, #4]
 800fb4c:	613b      	str	r3, [r7, #16]
 800fb4e:	e7c7      	b.n	800fae0 <quorem+0x94>
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	2a00      	cmp	r2, #0
 800fb54:	d106      	bne.n	800fb64 <quorem+0x118>
 800fb56:	9a01      	ldr	r2, [sp, #4]
 800fb58:	3a01      	subs	r2, #1
 800fb5a:	9201      	str	r2, [sp, #4]
 800fb5c:	9a03      	ldr	r2, [sp, #12]
 800fb5e:	3b04      	subs	r3, #4
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d3f5      	bcc.n	800fb50 <quorem+0x104>
 800fb64:	9b01      	ldr	r3, [sp, #4]
 800fb66:	613b      	str	r3, [r7, #16]
 800fb68:	e7e2      	b.n	800fb30 <quorem+0xe4>
	...

0800fb6c <_dtoa_r>:
 800fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb6e:	0014      	movs	r4, r2
 800fb70:	001d      	movs	r5, r3
 800fb72:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fb74:	b09d      	sub	sp, #116	; 0x74
 800fb76:	9408      	str	r4, [sp, #32]
 800fb78:	9509      	str	r5, [sp, #36]	; 0x24
 800fb7a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800fb7c:	9004      	str	r0, [sp, #16]
 800fb7e:	2900      	cmp	r1, #0
 800fb80:	d009      	beq.n	800fb96 <_dtoa_r+0x2a>
 800fb82:	2301      	movs	r3, #1
 800fb84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fb86:	4093      	lsls	r3, r2
 800fb88:	604a      	str	r2, [r1, #4]
 800fb8a:	608b      	str	r3, [r1, #8]
 800fb8c:	f7fc fc56 	bl	800c43c <_Bfree>
 800fb90:	2300      	movs	r3, #0
 800fb92:	9a04      	ldr	r2, [sp, #16]
 800fb94:	6393      	str	r3, [r2, #56]	; 0x38
 800fb96:	2d00      	cmp	r5, #0
 800fb98:	da1e      	bge.n	800fbd8 <_dtoa_r+0x6c>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	6033      	str	r3, [r6, #0]
 800fb9e:	006b      	lsls	r3, r5, #1
 800fba0:	085b      	lsrs	r3, r3, #1
 800fba2:	9309      	str	r3, [sp, #36]	; 0x24
 800fba4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fba6:	4bb5      	ldr	r3, [pc, #724]	; (800fe7c <_dtoa_r+0x310>)
 800fba8:	4ab4      	ldr	r2, [pc, #720]	; (800fe7c <_dtoa_r+0x310>)
 800fbaa:	403b      	ands	r3, r7
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d116      	bne.n	800fbde <_dtoa_r+0x72>
 800fbb0:	4bb3      	ldr	r3, [pc, #716]	; (800fe80 <_dtoa_r+0x314>)
 800fbb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fbb4:	6013      	str	r3, [r2, #0]
 800fbb6:	033b      	lsls	r3, r7, #12
 800fbb8:	0b1b      	lsrs	r3, r3, #12
 800fbba:	4323      	orrs	r3, r4
 800fbbc:	d101      	bne.n	800fbc2 <_dtoa_r+0x56>
 800fbbe:	f000 fdb2 	bl	8010726 <_dtoa_r+0xbba>
 800fbc2:	4bb0      	ldr	r3, [pc, #704]	; (800fe84 <_dtoa_r+0x318>)
 800fbc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fbc6:	9306      	str	r3, [sp, #24]
 800fbc8:	2a00      	cmp	r2, #0
 800fbca:	d002      	beq.n	800fbd2 <_dtoa_r+0x66>
 800fbcc:	4bae      	ldr	r3, [pc, #696]	; (800fe88 <_dtoa_r+0x31c>)
 800fbce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	9806      	ldr	r0, [sp, #24]
 800fbd4:	b01d      	add	sp, #116	; 0x74
 800fbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd8:	2300      	movs	r3, #0
 800fbda:	6033      	str	r3, [r6, #0]
 800fbdc:	e7e2      	b.n	800fba4 <_dtoa_r+0x38>
 800fbde:	9a08      	ldr	r2, [sp, #32]
 800fbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbe2:	9210      	str	r2, [sp, #64]	; 0x40
 800fbe4:	9311      	str	r3, [sp, #68]	; 0x44
 800fbe6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fbe8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fbea:	2200      	movs	r2, #0
 800fbec:	2300      	movs	r3, #0
 800fbee:	f7f0 fc2b 	bl	8000448 <__aeabi_dcmpeq>
 800fbf2:	1e06      	subs	r6, r0, #0
 800fbf4:	d009      	beq.n	800fc0a <_dtoa_r+0x9e>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	4ba3      	ldr	r3, [pc, #652]	; (800fe8c <_dtoa_r+0x320>)
 800fbfe:	9306      	str	r3, [sp, #24]
 800fc00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0e5      	beq.n	800fbd2 <_dtoa_r+0x66>
 800fc06:	4ba2      	ldr	r3, [pc, #648]	; (800fe90 <_dtoa_r+0x324>)
 800fc08:	e7e1      	b.n	800fbce <_dtoa_r+0x62>
 800fc0a:	ab1a      	add	r3, sp, #104	; 0x68
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	ab1b      	add	r3, sp, #108	; 0x6c
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	9804      	ldr	r0, [sp, #16]
 800fc14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fc16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc18:	f7fc ff86 	bl	800cb28 <__d2b>
 800fc1c:	007a      	lsls	r2, r7, #1
 800fc1e:	9005      	str	r0, [sp, #20]
 800fc20:	0d52      	lsrs	r2, r2, #21
 800fc22:	d100      	bne.n	800fc26 <_dtoa_r+0xba>
 800fc24:	e07b      	b.n	800fd1e <_dtoa_r+0x1b2>
 800fc26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc28:	9617      	str	r6, [sp, #92]	; 0x5c
 800fc2a:	0319      	lsls	r1, r3, #12
 800fc2c:	4b99      	ldr	r3, [pc, #612]	; (800fe94 <_dtoa_r+0x328>)
 800fc2e:	0b09      	lsrs	r1, r1, #12
 800fc30:	430b      	orrs	r3, r1
 800fc32:	4999      	ldr	r1, [pc, #612]	; (800fe98 <_dtoa_r+0x32c>)
 800fc34:	1857      	adds	r7, r2, r1
 800fc36:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fc38:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fc3a:	0019      	movs	r1, r3
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	4b97      	ldr	r3, [pc, #604]	; (800fe9c <_dtoa_r+0x330>)
 800fc40:	f7f1 ffd6 	bl	8001bf0 <__aeabi_dsub>
 800fc44:	4a96      	ldr	r2, [pc, #600]	; (800fea0 <_dtoa_r+0x334>)
 800fc46:	4b97      	ldr	r3, [pc, #604]	; (800fea4 <_dtoa_r+0x338>)
 800fc48:	f7f1 fd10 	bl	800166c <__aeabi_dmul>
 800fc4c:	4a96      	ldr	r2, [pc, #600]	; (800fea8 <_dtoa_r+0x33c>)
 800fc4e:	4b97      	ldr	r3, [pc, #604]	; (800feac <_dtoa_r+0x340>)
 800fc50:	f7f0 fdb2 	bl	80007b8 <__aeabi_dadd>
 800fc54:	0004      	movs	r4, r0
 800fc56:	0038      	movs	r0, r7
 800fc58:	000d      	movs	r5, r1
 800fc5a:	f7f2 fb9f 	bl	800239c <__aeabi_i2d>
 800fc5e:	4a94      	ldr	r2, [pc, #592]	; (800feb0 <_dtoa_r+0x344>)
 800fc60:	4b94      	ldr	r3, [pc, #592]	; (800feb4 <_dtoa_r+0x348>)
 800fc62:	f7f1 fd03 	bl	800166c <__aeabi_dmul>
 800fc66:	0002      	movs	r2, r0
 800fc68:	000b      	movs	r3, r1
 800fc6a:	0020      	movs	r0, r4
 800fc6c:	0029      	movs	r1, r5
 800fc6e:	f7f0 fda3 	bl	80007b8 <__aeabi_dadd>
 800fc72:	0004      	movs	r4, r0
 800fc74:	000d      	movs	r5, r1
 800fc76:	f7f2 fb5b 	bl	8002330 <__aeabi_d2iz>
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	9003      	str	r0, [sp, #12]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	0020      	movs	r0, r4
 800fc82:	0029      	movs	r1, r5
 800fc84:	f7f0 fbe6 	bl	8000454 <__aeabi_dcmplt>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d00b      	beq.n	800fca4 <_dtoa_r+0x138>
 800fc8c:	9803      	ldr	r0, [sp, #12]
 800fc8e:	f7f2 fb85 	bl	800239c <__aeabi_i2d>
 800fc92:	002b      	movs	r3, r5
 800fc94:	0022      	movs	r2, r4
 800fc96:	f7f0 fbd7 	bl	8000448 <__aeabi_dcmpeq>
 800fc9a:	4243      	negs	r3, r0
 800fc9c:	4158      	adcs	r0, r3
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	1a1b      	subs	r3, r3, r0
 800fca2:	9303      	str	r3, [sp, #12]
 800fca4:	2301      	movs	r3, #1
 800fca6:	9316      	str	r3, [sp, #88]	; 0x58
 800fca8:	9b03      	ldr	r3, [sp, #12]
 800fcaa:	2b16      	cmp	r3, #22
 800fcac:	d810      	bhi.n	800fcd0 <_dtoa_r+0x164>
 800fcae:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fcb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fcb2:	9a03      	ldr	r2, [sp, #12]
 800fcb4:	4b80      	ldr	r3, [pc, #512]	; (800feb8 <_dtoa_r+0x34c>)
 800fcb6:	00d2      	lsls	r2, r2, #3
 800fcb8:	189b      	adds	r3, r3, r2
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	f7f0 fbc9 	bl	8000454 <__aeabi_dcmplt>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d047      	beq.n	800fd56 <_dtoa_r+0x1ea>
 800fcc6:	9b03      	ldr	r3, [sp, #12]
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	2300      	movs	r3, #0
 800fcce:	9316      	str	r3, [sp, #88]	; 0x58
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fcd4:	920a      	str	r2, [sp, #40]	; 0x28
 800fcd6:	1bdb      	subs	r3, r3, r7
 800fcd8:	1e5a      	subs	r2, r3, #1
 800fcda:	d53e      	bpl.n	800fd5a <_dtoa_r+0x1ee>
 800fcdc:	2201      	movs	r2, #1
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	930a      	str	r3, [sp, #40]	; 0x28
 800fce2:	2300      	movs	r3, #0
 800fce4:	930c      	str	r3, [sp, #48]	; 0x30
 800fce6:	9b03      	ldr	r3, [sp, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	db38      	blt.n	800fd5e <_dtoa_r+0x1f2>
 800fcec:	9a03      	ldr	r2, [sp, #12]
 800fcee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcf0:	4694      	mov	ip, r2
 800fcf2:	4463      	add	r3, ip
 800fcf4:	930c      	str	r3, [sp, #48]	; 0x30
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9213      	str	r2, [sp, #76]	; 0x4c
 800fcfa:	930d      	str	r3, [sp, #52]	; 0x34
 800fcfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fcfe:	2401      	movs	r4, #1
 800fd00:	2b09      	cmp	r3, #9
 800fd02:	d867      	bhi.n	800fdd4 <_dtoa_r+0x268>
 800fd04:	2b05      	cmp	r3, #5
 800fd06:	dd02      	ble.n	800fd0e <_dtoa_r+0x1a2>
 800fd08:	2400      	movs	r4, #0
 800fd0a:	3b04      	subs	r3, #4
 800fd0c:	9322      	str	r3, [sp, #136]	; 0x88
 800fd0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd10:	1e98      	subs	r0, r3, #2
 800fd12:	2803      	cmp	r0, #3
 800fd14:	d867      	bhi.n	800fde6 <_dtoa_r+0x27a>
 800fd16:	f7f0 f9fd 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fd1a:	3a2b      	.short	0x3a2b
 800fd1c:	5b38      	.short	0x5b38
 800fd1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd20:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fd22:	18f6      	adds	r6, r6, r3
 800fd24:	4b65      	ldr	r3, [pc, #404]	; (800febc <_dtoa_r+0x350>)
 800fd26:	18f2      	adds	r2, r6, r3
 800fd28:	2a20      	cmp	r2, #32
 800fd2a:	dd0f      	ble.n	800fd4c <_dtoa_r+0x1e0>
 800fd2c:	2340      	movs	r3, #64	; 0x40
 800fd2e:	1a9b      	subs	r3, r3, r2
 800fd30:	409f      	lsls	r7, r3
 800fd32:	4b63      	ldr	r3, [pc, #396]	; (800fec0 <_dtoa_r+0x354>)
 800fd34:	0038      	movs	r0, r7
 800fd36:	18f3      	adds	r3, r6, r3
 800fd38:	40dc      	lsrs	r4, r3
 800fd3a:	4320      	orrs	r0, r4
 800fd3c:	f7f2 fb5e 	bl	80023fc <__aeabi_ui2d>
 800fd40:	2201      	movs	r2, #1
 800fd42:	4b60      	ldr	r3, [pc, #384]	; (800fec4 <_dtoa_r+0x358>)
 800fd44:	1e77      	subs	r7, r6, #1
 800fd46:	18cb      	adds	r3, r1, r3
 800fd48:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd4a:	e776      	b.n	800fc3a <_dtoa_r+0xce>
 800fd4c:	2320      	movs	r3, #32
 800fd4e:	0020      	movs	r0, r4
 800fd50:	1a9b      	subs	r3, r3, r2
 800fd52:	4098      	lsls	r0, r3
 800fd54:	e7f2      	b.n	800fd3c <_dtoa_r+0x1d0>
 800fd56:	9016      	str	r0, [sp, #88]	; 0x58
 800fd58:	e7ba      	b.n	800fcd0 <_dtoa_r+0x164>
 800fd5a:	920c      	str	r2, [sp, #48]	; 0x30
 800fd5c:	e7c3      	b.n	800fce6 <_dtoa_r+0x17a>
 800fd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd60:	9a03      	ldr	r2, [sp, #12]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	930a      	str	r3, [sp, #40]	; 0x28
 800fd66:	4253      	negs	r3, r2
 800fd68:	930d      	str	r3, [sp, #52]	; 0x34
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd6e:	e7c5      	b.n	800fcfc <_dtoa_r+0x190>
 800fd70:	2300      	movs	r3, #0
 800fd72:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd76:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd78:	9307      	str	r3, [sp, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	dc13      	bgt.n	800fda6 <_dtoa_r+0x23a>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	001a      	movs	r2, r3
 800fd82:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd84:	9307      	str	r3, [sp, #28]
 800fd86:	9223      	str	r2, [sp, #140]	; 0x8c
 800fd88:	e00d      	b.n	800fda6 <_dtoa_r+0x23a>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e7f1      	b.n	800fd72 <_dtoa_r+0x206>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fd92:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd94:	4694      	mov	ip, r2
 800fd96:	9b03      	ldr	r3, [sp, #12]
 800fd98:	4463      	add	r3, ip
 800fd9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	9307      	str	r3, [sp, #28]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dc00      	bgt.n	800fda6 <_dtoa_r+0x23a>
 800fda4:	2301      	movs	r3, #1
 800fda6:	2100      	movs	r1, #0
 800fda8:	2204      	movs	r2, #4
 800fdaa:	0010      	movs	r0, r2
 800fdac:	3014      	adds	r0, #20
 800fdae:	4298      	cmp	r0, r3
 800fdb0:	d91d      	bls.n	800fdee <_dtoa_r+0x282>
 800fdb2:	9b04      	ldr	r3, [sp, #16]
 800fdb4:	0018      	movs	r0, r3
 800fdb6:	63d9      	str	r1, [r3, #60]	; 0x3c
 800fdb8:	f7fc fb18 	bl	800c3ec <_Balloc>
 800fdbc:	9006      	str	r0, [sp, #24]
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d118      	bne.n	800fdf4 <_dtoa_r+0x288>
 800fdc2:	21b0      	movs	r1, #176	; 0xb0
 800fdc4:	4b40      	ldr	r3, [pc, #256]	; (800fec8 <_dtoa_r+0x35c>)
 800fdc6:	4841      	ldr	r0, [pc, #260]	; (800fecc <_dtoa_r+0x360>)
 800fdc8:	9a06      	ldr	r2, [sp, #24]
 800fdca:	31ff      	adds	r1, #255	; 0xff
 800fdcc:	f7ff fdd2 	bl	800f974 <__assert_func>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e7dd      	b.n	800fd90 <_dtoa_r+0x224>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	940f      	str	r4, [sp, #60]	; 0x3c
 800fdd8:	9322      	str	r3, [sp, #136]	; 0x88
 800fdda:	3b01      	subs	r3, #1
 800fddc:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdde:	9307      	str	r3, [sp, #28]
 800fde0:	2200      	movs	r2, #0
 800fde2:	3313      	adds	r3, #19
 800fde4:	e7cf      	b.n	800fd86 <_dtoa_r+0x21a>
 800fde6:	2301      	movs	r3, #1
 800fde8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdea:	3b02      	subs	r3, #2
 800fdec:	e7f6      	b.n	800fddc <_dtoa_r+0x270>
 800fdee:	3101      	adds	r1, #1
 800fdf0:	0052      	lsls	r2, r2, #1
 800fdf2:	e7da      	b.n	800fdaa <_dtoa_r+0x23e>
 800fdf4:	9b04      	ldr	r3, [sp, #16]
 800fdf6:	9a06      	ldr	r2, [sp, #24]
 800fdf8:	639a      	str	r2, [r3, #56]	; 0x38
 800fdfa:	9b07      	ldr	r3, [sp, #28]
 800fdfc:	2b0e      	cmp	r3, #14
 800fdfe:	d900      	bls.n	800fe02 <_dtoa_r+0x296>
 800fe00:	e0e3      	b.n	800ffca <_dtoa_r+0x45e>
 800fe02:	2c00      	cmp	r4, #0
 800fe04:	d100      	bne.n	800fe08 <_dtoa_r+0x29c>
 800fe06:	e0e0      	b.n	800ffca <_dtoa_r+0x45e>
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	dd62      	ble.n	800fed4 <_dtoa_r+0x368>
 800fe0e:	210f      	movs	r1, #15
 800fe10:	9a03      	ldr	r2, [sp, #12]
 800fe12:	4b29      	ldr	r3, [pc, #164]	; (800feb8 <_dtoa_r+0x34c>)
 800fe14:	400a      	ands	r2, r1
 800fe16:	00d2      	lsls	r2, r2, #3
 800fe18:	189b      	adds	r3, r3, r2
 800fe1a:	681e      	ldr	r6, [r3, #0]
 800fe1c:	685f      	ldr	r7, [r3, #4]
 800fe1e:	9b03      	ldr	r3, [sp, #12]
 800fe20:	2402      	movs	r4, #2
 800fe22:	111d      	asrs	r5, r3, #4
 800fe24:	05db      	lsls	r3, r3, #23
 800fe26:	d50a      	bpl.n	800fe3e <_dtoa_r+0x2d2>
 800fe28:	4b29      	ldr	r3, [pc, #164]	; (800fed0 <_dtoa_r+0x364>)
 800fe2a:	400d      	ands	r5, r1
 800fe2c:	6a1a      	ldr	r2, [r3, #32]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe32:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe34:	f7f1 f820 	bl	8000e78 <__aeabi_ddiv>
 800fe38:	9008      	str	r0, [sp, #32]
 800fe3a:	9109      	str	r1, [sp, #36]	; 0x24
 800fe3c:	3401      	adds	r4, #1
 800fe3e:	4b24      	ldr	r3, [pc, #144]	; (800fed0 <_dtoa_r+0x364>)
 800fe40:	930e      	str	r3, [sp, #56]	; 0x38
 800fe42:	2d00      	cmp	r5, #0
 800fe44:	d108      	bne.n	800fe58 <_dtoa_r+0x2ec>
 800fe46:	9808      	ldr	r0, [sp, #32]
 800fe48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe4a:	0032      	movs	r2, r6
 800fe4c:	003b      	movs	r3, r7
 800fe4e:	f7f1 f813 	bl	8000e78 <__aeabi_ddiv>
 800fe52:	9008      	str	r0, [sp, #32]
 800fe54:	9109      	str	r1, [sp, #36]	; 0x24
 800fe56:	e058      	b.n	800ff0a <_dtoa_r+0x39e>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	421d      	tst	r5, r3
 800fe5c:	d009      	beq.n	800fe72 <_dtoa_r+0x306>
 800fe5e:	18e4      	adds	r4, r4, r3
 800fe60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe62:	0030      	movs	r0, r6
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	0039      	movs	r1, r7
 800fe6a:	f7f1 fbff 	bl	800166c <__aeabi_dmul>
 800fe6e:	0006      	movs	r6, r0
 800fe70:	000f      	movs	r7, r1
 800fe72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe74:	106d      	asrs	r5, r5, #1
 800fe76:	3308      	adds	r3, #8
 800fe78:	e7e2      	b.n	800fe40 <_dtoa_r+0x2d4>
 800fe7a:	46c0      	nop			; (mov r8, r8)
 800fe7c:	7ff00000 	.word	0x7ff00000
 800fe80:	0000270f 	.word	0x0000270f
 800fe84:	0801438d 	.word	0x0801438d
 800fe88:	08014390 	.word	0x08014390
 800fe8c:	080142fe 	.word	0x080142fe
 800fe90:	080142ff 	.word	0x080142ff
 800fe94:	3ff00000 	.word	0x3ff00000
 800fe98:	fffffc01 	.word	0xfffffc01
 800fe9c:	3ff80000 	.word	0x3ff80000
 800fea0:	636f4361 	.word	0x636f4361
 800fea4:	3fd287a7 	.word	0x3fd287a7
 800fea8:	8b60c8b3 	.word	0x8b60c8b3
 800feac:	3fc68a28 	.word	0x3fc68a28
 800feb0:	509f79fb 	.word	0x509f79fb
 800feb4:	3fd34413 	.word	0x3fd34413
 800feb8:	080141f8 	.word	0x080141f8
 800febc:	00000432 	.word	0x00000432
 800fec0:	00000412 	.word	0x00000412
 800fec4:	fe100000 	.word	0xfe100000
 800fec8:	08014101 	.word	0x08014101
 800fecc:	08014391 	.word	0x08014391
 800fed0:	080141d0 	.word	0x080141d0
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	2402      	movs	r4, #2
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d016      	beq.n	800ff0a <_dtoa_r+0x39e>
 800fedc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fede:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fee0:	220f      	movs	r2, #15
 800fee2:	425d      	negs	r5, r3
 800fee4:	402a      	ands	r2, r5
 800fee6:	4bdd      	ldr	r3, [pc, #884]	; (801025c <_dtoa_r+0x6f0>)
 800fee8:	00d2      	lsls	r2, r2, #3
 800feea:	189b      	adds	r3, r3, r2
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	f7f1 fbbc 	bl	800166c <__aeabi_dmul>
 800fef4:	2701      	movs	r7, #1
 800fef6:	2300      	movs	r3, #0
 800fef8:	9008      	str	r0, [sp, #32]
 800fefa:	9109      	str	r1, [sp, #36]	; 0x24
 800fefc:	4ed8      	ldr	r6, [pc, #864]	; (8010260 <_dtoa_r+0x6f4>)
 800fefe:	112d      	asrs	r5, r5, #4
 800ff00:	2d00      	cmp	r5, #0
 800ff02:	d000      	beq.n	800ff06 <_dtoa_r+0x39a>
 800ff04:	e091      	b.n	801002a <_dtoa_r+0x4be>
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1a3      	bne.n	800fe52 <_dtoa_r+0x2e6>
 800ff0a:	9e08      	ldr	r6, [sp, #32]
 800ff0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d100      	bne.n	800ff16 <_dtoa_r+0x3aa>
 800ff14:	e094      	b.n	8010040 <_dtoa_r+0x4d4>
 800ff16:	2200      	movs	r2, #0
 800ff18:	0030      	movs	r0, r6
 800ff1a:	0039      	movs	r1, r7
 800ff1c:	4bd1      	ldr	r3, [pc, #836]	; (8010264 <_dtoa_r+0x6f8>)
 800ff1e:	f7f0 fa99 	bl	8000454 <__aeabi_dcmplt>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d100      	bne.n	800ff28 <_dtoa_r+0x3bc>
 800ff26:	e08b      	b.n	8010040 <_dtoa_r+0x4d4>
 800ff28:	9b07      	ldr	r3, [sp, #28]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d100      	bne.n	800ff30 <_dtoa_r+0x3c4>
 800ff2e:	e087      	b.n	8010040 <_dtoa_r+0x4d4>
 800ff30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd45      	ble.n	800ffc2 <_dtoa_r+0x456>
 800ff36:	9b03      	ldr	r3, [sp, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ff3e:	0030      	movs	r0, r6
 800ff40:	4bc9      	ldr	r3, [pc, #804]	; (8010268 <_dtoa_r+0x6fc>)
 800ff42:	0039      	movs	r1, r7
 800ff44:	f7f1 fb92 	bl	800166c <__aeabi_dmul>
 800ff48:	9008      	str	r0, [sp, #32]
 800ff4a:	9109      	str	r1, [sp, #36]	; 0x24
 800ff4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff4e:	3401      	adds	r4, #1
 800ff50:	0020      	movs	r0, r4
 800ff52:	9e08      	ldr	r6, [sp, #32]
 800ff54:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff56:	9312      	str	r3, [sp, #72]	; 0x48
 800ff58:	f7f2 fa20 	bl	800239c <__aeabi_i2d>
 800ff5c:	0032      	movs	r2, r6
 800ff5e:	003b      	movs	r3, r7
 800ff60:	f7f1 fb84 	bl	800166c <__aeabi_dmul>
 800ff64:	2200      	movs	r2, #0
 800ff66:	4bc1      	ldr	r3, [pc, #772]	; (801026c <_dtoa_r+0x700>)
 800ff68:	f7f0 fc26 	bl	80007b8 <__aeabi_dadd>
 800ff6c:	4ac0      	ldr	r2, [pc, #768]	; (8010270 <_dtoa_r+0x704>)
 800ff6e:	9014      	str	r0, [sp, #80]	; 0x50
 800ff70:	9115      	str	r1, [sp, #84]	; 0x54
 800ff72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ff76:	4694      	mov	ip, r2
 800ff78:	9308      	str	r3, [sp, #32]
 800ff7a:	9409      	str	r4, [sp, #36]	; 0x24
 800ff7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff7e:	4463      	add	r3, ip
 800ff80:	9318      	str	r3, [sp, #96]	; 0x60
 800ff82:	9309      	str	r3, [sp, #36]	; 0x24
 800ff84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d15e      	bne.n	8010048 <_dtoa_r+0x4dc>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4bb9      	ldr	r3, [pc, #740]	; (8010274 <_dtoa_r+0x708>)
 800ff8e:	0030      	movs	r0, r6
 800ff90:	0039      	movs	r1, r7
 800ff92:	f7f1 fe2d 	bl	8001bf0 <__aeabi_dsub>
 800ff96:	9a08      	ldr	r2, [sp, #32]
 800ff98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ff9a:	0004      	movs	r4, r0
 800ff9c:	000d      	movs	r5, r1
 800ff9e:	f7f0 fa6d 	bl	800047c <__aeabi_dcmpgt>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d000      	beq.n	800ffa8 <_dtoa_r+0x43c>
 800ffa6:	e2b3      	b.n	8010510 <_dtoa_r+0x9a4>
 800ffa8:	48b3      	ldr	r0, [pc, #716]	; (8010278 <_dtoa_r+0x70c>)
 800ffaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ffac:	4684      	mov	ip, r0
 800ffae:	4461      	add	r1, ip
 800ffb0:	000b      	movs	r3, r1
 800ffb2:	0020      	movs	r0, r4
 800ffb4:	0029      	movs	r1, r5
 800ffb6:	9a08      	ldr	r2, [sp, #32]
 800ffb8:	f7f0 fa4c 	bl	8000454 <__aeabi_dcmplt>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	d000      	beq.n	800ffc2 <_dtoa_r+0x456>
 800ffc0:	e2a3      	b.n	801050a <_dtoa_r+0x99e>
 800ffc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ffc6:	9308      	str	r3, [sp, #32]
 800ffc8:	9409      	str	r4, [sp, #36]	; 0x24
 800ffca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	da00      	bge.n	800ffd2 <_dtoa_r+0x466>
 800ffd0:	e179      	b.n	80102c6 <_dtoa_r+0x75a>
 800ffd2:	9a03      	ldr	r2, [sp, #12]
 800ffd4:	2a0e      	cmp	r2, #14
 800ffd6:	dd00      	ble.n	800ffda <_dtoa_r+0x46e>
 800ffd8:	e175      	b.n	80102c6 <_dtoa_r+0x75a>
 800ffda:	4ba0      	ldr	r3, [pc, #640]	; (801025c <_dtoa_r+0x6f0>)
 800ffdc:	00d2      	lsls	r2, r2, #3
 800ffde:	189b      	adds	r3, r3, r2
 800ffe0:	681e      	ldr	r6, [r3, #0]
 800ffe2:	685f      	ldr	r7, [r3, #4]
 800ffe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	db00      	blt.n	800ffec <_dtoa_r+0x480>
 800ffea:	e0e5      	b.n	80101b8 <_dtoa_r+0x64c>
 800ffec:	9b07      	ldr	r3, [sp, #28]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dd00      	ble.n	800fff4 <_dtoa_r+0x488>
 800fff2:	e0e1      	b.n	80101b8 <_dtoa_r+0x64c>
 800fff4:	d000      	beq.n	800fff8 <_dtoa_r+0x48c>
 800fff6:	e288      	b.n	801050a <_dtoa_r+0x99e>
 800fff8:	2200      	movs	r2, #0
 800fffa:	0030      	movs	r0, r6
 800fffc:	0039      	movs	r1, r7
 800fffe:	4b9d      	ldr	r3, [pc, #628]	; (8010274 <_dtoa_r+0x708>)
 8010000:	f7f1 fb34 	bl	800166c <__aeabi_dmul>
 8010004:	9a08      	ldr	r2, [sp, #32]
 8010006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010008:	f7f0 fa42 	bl	8000490 <__aeabi_dcmpge>
 801000c:	9e07      	ldr	r6, [sp, #28]
 801000e:	0037      	movs	r7, r6
 8010010:	2800      	cmp	r0, #0
 8010012:	d000      	beq.n	8010016 <_dtoa_r+0x4aa>
 8010014:	e25f      	b.n	80104d6 <_dtoa_r+0x96a>
 8010016:	9b06      	ldr	r3, [sp, #24]
 8010018:	9a06      	ldr	r2, [sp, #24]
 801001a:	3301      	adds	r3, #1
 801001c:	9308      	str	r3, [sp, #32]
 801001e:	2331      	movs	r3, #49	; 0x31
 8010020:	7013      	strb	r3, [r2, #0]
 8010022:	9b03      	ldr	r3, [sp, #12]
 8010024:	3301      	adds	r3, #1
 8010026:	9303      	str	r3, [sp, #12]
 8010028:	e25a      	b.n	80104e0 <_dtoa_r+0x974>
 801002a:	423d      	tst	r5, r7
 801002c:	d005      	beq.n	801003a <_dtoa_r+0x4ce>
 801002e:	6832      	ldr	r2, [r6, #0]
 8010030:	6873      	ldr	r3, [r6, #4]
 8010032:	f7f1 fb1b 	bl	800166c <__aeabi_dmul>
 8010036:	003b      	movs	r3, r7
 8010038:	3401      	adds	r4, #1
 801003a:	106d      	asrs	r5, r5, #1
 801003c:	3608      	adds	r6, #8
 801003e:	e75f      	b.n	800ff00 <_dtoa_r+0x394>
 8010040:	9b03      	ldr	r3, [sp, #12]
 8010042:	930e      	str	r3, [sp, #56]	; 0x38
 8010044:	9b07      	ldr	r3, [sp, #28]
 8010046:	e783      	b.n	800ff50 <_dtoa_r+0x3e4>
 8010048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801004a:	4b84      	ldr	r3, [pc, #528]	; (801025c <_dtoa_r+0x6f0>)
 801004c:	3a01      	subs	r2, #1
 801004e:	00d2      	lsls	r2, r2, #3
 8010050:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010052:	189b      	adds	r3, r3, r2
 8010054:	9c08      	ldr	r4, [sp, #32]
 8010056:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	2900      	cmp	r1, #0
 801005e:	d051      	beq.n	8010104 <_dtoa_r+0x598>
 8010060:	2000      	movs	r0, #0
 8010062:	4986      	ldr	r1, [pc, #536]	; (801027c <_dtoa_r+0x710>)
 8010064:	f7f0 ff08 	bl	8000e78 <__aeabi_ddiv>
 8010068:	0022      	movs	r2, r4
 801006a:	002b      	movs	r3, r5
 801006c:	f7f1 fdc0 	bl	8001bf0 <__aeabi_dsub>
 8010070:	9a06      	ldr	r2, [sp, #24]
 8010072:	0004      	movs	r4, r0
 8010074:	4694      	mov	ip, r2
 8010076:	000d      	movs	r5, r1
 8010078:	9b06      	ldr	r3, [sp, #24]
 801007a:	9314      	str	r3, [sp, #80]	; 0x50
 801007c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801007e:	4463      	add	r3, ip
 8010080:	9318      	str	r3, [sp, #96]	; 0x60
 8010082:	0039      	movs	r1, r7
 8010084:	0030      	movs	r0, r6
 8010086:	f7f2 f953 	bl	8002330 <__aeabi_d2iz>
 801008a:	9012      	str	r0, [sp, #72]	; 0x48
 801008c:	f7f2 f986 	bl	800239c <__aeabi_i2d>
 8010090:	0002      	movs	r2, r0
 8010092:	000b      	movs	r3, r1
 8010094:	0030      	movs	r0, r6
 8010096:	0039      	movs	r1, r7
 8010098:	f7f1 fdaa 	bl	8001bf0 <__aeabi_dsub>
 801009c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801009e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100a0:	3301      	adds	r3, #1
 80100a2:	9308      	str	r3, [sp, #32]
 80100a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100a6:	0006      	movs	r6, r0
 80100a8:	3330      	adds	r3, #48	; 0x30
 80100aa:	7013      	strb	r3, [r2, #0]
 80100ac:	0022      	movs	r2, r4
 80100ae:	002b      	movs	r3, r5
 80100b0:	000f      	movs	r7, r1
 80100b2:	f7f0 f9cf 	bl	8000454 <__aeabi_dcmplt>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d174      	bne.n	80101a4 <_dtoa_r+0x638>
 80100ba:	0032      	movs	r2, r6
 80100bc:	003b      	movs	r3, r7
 80100be:	2000      	movs	r0, #0
 80100c0:	4968      	ldr	r1, [pc, #416]	; (8010264 <_dtoa_r+0x6f8>)
 80100c2:	f7f1 fd95 	bl	8001bf0 <__aeabi_dsub>
 80100c6:	0022      	movs	r2, r4
 80100c8:	002b      	movs	r3, r5
 80100ca:	f7f0 f9c3 	bl	8000454 <__aeabi_dcmplt>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d000      	beq.n	80100d4 <_dtoa_r+0x568>
 80100d2:	e0d7      	b.n	8010284 <_dtoa_r+0x718>
 80100d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80100d6:	9a08      	ldr	r2, [sp, #32]
 80100d8:	4293      	cmp	r3, r2
 80100da:	d100      	bne.n	80100de <_dtoa_r+0x572>
 80100dc:	e771      	b.n	800ffc2 <_dtoa_r+0x456>
 80100de:	2200      	movs	r2, #0
 80100e0:	0020      	movs	r0, r4
 80100e2:	0029      	movs	r1, r5
 80100e4:	4b60      	ldr	r3, [pc, #384]	; (8010268 <_dtoa_r+0x6fc>)
 80100e6:	f7f1 fac1 	bl	800166c <__aeabi_dmul>
 80100ea:	4b5f      	ldr	r3, [pc, #380]	; (8010268 <_dtoa_r+0x6fc>)
 80100ec:	0004      	movs	r4, r0
 80100ee:	000d      	movs	r5, r1
 80100f0:	0030      	movs	r0, r6
 80100f2:	0039      	movs	r1, r7
 80100f4:	2200      	movs	r2, #0
 80100f6:	f7f1 fab9 	bl	800166c <__aeabi_dmul>
 80100fa:	9b08      	ldr	r3, [sp, #32]
 80100fc:	0006      	movs	r6, r0
 80100fe:	000f      	movs	r7, r1
 8010100:	9314      	str	r3, [sp, #80]	; 0x50
 8010102:	e7be      	b.n	8010082 <_dtoa_r+0x516>
 8010104:	0020      	movs	r0, r4
 8010106:	0029      	movs	r1, r5
 8010108:	f7f1 fab0 	bl	800166c <__aeabi_dmul>
 801010c:	9a06      	ldr	r2, [sp, #24]
 801010e:	9b06      	ldr	r3, [sp, #24]
 8010110:	4694      	mov	ip, r2
 8010112:	9308      	str	r3, [sp, #32]
 8010114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010116:	9014      	str	r0, [sp, #80]	; 0x50
 8010118:	9115      	str	r1, [sp, #84]	; 0x54
 801011a:	4463      	add	r3, ip
 801011c:	9319      	str	r3, [sp, #100]	; 0x64
 801011e:	0030      	movs	r0, r6
 8010120:	0039      	movs	r1, r7
 8010122:	f7f2 f905 	bl	8002330 <__aeabi_d2iz>
 8010126:	9018      	str	r0, [sp, #96]	; 0x60
 8010128:	f7f2 f938 	bl	800239c <__aeabi_i2d>
 801012c:	0002      	movs	r2, r0
 801012e:	000b      	movs	r3, r1
 8010130:	0030      	movs	r0, r6
 8010132:	0039      	movs	r1, r7
 8010134:	f7f1 fd5c 	bl	8001bf0 <__aeabi_dsub>
 8010138:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801013a:	9b08      	ldr	r3, [sp, #32]
 801013c:	3630      	adds	r6, #48	; 0x30
 801013e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010140:	701e      	strb	r6, [r3, #0]
 8010142:	3301      	adds	r3, #1
 8010144:	0004      	movs	r4, r0
 8010146:	000d      	movs	r5, r1
 8010148:	9308      	str	r3, [sp, #32]
 801014a:	4293      	cmp	r3, r2
 801014c:	d12d      	bne.n	80101aa <_dtoa_r+0x63e>
 801014e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010150:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010152:	9a06      	ldr	r2, [sp, #24]
 8010154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010156:	4694      	mov	ip, r2
 8010158:	4463      	add	r3, ip
 801015a:	2200      	movs	r2, #0
 801015c:	9308      	str	r3, [sp, #32]
 801015e:	4b47      	ldr	r3, [pc, #284]	; (801027c <_dtoa_r+0x710>)
 8010160:	f7f0 fb2a 	bl	80007b8 <__aeabi_dadd>
 8010164:	0002      	movs	r2, r0
 8010166:	000b      	movs	r3, r1
 8010168:	0020      	movs	r0, r4
 801016a:	0029      	movs	r1, r5
 801016c:	f7f0 f986 	bl	800047c <__aeabi_dcmpgt>
 8010170:	2800      	cmp	r0, #0
 8010172:	d000      	beq.n	8010176 <_dtoa_r+0x60a>
 8010174:	e086      	b.n	8010284 <_dtoa_r+0x718>
 8010176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801017a:	2000      	movs	r0, #0
 801017c:	493f      	ldr	r1, [pc, #252]	; (801027c <_dtoa_r+0x710>)
 801017e:	f7f1 fd37 	bl	8001bf0 <__aeabi_dsub>
 8010182:	0002      	movs	r2, r0
 8010184:	000b      	movs	r3, r1
 8010186:	0020      	movs	r0, r4
 8010188:	0029      	movs	r1, r5
 801018a:	f7f0 f963 	bl	8000454 <__aeabi_dcmplt>
 801018e:	2800      	cmp	r0, #0
 8010190:	d100      	bne.n	8010194 <_dtoa_r+0x628>
 8010192:	e716      	b.n	800ffc2 <_dtoa_r+0x456>
 8010194:	9b08      	ldr	r3, [sp, #32]
 8010196:	001a      	movs	r2, r3
 8010198:	3a01      	subs	r2, #1
 801019a:	9208      	str	r2, [sp, #32]
 801019c:	7812      	ldrb	r2, [r2, #0]
 801019e:	2a30      	cmp	r2, #48	; 0x30
 80101a0:	d0f8      	beq.n	8010194 <_dtoa_r+0x628>
 80101a2:	9308      	str	r3, [sp, #32]
 80101a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101a6:	9303      	str	r3, [sp, #12]
 80101a8:	e046      	b.n	8010238 <_dtoa_r+0x6cc>
 80101aa:	2200      	movs	r2, #0
 80101ac:	4b2e      	ldr	r3, [pc, #184]	; (8010268 <_dtoa_r+0x6fc>)
 80101ae:	f7f1 fa5d 	bl	800166c <__aeabi_dmul>
 80101b2:	0006      	movs	r6, r0
 80101b4:	000f      	movs	r7, r1
 80101b6:	e7b2      	b.n	801011e <_dtoa_r+0x5b2>
 80101b8:	9b06      	ldr	r3, [sp, #24]
 80101ba:	9a06      	ldr	r2, [sp, #24]
 80101bc:	930a      	str	r3, [sp, #40]	; 0x28
 80101be:	9b07      	ldr	r3, [sp, #28]
 80101c0:	9c08      	ldr	r4, [sp, #32]
 80101c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80101c4:	3b01      	subs	r3, #1
 80101c6:	189b      	adds	r3, r3, r2
 80101c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80101ca:	0032      	movs	r2, r6
 80101cc:	003b      	movs	r3, r7
 80101ce:	0020      	movs	r0, r4
 80101d0:	0029      	movs	r1, r5
 80101d2:	f7f0 fe51 	bl	8000e78 <__aeabi_ddiv>
 80101d6:	f7f2 f8ab 	bl	8002330 <__aeabi_d2iz>
 80101da:	9007      	str	r0, [sp, #28]
 80101dc:	f7f2 f8de 	bl	800239c <__aeabi_i2d>
 80101e0:	0032      	movs	r2, r6
 80101e2:	003b      	movs	r3, r7
 80101e4:	f7f1 fa42 	bl	800166c <__aeabi_dmul>
 80101e8:	0002      	movs	r2, r0
 80101ea:	000b      	movs	r3, r1
 80101ec:	0020      	movs	r0, r4
 80101ee:	0029      	movs	r1, r5
 80101f0:	f7f1 fcfe 	bl	8001bf0 <__aeabi_dsub>
 80101f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f6:	001a      	movs	r2, r3
 80101f8:	3201      	adds	r2, #1
 80101fa:	920a      	str	r2, [sp, #40]	; 0x28
 80101fc:	9208      	str	r2, [sp, #32]
 80101fe:	9a07      	ldr	r2, [sp, #28]
 8010200:	3230      	adds	r2, #48	; 0x30
 8010202:	701a      	strb	r2, [r3, #0]
 8010204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010206:	429a      	cmp	r2, r3
 8010208:	d14f      	bne.n	80102aa <_dtoa_r+0x73e>
 801020a:	0002      	movs	r2, r0
 801020c:	000b      	movs	r3, r1
 801020e:	f7f0 fad3 	bl	80007b8 <__aeabi_dadd>
 8010212:	0032      	movs	r2, r6
 8010214:	003b      	movs	r3, r7
 8010216:	0004      	movs	r4, r0
 8010218:	000d      	movs	r5, r1
 801021a:	f7f0 f92f 	bl	800047c <__aeabi_dcmpgt>
 801021e:	2800      	cmp	r0, #0
 8010220:	d12e      	bne.n	8010280 <_dtoa_r+0x714>
 8010222:	0032      	movs	r2, r6
 8010224:	003b      	movs	r3, r7
 8010226:	0020      	movs	r0, r4
 8010228:	0029      	movs	r1, r5
 801022a:	f7f0 f90d 	bl	8000448 <__aeabi_dcmpeq>
 801022e:	2800      	cmp	r0, #0
 8010230:	d002      	beq.n	8010238 <_dtoa_r+0x6cc>
 8010232:	9b07      	ldr	r3, [sp, #28]
 8010234:	07de      	lsls	r6, r3, #31
 8010236:	d423      	bmi.n	8010280 <_dtoa_r+0x714>
 8010238:	9905      	ldr	r1, [sp, #20]
 801023a:	9804      	ldr	r0, [sp, #16]
 801023c:	f7fc f8fe 	bl	800c43c <_Bfree>
 8010240:	2300      	movs	r3, #0
 8010242:	9a08      	ldr	r2, [sp, #32]
 8010244:	7013      	strb	r3, [r2, #0]
 8010246:	9b03      	ldr	r3, [sp, #12]
 8010248:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801024a:	3301      	adds	r3, #1
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010250:	2b00      	cmp	r3, #0
 8010252:	d100      	bne.n	8010256 <_dtoa_r+0x6ea>
 8010254:	e4bd      	b.n	800fbd2 <_dtoa_r+0x66>
 8010256:	9a08      	ldr	r2, [sp, #32]
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	e4ba      	b.n	800fbd2 <_dtoa_r+0x66>
 801025c:	080141f8 	.word	0x080141f8
 8010260:	080141d0 	.word	0x080141d0
 8010264:	3ff00000 	.word	0x3ff00000
 8010268:	40240000 	.word	0x40240000
 801026c:	401c0000 	.word	0x401c0000
 8010270:	fcc00000 	.word	0xfcc00000
 8010274:	40140000 	.word	0x40140000
 8010278:	7cc00000 	.word	0x7cc00000
 801027c:	3fe00000 	.word	0x3fe00000
 8010280:	9b03      	ldr	r3, [sp, #12]
 8010282:	930e      	str	r3, [sp, #56]	; 0x38
 8010284:	9b08      	ldr	r3, [sp, #32]
 8010286:	9308      	str	r3, [sp, #32]
 8010288:	3b01      	subs	r3, #1
 801028a:	781a      	ldrb	r2, [r3, #0]
 801028c:	2a39      	cmp	r2, #57	; 0x39
 801028e:	d108      	bne.n	80102a2 <_dtoa_r+0x736>
 8010290:	9a06      	ldr	r2, [sp, #24]
 8010292:	429a      	cmp	r2, r3
 8010294:	d1f7      	bne.n	8010286 <_dtoa_r+0x71a>
 8010296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010298:	9906      	ldr	r1, [sp, #24]
 801029a:	3201      	adds	r2, #1
 801029c:	920e      	str	r2, [sp, #56]	; 0x38
 801029e:	2230      	movs	r2, #48	; 0x30
 80102a0:	700a      	strb	r2, [r1, #0]
 80102a2:	781a      	ldrb	r2, [r3, #0]
 80102a4:	3201      	adds	r2, #1
 80102a6:	701a      	strb	r2, [r3, #0]
 80102a8:	e77c      	b.n	80101a4 <_dtoa_r+0x638>
 80102aa:	2200      	movs	r2, #0
 80102ac:	4ba9      	ldr	r3, [pc, #676]	; (8010554 <_dtoa_r+0x9e8>)
 80102ae:	f7f1 f9dd 	bl	800166c <__aeabi_dmul>
 80102b2:	2200      	movs	r2, #0
 80102b4:	2300      	movs	r3, #0
 80102b6:	0004      	movs	r4, r0
 80102b8:	000d      	movs	r5, r1
 80102ba:	f7f0 f8c5 	bl	8000448 <__aeabi_dcmpeq>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d100      	bne.n	80102c4 <_dtoa_r+0x758>
 80102c2:	e782      	b.n	80101ca <_dtoa_r+0x65e>
 80102c4:	e7b8      	b.n	8010238 <_dtoa_r+0x6cc>
 80102c6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80102c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80102ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80102cc:	2f00      	cmp	r7, #0
 80102ce:	d012      	beq.n	80102f6 <_dtoa_r+0x78a>
 80102d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80102d2:	2a01      	cmp	r2, #1
 80102d4:	dc6e      	bgt.n	80103b4 <_dtoa_r+0x848>
 80102d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80102d8:	2a00      	cmp	r2, #0
 80102da:	d065      	beq.n	80103a8 <_dtoa_r+0x83c>
 80102dc:	4a9e      	ldr	r2, [pc, #632]	; (8010558 <_dtoa_r+0x9ec>)
 80102de:	189b      	adds	r3, r3, r2
 80102e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102e2:	2101      	movs	r1, #1
 80102e4:	18d2      	adds	r2, r2, r3
 80102e6:	920a      	str	r2, [sp, #40]	; 0x28
 80102e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102ea:	9804      	ldr	r0, [sp, #16]
 80102ec:	18d3      	adds	r3, r2, r3
 80102ee:	930c      	str	r3, [sp, #48]	; 0x30
 80102f0:	f7fc f986 	bl	800c600 <__i2b>
 80102f4:	0007      	movs	r7, r0
 80102f6:	2c00      	cmp	r4, #0
 80102f8:	d00e      	beq.n	8010318 <_dtoa_r+0x7ac>
 80102fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	dd0b      	ble.n	8010318 <_dtoa_r+0x7ac>
 8010300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010302:	0023      	movs	r3, r4
 8010304:	4294      	cmp	r4, r2
 8010306:	dd00      	ble.n	801030a <_dtoa_r+0x79e>
 8010308:	0013      	movs	r3, r2
 801030a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801030c:	1ae4      	subs	r4, r4, r3
 801030e:	1ad2      	subs	r2, r2, r3
 8010310:	920a      	str	r2, [sp, #40]	; 0x28
 8010312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	930c      	str	r3, [sp, #48]	; 0x30
 8010318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801031a:	2b00      	cmp	r3, #0
 801031c:	d01e      	beq.n	801035c <_dtoa_r+0x7f0>
 801031e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010320:	2b00      	cmp	r3, #0
 8010322:	d05c      	beq.n	80103de <_dtoa_r+0x872>
 8010324:	2d00      	cmp	r5, #0
 8010326:	dd10      	ble.n	801034a <_dtoa_r+0x7de>
 8010328:	0039      	movs	r1, r7
 801032a:	002a      	movs	r2, r5
 801032c:	9804      	ldr	r0, [sp, #16]
 801032e:	f7fc fa2f 	bl	800c790 <__pow5mult>
 8010332:	9a05      	ldr	r2, [sp, #20]
 8010334:	0001      	movs	r1, r0
 8010336:	0007      	movs	r7, r0
 8010338:	9804      	ldr	r0, [sp, #16]
 801033a:	f7fc f979 	bl	800c630 <__multiply>
 801033e:	0006      	movs	r6, r0
 8010340:	9905      	ldr	r1, [sp, #20]
 8010342:	9804      	ldr	r0, [sp, #16]
 8010344:	f7fc f87a 	bl	800c43c <_Bfree>
 8010348:	9605      	str	r6, [sp, #20]
 801034a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801034c:	1b5a      	subs	r2, r3, r5
 801034e:	42ab      	cmp	r3, r5
 8010350:	d004      	beq.n	801035c <_dtoa_r+0x7f0>
 8010352:	9905      	ldr	r1, [sp, #20]
 8010354:	9804      	ldr	r0, [sp, #16]
 8010356:	f7fc fa1b 	bl	800c790 <__pow5mult>
 801035a:	9005      	str	r0, [sp, #20]
 801035c:	2101      	movs	r1, #1
 801035e:	9804      	ldr	r0, [sp, #16]
 8010360:	f7fc f94e 	bl	800c600 <__i2b>
 8010364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010366:	0006      	movs	r6, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	dd3a      	ble.n	80103e2 <_dtoa_r+0x876>
 801036c:	001a      	movs	r2, r3
 801036e:	0001      	movs	r1, r0
 8010370:	9804      	ldr	r0, [sp, #16]
 8010372:	f7fc fa0d 	bl	800c790 <__pow5mult>
 8010376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010378:	0006      	movs	r6, r0
 801037a:	2500      	movs	r5, #0
 801037c:	2b01      	cmp	r3, #1
 801037e:	dc38      	bgt.n	80103f2 <_dtoa_r+0x886>
 8010380:	2500      	movs	r5, #0
 8010382:	9b08      	ldr	r3, [sp, #32]
 8010384:	42ab      	cmp	r3, r5
 8010386:	d130      	bne.n	80103ea <_dtoa_r+0x87e>
 8010388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801038a:	031b      	lsls	r3, r3, #12
 801038c:	42ab      	cmp	r3, r5
 801038e:	d12c      	bne.n	80103ea <_dtoa_r+0x87e>
 8010390:	4b72      	ldr	r3, [pc, #456]	; (801055c <_dtoa_r+0x9f0>)
 8010392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010394:	4213      	tst	r3, r2
 8010396:	d028      	beq.n	80103ea <_dtoa_r+0x87e>
 8010398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801039a:	3501      	adds	r5, #1
 801039c:	3301      	adds	r3, #1
 801039e:	930a      	str	r3, [sp, #40]	; 0x28
 80103a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103a2:	3301      	adds	r3, #1
 80103a4:	930c      	str	r3, [sp, #48]	; 0x30
 80103a6:	e020      	b.n	80103ea <_dtoa_r+0x87e>
 80103a8:	2336      	movs	r3, #54	; 0x36
 80103aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80103ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103b0:	1a9b      	subs	r3, r3, r2
 80103b2:	e795      	b.n	80102e0 <_dtoa_r+0x774>
 80103b4:	9b07      	ldr	r3, [sp, #28]
 80103b6:	1e5d      	subs	r5, r3, #1
 80103b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ba:	42ab      	cmp	r3, r5
 80103bc:	db07      	blt.n	80103ce <_dtoa_r+0x862>
 80103be:	1b5d      	subs	r5, r3, r5
 80103c0:	9b07      	ldr	r3, [sp, #28]
 80103c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	da8b      	bge.n	80102e0 <_dtoa_r+0x774>
 80103c8:	1ae4      	subs	r4, r4, r3
 80103ca:	2300      	movs	r3, #0
 80103cc:	e788      	b.n	80102e0 <_dtoa_r+0x774>
 80103ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80103d2:	1aeb      	subs	r3, r5, r3
 80103d4:	18d3      	adds	r3, r2, r3
 80103d6:	950d      	str	r5, [sp, #52]	; 0x34
 80103d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80103da:	2500      	movs	r5, #0
 80103dc:	e7f0      	b.n	80103c0 <_dtoa_r+0x854>
 80103de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103e0:	e7b7      	b.n	8010352 <_dtoa_r+0x7e6>
 80103e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103e4:	2500      	movs	r5, #0
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	ddca      	ble.n	8010380 <_dtoa_r+0x814>
 80103ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80103ec:	2001      	movs	r0, #1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d008      	beq.n	8010404 <_dtoa_r+0x898>
 80103f2:	6933      	ldr	r3, [r6, #16]
 80103f4:	3303      	adds	r3, #3
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	18f3      	adds	r3, r6, r3
 80103fa:	6858      	ldr	r0, [r3, #4]
 80103fc:	f7fc f8b8 	bl	800c570 <__hi0bits>
 8010400:	2320      	movs	r3, #32
 8010402:	1a18      	subs	r0, r3, r0
 8010404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010406:	1818      	adds	r0, r3, r0
 8010408:	0002      	movs	r2, r0
 801040a:	231f      	movs	r3, #31
 801040c:	401a      	ands	r2, r3
 801040e:	4218      	tst	r0, r3
 8010410:	d047      	beq.n	80104a2 <_dtoa_r+0x936>
 8010412:	3301      	adds	r3, #1
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	2b04      	cmp	r3, #4
 8010418:	dd3f      	ble.n	801049a <_dtoa_r+0x92e>
 801041a:	231c      	movs	r3, #28
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010420:	18e4      	adds	r4, r4, r3
 8010422:	18d2      	adds	r2, r2, r3
 8010424:	920a      	str	r2, [sp, #40]	; 0x28
 8010426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010428:	18d3      	adds	r3, r2, r3
 801042a:	930c      	str	r3, [sp, #48]	; 0x30
 801042c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801042e:	2b00      	cmp	r3, #0
 8010430:	dd05      	ble.n	801043e <_dtoa_r+0x8d2>
 8010432:	001a      	movs	r2, r3
 8010434:	9905      	ldr	r1, [sp, #20]
 8010436:	9804      	ldr	r0, [sp, #16]
 8010438:	f7fc f9ec 	bl	800c814 <__lshift>
 801043c:	9005      	str	r0, [sp, #20]
 801043e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010440:	2b00      	cmp	r3, #0
 8010442:	dd05      	ble.n	8010450 <_dtoa_r+0x8e4>
 8010444:	0031      	movs	r1, r6
 8010446:	001a      	movs	r2, r3
 8010448:	9804      	ldr	r0, [sp, #16]
 801044a:	f7fc f9e3 	bl	800c814 <__lshift>
 801044e:	0006      	movs	r6, r0
 8010450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010452:	2b00      	cmp	r3, #0
 8010454:	d027      	beq.n	80104a6 <_dtoa_r+0x93a>
 8010456:	0031      	movs	r1, r6
 8010458:	9805      	ldr	r0, [sp, #20]
 801045a:	f7fc fa49 	bl	800c8f0 <__mcmp>
 801045e:	2800      	cmp	r0, #0
 8010460:	da21      	bge.n	80104a6 <_dtoa_r+0x93a>
 8010462:	9b03      	ldr	r3, [sp, #12]
 8010464:	220a      	movs	r2, #10
 8010466:	3b01      	subs	r3, #1
 8010468:	9303      	str	r3, [sp, #12]
 801046a:	9905      	ldr	r1, [sp, #20]
 801046c:	2300      	movs	r3, #0
 801046e:	9804      	ldr	r0, [sp, #16]
 8010470:	f7fb ffee 	bl	800c450 <__multadd>
 8010474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010476:	9005      	str	r0, [sp, #20]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d100      	bne.n	801047e <_dtoa_r+0x912>
 801047c:	e15d      	b.n	801073a <_dtoa_r+0xbce>
 801047e:	2300      	movs	r3, #0
 8010480:	0039      	movs	r1, r7
 8010482:	220a      	movs	r2, #10
 8010484:	9804      	ldr	r0, [sp, #16]
 8010486:	f7fb ffe3 	bl	800c450 <__multadd>
 801048a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801048c:	0007      	movs	r7, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	dc49      	bgt.n	8010526 <_dtoa_r+0x9ba>
 8010492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010494:	2b02      	cmp	r3, #2
 8010496:	dc0e      	bgt.n	80104b6 <_dtoa_r+0x94a>
 8010498:	e045      	b.n	8010526 <_dtoa_r+0x9ba>
 801049a:	2b04      	cmp	r3, #4
 801049c:	d0c6      	beq.n	801042c <_dtoa_r+0x8c0>
 801049e:	331c      	adds	r3, #28
 80104a0:	e7bd      	b.n	801041e <_dtoa_r+0x8b2>
 80104a2:	0013      	movs	r3, r2
 80104a4:	e7fb      	b.n	801049e <_dtoa_r+0x932>
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	dc36      	bgt.n	801051a <_dtoa_r+0x9ae>
 80104ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104ae:	2b02      	cmp	r3, #2
 80104b0:	dd33      	ble.n	801051a <_dtoa_r+0x9ae>
 80104b2:	9b07      	ldr	r3, [sp, #28]
 80104b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d10c      	bne.n	80104d6 <_dtoa_r+0x96a>
 80104bc:	0031      	movs	r1, r6
 80104be:	2205      	movs	r2, #5
 80104c0:	9804      	ldr	r0, [sp, #16]
 80104c2:	f7fb ffc5 	bl	800c450 <__multadd>
 80104c6:	0006      	movs	r6, r0
 80104c8:	0001      	movs	r1, r0
 80104ca:	9805      	ldr	r0, [sp, #20]
 80104cc:	f7fc fa10 	bl	800c8f0 <__mcmp>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	dd00      	ble.n	80104d6 <_dtoa_r+0x96a>
 80104d4:	e59f      	b.n	8010016 <_dtoa_r+0x4aa>
 80104d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80104d8:	43db      	mvns	r3, r3
 80104da:	9303      	str	r3, [sp, #12]
 80104dc:	9b06      	ldr	r3, [sp, #24]
 80104de:	9308      	str	r3, [sp, #32]
 80104e0:	2500      	movs	r5, #0
 80104e2:	0031      	movs	r1, r6
 80104e4:	9804      	ldr	r0, [sp, #16]
 80104e6:	f7fb ffa9 	bl	800c43c <_Bfree>
 80104ea:	2f00      	cmp	r7, #0
 80104ec:	d100      	bne.n	80104f0 <_dtoa_r+0x984>
 80104ee:	e6a3      	b.n	8010238 <_dtoa_r+0x6cc>
 80104f0:	2d00      	cmp	r5, #0
 80104f2:	d005      	beq.n	8010500 <_dtoa_r+0x994>
 80104f4:	42bd      	cmp	r5, r7
 80104f6:	d003      	beq.n	8010500 <_dtoa_r+0x994>
 80104f8:	0029      	movs	r1, r5
 80104fa:	9804      	ldr	r0, [sp, #16]
 80104fc:	f7fb ff9e 	bl	800c43c <_Bfree>
 8010500:	0039      	movs	r1, r7
 8010502:	9804      	ldr	r0, [sp, #16]
 8010504:	f7fb ff9a 	bl	800c43c <_Bfree>
 8010508:	e696      	b.n	8010238 <_dtoa_r+0x6cc>
 801050a:	2600      	movs	r6, #0
 801050c:	0037      	movs	r7, r6
 801050e:	e7e2      	b.n	80104d6 <_dtoa_r+0x96a>
 8010510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010512:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010514:	9303      	str	r3, [sp, #12]
 8010516:	0037      	movs	r7, r6
 8010518:	e57d      	b.n	8010016 <_dtoa_r+0x4aa>
 801051a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d100      	bne.n	8010522 <_dtoa_r+0x9b6>
 8010520:	e0c3      	b.n	80106aa <_dtoa_r+0xb3e>
 8010522:	9b07      	ldr	r3, [sp, #28]
 8010524:	930b      	str	r3, [sp, #44]	; 0x2c
 8010526:	2c00      	cmp	r4, #0
 8010528:	dd05      	ble.n	8010536 <_dtoa_r+0x9ca>
 801052a:	0039      	movs	r1, r7
 801052c:	0022      	movs	r2, r4
 801052e:	9804      	ldr	r0, [sp, #16]
 8010530:	f7fc f970 	bl	800c814 <__lshift>
 8010534:	0007      	movs	r7, r0
 8010536:	0038      	movs	r0, r7
 8010538:	2d00      	cmp	r5, #0
 801053a:	d024      	beq.n	8010586 <_dtoa_r+0xa1a>
 801053c:	6879      	ldr	r1, [r7, #4]
 801053e:	9804      	ldr	r0, [sp, #16]
 8010540:	f7fb ff54 	bl	800c3ec <_Balloc>
 8010544:	1e04      	subs	r4, r0, #0
 8010546:	d111      	bne.n	801056c <_dtoa_r+0xa00>
 8010548:	0022      	movs	r2, r4
 801054a:	4b05      	ldr	r3, [pc, #20]	; (8010560 <_dtoa_r+0x9f4>)
 801054c:	4805      	ldr	r0, [pc, #20]	; (8010564 <_dtoa_r+0x9f8>)
 801054e:	4906      	ldr	r1, [pc, #24]	; (8010568 <_dtoa_r+0x9fc>)
 8010550:	e43c      	b.n	800fdcc <_dtoa_r+0x260>
 8010552:	46c0      	nop			; (mov r8, r8)
 8010554:	40240000 	.word	0x40240000
 8010558:	00000433 	.word	0x00000433
 801055c:	7ff00000 	.word	0x7ff00000
 8010560:	08014101 	.word	0x08014101
 8010564:	08014391 	.word	0x08014391
 8010568:	000002ef 	.word	0x000002ef
 801056c:	0039      	movs	r1, r7
 801056e:	693a      	ldr	r2, [r7, #16]
 8010570:	310c      	adds	r1, #12
 8010572:	3202      	adds	r2, #2
 8010574:	0092      	lsls	r2, r2, #2
 8010576:	300c      	adds	r0, #12
 8010578:	f7fb fa9d 	bl	800bab6 <memcpy>
 801057c:	2201      	movs	r2, #1
 801057e:	0021      	movs	r1, r4
 8010580:	9804      	ldr	r0, [sp, #16]
 8010582:	f7fc f947 	bl	800c814 <__lshift>
 8010586:	9b06      	ldr	r3, [sp, #24]
 8010588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801058a:	9307      	str	r3, [sp, #28]
 801058c:	3b01      	subs	r3, #1
 801058e:	189b      	adds	r3, r3, r2
 8010590:	2201      	movs	r2, #1
 8010592:	003d      	movs	r5, r7
 8010594:	0007      	movs	r7, r0
 8010596:	930e      	str	r3, [sp, #56]	; 0x38
 8010598:	9b08      	ldr	r3, [sp, #32]
 801059a:	4013      	ands	r3, r2
 801059c:	930d      	str	r3, [sp, #52]	; 0x34
 801059e:	0031      	movs	r1, r6
 80105a0:	9805      	ldr	r0, [sp, #20]
 80105a2:	f7ff fa53 	bl	800fa4c <quorem>
 80105a6:	0029      	movs	r1, r5
 80105a8:	0004      	movs	r4, r0
 80105aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80105ac:	9805      	ldr	r0, [sp, #20]
 80105ae:	f7fc f99f 	bl	800c8f0 <__mcmp>
 80105b2:	003a      	movs	r2, r7
 80105b4:	900c      	str	r0, [sp, #48]	; 0x30
 80105b6:	0031      	movs	r1, r6
 80105b8:	9804      	ldr	r0, [sp, #16]
 80105ba:	f7fc f9b5 	bl	800c928 <__mdiff>
 80105be:	2201      	movs	r2, #1
 80105c0:	68c3      	ldr	r3, [r0, #12]
 80105c2:	3430      	adds	r4, #48	; 0x30
 80105c4:	9008      	str	r0, [sp, #32]
 80105c6:	920a      	str	r2, [sp, #40]	; 0x28
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d104      	bne.n	80105d6 <_dtoa_r+0xa6a>
 80105cc:	0001      	movs	r1, r0
 80105ce:	9805      	ldr	r0, [sp, #20]
 80105d0:	f7fc f98e 	bl	800c8f0 <__mcmp>
 80105d4:	900a      	str	r0, [sp, #40]	; 0x28
 80105d6:	9908      	ldr	r1, [sp, #32]
 80105d8:	9804      	ldr	r0, [sp, #16]
 80105da:	f7fb ff2f 	bl	800c43c <_Bfree>
 80105de:	9b07      	ldr	r3, [sp, #28]
 80105e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105e2:	3301      	adds	r3, #1
 80105e4:	9308      	str	r3, [sp, #32]
 80105e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105e8:	4313      	orrs	r3, r2
 80105ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105ec:	4313      	orrs	r3, r2
 80105ee:	d109      	bne.n	8010604 <_dtoa_r+0xa98>
 80105f0:	2c39      	cmp	r4, #57	; 0x39
 80105f2:	d022      	beq.n	801063a <_dtoa_r+0xace>
 80105f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dd01      	ble.n	80105fe <_dtoa_r+0xa92>
 80105fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80105fc:	3431      	adds	r4, #49	; 0x31
 80105fe:	9b07      	ldr	r3, [sp, #28]
 8010600:	701c      	strb	r4, [r3, #0]
 8010602:	e76e      	b.n	80104e2 <_dtoa_r+0x976>
 8010604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010606:	2b00      	cmp	r3, #0
 8010608:	db04      	blt.n	8010614 <_dtoa_r+0xaa8>
 801060a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801060c:	4313      	orrs	r3, r2
 801060e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010610:	4313      	orrs	r3, r2
 8010612:	d11e      	bne.n	8010652 <_dtoa_r+0xae6>
 8010614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010616:	2b00      	cmp	r3, #0
 8010618:	ddf1      	ble.n	80105fe <_dtoa_r+0xa92>
 801061a:	9905      	ldr	r1, [sp, #20]
 801061c:	2201      	movs	r2, #1
 801061e:	9804      	ldr	r0, [sp, #16]
 8010620:	f7fc f8f8 	bl	800c814 <__lshift>
 8010624:	0031      	movs	r1, r6
 8010626:	9005      	str	r0, [sp, #20]
 8010628:	f7fc f962 	bl	800c8f0 <__mcmp>
 801062c:	2800      	cmp	r0, #0
 801062e:	dc02      	bgt.n	8010636 <_dtoa_r+0xaca>
 8010630:	d1e5      	bne.n	80105fe <_dtoa_r+0xa92>
 8010632:	07e3      	lsls	r3, r4, #31
 8010634:	d5e3      	bpl.n	80105fe <_dtoa_r+0xa92>
 8010636:	2c39      	cmp	r4, #57	; 0x39
 8010638:	d1df      	bne.n	80105fa <_dtoa_r+0xa8e>
 801063a:	2339      	movs	r3, #57	; 0x39
 801063c:	9a07      	ldr	r2, [sp, #28]
 801063e:	7013      	strb	r3, [r2, #0]
 8010640:	9b08      	ldr	r3, [sp, #32]
 8010642:	9308      	str	r3, [sp, #32]
 8010644:	3b01      	subs	r3, #1
 8010646:	781a      	ldrb	r2, [r3, #0]
 8010648:	2a39      	cmp	r2, #57	; 0x39
 801064a:	d063      	beq.n	8010714 <_dtoa_r+0xba8>
 801064c:	3201      	adds	r2, #1
 801064e:	701a      	strb	r2, [r3, #0]
 8010650:	e747      	b.n	80104e2 <_dtoa_r+0x976>
 8010652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd03      	ble.n	8010660 <_dtoa_r+0xaf4>
 8010658:	2c39      	cmp	r4, #57	; 0x39
 801065a:	d0ee      	beq.n	801063a <_dtoa_r+0xace>
 801065c:	3401      	adds	r4, #1
 801065e:	e7ce      	b.n	80105fe <_dtoa_r+0xa92>
 8010660:	9b07      	ldr	r3, [sp, #28]
 8010662:	9a07      	ldr	r2, [sp, #28]
 8010664:	701c      	strb	r4, [r3, #0]
 8010666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010668:	4293      	cmp	r3, r2
 801066a:	d03e      	beq.n	80106ea <_dtoa_r+0xb7e>
 801066c:	2300      	movs	r3, #0
 801066e:	220a      	movs	r2, #10
 8010670:	9905      	ldr	r1, [sp, #20]
 8010672:	9804      	ldr	r0, [sp, #16]
 8010674:	f7fb feec 	bl	800c450 <__multadd>
 8010678:	2300      	movs	r3, #0
 801067a:	9005      	str	r0, [sp, #20]
 801067c:	220a      	movs	r2, #10
 801067e:	0029      	movs	r1, r5
 8010680:	9804      	ldr	r0, [sp, #16]
 8010682:	42bd      	cmp	r5, r7
 8010684:	d106      	bne.n	8010694 <_dtoa_r+0xb28>
 8010686:	f7fb fee3 	bl	800c450 <__multadd>
 801068a:	0005      	movs	r5, r0
 801068c:	0007      	movs	r7, r0
 801068e:	9b08      	ldr	r3, [sp, #32]
 8010690:	9307      	str	r3, [sp, #28]
 8010692:	e784      	b.n	801059e <_dtoa_r+0xa32>
 8010694:	f7fb fedc 	bl	800c450 <__multadd>
 8010698:	0039      	movs	r1, r7
 801069a:	0005      	movs	r5, r0
 801069c:	2300      	movs	r3, #0
 801069e:	220a      	movs	r2, #10
 80106a0:	9804      	ldr	r0, [sp, #16]
 80106a2:	f7fb fed5 	bl	800c450 <__multadd>
 80106a6:	0007      	movs	r7, r0
 80106a8:	e7f1      	b.n	801068e <_dtoa_r+0xb22>
 80106aa:	9b07      	ldr	r3, [sp, #28]
 80106ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80106ae:	2500      	movs	r5, #0
 80106b0:	0031      	movs	r1, r6
 80106b2:	9805      	ldr	r0, [sp, #20]
 80106b4:	f7ff f9ca 	bl	800fa4c <quorem>
 80106b8:	9b06      	ldr	r3, [sp, #24]
 80106ba:	3030      	adds	r0, #48	; 0x30
 80106bc:	5558      	strb	r0, [r3, r5]
 80106be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106c0:	3501      	adds	r5, #1
 80106c2:	0004      	movs	r4, r0
 80106c4:	42ab      	cmp	r3, r5
 80106c6:	dd07      	ble.n	80106d8 <_dtoa_r+0xb6c>
 80106c8:	2300      	movs	r3, #0
 80106ca:	220a      	movs	r2, #10
 80106cc:	9905      	ldr	r1, [sp, #20]
 80106ce:	9804      	ldr	r0, [sp, #16]
 80106d0:	f7fb febe 	bl	800c450 <__multadd>
 80106d4:	9005      	str	r0, [sp, #20]
 80106d6:	e7eb      	b.n	80106b0 <_dtoa_r+0xb44>
 80106d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106da:	2301      	movs	r3, #1
 80106dc:	2a00      	cmp	r2, #0
 80106de:	dd00      	ble.n	80106e2 <_dtoa_r+0xb76>
 80106e0:	0013      	movs	r3, r2
 80106e2:	2500      	movs	r5, #0
 80106e4:	9a06      	ldr	r2, [sp, #24]
 80106e6:	18d3      	adds	r3, r2, r3
 80106e8:	9308      	str	r3, [sp, #32]
 80106ea:	9905      	ldr	r1, [sp, #20]
 80106ec:	2201      	movs	r2, #1
 80106ee:	9804      	ldr	r0, [sp, #16]
 80106f0:	f7fc f890 	bl	800c814 <__lshift>
 80106f4:	0031      	movs	r1, r6
 80106f6:	9005      	str	r0, [sp, #20]
 80106f8:	f7fc f8fa 	bl	800c8f0 <__mcmp>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	dc9f      	bgt.n	8010640 <_dtoa_r+0xad4>
 8010700:	d101      	bne.n	8010706 <_dtoa_r+0xb9a>
 8010702:	07e4      	lsls	r4, r4, #31
 8010704:	d49c      	bmi.n	8010640 <_dtoa_r+0xad4>
 8010706:	9b08      	ldr	r3, [sp, #32]
 8010708:	9308      	str	r3, [sp, #32]
 801070a:	3b01      	subs	r3, #1
 801070c:	781a      	ldrb	r2, [r3, #0]
 801070e:	2a30      	cmp	r2, #48	; 0x30
 8010710:	d0fa      	beq.n	8010708 <_dtoa_r+0xb9c>
 8010712:	e6e6      	b.n	80104e2 <_dtoa_r+0x976>
 8010714:	9a06      	ldr	r2, [sp, #24]
 8010716:	429a      	cmp	r2, r3
 8010718:	d193      	bne.n	8010642 <_dtoa_r+0xad6>
 801071a:	9b03      	ldr	r3, [sp, #12]
 801071c:	3301      	adds	r3, #1
 801071e:	9303      	str	r3, [sp, #12]
 8010720:	2331      	movs	r3, #49	; 0x31
 8010722:	7013      	strb	r3, [r2, #0]
 8010724:	e6dd      	b.n	80104e2 <_dtoa_r+0x976>
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <_dtoa_r+0xbe0>)
 8010728:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801072a:	9306      	str	r3, [sp, #24]
 801072c:	4b08      	ldr	r3, [pc, #32]	; (8010750 <_dtoa_r+0xbe4>)
 801072e:	2a00      	cmp	r2, #0
 8010730:	d001      	beq.n	8010736 <_dtoa_r+0xbca>
 8010732:	f7ff fa4c 	bl	800fbce <_dtoa_r+0x62>
 8010736:	f7ff fa4c 	bl	800fbd2 <_dtoa_r+0x66>
 801073a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801073c:	2b00      	cmp	r3, #0
 801073e:	dcb6      	bgt.n	80106ae <_dtoa_r+0xb42>
 8010740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010742:	2b02      	cmp	r3, #2
 8010744:	dd00      	ble.n	8010748 <_dtoa_r+0xbdc>
 8010746:	e6b6      	b.n	80104b6 <_dtoa_r+0x94a>
 8010748:	e7b1      	b.n	80106ae <_dtoa_r+0xb42>
 801074a:	46c0      	nop			; (mov r8, r8)
 801074c:	08014384 	.word	0x08014384
 8010750:	0801438c 	.word	0x0801438c

08010754 <realloc>:
 8010754:	b510      	push	{r4, lr}
 8010756:	4b03      	ldr	r3, [pc, #12]	; (8010764 <realloc+0x10>)
 8010758:	000a      	movs	r2, r1
 801075a:	0001      	movs	r1, r0
 801075c:	6818      	ldr	r0, [r3, #0]
 801075e:	f000 f803 	bl	8010768 <_realloc_r>
 8010762:	bd10      	pop	{r4, pc}
 8010764:	200006c8 	.word	0x200006c8

08010768 <_realloc_r>:
 8010768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076a:	b087      	sub	sp, #28
 801076c:	1e0c      	subs	r4, r1, #0
 801076e:	9001      	str	r0, [sp, #4]
 8010770:	9205      	str	r2, [sp, #20]
 8010772:	d106      	bne.n	8010782 <_realloc_r+0x1a>
 8010774:	0011      	movs	r1, r2
 8010776:	f7f9 fe39 	bl	800a3ec <_malloc_r>
 801077a:	0007      	movs	r7, r0
 801077c:	0038      	movs	r0, r7
 801077e:	b007      	add	sp, #28
 8010780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010782:	9801      	ldr	r0, [sp, #4]
 8010784:	f7fa f846 	bl	800a814 <__malloc_lock>
 8010788:	0023      	movs	r3, r4
 801078a:	3b08      	subs	r3, #8
 801078c:	685f      	ldr	r7, [r3, #4]
 801078e:	9304      	str	r3, [sp, #16]
 8010790:	9b05      	ldr	r3, [sp, #20]
 8010792:	330b      	adds	r3, #11
 8010794:	2b16      	cmp	r3, #22
 8010796:	d908      	bls.n	80107aa <_realloc_r+0x42>
 8010798:	2207      	movs	r2, #7
 801079a:	4393      	bics	r3, r2
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	d506      	bpl.n	80107ae <_realloc_r+0x46>
 80107a0:	230c      	movs	r3, #12
 80107a2:	9a01      	ldr	r2, [sp, #4]
 80107a4:	2700      	movs	r7, #0
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	e7e8      	b.n	801077c <_realloc_r+0x14>
 80107aa:	2310      	movs	r3, #16
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	9b00      	ldr	r3, [sp, #0]
 80107b0:	9a05      	ldr	r2, [sp, #20]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d3f4      	bcc.n	80107a0 <_realloc_r+0x38>
 80107b6:	9b04      	ldr	r3, [sp, #16]
 80107b8:	003a      	movs	r2, r7
 80107ba:	9302      	str	r3, [sp, #8]
 80107bc:	2303      	movs	r3, #3
 80107be:	439a      	bics	r2, r3
 80107c0:	9b00      	ldr	r3, [sp, #0]
 80107c2:	9203      	str	r2, [sp, #12]
 80107c4:	4293      	cmp	r3, r2
 80107c6:	dc00      	bgt.n	80107ca <_realloc_r+0x62>
 80107c8:	e169      	b.n	8010a9e <_realloc_r+0x336>
 80107ca:	9b04      	ldr	r3, [sp, #16]
 80107cc:	48b8      	ldr	r0, [pc, #736]	; (8010ab0 <_realloc_r+0x348>)
 80107ce:	189b      	adds	r3, r3, r2
 80107d0:	6882      	ldr	r2, [r0, #8]
 80107d2:	4694      	mov	ip, r2
 80107d4:	685a      	ldr	r2, [r3, #4]
 80107d6:	459c      	cmp	ip, r3
 80107d8:	d006      	beq.n	80107e8 <_realloc_r+0x80>
 80107da:	2501      	movs	r5, #1
 80107dc:	0011      	movs	r1, r2
 80107de:	43a9      	bics	r1, r5
 80107e0:	1859      	adds	r1, r3, r1
 80107e2:	6849      	ldr	r1, [r1, #4]
 80107e4:	4229      	tst	r1, r5
 80107e6:	d144      	bne.n	8010872 <_realloc_r+0x10a>
 80107e8:	2103      	movs	r1, #3
 80107ea:	438a      	bics	r2, r1
 80107ec:	9903      	ldr	r1, [sp, #12]
 80107ee:	188e      	adds	r6, r1, r2
 80107f0:	9900      	ldr	r1, [sp, #0]
 80107f2:	459c      	cmp	ip, r3
 80107f4:	d117      	bne.n	8010826 <_realloc_r+0xbe>
 80107f6:	3110      	adds	r1, #16
 80107f8:	42b1      	cmp	r1, r6
 80107fa:	dc3c      	bgt.n	8010876 <_realloc_r+0x10e>
 80107fc:	9a00      	ldr	r2, [sp, #0]
 80107fe:	2101      	movs	r1, #1
 8010800:	4694      	mov	ip, r2
 8010802:	1ab6      	subs	r6, r6, r2
 8010804:	0022      	movs	r2, r4
 8010806:	9b04      	ldr	r3, [sp, #16]
 8010808:	430e      	orrs	r6, r1
 801080a:	4463      	add	r3, ip
 801080c:	6083      	str	r3, [r0, #8]
 801080e:	3a08      	subs	r2, #8
 8010810:	605e      	str	r6, [r3, #4]
 8010812:	6853      	ldr	r3, [r2, #4]
 8010814:	9801      	ldr	r0, [sp, #4]
 8010816:	400b      	ands	r3, r1
 8010818:	4661      	mov	r1, ip
 801081a:	430b      	orrs	r3, r1
 801081c:	6053      	str	r3, [r2, #4]
 801081e:	f7fa f801 	bl	800a824 <__malloc_unlock>
 8010822:	0027      	movs	r7, r4
 8010824:	e7aa      	b.n	801077c <_realloc_r+0x14>
 8010826:	42b1      	cmp	r1, r6
 8010828:	dc25      	bgt.n	8010876 <_realloc_r+0x10e>
 801082a:	68da      	ldr	r2, [r3, #12]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	60da      	str	r2, [r3, #12]
 8010830:	6093      	str	r3, [r2, #8]
 8010832:	9b00      	ldr	r3, [sp, #0]
 8010834:	9a02      	ldr	r2, [sp, #8]
 8010836:	1af4      	subs	r4, r6, r3
 8010838:	9b02      	ldr	r3, [sp, #8]
 801083a:	1992      	adds	r2, r2, r6
 801083c:	6858      	ldr	r0, [r3, #4]
 801083e:	2301      	movs	r3, #1
 8010840:	4018      	ands	r0, r3
 8010842:	2c0f      	cmp	r4, #15
 8010844:	d800      	bhi.n	8010848 <_realloc_r+0xe0>
 8010846:	e12c      	b.n	8010aa2 <_realloc_r+0x33a>
 8010848:	9d00      	ldr	r5, [sp, #0]
 801084a:	9902      	ldr	r1, [sp, #8]
 801084c:	4328      	orrs	r0, r5
 801084e:	1949      	adds	r1, r1, r5
 8010850:	9d02      	ldr	r5, [sp, #8]
 8010852:	431c      	orrs	r4, r3
 8010854:	6068      	str	r0, [r5, #4]
 8010856:	604c      	str	r4, [r1, #4]
 8010858:	6850      	ldr	r0, [r2, #4]
 801085a:	3108      	adds	r1, #8
 801085c:	4303      	orrs	r3, r0
 801085e:	6053      	str	r3, [r2, #4]
 8010860:	9801      	ldr	r0, [sp, #4]
 8010862:	f7fb f9a3 	bl	800bbac <_free_r>
 8010866:	9801      	ldr	r0, [sp, #4]
 8010868:	f7f9 ffdc 	bl	800a824 <__malloc_unlock>
 801086c:	9f02      	ldr	r7, [sp, #8]
 801086e:	3708      	adds	r7, #8
 8010870:	e784      	b.n	801077c <_realloc_r+0x14>
 8010872:	2200      	movs	r2, #0
 8010874:	0013      	movs	r3, r2
 8010876:	07ff      	lsls	r7, r7, #31
 8010878:	d500      	bpl.n	801087c <_realloc_r+0x114>
 801087a:	e0c6      	b.n	8010a0a <_realloc_r+0x2a2>
 801087c:	0021      	movs	r1, r4
 801087e:	2003      	movs	r0, #3
 8010880:	3908      	subs	r1, #8
 8010882:	680d      	ldr	r5, [r1, #0]
 8010884:	9904      	ldr	r1, [sp, #16]
 8010886:	1b4d      	subs	r5, r1, r5
 8010888:	6869      	ldr	r1, [r5, #4]
 801088a:	4381      	bics	r1, r0
 801088c:	9803      	ldr	r0, [sp, #12]
 801088e:	180f      	adds	r7, r1, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d100      	bne.n	8010896 <_realloc_r+0x12e>
 8010894:	e084      	b.n	80109a0 <_realloc_r+0x238>
 8010896:	19d6      	adds	r6, r2, r7
 8010898:	459c      	cmp	ip, r3
 801089a:	d148      	bne.n	801092e <_realloc_r+0x1c6>
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	3310      	adds	r3, #16
 80108a0:	42b3      	cmp	r3, r6
 80108a2:	dc7d      	bgt.n	80109a0 <_realloc_r+0x238>
 80108a4:	68aa      	ldr	r2, [r5, #8]
 80108a6:	68eb      	ldr	r3, [r5, #12]
 80108a8:	002f      	movs	r7, r5
 80108aa:	60d3      	str	r3, [r2, #12]
 80108ac:	609a      	str	r2, [r3, #8]
 80108ae:	0002      	movs	r2, r0
 80108b0:	3a04      	subs	r2, #4
 80108b2:	3708      	adds	r7, #8
 80108b4:	2a24      	cmp	r2, #36	; 0x24
 80108b6:	d835      	bhi.n	8010924 <_realloc_r+0x1bc>
 80108b8:	003b      	movs	r3, r7
 80108ba:	2a13      	cmp	r2, #19
 80108bc:	d908      	bls.n	80108d0 <_realloc_r+0x168>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	60ab      	str	r3, [r5, #8]
 80108c2:	6863      	ldr	r3, [r4, #4]
 80108c4:	60eb      	str	r3, [r5, #12]
 80108c6:	2a1b      	cmp	r2, #27
 80108c8:	d81a      	bhi.n	8010900 <_realloc_r+0x198>
 80108ca:	002b      	movs	r3, r5
 80108cc:	3408      	adds	r4, #8
 80108ce:	3310      	adds	r3, #16
 80108d0:	6822      	ldr	r2, [r4, #0]
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	6862      	ldr	r2, [r4, #4]
 80108d6:	605a      	str	r2, [r3, #4]
 80108d8:	68a2      	ldr	r2, [r4, #8]
 80108da:	609a      	str	r2, [r3, #8]
 80108dc:	9b00      	ldr	r3, [sp, #0]
 80108de:	4a74      	ldr	r2, [pc, #464]	; (8010ab0 <_realloc_r+0x348>)
 80108e0:	18eb      	adds	r3, r5, r3
 80108e2:	6093      	str	r3, [r2, #8]
 80108e4:	9a00      	ldr	r2, [sp, #0]
 80108e6:	1ab6      	subs	r6, r6, r2
 80108e8:	2201      	movs	r2, #1
 80108ea:	4316      	orrs	r6, r2
 80108ec:	605e      	str	r6, [r3, #4]
 80108ee:	686b      	ldr	r3, [r5, #4]
 80108f0:	4013      	ands	r3, r2
 80108f2:	9a00      	ldr	r2, [sp, #0]
 80108f4:	4313      	orrs	r3, r2
 80108f6:	606b      	str	r3, [r5, #4]
 80108f8:	9801      	ldr	r0, [sp, #4]
 80108fa:	f7f9 ff93 	bl	800a824 <__malloc_unlock>
 80108fe:	e73d      	b.n	801077c <_realloc_r+0x14>
 8010900:	68a3      	ldr	r3, [r4, #8]
 8010902:	612b      	str	r3, [r5, #16]
 8010904:	68e3      	ldr	r3, [r4, #12]
 8010906:	616b      	str	r3, [r5, #20]
 8010908:	2a24      	cmp	r2, #36	; 0x24
 801090a:	d003      	beq.n	8010914 <_realloc_r+0x1ac>
 801090c:	002b      	movs	r3, r5
 801090e:	3410      	adds	r4, #16
 8010910:	3318      	adds	r3, #24
 8010912:	e7dd      	b.n	80108d0 <_realloc_r+0x168>
 8010914:	6923      	ldr	r3, [r4, #16]
 8010916:	61ab      	str	r3, [r5, #24]
 8010918:	002b      	movs	r3, r5
 801091a:	6962      	ldr	r2, [r4, #20]
 801091c:	3320      	adds	r3, #32
 801091e:	61ea      	str	r2, [r5, #28]
 8010920:	3418      	adds	r4, #24
 8010922:	e7d5      	b.n	80108d0 <_realloc_r+0x168>
 8010924:	0021      	movs	r1, r4
 8010926:	0038      	movs	r0, r7
 8010928:	f001 fbb5 	bl	8012096 <memmove>
 801092c:	e7d6      	b.n	80108dc <_realloc_r+0x174>
 801092e:	9a00      	ldr	r2, [sp, #0]
 8010930:	42b2      	cmp	r2, r6
 8010932:	dc35      	bgt.n	80109a0 <_realloc_r+0x238>
 8010934:	0028      	movs	r0, r5
 8010936:	68da      	ldr	r2, [r3, #12]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	3008      	adds	r0, #8
 801093c:	60da      	str	r2, [r3, #12]
 801093e:	6093      	str	r3, [r2, #8]
 8010940:	68aa      	ldr	r2, [r5, #8]
 8010942:	68eb      	ldr	r3, [r5, #12]
 8010944:	60d3      	str	r3, [r2, #12]
 8010946:	609a      	str	r2, [r3, #8]
 8010948:	9a03      	ldr	r2, [sp, #12]
 801094a:	3a04      	subs	r2, #4
 801094c:	2a24      	cmp	r2, #36	; 0x24
 801094e:	d823      	bhi.n	8010998 <_realloc_r+0x230>
 8010950:	2a13      	cmp	r2, #19
 8010952:	d907      	bls.n	8010964 <_realloc_r+0x1fc>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	60ab      	str	r3, [r5, #8]
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	60eb      	str	r3, [r5, #12]
 801095c:	2a1b      	cmp	r2, #27
 801095e:	d809      	bhi.n	8010974 <_realloc_r+0x20c>
 8010960:	3408      	adds	r4, #8
 8010962:	3008      	adds	r0, #8
 8010964:	6823      	ldr	r3, [r4, #0]
 8010966:	6003      	str	r3, [r0, #0]
 8010968:	6863      	ldr	r3, [r4, #4]
 801096a:	6043      	str	r3, [r0, #4]
 801096c:	68a3      	ldr	r3, [r4, #8]
 801096e:	6083      	str	r3, [r0, #8]
 8010970:	9502      	str	r5, [sp, #8]
 8010972:	e75e      	b.n	8010832 <_realloc_r+0xca>
 8010974:	68a3      	ldr	r3, [r4, #8]
 8010976:	612b      	str	r3, [r5, #16]
 8010978:	68e3      	ldr	r3, [r4, #12]
 801097a:	616b      	str	r3, [r5, #20]
 801097c:	2a24      	cmp	r2, #36	; 0x24
 801097e:	d003      	beq.n	8010988 <_realloc_r+0x220>
 8010980:	0028      	movs	r0, r5
 8010982:	3410      	adds	r4, #16
 8010984:	3018      	adds	r0, #24
 8010986:	e7ed      	b.n	8010964 <_realloc_r+0x1fc>
 8010988:	0028      	movs	r0, r5
 801098a:	6923      	ldr	r3, [r4, #16]
 801098c:	3020      	adds	r0, #32
 801098e:	61ab      	str	r3, [r5, #24]
 8010990:	6963      	ldr	r3, [r4, #20]
 8010992:	3418      	adds	r4, #24
 8010994:	61eb      	str	r3, [r5, #28]
 8010996:	e7e5      	b.n	8010964 <_realloc_r+0x1fc>
 8010998:	0021      	movs	r1, r4
 801099a:	f001 fb7c 	bl	8012096 <memmove>
 801099e:	e7e7      	b.n	8010970 <_realloc_r+0x208>
 80109a0:	9b00      	ldr	r3, [sp, #0]
 80109a2:	42bb      	cmp	r3, r7
 80109a4:	dc31      	bgt.n	8010a0a <_realloc_r+0x2a2>
 80109a6:	0028      	movs	r0, r5
 80109a8:	68aa      	ldr	r2, [r5, #8]
 80109aa:	68eb      	ldr	r3, [r5, #12]
 80109ac:	3008      	adds	r0, #8
 80109ae:	60d3      	str	r3, [r2, #12]
 80109b0:	609a      	str	r2, [r3, #8]
 80109b2:	9a03      	ldr	r2, [sp, #12]
 80109b4:	3a04      	subs	r2, #4
 80109b6:	2a24      	cmp	r2, #36	; 0x24
 80109b8:	d823      	bhi.n	8010a02 <_realloc_r+0x29a>
 80109ba:	2a13      	cmp	r2, #19
 80109bc:	d907      	bls.n	80109ce <_realloc_r+0x266>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	60ab      	str	r3, [r5, #8]
 80109c2:	6863      	ldr	r3, [r4, #4]
 80109c4:	60eb      	str	r3, [r5, #12]
 80109c6:	2a1b      	cmp	r2, #27
 80109c8:	d809      	bhi.n	80109de <_realloc_r+0x276>
 80109ca:	3408      	adds	r4, #8
 80109cc:	3008      	adds	r0, #8
 80109ce:	6823      	ldr	r3, [r4, #0]
 80109d0:	6003      	str	r3, [r0, #0]
 80109d2:	6863      	ldr	r3, [r4, #4]
 80109d4:	6043      	str	r3, [r0, #4]
 80109d6:	68a3      	ldr	r3, [r4, #8]
 80109d8:	6083      	str	r3, [r0, #8]
 80109da:	003e      	movs	r6, r7
 80109dc:	e7c8      	b.n	8010970 <_realloc_r+0x208>
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	612b      	str	r3, [r5, #16]
 80109e2:	68e3      	ldr	r3, [r4, #12]
 80109e4:	616b      	str	r3, [r5, #20]
 80109e6:	2a24      	cmp	r2, #36	; 0x24
 80109e8:	d003      	beq.n	80109f2 <_realloc_r+0x28a>
 80109ea:	0028      	movs	r0, r5
 80109ec:	3410      	adds	r4, #16
 80109ee:	3018      	adds	r0, #24
 80109f0:	e7ed      	b.n	80109ce <_realloc_r+0x266>
 80109f2:	0028      	movs	r0, r5
 80109f4:	6923      	ldr	r3, [r4, #16]
 80109f6:	3020      	adds	r0, #32
 80109f8:	61ab      	str	r3, [r5, #24]
 80109fa:	6963      	ldr	r3, [r4, #20]
 80109fc:	3418      	adds	r4, #24
 80109fe:	61eb      	str	r3, [r5, #28]
 8010a00:	e7e5      	b.n	80109ce <_realloc_r+0x266>
 8010a02:	0021      	movs	r1, r4
 8010a04:	f001 fb47 	bl	8012096 <memmove>
 8010a08:	e7e7      	b.n	80109da <_realloc_r+0x272>
 8010a0a:	9905      	ldr	r1, [sp, #20]
 8010a0c:	9801      	ldr	r0, [sp, #4]
 8010a0e:	f7f9 fced 	bl	800a3ec <_malloc_r>
 8010a12:	1e07      	subs	r7, r0, #0
 8010a14:	d100      	bne.n	8010a18 <_realloc_r+0x2b0>
 8010a16:	e76f      	b.n	80108f8 <_realloc_r+0x190>
 8010a18:	0023      	movs	r3, r4
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	3b08      	subs	r3, #8
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	4393      	bics	r3, r2
 8010a22:	9a04      	ldr	r2, [sp, #16]
 8010a24:	18d3      	adds	r3, r2, r3
 8010a26:	0002      	movs	r2, r0
 8010a28:	3a08      	subs	r2, #8
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d105      	bne.n	8010a3a <_realloc_r+0x2d2>
 8010a2e:	685e      	ldr	r6, [r3, #4]
 8010a30:	2303      	movs	r3, #3
 8010a32:	439e      	bics	r6, r3
 8010a34:	9b03      	ldr	r3, [sp, #12]
 8010a36:	18f6      	adds	r6, r6, r3
 8010a38:	e6fb      	b.n	8010832 <_realloc_r+0xca>
 8010a3a:	9a03      	ldr	r2, [sp, #12]
 8010a3c:	3a04      	subs	r2, #4
 8010a3e:	2a24      	cmp	r2, #36	; 0x24
 8010a40:	d829      	bhi.n	8010a96 <_realloc_r+0x32e>
 8010a42:	0003      	movs	r3, r0
 8010a44:	0021      	movs	r1, r4
 8010a46:	2a13      	cmp	r2, #19
 8010a48:	d908      	bls.n	8010a5c <_realloc_r+0x2f4>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	6003      	str	r3, [r0, #0]
 8010a4e:	6863      	ldr	r3, [r4, #4]
 8010a50:	6043      	str	r3, [r0, #4]
 8010a52:	2a1b      	cmp	r2, #27
 8010a54:	d80d      	bhi.n	8010a72 <_realloc_r+0x30a>
 8010a56:	0003      	movs	r3, r0
 8010a58:	3108      	adds	r1, #8
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	680a      	ldr	r2, [r1, #0]
 8010a5e:	601a      	str	r2, [r3, #0]
 8010a60:	684a      	ldr	r2, [r1, #4]
 8010a62:	605a      	str	r2, [r3, #4]
 8010a64:	688a      	ldr	r2, [r1, #8]
 8010a66:	609a      	str	r2, [r3, #8]
 8010a68:	0021      	movs	r1, r4
 8010a6a:	9801      	ldr	r0, [sp, #4]
 8010a6c:	f7fb f89e 	bl	800bbac <_free_r>
 8010a70:	e742      	b.n	80108f8 <_realloc_r+0x190>
 8010a72:	68a3      	ldr	r3, [r4, #8]
 8010a74:	6083      	str	r3, [r0, #8]
 8010a76:	68e3      	ldr	r3, [r4, #12]
 8010a78:	60c3      	str	r3, [r0, #12]
 8010a7a:	2a24      	cmp	r2, #36	; 0x24
 8010a7c:	d003      	beq.n	8010a86 <_realloc_r+0x31e>
 8010a7e:	0003      	movs	r3, r0
 8010a80:	3110      	adds	r1, #16
 8010a82:	3310      	adds	r3, #16
 8010a84:	e7ea      	b.n	8010a5c <_realloc_r+0x2f4>
 8010a86:	6923      	ldr	r3, [r4, #16]
 8010a88:	3118      	adds	r1, #24
 8010a8a:	6103      	str	r3, [r0, #16]
 8010a8c:	0003      	movs	r3, r0
 8010a8e:	6962      	ldr	r2, [r4, #20]
 8010a90:	3318      	adds	r3, #24
 8010a92:	6142      	str	r2, [r0, #20]
 8010a94:	e7e2      	b.n	8010a5c <_realloc_r+0x2f4>
 8010a96:	0021      	movs	r1, r4
 8010a98:	f001 fafd 	bl	8012096 <memmove>
 8010a9c:	e7e4      	b.n	8010a68 <_realloc_r+0x300>
 8010a9e:	9e03      	ldr	r6, [sp, #12]
 8010aa0:	e6c7      	b.n	8010832 <_realloc_r+0xca>
 8010aa2:	9902      	ldr	r1, [sp, #8]
 8010aa4:	4306      	orrs	r6, r0
 8010aa6:	604e      	str	r6, [r1, #4]
 8010aa8:	6851      	ldr	r1, [r2, #4]
 8010aaa:	430b      	orrs	r3, r1
 8010aac:	6053      	str	r3, [r2, #4]
 8010aae:	e6da      	b.n	8010866 <_realloc_r+0xfe>
 8010ab0:	20000020 	.word	0x20000020

08010ab4 <_strtoul_l.constprop.0>:
 8010ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ab6:	b087      	sub	sp, #28
 8010ab8:	9202      	str	r2, [sp, #8]
 8010aba:	4a3e      	ldr	r2, [pc, #248]	; (8010bb4 <_strtoul_l.constprop.0+0x100>)
 8010abc:	001e      	movs	r6, r3
 8010abe:	9101      	str	r1, [sp, #4]
 8010ac0:	000b      	movs	r3, r1
 8010ac2:	4694      	mov	ip, r2
 8010ac4:	2108      	movs	r1, #8
 8010ac6:	9005      	str	r0, [sp, #20]
 8010ac8:	001a      	movs	r2, r3
 8010aca:	4660      	mov	r0, ip
 8010acc:	7814      	ldrb	r4, [r2, #0]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	5d00      	ldrb	r0, [r0, r4]
 8010ad2:	001d      	movs	r5, r3
 8010ad4:	0007      	movs	r7, r0
 8010ad6:	400f      	ands	r7, r1
 8010ad8:	4208      	tst	r0, r1
 8010ada:	d1f5      	bne.n	8010ac8 <_strtoul_l.constprop.0+0x14>
 8010adc:	2c2d      	cmp	r4, #45	; 0x2d
 8010ade:	d13d      	bne.n	8010b5c <_strtoul_l.constprop.0+0xa8>
 8010ae0:	2701      	movs	r7, #1
 8010ae2:	781c      	ldrb	r4, [r3, #0]
 8010ae4:	1c95      	adds	r5, r2, #2
 8010ae6:	2e00      	cmp	r6, #0
 8010ae8:	d05f      	beq.n	8010baa <_strtoul_l.constprop.0+0xf6>
 8010aea:	2e10      	cmp	r6, #16
 8010aec:	d109      	bne.n	8010b02 <_strtoul_l.constprop.0+0x4e>
 8010aee:	2c30      	cmp	r4, #48	; 0x30
 8010af0:	d107      	bne.n	8010b02 <_strtoul_l.constprop.0+0x4e>
 8010af2:	2220      	movs	r2, #32
 8010af4:	782b      	ldrb	r3, [r5, #0]
 8010af6:	4393      	bics	r3, r2
 8010af8:	2b58      	cmp	r3, #88	; 0x58
 8010afa:	d151      	bne.n	8010ba0 <_strtoul_l.constprop.0+0xec>
 8010afc:	2610      	movs	r6, #16
 8010afe:	786c      	ldrb	r4, [r5, #1]
 8010b00:	3502      	adds	r5, #2
 8010b02:	2001      	movs	r0, #1
 8010b04:	0031      	movs	r1, r6
 8010b06:	4240      	negs	r0, r0
 8010b08:	f7ef fb18 	bl	800013c <__udivsi3>
 8010b0c:	9003      	str	r0, [sp, #12]
 8010b0e:	2001      	movs	r0, #1
 8010b10:	0031      	movs	r1, r6
 8010b12:	4240      	negs	r0, r0
 8010b14:	f7ef fb98 	bl	8000248 <__aeabi_uidivmod>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	9104      	str	r1, [sp, #16]
 8010b1e:	2101      	movs	r1, #1
 8010b20:	0018      	movs	r0, r3
 8010b22:	4694      	mov	ip, r2
 8010b24:	4249      	negs	r1, r1
 8010b26:	0022      	movs	r2, r4
 8010b28:	3a30      	subs	r2, #48	; 0x30
 8010b2a:	2a09      	cmp	r2, #9
 8010b2c:	d903      	bls.n	8010b36 <_strtoul_l.constprop.0+0x82>
 8010b2e:	3a11      	subs	r2, #17
 8010b30:	2a19      	cmp	r2, #25
 8010b32:	d818      	bhi.n	8010b66 <_strtoul_l.constprop.0+0xb2>
 8010b34:	320a      	adds	r2, #10
 8010b36:	4296      	cmp	r6, r2
 8010b38:	dd19      	ble.n	8010b6e <_strtoul_l.constprop.0+0xba>
 8010b3a:	1c5c      	adds	r4, r3, #1
 8010b3c:	d00b      	beq.n	8010b56 <_strtoul_l.constprop.0+0xa2>
 8010b3e:	9c03      	ldr	r4, [sp, #12]
 8010b40:	000b      	movs	r3, r1
 8010b42:	4284      	cmp	r4, r0
 8010b44:	d307      	bcc.n	8010b56 <_strtoul_l.constprop.0+0xa2>
 8010b46:	d103      	bne.n	8010b50 <_strtoul_l.constprop.0+0x9c>
 8010b48:	9c04      	ldr	r4, [sp, #16]
 8010b4a:	000b      	movs	r3, r1
 8010b4c:	4294      	cmp	r4, r2
 8010b4e:	db02      	blt.n	8010b56 <_strtoul_l.constprop.0+0xa2>
 8010b50:	4663      	mov	r3, ip
 8010b52:	4370      	muls	r0, r6
 8010b54:	1810      	adds	r0, r2, r0
 8010b56:	782c      	ldrb	r4, [r5, #0]
 8010b58:	3501      	adds	r5, #1
 8010b5a:	e7e4      	b.n	8010b26 <_strtoul_l.constprop.0+0x72>
 8010b5c:	2c2b      	cmp	r4, #43	; 0x2b
 8010b5e:	d1c2      	bne.n	8010ae6 <_strtoul_l.constprop.0+0x32>
 8010b60:	781c      	ldrb	r4, [r3, #0]
 8010b62:	1c95      	adds	r5, r2, #2
 8010b64:	e7bf      	b.n	8010ae6 <_strtoul_l.constprop.0+0x32>
 8010b66:	0022      	movs	r2, r4
 8010b68:	3a61      	subs	r2, #97	; 0x61
 8010b6a:	2a19      	cmp	r2, #25
 8010b6c:	d9e2      	bls.n	8010b34 <_strtoul_l.constprop.0+0x80>
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	d108      	bne.n	8010b84 <_strtoul_l.constprop.0+0xd0>
 8010b72:	2222      	movs	r2, #34	; 0x22
 8010b74:	9905      	ldr	r1, [sp, #20]
 8010b76:	0018      	movs	r0, r3
 8010b78:	600a      	str	r2, [r1, #0]
 8010b7a:	9a02      	ldr	r2, [sp, #8]
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	d109      	bne.n	8010b94 <_strtoul_l.constprop.0+0xe0>
 8010b80:	b007      	add	sp, #28
 8010b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b84:	2f00      	cmp	r7, #0
 8010b86:	d000      	beq.n	8010b8a <_strtoul_l.constprop.0+0xd6>
 8010b88:	4240      	negs	r0, r0
 8010b8a:	9a02      	ldr	r2, [sp, #8]
 8010b8c:	2a00      	cmp	r2, #0
 8010b8e:	d0f7      	beq.n	8010b80 <_strtoul_l.constprop.0+0xcc>
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <_strtoul_l.constprop.0+0xe4>
 8010b94:	1e6b      	subs	r3, r5, #1
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	9b02      	ldr	r3, [sp, #8]
 8010b9a:	9a01      	ldr	r2, [sp, #4]
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	e7ef      	b.n	8010b80 <_strtoul_l.constprop.0+0xcc>
 8010ba0:	2430      	movs	r4, #48	; 0x30
 8010ba2:	2e00      	cmp	r6, #0
 8010ba4:	d1ad      	bne.n	8010b02 <_strtoul_l.constprop.0+0x4e>
 8010ba6:	3608      	adds	r6, #8
 8010ba8:	e7ab      	b.n	8010b02 <_strtoul_l.constprop.0+0x4e>
 8010baa:	2c30      	cmp	r4, #48	; 0x30
 8010bac:	d0a1      	beq.n	8010af2 <_strtoul_l.constprop.0+0x3e>
 8010bae:	260a      	movs	r6, #10
 8010bb0:	e7a7      	b.n	8010b02 <_strtoul_l.constprop.0+0x4e>
 8010bb2:	46c0      	nop			; (mov r8, r8)
 8010bb4:	08013ff9 	.word	0x08013ff9

08010bb8 <_strtoul_r>:
 8010bb8:	b510      	push	{r4, lr}
 8010bba:	f7ff ff7b 	bl	8010ab4 <_strtoul_l.constprop.0>
 8010bbe:	bd10      	pop	{r4, pc}

08010bc0 <_strtoll_l.constprop.0>:
 8010bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc2:	b08d      	sub	sp, #52	; 0x34
 8010bc4:	9203      	str	r2, [sp, #12]
 8010bc6:	4a53      	ldr	r2, [pc, #332]	; (8010d14 <_strtoll_l.constprop.0+0x154>)
 8010bc8:	001e      	movs	r6, r3
 8010bca:	9102      	str	r1, [sp, #8]
 8010bcc:	000b      	movs	r3, r1
 8010bce:	4694      	mov	ip, r2
 8010bd0:	2108      	movs	r1, #8
 8010bd2:	900a      	str	r0, [sp, #40]	; 0x28
 8010bd4:	001a      	movs	r2, r3
 8010bd6:	4660      	mov	r0, ip
 8010bd8:	7814      	ldrb	r4, [r2, #0]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	5d00      	ldrb	r0, [r0, r4]
 8010bde:	001d      	movs	r5, r3
 8010be0:	0007      	movs	r7, r0
 8010be2:	400f      	ands	r7, r1
 8010be4:	4208      	tst	r0, r1
 8010be6:	d1f5      	bne.n	8010bd4 <_strtoll_l.constprop.0+0x14>
 8010be8:	2c2d      	cmp	r4, #45	; 0x2d
 8010bea:	d153      	bne.n	8010c94 <_strtoll_l.constprop.0+0xd4>
 8010bec:	781c      	ldrb	r4, [r3, #0]
 8010bee:	2301      	movs	r3, #1
 8010bf0:	1c95      	adds	r5, r2, #2
 8010bf2:	9301      	str	r3, [sp, #4]
 8010bf4:	2e00      	cmp	r6, #0
 8010bf6:	d100      	bne.n	8010bfa <_strtoll_l.constprop.0+0x3a>
 8010bf8:	e086      	b.n	8010d08 <_strtoll_l.constprop.0+0x148>
 8010bfa:	2e10      	cmp	r6, #16
 8010bfc:	d10a      	bne.n	8010c14 <_strtoll_l.constprop.0+0x54>
 8010bfe:	2c30      	cmp	r4, #48	; 0x30
 8010c00:	d108      	bne.n	8010c14 <_strtoll_l.constprop.0+0x54>
 8010c02:	2220      	movs	r2, #32
 8010c04:	782b      	ldrb	r3, [r5, #0]
 8010c06:	4393      	bics	r3, r2
 8010c08:	2b58      	cmp	r3, #88	; 0x58
 8010c0a:	d000      	beq.n	8010c0e <_strtoll_l.constprop.0+0x4e>
 8010c0c:	e076      	b.n	8010cfc <_strtoll_l.constprop.0+0x13c>
 8010c0e:	2610      	movs	r6, #16
 8010c10:	786c      	ldrb	r4, [r5, #1]
 8010c12:	3502      	adds	r5, #2
 8010c14:	2001      	movs	r0, #1
 8010c16:	2300      	movs	r3, #0
 8010c18:	493f      	ldr	r1, [pc, #252]	; (8010d18 <_strtoll_l.constprop.0+0x158>)
 8010c1a:	9a01      	ldr	r2, [sp, #4]
 8010c1c:	4240      	negs	r0, r0
 8010c1e:	1812      	adds	r2, r2, r0
 8010c20:	414b      	adcs	r3, r1
 8010c22:	9204      	str	r2, [sp, #16]
 8010c24:	9305      	str	r3, [sp, #20]
 8010c26:	9804      	ldr	r0, [sp, #16]
 8010c28:	9905      	ldr	r1, [sp, #20]
 8010c2a:	17f3      	asrs	r3, r6, #31
 8010c2c:	0032      	movs	r2, r6
 8010c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c30:	f7ef fc38 	bl	80004a4 <__aeabi_uldivmod>
 8010c34:	2300      	movs	r3, #0
 8010c36:	000f      	movs	r7, r1
 8010c38:	9008      	str	r0, [sp, #32]
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010c40:	0022      	movs	r2, r4
 8010c42:	3a30      	subs	r2, #48	; 0x30
 8010c44:	2a09      	cmp	r2, #9
 8010c46:	d82b      	bhi.n	8010ca0 <_strtoll_l.constprop.0+0xe0>
 8010c48:	0014      	movs	r4, r2
 8010c4a:	42a6      	cmp	r6, r4
 8010c4c:	dd37      	ble.n	8010cbe <_strtoll_l.constprop.0+0xfe>
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	d01d      	beq.n	8010c8e <_strtoll_l.constprop.0+0xce>
 8010c52:	42b9      	cmp	r1, r7
 8010c54:	d830      	bhi.n	8010cb8 <_strtoll_l.constprop.0+0xf8>
 8010c56:	d102      	bne.n	8010c5e <_strtoll_l.constprop.0+0x9e>
 8010c58:	9b08      	ldr	r3, [sp, #32]
 8010c5a:	4298      	cmp	r0, r3
 8010c5c:	d82c      	bhi.n	8010cb8 <_strtoll_l.constprop.0+0xf8>
 8010c5e:	9b08      	ldr	r3, [sp, #32]
 8010c60:	4283      	cmp	r3, r0
 8010c62:	d106      	bne.n	8010c72 <_strtoll_l.constprop.0+0xb2>
 8010c64:	428f      	cmp	r7, r1
 8010c66:	d104      	bne.n	8010c72 <_strtoll_l.constprop.0+0xb2>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c6c:	425b      	negs	r3, r3
 8010c6e:	42a2      	cmp	r2, r4
 8010c70:	db0d      	blt.n	8010c8e <_strtoll_l.constprop.0+0xce>
 8010c72:	000b      	movs	r3, r1
 8010c74:	0002      	movs	r2, r0
 8010c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c78:	0030      	movs	r0, r6
 8010c7a:	f7ef fc33 	bl	80004e4 <__aeabi_lmul>
 8010c7e:	17e3      	asrs	r3, r4, #31
 8010c80:	9406      	str	r4, [sp, #24]
 8010c82:	9307      	str	r3, [sp, #28]
 8010c84:	9b06      	ldr	r3, [sp, #24]
 8010c86:	9c07      	ldr	r4, [sp, #28]
 8010c88:	18c0      	adds	r0, r0, r3
 8010c8a:	4161      	adcs	r1, r4
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	782c      	ldrb	r4, [r5, #0]
 8010c90:	3501      	adds	r5, #1
 8010c92:	e7d5      	b.n	8010c40 <_strtoll_l.constprop.0+0x80>
 8010c94:	9701      	str	r7, [sp, #4]
 8010c96:	2c2b      	cmp	r4, #43	; 0x2b
 8010c98:	d1ac      	bne.n	8010bf4 <_strtoll_l.constprop.0+0x34>
 8010c9a:	781c      	ldrb	r4, [r3, #0]
 8010c9c:	1c95      	adds	r5, r2, #2
 8010c9e:	e7a9      	b.n	8010bf4 <_strtoll_l.constprop.0+0x34>
 8010ca0:	0022      	movs	r2, r4
 8010ca2:	3a41      	subs	r2, #65	; 0x41
 8010ca4:	2a19      	cmp	r2, #25
 8010ca6:	d801      	bhi.n	8010cac <_strtoll_l.constprop.0+0xec>
 8010ca8:	3c37      	subs	r4, #55	; 0x37
 8010caa:	e7ce      	b.n	8010c4a <_strtoll_l.constprop.0+0x8a>
 8010cac:	0022      	movs	r2, r4
 8010cae:	3a61      	subs	r2, #97	; 0x61
 8010cb0:	2a19      	cmp	r2, #25
 8010cb2:	d804      	bhi.n	8010cbe <_strtoll_l.constprop.0+0xfe>
 8010cb4:	3c57      	subs	r4, #87	; 0x57
 8010cb6:	e7c8      	b.n	8010c4a <_strtoll_l.constprop.0+0x8a>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	425b      	negs	r3, r3
 8010cbc:	e7e7      	b.n	8010c8e <_strtoll_l.constprop.0+0xce>
 8010cbe:	1c5a      	adds	r2, r3, #1
 8010cc0:	d109      	bne.n	8010cd6 <_strtoll_l.constprop.0+0x116>
 8010cc2:	9804      	ldr	r0, [sp, #16]
 8010cc4:	9905      	ldr	r1, [sp, #20]
 8010cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cc8:	3323      	adds	r3, #35	; 0x23
 8010cca:	6013      	str	r3, [r2, #0]
 8010ccc:	9b03      	ldr	r3, [sp, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10e      	bne.n	8010cf0 <_strtoll_l.constprop.0+0x130>
 8010cd2:	b00d      	add	sp, #52	; 0x34
 8010cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cd6:	9a01      	ldr	r2, [sp, #4]
 8010cd8:	2a00      	cmp	r2, #0
 8010cda:	d004      	beq.n	8010ce6 <_strtoll_l.constprop.0+0x126>
 8010cdc:	0006      	movs	r6, r0
 8010cde:	000f      	movs	r7, r1
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	4270      	negs	r0, r6
 8010ce4:	41b9      	sbcs	r1, r7
 8010ce6:	9a03      	ldr	r2, [sp, #12]
 8010ce8:	2a00      	cmp	r2, #0
 8010cea:	d0f2      	beq.n	8010cd2 <_strtoll_l.constprop.0+0x112>
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <_strtoll_l.constprop.0+0x134>
 8010cf0:	1e6b      	subs	r3, r5, #1
 8010cf2:	9302      	str	r3, [sp, #8]
 8010cf4:	9b03      	ldr	r3, [sp, #12]
 8010cf6:	9a02      	ldr	r2, [sp, #8]
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	e7ea      	b.n	8010cd2 <_strtoll_l.constprop.0+0x112>
 8010cfc:	2430      	movs	r4, #48	; 0x30
 8010cfe:	2e00      	cmp	r6, #0
 8010d00:	d000      	beq.n	8010d04 <_strtoll_l.constprop.0+0x144>
 8010d02:	e787      	b.n	8010c14 <_strtoll_l.constprop.0+0x54>
 8010d04:	3608      	adds	r6, #8
 8010d06:	e785      	b.n	8010c14 <_strtoll_l.constprop.0+0x54>
 8010d08:	2c30      	cmp	r4, #48	; 0x30
 8010d0a:	d100      	bne.n	8010d0e <_strtoll_l.constprop.0+0x14e>
 8010d0c:	e779      	b.n	8010c02 <_strtoll_l.constprop.0+0x42>
 8010d0e:	260a      	movs	r6, #10
 8010d10:	e780      	b.n	8010c14 <_strtoll_l.constprop.0+0x54>
 8010d12:	46c0      	nop			; (mov r8, r8)
 8010d14:	08013ff9 	.word	0x08013ff9
 8010d18:	7fffffff 	.word	0x7fffffff

08010d1c <_strtoll_r>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	f7ff ff4f 	bl	8010bc0 <_strtoll_l.constprop.0>
 8010d22:	bd10      	pop	{r4, pc}

08010d24 <_strtoull_l.constprop.0>:
 8010d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d26:	b08b      	sub	sp, #44	; 0x2c
 8010d28:	9202      	str	r2, [sp, #8]
 8010d2a:	4a54      	ldr	r2, [pc, #336]	; (8010e7c <_strtoull_l.constprop.0+0x158>)
 8010d2c:	001e      	movs	r6, r3
 8010d2e:	9101      	str	r1, [sp, #4]
 8010d30:	000b      	movs	r3, r1
 8010d32:	4694      	mov	ip, r2
 8010d34:	2108      	movs	r1, #8
 8010d36:	9009      	str	r0, [sp, #36]	; 0x24
 8010d38:	001a      	movs	r2, r3
 8010d3a:	4660      	mov	r0, ip
 8010d3c:	7814      	ldrb	r4, [r2, #0]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	5d00      	ldrb	r0, [r0, r4]
 8010d42:	001d      	movs	r5, r3
 8010d44:	0007      	movs	r7, r0
 8010d46:	400f      	ands	r7, r1
 8010d48:	4208      	tst	r0, r1
 8010d4a:	d1f5      	bne.n	8010d38 <_strtoull_l.constprop.0+0x14>
 8010d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8010d4e:	d154      	bne.n	8010dfa <_strtoull_l.constprop.0+0xd6>
 8010d50:	781c      	ldrb	r4, [r3, #0]
 8010d52:	2301      	movs	r3, #1
 8010d54:	1c95      	adds	r5, r2, #2
 8010d56:	9306      	str	r3, [sp, #24]
 8010d58:	2e00      	cmp	r6, #0
 8010d5a:	d100      	bne.n	8010d5e <_strtoull_l.constprop.0+0x3a>
 8010d5c:	e088      	b.n	8010e70 <_strtoull_l.constprop.0+0x14c>
 8010d5e:	2e10      	cmp	r6, #16
 8010d60:	d10a      	bne.n	8010d78 <_strtoull_l.constprop.0+0x54>
 8010d62:	2c30      	cmp	r4, #48	; 0x30
 8010d64:	d108      	bne.n	8010d78 <_strtoull_l.constprop.0+0x54>
 8010d66:	2220      	movs	r2, #32
 8010d68:	782b      	ldrb	r3, [r5, #0]
 8010d6a:	4393      	bics	r3, r2
 8010d6c:	2b58      	cmp	r3, #88	; 0x58
 8010d6e:	d000      	beq.n	8010d72 <_strtoull_l.constprop.0+0x4e>
 8010d70:	e078      	b.n	8010e64 <_strtoull_l.constprop.0+0x140>
 8010d72:	2610      	movs	r6, #16
 8010d74:	786c      	ldrb	r4, [r5, #1]
 8010d76:	3502      	adds	r5, #2
 8010d78:	17f7      	asrs	r7, r6, #31
 8010d7a:	0032      	movs	r2, r6
 8010d7c:	003b      	movs	r3, r7
 8010d7e:	2001      	movs	r0, #1
 8010d80:	4240      	negs	r0, r0
 8010d82:	17c1      	asrs	r1, r0, #31
 8010d84:	f7ef fb8e 	bl	80004a4 <__aeabi_uldivmod>
 8010d88:	0032      	movs	r2, r6
 8010d8a:	9007      	str	r0, [sp, #28]
 8010d8c:	9103      	str	r1, [sp, #12]
 8010d8e:	003b      	movs	r3, r7
 8010d90:	2001      	movs	r0, #1
 8010d92:	4240      	negs	r0, r0
 8010d94:	17c1      	asrs	r1, r0, #31
 8010d96:	f7ef fb85 	bl	80004a4 <__aeabi_uldivmod>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	2100      	movs	r1, #0
 8010da0:	9208      	str	r2, [sp, #32]
 8010da2:	0022      	movs	r2, r4
 8010da4:	3a30      	subs	r2, #48	; 0x30
 8010da6:	2a09      	cmp	r2, #9
 8010da8:	d82d      	bhi.n	8010e06 <_strtoull_l.constprop.0+0xe2>
 8010daa:	0014      	movs	r4, r2
 8010dac:	42a6      	cmp	r6, r4
 8010dae:	dd39      	ble.n	8010e24 <_strtoull_l.constprop.0+0x100>
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	d01f      	beq.n	8010df4 <_strtoull_l.constprop.0+0xd0>
 8010db4:	9b03      	ldr	r3, [sp, #12]
 8010db6:	4299      	cmp	r1, r3
 8010db8:	d831      	bhi.n	8010e1e <_strtoull_l.constprop.0+0xfa>
 8010dba:	d102      	bne.n	8010dc2 <_strtoull_l.constprop.0+0x9e>
 8010dbc:	9b07      	ldr	r3, [sp, #28]
 8010dbe:	4298      	cmp	r0, r3
 8010dc0:	d82d      	bhi.n	8010e1e <_strtoull_l.constprop.0+0xfa>
 8010dc2:	9b07      	ldr	r3, [sp, #28]
 8010dc4:	4283      	cmp	r3, r0
 8010dc6:	d107      	bne.n	8010dd8 <_strtoull_l.constprop.0+0xb4>
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	428b      	cmp	r3, r1
 8010dcc:	d104      	bne.n	8010dd8 <_strtoull_l.constprop.0+0xb4>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	9a08      	ldr	r2, [sp, #32]
 8010dd2:	425b      	negs	r3, r3
 8010dd4:	42a2      	cmp	r2, r4
 8010dd6:	db0d      	blt.n	8010df4 <_strtoull_l.constprop.0+0xd0>
 8010dd8:	000b      	movs	r3, r1
 8010dda:	0002      	movs	r2, r0
 8010ddc:	0039      	movs	r1, r7
 8010dde:	0030      	movs	r0, r6
 8010de0:	f7ef fb80 	bl	80004e4 <__aeabi_lmul>
 8010de4:	17e3      	asrs	r3, r4, #31
 8010de6:	9404      	str	r4, [sp, #16]
 8010de8:	9305      	str	r3, [sp, #20]
 8010dea:	9b04      	ldr	r3, [sp, #16]
 8010dec:	9c05      	ldr	r4, [sp, #20]
 8010dee:	18c0      	adds	r0, r0, r3
 8010df0:	4161      	adcs	r1, r4
 8010df2:	2301      	movs	r3, #1
 8010df4:	782c      	ldrb	r4, [r5, #0]
 8010df6:	3501      	adds	r5, #1
 8010df8:	e7d3      	b.n	8010da2 <_strtoull_l.constprop.0+0x7e>
 8010dfa:	9706      	str	r7, [sp, #24]
 8010dfc:	2c2b      	cmp	r4, #43	; 0x2b
 8010dfe:	d1ab      	bne.n	8010d58 <_strtoull_l.constprop.0+0x34>
 8010e00:	781c      	ldrb	r4, [r3, #0]
 8010e02:	1c95      	adds	r5, r2, #2
 8010e04:	e7a8      	b.n	8010d58 <_strtoull_l.constprop.0+0x34>
 8010e06:	0022      	movs	r2, r4
 8010e08:	3a41      	subs	r2, #65	; 0x41
 8010e0a:	2a19      	cmp	r2, #25
 8010e0c:	d801      	bhi.n	8010e12 <_strtoull_l.constprop.0+0xee>
 8010e0e:	3c37      	subs	r4, #55	; 0x37
 8010e10:	e7cc      	b.n	8010dac <_strtoull_l.constprop.0+0x88>
 8010e12:	0022      	movs	r2, r4
 8010e14:	3a61      	subs	r2, #97	; 0x61
 8010e16:	2a19      	cmp	r2, #25
 8010e18:	d804      	bhi.n	8010e24 <_strtoull_l.constprop.0+0x100>
 8010e1a:	3c57      	subs	r4, #87	; 0x57
 8010e1c:	e7c6      	b.n	8010dac <_strtoull_l.constprop.0+0x88>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	425b      	negs	r3, r3
 8010e22:	e7e7      	b.n	8010df4 <_strtoull_l.constprop.0+0xd0>
 8010e24:	1c5a      	adds	r2, r3, #1
 8010e26:	d10a      	bne.n	8010e3e <_strtoull_l.constprop.0+0x11a>
 8010e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e2a:	3323      	adds	r3, #35	; 0x23
 8010e2c:	6013      	str	r3, [r2, #0]
 8010e2e:	9b02      	ldr	r3, [sp, #8]
 8010e30:	2001      	movs	r0, #1
 8010e32:	4240      	negs	r0, r0
 8010e34:	17c1      	asrs	r1, r0, #31
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10e      	bne.n	8010e58 <_strtoull_l.constprop.0+0x134>
 8010e3a:	b00b      	add	sp, #44	; 0x2c
 8010e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e3e:	9a06      	ldr	r2, [sp, #24]
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	d004      	beq.n	8010e4e <_strtoull_l.constprop.0+0x12a>
 8010e44:	0006      	movs	r6, r0
 8010e46:	000f      	movs	r7, r1
 8010e48:	2100      	movs	r1, #0
 8010e4a:	4270      	negs	r0, r6
 8010e4c:	41b9      	sbcs	r1, r7
 8010e4e:	9a02      	ldr	r2, [sp, #8]
 8010e50:	2a00      	cmp	r2, #0
 8010e52:	d0f2      	beq.n	8010e3a <_strtoull_l.constprop.0+0x116>
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <_strtoull_l.constprop.0+0x138>
 8010e58:	1e6b      	subs	r3, r5, #1
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	9b02      	ldr	r3, [sp, #8]
 8010e5e:	9a01      	ldr	r2, [sp, #4]
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	e7ea      	b.n	8010e3a <_strtoull_l.constprop.0+0x116>
 8010e64:	2430      	movs	r4, #48	; 0x30
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	d000      	beq.n	8010e6c <_strtoull_l.constprop.0+0x148>
 8010e6a:	e785      	b.n	8010d78 <_strtoull_l.constprop.0+0x54>
 8010e6c:	3608      	adds	r6, #8
 8010e6e:	e783      	b.n	8010d78 <_strtoull_l.constprop.0+0x54>
 8010e70:	2c30      	cmp	r4, #48	; 0x30
 8010e72:	d100      	bne.n	8010e76 <_strtoull_l.constprop.0+0x152>
 8010e74:	e777      	b.n	8010d66 <_strtoull_l.constprop.0+0x42>
 8010e76:	260a      	movs	r6, #10
 8010e78:	e77e      	b.n	8010d78 <_strtoull_l.constprop.0+0x54>
 8010e7a:	46c0      	nop			; (mov r8, r8)
 8010e7c:	08013ff9 	.word	0x08013ff9

08010e80 <_strtoull_r>:
 8010e80:	b510      	push	{r4, lr}
 8010e82:	f7ff ff4f 	bl	8010d24 <_strtoull_l.constprop.0>
 8010e86:	bd10      	pop	{r4, pc}

08010e88 <_mbrtowc_r>:
 8010e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e8a:	0004      	movs	r4, r0
 8010e8c:	0010      	movs	r0, r2
 8010e8e:	4a0b      	ldr	r2, [pc, #44]	; (8010ebc <_mbrtowc_r+0x34>)
 8010e90:	9d06      	ldr	r5, [sp, #24]
 8010e92:	32e4      	adds	r2, #228	; 0xe4
 8010e94:	6816      	ldr	r6, [r2, #0]
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d10c      	bne.n	8010eb4 <_mbrtowc_r+0x2c>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	0001      	movs	r1, r0
 8010e9e:	4a08      	ldr	r2, [pc, #32]	; (8010ec0 <_mbrtowc_r+0x38>)
 8010ea0:	9500      	str	r5, [sp, #0]
 8010ea2:	0020      	movs	r0, r4
 8010ea4:	47b0      	blx	r6
 8010ea6:	1c43      	adds	r3, r0, #1
 8010ea8:	d103      	bne.n	8010eb2 <_mbrtowc_r+0x2a>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	602b      	str	r3, [r5, #0]
 8010eae:	338a      	adds	r3, #138	; 0x8a
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010eb4:	0002      	movs	r2, r0
 8010eb6:	9500      	str	r5, [sp, #0]
 8010eb8:	e7f3      	b.n	8010ea2 <_mbrtowc_r+0x1a>
 8010eba:	46c0      	nop			; (mov r8, r8)
 8010ebc:	2000043c 	.word	0x2000043c
 8010ec0:	08014383 	.word	0x08014383

08010ec4 <iswspace>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	f000 f802 	bl	8010ed0 <iswspace_l>
 8010ecc:	bd10      	pop	{r4, pc}
	...

08010ed0 <iswspace_l>:
 8010ed0:	0003      	movs	r3, r0
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	2bff      	cmp	r3, #255	; 0xff
 8010ed6:	d803      	bhi.n	8010ee0 <iswspace_l+0x10>
 8010ed8:	4a02      	ldr	r2, [pc, #8]	; (8010ee4 <iswspace_l+0x14>)
 8010eda:	5cd0      	ldrb	r0, [r2, r3]
 8010edc:	2308      	movs	r3, #8
 8010ede:	4018      	ands	r0, r3
 8010ee0:	4770      	bx	lr
 8010ee2:	46c0      	nop			; (mov r8, r8)
 8010ee4:	08013ff9 	.word	0x08013ff9

08010ee8 <fiprintf>:
 8010ee8:	b40e      	push	{r1, r2, r3}
 8010eea:	b517      	push	{r0, r1, r2, r4, lr}
 8010eec:	4c05      	ldr	r4, [pc, #20]	; (8010f04 <fiprintf+0x1c>)
 8010eee:	ab05      	add	r3, sp, #20
 8010ef0:	cb04      	ldmia	r3!, {r2}
 8010ef2:	0001      	movs	r1, r0
 8010ef4:	6820      	ldr	r0, [r4, #0]
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	f000 f954 	bl	80111a4 <_vfiprintf_r>
 8010efc:	bc1e      	pop	{r1, r2, r3, r4}
 8010efe:	bc08      	pop	{r3}
 8010f00:	b003      	add	sp, #12
 8010f02:	4718      	bx	r3
 8010f04:	200006c8 	.word	0x200006c8

08010f08 <__ssprint_r>:
 8010f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f0a:	6813      	ldr	r3, [r2, #0]
 8010f0c:	b087      	sub	sp, #28
 8010f0e:	0017      	movs	r7, r2
 8010f10:	9303      	str	r3, [sp, #12]
 8010f12:	6893      	ldr	r3, [r2, #8]
 8010f14:	2200      	movs	r2, #0
 8010f16:	000c      	movs	r4, r1
 8010f18:	9005      	str	r0, [sp, #20]
 8010f1a:	9202      	str	r2, [sp, #8]
 8010f1c:	9201      	str	r2, [sp, #4]
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d10d      	bne.n	8010f3e <__ssprint_r+0x36>
 8010f22:	2000      	movs	r0, #0
 8010f24:	2300      	movs	r3, #0
 8010f26:	607b      	str	r3, [r7, #4]
 8010f28:	b007      	add	sp, #28
 8010f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2c:	9b03      	ldr	r3, [sp, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	9302      	str	r3, [sp, #8]
 8010f32:	9b03      	ldr	r3, [sp, #12]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	9303      	str	r3, [sp, #12]
 8010f3e:	9a01      	ldr	r2, [sp, #4]
 8010f40:	68a6      	ldr	r6, [r4, #8]
 8010f42:	6823      	ldr	r3, [r4, #0]
 8010f44:	2a00      	cmp	r2, #0
 8010f46:	d0f1      	beq.n	8010f2c <__ssprint_r+0x24>
 8010f48:	42b2      	cmp	r2, r6
 8010f4a:	d32e      	bcc.n	8010faa <__ssprint_r+0xa2>
 8010f4c:	2190      	movs	r1, #144	; 0x90
 8010f4e:	89a2      	ldrh	r2, [r4, #12]
 8010f50:	00c9      	lsls	r1, r1, #3
 8010f52:	420a      	tst	r2, r1
 8010f54:	d029      	beq.n	8010faa <__ssprint_r+0xa2>
 8010f56:	2003      	movs	r0, #3
 8010f58:	6921      	ldr	r1, [r4, #16]
 8010f5a:	1a5b      	subs	r3, r3, r1
 8010f5c:	9304      	str	r3, [sp, #16]
 8010f5e:	6963      	ldr	r3, [r4, #20]
 8010f60:	4343      	muls	r3, r0
 8010f62:	0fdd      	lsrs	r5, r3, #31
 8010f64:	18ed      	adds	r5, r5, r3
 8010f66:	9b04      	ldr	r3, [sp, #16]
 8010f68:	9801      	ldr	r0, [sp, #4]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	181b      	adds	r3, r3, r0
 8010f6e:	106d      	asrs	r5, r5, #1
 8010f70:	42ab      	cmp	r3, r5
 8010f72:	d900      	bls.n	8010f76 <__ssprint_r+0x6e>
 8010f74:	001d      	movs	r5, r3
 8010f76:	0552      	lsls	r2, r2, #21
 8010f78:	d532      	bpl.n	8010fe0 <__ssprint_r+0xd8>
 8010f7a:	0029      	movs	r1, r5
 8010f7c:	9805      	ldr	r0, [sp, #20]
 8010f7e:	f7f9 fa35 	bl	800a3ec <_malloc_r>
 8010f82:	1e06      	subs	r6, r0, #0
 8010f84:	d036      	beq.n	8010ff4 <__ssprint_r+0xec>
 8010f86:	9a04      	ldr	r2, [sp, #16]
 8010f88:	6921      	ldr	r1, [r4, #16]
 8010f8a:	f7fa fd94 	bl	800bab6 <memcpy>
 8010f8e:	89a2      	ldrh	r2, [r4, #12]
 8010f90:	4b1e      	ldr	r3, [pc, #120]	; (801100c <__ssprint_r+0x104>)
 8010f92:	401a      	ands	r2, r3
 8010f94:	2380      	movs	r3, #128	; 0x80
 8010f96:	4313      	orrs	r3, r2
 8010f98:	81a3      	strh	r3, [r4, #12]
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	6126      	str	r6, [r4, #16]
 8010f9e:	18f6      	adds	r6, r6, r3
 8010fa0:	6026      	str	r6, [r4, #0]
 8010fa2:	6165      	str	r5, [r4, #20]
 8010fa4:	9e01      	ldr	r6, [sp, #4]
 8010fa6:	1aed      	subs	r5, r5, r3
 8010fa8:	60a5      	str	r5, [r4, #8]
 8010faa:	9b01      	ldr	r3, [sp, #4]
 8010fac:	429e      	cmp	r6, r3
 8010fae:	d900      	bls.n	8010fb2 <__ssprint_r+0xaa>
 8010fb0:	001e      	movs	r6, r3
 8010fb2:	0032      	movs	r2, r6
 8010fb4:	9902      	ldr	r1, [sp, #8]
 8010fb6:	6820      	ldr	r0, [r4, #0]
 8010fb8:	f001 f86d 	bl	8012096 <memmove>
 8010fbc:	9a01      	ldr	r2, [sp, #4]
 8010fbe:	68a3      	ldr	r3, [r4, #8]
 8010fc0:	4694      	mov	ip, r2
 8010fc2:	1b9b      	subs	r3, r3, r6
 8010fc4:	60a3      	str	r3, [r4, #8]
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	199b      	adds	r3, r3, r6
 8010fca:	6023      	str	r3, [r4, #0]
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	4463      	add	r3, ip
 8010fd0:	9302      	str	r3, [sp, #8]
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	1a9b      	subs	r3, r3, r2
 8010fd6:	60bb      	str	r3, [r7, #8]
 8010fd8:	d0a3      	beq.n	8010f22 <__ssprint_r+0x1a>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	9301      	str	r3, [sp, #4]
 8010fde:	e7ae      	b.n	8010f3e <__ssprint_r+0x36>
 8010fe0:	002a      	movs	r2, r5
 8010fe2:	9805      	ldr	r0, [sp, #20]
 8010fe4:	f7ff fbc0 	bl	8010768 <_realloc_r>
 8010fe8:	1e06      	subs	r6, r0, #0
 8010fea:	d1d6      	bne.n	8010f9a <__ssprint_r+0x92>
 8010fec:	6921      	ldr	r1, [r4, #16]
 8010fee:	9805      	ldr	r0, [sp, #20]
 8010ff0:	f7fa fddc 	bl	800bbac <_free_r>
 8010ff4:	230c      	movs	r3, #12
 8010ff6:	9a05      	ldr	r2, [sp, #20]
 8010ff8:	2001      	movs	r0, #1
 8010ffa:	6013      	str	r3, [r2, #0]
 8010ffc:	89a2      	ldrh	r2, [r4, #12]
 8010ffe:	3334      	adds	r3, #52	; 0x34
 8011000:	4313      	orrs	r3, r2
 8011002:	81a3      	strh	r3, [r4, #12]
 8011004:	2300      	movs	r3, #0
 8011006:	4240      	negs	r0, r0
 8011008:	60bb      	str	r3, [r7, #8]
 801100a:	e78b      	b.n	8010f24 <__ssprint_r+0x1c>
 801100c:	fffffb7f 	.word	0xfffffb7f

08011010 <_sungetc_r>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	0014      	movs	r4, r2
 8011014:	1c4b      	adds	r3, r1, #1
 8011016:	d103      	bne.n	8011020 <_sungetc_r+0x10>
 8011018:	2501      	movs	r5, #1
 801101a:	426d      	negs	r5, r5
 801101c:	0028      	movs	r0, r5
 801101e:	bd70      	pop	{r4, r5, r6, pc}
 8011020:	8993      	ldrh	r3, [r2, #12]
 8011022:	2220      	movs	r2, #32
 8011024:	4393      	bics	r3, r2
 8011026:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011028:	81a3      	strh	r3, [r4, #12]
 801102a:	b2ce      	uxtb	r6, r1
 801102c:	6863      	ldr	r3, [r4, #4]
 801102e:	b2cd      	uxtb	r5, r1
 8011030:	2a00      	cmp	r2, #0
 8011032:	d010      	beq.n	8011056 <_sungetc_r+0x46>
 8011034:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011036:	429a      	cmp	r2, r3
 8011038:	dd07      	ble.n	801104a <_sungetc_r+0x3a>
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	3b01      	subs	r3, #1
 801103e:	6023      	str	r3, [r4, #0]
 8011040:	701e      	strb	r6, [r3, #0]
 8011042:	6863      	ldr	r3, [r4, #4]
 8011044:	3301      	adds	r3, #1
 8011046:	6063      	str	r3, [r4, #4]
 8011048:	e7e8      	b.n	801101c <_sungetc_r+0xc>
 801104a:	0021      	movs	r1, r4
 801104c:	f000 ff1a 	bl	8011e84 <__submore>
 8011050:	2800      	cmp	r0, #0
 8011052:	d0f2      	beq.n	801103a <_sungetc_r+0x2a>
 8011054:	e7e0      	b.n	8011018 <_sungetc_r+0x8>
 8011056:	6921      	ldr	r1, [r4, #16]
 8011058:	6822      	ldr	r2, [r4, #0]
 801105a:	2900      	cmp	r1, #0
 801105c:	d007      	beq.n	801106e <_sungetc_r+0x5e>
 801105e:	4291      	cmp	r1, r2
 8011060:	d205      	bcs.n	801106e <_sungetc_r+0x5e>
 8011062:	1e51      	subs	r1, r2, #1
 8011064:	7808      	ldrb	r0, [r1, #0]
 8011066:	42a8      	cmp	r0, r5
 8011068:	d101      	bne.n	801106e <_sungetc_r+0x5e>
 801106a:	6021      	str	r1, [r4, #0]
 801106c:	e7ea      	b.n	8011044 <_sungetc_r+0x34>
 801106e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011070:	0023      	movs	r3, r4
 8011072:	3340      	adds	r3, #64	; 0x40
 8011074:	6323      	str	r3, [r4, #48]	; 0x30
 8011076:	2303      	movs	r3, #3
 8011078:	6363      	str	r3, [r4, #52]	; 0x34
 801107a:	0023      	movs	r3, r4
 801107c:	3342      	adds	r3, #66	; 0x42
 801107e:	63a2      	str	r2, [r4, #56]	; 0x38
 8011080:	701e      	strb	r6, [r3, #0]
 8011082:	6023      	str	r3, [r4, #0]
 8011084:	2301      	movs	r3, #1
 8011086:	e7de      	b.n	8011046 <_sungetc_r+0x36>

08011088 <__ssrefill_r>:
 8011088:	b510      	push	{r4, lr}
 801108a:	000c      	movs	r4, r1
 801108c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801108e:	2900      	cmp	r1, #0
 8011090:	d00e      	beq.n	80110b0 <__ssrefill_r+0x28>
 8011092:	0023      	movs	r3, r4
 8011094:	3340      	adds	r3, #64	; 0x40
 8011096:	4299      	cmp	r1, r3
 8011098:	d001      	beq.n	801109e <__ssrefill_r+0x16>
 801109a:	f7fa fd87 	bl	800bbac <_free_r>
 801109e:	2000      	movs	r0, #0
 80110a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110a2:	6320      	str	r0, [r4, #48]	; 0x30
 80110a4:	6063      	str	r3, [r4, #4]
 80110a6:	4283      	cmp	r3, r0
 80110a8:	d002      	beq.n	80110b0 <__ssrefill_r+0x28>
 80110aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	bd10      	pop	{r4, pc}
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	2001      	movs	r0, #1
 80110b4:	6023      	str	r3, [r4, #0]
 80110b6:	2300      	movs	r3, #0
 80110b8:	89a2      	ldrh	r2, [r4, #12]
 80110ba:	6063      	str	r3, [r4, #4]
 80110bc:	3320      	adds	r3, #32
 80110be:	4313      	orrs	r3, r2
 80110c0:	81a3      	strh	r3, [r4, #12]
 80110c2:	4240      	negs	r0, r0
 80110c4:	e7f3      	b.n	80110ae <__ssrefill_r+0x26>

080110c6 <_sfread_r>:
 80110c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110c8:	0014      	movs	r4, r2
 80110ca:	435c      	muls	r4, r3
 80110cc:	b087      	sub	sp, #28
 80110ce:	1e26      	subs	r6, r4, #0
 80110d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110d2:	9005      	str	r0, [sp, #20]
 80110d4:	9101      	str	r1, [sp, #4]
 80110d6:	9202      	str	r2, [sp, #8]
 80110d8:	9303      	str	r3, [sp, #12]
 80110da:	d11e      	bne.n	801111a <_sfread_r+0x54>
 80110dc:	0020      	movs	r0, r4
 80110de:	b007      	add	sp, #28
 80110e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e2:	003a      	movs	r2, r7
 80110e4:	9801      	ldr	r0, [sp, #4]
 80110e6:	f7fa fce6 	bl	800bab6 <memcpy>
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	0029      	movs	r1, r5
 80110ee:	19db      	adds	r3, r3, r7
 80110f0:	602b      	str	r3, [r5, #0]
 80110f2:	2300      	movs	r3, #0
 80110f4:	606b      	str	r3, [r5, #4]
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	9805      	ldr	r0, [sp, #20]
 80110fa:	19db      	adds	r3, r3, r7
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	1bf3      	subs	r3, r6, r7
 8011100:	9304      	str	r3, [sp, #16]
 8011102:	f7ff ffc1 	bl	8011088 <__ssrefill_r>
 8011106:	2800      	cmp	r0, #0
 8011108:	d006      	beq.n	8011118 <_sfread_r+0x52>
 801110a:	193c      	adds	r4, r7, r4
 801110c:	1ba0      	subs	r0, r4, r6
 801110e:	9902      	ldr	r1, [sp, #8]
 8011110:	f7ef f814 	bl	800013c <__udivsi3>
 8011114:	0004      	movs	r4, r0
 8011116:	e7e1      	b.n	80110dc <_sfread_r+0x16>
 8011118:	9e04      	ldr	r6, [sp, #16]
 801111a:	686f      	ldr	r7, [r5, #4]
 801111c:	6829      	ldr	r1, [r5, #0]
 801111e:	42b7      	cmp	r7, r6
 8011120:	d3df      	bcc.n	80110e2 <_sfread_r+0x1c>
 8011122:	0032      	movs	r2, r6
 8011124:	9801      	ldr	r0, [sp, #4]
 8011126:	f7fa fcc6 	bl	800bab6 <memcpy>
 801112a:	686b      	ldr	r3, [r5, #4]
 801112c:	9c03      	ldr	r4, [sp, #12]
 801112e:	1b9b      	subs	r3, r3, r6
 8011130:	606b      	str	r3, [r5, #4]
 8011132:	682b      	ldr	r3, [r5, #0]
 8011134:	199b      	adds	r3, r3, r6
 8011136:	602b      	str	r3, [r5, #0]
 8011138:	e7d0      	b.n	80110dc <_sfread_r+0x16>

0801113a <__sprint_r>:
 801113a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801113c:	6893      	ldr	r3, [r2, #8]
 801113e:	b085      	sub	sp, #20
 8011140:	9001      	str	r0, [sp, #4]
 8011142:	000d      	movs	r5, r1
 8011144:	0014      	movs	r4, r2
 8011146:	1e18      	subs	r0, r3, #0
 8011148:	d018      	beq.n	801117c <__sprint_r+0x42>
 801114a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801114c:	049b      	lsls	r3, r3, #18
 801114e:	d524      	bpl.n	801119a <__sprint_r+0x60>
 8011150:	6817      	ldr	r7, [r2, #0]
 8011152:	2600      	movs	r6, #0
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	9302      	str	r3, [sp, #8]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	089b      	lsrs	r3, r3, #2
 801115e:	9303      	str	r3, [sp, #12]
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	42b3      	cmp	r3, r6
 8011164:	dc0e      	bgt.n	8011184 <__sprint_r+0x4a>
 8011166:	2203      	movs	r2, #3
 8011168:	9b00      	ldr	r3, [sp, #0]
 801116a:	68a0      	ldr	r0, [r4, #8]
 801116c:	4393      	bics	r3, r2
 801116e:	1ac0      	subs	r0, r0, r3
 8011170:	60a0      	str	r0, [r4, #8]
 8011172:	3708      	adds	r7, #8
 8011174:	2800      	cmp	r0, #0
 8011176:	d1ec      	bne.n	8011152 <__sprint_r+0x18>
 8011178:	2300      	movs	r3, #0
 801117a:	60a3      	str	r3, [r4, #8]
 801117c:	2300      	movs	r3, #0
 801117e:	6063      	str	r3, [r4, #4]
 8011180:	b005      	add	sp, #20
 8011182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011184:	9902      	ldr	r1, [sp, #8]
 8011186:	00b3      	lsls	r3, r6, #2
 8011188:	58c9      	ldr	r1, [r1, r3]
 801118a:	002a      	movs	r2, r5
 801118c:	9801      	ldr	r0, [sp, #4]
 801118e:	f000 ff59 	bl	8012044 <_fputwc_r>
 8011192:	1c43      	adds	r3, r0, #1
 8011194:	d0f0      	beq.n	8011178 <__sprint_r+0x3e>
 8011196:	3601      	adds	r6, #1
 8011198:	e7e2      	b.n	8011160 <__sprint_r+0x26>
 801119a:	9801      	ldr	r0, [sp, #4]
 801119c:	f000 fd14 	bl	8011bc8 <__sfvwrite_r>
 80111a0:	e7ea      	b.n	8011178 <__sprint_r+0x3e>
	...

080111a4 <_vfiprintf_r>:
 80111a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111a6:	b0c1      	sub	sp, #260	; 0x104
 80111a8:	001c      	movs	r4, r3
 80111aa:	001f      	movs	r7, r3
 80111ac:	9006      	str	r0, [sp, #24]
 80111ae:	9103      	str	r1, [sp, #12]
 80111b0:	9207      	str	r2, [sp, #28]
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d004      	beq.n	80111c0 <_vfiprintf_r+0x1c>
 80111b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <_vfiprintf_r+0x1c>
 80111bc:	f7fa fa98 	bl	800b6f0 <__sinit>
 80111c0:	9b03      	ldr	r3, [sp, #12]
 80111c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80111c4:	07db      	lsls	r3, r3, #31
 80111c6:	d407      	bmi.n	80111d8 <_vfiprintf_r+0x34>
 80111c8:	9b03      	ldr	r3, [sp, #12]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	059b      	lsls	r3, r3, #22
 80111ce:	d403      	bmi.n	80111d8 <_vfiprintf_r+0x34>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80111d4:	f7fa fc62 	bl	800ba9c <__retarget_lock_acquire_recursive>
 80111d8:	9b03      	ldr	r3, [sp, #12]
 80111da:	220c      	movs	r2, #12
 80111dc:	5e9a      	ldrsh	r2, [r3, r2]
 80111de:	2380      	movs	r3, #128	; 0x80
 80111e0:	019b      	lsls	r3, r3, #6
 80111e2:	421a      	tst	r2, r3
 80111e4:	d107      	bne.n	80111f6 <_vfiprintf_r+0x52>
 80111e6:	4313      	orrs	r3, r2
 80111e8:	9a03      	ldr	r2, [sp, #12]
 80111ea:	8193      	strh	r3, [r2, #12]
 80111ec:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80111ee:	4aa3      	ldr	r2, [pc, #652]	; (801147c <_vfiprintf_r+0x2d8>)
 80111f0:	4013      	ands	r3, r2
 80111f2:	9a03      	ldr	r2, [sp, #12]
 80111f4:	6653      	str	r3, [r2, #100]	; 0x64
 80111f6:	9b03      	ldr	r3, [sp, #12]
 80111f8:	899b      	ldrh	r3, [r3, #12]
 80111fa:	071b      	lsls	r3, r3, #28
 80111fc:	d503      	bpl.n	8011206 <_vfiprintf_r+0x62>
 80111fe:	9b03      	ldr	r3, [sp, #12]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d118      	bne.n	8011238 <_vfiprintf_r+0x94>
 8011206:	9903      	ldr	r1, [sp, #12]
 8011208:	9806      	ldr	r0, [sp, #24]
 801120a:	f000 fe79 	bl	8011f00 <__swsetup_r>
 801120e:	2800      	cmp	r0, #0
 8011210:	d012      	beq.n	8011238 <_vfiprintf_r+0x94>
 8011212:	9b03      	ldr	r3, [sp, #12]
 8011214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011216:	07db      	lsls	r3, r3, #31
 8011218:	d505      	bpl.n	8011226 <_vfiprintf_r+0x82>
 801121a:	2301      	movs	r3, #1
 801121c:	425b      	negs	r3, r3
 801121e:	9308      	str	r3, [sp, #32]
 8011220:	9808      	ldr	r0, [sp, #32]
 8011222:	b041      	add	sp, #260	; 0x104
 8011224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	899b      	ldrh	r3, [r3, #12]
 801122a:	059b      	lsls	r3, r3, #22
 801122c:	d4f5      	bmi.n	801121a <_vfiprintf_r+0x76>
 801122e:	9b03      	ldr	r3, [sp, #12]
 8011230:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011232:	f7fa fc34 	bl	800ba9e <__retarget_lock_release_recursive>
 8011236:	e7f0      	b.n	801121a <_vfiprintf_r+0x76>
 8011238:	221a      	movs	r2, #26
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	899b      	ldrh	r3, [r3, #12]
 801123e:	401a      	ands	r2, r3
 8011240:	2a0a      	cmp	r2, #10
 8011242:	d116      	bne.n	8011272 <_vfiprintf_r+0xce>
 8011244:	9a03      	ldr	r2, [sp, #12]
 8011246:	210e      	movs	r1, #14
 8011248:	5e52      	ldrsh	r2, [r2, r1]
 801124a:	2a00      	cmp	r2, #0
 801124c:	db11      	blt.n	8011272 <_vfiprintf_r+0xce>
 801124e:	9a03      	ldr	r2, [sp, #12]
 8011250:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011252:	07d2      	lsls	r2, r2, #31
 8011254:	d405      	bmi.n	8011262 <_vfiprintf_r+0xbe>
 8011256:	059b      	lsls	r3, r3, #22
 8011258:	d403      	bmi.n	8011262 <_vfiprintf_r+0xbe>
 801125a:	9b03      	ldr	r3, [sp, #12]
 801125c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801125e:	f7fa fc1e 	bl	800ba9e <__retarget_lock_release_recursive>
 8011262:	0023      	movs	r3, r4
 8011264:	9a07      	ldr	r2, [sp, #28]
 8011266:	9903      	ldr	r1, [sp, #12]
 8011268:	9806      	ldr	r0, [sp, #24]
 801126a:	f000 fc69 	bl	8011b40 <__sbprintf>
 801126e:	9008      	str	r0, [sp, #32]
 8011270:	e7d6      	b.n	8011220 <_vfiprintf_r+0x7c>
 8011272:	2300      	movs	r3, #0
 8011274:	ad17      	add	r5, sp, #92	; 0x5c
 8011276:	9514      	str	r5, [sp, #80]	; 0x50
 8011278:	9316      	str	r3, [sp, #88]	; 0x58
 801127a:	9315      	str	r3, [sp, #84]	; 0x54
 801127c:	930c      	str	r3, [sp, #48]	; 0x30
 801127e:	930d      	str	r3, [sp, #52]	; 0x34
 8011280:	930e      	str	r3, [sp, #56]	; 0x38
 8011282:	930f      	str	r3, [sp, #60]	; 0x3c
 8011284:	9308      	str	r3, [sp, #32]
 8011286:	9c07      	ldr	r4, [sp, #28]
 8011288:	7823      	ldrb	r3, [r4, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d002      	beq.n	8011294 <_vfiprintf_r+0xf0>
 801128e:	2b25      	cmp	r3, #37	; 0x25
 8011290:	d000      	beq.n	8011294 <_vfiprintf_r+0xf0>
 8011292:	e08d      	b.n	80113b0 <_vfiprintf_r+0x20c>
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	1ae6      	subs	r6, r4, r3
 8011298:	429c      	cmp	r4, r3
 801129a:	d016      	beq.n	80112ca <_vfiprintf_r+0x126>
 801129c:	602b      	str	r3, [r5, #0]
 801129e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80112a0:	606e      	str	r6, [r5, #4]
 80112a2:	199b      	adds	r3, r3, r6
 80112a4:	9316      	str	r3, [sp, #88]	; 0x58
 80112a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112a8:	3508      	adds	r5, #8
 80112aa:	3301      	adds	r3, #1
 80112ac:	9315      	str	r3, [sp, #84]	; 0x54
 80112ae:	2b07      	cmp	r3, #7
 80112b0:	dd08      	ble.n	80112c4 <_vfiprintf_r+0x120>
 80112b2:	9903      	ldr	r1, [sp, #12]
 80112b4:	9806      	ldr	r0, [sp, #24]
 80112b6:	aa14      	add	r2, sp, #80	; 0x50
 80112b8:	f7ff ff3f 	bl	801113a <__sprint_r>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d000      	beq.n	80112c2 <_vfiprintf_r+0x11e>
 80112c0:	e3d9      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 80112c2:	ad17      	add	r5, sp, #92	; 0x5c
 80112c4:	9b08      	ldr	r3, [sp, #32]
 80112c6:	199b      	adds	r3, r3, r6
 80112c8:	9308      	str	r3, [sp, #32]
 80112ca:	7823      	ldrb	r3, [r4, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d101      	bne.n	80112d4 <_vfiprintf_r+0x130>
 80112d0:	f000 fbf6 	bl	8011ac0 <_vfiprintf_r+0x91c>
 80112d4:	2200      	movs	r2, #0
 80112d6:	a912      	add	r1, sp, #72	; 0x48
 80112d8:	70ca      	strb	r2, [r1, #3]
 80112da:	2101      	movs	r1, #1
 80112dc:	1c63      	adds	r3, r4, #1
 80112de:	0014      	movs	r4, r2
 80112e0:	4249      	negs	r1, r1
 80112e2:	9105      	str	r1, [sp, #20]
 80112e4:	9209      	str	r2, [sp, #36]	; 0x24
 80112e6:	1c5a      	adds	r2, r3, #1
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	9207      	str	r2, [sp, #28]
 80112ec:	0018      	movs	r0, r3
 80112ee:	3820      	subs	r0, #32
 80112f0:	285a      	cmp	r0, #90	; 0x5a
 80112f2:	d900      	bls.n	80112f6 <_vfiprintf_r+0x152>
 80112f4:	e362      	b.n	80119bc <_vfiprintf_r+0x818>
 80112f6:	f7ee ff17 	bl	8000128 <__gnu_thumb1_case_uhi>
 80112fa:	0078      	.short	0x0078
 80112fc:	03610361 	.word	0x03610361
 8011300:	03610081 	.word	0x03610081
 8011304:	03610361 	.word	0x03610361
 8011308:	0361005d 	.word	0x0361005d
 801130c:	00830361 	.word	0x00830361
 8011310:	0361008b 	.word	0x0361008b
 8011314:	008f0089 	.word	0x008f0089
 8011318:	00ad0361 	.word	0x00ad0361
 801131c:	00af00af 	.word	0x00af00af
 8011320:	00af00af 	.word	0x00af00af
 8011324:	00af00af 	.word	0x00af00af
 8011328:	00af00af 	.word	0x00af00af
 801132c:	036100af 	.word	0x036100af
 8011330:	03610361 	.word	0x03610361
 8011334:	03610361 	.word	0x03610361
 8011338:	03610361 	.word	0x03610361
 801133c:	03610361 	.word	0x03610361
 8011340:	00e600da 	.word	0x00e600da
 8011344:	03610361 	.word	0x03610361
 8011348:	03610361 	.word	0x03610361
 801134c:	03610361 	.word	0x03610361
 8011350:	03610361 	.word	0x03610361
 8011354:	03610361 	.word	0x03610361
 8011358:	03610143 	.word	0x03610143
 801135c:	03610361 	.word	0x03610361
 8011360:	03610182 	.word	0x03610182
 8011364:	0361027c 	.word	0x0361027c
 8011368:	02ae0361 	.word	0x02ae0361
 801136c:	03610361 	.word	0x03610361
 8011370:	03610361 	.word	0x03610361
 8011374:	03610361 	.word	0x03610361
 8011378:	03610361 	.word	0x03610361
 801137c:	03610361 	.word	0x03610361
 8011380:	00e800da 	.word	0x00e800da
 8011384:	03610361 	.word	0x03610361
 8011388:	00c30361 	.word	0x00c30361
 801138c:	00d600e8 	.word	0x00d600e8
 8011390:	00cf0361 	.word	0x00cf0361
 8011394:	01260361 	.word	0x01260361
 8011398:	01740145 	.word	0x01740145
 801139c:	036100d6 	.word	0x036100d6
 80113a0:	007f0182 	.word	0x007f0182
 80113a4:	0361027e 	.word	0x0361027e
 80113a8:	02cd0361 	.word	0x02cd0361
 80113ac:	007f0361 	.word	0x007f0361
 80113b0:	3401      	adds	r4, #1
 80113b2:	e769      	b.n	8011288 <_vfiprintf_r+0xe4>
 80113b4:	9806      	ldr	r0, [sp, #24]
 80113b6:	f7fe fa47 	bl	800f848 <_localeconv_r>
 80113ba:	6843      	ldr	r3, [r0, #4]
 80113bc:	0018      	movs	r0, r3
 80113be:	930f      	str	r3, [sp, #60]	; 0x3c
 80113c0:	f7ee fea0 	bl	8000104 <strlen>
 80113c4:	900e      	str	r0, [sp, #56]	; 0x38
 80113c6:	9806      	ldr	r0, [sp, #24]
 80113c8:	f7fe fa3e 	bl	800f848 <_localeconv_r>
 80113cc:	6883      	ldr	r3, [r0, #8]
 80113ce:	930d      	str	r3, [sp, #52]	; 0x34
 80113d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d010      	beq.n	80113f8 <_vfiprintf_r+0x254>
 80113d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00d      	beq.n	80113f8 <_vfiprintf_r+0x254>
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00a      	beq.n	80113f8 <_vfiprintf_r+0x254>
 80113e2:	2380      	movs	r3, #128	; 0x80
 80113e4:	00db      	lsls	r3, r3, #3
 80113e6:	431c      	orrs	r4, r3
 80113e8:	e006      	b.n	80113f8 <_vfiprintf_r+0x254>
 80113ea:	ab12      	add	r3, sp, #72	; 0x48
 80113ec:	78da      	ldrb	r2, [r3, #3]
 80113ee:	3303      	adds	r3, #3
 80113f0:	2a00      	cmp	r2, #0
 80113f2:	d101      	bne.n	80113f8 <_vfiprintf_r+0x254>
 80113f4:	3220      	adds	r2, #32
 80113f6:	701a      	strb	r2, [r3, #0]
 80113f8:	9b07      	ldr	r3, [sp, #28]
 80113fa:	e774      	b.n	80112e6 <_vfiprintf_r+0x142>
 80113fc:	2301      	movs	r3, #1
 80113fe:	e7f2      	b.n	80113e6 <_vfiprintf_r+0x242>
 8011400:	cf08      	ldmia	r7!, {r3}
 8011402:	9309      	str	r3, [sp, #36]	; 0x24
 8011404:	2b00      	cmp	r3, #0
 8011406:	daf7      	bge.n	80113f8 <_vfiprintf_r+0x254>
 8011408:	425b      	negs	r3, r3
 801140a:	9309      	str	r3, [sp, #36]	; 0x24
 801140c:	2304      	movs	r3, #4
 801140e:	e7ea      	b.n	80113e6 <_vfiprintf_r+0x242>
 8011410:	222b      	movs	r2, #43	; 0x2b
 8011412:	ab12      	add	r3, sp, #72	; 0x48
 8011414:	70da      	strb	r2, [r3, #3]
 8011416:	e7ef      	b.n	80113f8 <_vfiprintf_r+0x254>
 8011418:	9b07      	ldr	r3, [sp, #28]
 801141a:	1c5a      	adds	r2, r3, #1
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	2b2a      	cmp	r3, #42	; 0x2a
 8011420:	d00f      	beq.n	8011442 <_vfiprintf_r+0x29e>
 8011422:	2100      	movs	r1, #0
 8011424:	9105      	str	r1, [sp, #20]
 8011426:	0019      	movs	r1, r3
 8011428:	3930      	subs	r1, #48	; 0x30
 801142a:	9207      	str	r2, [sp, #28]
 801142c:	2909      	cmp	r1, #9
 801142e:	d900      	bls.n	8011432 <_vfiprintf_r+0x28e>
 8011430:	e75c      	b.n	80112ec <_vfiprintf_r+0x148>
 8011432:	200a      	movs	r0, #10
 8011434:	9b05      	ldr	r3, [sp, #20]
 8011436:	4343      	muls	r3, r0
 8011438:	185b      	adds	r3, r3, r1
 801143a:	9305      	str	r3, [sp, #20]
 801143c:	7813      	ldrb	r3, [r2, #0]
 801143e:	3201      	adds	r2, #1
 8011440:	e7f1      	b.n	8011426 <_vfiprintf_r+0x282>
 8011442:	cf08      	ldmia	r7!, {r3}
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	da02      	bge.n	8011450 <_vfiprintf_r+0x2ac>
 801144a:	2301      	movs	r3, #1
 801144c:	425b      	negs	r3, r3
 801144e:	9305      	str	r3, [sp, #20]
 8011450:	9207      	str	r2, [sp, #28]
 8011452:	e7d1      	b.n	80113f8 <_vfiprintf_r+0x254>
 8011454:	2380      	movs	r3, #128	; 0x80
 8011456:	e7c6      	b.n	80113e6 <_vfiprintf_r+0x242>
 8011458:	2100      	movs	r1, #0
 801145a:	9a07      	ldr	r2, [sp, #28]
 801145c:	9109      	str	r1, [sp, #36]	; 0x24
 801145e:	200a      	movs	r0, #10
 8011460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011462:	3b30      	subs	r3, #48	; 0x30
 8011464:	4341      	muls	r1, r0
 8011466:	185b      	adds	r3, r3, r1
 8011468:	9309      	str	r3, [sp, #36]	; 0x24
 801146a:	0013      	movs	r3, r2
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	3201      	adds	r2, #1
 8011470:	0019      	movs	r1, r3
 8011472:	3930      	subs	r1, #48	; 0x30
 8011474:	9207      	str	r2, [sp, #28]
 8011476:	2909      	cmp	r1, #9
 8011478:	d9f1      	bls.n	801145e <_vfiprintf_r+0x2ba>
 801147a:	e737      	b.n	80112ec <_vfiprintf_r+0x148>
 801147c:	ffffdfff 	.word	0xffffdfff
 8011480:	9b07      	ldr	r3, [sp, #28]
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	2b68      	cmp	r3, #104	; 0x68
 8011486:	d105      	bne.n	8011494 <_vfiprintf_r+0x2f0>
 8011488:	9b07      	ldr	r3, [sp, #28]
 801148a:	3301      	adds	r3, #1
 801148c:	9307      	str	r3, [sp, #28]
 801148e:	2380      	movs	r3, #128	; 0x80
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	e7a8      	b.n	80113e6 <_vfiprintf_r+0x242>
 8011494:	2340      	movs	r3, #64	; 0x40
 8011496:	e7a6      	b.n	80113e6 <_vfiprintf_r+0x242>
 8011498:	9b07      	ldr	r3, [sp, #28]
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	2b6c      	cmp	r3, #108	; 0x6c
 801149e:	d104      	bne.n	80114aa <_vfiprintf_r+0x306>
 80114a0:	9b07      	ldr	r3, [sp, #28]
 80114a2:	3301      	adds	r3, #1
 80114a4:	9307      	str	r3, [sp, #28]
 80114a6:	2320      	movs	r3, #32
 80114a8:	e79d      	b.n	80113e6 <_vfiprintf_r+0x242>
 80114aa:	2310      	movs	r3, #16
 80114ac:	e79b      	b.n	80113e6 <_vfiprintf_r+0x242>
 80114ae:	003a      	movs	r2, r7
 80114b0:	ca08      	ldmia	r2!, {r3}
 80114b2:	ae27      	add	r6, sp, #156	; 0x9c
 80114b4:	7033      	strb	r3, [r6, #0]
 80114b6:	2300      	movs	r3, #0
 80114b8:	9204      	str	r2, [sp, #16]
 80114ba:	aa12      	add	r2, sp, #72	; 0x48
 80114bc:	70d3      	strb	r3, [r2, #3]
 80114be:	2201      	movs	r2, #1
 80114c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80114c2:	9205      	str	r2, [sp, #20]
 80114c4:	e0b0      	b.n	8011628 <_vfiprintf_r+0x484>
 80114c6:	2310      	movs	r3, #16
 80114c8:	431c      	orrs	r4, r3
 80114ca:	06a3      	lsls	r3, r4, #26
 80114cc:	d52a      	bpl.n	8011524 <_vfiprintf_r+0x380>
 80114ce:	2307      	movs	r3, #7
 80114d0:	3707      	adds	r7, #7
 80114d2:	439f      	bics	r7, r3
 80114d4:	0039      	movs	r1, r7
 80114d6:	c90c      	ldmia	r1!, {r2, r3}
 80114d8:	9200      	str	r2, [sp, #0]
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	9104      	str	r1, [sp, #16]
 80114de:	9a01      	ldr	r2, [sp, #4]
 80114e0:	2301      	movs	r3, #1
 80114e2:	2a00      	cmp	r2, #0
 80114e4:	da09      	bge.n	80114fa <_vfiprintf_r+0x356>
 80114e6:	9e00      	ldr	r6, [sp, #0]
 80114e8:	9f01      	ldr	r7, [sp, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	4271      	negs	r1, r6
 80114ee:	41ba      	sbcs	r2, r7
 80114f0:	9100      	str	r1, [sp, #0]
 80114f2:	9201      	str	r2, [sp, #4]
 80114f4:	212d      	movs	r1, #45	; 0x2d
 80114f6:	aa12      	add	r2, sp, #72	; 0x48
 80114f8:	70d1      	strb	r1, [r2, #3]
 80114fa:	9901      	ldr	r1, [sp, #4]
 80114fc:	9a00      	ldr	r2, [sp, #0]
 80114fe:	430a      	orrs	r2, r1
 8011500:	9905      	ldr	r1, [sp, #20]
 8011502:	3101      	adds	r1, #1
 8011504:	d100      	bne.n	8011508 <_vfiprintf_r+0x364>
 8011506:	e2e9      	b.n	8011adc <_vfiprintf_r+0x938>
 8011508:	2180      	movs	r1, #128	; 0x80
 801150a:	0027      	movs	r7, r4
 801150c:	438f      	bics	r7, r1
 801150e:	2a00      	cmp	r2, #0
 8011510:	d000      	beq.n	8011514 <_vfiprintf_r+0x370>
 8011512:	e2e7      	b.n	8011ae4 <_vfiprintf_r+0x940>
 8011514:	9a05      	ldr	r2, [sp, #20]
 8011516:	2a00      	cmp	r2, #0
 8011518:	d100      	bne.n	801151c <_vfiprintf_r+0x378>
 801151a:	e243      	b.n	80119a4 <_vfiprintf_r+0x800>
 801151c:	2b01      	cmp	r3, #1
 801151e:	d000      	beq.n	8011522 <_vfiprintf_r+0x37e>
 8011520:	e2e3      	b.n	8011aea <_vfiprintf_r+0x946>
 8011522:	e1e7      	b.n	80118f4 <_vfiprintf_r+0x750>
 8011524:	003a      	movs	r2, r7
 8011526:	ca08      	ldmia	r2!, {r3}
 8011528:	9204      	str	r2, [sp, #16]
 801152a:	06e2      	lsls	r2, r4, #27
 801152c:	d503      	bpl.n	8011536 <_vfiprintf_r+0x392>
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	17db      	asrs	r3, r3, #31
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	e7d3      	b.n	80114de <_vfiprintf_r+0x33a>
 8011536:	0662      	lsls	r2, r4, #25
 8011538:	d501      	bpl.n	801153e <_vfiprintf_r+0x39a>
 801153a:	b21b      	sxth	r3, r3
 801153c:	e7f7      	b.n	801152e <_vfiprintf_r+0x38a>
 801153e:	05a2      	lsls	r2, r4, #22
 8011540:	d5f5      	bpl.n	801152e <_vfiprintf_r+0x38a>
 8011542:	b25b      	sxtb	r3, r3
 8011544:	e7f3      	b.n	801152e <_vfiprintf_r+0x38a>
 8011546:	1d3b      	adds	r3, r7, #4
 8011548:	9304      	str	r3, [sp, #16]
 801154a:	06a3      	lsls	r3, r4, #26
 801154c:	d506      	bpl.n	801155c <_vfiprintf_r+0x3b8>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	9a08      	ldr	r2, [sp, #32]
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	17d2      	asrs	r2, r2, #31
 8011556:	605a      	str	r2, [r3, #4]
 8011558:	9f04      	ldr	r7, [sp, #16]
 801155a:	e694      	b.n	8011286 <_vfiprintf_r+0xe2>
 801155c:	06e3      	lsls	r3, r4, #27
 801155e:	d503      	bpl.n	8011568 <_vfiprintf_r+0x3c4>
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	9a08      	ldr	r2, [sp, #32]
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	e7f7      	b.n	8011558 <_vfiprintf_r+0x3b4>
 8011568:	0663      	lsls	r3, r4, #25
 801156a:	d503      	bpl.n	8011574 <_vfiprintf_r+0x3d0>
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	9a08      	ldr	r2, [sp, #32]
 8011570:	801a      	strh	r2, [r3, #0]
 8011572:	e7f1      	b.n	8011558 <_vfiprintf_r+0x3b4>
 8011574:	05a4      	lsls	r4, r4, #22
 8011576:	d5f3      	bpl.n	8011560 <_vfiprintf_r+0x3bc>
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	9a08      	ldr	r2, [sp, #32]
 801157c:	701a      	strb	r2, [r3, #0]
 801157e:	e7eb      	b.n	8011558 <_vfiprintf_r+0x3b4>
 8011580:	2310      	movs	r3, #16
 8011582:	431c      	orrs	r4, r3
 8011584:	2320      	movs	r3, #32
 8011586:	0020      	movs	r0, r4
 8011588:	4018      	ands	r0, r3
 801158a:	421c      	tst	r4, r3
 801158c:	d00d      	beq.n	80115aa <_vfiprintf_r+0x406>
 801158e:	3b19      	subs	r3, #25
 8011590:	3707      	adds	r7, #7
 8011592:	439f      	bics	r7, r3
 8011594:	0039      	movs	r1, r7
 8011596:	c90c      	ldmia	r1!, {r2, r3}
 8011598:	9200      	str	r2, [sp, #0]
 801159a:	9301      	str	r3, [sp, #4]
 801159c:	9104      	str	r1, [sp, #16]
 801159e:	4bcc      	ldr	r3, [pc, #816]	; (80118d0 <_vfiprintf_r+0x72c>)
 80115a0:	401c      	ands	r4, r3
 80115a2:	2300      	movs	r3, #0
 80115a4:	2100      	movs	r1, #0
 80115a6:	aa12      	add	r2, sp, #72	; 0x48
 80115a8:	e7a6      	b.n	80114f8 <_vfiprintf_r+0x354>
 80115aa:	003a      	movs	r2, r7
 80115ac:	ca08      	ldmia	r2!, {r3}
 80115ae:	0021      	movs	r1, r4
 80115b0:	9204      	str	r2, [sp, #16]
 80115b2:	2210      	movs	r2, #16
 80115b4:	4011      	ands	r1, r2
 80115b6:	4214      	tst	r4, r2
 80115b8:	d002      	beq.n	80115c0 <_vfiprintf_r+0x41c>
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	9001      	str	r0, [sp, #4]
 80115be:	e7ee      	b.n	801159e <_vfiprintf_r+0x3fa>
 80115c0:	2240      	movs	r2, #64	; 0x40
 80115c2:	0020      	movs	r0, r4
 80115c4:	4010      	ands	r0, r2
 80115c6:	4214      	tst	r4, r2
 80115c8:	d003      	beq.n	80115d2 <_vfiprintf_r+0x42e>
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	9101      	str	r1, [sp, #4]
 80115d0:	e7e5      	b.n	801159e <_vfiprintf_r+0x3fa>
 80115d2:	2280      	movs	r2, #128	; 0x80
 80115d4:	0021      	movs	r1, r4
 80115d6:	0092      	lsls	r2, r2, #2
 80115d8:	4011      	ands	r1, r2
 80115da:	4214      	tst	r4, r2
 80115dc:	d0f6      	beq.n	80115cc <_vfiprintf_r+0x428>
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	e7eb      	b.n	80115ba <_vfiprintf_r+0x416>
 80115e2:	003b      	movs	r3, r7
 80115e4:	cb04      	ldmia	r3!, {r2}
 80115e6:	49bb      	ldr	r1, [pc, #748]	; (80118d4 <_vfiprintf_r+0x730>)
 80115e8:	9304      	str	r3, [sp, #16]
 80115ea:	2300      	movs	r3, #0
 80115ec:	9200      	str	r2, [sp, #0]
 80115ee:	aa13      	add	r2, sp, #76	; 0x4c
 80115f0:	8011      	strh	r1, [r2, #0]
 80115f2:	4ab9      	ldr	r2, [pc, #740]	; (80118d8 <_vfiprintf_r+0x734>)
 80115f4:	9301      	str	r3, [sp, #4]
 80115f6:	3302      	adds	r3, #2
 80115f8:	431c      	orrs	r4, r3
 80115fa:	920c      	str	r2, [sp, #48]	; 0x30
 80115fc:	e7d2      	b.n	80115a4 <_vfiprintf_r+0x400>
 80115fe:	003b      	movs	r3, r7
 8011600:	2700      	movs	r7, #0
 8011602:	cb40      	ldmia	r3!, {r6}
 8011604:	9304      	str	r3, [sp, #16]
 8011606:	ab12      	add	r3, sp, #72	; 0x48
 8011608:	70df      	strb	r7, [r3, #3]
 801160a:	9b05      	ldr	r3, [sp, #20]
 801160c:	3301      	adds	r3, #1
 801160e:	d100      	bne.n	8011612 <_vfiprintf_r+0x46e>
 8011610:	e0ea      	b.n	80117e8 <_vfiprintf_r+0x644>
 8011612:	0039      	movs	r1, r7
 8011614:	0030      	movs	r0, r6
 8011616:	9a05      	ldr	r2, [sp, #20]
 8011618:	f7fe f92e 	bl	800f878 <memchr>
 801161c:	900b      	str	r0, [sp, #44]	; 0x2c
 801161e:	42b8      	cmp	r0, r7
 8011620:	d002      	beq.n	8011628 <_vfiprintf_r+0x484>
 8011622:	1b83      	subs	r3, r0, r6
 8011624:	9305      	str	r3, [sp, #20]
 8011626:	970b      	str	r7, [sp, #44]	; 0x2c
 8011628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801162a:	9a05      	ldr	r2, [sp, #20]
 801162c:	930a      	str	r3, [sp, #40]	; 0x28
 801162e:	4293      	cmp	r3, r2
 8011630:	da00      	bge.n	8011634 <_vfiprintf_r+0x490>
 8011632:	920a      	str	r2, [sp, #40]	; 0x28
 8011634:	ab12      	add	r3, sp, #72	; 0x48
 8011636:	3303      	adds	r3, #3
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	1e5a      	subs	r2, r3, #1
 801163c:	4193      	sbcs	r3, r2
 801163e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011640:	18d3      	adds	r3, r2, r3
 8011642:	930a      	str	r3, [sp, #40]	; 0x28
 8011644:	0022      	movs	r2, r4
 8011646:	2302      	movs	r3, #2
 8011648:	401a      	ands	r2, r3
 801164a:	9210      	str	r2, [sp, #64]	; 0x40
 801164c:	421c      	tst	r4, r3
 801164e:	d002      	beq.n	8011656 <_vfiprintf_r+0x4b2>
 8011650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011652:	3302      	adds	r3, #2
 8011654:	930a      	str	r3, [sp, #40]	; 0x28
 8011656:	2384      	movs	r3, #132	; 0x84
 8011658:	0022      	movs	r2, r4
 801165a:	401a      	ands	r2, r3
 801165c:	9211      	str	r2, [sp, #68]	; 0x44
 801165e:	421c      	tst	r4, r3
 8011660:	d11e      	bne.n	80116a0 <_vfiprintf_r+0x4fc>
 8011662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011666:	1a9f      	subs	r7, r3, r2
 8011668:	2f00      	cmp	r7, #0
 801166a:	dd19      	ble.n	80116a0 <_vfiprintf_r+0x4fc>
 801166c:	0029      	movs	r1, r5
 801166e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011670:	489a      	ldr	r0, [pc, #616]	; (80118dc <_vfiprintf_r+0x738>)
 8011672:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011674:	3301      	adds	r3, #1
 8011676:	3108      	adds	r1, #8
 8011678:	6028      	str	r0, [r5, #0]
 801167a:	2f10      	cmp	r7, #16
 801167c:	dd00      	ble.n	8011680 <_vfiprintf_r+0x4dc>
 801167e:	e1a7      	b.n	80119d0 <_vfiprintf_r+0x82c>
 8011680:	606f      	str	r7, [r5, #4]
 8011682:	18bf      	adds	r7, r7, r2
 8011684:	000d      	movs	r5, r1
 8011686:	9716      	str	r7, [sp, #88]	; 0x58
 8011688:	9315      	str	r3, [sp, #84]	; 0x54
 801168a:	2b07      	cmp	r3, #7
 801168c:	dd08      	ble.n	80116a0 <_vfiprintf_r+0x4fc>
 801168e:	9903      	ldr	r1, [sp, #12]
 8011690:	9806      	ldr	r0, [sp, #24]
 8011692:	aa14      	add	r2, sp, #80	; 0x50
 8011694:	f7ff fd51 	bl	801113a <__sprint_r>
 8011698:	2800      	cmp	r0, #0
 801169a:	d000      	beq.n	801169e <_vfiprintf_r+0x4fa>
 801169c:	e1eb      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 801169e:	ad17      	add	r5, sp, #92	; 0x5c
 80116a0:	a912      	add	r1, sp, #72	; 0x48
 80116a2:	78c8      	ldrb	r0, [r1, #3]
 80116a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80116a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116a8:	3103      	adds	r1, #3
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d012      	beq.n	80116d4 <_vfiprintf_r+0x530>
 80116ae:	6029      	str	r1, [r5, #0]
 80116b0:	2101      	movs	r1, #1
 80116b2:	3301      	adds	r3, #1
 80116b4:	1852      	adds	r2, r2, r1
 80116b6:	6069      	str	r1, [r5, #4]
 80116b8:	9216      	str	r2, [sp, #88]	; 0x58
 80116ba:	9315      	str	r3, [sp, #84]	; 0x54
 80116bc:	3508      	adds	r5, #8
 80116be:	2b07      	cmp	r3, #7
 80116c0:	dd08      	ble.n	80116d4 <_vfiprintf_r+0x530>
 80116c2:	9903      	ldr	r1, [sp, #12]
 80116c4:	9806      	ldr	r0, [sp, #24]
 80116c6:	aa14      	add	r2, sp, #80	; 0x50
 80116c8:	f7ff fd37 	bl	801113a <__sprint_r>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d000      	beq.n	80116d2 <_vfiprintf_r+0x52e>
 80116d0:	e1d1      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 80116d2:	ad17      	add	r5, sp, #92	; 0x5c
 80116d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80116d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80116d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116da:	2900      	cmp	r1, #0
 80116dc:	d013      	beq.n	8011706 <_vfiprintf_r+0x562>
 80116de:	a913      	add	r1, sp, #76	; 0x4c
 80116e0:	6029      	str	r1, [r5, #0]
 80116e2:	2102      	movs	r1, #2
 80116e4:	3301      	adds	r3, #1
 80116e6:	1852      	adds	r2, r2, r1
 80116e8:	6069      	str	r1, [r5, #4]
 80116ea:	9216      	str	r2, [sp, #88]	; 0x58
 80116ec:	9315      	str	r3, [sp, #84]	; 0x54
 80116ee:	3508      	adds	r5, #8
 80116f0:	2b07      	cmp	r3, #7
 80116f2:	dd08      	ble.n	8011706 <_vfiprintf_r+0x562>
 80116f4:	9903      	ldr	r1, [sp, #12]
 80116f6:	9806      	ldr	r0, [sp, #24]
 80116f8:	aa14      	add	r2, sp, #80	; 0x50
 80116fa:	f7ff fd1e 	bl	801113a <__sprint_r>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d000      	beq.n	8011704 <_vfiprintf_r+0x560>
 8011702:	e1b8      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 8011704:	ad17      	add	r5, sp, #92	; 0x5c
 8011706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011708:	2b80      	cmp	r3, #128	; 0x80
 801170a:	d11e      	bne.n	801174a <_vfiprintf_r+0x5a6>
 801170c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801170e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011710:	1a9f      	subs	r7, r3, r2
 8011712:	2f00      	cmp	r7, #0
 8011714:	dd19      	ble.n	801174a <_vfiprintf_r+0x5a6>
 8011716:	0029      	movs	r1, r5
 8011718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801171a:	4871      	ldr	r0, [pc, #452]	; (80118e0 <_vfiprintf_r+0x73c>)
 801171c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801171e:	3301      	adds	r3, #1
 8011720:	3108      	adds	r1, #8
 8011722:	6028      	str	r0, [r5, #0]
 8011724:	2f10      	cmp	r7, #16
 8011726:	dd00      	ble.n	801172a <_vfiprintf_r+0x586>
 8011728:	e164      	b.n	80119f4 <_vfiprintf_r+0x850>
 801172a:	606f      	str	r7, [r5, #4]
 801172c:	18bf      	adds	r7, r7, r2
 801172e:	000d      	movs	r5, r1
 8011730:	9716      	str	r7, [sp, #88]	; 0x58
 8011732:	9315      	str	r3, [sp, #84]	; 0x54
 8011734:	2b07      	cmp	r3, #7
 8011736:	dd08      	ble.n	801174a <_vfiprintf_r+0x5a6>
 8011738:	9903      	ldr	r1, [sp, #12]
 801173a:	9806      	ldr	r0, [sp, #24]
 801173c:	aa14      	add	r2, sp, #80	; 0x50
 801173e:	f7ff fcfc 	bl	801113a <__sprint_r>
 8011742:	2800      	cmp	r0, #0
 8011744:	d000      	beq.n	8011748 <_vfiprintf_r+0x5a4>
 8011746:	e196      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 8011748:	ad17      	add	r5, sp, #92	; 0x5c
 801174a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801174c:	9a05      	ldr	r2, [sp, #20]
 801174e:	1a9f      	subs	r7, r3, r2
 8011750:	2f00      	cmp	r7, #0
 8011752:	dd19      	ble.n	8011788 <_vfiprintf_r+0x5e4>
 8011754:	0029      	movs	r1, r5
 8011756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011758:	4861      	ldr	r0, [pc, #388]	; (80118e0 <_vfiprintf_r+0x73c>)
 801175a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801175c:	3301      	adds	r3, #1
 801175e:	3108      	adds	r1, #8
 8011760:	6028      	str	r0, [r5, #0]
 8011762:	2f10      	cmp	r7, #16
 8011764:	dd00      	ble.n	8011768 <_vfiprintf_r+0x5c4>
 8011766:	e157      	b.n	8011a18 <_vfiprintf_r+0x874>
 8011768:	606f      	str	r7, [r5, #4]
 801176a:	18bf      	adds	r7, r7, r2
 801176c:	000d      	movs	r5, r1
 801176e:	9716      	str	r7, [sp, #88]	; 0x58
 8011770:	9315      	str	r3, [sp, #84]	; 0x54
 8011772:	2b07      	cmp	r3, #7
 8011774:	dd08      	ble.n	8011788 <_vfiprintf_r+0x5e4>
 8011776:	9903      	ldr	r1, [sp, #12]
 8011778:	9806      	ldr	r0, [sp, #24]
 801177a:	aa14      	add	r2, sp, #80	; 0x50
 801177c:	f7ff fcdd 	bl	801113a <__sprint_r>
 8011780:	2800      	cmp	r0, #0
 8011782:	d000      	beq.n	8011786 <_vfiprintf_r+0x5e2>
 8011784:	e177      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 8011786:	ad17      	add	r5, sp, #92	; 0x5c
 8011788:	9b05      	ldr	r3, [sp, #20]
 801178a:	9a05      	ldr	r2, [sp, #20]
 801178c:	606b      	str	r3, [r5, #4]
 801178e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011790:	602e      	str	r6, [r5, #0]
 8011792:	189b      	adds	r3, r3, r2
 8011794:	9316      	str	r3, [sp, #88]	; 0x58
 8011796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011798:	3508      	adds	r5, #8
 801179a:	3301      	adds	r3, #1
 801179c:	9315      	str	r3, [sp, #84]	; 0x54
 801179e:	2b07      	cmp	r3, #7
 80117a0:	dd08      	ble.n	80117b4 <_vfiprintf_r+0x610>
 80117a2:	9903      	ldr	r1, [sp, #12]
 80117a4:	9806      	ldr	r0, [sp, #24]
 80117a6:	aa14      	add	r2, sp, #80	; 0x50
 80117a8:	f7ff fcc7 	bl	801113a <__sprint_r>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d000      	beq.n	80117b2 <_vfiprintf_r+0x60e>
 80117b0:	e161      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 80117b2:	ad17      	add	r5, sp, #92	; 0x5c
 80117b4:	0764      	lsls	r4, r4, #29
 80117b6:	d500      	bpl.n	80117ba <_vfiprintf_r+0x616>
 80117b8:	e140      	b.n	8011a3c <_vfiprintf_r+0x898>
 80117ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117be:	4293      	cmp	r3, r2
 80117c0:	da00      	bge.n	80117c4 <_vfiprintf_r+0x620>
 80117c2:	0013      	movs	r3, r2
 80117c4:	9a08      	ldr	r2, [sp, #32]
 80117c6:	18d3      	adds	r3, r2, r3
 80117c8:	9308      	str	r3, [sp, #32]
 80117ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d007      	beq.n	80117e0 <_vfiprintf_r+0x63c>
 80117d0:	9903      	ldr	r1, [sp, #12]
 80117d2:	9806      	ldr	r0, [sp, #24]
 80117d4:	aa14      	add	r2, sp, #80	; 0x50
 80117d6:	f7ff fcb0 	bl	801113a <__sprint_r>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d000      	beq.n	80117e0 <_vfiprintf_r+0x63c>
 80117de:	e14a      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 80117e0:	2300      	movs	r3, #0
 80117e2:	ad17      	add	r5, sp, #92	; 0x5c
 80117e4:	9315      	str	r3, [sp, #84]	; 0x54
 80117e6:	e6b7      	b.n	8011558 <_vfiprintf_r+0x3b4>
 80117e8:	0030      	movs	r0, r6
 80117ea:	f7ee fc8b 	bl	8000104 <strlen>
 80117ee:	9005      	str	r0, [sp, #20]
 80117f0:	e719      	b.n	8011626 <_vfiprintf_r+0x482>
 80117f2:	2310      	movs	r3, #16
 80117f4:	431c      	orrs	r4, r3
 80117f6:	2320      	movs	r3, #32
 80117f8:	0020      	movs	r0, r4
 80117fa:	4018      	ands	r0, r3
 80117fc:	421c      	tst	r4, r3
 80117fe:	d009      	beq.n	8011814 <_vfiprintf_r+0x670>
 8011800:	3b19      	subs	r3, #25
 8011802:	3707      	adds	r7, #7
 8011804:	439f      	bics	r7, r3
 8011806:	0039      	movs	r1, r7
 8011808:	c90c      	ldmia	r1!, {r2, r3}
 801180a:	9200      	str	r2, [sp, #0]
 801180c:	9301      	str	r3, [sp, #4]
 801180e:	9104      	str	r1, [sp, #16]
 8011810:	2301      	movs	r3, #1
 8011812:	e6c7      	b.n	80115a4 <_vfiprintf_r+0x400>
 8011814:	003b      	movs	r3, r7
 8011816:	cb04      	ldmia	r3!, {r2}
 8011818:	0021      	movs	r1, r4
 801181a:	9304      	str	r3, [sp, #16]
 801181c:	2310      	movs	r3, #16
 801181e:	4019      	ands	r1, r3
 8011820:	421c      	tst	r4, r3
 8011822:	d003      	beq.n	801182c <_vfiprintf_r+0x688>
 8011824:	9200      	str	r2, [sp, #0]
 8011826:	9001      	str	r0, [sp, #4]
 8011828:	3b0f      	subs	r3, #15
 801182a:	e6bb      	b.n	80115a4 <_vfiprintf_r+0x400>
 801182c:	2340      	movs	r3, #64	; 0x40
 801182e:	0020      	movs	r0, r4
 8011830:	4018      	ands	r0, r3
 8011832:	421c      	tst	r4, r3
 8011834:	d003      	beq.n	801183e <_vfiprintf_r+0x69a>
 8011836:	b293      	uxth	r3, r2
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	9101      	str	r1, [sp, #4]
 801183c:	e7e8      	b.n	8011810 <_vfiprintf_r+0x66c>
 801183e:	2380      	movs	r3, #128	; 0x80
 8011840:	0021      	movs	r1, r4
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4019      	ands	r1, r3
 8011846:	421c      	tst	r4, r3
 8011848:	d003      	beq.n	8011852 <_vfiprintf_r+0x6ae>
 801184a:	b2d3      	uxtb	r3, r2
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	9001      	str	r0, [sp, #4]
 8011850:	e7de      	b.n	8011810 <_vfiprintf_r+0x66c>
 8011852:	9200      	str	r2, [sp, #0]
 8011854:	e7f1      	b.n	801183a <_vfiprintf_r+0x696>
 8011856:	4a23      	ldr	r2, [pc, #140]	; (80118e4 <_vfiprintf_r+0x740>)
 8011858:	0020      	movs	r0, r4
 801185a:	920c      	str	r2, [sp, #48]	; 0x30
 801185c:	2220      	movs	r2, #32
 801185e:	4010      	ands	r0, r2
 8011860:	4214      	tst	r4, r2
 8011862:	d019      	beq.n	8011898 <_vfiprintf_r+0x6f4>
 8011864:	3a19      	subs	r2, #25
 8011866:	3707      	adds	r7, #7
 8011868:	4397      	bics	r7, r2
 801186a:	0038      	movs	r0, r7
 801186c:	c806      	ldmia	r0!, {r1, r2}
 801186e:	9100      	str	r1, [sp, #0]
 8011870:	9201      	str	r2, [sp, #4]
 8011872:	9004      	str	r0, [sp, #16]
 8011874:	07e2      	lsls	r2, r4, #31
 8011876:	d509      	bpl.n	801188c <_vfiprintf_r+0x6e8>
 8011878:	9a00      	ldr	r2, [sp, #0]
 801187a:	9901      	ldr	r1, [sp, #4]
 801187c:	430a      	orrs	r2, r1
 801187e:	d005      	beq.n	801188c <_vfiprintf_r+0x6e8>
 8011880:	aa13      	add	r2, sp, #76	; 0x4c
 8011882:	2130      	movs	r1, #48	; 0x30
 8011884:	7053      	strb	r3, [r2, #1]
 8011886:	2302      	movs	r3, #2
 8011888:	7011      	strb	r1, [r2, #0]
 801188a:	431c      	orrs	r4, r3
 801188c:	4b10      	ldr	r3, [pc, #64]	; (80118d0 <_vfiprintf_r+0x72c>)
 801188e:	401c      	ands	r4, r3
 8011890:	2302      	movs	r3, #2
 8011892:	e687      	b.n	80115a4 <_vfiprintf_r+0x400>
 8011894:	4a10      	ldr	r2, [pc, #64]	; (80118d8 <_vfiprintf_r+0x734>)
 8011896:	e7df      	b.n	8011858 <_vfiprintf_r+0x6b4>
 8011898:	0039      	movs	r1, r7
 801189a:	c904      	ldmia	r1!, {r2}
 801189c:	0026      	movs	r6, r4
 801189e:	9104      	str	r1, [sp, #16]
 80118a0:	2110      	movs	r1, #16
 80118a2:	400e      	ands	r6, r1
 80118a4:	420c      	tst	r4, r1
 80118a6:	d002      	beq.n	80118ae <_vfiprintf_r+0x70a>
 80118a8:	9200      	str	r2, [sp, #0]
 80118aa:	9001      	str	r0, [sp, #4]
 80118ac:	e7e2      	b.n	8011874 <_vfiprintf_r+0x6d0>
 80118ae:	2140      	movs	r1, #64	; 0x40
 80118b0:	0020      	movs	r0, r4
 80118b2:	4008      	ands	r0, r1
 80118b4:	420c      	tst	r4, r1
 80118b6:	d003      	beq.n	80118c0 <_vfiprintf_r+0x71c>
 80118b8:	b292      	uxth	r2, r2
 80118ba:	9200      	str	r2, [sp, #0]
 80118bc:	9601      	str	r6, [sp, #4]
 80118be:	e7d9      	b.n	8011874 <_vfiprintf_r+0x6d0>
 80118c0:	2180      	movs	r1, #128	; 0x80
 80118c2:	0026      	movs	r6, r4
 80118c4:	0089      	lsls	r1, r1, #2
 80118c6:	400e      	ands	r6, r1
 80118c8:	420c      	tst	r4, r1
 80118ca:	d0f6      	beq.n	80118ba <_vfiprintf_r+0x716>
 80118cc:	b2d2      	uxtb	r2, r2
 80118ce:	e7eb      	b.n	80118a8 <_vfiprintf_r+0x704>
 80118d0:	fffffbff 	.word	0xfffffbff
 80118d4:	00007830 	.word	0x00007830
 80118d8:	080142dc 	.word	0x080142dc
 80118dc:	080143e9 	.word	0x080143e9
 80118e0:	080143f9 	.word	0x080143f9
 80118e4:	080142ed 	.word	0x080142ed
 80118e8:	9b01      	ldr	r3, [sp, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d109      	bne.n	8011902 <_vfiprintf_r+0x75e>
 80118ee:	9b00      	ldr	r3, [sp, #0]
 80118f0:	2b09      	cmp	r3, #9
 80118f2:	d806      	bhi.n	8011902 <_vfiprintf_r+0x75e>
 80118f4:	26b7      	movs	r6, #183	; 0xb7
 80118f6:	ab12      	add	r3, sp, #72	; 0x48
 80118f8:	18f6      	adds	r6, r6, r3
 80118fa:	9b00      	ldr	r3, [sp, #0]
 80118fc:	3330      	adds	r3, #48	; 0x30
 80118fe:	7033      	strb	r3, [r6, #0]
 8011900:	e115      	b.n	8011b2e <_vfiprintf_r+0x98a>
 8011902:	2380      	movs	r3, #128	; 0x80
 8011904:	2400      	movs	r4, #0
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	403b      	ands	r3, r7
 801190a:	ae40      	add	r6, sp, #256	; 0x100
 801190c:	930a      	str	r3, [sp, #40]	; 0x28
 801190e:	220a      	movs	r2, #10
 8011910:	9800      	ldr	r0, [sp, #0]
 8011912:	9901      	ldr	r1, [sp, #4]
 8011914:	2300      	movs	r3, #0
 8011916:	f7ee fdc5 	bl	80004a4 <__aeabi_uldivmod>
 801191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801191c:	3e01      	subs	r6, #1
 801191e:	3230      	adds	r2, #48	; 0x30
 8011920:	900b      	str	r0, [sp, #44]	; 0x2c
 8011922:	9110      	str	r1, [sp, #64]	; 0x40
 8011924:	7032      	strb	r2, [r6, #0]
 8011926:	3401      	adds	r4, #1
 8011928:	2b00      	cmp	r3, #0
 801192a:	d01a      	beq.n	8011962 <_vfiprintf_r+0x7be>
 801192c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	42a3      	cmp	r3, r4
 8011932:	d116      	bne.n	8011962 <_vfiprintf_r+0x7be>
 8011934:	2cff      	cmp	r4, #255	; 0xff
 8011936:	d014      	beq.n	8011962 <_vfiprintf_r+0x7be>
 8011938:	9b01      	ldr	r3, [sp, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d102      	bne.n	8011944 <_vfiprintf_r+0x7a0>
 801193e:	9b00      	ldr	r3, [sp, #0]
 8011940:	2b09      	cmp	r3, #9
 8011942:	d90e      	bls.n	8011962 <_vfiprintf_r+0x7be>
 8011944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011946:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011948:	1af6      	subs	r6, r6, r3
 801194a:	001a      	movs	r2, r3
 801194c:	0030      	movs	r0, r6
 801194e:	f7f9 ffe6 	bl	800b91e <strncpy>
 8011952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011954:	2400      	movs	r4, #0
 8011956:	785b      	ldrb	r3, [r3, #1]
 8011958:	1e5a      	subs	r2, r3, #1
 801195a:	4193      	sbcs	r3, r2
 801195c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801195e:	18d3      	adds	r3, r2, r3
 8011960:	930d      	str	r3, [sp, #52]	; 0x34
 8011962:	9b01      	ldr	r3, [sp, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d103      	bne.n	8011970 <_vfiprintf_r+0x7cc>
 8011968:	9b00      	ldr	r3, [sp, #0]
 801196a:	2b09      	cmp	r3, #9
 801196c:	d800      	bhi.n	8011970 <_vfiprintf_r+0x7cc>
 801196e:	e0de      	b.n	8011b2e <_vfiprintf_r+0x98a>
 8011970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	e7c9      	b.n	801190e <_vfiprintf_r+0x76a>
 801197a:	200f      	movs	r0, #15
 801197c:	9b00      	ldr	r3, [sp, #0]
 801197e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011980:	4003      	ands	r3, r0
 8011982:	5cd3      	ldrb	r3, [r2, r3]
 8011984:	3e01      	subs	r6, #1
 8011986:	7033      	strb	r3, [r6, #0]
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	0719      	lsls	r1, r3, #28
 801198c:	9b00      	ldr	r3, [sp, #0]
 801198e:	091a      	lsrs	r2, r3, #4
 8011990:	9b01      	ldr	r3, [sp, #4]
 8011992:	4311      	orrs	r1, r2
 8011994:	091b      	lsrs	r3, r3, #4
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	000b      	movs	r3, r1
 801199a:	9a01      	ldr	r2, [sp, #4]
 801199c:	9100      	str	r1, [sp, #0]
 801199e:	4313      	orrs	r3, r2
 80119a0:	d1ec      	bne.n	801197c <_vfiprintf_r+0x7d8>
 80119a2:	e0c4      	b.n	8011b2e <_vfiprintf_r+0x98a>
 80119a4:	ae40      	add	r6, sp, #256	; 0x100
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d000      	beq.n	80119ac <_vfiprintf_r+0x808>
 80119aa:	e0c0      	b.n	8011b2e <_vfiprintf_r+0x98a>
 80119ac:	07e4      	lsls	r4, r4, #31
 80119ae:	d400      	bmi.n	80119b2 <_vfiprintf_r+0x80e>
 80119b0:	e0bd      	b.n	8011b2e <_vfiprintf_r+0x98a>
 80119b2:	26b7      	movs	r6, #183	; 0xb7
 80119b4:	ab12      	add	r3, sp, #72	; 0x48
 80119b6:	18f6      	adds	r6, r6, r3
 80119b8:	2330      	movs	r3, #48	; 0x30
 80119ba:	e7a0      	b.n	80118fe <_vfiprintf_r+0x75a>
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d100      	bne.n	80119c2 <_vfiprintf_r+0x81e>
 80119c0:	e07e      	b.n	8011ac0 <_vfiprintf_r+0x91c>
 80119c2:	ae27      	add	r6, sp, #156	; 0x9c
 80119c4:	7033      	strb	r3, [r6, #0]
 80119c6:	2300      	movs	r3, #0
 80119c8:	aa12      	add	r2, sp, #72	; 0x48
 80119ca:	70d3      	strb	r3, [r2, #3]
 80119cc:	9704      	str	r7, [sp, #16]
 80119ce:	e576      	b.n	80114be <_vfiprintf_r+0x31a>
 80119d0:	2010      	movs	r0, #16
 80119d2:	1812      	adds	r2, r2, r0
 80119d4:	6068      	str	r0, [r5, #4]
 80119d6:	9216      	str	r2, [sp, #88]	; 0x58
 80119d8:	9315      	str	r3, [sp, #84]	; 0x54
 80119da:	2b07      	cmp	r3, #7
 80119dc:	dd07      	ble.n	80119ee <_vfiprintf_r+0x84a>
 80119de:	9903      	ldr	r1, [sp, #12]
 80119e0:	9806      	ldr	r0, [sp, #24]
 80119e2:	aa14      	add	r2, sp, #80	; 0x50
 80119e4:	f7ff fba9 	bl	801113a <__sprint_r>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d144      	bne.n	8011a76 <_vfiprintf_r+0x8d2>
 80119ec:	a917      	add	r1, sp, #92	; 0x5c
 80119ee:	000d      	movs	r5, r1
 80119f0:	3f10      	subs	r7, #16
 80119f2:	e63b      	b.n	801166c <_vfiprintf_r+0x4c8>
 80119f4:	2010      	movs	r0, #16
 80119f6:	1812      	adds	r2, r2, r0
 80119f8:	6068      	str	r0, [r5, #4]
 80119fa:	9216      	str	r2, [sp, #88]	; 0x58
 80119fc:	9315      	str	r3, [sp, #84]	; 0x54
 80119fe:	2b07      	cmp	r3, #7
 8011a00:	dd07      	ble.n	8011a12 <_vfiprintf_r+0x86e>
 8011a02:	9903      	ldr	r1, [sp, #12]
 8011a04:	9806      	ldr	r0, [sp, #24]
 8011a06:	aa14      	add	r2, sp, #80	; 0x50
 8011a08:	f7ff fb97 	bl	801113a <__sprint_r>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d132      	bne.n	8011a76 <_vfiprintf_r+0x8d2>
 8011a10:	a917      	add	r1, sp, #92	; 0x5c
 8011a12:	000d      	movs	r5, r1
 8011a14:	3f10      	subs	r7, #16
 8011a16:	e67e      	b.n	8011716 <_vfiprintf_r+0x572>
 8011a18:	2010      	movs	r0, #16
 8011a1a:	1812      	adds	r2, r2, r0
 8011a1c:	6068      	str	r0, [r5, #4]
 8011a1e:	9216      	str	r2, [sp, #88]	; 0x58
 8011a20:	9315      	str	r3, [sp, #84]	; 0x54
 8011a22:	2b07      	cmp	r3, #7
 8011a24:	dd07      	ble.n	8011a36 <_vfiprintf_r+0x892>
 8011a26:	9903      	ldr	r1, [sp, #12]
 8011a28:	9806      	ldr	r0, [sp, #24]
 8011a2a:	aa14      	add	r2, sp, #80	; 0x50
 8011a2c:	f7ff fb85 	bl	801113a <__sprint_r>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d120      	bne.n	8011a76 <_vfiprintf_r+0x8d2>
 8011a34:	a917      	add	r1, sp, #92	; 0x5c
 8011a36:	000d      	movs	r5, r1
 8011a38:	3f10      	subs	r7, #16
 8011a3a:	e68b      	b.n	8011754 <_vfiprintf_r+0x5b0>
 8011a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a40:	2610      	movs	r6, #16
 8011a42:	1a9c      	subs	r4, r3, r2
 8011a44:	2c00      	cmp	r4, #0
 8011a46:	dc00      	bgt.n	8011a4a <_vfiprintf_r+0x8a6>
 8011a48:	e6b7      	b.n	80117ba <_vfiprintf_r+0x616>
 8011a4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011a4c:	4a3b      	ldr	r2, [pc, #236]	; (8011b3c <_vfiprintf_r+0x998>)
 8011a4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a50:	3101      	adds	r1, #1
 8011a52:	602a      	str	r2, [r5, #0]
 8011a54:	2c10      	cmp	r4, #16
 8011a56:	dc22      	bgt.n	8011a9e <_vfiprintf_r+0x8fa>
 8011a58:	606c      	str	r4, [r5, #4]
 8011a5a:	18e4      	adds	r4, r4, r3
 8011a5c:	9416      	str	r4, [sp, #88]	; 0x58
 8011a5e:	9115      	str	r1, [sp, #84]	; 0x54
 8011a60:	2907      	cmp	r1, #7
 8011a62:	dc00      	bgt.n	8011a66 <_vfiprintf_r+0x8c2>
 8011a64:	e6a9      	b.n	80117ba <_vfiprintf_r+0x616>
 8011a66:	9903      	ldr	r1, [sp, #12]
 8011a68:	9806      	ldr	r0, [sp, #24]
 8011a6a:	aa14      	add	r2, sp, #80	; 0x50
 8011a6c:	f7ff fb65 	bl	801113a <__sprint_r>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d100      	bne.n	8011a76 <_vfiprintf_r+0x8d2>
 8011a74:	e6a1      	b.n	80117ba <_vfiprintf_r+0x616>
 8011a76:	9b03      	ldr	r3, [sp, #12]
 8011a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a7a:	07db      	lsls	r3, r3, #31
 8011a7c:	d407      	bmi.n	8011a8e <_vfiprintf_r+0x8ea>
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	899b      	ldrh	r3, [r3, #12]
 8011a82:	059b      	lsls	r3, r3, #22
 8011a84:	d403      	bmi.n	8011a8e <_vfiprintf_r+0x8ea>
 8011a86:	9b03      	ldr	r3, [sp, #12]
 8011a88:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011a8a:	f7fa f808 	bl	800ba9e <__retarget_lock_release_recursive>
 8011a8e:	9b03      	ldr	r3, [sp, #12]
 8011a90:	899b      	ldrh	r3, [r3, #12]
 8011a92:	065b      	lsls	r3, r3, #25
 8011a94:	d401      	bmi.n	8011a9a <_vfiprintf_r+0x8f6>
 8011a96:	f7ff fbc3 	bl	8011220 <_vfiprintf_r+0x7c>
 8011a9a:	f7ff fbbe 	bl	801121a <_vfiprintf_r+0x76>
 8011a9e:	3310      	adds	r3, #16
 8011aa0:	606e      	str	r6, [r5, #4]
 8011aa2:	9316      	str	r3, [sp, #88]	; 0x58
 8011aa4:	9115      	str	r1, [sp, #84]	; 0x54
 8011aa6:	3508      	adds	r5, #8
 8011aa8:	2907      	cmp	r1, #7
 8011aaa:	dd07      	ble.n	8011abc <_vfiprintf_r+0x918>
 8011aac:	9903      	ldr	r1, [sp, #12]
 8011aae:	9806      	ldr	r0, [sp, #24]
 8011ab0:	aa14      	add	r2, sp, #80	; 0x50
 8011ab2:	f7ff fb42 	bl	801113a <__sprint_r>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d1dd      	bne.n	8011a76 <_vfiprintf_r+0x8d2>
 8011aba:	ad17      	add	r5, sp, #92	; 0x5c
 8011abc:	3c10      	subs	r4, #16
 8011abe:	e7c4      	b.n	8011a4a <_vfiprintf_r+0x8a6>
 8011ac0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <_vfiprintf_r+0x928>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	9315      	str	r3, [sp, #84]	; 0x54
 8011aca:	e7d4      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 8011acc:	9903      	ldr	r1, [sp, #12]
 8011ace:	9806      	ldr	r0, [sp, #24]
 8011ad0:	aa14      	add	r2, sp, #80	; 0x50
 8011ad2:	f7ff fb32 	bl	801113a <__sprint_r>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d0f5      	beq.n	8011ac6 <_vfiprintf_r+0x922>
 8011ada:	e7cc      	b.n	8011a76 <_vfiprintf_r+0x8d2>
 8011adc:	0027      	movs	r7, r4
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	d100      	bne.n	8011ae4 <_vfiprintf_r+0x940>
 8011ae2:	e51b      	b.n	801151c <_vfiprintf_r+0x378>
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d100      	bne.n	8011aea <_vfiprintf_r+0x946>
 8011ae8:	e6fe      	b.n	80118e8 <_vfiprintf_r+0x744>
 8011aea:	ae40      	add	r6, sp, #256	; 0x100
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d100      	bne.n	8011af2 <_vfiprintf_r+0x94e>
 8011af0:	e743      	b.n	801197a <_vfiprintf_r+0x7d6>
 8011af2:	2307      	movs	r3, #7
 8011af4:	469c      	mov	ip, r3
 8011af6:	4663      	mov	r3, ip
 8011af8:	9900      	ldr	r1, [sp, #0]
 8011afa:	0032      	movs	r2, r6
 8011afc:	400b      	ands	r3, r1
 8011afe:	9901      	ldr	r1, [sp, #4]
 8011b00:	3e01      	subs	r6, #1
 8011b02:	074c      	lsls	r4, r1, #29
 8011b04:	9900      	ldr	r1, [sp, #0]
 8011b06:	3330      	adds	r3, #48	; 0x30
 8011b08:	08c8      	lsrs	r0, r1, #3
 8011b0a:	9901      	ldr	r1, [sp, #4]
 8011b0c:	4304      	orrs	r4, r0
 8011b0e:	08c9      	lsrs	r1, r1, #3
 8011b10:	9101      	str	r1, [sp, #4]
 8011b12:	0021      	movs	r1, r4
 8011b14:	9801      	ldr	r0, [sp, #4]
 8011b16:	7033      	strb	r3, [r6, #0]
 8011b18:	9400      	str	r4, [sp, #0]
 8011b1a:	4301      	orrs	r1, r0
 8011b1c:	d1eb      	bne.n	8011af6 <_vfiprintf_r+0x952>
 8011b1e:	07f9      	lsls	r1, r7, #31
 8011b20:	d505      	bpl.n	8011b2e <_vfiprintf_r+0x98a>
 8011b22:	2b30      	cmp	r3, #48	; 0x30
 8011b24:	d003      	beq.n	8011b2e <_vfiprintf_r+0x98a>
 8011b26:	2330      	movs	r3, #48	; 0x30
 8011b28:	3e01      	subs	r6, #1
 8011b2a:	7033      	strb	r3, [r6, #0]
 8011b2c:	1e96      	subs	r6, r2, #2
 8011b2e:	9b05      	ldr	r3, [sp, #20]
 8011b30:	003c      	movs	r4, r7
 8011b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b34:	ab40      	add	r3, sp, #256	; 0x100
 8011b36:	1b9b      	subs	r3, r3, r6
 8011b38:	9305      	str	r3, [sp, #20]
 8011b3a:	e575      	b.n	8011628 <_vfiprintf_r+0x484>
 8011b3c:	080143e9 	.word	0x080143e9

08011b40 <__sbprintf>:
 8011b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b42:	0015      	movs	r5, r2
 8011b44:	2202      	movs	r2, #2
 8011b46:	4c1e      	ldr	r4, [pc, #120]	; (8011bc0 <__sbprintf+0x80>)
 8011b48:	001f      	movs	r7, r3
 8011b4a:	898b      	ldrh	r3, [r1, #12]
 8011b4c:	44a5      	add	sp, r4
 8011b4e:	4393      	bics	r3, r2
 8011b50:	466a      	mov	r2, sp
 8011b52:	8193      	strh	r3, [r2, #12]
 8011b54:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011b56:	0006      	movs	r6, r0
 8011b58:	9319      	str	r3, [sp, #100]	; 0x64
 8011b5a:	89cb      	ldrh	r3, [r1, #14]
 8011b5c:	a816      	add	r0, sp, #88	; 0x58
 8011b5e:	81d3      	strh	r3, [r2, #14]
 8011b60:	69cb      	ldr	r3, [r1, #28]
 8011b62:	000c      	movs	r4, r1
 8011b64:	9307      	str	r3, [sp, #28]
 8011b66:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011b68:	9309      	str	r3, [sp, #36]	; 0x24
 8011b6a:	ab1a      	add	r3, sp, #104	; 0x68
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	9304      	str	r3, [sp, #16]
 8011b70:	2380      	movs	r3, #128	; 0x80
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	9302      	str	r3, [sp, #8]
 8011b76:	9305      	str	r3, [sp, #20]
 8011b78:	2300      	movs	r3, #0
 8011b7a:	9306      	str	r3, [sp, #24]
 8011b7c:	f7f9 ff8c 	bl	800ba98 <__retarget_lock_init_recursive>
 8011b80:	002a      	movs	r2, r5
 8011b82:	003b      	movs	r3, r7
 8011b84:	4669      	mov	r1, sp
 8011b86:	0030      	movs	r0, r6
 8011b88:	f7ff fb0c 	bl	80111a4 <_vfiprintf_r>
 8011b8c:	1e05      	subs	r5, r0, #0
 8011b8e:	db07      	blt.n	8011ba0 <__sbprintf+0x60>
 8011b90:	4669      	mov	r1, sp
 8011b92:	0030      	movs	r0, r6
 8011b94:	f7fd fdf6 	bl	800f784 <_fflush_r>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d001      	beq.n	8011ba0 <__sbprintf+0x60>
 8011b9c:	2501      	movs	r5, #1
 8011b9e:	426d      	negs	r5, r5
 8011ba0:	466b      	mov	r3, sp
 8011ba2:	899a      	ldrh	r2, [r3, #12]
 8011ba4:	2340      	movs	r3, #64	; 0x40
 8011ba6:	421a      	tst	r2, r3
 8011ba8:	d002      	beq.n	8011bb0 <__sbprintf+0x70>
 8011baa:	89a2      	ldrh	r2, [r4, #12]
 8011bac:	4313      	orrs	r3, r2
 8011bae:	81a3      	strh	r3, [r4, #12]
 8011bb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011bb2:	f7f9 ff72 	bl	800ba9a <__retarget_lock_close_recursive>
 8011bb6:	0028      	movs	r0, r5
 8011bb8:	4b02      	ldr	r3, [pc, #8]	; (8011bc4 <__sbprintf+0x84>)
 8011bba:	449d      	add	sp, r3
 8011bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbe:	46c0      	nop			; (mov r8, r8)
 8011bc0:	fffffb94 	.word	0xfffffb94
 8011bc4:	0000046c 	.word	0x0000046c

08011bc8 <__sfvwrite_r>:
 8011bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bca:	6893      	ldr	r3, [r2, #8]
 8011bcc:	b087      	sub	sp, #28
 8011bce:	000c      	movs	r4, r1
 8011bd0:	9002      	str	r0, [sp, #8]
 8011bd2:	9204      	str	r2, [sp, #16]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d102      	bne.n	8011bde <__sfvwrite_r+0x16>
 8011bd8:	2000      	movs	r0, #0
 8011bda:	b007      	add	sp, #28
 8011bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bde:	898b      	ldrh	r3, [r1, #12]
 8011be0:	071b      	lsls	r3, r3, #28
 8011be2:	d557      	bpl.n	8011c94 <__sfvwrite_r+0xcc>
 8011be4:	690b      	ldr	r3, [r1, #16]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d054      	beq.n	8011c94 <__sfvwrite_r+0xcc>
 8011bea:	9b04      	ldr	r3, [sp, #16]
 8011bec:	2202      	movs	r2, #2
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	9301      	str	r3, [sp, #4]
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	001f      	movs	r7, r3
 8011bf6:	4017      	ands	r7, r2
 8011bf8:	4213      	tst	r3, r2
 8011bfa:	d171      	bne.n	8011ce0 <__sfvwrite_r+0x118>
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	2101      	movs	r1, #1
 8011c00:	401a      	ands	r2, r3
 8011c02:	420b      	tst	r3, r1
 8011c04:	d100      	bne.n	8011c08 <__sfvwrite_r+0x40>
 8011c06:	e0a5      	b.n	8011d54 <__sfvwrite_r+0x18c>
 8011c08:	0038      	movs	r0, r7
 8011c0a:	003e      	movs	r6, r7
 8011c0c:	9703      	str	r7, [sp, #12]
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d100      	bne.n	8011c16 <__sfvwrite_r+0x4e>
 8011c14:	e10b      	b.n	8011e2e <__sfvwrite_r+0x266>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d10a      	bne.n	8011c30 <__sfvwrite_r+0x68>
 8011c1a:	001a      	movs	r2, r3
 8011c1c:	210a      	movs	r1, #10
 8011c1e:	0030      	movs	r0, r6
 8011c20:	f7fd fe2a 	bl	800f878 <memchr>
 8011c24:	9b03      	ldr	r3, [sp, #12]
 8011c26:	1c5f      	adds	r7, r3, #1
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d001      	beq.n	8011c30 <__sfvwrite_r+0x68>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	1b87      	subs	r7, r0, r6
 8011c30:	9b03      	ldr	r3, [sp, #12]
 8011c32:	9705      	str	r7, [sp, #20]
 8011c34:	429f      	cmp	r7, r3
 8011c36:	d900      	bls.n	8011c3a <__sfvwrite_r+0x72>
 8011c38:	9305      	str	r3, [sp, #20]
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	6922      	ldr	r2, [r4, #16]
 8011c3e:	68a5      	ldr	r5, [r4, #8]
 8011c40:	6963      	ldr	r3, [r4, #20]
 8011c42:	4290      	cmp	r0, r2
 8011c44:	d800      	bhi.n	8011c48 <__sfvwrite_r+0x80>
 8011c46:	e0fb      	b.n	8011e40 <__sfvwrite_r+0x278>
 8011c48:	9a05      	ldr	r2, [sp, #20]
 8011c4a:	18ed      	adds	r5, r5, r3
 8011c4c:	42aa      	cmp	r2, r5
 8011c4e:	dc00      	bgt.n	8011c52 <__sfvwrite_r+0x8a>
 8011c50:	e0f6      	b.n	8011e40 <__sfvwrite_r+0x278>
 8011c52:	0031      	movs	r1, r6
 8011c54:	002a      	movs	r2, r5
 8011c56:	f000 fa1e 	bl	8012096 <memmove>
 8011c5a:	6823      	ldr	r3, [r4, #0]
 8011c5c:	0021      	movs	r1, r4
 8011c5e:	195b      	adds	r3, r3, r5
 8011c60:	9802      	ldr	r0, [sp, #8]
 8011c62:	6023      	str	r3, [r4, #0]
 8011c64:	f7fd fd8e 	bl	800f784 <_fflush_r>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d16e      	bne.n	8011d4a <__sfvwrite_r+0x182>
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	1b7f      	subs	r7, r7, r5
 8011c70:	d105      	bne.n	8011c7e <__sfvwrite_r+0xb6>
 8011c72:	0021      	movs	r1, r4
 8011c74:	9802      	ldr	r0, [sp, #8]
 8011c76:	f7fd fd85 	bl	800f784 <_fflush_r>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d165      	bne.n	8011d4a <__sfvwrite_r+0x182>
 8011c7e:	9b03      	ldr	r3, [sp, #12]
 8011c80:	9a04      	ldr	r2, [sp, #16]
 8011c82:	1b5b      	subs	r3, r3, r5
 8011c84:	9303      	str	r3, [sp, #12]
 8011c86:	9b04      	ldr	r3, [sp, #16]
 8011c88:	1976      	adds	r6, r6, r5
 8011c8a:	689b      	ldr	r3, [r3, #8]
 8011c8c:	1b5b      	subs	r3, r3, r5
 8011c8e:	6093      	str	r3, [r2, #8]
 8011c90:	d1bd      	bne.n	8011c0e <__sfvwrite_r+0x46>
 8011c92:	e7a1      	b.n	8011bd8 <__sfvwrite_r+0x10>
 8011c94:	0021      	movs	r1, r4
 8011c96:	9802      	ldr	r0, [sp, #8]
 8011c98:	f000 f932 	bl	8011f00 <__swsetup_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d0a4      	beq.n	8011bea <__sfvwrite_r+0x22>
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	4240      	negs	r0, r0
 8011ca4:	e799      	b.n	8011bda <__sfvwrite_r+0x12>
 8011ca6:	9b01      	ldr	r3, [sp, #4]
 8011ca8:	681e      	ldr	r6, [r3, #0]
 8011caa:	685d      	ldr	r5, [r3, #4]
 8011cac:	3308      	adds	r3, #8
 8011cae:	9301      	str	r3, [sp, #4]
 8011cb0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011cb2:	69e1      	ldr	r1, [r4, #28]
 8011cb4:	2d00      	cmp	r5, #0
 8011cb6:	d0f6      	beq.n	8011ca6 <__sfvwrite_r+0xde>
 8011cb8:	4a6e      	ldr	r2, [pc, #440]	; (8011e74 <__sfvwrite_r+0x2ac>)
 8011cba:	002b      	movs	r3, r5
 8011cbc:	4295      	cmp	r5, r2
 8011cbe:	d900      	bls.n	8011cc2 <__sfvwrite_r+0xfa>
 8011cc0:	0013      	movs	r3, r2
 8011cc2:	0032      	movs	r2, r6
 8011cc4:	9802      	ldr	r0, [sp, #8]
 8011cc6:	47b8      	blx	r7
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	dd3e      	ble.n	8011d4a <__sfvwrite_r+0x182>
 8011ccc:	9b04      	ldr	r3, [sp, #16]
 8011cce:	9a04      	ldr	r2, [sp, #16]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	1836      	adds	r6, r6, r0
 8011cd4:	1a1b      	subs	r3, r3, r0
 8011cd6:	1a2d      	subs	r5, r5, r0
 8011cd8:	6093      	str	r3, [r2, #8]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1e8      	bne.n	8011cb0 <__sfvwrite_r+0xe8>
 8011cde:	e77b      	b.n	8011bd8 <__sfvwrite_r+0x10>
 8011ce0:	2600      	movs	r6, #0
 8011ce2:	0035      	movs	r5, r6
 8011ce4:	e7e4      	b.n	8011cb0 <__sfvwrite_r+0xe8>
 8011ce6:	9b01      	ldr	r3, [sp, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	9303      	str	r3, [sp, #12]
 8011cec:	9b01      	ldr	r3, [sp, #4]
 8011cee:	685d      	ldr	r5, [r3, #4]
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	9301      	str	r3, [sp, #4]
 8011cf4:	220c      	movs	r2, #12
 8011cf6:	5ea3      	ldrsh	r3, [r4, r2]
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	68a6      	ldr	r6, [r4, #8]
 8011cfc:	2d00      	cmp	r5, #0
 8011cfe:	d0f2      	beq.n	8011ce6 <__sfvwrite_r+0x11e>
 8011d00:	2180      	movs	r1, #128	; 0x80
 8011d02:	0089      	lsls	r1, r1, #2
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	420b      	tst	r3, r1
 8011d08:	d062      	beq.n	8011dd0 <__sfvwrite_r+0x208>
 8011d0a:	42ae      	cmp	r6, r5
 8011d0c:	d837      	bhi.n	8011d7e <__sfvwrite_r+0x1b6>
 8011d0e:	2390      	movs	r3, #144	; 0x90
 8011d10:	00db      	lsls	r3, r3, #3
 8011d12:	421a      	tst	r2, r3
 8011d14:	d033      	beq.n	8011d7e <__sfvwrite_r+0x1b6>
 8011d16:	6921      	ldr	r1, [r4, #16]
 8011d18:	1a43      	subs	r3, r0, r1
 8011d1a:	2003      	movs	r0, #3
 8011d1c:	9305      	str	r3, [sp, #20]
 8011d1e:	6963      	ldr	r3, [r4, #20]
 8011d20:	4343      	muls	r3, r0
 8011d22:	0fdf      	lsrs	r7, r3, #31
 8011d24:	18ff      	adds	r7, r7, r3
 8011d26:	9b05      	ldr	r3, [sp, #20]
 8011d28:	107f      	asrs	r7, r7, #1
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	195b      	adds	r3, r3, r5
 8011d2e:	42bb      	cmp	r3, r7
 8011d30:	d900      	bls.n	8011d34 <__sfvwrite_r+0x16c>
 8011d32:	001f      	movs	r7, r3
 8011d34:	0552      	lsls	r2, r2, #21
 8011d36:	d53c      	bpl.n	8011db2 <__sfvwrite_r+0x1ea>
 8011d38:	0039      	movs	r1, r7
 8011d3a:	9802      	ldr	r0, [sp, #8]
 8011d3c:	f7f8 fb56 	bl	800a3ec <_malloc_r>
 8011d40:	1e06      	subs	r6, r0, #0
 8011d42:	d10a      	bne.n	8011d5a <__sfvwrite_r+0x192>
 8011d44:	230c      	movs	r3, #12
 8011d46:	9a02      	ldr	r2, [sp, #8]
 8011d48:	6013      	str	r3, [r2, #0]
 8011d4a:	2340      	movs	r3, #64	; 0x40
 8011d4c:	89a2      	ldrh	r2, [r4, #12]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	81a3      	strh	r3, [r4, #12]
 8011d52:	e7a5      	b.n	8011ca0 <__sfvwrite_r+0xd8>
 8011d54:	0015      	movs	r5, r2
 8011d56:	9203      	str	r2, [sp, #12]
 8011d58:	e7cc      	b.n	8011cf4 <__sfvwrite_r+0x12c>
 8011d5a:	9a05      	ldr	r2, [sp, #20]
 8011d5c:	6921      	ldr	r1, [r4, #16]
 8011d5e:	f7f9 feaa 	bl	800bab6 <memcpy>
 8011d62:	89a2      	ldrh	r2, [r4, #12]
 8011d64:	4b44      	ldr	r3, [pc, #272]	; (8011e78 <__sfvwrite_r+0x2b0>)
 8011d66:	401a      	ands	r2, r3
 8011d68:	2380      	movs	r3, #128	; 0x80
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	81a3      	strh	r3, [r4, #12]
 8011d6e:	9b05      	ldr	r3, [sp, #20]
 8011d70:	6126      	str	r6, [r4, #16]
 8011d72:	18f6      	adds	r6, r6, r3
 8011d74:	6026      	str	r6, [r4, #0]
 8011d76:	002e      	movs	r6, r5
 8011d78:	6167      	str	r7, [r4, #20]
 8011d7a:	1aff      	subs	r7, r7, r3
 8011d7c:	60a7      	str	r7, [r4, #8]
 8011d7e:	002f      	movs	r7, r5
 8011d80:	42ae      	cmp	r6, r5
 8011d82:	d900      	bls.n	8011d86 <__sfvwrite_r+0x1be>
 8011d84:	002e      	movs	r6, r5
 8011d86:	0032      	movs	r2, r6
 8011d88:	9903      	ldr	r1, [sp, #12]
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	f000 f983 	bl	8012096 <memmove>
 8011d90:	68a3      	ldr	r3, [r4, #8]
 8011d92:	1b9b      	subs	r3, r3, r6
 8011d94:	60a3      	str	r3, [r4, #8]
 8011d96:	6823      	ldr	r3, [r4, #0]
 8011d98:	199b      	adds	r3, r3, r6
 8011d9a:	6023      	str	r3, [r4, #0]
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	9a04      	ldr	r2, [sp, #16]
 8011da0:	19db      	adds	r3, r3, r7
 8011da2:	9303      	str	r3, [sp, #12]
 8011da4:	9b04      	ldr	r3, [sp, #16]
 8011da6:	1bed      	subs	r5, r5, r7
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	1bdb      	subs	r3, r3, r7
 8011dac:	6093      	str	r3, [r2, #8]
 8011dae:	d1a1      	bne.n	8011cf4 <__sfvwrite_r+0x12c>
 8011db0:	e712      	b.n	8011bd8 <__sfvwrite_r+0x10>
 8011db2:	003a      	movs	r2, r7
 8011db4:	9802      	ldr	r0, [sp, #8]
 8011db6:	f7fe fcd7 	bl	8010768 <_realloc_r>
 8011dba:	1e06      	subs	r6, r0, #0
 8011dbc:	d1d7      	bne.n	8011d6e <__sfvwrite_r+0x1a6>
 8011dbe:	6921      	ldr	r1, [r4, #16]
 8011dc0:	9802      	ldr	r0, [sp, #8]
 8011dc2:	f7f9 fef3 	bl	800bbac <_free_r>
 8011dc6:	2280      	movs	r2, #128	; 0x80
 8011dc8:	89a3      	ldrh	r3, [r4, #12]
 8011dca:	4393      	bics	r3, r2
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	e7b9      	b.n	8011d44 <__sfvwrite_r+0x17c>
 8011dd0:	6923      	ldr	r3, [r4, #16]
 8011dd2:	4283      	cmp	r3, r0
 8011dd4:	d302      	bcc.n	8011ddc <__sfvwrite_r+0x214>
 8011dd6:	6967      	ldr	r7, [r4, #20]
 8011dd8:	42af      	cmp	r7, r5
 8011dda:	d916      	bls.n	8011e0a <__sfvwrite_r+0x242>
 8011ddc:	42ae      	cmp	r6, r5
 8011dde:	d900      	bls.n	8011de2 <__sfvwrite_r+0x21a>
 8011de0:	002e      	movs	r6, r5
 8011de2:	0032      	movs	r2, r6
 8011de4:	9903      	ldr	r1, [sp, #12]
 8011de6:	f000 f956 	bl	8012096 <memmove>
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	6822      	ldr	r2, [r4, #0]
 8011dee:	1b9b      	subs	r3, r3, r6
 8011df0:	1992      	adds	r2, r2, r6
 8011df2:	0037      	movs	r7, r6
 8011df4:	60a3      	str	r3, [r4, #8]
 8011df6:	6022      	str	r2, [r4, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d1cf      	bne.n	8011d9c <__sfvwrite_r+0x1d4>
 8011dfc:	0021      	movs	r1, r4
 8011dfe:	9802      	ldr	r0, [sp, #8]
 8011e00:	f7fd fcc0 	bl	800f784 <_fflush_r>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d0c9      	beq.n	8011d9c <__sfvwrite_r+0x1d4>
 8011e08:	e79f      	b.n	8011d4a <__sfvwrite_r+0x182>
 8011e0a:	4b1c      	ldr	r3, [pc, #112]	; (8011e7c <__sfvwrite_r+0x2b4>)
 8011e0c:	0028      	movs	r0, r5
 8011e0e:	429d      	cmp	r5, r3
 8011e10:	d900      	bls.n	8011e14 <__sfvwrite_r+0x24c>
 8011e12:	481b      	ldr	r0, [pc, #108]	; (8011e80 <__sfvwrite_r+0x2b8>)
 8011e14:	0039      	movs	r1, r7
 8011e16:	f7ee fa1b 	bl	8000250 <__divsi3>
 8011e1a:	003b      	movs	r3, r7
 8011e1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011e1e:	4343      	muls	r3, r0
 8011e20:	9a03      	ldr	r2, [sp, #12]
 8011e22:	69e1      	ldr	r1, [r4, #28]
 8011e24:	9802      	ldr	r0, [sp, #8]
 8011e26:	47b0      	blx	r6
 8011e28:	1e07      	subs	r7, r0, #0
 8011e2a:	dcb7      	bgt.n	8011d9c <__sfvwrite_r+0x1d4>
 8011e2c:	e78d      	b.n	8011d4a <__sfvwrite_r+0x182>
 8011e2e:	9b01      	ldr	r3, [sp, #4]
 8011e30:	2000      	movs	r0, #0
 8011e32:	681e      	ldr	r6, [r3, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	9303      	str	r3, [sp, #12]
 8011e38:	9b01      	ldr	r3, [sp, #4]
 8011e3a:	3308      	adds	r3, #8
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	e6e6      	b.n	8011c0e <__sfvwrite_r+0x46>
 8011e40:	9a05      	ldr	r2, [sp, #20]
 8011e42:	4293      	cmp	r3, r2
 8011e44:	dc08      	bgt.n	8011e58 <__sfvwrite_r+0x290>
 8011e46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011e48:	0032      	movs	r2, r6
 8011e4a:	69e1      	ldr	r1, [r4, #28]
 8011e4c:	9802      	ldr	r0, [sp, #8]
 8011e4e:	47a8      	blx	r5
 8011e50:	1e05      	subs	r5, r0, #0
 8011e52:	dd00      	ble.n	8011e56 <__sfvwrite_r+0x28e>
 8011e54:	e70a      	b.n	8011c6c <__sfvwrite_r+0xa4>
 8011e56:	e778      	b.n	8011d4a <__sfvwrite_r+0x182>
 8011e58:	9a05      	ldr	r2, [sp, #20]
 8011e5a:	0031      	movs	r1, r6
 8011e5c:	f000 f91b 	bl	8012096 <memmove>
 8011e60:	9a05      	ldr	r2, [sp, #20]
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	0015      	movs	r5, r2
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	60a3      	str	r3, [r4, #8]
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	189b      	adds	r3, r3, r2
 8011e6e:	6023      	str	r3, [r4, #0]
 8011e70:	e6fc      	b.n	8011c6c <__sfvwrite_r+0xa4>
 8011e72:	46c0      	nop			; (mov r8, r8)
 8011e74:	7ffffc00 	.word	0x7ffffc00
 8011e78:	fffffb7f 	.word	0xfffffb7f
 8011e7c:	7ffffffe 	.word	0x7ffffffe
 8011e80:	7fffffff 	.word	0x7fffffff

08011e84 <__submore>:
 8011e84:	000b      	movs	r3, r1
 8011e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e88:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8011e8a:	3340      	adds	r3, #64	; 0x40
 8011e8c:	000c      	movs	r4, r1
 8011e8e:	429d      	cmp	r5, r3
 8011e90:	d11c      	bne.n	8011ecc <__submore+0x48>
 8011e92:	2680      	movs	r6, #128	; 0x80
 8011e94:	00f6      	lsls	r6, r6, #3
 8011e96:	0031      	movs	r1, r6
 8011e98:	f7f8 faa8 	bl	800a3ec <_malloc_r>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d102      	bne.n	8011ea6 <__submore+0x22>
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	4240      	negs	r0, r0
 8011ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ea6:	0023      	movs	r3, r4
 8011ea8:	6320      	str	r0, [r4, #48]	; 0x30
 8011eaa:	6366      	str	r6, [r4, #52]	; 0x34
 8011eac:	3342      	adds	r3, #66	; 0x42
 8011eae:	781a      	ldrb	r2, [r3, #0]
 8011eb0:	4b10      	ldr	r3, [pc, #64]	; (8011ef4 <__submore+0x70>)
 8011eb2:	54c2      	strb	r2, [r0, r3]
 8011eb4:	0023      	movs	r3, r4
 8011eb6:	3341      	adds	r3, #65	; 0x41
 8011eb8:	781a      	ldrb	r2, [r3, #0]
 8011eba:	4b0f      	ldr	r3, [pc, #60]	; (8011ef8 <__submore+0x74>)
 8011ebc:	54c2      	strb	r2, [r0, r3]
 8011ebe:	782a      	ldrb	r2, [r5, #0]
 8011ec0:	4b0e      	ldr	r3, [pc, #56]	; (8011efc <__submore+0x78>)
 8011ec2:	54c2      	strb	r2, [r0, r3]
 8011ec4:	18c0      	adds	r0, r0, r3
 8011ec6:	6020      	str	r0, [r4, #0]
 8011ec8:	2000      	movs	r0, #0
 8011eca:	e7eb      	b.n	8011ea4 <__submore+0x20>
 8011ecc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8011ece:	0029      	movs	r1, r5
 8011ed0:	0073      	lsls	r3, r6, #1
 8011ed2:	001a      	movs	r2, r3
 8011ed4:	9301      	str	r3, [sp, #4]
 8011ed6:	f7fe fc47 	bl	8010768 <_realloc_r>
 8011eda:	1e05      	subs	r5, r0, #0
 8011edc:	d0e0      	beq.n	8011ea0 <__submore+0x1c>
 8011ede:	1987      	adds	r7, r0, r6
 8011ee0:	0001      	movs	r1, r0
 8011ee2:	0032      	movs	r2, r6
 8011ee4:	0038      	movs	r0, r7
 8011ee6:	f7f9 fde6 	bl	800bab6 <memcpy>
 8011eea:	9b01      	ldr	r3, [sp, #4]
 8011eec:	6027      	str	r7, [r4, #0]
 8011eee:	6325      	str	r5, [r4, #48]	; 0x30
 8011ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8011ef2:	e7e9      	b.n	8011ec8 <__submore+0x44>
 8011ef4:	000003ff 	.word	0x000003ff
 8011ef8:	000003fe 	.word	0x000003fe
 8011efc:	000003fd 	.word	0x000003fd

08011f00 <__swsetup_r>:
 8011f00:	4b30      	ldr	r3, [pc, #192]	; (8011fc4 <__swsetup_r+0xc4>)
 8011f02:	b570      	push	{r4, r5, r6, lr}
 8011f04:	0005      	movs	r5, r0
 8011f06:	6818      	ldr	r0, [r3, #0]
 8011f08:	000c      	movs	r4, r1
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d004      	beq.n	8011f18 <__swsetup_r+0x18>
 8011f0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d101      	bne.n	8011f18 <__swsetup_r+0x18>
 8011f14:	f7f9 fbec 	bl	800b6f0 <__sinit>
 8011f18:	230c      	movs	r3, #12
 8011f1a:	5ee2      	ldrsh	r2, [r4, r3]
 8011f1c:	b293      	uxth	r3, r2
 8011f1e:	0711      	lsls	r1, r2, #28
 8011f20:	d423      	bmi.n	8011f6a <__swsetup_r+0x6a>
 8011f22:	06d9      	lsls	r1, r3, #27
 8011f24:	d407      	bmi.n	8011f36 <__swsetup_r+0x36>
 8011f26:	2309      	movs	r3, #9
 8011f28:	2001      	movs	r0, #1
 8011f2a:	602b      	str	r3, [r5, #0]
 8011f2c:	3337      	adds	r3, #55	; 0x37
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	81a3      	strh	r3, [r4, #12]
 8011f32:	4240      	negs	r0, r0
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	075b      	lsls	r3, r3, #29
 8011f38:	d513      	bpl.n	8011f62 <__swsetup_r+0x62>
 8011f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011f3c:	2900      	cmp	r1, #0
 8011f3e:	d008      	beq.n	8011f52 <__swsetup_r+0x52>
 8011f40:	0023      	movs	r3, r4
 8011f42:	3340      	adds	r3, #64	; 0x40
 8011f44:	4299      	cmp	r1, r3
 8011f46:	d002      	beq.n	8011f4e <__swsetup_r+0x4e>
 8011f48:	0028      	movs	r0, r5
 8011f4a:	f7f9 fe2f 	bl	800bbac <_free_r>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	6323      	str	r3, [r4, #48]	; 0x30
 8011f52:	2224      	movs	r2, #36	; 0x24
 8011f54:	89a3      	ldrh	r3, [r4, #12]
 8011f56:	4393      	bics	r3, r2
 8011f58:	81a3      	strh	r3, [r4, #12]
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	6063      	str	r3, [r4, #4]
 8011f5e:	6923      	ldr	r3, [r4, #16]
 8011f60:	6023      	str	r3, [r4, #0]
 8011f62:	2308      	movs	r3, #8
 8011f64:	89a2      	ldrh	r2, [r4, #12]
 8011f66:	4313      	orrs	r3, r2
 8011f68:	81a3      	strh	r3, [r4, #12]
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10b      	bne.n	8011f88 <__swsetup_r+0x88>
 8011f70:	21a0      	movs	r1, #160	; 0xa0
 8011f72:	2280      	movs	r2, #128	; 0x80
 8011f74:	89a3      	ldrh	r3, [r4, #12]
 8011f76:	0089      	lsls	r1, r1, #2
 8011f78:	0092      	lsls	r2, r2, #2
 8011f7a:	400b      	ands	r3, r1
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d003      	beq.n	8011f88 <__swsetup_r+0x88>
 8011f80:	0021      	movs	r1, r4
 8011f82:	0028      	movs	r0, r5
 8011f84:	f000 f8e8 	bl	8012158 <__smakebuf_r>
 8011f88:	220c      	movs	r2, #12
 8011f8a:	5ea3      	ldrsh	r3, [r4, r2]
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	001a      	movs	r2, r3
 8011f90:	b299      	uxth	r1, r3
 8011f92:	4002      	ands	r2, r0
 8011f94:	4203      	tst	r3, r0
 8011f96:	d00f      	beq.n	8011fb8 <__swsetup_r+0xb8>
 8011f98:	2200      	movs	r2, #0
 8011f9a:	60a2      	str	r2, [r4, #8]
 8011f9c:	6962      	ldr	r2, [r4, #20]
 8011f9e:	4252      	negs	r2, r2
 8011fa0:	61a2      	str	r2, [r4, #24]
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	6922      	ldr	r2, [r4, #16]
 8011fa6:	4282      	cmp	r2, r0
 8011fa8:	d1c4      	bne.n	8011f34 <__swsetup_r+0x34>
 8011faa:	0609      	lsls	r1, r1, #24
 8011fac:	d5c2      	bpl.n	8011f34 <__swsetup_r+0x34>
 8011fae:	2240      	movs	r2, #64	; 0x40
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	81a3      	strh	r3, [r4, #12]
 8011fb4:	3801      	subs	r0, #1
 8011fb6:	e7bd      	b.n	8011f34 <__swsetup_r+0x34>
 8011fb8:	0788      	lsls	r0, r1, #30
 8011fba:	d400      	bmi.n	8011fbe <__swsetup_r+0xbe>
 8011fbc:	6962      	ldr	r2, [r4, #20]
 8011fbe:	60a2      	str	r2, [r4, #8]
 8011fc0:	e7ef      	b.n	8011fa2 <__swsetup_r+0xa2>
 8011fc2:	46c0      	nop			; (mov r8, r8)
 8011fc4:	200006c8 	.word	0x200006c8

08011fc8 <__fputwc>:
 8011fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fca:	b085      	sub	sp, #20
 8011fcc:	000e      	movs	r6, r1
 8011fce:	0015      	movs	r5, r2
 8011fd0:	9001      	str	r0, [sp, #4]
 8011fd2:	f7f9 fccf 	bl	800b974 <__locale_mb_cur_max>
 8011fd6:	0004      	movs	r4, r0
 8011fd8:	2801      	cmp	r0, #1
 8011fda:	d119      	bne.n	8012010 <__fputwc+0x48>
 8011fdc:	1e73      	subs	r3, r6, #1
 8011fde:	2bfe      	cmp	r3, #254	; 0xfe
 8011fe0:	d816      	bhi.n	8012010 <__fputwc+0x48>
 8011fe2:	ab02      	add	r3, sp, #8
 8011fe4:	711e      	strb	r6, [r3, #4]
 8011fe6:	2700      	movs	r7, #0
 8011fe8:	42a7      	cmp	r7, r4
 8011fea:	d020      	beq.n	801202e <__fputwc+0x66>
 8011fec:	ab03      	add	r3, sp, #12
 8011fee:	5dd9      	ldrb	r1, [r3, r7]
 8011ff0:	68ab      	ldr	r3, [r5, #8]
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	60ab      	str	r3, [r5, #8]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	da04      	bge.n	8012004 <__fputwc+0x3c>
 8011ffa:	69aa      	ldr	r2, [r5, #24]
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	db19      	blt.n	8012034 <__fputwc+0x6c>
 8012000:	290a      	cmp	r1, #10
 8012002:	d017      	beq.n	8012034 <__fputwc+0x6c>
 8012004:	682b      	ldr	r3, [r5, #0]
 8012006:	1c5a      	adds	r2, r3, #1
 8012008:	602a      	str	r2, [r5, #0]
 801200a:	7019      	strb	r1, [r3, #0]
 801200c:	3701      	adds	r7, #1
 801200e:	e7eb      	b.n	8011fe8 <__fputwc+0x20>
 8012010:	002b      	movs	r3, r5
 8012012:	0032      	movs	r2, r6
 8012014:	9801      	ldr	r0, [sp, #4]
 8012016:	335c      	adds	r3, #92	; 0x5c
 8012018:	a903      	add	r1, sp, #12
 801201a:	f000 f857 	bl	80120cc <_wcrtomb_r>
 801201e:	0004      	movs	r4, r0
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d1e0      	bne.n	8011fe6 <__fputwc+0x1e>
 8012024:	2340      	movs	r3, #64	; 0x40
 8012026:	0006      	movs	r6, r0
 8012028:	89aa      	ldrh	r2, [r5, #12]
 801202a:	4313      	orrs	r3, r2
 801202c:	81ab      	strh	r3, [r5, #12]
 801202e:	0030      	movs	r0, r6
 8012030:	b005      	add	sp, #20
 8012032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012034:	002a      	movs	r2, r5
 8012036:	9801      	ldr	r0, [sp, #4]
 8012038:	f000 f8cc 	bl	80121d4 <__swbuf_r>
 801203c:	1c43      	adds	r3, r0, #1
 801203e:	d1e5      	bne.n	801200c <__fputwc+0x44>
 8012040:	0006      	movs	r6, r0
 8012042:	e7f4      	b.n	801202e <__fputwc+0x66>

08012044 <_fputwc_r>:
 8012044:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012046:	b570      	push	{r4, r5, r6, lr}
 8012048:	0005      	movs	r5, r0
 801204a:	000e      	movs	r6, r1
 801204c:	0014      	movs	r4, r2
 801204e:	07db      	lsls	r3, r3, #31
 8012050:	d405      	bmi.n	801205e <_fputwc_r+0x1a>
 8012052:	8993      	ldrh	r3, [r2, #12]
 8012054:	059b      	lsls	r3, r3, #22
 8012056:	d402      	bmi.n	801205e <_fputwc_r+0x1a>
 8012058:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801205a:	f7f9 fd1f 	bl	800ba9c <__retarget_lock_acquire_recursive>
 801205e:	230c      	movs	r3, #12
 8012060:	5ee2      	ldrsh	r2, [r4, r3]
 8012062:	2380      	movs	r3, #128	; 0x80
 8012064:	019b      	lsls	r3, r3, #6
 8012066:	421a      	tst	r2, r3
 8012068:	d104      	bne.n	8012074 <_fputwc_r+0x30>
 801206a:	431a      	orrs	r2, r3
 801206c:	81a2      	strh	r2, [r4, #12]
 801206e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012070:	4313      	orrs	r3, r2
 8012072:	6663      	str	r3, [r4, #100]	; 0x64
 8012074:	0028      	movs	r0, r5
 8012076:	0022      	movs	r2, r4
 8012078:	0031      	movs	r1, r6
 801207a:	f7ff ffa5 	bl	8011fc8 <__fputwc>
 801207e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012080:	0005      	movs	r5, r0
 8012082:	07db      	lsls	r3, r3, #31
 8012084:	d405      	bmi.n	8012092 <_fputwc_r+0x4e>
 8012086:	89a3      	ldrh	r3, [r4, #12]
 8012088:	059b      	lsls	r3, r3, #22
 801208a:	d402      	bmi.n	8012092 <_fputwc_r+0x4e>
 801208c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801208e:	f7f9 fd06 	bl	800ba9e <__retarget_lock_release_recursive>
 8012092:	0028      	movs	r0, r5
 8012094:	bd70      	pop	{r4, r5, r6, pc}

08012096 <memmove>:
 8012096:	b510      	push	{r4, lr}
 8012098:	4288      	cmp	r0, r1
 801209a:	d902      	bls.n	80120a2 <memmove+0xc>
 801209c:	188b      	adds	r3, r1, r2
 801209e:	4298      	cmp	r0, r3
 80120a0:	d303      	bcc.n	80120aa <memmove+0x14>
 80120a2:	2300      	movs	r3, #0
 80120a4:	e007      	b.n	80120b6 <memmove+0x20>
 80120a6:	5c8b      	ldrb	r3, [r1, r2]
 80120a8:	5483      	strb	r3, [r0, r2]
 80120aa:	3a01      	subs	r2, #1
 80120ac:	d2fb      	bcs.n	80120a6 <memmove+0x10>
 80120ae:	bd10      	pop	{r4, pc}
 80120b0:	5ccc      	ldrb	r4, [r1, r3]
 80120b2:	54c4      	strb	r4, [r0, r3]
 80120b4:	3301      	adds	r3, #1
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d1fa      	bne.n	80120b0 <memmove+0x1a>
 80120ba:	e7f8      	b.n	80120ae <memmove+0x18>

080120bc <abort>:
 80120bc:	2006      	movs	r0, #6
 80120be:	b510      	push	{r4, lr}
 80120c0:	f000 f906 	bl	80122d0 <raise>
 80120c4:	2001      	movs	r0, #1
 80120c6:	f7f1 fca7 	bl	8003a18 <_exit>
	...

080120cc <_wcrtomb_r>:
 80120cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80120ce:	001d      	movs	r5, r3
 80120d0:	4b09      	ldr	r3, [pc, #36]	; (80120f8 <_wcrtomb_r+0x2c>)
 80120d2:	0004      	movs	r4, r0
 80120d4:	33e0      	adds	r3, #224	; 0xe0
 80120d6:	681e      	ldr	r6, [r3, #0]
 80120d8:	002b      	movs	r3, r5
 80120da:	2900      	cmp	r1, #0
 80120dc:	d101      	bne.n	80120e2 <_wcrtomb_r+0x16>
 80120de:	000a      	movs	r2, r1
 80120e0:	a901      	add	r1, sp, #4
 80120e2:	0020      	movs	r0, r4
 80120e4:	47b0      	blx	r6
 80120e6:	1c43      	adds	r3, r0, #1
 80120e8:	d103      	bne.n	80120f2 <_wcrtomb_r+0x26>
 80120ea:	2300      	movs	r3, #0
 80120ec:	602b      	str	r3, [r5, #0]
 80120ee:	338a      	adds	r3, #138	; 0x8a
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	b004      	add	sp, #16
 80120f4:	bd70      	pop	{r4, r5, r6, pc}
 80120f6:	46c0      	nop			; (mov r8, r8)
 80120f8:	2000043c 	.word	0x2000043c

080120fc <__swhatbuf_r>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	000e      	movs	r6, r1
 8012100:	001d      	movs	r5, r3
 8012102:	230e      	movs	r3, #14
 8012104:	5ec9      	ldrsh	r1, [r1, r3]
 8012106:	0014      	movs	r4, r2
 8012108:	b096      	sub	sp, #88	; 0x58
 801210a:	2900      	cmp	r1, #0
 801210c:	da09      	bge.n	8012122 <__swhatbuf_r+0x26>
 801210e:	89b2      	ldrh	r2, [r6, #12]
 8012110:	2380      	movs	r3, #128	; 0x80
 8012112:	0011      	movs	r1, r2
 8012114:	4019      	ands	r1, r3
 8012116:	421a      	tst	r2, r3
 8012118:	d018      	beq.n	801214c <__swhatbuf_r+0x50>
 801211a:	2100      	movs	r1, #0
 801211c:	3b40      	subs	r3, #64	; 0x40
 801211e:	0008      	movs	r0, r1
 8012120:	e010      	b.n	8012144 <__swhatbuf_r+0x48>
 8012122:	466a      	mov	r2, sp
 8012124:	f000 f8de 	bl	80122e4 <_fstat_r>
 8012128:	2800      	cmp	r0, #0
 801212a:	dbf0      	blt.n	801210e <__swhatbuf_r+0x12>
 801212c:	23f0      	movs	r3, #240	; 0xf0
 801212e:	9901      	ldr	r1, [sp, #4]
 8012130:	021b      	lsls	r3, r3, #8
 8012132:	4019      	ands	r1, r3
 8012134:	4b07      	ldr	r3, [pc, #28]	; (8012154 <__swhatbuf_r+0x58>)
 8012136:	2080      	movs	r0, #128	; 0x80
 8012138:	18c9      	adds	r1, r1, r3
 801213a:	424b      	negs	r3, r1
 801213c:	4159      	adcs	r1, r3
 801213e:	2380      	movs	r3, #128	; 0x80
 8012140:	0100      	lsls	r0, r0, #4
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	6029      	str	r1, [r5, #0]
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	b016      	add	sp, #88	; 0x58
 801214a:	bd70      	pop	{r4, r5, r6, pc}
 801214c:	2380      	movs	r3, #128	; 0x80
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	e7e5      	b.n	801211e <__swhatbuf_r+0x22>
 8012152:	46c0      	nop			; (mov r8, r8)
 8012154:	ffffe000 	.word	0xffffe000

08012158 <__smakebuf_r>:
 8012158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801215a:	2602      	movs	r6, #2
 801215c:	898b      	ldrh	r3, [r1, #12]
 801215e:	0005      	movs	r5, r0
 8012160:	000c      	movs	r4, r1
 8012162:	4233      	tst	r3, r6
 8012164:	d006      	beq.n	8012174 <__smakebuf_r+0x1c>
 8012166:	0023      	movs	r3, r4
 8012168:	3343      	adds	r3, #67	; 0x43
 801216a:	6023      	str	r3, [r4, #0]
 801216c:	6123      	str	r3, [r4, #16]
 801216e:	2301      	movs	r3, #1
 8012170:	6163      	str	r3, [r4, #20]
 8012172:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012174:	466a      	mov	r2, sp
 8012176:	ab01      	add	r3, sp, #4
 8012178:	f7ff ffc0 	bl	80120fc <__swhatbuf_r>
 801217c:	9900      	ldr	r1, [sp, #0]
 801217e:	0007      	movs	r7, r0
 8012180:	0028      	movs	r0, r5
 8012182:	f7f8 f933 	bl	800a3ec <_malloc_r>
 8012186:	2800      	cmp	r0, #0
 8012188:	d108      	bne.n	801219c <__smakebuf_r+0x44>
 801218a:	220c      	movs	r2, #12
 801218c:	5ea3      	ldrsh	r3, [r4, r2]
 801218e:	059a      	lsls	r2, r3, #22
 8012190:	d4ef      	bmi.n	8012172 <__smakebuf_r+0x1a>
 8012192:	2203      	movs	r2, #3
 8012194:	4393      	bics	r3, r2
 8012196:	431e      	orrs	r6, r3
 8012198:	81a6      	strh	r6, [r4, #12]
 801219a:	e7e4      	b.n	8012166 <__smakebuf_r+0xe>
 801219c:	2380      	movs	r3, #128	; 0x80
 801219e:	89a2      	ldrh	r2, [r4, #12]
 80121a0:	6020      	str	r0, [r4, #0]
 80121a2:	4313      	orrs	r3, r2
 80121a4:	81a3      	strh	r3, [r4, #12]
 80121a6:	9b00      	ldr	r3, [sp, #0]
 80121a8:	6120      	str	r0, [r4, #16]
 80121aa:	6163      	str	r3, [r4, #20]
 80121ac:	9b01      	ldr	r3, [sp, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00c      	beq.n	80121cc <__smakebuf_r+0x74>
 80121b2:	0028      	movs	r0, r5
 80121b4:	230e      	movs	r3, #14
 80121b6:	5ee1      	ldrsh	r1, [r4, r3]
 80121b8:	f000 f8a6 	bl	8012308 <_isatty_r>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d005      	beq.n	80121cc <__smakebuf_r+0x74>
 80121c0:	2303      	movs	r3, #3
 80121c2:	89a2      	ldrh	r2, [r4, #12]
 80121c4:	439a      	bics	r2, r3
 80121c6:	3b02      	subs	r3, #2
 80121c8:	4313      	orrs	r3, r2
 80121ca:	81a3      	strh	r3, [r4, #12]
 80121cc:	89a3      	ldrh	r3, [r4, #12]
 80121ce:	433b      	orrs	r3, r7
 80121d0:	81a3      	strh	r3, [r4, #12]
 80121d2:	e7ce      	b.n	8012172 <__smakebuf_r+0x1a>

080121d4 <__swbuf_r>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	0006      	movs	r6, r0
 80121d8:	000d      	movs	r5, r1
 80121da:	0014      	movs	r4, r2
 80121dc:	2800      	cmp	r0, #0
 80121de:	d004      	beq.n	80121ea <__swbuf_r+0x16>
 80121e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <__swbuf_r+0x16>
 80121e6:	f7f9 fa83 	bl	800b6f0 <__sinit>
 80121ea:	69a3      	ldr	r3, [r4, #24]
 80121ec:	60a3      	str	r3, [r4, #8]
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	071b      	lsls	r3, r3, #28
 80121f2:	d52e      	bpl.n	8012252 <__swbuf_r+0x7e>
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d02b      	beq.n	8012252 <__swbuf_r+0x7e>
 80121fa:	230c      	movs	r3, #12
 80121fc:	5ee2      	ldrsh	r2, [r4, r3]
 80121fe:	2380      	movs	r3, #128	; 0x80
 8012200:	019b      	lsls	r3, r3, #6
 8012202:	b2ef      	uxtb	r7, r5
 8012204:	b2ed      	uxtb	r5, r5
 8012206:	421a      	tst	r2, r3
 8012208:	d02c      	beq.n	8012264 <__swbuf_r+0x90>
 801220a:	6923      	ldr	r3, [r4, #16]
 801220c:	6820      	ldr	r0, [r4, #0]
 801220e:	1ac0      	subs	r0, r0, r3
 8012210:	6963      	ldr	r3, [r4, #20]
 8012212:	4283      	cmp	r3, r0
 8012214:	dc05      	bgt.n	8012222 <__swbuf_r+0x4e>
 8012216:	0021      	movs	r1, r4
 8012218:	0030      	movs	r0, r6
 801221a:	f7fd fab3 	bl	800f784 <_fflush_r>
 801221e:	2800      	cmp	r0, #0
 8012220:	d11d      	bne.n	801225e <__swbuf_r+0x8a>
 8012222:	68a3      	ldr	r3, [r4, #8]
 8012224:	3001      	adds	r0, #1
 8012226:	3b01      	subs	r3, #1
 8012228:	60a3      	str	r3, [r4, #8]
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	1c5a      	adds	r2, r3, #1
 801222e:	6022      	str	r2, [r4, #0]
 8012230:	701f      	strb	r7, [r3, #0]
 8012232:	6963      	ldr	r3, [r4, #20]
 8012234:	4283      	cmp	r3, r0
 8012236:	d004      	beq.n	8012242 <__swbuf_r+0x6e>
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	07db      	lsls	r3, r3, #31
 801223c:	d507      	bpl.n	801224e <__swbuf_r+0x7a>
 801223e:	2d0a      	cmp	r5, #10
 8012240:	d105      	bne.n	801224e <__swbuf_r+0x7a>
 8012242:	0021      	movs	r1, r4
 8012244:	0030      	movs	r0, r6
 8012246:	f7fd fa9d 	bl	800f784 <_fflush_r>
 801224a:	2800      	cmp	r0, #0
 801224c:	d107      	bne.n	801225e <__swbuf_r+0x8a>
 801224e:	0028      	movs	r0, r5
 8012250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012252:	0021      	movs	r1, r4
 8012254:	0030      	movs	r0, r6
 8012256:	f7ff fe53 	bl	8011f00 <__swsetup_r>
 801225a:	2800      	cmp	r0, #0
 801225c:	d0cd      	beq.n	80121fa <__swbuf_r+0x26>
 801225e:	2501      	movs	r5, #1
 8012260:	426d      	negs	r5, r5
 8012262:	e7f4      	b.n	801224e <__swbuf_r+0x7a>
 8012264:	4313      	orrs	r3, r2
 8012266:	81a3      	strh	r3, [r4, #12]
 8012268:	4a02      	ldr	r2, [pc, #8]	; (8012274 <__swbuf_r+0xa0>)
 801226a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801226c:	4013      	ands	r3, r2
 801226e:	6663      	str	r3, [r4, #100]	; 0x64
 8012270:	e7cb      	b.n	801220a <__swbuf_r+0x36>
 8012272:	46c0      	nop			; (mov r8, r8)
 8012274:	ffffdfff 	.word	0xffffdfff

08012278 <_raise_r>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	0004      	movs	r4, r0
 801227c:	000d      	movs	r5, r1
 801227e:	291f      	cmp	r1, #31
 8012280:	d904      	bls.n	801228c <_raise_r+0x14>
 8012282:	2316      	movs	r3, #22
 8012284:	6003      	str	r3, [r0, #0]
 8012286:	2001      	movs	r0, #1
 8012288:	4240      	negs	r0, r0
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	0003      	movs	r3, r0
 801228e:	33fc      	adds	r3, #252	; 0xfc
 8012290:	69db      	ldr	r3, [r3, #28]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d004      	beq.n	80122a0 <_raise_r+0x28>
 8012296:	008a      	lsls	r2, r1, #2
 8012298:	189b      	adds	r3, r3, r2
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	2a00      	cmp	r2, #0
 801229e:	d108      	bne.n	80122b2 <_raise_r+0x3a>
 80122a0:	0020      	movs	r0, r4
 80122a2:	f000 f855 	bl	8012350 <_getpid_r>
 80122a6:	002a      	movs	r2, r5
 80122a8:	0001      	movs	r1, r0
 80122aa:	0020      	movs	r0, r4
 80122ac:	f000 f83e 	bl	801232c <_kill_r>
 80122b0:	e7eb      	b.n	801228a <_raise_r+0x12>
 80122b2:	2000      	movs	r0, #0
 80122b4:	2a01      	cmp	r2, #1
 80122b6:	d0e8      	beq.n	801228a <_raise_r+0x12>
 80122b8:	1c51      	adds	r1, r2, #1
 80122ba:	d103      	bne.n	80122c4 <_raise_r+0x4c>
 80122bc:	2316      	movs	r3, #22
 80122be:	3001      	adds	r0, #1
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	e7e2      	b.n	801228a <_raise_r+0x12>
 80122c4:	2400      	movs	r4, #0
 80122c6:	0028      	movs	r0, r5
 80122c8:	601c      	str	r4, [r3, #0]
 80122ca:	4790      	blx	r2
 80122cc:	0020      	movs	r0, r4
 80122ce:	e7dc      	b.n	801228a <_raise_r+0x12>

080122d0 <raise>:
 80122d0:	b510      	push	{r4, lr}
 80122d2:	4b03      	ldr	r3, [pc, #12]	; (80122e0 <raise+0x10>)
 80122d4:	0001      	movs	r1, r0
 80122d6:	6818      	ldr	r0, [r3, #0]
 80122d8:	f7ff ffce 	bl	8012278 <_raise_r>
 80122dc:	bd10      	pop	{r4, pc}
 80122de:	46c0      	nop			; (mov r8, r8)
 80122e0:	200006c8 	.word	0x200006c8

080122e4 <_fstat_r>:
 80122e4:	2300      	movs	r3, #0
 80122e6:	b570      	push	{r4, r5, r6, lr}
 80122e8:	4d06      	ldr	r5, [pc, #24]	; (8012304 <_fstat_r+0x20>)
 80122ea:	0004      	movs	r4, r0
 80122ec:	0008      	movs	r0, r1
 80122ee:	0011      	movs	r1, r2
 80122f0:	602b      	str	r3, [r5, #0]
 80122f2:	f7f1 fbe0 	bl	8003ab6 <_fstat>
 80122f6:	1c43      	adds	r3, r0, #1
 80122f8:	d103      	bne.n	8012302 <_fstat_r+0x1e>
 80122fa:	682b      	ldr	r3, [r5, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d000      	beq.n	8012302 <_fstat_r+0x1e>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd70      	pop	{r4, r5, r6, pc}
 8012304:	20000d6c 	.word	0x20000d6c

08012308 <_isatty_r>:
 8012308:	2300      	movs	r3, #0
 801230a:	b570      	push	{r4, r5, r6, lr}
 801230c:	4d06      	ldr	r5, [pc, #24]	; (8012328 <_isatty_r+0x20>)
 801230e:	0004      	movs	r4, r0
 8012310:	0008      	movs	r0, r1
 8012312:	602b      	str	r3, [r5, #0]
 8012314:	f7f1 fbdd 	bl	8003ad2 <_isatty>
 8012318:	1c43      	adds	r3, r0, #1
 801231a:	d103      	bne.n	8012324 <_isatty_r+0x1c>
 801231c:	682b      	ldr	r3, [r5, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d000      	beq.n	8012324 <_isatty_r+0x1c>
 8012322:	6023      	str	r3, [r4, #0]
 8012324:	bd70      	pop	{r4, r5, r6, pc}
 8012326:	46c0      	nop			; (mov r8, r8)
 8012328:	20000d6c 	.word	0x20000d6c

0801232c <_kill_r>:
 801232c:	2300      	movs	r3, #0
 801232e:	b570      	push	{r4, r5, r6, lr}
 8012330:	4d06      	ldr	r5, [pc, #24]	; (801234c <_kill_r+0x20>)
 8012332:	0004      	movs	r4, r0
 8012334:	0008      	movs	r0, r1
 8012336:	0011      	movs	r1, r2
 8012338:	602b      	str	r3, [r5, #0]
 801233a:	f7f1 fb5d 	bl	80039f8 <_kill>
 801233e:	1c43      	adds	r3, r0, #1
 8012340:	d103      	bne.n	801234a <_kill_r+0x1e>
 8012342:	682b      	ldr	r3, [r5, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d000      	beq.n	801234a <_kill_r+0x1e>
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	20000d6c 	.word	0x20000d6c

08012350 <_getpid_r>:
 8012350:	b510      	push	{r4, lr}
 8012352:	f7f1 fb4b 	bl	80039ec <_getpid>
 8012356:	bd10      	pop	{r4, pc}

08012358 <round>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	004a      	lsls	r2, r1, #1
 801235c:	000d      	movs	r5, r1
 801235e:	4920      	ldr	r1, [pc, #128]	; (80123e0 <round+0x88>)
 8012360:	0d52      	lsrs	r2, r2, #21
 8012362:	1851      	adds	r1, r2, r1
 8012364:	0006      	movs	r6, r0
 8012366:	2913      	cmp	r1, #19
 8012368:	dc18      	bgt.n	801239c <round+0x44>
 801236a:	2900      	cmp	r1, #0
 801236c:	da09      	bge.n	8012382 <round+0x2a>
 801236e:	0feb      	lsrs	r3, r5, #31
 8012370:	2200      	movs	r2, #0
 8012372:	07db      	lsls	r3, r3, #31
 8012374:	3101      	adds	r1, #1
 8012376:	d101      	bne.n	801237c <round+0x24>
 8012378:	491a      	ldr	r1, [pc, #104]	; (80123e4 <round+0x8c>)
 801237a:	430b      	orrs	r3, r1
 801237c:	0019      	movs	r1, r3
 801237e:	0010      	movs	r0, r2
 8012380:	e017      	b.n	80123b2 <round+0x5a>
 8012382:	4c19      	ldr	r4, [pc, #100]	; (80123e8 <round+0x90>)
 8012384:	410c      	asrs	r4, r1
 8012386:	0022      	movs	r2, r4
 8012388:	402a      	ands	r2, r5
 801238a:	4302      	orrs	r2, r0
 801238c:	d013      	beq.n	80123b6 <round+0x5e>
 801238e:	2280      	movs	r2, #128	; 0x80
 8012390:	0312      	lsls	r2, r2, #12
 8012392:	410a      	asrs	r2, r1
 8012394:	1953      	adds	r3, r2, r5
 8012396:	43a3      	bics	r3, r4
 8012398:	2200      	movs	r2, #0
 801239a:	e7ef      	b.n	801237c <round+0x24>
 801239c:	2933      	cmp	r1, #51	; 0x33
 801239e:	dd0d      	ble.n	80123bc <round+0x64>
 80123a0:	2380      	movs	r3, #128	; 0x80
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	4299      	cmp	r1, r3
 80123a6:	d106      	bne.n	80123b6 <round+0x5e>
 80123a8:	0002      	movs	r2, r0
 80123aa:	002b      	movs	r3, r5
 80123ac:	0029      	movs	r1, r5
 80123ae:	f7ee fa03 	bl	80007b8 <__aeabi_dadd>
 80123b2:	0006      	movs	r6, r0
 80123b4:	000d      	movs	r5, r1
 80123b6:	0030      	movs	r0, r6
 80123b8:	0029      	movs	r1, r5
 80123ba:	bd70      	pop	{r4, r5, r6, pc}
 80123bc:	4c0b      	ldr	r4, [pc, #44]	; (80123ec <round+0x94>)
 80123be:	1912      	adds	r2, r2, r4
 80123c0:	2401      	movs	r4, #1
 80123c2:	4264      	negs	r4, r4
 80123c4:	40d4      	lsrs	r4, r2
 80123c6:	4220      	tst	r0, r4
 80123c8:	d0f5      	beq.n	80123b6 <round+0x5e>
 80123ca:	2233      	movs	r2, #51	; 0x33
 80123cc:	1a51      	subs	r1, r2, r1
 80123ce:	3a32      	subs	r2, #50	; 0x32
 80123d0:	408a      	lsls	r2, r1
 80123d2:	1812      	adds	r2, r2, r0
 80123d4:	4282      	cmp	r2, r0
 80123d6:	4180      	sbcs	r0, r0
 80123d8:	4240      	negs	r0, r0
 80123da:	182b      	adds	r3, r5, r0
 80123dc:	43a2      	bics	r2, r4
 80123de:	e7cd      	b.n	801237c <round+0x24>
 80123e0:	fffffc01 	.word	0xfffffc01
 80123e4:	3ff00000 	.word	0x3ff00000
 80123e8:	000fffff 	.word	0x000fffff
 80123ec:	fffffbed 	.word	0xfffffbed

080123f0 <_init>:
 80123f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f2:	46c0      	nop			; (mov r8, r8)
 80123f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123f6:	bc08      	pop	{r3}
 80123f8:	469e      	mov	lr, r3
 80123fa:	4770      	bx	lr

080123fc <_fini>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	46c0      	nop			; (mov r8, r8)
 8012400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012402:	bc08      	pop	{r3}
 8012404:	469e      	mov	lr, r3
 8012406:	4770      	bx	lr
