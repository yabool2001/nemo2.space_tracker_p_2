
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001248c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002074  08012548  08012548  00022548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080145bc  080145bc  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  080145bc  080145bc  000245bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145c4  080145c4  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080145c4  080145c4  000245c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145cc  080145cc  000245cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  080145d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200006d8  08014ca8  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f10  08014ca8  00030f10  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001994b  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398f  00000000  00000000  0004a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  0004da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012dc  00000000  00000000  0004f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217c3  00000000  00000000  00050514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e605  00000000  00000000  00071cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae01  00000000  00000000  000902dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007200  00000000  00000000  0015b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001622e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012530 	.word	0x08012530

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012530 	.word	0x08012530

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014058 	.word	0x08014058
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fba0 	bl	8003cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 fa44 	bl	8002a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fcd6 	bl	8002f6c <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa96 	bl	8002af0 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb76 	bl	8002cb4 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fb36 	bl	8002c38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fbb0 	bl	8002d30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fbfc 	bl	8002dcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fc48 	bl	8002e68 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc94 	bl	8002f04 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4b8a      	ldr	r3, [pc, #552]	; (8002808 <main+0x260>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fdc7 	bl	8003174 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fdf5 	bl	80031d4 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , sys_mode ) ;
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <main+0x264>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	4987      	ldr	r1, [pc, #540]	; (8002810 <main+0x268>)
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <main+0x26c>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f009 f983 	bl	800b900 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4b86      	ldr	r3, [pc, #536]	; (8002814 <main+0x26c>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fdb9 	bl	8003174 <send_debug_logs>

  my_tim_init () ;
 8002602:	f000 ff75 	bl	80034f0 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f000 fe62 	bl	80032d0 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260c:	f000 fe92 	bl	8003334 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <main+0x270>)
 8002612:	0018      	movs	r0, r3
 8002614:	f006 fef0 	bl	80093f8 <my_gnss_acq_coordinates>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <main+0x274>)
 800261e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002620:	f000 fea2 	bl	8003368 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <main+0x278>)
 8002626:	0018      	movs	r0, r3
 8002628:	f007 f86c 	bl	8009704 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262c:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <main+0x270>)
 800262e:	7c1b      	ldrb	r3, [r3, #16]
 8002630:	001e      	movs	r6, r3
 8002632:	4b79      	ldr	r3, [pc, #484]	; (8002818 <main+0x270>)
 8002634:	689c      	ldr	r4, [r3, #8]
 8002636:	68dd      	ldr	r5, [r3, #12]
 8002638:	4b77      	ldr	r3, [pc, #476]	; (8002818 <main+0x270>)
 800263a:	8a5b      	ldrh	r3, [r3, #18]
 800263c:	4698      	mov	r8, r3
 800263e:	4b76      	ldr	r3, [pc, #472]	; (8002818 <main+0x270>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	213c      	movs	r1, #60	; 0x3c
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd79 	bl	800013c <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	4a75      	ldr	r2, [pc, #468]	; (8002824 <main+0x27c>)
 800264e:	4976      	ldr	r1, [pc, #472]	; (8002828 <main+0x280>)
 8002650:	4870      	ldr	r0, [pc, #448]	; (8002814 <main+0x26c>)
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	4643      	mov	r3, r8
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	9402      	str	r4, [sp, #8]
 800265a:	9503      	str	r5, [sp, #12]
 800265c:	9601      	str	r6, [sp, #4]
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <main+0x278>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	23af      	movs	r3, #175	; 0xaf
 8002664:	f009 f94c 	bl	800b900 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <main+0x26c>)
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fd82 	bl	8003174 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <main+0x274>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d027      	beq.n	80026ce <main+0x126>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267e:	4b6b      	ldr	r3, [pc, #428]	; (800282c <main+0x284>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f007 f880 	bl	8009788 <my_rtc_set_alarm>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d020      	beq.n	80026ce <main+0x126>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268c:	4a65      	ldr	r2, [pc, #404]	; (8002824 <main+0x27c>)
 800268e:	4968      	ldr	r1, [pc, #416]	; (8002830 <main+0x288>)
 8002690:	4860      	ldr	r0, [pc, #384]	; (8002814 <main+0x26c>)
 8002692:	23b5      	movs	r3, #181	; 0xb5
 8002694:	f009 f934 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <main+0x26c>)
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fd6a 	bl	8003174 <send_debug_logs>
		  my_tim_stop () ;
 80026a0:	f000 ff42 	bl	8003528 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a4:	4b63      	ldr	r3, [pc, #396]	; (8002834 <main+0x28c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026aa:	f001 ffb9 	bl	8004620 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ae:	4b5c      	ldr	r3, [pc, #368]	; (8002820 <main+0x278>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f007 f827 	bl	8009704 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b6:	4a5b      	ldr	r2, [pc, #364]	; (8002824 <main+0x27c>)
 80026b8:	495f      	ldr	r1, [pc, #380]	; (8002838 <main+0x290>)
 80026ba:	4856      	ldr	r0, [pc, #344]	; (8002814 <main+0x26c>)
 80026bc:	4b58      	ldr	r3, [pc, #352]	; (8002820 <main+0x278>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	23bb      	movs	r3, #187	; 0xbb
 80026c2:	f009 f91d 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <main+0x26c>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fd53 	bl	8003174 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026ce:	f006 fded 	bl	80092ac <my_astro_init>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	4053      	eors	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01e      	beq.n	800271e <main+0x176>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <main+0x278>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f007 f80e 	bl	8009704 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026e8:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <main+0x27c>)
 80026ea:	4954      	ldr	r1, [pc, #336]	; (800283c <main+0x294>)
 80026ec:	4849      	ldr	r0, [pc, #292]	; (8002814 <main+0x26c>)
 80026ee:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <main+0x278>)
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	23c3      	movs	r3, #195	; 0xc3
 80026f4:	f009 f904 	bl	800b900 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <main+0x26c>)
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fd3a 	bl	8003174 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 8002700:	f001 fcb9 	bl	8004076 <HAL_NVIC_SystemReset>
 8002704:	e0b8      	b.n	8002878 <main+0x2d0>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002706:	4a47      	ldr	r2, [pc, #284]	; (8002824 <main+0x27c>)
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <main+0x298>)
 800270a:	4842      	ldr	r0, [pc, #264]	; (8002814 <main+0x26c>)
 800270c:	23cb      	movs	r3, #203	; 0xcb
 800270e:	f009 f8f7 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <main+0x26c>)
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fd2d 	bl	8003174 <send_debug_logs>
		  my_astro_handle_evt () ;
 800271a:	f006 fe27 	bl	800936c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800271e:	f000 fed5 	bl	80034cc <my_astro_evt_pin>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d1ef      	bne.n	8002706 <main+0x15e>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <main+0x29c>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4698      	mov	r8, r3
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <main+0x270>)
 800272e:	689c      	ldr	r4, [r3, #8]
 8002730:	68dd      	ldr	r5, [r3, #12]
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <main+0x270>)
 8002734:	8a5b      	ldrh	r3, [r3, #18]
 8002736:	001e      	movs	r6, r3
 8002738:	4b37      	ldr	r3, [pc, #220]	; (8002818 <main+0x270>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	213c      	movs	r1, #60	; 0x3c
 800273e:	0018      	movs	r0, r3
 8002740:	f7fd fcfc 	bl	800013c <__udivsi3>
 8002744:	0003      	movs	r3, r0
 8002746:	001a      	movs	r2, r3
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <main+0x2a0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <main+0x2a4>)
 800274e:	4840      	ldr	r0, [pc, #256]	; (8002850 <main+0x2a8>)
 8002750:	9304      	str	r3, [sp, #16]
 8002752:	9203      	str	r2, [sp, #12]
 8002754:	9602      	str	r6, [sp, #8]
 8002756:	9400      	str	r4, [sp, #0]
 8002758:	9501      	str	r5, [sp, #4]
 800275a:	4642      	mov	r2, r8
 800275c:	f009 f8d0 	bl	800b900 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload_id:%u, %s" , __FILE__ , __LINE__ , my_astro_payload_id , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <main+0x29c>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	001c      	movs	r4, r3
 8002766:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <main+0x27c>)
 8002768:	493a      	ldr	r1, [pc, #232]	; (8002854 <main+0x2ac>)
 800276a:	482a      	ldr	r0, [pc, #168]	; (8002814 <main+0x26c>)
 800276c:	4b38      	ldr	r3, [pc, #224]	; (8002850 <main+0x2a8>)
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	9400      	str	r4, [sp, #0]
 8002772:	23d0      	movs	r3, #208	; 0xd0
 8002774:	f009 f8c4 	bl	800b900 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <main+0x26c>)
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fcfa 	bl	8003174 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <main+0x270>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <main+0x270>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0019      	movs	r1, r3
 800278a:	0010      	movs	r0, r2
 800278c:	f006 fe24 	bl	80093d8 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <main+0x29c>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	b291      	uxth	r1, r2
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <main+0x29c>)
 800279a:	8011      	strh	r1, [r2, #0]
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <main+0x2a8>)
 800279e:	0011      	movs	r1, r2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f006 fdbb 	bl	800931c <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <main+0x284>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f006 ffec 	bl	8009788 <my_rtc_set_alarm>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d061      	beq.n	8002878 <main+0x2d0>
	  {
		  sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <main+0x27c>)
 80027b6:	4928      	ldr	r1, [pc, #160]	; (8002858 <main+0x2b0>)
 80027b8:	4816      	ldr	r0, [pc, #88]	; (8002814 <main+0x26c>)
 80027ba:	23d6      	movs	r3, #214	; 0xd6
 80027bc:	f009 f8a0 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <main+0x26c>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fcd6 	bl	8003174 <send_debug_logs>
		  my_tim_stop () ;
 80027c8:	f000 feae 	bl	8003528 <my_tim_stop>
		  HAL_SuspendTick () ;
 80027cc:	f001 fb3e 	bl	8003e4c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <main+0x28c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	01db      	lsls	r3, r3, #7
 80027da:	2102      	movs	r1, #2
 80027dc:	0018      	movs	r0, r3
 80027de:	f001 fee7 	bl	80045b0 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80027e2:	f001 fb41 	bl	8003e68 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <main+0x278>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f006 ff8b 	bl	8009704 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s, Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80027ee:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <main+0x27c>)
 80027f0:	491a      	ldr	r1, [pc, #104]	; (800285c <main+0x2b4>)
 80027f2:	4808      	ldr	r0, [pc, #32]	; (8002814 <main+0x26c>)
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <main+0x278>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	23de      	movs	r3, #222	; 0xde
 80027fa:	f009 f881 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <main+0x26c>)
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fcb7 	bl	8003174 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002806:	e037      	b.n	8002878 <main+0x2d0>
 8002808:	20000000 	.word	0x20000000
 800280c:	20000b1c 	.word	0x20000b1c
 8002810:	08012570 	.word	0x08012570
 8002814:	20000a20 	.word	0x20000a20
 8002818:	20000bd8 	.word	0x20000bd8
 800281c:	20000bf1 	.word	0x20000bf1
 8002820:	20000b20 	.word	0x20000b20
 8002824:	08012580 	.word	0x08012580
 8002828:	08012594 	.word	0x08012594
 800282c:	20000008 	.word	0x20000008
 8002830:	080125d4 	.word	0x080125d4
 8002834:	20000bf0 	.word	0x20000bf0
 8002838:	080125f4 	.word	0x080125f4
 800283c:	08012600 	.word	0x08012600
 8002840:	08012620 	.word	0x08012620
 8002844:	20000b34 	.word	0x20000b34
 8002848:	20000004 	.word	0x20000004
 800284c:	08012638 	.word	0x08012638
 8002850:	20000b38 	.word	0x20000b38
 8002854:	0801264c 	.word	0x0801264c
 8002858:	08012664 	.word	0x08012664
 800285c:	08012698 	.word	0x08012698
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002860:	4a69      	ldr	r2, [pc, #420]	; (8002a08 <main+0x460>)
 8002862:	496a      	ldr	r1, [pc, #424]	; (8002a0c <main+0x464>)
 8002864:	486a      	ldr	r0, [pc, #424]	; (8002a10 <main+0x468>)
 8002866:	23f9      	movs	r3, #249	; 0xf9
 8002868:	f009 f84a 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <main+0x468>)
 800286e:	0018      	movs	r0, r3
 8002870:	f000 fc80 	bl	8003174 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002874:	f006 fd7a 	bl	800936c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002878:	f000 fe28 	bl	80034cc <my_astro_evt_pin>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d1ef      	bne.n	8002860 <main+0x2b8>
	  }
	  if ( my_rtc_alarm_flag )
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <main+0x46c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d100      	bne.n	800288a <main+0x2e2>
 8002888:	e084      	b.n	8002994 <main+0x3ec>
	  {
		  my_rtc_alarm_flag = false ;
 800288a:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <main+0x46c>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002890:	f000 fd50 	bl	8003334 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <main+0x470>)
 8002896:	0018      	movs	r0, r3
 8002898:	f006 fdae 	bl	80093f8 <my_gnss_acq_coordinates>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <main+0x474>)
 80028a2:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 80028a4:	f000 fd60 	bl	8003368 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028a8:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <main+0x478>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f006 ff2a 	bl	8009704 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <main+0x470>)
 80028b2:	7c1b      	ldrb	r3, [r3, #16]
 80028b4:	4698      	mov	r8, r3
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <main+0x470>)
 80028b8:	689c      	ldr	r4, [r3, #8]
 80028ba:	68dd      	ldr	r5, [r3, #12]
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <main+0x470>)
 80028be:	8a5b      	ldrh	r3, [r3, #18]
 80028c0:	4699      	mov	r9, r3
 80028c2:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <main+0x470>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	213c      	movs	r1, #60	; 0x3c
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fd fc37 	bl	800013c <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	469c      	mov	ip, r3
 80028d2:	2382      	movs	r3, #130	; 0x82
 80028d4:	005e      	lsls	r6, r3, #1
 80028d6:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <main+0x460>)
 80028d8:	4952      	ldr	r1, [pc, #328]	; (8002a24 <main+0x47c>)
 80028da:	484d      	ldr	r0, [pc, #308]	; (8002a10 <main+0x468>)
 80028dc:	4663      	mov	r3, ip
 80028de:	9305      	str	r3, [sp, #20]
 80028e0:	464b      	mov	r3, r9
 80028e2:	9304      	str	r3, [sp, #16]
 80028e4:	9402      	str	r4, [sp, #8]
 80028e6:	9503      	str	r5, [sp, #12]
 80028e8:	4643      	mov	r3, r8
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <main+0x478>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	0033      	movs	r3, r6
 80028f2:	f009 f805 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <main+0x468>)
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 fc3b 	bl	8003174 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <main+0x474>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d046      	beq.n	8002994 <main+0x3ec>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <main+0x470>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <main+0x470>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0019      	movs	r1, r3
 8002910:	0010      	movs	r0, r2
 8002912:	f006 fd61 	bl	80093d8 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <main+0x480>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	4698      	mov	r8, r3
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <main+0x470>)
 800291e:	689c      	ldr	r4, [r3, #8]
 8002920:	68dd      	ldr	r5, [r3, #12]
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <main+0x470>)
 8002924:	8a5b      	ldrh	r3, [r3, #18]
 8002926:	001e      	movs	r6, r3
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <main+0x470>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	213c      	movs	r1, #60	; 0x3c
 800292e:	0018      	movs	r0, r3
 8002930:	f7fd fc04 	bl	800013c <__udivsi3>
 8002934:	0003      	movs	r3, r0
 8002936:	469c      	mov	ip, r3
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <main+0x470>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <main+0x470>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	493a      	ldr	r1, [pc, #232]	; (8002a2c <main+0x484>)
 8002942:	483b      	ldr	r0, [pc, #236]	; (8002a30 <main+0x488>)
 8002944:	9305      	str	r3, [sp, #20]
 8002946:	9204      	str	r2, [sp, #16]
 8002948:	4663      	mov	r3, ip
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	9602      	str	r6, [sp, #8]
 800294e:	9400      	str	r4, [sp, #0]
 8002950:	9501      	str	r5, [sp, #4]
 8002952:	4642      	mov	r2, r8
 8002954:	f008 ffd4 	bl	800b900 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <main+0x480>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	b291      	uxth	r1, r2
 8002960:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <main+0x480>)
 8002962:	8011      	strh	r1, [r2, #0]
 8002964:	4a32      	ldr	r2, [pc, #200]	; (8002a30 <main+0x488>)
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f006 fcd7 	bl	800931c <my_astro_add_payload_2_queue>
			  sprintf ( my_astro_payload , "%s,%d,payload:%u, %s" , __FILE__ , __LINE__ , my_astro_payload_id , my_astro_payload ) ;
 800296e:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <main+0x480>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	001d      	movs	r5, r3
 8002974:	230c      	movs	r3, #12
 8002976:	33ff      	adds	r3, #255	; 0xff
 8002978:	001c      	movs	r4, r3
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <main+0x460>)
 800297c:	492d      	ldr	r1, [pc, #180]	; (8002a34 <main+0x48c>)
 800297e:	482c      	ldr	r0, [pc, #176]	; (8002a30 <main+0x488>)
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <main+0x488>)
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	9500      	str	r5, [sp, #0]
 8002986:	0023      	movs	r3, r4
 8002988:	f008 ffba 	bl	800b900 <sprintf>
			  send_debug_logs ( my_astro_payload ) ;
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <main+0x488>)
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fbf0 	bl	8003174 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <main+0x490>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	0018      	movs	r0, r3
 800299a:	f006 fef5 	bl	8009788 <my_rtc_set_alarm>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d100      	bne.n	80029a4 <main+0x3fc>
 80029a2:	e769      	b.n	8002878 <main+0x2d0>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <main+0x478>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f006 feac 	bl	8009704 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80029ac:	2389      	movs	r3, #137	; 0x89
 80029ae:	005c      	lsls	r4, r3, #1
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <main+0x460>)
 80029b2:	4922      	ldr	r1, [pc, #136]	; (8002a3c <main+0x494>)
 80029b4:	4816      	ldr	r0, [pc, #88]	; (8002a10 <main+0x468>)
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <main+0x478>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	0023      	movs	r3, r4
 80029bc:	f008 ffa0 	bl	800b900 <sprintf>
		  my_tim_stop () ;
 80029c0:	f000 fdb2 	bl	8003528 <my_tim_stop>
		  HAL_SuspendTick () ;
 80029c4:	f001 fa42 	bl	8003e4c <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <main+0x46c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	01db      	lsls	r3, r3, #7
 80029d2:	2102      	movs	r1, #2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 fdeb 	bl	80045b0 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80029da:	f001 fa45 	bl	8003e68 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <main+0x478>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f006 fe8f 	bl	8009704 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80029e6:	231a      	movs	r3, #26
 80029e8:	33ff      	adds	r3, #255	; 0xff
 80029ea:	001c      	movs	r4, r3
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <main+0x460>)
 80029ee:	4914      	ldr	r1, [pc, #80]	; (8002a40 <main+0x498>)
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <main+0x468>)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <main+0x478>)
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	0023      	movs	r3, r4
 80029f8:	f008 ff82 	bl	800b900 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <main+0x468>)
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fbb8 	bl	8003174 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 8002a04:	e738      	b.n	8002878 <main+0x2d0>
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	08012580 	.word	0x08012580
 8002a0c:	08012620 	.word	0x08012620
 8002a10:	20000a20 	.word	0x20000a20
 8002a14:	20000bf0 	.word	0x20000bf0
 8002a18:	20000bd8 	.word	0x20000bd8
 8002a1c:	20000bf1 	.word	0x20000bf1
 8002a20:	20000b20 	.word	0x20000b20
 8002a24:	08012594 	.word	0x08012594
 8002a28:	20000b34 	.word	0x20000b34
 8002a2c:	080126ac 	.word	0x080126ac
 8002a30:	20000b38 	.word	0x20000b38
 8002a34:	080126c4 	.word	0x080126c4
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	080126dc 	.word	0x080126dc
 8002a40:	080125f4 	.word	0x080125f4

08002a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b095      	sub	sp, #84	; 0x54
 8002a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a4a:	2414      	movs	r4, #20
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	0018      	movs	r0, r3
 8002a50:	233c      	movs	r3, #60	; 0x3c
 8002a52:	001a      	movs	r2, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	f008 ffe9 	bl	800ba2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	001a      	movs	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f008 ffe2 	bl	800ba2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 fdf1 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a72:	f001 fd8f 	bl	8004594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <SystemClock_Config+0xa8>)
 8002a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <SystemClock_Config+0xa8>)
 8002a7c:	2118      	movs	r1, #24
 8002a7e:	438a      	bics	r2, r1
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2206      	movs	r2, #6
 8002a86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 fe1e 	bl	80046ec <HAL_RCC_OscConfig>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002ab4:	f000 fd8c 	bl	80035d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2207      	movs	r2, #7
 8002abc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f002 f969 	bl	8004dac <HAL_RCC_ClockConfig>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ade:	f000 fd77 	bl	80035d0 <Error_Handler>
  }
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b015      	add	sp, #84	; 0x54
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40021000 	.word	0x40021000

08002af0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b090      	sub	sp, #64	; 0x40
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002af6:	232c      	movs	r3, #44	; 0x2c
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	0018      	movs	r0, r3
 8002afc:	2314      	movs	r3, #20
 8002afe:	001a      	movs	r2, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	f008 ff93 	bl	800ba2c <memset>
  RTC_DateTypeDef sDate = {0};
 8002b06:	2328      	movs	r3, #40	; 0x28
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002b0e:	003b      	movs	r3, r7
 8002b10:	0018      	movs	r0, r3
 8002b12:	2328      	movs	r3, #40	; 0x28
 8002b14:	001a      	movs	r2, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	f008 ff88 	bl	800ba2c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b1c:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b1e:	4a45      	ldr	r2, [pc, #276]	; (8002c34 <MX_RTC_Init+0x144>)
 8002b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b2a:	227f      	movs	r2, #127	; 0x7f
 8002b2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b34:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	05d2      	lsls	r2, r2, #23
 8002b4c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f002 fd0e 	bl	8005578 <HAL_RTC_Init>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b60:	f000 fd36 	bl	80035d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b8a:	1879      	adds	r1, r7, r1
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <MX_RTC_Init+0x140>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	0018      	movs	r0, r3
 8002b92:	f002 fd93 	bl	80056bc <HAL_RTC_SetTime>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d001      	beq.n	8002b9e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b9a:	f000 fd19 	bl	80035d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b9e:	2128      	movs	r1, #40	; 0x28
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2206      	movs	r2, #6
 8002ba4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2201      	movs	r2, #1
 8002bb0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002bb8:	1879      	adds	r1, r7, r1
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <MX_RTC_Init+0x140>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f002 fe80 	bl	80058c4 <HAL_RTC_SetDate>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002bc8:	f000 fd02 	bl	80035d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002bcc:	003b      	movs	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002bde:	003b      	movs	r3, r7
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002be4:	003b      	movs	r3, r7
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bea:	003b      	movs	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002bf6:	003b      	movs	r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002bfc:	003b      	movs	r3, r7
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c02:	003b      	movs	r3, r7
 8002c04:	2220      	movs	r2, #32
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c0a:	003b      	movs	r3, r7
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	0052      	lsls	r2, r2, #1
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c12:	0039      	movs	r1, r7
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_RTC_Init+0x140>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f002 ff33 	bl	8005a84 <HAL_RTC_SetAlarm_IT>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d001      	beq.n	8002c26 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002c22:	f000 fcd5 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b010      	add	sp, #64	; 0x40
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	200006f4 	.word	0x200006f4
 8002c34:	40002800 	.word	0x40002800

08002c38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <MX_SPI1_Init+0x78>)
 8002c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c44:	2282      	movs	r2, #130	; 0x82
 8002c46:	0052      	lsls	r2, r2, #1
 8002c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c52:	22e0      	movs	r2, #224	; 0xe0
 8002c54:	00d2      	lsls	r2, r2, #3
 8002c56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c86:	2207      	movs	r2, #7
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c92:	2208      	movs	r2, #8
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <MX_SPI1_Init+0x74>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 f9d3 	bl	8006044 <HAL_SPI_Init>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ca2:	f000 fc95 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000720 	.word	0x20000720
 8002cb0:	40013000 	.word	0x40013000

08002cb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f008 feb2 	bl	800ba2c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <MX_TIM6_Init+0x70>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <MX_TIM6_Init+0x74>)
 8002cd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <MX_TIM6_Init+0x78>)
 8002cde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f003 fa63 	bl	80061b4 <HAL_TIM_Base_Init>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cf2:	f000 fc6d 	bl	80035d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f003 fcfb 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002d12:	f000 fc5d 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000784 	.word	0x20000784
 8002d24:	40001000 	.word	0x40001000
 8002d28:	00003e7f 	.word	0x00003e7f
 8002d2c:	000003e7 	.word	0x000003e7

08002d30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <MX_USART1_UART_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d3c:	22e1      	movs	r2, #225	; 0xe1
 8002d3e:	0252      	lsls	r2, r2, #9
 8002d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f003 fd50 	bl	8006820 <HAL_UART_Init>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d84:	f000 fc24 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f004 fd2b 	bl	80077e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f000 fc1b 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f004 fd62 	bl	8007868 <HAL_UARTEx_SetRxFifoThreshold>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002da8:	f000 fc12 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART1_UART_Init+0x94>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f004 fce0 	bl	8007774 <HAL_UARTEx_DisableFifoMode>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002db8:	f000 fc0a 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	200007d0 	.word	0x200007d0
 8002dc8:	40013800 	.word	0x40013800

08002dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <MX_USART2_UART_Init+0x98>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dd8:	22e1      	movs	r2, #225	; 0xe1
 8002dda:	0252      	lsls	r2, r2, #9
 8002ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 fd02 	bl	8006820 <HAL_UART_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e20:	f000 fbd6 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f004 fcdd 	bl	80077e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e32:	f000 fbcd 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f004 fd14 	bl	8007868 <HAL_UARTEx_SetRxFifoThreshold>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002e44:	f000 fbc4 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <MX_USART2_UART_Init+0x94>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 fc92 	bl	8007774 <HAL_UARTEx_DisableFifoMode>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 fbbc 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000864 	.word	0x20000864
 8002e64:	40004400 	.word	0x40004400

08002e68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e6e:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <MX_USART3_UART_Init+0x98>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e74:	2296      	movs	r2, #150	; 0x96
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f003 fcb4 	bl	8006820 <HAL_UART_Init>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ebc:	f000 fb88 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f004 fc8f 	bl	80077e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ece:	f000 fb7f 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f004 fcc6 	bl	8007868 <HAL_UARTEx_SetRxFifoThreshold>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ee0:	f000 fb76 	bl	80035d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <MX_USART3_UART_Init+0x94>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f004 fc44 	bl	8007774 <HAL_UARTEx_DisableFifoMode>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ef0:	f000 fb6e 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200008f8 	.word	0x200008f8
 8002f00:	40004800 	.word	0x40004800

08002f04 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <MX_USART5_UART_Init+0x64>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f10:	2296      	movs	r2, #150	; 0x96
 8002f12:	0192      	lsls	r2, r2, #6
 8002f14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MX_USART5_UART_Init+0x60>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f003 fc66 	bl	8006820 <HAL_UART_Init>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002f58:	f000 fb3a 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	2000098c 	.word	0x2000098c
 8002f68:	40005000 	.word	0x40005000

08002f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08b      	sub	sp, #44	; 0x2c
 8002f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	2414      	movs	r4, #20
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	0018      	movs	r0, r3
 8002f78:	2314      	movs	r3, #20
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f008 fd55 	bl	800ba2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	4b75      	ldr	r3, [pc, #468]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002f88:	2104      	movs	r1, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b70      	ldr	r3, [pc, #448]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b69      	ldr	r3, [pc, #420]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fb8:	2102      	movs	r1, #2
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbe:	4b67      	ldr	r3, [pc, #412]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fca:	4b64      	ldr	r3, [pc, #400]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd6:	4b61      	ldr	r3, [pc, #388]	; (800315c <MX_GPIO_Init+0x1f0>)
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4013      	ands	r3, r2
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2110      	movs	r1, #16
 8002fea:	0018      	movs	r0, r3
 8002fec:	f001 fab5 	bl	800455a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002ff0:	495b      	ldr	r1, [pc, #364]	; (8003160 <MX_GPIO_Init+0x1f4>)
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <MX_GPIO_Init+0x1f8>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f001 faaf 	bl	800455a <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4858      	ldr	r0, [pc, #352]	; (8003164 <MX_GPIO_Init+0x1f8>)
 8003002:	2201      	movs	r2, #1
 8003004:	0019      	movs	r1, r3
 8003006:	f001 faa8 	bl	800455a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 800300a:	4b57      	ldr	r3, [pc, #348]	; (8003168 <MX_GPIO_Init+0x1fc>)
 800300c:	2200      	movs	r2, #0
 800300e:	2103      	movs	r1, #3
 8003010:	0018      	movs	r0, r3
 8003012:	f001 faa2 	bl	800455a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301c:	193b      	adds	r3, r7, r4
 800301e:	2288      	movs	r2, #136	; 0x88
 8003020:	0352      	lsls	r2, r2, #13
 8003022:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	193b      	adds	r3, r7, r4
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 800302a:	193a      	adds	r2, r7, r4
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f001 f830 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	2202      	movs	r2, #2
 800303c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303e:	193b      	adds	r3, r7, r4
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 800304a:	193a      	adds	r2, r7, r4
 800304c:	23a0      	movs	r3, #160	; 0xa0
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f001 f820 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8003058:	193b      	adds	r3, r7, r4
 800305a:	2210      	movs	r2, #16
 800305c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	193b      	adds	r3, r7, r4
 8003060:	2201      	movs	r2, #1
 8003062:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	193b      	adds	r3, r7, r4
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003070:	193a      	adds	r2, r7, r4
 8003072:	23a0      	movs	r3, #160	; 0xa0
 8003074:	05db      	lsls	r3, r3, #23
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f001 f80d 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 800307e:	193b      	adds	r3, r7, r4
 8003080:	4a3a      	ldr	r2, [pc, #232]	; (800316c <MX_GPIO_Init+0x200>)
 8003082:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2201      	movs	r2, #1
 8003088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	193b      	adds	r3, r7, r4
 8003098:	4a32      	ldr	r2, [pc, #200]	; (8003164 <MX_GPIO_Init+0x1f8>)
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f000 fffb 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 80030a2:	0021      	movs	r1, r4
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2288      	movs	r2, #136	; 0x88
 80030ae:	0352      	lsls	r2, r2, #13
 80030b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	000c      	movs	r4, r1
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <MX_GPIO_Init+0x1f8>)
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f000 ffe9 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80030c6:	0021      	movs	r1, r4
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	0192      	lsls	r2, r2, #6
 80030ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030d0:	000c      	movs	r4, r1
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2211      	movs	r2, #17
 80030d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <MX_GPIO_Init+0x1f8>)
 80030e8:	0019      	movs	r1, r3
 80030ea:	0010      	movs	r0, r2
 80030ec:	f000 ffd4 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <MX_GPIO_Init+0x204>)
 80030f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003102:	193b      	adds	r3, r7, r4
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <MX_GPIO_Init+0x1f8>)
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f000 ffc5 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2203      	movs	r2, #3
 8003112:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003114:	193b      	adds	r3, r7, r4
 8003116:	2201      	movs	r2, #1
 8003118:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	193b      	adds	r3, r7, r4
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	193b      	adds	r3, r7, r4
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003126:	193b      	adds	r3, r7, r4
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <MX_GPIO_Init+0x1fc>)
 800312a:	0019      	movs	r1, r3
 800312c:	0010      	movs	r0, r2
 800312e:	f000 ffb3 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003132:	0021      	movs	r1, r4
 8003134:	187b      	adds	r3, r7, r1
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2201      	movs	r2, #1
 8003144:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003146:	187b      	adds	r3, r7, r1
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <MX_GPIO_Init+0x1fc>)
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f000 ffa3 	bl	8004098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b00b      	add	sp, #44	; 0x2c
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40021000 	.word	0x40021000
 8003160:	0000a403 	.word	0x0000a403
 8003164:	50000400 	.word	0x50000400
 8003168:	50000c00 	.word	0x50000c00
 800316c:	00008c03 	.word	0x00008c03
 8003170:	00004040 	.word	0x00004040

08003174 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f7fc ffc0 	bl	8000104 <strlen>
 8003184:	0003      	movs	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2bfa      	cmp	r3, #250	; 0xfa
 800318c:	d908      	bls.n	80031a0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800318e:	23fa      	movs	r3, #250	; 0xfa
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	490d      	ldr	r1, [pc, #52]	; (80031c8 <send_debug_logs+0x54>)
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <send_debug_logs+0x58>)
 8003196:	222a      	movs	r2, #42	; 0x2a
 8003198:	f003 fbd8 	bl	800694c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800319c:	23fa      	movs	r3, #250	; 0xfa
 800319e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	23fa      	movs	r3, #250	; 0xfa
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <send_debug_logs+0x58>)
 80031ac:	f003 fbce 	bl	800694c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80031b0:	23fa      	movs	r3, #250	; 0xfa
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4906      	ldr	r1, [pc, #24]	; (80031d0 <send_debug_logs+0x5c>)
 80031b6:	4805      	ldr	r0, [pc, #20]	; (80031cc <send_debug_logs+0x58>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	f003 fbc7 	bl	800694c <HAL_UART_Transmit>
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b004      	add	sp, #16
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	08012710 	.word	0x08012710
 80031cc:	20000864 	.word	0x20000864
 80031d0:	0801273c 	.word	0x0801273c

080031d4 <my_sys_init>:
// System functions
void my_sys_init ( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <my_sys_init+0xe0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 80031de:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <my_sys_init+0xe0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 80031e4:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <my_sys_init+0xe4>)
 80031e6:	2104      	movs	r1, #4
 80031e8:	0018      	movs	r0, r3
 80031ea:	f001 f999 	bl	8004520 <HAL_GPIO_ReadPin>
 80031ee:	0003      	movs	r3, r0
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	4193      	sbcs	r3, r2
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <my_sys_init+0xe8>)
 80031f8:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <my_sys_init+0xe4>)
 80031fc:	2108      	movs	r1, #8
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 f98e 	bl	8004520 <HAL_GPIO_ReadPin>
 8003204:	0003      	movs	r3, r0
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	4193      	sbcs	r3, r2
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <my_sys_init+0xec>)
 800320e:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <my_sys_init+0xe8>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	4053      	eors	r3, r2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <my_sys_init+0x6c>
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <my_sys_init+0xec>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4053      	eors	r3, r2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <my_sys_init+0x6c>
	{
		sys_mode = 0 ;
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <my_sys_init+0xf0>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = MY_RTC_ALARM_1H ;
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <my_sys_init+0xf4>)
 8003234:	22e1      	movs	r2, #225	; 0xe1
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = FIX_ACQ_THS_2MIN ;
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <my_sys_init+0xf8>)
 800323c:	2278      	movs	r2, #120	; 0x78
 800323e:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <my_sys_init+0xe8>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <my_sys_init+0x96>
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <my_sys_init+0xec>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4053      	eors	r3, r2
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <my_sys_init+0x96>
	{
		sys_mode = 1 ;
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <my_sys_init+0xf0>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = MY_RTC_ALARM_1H ;
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <my_sys_init+0xf4>)
 800325e:	22e1      	movs	r2, #225	; 0xe1
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = FIX_ACQ_THS_2MIN ;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <my_sys_init+0xf8>)
 8003266:	2278      	movs	r2, #120	; 0x78
 8003268:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <my_sys_init+0xe8>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4053      	eors	r3, r2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <my_sys_init+0xc2>
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <my_sys_init+0xec>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <my_sys_init+0xc2>
	{
		sys_mode = 2 ;
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <my_sys_init+0xf0>)
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = MY_RTC_ALARM_5MIN ;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <my_sys_init+0xf4>)
 8003288:	2296      	movs	r2, #150	; 0x96
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	801a      	strh	r2, [r3, #0]
		fix_acq_ths = FIX_ACQ_THS_10MIN ;
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <my_sys_init+0xf8>)
 8003290:	2296      	movs	r2, #150	; 0x96
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <my_sys_init+0xe8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <my_sys_init+0xd8>
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <my_sys_init+0xec>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <my_sys_init+0xd8>
	{
		sys_mode = 3 ;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <my_sys_init+0xf0>)
 80032a8:	2203      	movs	r2, #3
 80032aa:	701a      	strb	r2, [r3, #0]
	}
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000bd8 	.word	0x20000bd8
 80032b8:	50000c00 	.word	0x50000c00
 80032bc:	20000b1a 	.word	0x20000b1a
 80032c0:	20000b1b 	.word	0x20000b1b
 80032c4:	20000b1c 	.word	0x20000b1c
 80032c8:	20000008 	.word	0x20000008
 80032cc:	20000016 	.word	0x20000016

080032d0 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10e      	bne.n	8003302 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	4811      	ldr	r0, [pc, #68]	; (8003330 <my_ant_sw_pos+0x60>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	0019      	movs	r1, r3
 80032ee:	f001 f934 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	480e      	ldr	r0, [pc, #56]	; (8003330 <my_ant_sw_pos+0x60>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	0019      	movs	r1, r3
 80032fc:	f001 f92d 	bl	800455a <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003300:	e011      	b.n	8003326 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d10d      	bne.n	8003326 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	4808      	ldr	r0, [pc, #32]	; (8003330 <my_ant_sw_pos+0x60>)
 8003310:	2201      	movs	r2, #1
 8003312:	0019      	movs	r1, r3
 8003314:	f001 f921 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <my_ant_sw_pos+0x60>)
 800331e:	2200      	movs	r2, #0
 8003320:	0019      	movs	r1, r3
 8003322:	f001 f91a 	bl	800455a <HAL_GPIO_WritePin>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	50000400 	.word	0x50000400

08003334 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003338:	2001      	movs	r0, #1
 800333a:	f7ff ffc9 	bl	80032d0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	4808      	ldr	r0, [pc, #32]	; (8003364 <my_gnss_sw_on+0x30>)
 8003344:	2201      	movs	r2, #1
 8003346:	0019      	movs	r1, r3
 8003348:	f001 f907 	bl	800455a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	019b      	lsls	r3, r3, #6
 8003350:	4804      	ldr	r0, [pc, #16]	; (8003364 <my_gnss_sw_on+0x30>)
 8003352:	2201      	movs	r2, #1
 8003354:	0019      	movs	r1, r3
 8003356:	f001 f900 	bl	800455a <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800335a:	f7ff fdd3 	bl	8002f04 <MX_USART5_UART_Init>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	50000400 	.word	0x50000400

08003368 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 800336c:	2002      	movs	r0, #2
 800336e:	f7ff ffaf 	bl	80032d0 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <my_gnss_sw_off+0x3c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d811      	bhi.n	800339e <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	480a      	ldr	r0, [pc, #40]	; (80033a8 <my_gnss_sw_off+0x40>)
 8003380:	2200      	movs	r2, #0
 8003382:	0019      	movs	r1, r3
 8003384:	f001 f8e9 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	4806      	ldr	r0, [pc, #24]	; (80033a8 <my_gnss_sw_off+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	0019      	movs	r1, r3
 8003392:	f001 f8e2 	bl	800455a <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <my_gnss_sw_off+0x44>)
 8003398:	0018      	movs	r0, r3
 800339a:	f003 fa97 	bl	80068cc <HAL_UART_DeInit>
	}
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000b1c 	.word	0x20000b1c
 80033a8:	50000400 	.word	0x50000400
 80033ac:	2000098c 	.word	0x2000098c

080033b0 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	000a      	movs	r2, r1
 80033ba:	1cfb      	adds	r3, r7, #3
 80033bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80033be:	23fa      	movs	r3, #250	; 0xfa
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <my_gnss_receive_byte+0x3c>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f003 fb64 	bl	8006a94 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <my_gnss_receive_byte+0x40>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80033d4:	23fa      	movs	r3, #250	; 0xfa
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <my_gnss_receive_byte+0x44>)
 80033dc:	2201      	movs	r2, #1
 80033de:	f003 fab5 	bl	800694c <HAL_UART_Transmit>
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	2000098c 	.word	0x2000098c
 80033f0:	20000b1c 	.word	0x20000b1c
 80033f4:	20000864 	.word	0x20000864

080033f8 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <my_astronode_reset+0x30>)
 80033fe:	2201      	movs	r2, #1
 8003400:	2102      	movs	r1, #2
 8003402:	0018      	movs	r0, r3
 8003404:	f001 f8a9 	bl	800455a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003408:	2001      	movs	r0, #1
 800340a:	f000 fcfb 	bl	8003e04 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <my_astronode_reset+0x30>)
 8003410:	2200      	movs	r2, #0
 8003412:	2102      	movs	r1, #2
 8003414:	0018      	movs	r0, r3
 8003416:	f001 f8a0 	bl	800455a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800341a:	20fa      	movs	r0, #250	; 0xfa
 800341c:	f000 fcf2 	bl	8003e04 <HAL_Delay>
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	50000400 	.word	0x50000400

0800342c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <send_astronode_request+0x34>)
 8003438:	0018      	movs	r0, r3
 800343a:	f7ff fe9b 	bl	8003174 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff fe97 	bl	8003174 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b29a      	uxth	r2, r3
 800344a:	23fa      	movs	r3, #250	; 0xfa
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4804      	ldr	r0, [pc, #16]	; (8003464 <send_astronode_request+0x38>)
 8003452:	f003 fa7b 	bl	800694c <HAL_UART_Transmit>
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	08012748 	.word	0x08012748
 8003464:	200008f8 	.word	0x200008f8

08003468 <get_systick>:
uint32_t get_systick ( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 800346c:	f000 fcc0 	bl	8003df0 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	000a      	movs	r2, r1
 8003482:	1cbb      	adds	r3, r7, #2
 8003484:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003486:	f7ff ffef 	bl	8003468 <get_systick>
 800348a:	0002      	movs	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	1cba      	adds	r2, r7, #2
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	419b      	sbcs	r3, r3
 8003498:	425b      	negs	r3, r3
 800349a:	b2db      	uxtb	r3, r3
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4806      	ldr	r0, [pc, #24]	; (80034c8 <is_astronode_character_received+0x24>)
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	2201      	movs	r2, #1
 80034b4:	f003 faee 	bl	8006a94 <HAL_UART_Receive>
 80034b8:	0003      	movs	r3, r0
 80034ba:	425a      	negs	r2, r3
 80034bc:	4153      	adcs	r3, r2
 80034be:	b2db      	uxtb	r3, r3
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200008f8 	.word	0x200008f8

080034cc <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <my_astro_evt_pin+0x20>)
 80034d2:	2104      	movs	r1, #4
 80034d4:	0018      	movs	r0, r3
 80034d6:	f001 f823 	bl	8004520 <HAL_GPIO_ReadPin>
 80034da:	0003      	movs	r3, r0
 80034dc:	3b01      	subs	r3, #1
 80034de:	425a      	negs	r2, r3
 80034e0:	4153      	adcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	50000400 	.word	0x50000400

080034f0 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <my_tim_init+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4252      	negs	r2, r2
 80034fc:	611a      	str	r2, [r3, #16]
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000784 	.word	0x20000784

08003508 <my_tim_start>:

void my_tim_start ()
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <my_tim_start+0x18>)
 800350e:	2200      	movs	r2, #0
 8003510:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <my_tim_start+0x1c>)
 8003514:	0018      	movs	r0, r3
 8003516:	f002 fea5 	bl	8006264 <HAL_TIM_Base_Start_IT>
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000c00 	.word	0x20000c00
 8003524:	20000784 	.word	0x20000784

08003528 <my_tim_stop>:

void my_tim_stop ()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <my_tim_stop+0x14>)
 800352e:	0018      	movs	r0, r3
 8003530:	f002 fefa 	bl	8006328 <HAL_TIM_Base_Stop_IT>
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000784 	.word	0x20000784

08003540 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d11e      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800355c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	2396      	movs	r3, #150	; 0x96
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	429a      	cmp	r2, r3
 8003568:	d912      	bls.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800356c:	0018      	movs	r0, r3
 800356e:	f006 f8c9 	bl	8009704 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003572:	4c0c      	ldr	r4, [pc, #48]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003576:	490d      	ldr	r1, [pc, #52]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003578:	480d      	ldr	r0, [pc, #52]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	0023      	movs	r3, r4
 8003580:	f008 f9be 	bl	800b900 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff fdf4 	bl	8003174 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 800358c:	f000 fd73 	bl	8004076 <HAL_NVIC_SystemReset>
		}
	}
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b003      	add	sp, #12
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	40001000 	.word	0x40001000
 800359c:	20000c00 	.word	0x20000c00
 80035a0:	20000b20 	.word	0x20000b20
 80035a4:	000003df 	.word	0x000003df
 80035a8:	08012580 	.word	0x08012580
 80035ac:	08012600 	.word	0x08012600
 80035b0:	20000a20 	.word	0x20000a20

080035b4 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RTC_AlarmAEventCallback+0x18>)
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	20000bf0 	.word	0x20000bf0

080035d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d4:	b672      	cpsid	i
}
 80035d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <Error_Handler+0x8>
	...

080035dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_MspInit+0x4c>)
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_MspInit+0x4c>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_MspInit+0x4c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_MspInit+0x4c>)
 80035fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_MspInit+0x4c>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0549      	lsls	r1, r1, #21
 8003604:	430a      	orrs	r2, r1
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_MspInit+0x4c>)
 800360a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	055b      	lsls	r3, r3, #21
 8003610:	4013      	ands	r3, r2
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003616:	23c0      	movs	r3, #192	; 0xc0
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fc32 	bl	8003e84 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b097      	sub	sp, #92	; 0x5c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003634:	240c      	movs	r4, #12
 8003636:	193b      	adds	r3, r7, r4
 8003638:	0018      	movs	r0, r3
 800363a:	234c      	movs	r3, #76	; 0x4c
 800363c:	001a      	movs	r2, r3
 800363e:	2100      	movs	r1, #0
 8003640:	f008 f9f4 	bl	800ba2c <memset>
  if(hrtc->Instance==RTC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_RTC_MspInit+0x84>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12c      	bne.n	80036a8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800364e:	193b      	adds	r3, r7, r4
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	0292      	lsls	r2, r2, #10
 8003654:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	0052      	lsls	r2, r2, #1
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800365e:	193b      	adds	r3, r7, r4
 8003660:	0018      	movs	r0, r3
 8003662:	f001 fd4d 	bl	8005100 <HAL_RCCEx_PeriphCLKConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800366a:	f7ff ffb1 	bl	80035d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RTC_MspInit+0x88>)
 8003670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RTC_MspInit+0x88>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0209      	lsls	r1, r1, #8
 8003678:	430a      	orrs	r2, r1
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RTC_MspInit+0x88>)
 800367e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RTC_MspInit+0x88>)
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	00c9      	lsls	r1, r1, #3
 8003686:	430a      	orrs	r2, r1
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RTC_MspInit+0x88>)
 800368c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4013      	ands	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2103      	movs	r1, #3
 800369c:	2002      	movs	r0, #2
 800369e:	f000 fcc5 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80036a2:	2002      	movs	r0, #2
 80036a4:	f000 fcd7 	bl	8004056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b017      	add	sp, #92	; 0x5c
 80036ae:	bd90      	pop	{r4, r7, pc}
 80036b0:	40002800 	.word	0x40002800
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b08b      	sub	sp, #44	; 0x2c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	2414      	movs	r4, #20
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	0018      	movs	r0, r3
 80036c6:	2314      	movs	r3, #20
 80036c8:	001a      	movs	r2, r3
 80036ca:	2100      	movs	r1, #0
 80036cc:	f008 f9ae 	bl	800ba2c <memset>
  if(hspi->Instance==SPI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_SPI_MspInit+0x8c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d130      	bne.n	800373c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_SPI_MspInit+0x90>)
 80036dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_SPI_MspInit+0x90>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0149      	lsls	r1, r1, #5
 80036e4:	430a      	orrs	r2, r1
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_SPI_MspInit+0x90>)
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	015b      	lsls	r3, r3, #5
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_SPI_MspInit+0x90>)
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_SPI_MspInit+0x90>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_SPI_MspInit+0x90>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	2201      	movs	r2, #1
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 800370e:	0021      	movs	r1, r4
 8003710:	187b      	adds	r3, r7, r1
 8003712:	22e0      	movs	r2, #224	; 0xe0
 8003714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2202      	movs	r2, #2
 800371a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	187a      	adds	r2, r7, r1
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	0011      	movs	r1, r2
 8003736:	0018      	movs	r0, r3
 8003738:	f000 fcae 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b00b      	add	sp, #44	; 0x2c
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	40013000 	.word	0x40013000
 8003748:	40021000 	.word	0x40021000

0800374c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <HAL_TIM_Base_MspInit+0x44>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d113      	bne.n	8003786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_TIM_Base_MspInit+0x48>)
 8003760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_TIM_Base_MspInit+0x48>)
 8003764:	2110      	movs	r1, #16
 8003766:	430a      	orrs	r2, r1
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_TIM_Base_MspInit+0x48>)
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	2210      	movs	r2, #16
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2102      	movs	r1, #2
 800377a:	2011      	movs	r0, #17
 800377c:	f000 fc56 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003780:	2011      	movs	r0, #17
 8003782:	f000 fc68 	bl	8004056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	40001000 	.word	0x40001000
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b0a3      	sub	sp, #140	; 0x8c
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	2374      	movs	r3, #116	; 0x74
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	0018      	movs	r0, r3
 80037a6:	2314      	movs	r3, #20
 80037a8:	001a      	movs	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	f008 f93e 	bl	800ba2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b0:	2428      	movs	r4, #40	; 0x28
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	0018      	movs	r0, r3
 80037b6:	234c      	movs	r3, #76	; 0x4c
 80037b8:	001a      	movs	r2, r3
 80037ba:	2100      	movs	r1, #0
 80037bc:	f008 f936 	bl	800ba2c <memset>
  if(huart->Instance==USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_UART_MspInit+0x240>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d140      	bne.n	800384c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	2200      	movs	r2, #0
 80037d4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d6:	193b      	adds	r3, r7, r4
 80037d8:	0018      	movs	r0, r3
 80037da:	f001 fc91 	bl	8005100 <HAL_RCCEx_PeriphCLKConfig>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037e2:	f7ff fef5 	bl	80035d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037e6:	4b7d      	ldr	r3, [pc, #500]	; (80039dc <HAL_UART_MspInit+0x244>)
 80037e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <HAL_UART_MspInit+0x244>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	01c9      	lsls	r1, r1, #7
 80037f0:	430a      	orrs	r2, r1
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
 80037f4:	4b79      	ldr	r3, [pc, #484]	; (80039dc <HAL_UART_MspInit+0x244>)
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	01db      	lsls	r3, r3, #7
 80037fc:	4013      	ands	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003806:	4b75      	ldr	r3, [pc, #468]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003808:	2101      	movs	r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	635a      	str	r2, [r3, #52]	; 0x34
 800380e:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 800381a:	2174      	movs	r1, #116	; 0x74
 800381c:	187b      	adds	r3, r7, r1
 800381e:	22c0      	movs	r2, #192	; 0xc0
 8003820:	00d2      	lsls	r2, r2, #3
 8003822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2202      	movs	r2, #2
 8003828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	187b      	adds	r3, r7, r1
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003830:	187b      	adds	r3, r7, r1
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003836:	187b      	adds	r3, r7, r1
 8003838:	2201      	movs	r2, #1
 800383a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	187a      	adds	r2, r7, r1
 800383e:	23a0      	movs	r3, #160	; 0xa0
 8003840:	05db      	lsls	r3, r3, #23
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fc27 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800384a:	e0c0      	b.n	80039ce <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a63      	ldr	r2, [pc, #396]	; (80039e0 <HAL_UART_MspInit+0x248>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d140      	bne.n	80038d8 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003856:	2128      	movs	r1, #40	; 0x28
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2202      	movs	r2, #2
 800385c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003864:	187b      	adds	r3, r7, r1
 8003866:	0018      	movs	r0, r3
 8003868:	f001 fc4a 	bl	8005100 <HAL_RCCEx_PeriphCLKConfig>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003870:	f7ff feae 	bl	80035d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003878:	4b58      	ldr	r3, [pc, #352]	; (80039dc <HAL_UART_MspInit+0x244>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0289      	lsls	r1, r1, #10
 800387e:	430a      	orrs	r2, r1
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c
 8003882:	4b56      	ldr	r3, [pc, #344]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	4013      	ands	r3, r2
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003894:	4b51      	ldr	r3, [pc, #324]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	635a      	str	r2, [r3, #52]	; 0x34
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_UART_MspInit+0x244>)
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80038a8:	2174      	movs	r1, #116	; 0x74
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	220c      	movs	r2, #12
 80038ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2202      	movs	r2, #2
 80038b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2201      	movs	r2, #1
 80038c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c8:	187a      	adds	r2, r7, r1
 80038ca:	23a0      	movs	r3, #160	; 0xa0
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 fbe1 	bl	8004098 <HAL_GPIO_Init>
}
 80038d6:	e07a      	b.n	80039ce <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a41      	ldr	r2, [pc, #260]	; (80039e4 <HAL_UART_MspInit+0x24c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d140      	bne.n	8003964 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038e2:	2128      	movs	r1, #40	; 0x28
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	2204      	movs	r2, #4
 80038e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	0018      	movs	r0, r3
 80038f4:	f001 fc04 	bl	8005100 <HAL_RCCEx_PeriphCLKConfig>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80038fc:	f7ff fe68 	bl	80035d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	02c9      	lsls	r1, r1, #11
 800390a:	430a      	orrs	r2, r1
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c
 800390e:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	02db      	lsls	r3, r3, #11
 8003916:	4013      	ands	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	4b2f      	ldr	r3, [pc, #188]	; (80039dc <HAL_UART_MspInit+0x244>)
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003922:	2102      	movs	r1, #2
 8003924:	430a      	orrs	r2, r1
 8003926:	635a      	str	r2, [r3, #52]	; 0x34
 8003928:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_UART_MspInit+0x244>)
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003934:	2174      	movs	r1, #116	; 0x74
 8003936:	187b      	adds	r3, r7, r1
 8003938:	22c0      	movs	r2, #192	; 0xc0
 800393a:	0092      	lsls	r2, r2, #2
 800393c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2202      	movs	r2, #2
 8003942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2200      	movs	r2, #0
 800394e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2204      	movs	r2, #4
 8003954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	187b      	adds	r3, r7, r1
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_UART_MspInit+0x250>)
 800395a:	0019      	movs	r1, r3
 800395c:	0010      	movs	r0, r2
 800395e:	f000 fb9b 	bl	8004098 <HAL_GPIO_Init>
}
 8003962:	e034      	b.n	80039ce <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a20      	ldr	r2, [pc, #128]	; (80039ec <HAL_UART_MspInit+0x254>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d12f      	bne.n	80039ce <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800396e:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0049      	lsls	r1, r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_UART_MspInit+0x244>)
 800397e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_UART_MspInit+0x244>)
 800398c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003990:	2102      	movs	r1, #2
 8003992:	430a      	orrs	r2, r1
 8003994:	635a      	str	r2, [r3, #52]	; 0x34
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_UART_MspInit+0x244>)
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80039a2:	2174      	movs	r1, #116	; 0x74
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2218      	movs	r2, #24
 80039a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2202      	movs	r2, #2
 80039ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	2200      	movs	r2, #0
 80039ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	2203      	movs	r2, #3
 80039c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <HAL_UART_MspInit+0x250>)
 80039c6:	0019      	movs	r1, r3
 80039c8:	0010      	movs	r0, r2
 80039ca:	f000 fb65 	bl	8004098 <HAL_GPIO_Init>
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b023      	add	sp, #140	; 0x8c
 80039d4:	bd90      	pop	{r4, r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40004400 	.word	0x40004400
 80039e4:	40004800 	.word	0x40004800
 80039e8:	50000400 	.word	0x50000400
 80039ec:	40005000 	.word	0x40005000

080039f0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <HAL_UART_MspDeInit+0xa4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10e      	bne.n	8003a20 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a02:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a08:	4924      	ldr	r1, [pc, #144]	; (8003a9c <HAL_UART_MspDeInit+0xac>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003a0e:	23c0      	movs	r3, #192	; 0xc0
 8003a10:	00da      	lsls	r2, r3, #3
 8003a12:	23a0      	movs	r3, #160	; 0xa0
 8003a14:	05db      	lsls	r3, r3, #23
 8003a16:	0011      	movs	r1, r2
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fca9 	bl	8004370 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003a1e:	e034      	b.n	8003a8a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_UART_MspDeInit+0xb0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10c      	bne.n	8003a44 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a30:	491c      	ldr	r1, [pc, #112]	; (8003aa4 <HAL_UART_MspDeInit+0xb4>)
 8003a32:	400a      	ands	r2, r1
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003a36:	23a0      	movs	r3, #160	; 0xa0
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	210c      	movs	r1, #12
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 fc97 	bl	8004370 <HAL_GPIO_DeInit>
}
 8003a42:	e022      	b.n	8003a8a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_UART_MspDeInit+0xb8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10d      	bne.n	8003a6a <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a54:	4915      	ldr	r1, [pc, #84]	; (8003aac <HAL_UART_MspDeInit+0xbc>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003a5a:	23c0      	movs	r3, #192	; 0xc0
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_UART_MspDeInit+0xc0>)
 8003a60:	0019      	movs	r1, r3
 8003a62:	0010      	movs	r0, r2
 8003a64:	f000 fc84 	bl	8004370 <HAL_GPIO_DeInit>
}
 8003a68:	e00f      	b.n	8003a8a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <HAL_UART_MspDeInit+0xc4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d10a      	bne.n	8003a8a <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_UART_MspDeInit+0xa8>)
 8003a7a:	490f      	ldr	r1, [pc, #60]	; (8003ab8 <HAL_UART_MspDeInit+0xc8>)
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_UART_MspDeInit+0xc0>)
 8003a82:	2118      	movs	r1, #24
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 fc73 	bl	8004370 <HAL_GPIO_DeInit>
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	40013800 	.word	0x40013800
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	ffffbfff 	.word	0xffffbfff
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	fffdffff 	.word	0xfffdffff
 8003aa8:	40004800 	.word	0x40004800
 8003aac:	fffbffff 	.word	0xfffbffff
 8003ab0:	50000400 	.word	0x50000400
 8003ab4:	40005000 	.word	0x40005000
 8003ab8:	fffffeff 	.word	0xfffffeff

08003abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ac0:	e7fe      	b.n	8003ac0 <NMI_Handler+0x4>

08003ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac6:	e7fe      	b.n	8003ac6 <HardFault_Handler+0x4>

08003ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f000 f974 	bl	8003dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <RTC_TAMP_IRQHandler+0x14>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f002 f906 	bl	8005d04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	200006f4 	.word	0x200006f4

08003b04 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f002 fc3a 	bl	8006384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	20000784 	.word	0x20000784

08003b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  return 1;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_kill>:

int _kill(int pid, int sig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b32:	f008 f827 	bl	800bb84 <__errno>
 8003b36:	0003      	movs	r3, r0
 8003b38:	2216      	movs	r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	425b      	negs	r3, r3
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_exit>:

void _exit (int status)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b50:	2301      	movs	r3, #1
 8003b52:	425a      	negs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0011      	movs	r1, r2
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff ffe5 	bl	8003b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b5e:	e7fe      	b.n	8003b5e <_exit+0x16>

08003b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e00a      	b.n	8003b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b72:	e000      	b.n	8003b76 <_read+0x16>
 8003b74:	bf00      	nop
 8003b76:	0001      	movs	r1, r0
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	60ba      	str	r2, [r7, #8]
 8003b7e:	b2ca      	uxtb	r2, r1
 8003b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3301      	adds	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dbf0      	blt.n	8003b72 <_read+0x12>
  }

  return len;
 8003b90:	687b      	ldr	r3, [r7, #4]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b006      	add	sp, #24
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e009      	b.n	8003bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	60ba      	str	r2, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	e000      	b.n	8003bba <_write+0x20>
 8003bb8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf1      	blt.n	8003bac <_write+0x12>
  }
  return len;
 8003bc8:	687b      	ldr	r3, [r7, #4]
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b006      	add	sp, #24
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_close>:

int _close(int file)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	425b      	negs	r3, r3
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	0192      	lsls	r2, r2, #6
 8003bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_isatty>:

int _isatty(int file)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <_sbrk+0x5c>)
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <_sbrk+0x60>)
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <_sbrk+0x64>)
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <_sbrk+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d207      	bcs.n	8003c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c5c:	f007 ff92 	bl	800bb84 <__errno>
 8003c60:	0003      	movs	r3, r0
 8003c62:	220c      	movs	r2, #12
 8003c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	425b      	negs	r3, r3
 8003c6a:	e009      	b.n	8003c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <_sbrk+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	18d2      	adds	r2, r2, r3
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <_sbrk+0x64>)
 8003c7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20024000 	.word	0x20024000
 8003c8c:	00000400 	.word	0x00000400
 8003c90:	20000bf4 	.word	0x20000bf4
 8003c94:	20000f10 	.word	0x20000f10

08003c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ca4:	480d      	ldr	r0, [pc, #52]	; (8003cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ca8:	f7ff fff6 	bl	8003c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cac:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cae:	490d      	ldr	r1, [pc, #52]	; (8003ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <LoopForever+0xe>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb4:	e002      	b.n	8003cbc <LoopCopyDataInit>

08003cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cba:	3304      	adds	r3, #4

08003cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc0:	d3f9      	bcc.n	8003cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cc4:	4c0a      	ldr	r4, [pc, #40]	; (8003cf0 <LoopForever+0x16>)
  movs r3, #0
 8003cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc8:	e001      	b.n	8003cce <LoopFillZerobss>

08003cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ccc:	3204      	adds	r2, #4

08003cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd0:	d3fb      	bcc.n	8003cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003cd2:	f007 ff5d 	bl	800bb90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003cd6:	f7fe fc67 	bl	80025a8 <main>

08003cda <LoopForever>:

LoopForever:
  b LoopForever
 8003cda:	e7fe      	b.n	8003cda <LoopForever>
  ldr   r0, =_estack
 8003cdc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ce4:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8003ce8:	080145d0 	.word	0x080145d0
  ldr r2, =_sbss
 8003cec:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8003cf0:	20000f10 	.word	0x20000f10

08003cf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cf4:	e7fe      	b.n	8003cf4 <ADC1_COMP_IRQHandler>
	...

08003cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_Init+0x3c>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_Init+0x3c>)
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	0049      	lsls	r1, r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d12:	2003      	movs	r0, #3
 8003d14:	f000 f810 	bl	8003d38 <HAL_InitTick>
 8003d18:	1e03      	subs	r3, r0, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e001      	b.n	8003d28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d24:	f7ff fc5a 	bl	80035dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	781b      	ldrb	r3, [r3, #0]
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40022000 	.word	0x40022000

08003d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d40:	230f      	movs	r3, #15
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_InitTick+0x88>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02b      	beq.n	8003da8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <HAL_InitTick+0x8c>)
 8003d52:	681c      	ldr	r4, [r3, #0]
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_InitTick+0x88>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	0019      	movs	r1, r3
 8003d5a:	23fa      	movs	r3, #250	; 0xfa
 8003d5c:	0098      	lsls	r0, r3, #2
 8003d5e:	f7fc f9ed 	bl	800013c <__udivsi3>
 8003d62:	0003      	movs	r3, r0
 8003d64:	0019      	movs	r1, r3
 8003d66:	0020      	movs	r0, r4
 8003d68:	f7fc f9e8 	bl	800013c <__udivsi3>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f985 	bl	800407e <HAL_SYSTICK_Config>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d112      	bne.n	8003d9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d80a      	bhi.n	8003d94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	2301      	movs	r3, #1
 8003d82:	425b      	negs	r3, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f950 	bl	800402c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_InitTick+0x90>)
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e00d      	b.n	8003db0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e008      	b.n	8003db0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d9e:	230f      	movs	r3, #15
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e003      	b.n	8003db0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003da8:	230f      	movs	r3, #15
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003db0:	230f      	movs	r3, #15
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b005      	add	sp, #20
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	20000014 	.word	0x20000014
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	20000010 	.word	0x20000010

08003dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_IncTick+0x1c>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_IncTick+0x20>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	18d2      	adds	r2, r2, r3
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_IncTick+0x20>)
 8003dde:	601a      	str	r2, [r3, #0]
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000014 	.word	0x20000014
 8003dec:	20000bf8 	.word	0x20000bf8

08003df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  return uwTick;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_GetTick+0x10>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	20000bf8 	.word	0x20000bf8

08003e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	d005      	beq.n	8003e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_Delay+0x44>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	001a      	movs	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	f7ff ffe0 	bl	8003df0 <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d8f7      	bhi.n	8003e2c <HAL_Delay+0x28>
  {
  }
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b004      	add	sp, #16
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	20000014 	.word	0x20000014

08003e4c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_SuspendTick+0x18>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_SuspendTick+0x18>)
 8003e56:	2102      	movs	r1, #2
 8003e58:	438a      	bics	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <HAL_ResumeTick+0x18>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_ResumeTick+0x18>)
 8003e72:	2102      	movs	r1, #2
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	e000e010 	.word	0xe000e010

08003e84 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a06      	ldr	r2, [pc, #24]	; (8003eac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	fffff9ff 	.word	0xfffff9ff

08003eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	1dfb      	adds	r3, r7, #7
 8003eba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec2:	d809      	bhi.n	8003ed8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec4:	1dfb      	adds	r3, r7, #7
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	231f      	movs	r3, #31
 8003ecc:	401a      	ands	r2, r3
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_EnableIRQ+0x30>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4091      	lsls	r1, r2
 8003ed4:	000a      	movs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	0002      	movs	r2, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	1dfb      	adds	r3, r7, #7
 8003ef0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	1dfb      	adds	r3, r7, #7
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef8:	d828      	bhi.n	8003f4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003efa:	4a2f      	ldr	r2, [pc, #188]	; (8003fb8 <__NVIC_SetPriority+0xd4>)
 8003efc:	1dfb      	adds	r3, r7, #7
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	33c0      	adds	r3, #192	; 0xc0
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	1dfa      	adds	r2, r7, #7
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	0011      	movs	r1, r2
 8003f10:	2203      	movs	r2, #3
 8003f12:	400a      	ands	r2, r1
 8003f14:	00d2      	lsls	r2, r2, #3
 8003f16:	21ff      	movs	r1, #255	; 0xff
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	22ff      	movs	r2, #255	; 0xff
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	2303      	movs	r3, #3
 8003f32:	4003      	ands	r3, r0
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f38:	481f      	ldr	r0, [pc, #124]	; (8003fb8 <__NVIC_SetPriority+0xd4>)
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	430a      	orrs	r2, r1
 8003f44:	33c0      	adds	r3, #192	; 0xc0
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f4a:	e031      	b.n	8003fb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <__NVIC_SetPriority+0xd8>)
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	0019      	movs	r1, r3
 8003f54:	230f      	movs	r3, #15
 8003f56:	400b      	ands	r3, r1
 8003f58:	3b08      	subs	r3, #8
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	3306      	adds	r3, #6
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	3304      	adds	r3, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1dfa      	adds	r2, r7, #7
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	400a      	ands	r2, r1
 8003f70:	00d2      	lsls	r2, r2, #3
 8003f72:	21ff      	movs	r1, #255	; 0xff
 8003f74:	4091      	lsls	r1, r2
 8003f76:	000a      	movs	r2, r1
 8003f78:	43d2      	mvns	r2, r2
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	401a      	ands	r2, r3
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	4003      	ands	r3, r0
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <__NVIC_SetPriority+0xd8>)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	001c      	movs	r4, r3
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	4023      	ands	r3, r4
 8003fa0:	3b08      	subs	r3, #8
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	3306      	adds	r3, #6
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	18c3      	adds	r3, r0, r3
 8003fac:	3304      	adds	r3, #4
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b003      	add	sp, #12
 8003fb6:	bd90      	pop	{r4, r7, pc}
 8003fb8:	e000e100 	.word	0xe000e100
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc4:	f3bf 8f4f 	dsb	sy
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <__NVIC_SystemReset+0x1c>)
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <__NVIC_SystemReset+0x20>)
 8003fce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd0:	f3bf 8f4f 	dsb	sy
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	e7fd      	b.n	8003fd6 <__NVIC_SystemReset+0x16>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	e000ed00 	.word	0xe000ed00
 8003fe0:	05fa0004 	.word	0x05fa0004

08003fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1e5a      	subs	r2, r3, #1
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	045b      	lsls	r3, r3, #17
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d301      	bcc.n	8003ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e010      	b.n	800401e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <SysTick_Config+0x44>)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	3a01      	subs	r2, #1
 8004002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004004:	2301      	movs	r3, #1
 8004006:	425b      	negs	r3, r3
 8004008:	2103      	movs	r1, #3
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff ff6a 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <SysTick_Config+0x44>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <SysTick_Config+0x44>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800401c:	2300      	movs	r3, #0
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b002      	add	sp, #8
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	e000e010 	.word	0xe000e010

0800402c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	210f      	movs	r1, #15
 8004038:	187b      	adds	r3, r7, r1
 800403a:	1c02      	adds	r2, r0, #0
 800403c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	187b      	adds	r3, r7, r1
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b25b      	sxtb	r3, r3
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff ff4b 	bl	8003ee4 <__NVIC_SetPriority>
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	0002      	movs	r2, r0
 800405e:	1dfb      	adds	r3, r7, #7
 8004060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004062:	1dfb      	adds	r3, r7, #7
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b25b      	sxtb	r3, r3
 8004068:	0018      	movs	r0, r3
 800406a:	f7ff ff21 	bl	8003eb0 <__NVIC_EnableIRQ>
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46bd      	mov	sp, r7
 8004072:	b002      	add	sp, #8
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800407a:	f7ff ffa1 	bl	8003fc0 <__NVIC_SystemReset>

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff ffab 	bl	8003fe4 <SysTick_Config>
 800408e:	0003      	movs	r3, r0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a6:	e14d      	b.n	8004344 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2101      	movs	r1, #1
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4091      	lsls	r1, r2
 80040b2:	000a      	movs	r2, r1
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d100      	bne.n	80040c0 <HAL_GPIO_Init+0x28>
 80040be:	e13e      	b.n	800433e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2203      	movs	r2, #3
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d005      	beq.n	80040d8 <HAL_GPIO_Init+0x40>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d130      	bne.n	800413a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	2203      	movs	r2, #3
 80040e4:	409a      	lsls	r2, r3
 80040e6:	0013      	movs	r3, r2
 80040e8:	43da      	mvns	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	409a      	lsls	r2, r3
 80040fa:	0013      	movs	r3, r2
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410e:	2201      	movs	r2, #1
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	409a      	lsls	r2, r3
 8004114:	0013      	movs	r3, r2
 8004116:	43da      	mvns	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	2201      	movs	r2, #1
 8004126:	401a      	ands	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	409a      	lsls	r2, r3
 800412c:	0013      	movs	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	2b03      	cmp	r3, #3
 8004144:	d017      	beq.n	8004176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	2203      	movs	r2, #3
 8004152:	409a      	lsls	r2, r3
 8004154:	0013      	movs	r3, r2
 8004156:	43da      	mvns	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	0013      	movs	r3, r2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2203      	movs	r2, #3
 800417c:	4013      	ands	r3, r2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d123      	bne.n	80041ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	08da      	lsrs	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3208      	adds	r2, #8
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	58d3      	ldr	r3, [r2, r3]
 800418e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2207      	movs	r2, #7
 8004194:	4013      	ands	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	409a      	lsls	r2, r3
 800419c:	0013      	movs	r3, r2
 800419e:	43da      	mvns	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2107      	movs	r1, #7
 80041ae:	400b      	ands	r3, r1
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	08da      	lsrs	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3208      	adds	r2, #8
 80041c4:	0092      	lsls	r2, r2, #2
 80041c6:	6939      	ldr	r1, [r7, #16]
 80041c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	2203      	movs	r2, #3
 80041d6:	409a      	lsls	r2, r3
 80041d8:	0013      	movs	r3, r2
 80041da:	43da      	mvns	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2203      	movs	r2, #3
 80041e8:	401a      	ands	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	23c0      	movs	r3, #192	; 0xc0
 8004204:	029b      	lsls	r3, r3, #10
 8004206:	4013      	ands	r3, r2
 8004208:	d100      	bne.n	800420c <HAL_GPIO_Init+0x174>
 800420a:	e098      	b.n	800433e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800420c:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_GPIO_Init+0x2c4>)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	3318      	adds	r3, #24
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	589b      	ldr	r3, [r3, r2]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2203      	movs	r2, #3
 800421e:	4013      	ands	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	220f      	movs	r2, #15
 8004224:	409a      	lsls	r2, r3
 8004226:	0013      	movs	r3, r2
 8004228:	43da      	mvns	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	23a0      	movs	r3, #160	; 0xa0
 8004234:	05db      	lsls	r3, r3, #23
 8004236:	429a      	cmp	r2, r3
 8004238:	d019      	beq.n	800426e <HAL_GPIO_Init+0x1d6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a48      	ldr	r2, [pc, #288]	; (8004360 <HAL_GPIO_Init+0x2c8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0x1d2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a47      	ldr	r2, [pc, #284]	; (8004364 <HAL_GPIO_Init+0x2cc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_Init+0x1ce>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a46      	ldr	r2, [pc, #280]	; (8004368 <HAL_GPIO_Init+0x2d0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_Init+0x1ca>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a45      	ldr	r2, [pc, #276]	; (800436c <HAL_GPIO_Init+0x2d4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_Init+0x1c6>
 800425a:	2304      	movs	r3, #4
 800425c:	e008      	b.n	8004270 <HAL_GPIO_Init+0x1d8>
 800425e:	2305      	movs	r3, #5
 8004260:	e006      	b.n	8004270 <HAL_GPIO_Init+0x1d8>
 8004262:	2303      	movs	r3, #3
 8004264:	e004      	b.n	8004270 <HAL_GPIO_Init+0x1d8>
 8004266:	2302      	movs	r3, #2
 8004268:	e002      	b.n	8004270 <HAL_GPIO_Init+0x1d8>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_GPIO_Init+0x1d8>
 800426e:	2300      	movs	r3, #0
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	2103      	movs	r1, #3
 8004274:	400a      	ands	r2, r1
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	4093      	lsls	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004280:	4936      	ldr	r1, [pc, #216]	; (800435c <HAL_GPIO_Init+0x2c4>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3318      	adds	r3, #24
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800428e:	4b33      	ldr	r3, [pc, #204]	; (800435c <HAL_GPIO_Init+0x2c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	43da      	mvns	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	035b      	lsls	r3, r3, #13
 80042a6:	4013      	ands	r3, r2
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_GPIO_Init+0x2c4>)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042b8:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_GPIO_Init+0x2c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	039b      	lsls	r3, r3, #14
 80042d0:	4013      	ands	r3, r2
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042dc:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_GPIO_Init+0x2c4>)
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_GPIO_Init+0x2c4>)
 80042e4:	2384      	movs	r3, #132	; 0x84
 80042e6:	58d3      	ldr	r3, [r2, r3]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	4013      	ands	r3, r2
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <HAL_GPIO_Init+0x2c4>)
 800430a:	2284      	movs	r2, #132	; 0x84
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004310:	4a12      	ldr	r2, [pc, #72]	; (800435c <HAL_GPIO_Init+0x2c4>)
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	58d3      	ldr	r3, [r2, r3]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43da      	mvns	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	025b      	lsls	r3, r3, #9
 800432a:	4013      	ands	r3, r2
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004336:	4909      	ldr	r1, [pc, #36]	; (800435c <HAL_GPIO_Init+0x2c4>)
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	40da      	lsrs	r2, r3
 800434c:	1e13      	subs	r3, r2, #0
 800434e:	d000      	beq.n	8004352 <HAL_GPIO_Init+0x2ba>
 8004350:	e6aa      	b.n	80040a8 <HAL_GPIO_Init+0x10>
  }
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021800 	.word	0x40021800
 8004360:	50000400 	.word	0x50000400
 8004364:	50000800 	.word	0x50000800
 8004368:	50000c00 	.word	0x50000c00
 800436c:	50001000 	.word	0x50001000

08004370 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800437e:	e0ba      	b.n	80044f6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004380:	2201      	movs	r2, #1
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	409a      	lsls	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d100      	bne.n	8004394 <HAL_GPIO_DeInit+0x24>
 8004392:	e0ad      	b.n	80044f0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004394:	4a5d      	ldr	r2, [pc, #372]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3318      	adds	r3, #24
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2203      	movs	r2, #3
 80043a6:	4013      	ands	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	220f      	movs	r2, #15
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	23a0      	movs	r3, #160	; 0xa0
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d019      	beq.n	80043f2 <HAL_GPIO_DeInit+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a53      	ldr	r2, [pc, #332]	; (8004510 <HAL_GPIO_DeInit+0x1a0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_GPIO_DeInit+0x7e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_GPIO_DeInit+0x1a4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00d      	beq.n	80043ea <HAL_GPIO_DeInit+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a51      	ldr	r2, [pc, #324]	; (8004518 <HAL_GPIO_DeInit+0x1a8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <HAL_GPIO_DeInit+0x76>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a50      	ldr	r2, [pc, #320]	; (800451c <HAL_GPIO_DeInit+0x1ac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_GPIO_DeInit+0x72>
 80043de:	2304      	movs	r3, #4
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_DeInit+0x84>
 80043e2:	2305      	movs	r3, #5
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_DeInit+0x84>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_DeInit+0x84>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_DeInit+0x84>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_DeInit+0x84>
 80043f2:	2300      	movs	r3, #0
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	2103      	movs	r1, #3
 80043f8:	400a      	ands	r2, r1
 80043fa:	00d2      	lsls	r2, r2, #3
 80043fc:	4093      	lsls	r3, r2
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d136      	bne.n	8004472 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004404:	4a41      	ldr	r2, [pc, #260]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	58d3      	ldr	r3, [r2, r3]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	43d2      	mvns	r2, r2
 800440e:	493f      	ldr	r1, [pc, #252]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004410:	4013      	ands	r3, r2
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004416:	4a3d      	ldr	r2, [pc, #244]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004418:	2384      	movs	r3, #132	; 0x84
 800441a:	58d3      	ldr	r3, [r2, r3]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	43d2      	mvns	r2, r2
 8004420:	493a      	ldr	r1, [pc, #232]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004422:	4013      	ands	r3, r2
 8004424:	2284      	movs	r2, #132	; 0x84
 8004426:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004428:	4b38      	ldr	r3, [pc, #224]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	43d9      	mvns	r1, r3
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004432:	400a      	ands	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004436:	4b35      	ldr	r3, [pc, #212]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43d9      	mvns	r1, r3
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2203      	movs	r2, #3
 8004448:	4013      	ands	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	220f      	movs	r2, #15
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004454:	4a2d      	ldr	r2, [pc, #180]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3318      	adds	r3, #24
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	589a      	ldr	r2, [r3, r2]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43d9      	mvns	r1, r3
 8004464:	4829      	ldr	r0, [pc, #164]	; (800450c <HAL_GPIO_DeInit+0x19c>)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	400a      	ands	r2, r1
 800446c:	3318      	adds	r3, #24
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2103      	movs	r1, #3
 800447c:	4099      	lsls	r1, r3
 800447e:	000b      	movs	r3, r1
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	58d3      	ldr	r3, [r2, r3]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	2107      	movs	r1, #7
 8004496:	400a      	ands	r2, r1
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	210f      	movs	r1, #15
 800449c:	4091      	lsls	r1, r2
 800449e:	000a      	movs	r2, r1
 80044a0:	43d1      	mvns	r1, r2
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	08d2      	lsrs	r2, r2, #3
 80044a6:	4019      	ands	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3208      	adds	r2, #8
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	0052      	lsls	r2, r2, #1
 80044b8:	2103      	movs	r1, #3
 80044ba:	4091      	lsls	r1, r2
 80044bc:	000a      	movs	r2, r1
 80044be:	43d2      	mvns	r2, r2
 80044c0:	401a      	ands	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2101      	movs	r1, #1
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4091      	lsls	r1, r2
 80044d0:	000a      	movs	r2, r1
 80044d2:	43d2      	mvns	r2, r2
 80044d4:	401a      	ands	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	0052      	lsls	r2, r2, #1
 80044e2:	2103      	movs	r1, #3
 80044e4:	4091      	lsls	r1, r2
 80044e6:	000a      	movs	r2, r1
 80044e8:	43d2      	mvns	r2, r2
 80044ea:	401a      	ands	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
    }

    position++;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3301      	adds	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	40da      	lsrs	r2, r3
 80044fc:	1e13      	subs	r3, r2, #0
 80044fe:	d000      	beq.n	8004502 <HAL_GPIO_DeInit+0x192>
 8004500:	e73e      	b.n	8004380 <HAL_GPIO_DeInit+0x10>
  }
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b006      	add	sp, #24
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021800 	.word	0x40021800
 8004510:	50000400 	.word	0x50000400
 8004514:	50000800 	.word	0x50000800
 8004518:	50000c00 	.word	0x50000c00
 800451c:	50001000 	.word	0x50001000

08004520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	000a      	movs	r2, r1
 800452a:	1cbb      	adds	r3, r7, #2
 800452c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	1cba      	adds	r2, r7, #2
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	4013      	ands	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800453a:	230f      	movs	r3, #15
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e003      	b.n	800454c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004544:	230f      	movs	r3, #15
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800454c:	230f      	movs	r3, #15
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	0008      	movs	r0, r1
 8004564:	0011      	movs	r1, r2
 8004566:	1cbb      	adds	r3, r7, #2
 8004568:	1c02      	adds	r2, r0, #0
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	1c7b      	adds	r3, r7, #1
 800456e:	1c0a      	adds	r2, r1, #0
 8004570:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004572:	1c7b      	adds	r3, r7, #1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800457a:	1cbb      	adds	r3, r7, #2
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004582:	e003      	b.n	800458c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004584:	1cbb      	adds	r3, r7, #2
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	0049      	lsls	r1, r1, #1
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40007000 	.word	0x40007000

080045b0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	000a      	movs	r2, r1
 80045ba:	1cfb      	adds	r3, r7, #3
 80045bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_PWR_EnterSTOPMode+0x68>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2207      	movs	r2, #7
 80045ca:	4393      	bics	r3, r2
 80045cc:	001a      	movs	r2, r3
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_PWR_EnterSTOPMode+0x68>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e005      	b.n	80045e4 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_PWR_EnterSTOPMode+0x68>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_PWR_EnterSTOPMode+0x68>)
 80045de:	2107      	movs	r1, #7
 80045e0:	438a      	bics	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_PWR_EnterSTOPMode+0x6c>)
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_PWR_EnterSTOPMode+0x6c>)
 80045ea:	2104      	movs	r1, #4
 80045ec:	430a      	orrs	r2, r1
 80045ee:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80045f0:	1cfb      	adds	r3, r7, #3
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80045f8:	bf30      	wfi
 80045fa:	e002      	b.n	8004602 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80045fc:	bf40      	sev
    __WFE();
 80045fe:	bf20      	wfe
    __WFE();
 8004600:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004608:	2104      	movs	r1, #4
 800460a:	438a      	bics	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	40007000 	.word	0x40007000
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2207      	movs	r2, #7
 800462a:	4393      	bics	r3, r2
 800462c:	001a      	movs	r2, r3
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004630:	2103      	movs	r1, #3
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800463c:	2104      	movs	r1, #4
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004642:	bf30      	wfi
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40007000 	.word	0x40007000
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004662:	4013      	ands	r3, r2
 8004664:	0019      	movs	r1, r3
 8004666:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	430a      	orrs	r2, r1
 800466c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d11f      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	0013      	movs	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	189b      	adds	r3, r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4912      	ldr	r1, [pc, #72]	; (80046d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004686:	0018      	movs	r0, r3
 8004688:	f7fb fd58 	bl	800013c <__udivsi3>
 800468c:	0003      	movs	r3, r0
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004692:	e008      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b01      	subs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e001      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e009      	b.n	80046ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	401a      	ands	r2, r3
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d0ed      	beq.n	8004694 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b004      	add	sp, #16
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	40007000 	.word	0x40007000
 80046c8:	fffff9ff 	.word	0xfffff9ff
 80046cc:	2000000c 	.word	0x2000000c
 80046d0:	000f4240 	.word	0x000f4240

080046d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	23e0      	movs	r3, #224	; 0xe0
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4013      	ands	r3, r2
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000

080046ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 fb50 	bl	8004da0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2201      	movs	r2, #1
 8004706:	4013      	ands	r3, r2
 8004708:	d100      	bne.n	800470c <HAL_RCC_OscConfig+0x20>
 800470a:	e07c      	b.n	8004806 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470c:	4bc3      	ldr	r3, [pc, #780]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2238      	movs	r2, #56	; 0x38
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004716:	4bc1      	ldr	r3, [pc, #772]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2203      	movs	r2, #3
 800471c:	4013      	ands	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b10      	cmp	r3, #16
 8004724:	d102      	bne.n	800472c <HAL_RCC_OscConfig+0x40>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d002      	beq.n	8004732 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d10b      	bne.n	800474a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004732:	4bba      	ldr	r3, [pc, #744]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	4013      	ands	r3, r2
 800473c:	d062      	beq.n	8004804 <HAL_RCC_OscConfig+0x118>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15e      	bne.n	8004804 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e32a      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	025b      	lsls	r3, r3, #9
 8004752:	429a      	cmp	r2, r3
 8004754:	d107      	bne.n	8004766 <HAL_RCC_OscConfig+0x7a>
 8004756:	4bb1      	ldr	r3, [pc, #708]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4bb0      	ldr	r3, [pc, #704]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	0249      	lsls	r1, r1, #9
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e020      	b.n	80047a8 <HAL_RCC_OscConfig+0xbc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	23a0      	movs	r3, #160	; 0xa0
 800476c:	02db      	lsls	r3, r3, #11
 800476e:	429a      	cmp	r2, r3
 8004770:	d10e      	bne.n	8004790 <HAL_RCC_OscConfig+0xa4>
 8004772:	4baa      	ldr	r3, [pc, #680]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4ba9      	ldr	r3, [pc, #676]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004778:	2180      	movs	r1, #128	; 0x80
 800477a:	02c9      	lsls	r1, r1, #11
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	4ba6      	ldr	r3, [pc, #664]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4ba5      	ldr	r3, [pc, #660]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004786:	2180      	movs	r1, #128	; 0x80
 8004788:	0249      	lsls	r1, r1, #9
 800478a:	430a      	orrs	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xbc>
 8004790:	4ba2      	ldr	r3, [pc, #648]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4ba1      	ldr	r3, [pc, #644]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004796:	49a2      	ldr	r1, [pc, #648]	; (8004a20 <HAL_RCC_OscConfig+0x334>)
 8004798:	400a      	ands	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	4b9f      	ldr	r3, [pc, #636]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b9e      	ldr	r3, [pc, #632]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80047a2:	49a0      	ldr	r1, [pc, #640]	; (8004a24 <HAL_RCC_OscConfig+0x338>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d014      	beq.n	80047da <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7ff fb1e 	bl	8003df0 <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ba:	f7ff fb19 	bl	8003df0 <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e2e9      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047cc:	4b93      	ldr	r3, [pc, #588]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	029b      	lsls	r3, r3, #10
 80047d4:	4013      	ands	r3, r2
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0xce>
 80047d8:	e015      	b.n	8004806 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7ff fb09 	bl	8003df0 <HAL_GetTick>
 80047de:	0003      	movs	r3, r0
 80047e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e4:	f7ff fb04 	bl	8003df0 <HAL_GetTick>
 80047e8:	0002      	movs	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	; 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e2d4      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f6:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	4013      	ands	r3, r2
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0xf8>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2202      	movs	r2, #2
 800480c:	4013      	ands	r3, r2
 800480e:	d100      	bne.n	8004812 <HAL_RCC_OscConfig+0x126>
 8004810:	e099      	b.n	8004946 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004812:	4b82      	ldr	r3, [pc, #520]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2238      	movs	r2, #56	; 0x38
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800481c:	4b7f      	ldr	r3, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2203      	movs	r2, #3
 8004822:	4013      	ands	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d102      	bne.n	8004832 <HAL_RCC_OscConfig+0x146>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d002      	beq.n	8004838 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d135      	bne.n	80048a4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004838:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4013      	ands	r3, r2
 8004842:	d005      	beq.n	8004850 <HAL_RCC_OscConfig+0x164>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e2a7      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a74      	ldr	r2, [pc, #464]	; (8004a28 <HAL_RCC_OscConfig+0x33c>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	4b6e      	ldr	r3, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d112      	bne.n	8004892 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6e      	ldr	r2, [pc, #440]	; (8004a2c <HAL_RCC_OscConfig+0x340>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0adb      	lsrs	r3, r3, #11
 8004886:	2207      	movs	r2, #7
 8004888:	4013      	ands	r3, r2
 800488a:	4a69      	ldr	r2, [pc, #420]	; (8004a30 <HAL_RCC_OscConfig+0x344>)
 800488c:	40da      	lsrs	r2, r3
 800488e:	4b69      	ldr	r3, [pc, #420]	; (8004a34 <HAL_RCC_OscConfig+0x348>)
 8004890:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004892:	4b69      	ldr	r3, [pc, #420]	; (8004a38 <HAL_RCC_OscConfig+0x34c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff fa4e 	bl	8003d38 <HAL_InitTick>
 800489c:	1e03      	subs	r3, r0, #0
 800489e:	d051      	beq.n	8004944 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e27d      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d030      	beq.n	800490e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048ac:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a5e      	ldr	r2, [pc, #376]	; (8004a2c <HAL_RCC_OscConfig+0x340>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	0019      	movs	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	0049      	lsls	r1, r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7ff fa8f 	bl	8003df0 <HAL_GetTick>
 80048d2:	0003      	movs	r3, r0
 80048d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7ff fa8a 	bl	8003df0 <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e25a      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4013      	ands	r3, r2
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <HAL_RCC_OscConfig+0x33c>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e01b      	b.n	8004946 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004914:	4949      	ldr	r1, [pc, #292]	; (8004a3c <HAL_RCC_OscConfig+0x350>)
 8004916:	400a      	ands	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7ff fa69 	bl	8003df0 <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004924:	f7ff fa64 	bl	8003df0 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e234      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004936:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4013      	ands	r3, r2
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x238>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004944:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2208      	movs	r2, #8
 800494c:	4013      	ands	r3, r2
 800494e:	d047      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2238      	movs	r2, #56	; 0x38
 8004956:	4013      	ands	r3, r2
 8004958:	2b18      	cmp	r3, #24
 800495a:	d10a      	bne.n	8004972 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800495c:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	2202      	movs	r2, #2
 8004962:	4013      	ands	r3, r2
 8004964:	d03c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2f4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d138      	bne.n	80049e0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e216      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 800497c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800497e:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004980:	2101      	movs	r1, #1
 8004982:	430a      	orrs	r2, r1
 8004984:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7ff fa33 	bl	8003df0 <HAL_GetTick>
 800498a:	0003      	movs	r3, r0
 800498c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7ff fa2e 	bl	8003df0 <HAL_GetTick>
 8004994:	0002      	movs	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1fe      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a2:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	d0f1      	beq.n	8004990 <HAL_RCC_OscConfig+0x2a4>
 80049ac:	e018      	b.n	80049e0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80049b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80049b4:	2101      	movs	r1, #1
 80049b6:	438a      	bics	r2, r1
 80049b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7ff fa19 	bl	8003df0 <HAL_GetTick>
 80049be:	0003      	movs	r3, r0
 80049c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7ff fa14 	bl	8003df0 <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e1e4      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	2202      	movs	r2, #2
 80049dc:	4013      	ands	r3, r2
 80049de:	d1f1      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2204      	movs	r2, #4
 80049e6:	4013      	ands	r3, r2
 80049e8:	d100      	bne.n	80049ec <HAL_RCC_OscConfig+0x300>
 80049ea:	e0c7      	b.n	8004b7c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ec:	231f      	movs	r3, #31
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2238      	movs	r2, #56	; 0x38
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d11f      	bne.n	8004a40 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCC_OscConfig+0x330>)
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d100      	bne.n	8004a0c <HAL_RCC_OscConfig+0x320>
 8004a0a:	e0b7      	b.n	8004b7c <HAL_RCC_OscConfig+0x490>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d000      	beq.n	8004a16 <HAL_RCC_OscConfig+0x32a>
 8004a14:	e0b2      	b.n	8004b7c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1c2      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	fffeffff 	.word	0xfffeffff
 8004a24:	fffbffff 	.word	0xfffbffff
 8004a28:	ffff80ff 	.word	0xffff80ff
 8004a2c:	ffffc7ff 	.word	0xffffc7ff
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a40:	4bb5      	ldr	r3, [pc, #724]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	055b      	lsls	r3, r3, #21
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_OscConfig+0x364>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x366>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d011      	beq.n	8004a7a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	4bb0      	ldr	r3, [pc, #704]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5a:	4baf      	ldr	r3, [pc, #700]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	0549      	lsls	r1, r1, #21
 8004a60:	430a      	orrs	r2, r1
 8004a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a64:	4bac      	ldr	r3, [pc, #688]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	055b      	lsls	r3, r3, #21
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004a72:	231f      	movs	r3, #31
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7a:	4ba8      	ldr	r3, [pc, #672]	; (8004d1c <HAL_RCC_OscConfig+0x630>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a86:	4ba5      	ldr	r3, [pc, #660]	; (8004d1c <HAL_RCC_OscConfig+0x630>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4ba4      	ldr	r3, [pc, #656]	; (8004d1c <HAL_RCC_OscConfig+0x630>)
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	0049      	lsls	r1, r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004a94:	f7ff f9ac 	bl	8003df0 <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7ff f9a7 	bl	8003df0 <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e177      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab0:	4b9a      	ldr	r3, [pc, #616]	; (8004d1c <HAL_RCC_OscConfig+0x630>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3e6>
 8004ac4:	4b94      	ldr	r3, [pc, #592]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ac8:	4b93      	ldr	r3, [pc, #588]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004aca:	2101      	movs	r1, #1
 8004acc:	430a      	orrs	r2, r1
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ad0:	e01c      	b.n	8004b0c <HAL_RCC_OscConfig+0x420>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x408>
 8004ada:	4b8f      	ldr	r3, [pc, #572]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ade:	4b8e      	ldr	r3, [pc, #568]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ae6:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aea:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	430a      	orrs	r2, r1
 8004af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004af2:	e00b      	b.n	8004b0c <HAL_RCC_OscConfig+0x420>
 8004af4:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004af8:	4b87      	ldr	r3, [pc, #540]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	438a      	bics	r2, r1
 8004afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b00:	4b85      	ldr	r3, [pc, #532]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b04:	4b84      	ldr	r3, [pc, #528]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b06:	2104      	movs	r1, #4
 8004b08:	438a      	bics	r2, r1
 8004b0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d014      	beq.n	8004b3e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7ff f96c 	bl	8003df0 <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1c:	e009      	b.n	8004b32 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7ff f967 	bl	8003df0 <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <HAL_RCC_OscConfig+0x634>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e136      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b32:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	2202      	movs	r2, #2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x432>
 8004b3c:	e013      	b.n	8004b66 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7ff f957 	bl	8003df0 <HAL_GetTick>
 8004b42:	0003      	movs	r3, r0
 8004b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b46:	e009      	b.n	8004b5c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7ff f952 	bl	8003df0 <HAL_GetTick>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a73      	ldr	r2, [pc, #460]	; (8004d20 <HAL_RCC_OscConfig+0x634>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e121      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b5c:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b66:	231f      	movs	r3, #31
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b69      	ldr	r3, [pc, #420]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b74:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b76:	496b      	ldr	r1, [pc, #428]	; (8004d24 <HAL_RCC_OscConfig+0x638>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2220      	movs	r2, #32
 8004b82:	4013      	ands	r3, r2
 8004b84:	d039      	beq.n	8004bfa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01b      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b8e:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004b94:	2180      	movs	r1, #128	; 0x80
 8004b96:	03c9      	lsls	r1, r1, #15
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7ff f928 	bl	8003df0 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba6:	f7ff f923 	bl	8003df0 <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e0f3      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004bb8:	4b57      	ldr	r3, [pc, #348]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4ba>
 8004bc4:	e019      	b.n	8004bfa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bc6:	4b54      	ldr	r3, [pc, #336]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004bcc:	4956      	ldr	r1, [pc, #344]	; (8004d28 <HAL_RCC_OscConfig+0x63c>)
 8004bce:	400a      	ands	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd2:	f7ff f90d 	bl	8003df0 <HAL_GetTick>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bdc:	f7ff f908 	bl	8003df0 <HAL_GetTick>
 8004be0:	0002      	movs	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0d8      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bee:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d100      	bne.n	8004c04 <HAL_RCC_OscConfig+0x518>
 8004c02:	e0cc      	b.n	8004d9e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c04:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2238      	movs	r2, #56	; 0x38
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d100      	bne.n	8004c12 <HAL_RCC_OscConfig+0x526>
 8004c10:	e07b      	b.n	8004d0a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d156      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c20:	4942      	ldr	r1, [pc, #264]	; (8004d2c <HAL_RCC_OscConfig+0x640>)
 8004c22:	400a      	ands	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7ff f8e3 	bl	8003df0 <HAL_GetTick>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c30:	f7ff f8de 	bl	8003df0 <HAL_GetTick>
 8004c34:	0002      	movs	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0ae      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c42:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	049b      	lsls	r3, r3, #18
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c4e:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a37      	ldr	r2, [pc, #220]	; (8004d30 <HAL_RCC_OscConfig+0x644>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c82:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c88:	2180      	movs	r1, #128	; 0x80
 8004c8a:	0449      	lsls	r1, r1, #17
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004c96:	2180      	movs	r1, #128	; 0x80
 8004c98:	0549      	lsls	r1, r1, #21
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7ff f8a7 	bl	8003df0 <HAL_GetTick>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7ff f8a2 	bl	8003df0 <HAL_GetTick>
 8004cac:	0002      	movs	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e072      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	049b      	lsls	r3, r3, #18
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x5bc>
 8004cc6:	e06a      	b.n	8004d9e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004cce:	4917      	ldr	r1, [pc, #92]	; (8004d2c <HAL_RCC_OscConfig+0x640>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7ff f88c 	bl	8003df0 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cde:	f7ff f887 	bl	8003df0 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e057      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	049b      	lsls	r3, r3, #18
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_RCC_OscConfig+0x62c>)
 8004d02:	490c      	ldr	r1, [pc, #48]	; (8004d34 <HAL_RCC_OscConfig+0x648>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	e049      	b.n	8004d9e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d112      	bne.n	8004d38 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e044      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	00001388 	.word	0x00001388
 8004d24:	efffffff 	.word	0xefffffff
 8004d28:	ffbfffff 	.word	0xffbfffff
 8004d2c:	feffffff 	.word	0xfeffffff
 8004d30:	11c1808c 	.word	0x11c1808c
 8004d34:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d38:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCC_OscConfig+0x6bc>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2203      	movs	r2, #3
 8004d42:	401a      	ands	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d126      	bne.n	8004d9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2270      	movs	r2, #112	; 0x70
 8004d50:	401a      	ands	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11f      	bne.n	8004d9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	23fe      	movs	r3, #254	; 0xfe
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	401a      	ands	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d116      	bne.n	8004d9a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	23f8      	movs	r3, #248	; 0xf8
 8004d70:	039b      	lsls	r3, r3, #14
 8004d72:	401a      	ands	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d10e      	bne.n	8004d9a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	23e0      	movs	r3, #224	; 0xe0
 8004d80:	051b      	lsls	r3, r3, #20
 8004d82:	401a      	ands	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	0f5b      	lsrs	r3, r3, #29
 8004d90:	075a      	lsls	r2, r3, #29
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b008      	add	sp, #32
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000

08004dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0e9      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d91e      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2207      	movs	r2, #7
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	4b70      	ldr	r3, [pc, #448]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004de0:	f7ff f806 	bl	8003df0 <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004de8:	e009      	b.n	8004dfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dea:	f7ff f801 	bl	8003df0 <HAL_GetTick>
 8004dee:	0002      	movs	r2, r0
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0ca      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dfe:	4b67      	ldr	r3, [pc, #412]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2207      	movs	r2, #7
 8004e04:	4013      	ands	r3, r2
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1ee      	bne.n	8004dea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2202      	movs	r2, #2
 8004e12:	4013      	ands	r3, r2
 8004e14:	d015      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d006      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e20:	4b60      	ldr	r3, [pc, #384]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4b5f      	ldr	r3, [pc, #380]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e26:	21e0      	movs	r1, #224	; 0xe0
 8004e28:	01c9      	lsls	r1, r1, #7
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2e:	4b5d      	ldr	r3, [pc, #372]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	4a5d      	ldr	r2, [pc, #372]	; (8004fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2201      	movs	r2, #1
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d057      	beq.n	8004efc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e54:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d12b      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e097      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	049b      	lsls	r3, r3, #18
 8004e74:	4013      	ands	r3, r2
 8004e76:	d11f      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e08b      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e84:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d113      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e07f      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e9c:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e074      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	2202      	movs	r2, #2
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e06d      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ecc:	f7fe ff90 	bl	8003df0 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed4:	e009      	b.n	8004eea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed6:	f7fe ff8b 	bl	8003df0 <HAL_GetTick>
 8004eda:	0002      	movs	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e054      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2238      	movs	r2, #56	; 0x38
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1ec      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2207      	movs	r2, #7
 8004f02:	4013      	ands	r3, r2
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d21e      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2207      	movs	r2, #7
 8004f10:	4393      	bics	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f1c:	f7fe ff68 	bl	8003df0 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f24:	e009      	b.n	8004f3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f26:	f7fe ff63 	bl	8003df0 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e02c      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_RCC_ClockConfig+0x1f0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2207      	movs	r2, #7
 8004f40:	4013      	ands	r3, r2
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d1ee      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <HAL_RCC_ClockConfig+0x200>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004f66:	f000 f829 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f6a:	0001      	movs	r1, r0
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	220f      	movs	r2, #15
 8004f74:	401a      	ands	r2, r3
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <HAL_RCC_ClockConfig+0x204>)
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	58d3      	ldr	r3, [r2, r3]
 8004f7c:	221f      	movs	r2, #31
 8004f7e:	4013      	ands	r3, r2
 8004f80:	000a      	movs	r2, r1
 8004f82:	40da      	lsrs	r2, r3
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_ClockConfig+0x208>)
 8004f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_ClockConfig+0x20c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7fe fed3 	bl	8003d38 <HAL_InitTick>
 8004f92:	0003      	movs	r3, r0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b004      	add	sp, #16
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40022000 	.word	0x40022000
 8004fa0:	00001388 	.word	0x00001388
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	fffff0ff 	.word	0xfffff0ff
 8004fac:	ffff8fff 	.word	0xffff8fff
 8004fb0:	08014098 	.word	0x08014098
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	20000010 	.word	0x20000010

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fc2:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2238      	movs	r2, #56	; 0x38
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d10f      	bne.n	8004fec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0adb      	lsrs	r3, r3, #11
 8004fd2:	2207      	movs	r2, #7
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	0013      	movs	r3, r2
 8004fdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	4835      	ldr	r0, [pc, #212]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fe2:	f7fb f8ab 	bl	800013c <__udivsi3>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	e05d      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fec:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2238      	movs	r2, #56	; 0x38
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d102      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <HAL_RCC_GetSysClockFreq+0x100>)
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e054      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2238      	movs	r2, #56	; 0x38
 8005004:	4013      	ands	r3, r2
 8005006:	2b10      	cmp	r3, #16
 8005008:	d138      	bne.n	800507c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800500a:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2203      	movs	r2, #3
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	2207      	movs	r2, #7
 800501c:	4013      	ands	r3, r2
 800501e:	3301      	adds	r3, #1
 8005020:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d10d      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4824      	ldr	r0, [pc, #144]	; (80050bc <HAL_RCC_GetSysClockFreq+0x100>)
 800502c:	f7fb f886 	bl	800013c <__udivsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	0019      	movs	r1, r3
 8005034:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	227f      	movs	r2, #127	; 0x7f
 800503c:	4013      	ands	r3, r2
 800503e:	434b      	muls	r3, r1
 8005040:	617b      	str	r3, [r7, #20]
        break;
 8005042:	e00d      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	481c      	ldr	r0, [pc, #112]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005048:	f7fb f878 	bl	800013c <__udivsi3>
 800504c:	0003      	movs	r3, r0
 800504e:	0019      	movs	r1, r3
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	227f      	movs	r2, #127	; 0x7f
 8005058:	4013      	ands	r3, r2
 800505a:	434b      	muls	r3, r1
 800505c:	617b      	str	r3, [r7, #20]
        break;
 800505e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	0f5b      	lsrs	r3, r3, #29
 8005066:	2207      	movs	r2, #7
 8005068:	4013      	ands	r3, r2
 800506a:	3301      	adds	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7fb f863 	bl	800013c <__udivsi3>
 8005076:	0003      	movs	r3, r0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e015      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2238      	movs	r2, #56	; 0x38
 8005082:	4013      	ands	r3, r2
 8005084:	2b20      	cmp	r3, #32
 8005086:	d103      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2238      	movs	r2, #56	; 0x38
 8005096:	4013      	ands	r3, r2
 8005098:	2b18      	cmp	r3, #24
 800509a:	d103      	bne.n	80050a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800509c:	23fa      	movs	r3, #250	; 0xfa
 800509e:	01db      	lsls	r3, r3, #7
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e001      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050a8:	693b      	ldr	r3, [r7, #16]
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b006      	add	sp, #24
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	40021000 	.word	0x40021000
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	007a1200 	.word	0x007a1200

080050c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c4:	4b02      	ldr	r3, [pc, #8]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050d8:	f7ff fff2 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050dc:	0004      	movs	r4, r0
 80050de:	f7ff faf9 	bl	80046d4 <LL_RCC_GetAPB1Prescaler>
 80050e2:	0003      	movs	r3, r0
 80050e4:	0b1a      	lsrs	r2, r3, #12
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050e8:	0092      	lsls	r2, r2, #2
 80050ea:	58d3      	ldr	r3, [r2, r3]
 80050ec:	221f      	movs	r2, #31
 80050ee:	4013      	ands	r3, r2
 80050f0:	40dc      	lsrs	r4, r3
 80050f2:	0023      	movs	r3, r4
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bdb0      	pop	{r4, r5, r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	080140d8 	.word	0x080140d8

08005100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005108:	2313      	movs	r3, #19
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005110:	2312      	movs	r3, #18
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	029b      	lsls	r3, r3, #10
 8005120:	4013      	ands	r3, r2
 8005122:	d100      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005124:	e0ad      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005126:	2011      	movs	r0, #17
 8005128:	183b      	adds	r3, r7, r0
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	055b      	lsls	r3, r3, #21
 8005136:	4013      	ands	r3, r2
 8005138:	d110      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	4b44      	ldr	r3, [pc, #272]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800513c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513e:	4b43      	ldr	r3, [pc, #268]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	0549      	lsls	r1, r1, #21
 8005144:	430a      	orrs	r2, r1
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800514a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	055b      	lsls	r3, r3, #21
 8005150:	4013      	ands	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	183b      	adds	r3, r7, r0
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515c:	4b3c      	ldr	r3, [pc, #240]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b3b      	ldr	r3, [pc, #236]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	0049      	lsls	r1, r1, #1
 8005166:	430a      	orrs	r2, r1
 8005168:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800516a:	f7fe fe41 	bl	8003df0 <HAL_GetTick>
 800516e:	0003      	movs	r3, r0
 8005170:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005172:	e00b      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005174:	f7fe fe3c 	bl	8003df0 <HAL_GetTick>
 8005178:	0002      	movs	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d904      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005182:	2313      	movs	r3, #19
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2203      	movs	r2, #3
 8005188:	701a      	strb	r2, [r3, #0]
        break;
 800518a:	e005      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800518c:	4b30      	ldr	r3, [pc, #192]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d0ed      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005198:	2313      	movs	r3, #19
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d15e      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051a6:	23c0      	movs	r3, #192	; 0xc0
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4013      	ands	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d014      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	4a24      	ldr	r2, [pc, #144]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051c8:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051cc:	4b1f      	ldr	r3, [pc, #124]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0249      	lsls	r1, r1, #9
 80051d2:	430a      	orrs	r2, r1
 80051d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051da:	4b1c      	ldr	r3, [pc, #112]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051dc:	491e      	ldr	r1, [pc, #120]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80051de:	400a      	ands	r2, r1
 80051e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2201      	movs	r2, #1
 80051ec:	4013      	ands	r3, r2
 80051ee:	d016      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fe fdfe 	bl	8003df0 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f8:	e00c      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fe fdf9 	bl	8003df0 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d904      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800520a:	2313      	movs	r3, #19
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	2203      	movs	r2, #3
 8005210:	701a      	strb	r2, [r3, #0]
            break;
 8005212:	e004      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	2202      	movs	r2, #2
 800521a:	4013      	ands	r3, r2
 800521c:	d0ed      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800521e:	2313      	movs	r3, #19
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800522e:	4013      	ands	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005238:	430a      	orrs	r2, r1
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c
 800523c:	e016      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800523e:	2312      	movs	r3, #18
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	2213      	movs	r2, #19
 8005244:	18ba      	adds	r2, r7, r2
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e00f      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800524c:	40021000 	.word	0x40021000
 8005250:	40007000 	.word	0x40007000
 8005254:	fffffcff 	.word	0xfffffcff
 8005258:	fffeffff 	.word	0xfffeffff
 800525c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	2312      	movs	r3, #18
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	2213      	movs	r2, #19
 8005266:	18ba      	adds	r2, r7, r2
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800526c:	2311      	movs	r3, #17
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4bb6      	ldr	r3, [pc, #728]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800527a:	4bb5      	ldr	r3, [pc, #724]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800527c:	49b5      	ldr	r1, [pc, #724]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800527e:	400a      	ands	r2, r1
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4013      	ands	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800528c:	4bb0      	ldr	r3, [pc, #704]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	2203      	movs	r2, #3
 8005292:	4393      	bics	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4bad      	ldr	r3, [pc, #692]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800529c:	430a      	orrs	r2, r1
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2202      	movs	r2, #2
 80052a6:	4013      	ands	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052aa:	4ba9      	ldr	r3, [pc, #676]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	220c      	movs	r2, #12
 80052b0:	4393      	bics	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	4ba5      	ldr	r3, [pc, #660]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2204      	movs	r2, #4
 80052c4:	4013      	ands	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c8:	4ba1      	ldr	r3, [pc, #644]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	2230      	movs	r2, #48	; 0x30
 80052ce:	4393      	bics	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	4b9e      	ldr	r3, [pc, #632]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2210      	movs	r2, #16
 80052e2:	4013      	ands	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e6:	4b9a      	ldr	r3, [pc, #616]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	4a9b      	ldr	r2, [pc, #620]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	0019      	movs	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80052f6:	430a      	orrs	r2, r1
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	015b      	lsls	r3, r3, #5
 8005302:	4013      	ands	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005306:	4b92      	ldr	r3, [pc, #584]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	4a94      	ldr	r2, [pc, #592]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800530c:	4013      	ands	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	4b8e      	ldr	r3, [pc, #568]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005316:	430a      	orrs	r2, r1
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005326:	4b8a      	ldr	r3, [pc, #552]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	4a8d      	ldr	r2, [pc, #564]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800532c:	4013      	ands	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005334:	4b86      	ldr	r3, [pc, #536]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005336:	430a      	orrs	r2, r1
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4013      	ands	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005346:	4b82      	ldr	r3, [pc, #520]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	4a86      	ldr	r2, [pc, #536]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800534c:	4013      	ands	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005356:	430a      	orrs	r2, r1
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2220      	movs	r2, #32
 8005360:	4013      	ands	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005364:	4b7a      	ldr	r3, [pc, #488]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	4a7f      	ldr	r2, [pc, #508]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	4b77      	ldr	r3, [pc, #476]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005374:	430a      	orrs	r2, r1
 8005376:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2240      	movs	r2, #64	; 0x40
 800537e:	4013      	ands	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005382:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	4a79      	ldr	r2, [pc, #484]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005392:	430a      	orrs	r2, r1
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	01db      	lsls	r3, r3, #7
 800539e:	4013      	ands	r3, r2
 80053a0:	d015      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a2:	4b6b      	ldr	r3, [pc, #428]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	0899      	lsrs	r1, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ae:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053b0:	430a      	orrs	r2, r1
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	429a      	cmp	r2, r3
 80053be:	d106      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053c0:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4b62      	ldr	r3, [pc, #392]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c6:	2180      	movs	r1, #128	; 0x80
 80053c8:	0249      	lsls	r1, r1, #9
 80053ca:	430a      	orrs	r2, r1
 80053cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	4013      	ands	r3, r2
 80053d8:	d009      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053da:	4b5d      	ldr	r3, [pc, #372]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	2240      	movs	r2, #64	; 0x40
 80053e0:	4393      	bics	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ea:	430a      	orrs	r2, r1
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	039b      	lsls	r3, r3, #14
 80053f6:	4013      	ands	r3, r2
 80053f8:	d016      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053fa:	4b55      	ldr	r3, [pc, #340]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	4a5c      	ldr	r2, [pc, #368]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005400:	4013      	ands	r3, r2
 8005402:	0019      	movs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005408:	4b51      	ldr	r3, [pc, #324]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540a:	430a      	orrs	r2, r1
 800540c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	03db      	lsls	r3, r3, #15
 8005416:	429a      	cmp	r2, r3
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800541a:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	0449      	lsls	r1, r1, #17
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	03db      	lsls	r3, r3, #15
 8005430:	4013      	ands	r3, r2
 8005432:	d016      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005434:	4b46      	ldr	r3, [pc, #280]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800543a:	4013      	ands	r3, r2
 800543c:	0019      	movs	r1, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005442:	4b43      	ldr	r3, [pc, #268]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005444:	430a      	orrs	r2, r1
 8005446:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	045b      	lsls	r3, r3, #17
 8005450:	429a      	cmp	r2, r3
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005454:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	0449      	lsls	r1, r1, #17
 800545e:	430a      	orrs	r2, r1
 8005460:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	4013      	ands	r3, r2
 800546c:	d014      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800546e:	4b38      	ldr	r3, [pc, #224]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	2203      	movs	r2, #3
 8005474:	4393      	bics	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1a      	ldr	r2, [r3, #32]
 800547c:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800547e:	430a      	orrs	r2, r1
 8005480:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	4b30      	ldr	r3, [pc, #192]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	0249      	lsls	r1, r1, #9
 8005494:	430a      	orrs	r2, r1
 8005496:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	019b      	lsls	r3, r3, #6
 80054a0:	4013      	ands	r3, r2
 80054a2:	d014      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80054a4:	4b2a      	ldr	r3, [pc, #168]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	220c      	movs	r2, #12
 80054aa:	4393      	bics	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054b4:	430a      	orrs	r2, r1
 80054b6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d106      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	0249      	lsls	r1, r1, #9
 80054ca:	430a      	orrs	r2, r1
 80054cc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	045b      	lsls	r3, r3, #17
 80054d6:	4013      	ands	r3, r2
 80054d8:	d016      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	4a22      	ldr	r2, [pc, #136]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	0449      	lsls	r1, r1, #17
 8005504:	430a      	orrs	r2, r1
 8005506:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	049b      	lsls	r3, r3, #18
 8005510:	4013      	ands	r3, r2
 8005512:	d016      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005524:	430a      	orrs	r2, r1
 8005526:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	429a      	cmp	r2, r3
 8005532:	d106      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0449      	lsls	r1, r1, #17
 800553e:	430a      	orrs	r2, r1
 8005540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005542:	2312      	movs	r3, #18
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b006      	add	sp, #24
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000
 8005554:	efffffff 	.word	0xefffffff
 8005558:	fffff3ff 	.word	0xfffff3ff
 800555c:	fffffcff 	.word	0xfffffcff
 8005560:	fff3ffff 	.word	0xfff3ffff
 8005564:	ffcfffff 	.word	0xffcfffff
 8005568:	ffffcfff 	.word	0xffffcfff
 800556c:	ffff3fff 	.word	0xffff3fff
 8005570:	ffbfffff 	.word	0xffbfffff
 8005574:	feffffff 	.word	0xfeffffff

08005578 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005578:	b5b0      	push	{r4, r5, r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005580:	230f      	movs	r3, #15
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d100      	bne.n	8005590 <HAL_RTC_Init+0x18>
 800558e:	e08c      	b.n	80056aa <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2229      	movs	r2, #41	; 0x29
 8005594:	5c9b      	ldrb	r3, [r3, r2]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2228      	movs	r2, #40	; 0x28
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2288      	movs	r2, #136	; 0x88
 80055a8:	0212      	lsls	r2, r2, #8
 80055aa:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f7fe f83c 	bl	800362c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2229      	movs	r2, #41	; 0x29
 80055b8:	2102      	movs	r1, #2
 80055ba:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2210      	movs	r2, #16
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d062      	beq.n	8005690 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	22ca      	movs	r2, #202	; 0xca
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2253      	movs	r2, #83	; 0x53
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80055da:	250f      	movs	r5, #15
 80055dc:	197c      	adds	r4, r7, r5
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 fbf3 	bl	8005dcc <RTC_EnterInitMode>
 80055e6:	0003      	movs	r3, r0
 80055e8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80055ea:	0028      	movs	r0, r5
 80055ec:	183b      	adds	r3, r7, r0
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d12c      	bne.n	800564e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	492e      	ldr	r1, [pc, #184]	; (80056b8 <HAL_RTC_Init+0x140>)
 8005600:	400a      	ands	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6912      	ldr	r2, [r2, #16]
 800562a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	041a      	lsls	r2, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005640:	183c      	adds	r4, r7, r0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f000 fc03 	bl	8005e50 <RTC_ExitInitMode>
 800564a:	0003      	movs	r3, r0
 800564c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800564e:	230f      	movs	r3, #15
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	00d2      	lsls	r2, r2, #3
 8005664:	08d2      	lsrs	r2, r2, #3
 8005666:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
 800568e:	e003      	b.n	8005698 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005690:	230f      	movs	r3, #15
 8005692:	18fb      	adds	r3, r7, r3
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005698:	230f      	movs	r3, #15
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2229      	movs	r2, #41	; 0x29
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80056aa:	230f      	movs	r3, #15
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	781b      	ldrb	r3, [r3, #0]
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b004      	add	sp, #16
 80056b6:	bdb0      	pop	{r4, r5, r7, pc}
 80056b8:	fb8fffbf 	.word	0xfb8fffbf

080056bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056bc:	b5b0      	push	{r4, r5, r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2228      	movs	r2, #40	; 0x28
 80056cc:	5c9b      	ldrb	r3, [r3, r2]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_RTC_SetTime+0x1a>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e092      	b.n	80057fc <HAL_RTC_SetTime+0x140>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2228      	movs	r2, #40	; 0x28
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2229      	movs	r2, #41	; 0x29
 80056e2:	2102      	movs	r1, #2
 80056e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	22ca      	movs	r2, #202	; 0xca
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2253      	movs	r2, #83	; 0x53
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80056f6:	2513      	movs	r5, #19
 80056f8:	197c      	adds	r4, r7, r5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fb65 	bl	8005dcc <RTC_EnterInitMode>
 8005702:	0003      	movs	r3, r0
 8005704:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005706:	197b      	adds	r3, r7, r5
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d162      	bne.n	80057d4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d125      	bne.n	8005760 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	4013      	ands	r3, r2
 800571e:	d102      	bne.n	8005726 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 fbd4 	bl	8005ed8 <RTC_ByteToBcd2>
 8005730:	0003      	movs	r3, r0
 8005732:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fbcd 	bl	8005ed8 <RTC_ByteToBcd2>
 800573e:	0003      	movs	r3, r0
 8005740:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005742:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	789b      	ldrb	r3, [r3, #2]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fbc5 	bl	8005ed8 <RTC_ByteToBcd2>
 800574e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005750:	0022      	movs	r2, r4
 8005752:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	78db      	ldrb	r3, [r3, #3]
 8005758:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e017      	b.n	8005790 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	4013      	ands	r3, r2
 800576a:	d102      	bne.n	8005772 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800577e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005784:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	491b      	ldr	r1, [pc, #108]	; (8005804 <HAL_RTC_SetTime+0x148>)
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4918      	ldr	r1, [pc, #96]	; (8005808 <HAL_RTC_SetTime+0x14c>)
 80057a8:	400a      	ands	r2, r1
 80057aa:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c4:	2313      	movs	r3, #19
 80057c6:	18fc      	adds	r4, r7, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fb40 	bl	8005e50 <RTC_ExitInitMode>
 80057d0:	0003      	movs	r3, r0
 80057d2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80057dc:	2313      	movs	r3, #19
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2229      	movs	r2, #41	; 0x29
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2228      	movs	r2, #40	; 0x28
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

  return status;
 80057f6:	2313      	movs	r3, #19
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	781b      	ldrb	r3, [r3, #0]
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b006      	add	sp, #24
 8005802:	bdb0      	pop	{r4, r5, r7, pc}
 8005804:	007f7f7f 	.word	0x007f7f7f
 8005808:	fffbffff 	.word	0xfffbffff

0800580c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	045b      	lsls	r3, r3, #17
 800582a:	0c5a      	lsrs	r2, r3, #17
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <HAL_RTC_GetTime+0xb4>)
 8005838:	4013      	ands	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2db      	uxtb	r3, r3
 8005842:	223f      	movs	r2, #63	; 0x3f
 8005844:	4013      	ands	r3, r2
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b2db      	uxtb	r3, r3
 8005852:	227f      	movs	r2, #127	; 0x7f
 8005854:	4013      	ands	r3, r2
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	227f      	movs	r2, #127	; 0x7f
 8005862:	4013      	ands	r3, r2
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	0d9b      	lsrs	r3, r3, #22
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11a      	bne.n	80058b6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 fb4f 	bl	8005f28 <RTC_Bcd2ToByte>
 800588a:	0003      	movs	r3, r0
 800588c:	001a      	movs	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	0018      	movs	r0, r3
 8005898:	f000 fb46 	bl	8005f28 <RTC_Bcd2ToByte>
 800589c:	0003      	movs	r3, r0
 800589e:	001a      	movs	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	789b      	ldrb	r3, [r3, #2]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fb3d 	bl	8005f28 <RTC_Bcd2ToByte>
 80058ae:	0003      	movs	r3, r0
 80058b0:	001a      	movs	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b006      	add	sp, #24
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	007f7f7f 	.word	0x007f7f7f

080058c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058c4:	b5b0      	push	{r4, r5, r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2228      	movs	r2, #40	; 0x28
 80058d4:	5c9b      	ldrb	r3, [r3, r2]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_RTC_SetDate+0x1a>
 80058da:	2302      	movs	r3, #2
 80058dc:	e07e      	b.n	80059dc <HAL_RTC_SetDate+0x118>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2228      	movs	r2, #40	; 0x28
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2229      	movs	r2, #41	; 0x29
 80058ea:	2102      	movs	r1, #2
 80058ec:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10e      	bne.n	8005912 <HAL_RTC_SetDate+0x4e>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	001a      	movs	r2, r3
 80058fa:	2310      	movs	r3, #16
 80058fc:	4013      	ands	r3, r2
 80058fe:	d008      	beq.n	8005912 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2210      	movs	r2, #16
 8005906:	4393      	bics	r3, r2
 8005908:	b2db      	uxtb	r3, r3
 800590a:	330a      	adds	r3, #10
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11c      	bne.n	8005952 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	78db      	ldrb	r3, [r3, #3]
 800591c:	0018      	movs	r0, r3
 800591e:	f000 fadb 	bl	8005ed8 <RTC_ByteToBcd2>
 8005922:	0003      	movs	r3, r0
 8005924:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 fad4 	bl	8005ed8 <RTC_ByteToBcd2>
 8005930:	0003      	movs	r3, r0
 8005932:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005934:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	789b      	ldrb	r3, [r3, #2]
 800593a:	0018      	movs	r0, r3
 800593c:	f000 facc 	bl	8005ed8 <RTC_ByteToBcd2>
 8005940:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005942:	0022      	movs	r2, r4
 8005944:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e00e      	b.n	8005970 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800595e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005964:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	22ca      	movs	r2, #202	; 0xca
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2253      	movs	r2, #83	; 0x53
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005980:	2513      	movs	r5, #19
 8005982:	197c      	adds	r4, r7, r5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	0018      	movs	r0, r3
 8005988:	f000 fa20 	bl	8005dcc <RTC_EnterInitMode>
 800598c:	0003      	movs	r3, r0
 800598e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005990:	0028      	movs	r0, r5
 8005992:	183b      	adds	r3, r7, r0
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4910      	ldr	r1, [pc, #64]	; (80059e4 <HAL_RTC_SetDate+0x120>)
 80059a2:	400a      	ands	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059a6:	183c      	adds	r4, r7, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fa50 	bl	8005e50 <RTC_ExitInitMode>
 80059b0:	0003      	movs	r3, r0
 80059b2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	22ff      	movs	r2, #255	; 0xff
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80059bc:	2313      	movs	r3, #19
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2229      	movs	r2, #41	; 0x29
 80059ca:	2101      	movs	r1, #1
 80059cc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2228      	movs	r2, #40	; 0x28
 80059d2:	2100      	movs	r1, #0
 80059d4:	5499      	strb	r1, [r3, r2]

  return status;
 80059d6:	2313      	movs	r3, #19
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	781b      	ldrb	r3, [r3, #0]
}
 80059dc:	0018      	movs	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	b006      	add	sp, #24
 80059e2:	bdb0      	pop	{r4, r5, r7, pc}
 80059e4:	00ffff3f 	.word	0x00ffff3f

080059e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a21      	ldr	r2, [pc, #132]	; (8005a80 <HAL_RTC_GetDate+0x98>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	221f      	movs	r2, #31
 8005a12:	4013      	ands	r3, r2
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	223f      	movs	r2, #63	; 0x3f
 8005a20:	4013      	ands	r3, r2
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0b5b      	lsrs	r3, r3, #13
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2207      	movs	r2, #7
 8005a30:	4013      	ands	r3, r2
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11a      	bne.n	8005a74 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 fa70 	bl	8005f28 <RTC_Bcd2ToByte>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fa67 	bl	8005f28 <RTC_Bcd2ToByte>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	789b      	ldrb	r3, [r3, #2]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f000 fa5e 	bl	8005f28 <RTC_Bcd2ToByte>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	001a      	movs	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b006      	add	sp, #24
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	00ffff3f 	.word	0x00ffff3f

08005a84 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2228      	movs	r2, #40	; 0x28
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_RTC_SetAlarm_IT+0x1a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e127      	b.n	8005cee <HAL_RTC_SetAlarm_IT+0x26a>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2228      	movs	r2, #40	; 0x28
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2229      	movs	r2, #41	; 0x29
 8005aaa:	2102      	movs	r1, #2
 8005aac:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d136      	bne.n	8005b22 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2240      	movs	r2, #64	; 0x40
 8005abc:	4013      	ands	r3, r2
 8005abe:	d102      	bne.n	8005ac6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 fa04 	bl	8005ed8 <RTC_ByteToBcd2>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f000 f9fd 	bl	8005ed8 <RTC_ByteToBcd2>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ae2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	789b      	ldrb	r3, [r3, #2]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 f9f5 	bl	8005ed8 <RTC_ByteToBcd2>
 8005aee:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005af0:	0022      	movs	r2, r4
 8005af2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	78db      	ldrb	r3, [r3, #3]
 8005af8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005afa:	431a      	orrs	r2, r3
 8005afc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2220      	movs	r2, #32
 8005b02:	5c9b      	ldrb	r3, [r3, r2]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 f9e7 	bl	8005ed8 <RTC_ByteToBcd2>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b0e:	0022      	movs	r2, r4
 8005b10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e022      	b.n	8005b68 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2240      	movs	r2, #64	; 0x40
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d102      	bne.n	8005b34 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b40:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b46:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2120      	movs	r1, #32
 8005b54:	5c5b      	ldrb	r3, [r3, r1]
 8005b56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	22ca      	movs	r2, #202	; 0xca
 8005b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2253      	movs	r2, #83	; 0x53
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d14c      	bne.n	8005c2a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4957      	ldr	r1, [pc, #348]	; (8005cf8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005b9c:	400a      	ands	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	430a      	orrs	r2, r1
 8005bae:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005bb0:	f7fe f91e 	bl	8003df0 <HAL_GetTick>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bb8:	e016      	b.n	8005be8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bba:	f7fe f919 	bl	8003df0 <HAL_GetTick>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad2      	subs	r2, r2, r3
 8005bc4:	23fa      	movs	r3, #250	; 0xfa
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90d      	bls.n	8005be8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2229      	movs	r2, #41	; 0x29
 8005bd8:	2103      	movs	r1, #3
 8005bda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2228      	movs	r2, #40	; 0x28
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e082      	b.n	8005cee <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d0e2      	beq.n	8005bba <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2180      	movs	r1, #128	; 0x80
 8005c10:	0049      	lsls	r1, r1, #1
 8005c12:	430a      	orrs	r2, r1
 8005c14:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	0149      	lsls	r1, r1, #5
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]
 8005c28:	e04b      	b.n	8005cc2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4931      	ldr	r1, [pc, #196]	; (8005cfc <HAL_RTC_SetAlarm_IT+0x278>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2102      	movs	r1, #2
 8005c46:	430a      	orrs	r2, r1
 8005c48:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005c4a:	f7fe f8d1 	bl	8003df0 <HAL_GetTick>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c52:	e016      	b.n	8005c82 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c54:	f7fe f8cc 	bl	8003df0 <HAL_GetTick>
 8005c58:	0002      	movs	r2, r0
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	23fa      	movs	r3, #250	; 0xfa
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d90d      	bls.n	8005c82 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	22ff      	movs	r2, #255	; 0xff
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2229      	movs	r2, #41	; 0x29
 8005c72:	2103      	movs	r1, #3
 8005c74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2228      	movs	r2, #40	; 0x28
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e035      	b.n	8005cee <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d0e2      	beq.n	8005c54 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	0089      	lsls	r1, r1, #2
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	0189      	lsls	r1, r1, #6
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cc2:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	58d3      	ldr	r3, [r2, r3]
 8005cc8:	490d      	ldr	r1, [pc, #52]	; (8005d00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	0312      	lsls	r2, r2, #12
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	2280      	movs	r2, #128	; 0x80
 8005cd2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2229      	movs	r2, #41	; 0x29
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2228      	movs	r2, #40	; 0x28
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b009      	add	sp, #36	; 0x24
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	fffffeff 	.word	0xfffffeff
 8005cfc:	fffffdff 	.word	0xfffffdff
 8005d00:	40021800 	.word	0x40021800

08005d04 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	015b      	lsls	r3, r3, #5
 8005d16:	4013      	ands	r3, r2
 8005d18:	d011      	beq.n	8005d3e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d20:	2201      	movs	r2, #1
 8005d22:	4013      	ands	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2101      	movs	r1, #1
 8005d32:	430a      	orrs	r2, r1
 8005d34:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f7fd fc3b 	bl	80035b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	019b      	lsls	r3, r3, #6
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d011      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d52:	2202      	movs	r2, #2
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2102      	movs	r1, #2
 8005d64:	430a      	orrs	r2, r1
 8005d66:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f961 	bl	8006032 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2229      	movs	r2, #41	; 0x29
 8005d74:	2101      	movs	r1, #1
 8005d76:	5499      	strb	r1, [r3, r2]
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b002      	add	sp, #8
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0e      	ldr	r2, [pc, #56]	; (8005dc8 <HAL_RTC_WaitForSynchro+0x48>)
 8005d8e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005d90:	f7fe f82e 	bl	8003df0 <HAL_GetTick>
 8005d94:	0003      	movs	r3, r0
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005d98:	e00a      	b.n	8005db0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d9a:	f7fe f829 	bl	8003df0 <HAL_GetTick>
 8005d9e:	0002      	movs	r2, r0
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	23fa      	movs	r3, #250	; 0xfa
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d901      	bls.n	8005db0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e006      	b.n	8005dbe <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	4013      	ands	r3, r2
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	0001005f 	.word	0x0001005f

08005dcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005dd4:	230f      	movs	r3, #15
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	4013      	ands	r3, r2
 8005de6:	d12c      	bne.n	8005e42 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2180      	movs	r1, #128	; 0x80
 8005df4:	430a      	orrs	r2, r1
 8005df6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005df8:	f7fd fffa 	bl	8003df0 <HAL_GetTick>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e00:	e014      	b.n	8005e2c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e02:	f7fd fff5 	bl	8003df0 <HAL_GetTick>
 8005e06:	0002      	movs	r2, r0
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	200f      	movs	r0, #15
 8005e0e:	183b      	adds	r3, r7, r0
 8005e10:	1839      	adds	r1, r7, r0
 8005e12:	7809      	ldrb	r1, [r1, #0]
 8005e14:	7019      	strb	r1, [r3, #0]
 8005e16:	23fa      	movs	r3, #250	; 0xfa
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d906      	bls.n	8005e2c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005e1e:	183b      	adds	r3, r7, r0
 8005e20:	2203      	movs	r2, #3
 8005e22:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2229      	movs	r2, #41	; 0x29
 8005e28:	2103      	movs	r1, #3
 8005e2a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	4013      	ands	r3, r2
 8005e36:	d104      	bne.n	8005e42 <RTC_EnterInitMode+0x76>
 8005e38:	230f      	movs	r3, #15
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d1df      	bne.n	8005e02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e42:	230f      	movs	r3, #15
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	781b      	ldrb	r3, [r3, #0]
}
 8005e48:	0018      	movs	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b004      	add	sp, #16
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	240f      	movs	r4, #15
 8005e5a:	193b      	adds	r3, r7, r4
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005e60:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005e66:	2180      	movs	r1, #128	; 0x80
 8005e68:	438a      	bics	r2, r1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e6c:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2220      	movs	r2, #32
 8005e72:	4013      	ands	r3, r2
 8005e74:	d10d      	bne.n	8005e92 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7ff ff81 	bl	8005d80 <HAL_RTC_WaitForSynchro>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d021      	beq.n	8005ec6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2229      	movs	r2, #41	; 0x29
 8005e86:	2103      	movs	r1, #3
 8005e88:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005e8a:	193b      	adds	r3, r7, r4
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e019      	b.n	8005ec6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005e98:	2120      	movs	r1, #32
 8005e9a:	438a      	bics	r2, r1
 8005e9c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7ff ff6d 	bl	8005d80 <HAL_RTC_WaitForSynchro>
 8005ea6:	1e03      	subs	r3, r0, #0
 8005ea8:	d007      	beq.n	8005eba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2229      	movs	r2, #41	; 0x29
 8005eae:	2103      	movs	r1, #3
 8005eb0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005eb2:	230f      	movs	r3, #15
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <RTC_ExitInitMode+0x84>)
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005ec6:	230f      	movs	r3, #15
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	781b      	ldrb	r3, [r3, #0]
}
 8005ecc:	0018      	movs	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b005      	add	sp, #20
 8005ed2:	bd90      	pop	{r4, r7, pc}
 8005ed4:	40002800 	.word	0x40002800

08005ed8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	0002      	movs	r2, r0
 8005ee0:	1dfb      	adds	r3, r7, #7
 8005ee2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005ee8:	230b      	movs	r3, #11
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	1dfa      	adds	r2, r7, #7
 8005eee:	7812      	ldrb	r2, [r2, #0]
 8005ef0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005ef2:	e008      	b.n	8005f06 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005efa:	220b      	movs	r2, #11
 8005efc:	18bb      	adds	r3, r7, r2
 8005efe:	18ba      	adds	r2, r7, r2
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	3a0a      	subs	r2, #10
 8005f04:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005f06:	210b      	movs	r1, #11
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	d8f1      	bhi.n	8005ef4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	187b      	adds	r3, r7, r1
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b2db      	uxtb	r3, r3
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b004      	add	sp, #16
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	0002      	movs	r2, r0
 8005f30:	1dfb      	adds	r3, r7, #7
 8005f32:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005f34:	1dfb      	adds	r3, r7, #7
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	001a      	movs	r2, r3
 8005f3e:	0013      	movs	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	210f      	movs	r1, #15
 8005f52:	400b      	ands	r3, r1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	b2db      	uxtb	r3, r3
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2228      	movs	r2, #40	; 0x28
 8005f6e:	5c9b      	ldrb	r3, [r3, r2]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e024      	b.n	8005fc2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2228      	movs	r2, #40	; 0x28
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2229      	movs	r2, #41	; 0x29
 8005f84:	2102      	movs	r1, #2
 8005f86:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	22ca      	movs	r2, #202	; 0xca
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2253      	movs	r2, #83	; 0x53
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2120      	movs	r1, #32
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2229      	movs	r2, #41	; 0x29
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2228      	movs	r2, #40	; 0x28
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b002      	add	sp, #8
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2228      	movs	r2, #40	; 0x28
 8005fd6:	5c9b      	ldrb	r3, [r3, r2]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e024      	b.n	800602a <HAL_RTCEx_DisableBypassShadow+0x60>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2228      	movs	r2, #40	; 0x28
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2229      	movs	r2, #41	; 0x29
 8005fec:	2102      	movs	r1, #2
 8005fee:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	22ca      	movs	r2, #202	; 0xca
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2253      	movs	r2, #83	; 0x53
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	21df      	movs	r1, #223	; 0xdf
 800600c:	400a      	ands	r2, r1
 800600e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2229      	movs	r2, #41	; 0x29
 800601c:	2101      	movs	r1, #1
 800601e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2228      	movs	r2, #40	; 0x28
 8006024:	2100      	movs	r1, #0
 8006026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b002      	add	sp, #8
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e0a8      	b.n	80061a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	2382      	movs	r3, #130	; 0x82
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	429a      	cmp	r2, r3
 8006068:	d009      	beq.n	800607e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	61da      	str	r2, [r3, #28]
 8006070:	e005      	b.n	800607e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	225d      	movs	r2, #93	; 0x5d
 8006088:	5c9b      	ldrb	r3, [r3, r2]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	225c      	movs	r2, #92	; 0x5c
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0018      	movs	r0, r3
 800609c:	f7fd fb0c 	bl	80036b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	225d      	movs	r2, #93	; 0x5d
 80060a4:	2102      	movs	r1, #2
 80060a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2140      	movs	r1, #64	; 0x40
 80060b4:	438a      	bics	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	23e0      	movs	r3, #224	; 0xe0
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d902      	bls.n	80060ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e002      	b.n	80060d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	015b      	lsls	r3, r3, #5
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	23f0      	movs	r3, #240	; 0xf0
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	429a      	cmp	r2, r3
 80060da:	d008      	beq.n	80060ee <HAL_SPI_Init+0xaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	23e0      	movs	r3, #224	; 0xe0
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	2382      	movs	r3, #130	; 0x82
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	401a      	ands	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6899      	ldr	r1, [r3, #8]
 80060fc:	2384      	movs	r3, #132	; 0x84
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	400b      	ands	r3, r1
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2102      	movs	r1, #2
 800610a:	400b      	ands	r3, r1
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2101      	movs	r1, #1
 8006114:	400b      	ands	r3, r1
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6999      	ldr	r1, [r3, #24]
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	400b      	ands	r3, r1
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2138      	movs	r1, #56	; 0x38
 800612a:	400b      	ands	r3, r1
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	2180      	movs	r1, #128	; 0x80
 8006134:	400b      	ands	r3, r1
 8006136:	431a      	orrs	r2, r3
 8006138:	0011      	movs	r1, r2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	019b      	lsls	r3, r3, #6
 8006142:	401a      	ands	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	2204      	movs	r2, #4
 8006154:	401a      	ands	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2110      	movs	r1, #16
 800615c:	400b      	ands	r3, r1
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006164:	2108      	movs	r1, #8
 8006166:	400b      	ands	r3, r1
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68d9      	ldr	r1, [r3, #12]
 800616e:	23f0      	movs	r3, #240	; 0xf0
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	400b      	ands	r3, r1
 8006174:	431a      	orrs	r2, r3
 8006176:	0011      	movs	r1, r2
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	015b      	lsls	r3, r3, #5
 800617e:	401a      	ands	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4907      	ldr	r1, [pc, #28]	; (80061b0 <HAL_SPI_Init+0x16c>)
 8006194:	400a      	ands	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	225d      	movs	r2, #93	; 0x5d
 80061a2:	2101      	movs	r1, #1
 80061a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b004      	add	sp, #16
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	fffff7ff 	.word	0xfffff7ff

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e04a      	b.n	800625c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	223d      	movs	r2, #61	; 0x3d
 80061ca:	5c9b      	ldrb	r3, [r3, r2]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	223c      	movs	r2, #60	; 0x3c
 80061d6:	2100      	movs	r1, #0
 80061d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fd fab5 	bl	800374c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	223d      	movs	r2, #61	; 0x3d
 80061e6:	2102      	movs	r1, #2
 80061e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	0019      	movs	r1, r3
 80061f4:	0010      	movs	r0, r2
 80061f6:	f000 f9ed 	bl	80065d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2248      	movs	r2, #72	; 0x48
 80061fe:	2101      	movs	r1, #1
 8006200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	223e      	movs	r2, #62	; 0x3e
 8006206:	2101      	movs	r1, #1
 8006208:	5499      	strb	r1, [r3, r2]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	223f      	movs	r2, #63	; 0x3f
 800620e:	2101      	movs	r1, #1
 8006210:	5499      	strb	r1, [r3, r2]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2240      	movs	r2, #64	; 0x40
 8006216:	2101      	movs	r1, #1
 8006218:	5499      	strb	r1, [r3, r2]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2241      	movs	r2, #65	; 0x41
 800621e:	2101      	movs	r1, #1
 8006220:	5499      	strb	r1, [r3, r2]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2242      	movs	r2, #66	; 0x42
 8006226:	2101      	movs	r1, #1
 8006228:	5499      	strb	r1, [r3, r2]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2243      	movs	r2, #67	; 0x43
 800622e:	2101      	movs	r1, #1
 8006230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2244      	movs	r2, #68	; 0x44
 8006236:	2101      	movs	r1, #1
 8006238:	5499      	strb	r1, [r3, r2]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2245      	movs	r2, #69	; 0x45
 800623e:	2101      	movs	r1, #1
 8006240:	5499      	strb	r1, [r3, r2]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2246      	movs	r2, #70	; 0x46
 8006246:	2101      	movs	r1, #1
 8006248:	5499      	strb	r1, [r3, r2]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2247      	movs	r2, #71	; 0x47
 800624e:	2101      	movs	r1, #1
 8006250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	223d      	movs	r2, #61	; 0x3d
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	b002      	add	sp, #8
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	223d      	movs	r2, #61	; 0x3d
 8006270:	5c9b      	ldrb	r3, [r3, r2]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d001      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e047      	b.n	800630c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	223d      	movs	r2, #61	; 0x3d
 8006280:	2102      	movs	r1, #2
 8006282:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2101      	movs	r1, #1
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_TIM_Base_Start_IT+0xb0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d014      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x64>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	05db      	lsls	r3, r3, #23
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d00e      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x64>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIM_Base_Start_IT+0xb4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d009      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x64>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_TIM_Base_Start_IT+0xb8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x64>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIM_Base_Start_IT+0xbc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d116      	bne.n	80062f6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4a15      	ldr	r2, [pc, #84]	; (8006324 <HAL_TIM_Base_Start_IT+0xc0>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d016      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0xa4>
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	025b      	lsls	r3, r3, #9
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d011      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2101      	movs	r1, #1
 80062f0:	430a      	orrs	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	e008      	b.n	8006308 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e000      	b.n	800630a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	0018      	movs	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	b004      	add	sp, #16
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40014000 	.word	0x40014000
 8006324:	00010007 	.word	0x00010007

08006328 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2101      	movs	r1, #1
 800633c:	438a      	bics	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	4a0d      	ldr	r2, [pc, #52]	; (800637c <HAL_TIM_Base_Stop_IT+0x54>)
 8006348:	4013      	ands	r3, r2
 800634a:	d10d      	bne.n	8006368 <HAL_TIM_Base_Stop_IT+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	4a0b      	ldr	r2, [pc, #44]	; (8006380 <HAL_TIM_Base_Stop_IT+0x58>)
 8006354:	4013      	ands	r3, r2
 8006356:	d107      	bne.n	8006368 <HAL_TIM_Base_Stop_IT+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2101      	movs	r1, #1
 8006364:	438a      	bics	r2, r1
 8006366:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	223d      	movs	r2, #61	; 0x3d
 800636c:	2101      	movs	r1, #1
 800636e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	00001111 	.word	0x00001111
 8006380:	00000444 	.word	0x00000444

08006384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2202      	movs	r2, #2
 80063a0:	4013      	ands	r3, r2
 80063a2:	d021      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2202      	movs	r2, #2
 80063a8:	4013      	ands	r3, r2
 80063aa:	d01d      	beq.n	80063e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2203      	movs	r2, #3
 80063b2:	4252      	negs	r2, r2
 80063b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2203      	movs	r2, #3
 80063c4:	4013      	ands	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	0018      	movs	r0, r3
 80063cc:	f000 f8ea 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e007      	b.n	80063e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0018      	movs	r0, r3
 80063d6:	f000 f8dd 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 f8e9 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2204      	movs	r2, #4
 80063ec:	4013      	ands	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2204      	movs	r2, #4
 80063f4:	4013      	ands	r3, r2
 80063f6:	d01e      	beq.n	8006436 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2205      	movs	r2, #5
 80063fe:	4252      	negs	r2, r2
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	23c0      	movs	r3, #192	; 0xc0
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4013      	ands	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0018      	movs	r0, r3
 800641a:	f000 f8c3 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 800641e:	e007      	b.n	8006430 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	0018      	movs	r0, r3
 8006424:	f000 f8b6 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0018      	movs	r0, r3
 800642c:	f000 f8c2 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2208      	movs	r2, #8
 800643a:	4013      	ands	r3, r2
 800643c:	d021      	beq.n	8006482 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2208      	movs	r2, #8
 8006442:	4013      	ands	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2209      	movs	r2, #9
 800644c:	4252      	negs	r2, r2
 800644e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2204      	movs	r2, #4
 8006454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	2203      	movs	r2, #3
 800645e:	4013      	ands	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 f89d 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 800646a:	e007      	b.n	800647c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	0018      	movs	r0, r3
 8006470:	f000 f890 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	0018      	movs	r0, r3
 8006478:	f000 f89c 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2210      	movs	r2, #16
 8006486:	4013      	ands	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2210      	movs	r2, #16
 800648e:	4013      	ands	r3, r2
 8006490:	d01e      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2211      	movs	r2, #17
 8006498:	4252      	negs	r2, r2
 800649a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2208      	movs	r2, #8
 80064a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	23c0      	movs	r3, #192	; 0xc0
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4013      	ands	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f876 	bl	80065a4 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e007      	b.n	80064ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 f869 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 f875 	bl	80065b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2201      	movs	r2, #1
 80064d4:	4013      	ands	r3, r2
 80064d6:	d00c      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	4013      	ands	r3, r2
 80064de:	d008      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2202      	movs	r2, #2
 80064e6:	4252      	negs	r2, r2
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7fd f827 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2280      	movs	r2, #128	; 0x80
 80064f6:	4013      	ands	r3, r2
 80064f8:	d104      	bne.n	8006504 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	019b      	lsls	r3, r3, #6
 8006500:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006502:	d00b      	beq.n	800651c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2280      	movs	r2, #128	; 0x80
 8006508:	4013      	ands	r3, r2
 800650a:	d007      	beq.n	800651c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_TIM_IRQHandler+0x208>)
 8006512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	0018      	movs	r0, r3
 8006518:	f000 f972 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4013      	ands	r3, r2
 8006524:	d00b      	beq.n	800653e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	4013      	ands	r3, r2
 800652c:	d007      	beq.n	800653e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a17      	ldr	r2, [pc, #92]	; (8006590 <HAL_TIM_IRQHandler+0x20c>)
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 f969 	bl	8006810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2240      	movs	r2, #64	; 0x40
 8006542:	4013      	ands	r3, r2
 8006544:	d00c      	beq.n	8006560 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	4013      	ands	r3, r2
 800654c:	d008      	beq.n	8006560 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2241      	movs	r2, #65	; 0x41
 8006554:	4252      	negs	r2, r2
 8006556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	0018      	movs	r0, r3
 800655c:	f000 f832 	bl	80065c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2220      	movs	r2, #32
 8006564:	4013      	ands	r3, r2
 8006566:	d00c      	beq.n	8006582 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	4013      	ands	r3, r2
 800656e:	d008      	beq.n	8006582 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2221      	movs	r2, #33	; 0x21
 8006576:	4252      	negs	r2, r2
 8006578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f000 f937 	bl	80067f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	46bd      	mov	sp, r7
 8006586:	b004      	add	sp, #16
 8006588:	bd80      	pop	{r7, pc}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	ffffdf7f 	.word	0xffffdf7f
 8006590:	fffffeff 	.word	0xfffffeff

08006594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b002      	add	sp, #8
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	46bd      	mov	sp, r7
 80065c0:	b002      	add	sp, #8
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3f      	ldr	r2, [pc, #252]	; (80066e4 <TIM_Base_SetConfig+0x110>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00c      	beq.n	8006606 <TIM_Base_SetConfig+0x32>
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	05db      	lsls	r3, r3, #23
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0x32>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a3b      	ldr	r2, [pc, #236]	; (80066e8 <TIM_Base_SetConfig+0x114>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0x32>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a3a      	ldr	r2, [pc, #232]	; (80066ec <TIM_Base_SetConfig+0x118>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2270      	movs	r2, #112	; 0x70
 800660a:	4393      	bics	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a32      	ldr	r2, [pc, #200]	; (80066e4 <TIM_Base_SetConfig+0x110>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d01c      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	05db      	lsls	r3, r3, #23
 8006626:	429a      	cmp	r2, r3
 8006628:	d017      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <TIM_Base_SetConfig+0x114>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2d      	ldr	r2, [pc, #180]	; (80066ec <TIM_Base_SetConfig+0x118>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00f      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2c      	ldr	r2, [pc, #176]	; (80066f0 <TIM_Base_SetConfig+0x11c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <TIM_Base_SetConfig+0x120>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <TIM_Base_SetConfig+0x124>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_Base_SetConfig+0x86>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <TIM_Base_SetConfig+0x128>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d108      	bne.n	800666c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a28      	ldr	r2, [pc, #160]	; (8006700 <TIM_Base_SetConfig+0x12c>)
 800665e:	4013      	ands	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2280      	movs	r2, #128	; 0x80
 8006670:	4393      	bics	r3, r2
 8006672:	001a      	movs	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <TIM_Base_SetConfig+0x110>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00b      	beq.n	80066b2 <TIM_Base_SetConfig+0xde>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <TIM_Base_SetConfig+0x120>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d007      	beq.n	80066b2 <TIM_Base_SetConfig+0xde>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <TIM_Base_SetConfig+0x124>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_Base_SetConfig+0xde>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <TIM_Base_SetConfig+0x128>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d103      	bne.n	80066ba <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2201      	movs	r2, #1
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d106      	bne.n	80066da <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2201      	movs	r2, #1
 80066d2:	4393      	bics	r3, r2
 80066d4:	001a      	movs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	611a      	str	r2, [r3, #16]
  }
}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	b004      	add	sp, #16
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40002000 	.word	0x40002000
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800
 8006700:	fffffcff 	.word	0xfffffcff

08006704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	223c      	movs	r2, #60	; 0x3c
 8006712:	5c9b      	ldrb	r3, [r3, r2]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006718:	2302      	movs	r3, #2
 800671a:	e05a      	b.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	223c      	movs	r2, #60	; 0x3c
 8006720:	2101      	movs	r1, #1
 8006722:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	223d      	movs	r2, #61	; 0x3d
 8006728:	2102      	movs	r1, #2
 800672a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a26      	ldr	r2, [pc, #152]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800674a:	4013      	ands	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2270      	movs	r2, #112	; 0x70
 800675c:	4393      	bics	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a19      	ldr	r2, [pc, #100]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d014      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	05db      	lsls	r3, r3, #23
 8006784:	429a      	cmp	r2, r3
 8006786:	d00e      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a12      	ldr	r2, [pc, #72]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10c      	bne.n	80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2280      	movs	r2, #128	; 0x80
 80067aa:	4393      	bics	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	223d      	movs	r2, #61	; 0x3d
 80067c4:	2101      	movs	r1, #1
 80067c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	223c      	movs	r2, #60	; 0x3c
 80067cc:	2100      	movs	r1, #0
 80067ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	0018      	movs	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b004      	add	sp, #16
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	ff0fffff 	.word	0xff0fffff
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800
 80067ec:	40014000 	.word	0x40014000

080067f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b002      	add	sp, #8
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b002      	add	sp, #8
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b002      	add	sp, #8
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e046      	b.n	80068c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2288      	movs	r2, #136	; 0x88
 8006836:	589b      	ldr	r3, [r3, r2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d107      	bne.n	800684c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2284      	movs	r2, #132	; 0x84
 8006840:	2100      	movs	r1, #0
 8006842:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0018      	movs	r0, r3
 8006848:	f7fc ffa6 	bl	8003798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2288      	movs	r2, #136	; 0x88
 8006850:	2124      	movs	r1, #36	; 0x24
 8006852:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2101      	movs	r1, #1
 8006860:	438a      	bics	r2, r1
 8006862:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0018      	movs	r0, r3
 8006870:	f000 fd4c 	bl	800730c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 f9f2 	bl	8006c60 <UART_SetConfig>
 800687c:	0003      	movs	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e01c      	b.n	80068c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	490d      	ldr	r1, [pc, #52]	; (80068c8 <HAL_UART_Init+0xa8>)
 8006892:	400a      	ands	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	212a      	movs	r1, #42	; 0x2a
 80068a2:	438a      	bics	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2101      	movs	r1, #1
 80068b2:	430a      	orrs	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 fddb 	bl	8007474 <UART_CheckIdleState>
 80068be:	0003      	movs	r3, r0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b002      	add	sp, #8
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	ffffb7ff 	.word	0xffffb7ff

080068cc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e032      	b.n	8006944 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2288      	movs	r2, #136	; 0x88
 80068e2:	2124      	movs	r1, #36	; 0x24
 80068e4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2101      	movs	r1, #1
 80068f2:	438a      	bics	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f7fd f86d 	bl	80039f0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2290      	movs	r2, #144	; 0x90
 800691a:	2100      	movs	r1, #0
 800691c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2288      	movs	r2, #136	; 0x88
 8006922:	2100      	movs	r1, #0
 8006924:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	228c      	movs	r2, #140	; 0x8c
 800692a:	2100      	movs	r1, #0
 800692c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2284      	movs	r2, #132	; 0x84
 800693e:	2100      	movs	r1, #0
 8006940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b002      	add	sp, #8
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	1dbb      	adds	r3, r7, #6
 800695a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2288      	movs	r2, #136	; 0x88
 8006960:	589b      	ldr	r3, [r3, r2]
 8006962:	2b20      	cmp	r3, #32
 8006964:	d000      	beq.n	8006968 <HAL_UART_Transmit+0x1c>
 8006966:	e090      	b.n	8006a8a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_UART_Transmit+0x2a>
 800696e:	1dbb      	adds	r3, r7, #6
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e088      	b.n	8006a8c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	015b      	lsls	r3, r3, #5
 8006982:	429a      	cmp	r2, r3
 8006984:	d109      	bne.n	800699a <HAL_UART_Transmit+0x4e>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2201      	movs	r2, #1
 8006992:	4013      	ands	r3, r2
 8006994:	d001      	beq.n	800699a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e078      	b.n	8006a8c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2290      	movs	r2, #144	; 0x90
 800699e:	2100      	movs	r1, #0
 80069a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2288      	movs	r2, #136	; 0x88
 80069a6:	2121      	movs	r1, #33	; 0x21
 80069a8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069aa:	f7fd fa21 	bl	8003df0 <HAL_GetTick>
 80069ae:	0003      	movs	r3, r0
 80069b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1dba      	adds	r2, r7, #6
 80069b6:	2154      	movs	r1, #84	; 0x54
 80069b8:	8812      	ldrh	r2, [r2, #0]
 80069ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1dba      	adds	r2, r7, #6
 80069c0:	2156      	movs	r1, #86	; 0x56
 80069c2:	8812      	ldrh	r2, [r2, #0]
 80069c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	2380      	movs	r3, #128	; 0x80
 80069cc:	015b      	lsls	r3, r3, #5
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d108      	bne.n	80069e4 <HAL_UART_Transmit+0x98>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e003      	b.n	80069ec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069ec:	e030      	b.n	8006a50 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	0013      	movs	r3, r2
 80069f8:	2200      	movs	r2, #0
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	f000 fde4 	bl	80075c8 <UART_WaitOnFlagUntilTimeout>
 8006a00:	1e03      	subs	r3, r0, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2288      	movs	r2, #136	; 0x88
 8006a08:	2120      	movs	r1, #32
 8006a0a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e03d      	b.n	8006a8c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	05d2      	lsls	r2, r2, #23
 8006a22:	0dd2      	lsrs	r2, r2, #23
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e007      	b.n	8006a3e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2256      	movs	r2, #86	; 0x56
 8006a42:	5a9b      	ldrh	r3, [r3, r2]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b299      	uxth	r1, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2256      	movs	r2, #86	; 0x56
 8006a4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2256      	movs	r2, #86	; 0x56
 8006a54:	5a9b      	ldrh	r3, [r3, r2]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1c8      	bne.n	80069ee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	0013      	movs	r3, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	f000 fdad 	bl	80075c8 <UART_WaitOnFlagUntilTimeout>
 8006a6e:	1e03      	subs	r3, r0, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2288      	movs	r2, #136	; 0x88
 8006a76:	2120      	movs	r1, #32
 8006a78:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e006      	b.n	8006a8c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2288      	movs	r2, #136	; 0x88
 8006a82:	2120      	movs	r1, #32
 8006a84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b008      	add	sp, #32
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	1dbb      	adds	r3, r7, #6
 8006aa2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	228c      	movs	r2, #140	; 0x8c
 8006aa8:	589b      	ldr	r3, [r3, r2]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d000      	beq.n	8006ab0 <HAL_UART_Receive+0x1c>
 8006aae:	e0d0      	b.n	8006c52 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_UART_Receive+0x2a>
 8006ab6:	1dbb      	adds	r3, r7, #6
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0c8      	b.n	8006c54 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	2380      	movs	r3, #128	; 0x80
 8006ac8:	015b      	lsls	r3, r3, #5
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d109      	bne.n	8006ae2 <HAL_UART_Receive+0x4e>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4013      	ands	r3, r2
 8006adc:	d001      	beq.n	8006ae2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e0b8      	b.n	8006c54 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2290      	movs	r2, #144	; 0x90
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	228c      	movs	r2, #140	; 0x8c
 8006aee:	2122      	movs	r1, #34	; 0x22
 8006af0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af8:	f7fd f97a 	bl	8003df0 <HAL_GetTick>
 8006afc:	0003      	movs	r3, r0
 8006afe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1dba      	adds	r2, r7, #6
 8006b04:	215c      	movs	r1, #92	; 0x5c
 8006b06:	8812      	ldrh	r2, [r2, #0]
 8006b08:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1dba      	adds	r2, r7, #6
 8006b0e:	215e      	movs	r1, #94	; 0x5e
 8006b10:	8812      	ldrh	r2, [r2, #0]
 8006b12:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d10d      	bne.n	8006b3c <HAL_UART_Receive+0xa8>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_UART_Receive+0x9e>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2260      	movs	r2, #96	; 0x60
 8006b2c:	494b      	ldr	r1, [pc, #300]	; (8006c5c <HAL_UART_Receive+0x1c8>)
 8006b2e:	5299      	strh	r1, [r3, r2]
 8006b30:	e02e      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2260      	movs	r2, #96	; 0x60
 8006b36:	21ff      	movs	r1, #255	; 0xff
 8006b38:	5299      	strh	r1, [r3, r2]
 8006b3a:	e029      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10d      	bne.n	8006b60 <HAL_UART_Receive+0xcc>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_UART_Receive+0xc2>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2260      	movs	r2, #96	; 0x60
 8006b50:	21ff      	movs	r1, #255	; 0xff
 8006b52:	5299      	strh	r1, [r3, r2]
 8006b54:	e01c      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2260      	movs	r2, #96	; 0x60
 8006b5a:	217f      	movs	r1, #127	; 0x7f
 8006b5c:	5299      	strh	r1, [r3, r2]
 8006b5e:	e017      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	055b      	lsls	r3, r3, #21
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d10d      	bne.n	8006b88 <HAL_UART_Receive+0xf4>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_UART_Receive+0xea>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2260      	movs	r2, #96	; 0x60
 8006b78:	217f      	movs	r1, #127	; 0x7f
 8006b7a:	5299      	strh	r1, [r3, r2]
 8006b7c:	e008      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2260      	movs	r2, #96	; 0x60
 8006b82:	213f      	movs	r1, #63	; 0x3f
 8006b84:	5299      	strh	r1, [r3, r2]
 8006b86:	e003      	b.n	8006b90 <HAL_UART_Receive+0xfc>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2260      	movs	r2, #96	; 0x60
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006b90:	2312      	movs	r3, #18
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	2160      	movs	r1, #96	; 0x60
 8006b98:	5a52      	ldrh	r2, [r2, r1]
 8006b9a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	015b      	lsls	r3, r3, #5
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d108      	bne.n	8006bba <HAL_UART_Receive+0x126>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e003      	b.n	8006bc2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006bc2:	e03a      	b.n	8006c3a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	0013      	movs	r3, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2120      	movs	r1, #32
 8006bd2:	f000 fcf9 	bl	80075c8 <UART_WaitOnFlagUntilTimeout>
 8006bd6:	1e03      	subs	r3, r0, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	228c      	movs	r2, #140	; 0x8c
 8006bde:	2120      	movs	r1, #32
 8006be0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e036      	b.n	8006c54 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10e      	bne.n	8006c0a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2212      	movs	r2, #18
 8006bf6:	18ba      	adds	r2, r7, r2
 8006bf8:	8812      	ldrh	r2, [r2, #0]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3302      	adds	r3, #2
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e00e      	b.n	8006c28 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2212      	movs	r2, #18
 8006c14:	18ba      	adds	r2, r7, r2
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	225e      	movs	r2, #94	; 0x5e
 8006c2c:	5a9b      	ldrh	r3, [r3, r2]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b299      	uxth	r1, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	225e      	movs	r2, #94	; 0x5e
 8006c38:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	225e      	movs	r2, #94	; 0x5e
 8006c3e:	5a9b      	ldrh	r3, [r3, r2]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1be      	bne.n	8006bc4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	228c      	movs	r2, #140	; 0x8c
 8006c4a:	2120      	movs	r1, #32
 8006c4c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	0018      	movs	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	b008      	add	sp, #32
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	000001ff 	.word	0x000001ff

08006c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b5b0      	push	{r4, r5, r7, lr}
 8006c62:	b090      	sub	sp, #64	; 0x40
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c68:	231a      	movs	r3, #26
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	189b      	adds	r3, r3, r2
 8006c6e:	19db      	adds	r3, r3, r7
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4ac1      	ldr	r2, [pc, #772]	; (8006f98 <UART_SetConfig+0x338>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	0019      	movs	r1, r3
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4abc      	ldr	r2, [pc, #752]	; (8006f9c <UART_SetConfig+0x33c>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	0018      	movs	r0, r3
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	68d9      	ldr	r1, [r3, #12]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4ab6      	ldr	r2, [pc, #728]	; (8006fa0 <UART_SetConfig+0x340>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <UART_SetConfig+0x80>
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4ab4      	ldr	r2, [pc, #720]	; (8006fa4 <UART_SetConfig+0x344>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4ab0      	ldr	r2, [pc, #704]	; (8006fa8 <UART_SetConfig+0x348>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	0019      	movs	r1, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	220f      	movs	r2, #15
 8006cfe:	4393      	bics	r3, r2
 8006d00:	0018      	movs	r0, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4aa5      	ldr	r2, [pc, #660]	; (8006fac <UART_SetConfig+0x34c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d131      	bne.n	8006d7e <UART_SetConfig+0x11e>
 8006d1a:	4ba5      	ldr	r3, [pc, #660]	; (8006fb0 <UART_SetConfig+0x350>)
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	2203      	movs	r2, #3
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d01d      	beq.n	8006d62 <UART_SetConfig+0x102>
 8006d26:	d823      	bhi.n	8006d70 <UART_SetConfig+0x110>
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d00c      	beq.n	8006d46 <UART_SetConfig+0xe6>
 8006d2c:	d820      	bhi.n	8006d70 <UART_SetConfig+0x110>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <UART_SetConfig+0xd8>
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d00e      	beq.n	8006d54 <UART_SetConfig+0xf4>
 8006d36:	e01b      	b.n	8006d70 <UART_SetConfig+0x110>
 8006d38:	231b      	movs	r3, #27
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	189b      	adds	r3, r3, r2
 8006d3e:	19db      	adds	r3, r3, r7
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e154      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006d46:	231b      	movs	r3, #27
 8006d48:	2220      	movs	r2, #32
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	19db      	adds	r3, r3, r7
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e14d      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006d54:	231b      	movs	r3, #27
 8006d56:	2220      	movs	r2, #32
 8006d58:	189b      	adds	r3, r3, r2
 8006d5a:	19db      	adds	r3, r3, r7
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e146      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006d62:	231b      	movs	r3, #27
 8006d64:	2220      	movs	r2, #32
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	19db      	adds	r3, r3, r7
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e13f      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006d70:	231b      	movs	r3, #27
 8006d72:	2220      	movs	r2, #32
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	19db      	adds	r3, r3, r7
 8006d78:	2210      	movs	r2, #16
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e138      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a8c      	ldr	r2, [pc, #560]	; (8006fb4 <UART_SetConfig+0x354>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d131      	bne.n	8006dec <UART_SetConfig+0x18c>
 8006d88:	4b89      	ldr	r3, [pc, #548]	; (8006fb0 <UART_SetConfig+0x350>)
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8c:	220c      	movs	r2, #12
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b0c      	cmp	r3, #12
 8006d92:	d01d      	beq.n	8006dd0 <UART_SetConfig+0x170>
 8006d94:	d823      	bhi.n	8006dde <UART_SetConfig+0x17e>
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d00c      	beq.n	8006db4 <UART_SetConfig+0x154>
 8006d9a:	d820      	bhi.n	8006dde <UART_SetConfig+0x17e>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <UART_SetConfig+0x146>
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d00e      	beq.n	8006dc2 <UART_SetConfig+0x162>
 8006da4:	e01b      	b.n	8006dde <UART_SetConfig+0x17e>
 8006da6:	231b      	movs	r3, #27
 8006da8:	2220      	movs	r2, #32
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	19db      	adds	r3, r3, r7
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e11d      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006db4:	231b      	movs	r3, #27
 8006db6:	2220      	movs	r2, #32
 8006db8:	189b      	adds	r3, r3, r2
 8006dba:	19db      	adds	r3, r3, r7
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e116      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006dc2:	231b      	movs	r3, #27
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	19db      	adds	r3, r3, r7
 8006dca:	2204      	movs	r2, #4
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e10f      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006dd0:	231b      	movs	r3, #27
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	19db      	adds	r3, r3, r7
 8006dd8:	2208      	movs	r2, #8
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e108      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006dde:	231b      	movs	r3, #27
 8006de0:	2220      	movs	r2, #32
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	19db      	adds	r3, r3, r7
 8006de6:	2210      	movs	r2, #16
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e101      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a71      	ldr	r2, [pc, #452]	; (8006fb8 <UART_SetConfig+0x358>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d131      	bne.n	8006e5a <UART_SetConfig+0x1fa>
 8006df6:	4b6e      	ldr	r3, [pc, #440]	; (8006fb0 <UART_SetConfig+0x350>)
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	2230      	movs	r2, #48	; 0x30
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d01d      	beq.n	8006e3e <UART_SetConfig+0x1de>
 8006e02:	d823      	bhi.n	8006e4c <UART_SetConfig+0x1ec>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d00c      	beq.n	8006e22 <UART_SetConfig+0x1c2>
 8006e08:	d820      	bhi.n	8006e4c <UART_SetConfig+0x1ec>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <UART_SetConfig+0x1b4>
 8006e0e:	2b10      	cmp	r3, #16
 8006e10:	d00e      	beq.n	8006e30 <UART_SetConfig+0x1d0>
 8006e12:	e01b      	b.n	8006e4c <UART_SetConfig+0x1ec>
 8006e14:	231b      	movs	r3, #27
 8006e16:	2220      	movs	r2, #32
 8006e18:	189b      	adds	r3, r3, r2
 8006e1a:	19db      	adds	r3, r3, r7
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e0e6      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e22:	231b      	movs	r3, #27
 8006e24:	2220      	movs	r2, #32
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	19db      	adds	r3, r3, r7
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e0df      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e30:	231b      	movs	r3, #27
 8006e32:	2220      	movs	r2, #32
 8006e34:	189b      	adds	r3, r3, r2
 8006e36:	19db      	adds	r3, r3, r7
 8006e38:	2204      	movs	r2, #4
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e0d8      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e3e:	231b      	movs	r3, #27
 8006e40:	2220      	movs	r2, #32
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	19db      	adds	r3, r3, r7
 8006e46:	2208      	movs	r2, #8
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e0d1      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e4c:	231b      	movs	r3, #27
 8006e4e:	2220      	movs	r2, #32
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	19db      	adds	r3, r3, r7
 8006e54:	2210      	movs	r2, #16
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e0ca      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a57      	ldr	r2, [pc, #348]	; (8006fbc <UART_SetConfig+0x35c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d106      	bne.n	8006e72 <UART_SetConfig+0x212>
 8006e64:	231b      	movs	r3, #27
 8006e66:	2220      	movs	r2, #32
 8006e68:	189b      	adds	r3, r3, r2
 8006e6a:	19db      	adds	r3, r3, r7
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e0be      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a52      	ldr	r2, [pc, #328]	; (8006fc0 <UART_SetConfig+0x360>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d106      	bne.n	8006e8a <UART_SetConfig+0x22a>
 8006e7c:	231b      	movs	r3, #27
 8006e7e:	2220      	movs	r2, #32
 8006e80:	189b      	adds	r3, r3, r2
 8006e82:	19db      	adds	r3, r3, r7
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e0b2      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a4d      	ldr	r2, [pc, #308]	; (8006fc4 <UART_SetConfig+0x364>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d106      	bne.n	8006ea2 <UART_SetConfig+0x242>
 8006e94:	231b      	movs	r3, #27
 8006e96:	2220      	movs	r2, #32
 8006e98:	189b      	adds	r3, r3, r2
 8006e9a:	19db      	adds	r3, r3, r7
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e0a6      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <UART_SetConfig+0x340>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d13e      	bne.n	8006f2a <UART_SetConfig+0x2ca>
 8006eac:	4b40      	ldr	r3, [pc, #256]	; (8006fb0 <UART_SetConfig+0x350>)
 8006eae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eb0:	23c0      	movs	r3, #192	; 0xc0
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	22c0      	movs	r2, #192	; 0xc0
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d027      	beq.n	8006f0e <UART_SetConfig+0x2ae>
 8006ebe:	22c0      	movs	r2, #192	; 0xc0
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d82a      	bhi.n	8006f1c <UART_SetConfig+0x2bc>
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	0112      	lsls	r2, r2, #4
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d011      	beq.n	8006ef2 <UART_SetConfig+0x292>
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	0112      	lsls	r2, r2, #4
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d822      	bhi.n	8006f1c <UART_SetConfig+0x2bc>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <UART_SetConfig+0x284>
 8006eda:	2280      	movs	r2, #128	; 0x80
 8006edc:	00d2      	lsls	r2, r2, #3
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <UART_SetConfig+0x2a0>
 8006ee2:	e01b      	b.n	8006f1c <UART_SetConfig+0x2bc>
 8006ee4:	231b      	movs	r3, #27
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e07e      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006ef2:	231b      	movs	r3, #27
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	189b      	adds	r3, r3, r2
 8006ef8:	19db      	adds	r3, r3, r7
 8006efa:	2202      	movs	r2, #2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e077      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f00:	231b      	movs	r3, #27
 8006f02:	2220      	movs	r2, #32
 8006f04:	189b      	adds	r3, r3, r2
 8006f06:	19db      	adds	r3, r3, r7
 8006f08:	2204      	movs	r2, #4
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e070      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f0e:	231b      	movs	r3, #27
 8006f10:	2220      	movs	r2, #32
 8006f12:	189b      	adds	r3, r3, r2
 8006f14:	19db      	adds	r3, r3, r7
 8006f16:	2208      	movs	r2, #8
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e069      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f1c:	231b      	movs	r3, #27
 8006f1e:	2220      	movs	r2, #32
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	19db      	adds	r3, r3, r7
 8006f24:	2210      	movs	r2, #16
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	e062      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <UART_SetConfig+0x344>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d157      	bne.n	8006fe4 <UART_SetConfig+0x384>
 8006f34:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <UART_SetConfig+0x350>)
 8006f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f38:	23c0      	movs	r3, #192	; 0xc0
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	22c0      	movs	r2, #192	; 0xc0
 8006f40:	0092      	lsls	r2, r2, #2
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d040      	beq.n	8006fc8 <UART_SetConfig+0x368>
 8006f46:	22c0      	movs	r2, #192	; 0xc0
 8006f48:	0092      	lsls	r2, r2, #2
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d843      	bhi.n	8006fd6 <UART_SetConfig+0x376>
 8006f4e:	2280      	movs	r2, #128	; 0x80
 8006f50:	0092      	lsls	r2, r2, #2
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d011      	beq.n	8006f7a <UART_SetConfig+0x31a>
 8006f56:	2280      	movs	r2, #128	; 0x80
 8006f58:	0092      	lsls	r2, r2, #2
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d83b      	bhi.n	8006fd6 <UART_SetConfig+0x376>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <UART_SetConfig+0x30c>
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	0052      	lsls	r2, r2, #1
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <UART_SetConfig+0x328>
 8006f6a:	e034      	b.n	8006fd6 <UART_SetConfig+0x376>
 8006f6c:	231b      	movs	r3, #27
 8006f6e:	2220      	movs	r2, #32
 8006f70:	189b      	adds	r3, r3, r2
 8006f72:	19db      	adds	r3, r3, r7
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e03a      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f7a:	231b      	movs	r3, #27
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	189b      	adds	r3, r3, r2
 8006f80:	19db      	adds	r3, r3, r7
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e033      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f88:	231b      	movs	r3, #27
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	189b      	adds	r3, r3, r2
 8006f8e:	19db      	adds	r3, r3, r7
 8006f90:	2204      	movs	r2, #4
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e02c      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	cfff69f3 	.word	0xcfff69f3
 8006f9c:	ffffcfff 	.word	0xffffcfff
 8006fa0:	40008000 	.word	0x40008000
 8006fa4:	40008400 	.word	0x40008400
 8006fa8:	11fff4ff 	.word	0x11fff4ff
 8006fac:	40013800 	.word	0x40013800
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	40004400 	.word	0x40004400
 8006fb8:	40004800 	.word	0x40004800
 8006fbc:	40004c00 	.word	0x40004c00
 8006fc0:	40005000 	.word	0x40005000
 8006fc4:	40013c00 	.word	0x40013c00
 8006fc8:	231b      	movs	r3, #27
 8006fca:	2220      	movs	r2, #32
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	19db      	adds	r3, r3, r7
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e00c      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006fd6:	231b      	movs	r3, #27
 8006fd8:	2220      	movs	r2, #32
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	19db      	adds	r3, r3, r7
 8006fde:	2210      	movs	r2, #16
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e005      	b.n	8006ff0 <UART_SetConfig+0x390>
 8006fe4:	231b      	movs	r3, #27
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	189b      	adds	r3, r3, r2
 8006fea:	19db      	adds	r3, r3, r7
 8006fec:	2210      	movs	r2, #16
 8006fee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4ac1      	ldr	r2, [pc, #772]	; (80072fc <UART_SetConfig+0x69c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d005      	beq.n	8007006 <UART_SetConfig+0x3a6>
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4ac0      	ldr	r2, [pc, #768]	; (8007300 <UART_SetConfig+0x6a0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d000      	beq.n	8007006 <UART_SetConfig+0x3a6>
 8007004:	e093      	b.n	800712e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007006:	231b      	movs	r3, #27
 8007008:	2220      	movs	r2, #32
 800700a:	189b      	adds	r3, r3, r2
 800700c:	19db      	adds	r3, r3, r7
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d015      	beq.n	8007040 <UART_SetConfig+0x3e0>
 8007014:	dc18      	bgt.n	8007048 <UART_SetConfig+0x3e8>
 8007016:	2b04      	cmp	r3, #4
 8007018:	d00d      	beq.n	8007036 <UART_SetConfig+0x3d6>
 800701a:	dc15      	bgt.n	8007048 <UART_SetConfig+0x3e8>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <UART_SetConfig+0x3c6>
 8007020:	2b02      	cmp	r3, #2
 8007022:	d005      	beq.n	8007030 <UART_SetConfig+0x3d0>
 8007024:	e010      	b.n	8007048 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007026:	f7fe f855 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 800702a:	0003      	movs	r3, r0
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800702e:	e014      	b.n	800705a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4bb4      	ldr	r3, [pc, #720]	; (8007304 <UART_SetConfig+0x6a4>)
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007034:	e011      	b.n	800705a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd ffc1 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 800703a:	0003      	movs	r3, r0
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703e:	e00c      	b.n	800705a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007046:	e008      	b.n	800705a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800704c:	231a      	movs	r3, #26
 800704e:	2220      	movs	r2, #32
 8007050:	189b      	adds	r3, r3, r2
 8007052:	19db      	adds	r3, r3, r7
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
        break;
 8007058:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	2b00      	cmp	r3, #0
 800705e:	d100      	bne.n	8007062 <UART_SetConfig+0x402>
 8007060:	e135      	b.n	80072ce <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007066:	4ba8      	ldr	r3, [pc, #672]	; (8007308 <UART_SetConfig+0x6a8>)
 8007068:	0052      	lsls	r2, r2, #1
 800706a:	5ad3      	ldrh	r3, [r2, r3]
 800706c:	0019      	movs	r1, r3
 800706e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007070:	f7f9 f864 	bl	800013c <__udivsi3>
 8007074:	0003      	movs	r3, r0
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	0013      	movs	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	189b      	adds	r3, r3, r2
 8007082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007084:	429a      	cmp	r2, r3
 8007086:	d305      	bcc.n	8007094 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007090:	429a      	cmp	r2, r3
 8007092:	d906      	bls.n	80070a2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007094:	231a      	movs	r3, #26
 8007096:	2220      	movs	r2, #32
 8007098:	189b      	adds	r3, r3, r2
 800709a:	19db      	adds	r3, r3, r7
 800709c:	2201      	movs	r2, #1
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	e044      	b.n	800712c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ae:	4b96      	ldr	r3, [pc, #600]	; (8007308 <UART_SetConfig+0x6a8>)
 80070b0:	0052      	lsls	r2, r2, #1
 80070b2:	5ad3      	ldrh	r3, [r2, r3]
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	69b8      	ldr	r0, [r7, #24]
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	f7f9 f9ef 	bl	80004a4 <__aeabi_uldivmod>
 80070c6:	0002      	movs	r2, r0
 80070c8:	000b      	movs	r3, r1
 80070ca:	0e11      	lsrs	r1, r2, #24
 80070cc:	021d      	lsls	r5, r3, #8
 80070ce:	430d      	orrs	r5, r1
 80070d0:	0214      	lsls	r4, r2, #8
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	1900      	adds	r0, r0, r4
 80070e4:	4169      	adcs	r1, r5
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	607b      	str	r3, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f7f9 f9d6 	bl	80004a4 <__aeabi_uldivmod>
 80070f8:	0002      	movs	r2, r0
 80070fa:	000b      	movs	r3, r1
 80070fc:	0013      	movs	r3, r2
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007102:	23c0      	movs	r3, #192	; 0xc0
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	429a      	cmp	r2, r3
 8007108:	d309      	bcc.n	800711e <UART_SetConfig+0x4be>
 800710a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	035b      	lsls	r3, r3, #13
 8007110:	429a      	cmp	r2, r3
 8007112:	d204      	bcs.n	800711e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e006      	b.n	800712c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800711e:	231a      	movs	r3, #26
 8007120:	2220      	movs	r2, #32
 8007122:	189b      	adds	r3, r3, r2
 8007124:	19db      	adds	r3, r3, r7
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800712a:	e0d0      	b.n	80072ce <UART_SetConfig+0x66e>
 800712c:	e0cf      	b.n	80072ce <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	2380      	movs	r3, #128	; 0x80
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	429a      	cmp	r2, r3
 8007138:	d000      	beq.n	800713c <UART_SetConfig+0x4dc>
 800713a:	e070      	b.n	800721e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800713c:	231b      	movs	r3, #27
 800713e:	2220      	movs	r2, #32
 8007140:	189b      	adds	r3, r3, r2
 8007142:	19db      	adds	r3, r3, r7
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b08      	cmp	r3, #8
 8007148:	d015      	beq.n	8007176 <UART_SetConfig+0x516>
 800714a:	dc18      	bgt.n	800717e <UART_SetConfig+0x51e>
 800714c:	2b04      	cmp	r3, #4
 800714e:	d00d      	beq.n	800716c <UART_SetConfig+0x50c>
 8007150:	dc15      	bgt.n	800717e <UART_SetConfig+0x51e>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <UART_SetConfig+0x4fc>
 8007156:	2b02      	cmp	r3, #2
 8007158:	d005      	beq.n	8007166 <UART_SetConfig+0x506>
 800715a:	e010      	b.n	800717e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800715c:	f7fd ffba 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8007160:	0003      	movs	r3, r0
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007164:	e014      	b.n	8007190 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007166:	4b67      	ldr	r3, [pc, #412]	; (8007304 <UART_SetConfig+0x6a4>)
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800716a:	e011      	b.n	8007190 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716c:	f7fd ff26 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8007170:	0003      	movs	r3, r0
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007174:	e00c      	b.n	8007190 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	2380      	movs	r3, #128	; 0x80
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717c:	e008      	b.n	8007190 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007182:	231a      	movs	r3, #26
 8007184:	2220      	movs	r2, #32
 8007186:	189b      	adds	r3, r3, r2
 8007188:	19db      	adds	r3, r3, r7
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
        break;
 800718e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d100      	bne.n	8007198 <UART_SetConfig+0x538>
 8007196:	e09a      	b.n	80072ce <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800719c:	4b5a      	ldr	r3, [pc, #360]	; (8007308 <UART_SetConfig+0x6a8>)
 800719e:	0052      	lsls	r2, r2, #1
 80071a0:	5ad3      	ldrh	r3, [r2, r3]
 80071a2:	0019      	movs	r1, r3
 80071a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071a6:	f7f8 ffc9 	bl	800013c <__udivsi3>
 80071aa:	0003      	movs	r3, r0
 80071ac:	005a      	lsls	r2, r3, #1
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	18d2      	adds	r2, r2, r3
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	0019      	movs	r1, r3
 80071bc:	0010      	movs	r0, r2
 80071be:	f7f8 ffbd 	bl	800013c <__udivsi3>
 80071c2:	0003      	movs	r3, r0
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	d921      	bls.n	8007210 <UART_SetConfig+0x5b0>
 80071cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	025b      	lsls	r3, r3, #9
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d21c      	bcs.n	8007210 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	b29a      	uxth	r2, r3
 80071da:	200e      	movs	r0, #14
 80071dc:	2420      	movs	r4, #32
 80071de:	1903      	adds	r3, r0, r4
 80071e0:	19db      	adds	r3, r3, r7
 80071e2:	210f      	movs	r1, #15
 80071e4:	438a      	bics	r2, r1
 80071e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2207      	movs	r2, #7
 80071f0:	4013      	ands	r3, r2
 80071f2:	b299      	uxth	r1, r3
 80071f4:	1903      	adds	r3, r0, r4
 80071f6:	19db      	adds	r3, r3, r7
 80071f8:	1902      	adds	r2, r0, r4
 80071fa:	19d2      	adds	r2, r2, r7
 80071fc:	8812      	ldrh	r2, [r2, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	1902      	adds	r2, r0, r4
 8007208:	19d2      	adds	r2, r2, r7
 800720a:	8812      	ldrh	r2, [r2, #0]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	e05e      	b.n	80072ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007210:	231a      	movs	r3, #26
 8007212:	2220      	movs	r2, #32
 8007214:	189b      	adds	r3, r3, r2
 8007216:	19db      	adds	r3, r3, r7
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e057      	b.n	80072ce <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721e:	231b      	movs	r3, #27
 8007220:	2220      	movs	r2, #32
 8007222:	189b      	adds	r3, r3, r2
 8007224:	19db      	adds	r3, r3, r7
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b08      	cmp	r3, #8
 800722a:	d015      	beq.n	8007258 <UART_SetConfig+0x5f8>
 800722c:	dc18      	bgt.n	8007260 <UART_SetConfig+0x600>
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00d      	beq.n	800724e <UART_SetConfig+0x5ee>
 8007232:	dc15      	bgt.n	8007260 <UART_SetConfig+0x600>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <UART_SetConfig+0x5de>
 8007238:	2b02      	cmp	r3, #2
 800723a:	d005      	beq.n	8007248 <UART_SetConfig+0x5e8>
 800723c:	e010      	b.n	8007260 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800723e:	f7fd ff49 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8007242:	0003      	movs	r3, r0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007246:	e014      	b.n	8007272 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007248:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <UART_SetConfig+0x6a4>)
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800724c:	e011      	b.n	8007272 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800724e:	f7fd feb5 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8007252:	0003      	movs	r3, r0
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007256:	e00c      	b.n	8007272 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800725e:	e008      	b.n	8007272 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007264:	231a      	movs	r3, #26
 8007266:	2220      	movs	r2, #32
 8007268:	189b      	adds	r3, r3, r2
 800726a:	19db      	adds	r3, r3, r7
 800726c:	2201      	movs	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
        break;
 8007270:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02a      	beq.n	80072ce <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800727c:	4b22      	ldr	r3, [pc, #136]	; (8007308 <UART_SetConfig+0x6a8>)
 800727e:	0052      	lsls	r2, r2, #1
 8007280:	5ad3      	ldrh	r3, [r2, r3]
 8007282:	0019      	movs	r1, r3
 8007284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007286:	f7f8 ff59 	bl	800013c <__udivsi3>
 800728a:	0003      	movs	r3, r0
 800728c:	001a      	movs	r2, r3
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	18d2      	adds	r2, r2, r3
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	0019      	movs	r1, r3
 800729c:	0010      	movs	r0, r2
 800729e:	f7f8 ff4d 	bl	800013c <__udivsi3>
 80072a2:	0003      	movs	r3, r0
 80072a4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d90a      	bls.n	80072c2 <UART_SetConfig+0x662>
 80072ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	025b      	lsls	r3, r3, #9
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d205      	bcs.n	80072c2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80072c2:	231a      	movs	r3, #26
 80072c4:	2220      	movs	r2, #32
 80072c6:	189b      	adds	r3, r3, r2
 80072c8:	19db      	adds	r3, r3, r7
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	226a      	movs	r2, #106	; 0x6a
 80072d2:	2101      	movs	r1, #1
 80072d4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	2268      	movs	r2, #104	; 0x68
 80072da:	2101      	movs	r1, #1
 80072dc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2200      	movs	r2, #0
 80072e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	2200      	movs	r2, #0
 80072e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80072ea:	231a      	movs	r3, #26
 80072ec:	2220      	movs	r2, #32
 80072ee:	189b      	adds	r3, r3, r2
 80072f0:	19db      	adds	r3, r3, r7
 80072f2:	781b      	ldrb	r3, [r3, #0]
}
 80072f4:	0018      	movs	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	b010      	add	sp, #64	; 0x40
 80072fa:	bdb0      	pop	{r4, r5, r7, pc}
 80072fc:	40008000 	.word	0x40008000
 8007300:	40008400 	.word	0x40008400
 8007304:	00f42400 	.word	0x00f42400
 8007308:	080140f8 	.word	0x080140f8

0800730c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	2208      	movs	r2, #8
 800731a:	4013      	ands	r3, r2
 800731c:	d00b      	beq.n	8007336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a4a      	ldr	r2, [pc, #296]	; (8007450 <UART_AdvFeatureConfig+0x144>)
 8007326:	4013      	ands	r3, r2
 8007328:	0019      	movs	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	2201      	movs	r2, #1
 800733c:	4013      	ands	r3, r2
 800733e:	d00b      	beq.n	8007358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4a43      	ldr	r2, [pc, #268]	; (8007454 <UART_AdvFeatureConfig+0x148>)
 8007348:	4013      	ands	r3, r2
 800734a:	0019      	movs	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	2202      	movs	r2, #2
 800735e:	4013      	ands	r3, r2
 8007360:	d00b      	beq.n	800737a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4a3b      	ldr	r2, [pc, #236]	; (8007458 <UART_AdvFeatureConfig+0x14c>)
 800736a:	4013      	ands	r3, r2
 800736c:	0019      	movs	r1, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	2204      	movs	r2, #4
 8007380:	4013      	ands	r3, r2
 8007382:	d00b      	beq.n	800739c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	4a34      	ldr	r2, [pc, #208]	; (800745c <UART_AdvFeatureConfig+0x150>)
 800738c:	4013      	ands	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	2210      	movs	r2, #16
 80073a2:	4013      	ands	r3, r2
 80073a4:	d00b      	beq.n	80073be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a2c      	ldr	r2, [pc, #176]	; (8007460 <UART_AdvFeatureConfig+0x154>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	0019      	movs	r1, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	2220      	movs	r2, #32
 80073c4:	4013      	ands	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	4a25      	ldr	r2, [pc, #148]	; (8007464 <UART_AdvFeatureConfig+0x158>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	0019      	movs	r1, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	2240      	movs	r2, #64	; 0x40
 80073e6:	4013      	ands	r3, r2
 80073e8:	d01d      	beq.n	8007426 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	4a1d      	ldr	r2, [pc, #116]	; (8007468 <UART_AdvFeatureConfig+0x15c>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	0019      	movs	r1, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	035b      	lsls	r3, r3, #13
 800740a:	429a      	cmp	r2, r3
 800740c:	d10b      	bne.n	8007426 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <UART_AdvFeatureConfig+0x160>)
 8007416:	4013      	ands	r3, r2
 8007418:	0019      	movs	r1, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	4013      	ands	r3, r2
 800742e:	d00b      	beq.n	8007448 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <UART_AdvFeatureConfig+0x164>)
 8007438:	4013      	ands	r3, r2
 800743a:	0019      	movs	r1, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
  }
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	46bd      	mov	sp, r7
 800744c:	b002      	add	sp, #8
 800744e:	bd80      	pop	{r7, pc}
 8007450:	ffff7fff 	.word	0xffff7fff
 8007454:	fffdffff 	.word	0xfffdffff
 8007458:	fffeffff 	.word	0xfffeffff
 800745c:	fffbffff 	.word	0xfffbffff
 8007460:	ffffefff 	.word	0xffffefff
 8007464:	ffffdfff 	.word	0xffffdfff
 8007468:	ffefffff 	.word	0xffefffff
 800746c:	ff9fffff 	.word	0xff9fffff
 8007470:	fff7ffff 	.word	0xfff7ffff

08007474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b092      	sub	sp, #72	; 0x48
 8007478:	af02      	add	r7, sp, #8
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2290      	movs	r2, #144	; 0x90
 8007480:	2100      	movs	r1, #0
 8007482:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007484:	f7fc fcb4 	bl	8003df0 <HAL_GetTick>
 8007488:	0003      	movs	r3, r0
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	4013      	ands	r3, r2
 8007496:	2b08      	cmp	r3, #8
 8007498:	d12d      	bne.n	80074f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	2280      	movs	r2, #128	; 0x80
 800749e:	0391      	lsls	r1, r2, #14
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4a47      	ldr	r2, [pc, #284]	; (80075c0 <UART_CheckIdleState+0x14c>)
 80074a4:	9200      	str	r2, [sp, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f000 f88e 	bl	80075c8 <UART_WaitOnFlagUntilTimeout>
 80074ac:	1e03      	subs	r3, r0, #0
 80074ae:	d022      	beq.n	80074f6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b0:	f3ef 8310 	mrs	r3, PRIMASK
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ba:	2301      	movs	r3, #1
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	438a      	bics	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2288      	movs	r2, #136	; 0x88
 80074e6:	2120      	movs	r1, #32
 80074e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2284      	movs	r2, #132	; 0x84
 80074ee:	2100      	movs	r1, #0
 80074f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e060      	b.n	80075b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2204      	movs	r2, #4
 80074fe:	4013      	ands	r3, r2
 8007500:	2b04      	cmp	r3, #4
 8007502:	d146      	bne.n	8007592 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	03d1      	lsls	r1, r2, #15
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <UART_CheckIdleState+0x14c>)
 800750e:	9200      	str	r2, [sp, #0]
 8007510:	2200      	movs	r2, #0
 8007512:	f000 f859 	bl	80075c8 <UART_WaitOnFlagUntilTimeout>
 8007516:	1e03      	subs	r3, r0, #0
 8007518:	d03b      	beq.n	8007592 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751a:	f3ef 8310 	mrs	r3, PRIMASK
 800751e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007520:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	2301      	movs	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4922      	ldr	r1, [pc, #136]	; (80075c4 <UART_CheckIdleState+0x150>)
 800753c:	400a      	ands	r2, r1
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754c:	f3ef 8310 	mrs	r3, PRIMASK
 8007550:	61bb      	str	r3, [r7, #24]
  return(result);
 8007552:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007554:	633b      	str	r3, [r7, #48]	; 0x30
 8007556:	2301      	movs	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f383 8810 	msr	PRIMASK, r3
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2101      	movs	r1, #1
 800756e:	438a      	bics	r2, r1
 8007570:	609a      	str	r2, [r3, #8]
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f383 8810 	msr	PRIMASK, r3
}
 800757c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	228c      	movs	r2, #140	; 0x8c
 8007582:	2120      	movs	r1, #32
 8007584:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2284      	movs	r2, #132	; 0x84
 800758a:	2100      	movs	r1, #0
 800758c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e012      	b.n	80075b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2288      	movs	r2, #136	; 0x88
 8007596:	2120      	movs	r1, #32
 8007598:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	228c      	movs	r2, #140	; 0x8c
 800759e:	2120      	movs	r1, #32
 80075a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2284      	movs	r2, #132	; 0x84
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b010      	add	sp, #64	; 0x40
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	01ffffff 	.word	0x01ffffff
 80075c4:	fffffedf 	.word	0xfffffedf

080075c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	1dfb      	adds	r3, r7, #7
 80075d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d8:	e051      	b.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	3301      	adds	r3, #1
 80075de:	d04e      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e0:	f7fc fc06 	bl	8003df0 <HAL_GetTick>
 80075e4:	0002      	movs	r2, r0
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e051      	b.n	800769e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2204      	movs	r2, #4
 8007602:	4013      	ands	r3, r2
 8007604:	d03b      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b80      	cmp	r3, #128	; 0x80
 800760a:	d038      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d035      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	2208      	movs	r2, #8
 800761a:	4013      	ands	r3, r2
 800761c:	2b08      	cmp	r3, #8
 800761e:	d111      	bne.n	8007644 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2208      	movs	r2, #8
 8007626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f83c 	bl	80076a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2290      	movs	r2, #144	; 0x90
 8007634:	2108      	movs	r1, #8
 8007636:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2284      	movs	r2, #132	; 0x84
 800763c:	2100      	movs	r1, #0
 800763e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e02c      	b.n	800769e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	2380      	movs	r3, #128	; 0x80
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	401a      	ands	r2, r3
 8007650:	2380      	movs	r3, #128	; 0x80
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	429a      	cmp	r2, r3
 8007656:	d112      	bne.n	800767e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2280      	movs	r2, #128	; 0x80
 800765e:	0112      	lsls	r2, r2, #4
 8007660:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	0018      	movs	r0, r3
 8007666:	f000 f81f 	bl	80076a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2290      	movs	r2, #144	; 0x90
 800766e:	2120      	movs	r1, #32
 8007670:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2284      	movs	r2, #132	; 0x84
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e00f      	b.n	800769e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	425a      	negs	r2, r3
 800768e:	4153      	adcs	r3, r2
 8007690:	b2db      	uxtb	r3, r3
 8007692:	001a      	movs	r2, r3
 8007694:	1dfb      	adds	r3, r7, #7
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d09e      	beq.n	80075da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b004      	add	sp, #16
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08e      	sub	sp, #56	; 0x38
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b0:	f3ef 8310 	mrs	r3, PRIMASK
 80076b4:	617b      	str	r3, [r7, #20]
  return(result);
 80076b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	2301      	movs	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f383 8810 	msr	PRIMASK, r3
}
 80076c4:	46c0      	nop			; (mov r8, r8)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4926      	ldr	r1, [pc, #152]	; (800776c <UART_EndRxTransfer+0xc4>)
 80076d2:	400a      	ands	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f383 8810 	msr	PRIMASK, r3
}
 80076e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e2:	f3ef 8310 	mrs	r3, PRIMASK
 80076e6:	623b      	str	r3, [r7, #32]
  return(result);
 80076e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
 80076ec:	2301      	movs	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <UART_EndRxTransfer+0xc8>)
 8007704:	400a      	ands	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d118      	bne.n	800774e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800771c:	f3ef 8310 	mrs	r3, PRIMASK
 8007720:	60bb      	str	r3, [r7, #8]
  return(result);
 8007722:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007726:	2301      	movs	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f383 8810 	msr	PRIMASK, r3
}
 8007730:	46c0      	nop			; (mov r8, r8)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2110      	movs	r1, #16
 800773e:	438a      	bics	r2, r1
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	228c      	movs	r2, #140	; 0x8c
 8007752:	2120      	movs	r1, #32
 8007754:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	46bd      	mov	sp, r7
 8007766:	b00e      	add	sp, #56	; 0x38
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	fffffedf 	.word	0xfffffedf
 8007770:	effffffe 	.word	0xeffffffe

08007774 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2284      	movs	r2, #132	; 0x84
 8007780:	5c9b      	ldrb	r3, [r3, r2]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UARTEx_DisableFifoMode+0x16>
 8007786:	2302      	movs	r3, #2
 8007788:	e027      	b.n	80077da <HAL_UARTEx_DisableFifoMode+0x66>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2284      	movs	r2, #132	; 0x84
 800778e:	2101      	movs	r1, #1
 8007790:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2288      	movs	r2, #136	; 0x88
 8007796:	2124      	movs	r1, #36	; 0x24
 8007798:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2101      	movs	r1, #1
 80077ae:	438a      	bics	r2, r1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2288      	movs	r2, #136	; 0x88
 80077cc:	2120      	movs	r1, #32
 80077ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2284      	movs	r2, #132	; 0x84
 80077d4:	2100      	movs	r1, #0
 80077d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	0018      	movs	r0, r3
 80077dc:	46bd      	mov	sp, r7
 80077de:	b004      	add	sp, #16
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	dfffffff 	.word	0xdfffffff

080077e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2284      	movs	r2, #132	; 0x84
 80077f6:	5c9b      	ldrb	r3, [r3, r2]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e02e      	b.n	800785e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2284      	movs	r2, #132	; 0x84
 8007804:	2101      	movs	r1, #1
 8007806:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2288      	movs	r2, #136	; 0x88
 800780c:	2124      	movs	r1, #36	; 0x24
 800780e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2101      	movs	r1, #1
 8007824:	438a      	bics	r2, r1
 8007826:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	08d9      	lsrs	r1, r3, #3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0018      	movs	r0, r3
 8007840:	f000 f854 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2288      	movs	r2, #136	; 0x88
 8007850:	2120      	movs	r1, #32
 8007852:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2284      	movs	r2, #132	; 0x84
 8007858:	2100      	movs	r1, #0
 800785a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	0018      	movs	r0, r3
 8007860:	46bd      	mov	sp, r7
 8007862:	b004      	add	sp, #16
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2284      	movs	r2, #132	; 0x84
 8007876:	5c9b      	ldrb	r3, [r3, r2]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800787c:	2302      	movs	r3, #2
 800787e:	e02f      	b.n	80078e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2284      	movs	r2, #132	; 0x84
 8007884:	2101      	movs	r1, #1
 8007886:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2288      	movs	r2, #136	; 0x88
 800788c:	2124      	movs	r1, #36	; 0x24
 800788e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2101      	movs	r1, #1
 80078a4:	438a      	bics	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	4a0e      	ldr	r2, [pc, #56]	; (80078e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	0019      	movs	r1, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 f813 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2288      	movs	r2, #136	; 0x88
 80078d2:	2120      	movs	r1, #32
 80078d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2284      	movs	r2, #132	; 0x84
 80078da:	2100      	movs	r1, #0
 80078dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b004      	add	sp, #16
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	f1ffffff 	.word	0xf1ffffff

080078ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d108      	bne.n	800790e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	226a      	movs	r2, #106	; 0x6a
 8007900:	2101      	movs	r1, #1
 8007902:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2268      	movs	r2, #104	; 0x68
 8007908:	2101      	movs	r1, #1
 800790a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800790c:	e043      	b.n	8007996 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800790e:	260f      	movs	r6, #15
 8007910:	19bb      	adds	r3, r7, r6
 8007912:	2208      	movs	r2, #8
 8007914:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007916:	200e      	movs	r0, #14
 8007918:	183b      	adds	r3, r7, r0
 800791a:	2208      	movs	r2, #8
 800791c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	0e5b      	lsrs	r3, r3, #25
 8007926:	b2da      	uxtb	r2, r3
 8007928:	240d      	movs	r4, #13
 800792a:	193b      	adds	r3, r7, r4
 800792c:	2107      	movs	r1, #7
 800792e:	400a      	ands	r2, r1
 8007930:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	0f5b      	lsrs	r3, r3, #29
 800793a:	b2da      	uxtb	r2, r3
 800793c:	250c      	movs	r5, #12
 800793e:	197b      	adds	r3, r7, r5
 8007940:	2107      	movs	r1, #7
 8007942:	400a      	ands	r2, r1
 8007944:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007946:	183b      	adds	r3, r7, r0
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	197a      	adds	r2, r7, r5
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	4914      	ldr	r1, [pc, #80]	; (80079a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007950:	5c8a      	ldrb	r2, [r1, r2]
 8007952:	435a      	muls	r2, r3
 8007954:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007956:	197b      	adds	r3, r7, r5
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800795c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800795e:	0019      	movs	r1, r3
 8007960:	f7f8 fc76 	bl	8000250 <__divsi3>
 8007964:	0003      	movs	r3, r0
 8007966:	b299      	uxth	r1, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	226a      	movs	r2, #106	; 0x6a
 800796c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800796e:	19bb      	adds	r3, r7, r6
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	193a      	adds	r2, r7, r4
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	490a      	ldr	r1, [pc, #40]	; (80079a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007978:	5c8a      	ldrb	r2, [r1, r2]
 800797a:	435a      	muls	r2, r3
 800797c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800797e:	193b      	adds	r3, r7, r4
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4a08      	ldr	r2, [pc, #32]	; (80079a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007984:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007986:	0019      	movs	r1, r3
 8007988:	f7f8 fc62 	bl	8000250 <__divsi3>
 800798c:	0003      	movs	r3, r0
 800798e:	b299      	uxth	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2268      	movs	r2, #104	; 0x68
 8007994:	5299      	strh	r1, [r3, r2]
}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	46bd      	mov	sp, r7
 800799a:	b005      	add	sp, #20
 800799c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	08014110 	.word	0x08014110
 80079a4:	08014118 	.word	0x08014118

080079a8 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b0e4      	sub	sp, #400	; 0x190
 80079ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80079ae:	24c8      	movs	r4, #200	; 0xc8
 80079b0:	193b      	adds	r3, r7, r4
 80079b2:	0018      	movs	r0, r3
 80079b4:	23c6      	movs	r3, #198	; 0xc6
 80079b6:	001a      	movs	r2, r3
 80079b8:	2100      	movs	r1, #0
 80079ba:	f004 f837 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <astronode_send_cfg_sr+0x64>)
 80079c0:	25c8      	movs	r5, #200	; 0xc8
 80079c2:	006d      	lsls	r5, r5, #1
 80079c4:	195b      	adds	r3, r3, r5
 80079c6:	19db      	adds	r3, r3, r7
 80079c8:	0018      	movs	r0, r3
 80079ca:	23c6      	movs	r3, #198	; 0xc6
 80079cc:	001a      	movs	r2, r3
 80079ce:	2100      	movs	r1, #0
 80079d0:	f004 f82c 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	2210      	movs	r2, #16
 80079d8:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 80079da:	003a      	movs	r2, r7
 80079dc:	193b      	adds	r3, r7, r4
 80079de:	0011      	movs	r1, r2
 80079e0:	0018      	movs	r0, r3
 80079e2:	f001 fa4d 	bl	8008e80 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <astronode_send_cfg_sr+0x64>)
 80079e8:	195b      	adds	r3, r3, r5
 80079ea:	19db      	adds	r3, r3, r7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b90      	cmp	r3, #144	; 0x90
 80079f0:	d104      	bne.n	80079fc <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <astronode_send_cfg_sr+0x68>)
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7fb fbbd 	bl	8003174 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 80079fa:	e003      	b.n	8007a04 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <astronode_send_cfg_sr+0x6c>)
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7fb fbb8 	bl	8003174 <send_debug_logs>
}
 8007a04:	46c0      	nop			; (mov r8, r8)
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b064      	add	sp, #400	; 0x190
 8007a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a0c:	fffffe70 	.word	0xfffffe70
 8007a10:	08012b7c 	.word	0x08012b7c
 8007a14:	08012bb0 	.word	0x08012bb0

08007a18 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	b0e7      	sub	sp, #412	; 0x19c
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	0005      	movs	r5, r0
 8007a20:	000c      	movs	r4, r1
 8007a22:	0010      	movs	r0, r2
 8007a24:	0019      	movs	r1, r3
 8007a26:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <astronode_send_cfg_wr+0x13c>)
 8007a28:	26cc      	movs	r6, #204	; 0xcc
 8007a2a:	0076      	lsls	r6, r6, #1
 8007a2c:	199b      	adds	r3, r3, r6
 8007a2e:	19db      	adds	r3, r3, r7
 8007a30:	1c2a      	adds	r2, r5, #0
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	4b48      	ldr	r3, [pc, #288]	; (8007b58 <astronode_send_cfg_wr+0x140>)
 8007a36:	0035      	movs	r5, r6
 8007a38:	195b      	adds	r3, r3, r5
 8007a3a:	19db      	adds	r3, r3, r7
 8007a3c:	1c22      	adds	r2, r4, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	4b46      	ldr	r3, [pc, #280]	; (8007b5c <astronode_send_cfg_wr+0x144>)
 8007a42:	002c      	movs	r4, r5
 8007a44:	191b      	adds	r3, r3, r4
 8007a46:	19db      	adds	r3, r3, r7
 8007a48:	1c02      	adds	r2, r0, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	4b44      	ldr	r3, [pc, #272]	; (8007b60 <astronode_send_cfg_wr+0x148>)
 8007a4e:	191b      	adds	r3, r3, r4
 8007a50:	19db      	adds	r3, r3, r7
 8007a52:	1c0a      	adds	r2, r1, #0
 8007a54:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007a56:	25d0      	movs	r5, #208	; 0xd0
 8007a58:	197b      	adds	r3, r7, r5
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	23c6      	movs	r3, #198	; 0xc6
 8007a5e:	001a      	movs	r2, r3
 8007a60:	2100      	movs	r1, #0
 8007a62:	f003 ffe3 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8007a66:	4b3f      	ldr	r3, [pc, #252]	; (8007b64 <astronode_send_cfg_wr+0x14c>)
 8007a68:	191b      	adds	r3, r3, r4
 8007a6a:	19db      	adds	r3, r3, r7
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	23c6      	movs	r3, #198	; 0xc6
 8007a70:	001a      	movs	r2, r3
 8007a72:	2100      	movs	r1, #0
 8007a74:	f003 ffda 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007a78:	0029      	movs	r1, r5
 8007a7a:	187b      	adds	r3, r7, r1
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007a80:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <astronode_send_cfg_wr+0x13c>)
 8007a82:	191b      	adds	r3, r3, r4
 8007a84:	19db      	adds	r3, r3, r7
 8007a86:	2200      	movs	r2, #0
 8007a88:	569a      	ldrsb	r2, [r3, r2]
 8007a8a:	4b33      	ldr	r3, [pc, #204]	; (8007b58 <astronode_send_cfg_wr+0x140>)
 8007a8c:	191b      	adds	r3, r3, r4
 8007a8e:	19db      	adds	r3, r3, r7
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007a9a:	4b30      	ldr	r3, [pc, #192]	; (8007b5c <astronode_send_cfg_wr+0x144>)
 8007a9c:	191b      	adds	r3, r3, r4
 8007a9e:	19db      	adds	r3, r3, r7
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007aaa:	4b2d      	ldr	r3, [pc, #180]	; (8007b60 <astronode_send_cfg_wr+0x148>)
 8007aac:	191b      	adds	r3, r3, r4
 8007aae:	19db      	adds	r3, r3, r7
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007ac0:	23d4      	movs	r3, #212	; 0xd4
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	2508      	movs	r5, #8
 8007ac6:	195b      	adds	r3, r3, r5
 8007ac8:	19db      	adds	r3, r3, r7
 8007aca:	2200      	movs	r2, #0
 8007acc:	569a      	ldrsb	r2, [r3, r2]
 8007ace:	23d6      	movs	r3, #214	; 0xd6
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	195b      	adds	r3, r3, r5
 8007ad4:	19db      	adds	r3, r3, r7
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007ae0:	23d8      	movs	r3, #216	; 0xd8
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	195b      	adds	r3, r3, r5
 8007ae6:	19db      	adds	r3, r3, r7
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007af2:	23da      	movs	r3, #218	; 0xda
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	195b      	adds	r3, r3, r5
 8007af8:	19db      	adds	r3, r3, r7
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	4313      	orrs	r3, r2
 8007b02:	b25b      	sxtb	r3, r3
 8007b04:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007b0a:	0008      	movs	r0, r1
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	22c4      	movs	r2, #196	; 0xc4
 8007b10:	2103      	movs	r1, #3
 8007b12:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b14:	002b      	movs	r3, r5
 8007b16:	18fa      	adds	r2, r7, r3
 8007b18:	183b      	adds	r3, r7, r0
 8007b1a:	0011      	movs	r1, r2
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f001 f9af 	bl	8008e80 <astronode_transport_send_receive>
 8007b22:	0003      	movs	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d10f      	bne.n	8007b48 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007b28:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <astronode_send_cfg_wr+0x14c>)
 8007b2a:	191b      	adds	r3, r3, r4
 8007b2c:	19db      	adds	r3, r3, r7
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b85      	cmp	r3, #133	; 0x85
 8007b32:	d105      	bne.n	8007b40 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <astronode_send_cfg_wr+0x150>)
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7fb fb1c 	bl	8003174 <send_debug_logs>
            return true ;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e004      	b.n	8007b4a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <astronode_send_cfg_wr+0x154>)
 8007b42:	0018      	movs	r0, r3
 8007b44:	f7fb fb16 	bl	8003174 <send_debug_logs>
        }
    }
    return false ;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b067      	add	sp, #412	; 0x19c
 8007b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	fffffe6f 	.word	0xfffffe6f
 8007b58:	fffffe6e 	.word	0xfffffe6e
 8007b5c:	fffffe6d 	.word	0xfffffe6d
 8007b60:	fffffe6c 	.word	0xfffffe6c
 8007b64:	fffffe70 	.word	0xfffffe70
 8007b68:	08012be4 	.word	0x08012be4
 8007b6c:	08012c10 	.word	0x08012c10

08007b70 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b72:	b0ed      	sub	sp, #436	; 0x1b4
 8007b74:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b76:	21c8      	movs	r1, #200	; 0xc8
 8007b78:	2318      	movs	r3, #24
 8007b7a:	18cb      	adds	r3, r1, r3
 8007b7c:	19db      	adds	r3, r3, r7
 8007b7e:	0018      	movs	r0, r3
 8007b80:	23c6      	movs	r3, #198	; 0xc6
 8007b82:	001a      	movs	r2, r3
 8007b84:	2100      	movs	r1, #0
 8007b86:	f003 ff51 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8007b8a:	4b4a      	ldr	r3, [pc, #296]	; (8007cb4 <astronode_send_mgi_rr+0x144>)
 8007b8c:	26cc      	movs	r6, #204	; 0xcc
 8007b8e:	0076      	lsls	r6, r6, #1
 8007b90:	199b      	adds	r3, r3, r6
 8007b92:	2218      	movs	r2, #24
 8007b94:	4694      	mov	ip, r2
 8007b96:	44bc      	add	ip, r7
 8007b98:	4463      	add	r3, ip
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	23c6      	movs	r3, #198	; 0xc6
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	f003 ff43 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007ba6:	21c8      	movs	r1, #200	; 0xc8
 8007ba8:	2318      	movs	r3, #24
 8007baa:	18cb      	adds	r3, r1, r3
 8007bac:	19db      	adds	r3, r3, r7
 8007bae:	2219      	movs	r2, #25
 8007bb0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bb2:	2318      	movs	r3, #24
 8007bb4:	18fa      	adds	r2, r7, r3
 8007bb6:	2318      	movs	r3, #24
 8007bb8:	18cb      	adds	r3, r1, r3
 8007bba:	19db      	adds	r3, r3, r7
 8007bbc:	0011      	movs	r1, r2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f001 f95e 	bl	8008e80 <astronode_transport_send_receive>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d16f      	bne.n	8007caa <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007bca:	4b3a      	ldr	r3, [pc, #232]	; (8007cb4 <astronode_send_mgi_rr+0x144>)
 8007bcc:	0032      	movs	r2, r6
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	2118      	movs	r1, #24
 8007bd2:	468c      	mov	ip, r1
 8007bd4:	44bc      	add	ip, r7
 8007bd6:	4463      	add	r3, ip
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b99      	cmp	r3, #153	; 0x99
 8007bdc:	d161      	bne.n	8007ca2 <astronode_send_mgi_rr+0x132>
        {
 8007bde:	466b      	mov	r3, sp
 8007be0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007be2:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <astronode_send_mgi_rr+0x144>)
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	2218      	movs	r2, #24
 8007be8:	4694      	mov	ip, r2
 8007bea:	44bc      	add	ip, r7
 8007bec:	4463      	add	r3, ip
 8007bee:	22c4      	movs	r2, #196	; 0xc4
 8007bf0:	5a9b      	ldrh	r3, [r3, r2]
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	3a01      	subs	r2, #1
 8007bf6:	21ca      	movs	r1, #202	; 0xca
 8007bf8:	0049      	lsls	r1, r1, #1
 8007bfa:	2018      	movs	r0, #24
 8007bfc:	1809      	adds	r1, r1, r0
 8007bfe:	19c9      	adds	r1, r1, r7
 8007c00:	600a      	str	r2, [r1, #0]
 8007c02:	001c      	movs	r4, r3
 8007c04:	2200      	movs	r2, #0
 8007c06:	0015      	movs	r5, r2
 8007c08:	0020      	movs	r0, r4
 8007c0a:	0029      	movs	r1, r5
 8007c0c:	0004      	movs	r4, r0
 8007c0e:	0f62      	lsrs	r2, r4, #29
 8007c10:	000c      	movs	r4, r1
 8007c12:	00e4      	lsls	r4, r4, #3
 8007c14:	617c      	str	r4, [r7, #20]
 8007c16:	697c      	ldr	r4, [r7, #20]
 8007c18:	4314      	orrs	r4, r2
 8007c1a:	617c      	str	r4, [r7, #20]
 8007c1c:	0001      	movs	r1, r0
 8007c1e:	00c9      	lsls	r1, r1, #3
 8007c20:	6139      	str	r1, [r7, #16]
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	2200      	movs	r2, #0
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	6838      	ldr	r0, [r7, #0]
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	0004      	movs	r4, r0
 8007c2e:	0f62      	lsrs	r2, r4, #29
 8007c30:	000c      	movs	r4, r1
 8007c32:	00e4      	lsls	r4, r4, #3
 8007c34:	60fc      	str	r4, [r7, #12]
 8007c36:	68fc      	ldr	r4, [r7, #12]
 8007c38:	4314      	orrs	r4, r2
 8007c3a:	60fc      	str	r4, [r7, #12]
 8007c3c:	0001      	movs	r1, r0
 8007c3e:	00ca      	lsls	r2, r1, #3
 8007c40:	60ba      	str	r2, [r7, #8]
 8007c42:	3307      	adds	r3, #7
 8007c44:	08db      	lsrs	r3, r3, #3
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4669      	mov	r1, sp
 8007c4a:	1acb      	subs	r3, r1, r3
 8007c4c:	469d      	mov	sp, r3
 8007c4e:	466b      	mov	r3, sp
 8007c50:	3300      	adds	r3, #0
 8007c52:	24c8      	movs	r4, #200	; 0xc8
 8007c54:	0064      	lsls	r4, r4, #1
 8007c56:	2218      	movs	r2, #24
 8007c58:	18a2      	adds	r2, r4, r2
 8007c5a:	19d1      	adds	r1, r2, r7
 8007c5c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <astronode_send_mgi_rr+0x148>)
 8007c60:	0018      	movs	r0, r3
 8007c62:	f7fb fa87 	bl	8003174 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007c66:	4b13      	ldr	r3, [pc, #76]	; (8007cb4 <astronode_send_mgi_rr+0x144>)
 8007c68:	22cc      	movs	r2, #204	; 0xcc
 8007c6a:	0052      	lsls	r2, r2, #1
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	2218      	movs	r2, #24
 8007c70:	4694      	mov	ip, r2
 8007c72:	44bc      	add	ip, r7
 8007c74:	4463      	add	r3, ip
 8007c76:	22c4      	movs	r2, #196	; 0xc4
 8007c78:	5a9b      	ldrh	r3, [r3, r2]
 8007c7a:	0019      	movs	r1, r3
 8007c7c:	2318      	movs	r3, #24
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	3301      	adds	r3, #1
 8007c82:	4a0e      	ldr	r2, [pc, #56]	; (8007cbc <astronode_send_mgi_rr+0x14c>)
 8007c84:	2018      	movs	r0, #24
 8007c86:	1820      	adds	r0, r4, r0
 8007c88:	19c0      	adds	r0, r0, r7
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	f003 fe04 	bl	800b898 <snprintf>
            send_debug_logs(guid);
 8007c90:	2318      	movs	r3, #24
 8007c92:	18e3      	adds	r3, r4, r3
 8007c94:	19db      	adds	r3, r3, r7
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7fb fa6b 	bl	8003174 <send_debug_logs>
 8007c9e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007ca0:	e003      	b.n	8007caa <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <astronode_send_mgi_rr+0x150>)
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7fb fa65 	bl	8003174 <send_debug_logs>
}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b06d      	add	sp, #436	; 0x1b4
 8007cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	fffffe68 	.word	0xfffffe68
 8007cb8:	08012c9c 	.word	0x08012c9c
 8007cbc:	08012cac 	.word	0x08012cac
 8007cc0:	08012cb0 	.word	0x08012cb0

08007cc4 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	b0ed      	sub	sp, #436	; 0x1b4
 8007cc8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cca:	21c8      	movs	r1, #200	; 0xc8
 8007ccc:	2318      	movs	r3, #24
 8007cce:	18cb      	adds	r3, r1, r3
 8007cd0:	19db      	adds	r3, r3, r7
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	23c6      	movs	r3, #198	; 0xc6
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f003 fea7 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <astronode_send_msn_rr+0x144>)
 8007ce0:	26cc      	movs	r6, #204	; 0xcc
 8007ce2:	0076      	lsls	r6, r6, #1
 8007ce4:	199b      	adds	r3, r3, r6
 8007ce6:	2218      	movs	r2, #24
 8007ce8:	4694      	mov	ip, r2
 8007cea:	44bc      	add	ip, r7
 8007cec:	4463      	add	r3, ip
 8007cee:	0018      	movs	r0, r3
 8007cf0:	23c6      	movs	r3, #198	; 0xc6
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	f003 fe99 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007cfa:	21c8      	movs	r1, #200	; 0xc8
 8007cfc:	2318      	movs	r3, #24
 8007cfe:	18cb      	adds	r3, r1, r3
 8007d00:	19db      	adds	r3, r3, r7
 8007d02:	221a      	movs	r2, #26
 8007d04:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d06:	2318      	movs	r3, #24
 8007d08:	18fa      	adds	r2, r7, r3
 8007d0a:	2318      	movs	r3, #24
 8007d0c:	18cb      	adds	r3, r1, r3
 8007d0e:	19db      	adds	r3, r3, r7
 8007d10:	0011      	movs	r1, r2
 8007d12:	0018      	movs	r0, r3
 8007d14:	f001 f8b4 	bl	8008e80 <astronode_transport_send_receive>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d16f      	bne.n	8007dfe <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007d1e:	4b3a      	ldr	r3, [pc, #232]	; (8007e08 <astronode_send_msn_rr+0x144>)
 8007d20:	0032      	movs	r2, r6
 8007d22:	189b      	adds	r3, r3, r2
 8007d24:	2118      	movs	r1, #24
 8007d26:	468c      	mov	ip, r1
 8007d28:	44bc      	add	ip, r7
 8007d2a:	4463      	add	r3, ip
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b9a      	cmp	r3, #154	; 0x9a
 8007d30:	d161      	bne.n	8007df6 <astronode_send_msn_rr+0x132>
        {
 8007d32:	466b      	mov	r3, sp
 8007d34:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007d36:	4b34      	ldr	r3, [pc, #208]	; (8007e08 <astronode_send_msn_rr+0x144>)
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	2218      	movs	r2, #24
 8007d3c:	4694      	mov	ip, r2
 8007d3e:	44bc      	add	ip, r7
 8007d40:	4463      	add	r3, ip
 8007d42:	22c4      	movs	r2, #196	; 0xc4
 8007d44:	5a9b      	ldrh	r3, [r3, r2]
 8007d46:	001a      	movs	r2, r3
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	21ca      	movs	r1, #202	; 0xca
 8007d4c:	0049      	lsls	r1, r1, #1
 8007d4e:	2018      	movs	r0, #24
 8007d50:	1809      	adds	r1, r1, r0
 8007d52:	19c9      	adds	r1, r1, r7
 8007d54:	600a      	str	r2, [r1, #0]
 8007d56:	001c      	movs	r4, r3
 8007d58:	2200      	movs	r2, #0
 8007d5a:	0015      	movs	r5, r2
 8007d5c:	0020      	movs	r0, r4
 8007d5e:	0029      	movs	r1, r5
 8007d60:	0004      	movs	r4, r0
 8007d62:	0f62      	lsrs	r2, r4, #29
 8007d64:	000c      	movs	r4, r1
 8007d66:	00e4      	lsls	r4, r4, #3
 8007d68:	617c      	str	r4, [r7, #20]
 8007d6a:	697c      	ldr	r4, [r7, #20]
 8007d6c:	4314      	orrs	r4, r2
 8007d6e:	617c      	str	r4, [r7, #20]
 8007d70:	0001      	movs	r1, r0
 8007d72:	00c9      	lsls	r1, r1, #3
 8007d74:	6139      	str	r1, [r7, #16]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	6838      	ldr	r0, [r7, #0]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	0004      	movs	r4, r0
 8007d82:	0f62      	lsrs	r2, r4, #29
 8007d84:	000c      	movs	r4, r1
 8007d86:	00e4      	lsls	r4, r4, #3
 8007d88:	60fc      	str	r4, [r7, #12]
 8007d8a:	68fc      	ldr	r4, [r7, #12]
 8007d8c:	4314      	orrs	r4, r2
 8007d8e:	60fc      	str	r4, [r7, #12]
 8007d90:	0001      	movs	r1, r0
 8007d92:	00ca      	lsls	r2, r1, #3
 8007d94:	60ba      	str	r2, [r7, #8]
 8007d96:	3307      	adds	r3, #7
 8007d98:	08db      	lsrs	r3, r3, #3
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4669      	mov	r1, sp
 8007d9e:	1acb      	subs	r3, r1, r3
 8007da0:	469d      	mov	sp, r3
 8007da2:	466b      	mov	r3, sp
 8007da4:	3300      	adds	r3, #0
 8007da6:	24c8      	movs	r4, #200	; 0xc8
 8007da8:	0064      	lsls	r4, r4, #1
 8007daa:	2218      	movs	r2, #24
 8007dac:	18a2      	adds	r2, r4, r2
 8007dae:	19d1      	adds	r1, r2, r7
 8007db0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007db2:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <astronode_send_msn_rr+0x148>)
 8007db4:	0018      	movs	r0, r3
 8007db6:	f7fb f9dd 	bl	8003174 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <astronode_send_msn_rr+0x144>)
 8007dbc:	22cc      	movs	r2, #204	; 0xcc
 8007dbe:	0052      	lsls	r2, r2, #1
 8007dc0:	189b      	adds	r3, r3, r2
 8007dc2:	2218      	movs	r2, #24
 8007dc4:	4694      	mov	ip, r2
 8007dc6:	44bc      	add	ip, r7
 8007dc8:	4463      	add	r3, ip
 8007dca:	22c4      	movs	r2, #196	; 0xc4
 8007dcc:	5a9b      	ldrh	r3, [r3, r2]
 8007dce:	0019      	movs	r1, r3
 8007dd0:	2318      	movs	r3, #24
 8007dd2:	18fb      	adds	r3, r7, r3
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a0e      	ldr	r2, [pc, #56]	; (8007e10 <astronode_send_msn_rr+0x14c>)
 8007dd8:	2018      	movs	r0, #24
 8007dda:	1820      	adds	r0, r4, r0
 8007ddc:	19c0      	adds	r0, r0, r7
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	f003 fd5a 	bl	800b898 <snprintf>
            send_debug_logs(serial_number);
 8007de4:	2318      	movs	r3, #24
 8007de6:	18e3      	adds	r3, r4, r3
 8007de8:	19db      	adds	r3, r3, r7
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	0018      	movs	r0, r3
 8007dee:	f7fb f9c1 	bl	8003174 <send_debug_logs>
 8007df2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007df4:	e003      	b.n	8007dfe <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007df6:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <astronode_send_msn_rr+0x150>)
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f7fb f9bb 	bl	8003174 <send_debug_logs>
}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b06d      	add	sp, #436	; 0x1b4
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	fffffe68 	.word	0xfffffe68
 8007e0c:	08012ccc 	.word	0x08012ccc
 8007e10:	08012cac 	.word	0x08012cac
 8007e14:	08012ce8 	.word	0x08012ce8

08007e18 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007e18:	b5b0      	push	{r4, r5, r7, lr}
 8007e1a:	b0e4      	sub	sp, #400	; 0x190
 8007e1c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e1e:	24c8      	movs	r4, #200	; 0xc8
 8007e20:	193b      	adds	r3, r7, r4
 8007e22:	0018      	movs	r0, r3
 8007e24:	23c6      	movs	r3, #198	; 0xc6
 8007e26:	001a      	movs	r2, r3
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f003 fdff 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8007e2e:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007e30:	25c8      	movs	r5, #200	; 0xc8
 8007e32:	006d      	lsls	r5, r5, #1
 8007e34:	195b      	adds	r3, r3, r5
 8007e36:	19db      	adds	r3, r3, r7
 8007e38:	0018      	movs	r0, r3
 8007e3a:	23c6      	movs	r3, #198	; 0xc6
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f003 fdf4 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007e44:	193b      	adds	r3, r7, r4
 8007e46:	2265      	movs	r2, #101	; 0x65
 8007e48:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e4a:	003a      	movs	r2, r7
 8007e4c:	193b      	adds	r3, r7, r4
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f001 f815 	bl	8008e80 <astronode_transport_send_receive>
 8007e56:	0003      	movs	r3, r0
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d147      	bne.n	8007eec <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007e5c:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007e5e:	195b      	adds	r3, r3, r5
 8007e60:	19db      	adds	r3, r3, r7
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2be5      	cmp	r3, #229	; 0xe5
 8007e66:	d141      	bne.n	8007eec <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007e68:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007e6a:	195b      	adds	r3, r3, r5
 8007e6c:	19db      	adds	r3, r3, r7
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	001a      	movs	r2, r3
 8007e72:	2301      	movs	r3, #1
 8007e74:	4013      	ands	r3, r2
 8007e76:	d006      	beq.n	8007e86 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007e78:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <astronode_send_evt_rr+0xe0>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <astronode_send_evt_rr+0xe4>)
 8007e80:	0018      	movs	r0, r3
 8007e82:	f7fb f977 	bl	8003174 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007e86:	4b1b      	ldr	r3, [pc, #108]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007e88:	22c8      	movs	r2, #200	; 0xc8
 8007e8a:	0052      	lsls	r2, r2, #1
 8007e8c:	189b      	adds	r3, r3, r2
 8007e8e:	19db      	adds	r3, r3, r7
 8007e90:	785b      	ldrb	r3, [r3, #1]
 8007e92:	001a      	movs	r2, r3
 8007e94:	2302      	movs	r3, #2
 8007e96:	4013      	ands	r3, r2
 8007e98:	d006      	beq.n	8007ea8 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007e9a:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <astronode_send_evt_rr+0xe8>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007ea0:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <astronode_send_evt_rr+0xec>)
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	f7fb f966 	bl	8003174 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007ea8:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007eaa:	22c8      	movs	r2, #200	; 0xc8
 8007eac:	0052      	lsls	r2, r2, #1
 8007eae:	189b      	adds	r3, r3, r2
 8007eb0:	19db      	adds	r3, r3, r7
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	001a      	movs	r2, r3
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	4013      	ands	r3, r2
 8007eba:	d006      	beq.n	8007eca <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007ebc:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <astronode_send_evt_rr+0xf0>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007ec2:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <astronode_send_evt_rr+0xf4>)
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f7fb f955 	bl	8003174 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <astronode_send_evt_rr+0xdc>)
 8007ecc:	22c8      	movs	r2, #200	; 0xc8
 8007ece:	0052      	lsls	r2, r2, #1
 8007ed0:	189b      	adds	r3, r3, r2
 8007ed2:	19db      	adds	r3, r3, r7
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	2308      	movs	r3, #8
 8007eda:	4013      	ands	r3, r2
 8007edc:	d006      	beq.n	8007eec <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007ede:	4b0c      	ldr	r3, [pc, #48]	; (8007f10 <astronode_send_evt_rr+0xf8>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <astronode_send_evt_rr+0xfc>)
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7fb f944 	bl	8003174 <send_debug_logs>
            }

        }
    }
}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b064      	add	sp, #400	; 0x190
 8007ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef4:	fffffe70 	.word	0xfffffe70
 8007ef8:	20000bfc 	.word	0x20000bfc
 8007efc:	08012d90 	.word	0x08012d90
 8007f00:	20000bfd 	.word	0x20000bfd
 8007f04:	08012db4 	.word	0x08012db4
 8007f08:	20000bfe 	.word	0x20000bfe
 8007f0c:	08012dcc 	.word	0x08012dcc
 8007f10:	20000bff 	.word	0x20000bff
 8007f14:	08012de0 	.word	0x08012de0

08007f18 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1a:	b0e7      	sub	sp, #412	; 0x19c
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007f22:	24d0      	movs	r4, #208	; 0xd0
 8007f24:	193b      	adds	r3, r7, r4
 8007f26:	0018      	movs	r0, r3
 8007f28:	23c6      	movs	r3, #198	; 0xc6
 8007f2a:	001a      	movs	r2, r3
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	f003 fd7d 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8007f32:	4b56      	ldr	r3, [pc, #344]	; (800808c <astronode_send_geo_wr+0x174>)
 8007f34:	26cc      	movs	r6, #204	; 0xcc
 8007f36:	0076      	lsls	r6, r6, #1
 8007f38:	199b      	adds	r3, r3, r6
 8007f3a:	19db      	adds	r3, r3, r7
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	23c6      	movs	r3, #198	; 0xc6
 8007f40:	001a      	movs	r2, r3
 8007f42:	2100      	movs	r1, #0
 8007f44:	f003 fd72 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007f48:	193b      	adds	r3, r7, r4
 8007f4a:	2235      	movs	r2, #53	; 0x35
 8007f4c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007f4e:	193b      	adds	r3, r7, r4
 8007f50:	22c4      	movs	r2, #196	; 0xc4
 8007f52:	5a9b      	ldrh	r3, [r3, r2]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	b290      	uxth	r0, r2
 8007f58:	193a      	adds	r2, r7, r4
 8007f5a:	21c4      	movs	r1, #196	; 0xc4
 8007f5c:	5250      	strh	r0, [r2, r1]
 8007f5e:	0019      	movs	r1, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	193b      	adds	r3, r7, r4
 8007f66:	185b      	adds	r3, r3, r1
 8007f68:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	1218      	asrs	r0, r3, #8
 8007f6e:	0025      	movs	r5, r4
 8007f70:	197b      	adds	r3, r7, r5
 8007f72:	22c4      	movs	r2, #196	; 0xc4
 8007f74:	5a9b      	ldrh	r3, [r3, r2]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	b294      	uxth	r4, r2
 8007f7a:	197a      	adds	r2, r7, r5
 8007f7c:	21c4      	movs	r1, #196	; 0xc4
 8007f7e:	5254      	strh	r4, [r2, r1]
 8007f80:	0019      	movs	r1, r3
 8007f82:	b2c2      	uxtb	r2, r0
 8007f84:	002c      	movs	r4, r5
 8007f86:	193b      	adds	r3, r7, r4
 8007f88:	185b      	adds	r3, r3, r1
 8007f8a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	1418      	asrs	r0, r3, #16
 8007f90:	0025      	movs	r5, r4
 8007f92:	197b      	adds	r3, r7, r5
 8007f94:	22c4      	movs	r2, #196	; 0xc4
 8007f96:	5a9b      	ldrh	r3, [r3, r2]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	b294      	uxth	r4, r2
 8007f9c:	197a      	adds	r2, r7, r5
 8007f9e:	21c4      	movs	r1, #196	; 0xc4
 8007fa0:	5254      	strh	r4, [r2, r1]
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	b2c2      	uxtb	r2, r0
 8007fa6:	002c      	movs	r4, r5
 8007fa8:	193b      	adds	r3, r7, r4
 8007faa:	185b      	adds	r3, r3, r1
 8007fac:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	1618      	asrs	r0, r3, #24
 8007fb2:	0025      	movs	r5, r4
 8007fb4:	197b      	adds	r3, r7, r5
 8007fb6:	22c4      	movs	r2, #196	; 0xc4
 8007fb8:	5a9b      	ldrh	r3, [r3, r2]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	b294      	uxth	r4, r2
 8007fbe:	197a      	adds	r2, r7, r5
 8007fc0:	21c4      	movs	r1, #196	; 0xc4
 8007fc2:	5254      	strh	r4, [r2, r1]
 8007fc4:	0019      	movs	r1, r3
 8007fc6:	b2c2      	uxtb	r2, r0
 8007fc8:	002c      	movs	r4, r5
 8007fca:	193b      	adds	r3, r7, r4
 8007fcc:	185b      	adds	r3, r3, r1
 8007fce:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007fd0:	193b      	adds	r3, r7, r4
 8007fd2:	22c4      	movs	r2, #196	; 0xc4
 8007fd4:	5a9b      	ldrh	r3, [r3, r2]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	b290      	uxth	r0, r2
 8007fda:	193a      	adds	r2, r7, r4
 8007fdc:	21c4      	movs	r1, #196	; 0xc4
 8007fde:	5250      	strh	r0, [r2, r1]
 8007fe0:	0019      	movs	r1, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	193b      	adds	r3, r7, r4
 8007fe8:	185b      	adds	r3, r3, r1
 8007fea:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	1218      	asrs	r0, r3, #8
 8007ff0:	0025      	movs	r5, r4
 8007ff2:	197b      	adds	r3, r7, r5
 8007ff4:	22c4      	movs	r2, #196	; 0xc4
 8007ff6:	5a9b      	ldrh	r3, [r3, r2]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	b294      	uxth	r4, r2
 8007ffc:	197a      	adds	r2, r7, r5
 8007ffe:	21c4      	movs	r1, #196	; 0xc4
 8008000:	5254      	strh	r4, [r2, r1]
 8008002:	0019      	movs	r1, r3
 8008004:	b2c2      	uxtb	r2, r0
 8008006:	002c      	movs	r4, r5
 8008008:	193b      	adds	r3, r7, r4
 800800a:	185b      	adds	r3, r3, r1
 800800c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	1418      	asrs	r0, r3, #16
 8008012:	0025      	movs	r5, r4
 8008014:	197b      	adds	r3, r7, r5
 8008016:	22c4      	movs	r2, #196	; 0xc4
 8008018:	5a9b      	ldrh	r3, [r3, r2]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	b294      	uxth	r4, r2
 800801e:	197a      	adds	r2, r7, r5
 8008020:	21c4      	movs	r1, #196	; 0xc4
 8008022:	5254      	strh	r4, [r2, r1]
 8008024:	0019      	movs	r1, r3
 8008026:	b2c2      	uxtb	r2, r0
 8008028:	002c      	movs	r4, r5
 800802a:	193b      	adds	r3, r7, r4
 800802c:	185b      	adds	r3, r3, r1
 800802e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1618      	asrs	r0, r3, #24
 8008034:	0025      	movs	r5, r4
 8008036:	197b      	adds	r3, r7, r5
 8008038:	22c4      	movs	r2, #196	; 0xc4
 800803a:	5a9b      	ldrh	r3, [r3, r2]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	b294      	uxth	r4, r2
 8008040:	197a      	adds	r2, r7, r5
 8008042:	21c4      	movs	r1, #196	; 0xc4
 8008044:	5254      	strh	r4, [r2, r1]
 8008046:	0019      	movs	r1, r3
 8008048:	b2c2      	uxtb	r2, r0
 800804a:	0028      	movs	r0, r5
 800804c:	183b      	adds	r3, r7, r0
 800804e:	185b      	adds	r3, r3, r1
 8008050:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008052:	2308      	movs	r3, #8
 8008054:	18fa      	adds	r2, r7, r3
 8008056:	183b      	adds	r3, r7, r0
 8008058:	0011      	movs	r1, r2
 800805a:	0018      	movs	r0, r3
 800805c:	f000 ff10 	bl	8008e80 <astronode_transport_send_receive>
 8008060:	0003      	movs	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d10e      	bne.n	8008084 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <astronode_send_geo_wr+0x174>)
 8008068:	199b      	adds	r3, r3, r6
 800806a:	19db      	adds	r3, r3, r7
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2bb5      	cmp	r3, #181	; 0xb5
 8008070:	d104      	bne.n	800807c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <astronode_send_geo_wr+0x178>)
 8008074:	0018      	movs	r0, r3
 8008076:	f7fb f87d 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800807a:	e003      	b.n	8008084 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <astronode_send_geo_wr+0x17c>)
 800807e:	0018      	movs	r0, r3
 8008080:	f7fb f878 	bl	8003174 <send_debug_logs>
}
 8008084:	46c0      	nop			; (mov r8, r8)
 8008086:	46bd      	mov	sp, r7
 8008088:	b067      	add	sp, #412	; 0x19c
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808c:	fffffe70 	.word	0xfffffe70
 8008090:	08012df4 	.word	0x08012df4
 8008094:	08012e20 	.word	0x08012e20

08008098 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809a:	b0fb      	sub	sp, #492	; 0x1ec
 800809c:	af00      	add	r7, sp, #0
 800809e:	6039      	str	r1, [r7, #0]
 80080a0:	0011      	movs	r1, r2
 80080a2:	4b4a      	ldr	r3, [pc, #296]	; (80081cc <astronode_send_pld_er+0x134>)
 80080a4:	26f4      	movs	r6, #244	; 0xf4
 80080a6:	0076      	lsls	r6, r6, #1
 80080a8:	199b      	adds	r3, r3, r6
 80080aa:	19db      	adds	r3, r3, r7
 80080ac:	1c02      	adds	r2, r0, #0
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	4b47      	ldr	r3, [pc, #284]	; (80081d0 <astronode_send_pld_er+0x138>)
 80080b2:	199b      	adds	r3, r3, r6
 80080b4:	19db      	adds	r3, r3, r7
 80080b6:	1c0a      	adds	r2, r1, #0
 80080b8:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80080ba:	2490      	movs	r4, #144	; 0x90
 80080bc:	0064      	lsls	r4, r4, #1
 80080be:	193b      	adds	r3, r7, r4
 80080c0:	0018      	movs	r0, r3
 80080c2:	23c6      	movs	r3, #198	; 0xc6
 80080c4:	001a      	movs	r2, r3
 80080c6:	2100      	movs	r1, #0
 80080c8:	f003 fcb0 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80080cc:	4b41      	ldr	r3, [pc, #260]	; (80081d4 <astronode_send_pld_er+0x13c>)
 80080ce:	199b      	adds	r3, r3, r6
 80080d0:	19db      	adds	r3, r3, r7
 80080d2:	0018      	movs	r0, r3
 80080d4:	23c6      	movs	r3, #198	; 0xc6
 80080d6:	001a      	movs	r2, r3
 80080d8:	2100      	movs	r1, #0
 80080da:	f003 fca7 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80080de:	193b      	adds	r3, r7, r4
 80080e0:	2225      	movs	r2, #37	; 0x25
 80080e2:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80080e4:	193b      	adds	r3, r7, r4
 80080e6:	22c4      	movs	r2, #196	; 0xc4
 80080e8:	5a9b      	ldrh	r3, [r3, r2]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	b290      	uxth	r0, r2
 80080ee:	193a      	adds	r2, r7, r4
 80080f0:	21c4      	movs	r1, #196	; 0xc4
 80080f2:	5250      	strh	r0, [r2, r1]
 80080f4:	0019      	movs	r1, r3
 80080f6:	4b35      	ldr	r3, [pc, #212]	; (80081cc <astronode_send_pld_er+0x134>)
 80080f8:	199b      	adds	r3, r3, r6
 80080fa:	19db      	adds	r3, r3, r7
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	193b      	adds	r3, r7, r4
 8008102:	185b      	adds	r3, r3, r1
 8008104:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008106:	4b31      	ldr	r3, [pc, #196]	; (80081cc <astronode_send_pld_er+0x134>)
 8008108:	199b      	adds	r3, r3, r6
 800810a:	19db      	adds	r3, r3, r7
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	b298      	uxth	r0, r3
 8008112:	0025      	movs	r5, r4
 8008114:	197b      	adds	r3, r7, r5
 8008116:	22c4      	movs	r2, #196	; 0xc4
 8008118:	5a9b      	ldrh	r3, [r3, r2]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	b294      	uxth	r4, r2
 800811e:	197a      	adds	r2, r7, r5
 8008120:	21c4      	movs	r1, #196	; 0xc4
 8008122:	5254      	strh	r4, [r2, r1]
 8008124:	0019      	movs	r1, r3
 8008126:	b2c2      	uxtb	r2, r0
 8008128:	002c      	movs	r4, r5
 800812a:	193b      	adds	r3, r7, r4
 800812c:	185b      	adds	r3, r3, r1
 800812e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008130:	193b      	adds	r3, r7, r4
 8008132:	22c4      	movs	r2, #196	; 0xc4
 8008134:	5a9b      	ldrh	r3, [r3, r2]
 8008136:	001a      	movs	r2, r3
 8008138:	193b      	adds	r3, r7, r4
 800813a:	189b      	adds	r3, r3, r2
 800813c:	1c58      	adds	r0, r3, #1
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <astronode_send_pld_er+0x138>)
 8008140:	199b      	adds	r3, r3, r6
 8008142:	19db      	adds	r3, r3, r7
 8008144:	881a      	ldrh	r2, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	0019      	movs	r1, r3
 800814a:	f003 fd54 	bl	800bbf6 <memcpy>
    request.payload_len = 2 + payload_length;
 800814e:	4b20      	ldr	r3, [pc, #128]	; (80081d0 <astronode_send_pld_er+0x138>)
 8008150:	199b      	adds	r3, r3, r6
 8008152:	19db      	adds	r3, r3, r7
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	3302      	adds	r3, #2
 8008158:	b299      	uxth	r1, r3
 800815a:	193b      	adds	r3, r7, r4
 800815c:	22c4      	movs	r2, #196	; 0xc4
 800815e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008160:	2358      	movs	r3, #88	; 0x58
 8008162:	18fa      	adds	r2, r7, r3
 8008164:	193b      	adds	r3, r7, r4
 8008166:	0011      	movs	r1, r2
 8008168:	0018      	movs	r0, r3
 800816a:	f000 fe89 	bl	8008e80 <astronode_transport_send_receive>
 800816e:	0003      	movs	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d125      	bne.n	80081c0 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008174:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <astronode_send_pld_er+0x13c>)
 8008176:	199b      	adds	r3, r3, r6
 8008178:	19db      	adds	r3, r3, r7
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2ba5      	cmp	r3, #165	; 0xa5
 800817e:	d10f      	bne.n	80081a0 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8008180:	4b12      	ldr	r3, [pc, #72]	; (80081cc <astronode_send_pld_er+0x134>)
 8008182:	199b      	adds	r3, r3, r6
 8008184:	19db      	adds	r3, r3, r7
 8008186:	881a      	ldrh	r2, [r3, #0]
 8008188:	4913      	ldr	r1, [pc, #76]	; (80081d8 <astronode_send_pld_er+0x140>)
 800818a:	2408      	movs	r4, #8
 800818c:	193b      	adds	r3, r7, r4
 800818e:	0018      	movs	r0, r3
 8008190:	f003 fbb6 	bl	800b900 <sprintf>
            send_debug_logs ( s ) ;
 8008194:	193b      	adds	r3, r7, r4
 8008196:	0018      	movs	r0, r3
 8008198:	f7fa ffec 	bl	8003174 <send_debug_logs>
            return true ;
 800819c:	2301      	movs	r3, #1
 800819e:	e010      	b.n	80081c2 <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <astronode_send_pld_er+0x134>)
 80081a2:	22f4      	movs	r2, #244	; 0xf4
 80081a4:	0052      	lsls	r2, r2, #1
 80081a6:	189b      	adds	r3, r3, r2
 80081a8:	19db      	adds	r3, r3, r7
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	490b      	ldr	r1, [pc, #44]	; (80081dc <astronode_send_pld_er+0x144>)
 80081ae:	2408      	movs	r4, #8
 80081b0:	193b      	adds	r3, r7, r4
 80081b2:	0018      	movs	r0, r3
 80081b4:	f003 fba4 	bl	800b900 <sprintf>
            send_debug_logs ( s ) ;
 80081b8:	193b      	adds	r3, r7, r4
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7fa ffda 	bl	8003174 <send_debug_logs>
        }
    }
    return false ;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	0018      	movs	r0, r3
 80081c4:	46bd      	mov	sp, r7
 80081c6:	b07b      	add	sp, #492	; 0x1ec
 80081c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	fffffe1e 	.word	0xfffffe1e
 80081d0:	fffffe1c 	.word	0xfffffe1c
 80081d4:	fffffe70 	.word	0xfffffe70
 80081d8:	08012e98 	.word	0x08012e98
 80081dc:	08012ec4 	.word	0x08012ec4

080081e0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80081e0:	b5b0      	push	{r4, r5, r7, lr}
 80081e2:	b0e4      	sub	sp, #400	; 0x190
 80081e4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80081e6:	24c8      	movs	r4, #200	; 0xc8
 80081e8:	193b      	adds	r3, r7, r4
 80081ea:	0018      	movs	r0, r3
 80081ec:	23c6      	movs	r3, #198	; 0xc6
 80081ee:	001a      	movs	r2, r3
 80081f0:	2100      	movs	r1, #0
 80081f2:	f003 fc1b 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <astronode_send_pld_fr+0x6c>)
 80081f8:	25c8      	movs	r5, #200	; 0xc8
 80081fa:	006d      	lsls	r5, r5, #1
 80081fc:	195b      	adds	r3, r3, r5
 80081fe:	19db      	adds	r3, r3, r7
 8008200:	0018      	movs	r0, r3
 8008202:	23c6      	movs	r3, #198	; 0xc6
 8008204:	001a      	movs	r2, r3
 8008206:	2100      	movs	r1, #0
 8008208:	f003 fc10 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800820c:	193b      	adds	r3, r7, r4
 800820e:	2227      	movs	r2, #39	; 0x27
 8008210:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008212:	003a      	movs	r2, r7
 8008214:	193b      	adds	r3, r7, r4
 8008216:	0011      	movs	r1, r2
 8008218:	0018      	movs	r0, r3
 800821a:	f000 fe31 	bl	8008e80 <astronode_transport_send_receive>
 800821e:	0003      	movs	r3, r0
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10e      	bne.n	8008242 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <astronode_send_pld_fr+0x6c>)
 8008226:	195b      	adds	r3, r3, r5
 8008228:	19db      	adds	r3, r3, r7
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2ba7      	cmp	r3, #167	; 0xa7
 800822e:	d104      	bne.n	800823a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <astronode_send_pld_fr+0x70>)
 8008232:	0018      	movs	r0, r3
 8008234:	f7fa ff9e 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008238:	e003      	b.n	8008242 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <astronode_send_pld_fr+0x74>)
 800823c:	0018      	movs	r0, r3
 800823e:	f7fa ff99 	bl	8003174 <send_debug_logs>
}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	46bd      	mov	sp, r7
 8008246:	b064      	add	sp, #400	; 0x190
 8008248:	bdb0      	pop	{r4, r5, r7, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	fffffe70 	.word	0xfffffe70
 8008250:	08012ef4 	.word	0x08012ef4
 8008254:	08012f2c 	.word	0x08012f2c

08008258 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008258:	b5b0      	push	{r4, r5, r7, lr}
 800825a:	b0e4      	sub	sp, #400	; 0x190
 800825c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800825e:	24c8      	movs	r4, #200	; 0xc8
 8008260:	193b      	adds	r3, r7, r4
 8008262:	0018      	movs	r0, r3
 8008264:	23c6      	movs	r3, #198	; 0xc6
 8008266:	001a      	movs	r2, r3
 8008268:	2100      	movs	r1, #0
 800826a:	f003 fbdf 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <astronode_send_res_cr+0x70>)
 8008270:	25c8      	movs	r5, #200	; 0xc8
 8008272:	006d      	lsls	r5, r5, #1
 8008274:	195b      	adds	r3, r3, r5
 8008276:	19db      	adds	r3, r3, r7
 8008278:	0018      	movs	r0, r3
 800827a:	23c6      	movs	r3, #198	; 0xc6
 800827c:	001a      	movs	r2, r3
 800827e:	2100      	movs	r1, #0
 8008280:	f003 fbd4 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008284:	193b      	adds	r3, r7, r4
 8008286:	2255      	movs	r2, #85	; 0x55
 8008288:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800828a:	003a      	movs	r2, r7
 800828c:	193b      	adds	r3, r7, r4
 800828e:	0011      	movs	r1, r2
 8008290:	0018      	movs	r0, r3
 8008292:	f000 fdf5 	bl	8008e80 <astronode_transport_send_receive>
 8008296:	0003      	movs	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d111      	bne.n	80082c0 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <astronode_send_res_cr+0x70>)
 800829e:	195b      	adds	r3, r3, r5
 80082a0:	19db      	adds	r3, r3, r7
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2bd5      	cmp	r3, #213	; 0xd5
 80082a6:	d107      	bne.n	80082b8 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <astronode_send_res_cr+0x74>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80082ae:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <astronode_send_res_cr+0x78>)
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7fa ff5f 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80082b6:	e003      	b.n	80082c0 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <astronode_send_res_cr+0x7c>)
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7fa ff5a 	bl	8003174 <send_debug_logs>
}
 80082c0:	46c0      	nop			; (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b064      	add	sp, #400	; 0x190
 80082c6:	bdb0      	pop	{r4, r5, r7, pc}
 80082c8:	fffffe70 	.word	0xfffffe70
 80082cc:	20000bfd 	.word	0x20000bfd
 80082d0:	08012f68 	.word	0x08012f68
 80082d4:	08012f9c 	.word	0x08012f9c

080082d8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80082d8:	b5b0      	push	{r4, r5, r7, lr}
 80082da:	b0fa      	sub	sp, #488	; 0x1e8
 80082dc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80082de:	258e      	movs	r5, #142	; 0x8e
 80082e0:	006d      	lsls	r5, r5, #1
 80082e2:	197b      	adds	r3, r7, r5
 80082e4:	0018      	movs	r0, r3
 80082e6:	23c6      	movs	r3, #198	; 0xc6
 80082e8:	001a      	movs	r2, r3
 80082ea:	2100      	movs	r1, #0
 80082ec:	f003 fb9e 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0} ;
 80082f0:	4b28      	ldr	r3, [pc, #160]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 80082f2:	24f4      	movs	r4, #244	; 0xf4
 80082f4:	0064      	lsls	r4, r4, #1
 80082f6:	191b      	adds	r3, r3, r4
 80082f8:	19db      	adds	r3, r3, r7
 80082fa:	0018      	movs	r0, r3
 80082fc:	23c6      	movs	r3, #198	; 0xc6
 80082fe:	001a      	movs	r2, r3
 8008300:	2100      	movs	r1, #0
 8008302:	f003 fb93 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008306:	197b      	adds	r3, r7, r5
 8008308:	2217      	movs	r2, #23
 800830a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800830c:	2354      	movs	r3, #84	; 0x54
 800830e:	18fa      	adds	r2, r7, r3
 8008310:	197b      	adds	r3, r7, r5
 8008312:	0011      	movs	r1, r2
 8008314:	0018      	movs	r0, r3
 8008316:	f000 fdb3 	bl	8008e80 <astronode_transport_send_receive>
 800831a:	0003      	movs	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d133      	bne.n	8008388 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008320:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 8008322:	0021      	movs	r1, r4
 8008324:	185b      	adds	r3, r3, r1
 8008326:	19db      	adds	r3, r3, r7
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b97      	cmp	r3, #151	; 0x97
 800832c:	d128      	bne.n	8008380 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800832e:	4b19      	ldr	r3, [pc, #100]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 8008330:	185b      	adds	r3, r3, r1
 8008332:	19db      	adds	r3, r3, r7
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 800833a:	185b      	adds	r3, r3, r1
 800833c:	19db      	adds	r3, r3, r7
 800833e:	789b      	ldrb	r3, [r3, #2]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008344:	4b13      	ldr	r3, [pc, #76]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 8008346:	185b      	adds	r3, r3, r1
 8008348:	19db      	adds	r3, r3, r7
 800834a:	78db      	ldrb	r3, [r3, #3]
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <astronode_send_rtc_rr+0xbc>)
 8008352:	185b      	adds	r3, r3, r1
 8008354:	19db      	adds	r3, r3, r7
 8008356:	791b      	ldrb	r3, [r3, #4]
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800835c:	24f2      	movs	r4, #242	; 0xf2
 800835e:	0064      	lsls	r4, r4, #1
 8008360:	193a      	adds	r2, r7, r4
 8008362:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008364:	193b      	adds	r3, r7, r4
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	490b      	ldr	r1, [pc, #44]	; (8008398 <astronode_send_rtc_rr+0xc0>)
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	0018      	movs	r0, r3
 800836e:	f003 fac7 	bl	800b900 <sprintf>
            send_debug_logs ( str ) ;
 8008372:	1d3b      	adds	r3, r7, #4
 8008374:	0018      	movs	r0, r3
 8008376:	f7fa fefd 	bl	8003174 <send_debug_logs>
            return rtc_time ;
 800837a:	193b      	adds	r3, r7, r4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	e004      	b.n	800838a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <astronode_send_rtc_rr+0xc4>)
 8008382:	0018      	movs	r0, r3
 8008384:	f7fa fef6 	bl	8003174 <send_debug_logs>
        }
    }
    return 0 ;
 8008388:	2300      	movs	r3, #0
}
 800838a:	0018      	movs	r0, r3
 800838c:	46bd      	mov	sp, r7
 800838e:	b07a      	add	sp, #488	; 0x1e8
 8008390:	bdb0      	pop	{r4, r5, r7, pc}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	fffffe6c 	.word	0xfffffe6c
 8008398:	08012fc8 	.word	0x08012fc8
 800839c:	08013008 	.word	0x08013008

080083a0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	b0f8      	sub	sp, #480	; 0x1e0
 80083a4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083a6:	258c      	movs	r5, #140	; 0x8c
 80083a8:	006d      	lsls	r5, r5, #1
 80083aa:	197b      	adds	r3, r7, r5
 80083ac:	0018      	movs	r0, r3
 80083ae:	23c6      	movs	r3, #198	; 0xc6
 80083b0:	001a      	movs	r2, r3
 80083b2:	2100      	movs	r1, #0
 80083b4:	f003 fb3a 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80083b8:	4b21      	ldr	r3, [pc, #132]	; (8008440 <astronode_send_sak_rr+0xa0>)
 80083ba:	24f0      	movs	r4, #240	; 0xf0
 80083bc:	0064      	lsls	r4, r4, #1
 80083be:	191b      	adds	r3, r3, r4
 80083c0:	19db      	adds	r3, r3, r7
 80083c2:	0018      	movs	r0, r3
 80083c4:	23c6      	movs	r3, #198	; 0xc6
 80083c6:	001a      	movs	r2, r3
 80083c8:	2100      	movs	r1, #0
 80083ca:	f003 fb2f 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80083ce:	197b      	adds	r3, r7, r5
 80083d0:	2245      	movs	r2, #69	; 0x45
 80083d2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083d4:	2350      	movs	r3, #80	; 0x50
 80083d6:	18fa      	adds	r2, r7, r3
 80083d8:	197b      	adds	r3, r7, r5
 80083da:	0011      	movs	r1, r2
 80083dc:	0018      	movs	r0, r3
 80083de:	f000 fd4f 	bl	8008e80 <astronode_transport_send_receive>
 80083e2:	0003      	movs	r3, r0
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d126      	bne.n	8008436 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <astronode_send_sak_rr+0xa0>)
 80083ea:	191b      	adds	r3, r3, r4
 80083ec:	19db      	adds	r3, r3, r7
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2bc5      	cmp	r3, #197	; 0xc5
 80083f2:	d11c      	bne.n	800842e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <astronode_send_sak_rr+0xa0>)
 80083f6:	191b      	adds	r3, r3, r4
 80083f8:	19db      	adds	r3, r3, r7
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	b299      	uxth	r1, r3
 80083fe:	4b10      	ldr	r3, [pc, #64]	; (8008440 <astronode_send_sak_rr+0xa0>)
 8008400:	191b      	adds	r3, r3, r4
 8008402:	19db      	adds	r3, r3, r7
 8008404:	789b      	ldrb	r3, [r3, #2]
 8008406:	b29b      	uxth	r3, r3
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	b29a      	uxth	r2, r3
 800840c:	20ef      	movs	r0, #239	; 0xef
 800840e:	0040      	lsls	r0, r0, #1
 8008410:	183b      	adds	r3, r7, r0
 8008412:	188a      	adds	r2, r1, r2
 8008414:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008416:	183b      	adds	r3, r7, r0
 8008418:	881a      	ldrh	r2, [r3, #0]
 800841a:	490a      	ldr	r1, [pc, #40]	; (8008444 <astronode_send_sak_rr+0xa4>)
 800841c:	003b      	movs	r3, r7
 800841e:	0018      	movs	r0, r3
 8008420:	f003 fa6e 	bl	800b900 <sprintf>
            send_debug_logs(str);
 8008424:	003b      	movs	r3, r7
 8008426:	0018      	movs	r0, r3
 8008428:	f7fa fea4 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800842c:	e003      	b.n	8008436 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <astronode_send_sak_rr+0xa8>)
 8008430:	0018      	movs	r0, r3
 8008432:	f7fa fe9f 	bl	8003174 <send_debug_logs>
}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	46bd      	mov	sp, r7
 800843a:	b078      	add	sp, #480	; 0x1e0
 800843c:	bdb0      	pop	{r4, r5, r7, pc}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	fffffe70 	.word	0xfffffe70
 8008444:	08013024 	.word	0x08013024
 8008448:	08013050 	.word	0x08013050

0800844c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800844c:	b5b0      	push	{r4, r5, r7, lr}
 800844e:	b0e4      	sub	sp, #400	; 0x190
 8008450:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008452:	24c8      	movs	r4, #200	; 0xc8
 8008454:	193b      	adds	r3, r7, r4
 8008456:	0018      	movs	r0, r3
 8008458:	23c6      	movs	r3, #198	; 0xc6
 800845a:	001a      	movs	r2, r3
 800845c:	2100      	movs	r1, #0
 800845e:	f003 fae5 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <astronode_send_sak_cr+0x70>)
 8008464:	25c8      	movs	r5, #200	; 0xc8
 8008466:	006d      	lsls	r5, r5, #1
 8008468:	195b      	adds	r3, r3, r5
 800846a:	19db      	adds	r3, r3, r7
 800846c:	0018      	movs	r0, r3
 800846e:	23c6      	movs	r3, #198	; 0xc6
 8008470:	001a      	movs	r2, r3
 8008472:	2100      	movs	r1, #0
 8008474:	f003 fada 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008478:	193b      	adds	r3, r7, r4
 800847a:	2246      	movs	r2, #70	; 0x46
 800847c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800847e:	003a      	movs	r2, r7
 8008480:	193b      	adds	r3, r7, r4
 8008482:	0011      	movs	r1, r2
 8008484:	0018      	movs	r0, r3
 8008486:	f000 fcfb 	bl	8008e80 <astronode_transport_send_receive>
 800848a:	0003      	movs	r3, r0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d111      	bne.n	80084b4 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <astronode_send_sak_cr+0x70>)
 8008492:	195b      	adds	r3, r3, r5
 8008494:	19db      	adds	r3, r3, r7
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2bc6      	cmp	r3, #198	; 0xc6
 800849a:	d107      	bne.n	80084ac <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <astronode_send_sak_cr+0x74>)
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <astronode_send_sak_cr+0x78>)
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fa fe65 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80084aa:	e003      	b.n	80084b4 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <astronode_send_sak_cr+0x7c>)
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7fa fe60 	bl	8003174 <send_debug_logs>
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b064      	add	sp, #400	; 0x190
 80084ba:	bdb0      	pop	{r4, r5, r7, pc}
 80084bc:	fffffe70 	.word	0xfffffe70
 80084c0:	20000bfc 	.word	0x20000bfc
 80084c4:	08013084 	.word	0x08013084
 80084c8:	080130ac 	.word	0x080130ac

080084cc <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	b0ed      	sub	sp, #436	; 0x1b4
 80084d0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084d2:	21c8      	movs	r1, #200	; 0xc8
 80084d4:	2318      	movs	r3, #24
 80084d6:	18cb      	adds	r3, r1, r3
 80084d8:	19db      	adds	r3, r3, r7
 80084da:	0018      	movs	r0, r3
 80084dc:	23c6      	movs	r3, #198	; 0xc6
 80084de:	001a      	movs	r2, r3
 80084e0:	2100      	movs	r1, #0
 80084e2:	f003 faa3 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80084e6:	4b4a      	ldr	r3, [pc, #296]	; (8008610 <astronode_send_mpn_rr+0x144>)
 80084e8:	26cc      	movs	r6, #204	; 0xcc
 80084ea:	0076      	lsls	r6, r6, #1
 80084ec:	199b      	adds	r3, r3, r6
 80084ee:	2218      	movs	r2, #24
 80084f0:	4694      	mov	ip, r2
 80084f2:	44bc      	add	ip, r7
 80084f4:	4463      	add	r3, ip
 80084f6:	0018      	movs	r0, r3
 80084f8:	23c6      	movs	r3, #198	; 0xc6
 80084fa:	001a      	movs	r2, r3
 80084fc:	2100      	movs	r1, #0
 80084fe:	f003 fa95 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008502:	21c8      	movs	r1, #200	; 0xc8
 8008504:	2318      	movs	r3, #24
 8008506:	18cb      	adds	r3, r1, r3
 8008508:	19db      	adds	r3, r3, r7
 800850a:	221b      	movs	r2, #27
 800850c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800850e:	2318      	movs	r3, #24
 8008510:	18fa      	adds	r2, r7, r3
 8008512:	2318      	movs	r3, #24
 8008514:	18cb      	adds	r3, r1, r3
 8008516:	19db      	adds	r3, r3, r7
 8008518:	0011      	movs	r1, r2
 800851a:	0018      	movs	r0, r3
 800851c:	f000 fcb0 	bl	8008e80 <astronode_transport_send_receive>
 8008520:	0003      	movs	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d16f      	bne.n	8008606 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008526:	4b3a      	ldr	r3, [pc, #232]	; (8008610 <astronode_send_mpn_rr+0x144>)
 8008528:	0032      	movs	r2, r6
 800852a:	189b      	adds	r3, r3, r2
 800852c:	2118      	movs	r1, #24
 800852e:	468c      	mov	ip, r1
 8008530:	44bc      	add	ip, r7
 8008532:	4463      	add	r3, ip
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b9b      	cmp	r3, #155	; 0x9b
 8008538:	d161      	bne.n	80085fe <astronode_send_mpn_rr+0x132>
        {
 800853a:	466b      	mov	r3, sp
 800853c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800853e:	4b34      	ldr	r3, [pc, #208]	; (8008610 <astronode_send_mpn_rr+0x144>)
 8008540:	189b      	adds	r3, r3, r2
 8008542:	2218      	movs	r2, #24
 8008544:	4694      	mov	ip, r2
 8008546:	44bc      	add	ip, r7
 8008548:	4463      	add	r3, ip
 800854a:	22c4      	movs	r2, #196	; 0xc4
 800854c:	5a9b      	ldrh	r3, [r3, r2]
 800854e:	001a      	movs	r2, r3
 8008550:	3a01      	subs	r2, #1
 8008552:	21ca      	movs	r1, #202	; 0xca
 8008554:	0049      	lsls	r1, r1, #1
 8008556:	2018      	movs	r0, #24
 8008558:	1809      	adds	r1, r1, r0
 800855a:	19c9      	adds	r1, r1, r7
 800855c:	600a      	str	r2, [r1, #0]
 800855e:	001c      	movs	r4, r3
 8008560:	2200      	movs	r2, #0
 8008562:	0015      	movs	r5, r2
 8008564:	0020      	movs	r0, r4
 8008566:	0029      	movs	r1, r5
 8008568:	0004      	movs	r4, r0
 800856a:	0f62      	lsrs	r2, r4, #29
 800856c:	000c      	movs	r4, r1
 800856e:	00e4      	lsls	r4, r4, #3
 8008570:	617c      	str	r4, [r7, #20]
 8008572:	697c      	ldr	r4, [r7, #20]
 8008574:	4314      	orrs	r4, r2
 8008576:	617c      	str	r4, [r7, #20]
 8008578:	0001      	movs	r1, r0
 800857a:	00c9      	lsls	r1, r1, #3
 800857c:	6139      	str	r1, [r7, #16]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	6838      	ldr	r0, [r7, #0]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	0004      	movs	r4, r0
 800858a:	0f62      	lsrs	r2, r4, #29
 800858c:	000c      	movs	r4, r1
 800858e:	00e4      	lsls	r4, r4, #3
 8008590:	60fc      	str	r4, [r7, #12]
 8008592:	68fc      	ldr	r4, [r7, #12]
 8008594:	4314      	orrs	r4, r2
 8008596:	60fc      	str	r4, [r7, #12]
 8008598:	0001      	movs	r1, r0
 800859a:	00ca      	lsls	r2, r1, #3
 800859c:	60ba      	str	r2, [r7, #8]
 800859e:	3307      	adds	r3, #7
 80085a0:	08db      	lsrs	r3, r3, #3
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	4669      	mov	r1, sp
 80085a6:	1acb      	subs	r3, r1, r3
 80085a8:	469d      	mov	sp, r3
 80085aa:	466b      	mov	r3, sp
 80085ac:	3300      	adds	r3, #0
 80085ae:	24c8      	movs	r4, #200	; 0xc8
 80085b0:	0064      	lsls	r4, r4, #1
 80085b2:	2218      	movs	r2, #24
 80085b4:	18a2      	adds	r2, r4, r2
 80085b6:	19d1      	adds	r1, r2, r7
 80085b8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80085ba:	4b16      	ldr	r3, [pc, #88]	; (8008614 <astronode_send_mpn_rr+0x148>)
 80085bc:	0018      	movs	r0, r3
 80085be:	f7fa fdd9 	bl	8003174 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80085c2:	4b13      	ldr	r3, [pc, #76]	; (8008610 <astronode_send_mpn_rr+0x144>)
 80085c4:	22cc      	movs	r2, #204	; 0xcc
 80085c6:	0052      	lsls	r2, r2, #1
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	2218      	movs	r2, #24
 80085cc:	4694      	mov	ip, r2
 80085ce:	44bc      	add	ip, r7
 80085d0:	4463      	add	r3, ip
 80085d2:	22c4      	movs	r2, #196	; 0xc4
 80085d4:	5a9b      	ldrh	r3, [r3, r2]
 80085d6:	0019      	movs	r1, r3
 80085d8:	2318      	movs	r3, #24
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	3301      	adds	r3, #1
 80085de:	4a0e      	ldr	r2, [pc, #56]	; (8008618 <astronode_send_mpn_rr+0x14c>)
 80085e0:	2018      	movs	r0, #24
 80085e2:	1820      	adds	r0, r4, r0
 80085e4:	19c0      	adds	r0, r0, r7
 80085e6:	6800      	ldr	r0, [r0, #0]
 80085e8:	f003 f956 	bl	800b898 <snprintf>
            send_debug_logs(product_number);
 80085ec:	2318      	movs	r3, #24
 80085ee:	18e3      	adds	r3, r4, r3
 80085f0:	19db      	adds	r3, r3, r7
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	0018      	movs	r0, r3
 80085f6:	f7fa fdbd 	bl	8003174 <send_debug_logs>
 80085fa:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80085fc:	e003      	b.n	8008606 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <astronode_send_mpn_rr+0x150>)
 8008600:	0018      	movs	r0, r3
 8008602:	f7fa fdb7 	bl	8003174 <send_debug_logs>
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	46bd      	mov	sp, r7
 800860a:	b06d      	add	sp, #436	; 0x1b4
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	fffffe68 	.word	0xfffffe68
 8008614:	08013174 	.word	0x08013174
 8008618:	08012cac 	.word	0x08012cac
 800861c:	08012ce8 	.word	0x08012ce8

08008620 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008620:	b5b0      	push	{r4, r5, r7, lr}
 8008622:	b0e4      	sub	sp, #400	; 0x190
 8008624:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008626:	24c8      	movs	r4, #200	; 0xc8
 8008628:	193b      	adds	r3, r7, r4
 800862a:	0018      	movs	r0, r3
 800862c:	23c6      	movs	r3, #198	; 0xc6
 800862e:	001a      	movs	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	f003 f9fb 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <astronode_send_cmd_cr+0x70>)
 8008638:	25c8      	movs	r5, #200	; 0xc8
 800863a:	006d      	lsls	r5, r5, #1
 800863c:	195b      	adds	r3, r3, r5
 800863e:	19db      	adds	r3, r3, r7
 8008640:	0018      	movs	r0, r3
 8008642:	23c6      	movs	r3, #198	; 0xc6
 8008644:	001a      	movs	r2, r3
 8008646:	2100      	movs	r1, #0
 8008648:	f003 f9f0 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800864c:	193b      	adds	r3, r7, r4
 800864e:	2248      	movs	r2, #72	; 0x48
 8008650:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008652:	003a      	movs	r2, r7
 8008654:	193b      	adds	r3, r7, r4
 8008656:	0011      	movs	r1, r2
 8008658:	0018      	movs	r0, r3
 800865a:	f000 fc11 	bl	8008e80 <astronode_transport_send_receive>
 800865e:	0003      	movs	r3, r0
 8008660:	2b01      	cmp	r3, #1
 8008662:	d111      	bne.n	8008688 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <astronode_send_cmd_cr+0x70>)
 8008666:	195b      	adds	r3, r3, r5
 8008668:	19db      	adds	r3, r3, r7
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2bc8      	cmp	r3, #200	; 0xc8
 800866e:	d107      	bne.n	8008680 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008670:	4b08      	ldr	r3, [pc, #32]	; (8008694 <astronode_send_cmd_cr+0x74>)
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008676:	4b08      	ldr	r3, [pc, #32]	; (8008698 <astronode_send_cmd_cr+0x78>)
 8008678:	0018      	movs	r0, r3
 800867a:	f7fa fd7b 	bl	8003174 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800867e:	e003      	b.n	8008688 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <astronode_send_cmd_cr+0x7c>)
 8008682:	0018      	movs	r0, r3
 8008684:	f7fa fd76 	bl	8003174 <send_debug_logs>
}
 8008688:	46c0      	nop			; (mov r8, r8)
 800868a:	46bd      	mov	sp, r7
 800868c:	b064      	add	sp, #400	; 0x190
 800868e:	bdb0      	pop	{r4, r5, r7, pc}
 8008690:	fffffe70 	.word	0xfffffe70
 8008694:	20000bfe 	.word	0x20000bfe
 8008698:	080135c4 	.word	0x080135c4
 800869c:	080135e8 	.word	0x080135e8

080086a0 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	4cac      	ldr	r4, [pc, #688]	; (8008954 <astronode_send_cmd_rr+0x2b4>)
 80086a4:	44a5      	add	sp, r4
 80086a6:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80086a8:	218c      	movs	r1, #140	; 0x8c
 80086aa:	0049      	lsls	r1, r1, #1
 80086ac:	2318      	movs	r3, #24
 80086ae:	18cb      	adds	r3, r1, r3
 80086b0:	19db      	adds	r3, r3, r7
 80086b2:	0018      	movs	r0, r3
 80086b4:	23c6      	movs	r3, #198	; 0xc6
 80086b6:	001a      	movs	r2, r3
 80086b8:	2100      	movs	r1, #0
 80086ba:	f003 f9b7 	bl	800ba2c <memset>
    astronode_app_msg_t answer = {0};
 80086be:	4ba6      	ldr	r3, [pc, #664]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 80086c0:	26f8      	movs	r6, #248	; 0xf8
 80086c2:	0076      	lsls	r6, r6, #1
 80086c4:	199b      	adds	r3, r3, r6
 80086c6:	2218      	movs	r2, #24
 80086c8:	4694      	mov	ip, r2
 80086ca:	44bc      	add	ip, r7
 80086cc:	4463      	add	r3, ip
 80086ce:	0018      	movs	r0, r3
 80086d0:	23c6      	movs	r3, #198	; 0xc6
 80086d2:	001a      	movs	r2, r3
 80086d4:	2100      	movs	r1, #0
 80086d6:	f003 f9a9 	bl	800ba2c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80086da:	218c      	movs	r1, #140	; 0x8c
 80086dc:	0049      	lsls	r1, r1, #1
 80086de:	2318      	movs	r3, #24
 80086e0:	18cb      	adds	r3, r1, r3
 80086e2:	19db      	adds	r3, r3, r7
 80086e4:	2247      	movs	r2, #71	; 0x47
 80086e6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086e8:	2350      	movs	r3, #80	; 0x50
 80086ea:	2218      	movs	r2, #24
 80086ec:	189b      	adds	r3, r3, r2
 80086ee:	19da      	adds	r2, r3, r7
 80086f0:	2318      	movs	r3, #24
 80086f2:	18cb      	adds	r3, r1, r3
 80086f4:	19db      	adds	r3, r3, r7
 80086f6:	0011      	movs	r1, r2
 80086f8:	0018      	movs	r0, r3
 80086fa:	f000 fbc1 	bl	8008e80 <astronode_transport_send_receive>
 80086fe:	0003      	movs	r3, r0
 8008700:	2b01      	cmp	r3, #1
 8008702:	d000      	beq.n	8008706 <astronode_send_cmd_rr+0x66>
 8008704:	e121      	b.n	800894a <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008706:	4b94      	ldr	r3, [pc, #592]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 8008708:	199b      	adds	r3, r3, r6
 800870a:	2218      	movs	r2, #24
 800870c:	4694      	mov	ip, r2
 800870e:	44bc      	add	ip, r7
 8008710:	4463      	add	r3, ip
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2bc7      	cmp	r3, #199	; 0xc7
 8008716:	d000      	beq.n	800871a <astronode_send_cmd_rr+0x7a>
 8008718:	e113      	b.n	8008942 <astronode_send_cmd_rr+0x2a2>
        {
 800871a:	466b      	mov	r3, sp
 800871c:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800871e:	4b8f      	ldr	r3, [pc, #572]	; (800895c <astronode_send_cmd_rr+0x2bc>)
 8008720:	0018      	movs	r0, r3
 8008722:	f7fa fd27 	bl	8003174 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008726:	4b8c      	ldr	r3, [pc, #560]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 8008728:	21f8      	movs	r1, #248	; 0xf8
 800872a:	0049      	lsls	r1, r1, #1
 800872c:	185b      	adds	r3, r3, r1
 800872e:	2218      	movs	r2, #24
 8008730:	4694      	mov	ip, r2
 8008732:	44bc      	add	ip, r7
 8008734:	4463      	add	r3, ip
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 800873a:	4b87      	ldr	r3, [pc, #540]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 800873c:	185b      	adds	r3, r3, r1
 800873e:	2018      	movs	r0, #24
 8008740:	4684      	mov	ip, r0
 8008742:	44bc      	add	ip, r7
 8008744:	4463      	add	r3, ip
 8008746:	789b      	ldrb	r3, [r3, #2]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 800874c:	4b82      	ldr	r3, [pc, #520]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 800874e:	185b      	adds	r3, r3, r1
 8008750:	2018      	movs	r0, #24
 8008752:	4684      	mov	ip, r0
 8008754:	44bc      	add	ip, r7
 8008756:	4463      	add	r3, ip
 8008758:	78db      	ldrb	r3, [r3, #3]
 800875a:	041b      	lsls	r3, r3, #16
 800875c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800875e:	4b7e      	ldr	r3, [pc, #504]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 8008760:	185b      	adds	r3, r3, r1
 8008762:	2118      	movs	r1, #24
 8008764:	468c      	mov	ip, r1
 8008766:	44bc      	add	ip, r7
 8008768:	4463      	add	r3, ip
 800876a:	791b      	ldrb	r3, [r3, #4]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008770:	22f4      	movs	r2, #244	; 0xf4
 8008772:	0052      	lsls	r2, r2, #1
 8008774:	2118      	movs	r1, #24
 8008776:	1851      	adds	r1, r2, r1
 8008778:	19c8      	adds	r0, r1, r7
 800877a:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 800877c:	2318      	movs	r3, #24
 800877e:	18d3      	adds	r3, r2, r3
 8008780:	19db      	adds	r3, r3, r7
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4976      	ldr	r1, [pc, #472]	; (8008960 <astronode_send_cmd_rr+0x2c0>)
 8008786:	2318      	movs	r3, #24
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	0018      	movs	r0, r3
 800878c:	f003 f8b8 	bl	800b900 <sprintf>
            send_debug_logs(str);
 8008790:	2318      	movs	r3, #24
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	0018      	movs	r0, r3
 8008796:	f7fa fced 	bl	8003174 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 800879a:	4b6f      	ldr	r3, [pc, #444]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 800879c:	21f8      	movs	r1, #248	; 0xf8
 800879e:	0049      	lsls	r1, r1, #1
 80087a0:	185b      	adds	r3, r3, r1
 80087a2:	2218      	movs	r2, #24
 80087a4:	4694      	mov	ip, r2
 80087a6:	44bc      	add	ip, r7
 80087a8:	4463      	add	r3, ip
 80087aa:	22c4      	movs	r2, #196	; 0xc4
 80087ac:	5a9b      	ldrh	r3, [r3, r2]
 80087ae:	2b2c      	cmp	r3, #44	; 0x2c
 80087b0:	d00e      	beq.n	80087d0 <astronode_send_cmd_rr+0x130>
 80087b2:	4b69      	ldr	r3, [pc, #420]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 80087b4:	185b      	adds	r3, r3, r1
 80087b6:	2218      	movs	r2, #24
 80087b8:	4694      	mov	ip, r2
 80087ba:	44bc      	add	ip, r7
 80087bc:	4463      	add	r3, ip
 80087be:	22c4      	movs	r2, #196	; 0xc4
 80087c0:	5a9b      	ldrh	r3, [r3, r2]
 80087c2:	2b0c      	cmp	r3, #12
 80087c4:	d004      	beq.n	80087d0 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 80087c6:	4b67      	ldr	r3, [pc, #412]	; (8008964 <astronode_send_cmd_rr+0x2c4>)
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7fa fcd3 	bl	8003174 <send_debug_logs>
                return;
 80087ce:	e0b6      	b.n	800893e <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 80087d0:	4b61      	ldr	r3, [pc, #388]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 80087d2:	22f8      	movs	r2, #248	; 0xf8
 80087d4:	0052      	lsls	r2, r2, #1
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	2218      	movs	r2, #24
 80087da:	4694      	mov	ip, r2
 80087dc:	44bc      	add	ip, r7
 80087de:	4463      	add	r3, ip
 80087e0:	22c4      	movs	r2, #196	; 0xc4
 80087e2:	5a9b      	ldrh	r3, [r3, r2]
 80087e4:	001a      	movs	r2, r3
 80087e6:	3a01      	subs	r2, #1
 80087e8:	21f2      	movs	r1, #242	; 0xf2
 80087ea:	0049      	lsls	r1, r1, #1
 80087ec:	2018      	movs	r0, #24
 80087ee:	1809      	adds	r1, r1, r0
 80087f0:	19c9      	adds	r1, r1, r7
 80087f2:	600a      	str	r2, [r1, #0]
 80087f4:	001c      	movs	r4, r3
 80087f6:	2200      	movs	r2, #0
 80087f8:	0015      	movs	r5, r2
 80087fa:	0020      	movs	r0, r4
 80087fc:	0029      	movs	r1, r5
 80087fe:	0004      	movs	r4, r0
 8008800:	0f62      	lsrs	r2, r4, #29
 8008802:	000c      	movs	r4, r1
 8008804:	00e4      	lsls	r4, r4, #3
 8008806:	617c      	str	r4, [r7, #20]
 8008808:	697c      	ldr	r4, [r7, #20]
 800880a:	4314      	orrs	r4, r2
 800880c:	617c      	str	r4, [r7, #20]
 800880e:	0001      	movs	r1, r0
 8008810:	00c9      	lsls	r1, r1, #3
 8008812:	6139      	str	r1, [r7, #16]
 8008814:	603b      	str	r3, [r7, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	6838      	ldr	r0, [r7, #0]
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	0004      	movs	r4, r0
 8008820:	0f62      	lsrs	r2, r4, #29
 8008822:	000c      	movs	r4, r1
 8008824:	00e4      	lsls	r4, r4, #3
 8008826:	60fc      	str	r4, [r7, #12]
 8008828:	68fc      	ldr	r4, [r7, #12]
 800882a:	4314      	orrs	r4, r2
 800882c:	60fc      	str	r4, [r7, #12]
 800882e:	0001      	movs	r1, r0
 8008830:	00ca      	lsls	r2, r1, #3
 8008832:	60ba      	str	r2, [r7, #8]
 8008834:	3307      	adds	r3, #7
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4669      	mov	r1, sp
 800883c:	1acb      	subs	r3, r1, r3
 800883e:	469d      	mov	sp, r3
 8008840:	466b      	mov	r3, sp
 8008842:	3300      	adds	r3, #0
 8008844:	20f0      	movs	r0, #240	; 0xf0
 8008846:	0040      	lsls	r0, r0, #1
 8008848:	2218      	movs	r2, #24
 800884a:	1882      	adds	r2, r0, r2
 800884c:	19d1      	adds	r1, r2, r7
 800884e:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008850:	4b41      	ldr	r3, [pc, #260]	; (8008958 <astronode_send_cmd_rr+0x2b8>)
 8008852:	22f8      	movs	r2, #248	; 0xf8
 8008854:	0052      	lsls	r2, r2, #1
 8008856:	189b      	adds	r3, r3, r2
 8008858:	2218      	movs	r2, #24
 800885a:	4694      	mov	ip, r2
 800885c:	44bc      	add	ip, r7
 800885e:	4463      	add	r3, ip
 8008860:	22c4      	movs	r2, #196	; 0xc4
 8008862:	5a9b      	ldrh	r3, [r3, r2]
 8008864:	3b03      	subs	r3, #3
 8008866:	0019      	movs	r1, r3
 8008868:	2350      	movs	r3, #80	; 0x50
 800886a:	2218      	movs	r2, #24
 800886c:	189b      	adds	r3, r3, r2
 800886e:	19db      	adds	r3, r3, r7
 8008870:	3305      	adds	r3, #5
 8008872:	4a3d      	ldr	r2, [pc, #244]	; (8008968 <astronode_send_cmd_rr+0x2c8>)
 8008874:	2418      	movs	r4, #24
 8008876:	1900      	adds	r0, r0, r4
 8008878:	19c0      	adds	r0, r0, r7
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	f003 f80c 	bl	800b898 <snprintf>
 8008880:	0002      	movs	r2, r0
 8008882:	23ef      	movs	r3, #239	; 0xef
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	2118      	movs	r1, #24
 8008888:	185b      	adds	r3, r3, r1
 800888a:	19db      	adds	r3, r3, r7
 800888c:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 800888e:	23f0      	movs	r3, #240	; 0xf0
 8008890:	33ff      	adds	r3, #255	; 0xff
 8008892:	2218      	movs	r2, #24
 8008894:	189b      	adds	r3, r3, r2
 8008896:	19db      	adds	r3, r3, r7
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e024      	b.n	80088e8 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 800889e:	23f0      	movs	r3, #240	; 0xf0
 80088a0:	33ff      	adds	r3, #255	; 0xff
 80088a2:	2218      	movs	r2, #24
 80088a4:	189b      	adds	r3, r3, r2
 80088a6:	19db      	adds	r3, r3, r7
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	22f0      	movs	r2, #240	; 0xf0
 80088ac:	0052      	lsls	r2, r2, #1
 80088ae:	2118      	movs	r1, #24
 80088b0:	1852      	adds	r2, r2, r1
 80088b2:	19d2      	adds	r2, r2, r7
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	5cd3      	ldrb	r3, [r2, r3]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	4b2c      	ldr	r3, [pc, #176]	; (800896c <astronode_send_cmd_rr+0x2cc>)
 80088bc:	18d3      	adds	r3, r2, r3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	001a      	movs	r2, r3
 80088c2:	2397      	movs	r3, #151	; 0x97
 80088c4:	4013      	ands	r3, r2
 80088c6:	d104      	bne.n	80088d2 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 80088c8:	4b29      	ldr	r3, [pc, #164]	; (8008970 <astronode_send_cmd_rr+0x2d0>)
 80088ca:	0018      	movs	r0, r3
 80088cc:	f7fa fc52 	bl	8003174 <send_debug_logs>
                    return;
 80088d0:	e035      	b.n	800893e <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 80088d2:	21f0      	movs	r1, #240	; 0xf0
 80088d4:	31ff      	adds	r1, #255	; 0xff
 80088d6:	2318      	movs	r3, #24
 80088d8:	18cb      	adds	r3, r1, r3
 80088da:	19db      	adds	r3, r3, r7
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	2318      	movs	r3, #24
 80088e0:	18cb      	adds	r3, r1, r3
 80088e2:	19db      	adds	r3, r3, r7
 80088e4:	3201      	adds	r2, #1
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	23f0      	movs	r3, #240	; 0xf0
 80088ea:	33ff      	adds	r3, #255	; 0xff
 80088ec:	2218      	movs	r2, #24
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	19db      	adds	r3, r3, r7
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	22ef      	movs	r2, #239	; 0xef
 80088f8:	0052      	lsls	r2, r2, #1
 80088fa:	2118      	movs	r1, #24
 80088fc:	1852      	adds	r2, r2, r1
 80088fe:	19d2      	adds	r2, r2, r7
 8008900:	8812      	ldrh	r2, [r2, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d8cb      	bhi.n	800889e <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008906:	4b1b      	ldr	r3, [pc, #108]	; (8008974 <astronode_send_cmd_rr+0x2d4>)
 8008908:	0018      	movs	r0, r3
 800890a:	f7fa fc33 	bl	8003174 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 800890e:	2350      	movs	r3, #80	; 0x50
 8008910:	2218      	movs	r2, #24
 8008912:	189b      	adds	r3, r3, r2
 8008914:	19db      	adds	r3, r3, r7
 8008916:	1d5a      	adds	r2, r3, #5
 8008918:	4917      	ldr	r1, [pc, #92]	; (8008978 <astronode_send_cmd_rr+0x2d8>)
 800891a:	24f0      	movs	r4, #240	; 0xf0
 800891c:	0064      	lsls	r4, r4, #1
 800891e:	2318      	movs	r3, #24
 8008920:	18e3      	adds	r3, r4, r3
 8008922:	19db      	adds	r3, r3, r7
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	0018      	movs	r0, r3
 8008928:	f002 ffea 	bl	800b900 <sprintf>
            send_debug_logs(command_content);
 800892c:	2318      	movs	r3, #24
 800892e:	18e3      	adds	r3, r4, r3
 8008930:	19db      	adds	r3, r3, r7
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	0018      	movs	r0, r3
 8008936:	f7fa fc1d 	bl	8003174 <send_debug_logs>
 800893a:	46b5      	mov	sp, r6
 800893c:	e005      	b.n	800894a <astronode_send_cmd_rr+0x2aa>
                return;
 800893e:	46b5      	mov	sp, r6
 8008940:	e003      	b.n	800894a <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008942:	4b0e      	ldr	r3, [pc, #56]	; (800897c <astronode_send_cmd_rr+0x2dc>)
 8008944:	0018      	movs	r0, r3
 8008946:	f7fa fc15 	bl	8003174 <send_debug_logs>
        }
    }
}
 800894a:	46bd      	mov	sp, r7
 800894c:	2383      	movs	r3, #131	; 0x83
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	449d      	add	sp, r3
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008954:	fffffdf4 	.word	0xfffffdf4
 8008958:	fffffe60 	.word	0xfffffe60
 800895c:	08013600 	.word	0x08013600
 8008960:	0801361c 	.word	0x0801361c
 8008964:	0801366c 	.word	0x0801366c
 8008968:	08012cac 	.word	0x08012cac
 800896c:	080141a8 	.word	0x080141a8
 8008970:	08013680 	.word	0x08013680
 8008974:	080136ac 	.word	0x080136ac
 8008978:	080136c4 	.word	0x080136c4
 800897c:	080136c8 	.word	0x080136c8

08008980 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008984:	4b02      	ldr	r3, [pc, #8]	; (8008990 <is_sak_available+0x10>)
 8008986:	781b      	ldrb	r3, [r3, #0]
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	20000bfc 	.word	0x20000bfc

08008994 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008998:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <is_astronode_reset+0x10>)
 800899a:	781b      	ldrb	r3, [r3, #0]
}
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	20000bfd 	.word	0x20000bfd

080089a8 <is_command_available>:

bool is_command_available()
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
    return g_is_command_available;
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <is_command_available+0x10>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	20000bfe 	.word	0x20000bfe

080089bc <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	0002      	movs	r2, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	1dfb      	adds	r3, r7, #7
 80089c8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80089ca:	1dfb      	adds	r3, r7, #7
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b2f      	cmp	r3, #47	; 0x2f
 80089d0:	d90b      	bls.n	80089ea <ascii_to_value+0x2e>
 80089d2:	1dfb      	adds	r3, r7, #7
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b39      	cmp	r3, #57	; 0x39
 80089d8:	d807      	bhi.n	80089ea <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80089da:	1dfb      	adds	r3, r7, #7
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	3b30      	subs	r3, #48	; 0x30
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	701a      	strb	r2, [r3, #0]
        return true;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e010      	b.n	8008a0c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80089ea:	1dfb      	adds	r3, r7, #7
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d90b      	bls.n	8008a0a <ascii_to_value+0x4e>
 80089f2:	1dfb      	adds	r3, r7, #7
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b46      	cmp	r3, #70	; 0x46
 80089f8:	d807      	bhi.n	8008a0a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80089fa:	1dfb      	adds	r3, r7, #7
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	3b37      	subs	r3, #55	; 0x37
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	701a      	strb	r2, [r3, #0]
        return true;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008a0a:	2300      	movs	r3, #0
    }
}
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	b002      	add	sp, #8
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008a1e:	250e      	movs	r5, #14
 8008a20:	197b      	adds	r3, r7, r5
 8008a22:	2200      	movs	r2, #0
 8008a24:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008a26:	197b      	adds	r3, r7, r5
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	197a      	adds	r2, r7, r5
 8008a2c:	1c59      	adds	r1, r3, #1
 8008a2e:	8011      	strh	r1, [r2, #0]
 8008a30:	001a      	movs	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	189b      	adds	r3, r3, r2
 8008a36:	2202      	movs	r2, #2
 8008a38:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	260a      	movs	r6, #10
 8008a3e:	19bc      	adds	r4, r7, r6
 8008a40:	4a44      	ldr	r2, [pc, #272]	; (8008b54 <astronode_create_request_transport+0x140>)
 8008a42:	2101      	movs	r1, #1
 8008a44:	0018      	movs	r0, r3
 8008a46:	f000 fa7d 	bl	8008f44 <calculate_crc>
 8008a4a:	0003      	movs	r3, r0
 8008a4c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	22c4      	movs	r2, #196	; 0xc4
 8008a56:	5a99      	ldrh	r1, [r3, r2]
 8008a58:	19bc      	adds	r4, r7, r6
 8008a5a:	19bb      	adds	r3, r7, r6
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	001a      	movs	r2, r3
 8008a60:	f000 fa70 	bl	8008f44 <calculate_crc>
 8008a64:	0003      	movs	r3, r0
 8008a66:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008a68:	19bb      	adds	r3, r7, r6
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	b21a      	sxth	r2, r3
 8008a70:	0031      	movs	r1, r6
 8008a72:	19bb      	adds	r3, r7, r6
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	b21a      	sxth	r2, r3
 8008a80:	187b      	adds	r3, r7, r1
 8008a82:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7818      	ldrb	r0, [r3, #0]
 8008a88:	197b      	adds	r3, r7, r5
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	18d3      	adds	r3, r2, r3
 8008a90:	0019      	movs	r1, r3
 8008a92:	f000 fbeb 	bl	800926c <uint8_to_ascii_buffer>
    index += 2;
 8008a96:	197b      	adds	r3, r7, r5
 8008a98:	197a      	adds	r2, r7, r5
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	3202      	adds	r2, #2
 8008a9e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e017      	b.n	8008ada <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008aaa:	240c      	movs	r4, #12
 8008aac:	193b      	adds	r3, r7, r4
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	18d3      	adds	r3, r2, r3
 8008ab4:	7858      	ldrb	r0, [r3, #1]
 8008ab6:	250e      	movs	r5, #14
 8008ab8:	197b      	adds	r3, r7, r5
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	18d3      	adds	r3, r2, r3
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	f000 fbd3 	bl	800926c <uint8_to_ascii_buffer>
        index += 2;
 8008ac6:	197b      	adds	r3, r7, r5
 8008ac8:	197a      	adds	r2, r7, r5
 8008aca:	8812      	ldrh	r2, [r2, #0]
 8008acc:	3202      	adds	r2, #2
 8008ace:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008ad0:	193b      	adds	r3, r7, r4
 8008ad2:	881a      	ldrh	r2, [r3, #0]
 8008ad4:	193b      	adds	r3, r7, r4
 8008ad6:	3201      	adds	r2, #1
 8008ad8:	801a      	strh	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	22c4      	movs	r2, #196	; 0xc4
 8008ade:	5a9b      	ldrh	r3, [r3, r2]
 8008ae0:	220c      	movs	r2, #12
 8008ae2:	18ba      	adds	r2, r7, r2
 8008ae4:	8812      	ldrh	r2, [r2, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d3df      	bcc.n	8008aaa <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008aea:	250a      	movs	r5, #10
 8008aec:	197b      	adds	r3, r7, r5
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	0a1b      	lsrs	r3, r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	b2d8      	uxtb	r0, r3
 8008af6:	240e      	movs	r4, #14
 8008af8:	193b      	adds	r3, r7, r4
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	18d3      	adds	r3, r2, r3
 8008b00:	0019      	movs	r1, r3
 8008b02:	f000 fbb3 	bl	800926c <uint8_to_ascii_buffer>
    index += 2;
 8008b06:	0021      	movs	r1, r4
 8008b08:	187b      	adds	r3, r7, r1
 8008b0a:	187a      	adds	r2, r7, r1
 8008b0c:	8812      	ldrh	r2, [r2, #0]
 8008b0e:	3202      	adds	r2, #2
 8008b10:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008b12:	197b      	adds	r3, r7, r5
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b2d8      	uxtb	r0, r3
 8008b18:	000c      	movs	r4, r1
 8008b1a:	187b      	adds	r3, r7, r1
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	0019      	movs	r1, r3
 8008b24:	f000 fba2 	bl	800926c <uint8_to_ascii_buffer>
    index += 2;
 8008b28:	0020      	movs	r0, r4
 8008b2a:	183b      	adds	r3, r7, r0
 8008b2c:	183a      	adds	r2, r7, r0
 8008b2e:	8812      	ldrh	r2, [r2, #0]
 8008b30:	3202      	adds	r2, #2
 8008b32:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008b34:	183b      	adds	r3, r7, r0
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	183a      	adds	r2, r7, r0
 8008b3a:	1c59      	adds	r1, r3, #1
 8008b3c:	8011      	strh	r1, [r2, #0]
 8008b3e:	001a      	movs	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	189b      	adds	r3, r3, r2
 8008b44:	2203      	movs	r2, #3
 8008b46:	701a      	strb	r2, [r3, #0]

    return index;
 8008b48:	183b      	adds	r3, r7, r0
 8008b4a:	881b      	ldrh	r3, [r3, #0]
}
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b005      	add	sp, #20
 8008b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b54:	0000ffff 	.word	0x0000ffff

08008b58 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	230a      	movs	r3, #10
 8008b64:	18fb      	adds	r3, r7, r3
 8008b66:	1c0a      	adds	r2, r1, #0
 8008b68:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d005      	beq.n	8008b7e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008b72:	4bbd      	ldr	r3, [pc, #756]	; (8008e68 <astronode_decode_answer_transport+0x310>)
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7fa fafd 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e170      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008b7e:	210a      	movs	r1, #10
 8008b80:	187b      	adds	r3, r7, r1
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2201      	movs	r2, #1
 8008b86:	4013      	ands	r3, r2
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <astronode_decode_answer_transport+0x3e>
 8008b8e:	187b      	adds	r3, r7, r1
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	d805      	bhi.n	8008ba2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008b96:	4bb5      	ldr	r3, [pc, #724]	; (8008e6c <astronode_decode_answer_transport+0x314>)
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7fa faeb 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e15e      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	3b08      	subs	r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da00      	bge.n	8008bb0 <astronode_decode_answer_transport+0x58>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	105b      	asrs	r3, r3, #1
 8008bb2:	b299      	uxth	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	22c4      	movs	r2, #196	; 0xc4
 8008bb8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008bba:	230a      	movs	r3, #10
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	18d3      	adds	r3, r2, r3
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d005      	beq.n	8008bd8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008bcc:	4ba8      	ldr	r3, [pc, #672]	; (8008e70 <astronode_decode_answer_transport+0x318>)
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7fa fad0 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e143      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008bd8:	2117      	movs	r1, #23
 8008bda:	187b      	adds	r3, r7, r1
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008be0:	2416      	movs	r4, #22
 8008be2:	193b      	adds	r3, r7, r4
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	187a      	adds	r2, r7, r1
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7ff fee2 	bl	80089bc <ascii_to_value>
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4053      	eors	r3, r2
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10e      	bne.n	8008c24 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3302      	adds	r3, #2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	193a      	adds	r2, r7, r4
 8008c0e:	0011      	movs	r1, r2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7ff fed3 	bl	80089bc <ascii_to_value>
 8008c16:	0003      	movs	r3, r0
 8008c18:	001a      	movs	r2, r3
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4053      	eors	r3, r2
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008c24:	4b93      	ldr	r3, [pc, #588]	; (8008e74 <astronode_decode_answer_transport+0x31c>)
 8008c26:	0018      	movs	r0, r3
 8008c28:	f7fa faa4 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e117      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008c30:	2317      	movs	r3, #23
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	2316      	movs	r3, #22
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008c48:	231e      	movs	r3, #30
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	801a      	strh	r2, [r3, #0]
 8008c50:	231c      	movs	r3, #28
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	2200      	movs	r2, #0
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	e045      	b.n	8008ce6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008c5a:	241e      	movs	r4, #30
 8008c5c:	193b      	adds	r3, r7, r4
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	18d3      	adds	r3, r2, r3
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2217      	movs	r2, #23
 8008c68:	18ba      	adds	r2, r7, r2
 8008c6a:	0011      	movs	r1, r2
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7ff fea5 	bl	80089bc <ascii_to_value>
 8008c72:	0003      	movs	r3, r0
 8008c74:	001a      	movs	r2, r3
 8008c76:	2301      	movs	r3, #1
 8008c78:	4053      	eors	r3, r2
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d112      	bne.n	8008ca6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008c80:	193b      	adds	r3, r7, r4
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	18d3      	adds	r3, r2, r3
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2216      	movs	r2, #22
 8008c8e:	18ba      	adds	r2, r7, r2
 8008c90:	0011      	movs	r1, r2
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7ff fe92 	bl	80089bc <ascii_to_value>
 8008c98:	0003      	movs	r3, r0
 8008c9a:	001a      	movs	r2, r3
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4053      	eors	r3, r2
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008ca6:	4b73      	ldr	r3, [pc, #460]	; (8008e74 <astronode_decode_answer_transport+0x31c>)
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f7fa fa63 	bl	8003174 <send_debug_logs>
            return RS_FAILURE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e0d6      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008cb2:	2317      	movs	r3, #23
 8008cb4:	18fb      	adds	r3, r7, r3
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	b2d9      	uxtb	r1, r3
 8008cbc:	2316      	movs	r3, #22
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	201c      	movs	r0, #28
 8008cc4:	183b      	adds	r3, r7, r0
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	1838      	adds	r0, r7, r0
 8008cca:	1c5c      	adds	r4, r3, #1
 8008ccc:	8004      	strh	r4, [r0, #0]
 8008cce:	0018      	movs	r0, r3
 8008cd0:	188b      	adds	r3, r1, r2
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	181b      	adds	r3, r3, r0
 8008cd8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008cda:	221e      	movs	r2, #30
 8008cdc:	18bb      	adds	r3, r7, r2
 8008cde:	18ba      	adds	r2, r7, r2
 8008ce0:	8812      	ldrh	r2, [r2, #0]
 8008ce2:	3202      	adds	r2, #2
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	231e      	movs	r3, #30
 8008ce8:	18fb      	adds	r3, r7, r3
 8008cea:	881a      	ldrh	r2, [r3, #0]
 8008cec:	260a      	movs	r6, #10
 8008cee:	19bb      	adds	r3, r7, r6
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	3b05      	subs	r3, #5
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	dbb0      	blt.n	8008c5a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	251a      	movs	r5, #26
 8008cfc:	197c      	adds	r4, r7, r5
 8008cfe:	4a5e      	ldr	r2, [pc, #376]	; (8008e78 <astronode_decode_answer_transport+0x320>)
 8008d00:	2101      	movs	r1, #1
 8008d02:	0018      	movs	r0, r3
 8008d04:	f000 f91e 	bl	8008f44 <calculate_crc>
 8008d08:	0003      	movs	r3, r0
 8008d0a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	1c58      	adds	r0, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	22c4      	movs	r2, #196	; 0xc4
 8008d14:	5a99      	ldrh	r1, [r3, r2]
 8008d16:	197c      	adds	r4, r7, r5
 8008d18:	197b      	adds	r3, r7, r5
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	001a      	movs	r2, r3
 8008d1e:	f000 f911 	bl	8008f44 <calculate_crc>
 8008d22:	0003      	movs	r3, r0
 8008d24:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008d26:	197b      	adds	r3, r7, r5
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	b21a      	sxth	r2, r3
 8008d2e:	0029      	movs	r1, r5
 8008d30:	197b      	adds	r3, r7, r5
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	0a1b      	lsrs	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	b21b      	sxth	r3, r3
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	b21a      	sxth	r2, r3
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008d42:	19bb      	adds	r3, r7, r6
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	3b05      	subs	r3, #5
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	18d3      	adds	r3, r2, r3
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2217      	movs	r2, #23
 8008d50:	18ba      	adds	r2, r7, r2
 8008d52:	0011      	movs	r1, r2
 8008d54:	0018      	movs	r0, r3
 8008d56:	f7ff fe31 	bl	80089bc <ascii_to_value>
 8008d5a:	0003      	movs	r3, r0
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4053      	eors	r3, r2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d112      	bne.n	8008d8e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008d68:	19bb      	adds	r3, r7, r6
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	3b04      	subs	r3, #4
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2216      	movs	r2, #22
 8008d76:	18ba      	adds	r2, r7, r2
 8008d78:	0011      	movs	r1, r2
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f7ff fe1e 	bl	80089bc <ascii_to_value>
 8008d80:	0003      	movs	r3, r0
 8008d82:	001a      	movs	r2, r3
 8008d84:	2301      	movs	r3, #1
 8008d86:	4053      	eors	r3, r2
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008d8e:	4b39      	ldr	r3, [pc, #228]	; (8008e74 <astronode_decode_answer_transport+0x31c>)
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7fa f9ef 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e062      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008d9a:	2017      	movs	r0, #23
 8008d9c:	183b      	adds	r3, r7, r0
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	031b      	lsls	r3, r3, #12
 8008da4:	b299      	uxth	r1, r3
 8008da6:	2416      	movs	r4, #22
 8008da8:	193b      	adds	r3, r7, r4
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	2318      	movs	r3, #24
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	188a      	adds	r2, r1, r2
 8008db8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008dba:	250a      	movs	r5, #10
 8008dbc:	197b      	adds	r3, r7, r5
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	3b03      	subs	r3, #3
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	18d3      	adds	r3, r2, r3
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	183a      	adds	r2, r7, r0
 8008dca:	0011      	movs	r1, r2
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7ff fdf5 	bl	80089bc <ascii_to_value>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4053      	eors	r3, r2
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d111      	bne.n	8008e04 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008de0:	197b      	adds	r3, r7, r5
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	3b02      	subs	r3, #2
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	18d3      	adds	r3, r2, r3
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	193a      	adds	r2, r7, r4
 8008dee:	0011      	movs	r1, r2
 8008df0:	0018      	movs	r0, r3
 8008df2:	f7ff fde3 	bl	80089bc <ascii_to_value>
 8008df6:	0003      	movs	r3, r0
 8008df8:	001a      	movs	r2, r3
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4053      	eors	r3, r2
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008e04:	4b1b      	ldr	r3, [pc, #108]	; (8008e74 <astronode_decode_answer_transport+0x31c>)
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7fa f9b4 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e027      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008e10:	2317      	movs	r3, #23
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	2316      	movs	r3, #22
 8008e1e:	18fb      	adds	r3, r7, r3
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	18d3      	adds	r3, r2, r3
 8008e26:	b299      	uxth	r1, r3
 8008e28:	2018      	movs	r0, #24
 8008e2a:	183b      	adds	r3, r7, r0
 8008e2c:	183a      	adds	r2, r7, r0
 8008e2e:	8812      	ldrh	r2, [r2, #0]
 8008e30:	188a      	adds	r2, r1, r2
 8008e32:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008e34:	183a      	adds	r2, r7, r0
 8008e36:	231a      	movs	r3, #26
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	8812      	ldrh	r2, [r2, #0]
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d005      	beq.n	8008e4e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008e42:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <astronode_decode_answer_transport+0x324>)
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7fa f995 	bl	8003174 <send_debug_logs>
        return RS_FAILURE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e008      	b.n	8008e60 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2bff      	cmp	r3, #255	; 0xff
 8008e54:	d103      	bne.n	8008e5e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	0018      	movs	r0, r3
 8008e5a:	f000 f8c3 	bl	8008fe4 <check_for_error>
    }

    return RS_SUCCESS;
 8008e5e:	2301      	movs	r3, #1
}
 8008e60:	0018      	movs	r0, r3
 8008e62:	46bd      	mov	sp, r7
 8008e64:	b009      	add	sp, #36	; 0x24
 8008e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e68:	08013758 	.word	0x08013758
 8008e6c:	080137a8 	.word	0x080137a8
 8008e70:	080137f8 	.word	0x080137f8
 8008e74:	08013848 	.word	0x08013848
 8008e78:	0000ffff 	.word	0x0000ffff
 8008e7c:	08013894 	.word	0x08013894

08008e80 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e82:	4c2b      	ldr	r4, [pc, #172]	; (8008f30 <astronode_transport_send_receive+0xb0>)
 8008e84:	44a5      	add	sp, r4
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008e8c:	4b29      	ldr	r3, [pc, #164]	; (8008f34 <astronode_transport_send_receive+0xb4>)
 8008e8e:	25ca      	movs	r5, #202	; 0xca
 8008e90:	00ad      	lsls	r5, r5, #2
 8008e92:	195b      	adds	r3, r3, r5
 8008e94:	19db      	adds	r3, r3, r7
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	22c4      	movs	r2, #196	; 0xc4
 8008e9e:	0052      	lsls	r2, r2, #1
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f002 fdc2 	bl	800ba2c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008ea8:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <astronode_transport_send_receive+0xb8>)
 8008eaa:	195b      	adds	r3, r3, r5
 8008eac:	19db      	adds	r3, r3, r7
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	22c4      	movs	r2, #196	; 0xc4
 8008eb6:	0052      	lsls	r2, r2, #1
 8008eb8:	2100      	movs	r1, #0
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f002 fdb6 	bl	800ba2c <memset>
    uint16_t answer_length =  0;
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <astronode_transport_send_receive+0xbc>)
 8008ec2:	195b      	adds	r3, r3, r5
 8008ec4:	19db      	adds	r3, r3, r7
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008eca:	4e1d      	ldr	r6, [pc, #116]	; (8008f40 <astronode_transport_send_receive+0xc0>)
 8008ecc:	19bc      	adds	r4, r7, r6
 8008ece:	23cc      	movs	r3, #204	; 0xcc
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	18fa      	adds	r2, r7, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7ff fd9b 	bl	8008a14 <astronode_create_request_transport>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8008ee2:	19bb      	adds	r3, r7, r6
 8008ee4:	881a      	ldrh	r2, [r3, #0]
 8008ee6:	23cc      	movs	r3, #204	; 0xcc
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	0011      	movs	r1, r2
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7fa fa9c 	bl	800342c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8008ef4:	230a      	movs	r3, #10
 8008ef6:	18fa      	adds	r2, r7, r3
 8008ef8:	240c      	movs	r4, #12
 8008efa:	193b      	adds	r3, r7, r4
 8008efc:	0011      	movs	r1, r2
 8008efe:	0018      	movs	r0, r3
 8008f00:	f000 f92c 	bl	800915c <receive_astronode_answer>
 8008f04:	0003      	movs	r3, r0
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d10a      	bne.n	8008f20 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <astronode_transport_send_receive+0xbc>)
 8008f0c:	195b      	adds	r3, r3, r5
 8008f0e:	19db      	adds	r3, r3, r7
 8008f10:	8819      	ldrh	r1, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	193b      	adds	r3, r7, r4
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7ff fe1e 	bl	8008b58 <astronode_decode_answer_transport>
 8008f1c:	0003      	movs	r3, r0
 8008f1e:	e000      	b.n	8008f22 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008f20:	2300      	movs	r3, #0
    }
}
 8008f22:	0018      	movs	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	23cb      	movs	r3, #203	; 0xcb
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	449d      	add	sp, r3
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	fffffcd4 	.word	0xfffffcd4
 8008f34:	fffffe70 	.word	0xfffffe70
 8008f38:	fffffce4 	.word	0xfffffce4
 8008f3c:	fffffce2 	.word	0xfffffce2
 8008f40:	00000326 	.word	0x00000326

08008f44 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	0008      	movs	r0, r1
 8008f4e:	0011      	movs	r1, r2
 8008f50:	1cbb      	adds	r3, r7, #2
 8008f52:	1c02      	adds	r2, r0, #0
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	003b      	movs	r3, r7
 8008f58:	1c0a      	adds	r2, r1, #0
 8008f5a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008f5c:	230e      	movs	r3, #14
 8008f5e:	18fb      	adds	r3, r7, r3
 8008f60:	003a      	movs	r2, r7
 8008f62:	8812      	ldrh	r2, [r2, #0]
 8008f64:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8008f66:	e02e      	b.n	8008fc6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8008f68:	240e      	movs	r4, #14
 8008f6a:	193b      	adds	r3, r7, r4
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	b299      	uxth	r1, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	200c      	movs	r0, #12
 8008f7e:	183b      	adds	r3, r7, r0
 8008f80:	404a      	eors	r2, r1
 8008f82:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008f84:	183b      	adds	r3, r7, r0
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	091b      	lsrs	r3, r3, #4
 8008f8a:	b299      	uxth	r1, r3
 8008f8c:	183b      	adds	r3, r7, r0
 8008f8e:	183a      	adds	r2, r7, r0
 8008f90:	8812      	ldrh	r2, [r2, #0]
 8008f92:	404a      	eors	r2, r1
 8008f94:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8008f96:	0021      	movs	r1, r4
 8008f98:	187b      	adds	r3, r7, r1
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	b21a      	sxth	r2, r3
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	031b      	lsls	r3, r3, #12
 8008fa6:	b21b      	sxth	r3, r3
 8008fa8:	4053      	eors	r3, r2
 8008faa:	b21a      	sxth	r2, r3
 8008fac:	183b      	adds	r3, r7, r0
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	015b      	lsls	r3, r3, #5
 8008fb2:	b21b      	sxth	r3, r3
 8008fb4:	4053      	eors	r3, r2
 8008fb6:	b21a      	sxth	r2, r3
 8008fb8:	183b      	adds	r3, r7, r0
 8008fba:	2000      	movs	r0, #0
 8008fbc:	5e1b      	ldrsh	r3, [r3, r0]
 8008fbe:	4053      	eors	r3, r2
 8008fc0:	b21a      	sxth	r2, r3
 8008fc2:	187b      	adds	r3, r7, r1
 8008fc4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8008fc6:	1cbb      	adds	r3, r7, #2
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	1cba      	adds	r2, r7, #2
 8008fcc:	1e59      	subs	r1, r3, #1
 8008fce:	8011      	strh	r1, [r2, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1c9      	bne.n	8008f68 <calculate_crc+0x24>
    }
    return crc;
 8008fd4:	230e      	movs	r3, #14
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	881b      	ldrh	r3, [r3, #0]
}
 8008fda:	0018      	movs	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	b005      	add	sp, #20
 8008fe0:	bd90      	pop	{r4, r7, pc}
	...

08008fe4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	b299      	uxth	r1, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	789b      	ldrb	r3, [r3, #2]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	200e      	movs	r0, #14
 8008ffe:	183b      	adds	r3, r7, r0
 8009000:	188a      	adds	r2, r1, r2
 8009002:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009004:	183b      	adds	r3, r7, r0
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	4a40      	ldr	r2, [pc, #256]	; (800910c <check_for_error+0x128>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d100      	bne.n	8009010 <check_for_error+0x2c>
 800900e:	e06f      	b.n	80090f0 <check_for_error+0x10c>
 8009010:	4a3e      	ldr	r2, [pc, #248]	; (800910c <check_for_error+0x128>)
 8009012:	4293      	cmp	r3, r2
 8009014:	dd00      	ble.n	8009018 <check_for_error+0x34>
 8009016:	e070      	b.n	80090fa <check_for_error+0x116>
 8009018:	4a3d      	ldr	r2, [pc, #244]	; (8009110 <check_for_error+0x12c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d100      	bne.n	8009020 <check_for_error+0x3c>
 800901e:	e062      	b.n	80090e6 <check_for_error+0x102>
 8009020:	4a3b      	ldr	r2, [pc, #236]	; (8009110 <check_for_error+0x12c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	dd00      	ble.n	8009028 <check_for_error+0x44>
 8009026:	e068      	b.n	80090fa <check_for_error+0x116>
 8009028:	4a3a      	ldr	r2, [pc, #232]	; (8009114 <check_for_error+0x130>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d056      	beq.n	80090dc <check_for_error+0xf8>
 800902e:	4a39      	ldr	r2, [pc, #228]	; (8009114 <check_for_error+0x130>)
 8009030:	4293      	cmp	r3, r2
 8009032:	dd00      	ble.n	8009036 <check_for_error+0x52>
 8009034:	e061      	b.n	80090fa <check_for_error+0x116>
 8009036:	4a38      	ldr	r2, [pc, #224]	; (8009118 <check_for_error+0x134>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d04a      	beq.n	80090d2 <check_for_error+0xee>
 800903c:	4a36      	ldr	r2, [pc, #216]	; (8009118 <check_for_error+0x134>)
 800903e:	4293      	cmp	r3, r2
 8009040:	dc5b      	bgt.n	80090fa <check_for_error+0x116>
 8009042:	4a36      	ldr	r2, [pc, #216]	; (800911c <check_for_error+0x138>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d03f      	beq.n	80090c8 <check_for_error+0xe4>
 8009048:	4a34      	ldr	r2, [pc, #208]	; (800911c <check_for_error+0x138>)
 800904a:	4293      	cmp	r3, r2
 800904c:	dc55      	bgt.n	80090fa <check_for_error+0x116>
 800904e:	4a34      	ldr	r2, [pc, #208]	; (8009120 <check_for_error+0x13c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d034      	beq.n	80090be <check_for_error+0xda>
 8009054:	4a32      	ldr	r2, [pc, #200]	; (8009120 <check_for_error+0x13c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	dc4f      	bgt.n	80090fa <check_for_error+0x116>
 800905a:	4a32      	ldr	r2, [pc, #200]	; (8009124 <check_for_error+0x140>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d029      	beq.n	80090b4 <check_for_error+0xd0>
 8009060:	4a30      	ldr	r2, [pc, #192]	; (8009124 <check_for_error+0x140>)
 8009062:	4293      	cmp	r3, r2
 8009064:	dc49      	bgt.n	80090fa <check_for_error+0x116>
 8009066:	4a30      	ldr	r2, [pc, #192]	; (8009128 <check_for_error+0x144>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d01e      	beq.n	80090aa <check_for_error+0xc6>
 800906c:	4a2e      	ldr	r2, [pc, #184]	; (8009128 <check_for_error+0x144>)
 800906e:	4293      	cmp	r3, r2
 8009070:	dc43      	bgt.n	80090fa <check_for_error+0x116>
 8009072:	2222      	movs	r2, #34	; 0x22
 8009074:	32ff      	adds	r2, #255	; 0xff
 8009076:	4293      	cmp	r3, r2
 8009078:	d012      	beq.n	80090a0 <check_for_error+0xbc>
 800907a:	2291      	movs	r2, #145	; 0x91
 800907c:	0052      	lsls	r2, r2, #1
 800907e:	4293      	cmp	r3, r2
 8009080:	da3b      	bge.n	80090fa <check_for_error+0x116>
 8009082:	2b01      	cmp	r3, #1
 8009084:	d002      	beq.n	800908c <check_for_error+0xa8>
 8009086:	2b11      	cmp	r3, #17
 8009088:	d005      	beq.n	8009096 <check_for_error+0xb2>
 800908a:	e036      	b.n	80090fa <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800908c:	4b27      	ldr	r3, [pc, #156]	; (800912c <check_for_error+0x148>)
 800908e:	0018      	movs	r0, r3
 8009090:	f7fa f870 	bl	8003174 <send_debug_logs>
            break;
 8009094:	e036      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8009096:	4b26      	ldr	r3, [pc, #152]	; (8009130 <check_for_error+0x14c>)
 8009098:	0018      	movs	r0, r3
 800909a:	f7fa f86b 	bl	8003174 <send_debug_logs>
            break;
 800909e:	e031      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80090a0:	4b24      	ldr	r3, [pc, #144]	; (8009134 <check_for_error+0x150>)
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7fa f866 	bl	8003174 <send_debug_logs>
            break;
 80090a8:	e02c      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80090aa:	4b23      	ldr	r3, [pc, #140]	; (8009138 <check_for_error+0x154>)
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7fa f861 	bl	8003174 <send_debug_logs>
            break;
 80090b2:	e027      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80090b4:	4b21      	ldr	r3, [pc, #132]	; (800913c <check_for_error+0x158>)
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7fa f85c 	bl	8003174 <send_debug_logs>
            break;
 80090bc:	e022      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80090be:	4b20      	ldr	r3, [pc, #128]	; (8009140 <check_for_error+0x15c>)
 80090c0:	0018      	movs	r0, r3
 80090c2:	f7fa f857 	bl	8003174 <send_debug_logs>
            break;
 80090c6:	e01d      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80090c8:	4b1e      	ldr	r3, [pc, #120]	; (8009144 <check_for_error+0x160>)
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7fa f852 	bl	8003174 <send_debug_logs>
            break;
 80090d0:	e018      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <check_for_error+0x164>)
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7fa f84d 	bl	8003174 <send_debug_logs>
            break;
 80090da:	e013      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80090dc:	4b1b      	ldr	r3, [pc, #108]	; (800914c <check_for_error+0x168>)
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fa f848 	bl	8003174 <send_debug_logs>
            break;
 80090e4:	e00e      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <check_for_error+0x16c>)
 80090e8:	0018      	movs	r0, r3
 80090ea:	f7fa f843 	bl	8003174 <send_debug_logs>
            break;
 80090ee:	e009      	b.n	8009104 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80090f0:	4b18      	ldr	r3, [pc, #96]	; (8009154 <check_for_error+0x170>)
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7fa f83e 	bl	8003174 <send_debug_logs>
            break;
 80090f8:	e004      	b.n	8009104 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80090fa:	4b17      	ldr	r3, [pc, #92]	; (8009158 <check_for_error+0x174>)
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7fa f839 	bl	8003174 <send_debug_logs>
            break;
 8009102:	46c0      	nop			; (mov r8, r8)
    }
}
 8009104:	46c0      	nop			; (mov r8, r8)
 8009106:	46bd      	mov	sp, r7
 8009108:	b004      	add	sp, #16
 800910a:	bd80      	pop	{r7, pc}
 800910c:	00004601 	.word	0x00004601
 8009110:	00004501 	.word	0x00004501
 8009114:	00003501 	.word	0x00003501
 8009118:	00002601 	.word	0x00002601
 800911c:	00002511 	.word	0x00002511
 8009120:	00002501 	.word	0x00002501
 8009124:	00000611 	.word	0x00000611
 8009128:	00000601 	.word	0x00000601
 800912c:	080138d8 	.word	0x080138d8
 8009130:	08013924 	.word	0x08013924
 8009134:	08013988 	.word	0x08013988
 8009138:	080139c0 	.word	0x080139c0
 800913c:	08013a64 	.word	0x08013a64
 8009140:	08013acc 	.word	0x08013acc
 8009144:	08013b2c 	.word	0x08013b2c
 8009148:	08013bb8 	.word	0x08013bb8
 800914c:	08013c18 	.word	0x08013c18
 8009150:	08013cc4 	.word	0x08013cc4
 8009154:	08013d10 	.word	0x08013d10
 8009158:	08013d58 	.word	0x08013d58

0800915c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800915c:	b5b0      	push	{r4, r5, r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009166:	230f      	movs	r3, #15
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	2200      	movs	r2, #0
 800916c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800916e:	2316      	movs	r3, #22
 8009170:	18fb      	adds	r3, r7, r3
 8009172:	2200      	movs	r2, #0
 8009174:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009176:	f7fa f977 	bl	8003468 <get_systick>
 800917a:	0003      	movs	r3, r0
 800917c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800917e:	2315      	movs	r3, #21
 8009180:	18fb      	adds	r3, r7, r3
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8009186:	e054      	b.n	8009232 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009188:	4a34      	ldr	r2, [pc, #208]	; (800925c <receive_astronode_answer+0x100>)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	0011      	movs	r1, r2
 800918e:	0018      	movs	r0, r3
 8009190:	f7fa f972 	bl	8003478 <is_systick_timeout_over>
 8009194:	1e03      	subs	r3, r0, #0
 8009196:	d005      	beq.n	80091a4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009198:	4b31      	ldr	r3, [pc, #196]	; (8009260 <receive_astronode_answer+0x104>)
 800919a:	0018      	movs	r0, r3
 800919c:	f7f9 ffea 	bl	8003174 <send_debug_logs>
            return RS_FAILURE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e057      	b.n	8009254 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80091a4:	250f      	movs	r5, #15
 80091a6:	197b      	adds	r3, r7, r5
 80091a8:	0018      	movs	r0, r3
 80091aa:	f7fa f97b 	bl	80034a4 <is_astronode_character_received>
 80091ae:	0003      	movs	r3, r0
 80091b0:	0019      	movs	r1, r3
 80091b2:	2016      	movs	r0, #22
 80091b4:	183b      	adds	r3, r7, r0
 80091b6:	183a      	adds	r2, r7, r0
 80091b8:	8812      	ldrh	r2, [r2, #0]
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	2415      	movs	r4, #21
 80091be:	193b      	adds	r3, r7, r4
 80091c0:	193a      	adds	r2, r7, r4
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d033      	beq.n	8009232 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80091ca:	197b      	adds	r3, r7, r5
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d105      	bne.n	80091de <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80091d2:	193b      	adds	r3, r7, r4
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80091d8:	183b      	adds	r3, r7, r0
 80091da:	2200      	movs	r2, #0
 80091dc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80091de:	2116      	movs	r1, #22
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	18d3      	adds	r3, r2, r3
 80091e8:	220f      	movs	r2, #15
 80091ea:	18ba      	adds	r2, r7, r2
 80091ec:	7812      	ldrb	r2, [r2, #0]
 80091ee:	701a      	strb	r2, [r3, #0]
            length++;
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	881a      	ldrh	r2, [r3, #0]
 80091f4:	187b      	adds	r3, r7, r1
 80091f6:	3201      	adds	r2, #1
 80091f8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	2bb2      	cmp	r3, #178	; 0xb2
 8009200:	d905      	bls.n	800920e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009202:	4b18      	ldr	r3, [pc, #96]	; (8009264 <receive_astronode_answer+0x108>)
 8009204:	0018      	movs	r0, r3
 8009206:	f7f9 ffb5 	bl	8003174 <send_debug_logs>
                return RS_FAILURE;
 800920a:	2300      	movs	r3, #0
 800920c:	e022      	b.n	8009254 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800920e:	230f      	movs	r3, #15
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d10c      	bne.n	8009232 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009218:	2216      	movs	r2, #22
 800921a:	18bb      	adds	r3, r7, r2
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d907      	bls.n	8009232 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	18ba      	adds	r2, r7, r2
 8009226:	8812      	ldrh	r2, [r2, #0]
 8009228:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800922a:	2315      	movs	r3, #21
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	2201      	movs	r2, #1
 8009230:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009232:	2315      	movs	r3, #21
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2201      	movs	r2, #1
 800923a:	4053      	eors	r3, r2
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1a2      	bne.n	8009188 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <receive_astronode_answer+0x10c>)
 8009244:	0018      	movs	r0, r3
 8009246:	f7f9 ff95 	bl	8003174 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	0018      	movs	r0, r3
 800924e:	f7f9 ff91 	bl	8003174 <send_debug_logs>

    return RS_SUCCESS;
 8009252:	2301      	movs	r3, #1
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b006      	add	sp, #24
 800925a:	bdb0      	pop	{r4, r5, r7, pc}
 800925c:	000005dc 	.word	0x000005dc
 8009260:	08013d7c 	.word	0x08013d7c
 8009264:	08013da0 	.word	0x08013da0
 8009268:	08013dec 	.word	0x08013dec

0800926c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	0002      	movs	r2, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	1dfb      	adds	r3, r7, #7
 8009278:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	091b      	lsrs	r3, r3, #4
 8009280:	b2db      	uxtb	r3, r3
 8009282:	001a      	movs	r2, r3
 8009284:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <uint8_to_ascii_buffer+0x3c>)
 8009286:	5c9a      	ldrb	r2, [r3, r2]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800928c:	1dfb      	adds	r3, r7, #7
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	220f      	movs	r2, #15
 8009292:	401a      	ands	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	4903      	ldr	r1, [pc, #12]	; (80092a8 <uint8_to_ascii_buffer+0x3c>)
 800929a:	5c8a      	ldrb	r2, [r1, r2]
 800929c:	701a      	strb	r2, [r3, #0]
}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	46bd      	mov	sp, r7
 80092a2:	b002      	add	sp, #8
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	46c0      	nop			; (mov r8, r8)
 80092a8:	08014120 	.word	0x08014120

080092ac <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 80092ac:	b590      	push	{r4, r7, lr}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80092b2:	1dfb      	adds	r3, r7, #7
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80092b8:	e012      	b.n	80092e0 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80092ba:	f7fa f89d 	bl	80033f8 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80092be:	1dfc      	adds	r4, r7, #7
 80092c0:	2300      	movs	r3, #0
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	2301      	movs	r3, #1
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	2301      	movs	r3, #1
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	2301      	movs	r3, #1
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2300      	movs	r3, #0
 80092d2:	2201      	movs	r2, #1
 80092d4:	2101      	movs	r1, #1
 80092d6:	2001      	movs	r0, #1
 80092d8:	f7fe fb9e 	bl	8007a18 <astronode_send_cfg_wr>
 80092dc:	0003      	movs	r3, r0
 80092de:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80092e0:	1dfb      	adds	r3, r7, #7
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2201      	movs	r2, #1
 80092e6:	4053      	eors	r3, r2
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e5      	bne.n	80092ba <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80092ee:	1dfb      	adds	r3, r7, #7
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00d      	beq.n	8009312 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80092f6:	f7fe ffef 	bl	80082d8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80092fa:	f7fe fb55 	bl	80079a8 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80092fe:	f7ff f8e5 	bl	80084cc <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009302:	f7fe fcdf 	bl	8007cc4 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009306:	f7fe fc33 	bl	8007b70 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800930a:	f7fe ff69 	bl	80081e0 <astronode_send_pld_fr>
		return true ;
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 8009312:	2300      	movs	r3, #0
	}
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	b003      	add	sp, #12
 800931a:	bd90      	pop	{r4, r7, pc}

0800931c <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	0002      	movs	r2, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	1dbb      	adds	r3, r7, #6
 8009328:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	0018      	movs	r0, r3
 800932e:	f7f6 fee9 	bl	8000104 <strlen>
 8009332:	0003      	movs	r3, r0
 8009334:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2ba0      	cmp	r3, #160	; 0xa0
 800933a:	d80b      	bhi.n	8009354 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	b29a      	uxth	r2, r3
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	1dbb      	adds	r3, r7, #6
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	0018      	movs	r0, r3
 8009348:	f7fe fea6 	bl	8008098 <astronode_send_pld_er>
 800934c:	1e03      	subs	r3, r0, #0
 800934e:	d005      	beq.n	800935c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009350:	2301      	movs	r3, #1
 8009352:	e004      	b.n	800935e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <my_astro_add_payload_2_queue+0x4c>)
 8009356:	0018      	movs	r0, r3
 8009358:	f7f9 ff0c 	bl	8003174 <send_debug_logs>
	}
	return false ;
 800935c:	2300      	movs	r3, #0
}
 800935e:	0018      	movs	r0, r3
 8009360:	46bd      	mov	sp, r7
 8009362:	b004      	add	sp, #16
 8009364:	bd80      	pop	{r7, pc}
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	08013e18 	.word	0x08013e18

0800936c <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009370:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <my_astro_handle_evt+0x5c>)
 8009372:	0018      	movs	r0, r3
 8009374:	f7f9 fefe 	bl	8003174 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009378:	f7fe fd4e 	bl	8007e18 <astronode_send_evt_rr>
	if (is_sak_available () )
 800937c:	f7ff fb00 	bl	8008980 <is_sak_available>
 8009380:	1e03      	subs	r3, r0, #0
 8009382:	d007      	beq.n	8009394 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009384:	f7ff f80c 	bl	80083a0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009388:	f7ff f860 	bl	800844c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800938c:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <my_astro_handle_evt+0x60>)
 800938e:	0018      	movs	r0, r3
 8009390:	f7f9 fef0 	bl	8003174 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009394:	f7ff fafe 	bl	8008994 <is_astronode_reset>
 8009398:	1e03      	subs	r3, r0, #0
 800939a:	d005      	beq.n	80093a8 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <my_astro_handle_evt+0x64>)
 800939e:	0018      	movs	r0, r3
 80093a0:	f7f9 fee8 	bl	8003174 <send_debug_logs>
	  astronode_send_res_cr () ;
 80093a4:	f7fe ff58 	bl	8008258 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80093a8:	f7ff fafe 	bl	80089a8 <is_command_available>
 80093ac:	1e03      	subs	r3, r0, #0
 80093ae:	d007      	beq.n	80093c0 <my_astro_handle_evt+0x54>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <my_astro_handle_evt+0x68>)
 80093b2:	0018      	movs	r0, r3
 80093b4:	f7f9 fede 	bl	8003174 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80093b8:	f7ff f972 	bl	80086a0 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80093bc:	f7ff f930 	bl	8008620 <astronode_send_cmd_cr>
	}
	return true ;
 80093c0:	2301      	movs	r3, #1
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	08013e80 	.word	0x08013e80
 80093cc:	08013eb4 	.word	0x08013eb4
 80093d0:	08013ef8 	.word	0x08013ef8
 80093d4:	08013f34 	.word	0x08013f34

080093d8 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	0011      	movs	r1, r2
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7fe fd95 	bl	8007f18 <astronode_send_geo_wr>
}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b002      	add	sp, #8
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80093f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fa:	4ca5      	ldr	r4, [pc, #660]	; (8009690 <my_gnss_acq_coordinates+0x298>)
 80093fc:	44a5      	add	sp, r4
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8009402:	4ba4      	ldr	r3, [pc, #656]	; (8009694 <my_gnss_acq_coordinates+0x29c>)
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800940a:	4ba3      	ldr	r3, [pc, #652]	; (8009698 <my_gnss_acq_coordinates+0x2a0>)
 800940c:	18fb      	adds	r3, r7, r3
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8009412:	4ba2      	ldr	r3, [pc, #648]	; (800969c <my_gnss_acq_coordinates+0x2a4>)
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800941a:	4ba1      	ldr	r3, [pc, #644]	; (80096a0 <my_gnss_acq_coordinates+0x2a8>)
 800941c:	18fb      	adds	r3, r7, r3
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009422:	4ba0      	ldr	r3, [pc, #640]	; (80096a4 <my_gnss_acq_coordinates+0x2ac>)
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800942a:	4b9f      	ldr	r3, [pc, #636]	; (80096a8 <my_gnss_acq_coordinates+0x2b0>)
 800942c:	2486      	movs	r4, #134	; 0x86
 800942e:	00a4      	lsls	r4, r4, #2
 8009430:	191b      	adds	r3, r3, r4
 8009432:	19db      	adds	r3, r3, r7
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	22f6      	movs	r2, #246	; 0xf6
 800943c:	2100      	movs	r1, #0
 800943e:	0018      	movs	r0, r3
 8009440:	f002 faf4 	bl	800ba2c <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009444:	4b99      	ldr	r3, [pc, #612]	; (80096ac <my_gnss_acq_coordinates+0x2b4>)
 8009446:	191b      	adds	r3, r3, r4
 8009448:	19db      	adds	r3, r3, r7
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	3304      	adds	r3, #4
 8009450:	22f6      	movs	r2, #246	; 0xf6
 8009452:	2100      	movs	r1, #0
 8009454:	0018      	movs	r0, r3
 8009456:	f002 fae9 	bl	800ba2c <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800945a:	4b95      	ldr	r3, [pc, #596]	; (80096b0 <my_gnss_acq_coordinates+0x2b8>)
 800945c:	2284      	movs	r2, #132	; 0x84
 800945e:	0092      	lsls	r2, r2, #2
 8009460:	18ba      	adds	r2, r7, r2
 8009462:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009464:	4b93      	ldr	r3, [pc, #588]	; (80096b4 <my_gnss_acq_coordinates+0x2bc>)
 8009466:	2283      	movs	r2, #131	; 0x83
 8009468:	0092      	lsls	r2, r2, #2
 800946a:	18ba      	adds	r2, r7, r2
 800946c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800946e:	4b92      	ldr	r3, [pc, #584]	; (80096b8 <my_gnss_acq_coordinates+0x2c0>)
 8009470:	2282      	movs	r2, #130	; 0x82
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	18ba      	adds	r2, r7, r2
 8009476:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009478:	4b90      	ldr	r3, [pc, #576]	; (80096bc <my_gnss_acq_coordinates+0x2c4>)
 800947a:	2281      	movs	r2, #129	; 0x81
 800947c:	0092      	lsls	r2, r2, #2
 800947e:	18ba      	adds	r2, r7, r2
 8009480:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2230      	movs	r2, #48	; 0x30
 8009486:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	4b8c      	ldr	r3, [pc, #560]	; (80096c0 <my_gnss_acq_coordinates+0x2c8>)
 800948e:	608a      	str	r2, [r1, #8]
 8009490:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009492:	f7fa f839 	bl	8003508 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009496:	e0c4      	b.n	8009622 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009498:	4c80      	ldr	r4, [pc, #512]	; (800969c <my_gnss_acq_coordinates+0x2a4>)
 800949a:	193b      	adds	r3, r7, r4
 800949c:	2101      	movs	r1, #1
 800949e:	0018      	movs	r0, r3
 80094a0:	f7f9 ff86 	bl	80033b0 <my_gnss_receive_byte>
		if ( rx_byte )
 80094a4:	0020      	movs	r0, r4
 80094a6:	183b      	adds	r3, r7, r0
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	4c7b      	ldr	r4, [pc, #492]	; (8009698 <my_gnss_acq_coordinates+0x2a0>)
 80094ac:	193a      	adds	r2, r7, r4
 80094ae:	1939      	adds	r1, r7, r4
 80094b0:	7809      	ldrb	r1, [r1, #0]
 80094b2:	7011      	strb	r1, [r2, #0]
 80094b4:	4d7b      	ldr	r5, [pc, #492]	; (80096a4 <my_gnss_acq_coordinates+0x2ac>)
 80094b6:	197a      	adds	r2, r7, r5
 80094b8:	1979      	adds	r1, r7, r5
 80094ba:	7809      	ldrb	r1, [r1, #0]
 80094bc:	7011      	strb	r1, [r2, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d100      	bne.n	80094c4 <my_gnss_acq_coordinates+0xcc>
 80094c2:	e0ae      	b.n	8009622 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 80094c4:	4b76      	ldr	r3, [pc, #472]	; (80096a0 <my_gnss_acq_coordinates+0x2a8>)
 80094c6:	18fa      	adds	r2, r7, r3
 80094c8:	2684      	movs	r6, #132	; 0x84
 80094ca:	0076      	lsls	r6, r6, #1
 80094cc:	19b9      	adds	r1, r7, r6
 80094ce:	183b      	adds	r3, r7, r0
 80094d0:	0018      	movs	r0, r3
 80094d2:	f000 fbe9 	bl	8009ca8 <my_nmea_message>
 80094d6:	0001      	movs	r1, r0
 80094d8:	193b      	adds	r3, r7, r4
 80094da:	193a      	adds	r2, r7, r4
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	197b      	adds	r3, r7, r5
 80094e2:	197a      	adds	r2, r7, r5
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	2902      	cmp	r1, #2
 80094ea:	d000      	beq.n	80094ee <my_gnss_acq_coordinates+0xf6>
 80094ec:	e099      	b.n	8009622 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80094ee:	19bb      	adds	r3, r7, r6
 80094f0:	0018      	movs	r0, r3
 80094f2:	f000 fc99 	bl	8009e28 <is_my_nmea_checksum_ok>
 80094f6:	0003      	movs	r3, r0
 80094f8:	0019      	movs	r1, r3
 80094fa:	193b      	adds	r3, r7, r4
 80094fc:	193a      	adds	r2, r7, r4
 80094fe:	7812      	ldrb	r2, [r2, #0]
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	197b      	adds	r3, r7, r5
 8009504:	197a      	adds	r2, r7, r5
 8009506:	7812      	ldrb	r2, [r2, #0]
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	2900      	cmp	r1, #0
 800950c:	d100      	bne.n	8009510 <my_gnss_acq_coordinates+0x118>
 800950e:	e088      	b.n	8009622 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 8009510:	193b      	adds	r3, r7, r4
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2201      	movs	r2, #1
 8009516:	4053      	eors	r3, r2
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d015      	beq.n	800954a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7c1b      	ldrb	r3, [r3, #16]
 8009522:	2b33      	cmp	r3, #51	; 0x33
 8009524:	d111      	bne.n	800954a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009526:	2383      	movs	r3, #131	; 0x83
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	19bb      	adds	r3, r7, r6
 8009530:	0011      	movs	r1, r2
 8009532:	0018      	movs	r0, r3
 8009534:	f002 faa7 	bl	800ba86 <strstr>
 8009538:	1e03      	subs	r3, r0, #0
 800953a:	d006      	beq.n	800954a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800953c:	19bb      	adds	r3, r7, r6
 800953e:	0018      	movs	r0, r3
 8009540:	f000 f9a6 	bl	8009890 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009544:	193b      	adds	r3, r7, r4
 8009546:	2201      	movs	r2, #1
 8009548:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800954a:	2384      	movs	r3, #132	; 0x84
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	2484      	movs	r4, #132	; 0x84
 8009554:	0064      	lsls	r4, r4, #1
 8009556:	193b      	adds	r3, r7, r4
 8009558:	0011      	movs	r1, r2
 800955a:	0018      	movs	r0, r3
 800955c:	f002 fa93 	bl	800ba86 <strstr>
 8009560:	1e03      	subs	r3, r0, #0
 8009562:	d012      	beq.n	800958a <my_gnss_acq_coordinates+0x192>
 8009564:	4d4f      	ldr	r5, [pc, #316]	; (80096a4 <my_gnss_acq_coordinates+0x2ac>)
 8009566:	197b      	adds	r3, r7, r5
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d80d      	bhi.n	800958a <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800956e:	4b55      	ldr	r3, [pc, #340]	; (80096c4 <my_gnss_acq_coordinates+0x2cc>)
 8009570:	881a      	ldrh	r2, [r3, #0]
 8009572:	4b55      	ldr	r3, [pc, #340]	; (80096c8 <my_gnss_acq_coordinates+0x2d0>)
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d85b      	bhi.n	8009632 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800957a:	193b      	adds	r3, r7, r4
 800957c:	0018      	movs	r0, r3
 800957e:	f000 fdf9 	bl	800a174 <my_nmea_get_gsv_tns>
 8009582:	0003      	movs	r3, r0
 8009584:	001a      	movs	r2, r3
 8009586:	197b      	adds	r3, r7, r5
 8009588:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800958a:	2382      	movs	r3, #130	; 0x82
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	2484      	movs	r4, #132	; 0x84
 8009594:	0064      	lsls	r4, r4, #1
 8009596:	193b      	adds	r3, r7, r4
 8009598:	0011      	movs	r1, r2
 800959a:	0018      	movs	r0, r3
 800959c:	f002 fa73 	bl	800ba86 <strstr>
 80095a0:	1e03      	subs	r3, r0, #0
 80095a2:	d010      	beq.n	80095c6 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80095a4:	193b      	adds	r3, r7, r4
 80095a6:	0018      	movs	r0, r3
 80095a8:	f000 fbea 	bl	8009d80 <get_my_nmea_gngsa_fixed_mode_s>
 80095ac:	0003      	movs	r3, r0
 80095ae:	001a      	movs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 80095b4:	193b      	adds	r3, r7, r4
 80095b6:	0018      	movs	r0, r3
 80095b8:	f000 fbed 	bl	8009d96 <get_my_nmea_gngsa_pdop_d>
 80095bc:	0002      	movs	r2, r0
 80095be:	000b      	movs	r3, r1
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	608a      	str	r2, [r1, #8]
 80095c4:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 80095c6:	2381      	movs	r3, #129	; 0x81
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	18fb      	adds	r3, r7, r3
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	2384      	movs	r3, #132	; 0x84
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	18fb      	adds	r3, r7, r3
 80095d4:	0011      	movs	r1, r2
 80095d6:	0018      	movs	r0, r3
 80095d8:	f002 fa55 	bl	800ba86 <strstr>
 80095dc:	1e03      	subs	r3, r0, #0
 80095de:	d020      	beq.n	8009622 <my_gnss_acq_coordinates+0x22a>
 80095e0:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <my_gnss_acq_coordinates+0x2a0>)
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d01b      	beq.n	8009622 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7c1b      	ldrb	r3, [r3, #16]
 80095ee:	2b33      	cmp	r3, #51	; 0x33
 80095f0:	d121      	bne.n	8009636 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 80095f2:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <my_gnss_acq_coordinates+0x2b4>)
 80095f4:	2186      	movs	r1, #134	; 0x86
 80095f6:	0089      	lsls	r1, r1, #2
 80095f8:	185b      	adds	r3, r3, r1
 80095fa:	19da      	adds	r2, r3, r7
 80095fc:	4b2a      	ldr	r3, [pc, #168]	; (80096a8 <my_gnss_acq_coordinates+0x2b0>)
 80095fe:	185b      	adds	r3, r3, r1
 8009600:	19db      	adds	r3, r3, r7
 8009602:	0010      	movs	r0, r2
 8009604:	0019      	movs	r1, r3
 8009606:	23fa      	movs	r3, #250	; 0xfa
 8009608:	001a      	movs	r2, r3
 800960a:	f002 faf4 	bl	800bbf6 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6898      	ldr	r0, [r3, #8]
 8009612:	68d9      	ldr	r1, [r3, #12]
 8009614:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <my_gnss_acq_coordinates+0x2d4>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f7f6 ff25 	bl	8000468 <__aeabi_dcmple>
 800961e:	1e03      	subs	r3, r0, #0
 8009620:	d10b      	bne.n	800963a <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009622:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <my_gnss_acq_coordinates+0x2cc>)
 8009624:	881a      	ldrh	r2, [r3, #0]
 8009626:	4b2a      	ldr	r3, [pc, #168]	; (80096d0 <my_gnss_acq_coordinates+0x2d8>)
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d200      	bcs.n	8009630 <my_gnss_acq_coordinates+0x238>
 800962e:	e733      	b.n	8009498 <my_gnss_acq_coordinates+0xa0>
 8009630:	e004      	b.n	800963c <my_gnss_acq_coordinates+0x244>
							break ;
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	e002      	b.n	800963c <my_gnss_acq_coordinates+0x244>
							break ;
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	e000      	b.n	800963c <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800963a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800963c:	f7f9 ff74 	bl	8003528 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <my_gnss_acq_coordinates+0x2b4>)
 8009642:	2286      	movs	r2, #134	; 0x86
 8009644:	0092      	lsls	r2, r2, #2
 8009646:	189b      	adds	r3, r3, r2
 8009648:	19db      	adds	r3, r3, r7
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	230c      	movs	r3, #12
 8009654:	18fb      	adds	r3, r7, r3
 8009656:	0011      	movs	r1, r2
 8009658:	0018      	movs	r0, r3
 800965a:	f000 fca1 	bl	8009fa0 <my_nmea_get_gngll_coordinates>
		r = true ;
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <my_gnss_acq_coordinates+0x29c>)
 8009660:	18fb      	adds	r3, r7, r3
 8009662:	2201      	movs	r2, #1
 8009664:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <my_gnss_acq_coordinates+0x2cc>)
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	4a14      	ldr	r2, [pc, #80]	; (80096c4 <my_gnss_acq_coordinates+0x2cc>)
 8009674:	8812      	ldrh	r2, [r2, #0]
 8009676:	189a      	adds	r2, r3, r2
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	615a      	str	r2, [r3, #20]
	return r ;
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <my_gnss_acq_coordinates+0x29c>)
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	781b      	ldrb	r3, [r3, #0]
}
 8009682:	0018      	movs	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	2387      	movs	r3, #135	; 0x87
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	449d      	add	sp, r3
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	fffffde4 	.word	0xfffffde4
 8009694:	00000217 	.word	0x00000217
 8009698:	00000216 	.word	0x00000216
 800969c:	00000203 	.word	0x00000203
 80096a0:	00000202 	.word	0x00000202
 80096a4:	00000215 	.word	0x00000215
 80096a8:	fffffef0 	.word	0xfffffef0
 80096ac:	fffffdf4 	.word	0xfffffdf4
 80096b0:	08013f74 	.word	0x08013f74
 80096b4:	08013f7c 	.word	0x08013f7c
 80096b8:	08013f84 	.word	0x08013f84
 80096bc:	08013f8c 	.word	0x08013f8c
 80096c0:	408f4000 	.word	0x408f4000
 80096c4:	20000c00 	.word	0x20000c00
 80096c8:	20000018 	.word	0x20000018
 80096cc:	20000020 	.word	0x20000020
 80096d0:	20000016 	.word	0x20000016

080096d4 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <my_rtc_get_dt+0x2c>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	0018      	movs	r0, r3
 80096e6:	f7fc f97f 	bl	80059e8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	4b04      	ldr	r3, [pc, #16]	; (8009700 <my_rtc_get_dt+0x2c>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	0018      	movs	r0, r3
 80096f2:	f7fc f88b 	bl	800580c <HAL_RTC_GetTime>
}
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	46bd      	mov	sp, r7
 80096fa:	b002      	add	sp, #8
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	200006f4 	.word	0x200006f4

08009704 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009706:	b08d      	sub	sp, #52	; 0x34
 8009708:	af04      	add	r7, sp, #16
 800970a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800970c:	2508      	movs	r5, #8
 800970e:	1979      	adds	r1, r7, r5
 8009710:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <my_rtc_get_dt_s+0x7c>)
 8009712:	2200      	movs	r2, #0
 8009714:	0018      	movs	r0, r3
 8009716:	f7fc f879 	bl	800580c <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800971a:	241c      	movs	r4, #28
 800971c:	1939      	adds	r1, r7, r4
 800971e:	4b18      	ldr	r3, [pc, #96]	; (8009780 <my_rtc_get_dt_s+0x7c>)
 8009720:	2200      	movs	r2, #0
 8009722:	0018      	movs	r0, r3
 8009724:	f7fc f960 	bl	80059e8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009728:	0021      	movs	r1, r4
 800972a:	187b      	adds	r3, r7, r1
 800972c:	78db      	ldrb	r3, [r3, #3]
 800972e:	22fa      	movs	r2, #250	; 0xfa
 8009730:	00d2      	lsls	r2, r2, #3
 8009732:	189a      	adds	r2, r3, r2
 8009734:	187b      	adds	r3, r7, r1
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	469c      	mov	ip, r3
 800973a:	187b      	adds	r3, r7, r1
 800973c:	789b      	ldrb	r3, [r3, #2]
 800973e:	001c      	movs	r4, r3
 8009740:	0028      	movs	r0, r5
 8009742:	183b      	adds	r3, r7, r0
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	001d      	movs	r5, r3
 8009748:	183b      	adds	r3, r7, r0
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	001e      	movs	r6, r3
 800974e:	183b      	adds	r3, r7, r0
 8009750:	789b      	ldrb	r3, [r3, #2]
 8009752:	490c      	ldr	r1, [pc, #48]	; (8009784 <my_rtc_get_dt_s+0x80>)
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	9602      	str	r6, [sp, #8]
 800975a:	9501      	str	r5, [sp, #4]
 800975c:	9400      	str	r4, [sp, #0]
 800975e:	4663      	mov	r3, ip
 8009760:	f002 f8ce 	bl	800b900 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009764:	211c      	movs	r1, #28
 8009766:	187b      	adds	r3, r7, r1
 8009768:	78db      	ldrb	r3, [r3, #3]
 800976a:	b29b      	uxth	r3, r3
 800976c:	22fa      	movs	r2, #250	; 0xfa
 800976e:	00d2      	lsls	r2, r2, #3
 8009770:	4694      	mov	ip, r2
 8009772:	4463      	add	r3, ip
 8009774:	b29b      	uxth	r3, r3
}
 8009776:	0018      	movs	r0, r3
 8009778:	46bd      	mov	sp, r7
 800977a:	b009      	add	sp, #36	; 0x24
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	46c0      	nop			; (mov r8, r8)
 8009780:	200006f4 	.word	0x200006f4
 8009784:	08013fdc 	.word	0x08013fdc

08009788 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978a:	b0a9      	sub	sp, #164	; 0xa4
 800978c:	af02      	add	r7, sp, #8
 800978e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009790:	2434      	movs	r4, #52	; 0x34
 8009792:	193a      	adds	r2, r7, r4
 8009794:	2548      	movs	r5, #72	; 0x48
 8009796:	197b      	adds	r3, r7, r5
 8009798:	0011      	movs	r1, r2
 800979a:	0018      	movs	r0, r3
 800979c:	f7ff ff9a 	bl	80096d4 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 80097a0:	2680      	movs	r6, #128	; 0x80
 80097a2:	19bb      	adds	r3, r7, r6
 80097a4:	0018      	movs	r0, r3
 80097a6:	f7ff ffad 	bl	8009704 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80097aa:	4a36      	ldr	r2, [pc, #216]	; (8009884 <my_rtc_set_alarm+0xfc>)
 80097ac:	4936      	ldr	r1, [pc, #216]	; (8009888 <my_rtc_set_alarm+0x100>)
 80097ae:	234c      	movs	r3, #76	; 0x4c
 80097b0:	18f8      	adds	r0, r7, r3
 80097b2:	19bb      	adds	r3, r7, r6
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	232d      	movs	r3, #45	; 0x2d
 80097b8:	f002 f8a2 	bl	800b900 <sprintf>
	send_debug_logs ( m ) ;
 80097bc:	234c      	movs	r3, #76	; 0x4c
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	0018      	movs	r0, r3
 80097c2:	f7f9 fcd7 	bl	8003174 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 80097c6:	193a      	adds	r2, r7, r4
 80097c8:	197b      	adds	r3, r7, r5
 80097ca:	0011      	movs	r1, r2
 80097cc:	0018      	movs	r0, r3
 80097ce:	f000 f90d 	bl	80099ec <my_conv_rtc2timestamp>
 80097d2:	0002      	movs	r2, r0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	189b      	adds	r3, r3, r2
 80097d8:	2094      	movs	r0, #148	; 0x94
 80097da:	183a      	adds	r2, r7, r0
 80097dc:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 80097de:	193a      	adds	r2, r7, r4
 80097e0:	1979      	adds	r1, r7, r5
 80097e2:	1838      	adds	r0, r7, r0
 80097e4:	6803      	ldr	r3, [r0, #0]
 80097e6:	0018      	movs	r0, r3
 80097e8:	f000 f974 	bl	8009ad4 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 80097ec:	193b      	adds	r3, r7, r4
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	210c      	movs	r1, #12
 80097f2:	187b      	adds	r3, r7, r1
 80097f4:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 80097f6:	193b      	adds	r3, r7, r4
 80097f8:	785a      	ldrb	r2, [r3, #1]
 80097fa:	187b      	adds	r3, r7, r1
 80097fc:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 80097fe:	193b      	adds	r3, r7, r4
 8009800:	789a      	ldrb	r2, [r3, #2]
 8009802:	187b      	adds	r3, r7, r1
 8009804:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009806:	0008      	movs	r0, r1
 8009808:	183b      	adds	r3, r7, r0
 800980a:	2200      	movs	r2, #0
 800980c:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800980e:	183b      	adds	r3, r7, r0
 8009810:	2200      	movs	r2, #0
 8009812:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009814:	183b      	adds	r3, r7, r0
 8009816:	2200      	movs	r2, #0
 8009818:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800981a:	183b      	adds	r3, r7, r0
 800981c:	2200      	movs	r2, #0
 800981e:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009820:	183b      	adds	r3, r7, r0
 8009822:	2200      	movs	r2, #0
 8009824:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009826:	183b      	adds	r3, r7, r0
 8009828:	2200      	movs	r2, #0
 800982a:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800982c:	197b      	adds	r3, r7, r5
 800982e:	7899      	ldrb	r1, [r3, #2]
 8009830:	183b      	adds	r3, r7, r0
 8009832:	2220      	movs	r2, #32
 8009834:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009836:	183b      	adds	r3, r7, r0
 8009838:	2280      	movs	r2, #128	; 0x80
 800983a:	0052      	lsls	r2, r2, #1
 800983c:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800983e:	1839      	adds	r1, r7, r0
 8009840:	4b12      	ldr	r3, [pc, #72]	; (800988c <my_rtc_set_alarm+0x104>)
 8009842:	2200      	movs	r2, #0
 8009844:	0018      	movs	r0, r3
 8009846:	f7fc f91d 	bl	8005a84 <HAL_RTC_SetAlarm_IT>
 800984a:	1e03      	subs	r3, r0, #0
 800984c:	d114      	bne.n	8009878 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800984e:	19ba      	adds	r2, r7, r6
 8009850:	1939      	adds	r1, r7, r4
 8009852:	197b      	adds	r3, r7, r5
 8009854:	0018      	movs	r0, r3
 8009856:	f000 f9ff 	bl	8009c58 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800985a:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <my_rtc_set_alarm+0xfc>)
 800985c:	490a      	ldr	r1, [pc, #40]	; (8009888 <my_rtc_set_alarm+0x100>)
 800985e:	244c      	movs	r4, #76	; 0x4c
 8009860:	1938      	adds	r0, r7, r4
 8009862:	19bb      	adds	r3, r7, r6
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2341      	movs	r3, #65	; 0x41
 8009868:	f002 f84a 	bl	800b900 <sprintf>
		send_debug_logs ( m ) ;
 800986c:	193b      	adds	r3, r7, r4
 800986e:	0018      	movs	r0, r3
 8009870:	f7f9 fc80 	bl	8003174 <send_debug_logs>
		return true ;
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009878:	2300      	movs	r3, #0
}
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b027      	add	sp, #156	; 0x9c
 8009880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	08013ffc 	.word	0x08013ffc
 8009888:	08014018 	.word	0x08014018
 800988c:	200006f4 	.word	0x200006f4

08009890 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009890:	b5b0      	push	{r4, r5, r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009898:	2508      	movs	r5, #8
 800989a:	197b      	adds	r3, r7, r5
 800989c:	1cda      	adds	r2, r3, #3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	0011      	movs	r1, r2
 80098a2:	0018      	movs	r0, r3
 80098a4:	f000 fc9e 	bl	800a1e4 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 80098a8:	197b      	adds	r3, r7, r5
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	0011      	movs	r1, r2
 80098b0:	0018      	movs	r0, r3
 80098b2:	f000 fcd1 	bl	800a258 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 80098b6:	197b      	adds	r3, r7, r5
 80098b8:	1c9a      	adds	r2, r3, #2
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0011      	movs	r1, r2
 80098be:	0018      	movs	r0, r3
 80098c0:	f000 fd04 	bl	800a2cc <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 80098c4:	240c      	movs	r4, #12
 80098c6:	193a      	adds	r2, r7, r4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	0011      	movs	r1, r2
 80098cc:	0018      	movs	r0, r3
 80098ce:	f000 fd37 	bl	800a340 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 80098d2:	193b      	adds	r3, r7, r4
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	0011      	movs	r1, r2
 80098da:	0018      	movs	r0, r3
 80098dc:	f000 fd6a 	bl	800a3b4 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 80098e0:	193b      	adds	r3, r7, r4
 80098e2:	1c9a      	adds	r2, r3, #2
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0011      	movs	r1, r2
 80098e8:	0018      	movs	r0, r3
 80098ea:	f000 fd9d 	bl	800a428 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 80098ee:	193b      	adds	r3, r7, r4
 80098f0:	1d1a      	adds	r2, r3, #4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	0011      	movs	r1, r2
 80098f6:	0018      	movs	r0, r3
 80098f8:	f000 fdd0 	bl	800a49c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80098fc:	193b      	adds	r3, r7, r4
 80098fe:	2200      	movs	r2, #0
 8009900:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009902:	193b      	adds	r3, r7, r4
 8009904:	2200      	movs	r2, #0
 8009906:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800990a:	0018      	movs	r0, r3
 800990c:	f7fc fb29 	bl	8005f62 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009910:	1939      	adds	r1, r7, r4
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009914:	2200      	movs	r2, #0
 8009916:	0018      	movs	r0, r3
 8009918:	f7fb fed0 	bl	80056bc <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800991c:	1979      	adds	r1, r7, r5
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009920:	2200      	movs	r2, #0
 8009922:	0018      	movs	r0, r3
 8009924:	f7fb ffce 	bl	80058c4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009928:	4b03      	ldr	r3, [pc, #12]	; (8009938 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800992a:	0018      	movs	r0, r3
 800992c:	f7fc fb4d 	bl	8005fca <HAL_RTCEx_DisableBypassShadow>
}
 8009930:	46c0      	nop			; (mov r8, r8)
 8009932:	46bd      	mov	sp, r7
 8009934:	b008      	add	sp, #32
 8009936:	bdb0      	pop	{r4, r5, r7, pc}
 8009938:	200006f4 	.word	0x200006f4

0800993c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2100      	movs	r1, #0
 8009948:	0018      	movs	r0, r3
 800994a:	f001 fe3d 	bl	800b5c8 <strtod>
 800994e:	0002      	movs	r2, r0
 8009950:	000b      	movs	r3, r1
 8009952:	60ba      	str	r2, [r7, #8]
 8009954:	60fb      	str	r3, [r7, #12]
    return d ;
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	68fb      	ldr	r3, [r7, #12]
}
 800995a:	0010      	movs	r0, r2
 800995c:	0019      	movs	r1, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	b004      	add	sp, #16
 8009962:	bd80      	pop	{r7, pc}

08009964 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	0008      	movs	r0, r1
 800996e:	0011      	movs	r1, r2
 8009970:	1cfb      	adds	r3, r7, #3
 8009972:	1c02      	adds	r2, r0, #0
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	1cbb      	adds	r3, r7, #2
 8009978:	1c0a      	adds	r2, r1, #0
 800997a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800997c:	230f      	movs	r3, #15
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009984:	230e      	movs	r3, #14
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800998c:	e01c      	b.n	80099c8 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800998e:	230f      	movs	r3, #15
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	18d3      	adds	r3, r2, r3
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	1cfa      	adds	r2, r7, #3
 800999c:	7812      	ldrb	r2, [r2, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d105      	bne.n	80099ae <my_find_char_position+0x4a>
			p++ ;
 80099a2:	210e      	movs	r1, #14
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	781a      	ldrb	r2, [r3, #0]
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	3201      	adds	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 80099ae:	230e      	movs	r3, #14
 80099b0:	18fa      	adds	r2, r7, r3
 80099b2:	1cbb      	adds	r3, r7, #2
 80099b4:	7812      	ldrb	r2, [r2, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d00e      	beq.n	80099da <my_find_char_position+0x76>
			break ;
		i++ ;
 80099bc:	210f      	movs	r1, #15
 80099be:	187b      	adds	r3, r7, r1
 80099c0:	781a      	ldrb	r2, [r3, #0]
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	3201      	adds	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 80099c8:	230f      	movs	r3, #15
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	18d3      	adds	r3, r2, r3
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1da      	bne.n	800998e <my_find_char_position+0x2a>
 80099d8:	e000      	b.n	80099dc <my_find_char_position+0x78>
			break ;
 80099da:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 80099dc:	230f      	movs	r3, #15
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	781b      	ldrb	r3, [r3, #0]
}
 80099e2:	0018      	movs	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b004      	add	sp, #16
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	22fa      	movs	r2, #250	; 0xfa
 80099fc:	00d2      	lsls	r2, r2, #3
 80099fe:	4694      	mov	ip, r2
 8009a00:	4463      	add	r3, ip
 8009a02:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	0013      	movs	r3, r2
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	189b      	adds	r3, r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	189b      	adds	r3, r3, r2
 8009a10:	009a      	lsls	r2, r3, #2
 8009a12:	189a      	adds	r2, r3, r2
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	492c      	ldr	r1, [pc, #176]	; (8009ac8 <my_conv_rtc2timestamp+0xdc>)
 8009a18:	468c      	mov	ip, r1
 8009a1a:	4463      	add	r3, ip
 8009a1c:	089b      	lsrs	r3, r3, #2
 8009a1e:	18d3      	adds	r3, r2, r3
 8009a20:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <my_conv_rtc2timestamp+0xe0>)
 8009a22:	4694      	mov	ip, r2
 8009a24:	4463      	add	r3, ip
 8009a26:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009a28:	2300      	movs	r3, #0
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	e00a      	b.n	8009a44 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009a2e:	4a28      	ldr	r2, [pc, #160]	; (8009ad0 <my_conv_rtc2timestamp+0xe4>)
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	18d3      	adds	r3, r2, r3
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	001a      	movs	r2, r3
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	189b      	adds	r3, r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	3301      	adds	r3, #1
 8009a42:	613b      	str	r3, [r7, #16]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	dbee      	blt.n	8009a2e <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d908      	bls.n	8009a6a <my_conv_rtc2timestamp+0x7e>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f000 f8de 	bl	8009c1c <my_conv_is_leap_year>
 8009a60:	1e03      	subs	r3, r0, #0
 8009a62:	d002      	beq.n	8009a6a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	3301      	adds	r3, #1
 8009a68:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	789b      	ldrb	r3, [r3, #2]
 8009a6e:	001a      	movs	r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	18d3      	adds	r3, r2, r3
 8009a74:	3b01      	subs	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	0013      	movs	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	189b      	adds	r3, r3, r2
 8009a80:	011a      	lsls	r2, r3, #4
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	0113      	lsls	r3, r2, #4
 8009a86:	1a9b      	subs	r3, r3, r2
 8009a88:	01db      	lsls	r3, r3, #7
 8009a8a:	0019      	movs	r1, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	001a      	movs	r2, r3
 8009a92:	0013      	movs	r3, r2
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	011a      	lsls	r2, r3, #4
 8009a9a:	1ad2      	subs	r2, r2, r3
 8009a9c:	0113      	lsls	r3, r2, #4
 8009a9e:	001a      	movs	r2, r3
 8009aa0:	0013      	movs	r3, r2
 8009aa2:	18ca      	adds	r2, r1, r3
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	0019      	movs	r1, r3
 8009aaa:	000b      	movs	r3, r1
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	1a5b      	subs	r3, r3, r1
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	18d3      	adds	r3, r2, r3
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	7892      	ldrb	r2, [r2, #2]
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009abc:	68bb      	ldr	r3, [r7, #8]
}
 8009abe:	0018      	movs	r0, r3
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	b006      	add	sp, #24
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	fffff84f 	.word	0xfffff84f
 8009acc:	fff50736 	.word	0xfff50736
 8009ad0:	08014130 	.word	0x08014130

08009ad4 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b08b      	sub	sp, #44	; 0x2c
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	213c      	movs	r1, #60	; 0x3c
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f7f6 fbaf 	bl	8000248 <__aeabi_uidivmod>
 8009aea:	000b      	movs	r3, r1
 8009aec:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	213c      	movs	r1, #60	; 0x3c
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7f6 fb22 	bl	800013c <__udivsi3>
 8009af8:	0003      	movs	r3, r0
 8009afa:	213c      	movs	r1, #60	; 0x3c
 8009afc:	0018      	movs	r0, r3
 8009afe:	f7f6 fba3 	bl	8000248 <__aeabi_uidivmod>
 8009b02:	000b      	movs	r3, r1
 8009b04:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	22e1      	movs	r2, #225	; 0xe1
 8009b0a:	0111      	lsls	r1, r2, #4
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7f6 fb15 	bl	800013c <__udivsi3>
 8009b12:	0003      	movs	r3, r0
 8009b14:	2118      	movs	r1, #24
 8009b16:	0018      	movs	r0, r3
 8009b18:	f7f6 fb96 	bl	8000248 <__aeabi_uidivmod>
 8009b1c:	000b      	movs	r3, r1
 8009b1e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	493b      	ldr	r1, [pc, #236]	; (8009c10 <my_conv_timestamp2rtc+0x13c>)
 8009b24:	0018      	movs	r0, r3
 8009b26:	f7f6 fb09 	bl	800013c <__udivsi3>
 8009b2a:	0003      	movs	r3, r0
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009b2e:	4b39      	ldr	r3, [pc, #228]	; (8009c14 <my_conv_timestamp2rtc+0x140>)
 8009b30:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009b32:	e00d      	b.n	8009b50 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	0018      	movs	r0, r3
 8009b38:	f000 f870 	bl	8009c1c <my_conv_is_leap_year>
 8009b3c:	0003      	movs	r3, r0
 8009b3e:	336e      	adds	r3, #110	; 0x6e
 8009b40:	33ff      	adds	r3, #255	; 0xff
 8009b42:	001a      	movs	r2, r3
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	1a9b      	subs	r3, r3, r2
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f000 f862 	bl	8009c1c <my_conv_is_leap_year>
 8009b58:	0003      	movs	r3, r0
 8009b5a:	336e      	adds	r3, #110	; 0x6e
 8009b5c:	33ff      	adds	r3, #255	; 0xff
 8009b5e:	001a      	movs	r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d2e6      	bcs.n	8009b34 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009b6a:	e018      	b.n	8009b9e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009b6c:	4b2a      	ldr	r3, [pc, #168]	; (8009c18 <my_conv_timestamp2rtc+0x144>)
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	0052      	lsls	r2, r2, #1
 8009b72:	5ad3      	ldrh	r3, [r2, r3]
 8009b74:	001c      	movs	r4, r3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d107      	bne.n	8009b8c <my_conv_timestamp2rtc+0xb8>
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f000 f84c 	bl	8009c1c <my_conv_is_leap_year>
 8009b84:	1e03      	subs	r3, r0, #0
 8009b86:	d001      	beq.n	8009b8c <my_conv_timestamp2rtc+0xb8>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <my_conv_timestamp2rtc+0xba>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	191b      	adds	r3, r3, r4
 8009b90:	001a      	movs	r2, r3
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009b9e:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <my_conv_timestamp2rtc+0x144>)
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	0052      	lsls	r2, r2, #1
 8009ba4:	5ad3      	ldrh	r3, [r2, r3]
 8009ba6:	001c      	movs	r4, r3
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d107      	bne.n	8009bbe <my_conv_timestamp2rtc+0xea>
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f000 f833 	bl	8009c1c <my_conv_is_leap_year>
 8009bb6:	1e03      	subs	r3, r0, #0
 8009bb8:	d001      	beq.n	8009bbe <my_conv_timestamp2rtc+0xea>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e000      	b.n	8009bc0 <my_conv_timestamp2rtc+0xec>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	191b      	adds	r3, r3, r4
 8009bc2:	001a      	movs	r2, r3
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d2d0      	bcs.n	8009b6c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	3330      	adds	r3, #48	; 0x30
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	3301      	adds	r3, #1
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	3301      	adds	r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	709a      	strb	r2, [r3, #2]
}
 8009c06:	46c0      	nop			; (mov r8, r8)
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	b00b      	add	sp, #44	; 0x2c
 8009c0c:	bd90      	pop	{r4, r7, pc}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	00015180 	.word	0x00015180
 8009c14:	000007b2 	.word	0x000007b2
 8009c18:	0801413c 	.word	0x0801413c

08009c1c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2203      	movs	r2, #3
 8009c28:	4013      	ands	r3, r2
 8009c2a:	d106      	bne.n	8009c3a <my_conv_is_leap_year+0x1e>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2164      	movs	r1, #100	; 0x64
 8009c30:	0018      	movs	r0, r3
 8009c32:	f7f6 fbf3 	bl	800041c <__aeabi_idivmod>
 8009c36:	1e0b      	subs	r3, r1, #0
 8009c38:	d107      	bne.n	8009c4a <my_conv_is_leap_year+0x2e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	22c8      	movs	r2, #200	; 0xc8
 8009c3e:	0051      	lsls	r1, r2, #1
 8009c40:	0018      	movs	r0, r3
 8009c42:	f7f6 fbeb 	bl	800041c <__aeabi_idivmod>
 8009c46:	1e0b      	subs	r3, r1, #0
 8009c48:	d101      	bne.n	8009c4e <my_conv_is_leap_year+0x32>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <my_conv_is_leap_year+0x34>
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b002      	add	sp, #8
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af04      	add	r7, sp, #16
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	78db      	ldrb	r3, [r3, #3]
 8009c68:	22fa      	movs	r2, #250	; 0xfa
 8009c6a:	00d2      	lsls	r2, r2, #3
 8009c6c:	189a      	adds	r2, r3, r2
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	785b      	ldrb	r3, [r3, #1]
 8009c72:	469c      	mov	ip, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	789b      	ldrb	r3, [r3, #2]
 8009c78:	001c      	movs	r4, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	001d      	movs	r5, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	001e      	movs	r6, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	789b      	ldrb	r3, [r3, #2]
 8009c8a:	4906      	ldr	r1, [pc, #24]	; (8009ca4 <my_conv_dt_2_dts+0x4c>)
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	9602      	str	r6, [sp, #8]
 8009c92:	9501      	str	r5, [sp, #4]
 8009c94:	9400      	str	r4, [sp, #0]
 8009c96:	4663      	mov	r3, ip
 8009c98:	f001 fe32 	bl	800b900 <sprintf>
}
 8009c9c:	46c0      	nop			; (mov r8, r8)
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b005      	add	sp, #20
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	08014024 	.word	0x08014024

08009ca8 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b24      	cmp	r3, #36	; 0x24
 8009cba:	d117      	bne.n	8009cec <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	b2d1      	uxtb	r1, r2
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	7011      	strb	r1, [r2, #0]
 8009cce:	001a      	movs	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	001a      	movs	r2, r3
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	189b      	adds	r3, r3, r2
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e045      	b.n	8009d78 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b1f      	cmp	r3, #31
 8009cf2:	d907      	bls.n	8009d04 <my_nmea_message+0x5c>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b7e      	cmp	r3, #126	; 0x7e
 8009cfa:	d803      	bhi.n	8009d04 <my_nmea_message+0x5c>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d103      	bne.n	8009d0c <my_nmea_message+0x64>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b0d      	cmp	r3, #13
 8009d0a:	d114      	bne.n	8009d36 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	b2d1      	uxtb	r1, r2
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7011      	strb	r1, [r2, #0]
 8009d18:	001a      	movs	r2, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	189b      	adds	r3, r3, r2
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	7812      	ldrb	r2, [r2, #0]
 8009d22:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	001a      	movs	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	189b      	adds	r3, r3, r2
 8009d2e:	2200      	movs	r2, #0
 8009d30:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e020      	b.n	8009d78 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b0a      	cmp	r3, #10
 8009d3c:	d11a      	bne.n	8009d74 <my_nmea_message+0xcc>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d916      	bls.n	8009d74 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	001a      	movs	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	189b      	adds	r3, r3, r2
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b0d      	cmp	r3, #13
 8009d60:	d108      	bne.n	8009d74 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	001a      	movs	r2, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009d70:	2302      	movs	r3, #2
 8009d72:	e001      	b.n	8009d78 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009d74:	2301      	movs	r3, #1
 8009d76:	425b      	negs	r3, r3
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b004      	add	sp, #16
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3309      	adds	r3, #9
 8009d8c:	781b      	ldrb	r3, [r3, #0]
}
 8009d8e:	0018      	movs	r0, r3
 8009d90:	46bd      	mov	sp, r7
 8009d92:	b002      	add	sp, #8
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009d96:	b5b0      	push	{r4, r5, r7, lr}
 8009d98:	b086      	sub	sp, #24
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	220f      	movs	r2, #15
 8009da2:	212c      	movs	r1, #44	; 0x2c
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7ff fddd 	bl	8009964 <my_find_char_position>
 8009daa:	0003      	movs	r3, r0
 8009dac:	001a      	movs	r2, r3
 8009dae:	2517      	movs	r5, #23
 8009db0:	197b      	adds	r3, r7, r5
 8009db2:	3201      	adds	r2, #1
 8009db4:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2210      	movs	r2, #16
 8009dba:	212c      	movs	r1, #44	; 0x2c
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7ff fdd1 	bl	8009964 <my_find_char_position>
 8009dc2:	0003      	movs	r3, r0
 8009dc4:	0019      	movs	r1, r3
 8009dc6:	2416      	movs	r4, #22
 8009dc8:	193b      	adds	r3, r7, r4
 8009dca:	197a      	adds	r2, r7, r5
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	1a8a      	subs	r2, r1, r2
 8009dd0:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009dd2:	193b      	adds	r3, r7, r4
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f000 fb93 	bl	800a504 <malloc>
 8009dde:	0003      	movs	r3, r0
 8009de0:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009de2:	197b      	adds	r3, r7, r5
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	18d1      	adds	r1, r2, r3
 8009dea:	193b      	adds	r3, r7, r4
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f001 fe34 	bl	800ba5e <strncpy>
	pdop_s[pdop_length] = '\0';
 8009df6:	193b      	adds	r3, r7, r4
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	18d3      	adds	r3, r2, r3
 8009dfe:	2200      	movs	r2, #0
 8009e00:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f7ff fd99 	bl	800993c <my_string2double_conv>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	000b      	movs	r3, r1
 8009e0e:	60ba      	str	r2, [r7, #8]
 8009e10:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fb7f 	bl	800a518 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
}
 8009e1e:	0010      	movs	r0, r2
 8009e20:	0019      	movs	r1, r3
 8009e22:	46bd      	mov	sp, r7
 8009e24:	b006      	add	sp, #24
 8009e26:	bdb0      	pop	{r4, r5, r7, pc}

08009e28 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009e30:	230f      	movs	r3, #15
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009e38:	230e      	movs	r3, #14
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e40:	e00f      	b.n	8009e62 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009e42:	220e      	movs	r2, #14
 8009e44:	18bb      	adds	r3, r7, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	18ba      	adds	r2, r7, r2
 8009e4a:	1c59      	adds	r1, r3, #1
 8009e4c:	7011      	strb	r1, [r2, #0]
 8009e4e:	001a      	movs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	189b      	adds	r3, r3, r2
 8009e54:	7819      	ldrb	r1, [r3, #0]
 8009e56:	220f      	movs	r2, #15
 8009e58:	18bb      	adds	r3, r7, r2
 8009e5a:	18ba      	adds	r2, r7, r2
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	404a      	eors	r2, r1
 8009e60:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e62:	210e      	movs	r1, #14
 8009e64:	187b      	adds	r3, r7, r1
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	18d3      	adds	r3, r2, r3
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e70:	d00a      	beq.n	8009e88 <is_my_nmea_checksum_ok+0x60>
 8009e72:	187b      	adds	r3, r7, r1
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	18d3      	adds	r3, r2, r3
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <is_my_nmea_checksum_ok+0x60>
 8009e80:	187b      	adds	r3, r7, r1
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1dc      	bne.n	8009e42 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009e88:	230f      	movs	r3, #15
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	781c      	ldrb	r4, [r3, #0]
 8009e8e:	210e      	movs	r1, #14
 8009e90:	187b      	adds	r3, r7, r1
 8009e92:	187a      	adds	r2, r7, r1
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	3201      	adds	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	187b      	adds	r3, r7, r1
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	18d3      	adds	r3, r2, r3
 8009ea2:	2210      	movs	r2, #16
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f001 fc26 	bl	800b6f8 <strtol>
 8009eac:	0003      	movs	r3, r0
 8009eae:	1ae3      	subs	r3, r4, r3
 8009eb0:	425a      	negs	r2, r3
 8009eb2:	4153      	adcs	r3, r2
 8009eb4:	b2db      	uxtb	r3, r3
}
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	b005      	add	sp, #20
 8009ebc:	bd90      	pop	{r4, r7, pc}
	...

08009ec0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009ec0:	b5b0      	push	{r4, r5, r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	000a      	movs	r2, r1
 8009eca:	1cfb      	adds	r3, r7, #3
 8009ecc:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009ece:	2308      	movs	r3, #8
 8009ed0:	18fa      	adds	r2, r7, r3
 8009ed2:	492f      	ldr	r1, [pc, #188]	; (8009f90 <nmea2decimal+0xd0>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f001 fd32 	bl	800b940 <sscanf>
    min = deg / 100 ;
 8009edc:	68b8      	ldr	r0, [r7, #8]
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4b2c      	ldr	r3, [pc, #176]	; (8009f94 <nmea2decimal+0xd4>)
 8009ee4:	f7f6 ffc8 	bl	8000e78 <__aeabi_ddiv>
 8009ee8:	0002      	movs	r2, r0
 8009eea:	000b      	movs	r3, r1
 8009eec:	613a      	str	r2, [r7, #16]
 8009eee:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009ef0:	6938      	ldr	r0, [r7, #16]
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	f7f8 fa1c 	bl	8002330 <__aeabi_d2iz>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	0018      	movs	r0, r3
 8009efc:	f7f8 fa4e 	bl	800239c <__aeabi_i2d>
 8009f00:	0002      	movs	r2, r0
 8009f02:	000b      	movs	r3, r1
 8009f04:	60ba      	str	r2, [r7, #8]
 8009f06:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6938      	ldr	r0, [r7, #16]
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	f7f7 fe6e 	bl	8001bf0 <__aeabi_dsub>
 8009f14:	0002      	movs	r2, r0
 8009f16:	000b      	movs	r3, r1
 8009f18:	0010      	movs	r0, r2
 8009f1a:	0019      	movs	r1, r3
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <nmea2decimal+0xd8>)
 8009f20:	f7f7 fba4 	bl	800166c <__aeabi_dmul>
 8009f24:	0002      	movs	r2, r0
 8009f26:	000b      	movs	r3, r1
 8009f28:	613a      	str	r2, [r7, #16]
 8009f2a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4b1b      	ldr	r3, [pc, #108]	; (8009f9c <nmea2decimal+0xdc>)
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	6979      	ldr	r1, [r7, #20]
 8009f34:	f7f6 ffa0 	bl	8000e78 <__aeabi_ddiv>
 8009f38:	0002      	movs	r2, r0
 8009f3a:	000b      	movs	r3, r1
 8009f3c:	613a      	str	r2, [r7, #16]
 8009f3e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009f40:	1cfb      	adds	r3, r7, #3
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b53      	cmp	r3, #83	; 0x53
 8009f46:	d003      	beq.n	8009f50 <nmea2decimal+0x90>
 8009f48:	1cfb      	adds	r3, r7, #3
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b57      	cmp	r3, #87	; 0x57
 8009f4e:	d10e      	bne.n	8009f6e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	68f9      	ldr	r1, [r7, #12]
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f7f6 fc2e 	bl	80007b8 <__aeabi_dadd>
 8009f5c:	0002      	movs	r2, r0
 8009f5e:	000b      	movs	r3, r1
 8009f60:	0011      	movs	r1, r2
 8009f62:	000c      	movs	r4, r1
 8009f64:	2180      	movs	r1, #128	; 0x80
 8009f66:	0609      	lsls	r1, r1, #24
 8009f68:	4059      	eors	r1, r3
 8009f6a:	000d      	movs	r5, r1
 8009f6c:	e009      	b.n	8009f82 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009f6e:	68b8      	ldr	r0, [r7, #8]
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f7f6 fc1f 	bl	80007b8 <__aeabi_dadd>
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	000b      	movs	r3, r1
 8009f7e:	0014      	movs	r4, r2
 8009f80:	001d      	movs	r5, r3
}
 8009f82:	0022      	movs	r2, r4
 8009f84:	002b      	movs	r3, r5
 8009f86:	0010      	movs	r0, r2
 8009f88:	0019      	movs	r1, r3
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	b006      	add	sp, #24
 8009f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f90:	08014044 	.word	0x08014044
 8009f94:	40590000 	.word	0x40590000
 8009f98:	40240000 	.word	0x40240000
 8009f9c:	40180000 	.word	0x40180000

08009fa0 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 8009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa2:	b08d      	sub	sp, #52	; 0x34
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	212c      	movs	r1, #44	; 0x2c
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7ff fcd7 	bl	8009964 <my_find_char_position>
 8009fb6:	0003      	movs	r3, r0
 8009fb8:	001a      	movs	r2, r3
 8009fba:	252f      	movs	r5, #47	; 0x2f
 8009fbc:	197b      	adds	r3, r7, r5
 8009fbe:	3201      	adds	r2, #1
 8009fc0:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	212c      	movs	r1, #44	; 0x2c
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7ff fccb 	bl	8009964 <my_find_char_position>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	0019      	movs	r1, r3
 8009fd2:	242e      	movs	r4, #46	; 0x2e
 8009fd4:	193b      	adds	r3, r7, r4
 8009fd6:	197a      	adds	r2, r7, r5
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	1a8a      	subs	r2, r1, r2
 8009fdc:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009fde:	193b      	adds	r3, r7, r4
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fa8d 	bl	800a504 <malloc>
 8009fea:	0003      	movs	r3, r0
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009fee:	197b      	adds	r3, r7, r5
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	18d1      	adds	r1, r2, r3
 8009ff6:	193b      	adds	r3, r7, r4
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f001 fd2e 	bl	800ba5e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a002:	193b      	adds	r3, r7, r4
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a008:	18d3      	adds	r3, r2, r3
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a00e:	197b      	adds	r3, r7, r5
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	193b      	adds	r3, r7, r4
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	18d3      	adds	r3, r2, r3
 800a018:	3301      	adds	r3, #1
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	18d2      	adds	r2, r2, r3
 800a01e:	2627      	movs	r6, #39	; 0x27
 800a020:	19bb      	adds	r3, r7, r6
 800a022:	7812      	ldrb	r2, [r2, #0]
 800a024:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a026:	19bb      	adds	r3, r7, r6
 800a028:	781a      	ldrb	r2, [r3, #0]
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	0011      	movs	r1, r2
 800a02e:	0018      	movs	r0, r3
 800a030:	f7ff ff46 	bl	8009ec0 <nmea2decimal>
 800a034:	0002      	movs	r2, r0
 800a036:	000b      	movs	r3, r1
 800a038:	61ba      	str	r2, [r7, #24]
 800a03a:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	0018      	movs	r0, r3
 800a040:	f000 fa6a 	bl	800a518 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a044:	2200      	movs	r2, #0
 800a046:	4b49      	ldr	r3, [pc, #292]	; (800a16c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a048:	69b8      	ldr	r0, [r7, #24]
 800a04a:	69f9      	ldr	r1, [r7, #28]
 800a04c:	f7f7 fb0e 	bl	800166c <__aeabi_dmul>
 800a050:	0002      	movs	r2, r0
 800a052:	000b      	movs	r3, r1
 800a054:	0010      	movs	r0, r2
 800a056:	0019      	movs	r1, r3
 800a058:	f008 fa1e 	bl	8012498 <round>
 800a05c:	2200      	movs	r2, #0
 800a05e:	4b43      	ldr	r3, [pc, #268]	; (800a16c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a060:	f7f6 ff0a 	bl	8000e78 <__aeabi_ddiv>
 800a064:	0002      	movs	r2, r0
 800a066:	000b      	movs	r3, r1
 800a068:	61ba      	str	r2, [r7, #24]
 800a06a:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a06c:	2200      	movs	r2, #0
 800a06e:	4b40      	ldr	r3, [pc, #256]	; (800a170 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a070:	69b8      	ldr	r0, [r7, #24]
 800a072:	69f9      	ldr	r1, [r7, #28]
 800a074:	f7f7 fafa 	bl	800166c <__aeabi_dmul>
 800a078:	0002      	movs	r2, r0
 800a07a:	000b      	movs	r3, r1
 800a07c:	0010      	movs	r0, r2
 800a07e:	0019      	movs	r1, r3
 800a080:	f7f8 f956 	bl	8002330 <__aeabi_d2iz>
 800a084:	0002      	movs	r2, r0
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2203      	movs	r2, #3
 800a08e:	212c      	movs	r1, #44	; 0x2c
 800a090:	0018      	movs	r0, r3
 800a092:	f7ff fc67 	bl	8009964 <my_find_char_position>
 800a096:	0003      	movs	r3, r0
 800a098:	001a      	movs	r2, r3
 800a09a:	197b      	adds	r3, r7, r5
 800a09c:	3201      	adds	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	212c      	movs	r1, #44	; 0x2c
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	f7ff fc5c 	bl	8009964 <my_find_char_position>
 800a0ac:	0003      	movs	r3, r0
 800a0ae:	0019      	movs	r1, r3
 800a0b0:	193b      	adds	r3, r7, r4
 800a0b2:	197a      	adds	r2, r7, r5
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	1a8a      	subs	r2, r1, r2
 800a0b8:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a0ba:	193b      	adds	r3, r7, r4
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f000 fa1f 	bl	800a504 <malloc>
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a0ca:	197b      	adds	r3, r7, r5
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	18d1      	adds	r1, r2, r3
 800a0d2:	193b      	adds	r3, r7, r4
 800a0d4:	781a      	ldrb	r2, [r3, #0]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f001 fcc0 	bl	800ba5e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a0de:	193b      	adds	r3, r7, r4
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	18d3      	adds	r3, r2, r3
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a0ea:	197b      	adds	r3, r7, r5
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	193b      	adds	r3, r7, r4
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	18d3      	adds	r3, r2, r3
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	18d2      	adds	r2, r2, r3
 800a0fa:	19bb      	adds	r3, r7, r6
 800a0fc:	7812      	ldrb	r2, [r2, #0]
 800a0fe:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a100:	19bb      	adds	r3, r7, r6
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	0011      	movs	r1, r2
 800a108:	0018      	movs	r0, r3
 800a10a:	f7ff fed9 	bl	8009ec0 <nmea2decimal>
 800a10e:	0002      	movs	r2, r0
 800a110:	000b      	movs	r3, r1
 800a112:	60ba      	str	r2, [r7, #8]
 800a114:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	0018      	movs	r0, r3
 800a11a:	f000 f9fd 	bl	800a518 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a11e:	2200      	movs	r2, #0
 800a120:	4b12      	ldr	r3, [pc, #72]	; (800a16c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a122:	68b8      	ldr	r0, [r7, #8]
 800a124:	68f9      	ldr	r1, [r7, #12]
 800a126:	f7f7 faa1 	bl	800166c <__aeabi_dmul>
 800a12a:	0002      	movs	r2, r0
 800a12c:	000b      	movs	r3, r1
 800a12e:	0010      	movs	r0, r2
 800a130:	0019      	movs	r1, r3
 800a132:	f008 f9b1 	bl	8012498 <round>
 800a136:	2200      	movs	r2, #0
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a13a:	f7f6 fe9d 	bl	8000e78 <__aeabi_ddiv>
 800a13e:	0002      	movs	r2, r0
 800a140:	000b      	movs	r3, r1
 800a142:	60ba      	str	r2, [r7, #8]
 800a144:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a146:	2200      	movs	r2, #0
 800a148:	4b09      	ldr	r3, [pc, #36]	; (800a170 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a14a:	68b8      	ldr	r0, [r7, #8]
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	f7f7 fa8d 	bl	800166c <__aeabi_dmul>
 800a152:	0002      	movs	r2, r0
 800a154:	000b      	movs	r3, r1
 800a156:	0010      	movs	r0, r2
 800a158:	0019      	movs	r1, r3
 800a15a:	f7f8 f8e9 	bl	8002330 <__aeabi_d2iz>
 800a15e:	0002      	movs	r2, r0
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]
}
 800a164:	46c0      	nop			; (mov r8, r8)
 800a166:	46bd      	mov	sp, r7
 800a168:	b00d      	add	sp, #52	; 0x34
 800a16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16c:	412e8480 	.word	0x412e8480
 800a170:	416312d0 	.word	0x416312d0

0800a174 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a174:	b5b0      	push	{r4, r5, r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a17c:	240e      	movs	r4, #14
 800a17e:	193b      	adds	r3, r7, r4
 800a180:	2200      	movs	r2, #0
 800a182:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2203      	movs	r2, #3
 800a188:	212c      	movs	r1, #44	; 0x2c
 800a18a:	0018      	movs	r0, r3
 800a18c:	f7ff fbea 	bl	8009964 <my_find_char_position>
 800a190:	0003      	movs	r3, r0
 800a192:	001a      	movs	r2, r3
 800a194:	2517      	movs	r5, #23
 800a196:	197b      	adds	r3, r7, r5
 800a198:	3201      	adds	r2, #1
 800a19a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a19c:	2003      	movs	r0, #3
 800a19e:	f000 f9b1 	bl	800a504 <malloc>
 800a1a2:	0003      	movs	r3, r0
 800a1a4:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1a6:	197b      	adds	r3, r7, r5
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	18d1      	adds	r1, r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f001 fc53 	bl	800ba5e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	3302      	adds	r3, #2
 800a1bc:	2200      	movs	r2, #0
 800a1be:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a1c0:	193a      	adds	r2, r7, r4
 800a1c2:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <my_nmea_get_gsv_tns+0x6c>)
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f001 fbba 	bl	800b940 <sscanf>
	free ( s ) ;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f000 f9a2 	bl	800a518 <free>
	return tns ;
 800a1d4:	193b      	adds	r3, r7, r4
 800a1d6:	881b      	ldrh	r3, [r3, #0]
}
 800a1d8:	0018      	movs	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	b006      	add	sp, #24
 800a1de:	bdb0      	pop	{r4, r5, r7, pc}
 800a1e0:	08014050 	.word	0x08014050

0800a1e4 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2209      	movs	r2, #9
 800a1f2:	212c      	movs	r1, #44	; 0x2c
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7ff fbb5 	bl	8009964 <my_find_char_position>
 800a1fa:	0003      	movs	r3, r0
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	2417      	movs	r4, #23
 800a200:	193b      	adds	r3, r7, r4
 800a202:	3205      	adds	r2, #5
 800a204:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a206:	2003      	movs	r0, #3
 800a208:	f000 f97c 	bl	800a504 <malloc>
 800a20c:	0003      	movs	r3, r0
 800a20e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a210:	193b      	adds	r3, r7, r4
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	18d1      	adds	r1, r2, r3
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2202      	movs	r2, #2
 800a21c:	0018      	movs	r0, r3
 800a21e:	f001 fc1e 	bl	800ba5e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	3302      	adds	r3, #2
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a22a:	240e      	movs	r4, #14
 800a22c:	193a      	adds	r2, r7, r4
 800a22e:	4909      	ldr	r1, [pc, #36]	; (800a254 <my_nmea_get_rmc_date_yy+0x70>)
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	0018      	movs	r0, r3
 800a234:	f001 fb84 	bl	800b940 <sscanf>
	free ( s ) ;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	0018      	movs	r0, r3
 800a23c:	f000 f96c 	bl	800a518 <free>
	*yy = (uint8_t) temp ;
 800a240:	193b      	adds	r3, r7, r4
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b2da      	uxtb	r2, r3
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	701a      	strb	r2, [r3, #0]

}
 800a24a:	46c0      	nop			; (mov r8, r8)
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b007      	add	sp, #28
 800a250:	bd90      	pop	{r4, r7, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	08014050 	.word	0x08014050

0800a258 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2209      	movs	r2, #9
 800a266:	212c      	movs	r1, #44	; 0x2c
 800a268:	0018      	movs	r0, r3
 800a26a:	f7ff fb7b 	bl	8009964 <my_find_char_position>
 800a26e:	0003      	movs	r3, r0
 800a270:	001a      	movs	r2, r3
 800a272:	2417      	movs	r4, #23
 800a274:	193b      	adds	r3, r7, r4
 800a276:	3203      	adds	r2, #3
 800a278:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a27a:	2003      	movs	r0, #3
 800a27c:	f000 f942 	bl	800a504 <malloc>
 800a280:	0003      	movs	r3, r0
 800a282:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a284:	193b      	adds	r3, r7, r4
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	18d1      	adds	r1, r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2202      	movs	r2, #2
 800a290:	0018      	movs	r0, r3
 800a292:	f001 fbe4 	bl	800ba5e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	3302      	adds	r3, #2
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a29e:	240e      	movs	r4, #14
 800a2a0:	193a      	adds	r2, r7, r4
 800a2a2:	4909      	ldr	r1, [pc, #36]	; (800a2c8 <my_nmea_get_rmc_date_mm+0x70>)
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f001 fb4a 	bl	800b940 <sscanf>
	free ( s ) ;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f000 f932 	bl	800a518 <free>
	*mm = (uint8_t) temp ;
 800a2b4:	193b      	adds	r3, r7, r4
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	701a      	strb	r2, [r3, #0]

}
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	b007      	add	sp, #28
 800a2c4:	bd90      	pop	{r4, r7, pc}
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	08014050 	.word	0x08014050

0800a2cc <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2209      	movs	r2, #9
 800a2da:	212c      	movs	r1, #44	; 0x2c
 800a2dc:	0018      	movs	r0, r3
 800a2de:	f7ff fb41 	bl	8009964 <my_find_char_position>
 800a2e2:	0003      	movs	r3, r0
 800a2e4:	001a      	movs	r2, r3
 800a2e6:	2417      	movs	r4, #23
 800a2e8:	193b      	adds	r3, r7, r4
 800a2ea:	3201      	adds	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a2ee:	2003      	movs	r0, #3
 800a2f0:	f000 f908 	bl	800a504 <malloc>
 800a2f4:	0003      	movs	r3, r0
 800a2f6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2f8:	193b      	adds	r3, r7, r4
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	18d1      	adds	r1, r2, r3
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2202      	movs	r2, #2
 800a304:	0018      	movs	r0, r3
 800a306:	f001 fbaa 	bl	800ba5e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3302      	adds	r3, #2
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a312:	240e      	movs	r4, #14
 800a314:	193a      	adds	r2, r7, r4
 800a316:	4909      	ldr	r1, [pc, #36]	; (800a33c <my_nmea_get_rmc_date_dd+0x70>)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	0018      	movs	r0, r3
 800a31c:	f001 fb10 	bl	800b940 <sscanf>
	free ( s ) ;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	0018      	movs	r0, r3
 800a324:	f000 f8f8 	bl	800a518 <free>
	*dd = (uint8_t) temp ;
 800a328:	193b      	adds	r3, r7, r4
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	701a      	strb	r2, [r3, #0]

}
 800a332:	46c0      	nop			; (mov r8, r8)
 800a334:	46bd      	mov	sp, r7
 800a336:	b007      	add	sp, #28
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	08014050 	.word	0x08014050

0800a340 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	212c      	movs	r1, #44	; 0x2c
 800a350:	0018      	movs	r0, r3
 800a352:	f7ff fb07 	bl	8009964 <my_find_char_position>
 800a356:	0003      	movs	r3, r0
 800a358:	001a      	movs	r2, r3
 800a35a:	2417      	movs	r4, #23
 800a35c:	193b      	adds	r3, r7, r4
 800a35e:	3201      	adds	r2, #1
 800a360:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a362:	2003      	movs	r0, #3
 800a364:	f000 f8ce 	bl	800a504 <malloc>
 800a368:	0003      	movs	r3, r0
 800a36a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a36c:	193b      	adds	r3, r7, r4
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	18d1      	adds	r1, r2, r3
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2202      	movs	r2, #2
 800a378:	0018      	movs	r0, r3
 800a37a:	f001 fb70 	bl	800ba5e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	3302      	adds	r3, #2
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a386:	240e      	movs	r4, #14
 800a388:	193a      	adds	r2, r7, r4
 800a38a:	4909      	ldr	r1, [pc, #36]	; (800a3b0 <my_nmea_get_rmc_utc_hh+0x70>)
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	0018      	movs	r0, r3
 800a390:	f001 fad6 	bl	800b940 <sscanf>
	free ( s ) ;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	0018      	movs	r0, r3
 800a398:	f000 f8be 	bl	800a518 <free>
	*hh = (uint8_t) temp ;
 800a39c:	193b      	adds	r3, r7, r4
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	701a      	strb	r2, [r3, #0]

}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b007      	add	sp, #28
 800a3ac:	bd90      	pop	{r4, r7, pc}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	08014050 	.word	0x08014050

0800a3b4 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	212c      	movs	r1, #44	; 0x2c
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f7ff facd 	bl	8009964 <my_find_char_position>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	001a      	movs	r2, r3
 800a3ce:	2417      	movs	r4, #23
 800a3d0:	193b      	adds	r3, r7, r4
 800a3d2:	3203      	adds	r2, #3
 800a3d4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a3d6:	2003      	movs	r0, #3
 800a3d8:	f000 f894 	bl	800a504 <malloc>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3e0:	193b      	adds	r3, r7, r4
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	18d1      	adds	r1, r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f001 fb36 	bl	800ba5e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a3fa:	240e      	movs	r4, #14
 800a3fc:	193a      	adds	r2, r7, r4
 800a3fe:	4909      	ldr	r1, [pc, #36]	; (800a424 <my_nmea_get_rmc_utc_mm+0x70>)
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	0018      	movs	r0, r3
 800a404:	f001 fa9c 	bl	800b940 <sscanf>
	free ( s ) ;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	0018      	movs	r0, r3
 800a40c:	f000 f884 	bl	800a518 <free>
	*mm = (uint8_t) temp ;
 800a410:	193b      	adds	r3, r7, r4
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	701a      	strb	r2, [r3, #0]

}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	46bd      	mov	sp, r7
 800a41e:	b007      	add	sp, #28
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	08014050 	.word	0x08014050

0800a428 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	212c      	movs	r1, #44	; 0x2c
 800a438:	0018      	movs	r0, r3
 800a43a:	f7ff fa93 	bl	8009964 <my_find_char_position>
 800a43e:	0003      	movs	r3, r0
 800a440:	001a      	movs	r2, r3
 800a442:	2417      	movs	r4, #23
 800a444:	193b      	adds	r3, r7, r4
 800a446:	3205      	adds	r2, #5
 800a448:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a44a:	2003      	movs	r0, #3
 800a44c:	f000 f85a 	bl	800a504 <malloc>
 800a450:	0003      	movs	r3, r0
 800a452:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a454:	193b      	adds	r3, r7, r4
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	18d1      	adds	r1, r2, r3
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2202      	movs	r2, #2
 800a460:	0018      	movs	r0, r3
 800a462:	f001 fafc 	bl	800ba5e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	3302      	adds	r3, #2
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a46e:	240e      	movs	r4, #14
 800a470:	193a      	adds	r2, r7, r4
 800a472:	4909      	ldr	r1, [pc, #36]	; (800a498 <my_nmea_get_rmc_utc_ss+0x70>)
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	0018      	movs	r0, r3
 800a478:	f001 fa62 	bl	800b940 <sscanf>
	free ( s ) ;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	0018      	movs	r0, r3
 800a480:	f000 f84a 	bl	800a518 <free>
	*ss = (uint8_t) temp ;
 800a484:	193b      	adds	r3, r7, r4
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	701a      	strb	r2, [r3, #0]

}
 800a48e:	46c0      	nop			; (mov r8, r8)
 800a490:	46bd      	mov	sp, r7
 800a492:	b007      	add	sp, #28
 800a494:	bd90      	pop	{r4, r7, pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	08014050 	.word	0x08014050

0800a49c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	212c      	movs	r1, #44	; 0x2c
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f7ff fa59 	bl	8009964 <my_find_char_position>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	001a      	movs	r2, r3
 800a4b6:	240f      	movs	r4, #15
 800a4b8:	193b      	adds	r3, r7, r4
 800a4ba:	3208      	adds	r2, #8
 800a4bc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4be:	2004      	movs	r0, #4
 800a4c0:	f000 f820 	bl	800a504 <malloc>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4c8:	193b      	adds	r3, r7, r4
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	18d1      	adds	r1, r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f001 fac2 	bl	800ba5e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	3303      	adds	r3, #3
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	4906      	ldr	r1, [pc, #24]	; (800a500 <my_nmea_get_rmc_utc_sss+0x64>)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f001 fa29 	bl	800b940 <sscanf>
	free ( s ) ;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f000 f811 	bl	800a518 <free>
}
 800a4f6:	46c0      	nop			; (mov r8, r8)
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	b005      	add	sp, #20
 800a4fc:	bd90      	pop	{r4, r7, pc}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	08014054 	.word	0x08014054

0800a504 <malloc>:
 800a504:	b510      	push	{r4, lr}
 800a506:	4b03      	ldr	r3, [pc, #12]	; (800a514 <malloc+0x10>)
 800a508:	0001      	movs	r1, r0
 800a50a:	6818      	ldr	r0, [r3, #0]
 800a50c:	f000 f80e 	bl	800a52c <_malloc_r>
 800a510:	bd10      	pop	{r4, pc}
 800a512:	46c0      	nop			; (mov r8, r8)
 800a514:	200006d0 	.word	0x200006d0

0800a518 <free>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	4b03      	ldr	r3, [pc, #12]	; (800a528 <free+0x10>)
 800a51c:	0001      	movs	r1, r0
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	f001 fbe4 	bl	800bcec <_free_r>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	46c0      	nop			; (mov r8, r8)
 800a528:	200006d0 	.word	0x200006d0

0800a52c <_malloc_r>:
 800a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a52e:	000d      	movs	r5, r1
 800a530:	b087      	sub	sp, #28
 800a532:	350b      	adds	r5, #11
 800a534:	9001      	str	r0, [sp, #4]
 800a536:	2d16      	cmp	r5, #22
 800a538:	d908      	bls.n	800a54c <_malloc_r+0x20>
 800a53a:	2207      	movs	r2, #7
 800a53c:	4395      	bics	r5, r2
 800a53e:	d506      	bpl.n	800a54e <_malloc_r+0x22>
 800a540:	230c      	movs	r3, #12
 800a542:	9a01      	ldr	r2, [sp, #4]
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	2000      	movs	r0, #0
 800a548:	b007      	add	sp, #28
 800a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54c:	2510      	movs	r5, #16
 800a54e:	42a9      	cmp	r1, r5
 800a550:	d8f6      	bhi.n	800a540 <_malloc_r+0x14>
 800a552:	9801      	ldr	r0, [sp, #4]
 800a554:	f000 f9fe 	bl	800a954 <__malloc_lock>
 800a558:	23fc      	movs	r3, #252	; 0xfc
 800a55a:	4ebe      	ldr	r6, [pc, #760]	; (800a854 <_malloc_r+0x328>)
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	429d      	cmp	r5, r3
 800a560:	d219      	bcs.n	800a596 <_malloc_r+0x6a>
 800a562:	002a      	movs	r2, r5
 800a564:	3208      	adds	r2, #8
 800a566:	18b2      	adds	r2, r6, r2
 800a568:	0011      	movs	r1, r2
 800a56a:	6854      	ldr	r4, [r2, #4]
 800a56c:	3908      	subs	r1, #8
 800a56e:	08eb      	lsrs	r3, r5, #3
 800a570:	428c      	cmp	r4, r1
 800a572:	d103      	bne.n	800a57c <_malloc_r+0x50>
 800a574:	68d4      	ldr	r4, [r2, #12]
 800a576:	3302      	adds	r3, #2
 800a578:	42a2      	cmp	r2, r4
 800a57a:	d022      	beq.n	800a5c2 <_malloc_r+0x96>
 800a57c:	2203      	movs	r2, #3
 800a57e:	6863      	ldr	r3, [r4, #4]
 800a580:	68a1      	ldr	r1, [r4, #8]
 800a582:	4393      	bics	r3, r2
 800a584:	68e2      	ldr	r2, [r4, #12]
 800a586:	18e3      	adds	r3, r4, r3
 800a588:	60ca      	str	r2, [r1, #12]
 800a58a:	6091      	str	r1, [r2, #8]
 800a58c:	2201      	movs	r2, #1
 800a58e:	6859      	ldr	r1, [r3, #4]
 800a590:	430a      	orrs	r2, r1
 800a592:	605a      	str	r2, [r3, #4]
 800a594:	e02a      	b.n	800a5ec <_malloc_r+0xc0>
 800a596:	233f      	movs	r3, #63	; 0x3f
 800a598:	0a6a      	lsrs	r2, r5, #9
 800a59a:	d003      	beq.n	800a5a4 <_malloc_r+0x78>
 800a59c:	2a04      	cmp	r2, #4
 800a59e:	d82b      	bhi.n	800a5f8 <_malloc_r+0xcc>
 800a5a0:	09ab      	lsrs	r3, r5, #6
 800a5a2:	3338      	adds	r3, #56	; 0x38
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	4694      	mov	ip, r2
 800a5a8:	00d9      	lsls	r1, r3, #3
 800a5aa:	1989      	adds	r1, r1, r6
 800a5ac:	68cc      	ldr	r4, [r1, #12]
 800a5ae:	428c      	cmp	r4, r1
 800a5b0:	d006      	beq.n	800a5c0 <_malloc_r+0x94>
 800a5b2:	4660      	mov	r0, ip
 800a5b4:	6862      	ldr	r2, [r4, #4]
 800a5b6:	4382      	bics	r2, r0
 800a5b8:	1b57      	subs	r7, r2, r5
 800a5ba:	2f0f      	cmp	r7, #15
 800a5bc:	dd34      	ble.n	800a628 <_malloc_r+0xfc>
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	6934      	ldr	r4, [r6, #16]
 800a5c4:	49a4      	ldr	r1, [pc, #656]	; (800a858 <_malloc_r+0x32c>)
 800a5c6:	428c      	cmp	r4, r1
 800a5c8:	d055      	beq.n	800a676 <_malloc_r+0x14a>
 800a5ca:	2003      	movs	r0, #3
 800a5cc:	6862      	ldr	r2, [r4, #4]
 800a5ce:	4382      	bics	r2, r0
 800a5d0:	1b50      	subs	r0, r2, r5
 800a5d2:	280f      	cmp	r0, #15
 800a5d4:	dd36      	ble.n	800a644 <_malloc_r+0x118>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	1967      	adds	r7, r4, r5
 800a5da:	431d      	orrs	r5, r3
 800a5dc:	4303      	orrs	r3, r0
 800a5de:	6065      	str	r5, [r4, #4]
 800a5e0:	6177      	str	r7, [r6, #20]
 800a5e2:	6137      	str	r7, [r6, #16]
 800a5e4:	60f9      	str	r1, [r7, #12]
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607b      	str	r3, [r7, #4]
 800a5ea:	50a0      	str	r0, [r4, r2]
 800a5ec:	9801      	ldr	r0, [sp, #4]
 800a5ee:	f000 f9b9 	bl	800a964 <__malloc_unlock>
 800a5f2:	0020      	movs	r0, r4
 800a5f4:	3008      	adds	r0, #8
 800a5f6:	e7a7      	b.n	800a548 <_malloc_r+0x1c>
 800a5f8:	2a14      	cmp	r2, #20
 800a5fa:	d802      	bhi.n	800a602 <_malloc_r+0xd6>
 800a5fc:	0013      	movs	r3, r2
 800a5fe:	335b      	adds	r3, #91	; 0x5b
 800a600:	e7d0      	b.n	800a5a4 <_malloc_r+0x78>
 800a602:	2a54      	cmp	r2, #84	; 0x54
 800a604:	d802      	bhi.n	800a60c <_malloc_r+0xe0>
 800a606:	0b2b      	lsrs	r3, r5, #12
 800a608:	336e      	adds	r3, #110	; 0x6e
 800a60a:	e7cb      	b.n	800a5a4 <_malloc_r+0x78>
 800a60c:	23aa      	movs	r3, #170	; 0xaa
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	d802      	bhi.n	800a61a <_malloc_r+0xee>
 800a614:	0beb      	lsrs	r3, r5, #15
 800a616:	3377      	adds	r3, #119	; 0x77
 800a618:	e7c4      	b.n	800a5a4 <_malloc_r+0x78>
 800a61a:	4990      	ldr	r1, [pc, #576]	; (800a85c <_malloc_r+0x330>)
 800a61c:	237e      	movs	r3, #126	; 0x7e
 800a61e:	428a      	cmp	r2, r1
 800a620:	d8c0      	bhi.n	800a5a4 <_malloc_r+0x78>
 800a622:	0cab      	lsrs	r3, r5, #18
 800a624:	337c      	adds	r3, #124	; 0x7c
 800a626:	e7bd      	b.n	800a5a4 <_malloc_r+0x78>
 800a628:	68e0      	ldr	r0, [r4, #12]
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	db08      	blt.n	800a640 <_malloc_r+0x114>
 800a62e:	68a3      	ldr	r3, [r4, #8]
 800a630:	60d8      	str	r0, [r3, #12]
 800a632:	6083      	str	r3, [r0, #8]
 800a634:	2301      	movs	r3, #1
 800a636:	18a2      	adds	r2, r4, r2
 800a638:	6851      	ldr	r1, [r2, #4]
 800a63a:	430b      	orrs	r3, r1
 800a63c:	6053      	str	r3, [r2, #4]
 800a63e:	e7d5      	b.n	800a5ec <_malloc_r+0xc0>
 800a640:	0004      	movs	r4, r0
 800a642:	e7b4      	b.n	800a5ae <_malloc_r+0x82>
 800a644:	6171      	str	r1, [r6, #20]
 800a646:	6131      	str	r1, [r6, #16]
 800a648:	2800      	cmp	r0, #0
 800a64a:	daf3      	bge.n	800a634 <_malloc_r+0x108>
 800a64c:	6871      	ldr	r1, [r6, #4]
 800a64e:	468c      	mov	ip, r1
 800a650:	2180      	movs	r1, #128	; 0x80
 800a652:	0089      	lsls	r1, r1, #2
 800a654:	428a      	cmp	r2, r1
 800a656:	d300      	bcc.n	800a65a <_malloc_r+0x12e>
 800a658:	e08c      	b.n	800a774 <_malloc_r+0x248>
 800a65a:	08d1      	lsrs	r1, r2, #3
 800a65c:	0950      	lsrs	r0, r2, #5
 800a65e:	2201      	movs	r2, #1
 800a660:	4082      	lsls	r2, r0
 800a662:	4660      	mov	r0, ip
 800a664:	4302      	orrs	r2, r0
 800a666:	6072      	str	r2, [r6, #4]
 800a668:	00ca      	lsls	r2, r1, #3
 800a66a:	1992      	adds	r2, r2, r6
 800a66c:	6891      	ldr	r1, [r2, #8]
 800a66e:	60e2      	str	r2, [r4, #12]
 800a670:	60a1      	str	r1, [r4, #8]
 800a672:	6094      	str	r4, [r2, #8]
 800a674:	60cc      	str	r4, [r1, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	4876      	ldr	r0, [pc, #472]	; (800a854 <_malloc_r+0x328>)
 800a67a:	1099      	asrs	r1, r3, #2
 800a67c:	408a      	lsls	r2, r1
 800a67e:	6841      	ldr	r1, [r0, #4]
 800a680:	4291      	cmp	r1, r2
 800a682:	d328      	bcc.n	800a6d6 <_malloc_r+0x1aa>
 800a684:	420a      	tst	r2, r1
 800a686:	d105      	bne.n	800a694 <_malloc_r+0x168>
 800a688:	2403      	movs	r4, #3
 800a68a:	43a3      	bics	r3, r4
 800a68c:	0052      	lsls	r2, r2, #1
 800a68e:	3304      	adds	r3, #4
 800a690:	420a      	tst	r2, r1
 800a692:	d0fb      	beq.n	800a68c <_malloc_r+0x160>
 800a694:	496f      	ldr	r1, [pc, #444]	; (800a854 <_malloc_r+0x328>)
 800a696:	9104      	str	r1, [sp, #16]
 800a698:	00d9      	lsls	r1, r3, #3
 800a69a:	1841      	adds	r1, r0, r1
 800a69c:	468c      	mov	ip, r1
 800a69e:	000f      	movs	r7, r1
 800a6a0:	9302      	str	r3, [sp, #8]
 800a6a2:	68fc      	ldr	r4, [r7, #12]
 800a6a4:	42bc      	cmp	r4, r7
 800a6a6:	d000      	beq.n	800a6aa <_malloc_r+0x17e>
 800a6a8:	e09b      	b.n	800a7e2 <_malloc_r+0x2b6>
 800a6aa:	2403      	movs	r4, #3
 800a6ac:	9902      	ldr	r1, [sp, #8]
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	9102      	str	r1, [sp, #8]
 800a6b4:	4221      	tst	r1, r4
 800a6b6:	d1f4      	bne.n	800a6a2 <_malloc_r+0x176>
 800a6b8:	2103      	movs	r1, #3
 800a6ba:	420b      	tst	r3, r1
 800a6bc:	d000      	beq.n	800a6c0 <_malloc_r+0x194>
 800a6be:	e0b7      	b.n	800a830 <_malloc_r+0x304>
 800a6c0:	6843      	ldr	r3, [r0, #4]
 800a6c2:	4393      	bics	r3, r2
 800a6c4:	6043      	str	r3, [r0, #4]
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	0052      	lsls	r2, r2, #1
 800a6ca:	6859      	ldr	r1, [r3, #4]
 800a6cc:	4291      	cmp	r1, r2
 800a6ce:	d302      	bcc.n	800a6d6 <_malloc_r+0x1aa>
 800a6d0:	2a00      	cmp	r2, #0
 800a6d2:	d000      	beq.n	800a6d6 <_malloc_r+0x1aa>
 800a6d4:	e0bb      	b.n	800a84e <_malloc_r+0x322>
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	6883      	ldr	r3, [r0, #8]
 800a6da:	9302      	str	r3, [sp, #8]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	4393      	bics	r3, r2
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	42ab      	cmp	r3, r5
 800a6e4:	d303      	bcc.n	800a6ee <_malloc_r+0x1c2>
 800a6e6:	1b59      	subs	r1, r3, r5
 800a6e8:	290f      	cmp	r1, #15
 800a6ea:	dd00      	ble.n	800a6ee <_malloc_r+0x1c2>
 800a6ec:	e123      	b.n	800a936 <_malloc_r+0x40a>
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	9a03      	ldr	r2, [sp, #12]
 800a6f2:	2008      	movs	r0, #8
 800a6f4:	189e      	adds	r6, r3, r2
 800a6f6:	4b5a      	ldr	r3, [pc, #360]	; (800a860 <_malloc_r+0x334>)
 800a6f8:	681f      	ldr	r7, [r3, #0]
 800a6fa:	f001 fa71 	bl	800bbe0 <sysconf>
 800a6fe:	4b59      	ldr	r3, [pc, #356]	; (800a864 <_malloc_r+0x338>)
 800a700:	3710      	adds	r7, #16
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	197f      	adds	r7, r7, r5
 800a706:	9004      	str	r0, [sp, #16]
 800a708:	3301      	adds	r3, #1
 800a70a:	d003      	beq.n	800a714 <_malloc_r+0x1e8>
 800a70c:	1e7b      	subs	r3, r7, #1
 800a70e:	181b      	adds	r3, r3, r0
 800a710:	4247      	negs	r7, r0
 800a712:	401f      	ands	r7, r3
 800a714:	0039      	movs	r1, r7
 800a716:	9801      	ldr	r0, [sp, #4]
 800a718:	f001 fa0e 	bl	800bb38 <_sbrk_r>
 800a71c:	0004      	movs	r4, r0
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	d100      	bne.n	800a724 <_malloc_r+0x1f8>
 800a722:	e0de      	b.n	800a8e2 <_malloc_r+0x3b6>
 800a724:	4286      	cmp	r6, r0
 800a726:	d904      	bls.n	800a732 <_malloc_r+0x206>
 800a728:	4b4a      	ldr	r3, [pc, #296]	; (800a854 <_malloc_r+0x328>)
 800a72a:	9a02      	ldr	r2, [sp, #8]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d000      	beq.n	800a732 <_malloc_r+0x206>
 800a730:	e0d7      	b.n	800a8e2 <_malloc_r+0x3b6>
 800a732:	4a4d      	ldr	r2, [pc, #308]	; (800a868 <_malloc_r+0x33c>)
 800a734:	6813      	ldr	r3, [r2, #0]
 800a736:	18fb      	adds	r3, r7, r3
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	9a04      	ldr	r2, [sp, #16]
 800a73c:	3a01      	subs	r2, #1
 800a73e:	42a6      	cmp	r6, r4
 800a740:	d000      	beq.n	800a744 <_malloc_r+0x218>
 800a742:	e097      	b.n	800a874 <_malloc_r+0x348>
 800a744:	4216      	tst	r6, r2
 800a746:	d000      	beq.n	800a74a <_malloc_r+0x21e>
 800a748:	e094      	b.n	800a874 <_malloc_r+0x348>
 800a74a:	4b42      	ldr	r3, [pc, #264]	; (800a854 <_malloc_r+0x328>)
 800a74c:	689a      	ldr	r2, [r3, #8]
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	19df      	adds	r7, r3, r7
 800a752:	2301      	movs	r3, #1
 800a754:	433b      	orrs	r3, r7
 800a756:	6053      	str	r3, [r2, #4]
 800a758:	4b43      	ldr	r3, [pc, #268]	; (800a868 <_malloc_r+0x33c>)
 800a75a:	4a44      	ldr	r2, [pc, #272]	; (800a86c <_malloc_r+0x340>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6811      	ldr	r1, [r2, #0]
 800a760:	428b      	cmp	r3, r1
 800a762:	d900      	bls.n	800a766 <_malloc_r+0x23a>
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	4a42      	ldr	r2, [pc, #264]	; (800a870 <_malloc_r+0x344>)
 800a768:	6811      	ldr	r1, [r2, #0]
 800a76a:	428b      	cmp	r3, r1
 800a76c:	d800      	bhi.n	800a770 <_malloc_r+0x244>
 800a76e:	e0b8      	b.n	800a8e2 <_malloc_r+0x3b6>
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	e0b6      	b.n	800a8e2 <_malloc_r+0x3b6>
 800a774:	0a50      	lsrs	r0, r2, #9
 800a776:	2804      	cmp	r0, #4
 800a778:	d811      	bhi.n	800a79e <_malloc_r+0x272>
 800a77a:	0991      	lsrs	r1, r2, #6
 800a77c:	3138      	adds	r1, #56	; 0x38
 800a77e:	00cf      	lsls	r7, r1, #3
 800a780:	19bf      	adds	r7, r7, r6
 800a782:	68b8      	ldr	r0, [r7, #8]
 800a784:	4287      	cmp	r7, r0
 800a786:	d125      	bne.n	800a7d4 <_malloc_r+0x2a8>
 800a788:	2201      	movs	r2, #1
 800a78a:	1089      	asrs	r1, r1, #2
 800a78c:	408a      	lsls	r2, r1
 800a78e:	4661      	mov	r1, ip
 800a790:	430a      	orrs	r2, r1
 800a792:	6072      	str	r2, [r6, #4]
 800a794:	60e7      	str	r7, [r4, #12]
 800a796:	60a0      	str	r0, [r4, #8]
 800a798:	60bc      	str	r4, [r7, #8]
 800a79a:	60c4      	str	r4, [r0, #12]
 800a79c:	e76b      	b.n	800a676 <_malloc_r+0x14a>
 800a79e:	2814      	cmp	r0, #20
 800a7a0:	d802      	bhi.n	800a7a8 <_malloc_r+0x27c>
 800a7a2:	0001      	movs	r1, r0
 800a7a4:	315b      	adds	r1, #91	; 0x5b
 800a7a6:	e7ea      	b.n	800a77e <_malloc_r+0x252>
 800a7a8:	2854      	cmp	r0, #84	; 0x54
 800a7aa:	d802      	bhi.n	800a7b2 <_malloc_r+0x286>
 800a7ac:	0b11      	lsrs	r1, r2, #12
 800a7ae:	316e      	adds	r1, #110	; 0x6e
 800a7b0:	e7e5      	b.n	800a77e <_malloc_r+0x252>
 800a7b2:	21aa      	movs	r1, #170	; 0xaa
 800a7b4:	0049      	lsls	r1, r1, #1
 800a7b6:	4288      	cmp	r0, r1
 800a7b8:	d802      	bhi.n	800a7c0 <_malloc_r+0x294>
 800a7ba:	0bd1      	lsrs	r1, r2, #15
 800a7bc:	3177      	adds	r1, #119	; 0x77
 800a7be:	e7de      	b.n	800a77e <_malloc_r+0x252>
 800a7c0:	4f26      	ldr	r7, [pc, #152]	; (800a85c <_malloc_r+0x330>)
 800a7c2:	217e      	movs	r1, #126	; 0x7e
 800a7c4:	42b8      	cmp	r0, r7
 800a7c6:	d8da      	bhi.n	800a77e <_malloc_r+0x252>
 800a7c8:	0c91      	lsrs	r1, r2, #18
 800a7ca:	317c      	adds	r1, #124	; 0x7c
 800a7cc:	e7d7      	b.n	800a77e <_malloc_r+0x252>
 800a7ce:	6880      	ldr	r0, [r0, #8]
 800a7d0:	4287      	cmp	r7, r0
 800a7d2:	d004      	beq.n	800a7de <_malloc_r+0x2b2>
 800a7d4:	2603      	movs	r6, #3
 800a7d6:	6841      	ldr	r1, [r0, #4]
 800a7d8:	43b1      	bics	r1, r6
 800a7da:	4291      	cmp	r1, r2
 800a7dc:	d8f7      	bhi.n	800a7ce <_malloc_r+0x2a2>
 800a7de:	68c7      	ldr	r7, [r0, #12]
 800a7e0:	e7d8      	b.n	800a794 <_malloc_r+0x268>
 800a7e2:	2603      	movs	r6, #3
 800a7e4:	6861      	ldr	r1, [r4, #4]
 800a7e6:	43b1      	bics	r1, r6
 800a7e8:	9103      	str	r1, [sp, #12]
 800a7ea:	68e6      	ldr	r6, [r4, #12]
 800a7ec:	1b49      	subs	r1, r1, r5
 800a7ee:	290f      	cmp	r1, #15
 800a7f0:	dd10      	ble.n	800a814 <_malloc_r+0x2e8>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	1963      	adds	r3, r4, r5
 800a7f6:	4315      	orrs	r5, r2
 800a7f8:	6065      	str	r5, [r4, #4]
 800a7fa:	68a5      	ldr	r5, [r4, #8]
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	60ee      	str	r6, [r5, #12]
 800a800:	60b5      	str	r5, [r6, #8]
 800a802:	6143      	str	r3, [r0, #20]
 800a804:	6103      	str	r3, [r0, #16]
 800a806:	4814      	ldr	r0, [pc, #80]	; (800a858 <_malloc_r+0x32c>)
 800a808:	605a      	str	r2, [r3, #4]
 800a80a:	60d8      	str	r0, [r3, #12]
 800a80c:	6098      	str	r0, [r3, #8]
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	50e1      	str	r1, [r4, r3]
 800a812:	e6eb      	b.n	800a5ec <_malloc_r+0xc0>
 800a814:	2900      	cmp	r1, #0
 800a816:	db09      	blt.n	800a82c <_malloc_r+0x300>
 800a818:	9b03      	ldr	r3, [sp, #12]
 800a81a:	18e1      	adds	r1, r4, r3
 800a81c:	2301      	movs	r3, #1
 800a81e:	684a      	ldr	r2, [r1, #4]
 800a820:	4313      	orrs	r3, r2
 800a822:	604b      	str	r3, [r1, #4]
 800a824:	68a3      	ldr	r3, [r4, #8]
 800a826:	60de      	str	r6, [r3, #12]
 800a828:	60b3      	str	r3, [r6, #8]
 800a82a:	e6df      	b.n	800a5ec <_malloc_r+0xc0>
 800a82c:	0034      	movs	r4, r6
 800a82e:	e739      	b.n	800a6a4 <_malloc_r+0x178>
 800a830:	2108      	movs	r1, #8
 800a832:	4249      	negs	r1, r1
 800a834:	448c      	add	ip, r1
 800a836:	4661      	mov	r1, ip
 800a838:	6889      	ldr	r1, [r1, #8]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	4561      	cmp	r1, ip
 800a83e:	d100      	bne.n	800a842 <_malloc_r+0x316>
 800a840:	e73a      	b.n	800a6b8 <_malloc_r+0x18c>
 800a842:	e740      	b.n	800a6c6 <_malloc_r+0x19a>
 800a844:	3304      	adds	r3, #4
 800a846:	0052      	lsls	r2, r2, #1
 800a848:	420a      	tst	r2, r1
 800a84a:	d0fb      	beq.n	800a844 <_malloc_r+0x318>
 800a84c:	e724      	b.n	800a698 <_malloc_r+0x16c>
 800a84e:	9b02      	ldr	r3, [sp, #8]
 800a850:	e7fa      	b.n	800a848 <_malloc_r+0x31c>
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	20000028 	.word	0x20000028
 800a858:	20000030 	.word	0x20000030
 800a85c:	00000554 	.word	0x00000554
 800a860:	20000c34 	.word	0x20000c34
 800a864:	20000430 	.word	0x20000430
 800a868:	20000c04 	.word	0x20000c04
 800a86c:	20000c2c 	.word	0x20000c2c
 800a870:	20000c30 	.word	0x20000c30
 800a874:	4934      	ldr	r1, [pc, #208]	; (800a948 <_malloc_r+0x41c>)
 800a876:	6808      	ldr	r0, [r1, #0]
 800a878:	3001      	adds	r0, #1
 800a87a:	d140      	bne.n	800a8fe <_malloc_r+0x3d2>
 800a87c:	600c      	str	r4, [r1, #0]
 800a87e:	2107      	movs	r1, #7
 800a880:	0026      	movs	r6, r4
 800a882:	2300      	movs	r3, #0
 800a884:	400e      	ands	r6, r1
 800a886:	420c      	tst	r4, r1
 800a888:	d002      	beq.n	800a890 <_malloc_r+0x364>
 800a88a:	3308      	adds	r3, #8
 800a88c:	1b9b      	subs	r3, r3, r6
 800a88e:	18e4      	adds	r4, r4, r3
 800a890:	19e1      	adds	r1, r4, r7
 800a892:	9105      	str	r1, [sp, #20]
 800a894:	9f05      	ldr	r7, [sp, #20]
 800a896:	9904      	ldr	r1, [sp, #16]
 800a898:	4017      	ands	r7, r2
 800a89a:	18cb      	adds	r3, r1, r3
 800a89c:	1bdf      	subs	r7, r3, r7
 800a89e:	4017      	ands	r7, r2
 800a8a0:	0039      	movs	r1, r7
 800a8a2:	9801      	ldr	r0, [sp, #4]
 800a8a4:	f001 f948 	bl	800bb38 <_sbrk_r>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d107      	bne.n	800a8bc <_malloc_r+0x390>
 800a8ac:	1e37      	subs	r7, r6, #0
 800a8ae:	9805      	ldr	r0, [sp, #20]
 800a8b0:	d004      	beq.n	800a8bc <_malloc_r+0x390>
 800a8b2:	0030      	movs	r0, r6
 800a8b4:	2700      	movs	r7, #0
 800a8b6:	9b05      	ldr	r3, [sp, #20]
 800a8b8:	3808      	subs	r0, #8
 800a8ba:	1818      	adds	r0, r3, r0
 800a8bc:	4a23      	ldr	r2, [pc, #140]	; (800a94c <_malloc_r+0x420>)
 800a8be:	1b00      	subs	r0, r0, r4
 800a8c0:	6813      	ldr	r3, [r2, #0]
 800a8c2:	19c0      	adds	r0, r0, r7
 800a8c4:	19db      	adds	r3, r3, r7
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	4b21      	ldr	r3, [pc, #132]	; (800a950 <_malloc_r+0x424>)
 800a8cc:	9902      	ldr	r1, [sp, #8]
 800a8ce:	4310      	orrs	r0, r2
 800a8d0:	609c      	str	r4, [r3, #8]
 800a8d2:	6060      	str	r0, [r4, #4]
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d100      	bne.n	800a8da <_malloc_r+0x3ae>
 800a8d8:	e73e      	b.n	800a758 <_malloc_r+0x22c>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	2b0f      	cmp	r3, #15
 800a8de:	d813      	bhi.n	800a908 <_malloc_r+0x3dc>
 800a8e0:	6062      	str	r2, [r4, #4]
 800a8e2:	2203      	movs	r2, #3
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	; (800a950 <_malloc_r+0x424>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4393      	bics	r3, r2
 800a8ec:	1b59      	subs	r1, r3, r5
 800a8ee:	42ab      	cmp	r3, r5
 800a8f0:	d301      	bcc.n	800a8f6 <_malloc_r+0x3ca>
 800a8f2:	290f      	cmp	r1, #15
 800a8f4:	dc1f      	bgt.n	800a936 <_malloc_r+0x40a>
 800a8f6:	9801      	ldr	r0, [sp, #4]
 800a8f8:	f000 f834 	bl	800a964 <__malloc_unlock>
 800a8fc:	e623      	b.n	800a546 <_malloc_r+0x1a>
 800a8fe:	4913      	ldr	r1, [pc, #76]	; (800a94c <_malloc_r+0x420>)
 800a900:	1ba6      	subs	r6, r4, r6
 800a902:	18f6      	adds	r6, r6, r3
 800a904:	600e      	str	r6, [r1, #0]
 800a906:	e7ba      	b.n	800a87e <_malloc_r+0x352>
 800a908:	2107      	movs	r1, #7
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	3b0c      	subs	r3, #12
 800a90e:	438b      	bics	r3, r1
 800a910:	9902      	ldr	r1, [sp, #8]
 800a912:	6849      	ldr	r1, [r1, #4]
 800a914:	400a      	ands	r2, r1
 800a916:	9902      	ldr	r1, [sp, #8]
 800a918:	431a      	orrs	r2, r3
 800a91a:	604a      	str	r2, [r1, #4]
 800a91c:	18ca      	adds	r2, r1, r3
 800a91e:	2105      	movs	r1, #5
 800a920:	6051      	str	r1, [r2, #4]
 800a922:	6091      	str	r1, [r2, #8]
 800a924:	2b0f      	cmp	r3, #15
 800a926:	d800      	bhi.n	800a92a <_malloc_r+0x3fe>
 800a928:	e716      	b.n	800a758 <_malloc_r+0x22c>
 800a92a:	9902      	ldr	r1, [sp, #8]
 800a92c:	9801      	ldr	r0, [sp, #4]
 800a92e:	3108      	adds	r1, #8
 800a930:	f001 f9dc 	bl	800bcec <_free_r>
 800a934:	e710      	b.n	800a758 <_malloc_r+0x22c>
 800a936:	2201      	movs	r2, #1
 800a938:	0013      	movs	r3, r2
 800a93a:	4805      	ldr	r0, [pc, #20]	; (800a950 <_malloc_r+0x424>)
 800a93c:	432b      	orrs	r3, r5
 800a93e:	6884      	ldr	r4, [r0, #8]
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	1963      	adds	r3, r4, r5
 800a944:	6083      	str	r3, [r0, #8]
 800a946:	e623      	b.n	800a590 <_malloc_r+0x64>
 800a948:	20000430 	.word	0x20000430
 800a94c:	20000c04 	.word	0x20000c04
 800a950:	20000028 	.word	0x20000028

0800a954 <__malloc_lock>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4802      	ldr	r0, [pc, #8]	; (800a960 <__malloc_lock+0xc>)
 800a958:	f001 f940 	bl	800bbdc <__retarget_lock_acquire_recursive>
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	20000d79 	.word	0x20000d79

0800a964 <__malloc_unlock>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4802      	ldr	r0, [pc, #8]	; (800a970 <__malloc_unlock+0xc>)
 800a968:	f001 f939 	bl	800bbde <__retarget_lock_release_recursive>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	20000d79 	.word	0x20000d79

0800a974 <sulp>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	0016      	movs	r6, r2
 800a978:	000d      	movs	r5, r1
 800a97a:	f002 f90d 	bl	800cb98 <__ulp>
 800a97e:	2e00      	cmp	r6, #0
 800a980:	d00d      	beq.n	800a99e <sulp+0x2a>
 800a982:	236b      	movs	r3, #107	; 0x6b
 800a984:	006a      	lsls	r2, r5, #1
 800a986:	0d52      	lsrs	r2, r2, #21
 800a988:	1a9b      	subs	r3, r3, r2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dd07      	ble.n	800a99e <sulp+0x2a>
 800a98e:	2400      	movs	r4, #0
 800a990:	4a03      	ldr	r2, [pc, #12]	; (800a9a0 <sulp+0x2c>)
 800a992:	051b      	lsls	r3, r3, #20
 800a994:	189d      	adds	r5, r3, r2
 800a996:	002b      	movs	r3, r5
 800a998:	0022      	movs	r2, r4
 800a99a:	f7f6 fe67 	bl	800166c <__aeabi_dmul>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	3ff00000 	.word	0x3ff00000

0800a9a4 <_strtod_l>:
 800a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a6:	b0a1      	sub	sp, #132	; 0x84
 800a9a8:	9219      	str	r2, [sp, #100]	; 0x64
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	2700      	movs	r7, #0
 800a9b0:	9004      	str	r0, [sp, #16]
 800a9b2:	9107      	str	r1, [sp, #28]
 800a9b4:	921c      	str	r2, [sp, #112]	; 0x70
 800a9b6:	911b      	str	r1, [sp, #108]	; 0x6c
 800a9b8:	780a      	ldrb	r2, [r1, #0]
 800a9ba:	2a2b      	cmp	r2, #43	; 0x2b
 800a9bc:	d055      	beq.n	800aa6a <_strtod_l+0xc6>
 800a9be:	d841      	bhi.n	800aa44 <_strtod_l+0xa0>
 800a9c0:	2a0d      	cmp	r2, #13
 800a9c2:	d83b      	bhi.n	800aa3c <_strtod_l+0x98>
 800a9c4:	2a08      	cmp	r2, #8
 800a9c6:	d83b      	bhi.n	800aa40 <_strtod_l+0x9c>
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	d044      	beq.n	800aa56 <_strtod_l+0xb2>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9d4:	9109      	str	r1, [sp, #36]	; 0x24
 800a9d6:	782a      	ldrb	r2, [r5, #0]
 800a9d8:	2a30      	cmp	r2, #48	; 0x30
 800a9da:	d000      	beq.n	800a9de <_strtod_l+0x3a>
 800a9dc:	e085      	b.n	800aaea <_strtod_l+0x146>
 800a9de:	786a      	ldrb	r2, [r5, #1]
 800a9e0:	3120      	adds	r1, #32
 800a9e2:	438a      	bics	r2, r1
 800a9e4:	2a58      	cmp	r2, #88	; 0x58
 800a9e6:	d000      	beq.n	800a9ea <_strtod_l+0x46>
 800a9e8:	e075      	b.n	800aad6 <_strtod_l+0x132>
 800a9ea:	9302      	str	r3, [sp, #8]
 800a9ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9ee:	4a97      	ldr	r2, [pc, #604]	; (800ac4c <_strtod_l+0x2a8>)
 800a9f0:	9301      	str	r3, [sp, #4]
 800a9f2:	ab1c      	add	r3, sp, #112	; 0x70
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	9804      	ldr	r0, [sp, #16]
 800a9f8:	ab1d      	add	r3, sp, #116	; 0x74
 800a9fa:	a91b      	add	r1, sp, #108	; 0x6c
 800a9fc:	f001 fa92 	bl	800bf24 <__gethex>
 800aa00:	230f      	movs	r3, #15
 800aa02:	0002      	movs	r2, r0
 800aa04:	401a      	ands	r2, r3
 800aa06:	0004      	movs	r4, r0
 800aa08:	9205      	str	r2, [sp, #20]
 800aa0a:	4218      	tst	r0, r3
 800aa0c:	d005      	beq.n	800aa1a <_strtod_l+0x76>
 800aa0e:	2a06      	cmp	r2, #6
 800aa10:	d12d      	bne.n	800aa6e <_strtod_l+0xca>
 800aa12:	1c6b      	adds	r3, r5, #1
 800aa14:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa16:	2300      	movs	r3, #0
 800aa18:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <_strtod_l+0x82>
 800aa20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa22:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01b      	beq.n	800aa64 <_strtod_l+0xc0>
 800aa2c:	2380      	movs	r3, #128	; 0x80
 800aa2e:	0032      	movs	r2, r6
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	18fb      	adds	r3, r7, r3
 800aa34:	0010      	movs	r0, r2
 800aa36:	0019      	movs	r1, r3
 800aa38:	b021      	add	sp, #132	; 0x84
 800aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa3c:	2a20      	cmp	r2, #32
 800aa3e:	d1c5      	bne.n	800a9cc <_strtod_l+0x28>
 800aa40:	3101      	adds	r1, #1
 800aa42:	e7b8      	b.n	800a9b6 <_strtod_l+0x12>
 800aa44:	2a2d      	cmp	r2, #45	; 0x2d
 800aa46:	d1c1      	bne.n	800a9cc <_strtod_l+0x28>
 800aa48:	3a2c      	subs	r2, #44	; 0x2c
 800aa4a:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa4c:	1c4a      	adds	r2, r1, #1
 800aa4e:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa50:	784a      	ldrb	r2, [r1, #1]
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	d1bc      	bne.n	800a9d0 <_strtod_l+0x2c>
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1dd      	bne.n	800aa20 <_strtod_l+0x7c>
 800aa64:	0032      	movs	r2, r6
 800aa66:	003b      	movs	r3, r7
 800aa68:	e7e4      	b.n	800aa34 <_strtod_l+0x90>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	e7ed      	b.n	800aa4a <_strtod_l+0xa6>
 800aa6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	d007      	beq.n	800aa84 <_strtod_l+0xe0>
 800aa74:	2135      	movs	r1, #53	; 0x35
 800aa76:	a81e      	add	r0, sp, #120	; 0x78
 800aa78:	f002 f97f 	bl	800cd7a <__copybits>
 800aa7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa7e:	9804      	ldr	r0, [sp, #16]
 800aa80:	f001 fd7c 	bl	800c57c <_Bfree>
 800aa84:	9805      	ldr	r0, [sp, #20]
 800aa86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa88:	3801      	subs	r0, #1
 800aa8a:	2804      	cmp	r0, #4
 800aa8c:	d806      	bhi.n	800aa9c <_strtod_l+0xf8>
 800aa8e:	f7f5 fb41 	bl	8000114 <__gnu_thumb1_case_uqi>
 800aa92:	0312      	.short	0x0312
 800aa94:	1e1c      	.short	0x1e1c
 800aa96:	12          	.byte	0x12
 800aa97:	00          	.byte	0x00
 800aa98:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aa9a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800aa9c:	05e4      	lsls	r4, r4, #23
 800aa9e:	d502      	bpl.n	800aaa6 <_strtod_l+0x102>
 800aaa0:	2380      	movs	r3, #128	; 0x80
 800aaa2:	061b      	lsls	r3, r3, #24
 800aaa4:	431f      	orrs	r7, r3
 800aaa6:	4b6a      	ldr	r3, [pc, #424]	; (800ac50 <_strtod_l+0x2ac>)
 800aaa8:	423b      	tst	r3, r7
 800aaaa:	d1b6      	bne.n	800aa1a <_strtod_l+0x76>
 800aaac:	f001 f86a 	bl	800bb84 <__errno>
 800aab0:	2322      	movs	r3, #34	; 0x22
 800aab2:	6003      	str	r3, [r0, #0]
 800aab4:	e7b1      	b.n	800aa1a <_strtod_l+0x76>
 800aab6:	4967      	ldr	r1, [pc, #412]	; (800ac54 <_strtod_l+0x2b0>)
 800aab8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aaba:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aabc:	400a      	ands	r2, r1
 800aabe:	4966      	ldr	r1, [pc, #408]	; (800ac58 <_strtod_l+0x2b4>)
 800aac0:	185b      	adds	r3, r3, r1
 800aac2:	051b      	lsls	r3, r3, #20
 800aac4:	431a      	orrs	r2, r3
 800aac6:	0017      	movs	r7, r2
 800aac8:	e7e8      	b.n	800aa9c <_strtod_l+0xf8>
 800aaca:	4f61      	ldr	r7, [pc, #388]	; (800ac50 <_strtod_l+0x2ac>)
 800aacc:	e7e6      	b.n	800aa9c <_strtod_l+0xf8>
 800aace:	2601      	movs	r6, #1
 800aad0:	4f62      	ldr	r7, [pc, #392]	; (800ac5c <_strtod_l+0x2b8>)
 800aad2:	4276      	negs	r6, r6
 800aad4:	e7e2      	b.n	800aa9c <_strtod_l+0xf8>
 800aad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	921b      	str	r2, [sp, #108]	; 0x6c
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b30      	cmp	r3, #48	; 0x30
 800aae0:	d0f9      	beq.n	800aad6 <_strtod_l+0x132>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d099      	beq.n	800aa1a <_strtod_l+0x76>
 800aae6:	2301      	movs	r3, #1
 800aae8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaea:	2500      	movs	r5, #0
 800aaec:	220a      	movs	r2, #10
 800aaee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aaf0:	950d      	str	r5, [sp, #52]	; 0x34
 800aaf2:	9310      	str	r3, [sp, #64]	; 0x40
 800aaf4:	9508      	str	r5, [sp, #32]
 800aaf6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aaf8:	7804      	ldrb	r4, [r0, #0]
 800aafa:	0023      	movs	r3, r4
 800aafc:	3b30      	subs	r3, #48	; 0x30
 800aafe:	b2d9      	uxtb	r1, r3
 800ab00:	2909      	cmp	r1, #9
 800ab02:	d927      	bls.n	800ab54 <_strtod_l+0x1b0>
 800ab04:	2201      	movs	r2, #1
 800ab06:	4956      	ldr	r1, [pc, #344]	; (800ac60 <_strtod_l+0x2bc>)
 800ab08:	f000 ff98 	bl	800ba3c <strncmp>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d031      	beq.n	800ab74 <_strtod_l+0x1d0>
 800ab10:	2000      	movs	r0, #0
 800ab12:	0023      	movs	r3, r4
 800ab14:	4684      	mov	ip, r0
 800ab16:	9a08      	ldr	r2, [sp, #32]
 800ab18:	900c      	str	r0, [sp, #48]	; 0x30
 800ab1a:	9205      	str	r2, [sp, #20]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	0019      	movs	r1, r3
 800ab20:	4391      	bics	r1, r2
 800ab22:	000a      	movs	r2, r1
 800ab24:	2100      	movs	r1, #0
 800ab26:	9106      	str	r1, [sp, #24]
 800ab28:	2a45      	cmp	r2, #69	; 0x45
 800ab2a:	d000      	beq.n	800ab2e <_strtod_l+0x18a>
 800ab2c:	e0c2      	b.n	800acb4 <_strtod_l+0x310>
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab32:	4303      	orrs	r3, r0
 800ab34:	4313      	orrs	r3, r2
 800ab36:	428b      	cmp	r3, r1
 800ab38:	d08d      	beq.n	800aa56 <_strtod_l+0xb2>
 800ab3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab3c:	9307      	str	r3, [sp, #28]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab42:	9b07      	ldr	r3, [sp, #28]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b2b      	cmp	r3, #43	; 0x2b
 800ab48:	d071      	beq.n	800ac2e <_strtod_l+0x28a>
 800ab4a:	000c      	movs	r4, r1
 800ab4c:	2b2d      	cmp	r3, #45	; 0x2d
 800ab4e:	d174      	bne.n	800ac3a <_strtod_l+0x296>
 800ab50:	2401      	movs	r4, #1
 800ab52:	e06d      	b.n	800ac30 <_strtod_l+0x28c>
 800ab54:	9908      	ldr	r1, [sp, #32]
 800ab56:	2908      	cmp	r1, #8
 800ab58:	dc09      	bgt.n	800ab6e <_strtod_l+0x1ca>
 800ab5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab5c:	4351      	muls	r1, r2
 800ab5e:	185b      	adds	r3, r3, r1
 800ab60:	930d      	str	r3, [sp, #52]	; 0x34
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	3001      	adds	r0, #1
 800ab66:	3301      	adds	r3, #1
 800ab68:	9308      	str	r3, [sp, #32]
 800ab6a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab6c:	e7c3      	b.n	800aaf6 <_strtod_l+0x152>
 800ab6e:	4355      	muls	r5, r2
 800ab70:	195d      	adds	r5, r3, r5
 800ab72:	e7f6      	b.n	800ab62 <_strtod_l+0x1be>
 800ab74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab76:	1c5a      	adds	r2, r3, #1
 800ab78:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab7a:	9a08      	ldr	r2, [sp, #32]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	d03a      	beq.n	800abf8 <_strtod_l+0x254>
 800ab82:	900c      	str	r0, [sp, #48]	; 0x30
 800ab84:	9205      	str	r2, [sp, #20]
 800ab86:	001a      	movs	r2, r3
 800ab88:	3a30      	subs	r2, #48	; 0x30
 800ab8a:	2a09      	cmp	r2, #9
 800ab8c:	d912      	bls.n	800abb4 <_strtod_l+0x210>
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4694      	mov	ip, r2
 800ab92:	e7c3      	b.n	800ab1c <_strtod_l+0x178>
 800ab94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab96:	3001      	adds	r0, #1
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b30      	cmp	r3, #48	; 0x30
 800aba0:	d0f8      	beq.n	800ab94 <_strtod_l+0x1f0>
 800aba2:	001a      	movs	r2, r3
 800aba4:	3a31      	subs	r2, #49	; 0x31
 800aba6:	2a08      	cmp	r2, #8
 800aba8:	d83c      	bhi.n	800ac24 <_strtod_l+0x280>
 800abaa:	900c      	str	r0, [sp, #48]	; 0x30
 800abac:	2000      	movs	r0, #0
 800abae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800abb0:	9005      	str	r0, [sp, #20]
 800abb2:	9210      	str	r2, [sp, #64]	; 0x40
 800abb4:	001a      	movs	r2, r3
 800abb6:	1c41      	adds	r1, r0, #1
 800abb8:	3a30      	subs	r2, #48	; 0x30
 800abba:	2b30      	cmp	r3, #48	; 0x30
 800abbc:	d016      	beq.n	800abec <_strtod_l+0x248>
 800abbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abc0:	185b      	adds	r3, r3, r1
 800abc2:	930c      	str	r3, [sp, #48]	; 0x30
 800abc4:	9b05      	ldr	r3, [sp, #20]
 800abc6:	210a      	movs	r1, #10
 800abc8:	469c      	mov	ip, r3
 800abca:	4484      	add	ip, r0
 800abcc:	4563      	cmp	r3, ip
 800abce:	d115      	bne.n	800abfc <_strtod_l+0x258>
 800abd0:	9905      	ldr	r1, [sp, #20]
 800abd2:	9b05      	ldr	r3, [sp, #20]
 800abd4:	3101      	adds	r1, #1
 800abd6:	1809      	adds	r1, r1, r0
 800abd8:	181b      	adds	r3, r3, r0
 800abda:	9105      	str	r1, [sp, #20]
 800abdc:	2b08      	cmp	r3, #8
 800abde:	dc19      	bgt.n	800ac14 <_strtod_l+0x270>
 800abe0:	230a      	movs	r3, #10
 800abe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800abe4:	434b      	muls	r3, r1
 800abe6:	2100      	movs	r1, #0
 800abe8:	18d3      	adds	r3, r2, r3
 800abea:	930d      	str	r3, [sp, #52]	; 0x34
 800abec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abee:	0008      	movs	r0, r1
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	921b      	str	r2, [sp, #108]	; 0x6c
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	e7c6      	b.n	800ab86 <_strtod_l+0x1e2>
 800abf8:	9808      	ldr	r0, [sp, #32]
 800abfa:	e7d0      	b.n	800ab9e <_strtod_l+0x1fa>
 800abfc:	1c5c      	adds	r4, r3, #1
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	dc04      	bgt.n	800ac0c <_strtod_l+0x268>
 800ac02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac04:	434b      	muls	r3, r1
 800ac06:	930d      	str	r3, [sp, #52]	; 0x34
 800ac08:	0023      	movs	r3, r4
 800ac0a:	e7df      	b.n	800abcc <_strtod_l+0x228>
 800ac0c:	2c10      	cmp	r4, #16
 800ac0e:	dcfb      	bgt.n	800ac08 <_strtod_l+0x264>
 800ac10:	434d      	muls	r5, r1
 800ac12:	e7f9      	b.n	800ac08 <_strtod_l+0x264>
 800ac14:	9b05      	ldr	r3, [sp, #20]
 800ac16:	2100      	movs	r1, #0
 800ac18:	2b10      	cmp	r3, #16
 800ac1a:	dce7      	bgt.n	800abec <_strtod_l+0x248>
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	435d      	muls	r5, r3
 800ac20:	1955      	adds	r5, r2, r5
 800ac22:	e7e3      	b.n	800abec <_strtod_l+0x248>
 800ac24:	2200      	movs	r2, #0
 800ac26:	920c      	str	r2, [sp, #48]	; 0x30
 800ac28:	9205      	str	r2, [sp, #20]
 800ac2a:	3201      	adds	r2, #1
 800ac2c:	e7b0      	b.n	800ab90 <_strtod_l+0x1ec>
 800ac2e:	2400      	movs	r4, #0
 800ac30:	9b07      	ldr	r3, [sp, #28]
 800ac32:	3302      	adds	r3, #2
 800ac34:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	789b      	ldrb	r3, [r3, #2]
 800ac3a:	001a      	movs	r2, r3
 800ac3c:	3a30      	subs	r2, #48	; 0x30
 800ac3e:	2a09      	cmp	r2, #9
 800ac40:	d914      	bls.n	800ac6c <_strtod_l+0x2c8>
 800ac42:	9a07      	ldr	r2, [sp, #28]
 800ac44:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac46:	2200      	movs	r2, #0
 800ac48:	e033      	b.n	800acb2 <_strtod_l+0x30e>
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	08014158 	.word	0x08014158
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	ffefffff 	.word	0xffefffff
 800ac58:	00000433 	.word	0x00000433
 800ac5c:	7fffffff 	.word	0x7fffffff
 800ac60:	08014154 	.word	0x08014154
 800ac64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b30      	cmp	r3, #48	; 0x30
 800ac6e:	d0f9      	beq.n	800ac64 <_strtod_l+0x2c0>
 800ac70:	2200      	movs	r2, #0
 800ac72:	9206      	str	r2, [sp, #24]
 800ac74:	001a      	movs	r2, r3
 800ac76:	3a31      	subs	r2, #49	; 0x31
 800ac78:	2a08      	cmp	r2, #8
 800ac7a:	d81b      	bhi.n	800acb4 <_strtod_l+0x310>
 800ac7c:	3b30      	subs	r3, #48	; 0x30
 800ac7e:	930e      	str	r3, [sp, #56]	; 0x38
 800ac80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac82:	9306      	str	r3, [sp, #24]
 800ac84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac86:	1c59      	adds	r1, r3, #1
 800ac88:	911b      	str	r1, [sp, #108]	; 0x6c
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	001a      	movs	r2, r3
 800ac8e:	3a30      	subs	r2, #48	; 0x30
 800ac90:	2a09      	cmp	r2, #9
 800ac92:	d93a      	bls.n	800ad0a <_strtod_l+0x366>
 800ac94:	9a06      	ldr	r2, [sp, #24]
 800ac96:	1a8a      	subs	r2, r1, r2
 800ac98:	49b2      	ldr	r1, [pc, #712]	; (800af64 <_strtod_l+0x5c0>)
 800ac9a:	9106      	str	r1, [sp, #24]
 800ac9c:	2a08      	cmp	r2, #8
 800ac9e:	dc04      	bgt.n	800acaa <_strtod_l+0x306>
 800aca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aca2:	9206      	str	r2, [sp, #24]
 800aca4:	428a      	cmp	r2, r1
 800aca6:	dd00      	ble.n	800acaa <_strtod_l+0x306>
 800aca8:	9106      	str	r1, [sp, #24]
 800acaa:	2c00      	cmp	r4, #0
 800acac:	d002      	beq.n	800acb4 <_strtod_l+0x310>
 800acae:	9a06      	ldr	r2, [sp, #24]
 800acb0:	4252      	negs	r2, r2
 800acb2:	9206      	str	r2, [sp, #24]
 800acb4:	9a05      	ldr	r2, [sp, #20]
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	d14d      	bne.n	800ad56 <_strtod_l+0x3b2>
 800acba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acbc:	4310      	orrs	r0, r2
 800acbe:	d000      	beq.n	800acc2 <_strtod_l+0x31e>
 800acc0:	e6ab      	b.n	800aa1a <_strtod_l+0x76>
 800acc2:	4662      	mov	r2, ip
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	d000      	beq.n	800acca <_strtod_l+0x326>
 800acc8:	e6c5      	b.n	800aa56 <_strtod_l+0xb2>
 800acca:	2b69      	cmp	r3, #105	; 0x69
 800accc:	d027      	beq.n	800ad1e <_strtod_l+0x37a>
 800acce:	dc23      	bgt.n	800ad18 <_strtod_l+0x374>
 800acd0:	2b49      	cmp	r3, #73	; 0x49
 800acd2:	d024      	beq.n	800ad1e <_strtod_l+0x37a>
 800acd4:	2b4e      	cmp	r3, #78	; 0x4e
 800acd6:	d000      	beq.n	800acda <_strtod_l+0x336>
 800acd8:	e6bd      	b.n	800aa56 <_strtod_l+0xb2>
 800acda:	49a3      	ldr	r1, [pc, #652]	; (800af68 <_strtod_l+0x5c4>)
 800acdc:	a81b      	add	r0, sp, #108	; 0x6c
 800acde:	f001 fb57 	bl	800c390 <__match>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d100      	bne.n	800ace8 <_strtod_l+0x344>
 800ace6:	e6b6      	b.n	800aa56 <_strtod_l+0xb2>
 800ace8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b28      	cmp	r3, #40	; 0x28
 800acee:	d12c      	bne.n	800ad4a <_strtod_l+0x3a6>
 800acf0:	499e      	ldr	r1, [pc, #632]	; (800af6c <_strtod_l+0x5c8>)
 800acf2:	aa1e      	add	r2, sp, #120	; 0x78
 800acf4:	a81b      	add	r0, sp, #108	; 0x6c
 800acf6:	f001 fb5f 	bl	800c3b8 <__hexnan>
 800acfa:	2805      	cmp	r0, #5
 800acfc:	d125      	bne.n	800ad4a <_strtod_l+0x3a6>
 800acfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad00:	4a9b      	ldr	r2, [pc, #620]	; (800af70 <_strtod_l+0x5cc>)
 800ad02:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad04:	431a      	orrs	r2, r3
 800ad06:	0017      	movs	r7, r2
 800ad08:	e687      	b.n	800aa1a <_strtod_l+0x76>
 800ad0a:	220a      	movs	r2, #10
 800ad0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad0e:	434a      	muls	r2, r1
 800ad10:	18d2      	adds	r2, r2, r3
 800ad12:	3a30      	subs	r2, #48	; 0x30
 800ad14:	920e      	str	r2, [sp, #56]	; 0x38
 800ad16:	e7b5      	b.n	800ac84 <_strtod_l+0x2e0>
 800ad18:	2b6e      	cmp	r3, #110	; 0x6e
 800ad1a:	d0de      	beq.n	800acda <_strtod_l+0x336>
 800ad1c:	e69b      	b.n	800aa56 <_strtod_l+0xb2>
 800ad1e:	4995      	ldr	r1, [pc, #596]	; (800af74 <_strtod_l+0x5d0>)
 800ad20:	a81b      	add	r0, sp, #108	; 0x6c
 800ad22:	f001 fb35 	bl	800c390 <__match>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d100      	bne.n	800ad2c <_strtod_l+0x388>
 800ad2a:	e694      	b.n	800aa56 <_strtod_l+0xb2>
 800ad2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad2e:	4992      	ldr	r1, [pc, #584]	; (800af78 <_strtod_l+0x5d4>)
 800ad30:	3b01      	subs	r3, #1
 800ad32:	a81b      	add	r0, sp, #108	; 0x6c
 800ad34:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad36:	f001 fb2b 	bl	800c390 <__match>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d102      	bne.n	800ad44 <_strtod_l+0x3a0>
 800ad3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad40:	3301      	adds	r3, #1
 800ad42:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad44:	2600      	movs	r6, #0
 800ad46:	4f8a      	ldr	r7, [pc, #552]	; (800af70 <_strtod_l+0x5cc>)
 800ad48:	e667      	b.n	800aa1a <_strtod_l+0x76>
 800ad4a:	488c      	ldr	r0, [pc, #560]	; (800af7c <_strtod_l+0x5d8>)
 800ad4c:	f000 ff5c 	bl	800bc08 <nan>
 800ad50:	0006      	movs	r6, r0
 800ad52:	000f      	movs	r7, r1
 800ad54:	e661      	b.n	800aa1a <_strtod_l+0x76>
 800ad56:	9b06      	ldr	r3, [sp, #24]
 800ad58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5e:	9b08      	ldr	r3, [sp, #32]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <_strtod_l+0x3c4>
 800ad64:	9b05      	ldr	r3, [sp, #20]
 800ad66:	9308      	str	r3, [sp, #32]
 800ad68:	9c05      	ldr	r4, [sp, #20]
 800ad6a:	2c10      	cmp	r4, #16
 800ad6c:	dd00      	ble.n	800ad70 <_strtod_l+0x3cc>
 800ad6e:	2410      	movs	r4, #16
 800ad70:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad72:	f7f7 fb43 	bl	80023fc <__aeabi_ui2d>
 800ad76:	9b05      	ldr	r3, [sp, #20]
 800ad78:	0006      	movs	r6, r0
 800ad7a:	000f      	movs	r7, r1
 800ad7c:	2b09      	cmp	r3, #9
 800ad7e:	dd15      	ble.n	800adac <_strtod_l+0x408>
 800ad80:	0022      	movs	r2, r4
 800ad82:	4b7f      	ldr	r3, [pc, #508]	; (800af80 <_strtod_l+0x5dc>)
 800ad84:	3a09      	subs	r2, #9
 800ad86:	00d2      	lsls	r2, r2, #3
 800ad88:	189b      	adds	r3, r3, r2
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f7f6 fc6d 	bl	800166c <__aeabi_dmul>
 800ad92:	0006      	movs	r6, r0
 800ad94:	0028      	movs	r0, r5
 800ad96:	000f      	movs	r7, r1
 800ad98:	f7f7 fb30 	bl	80023fc <__aeabi_ui2d>
 800ad9c:	0002      	movs	r2, r0
 800ad9e:	000b      	movs	r3, r1
 800ada0:	0030      	movs	r0, r6
 800ada2:	0039      	movs	r1, r7
 800ada4:	f7f5 fd08 	bl	80007b8 <__aeabi_dadd>
 800ada8:	0006      	movs	r6, r0
 800adaa:	000f      	movs	r7, r1
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	2b0f      	cmp	r3, #15
 800adb0:	dc39      	bgt.n	800ae26 <_strtod_l+0x482>
 800adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d100      	bne.n	800adba <_strtod_l+0x416>
 800adb8:	e62f      	b.n	800aa1a <_strtod_l+0x76>
 800adba:	dd24      	ble.n	800ae06 <_strtod_l+0x462>
 800adbc:	2b16      	cmp	r3, #22
 800adbe:	dc09      	bgt.n	800add4 <_strtod_l+0x430>
 800adc0:	496f      	ldr	r1, [pc, #444]	; (800af80 <_strtod_l+0x5dc>)
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	18c9      	adds	r1, r1, r3
 800adc6:	0032      	movs	r2, r6
 800adc8:	6808      	ldr	r0, [r1, #0]
 800adca:	6849      	ldr	r1, [r1, #4]
 800adcc:	003b      	movs	r3, r7
 800adce:	f7f6 fc4d 	bl	800166c <__aeabi_dmul>
 800add2:	e7bd      	b.n	800ad50 <_strtod_l+0x3ac>
 800add4:	2325      	movs	r3, #37	; 0x25
 800add6:	9a05      	ldr	r2, [sp, #20]
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800addc:	4293      	cmp	r3, r2
 800adde:	db22      	blt.n	800ae26 <_strtod_l+0x482>
 800ade0:	240f      	movs	r4, #15
 800ade2:	9b05      	ldr	r3, [sp, #20]
 800ade4:	4d66      	ldr	r5, [pc, #408]	; (800af80 <_strtod_l+0x5dc>)
 800ade6:	1ae4      	subs	r4, r4, r3
 800ade8:	00e1      	lsls	r1, r4, #3
 800adea:	1869      	adds	r1, r5, r1
 800adec:	0032      	movs	r2, r6
 800adee:	6808      	ldr	r0, [r1, #0]
 800adf0:	6849      	ldr	r1, [r1, #4]
 800adf2:	003b      	movs	r3, r7
 800adf4:	f7f6 fc3a 	bl	800166c <__aeabi_dmul>
 800adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfa:	1b1c      	subs	r4, r3, r4
 800adfc:	00e4      	lsls	r4, r4, #3
 800adfe:	192d      	adds	r5, r5, r4
 800ae00:	682a      	ldr	r2, [r5, #0]
 800ae02:	686b      	ldr	r3, [r5, #4]
 800ae04:	e7e3      	b.n	800adce <_strtod_l+0x42a>
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	3316      	adds	r3, #22
 800ae0a:	db0c      	blt.n	800ae26 <_strtod_l+0x482>
 800ae0c:	9906      	ldr	r1, [sp, #24]
 800ae0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae10:	4b5b      	ldr	r3, [pc, #364]	; (800af80 <_strtod_l+0x5dc>)
 800ae12:	1a52      	subs	r2, r2, r1
 800ae14:	00d2      	lsls	r2, r2, #3
 800ae16:	189b      	adds	r3, r3, r2
 800ae18:	0030      	movs	r0, r6
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	0039      	movs	r1, r7
 800ae20:	f7f6 f82a 	bl	8000e78 <__aeabi_ddiv>
 800ae24:	e794      	b.n	800ad50 <_strtod_l+0x3ac>
 800ae26:	9b05      	ldr	r3, [sp, #20]
 800ae28:	1b1c      	subs	r4, r3, r4
 800ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2c:	18e4      	adds	r4, r4, r3
 800ae2e:	2c00      	cmp	r4, #0
 800ae30:	dd72      	ble.n	800af18 <_strtod_l+0x574>
 800ae32:	220f      	movs	r2, #15
 800ae34:	0023      	movs	r3, r4
 800ae36:	4013      	ands	r3, r2
 800ae38:	4214      	tst	r4, r2
 800ae3a:	d00a      	beq.n	800ae52 <_strtod_l+0x4ae>
 800ae3c:	4950      	ldr	r1, [pc, #320]	; (800af80 <_strtod_l+0x5dc>)
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	18c9      	adds	r1, r1, r3
 800ae42:	0032      	movs	r2, r6
 800ae44:	6808      	ldr	r0, [r1, #0]
 800ae46:	6849      	ldr	r1, [r1, #4]
 800ae48:	003b      	movs	r3, r7
 800ae4a:	f7f6 fc0f 	bl	800166c <__aeabi_dmul>
 800ae4e:	0006      	movs	r6, r0
 800ae50:	000f      	movs	r7, r1
 800ae52:	230f      	movs	r3, #15
 800ae54:	439c      	bics	r4, r3
 800ae56:	d04a      	beq.n	800aeee <_strtod_l+0x54a>
 800ae58:	3326      	adds	r3, #38	; 0x26
 800ae5a:	33ff      	adds	r3, #255	; 0xff
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	dd22      	ble.n	800aea6 <_strtod_l+0x502>
 800ae60:	2300      	movs	r3, #0
 800ae62:	9305      	str	r3, [sp, #20]
 800ae64:	9306      	str	r3, [sp, #24]
 800ae66:	930d      	str	r3, [sp, #52]	; 0x34
 800ae68:	9308      	str	r3, [sp, #32]
 800ae6a:	2322      	movs	r3, #34	; 0x22
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	9a04      	ldr	r2, [sp, #16]
 800ae70:	4f3f      	ldr	r7, [pc, #252]	; (800af70 <_strtod_l+0x5cc>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae76:	42b3      	cmp	r3, r6
 800ae78:	d100      	bne.n	800ae7c <_strtod_l+0x4d8>
 800ae7a:	e5ce      	b.n	800aa1a <_strtod_l+0x76>
 800ae7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae7e:	9804      	ldr	r0, [sp, #16]
 800ae80:	f001 fb7c 	bl	800c57c <_Bfree>
 800ae84:	9908      	ldr	r1, [sp, #32]
 800ae86:	9804      	ldr	r0, [sp, #16]
 800ae88:	f001 fb78 	bl	800c57c <_Bfree>
 800ae8c:	9906      	ldr	r1, [sp, #24]
 800ae8e:	9804      	ldr	r0, [sp, #16]
 800ae90:	f001 fb74 	bl	800c57c <_Bfree>
 800ae94:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae96:	9804      	ldr	r0, [sp, #16]
 800ae98:	f001 fb70 	bl	800c57c <_Bfree>
 800ae9c:	9905      	ldr	r1, [sp, #20]
 800ae9e:	9804      	ldr	r0, [sp, #16]
 800aea0:	f001 fb6c 	bl	800c57c <_Bfree>
 800aea4:	e5b9      	b.n	800aa1a <_strtod_l+0x76>
 800aea6:	2300      	movs	r3, #0
 800aea8:	0030      	movs	r0, r6
 800aeaa:	0039      	movs	r1, r7
 800aeac:	4d35      	ldr	r5, [pc, #212]	; (800af84 <_strtod_l+0x5e0>)
 800aeae:	1124      	asrs	r4, r4, #4
 800aeb0:	9307      	str	r3, [sp, #28]
 800aeb2:	2c01      	cmp	r4, #1
 800aeb4:	dc1e      	bgt.n	800aef4 <_strtod_l+0x550>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <_strtod_l+0x51a>
 800aeba:	0006      	movs	r6, r0
 800aebc:	000f      	movs	r7, r1
 800aebe:	4b32      	ldr	r3, [pc, #200]	; (800af88 <_strtod_l+0x5e4>)
 800aec0:	9a07      	ldr	r2, [sp, #28]
 800aec2:	18ff      	adds	r7, r7, r3
 800aec4:	4b2f      	ldr	r3, [pc, #188]	; (800af84 <_strtod_l+0x5e0>)
 800aec6:	00d2      	lsls	r2, r2, #3
 800aec8:	189d      	adds	r5, r3, r2
 800aeca:	6828      	ldr	r0, [r5, #0]
 800aecc:	6869      	ldr	r1, [r5, #4]
 800aece:	0032      	movs	r2, r6
 800aed0:	003b      	movs	r3, r7
 800aed2:	f7f6 fbcb 	bl	800166c <__aeabi_dmul>
 800aed6:	4b26      	ldr	r3, [pc, #152]	; (800af70 <_strtod_l+0x5cc>)
 800aed8:	4a2c      	ldr	r2, [pc, #176]	; (800af8c <_strtod_l+0x5e8>)
 800aeda:	0006      	movs	r6, r0
 800aedc:	400b      	ands	r3, r1
 800aede:	4293      	cmp	r3, r2
 800aee0:	d8be      	bhi.n	800ae60 <_strtod_l+0x4bc>
 800aee2:	4a2b      	ldr	r2, [pc, #172]	; (800af90 <_strtod_l+0x5ec>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d913      	bls.n	800af10 <_strtod_l+0x56c>
 800aee8:	2601      	movs	r6, #1
 800aeea:	4f2a      	ldr	r7, [pc, #168]	; (800af94 <_strtod_l+0x5f0>)
 800aeec:	4276      	negs	r6, r6
 800aeee:	2300      	movs	r3, #0
 800aef0:	9307      	str	r3, [sp, #28]
 800aef2:	e088      	b.n	800b006 <_strtod_l+0x662>
 800aef4:	2201      	movs	r2, #1
 800aef6:	4214      	tst	r4, r2
 800aef8:	d004      	beq.n	800af04 <_strtod_l+0x560>
 800aefa:	682a      	ldr	r2, [r5, #0]
 800aefc:	686b      	ldr	r3, [r5, #4]
 800aefe:	f7f6 fbb5 	bl	800166c <__aeabi_dmul>
 800af02:	2301      	movs	r3, #1
 800af04:	9a07      	ldr	r2, [sp, #28]
 800af06:	1064      	asrs	r4, r4, #1
 800af08:	3201      	adds	r2, #1
 800af0a:	9207      	str	r2, [sp, #28]
 800af0c:	3508      	adds	r5, #8
 800af0e:	e7d0      	b.n	800aeb2 <_strtod_l+0x50e>
 800af10:	23d4      	movs	r3, #212	; 0xd4
 800af12:	049b      	lsls	r3, r3, #18
 800af14:	18cf      	adds	r7, r1, r3
 800af16:	e7ea      	b.n	800aeee <_strtod_l+0x54a>
 800af18:	2c00      	cmp	r4, #0
 800af1a:	d0e8      	beq.n	800aeee <_strtod_l+0x54a>
 800af1c:	4264      	negs	r4, r4
 800af1e:	230f      	movs	r3, #15
 800af20:	0022      	movs	r2, r4
 800af22:	401a      	ands	r2, r3
 800af24:	421c      	tst	r4, r3
 800af26:	d00a      	beq.n	800af3e <_strtod_l+0x59a>
 800af28:	4b15      	ldr	r3, [pc, #84]	; (800af80 <_strtod_l+0x5dc>)
 800af2a:	00d2      	lsls	r2, r2, #3
 800af2c:	189b      	adds	r3, r3, r2
 800af2e:	0030      	movs	r0, r6
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	0039      	movs	r1, r7
 800af36:	f7f5 ff9f 	bl	8000e78 <__aeabi_ddiv>
 800af3a:	0006      	movs	r6, r0
 800af3c:	000f      	movs	r7, r1
 800af3e:	1124      	asrs	r4, r4, #4
 800af40:	d0d5      	beq.n	800aeee <_strtod_l+0x54a>
 800af42:	2c1f      	cmp	r4, #31
 800af44:	dd28      	ble.n	800af98 <_strtod_l+0x5f4>
 800af46:	2300      	movs	r3, #0
 800af48:	9305      	str	r3, [sp, #20]
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	930d      	str	r3, [sp, #52]	; 0x34
 800af4e:	9308      	str	r3, [sp, #32]
 800af50:	2322      	movs	r3, #34	; 0x22
 800af52:	9a04      	ldr	r2, [sp, #16]
 800af54:	2600      	movs	r6, #0
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	2700      	movs	r7, #0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d18d      	bne.n	800ae7c <_strtod_l+0x4d8>
 800af60:	e55b      	b.n	800aa1a <_strtod_l+0x76>
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	00004e1f 	.word	0x00004e1f
 800af68:	08014489 	.word	0x08014489
 800af6c:	0801416c 	.word	0x0801416c
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	08014481 	.word	0x08014481
 800af78:	08014537 	.word	0x08014537
 800af7c:	08014533 	.word	0x08014533
 800af80:	080143a8 	.word	0x080143a8
 800af84:	08014380 	.word	0x08014380
 800af88:	fcb00000 	.word	0xfcb00000
 800af8c:	7ca00000 	.word	0x7ca00000
 800af90:	7c900000 	.word	0x7c900000
 800af94:	7fefffff 	.word	0x7fefffff
 800af98:	2310      	movs	r3, #16
 800af9a:	0022      	movs	r2, r4
 800af9c:	401a      	ands	r2, r3
 800af9e:	9207      	str	r2, [sp, #28]
 800afa0:	421c      	tst	r4, r3
 800afa2:	d001      	beq.n	800afa8 <_strtod_l+0x604>
 800afa4:	335a      	adds	r3, #90	; 0x5a
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	0030      	movs	r0, r6
 800afaa:	0039      	movs	r1, r7
 800afac:	2300      	movs	r3, #0
 800afae:	4dc4      	ldr	r5, [pc, #784]	; (800b2c0 <_strtod_l+0x91c>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	4214      	tst	r4, r2
 800afb4:	d004      	beq.n	800afc0 <_strtod_l+0x61c>
 800afb6:	682a      	ldr	r2, [r5, #0]
 800afb8:	686b      	ldr	r3, [r5, #4]
 800afba:	f7f6 fb57 	bl	800166c <__aeabi_dmul>
 800afbe:	2301      	movs	r3, #1
 800afc0:	1064      	asrs	r4, r4, #1
 800afc2:	3508      	adds	r5, #8
 800afc4:	2c00      	cmp	r4, #0
 800afc6:	d1f3      	bne.n	800afb0 <_strtod_l+0x60c>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <_strtod_l+0x62c>
 800afcc:	0006      	movs	r6, r0
 800afce:	000f      	movs	r7, r1
 800afd0:	9b07      	ldr	r3, [sp, #28]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00f      	beq.n	800aff6 <_strtod_l+0x652>
 800afd6:	236b      	movs	r3, #107	; 0x6b
 800afd8:	007a      	lsls	r2, r7, #1
 800afda:	0d52      	lsrs	r2, r2, #21
 800afdc:	0039      	movs	r1, r7
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dd08      	ble.n	800aff6 <_strtod_l+0x652>
 800afe4:	2b1f      	cmp	r3, #31
 800afe6:	dc00      	bgt.n	800afea <_strtod_l+0x646>
 800afe8:	e121      	b.n	800b22e <_strtod_l+0x88a>
 800afea:	2600      	movs	r6, #0
 800afec:	2b34      	cmp	r3, #52	; 0x34
 800afee:	dc00      	bgt.n	800aff2 <_strtod_l+0x64e>
 800aff0:	e116      	b.n	800b220 <_strtod_l+0x87c>
 800aff2:	27dc      	movs	r7, #220	; 0xdc
 800aff4:	04bf      	lsls	r7, r7, #18
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	0030      	movs	r0, r6
 800affc:	0039      	movs	r1, r7
 800affe:	f7f5 fa23 	bl	8000448 <__aeabi_dcmpeq>
 800b002:	2800      	cmp	r0, #0
 800b004:	d19f      	bne.n	800af46 <_strtod_l+0x5a2>
 800b006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b008:	9a08      	ldr	r2, [sp, #32]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b00e:	9b05      	ldr	r3, [sp, #20]
 800b010:	9804      	ldr	r0, [sp, #16]
 800b012:	f001 fb01 	bl	800c618 <__s2b>
 800b016:	900d      	str	r0, [sp, #52]	; 0x34
 800b018:	2800      	cmp	r0, #0
 800b01a:	d100      	bne.n	800b01e <_strtod_l+0x67a>
 800b01c:	e720      	b.n	800ae60 <_strtod_l+0x4bc>
 800b01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b020:	9906      	ldr	r1, [sp, #24]
 800b022:	17da      	asrs	r2, r3, #31
 800b024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b026:	1a5b      	subs	r3, r3, r1
 800b028:	401a      	ands	r2, r3
 800b02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02c:	9215      	str	r2, [sp, #84]	; 0x54
 800b02e:	43db      	mvns	r3, r3
 800b030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b032:	17db      	asrs	r3, r3, #31
 800b034:	401a      	ands	r2, r3
 800b036:	2300      	movs	r3, #0
 800b038:	9218      	str	r2, [sp, #96]	; 0x60
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	9306      	str	r3, [sp, #24]
 800b03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b040:	9804      	ldr	r0, [sp, #16]
 800b042:	6859      	ldr	r1, [r3, #4]
 800b044:	f001 fa72 	bl	800c52c <_Balloc>
 800b048:	9008      	str	r0, [sp, #32]
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d100      	bne.n	800b050 <_strtod_l+0x6ac>
 800b04e:	e70c      	b.n	800ae6a <_strtod_l+0x4c6>
 800b050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b052:	300c      	adds	r0, #12
 800b054:	0019      	movs	r1, r3
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	310c      	adds	r1, #12
 800b05a:	3202      	adds	r2, #2
 800b05c:	0092      	lsls	r2, r2, #2
 800b05e:	f000 fdca 	bl	800bbf6 <memcpy>
 800b062:	ab1e      	add	r3, sp, #120	; 0x78
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	ab1d      	add	r3, sp, #116	; 0x74
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	0032      	movs	r2, r6
 800b06c:	003b      	movs	r3, r7
 800b06e:	9804      	ldr	r0, [sp, #16]
 800b070:	9610      	str	r6, [sp, #64]	; 0x40
 800b072:	9711      	str	r7, [sp, #68]	; 0x44
 800b074:	f001 fdf8 	bl	800cc68 <__d2b>
 800b078:	901c      	str	r0, [sp, #112]	; 0x70
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d100      	bne.n	800b080 <_strtod_l+0x6dc>
 800b07e:	e6f4      	b.n	800ae6a <_strtod_l+0x4c6>
 800b080:	2101      	movs	r1, #1
 800b082:	9804      	ldr	r0, [sp, #16]
 800b084:	f001 fb5c 	bl	800c740 <__i2b>
 800b088:	9006      	str	r0, [sp, #24]
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d100      	bne.n	800b090 <_strtod_l+0x6ec>
 800b08e:	e6ec      	b.n	800ae6a <_strtod_l+0x4c6>
 800b090:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b092:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b094:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b096:	1ad4      	subs	r4, r2, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db01      	blt.n	800b0a0 <_strtod_l+0x6fc>
 800b09c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b09e:	195d      	adds	r5, r3, r5
 800b0a0:	9907      	ldr	r1, [sp, #28]
 800b0a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0a4:	1a5b      	subs	r3, r3, r1
 800b0a6:	2136      	movs	r1, #54	; 0x36
 800b0a8:	189b      	adds	r3, r3, r2
 800b0aa:	1a8a      	subs	r2, r1, r2
 800b0ac:	4985      	ldr	r1, [pc, #532]	; (800b2c4 <_strtod_l+0x920>)
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	468c      	mov	ip, r1
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	9114      	str	r1, [sp, #80]	; 0x50
 800b0b8:	9012      	str	r0, [sp, #72]	; 0x48
 800b0ba:	4563      	cmp	r3, ip
 800b0bc:	da07      	bge.n	800b0ce <_strtod_l+0x72a>
 800b0be:	4661      	mov	r1, ip
 800b0c0:	1ac9      	subs	r1, r1, r3
 800b0c2:	1a52      	subs	r2, r2, r1
 800b0c4:	291f      	cmp	r1, #31
 800b0c6:	dd00      	ble.n	800b0ca <_strtod_l+0x726>
 800b0c8:	e0b6      	b.n	800b238 <_strtod_l+0x894>
 800b0ca:	4088      	lsls	r0, r1
 800b0cc:	9012      	str	r0, [sp, #72]	; 0x48
 800b0ce:	18ab      	adds	r3, r5, r2
 800b0d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0d2:	18a4      	adds	r4, r4, r2
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0d8:	191c      	adds	r4, r3, r4
 800b0da:	002b      	movs	r3, r5
 800b0dc:	4295      	cmp	r5, r2
 800b0de:	dd00      	ble.n	800b0e2 <_strtod_l+0x73e>
 800b0e0:	0013      	movs	r3, r2
 800b0e2:	42a3      	cmp	r3, r4
 800b0e4:	dd00      	ble.n	800b0e8 <_strtod_l+0x744>
 800b0e6:	0023      	movs	r3, r4
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dd04      	ble.n	800b0f6 <_strtod_l+0x752>
 800b0ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ee:	1ae4      	subs	r4, r4, r3
 800b0f0:	1ad2      	subs	r2, r2, r3
 800b0f2:	920c      	str	r2, [sp, #48]	; 0x30
 800b0f4:	1aed      	subs	r5, r5, r3
 800b0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dd17      	ble.n	800b12c <_strtod_l+0x788>
 800b0fc:	001a      	movs	r2, r3
 800b0fe:	9906      	ldr	r1, [sp, #24]
 800b100:	9804      	ldr	r0, [sp, #16]
 800b102:	f001 fbe5 	bl	800c8d0 <__pow5mult>
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	2800      	cmp	r0, #0
 800b10a:	d100      	bne.n	800b10e <_strtod_l+0x76a>
 800b10c:	e6ad      	b.n	800ae6a <_strtod_l+0x4c6>
 800b10e:	0001      	movs	r1, r0
 800b110:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b112:	9804      	ldr	r0, [sp, #16]
 800b114:	f001 fb2c 	bl	800c770 <__multiply>
 800b118:	900e      	str	r0, [sp, #56]	; 0x38
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d100      	bne.n	800b120 <_strtod_l+0x77c>
 800b11e:	e6a4      	b.n	800ae6a <_strtod_l+0x4c6>
 800b120:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b122:	9804      	ldr	r0, [sp, #16]
 800b124:	f001 fa2a 	bl	800c57c <_Bfree>
 800b128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b12a:	931c      	str	r3, [sp, #112]	; 0x70
 800b12c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dd00      	ble.n	800b134 <_strtod_l+0x790>
 800b132:	e087      	b.n	800b244 <_strtod_l+0x8a0>
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd08      	ble.n	800b14c <_strtod_l+0x7a8>
 800b13a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b13c:	9908      	ldr	r1, [sp, #32]
 800b13e:	9804      	ldr	r0, [sp, #16]
 800b140:	f001 fbc6 	bl	800c8d0 <__pow5mult>
 800b144:	9008      	str	r0, [sp, #32]
 800b146:	2800      	cmp	r0, #0
 800b148:	d100      	bne.n	800b14c <_strtod_l+0x7a8>
 800b14a:	e68e      	b.n	800ae6a <_strtod_l+0x4c6>
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	dd08      	ble.n	800b162 <_strtod_l+0x7be>
 800b150:	0022      	movs	r2, r4
 800b152:	9908      	ldr	r1, [sp, #32]
 800b154:	9804      	ldr	r0, [sp, #16]
 800b156:	f001 fbfd 	bl	800c954 <__lshift>
 800b15a:	9008      	str	r0, [sp, #32]
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d100      	bne.n	800b162 <_strtod_l+0x7be>
 800b160:	e683      	b.n	800ae6a <_strtod_l+0x4c6>
 800b162:	2d00      	cmp	r5, #0
 800b164:	dd08      	ble.n	800b178 <_strtod_l+0x7d4>
 800b166:	002a      	movs	r2, r5
 800b168:	9906      	ldr	r1, [sp, #24]
 800b16a:	9804      	ldr	r0, [sp, #16]
 800b16c:	f001 fbf2 	bl	800c954 <__lshift>
 800b170:	9006      	str	r0, [sp, #24]
 800b172:	2800      	cmp	r0, #0
 800b174:	d100      	bne.n	800b178 <_strtod_l+0x7d4>
 800b176:	e678      	b.n	800ae6a <_strtod_l+0x4c6>
 800b178:	9a08      	ldr	r2, [sp, #32]
 800b17a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b17c:	9804      	ldr	r0, [sp, #16]
 800b17e:	f001 fc73 	bl	800ca68 <__mdiff>
 800b182:	9005      	str	r0, [sp, #20]
 800b184:	2800      	cmp	r0, #0
 800b186:	d100      	bne.n	800b18a <_strtod_l+0x7e6>
 800b188:	e66f      	b.n	800ae6a <_strtod_l+0x4c6>
 800b18a:	2200      	movs	r2, #0
 800b18c:	68c3      	ldr	r3, [r0, #12]
 800b18e:	9906      	ldr	r1, [sp, #24]
 800b190:	60c2      	str	r2, [r0, #12]
 800b192:	930c      	str	r3, [sp, #48]	; 0x30
 800b194:	f001 fc4c 	bl	800ca30 <__mcmp>
 800b198:	2800      	cmp	r0, #0
 800b19a:	da5d      	bge.n	800b258 <_strtod_l+0x8b4>
 800b19c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19e:	4333      	orrs	r3, r6
 800b1a0:	d000      	beq.n	800b1a4 <_strtod_l+0x800>
 800b1a2:	e088      	b.n	800b2b6 <_strtod_l+0x912>
 800b1a4:	033b      	lsls	r3, r7, #12
 800b1a6:	d000      	beq.n	800b1aa <_strtod_l+0x806>
 800b1a8:	e085      	b.n	800b2b6 <_strtod_l+0x912>
 800b1aa:	22d6      	movs	r2, #214	; 0xd6
 800b1ac:	4b46      	ldr	r3, [pc, #280]	; (800b2c8 <_strtod_l+0x924>)
 800b1ae:	04d2      	lsls	r2, r2, #19
 800b1b0:	403b      	ands	r3, r7
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d97f      	bls.n	800b2b6 <_strtod_l+0x912>
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <_strtod_l+0x822>
 800b1be:	9b05      	ldr	r3, [sp, #20]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	dd77      	ble.n	800b2b6 <_strtod_l+0x912>
 800b1c6:	9905      	ldr	r1, [sp, #20]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	9804      	ldr	r0, [sp, #16]
 800b1cc:	f001 fbc2 	bl	800c954 <__lshift>
 800b1d0:	9906      	ldr	r1, [sp, #24]
 800b1d2:	9005      	str	r0, [sp, #20]
 800b1d4:	f001 fc2c 	bl	800ca30 <__mcmp>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	dd6c      	ble.n	800b2b6 <_strtod_l+0x912>
 800b1dc:	9907      	ldr	r1, [sp, #28]
 800b1de:	003b      	movs	r3, r7
 800b1e0:	4a39      	ldr	r2, [pc, #228]	; (800b2c8 <_strtod_l+0x924>)
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	d100      	bne.n	800b1e8 <_strtod_l+0x844>
 800b1e6:	e094      	b.n	800b312 <_strtod_l+0x96e>
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	20d6      	movs	r0, #214	; 0xd6
 800b1ec:	4039      	ands	r1, r7
 800b1ee:	04c0      	lsls	r0, r0, #19
 800b1f0:	4281      	cmp	r1, r0
 800b1f2:	dd00      	ble.n	800b1f6 <_strtod_l+0x852>
 800b1f4:	e08d      	b.n	800b312 <_strtod_l+0x96e>
 800b1f6:	23dc      	movs	r3, #220	; 0xdc
 800b1f8:	049b      	lsls	r3, r3, #18
 800b1fa:	4299      	cmp	r1, r3
 800b1fc:	dc00      	bgt.n	800b200 <_strtod_l+0x85c>
 800b1fe:	e6a7      	b.n	800af50 <_strtod_l+0x5ac>
 800b200:	0030      	movs	r0, r6
 800b202:	0039      	movs	r1, r7
 800b204:	4b31      	ldr	r3, [pc, #196]	; (800b2cc <_strtod_l+0x928>)
 800b206:	2200      	movs	r2, #0
 800b208:	f7f6 fa30 	bl	800166c <__aeabi_dmul>
 800b20c:	4b2e      	ldr	r3, [pc, #184]	; (800b2c8 <_strtod_l+0x924>)
 800b20e:	0006      	movs	r6, r0
 800b210:	000f      	movs	r7, r1
 800b212:	420b      	tst	r3, r1
 800b214:	d000      	beq.n	800b218 <_strtod_l+0x874>
 800b216:	e631      	b.n	800ae7c <_strtod_l+0x4d8>
 800b218:	2322      	movs	r3, #34	; 0x22
 800b21a:	9a04      	ldr	r2, [sp, #16]
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	e62d      	b.n	800ae7c <_strtod_l+0x4d8>
 800b220:	234b      	movs	r3, #75	; 0x4b
 800b222:	1a9a      	subs	r2, r3, r2
 800b224:	3b4c      	subs	r3, #76	; 0x4c
 800b226:	4093      	lsls	r3, r2
 800b228:	4019      	ands	r1, r3
 800b22a:	000f      	movs	r7, r1
 800b22c:	e6e3      	b.n	800aff6 <_strtod_l+0x652>
 800b22e:	2201      	movs	r2, #1
 800b230:	4252      	negs	r2, r2
 800b232:	409a      	lsls	r2, r3
 800b234:	4016      	ands	r6, r2
 800b236:	e6de      	b.n	800aff6 <_strtod_l+0x652>
 800b238:	4925      	ldr	r1, [pc, #148]	; (800b2d0 <_strtod_l+0x92c>)
 800b23a:	1acb      	subs	r3, r1, r3
 800b23c:	0001      	movs	r1, r0
 800b23e:	4099      	lsls	r1, r3
 800b240:	9114      	str	r1, [sp, #80]	; 0x50
 800b242:	e743      	b.n	800b0cc <_strtod_l+0x728>
 800b244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b246:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b248:	9804      	ldr	r0, [sp, #16]
 800b24a:	f001 fb83 	bl	800c954 <__lshift>
 800b24e:	901c      	str	r0, [sp, #112]	; 0x70
 800b250:	2800      	cmp	r0, #0
 800b252:	d000      	beq.n	800b256 <_strtod_l+0x8b2>
 800b254:	e76e      	b.n	800b134 <_strtod_l+0x790>
 800b256:	e608      	b.n	800ae6a <_strtod_l+0x4c6>
 800b258:	970e      	str	r7, [sp, #56]	; 0x38
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d177      	bne.n	800b34e <_strtod_l+0x9aa>
 800b25e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b260:	033b      	lsls	r3, r7, #12
 800b262:	0b1b      	lsrs	r3, r3, #12
 800b264:	2a00      	cmp	r2, #0
 800b266:	d039      	beq.n	800b2dc <_strtod_l+0x938>
 800b268:	4a1a      	ldr	r2, [pc, #104]	; (800b2d4 <_strtod_l+0x930>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d139      	bne.n	800b2e2 <_strtod_l+0x93e>
 800b26e:	2101      	movs	r1, #1
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	4249      	negs	r1, r1
 800b274:	0032      	movs	r2, r6
 800b276:	0008      	movs	r0, r1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <_strtod_l+0x8f0>
 800b27c:	24d4      	movs	r4, #212	; 0xd4
 800b27e:	4b12      	ldr	r3, [pc, #72]	; (800b2c8 <_strtod_l+0x924>)
 800b280:	0008      	movs	r0, r1
 800b282:	403b      	ands	r3, r7
 800b284:	04e4      	lsls	r4, r4, #19
 800b286:	42a3      	cmp	r3, r4
 800b288:	d804      	bhi.n	800b294 <_strtod_l+0x8f0>
 800b28a:	306c      	adds	r0, #108	; 0x6c
 800b28c:	0d1b      	lsrs	r3, r3, #20
 800b28e:	1ac3      	subs	r3, r0, r3
 800b290:	4099      	lsls	r1, r3
 800b292:	0008      	movs	r0, r1
 800b294:	4282      	cmp	r2, r0
 800b296:	d124      	bne.n	800b2e2 <_strtod_l+0x93e>
 800b298:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <_strtod_l+0x934>)
 800b29a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b29c:	4299      	cmp	r1, r3
 800b29e:	d102      	bne.n	800b2a6 <_strtod_l+0x902>
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	d100      	bne.n	800b2a6 <_strtod_l+0x902>
 800b2a4:	e5e1      	b.n	800ae6a <_strtod_l+0x4c6>
 800b2a6:	4b08      	ldr	r3, [pc, #32]	; (800b2c8 <_strtod_l+0x924>)
 800b2a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	401a      	ands	r2, r3
 800b2ae:	0013      	movs	r3, r2
 800b2b0:	2280      	movs	r2, #128	; 0x80
 800b2b2:	0352      	lsls	r2, r2, #13
 800b2b4:	189f      	adds	r7, r3, r2
 800b2b6:	9b07      	ldr	r3, [sp, #28]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1a1      	bne.n	800b200 <_strtod_l+0x85c>
 800b2bc:	e5de      	b.n	800ae7c <_strtod_l+0x4d8>
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	08014180 	.word	0x08014180
 800b2c4:	fffffc02 	.word	0xfffffc02
 800b2c8:	7ff00000 	.word	0x7ff00000
 800b2cc:	39500000 	.word	0x39500000
 800b2d0:	fffffbe2 	.word	0xfffffbe2
 800b2d4:	000fffff 	.word	0x000fffff
 800b2d8:	7fefffff 	.word	0x7fefffff
 800b2dc:	4333      	orrs	r3, r6
 800b2de:	d100      	bne.n	800b2e2 <_strtod_l+0x93e>
 800b2e0:	e77c      	b.n	800b1dc <_strtod_l+0x838>
 800b2e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01d      	beq.n	800b324 <_strtod_l+0x980>
 800b2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ec:	4213      	tst	r3, r2
 800b2ee:	d0e2      	beq.n	800b2b6 <_strtod_l+0x912>
 800b2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2f2:	0030      	movs	r0, r6
 800b2f4:	0039      	movs	r1, r7
 800b2f6:	9a07      	ldr	r2, [sp, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d017      	beq.n	800b32c <_strtod_l+0x988>
 800b2fc:	f7ff fb3a 	bl	800a974 <sulp>
 800b300:	0002      	movs	r2, r0
 800b302:	000b      	movs	r3, r1
 800b304:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b306:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b308:	f7f5 fa56 	bl	80007b8 <__aeabi_dadd>
 800b30c:	0006      	movs	r6, r0
 800b30e:	000f      	movs	r7, r1
 800b310:	e7d1      	b.n	800b2b6 <_strtod_l+0x912>
 800b312:	2601      	movs	r6, #1
 800b314:	4013      	ands	r3, r2
 800b316:	4a98      	ldr	r2, [pc, #608]	; (800b578 <_strtod_l+0xbd4>)
 800b318:	4276      	negs	r6, r6
 800b31a:	189b      	adds	r3, r3, r2
 800b31c:	4a97      	ldr	r2, [pc, #604]	; (800b57c <_strtod_l+0xbd8>)
 800b31e:	431a      	orrs	r2, r3
 800b320:	0017      	movs	r7, r2
 800b322:	e7c8      	b.n	800b2b6 <_strtod_l+0x912>
 800b324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b326:	4233      	tst	r3, r6
 800b328:	d0c5      	beq.n	800b2b6 <_strtod_l+0x912>
 800b32a:	e7e1      	b.n	800b2f0 <_strtod_l+0x94c>
 800b32c:	f7ff fb22 	bl	800a974 <sulp>
 800b330:	0002      	movs	r2, r0
 800b332:	000b      	movs	r3, r1
 800b334:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b336:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b338:	f7f6 fc5a 	bl	8001bf0 <__aeabi_dsub>
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	0006      	movs	r6, r0
 800b342:	000f      	movs	r7, r1
 800b344:	f7f5 f880 	bl	8000448 <__aeabi_dcmpeq>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0b4      	beq.n	800b2b6 <_strtod_l+0x912>
 800b34c:	e600      	b.n	800af50 <_strtod_l+0x5ac>
 800b34e:	9906      	ldr	r1, [sp, #24]
 800b350:	9805      	ldr	r0, [sp, #20]
 800b352:	f001 fce9 	bl	800cd28 <__ratio>
 800b356:	2380      	movs	r3, #128	; 0x80
 800b358:	2200      	movs	r2, #0
 800b35a:	05db      	lsls	r3, r3, #23
 800b35c:	0004      	movs	r4, r0
 800b35e:	000d      	movs	r5, r1
 800b360:	f7f5 f882 	bl	8000468 <__aeabi_dcmple>
 800b364:	2800      	cmp	r0, #0
 800b366:	d06d      	beq.n	800b444 <_strtod_l+0xaa0>
 800b368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d000      	beq.n	800b370 <_strtod_l+0x9cc>
 800b36e:	e07e      	b.n	800b46e <_strtod_l+0xaca>
 800b370:	2e00      	cmp	r6, #0
 800b372:	d158      	bne.n	800b426 <_strtod_l+0xa82>
 800b374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b376:	031b      	lsls	r3, r3, #12
 800b378:	d000      	beq.n	800b37c <_strtod_l+0x9d8>
 800b37a:	e07f      	b.n	800b47c <_strtod_l+0xad8>
 800b37c:	2200      	movs	r2, #0
 800b37e:	0020      	movs	r0, r4
 800b380:	0029      	movs	r1, r5
 800b382:	4b7f      	ldr	r3, [pc, #508]	; (800b580 <_strtod_l+0xbdc>)
 800b384:	f7f5 f866 	bl	8000454 <__aeabi_dcmplt>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d158      	bne.n	800b43e <_strtod_l+0xa9a>
 800b38c:	0020      	movs	r0, r4
 800b38e:	0029      	movs	r1, r5
 800b390:	2200      	movs	r2, #0
 800b392:	4b7c      	ldr	r3, [pc, #496]	; (800b584 <_strtod_l+0xbe0>)
 800b394:	f7f6 f96a 	bl	800166c <__aeabi_dmul>
 800b398:	0004      	movs	r4, r0
 800b39a:	000d      	movs	r5, r1
 800b39c:	2380      	movs	r3, #128	; 0x80
 800b39e:	061b      	lsls	r3, r3, #24
 800b3a0:	940a      	str	r4, [sp, #40]	; 0x28
 800b3a2:	18eb      	adds	r3, r5, r3
 800b3a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3aa:	9212      	str	r2, [sp, #72]	; 0x48
 800b3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3ae:	4a76      	ldr	r2, [pc, #472]	; (800b588 <_strtod_l+0xbe4>)
 800b3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	9314      	str	r3, [sp, #80]	; 0x50
 800b3b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3b8:	4b74      	ldr	r3, [pc, #464]	; (800b58c <_strtod_l+0xbe8>)
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d000      	beq.n	800b3c0 <_strtod_l+0xa1c>
 800b3be:	e091      	b.n	800b4e4 <_strtod_l+0xb40>
 800b3c0:	4a73      	ldr	r2, [pc, #460]	; (800b590 <_strtod_l+0xbec>)
 800b3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c4:	4694      	mov	ip, r2
 800b3c6:	4463      	add	r3, ip
 800b3c8:	001f      	movs	r7, r3
 800b3ca:	0030      	movs	r0, r6
 800b3cc:	0019      	movs	r1, r3
 800b3ce:	f001 fbe3 	bl	800cb98 <__ulp>
 800b3d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d6:	f7f6 f949 	bl	800166c <__aeabi_dmul>
 800b3da:	0032      	movs	r2, r6
 800b3dc:	003b      	movs	r3, r7
 800b3de:	f7f5 f9eb 	bl	80007b8 <__aeabi_dadd>
 800b3e2:	4a69      	ldr	r2, [pc, #420]	; (800b588 <_strtod_l+0xbe4>)
 800b3e4:	4b6b      	ldr	r3, [pc, #428]	; (800b594 <_strtod_l+0xbf0>)
 800b3e6:	0006      	movs	r6, r0
 800b3e8:	400a      	ands	r2, r1
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d949      	bls.n	800b482 <_strtod_l+0xade>
 800b3ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3f0:	4b69      	ldr	r3, [pc, #420]	; (800b598 <_strtod_l+0xbf4>)
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d103      	bne.n	800b3fe <_strtod_l+0xa5a>
 800b3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	d100      	bne.n	800b3fe <_strtod_l+0xa5a>
 800b3fc:	e535      	b.n	800ae6a <_strtod_l+0x4c6>
 800b3fe:	2601      	movs	r6, #1
 800b400:	4f65      	ldr	r7, [pc, #404]	; (800b598 <_strtod_l+0xbf4>)
 800b402:	4276      	negs	r6, r6
 800b404:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b406:	9804      	ldr	r0, [sp, #16]
 800b408:	f001 f8b8 	bl	800c57c <_Bfree>
 800b40c:	9908      	ldr	r1, [sp, #32]
 800b40e:	9804      	ldr	r0, [sp, #16]
 800b410:	f001 f8b4 	bl	800c57c <_Bfree>
 800b414:	9906      	ldr	r1, [sp, #24]
 800b416:	9804      	ldr	r0, [sp, #16]
 800b418:	f001 f8b0 	bl	800c57c <_Bfree>
 800b41c:	9905      	ldr	r1, [sp, #20]
 800b41e:	9804      	ldr	r0, [sp, #16]
 800b420:	f001 f8ac 	bl	800c57c <_Bfree>
 800b424:	e60b      	b.n	800b03e <_strtod_l+0x69a>
 800b426:	2e01      	cmp	r6, #1
 800b428:	d103      	bne.n	800b432 <_strtod_l+0xa8e>
 800b42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d100      	bne.n	800b432 <_strtod_l+0xa8e>
 800b430:	e58e      	b.n	800af50 <_strtod_l+0x5ac>
 800b432:	2300      	movs	r3, #0
 800b434:	4c59      	ldr	r4, [pc, #356]	; (800b59c <_strtod_l+0xbf8>)
 800b436:	930a      	str	r3, [sp, #40]	; 0x28
 800b438:	940b      	str	r4, [sp, #44]	; 0x2c
 800b43a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b43c:	e01c      	b.n	800b478 <_strtod_l+0xad4>
 800b43e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b440:	4d50      	ldr	r5, [pc, #320]	; (800b584 <_strtod_l+0xbe0>)
 800b442:	e7ab      	b.n	800b39c <_strtod_l+0x9f8>
 800b444:	2200      	movs	r2, #0
 800b446:	0020      	movs	r0, r4
 800b448:	0029      	movs	r1, r5
 800b44a:	4b4e      	ldr	r3, [pc, #312]	; (800b584 <_strtod_l+0xbe0>)
 800b44c:	f7f6 f90e 	bl	800166c <__aeabi_dmul>
 800b450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b452:	0004      	movs	r4, r0
 800b454:	000b      	movs	r3, r1
 800b456:	000d      	movs	r5, r1
 800b458:	2a00      	cmp	r2, #0
 800b45a:	d104      	bne.n	800b466 <_strtod_l+0xac2>
 800b45c:	2280      	movs	r2, #128	; 0x80
 800b45e:	0612      	lsls	r2, r2, #24
 800b460:	900a      	str	r0, [sp, #40]	; 0x28
 800b462:	188b      	adds	r3, r1, r2
 800b464:	e79e      	b.n	800b3a4 <_strtod_l+0xa00>
 800b466:	0002      	movs	r2, r0
 800b468:	920a      	str	r2, [sp, #40]	; 0x28
 800b46a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b46c:	e79b      	b.n	800b3a6 <_strtod_l+0xa02>
 800b46e:	2300      	movs	r3, #0
 800b470:	4c43      	ldr	r4, [pc, #268]	; (800b580 <_strtod_l+0xbdc>)
 800b472:	930a      	str	r3, [sp, #40]	; 0x28
 800b474:	940b      	str	r4, [sp, #44]	; 0x2c
 800b476:	2400      	movs	r4, #0
 800b478:	4d41      	ldr	r5, [pc, #260]	; (800b580 <_strtod_l+0xbdc>)
 800b47a:	e794      	b.n	800b3a6 <_strtod_l+0xa02>
 800b47c:	2300      	movs	r3, #0
 800b47e:	4c47      	ldr	r4, [pc, #284]	; (800b59c <_strtod_l+0xbf8>)
 800b480:	e7f7      	b.n	800b472 <_strtod_l+0xace>
 800b482:	23d4      	movs	r3, #212	; 0xd4
 800b484:	049b      	lsls	r3, r3, #18
 800b486:	18cf      	adds	r7, r1, r3
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	970e      	str	r7, [sp, #56]	; 0x38
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1b9      	bne.n	800b404 <_strtod_l+0xa60>
 800b490:	4b3d      	ldr	r3, [pc, #244]	; (800b588 <_strtod_l+0xbe4>)
 800b492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b494:	403b      	ands	r3, r7
 800b496:	429a      	cmp	r2, r3
 800b498:	d1b4      	bne.n	800b404 <_strtod_l+0xa60>
 800b49a:	0020      	movs	r0, r4
 800b49c:	0029      	movs	r1, r5
 800b49e:	f7f5 f86d 	bl	800057c <__aeabi_d2lz>
 800b4a2:	f7f5 f8a7 	bl	80005f4 <__aeabi_l2d>
 800b4a6:	0002      	movs	r2, r0
 800b4a8:	000b      	movs	r3, r1
 800b4aa:	0020      	movs	r0, r4
 800b4ac:	0029      	movs	r1, r5
 800b4ae:	f7f6 fb9f 	bl	8001bf0 <__aeabi_dsub>
 800b4b2:	033b      	lsls	r3, r7, #12
 800b4b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4b6:	0b1b      	lsrs	r3, r3, #12
 800b4b8:	4333      	orrs	r3, r6
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	0004      	movs	r4, r0
 800b4be:	000d      	movs	r5, r1
 800b4c0:	4a37      	ldr	r2, [pc, #220]	; (800b5a0 <_strtod_l+0xbfc>)
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d054      	beq.n	800b570 <_strtod_l+0xbcc>
 800b4c6:	4b37      	ldr	r3, [pc, #220]	; (800b5a4 <_strtod_l+0xc00>)
 800b4c8:	f7f4 ffc4 	bl	8000454 <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d000      	beq.n	800b4d2 <_strtod_l+0xb2e>
 800b4d0:	e4d4      	b.n	800ae7c <_strtod_l+0x4d8>
 800b4d2:	0020      	movs	r0, r4
 800b4d4:	0029      	movs	r1, r5
 800b4d6:	4a34      	ldr	r2, [pc, #208]	; (800b5a8 <_strtod_l+0xc04>)
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <_strtod_l+0xbe0>)
 800b4da:	f7f4 ffcf 	bl	800047c <__aeabi_dcmpgt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d090      	beq.n	800b404 <_strtod_l+0xa60>
 800b4e2:	e4cb      	b.n	800ae7c <_strtod_l+0x4d8>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d02b      	beq.n	800b542 <_strtod_l+0xb9e>
 800b4ea:	23d4      	movs	r3, #212	; 0xd4
 800b4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ee:	04db      	lsls	r3, r3, #19
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d826      	bhi.n	800b542 <_strtod_l+0xb9e>
 800b4f4:	0020      	movs	r0, r4
 800b4f6:	0029      	movs	r1, r5
 800b4f8:	4a2c      	ldr	r2, [pc, #176]	; (800b5ac <_strtod_l+0xc08>)
 800b4fa:	4b2d      	ldr	r3, [pc, #180]	; (800b5b0 <_strtod_l+0xc0c>)
 800b4fc:	f7f4 ffb4 	bl	8000468 <__aeabi_dcmple>
 800b500:	2800      	cmp	r0, #0
 800b502:	d017      	beq.n	800b534 <_strtod_l+0xb90>
 800b504:	0020      	movs	r0, r4
 800b506:	0029      	movs	r1, r5
 800b508:	f7f5 f81a 	bl	8000540 <__aeabi_d2uiz>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d100      	bne.n	800b512 <_strtod_l+0xb6e>
 800b510:	3001      	adds	r0, #1
 800b512:	f7f6 ff73 	bl	80023fc <__aeabi_ui2d>
 800b516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b518:	0004      	movs	r4, r0
 800b51a:	000b      	movs	r3, r1
 800b51c:	000d      	movs	r5, r1
 800b51e:	2a00      	cmp	r2, #0
 800b520:	d122      	bne.n	800b568 <_strtod_l+0xbc4>
 800b522:	2280      	movs	r2, #128	; 0x80
 800b524:	0612      	lsls	r2, r2, #24
 800b526:	188b      	adds	r3, r1, r2
 800b528:	9016      	str	r0, [sp, #88]	; 0x58
 800b52a:	9317      	str	r3, [sp, #92]	; 0x5c
 800b52c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b52e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b530:	9212      	str	r2, [sp, #72]	; 0x48
 800b532:	9313      	str	r3, [sp, #76]	; 0x4c
 800b534:	22d6      	movs	r2, #214	; 0xd6
 800b536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b538:	04d2      	lsls	r2, r2, #19
 800b53a:	189b      	adds	r3, r3, r2
 800b53c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b53e:	1a9b      	subs	r3, r3, r2
 800b540:	9313      	str	r3, [sp, #76]	; 0x4c
 800b542:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b544:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b546:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b548:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b54a:	f001 fb25 	bl	800cb98 <__ulp>
 800b54e:	0002      	movs	r2, r0
 800b550:	000b      	movs	r3, r1
 800b552:	0030      	movs	r0, r6
 800b554:	0039      	movs	r1, r7
 800b556:	f7f6 f889 	bl	800166c <__aeabi_dmul>
 800b55a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b55c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b55e:	f7f5 f92b 	bl	80007b8 <__aeabi_dadd>
 800b562:	0006      	movs	r6, r0
 800b564:	000f      	movs	r7, r1
 800b566:	e78f      	b.n	800b488 <_strtod_l+0xae4>
 800b568:	0002      	movs	r2, r0
 800b56a:	9216      	str	r2, [sp, #88]	; 0x58
 800b56c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b56e:	e7dd      	b.n	800b52c <_strtod_l+0xb88>
 800b570:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <_strtod_l+0xc10>)
 800b572:	f7f4 ff6f 	bl	8000454 <__aeabi_dcmplt>
 800b576:	e7b2      	b.n	800b4de <_strtod_l+0xb3a>
 800b578:	fff00000 	.word	0xfff00000
 800b57c:	000fffff 	.word	0x000fffff
 800b580:	3ff00000 	.word	0x3ff00000
 800b584:	3fe00000 	.word	0x3fe00000
 800b588:	7ff00000 	.word	0x7ff00000
 800b58c:	7fe00000 	.word	0x7fe00000
 800b590:	fcb00000 	.word	0xfcb00000
 800b594:	7c9fffff 	.word	0x7c9fffff
 800b598:	7fefffff 	.word	0x7fefffff
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	94a03595 	.word	0x94a03595
 800b5a4:	3fdfffff 	.word	0x3fdfffff
 800b5a8:	35afe535 	.word	0x35afe535
 800b5ac:	ffc00000 	.word	0xffc00000
 800b5b0:	41dfffff 	.word	0x41dfffff
 800b5b4:	3fcfffff 	.word	0x3fcfffff

0800b5b8 <_strtod_r>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <_strtod_r+0xc>)
 800b5bc:	f7ff f9f2 	bl	800a9a4 <_strtod_l>
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	46c0      	nop			; (mov r8, r8)
 800b5c4:	20000444 	.word	0x20000444

0800b5c8 <strtod>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	4c04      	ldr	r4, [pc, #16]	; (800b5dc <strtod+0x14>)
 800b5cc:	000a      	movs	r2, r1
 800b5ce:	0001      	movs	r1, r0
 800b5d0:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <strtod+0x18>)
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	f7ff f9e6 	bl	800a9a4 <_strtod_l>
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	200006d0 	.word	0x200006d0
 800b5e0:	20000444 	.word	0x20000444

0800b5e4 <_strtol_l.constprop.0>:
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	001e      	movs	r6, r3
 800b5ea:	9005      	str	r0, [sp, #20]
 800b5ec:	9101      	str	r1, [sp, #4]
 800b5ee:	9202      	str	r2, [sp, #8]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d048      	beq.n	800b686 <_strtol_l.constprop.0+0xa2>
 800b5f4:	000b      	movs	r3, r1
 800b5f6:	2e24      	cmp	r6, #36	; 0x24
 800b5f8:	d845      	bhi.n	800b686 <_strtol_l.constprop.0+0xa2>
 800b5fa:	4a3b      	ldr	r2, [pc, #236]	; (800b6e8 <_strtol_l.constprop.0+0x104>)
 800b5fc:	2108      	movs	r1, #8
 800b5fe:	4694      	mov	ip, r2
 800b600:	001a      	movs	r2, r3
 800b602:	4660      	mov	r0, ip
 800b604:	7814      	ldrb	r4, [r2, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	5d00      	ldrb	r0, [r0, r4]
 800b60a:	001d      	movs	r5, r3
 800b60c:	0007      	movs	r7, r0
 800b60e:	400f      	ands	r7, r1
 800b610:	4208      	tst	r0, r1
 800b612:	d1f5      	bne.n	800b600 <_strtol_l.constprop.0+0x1c>
 800b614:	2c2d      	cmp	r4, #45	; 0x2d
 800b616:	d13d      	bne.n	800b694 <_strtol_l.constprop.0+0xb0>
 800b618:	2701      	movs	r7, #1
 800b61a:	781c      	ldrb	r4, [r3, #0]
 800b61c:	1c95      	adds	r5, r2, #2
 800b61e:	2e00      	cmp	r6, #0
 800b620:	d05e      	beq.n	800b6e0 <_strtol_l.constprop.0+0xfc>
 800b622:	2e10      	cmp	r6, #16
 800b624:	d109      	bne.n	800b63a <_strtol_l.constprop.0+0x56>
 800b626:	2c30      	cmp	r4, #48	; 0x30
 800b628:	d107      	bne.n	800b63a <_strtol_l.constprop.0+0x56>
 800b62a:	2220      	movs	r2, #32
 800b62c:	782b      	ldrb	r3, [r5, #0]
 800b62e:	4393      	bics	r3, r2
 800b630:	2b58      	cmp	r3, #88	; 0x58
 800b632:	d150      	bne.n	800b6d6 <_strtol_l.constprop.0+0xf2>
 800b634:	2610      	movs	r6, #16
 800b636:	786c      	ldrb	r4, [r5, #1]
 800b638:	3502      	adds	r5, #2
 800b63a:	4b2c      	ldr	r3, [pc, #176]	; (800b6ec <_strtol_l.constprop.0+0x108>)
 800b63c:	0031      	movs	r1, r6
 800b63e:	18fb      	adds	r3, r7, r3
 800b640:	0018      	movs	r0, r3
 800b642:	9303      	str	r3, [sp, #12]
 800b644:	f7f4 fe00 	bl	8000248 <__aeabi_uidivmod>
 800b648:	2200      	movs	r2, #0
 800b64a:	9104      	str	r1, [sp, #16]
 800b64c:	2101      	movs	r1, #1
 800b64e:	4684      	mov	ip, r0
 800b650:	0010      	movs	r0, r2
 800b652:	4249      	negs	r1, r1
 800b654:	0023      	movs	r3, r4
 800b656:	3b30      	subs	r3, #48	; 0x30
 800b658:	2b09      	cmp	r3, #9
 800b65a:	d903      	bls.n	800b664 <_strtol_l.constprop.0+0x80>
 800b65c:	3b11      	subs	r3, #17
 800b65e:	2b19      	cmp	r3, #25
 800b660:	d81d      	bhi.n	800b69e <_strtol_l.constprop.0+0xba>
 800b662:	330a      	adds	r3, #10
 800b664:	429e      	cmp	r6, r3
 800b666:	dd1e      	ble.n	800b6a6 <_strtol_l.constprop.0+0xc2>
 800b668:	1c54      	adds	r4, r2, #1
 800b66a:	d009      	beq.n	800b680 <_strtol_l.constprop.0+0x9c>
 800b66c:	000a      	movs	r2, r1
 800b66e:	4584      	cmp	ip, r0
 800b670:	d306      	bcc.n	800b680 <_strtol_l.constprop.0+0x9c>
 800b672:	d102      	bne.n	800b67a <_strtol_l.constprop.0+0x96>
 800b674:	9c04      	ldr	r4, [sp, #16]
 800b676:	429c      	cmp	r4, r3
 800b678:	db02      	blt.n	800b680 <_strtol_l.constprop.0+0x9c>
 800b67a:	2201      	movs	r2, #1
 800b67c:	4370      	muls	r0, r6
 800b67e:	1818      	adds	r0, r3, r0
 800b680:	782c      	ldrb	r4, [r5, #0]
 800b682:	3501      	adds	r5, #1
 800b684:	e7e6      	b.n	800b654 <_strtol_l.constprop.0+0x70>
 800b686:	f000 fa7d 	bl	800bb84 <__errno>
 800b68a:	2316      	movs	r3, #22
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	2000      	movs	r0, #0
 800b690:	b007      	add	sp, #28
 800b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b694:	2c2b      	cmp	r4, #43	; 0x2b
 800b696:	d1c2      	bne.n	800b61e <_strtol_l.constprop.0+0x3a>
 800b698:	781c      	ldrb	r4, [r3, #0]
 800b69a:	1c95      	adds	r5, r2, #2
 800b69c:	e7bf      	b.n	800b61e <_strtol_l.constprop.0+0x3a>
 800b69e:	0023      	movs	r3, r4
 800b6a0:	3b61      	subs	r3, #97	; 0x61
 800b6a2:	2b19      	cmp	r3, #25
 800b6a4:	d9dd      	bls.n	800b662 <_strtol_l.constprop.0+0x7e>
 800b6a6:	1c53      	adds	r3, r2, #1
 800b6a8:	d109      	bne.n	800b6be <_strtol_l.constprop.0+0xda>
 800b6aa:	2322      	movs	r3, #34	; 0x22
 800b6ac:	9a05      	ldr	r2, [sp, #20]
 800b6ae:	9803      	ldr	r0, [sp, #12]
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	9b02      	ldr	r3, [sp, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0eb      	beq.n	800b690 <_strtol_l.constprop.0+0xac>
 800b6b8:	1e6b      	subs	r3, r5, #1
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	e007      	b.n	800b6ce <_strtol_l.constprop.0+0xea>
 800b6be:	2f00      	cmp	r7, #0
 800b6c0:	d000      	beq.n	800b6c4 <_strtol_l.constprop.0+0xe0>
 800b6c2:	4240      	negs	r0, r0
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0e2      	beq.n	800b690 <_strtol_l.constprop.0+0xac>
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	d1f4      	bne.n	800b6b8 <_strtol_l.constprop.0+0xd4>
 800b6ce:	9b02      	ldr	r3, [sp, #8]
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e7dc      	b.n	800b690 <_strtol_l.constprop.0+0xac>
 800b6d6:	2430      	movs	r4, #48	; 0x30
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	d1ae      	bne.n	800b63a <_strtol_l.constprop.0+0x56>
 800b6dc:	3608      	adds	r6, #8
 800b6de:	e7ac      	b.n	800b63a <_strtol_l.constprop.0+0x56>
 800b6e0:	2c30      	cmp	r4, #48	; 0x30
 800b6e2:	d0a2      	beq.n	800b62a <_strtol_l.constprop.0+0x46>
 800b6e4:	260a      	movs	r6, #10
 800b6e6:	e7a8      	b.n	800b63a <_strtol_l.constprop.0+0x56>
 800b6e8:	080141a9 	.word	0x080141a9
 800b6ec:	7fffffff 	.word	0x7fffffff

0800b6f0 <_strtol_r>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	f7ff ff77 	bl	800b5e4 <_strtol_l.constprop.0>
 800b6f6:	bd10      	pop	{r4, pc}

0800b6f8 <strtol>:
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	4c04      	ldr	r4, [pc, #16]	; (800b70c <strtol+0x14>)
 800b6fc:	0013      	movs	r3, r2
 800b6fe:	000a      	movs	r2, r1
 800b700:	0001      	movs	r1, r0
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	f7ff ff6e 	bl	800b5e4 <_strtol_l.constprop.0>
 800b708:	bd10      	pop	{r4, pc}
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	200006d0 	.word	0x200006d0

0800b710 <std>:
 800b710:	2300      	movs	r3, #0
 800b712:	b510      	push	{r4, lr}
 800b714:	0004      	movs	r4, r0
 800b716:	6003      	str	r3, [r0, #0]
 800b718:	6043      	str	r3, [r0, #4]
 800b71a:	6083      	str	r3, [r0, #8]
 800b71c:	8181      	strh	r1, [r0, #12]
 800b71e:	6643      	str	r3, [r0, #100]	; 0x64
 800b720:	81c2      	strh	r2, [r0, #14]
 800b722:	6103      	str	r3, [r0, #16]
 800b724:	6143      	str	r3, [r0, #20]
 800b726:	6183      	str	r3, [r0, #24]
 800b728:	0019      	movs	r1, r3
 800b72a:	2208      	movs	r2, #8
 800b72c:	305c      	adds	r0, #92	; 0x5c
 800b72e:	f000 f97d 	bl	800ba2c <memset>
 800b732:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <std+0x50>)
 800b734:	61e4      	str	r4, [r4, #28]
 800b736:	6223      	str	r3, [r4, #32]
 800b738:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <std+0x54>)
 800b73a:	6263      	str	r3, [r4, #36]	; 0x24
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <std+0x58>)
 800b73e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <std+0x5c>)
 800b742:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b744:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <std+0x60>)
 800b746:	429c      	cmp	r4, r3
 800b748:	d005      	beq.n	800b756 <std+0x46>
 800b74a:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <std+0x64>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d002      	beq.n	800b756 <std+0x46>
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <std+0x68>)
 800b752:	429c      	cmp	r4, r3
 800b754:	d103      	bne.n	800b75e <std+0x4e>
 800b756:	0020      	movs	r0, r4
 800b758:	3058      	adds	r0, #88	; 0x58
 800b75a:	f000 fa3d 	bl	800bbd8 <__retarget_lock_init_recursive>
 800b75e:	bd10      	pop	{r4, pc}
 800b760:	0800b991 	.word	0x0800b991
 800b764:	0800b9bd 	.word	0x0800b9bd
 800b768:	0800b9f5 	.word	0x0800b9f5
 800b76c:	0800ba21 	.word	0x0800ba21
 800b770:	20000c38 	.word	0x20000c38
 800b774:	20000ca0 	.word	0x20000ca0
 800b778:	20000d08 	.word	0x20000d08

0800b77c <stdio_exit_handler>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4a03      	ldr	r2, [pc, #12]	; (800b78c <stdio_exit_handler+0x10>)
 800b780:	4903      	ldr	r1, [pc, #12]	; (800b790 <stdio_exit_handler+0x14>)
 800b782:	4804      	ldr	r0, [pc, #16]	; (800b794 <stdio_exit_handler+0x18>)
 800b784:	f000 f86c 	bl	800b860 <_fwalk_sglue>
 800b788:	bd10      	pop	{r4, pc}
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	20000438 	.word	0x20000438
 800b790:	0800f6d9 	.word	0x0800f6d9
 800b794:	200005b0 	.word	0x200005b0

0800b798 <cleanup_stdio>:
 800b798:	6841      	ldr	r1, [r0, #4]
 800b79a:	4b0b      	ldr	r3, [pc, #44]	; (800b7c8 <cleanup_stdio+0x30>)
 800b79c:	b510      	push	{r4, lr}
 800b79e:	0004      	movs	r4, r0
 800b7a0:	4299      	cmp	r1, r3
 800b7a2:	d001      	beq.n	800b7a8 <cleanup_stdio+0x10>
 800b7a4:	f003 ff98 	bl	800f6d8 <_fclose_r>
 800b7a8:	68a1      	ldr	r1, [r4, #8]
 800b7aa:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <cleanup_stdio+0x34>)
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d002      	beq.n	800b7b6 <cleanup_stdio+0x1e>
 800b7b0:	0020      	movs	r0, r4
 800b7b2:	f003 ff91 	bl	800f6d8 <_fclose_r>
 800b7b6:	68e1      	ldr	r1, [r4, #12]
 800b7b8:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <cleanup_stdio+0x38>)
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d002      	beq.n	800b7c4 <cleanup_stdio+0x2c>
 800b7be:	0020      	movs	r0, r4
 800b7c0:	f003 ff8a 	bl	800f6d8 <_fclose_r>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	20000c38 	.word	0x20000c38
 800b7cc:	20000ca0 	.word	0x20000ca0
 800b7d0:	20000d08 	.word	0x20000d08

0800b7d4 <global_stdio_init.part.0>:
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <global_stdio_init.part.0+0x28>)
 800b7d8:	4a09      	ldr	r2, [pc, #36]	; (800b800 <global_stdio_init.part.0+0x2c>)
 800b7da:	2104      	movs	r1, #4
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	4809      	ldr	r0, [pc, #36]	; (800b804 <global_stdio_init.part.0+0x30>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7ff ff95 	bl	800b710 <std>
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	2109      	movs	r1, #9
 800b7ea:	4807      	ldr	r0, [pc, #28]	; (800b808 <global_stdio_init.part.0+0x34>)
 800b7ec:	f7ff ff90 	bl	800b710 <std>
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	2112      	movs	r1, #18
 800b7f4:	4805      	ldr	r0, [pc, #20]	; (800b80c <global_stdio_init.part.0+0x38>)
 800b7f6:	f7ff ff8b 	bl	800b710 <std>
 800b7fa:	bd10      	pop	{r4, pc}
 800b7fc:	20000d70 	.word	0x20000d70
 800b800:	0800b77d 	.word	0x0800b77d
 800b804:	20000c38 	.word	0x20000c38
 800b808:	20000ca0 	.word	0x20000ca0
 800b80c:	20000d08 	.word	0x20000d08

0800b810 <__sfp_lock_acquire>:
 800b810:	b510      	push	{r4, lr}
 800b812:	4802      	ldr	r0, [pc, #8]	; (800b81c <__sfp_lock_acquire+0xc>)
 800b814:	f000 f9e2 	bl	800bbdc <__retarget_lock_acquire_recursive>
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	46c0      	nop			; (mov r8, r8)
 800b81c:	20000d7a 	.word	0x20000d7a

0800b820 <__sfp_lock_release>:
 800b820:	b510      	push	{r4, lr}
 800b822:	4802      	ldr	r0, [pc, #8]	; (800b82c <__sfp_lock_release+0xc>)
 800b824:	f000 f9db 	bl	800bbde <__retarget_lock_release_recursive>
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	20000d7a 	.word	0x20000d7a

0800b830 <__sinit>:
 800b830:	b510      	push	{r4, lr}
 800b832:	0004      	movs	r4, r0
 800b834:	f7ff ffec 	bl	800b810 <__sfp_lock_acquire>
 800b838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <__sinit+0x14>
 800b83e:	f7ff ffef 	bl	800b820 <__sfp_lock_release>
 800b842:	bd10      	pop	{r4, pc}
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <__sinit+0x28>)
 800b846:	6363      	str	r3, [r4, #52]	; 0x34
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <__sinit+0x2c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1f6      	bne.n	800b83e <__sinit+0xe>
 800b850:	f7ff ffc0 	bl	800b7d4 <global_stdio_init.part.0>
 800b854:	e7f3      	b.n	800b83e <__sinit+0xe>
 800b856:	46c0      	nop			; (mov r8, r8)
 800b858:	0800b799 	.word	0x0800b799
 800b85c:	20000d70 	.word	0x20000d70

0800b860 <_fwalk_sglue>:
 800b860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b862:	0014      	movs	r4, r2
 800b864:	2600      	movs	r6, #0
 800b866:	9000      	str	r0, [sp, #0]
 800b868:	9101      	str	r1, [sp, #4]
 800b86a:	68a5      	ldr	r5, [r4, #8]
 800b86c:	6867      	ldr	r7, [r4, #4]
 800b86e:	3f01      	subs	r7, #1
 800b870:	d504      	bpl.n	800b87c <_fwalk_sglue+0x1c>
 800b872:	6824      	ldr	r4, [r4, #0]
 800b874:	2c00      	cmp	r4, #0
 800b876:	d1f8      	bne.n	800b86a <_fwalk_sglue+0xa>
 800b878:	0030      	movs	r0, r6
 800b87a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b87c:	89ab      	ldrh	r3, [r5, #12]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d908      	bls.n	800b894 <_fwalk_sglue+0x34>
 800b882:	220e      	movs	r2, #14
 800b884:	5eab      	ldrsh	r3, [r5, r2]
 800b886:	3301      	adds	r3, #1
 800b888:	d004      	beq.n	800b894 <_fwalk_sglue+0x34>
 800b88a:	0029      	movs	r1, r5
 800b88c:	9800      	ldr	r0, [sp, #0]
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	4798      	blx	r3
 800b892:	4306      	orrs	r6, r0
 800b894:	3568      	adds	r5, #104	; 0x68
 800b896:	e7ea      	b.n	800b86e <_fwalk_sglue+0xe>

0800b898 <snprintf>:
 800b898:	b40c      	push	{r2, r3}
 800b89a:	b530      	push	{r4, r5, lr}
 800b89c:	4b17      	ldr	r3, [pc, #92]	; (800b8fc <snprintf+0x64>)
 800b89e:	000c      	movs	r4, r1
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	b09d      	sub	sp, #116	; 0x74
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	da08      	bge.n	800b8ba <snprintf+0x22>
 800b8a8:	238b      	movs	r3, #139	; 0x8b
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	4240      	negs	r0, r0
 800b8b0:	b01d      	add	sp, #116	; 0x74
 800b8b2:	bc30      	pop	{r4, r5}
 800b8b4:	bc08      	pop	{r3}
 800b8b6:	b002      	add	sp, #8
 800b8b8:	4718      	bx	r3
 800b8ba:	2382      	movs	r3, #130	; 0x82
 800b8bc:	466a      	mov	r2, sp
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	8293      	strh	r3, [r2, #20]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9002      	str	r0, [sp, #8]
 800b8c6:	9006      	str	r0, [sp, #24]
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	d000      	beq.n	800b8ce <snprintf+0x36>
 800b8cc:	1e4b      	subs	r3, r1, #1
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	9307      	str	r3, [sp, #28]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	466a      	mov	r2, sp
 800b8d6:	425b      	negs	r3, r3
 800b8d8:	82d3      	strh	r3, [r2, #22]
 800b8da:	0028      	movs	r0, r5
 800b8dc:	ab21      	add	r3, sp, #132	; 0x84
 800b8de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8e0:	a902      	add	r1, sp, #8
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	f001 fa9a 	bl	800ce1c <_svfprintf_r>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	da01      	bge.n	800b8f0 <snprintf+0x58>
 800b8ec:	238b      	movs	r3, #139	; 0x8b
 800b8ee:	602b      	str	r3, [r5, #0]
 800b8f0:	2c00      	cmp	r4, #0
 800b8f2:	d0dd      	beq.n	800b8b0 <snprintf+0x18>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	e7d9      	b.n	800b8b0 <snprintf+0x18>
 800b8fc:	200006d0 	.word	0x200006d0

0800b900 <sprintf>:
 800b900:	b40e      	push	{r1, r2, r3}
 800b902:	b500      	push	{lr}
 800b904:	490b      	ldr	r1, [pc, #44]	; (800b934 <sprintf+0x34>)
 800b906:	b09c      	sub	sp, #112	; 0x70
 800b908:	ab1d      	add	r3, sp, #116	; 0x74
 800b90a:	9002      	str	r0, [sp, #8]
 800b90c:	9006      	str	r0, [sp, #24]
 800b90e:	9107      	str	r1, [sp, #28]
 800b910:	9104      	str	r1, [sp, #16]
 800b912:	4809      	ldr	r0, [pc, #36]	; (800b938 <sprintf+0x38>)
 800b914:	4909      	ldr	r1, [pc, #36]	; (800b93c <sprintf+0x3c>)
 800b916:	cb04      	ldmia	r3!, {r2}
 800b918:	9105      	str	r1, [sp, #20]
 800b91a:	6800      	ldr	r0, [r0, #0]
 800b91c:	a902      	add	r1, sp, #8
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	f001 fa7c 	bl	800ce1c <_svfprintf_r>
 800b924:	2200      	movs	r2, #0
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	b01c      	add	sp, #112	; 0x70
 800b92c:	bc08      	pop	{r3}
 800b92e:	b003      	add	sp, #12
 800b930:	4718      	bx	r3
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	7fffffff 	.word	0x7fffffff
 800b938:	200006d0 	.word	0x200006d0
 800b93c:	ffff0208 	.word	0xffff0208

0800b940 <sscanf>:
 800b940:	b40e      	push	{r1, r2, r3}
 800b942:	b530      	push	{r4, r5, lr}
 800b944:	2381      	movs	r3, #129	; 0x81
 800b946:	b09c      	sub	sp, #112	; 0x70
 800b948:	466a      	mov	r2, sp
 800b94a:	ac1f      	add	r4, sp, #124	; 0x7c
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	cc20      	ldmia	r4!, {r5}
 800b950:	8293      	strh	r3, [r2, #20]
 800b952:	9002      	str	r0, [sp, #8]
 800b954:	9006      	str	r0, [sp, #24]
 800b956:	f7f4 fbd5 	bl	8000104 <strlen>
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <sscanf+0x48>)
 800b95c:	466a      	mov	r2, sp
 800b95e:	930a      	str	r3, [sp, #40]	; 0x28
 800b960:	2300      	movs	r3, #0
 800b962:	9003      	str	r0, [sp, #12]
 800b964:	9007      	str	r0, [sp, #28]
 800b966:	4809      	ldr	r0, [pc, #36]	; (800b98c <sscanf+0x4c>)
 800b968:	930e      	str	r3, [sp, #56]	; 0x38
 800b96a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b96c:	3b01      	subs	r3, #1
 800b96e:	82d3      	strh	r3, [r2, #22]
 800b970:	a902      	add	r1, sp, #8
 800b972:	0023      	movs	r3, r4
 800b974:	002a      	movs	r2, r5
 800b976:	6800      	ldr	r0, [r0, #0]
 800b978:	9401      	str	r4, [sp, #4]
 800b97a:	f002 fc91 	bl	800e2a0 <__ssvfscanf_r>
 800b97e:	b01c      	add	sp, #112	; 0x70
 800b980:	bc30      	pop	{r4, r5}
 800b982:	bc08      	pop	{r3}
 800b984:	b003      	add	sp, #12
 800b986:	4718      	bx	r3
 800b988:	0800b9b9 	.word	0x0800b9b9
 800b98c:	200006d0 	.word	0x200006d0

0800b990 <__sread>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	000c      	movs	r4, r1
 800b994:	250e      	movs	r5, #14
 800b996:	5f49      	ldrsh	r1, [r1, r5]
 800b998:	f000 f8ba 	bl	800bb10 <_read_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	db03      	blt.n	800b9a8 <__sread+0x18>
 800b9a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b9a2:	181b      	adds	r3, r3, r0
 800b9a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	4a02      	ldr	r2, [pc, #8]	; (800b9b4 <__sread+0x24>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	81a3      	strh	r3, [r4, #12]
 800b9b0:	e7f9      	b.n	800b9a6 <__sread+0x16>
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	ffffefff 	.word	0xffffefff

0800b9b8 <__seofread>:
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	4770      	bx	lr

0800b9bc <__swrite>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	001f      	movs	r7, r3
 800b9c0:	898b      	ldrh	r3, [r1, #12]
 800b9c2:	0005      	movs	r5, r0
 800b9c4:	000c      	movs	r4, r1
 800b9c6:	0016      	movs	r6, r2
 800b9c8:	05db      	lsls	r3, r3, #23
 800b9ca:	d505      	bpl.n	800b9d8 <__swrite+0x1c>
 800b9cc:	230e      	movs	r3, #14
 800b9ce:	5ec9      	ldrsh	r1, [r1, r3]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	f000 f888 	bl	800bae8 <_lseek_r>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	4a05      	ldr	r2, [pc, #20]	; (800b9f0 <__swrite+0x34>)
 800b9dc:	0028      	movs	r0, r5
 800b9de:	4013      	ands	r3, r2
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	0032      	movs	r2, r6
 800b9e4:	230e      	movs	r3, #14
 800b9e6:	5ee1      	ldrsh	r1, [r4, r3]
 800b9e8:	003b      	movs	r3, r7
 800b9ea:	f000 f8b7 	bl	800bb5c <_write_r>
 800b9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f0:	ffffefff 	.word	0xffffefff

0800b9f4 <__sseek>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	000c      	movs	r4, r1
 800b9f8:	250e      	movs	r5, #14
 800b9fa:	5f49      	ldrsh	r1, [r1, r5]
 800b9fc:	f000 f874 	bl	800bae8 <_lseek_r>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	1c42      	adds	r2, r0, #1
 800ba04:	d103      	bne.n	800ba0e <__sseek+0x1a>
 800ba06:	4a05      	ldr	r2, [pc, #20]	; (800ba1c <__sseek+0x28>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	2280      	movs	r2, #128	; 0x80
 800ba10:	0152      	lsls	r2, r2, #5
 800ba12:	4313      	orrs	r3, r2
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	6520      	str	r0, [r4, #80]	; 0x50
 800ba18:	e7f8      	b.n	800ba0c <__sseek+0x18>
 800ba1a:	46c0      	nop			; (mov r8, r8)
 800ba1c:	ffffefff 	.word	0xffffefff

0800ba20 <__sclose>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	230e      	movs	r3, #14
 800ba24:	5ec9      	ldrsh	r1, [r1, r3]
 800ba26:	f000 f84d 	bl	800bac4 <_close_r>
 800ba2a:	bd10      	pop	{r4, pc}

0800ba2c <memset>:
 800ba2c:	0003      	movs	r3, r0
 800ba2e:	1882      	adds	r2, r0, r2
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d100      	bne.n	800ba36 <memset+0xa>
 800ba34:	4770      	bx	lr
 800ba36:	7019      	strb	r1, [r3, #0]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	e7f9      	b.n	800ba30 <memset+0x4>

0800ba3c <strncmp>:
 800ba3c:	b530      	push	{r4, r5, lr}
 800ba3e:	0005      	movs	r5, r0
 800ba40:	1e10      	subs	r0, r2, #0
 800ba42:	d00b      	beq.n	800ba5c <strncmp+0x20>
 800ba44:	2400      	movs	r4, #0
 800ba46:	3a01      	subs	r2, #1
 800ba48:	5d2b      	ldrb	r3, [r5, r4]
 800ba4a:	5d08      	ldrb	r0, [r1, r4]
 800ba4c:	4283      	cmp	r3, r0
 800ba4e:	d104      	bne.n	800ba5a <strncmp+0x1e>
 800ba50:	42a2      	cmp	r2, r4
 800ba52:	d002      	beq.n	800ba5a <strncmp+0x1e>
 800ba54:	3401      	adds	r4, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1f6      	bne.n	800ba48 <strncmp+0xc>
 800ba5a:	1a18      	subs	r0, r3, r0
 800ba5c:	bd30      	pop	{r4, r5, pc}

0800ba5e <strncpy>:
 800ba5e:	0003      	movs	r3, r0
 800ba60:	b530      	push	{r4, r5, lr}
 800ba62:	001d      	movs	r5, r3
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	d006      	beq.n	800ba76 <strncpy+0x18>
 800ba68:	780c      	ldrb	r4, [r1, #0]
 800ba6a:	3a01      	subs	r2, #1
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	702c      	strb	r4, [r5, #0]
 800ba70:	3101      	adds	r1, #1
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	d1f5      	bne.n	800ba62 <strncpy+0x4>
 800ba76:	2100      	movs	r1, #0
 800ba78:	189a      	adds	r2, r3, r2
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d100      	bne.n	800ba80 <strncpy+0x22>
 800ba7e:	bd30      	pop	{r4, r5, pc}
 800ba80:	7019      	strb	r1, [r3, #0]
 800ba82:	3301      	adds	r3, #1
 800ba84:	e7f9      	b.n	800ba7a <strncpy+0x1c>

0800ba86 <strstr>:
 800ba86:	780a      	ldrb	r2, [r1, #0]
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	d10c      	bne.n	800baa8 <strstr+0x22>
 800ba8e:	bd30      	pop	{r4, r5, pc}
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d108      	bne.n	800baa6 <strstr+0x20>
 800ba94:	2301      	movs	r3, #1
 800ba96:	5ccc      	ldrb	r4, [r1, r3]
 800ba98:	2c00      	cmp	r4, #0
 800ba9a:	d0f8      	beq.n	800ba8e <strstr+0x8>
 800ba9c:	5cc5      	ldrb	r5, [r0, r3]
 800ba9e:	42a5      	cmp	r5, r4
 800baa0:	d101      	bne.n	800baa6 <strstr+0x20>
 800baa2:	3301      	adds	r3, #1
 800baa4:	e7f7      	b.n	800ba96 <strstr+0x10>
 800baa6:	3001      	adds	r0, #1
 800baa8:	7803      	ldrb	r3, [r0, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1f0      	bne.n	800ba90 <strstr+0xa>
 800baae:	0018      	movs	r0, r3
 800bab0:	e7ed      	b.n	800ba8e <strstr+0x8>
	...

0800bab4 <__locale_mb_cur_max>:
 800bab4:	2294      	movs	r2, #148	; 0x94
 800bab6:	4b02      	ldr	r3, [pc, #8]	; (800bac0 <__locale_mb_cur_max+0xc>)
 800bab8:	0052      	lsls	r2, r2, #1
 800baba:	5c98      	ldrb	r0, [r3, r2]
 800babc:	4770      	bx	lr
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	20000444 	.word	0x20000444

0800bac4 <_close_r>:
 800bac4:	2300      	movs	r3, #0
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <_close_r+0x20>)
 800baca:	0004      	movs	r4, r0
 800bacc:	0008      	movs	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f8 f87f 	bl	8003bd2 <_close>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d103      	bne.n	800bae0 <_close_r+0x1c>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d000      	beq.n	800bae0 <_close_r+0x1c>
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	20000d74 	.word	0x20000d74

0800bae8 <_lseek_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	0004      	movs	r4, r0
 800baec:	0008      	movs	r0, r1
 800baee:	0011      	movs	r1, r2
 800baf0:	001a      	movs	r2, r3
 800baf2:	2300      	movs	r3, #0
 800baf4:	4d05      	ldr	r5, [pc, #20]	; (800bb0c <_lseek_r+0x24>)
 800baf6:	602b      	str	r3, [r5, #0]
 800baf8:	f7f8 f88c 	bl	8003c14 <_lseek>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d103      	bne.n	800bb08 <_lseek_r+0x20>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d000      	beq.n	800bb08 <_lseek_r+0x20>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	20000d74 	.word	0x20000d74

0800bb10 <_read_r>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	0004      	movs	r4, r0
 800bb14:	0008      	movs	r0, r1
 800bb16:	0011      	movs	r1, r2
 800bb18:	001a      	movs	r2, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4d05      	ldr	r5, [pc, #20]	; (800bb34 <_read_r+0x24>)
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f8 f81e 	bl	8003b60 <_read>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d103      	bne.n	800bb30 <_read_r+0x20>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d000      	beq.n	800bb30 <_read_r+0x20>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd70      	pop	{r4, r5, r6, pc}
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	20000d74 	.word	0x20000d74

0800bb38 <_sbrk_r>:
 800bb38:	2300      	movs	r3, #0
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	4d06      	ldr	r5, [pc, #24]	; (800bb58 <_sbrk_r+0x20>)
 800bb3e:	0004      	movs	r4, r0
 800bb40:	0008      	movs	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f7f8 f872 	bl	8003c2c <_sbrk>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d103      	bne.n	800bb54 <_sbrk_r+0x1c>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d000      	beq.n	800bb54 <_sbrk_r+0x1c>
 800bb52:	6023      	str	r3, [r4, #0]
 800bb54:	bd70      	pop	{r4, r5, r6, pc}
 800bb56:	46c0      	nop			; (mov r8, r8)
 800bb58:	20000d74 	.word	0x20000d74

0800bb5c <_write_r>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	0004      	movs	r4, r0
 800bb60:	0008      	movs	r0, r1
 800bb62:	0011      	movs	r1, r2
 800bb64:	001a      	movs	r2, r3
 800bb66:	2300      	movs	r3, #0
 800bb68:	4d05      	ldr	r5, [pc, #20]	; (800bb80 <_write_r+0x24>)
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f8 f815 	bl	8003b9a <_write>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d103      	bne.n	800bb7c <_write_r+0x20>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d000      	beq.n	800bb7c <_write_r+0x20>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	46c0      	nop			; (mov r8, r8)
 800bb80:	20000d74 	.word	0x20000d74

0800bb84 <__errno>:
 800bb84:	4b01      	ldr	r3, [pc, #4]	; (800bb8c <__errno+0x8>)
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	4770      	bx	lr
 800bb8a:	46c0      	nop			; (mov r8, r8)
 800bb8c:	200006d0 	.word	0x200006d0

0800bb90 <__libc_init_array>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	2600      	movs	r6, #0
 800bb94:	4c0c      	ldr	r4, [pc, #48]	; (800bbc8 <__libc_init_array+0x38>)
 800bb96:	4d0d      	ldr	r5, [pc, #52]	; (800bbcc <__libc_init_array+0x3c>)
 800bb98:	1b64      	subs	r4, r4, r5
 800bb9a:	10a4      	asrs	r4, r4, #2
 800bb9c:	42a6      	cmp	r6, r4
 800bb9e:	d109      	bne.n	800bbb4 <__libc_init_array+0x24>
 800bba0:	2600      	movs	r6, #0
 800bba2:	f006 fcc5 	bl	8012530 <_init>
 800bba6:	4c0a      	ldr	r4, [pc, #40]	; (800bbd0 <__libc_init_array+0x40>)
 800bba8:	4d0a      	ldr	r5, [pc, #40]	; (800bbd4 <__libc_init_array+0x44>)
 800bbaa:	1b64      	subs	r4, r4, r5
 800bbac:	10a4      	asrs	r4, r4, #2
 800bbae:	42a6      	cmp	r6, r4
 800bbb0:	d105      	bne.n	800bbbe <__libc_init_array+0x2e>
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	00b3      	lsls	r3, r6, #2
 800bbb6:	58eb      	ldr	r3, [r5, r3]
 800bbb8:	4798      	blx	r3
 800bbba:	3601      	adds	r6, #1
 800bbbc:	e7ee      	b.n	800bb9c <__libc_init_array+0xc>
 800bbbe:	00b3      	lsls	r3, r6, #2
 800bbc0:	58eb      	ldr	r3, [r5, r3]
 800bbc2:	4798      	blx	r3
 800bbc4:	3601      	adds	r6, #1
 800bbc6:	e7f2      	b.n	800bbae <__libc_init_array+0x1e>
 800bbc8:	080145c4 	.word	0x080145c4
 800bbcc:	080145c4 	.word	0x080145c4
 800bbd0:	080145cc 	.word	0x080145cc
 800bbd4:	080145c4 	.word	0x080145c4

0800bbd8 <__retarget_lock_init_recursive>:
 800bbd8:	4770      	bx	lr

0800bbda <__retarget_lock_close_recursive>:
 800bbda:	4770      	bx	lr

0800bbdc <__retarget_lock_acquire_recursive>:
 800bbdc:	4770      	bx	lr

0800bbde <__retarget_lock_release_recursive>:
 800bbde:	4770      	bx	lr

0800bbe0 <sysconf>:
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	b510      	push	{r4, lr}
 800bbe4:	2808      	cmp	r0, #8
 800bbe6:	d004      	beq.n	800bbf2 <sysconf+0x12>
 800bbe8:	f7ff ffcc 	bl	800bb84 <__errno>
 800bbec:	2316      	movs	r3, #22
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	3b17      	subs	r3, #23
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	bd10      	pop	{r4, pc}

0800bbf6 <memcpy>:
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d100      	bne.n	800bc00 <memcpy+0xa>
 800bbfe:	bd10      	pop	{r4, pc}
 800bc00:	5ccc      	ldrb	r4, [r1, r3]
 800bc02:	54c4      	strb	r4, [r0, r3]
 800bc04:	3301      	adds	r3, #1
 800bc06:	e7f8      	b.n	800bbfa <memcpy+0x4>

0800bc08 <nan>:
 800bc08:	2000      	movs	r0, #0
 800bc0a:	4901      	ldr	r1, [pc, #4]	; (800bc10 <nan+0x8>)
 800bc0c:	4770      	bx	lr
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	7ff80000 	.word	0x7ff80000

0800bc14 <nanf>:
 800bc14:	4800      	ldr	r0, [pc, #0]	; (800bc18 <nanf+0x4>)
 800bc16:	4770      	bx	lr
 800bc18:	7fc00000 	.word	0x7fc00000

0800bc1c <register_fini>:
 800bc1c:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <register_fini+0x10>)
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <register_fini+0xe>
 800bc24:	4802      	ldr	r0, [pc, #8]	; (800bc30 <register_fini+0x14>)
 800bc26:	f000 f805 	bl	800bc34 <atexit>
 800bc2a:	bd10      	pop	{r4, pc}
 800bc2c:	00000000 	.word	0x00000000
 800bc30:	0800f991 	.word	0x0800f991

0800bc34 <atexit>:
 800bc34:	2300      	movs	r3, #0
 800bc36:	b510      	push	{r4, lr}
 800bc38:	0001      	movs	r1, r0
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f003 fef9 	bl	800fa34 <__register_exitproc>
 800bc42:	bd10      	pop	{r4, pc}

0800bc44 <_malloc_trim_r>:
 800bc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc46:	0004      	movs	r4, r0
 800bc48:	2008      	movs	r0, #8
 800bc4a:	000d      	movs	r5, r1
 800bc4c:	f7ff ffc8 	bl	800bbe0 <sysconf>
 800bc50:	0006      	movs	r6, r0
 800bc52:	0020      	movs	r0, r4
 800bc54:	f7fe fe7e 	bl	800a954 <__malloc_lock>
 800bc58:	2203      	movs	r2, #3
 800bc5a:	4f21      	ldr	r7, [pc, #132]	; (800bce0 <_malloc_trim_r+0x9c>)
 800bc5c:	0031      	movs	r1, r6
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	4393      	bics	r3, r2
 800bc64:	1b58      	subs	r0, r3, r5
 800bc66:	3811      	subs	r0, #17
 800bc68:	1980      	adds	r0, r0, r6
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	f7f4 fa66 	bl	800013c <__udivsi3>
 800bc70:	1e45      	subs	r5, r0, #1
 800bc72:	4375      	muls	r5, r6
 800bc74:	42ae      	cmp	r6, r5
 800bc76:	dd04      	ble.n	800bc82 <_malloc_trim_r+0x3e>
 800bc78:	0020      	movs	r0, r4
 800bc7a:	f7fe fe73 	bl	800a964 <__malloc_unlock>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc82:	2100      	movs	r1, #0
 800bc84:	0020      	movs	r0, r4
 800bc86:	f7ff ff57 	bl	800bb38 <_sbrk_r>
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	9a01      	ldr	r2, [sp, #4]
 800bc8e:	189b      	adds	r3, r3, r2
 800bc90:	4298      	cmp	r0, r3
 800bc92:	d1f1      	bne.n	800bc78 <_malloc_trim_r+0x34>
 800bc94:	0020      	movs	r0, r4
 800bc96:	4269      	negs	r1, r5
 800bc98:	f7ff ff4e 	bl	800bb38 <_sbrk_r>
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	d110      	bne.n	800bcc2 <_malloc_trim_r+0x7e>
 800bca0:	2100      	movs	r1, #0
 800bca2:	0020      	movs	r0, r4
 800bca4:	f7ff ff48 	bl	800bb38 <_sbrk_r>
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	1a81      	subs	r1, r0, r2
 800bcac:	290f      	cmp	r1, #15
 800bcae:	dde3      	ble.n	800bc78 <_malloc_trim_r+0x34>
 800bcb0:	4d0c      	ldr	r5, [pc, #48]	; (800bce4 <_malloc_trim_r+0xa0>)
 800bcb2:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <_malloc_trim_r+0xa4>)
 800bcb4:	682d      	ldr	r5, [r5, #0]
 800bcb6:	1b40      	subs	r0, r0, r5
 800bcb8:	6018      	str	r0, [r3, #0]
 800bcba:	2301      	movs	r3, #1
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	6053      	str	r3, [r2, #4]
 800bcc0:	e7da      	b.n	800bc78 <_malloc_trim_r+0x34>
 800bcc2:	2601      	movs	r6, #1
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	1b5b      	subs	r3, r3, r5
 800bcca:	4333      	orrs	r3, r6
 800bccc:	6053      	str	r3, [r2, #4]
 800bcce:	4a06      	ldr	r2, [pc, #24]	; (800bce8 <_malloc_trim_r+0xa4>)
 800bcd0:	0020      	movs	r0, r4
 800bcd2:	6813      	ldr	r3, [r2, #0]
 800bcd4:	1b5b      	subs	r3, r3, r5
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	f7fe fe44 	bl	800a964 <__malloc_unlock>
 800bcdc:	0030      	movs	r0, r6
 800bcde:	e7cf      	b.n	800bc80 <_malloc_trim_r+0x3c>
 800bce0:	20000028 	.word	0x20000028
 800bce4:	20000430 	.word	0x20000430
 800bce8:	20000c04 	.word	0x20000c04

0800bcec <_free_r>:
 800bcec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcee:	1e0d      	subs	r5, r1, #0
 800bcf0:	9001      	str	r0, [sp, #4]
 800bcf2:	d02d      	beq.n	800bd50 <_free_r+0x64>
 800bcf4:	f7fe fe2e 	bl	800a954 <__malloc_lock>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	0029      	movs	r1, r5
 800bcfc:	469c      	mov	ip, r3
 800bcfe:	3908      	subs	r1, #8
 800bd00:	684f      	ldr	r7, [r1, #4]
 800bd02:	4662      	mov	r2, ip
 800bd04:	003b      	movs	r3, r7
 800bd06:	4664      	mov	r4, ip
 800bd08:	4393      	bics	r3, r2
 800bd0a:	18c8      	adds	r0, r1, r3
 800bd0c:	6845      	ldr	r5, [r0, #4]
 800bd0e:	3202      	adds	r2, #2
 800bd10:	4395      	bics	r5, r2
 800bd12:	4a4a      	ldr	r2, [pc, #296]	; (800be3c <_free_r+0x150>)
 800bd14:	4027      	ands	r7, r4
 800bd16:	6896      	ldr	r6, [r2, #8]
 800bd18:	4286      	cmp	r6, r0
 800bd1a:	d11a      	bne.n	800bd52 <_free_r+0x66>
 800bd1c:	195b      	adds	r3, r3, r5
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	d106      	bne.n	800bd30 <_free_r+0x44>
 800bd22:	6808      	ldr	r0, [r1, #0]
 800bd24:	1a09      	subs	r1, r1, r0
 800bd26:	688d      	ldr	r5, [r1, #8]
 800bd28:	181b      	adds	r3, r3, r0
 800bd2a:	68c8      	ldr	r0, [r1, #12]
 800bd2c:	60e8      	str	r0, [r5, #12]
 800bd2e:	6085      	str	r5, [r0, #8]
 800bd30:	2001      	movs	r0, #1
 800bd32:	4318      	orrs	r0, r3
 800bd34:	6048      	str	r0, [r1, #4]
 800bd36:	6091      	str	r1, [r2, #8]
 800bd38:	4a41      	ldr	r2, [pc, #260]	; (800be40 <_free_r+0x154>)
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d804      	bhi.n	800bd4a <_free_r+0x5e>
 800bd40:	4b40      	ldr	r3, [pc, #256]	; (800be44 <_free_r+0x158>)
 800bd42:	9801      	ldr	r0, [sp, #4]
 800bd44:	6819      	ldr	r1, [r3, #0]
 800bd46:	f7ff ff7d 	bl	800bc44 <_malloc_trim_r>
 800bd4a:	9801      	ldr	r0, [sp, #4]
 800bd4c:	f7fe fe0a 	bl	800a964 <__malloc_unlock>
 800bd50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd52:	2600      	movs	r6, #0
 800bd54:	6045      	str	r5, [r0, #4]
 800bd56:	42b7      	cmp	r7, r6
 800bd58:	d109      	bne.n	800bd6e <_free_r+0x82>
 800bd5a:	680f      	ldr	r7, [r1, #0]
 800bd5c:	4c3a      	ldr	r4, [pc, #232]	; (800be48 <_free_r+0x15c>)
 800bd5e:	1bc9      	subs	r1, r1, r7
 800bd60:	19db      	adds	r3, r3, r7
 800bd62:	688f      	ldr	r7, [r1, #8]
 800bd64:	42a7      	cmp	r7, r4
 800bd66:	d02c      	beq.n	800bdc2 <_free_r+0xd6>
 800bd68:	68cc      	ldr	r4, [r1, #12]
 800bd6a:	60fc      	str	r4, [r7, #12]
 800bd6c:	60a7      	str	r7, [r4, #8]
 800bd6e:	1947      	adds	r7, r0, r5
 800bd70:	687c      	ldr	r4, [r7, #4]
 800bd72:	2701      	movs	r7, #1
 800bd74:	423c      	tst	r4, r7
 800bd76:	d10b      	bne.n	800bd90 <_free_r+0xa4>
 800bd78:	195b      	adds	r3, r3, r5
 800bd7a:	6885      	ldr	r5, [r0, #8]
 800bd7c:	2e00      	cmp	r6, #0
 800bd7e:	d122      	bne.n	800bdc6 <_free_r+0xda>
 800bd80:	4c31      	ldr	r4, [pc, #196]	; (800be48 <_free_r+0x15c>)
 800bd82:	42a5      	cmp	r5, r4
 800bd84:	d11f      	bne.n	800bdc6 <_free_r+0xda>
 800bd86:	003e      	movs	r6, r7
 800bd88:	6151      	str	r1, [r2, #20]
 800bd8a:	6111      	str	r1, [r2, #16]
 800bd8c:	60cd      	str	r5, [r1, #12]
 800bd8e:	608d      	str	r5, [r1, #8]
 800bd90:	2501      	movs	r5, #1
 800bd92:	0028      	movs	r0, r5
 800bd94:	4318      	orrs	r0, r3
 800bd96:	6048      	str	r0, [r1, #4]
 800bd98:	50cb      	str	r3, [r1, r3]
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	d1d5      	bne.n	800bd4a <_free_r+0x5e>
 800bd9e:	2080      	movs	r0, #128	; 0x80
 800bda0:	0080      	lsls	r0, r0, #2
 800bda2:	4283      	cmp	r3, r0
 800bda4:	d213      	bcs.n	800bdce <_free_r+0xe2>
 800bda6:	08d8      	lsrs	r0, r3, #3
 800bda8:	095b      	lsrs	r3, r3, #5
 800bdaa:	409d      	lsls	r5, r3
 800bdac:	6853      	ldr	r3, [r2, #4]
 800bdae:	431d      	orrs	r5, r3
 800bdb0:	00c3      	lsls	r3, r0, #3
 800bdb2:	189b      	adds	r3, r3, r2
 800bdb4:	6055      	str	r5, [r2, #4]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	60cb      	str	r3, [r1, #12]
 800bdba:	608a      	str	r2, [r1, #8]
 800bdbc:	6099      	str	r1, [r3, #8]
 800bdbe:	60d1      	str	r1, [r2, #12]
 800bdc0:	e7c3      	b.n	800bd4a <_free_r+0x5e>
 800bdc2:	4666      	mov	r6, ip
 800bdc4:	e7d3      	b.n	800bd6e <_free_r+0x82>
 800bdc6:	68c0      	ldr	r0, [r0, #12]
 800bdc8:	60e8      	str	r0, [r5, #12]
 800bdca:	6085      	str	r5, [r0, #8]
 800bdcc:	e7e0      	b.n	800bd90 <_free_r+0xa4>
 800bdce:	0a5d      	lsrs	r5, r3, #9
 800bdd0:	2d04      	cmp	r5, #4
 800bdd2:	d812      	bhi.n	800bdfa <_free_r+0x10e>
 800bdd4:	0998      	lsrs	r0, r3, #6
 800bdd6:	3038      	adds	r0, #56	; 0x38
 800bdd8:	00c6      	lsls	r6, r0, #3
 800bdda:	18b6      	adds	r6, r6, r2
 800bddc:	68b5      	ldr	r5, [r6, #8]
 800bdde:	2703      	movs	r7, #3
 800bde0:	42ae      	cmp	r6, r5
 800bde2:	d125      	bne.n	800be30 <_free_r+0x144>
 800bde4:	2301      	movs	r3, #1
 800bde6:	1080      	asrs	r0, r0, #2
 800bde8:	4083      	lsls	r3, r0
 800bdea:	6850      	ldr	r0, [r2, #4]
 800bdec:	4303      	orrs	r3, r0
 800bdee:	6053      	str	r3, [r2, #4]
 800bdf0:	60ce      	str	r6, [r1, #12]
 800bdf2:	608d      	str	r5, [r1, #8]
 800bdf4:	60b1      	str	r1, [r6, #8]
 800bdf6:	60e9      	str	r1, [r5, #12]
 800bdf8:	e7a7      	b.n	800bd4a <_free_r+0x5e>
 800bdfa:	2d14      	cmp	r5, #20
 800bdfc:	d802      	bhi.n	800be04 <_free_r+0x118>
 800bdfe:	0028      	movs	r0, r5
 800be00:	305b      	adds	r0, #91	; 0x5b
 800be02:	e7e9      	b.n	800bdd8 <_free_r+0xec>
 800be04:	2d54      	cmp	r5, #84	; 0x54
 800be06:	d802      	bhi.n	800be0e <_free_r+0x122>
 800be08:	0b18      	lsrs	r0, r3, #12
 800be0a:	306e      	adds	r0, #110	; 0x6e
 800be0c:	e7e4      	b.n	800bdd8 <_free_r+0xec>
 800be0e:	20aa      	movs	r0, #170	; 0xaa
 800be10:	0040      	lsls	r0, r0, #1
 800be12:	4285      	cmp	r5, r0
 800be14:	d802      	bhi.n	800be1c <_free_r+0x130>
 800be16:	0bd8      	lsrs	r0, r3, #15
 800be18:	3077      	adds	r0, #119	; 0x77
 800be1a:	e7dd      	b.n	800bdd8 <_free_r+0xec>
 800be1c:	4e0b      	ldr	r6, [pc, #44]	; (800be4c <_free_r+0x160>)
 800be1e:	207e      	movs	r0, #126	; 0x7e
 800be20:	42b5      	cmp	r5, r6
 800be22:	d8d9      	bhi.n	800bdd8 <_free_r+0xec>
 800be24:	0c98      	lsrs	r0, r3, #18
 800be26:	307c      	adds	r0, #124	; 0x7c
 800be28:	e7d6      	b.n	800bdd8 <_free_r+0xec>
 800be2a:	68ad      	ldr	r5, [r5, #8]
 800be2c:	42ae      	cmp	r6, r5
 800be2e:	d003      	beq.n	800be38 <_free_r+0x14c>
 800be30:	686a      	ldr	r2, [r5, #4]
 800be32:	43ba      	bics	r2, r7
 800be34:	429a      	cmp	r2, r3
 800be36:	d8f8      	bhi.n	800be2a <_free_r+0x13e>
 800be38:	68ee      	ldr	r6, [r5, #12]
 800be3a:	e7d9      	b.n	800bdf0 <_free_r+0x104>
 800be3c:	20000028 	.word	0x20000028
 800be40:	20000434 	.word	0x20000434
 800be44:	20000c34 	.word	0x20000c34
 800be48:	20000030 	.word	0x20000030
 800be4c:	00000554 	.word	0x00000554

0800be50 <rshift>:
 800be50:	0002      	movs	r2, r0
 800be52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be54:	6904      	ldr	r4, [r0, #16]
 800be56:	114b      	asrs	r3, r1, #5
 800be58:	b085      	sub	sp, #20
 800be5a:	3214      	adds	r2, #20
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	114d      	asrs	r5, r1, #5
 800be60:	0013      	movs	r3, r2
 800be62:	42ac      	cmp	r4, r5
 800be64:	dd32      	ble.n	800becc <rshift+0x7c>
 800be66:	261f      	movs	r6, #31
 800be68:	000f      	movs	r7, r1
 800be6a:	114b      	asrs	r3, r1, #5
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	00a5      	lsls	r5, r4, #2
 800be70:	18d3      	adds	r3, r2, r3
 800be72:	4037      	ands	r7, r6
 800be74:	1955      	adds	r5, r2, r5
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	9701      	str	r7, [sp, #4]
 800be7a:	4231      	tst	r1, r6
 800be7c:	d10d      	bne.n	800be9a <rshift+0x4a>
 800be7e:	0016      	movs	r6, r2
 800be80:	0019      	movs	r1, r3
 800be82:	428d      	cmp	r5, r1
 800be84:	d836      	bhi.n	800bef4 <rshift+0xa4>
 800be86:	9900      	ldr	r1, [sp, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	3903      	subs	r1, #3
 800be8c:	428d      	cmp	r5, r1
 800be8e:	d302      	bcc.n	800be96 <rshift+0x46>
 800be90:	9b02      	ldr	r3, [sp, #8]
 800be92:	1ae4      	subs	r4, r4, r3
 800be94:	00a3      	lsls	r3, r4, #2
 800be96:	18d3      	adds	r3, r2, r3
 800be98:	e018      	b.n	800becc <rshift+0x7c>
 800be9a:	2120      	movs	r1, #32
 800be9c:	9e01      	ldr	r6, [sp, #4]
 800be9e:	9f01      	ldr	r7, [sp, #4]
 800bea0:	1b89      	subs	r1, r1, r6
 800bea2:	9e00      	ldr	r6, [sp, #0]
 800bea4:	9103      	str	r1, [sp, #12]
 800bea6:	ce02      	ldmia	r6!, {r1}
 800bea8:	4694      	mov	ip, r2
 800beaa:	40f9      	lsrs	r1, r7
 800beac:	42b5      	cmp	r5, r6
 800beae:	d816      	bhi.n	800bede <rshift+0x8e>
 800beb0:	9e00      	ldr	r6, [sp, #0]
 800beb2:	2300      	movs	r3, #0
 800beb4:	3601      	adds	r6, #1
 800beb6:	42b5      	cmp	r5, r6
 800beb8:	d303      	bcc.n	800bec2 <rshift+0x72>
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	1ae3      	subs	r3, r4, r3
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	3b04      	subs	r3, #4
 800bec2:	18d3      	adds	r3, r2, r3
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	2900      	cmp	r1, #0
 800bec8:	d000      	beq.n	800becc <rshift+0x7c>
 800beca:	3304      	adds	r3, #4
 800becc:	1a99      	subs	r1, r3, r2
 800bece:	1089      	asrs	r1, r1, #2
 800bed0:	6101      	str	r1, [r0, #16]
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d101      	bne.n	800beda <rshift+0x8a>
 800bed6:	2300      	movs	r3, #0
 800bed8:	6143      	str	r3, [r0, #20]
 800beda:	b005      	add	sp, #20
 800bedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bede:	6837      	ldr	r7, [r6, #0]
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	409f      	lsls	r7, r3
 800bee4:	430f      	orrs	r7, r1
 800bee6:	4661      	mov	r1, ip
 800bee8:	c180      	stmia	r1!, {r7}
 800beea:	468c      	mov	ip, r1
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	ce02      	ldmia	r6!, {r1}
 800bef0:	40d9      	lsrs	r1, r3
 800bef2:	e7db      	b.n	800beac <rshift+0x5c>
 800bef4:	c980      	ldmia	r1!, {r7}
 800bef6:	c680      	stmia	r6!, {r7}
 800bef8:	e7c3      	b.n	800be82 <rshift+0x32>

0800befa <__hexdig_fun>:
 800befa:	0002      	movs	r2, r0
 800befc:	3a30      	subs	r2, #48	; 0x30
 800befe:	0003      	movs	r3, r0
 800bf00:	2a09      	cmp	r2, #9
 800bf02:	d802      	bhi.n	800bf0a <__hexdig_fun+0x10>
 800bf04:	3b20      	subs	r3, #32
 800bf06:	b2d8      	uxtb	r0, r3
 800bf08:	4770      	bx	lr
 800bf0a:	0002      	movs	r2, r0
 800bf0c:	3a61      	subs	r2, #97	; 0x61
 800bf0e:	2a05      	cmp	r2, #5
 800bf10:	d801      	bhi.n	800bf16 <__hexdig_fun+0x1c>
 800bf12:	3b47      	subs	r3, #71	; 0x47
 800bf14:	e7f7      	b.n	800bf06 <__hexdig_fun+0xc>
 800bf16:	001a      	movs	r2, r3
 800bf18:	3a41      	subs	r2, #65	; 0x41
 800bf1a:	2000      	movs	r0, #0
 800bf1c:	2a05      	cmp	r2, #5
 800bf1e:	d8f3      	bhi.n	800bf08 <__hexdig_fun+0xe>
 800bf20:	3b27      	subs	r3, #39	; 0x27
 800bf22:	e7f0      	b.n	800bf06 <__hexdig_fun+0xc>

0800bf24 <__gethex>:
 800bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf26:	b089      	sub	sp, #36	; 0x24
 800bf28:	9307      	str	r3, [sp, #28]
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	680a      	ldr	r2, [r1, #0]
 800bf30:	425b      	negs	r3, r3
 800bf32:	9003      	str	r0, [sp, #12]
 800bf34:	9106      	str	r1, [sp, #24]
 800bf36:	1c96      	adds	r6, r2, #2
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	199a      	adds	r2, r3, r6
 800bf3c:	9600      	str	r6, [sp, #0]
 800bf3e:	9205      	str	r2, [sp, #20]
 800bf40:	9a00      	ldr	r2, [sp, #0]
 800bf42:	3601      	adds	r6, #1
 800bf44:	7810      	ldrb	r0, [r2, #0]
 800bf46:	2830      	cmp	r0, #48	; 0x30
 800bf48:	d0f7      	beq.n	800bf3a <__gethex+0x16>
 800bf4a:	f7ff ffd6 	bl	800befa <__hexdig_fun>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	001d      	movs	r5, r3
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	4298      	cmp	r0, r3
 800bf56:	d11d      	bne.n	800bf94 <__gethex+0x70>
 800bf58:	2201      	movs	r2, #1
 800bf5a:	49a6      	ldr	r1, [pc, #664]	; (800c1f4 <__gethex+0x2d0>)
 800bf5c:	9800      	ldr	r0, [sp, #0]
 800bf5e:	f7ff fd6d 	bl	800ba3c <strncmp>
 800bf62:	0007      	movs	r7, r0
 800bf64:	42a8      	cmp	r0, r5
 800bf66:	d169      	bne.n	800c03c <__gethex+0x118>
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	0034      	movs	r4, r6
 800bf6c:	7858      	ldrb	r0, [r3, #1]
 800bf6e:	f7ff ffc4 	bl	800befa <__hexdig_fun>
 800bf72:	2301      	movs	r3, #1
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	42a8      	cmp	r0, r5
 800bf78:	d02f      	beq.n	800bfda <__gethex+0xb6>
 800bf7a:	9600      	str	r6, [sp, #0]
 800bf7c:	9b00      	ldr	r3, [sp, #0]
 800bf7e:	7818      	ldrb	r0, [r3, #0]
 800bf80:	2830      	cmp	r0, #48	; 0x30
 800bf82:	d009      	beq.n	800bf98 <__gethex+0x74>
 800bf84:	f7ff ffb9 	bl	800befa <__hexdig_fun>
 800bf88:	4242      	negs	r2, r0
 800bf8a:	4142      	adcs	r2, r0
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	0035      	movs	r5, r6
 800bf90:	9202      	str	r2, [sp, #8]
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	9c00      	ldr	r4, [sp, #0]
 800bf96:	e004      	b.n	800bfa2 <__gethex+0x7e>
 800bf98:	9b00      	ldr	r3, [sp, #0]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	e7ed      	b.n	800bf7c <__gethex+0x58>
 800bfa0:	3401      	adds	r4, #1
 800bfa2:	7820      	ldrb	r0, [r4, #0]
 800bfa4:	f7ff ffa9 	bl	800befa <__hexdig_fun>
 800bfa8:	1e07      	subs	r7, r0, #0
 800bfaa:	d1f9      	bne.n	800bfa0 <__gethex+0x7c>
 800bfac:	2201      	movs	r2, #1
 800bfae:	0020      	movs	r0, r4
 800bfb0:	4990      	ldr	r1, [pc, #576]	; (800c1f4 <__gethex+0x2d0>)
 800bfb2:	f7ff fd43 	bl	800ba3c <strncmp>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d10d      	bne.n	800bfd6 <__gethex+0xb2>
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	d106      	bne.n	800bfcc <__gethex+0xa8>
 800bfbe:	3401      	adds	r4, #1
 800bfc0:	0025      	movs	r5, r4
 800bfc2:	7820      	ldrb	r0, [r4, #0]
 800bfc4:	f7ff ff99 	bl	800befa <__hexdig_fun>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d102      	bne.n	800bfd2 <__gethex+0xae>
 800bfcc:	1b2d      	subs	r5, r5, r4
 800bfce:	00af      	lsls	r7, r5, #2
 800bfd0:	e003      	b.n	800bfda <__gethex+0xb6>
 800bfd2:	3401      	adds	r4, #1
 800bfd4:	e7f5      	b.n	800bfc2 <__gethex+0x9e>
 800bfd6:	2d00      	cmp	r5, #0
 800bfd8:	d1f8      	bne.n	800bfcc <__gethex+0xa8>
 800bfda:	2220      	movs	r2, #32
 800bfdc:	7823      	ldrb	r3, [r4, #0]
 800bfde:	0026      	movs	r6, r4
 800bfe0:	4393      	bics	r3, r2
 800bfe2:	2b50      	cmp	r3, #80	; 0x50
 800bfe4:	d11d      	bne.n	800c022 <__gethex+0xfe>
 800bfe6:	7863      	ldrb	r3, [r4, #1]
 800bfe8:	2b2b      	cmp	r3, #43	; 0x2b
 800bfea:	d02c      	beq.n	800c046 <__gethex+0x122>
 800bfec:	2b2d      	cmp	r3, #45	; 0x2d
 800bfee:	d02e      	beq.n	800c04e <__gethex+0x12a>
 800bff0:	2300      	movs	r3, #0
 800bff2:	1c66      	adds	r6, r4, #1
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	7830      	ldrb	r0, [r6, #0]
 800bff8:	f7ff ff7f 	bl	800befa <__hexdig_fun>
 800bffc:	1e43      	subs	r3, r0, #1
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b18      	cmp	r3, #24
 800c002:	d82b      	bhi.n	800c05c <__gethex+0x138>
 800c004:	3810      	subs	r0, #16
 800c006:	0005      	movs	r5, r0
 800c008:	7870      	ldrb	r0, [r6, #1]
 800c00a:	f7ff ff76 	bl	800befa <__hexdig_fun>
 800c00e:	1e43      	subs	r3, r0, #1
 800c010:	b2db      	uxtb	r3, r3
 800c012:	3601      	adds	r6, #1
 800c014:	2b18      	cmp	r3, #24
 800c016:	d91c      	bls.n	800c052 <__gethex+0x12e>
 800c018:	9b04      	ldr	r3, [sp, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d000      	beq.n	800c020 <__gethex+0xfc>
 800c01e:	426d      	negs	r5, r5
 800c020:	197f      	adds	r7, r7, r5
 800c022:	9b06      	ldr	r3, [sp, #24]
 800c024:	601e      	str	r6, [r3, #0]
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d019      	beq.n	800c060 <__gethex+0x13c>
 800c02c:	2600      	movs	r6, #0
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	42b3      	cmp	r3, r6
 800c032:	d100      	bne.n	800c036 <__gethex+0x112>
 800c034:	3606      	adds	r6, #6
 800c036:	0030      	movs	r0, r6
 800c038:	b009      	add	sp, #36	; 0x24
 800c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03c:	2301      	movs	r3, #1
 800c03e:	2700      	movs	r7, #0
 800c040:	9c00      	ldr	r4, [sp, #0]
 800c042:	9302      	str	r3, [sp, #8]
 800c044:	e7c9      	b.n	800bfda <__gethex+0xb6>
 800c046:	2300      	movs	r3, #0
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	1ca6      	adds	r6, r4, #2
 800c04c:	e7d3      	b.n	800bff6 <__gethex+0xd2>
 800c04e:	2301      	movs	r3, #1
 800c050:	e7fa      	b.n	800c048 <__gethex+0x124>
 800c052:	230a      	movs	r3, #10
 800c054:	435d      	muls	r5, r3
 800c056:	182d      	adds	r5, r5, r0
 800c058:	3d10      	subs	r5, #16
 800c05a:	e7d5      	b.n	800c008 <__gethex+0xe4>
 800c05c:	0026      	movs	r6, r4
 800c05e:	e7e0      	b.n	800c022 <__gethex+0xfe>
 800c060:	9b00      	ldr	r3, [sp, #0]
 800c062:	9902      	ldr	r1, [sp, #8]
 800c064:	1ae3      	subs	r3, r4, r3
 800c066:	3b01      	subs	r3, #1
 800c068:	2b07      	cmp	r3, #7
 800c06a:	dc0a      	bgt.n	800c082 <__gethex+0x15e>
 800c06c:	9803      	ldr	r0, [sp, #12]
 800c06e:	f000 fa5d 	bl	800c52c <_Balloc>
 800c072:	1e05      	subs	r5, r0, #0
 800c074:	d108      	bne.n	800c088 <__gethex+0x164>
 800c076:	002a      	movs	r2, r5
 800c078:	21e4      	movs	r1, #228	; 0xe4
 800c07a:	4b5f      	ldr	r3, [pc, #380]	; (800c1f8 <__gethex+0x2d4>)
 800c07c:	485f      	ldr	r0, [pc, #380]	; (800c1fc <__gethex+0x2d8>)
 800c07e:	f003 fd19 	bl	800fab4 <__assert_func>
 800c082:	3101      	adds	r1, #1
 800c084:	105b      	asrs	r3, r3, #1
 800c086:	e7ef      	b.n	800c068 <__gethex+0x144>
 800c088:	0003      	movs	r3, r0
 800c08a:	3314      	adds	r3, #20
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	9305      	str	r3, [sp, #20]
 800c090:	2300      	movs	r3, #0
 800c092:	001e      	movs	r6, r3
 800c094:	9304      	str	r3, [sp, #16]
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	42a3      	cmp	r3, r4
 800c09a:	d33f      	bcc.n	800c11c <__gethex+0x1f8>
 800c09c:	9c05      	ldr	r4, [sp, #20]
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	c440      	stmia	r4!, {r6}
 800c0a2:	1ae4      	subs	r4, r4, r3
 800c0a4:	10a4      	asrs	r4, r4, #2
 800c0a6:	0030      	movs	r0, r6
 800c0a8:	612c      	str	r4, [r5, #16]
 800c0aa:	f000 fb01 	bl	800c6b0 <__hi0bits>
 800c0ae:	9b01      	ldr	r3, [sp, #4]
 800c0b0:	0164      	lsls	r4, r4, #5
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	1a26      	subs	r6, r4, r0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	429e      	cmp	r6, r3
 800c0ba:	dd51      	ble.n	800c160 <__gethex+0x23c>
 800c0bc:	1af6      	subs	r6, r6, r3
 800c0be:	0031      	movs	r1, r6
 800c0c0:	0028      	movs	r0, r5
 800c0c2:	f000 fe7b 	bl	800cdbc <__any_on>
 800c0c6:	1e04      	subs	r4, r0, #0
 800c0c8:	d016      	beq.n	800c0f8 <__gethex+0x1d4>
 800c0ca:	2401      	movs	r4, #1
 800c0cc:	231f      	movs	r3, #31
 800c0ce:	0020      	movs	r0, r4
 800c0d0:	1e72      	subs	r2, r6, #1
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	4098      	lsls	r0, r3
 800c0d6:	0003      	movs	r3, r0
 800c0d8:	1151      	asrs	r1, r2, #5
 800c0da:	9802      	ldr	r0, [sp, #8]
 800c0dc:	0089      	lsls	r1, r1, #2
 800c0de:	5809      	ldr	r1, [r1, r0]
 800c0e0:	4219      	tst	r1, r3
 800c0e2:	d009      	beq.n	800c0f8 <__gethex+0x1d4>
 800c0e4:	42a2      	cmp	r2, r4
 800c0e6:	dd06      	ble.n	800c0f6 <__gethex+0x1d2>
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	1eb1      	subs	r1, r6, #2
 800c0ec:	f000 fe66 	bl	800cdbc <__any_on>
 800c0f0:	3402      	adds	r4, #2
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d100      	bne.n	800c0f8 <__gethex+0x1d4>
 800c0f6:	2402      	movs	r4, #2
 800c0f8:	0031      	movs	r1, r6
 800c0fa:	0028      	movs	r0, r5
 800c0fc:	f7ff fea8 	bl	800be50 <rshift>
 800c100:	19bf      	adds	r7, r7, r6
 800c102:	9b01      	ldr	r3, [sp, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	42bb      	cmp	r3, r7
 800c108:	da3a      	bge.n	800c180 <__gethex+0x25c>
 800c10a:	0029      	movs	r1, r5
 800c10c:	9803      	ldr	r0, [sp, #12]
 800c10e:	f000 fa35 	bl	800c57c <_Bfree>
 800c112:	2300      	movs	r3, #0
 800c114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c116:	26a3      	movs	r6, #163	; 0xa3
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	e78c      	b.n	800c036 <__gethex+0x112>
 800c11c:	3c01      	subs	r4, #1
 800c11e:	7823      	ldrb	r3, [r4, #0]
 800c120:	2b2e      	cmp	r3, #46	; 0x2e
 800c122:	d012      	beq.n	800c14a <__gethex+0x226>
 800c124:	9b04      	ldr	r3, [sp, #16]
 800c126:	2b20      	cmp	r3, #32
 800c128:	d104      	bne.n	800c134 <__gethex+0x210>
 800c12a:	9b05      	ldr	r3, [sp, #20]
 800c12c:	c340      	stmia	r3!, {r6}
 800c12e:	2600      	movs	r6, #0
 800c130:	9305      	str	r3, [sp, #20]
 800c132:	9604      	str	r6, [sp, #16]
 800c134:	7820      	ldrb	r0, [r4, #0]
 800c136:	f7ff fee0 	bl	800befa <__hexdig_fun>
 800c13a:	230f      	movs	r3, #15
 800c13c:	4018      	ands	r0, r3
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	4098      	lsls	r0, r3
 800c142:	3304      	adds	r3, #4
 800c144:	4306      	orrs	r6, r0
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	e7a5      	b.n	800c096 <__gethex+0x172>
 800c14a:	9b00      	ldr	r3, [sp, #0]
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	d8e9      	bhi.n	800c124 <__gethex+0x200>
 800c150:	2201      	movs	r2, #1
 800c152:	0020      	movs	r0, r4
 800c154:	4927      	ldr	r1, [pc, #156]	; (800c1f4 <__gethex+0x2d0>)
 800c156:	f7ff fc71 	bl	800ba3c <strncmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d1e2      	bne.n	800c124 <__gethex+0x200>
 800c15e:	e79a      	b.n	800c096 <__gethex+0x172>
 800c160:	9b00      	ldr	r3, [sp, #0]
 800c162:	2400      	movs	r4, #0
 800c164:	429e      	cmp	r6, r3
 800c166:	dacc      	bge.n	800c102 <__gethex+0x1de>
 800c168:	1b9e      	subs	r6, r3, r6
 800c16a:	0029      	movs	r1, r5
 800c16c:	0032      	movs	r2, r6
 800c16e:	9803      	ldr	r0, [sp, #12]
 800c170:	f000 fbf0 	bl	800c954 <__lshift>
 800c174:	0003      	movs	r3, r0
 800c176:	3314      	adds	r3, #20
 800c178:	0005      	movs	r5, r0
 800c17a:	1bbf      	subs	r7, r7, r6
 800c17c:	9302      	str	r3, [sp, #8]
 800c17e:	e7c0      	b.n	800c102 <__gethex+0x1de>
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	685e      	ldr	r6, [r3, #4]
 800c184:	42be      	cmp	r6, r7
 800c186:	dd70      	ble.n	800c26a <__gethex+0x346>
 800c188:	9b00      	ldr	r3, [sp, #0]
 800c18a:	1bf6      	subs	r6, r6, r7
 800c18c:	42b3      	cmp	r3, r6
 800c18e:	dc37      	bgt.n	800c200 <__gethex+0x2dc>
 800c190:	9b01      	ldr	r3, [sp, #4]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d024      	beq.n	800c1e2 <__gethex+0x2be>
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d026      	beq.n	800c1ea <__gethex+0x2c6>
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d117      	bne.n	800c1d0 <__gethex+0x2ac>
 800c1a0:	9b00      	ldr	r3, [sp, #0]
 800c1a2:	42b3      	cmp	r3, r6
 800c1a4:	d114      	bne.n	800c1d0 <__gethex+0x2ac>
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d10b      	bne.n	800c1c2 <__gethex+0x29e>
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	9a07      	ldr	r2, [sp, #28]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	2662      	movs	r6, #98	; 0x62
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	9a02      	ldr	r2, [sp, #8]
 800c1b8:	612b      	str	r3, [r5, #16]
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1be:	601d      	str	r5, [r3, #0]
 800c1c0:	e739      	b.n	800c036 <__gethex+0x112>
 800c1c2:	9900      	ldr	r1, [sp, #0]
 800c1c4:	0028      	movs	r0, r5
 800c1c6:	3901      	subs	r1, #1
 800c1c8:	f000 fdf8 	bl	800cdbc <__any_on>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1ec      	bne.n	800c1aa <__gethex+0x286>
 800c1d0:	0029      	movs	r1, r5
 800c1d2:	9803      	ldr	r0, [sp, #12]
 800c1d4:	f000 f9d2 	bl	800c57c <_Bfree>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1dc:	2650      	movs	r6, #80	; 0x50
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	e729      	b.n	800c036 <__gethex+0x112>
 800c1e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1f3      	bne.n	800c1d0 <__gethex+0x2ac>
 800c1e8:	e7df      	b.n	800c1aa <__gethex+0x286>
 800c1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1dc      	bne.n	800c1aa <__gethex+0x286>
 800c1f0:	e7ee      	b.n	800c1d0 <__gethex+0x2ac>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	08014154 	.word	0x08014154
 800c1f8:	080142b1 	.word	0x080142b1
 800c1fc:	080142c2 	.word	0x080142c2
 800c200:	1e77      	subs	r7, r6, #1
 800c202:	2c00      	cmp	r4, #0
 800c204:	d12f      	bne.n	800c266 <__gethex+0x342>
 800c206:	2f00      	cmp	r7, #0
 800c208:	d004      	beq.n	800c214 <__gethex+0x2f0>
 800c20a:	0039      	movs	r1, r7
 800c20c:	0028      	movs	r0, r5
 800c20e:	f000 fdd5 	bl	800cdbc <__any_on>
 800c212:	0004      	movs	r4, r0
 800c214:	231f      	movs	r3, #31
 800c216:	117a      	asrs	r2, r7, #5
 800c218:	401f      	ands	r7, r3
 800c21a:	3b1e      	subs	r3, #30
 800c21c:	40bb      	lsls	r3, r7
 800c21e:	9902      	ldr	r1, [sp, #8]
 800c220:	0092      	lsls	r2, r2, #2
 800c222:	5852      	ldr	r2, [r2, r1]
 800c224:	421a      	tst	r2, r3
 800c226:	d001      	beq.n	800c22c <__gethex+0x308>
 800c228:	2302      	movs	r3, #2
 800c22a:	431c      	orrs	r4, r3
 800c22c:	9b00      	ldr	r3, [sp, #0]
 800c22e:	0031      	movs	r1, r6
 800c230:	1b9b      	subs	r3, r3, r6
 800c232:	2602      	movs	r6, #2
 800c234:	0028      	movs	r0, r5
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	f7ff fe0a 	bl	800be50 <rshift>
 800c23c:	9b01      	ldr	r3, [sp, #4]
 800c23e:	685f      	ldr	r7, [r3, #4]
 800c240:	2c00      	cmp	r4, #0
 800c242:	d041      	beq.n	800c2c8 <__gethex+0x3a4>
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d010      	beq.n	800c26e <__gethex+0x34a>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d012      	beq.n	800c276 <__gethex+0x352>
 800c250:	2b01      	cmp	r3, #1
 800c252:	d106      	bne.n	800c262 <__gethex+0x33e>
 800c254:	07a2      	lsls	r2, r4, #30
 800c256:	d504      	bpl.n	800c262 <__gethex+0x33e>
 800c258:	9a02      	ldr	r2, [sp, #8]
 800c25a:	6812      	ldr	r2, [r2, #0]
 800c25c:	4314      	orrs	r4, r2
 800c25e:	421c      	tst	r4, r3
 800c260:	d10c      	bne.n	800c27c <__gethex+0x358>
 800c262:	2310      	movs	r3, #16
 800c264:	e02f      	b.n	800c2c6 <__gethex+0x3a2>
 800c266:	2401      	movs	r4, #1
 800c268:	e7d4      	b.n	800c214 <__gethex+0x2f0>
 800c26a:	2601      	movs	r6, #1
 800c26c:	e7e8      	b.n	800c240 <__gethex+0x31c>
 800c26e:	2301      	movs	r3, #1
 800c270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c272:	1a9b      	subs	r3, r3, r2
 800c274:	930f      	str	r3, [sp, #60]	; 0x3c
 800c276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0f2      	beq.n	800c262 <__gethex+0x33e>
 800c27c:	692b      	ldr	r3, [r5, #16]
 800c27e:	2000      	movs	r0, #0
 800c280:	9302      	str	r3, [sp, #8]
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	9304      	str	r3, [sp, #16]
 800c286:	002b      	movs	r3, r5
 800c288:	9a04      	ldr	r2, [sp, #16]
 800c28a:	3314      	adds	r3, #20
 800c28c:	1899      	adds	r1, r3, r2
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	1c54      	adds	r4, r2, #1
 800c292:	d01e      	beq.n	800c2d2 <__gethex+0x3ae>
 800c294:	3201      	adds	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	002b      	movs	r3, r5
 800c29a:	3314      	adds	r3, #20
 800c29c:	2e02      	cmp	r6, #2
 800c29e:	d141      	bne.n	800c324 <__gethex+0x400>
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	9900      	ldr	r1, [sp, #0]
 800c2a4:	6812      	ldr	r2, [r2, #0]
 800c2a6:	3a01      	subs	r2, #1
 800c2a8:	428a      	cmp	r2, r1
 800c2aa:	d10b      	bne.n	800c2c4 <__gethex+0x3a0>
 800c2ac:	221f      	movs	r2, #31
 800c2ae:	9800      	ldr	r0, [sp, #0]
 800c2b0:	1149      	asrs	r1, r1, #5
 800c2b2:	4002      	ands	r2, r0
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	0004      	movs	r4, r0
 800c2b8:	4094      	lsls	r4, r2
 800c2ba:	0089      	lsls	r1, r1, #2
 800c2bc:	58cb      	ldr	r3, [r1, r3]
 800c2be:	4223      	tst	r3, r4
 800c2c0:	d000      	beq.n	800c2c4 <__gethex+0x3a0>
 800c2c2:	2601      	movs	r6, #1
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	431e      	orrs	r6, r3
 800c2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2ca:	601d      	str	r5, [r3, #0]
 800c2cc:	9b07      	ldr	r3, [sp, #28]
 800c2ce:	601f      	str	r7, [r3, #0]
 800c2d0:	e6b1      	b.n	800c036 <__gethex+0x112>
 800c2d2:	c301      	stmia	r3!, {r0}
 800c2d4:	4299      	cmp	r1, r3
 800c2d6:	d8da      	bhi.n	800c28e <__gethex+0x36a>
 800c2d8:	68ab      	ldr	r3, [r5, #8]
 800c2da:	9a02      	ldr	r2, [sp, #8]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	db18      	blt.n	800c312 <__gethex+0x3ee>
 800c2e0:	6869      	ldr	r1, [r5, #4]
 800c2e2:	9803      	ldr	r0, [sp, #12]
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	f000 f921 	bl	800c52c <_Balloc>
 800c2ea:	1e04      	subs	r4, r0, #0
 800c2ec:	d104      	bne.n	800c2f8 <__gethex+0x3d4>
 800c2ee:	0022      	movs	r2, r4
 800c2f0:	2184      	movs	r1, #132	; 0x84
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <__gethex+0x440>)
 800c2f4:	481c      	ldr	r0, [pc, #112]	; (800c368 <__gethex+0x444>)
 800c2f6:	e6c2      	b.n	800c07e <__gethex+0x15a>
 800c2f8:	0029      	movs	r1, r5
 800c2fa:	692a      	ldr	r2, [r5, #16]
 800c2fc:	310c      	adds	r1, #12
 800c2fe:	3202      	adds	r2, #2
 800c300:	0092      	lsls	r2, r2, #2
 800c302:	300c      	adds	r0, #12
 800c304:	f7ff fc77 	bl	800bbf6 <memcpy>
 800c308:	0029      	movs	r1, r5
 800c30a:	9803      	ldr	r0, [sp, #12]
 800c30c:	f000 f936 	bl	800c57c <_Bfree>
 800c310:	0025      	movs	r5, r4
 800c312:	692b      	ldr	r3, [r5, #16]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	612a      	str	r2, [r5, #16]
 800c318:	2201      	movs	r2, #1
 800c31a:	3304      	adds	r3, #4
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	18eb      	adds	r3, r5, r3
 800c320:	605a      	str	r2, [r3, #4]
 800c322:	e7b9      	b.n	800c298 <__gethex+0x374>
 800c324:	692a      	ldr	r2, [r5, #16]
 800c326:	9902      	ldr	r1, [sp, #8]
 800c328:	428a      	cmp	r2, r1
 800c32a:	dd09      	ble.n	800c340 <__gethex+0x41c>
 800c32c:	2101      	movs	r1, #1
 800c32e:	0028      	movs	r0, r5
 800c330:	f7ff fd8e 	bl	800be50 <rshift>
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	3701      	adds	r7, #1
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	42bb      	cmp	r3, r7
 800c33c:	dac1      	bge.n	800c2c2 <__gethex+0x39e>
 800c33e:	e6e4      	b.n	800c10a <__gethex+0x1e6>
 800c340:	221f      	movs	r2, #31
 800c342:	9c00      	ldr	r4, [sp, #0]
 800c344:	9900      	ldr	r1, [sp, #0]
 800c346:	2601      	movs	r6, #1
 800c348:	4014      	ands	r4, r2
 800c34a:	4211      	tst	r1, r2
 800c34c:	d0ba      	beq.n	800c2c4 <__gethex+0x3a0>
 800c34e:	9a04      	ldr	r2, [sp, #16]
 800c350:	189b      	adds	r3, r3, r2
 800c352:	3b04      	subs	r3, #4
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f000 f9ab 	bl	800c6b0 <__hi0bits>
 800c35a:	2320      	movs	r3, #32
 800c35c:	1b1b      	subs	r3, r3, r4
 800c35e:	4298      	cmp	r0, r3
 800c360:	dbe4      	blt.n	800c32c <__gethex+0x408>
 800c362:	e7af      	b.n	800c2c4 <__gethex+0x3a0>
 800c364:	080142b1 	.word	0x080142b1
 800c368:	080142c2 	.word	0x080142c2

0800c36c <L_shift>:
 800c36c:	2308      	movs	r3, #8
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	2520      	movs	r5, #32
 800c372:	1a9a      	subs	r2, r3, r2
 800c374:	0092      	lsls	r2, r2, #2
 800c376:	1aad      	subs	r5, r5, r2
 800c378:	6843      	ldr	r3, [r0, #4]
 800c37a:	6804      	ldr	r4, [r0, #0]
 800c37c:	001e      	movs	r6, r3
 800c37e:	40ae      	lsls	r6, r5
 800c380:	40d3      	lsrs	r3, r2
 800c382:	4334      	orrs	r4, r6
 800c384:	6004      	str	r4, [r0, #0]
 800c386:	6043      	str	r3, [r0, #4]
 800c388:	3004      	adds	r0, #4
 800c38a:	4288      	cmp	r0, r1
 800c38c:	d3f4      	bcc.n	800c378 <L_shift+0xc>
 800c38e:	bd70      	pop	{r4, r5, r6, pc}

0800c390 <__match>:
 800c390:	b530      	push	{r4, r5, lr}
 800c392:	6803      	ldr	r3, [r0, #0]
 800c394:	780c      	ldrb	r4, [r1, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	2c00      	cmp	r4, #0
 800c39a:	d102      	bne.n	800c3a2 <__match+0x12>
 800c39c:	6003      	str	r3, [r0, #0]
 800c39e:	2001      	movs	r0, #1
 800c3a0:	bd30      	pop	{r4, r5, pc}
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	0015      	movs	r5, r2
 800c3a6:	3d41      	subs	r5, #65	; 0x41
 800c3a8:	2d19      	cmp	r5, #25
 800c3aa:	d800      	bhi.n	800c3ae <__match+0x1e>
 800c3ac:	3220      	adds	r2, #32
 800c3ae:	3101      	adds	r1, #1
 800c3b0:	42a2      	cmp	r2, r4
 800c3b2:	d0ef      	beq.n	800c394 <__match+0x4>
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e7f3      	b.n	800c3a0 <__match+0x10>

0800c3b8 <__hexnan>:
 800c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ba:	680b      	ldr	r3, [r1, #0]
 800c3bc:	b08b      	sub	sp, #44	; 0x2c
 800c3be:	9201      	str	r2, [sp, #4]
 800c3c0:	9901      	ldr	r1, [sp, #4]
 800c3c2:	115a      	asrs	r2, r3, #5
 800c3c4:	0092      	lsls	r2, r2, #2
 800c3c6:	188a      	adds	r2, r1, r2
 800c3c8:	9202      	str	r2, [sp, #8]
 800c3ca:	0019      	movs	r1, r3
 800c3cc:	221f      	movs	r2, #31
 800c3ce:	4011      	ands	r1, r2
 800c3d0:	9008      	str	r0, [sp, #32]
 800c3d2:	9106      	str	r1, [sp, #24]
 800c3d4:	4213      	tst	r3, r2
 800c3d6:	d002      	beq.n	800c3de <__hexnan+0x26>
 800c3d8:	9b02      	ldr	r3, [sp, #8]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	9b02      	ldr	r3, [sp, #8]
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	1f1f      	subs	r7, r3, #4
 800c3e4:	003e      	movs	r6, r7
 800c3e6:	003c      	movs	r4, r7
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	603d      	str	r5, [r7, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	9507      	str	r5, [sp, #28]
 800c3f0:	9305      	str	r3, [sp, #20]
 800c3f2:	9503      	str	r5, [sp, #12]
 800c3f4:	9b05      	ldr	r3, [sp, #20]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3fa:	9b05      	ldr	r3, [sp, #20]
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d028      	beq.n	800c456 <__hexnan+0x9e>
 800c404:	9804      	ldr	r0, [sp, #16]
 800c406:	f7ff fd78 	bl	800befa <__hexdig_fun>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d154      	bne.n	800c4b8 <__hexnan+0x100>
 800c40e:	9b04      	ldr	r3, [sp, #16]
 800c410:	2b20      	cmp	r3, #32
 800c412:	d819      	bhi.n	800c448 <__hexnan+0x90>
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	9a07      	ldr	r2, [sp, #28]
 800c418:	4293      	cmp	r3, r2
 800c41a:	dd12      	ble.n	800c442 <__hexnan+0x8a>
 800c41c:	42b4      	cmp	r4, r6
 800c41e:	d206      	bcs.n	800c42e <__hexnan+0x76>
 800c420:	2d07      	cmp	r5, #7
 800c422:	dc04      	bgt.n	800c42e <__hexnan+0x76>
 800c424:	002a      	movs	r2, r5
 800c426:	0031      	movs	r1, r6
 800c428:	0020      	movs	r0, r4
 800c42a:	f7ff ff9f 	bl	800c36c <L_shift>
 800c42e:	9b01      	ldr	r3, [sp, #4]
 800c430:	2508      	movs	r5, #8
 800c432:	429c      	cmp	r4, r3
 800c434:	d905      	bls.n	800c442 <__hexnan+0x8a>
 800c436:	1f26      	subs	r6, r4, #4
 800c438:	2500      	movs	r5, #0
 800c43a:	0034      	movs	r4, r6
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	6035      	str	r5, [r6, #0]
 800c440:	9307      	str	r3, [sp, #28]
 800c442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c444:	9305      	str	r3, [sp, #20]
 800c446:	e7d5      	b.n	800c3f4 <__hexnan+0x3c>
 800c448:	9b04      	ldr	r3, [sp, #16]
 800c44a:	2b29      	cmp	r3, #41	; 0x29
 800c44c:	d159      	bne.n	800c502 <__hexnan+0x14a>
 800c44e:	9b05      	ldr	r3, [sp, #20]
 800c450:	9a08      	ldr	r2, [sp, #32]
 800c452:	3302      	adds	r3, #2
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d052      	beq.n	800c502 <__hexnan+0x14a>
 800c45c:	42b4      	cmp	r4, r6
 800c45e:	d206      	bcs.n	800c46e <__hexnan+0xb6>
 800c460:	2d07      	cmp	r5, #7
 800c462:	dc04      	bgt.n	800c46e <__hexnan+0xb6>
 800c464:	002a      	movs	r2, r5
 800c466:	0031      	movs	r1, r6
 800c468:	0020      	movs	r0, r4
 800c46a:	f7ff ff7f 	bl	800c36c <L_shift>
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	429c      	cmp	r4, r3
 800c472:	d935      	bls.n	800c4e0 <__hexnan+0x128>
 800c474:	001a      	movs	r2, r3
 800c476:	0023      	movs	r3, r4
 800c478:	cb02      	ldmia	r3!, {r1}
 800c47a:	c202      	stmia	r2!, {r1}
 800c47c:	429f      	cmp	r7, r3
 800c47e:	d2fb      	bcs.n	800c478 <__hexnan+0xc0>
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	1c62      	adds	r2, r4, #1
 800c484:	1ed9      	subs	r1, r3, #3
 800c486:	2304      	movs	r3, #4
 800c488:	4291      	cmp	r1, r2
 800c48a:	d305      	bcc.n	800c498 <__hexnan+0xe0>
 800c48c:	9b02      	ldr	r3, [sp, #8]
 800c48e:	3b04      	subs	r3, #4
 800c490:	1b1b      	subs	r3, r3, r4
 800c492:	089b      	lsrs	r3, r3, #2
 800c494:	3301      	adds	r3, #1
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	9a01      	ldr	r2, [sp, #4]
 800c49a:	18d3      	adds	r3, r2, r3
 800c49c:	2200      	movs	r2, #0
 800c49e:	c304      	stmia	r3!, {r2}
 800c4a0:	429f      	cmp	r7, r3
 800c4a2:	d2fc      	bcs.n	800c49e <__hexnan+0xe6>
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d104      	bne.n	800c4b4 <__hexnan+0xfc>
 800c4aa:	9b01      	ldr	r3, [sp, #4]
 800c4ac:	429f      	cmp	r7, r3
 800c4ae:	d126      	bne.n	800c4fe <__hexnan+0x146>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	2005      	movs	r0, #5
 800c4b6:	e025      	b.n	800c504 <__hexnan+0x14c>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	3501      	adds	r5, #1
 800c4bc:	3301      	adds	r3, #1
 800c4be:	9303      	str	r3, [sp, #12]
 800c4c0:	2d08      	cmp	r5, #8
 800c4c2:	dd06      	ble.n	800c4d2 <__hexnan+0x11a>
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	429c      	cmp	r4, r3
 800c4c8:	d9bb      	bls.n	800c442 <__hexnan+0x8a>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2501      	movs	r5, #1
 800c4ce:	3c04      	subs	r4, #4
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	220f      	movs	r2, #15
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	4010      	ands	r0, r2
 800c4d8:	011b      	lsls	r3, r3, #4
 800c4da:	4303      	orrs	r3, r0
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	e7b0      	b.n	800c442 <__hexnan+0x8a>
 800c4e0:	9b06      	ldr	r3, [sp, #24]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0de      	beq.n	800c4a4 <__hexnan+0xec>
 800c4e6:	2320      	movs	r3, #32
 800c4e8:	9a06      	ldr	r2, [sp, #24]
 800c4ea:	9902      	ldr	r1, [sp, #8]
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4252      	negs	r2, r2
 800c4f2:	40da      	lsrs	r2, r3
 800c4f4:	3904      	subs	r1, #4
 800c4f6:	680b      	ldr	r3, [r1, #0]
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	600b      	str	r3, [r1, #0]
 800c4fc:	e7d2      	b.n	800c4a4 <__hexnan+0xec>
 800c4fe:	3f04      	subs	r7, #4
 800c500:	e7d0      	b.n	800c4a4 <__hexnan+0xec>
 800c502:	2004      	movs	r0, #4
 800c504:	b00b      	add	sp, #44	; 0x2c
 800c506:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c508 <__ascii_mbtowc>:
 800c508:	b082      	sub	sp, #8
 800c50a:	2900      	cmp	r1, #0
 800c50c:	d100      	bne.n	800c510 <__ascii_mbtowc+0x8>
 800c50e:	a901      	add	r1, sp, #4
 800c510:	1e10      	subs	r0, r2, #0
 800c512:	d006      	beq.n	800c522 <__ascii_mbtowc+0x1a>
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <__ascii_mbtowc+0x1e>
 800c518:	7813      	ldrb	r3, [r2, #0]
 800c51a:	600b      	str	r3, [r1, #0]
 800c51c:	7810      	ldrb	r0, [r2, #0]
 800c51e:	1e43      	subs	r3, r0, #1
 800c520:	4198      	sbcs	r0, r3
 800c522:	b002      	add	sp, #8
 800c524:	4770      	bx	lr
 800c526:	2002      	movs	r0, #2
 800c528:	4240      	negs	r0, r0
 800c52a:	e7fa      	b.n	800c522 <__ascii_mbtowc+0x1a>

0800c52c <_Balloc>:
 800c52c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c52e:	b570      	push	{r4, r5, r6, lr}
 800c530:	0006      	movs	r6, r0
 800c532:	000c      	movs	r4, r1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d012      	beq.n	800c55e <_Balloc+0x32>
 800c538:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c53a:	00a2      	lsls	r2, r4, #2
 800c53c:	189b      	adds	r3, r3, r2
 800c53e:	6818      	ldr	r0, [r3, #0]
 800c540:	2800      	cmp	r0, #0
 800c542:	d115      	bne.n	800c570 <_Balloc+0x44>
 800c544:	2101      	movs	r1, #1
 800c546:	000d      	movs	r5, r1
 800c548:	40a5      	lsls	r5, r4
 800c54a:	1d6a      	adds	r2, r5, #5
 800c54c:	0030      	movs	r0, r6
 800c54e:	0092      	lsls	r2, r2, #2
 800c550:	f003 face 	bl	800faf0 <_calloc_r>
 800c554:	2800      	cmp	r0, #0
 800c556:	d009      	beq.n	800c56c <_Balloc+0x40>
 800c558:	6044      	str	r4, [r0, #4]
 800c55a:	6085      	str	r5, [r0, #8]
 800c55c:	e00a      	b.n	800c574 <_Balloc+0x48>
 800c55e:	2221      	movs	r2, #33	; 0x21
 800c560:	2104      	movs	r1, #4
 800c562:	f003 fac5 	bl	800faf0 <_calloc_r>
 800c566:	6470      	str	r0, [r6, #68]	; 0x44
 800c568:	2800      	cmp	r0, #0
 800c56a:	d1e5      	bne.n	800c538 <_Balloc+0xc>
 800c56c:	2000      	movs	r0, #0
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	6802      	ldr	r2, [r0, #0]
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	2300      	movs	r3, #0
 800c576:	6103      	str	r3, [r0, #16]
 800c578:	60c3      	str	r3, [r0, #12]
 800c57a:	e7f8      	b.n	800c56e <_Balloc+0x42>

0800c57c <_Bfree>:
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d006      	beq.n	800c58e <_Bfree+0x12>
 800c580:	684a      	ldr	r2, [r1, #4]
 800c582:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c584:	0092      	lsls	r2, r2, #2
 800c586:	189b      	adds	r3, r3, r2
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	600a      	str	r2, [r1, #0]
 800c58c:	6019      	str	r1, [r3, #0]
 800c58e:	4770      	bx	lr

0800c590 <__multadd>:
 800c590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c592:	000e      	movs	r6, r1
 800c594:	9001      	str	r0, [sp, #4]
 800c596:	000c      	movs	r4, r1
 800c598:	001d      	movs	r5, r3
 800c59a:	2000      	movs	r0, #0
 800c59c:	690f      	ldr	r7, [r1, #16]
 800c59e:	3614      	adds	r6, #20
 800c5a0:	6833      	ldr	r3, [r6, #0]
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	b299      	uxth	r1, r3
 800c5a6:	4351      	muls	r1, r2
 800c5a8:	0c1b      	lsrs	r3, r3, #16
 800c5aa:	4353      	muls	r3, r2
 800c5ac:	1949      	adds	r1, r1, r5
 800c5ae:	0c0d      	lsrs	r5, r1, #16
 800c5b0:	195b      	adds	r3, r3, r5
 800c5b2:	0c1d      	lsrs	r5, r3, #16
 800c5b4:	b289      	uxth	r1, r1
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	185b      	adds	r3, r3, r1
 800c5ba:	c608      	stmia	r6!, {r3}
 800c5bc:	4287      	cmp	r7, r0
 800c5be:	dcef      	bgt.n	800c5a0 <__multadd+0x10>
 800c5c0:	2d00      	cmp	r5, #0
 800c5c2:	d022      	beq.n	800c60a <__multadd+0x7a>
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	42bb      	cmp	r3, r7
 800c5c8:	dc19      	bgt.n	800c5fe <__multadd+0x6e>
 800c5ca:	6861      	ldr	r1, [r4, #4]
 800c5cc:	9801      	ldr	r0, [sp, #4]
 800c5ce:	3101      	adds	r1, #1
 800c5d0:	f7ff ffac 	bl	800c52c <_Balloc>
 800c5d4:	1e06      	subs	r6, r0, #0
 800c5d6:	d105      	bne.n	800c5e4 <__multadd+0x54>
 800c5d8:	0032      	movs	r2, r6
 800c5da:	21ba      	movs	r1, #186	; 0xba
 800c5dc:	4b0c      	ldr	r3, [pc, #48]	; (800c610 <__multadd+0x80>)
 800c5de:	480d      	ldr	r0, [pc, #52]	; (800c614 <__multadd+0x84>)
 800c5e0:	f003 fa68 	bl	800fab4 <__assert_func>
 800c5e4:	0021      	movs	r1, r4
 800c5e6:	6922      	ldr	r2, [r4, #16]
 800c5e8:	310c      	adds	r1, #12
 800c5ea:	3202      	adds	r2, #2
 800c5ec:	0092      	lsls	r2, r2, #2
 800c5ee:	300c      	adds	r0, #12
 800c5f0:	f7ff fb01 	bl	800bbf6 <memcpy>
 800c5f4:	0021      	movs	r1, r4
 800c5f6:	9801      	ldr	r0, [sp, #4]
 800c5f8:	f7ff ffc0 	bl	800c57c <_Bfree>
 800c5fc:	0034      	movs	r4, r6
 800c5fe:	1d3b      	adds	r3, r7, #4
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	18e3      	adds	r3, r4, r3
 800c604:	605d      	str	r5, [r3, #4]
 800c606:	1c7b      	adds	r3, r7, #1
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	0020      	movs	r0, r4
 800c60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c60e:	46c0      	nop			; (mov r8, r8)
 800c610:	080142b1 	.word	0x080142b1
 800c614:	08014322 	.word	0x08014322

0800c618 <__s2b>:
 800c618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c61a:	0006      	movs	r6, r0
 800c61c:	0018      	movs	r0, r3
 800c61e:	000c      	movs	r4, r1
 800c620:	3008      	adds	r0, #8
 800c622:	2109      	movs	r1, #9
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	0015      	movs	r5, r2
 800c628:	f7f3 fe12 	bl	8000250 <__divsi3>
 800c62c:	2301      	movs	r3, #1
 800c62e:	2100      	movs	r1, #0
 800c630:	4283      	cmp	r3, r0
 800c632:	db0a      	blt.n	800c64a <__s2b+0x32>
 800c634:	0030      	movs	r0, r6
 800c636:	f7ff ff79 	bl	800c52c <_Balloc>
 800c63a:	1e01      	subs	r1, r0, #0
 800c63c:	d108      	bne.n	800c650 <__s2b+0x38>
 800c63e:	000a      	movs	r2, r1
 800c640:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <__s2b+0x90>)
 800c642:	481a      	ldr	r0, [pc, #104]	; (800c6ac <__s2b+0x94>)
 800c644:	31d3      	adds	r1, #211	; 0xd3
 800c646:	f003 fa35 	bl	800fab4 <__assert_func>
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	3101      	adds	r1, #1
 800c64e:	e7ef      	b.n	800c630 <__s2b+0x18>
 800c650:	9b08      	ldr	r3, [sp, #32]
 800c652:	6143      	str	r3, [r0, #20]
 800c654:	2301      	movs	r3, #1
 800c656:	6103      	str	r3, [r0, #16]
 800c658:	2d09      	cmp	r5, #9
 800c65a:	dd18      	ble.n	800c68e <__s2b+0x76>
 800c65c:	0023      	movs	r3, r4
 800c65e:	3309      	adds	r3, #9
 800c660:	001f      	movs	r7, r3
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	1964      	adds	r4, r4, r5
 800c666:	783b      	ldrb	r3, [r7, #0]
 800c668:	220a      	movs	r2, #10
 800c66a:	0030      	movs	r0, r6
 800c66c:	3b30      	subs	r3, #48	; 0x30
 800c66e:	f7ff ff8f 	bl	800c590 <__multadd>
 800c672:	3701      	adds	r7, #1
 800c674:	0001      	movs	r1, r0
 800c676:	42a7      	cmp	r7, r4
 800c678:	d1f5      	bne.n	800c666 <__s2b+0x4e>
 800c67a:	002c      	movs	r4, r5
 800c67c:	9b00      	ldr	r3, [sp, #0]
 800c67e:	3c08      	subs	r4, #8
 800c680:	191c      	adds	r4, r3, r4
 800c682:	002f      	movs	r7, r5
 800c684:	9b01      	ldr	r3, [sp, #4]
 800c686:	429f      	cmp	r7, r3
 800c688:	db04      	blt.n	800c694 <__s2b+0x7c>
 800c68a:	0008      	movs	r0, r1
 800c68c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c68e:	2509      	movs	r5, #9
 800c690:	340a      	adds	r4, #10
 800c692:	e7f6      	b.n	800c682 <__s2b+0x6a>
 800c694:	1b63      	subs	r3, r4, r5
 800c696:	5ddb      	ldrb	r3, [r3, r7]
 800c698:	220a      	movs	r2, #10
 800c69a:	0030      	movs	r0, r6
 800c69c:	3b30      	subs	r3, #48	; 0x30
 800c69e:	f7ff ff77 	bl	800c590 <__multadd>
 800c6a2:	3701      	adds	r7, #1
 800c6a4:	0001      	movs	r1, r0
 800c6a6:	e7ed      	b.n	800c684 <__s2b+0x6c>
 800c6a8:	080142b1 	.word	0x080142b1
 800c6ac:	08014322 	.word	0x08014322

0800c6b0 <__hi0bits>:
 800c6b0:	0003      	movs	r3, r0
 800c6b2:	0c02      	lsrs	r2, r0, #16
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	4282      	cmp	r2, r0
 800c6b8:	d101      	bne.n	800c6be <__hi0bits+0xe>
 800c6ba:	041b      	lsls	r3, r3, #16
 800c6bc:	3010      	adds	r0, #16
 800c6be:	0e1a      	lsrs	r2, r3, #24
 800c6c0:	d101      	bne.n	800c6c6 <__hi0bits+0x16>
 800c6c2:	3008      	adds	r0, #8
 800c6c4:	021b      	lsls	r3, r3, #8
 800c6c6:	0f1a      	lsrs	r2, r3, #28
 800c6c8:	d101      	bne.n	800c6ce <__hi0bits+0x1e>
 800c6ca:	3004      	adds	r0, #4
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	0f9a      	lsrs	r2, r3, #30
 800c6d0:	d101      	bne.n	800c6d6 <__hi0bits+0x26>
 800c6d2:	3002      	adds	r0, #2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db03      	blt.n	800c6e2 <__hi0bits+0x32>
 800c6da:	3001      	adds	r0, #1
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	d400      	bmi.n	800c6e2 <__hi0bits+0x32>
 800c6e0:	2020      	movs	r0, #32
 800c6e2:	4770      	bx	lr

0800c6e4 <__lo0bits>:
 800c6e4:	6803      	ldr	r3, [r0, #0]
 800c6e6:	0001      	movs	r1, r0
 800c6e8:	2207      	movs	r2, #7
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	4010      	ands	r0, r2
 800c6ee:	4213      	tst	r3, r2
 800c6f0:	d00d      	beq.n	800c70e <__lo0bits+0x2a>
 800c6f2:	3a06      	subs	r2, #6
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	4213      	tst	r3, r2
 800c6f8:	d105      	bne.n	800c706 <__lo0bits+0x22>
 800c6fa:	3002      	adds	r0, #2
 800c6fc:	4203      	tst	r3, r0
 800c6fe:	d003      	beq.n	800c708 <__lo0bits+0x24>
 800c700:	40d3      	lsrs	r3, r2
 800c702:	0010      	movs	r0, r2
 800c704:	600b      	str	r3, [r1, #0]
 800c706:	4770      	bx	lr
 800c708:	089b      	lsrs	r3, r3, #2
 800c70a:	600b      	str	r3, [r1, #0]
 800c70c:	e7fb      	b.n	800c706 <__lo0bits+0x22>
 800c70e:	b29a      	uxth	r2, r3
 800c710:	2a00      	cmp	r2, #0
 800c712:	d101      	bne.n	800c718 <__lo0bits+0x34>
 800c714:	2010      	movs	r0, #16
 800c716:	0c1b      	lsrs	r3, r3, #16
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	2a00      	cmp	r2, #0
 800c71c:	d101      	bne.n	800c722 <__lo0bits+0x3e>
 800c71e:	3008      	adds	r0, #8
 800c720:	0a1b      	lsrs	r3, r3, #8
 800c722:	071a      	lsls	r2, r3, #28
 800c724:	d101      	bne.n	800c72a <__lo0bits+0x46>
 800c726:	3004      	adds	r0, #4
 800c728:	091b      	lsrs	r3, r3, #4
 800c72a:	079a      	lsls	r2, r3, #30
 800c72c:	d101      	bne.n	800c732 <__lo0bits+0x4e>
 800c72e:	3002      	adds	r0, #2
 800c730:	089b      	lsrs	r3, r3, #2
 800c732:	07da      	lsls	r2, r3, #31
 800c734:	d4e9      	bmi.n	800c70a <__lo0bits+0x26>
 800c736:	3001      	adds	r0, #1
 800c738:	085b      	lsrs	r3, r3, #1
 800c73a:	d1e6      	bne.n	800c70a <__lo0bits+0x26>
 800c73c:	2020      	movs	r0, #32
 800c73e:	e7e2      	b.n	800c706 <__lo0bits+0x22>

0800c740 <__i2b>:
 800c740:	b510      	push	{r4, lr}
 800c742:	000c      	movs	r4, r1
 800c744:	2101      	movs	r1, #1
 800c746:	f7ff fef1 	bl	800c52c <_Balloc>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d107      	bne.n	800c75e <__i2b+0x1e>
 800c74e:	2146      	movs	r1, #70	; 0x46
 800c750:	4c05      	ldr	r4, [pc, #20]	; (800c768 <__i2b+0x28>)
 800c752:	0002      	movs	r2, r0
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <__i2b+0x2c>)
 800c756:	0020      	movs	r0, r4
 800c758:	31ff      	adds	r1, #255	; 0xff
 800c75a:	f003 f9ab 	bl	800fab4 <__assert_func>
 800c75e:	2301      	movs	r3, #1
 800c760:	6144      	str	r4, [r0, #20]
 800c762:	6103      	str	r3, [r0, #16]
 800c764:	bd10      	pop	{r4, pc}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	08014322 	.word	0x08014322
 800c76c:	080142b1 	.word	0x080142b1

0800c770 <__multiply>:
 800c770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c772:	0015      	movs	r5, r2
 800c774:	690a      	ldr	r2, [r1, #16]
 800c776:	692b      	ldr	r3, [r5, #16]
 800c778:	000c      	movs	r4, r1
 800c77a:	b08b      	sub	sp, #44	; 0x2c
 800c77c:	429a      	cmp	r2, r3
 800c77e:	da01      	bge.n	800c784 <__multiply+0x14>
 800c780:	002c      	movs	r4, r5
 800c782:	000d      	movs	r5, r1
 800c784:	6927      	ldr	r7, [r4, #16]
 800c786:	692e      	ldr	r6, [r5, #16]
 800c788:	6861      	ldr	r1, [r4, #4]
 800c78a:	19bb      	adds	r3, r7, r6
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	68a3      	ldr	r3, [r4, #8]
 800c790:	19ba      	adds	r2, r7, r6
 800c792:	4293      	cmp	r3, r2
 800c794:	da00      	bge.n	800c798 <__multiply+0x28>
 800c796:	3101      	adds	r1, #1
 800c798:	f7ff fec8 	bl	800c52c <_Balloc>
 800c79c:	9002      	str	r0, [sp, #8]
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d106      	bne.n	800c7b0 <__multiply+0x40>
 800c7a2:	21b1      	movs	r1, #177	; 0xb1
 800c7a4:	4b48      	ldr	r3, [pc, #288]	; (800c8c8 <__multiply+0x158>)
 800c7a6:	4849      	ldr	r0, [pc, #292]	; (800c8cc <__multiply+0x15c>)
 800c7a8:	9a02      	ldr	r2, [sp, #8]
 800c7aa:	0049      	lsls	r1, r1, #1
 800c7ac:	f003 f982 	bl	800fab4 <__assert_func>
 800c7b0:	9b02      	ldr	r3, [sp, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	469c      	mov	ip, r3
 800c7b8:	19bb      	adds	r3, r7, r6
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4463      	add	r3, ip
 800c7be:	9304      	str	r3, [sp, #16]
 800c7c0:	4663      	mov	r3, ip
 800c7c2:	9904      	ldr	r1, [sp, #16]
 800c7c4:	428b      	cmp	r3, r1
 800c7c6:	d32a      	bcc.n	800c81e <__multiply+0xae>
 800c7c8:	0023      	movs	r3, r4
 800c7ca:	00bf      	lsls	r7, r7, #2
 800c7cc:	3314      	adds	r3, #20
 800c7ce:	3514      	adds	r5, #20
 800c7d0:	9308      	str	r3, [sp, #32]
 800c7d2:	00b6      	lsls	r6, r6, #2
 800c7d4:	19db      	adds	r3, r3, r7
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	19ab      	adds	r3, r5, r6
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	2304      	movs	r3, #4
 800c7de:	9306      	str	r3, [sp, #24]
 800c7e0:	0023      	movs	r3, r4
 800c7e2:	9a05      	ldr	r2, [sp, #20]
 800c7e4:	3315      	adds	r3, #21
 800c7e6:	9501      	str	r5, [sp, #4]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d305      	bcc.n	800c7f8 <__multiply+0x88>
 800c7ec:	1b13      	subs	r3, r2, r4
 800c7ee:	3b15      	subs	r3, #21
 800c7f0:	089b      	lsrs	r3, r3, #2
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	9306      	str	r3, [sp, #24]
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d310      	bcc.n	800c822 <__multiply+0xb2>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd05      	ble.n	800c812 <__multiply+0xa2>
 800c806:	9b04      	ldr	r3, [sp, #16]
 800c808:	3b04      	subs	r3, #4
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d056      	beq.n	800c8c0 <__multiply+0x150>
 800c812:	9b02      	ldr	r3, [sp, #8]
 800c814:	9a03      	ldr	r2, [sp, #12]
 800c816:	0018      	movs	r0, r3
 800c818:	611a      	str	r2, [r3, #16]
 800c81a:	b00b      	add	sp, #44	; 0x2c
 800c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c81e:	c304      	stmia	r3!, {r2}
 800c820:	e7cf      	b.n	800c7c2 <__multiply+0x52>
 800c822:	9b01      	ldr	r3, [sp, #4]
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	b280      	uxth	r0, r0
 800c828:	2800      	cmp	r0, #0
 800c82a:	d01e      	beq.n	800c86a <__multiply+0xfa>
 800c82c:	4667      	mov	r7, ip
 800c82e:	2500      	movs	r5, #0
 800c830:	9e08      	ldr	r6, [sp, #32]
 800c832:	ce02      	ldmia	r6!, {r1}
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	9307      	str	r3, [sp, #28]
 800c838:	b28b      	uxth	r3, r1
 800c83a:	4343      	muls	r3, r0
 800c83c:	001a      	movs	r2, r3
 800c83e:	466b      	mov	r3, sp
 800c840:	8b9b      	ldrh	r3, [r3, #28]
 800c842:	18d3      	adds	r3, r2, r3
 800c844:	195b      	adds	r3, r3, r5
 800c846:	0c0d      	lsrs	r5, r1, #16
 800c848:	4345      	muls	r5, r0
 800c84a:	9a07      	ldr	r2, [sp, #28]
 800c84c:	0c11      	lsrs	r1, r2, #16
 800c84e:	1869      	adds	r1, r5, r1
 800c850:	0c1a      	lsrs	r2, r3, #16
 800c852:	188a      	adds	r2, r1, r2
 800c854:	b29b      	uxth	r3, r3
 800c856:	0c15      	lsrs	r5, r2, #16
 800c858:	0412      	lsls	r2, r2, #16
 800c85a:	431a      	orrs	r2, r3
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	c704      	stmia	r7!, {r2}
 800c860:	42b3      	cmp	r3, r6
 800c862:	d8e6      	bhi.n	800c832 <__multiply+0xc2>
 800c864:	4663      	mov	r3, ip
 800c866:	9a06      	ldr	r2, [sp, #24]
 800c868:	509d      	str	r5, [r3, r2]
 800c86a:	9b01      	ldr	r3, [sp, #4]
 800c86c:	6818      	ldr	r0, [r3, #0]
 800c86e:	0c00      	lsrs	r0, r0, #16
 800c870:	d020      	beq.n	800c8b4 <__multiply+0x144>
 800c872:	4663      	mov	r3, ip
 800c874:	0025      	movs	r5, r4
 800c876:	4661      	mov	r1, ip
 800c878:	2700      	movs	r7, #0
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3514      	adds	r5, #20
 800c87e:	682a      	ldr	r2, [r5, #0]
 800c880:	680e      	ldr	r6, [r1, #0]
 800c882:	b292      	uxth	r2, r2
 800c884:	4342      	muls	r2, r0
 800c886:	0c36      	lsrs	r6, r6, #16
 800c888:	1992      	adds	r2, r2, r6
 800c88a:	19d2      	adds	r2, r2, r7
 800c88c:	0416      	lsls	r6, r2, #16
 800c88e:	b29b      	uxth	r3, r3
 800c890:	431e      	orrs	r6, r3
 800c892:	600e      	str	r6, [r1, #0]
 800c894:	cd40      	ldmia	r5!, {r6}
 800c896:	684b      	ldr	r3, [r1, #4]
 800c898:	0c36      	lsrs	r6, r6, #16
 800c89a:	4346      	muls	r6, r0
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	0c12      	lsrs	r2, r2, #16
 800c8a0:	18f3      	adds	r3, r6, r3
 800c8a2:	189b      	adds	r3, r3, r2
 800c8a4:	9a05      	ldr	r2, [sp, #20]
 800c8a6:	0c1f      	lsrs	r7, r3, #16
 800c8a8:	3104      	adds	r1, #4
 800c8aa:	42aa      	cmp	r2, r5
 800c8ac:	d8e7      	bhi.n	800c87e <__multiply+0x10e>
 800c8ae:	4662      	mov	r2, ip
 800c8b0:	9906      	ldr	r1, [sp, #24]
 800c8b2:	5053      	str	r3, [r2, r1]
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	9301      	str	r3, [sp, #4]
 800c8ba:	2304      	movs	r3, #4
 800c8bc:	449c      	add	ip, r3
 800c8be:	e79b      	b.n	800c7f8 <__multiply+0x88>
 800c8c0:	9b03      	ldr	r3, [sp, #12]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	9303      	str	r3, [sp, #12]
 800c8c6:	e79b      	b.n	800c800 <__multiply+0x90>
 800c8c8:	080142b1 	.word	0x080142b1
 800c8cc:	08014322 	.word	0x08014322

0800c8d0 <__pow5mult>:
 800c8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	0015      	movs	r5, r2
 800c8d6:	0007      	movs	r7, r0
 800c8d8:	000e      	movs	r6, r1
 800c8da:	401a      	ands	r2, r3
 800c8dc:	421d      	tst	r5, r3
 800c8de:	d008      	beq.n	800c8f2 <__pow5mult+0x22>
 800c8e0:	491a      	ldr	r1, [pc, #104]	; (800c94c <__pow5mult+0x7c>)
 800c8e2:	3a01      	subs	r2, #1
 800c8e4:	0092      	lsls	r2, r2, #2
 800c8e6:	5852      	ldr	r2, [r2, r1]
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	0031      	movs	r1, r6
 800c8ec:	f7ff fe50 	bl	800c590 <__multadd>
 800c8f0:	0006      	movs	r6, r0
 800c8f2:	10ad      	asrs	r5, r5, #2
 800c8f4:	d027      	beq.n	800c946 <__pow5mult+0x76>
 800c8f6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c8f8:	2c00      	cmp	r4, #0
 800c8fa:	d107      	bne.n	800c90c <__pow5mult+0x3c>
 800c8fc:	0038      	movs	r0, r7
 800c8fe:	4914      	ldr	r1, [pc, #80]	; (800c950 <__pow5mult+0x80>)
 800c900:	f7ff ff1e 	bl	800c740 <__i2b>
 800c904:	2300      	movs	r3, #0
 800c906:	0004      	movs	r4, r0
 800c908:	6438      	str	r0, [r7, #64]	; 0x40
 800c90a:	6003      	str	r3, [r0, #0]
 800c90c:	2301      	movs	r3, #1
 800c90e:	421d      	tst	r5, r3
 800c910:	d00a      	beq.n	800c928 <__pow5mult+0x58>
 800c912:	0031      	movs	r1, r6
 800c914:	0022      	movs	r2, r4
 800c916:	0038      	movs	r0, r7
 800c918:	f7ff ff2a 	bl	800c770 <__multiply>
 800c91c:	0031      	movs	r1, r6
 800c91e:	9001      	str	r0, [sp, #4]
 800c920:	0038      	movs	r0, r7
 800c922:	f7ff fe2b 	bl	800c57c <_Bfree>
 800c926:	9e01      	ldr	r6, [sp, #4]
 800c928:	106d      	asrs	r5, r5, #1
 800c92a:	d00c      	beq.n	800c946 <__pow5mult+0x76>
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	2800      	cmp	r0, #0
 800c930:	d107      	bne.n	800c942 <__pow5mult+0x72>
 800c932:	0022      	movs	r2, r4
 800c934:	0021      	movs	r1, r4
 800c936:	0038      	movs	r0, r7
 800c938:	f7ff ff1a 	bl	800c770 <__multiply>
 800c93c:	2300      	movs	r3, #0
 800c93e:	6020      	str	r0, [r4, #0]
 800c940:	6003      	str	r3, [r0, #0]
 800c942:	0004      	movs	r4, r0
 800c944:	e7e2      	b.n	800c90c <__pow5mult+0x3c>
 800c946:	0030      	movs	r0, r6
 800c948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	08014470 	.word	0x08014470
 800c950:	00000271 	.word	0x00000271

0800c954 <__lshift>:
 800c954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c956:	000c      	movs	r4, r1
 800c958:	0017      	movs	r7, r2
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	1155      	asrs	r5, r2, #5
 800c95e:	b087      	sub	sp, #28
 800c960:	18eb      	adds	r3, r5, r3
 800c962:	9302      	str	r3, [sp, #8]
 800c964:	3301      	adds	r3, #1
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	6849      	ldr	r1, [r1, #4]
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	9004      	str	r0, [sp, #16]
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	4293      	cmp	r3, r2
 800c972:	db10      	blt.n	800c996 <__lshift+0x42>
 800c974:	9804      	ldr	r0, [sp, #16]
 800c976:	f7ff fdd9 	bl	800c52c <_Balloc>
 800c97a:	2300      	movs	r3, #0
 800c97c:	0002      	movs	r2, r0
 800c97e:	0006      	movs	r6, r0
 800c980:	0019      	movs	r1, r3
 800c982:	3214      	adds	r2, #20
 800c984:	4298      	cmp	r0, r3
 800c986:	d10c      	bne.n	800c9a2 <__lshift+0x4e>
 800c988:	31df      	adds	r1, #223	; 0xdf
 800c98a:	0032      	movs	r2, r6
 800c98c:	4b26      	ldr	r3, [pc, #152]	; (800ca28 <__lshift+0xd4>)
 800c98e:	4827      	ldr	r0, [pc, #156]	; (800ca2c <__lshift+0xd8>)
 800c990:	31ff      	adds	r1, #255	; 0xff
 800c992:	f003 f88f 	bl	800fab4 <__assert_func>
 800c996:	3101      	adds	r1, #1
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	e7e8      	b.n	800c96e <__lshift+0x1a>
 800c99c:	0098      	lsls	r0, r3, #2
 800c99e:	5011      	str	r1, [r2, r0]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	42ab      	cmp	r3, r5
 800c9a4:	dbfa      	blt.n	800c99c <__lshift+0x48>
 800c9a6:	43eb      	mvns	r3, r5
 800c9a8:	17db      	asrs	r3, r3, #31
 800c9aa:	401d      	ands	r5, r3
 800c9ac:	211f      	movs	r1, #31
 800c9ae:	0023      	movs	r3, r4
 800c9b0:	0038      	movs	r0, r7
 800c9b2:	00ad      	lsls	r5, r5, #2
 800c9b4:	1955      	adds	r5, r2, r5
 800c9b6:	6922      	ldr	r2, [r4, #16]
 800c9b8:	3314      	adds	r3, #20
 800c9ba:	0092      	lsls	r2, r2, #2
 800c9bc:	4008      	ands	r0, r1
 800c9be:	4684      	mov	ip, r0
 800c9c0:	189a      	adds	r2, r3, r2
 800c9c2:	420f      	tst	r7, r1
 800c9c4:	d02a      	beq.n	800ca1c <__lshift+0xc8>
 800c9c6:	3101      	adds	r1, #1
 800c9c8:	1a09      	subs	r1, r1, r0
 800c9ca:	9105      	str	r1, [sp, #20]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	9503      	str	r5, [sp, #12]
 800c9d0:	4667      	mov	r7, ip
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	40b8      	lsls	r0, r7
 800c9d6:	4308      	orrs	r0, r1
 800c9d8:	9903      	ldr	r1, [sp, #12]
 800c9da:	c101      	stmia	r1!, {r0}
 800c9dc:	9103      	str	r1, [sp, #12]
 800c9de:	9805      	ldr	r0, [sp, #20]
 800c9e0:	cb02      	ldmia	r3!, {r1}
 800c9e2:	40c1      	lsrs	r1, r0
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d8f3      	bhi.n	800c9d0 <__lshift+0x7c>
 800c9e8:	0020      	movs	r0, r4
 800c9ea:	3015      	adds	r0, #21
 800c9ec:	2304      	movs	r3, #4
 800c9ee:	4282      	cmp	r2, r0
 800c9f0:	d304      	bcc.n	800c9fc <__lshift+0xa8>
 800c9f2:	1b13      	subs	r3, r2, r4
 800c9f4:	3b15      	subs	r3, #21
 800c9f6:	089b      	lsrs	r3, r3, #2
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	50e9      	str	r1, [r5, r3]
 800c9fe:	2900      	cmp	r1, #0
 800ca00:	d002      	beq.n	800ca08 <__lshift+0xb4>
 800ca02:	9b02      	ldr	r3, [sp, #8]
 800ca04:	3302      	adds	r3, #2
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	9804      	ldr	r0, [sp, #16]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	0021      	movs	r1, r4
 800ca10:	6133      	str	r3, [r6, #16]
 800ca12:	f7ff fdb3 	bl	800c57c <_Bfree>
 800ca16:	0030      	movs	r0, r6
 800ca18:	b007      	add	sp, #28
 800ca1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca1c:	cb02      	ldmia	r3!, {r1}
 800ca1e:	c502      	stmia	r5!, {r1}
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d8fb      	bhi.n	800ca1c <__lshift+0xc8>
 800ca24:	e7f0      	b.n	800ca08 <__lshift+0xb4>
 800ca26:	46c0      	nop			; (mov r8, r8)
 800ca28:	080142b1 	.word	0x080142b1
 800ca2c:	08014322 	.word	0x08014322

0800ca30 <__mcmp>:
 800ca30:	b530      	push	{r4, r5, lr}
 800ca32:	690b      	ldr	r3, [r1, #16]
 800ca34:	6904      	ldr	r4, [r0, #16]
 800ca36:	0002      	movs	r2, r0
 800ca38:	1ae0      	subs	r0, r4, r3
 800ca3a:	429c      	cmp	r4, r3
 800ca3c:	d10e      	bne.n	800ca5c <__mcmp+0x2c>
 800ca3e:	3214      	adds	r2, #20
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	3114      	adds	r1, #20
 800ca44:	0014      	movs	r4, r2
 800ca46:	18c9      	adds	r1, r1, r3
 800ca48:	18d2      	adds	r2, r2, r3
 800ca4a:	3a04      	subs	r2, #4
 800ca4c:	3904      	subs	r1, #4
 800ca4e:	6815      	ldr	r5, [r2, #0]
 800ca50:	680b      	ldr	r3, [r1, #0]
 800ca52:	429d      	cmp	r5, r3
 800ca54:	d003      	beq.n	800ca5e <__mcmp+0x2e>
 800ca56:	2001      	movs	r0, #1
 800ca58:	429d      	cmp	r5, r3
 800ca5a:	d303      	bcc.n	800ca64 <__mcmp+0x34>
 800ca5c:	bd30      	pop	{r4, r5, pc}
 800ca5e:	4294      	cmp	r4, r2
 800ca60:	d3f3      	bcc.n	800ca4a <__mcmp+0x1a>
 800ca62:	e7fb      	b.n	800ca5c <__mcmp+0x2c>
 800ca64:	4240      	negs	r0, r0
 800ca66:	e7f9      	b.n	800ca5c <__mcmp+0x2c>

0800ca68 <__mdiff>:
 800ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6a:	000e      	movs	r6, r1
 800ca6c:	0007      	movs	r7, r0
 800ca6e:	0011      	movs	r1, r2
 800ca70:	0030      	movs	r0, r6
 800ca72:	b087      	sub	sp, #28
 800ca74:	0014      	movs	r4, r2
 800ca76:	f7ff ffdb 	bl	800ca30 <__mcmp>
 800ca7a:	1e05      	subs	r5, r0, #0
 800ca7c:	d110      	bne.n	800caa0 <__mdiff+0x38>
 800ca7e:	0001      	movs	r1, r0
 800ca80:	0038      	movs	r0, r7
 800ca82:	f7ff fd53 	bl	800c52c <_Balloc>
 800ca86:	1e02      	subs	r2, r0, #0
 800ca88:	d104      	bne.n	800ca94 <__mdiff+0x2c>
 800ca8a:	4b3f      	ldr	r3, [pc, #252]	; (800cb88 <__mdiff+0x120>)
 800ca8c:	483f      	ldr	r0, [pc, #252]	; (800cb8c <__mdiff+0x124>)
 800ca8e:	4940      	ldr	r1, [pc, #256]	; (800cb90 <__mdiff+0x128>)
 800ca90:	f003 f810 	bl	800fab4 <__assert_func>
 800ca94:	2301      	movs	r3, #1
 800ca96:	6145      	str	r5, [r0, #20]
 800ca98:	6103      	str	r3, [r0, #16]
 800ca9a:	0010      	movs	r0, r2
 800ca9c:	b007      	add	sp, #28
 800ca9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa0:	2301      	movs	r3, #1
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	2800      	cmp	r0, #0
 800caa6:	db04      	blt.n	800cab2 <__mdiff+0x4a>
 800caa8:	0023      	movs	r3, r4
 800caaa:	0034      	movs	r4, r6
 800caac:	001e      	movs	r6, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	0038      	movs	r0, r7
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	f7ff fd39 	bl	800c52c <_Balloc>
 800caba:	1e02      	subs	r2, r0, #0
 800cabc:	d103      	bne.n	800cac6 <__mdiff+0x5e>
 800cabe:	4b32      	ldr	r3, [pc, #200]	; (800cb88 <__mdiff+0x120>)
 800cac0:	4832      	ldr	r0, [pc, #200]	; (800cb8c <__mdiff+0x124>)
 800cac2:	4934      	ldr	r1, [pc, #208]	; (800cb94 <__mdiff+0x12c>)
 800cac4:	e7e4      	b.n	800ca90 <__mdiff+0x28>
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	2700      	movs	r7, #0
 800caca:	60c3      	str	r3, [r0, #12]
 800cacc:	6920      	ldr	r0, [r4, #16]
 800cace:	3414      	adds	r4, #20
 800cad0:	0083      	lsls	r3, r0, #2
 800cad2:	18e3      	adds	r3, r4, r3
 800cad4:	0021      	movs	r1, r4
 800cad6:	9401      	str	r4, [sp, #4]
 800cad8:	0034      	movs	r4, r6
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	6933      	ldr	r3, [r6, #16]
 800cade:	3414      	adds	r4, #20
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	18e3      	adds	r3, r4, r3
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	0013      	movs	r3, r2
 800cae8:	3314      	adds	r3, #20
 800caea:	469c      	mov	ip, r3
 800caec:	9305      	str	r3, [sp, #20]
 800caee:	9104      	str	r1, [sp, #16]
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	cc02      	ldmia	r4!, {r1}
 800caf4:	cb20      	ldmia	r3!, {r5}
 800caf6:	9304      	str	r3, [sp, #16]
 800caf8:	b2ab      	uxth	r3, r5
 800cafa:	19df      	adds	r7, r3, r7
 800cafc:	b28b      	uxth	r3, r1
 800cafe:	1afb      	subs	r3, r7, r3
 800cb00:	0c09      	lsrs	r1, r1, #16
 800cb02:	0c2d      	lsrs	r5, r5, #16
 800cb04:	1a6d      	subs	r5, r5, r1
 800cb06:	1419      	asrs	r1, r3, #16
 800cb08:	1869      	adds	r1, r5, r1
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	140f      	asrs	r7, r1, #16
 800cb0e:	0409      	lsls	r1, r1, #16
 800cb10:	4319      	orrs	r1, r3
 800cb12:	4663      	mov	r3, ip
 800cb14:	c302      	stmia	r3!, {r1}
 800cb16:	469c      	mov	ip, r3
 800cb18:	9b03      	ldr	r3, [sp, #12]
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	d8e8      	bhi.n	800caf0 <__mdiff+0x88>
 800cb1e:	0031      	movs	r1, r6
 800cb20:	9c03      	ldr	r4, [sp, #12]
 800cb22:	3115      	adds	r1, #21
 800cb24:	2304      	movs	r3, #4
 800cb26:	428c      	cmp	r4, r1
 800cb28:	d304      	bcc.n	800cb34 <__mdiff+0xcc>
 800cb2a:	1ba3      	subs	r3, r4, r6
 800cb2c:	3b15      	subs	r3, #21
 800cb2e:	089b      	lsrs	r3, r3, #2
 800cb30:	3301      	adds	r3, #1
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	9901      	ldr	r1, [sp, #4]
 800cb36:	18cd      	adds	r5, r1, r3
 800cb38:	9905      	ldr	r1, [sp, #20]
 800cb3a:	002e      	movs	r6, r5
 800cb3c:	18cb      	adds	r3, r1, r3
 800cb3e:	469c      	mov	ip, r3
 800cb40:	9902      	ldr	r1, [sp, #8]
 800cb42:	428e      	cmp	r6, r1
 800cb44:	d310      	bcc.n	800cb68 <__mdiff+0x100>
 800cb46:	9e02      	ldr	r6, [sp, #8]
 800cb48:	1ee9      	subs	r1, r5, #3
 800cb4a:	2400      	movs	r4, #0
 800cb4c:	428e      	cmp	r6, r1
 800cb4e:	d304      	bcc.n	800cb5a <__mdiff+0xf2>
 800cb50:	0031      	movs	r1, r6
 800cb52:	3103      	adds	r1, #3
 800cb54:	1b49      	subs	r1, r1, r5
 800cb56:	0889      	lsrs	r1, r1, #2
 800cb58:	008c      	lsls	r4, r1, #2
 800cb5a:	191b      	adds	r3, r3, r4
 800cb5c:	3b04      	subs	r3, #4
 800cb5e:	6819      	ldr	r1, [r3, #0]
 800cb60:	2900      	cmp	r1, #0
 800cb62:	d00f      	beq.n	800cb84 <__mdiff+0x11c>
 800cb64:	6110      	str	r0, [r2, #16]
 800cb66:	e798      	b.n	800ca9a <__mdiff+0x32>
 800cb68:	ce02      	ldmia	r6!, {r1}
 800cb6a:	b28c      	uxth	r4, r1
 800cb6c:	19e4      	adds	r4, r4, r7
 800cb6e:	0c0f      	lsrs	r7, r1, #16
 800cb70:	1421      	asrs	r1, r4, #16
 800cb72:	1879      	adds	r1, r7, r1
 800cb74:	b2a4      	uxth	r4, r4
 800cb76:	140f      	asrs	r7, r1, #16
 800cb78:	0409      	lsls	r1, r1, #16
 800cb7a:	4321      	orrs	r1, r4
 800cb7c:	4664      	mov	r4, ip
 800cb7e:	c402      	stmia	r4!, {r1}
 800cb80:	46a4      	mov	ip, r4
 800cb82:	e7dd      	b.n	800cb40 <__mdiff+0xd8>
 800cb84:	3801      	subs	r0, #1
 800cb86:	e7e9      	b.n	800cb5c <__mdiff+0xf4>
 800cb88:	080142b1 	.word	0x080142b1
 800cb8c:	08014322 	.word	0x08014322
 800cb90:	00000237 	.word	0x00000237
 800cb94:	00000245 	.word	0x00000245

0800cb98 <__ulp>:
 800cb98:	2000      	movs	r0, #0
 800cb9a:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <__ulp+0x30>)
 800cb9c:	4019      	ands	r1, r3
 800cb9e:	4b0b      	ldr	r3, [pc, #44]	; (800cbcc <__ulp+0x34>)
 800cba0:	18c9      	adds	r1, r1, r3
 800cba2:	4281      	cmp	r1, r0
 800cba4:	dc06      	bgt.n	800cbb4 <__ulp+0x1c>
 800cba6:	4249      	negs	r1, r1
 800cba8:	150b      	asrs	r3, r1, #20
 800cbaa:	2b13      	cmp	r3, #19
 800cbac:	dc03      	bgt.n	800cbb6 <__ulp+0x1e>
 800cbae:	2180      	movs	r1, #128	; 0x80
 800cbb0:	0309      	lsls	r1, r1, #12
 800cbb2:	4119      	asrs	r1, r3
 800cbb4:	4770      	bx	lr
 800cbb6:	3b14      	subs	r3, #20
 800cbb8:	2001      	movs	r0, #1
 800cbba:	2b1e      	cmp	r3, #30
 800cbbc:	dc02      	bgt.n	800cbc4 <__ulp+0x2c>
 800cbbe:	2080      	movs	r0, #128	; 0x80
 800cbc0:	0600      	lsls	r0, r0, #24
 800cbc2:	40d8      	lsrs	r0, r3
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	e7f5      	b.n	800cbb4 <__ulp+0x1c>
 800cbc8:	7ff00000 	.word	0x7ff00000
 800cbcc:	fcc00000 	.word	0xfcc00000

0800cbd0 <__b2d>:
 800cbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd2:	0006      	movs	r6, r0
 800cbd4:	6903      	ldr	r3, [r0, #16]
 800cbd6:	3614      	adds	r6, #20
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	18f3      	adds	r3, r6, r3
 800cbdc:	1f1d      	subs	r5, r3, #4
 800cbde:	682c      	ldr	r4, [r5, #0]
 800cbe0:	000f      	movs	r7, r1
 800cbe2:	0020      	movs	r0, r4
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	f7ff fd63 	bl	800c6b0 <__hi0bits>
 800cbea:	2220      	movs	r2, #32
 800cbec:	1a12      	subs	r2, r2, r0
 800cbee:	603a      	str	r2, [r7, #0]
 800cbf0:	0003      	movs	r3, r0
 800cbf2:	4a1c      	ldr	r2, [pc, #112]	; (800cc64 <__b2d+0x94>)
 800cbf4:	280a      	cmp	r0, #10
 800cbf6:	dc15      	bgt.n	800cc24 <__b2d+0x54>
 800cbf8:	210b      	movs	r1, #11
 800cbfa:	0027      	movs	r7, r4
 800cbfc:	1a09      	subs	r1, r1, r0
 800cbfe:	40cf      	lsrs	r7, r1
 800cc00:	433a      	orrs	r2, r7
 800cc02:	468c      	mov	ip, r1
 800cc04:	0011      	movs	r1, r2
 800cc06:	2200      	movs	r2, #0
 800cc08:	42ae      	cmp	r6, r5
 800cc0a:	d202      	bcs.n	800cc12 <__b2d+0x42>
 800cc0c:	9a01      	ldr	r2, [sp, #4]
 800cc0e:	3a08      	subs	r2, #8
 800cc10:	6812      	ldr	r2, [r2, #0]
 800cc12:	3315      	adds	r3, #21
 800cc14:	409c      	lsls	r4, r3
 800cc16:	4663      	mov	r3, ip
 800cc18:	0027      	movs	r7, r4
 800cc1a:	40da      	lsrs	r2, r3
 800cc1c:	4317      	orrs	r7, r2
 800cc1e:	0038      	movs	r0, r7
 800cc20:	b003      	add	sp, #12
 800cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc24:	2700      	movs	r7, #0
 800cc26:	42ae      	cmp	r6, r5
 800cc28:	d202      	bcs.n	800cc30 <__b2d+0x60>
 800cc2a:	9d01      	ldr	r5, [sp, #4]
 800cc2c:	3d08      	subs	r5, #8
 800cc2e:	682f      	ldr	r7, [r5, #0]
 800cc30:	210b      	movs	r1, #11
 800cc32:	4249      	negs	r1, r1
 800cc34:	468c      	mov	ip, r1
 800cc36:	449c      	add	ip, r3
 800cc38:	2b0b      	cmp	r3, #11
 800cc3a:	d010      	beq.n	800cc5e <__b2d+0x8e>
 800cc3c:	4661      	mov	r1, ip
 800cc3e:	2320      	movs	r3, #32
 800cc40:	408c      	lsls	r4, r1
 800cc42:	1a5b      	subs	r3, r3, r1
 800cc44:	0039      	movs	r1, r7
 800cc46:	40d9      	lsrs	r1, r3
 800cc48:	430c      	orrs	r4, r1
 800cc4a:	4322      	orrs	r2, r4
 800cc4c:	0011      	movs	r1, r2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	42b5      	cmp	r5, r6
 800cc52:	d901      	bls.n	800cc58 <__b2d+0x88>
 800cc54:	3d04      	subs	r5, #4
 800cc56:	682a      	ldr	r2, [r5, #0]
 800cc58:	4664      	mov	r4, ip
 800cc5a:	40a7      	lsls	r7, r4
 800cc5c:	e7dd      	b.n	800cc1a <__b2d+0x4a>
 800cc5e:	4322      	orrs	r2, r4
 800cc60:	0011      	movs	r1, r2
 800cc62:	e7dc      	b.n	800cc1e <__b2d+0x4e>
 800cc64:	3ff00000 	.word	0x3ff00000

0800cc68 <__d2b>:
 800cc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	0014      	movs	r4, r2
 800cc6e:	001d      	movs	r5, r3
 800cc70:	9f08      	ldr	r7, [sp, #32]
 800cc72:	f7ff fc5b 	bl	800c52c <_Balloc>
 800cc76:	1e06      	subs	r6, r0, #0
 800cc78:	d105      	bne.n	800cc86 <__d2b+0x1e>
 800cc7a:	0032      	movs	r2, r6
 800cc7c:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <__d2b+0xa8>)
 800cc7e:	4825      	ldr	r0, [pc, #148]	; (800cd14 <__d2b+0xac>)
 800cc80:	4925      	ldr	r1, [pc, #148]	; (800cd18 <__d2b+0xb0>)
 800cc82:	f002 ff17 	bl	800fab4 <__assert_func>
 800cc86:	032b      	lsls	r3, r5, #12
 800cc88:	006d      	lsls	r5, r5, #1
 800cc8a:	0b1b      	lsrs	r3, r3, #12
 800cc8c:	0d6d      	lsrs	r5, r5, #21
 800cc8e:	d125      	bne.n	800ccdc <__d2b+0x74>
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	2c00      	cmp	r4, #0
 800cc94:	d028      	beq.n	800cce8 <__d2b+0x80>
 800cc96:	4668      	mov	r0, sp
 800cc98:	9400      	str	r4, [sp, #0]
 800cc9a:	f7ff fd23 	bl	800c6e4 <__lo0bits>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	9900      	ldr	r1, [sp, #0]
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d01e      	beq.n	800cce4 <__d2b+0x7c>
 800cca6:	2220      	movs	r2, #32
 800cca8:	001c      	movs	r4, r3
 800ccaa:	1a12      	subs	r2, r2, r0
 800ccac:	4094      	lsls	r4, r2
 800ccae:	0022      	movs	r2, r4
 800ccb0:	40c3      	lsrs	r3, r0
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	6172      	str	r2, [r6, #20]
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	9c01      	ldr	r4, [sp, #4]
 800ccba:	61b4      	str	r4, [r6, #24]
 800ccbc:	1e63      	subs	r3, r4, #1
 800ccbe:	419c      	sbcs	r4, r3
 800ccc0:	3401      	adds	r4, #1
 800ccc2:	6134      	str	r4, [r6, #16]
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	d017      	beq.n	800ccf8 <__d2b+0x90>
 800ccc8:	2435      	movs	r4, #53	; 0x35
 800ccca:	4b14      	ldr	r3, [pc, #80]	; (800cd1c <__d2b+0xb4>)
 800cccc:	18ed      	adds	r5, r5, r3
 800ccce:	182d      	adds	r5, r5, r0
 800ccd0:	603d      	str	r5, [r7, #0]
 800ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd4:	1a24      	subs	r4, r4, r0
 800ccd6:	601c      	str	r4, [r3, #0]
 800ccd8:	0030      	movs	r0, r6
 800ccda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccdc:	2280      	movs	r2, #128	; 0x80
 800ccde:	0352      	lsls	r2, r2, #13
 800cce0:	4313      	orrs	r3, r2
 800cce2:	e7d5      	b.n	800cc90 <__d2b+0x28>
 800cce4:	6171      	str	r1, [r6, #20]
 800cce6:	e7e7      	b.n	800ccb8 <__d2b+0x50>
 800cce8:	a801      	add	r0, sp, #4
 800ccea:	f7ff fcfb 	bl	800c6e4 <__lo0bits>
 800ccee:	9b01      	ldr	r3, [sp, #4]
 800ccf0:	2401      	movs	r4, #1
 800ccf2:	6173      	str	r3, [r6, #20]
 800ccf4:	3020      	adds	r0, #32
 800ccf6:	e7e4      	b.n	800ccc2 <__d2b+0x5a>
 800ccf8:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <__d2b+0xb8>)
 800ccfa:	18c0      	adds	r0, r0, r3
 800ccfc:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <__d2b+0xbc>)
 800ccfe:	6038      	str	r0, [r7, #0]
 800cd00:	18e3      	adds	r3, r4, r3
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	18f3      	adds	r3, r6, r3
 800cd06:	6958      	ldr	r0, [r3, #20]
 800cd08:	f7ff fcd2 	bl	800c6b0 <__hi0bits>
 800cd0c:	0164      	lsls	r4, r4, #5
 800cd0e:	e7e0      	b.n	800ccd2 <__d2b+0x6a>
 800cd10:	080142b1 	.word	0x080142b1
 800cd14:	08014322 	.word	0x08014322
 800cd18:	0000030f 	.word	0x0000030f
 800cd1c:	fffffbcd 	.word	0xfffffbcd
 800cd20:	fffffbce 	.word	0xfffffbce
 800cd24:	3fffffff 	.word	0x3fffffff

0800cd28 <__ratio>:
 800cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	000f      	movs	r7, r1
 800cd2e:	a904      	add	r1, sp, #16
 800cd30:	0006      	movs	r6, r0
 800cd32:	f7ff ff4d 	bl	800cbd0 <__b2d>
 800cd36:	9000      	str	r0, [sp, #0]
 800cd38:	9101      	str	r1, [sp, #4]
 800cd3a:	9c00      	ldr	r4, [sp, #0]
 800cd3c:	9d01      	ldr	r5, [sp, #4]
 800cd3e:	0038      	movs	r0, r7
 800cd40:	a905      	add	r1, sp, #20
 800cd42:	f7ff ff45 	bl	800cbd0 <__b2d>
 800cd46:	9002      	str	r0, [sp, #8]
 800cd48:	9103      	str	r1, [sp, #12]
 800cd4a:	9a02      	ldr	r2, [sp, #8]
 800cd4c:	9b03      	ldr	r3, [sp, #12]
 800cd4e:	6930      	ldr	r0, [r6, #16]
 800cd50:	6939      	ldr	r1, [r7, #16]
 800cd52:	9e04      	ldr	r6, [sp, #16]
 800cd54:	1a40      	subs	r0, r0, r1
 800cd56:	9905      	ldr	r1, [sp, #20]
 800cd58:	0140      	lsls	r0, r0, #5
 800cd5a:	1a71      	subs	r1, r6, r1
 800cd5c:	1841      	adds	r1, r0, r1
 800cd5e:	0508      	lsls	r0, r1, #20
 800cd60:	2900      	cmp	r1, #0
 800cd62:	dd07      	ble.n	800cd74 <__ratio+0x4c>
 800cd64:	9901      	ldr	r1, [sp, #4]
 800cd66:	1845      	adds	r5, r0, r1
 800cd68:	0020      	movs	r0, r4
 800cd6a:	0029      	movs	r1, r5
 800cd6c:	f7f4 f884 	bl	8000e78 <__aeabi_ddiv>
 800cd70:	b007      	add	sp, #28
 800cd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd74:	9903      	ldr	r1, [sp, #12]
 800cd76:	1a0b      	subs	r3, r1, r0
 800cd78:	e7f6      	b.n	800cd68 <__ratio+0x40>

0800cd7a <__copybits>:
 800cd7a:	b570      	push	{r4, r5, r6, lr}
 800cd7c:	0014      	movs	r4, r2
 800cd7e:	0005      	movs	r5, r0
 800cd80:	3901      	subs	r1, #1
 800cd82:	6913      	ldr	r3, [r2, #16]
 800cd84:	1149      	asrs	r1, r1, #5
 800cd86:	3101      	adds	r1, #1
 800cd88:	0089      	lsls	r1, r1, #2
 800cd8a:	3414      	adds	r4, #20
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	1841      	adds	r1, r0, r1
 800cd90:	18e3      	adds	r3, r4, r3
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	d80d      	bhi.n	800cdb2 <__copybits+0x38>
 800cd96:	0014      	movs	r4, r2
 800cd98:	3411      	adds	r4, #17
 800cd9a:	2500      	movs	r5, #0
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	d803      	bhi.n	800cda8 <__copybits+0x2e>
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	3b11      	subs	r3, #17
 800cda4:	089b      	lsrs	r3, r3, #2
 800cda6:	009d      	lsls	r5, r3, #2
 800cda8:	2300      	movs	r3, #0
 800cdaa:	1940      	adds	r0, r0, r5
 800cdac:	4281      	cmp	r1, r0
 800cdae:	d803      	bhi.n	800cdb8 <__copybits+0x3e>
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	cc40      	ldmia	r4!, {r6}
 800cdb4:	c540      	stmia	r5!, {r6}
 800cdb6:	e7ec      	b.n	800cd92 <__copybits+0x18>
 800cdb8:	c008      	stmia	r0!, {r3}
 800cdba:	e7f7      	b.n	800cdac <__copybits+0x32>

0800cdbc <__any_on>:
 800cdbc:	0002      	movs	r2, r0
 800cdbe:	6900      	ldr	r0, [r0, #16]
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	3214      	adds	r2, #20
 800cdc4:	114b      	asrs	r3, r1, #5
 800cdc6:	4298      	cmp	r0, r3
 800cdc8:	db13      	blt.n	800cdf2 <__any_on+0x36>
 800cdca:	dd0c      	ble.n	800cde6 <__any_on+0x2a>
 800cdcc:	241f      	movs	r4, #31
 800cdce:	0008      	movs	r0, r1
 800cdd0:	4020      	ands	r0, r4
 800cdd2:	4221      	tst	r1, r4
 800cdd4:	d007      	beq.n	800cde6 <__any_on+0x2a>
 800cdd6:	0099      	lsls	r1, r3, #2
 800cdd8:	588c      	ldr	r4, [r1, r2]
 800cdda:	0021      	movs	r1, r4
 800cddc:	40c1      	lsrs	r1, r0
 800cdde:	4081      	lsls	r1, r0
 800cde0:	2001      	movs	r0, #1
 800cde2:	428c      	cmp	r4, r1
 800cde4:	d104      	bne.n	800cdf0 <__any_on+0x34>
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	18d3      	adds	r3, r2, r3
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d803      	bhi.n	800cdf6 <__any_on+0x3a>
 800cdee:	2000      	movs	r0, #0
 800cdf0:	bd10      	pop	{r4, pc}
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	e7f7      	b.n	800cde6 <__any_on+0x2a>
 800cdf6:	3b04      	subs	r3, #4
 800cdf8:	6819      	ldr	r1, [r3, #0]
 800cdfa:	2900      	cmp	r1, #0
 800cdfc:	d0f5      	beq.n	800cdea <__any_on+0x2e>
 800cdfe:	2001      	movs	r0, #1
 800ce00:	e7f6      	b.n	800cdf0 <__any_on+0x34>

0800ce02 <__ascii_wctomb>:
 800ce02:	0003      	movs	r3, r0
 800ce04:	1e08      	subs	r0, r1, #0
 800ce06:	d005      	beq.n	800ce14 <__ascii_wctomb+0x12>
 800ce08:	2aff      	cmp	r2, #255	; 0xff
 800ce0a:	d904      	bls.n	800ce16 <__ascii_wctomb+0x14>
 800ce0c:	228a      	movs	r2, #138	; 0x8a
 800ce0e:	2001      	movs	r0, #1
 800ce10:	601a      	str	r2, [r3, #0]
 800ce12:	4240      	negs	r0, r0
 800ce14:	4770      	bx	lr
 800ce16:	2001      	movs	r0, #1
 800ce18:	700a      	strb	r2, [r1, #0]
 800ce1a:	e7fb      	b.n	800ce14 <__ascii_wctomb+0x12>

0800ce1c <_svfprintf_r>:
 800ce1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1e:	b0d9      	sub	sp, #356	; 0x164
 800ce20:	001c      	movs	r4, r3
 800ce22:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce24:	9208      	str	r2, [sp, #32]
 800ce26:	900a      	str	r0, [sp, #40]	; 0x28
 800ce28:	f002 fdae 	bl	800f988 <_localeconv_r>
 800ce2c:	6803      	ldr	r3, [r0, #0]
 800ce2e:	0018      	movs	r0, r3
 800ce30:	931c      	str	r3, [sp, #112]	; 0x70
 800ce32:	f7f3 f967 	bl	8000104 <strlen>
 800ce36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce38:	9016      	str	r0, [sp, #88]	; 0x58
 800ce3a:	899b      	ldrh	r3, [r3, #12]
 800ce3c:	061b      	lsls	r3, r3, #24
 800ce3e:	d517      	bpl.n	800ce70 <_svfprintf_r+0x54>
 800ce40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d113      	bne.n	800ce70 <_svfprintf_r+0x54>
 800ce48:	2140      	movs	r1, #64	; 0x40
 800ce4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce4c:	f7fd fb6e 	bl	800a52c <_malloc_r>
 800ce50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce52:	6018      	str	r0, [r3, #0]
 800ce54:	6118      	str	r0, [r3, #16]
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d107      	bne.n	800ce6a <_svfprintf_r+0x4e>
 800ce5a:	230c      	movs	r3, #12
 800ce5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	3b0d      	subs	r3, #13
 800ce62:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce66:	b059      	add	sp, #356	; 0x164
 800ce68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce6a:	2340      	movs	r3, #64	; 0x40
 800ce6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce6e:	6153      	str	r3, [r2, #20]
 800ce70:	2300      	movs	r3, #0
 800ce72:	2200      	movs	r2, #0
 800ce74:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce78:	930e      	str	r3, [sp, #56]	; 0x38
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9214      	str	r2, [sp, #80]	; 0x50
 800ce7e:	9315      	str	r3, [sp, #84]	; 0x54
 800ce80:	2300      	movs	r3, #0
 800ce82:	af2f      	add	r7, sp, #188	; 0xbc
 800ce84:	972c      	str	r7, [sp, #176]	; 0xb0
 800ce86:	931f      	str	r3, [sp, #124]	; 0x7c
 800ce88:	931e      	str	r3, [sp, #120]	; 0x78
 800ce8a:	9312      	str	r3, [sp, #72]	; 0x48
 800ce8c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce8e:	931d      	str	r3, [sp, #116]	; 0x74
 800ce90:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce92:	9d08      	ldr	r5, [sp, #32]
 800ce94:	782b      	ldrb	r3, [r5, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <_svfprintf_r+0x84>
 800ce9a:	2b25      	cmp	r3, #37	; 0x25
 800ce9c:	d000      	beq.n	800cea0 <_svfprintf_r+0x84>
 800ce9e:	e091      	b.n	800cfc4 <_svfprintf_r+0x1a8>
 800cea0:	9b08      	ldr	r3, [sp, #32]
 800cea2:	1aee      	subs	r6, r5, r3
 800cea4:	429d      	cmp	r5, r3
 800cea6:	d016      	beq.n	800ced6 <_svfprintf_r+0xba>
 800cea8:	603b      	str	r3, [r7, #0]
 800ceaa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ceac:	607e      	str	r6, [r7, #4]
 800ceae:	199b      	adds	r3, r3, r6
 800ceb0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ceb2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	932d      	str	r3, [sp, #180]	; 0xb4
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	dd08      	ble.n	800ced0 <_svfprintf_r+0xb4>
 800cebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cec0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cec2:	aa2c      	add	r2, sp, #176	; 0xb0
 800cec4:	f004 f8c0 	bl	8011048 <__ssprint_r>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d000      	beq.n	800cece <_svfprintf_r+0xb2>
 800cecc:	e1cf      	b.n	800d26e <_svfprintf_r+0x452>
 800cece:	af2f      	add	r7, sp, #188	; 0xbc
 800ced0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ced2:	199b      	adds	r3, r3, r6
 800ced4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ced6:	782b      	ldrb	r3, [r5, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <_svfprintf_r+0xc4>
 800cedc:	f001 f99e 	bl	800e21c <_svfprintf_r+0x1400>
 800cee0:	221b      	movs	r2, #27
 800cee2:	2300      	movs	r3, #0
 800cee4:	a91e      	add	r1, sp, #120	; 0x78
 800cee6:	1852      	adds	r2, r2, r1
 800cee8:	7013      	strb	r3, [r2, #0]
 800ceea:	2201      	movs	r2, #1
 800ceec:	001e      	movs	r6, r3
 800ceee:	4252      	negs	r2, r2
 800cef0:	3501      	adds	r5, #1
 800cef2:	9209      	str	r2, [sp, #36]	; 0x24
 800cef4:	9318      	str	r3, [sp, #96]	; 0x60
 800cef6:	1c6b      	adds	r3, r5, #1
 800cef8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cefa:	782b      	ldrb	r3, [r5, #0]
 800cefc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cefe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cf00:	3820      	subs	r0, #32
 800cf02:	285a      	cmp	r0, #90	; 0x5a
 800cf04:	d901      	bls.n	800cf0a <_svfprintf_r+0xee>
 800cf06:	f000 fe20 	bl	800db4a <_svfprintf_r+0xd2e>
 800cf0a:	f7f3 f90d 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cf0e:	0078      	.short	0x0078
 800cf10:	061e061e 	.word	0x061e061e
 800cf14:	061e0082 	.word	0x061e0082
 800cf18:	061e061e 	.word	0x061e061e
 800cf1c:	061e005d 	.word	0x061e005d
 800cf20:	0084061e 	.word	0x0084061e
 800cf24:	061e008c 	.word	0x061e008c
 800cf28:	0091008a 	.word	0x0091008a
 800cf2c:	00b2061e 	.word	0x00b2061e
 800cf30:	00b400b4 	.word	0x00b400b4
 800cf34:	00b400b4 	.word	0x00b400b4
 800cf38:	00b400b4 	.word	0x00b400b4
 800cf3c:	00b400b4 	.word	0x00b400b4
 800cf40:	061e00b4 	.word	0x061e00b4
 800cf44:	061e061e 	.word	0x061e061e
 800cf48:	061e061e 	.word	0x061e061e
 800cf4c:	061e061e 	.word	0x061e061e
 800cf50:	061e013b 	.word	0x061e013b
 800cf54:	00f400e0 	.word	0x00f400e0
 800cf58:	013b013b 	.word	0x013b013b
 800cf5c:	061e013b 	.word	0x061e013b
 800cf60:	061e061e 	.word	0x061e061e
 800cf64:	00c7061e 	.word	0x00c7061e
 800cf68:	061e061e 	.word	0x061e061e
 800cf6c:	061e04c7 	.word	0x061e04c7
 800cf70:	061e061e 	.word	0x061e061e
 800cf74:	061e050a 	.word	0x061e050a
 800cf78:	061e052a 	.word	0x061e052a
 800cf7c:	055c061e 	.word	0x055c061e
 800cf80:	061e061e 	.word	0x061e061e
 800cf84:	061e061e 	.word	0x061e061e
 800cf88:	061e061e 	.word	0x061e061e
 800cf8c:	061e061e 	.word	0x061e061e
 800cf90:	061e013b 	.word	0x061e013b
 800cf94:	00f600e0 	.word	0x00f600e0
 800cf98:	013b013b 	.word	0x013b013b
 800cf9c:	00c9013b 	.word	0x00c9013b
 800cfa0:	00dc00f6 	.word	0x00dc00f6
 800cfa4:	00d5061e 	.word	0x00d5061e
 800cfa8:	04a7061e 	.word	0x04a7061e
 800cfac:	04fa04c9 	.word	0x04fa04c9
 800cfb0:	061e00dc 	.word	0x061e00dc
 800cfb4:	0080050a 	.word	0x0080050a
 800cfb8:	061e052c 	.word	0x061e052c
 800cfbc:	057c061e 	.word	0x057c061e
 800cfc0:	0080061e 	.word	0x0080061e
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	e765      	b.n	800ce94 <_svfprintf_r+0x78>
 800cfc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfca:	f002 fcdd 	bl	800f988 <_localeconv_r>
 800cfce:	6843      	ldr	r3, [r0, #4]
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	931d      	str	r3, [sp, #116]	; 0x74
 800cfd4:	f7f3 f896 	bl	8000104 <strlen>
 800cfd8:	901b      	str	r0, [sp, #108]	; 0x6c
 800cfda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfdc:	f002 fcd4 	bl	800f988 <_localeconv_r>
 800cfe0:	6883      	ldr	r3, [r0, #8]
 800cfe2:	9312      	str	r3, [sp, #72]	; 0x48
 800cfe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d011      	beq.n	800d00e <_svfprintf_r+0x1f2>
 800cfea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00e      	beq.n	800d00e <_svfprintf_r+0x1f2>
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <_svfprintf_r+0x1f2>
 800cff6:	2380      	movs	r3, #128	; 0x80
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	431e      	orrs	r6, r3
 800cffc:	e007      	b.n	800d00e <_svfprintf_r+0x1f2>
 800cffe:	231b      	movs	r3, #27
 800d000:	aa1e      	add	r2, sp, #120	; 0x78
 800d002:	189b      	adds	r3, r3, r2
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	2a00      	cmp	r2, #0
 800d008:	d101      	bne.n	800d00e <_svfprintf_r+0x1f2>
 800d00a:	3220      	adds	r2, #32
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d010:	e771      	b.n	800cef6 <_svfprintf_r+0xda>
 800d012:	2301      	movs	r3, #1
 800d014:	e7f1      	b.n	800cffa <_svfprintf_r+0x1de>
 800d016:	cc08      	ldmia	r4!, {r3}
 800d018:	9318      	str	r3, [sp, #96]	; 0x60
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	daf7      	bge.n	800d00e <_svfprintf_r+0x1f2>
 800d01e:	425b      	negs	r3, r3
 800d020:	9318      	str	r3, [sp, #96]	; 0x60
 800d022:	2304      	movs	r3, #4
 800d024:	e7e9      	b.n	800cffa <_svfprintf_r+0x1de>
 800d026:	231b      	movs	r3, #27
 800d028:	aa1e      	add	r2, sp, #120	; 0x78
 800d02a:	189b      	adds	r3, r3, r2
 800d02c:	222b      	movs	r2, #43	; 0x2b
 800d02e:	e7ed      	b.n	800d00c <_svfprintf_r+0x1f0>
 800d030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d034:	7812      	ldrb	r2, [r2, #0]
 800d036:	3301      	adds	r3, #1
 800d038:	920f      	str	r2, [sp, #60]	; 0x3c
 800d03a:	2a2a      	cmp	r2, #42	; 0x2a
 800d03c:	d010      	beq.n	800d060 <_svfprintf_r+0x244>
 800d03e:	2200      	movs	r2, #0
 800d040:	9209      	str	r2, [sp, #36]	; 0x24
 800d042:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d044:	9313      	str	r3, [sp, #76]	; 0x4c
 800d046:	3a30      	subs	r2, #48	; 0x30
 800d048:	2a09      	cmp	r2, #9
 800d04a:	d900      	bls.n	800d04e <_svfprintf_r+0x232>
 800d04c:	e757      	b.n	800cefe <_svfprintf_r+0xe2>
 800d04e:	200a      	movs	r0, #10
 800d050:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d052:	4341      	muls	r1, r0
 800d054:	188a      	adds	r2, r1, r2
 800d056:	9209      	str	r2, [sp, #36]	; 0x24
 800d058:	781a      	ldrb	r2, [r3, #0]
 800d05a:	3301      	adds	r3, #1
 800d05c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d05e:	e7f0      	b.n	800d042 <_svfprintf_r+0x226>
 800d060:	cc04      	ldmia	r4!, {r2}
 800d062:	9209      	str	r2, [sp, #36]	; 0x24
 800d064:	2a00      	cmp	r2, #0
 800d066:	da02      	bge.n	800d06e <_svfprintf_r+0x252>
 800d068:	2201      	movs	r2, #1
 800d06a:	4252      	negs	r2, r2
 800d06c:	9209      	str	r2, [sp, #36]	; 0x24
 800d06e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d070:	e7cd      	b.n	800d00e <_svfprintf_r+0x1f2>
 800d072:	2380      	movs	r3, #128	; 0x80
 800d074:	e7c1      	b.n	800cffa <_svfprintf_r+0x1de>
 800d076:	2200      	movs	r2, #0
 800d078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d07a:	9218      	str	r2, [sp, #96]	; 0x60
 800d07c:	210a      	movs	r1, #10
 800d07e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d080:	434a      	muls	r2, r1
 800d082:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d084:	3930      	subs	r1, #48	; 0x30
 800d086:	188a      	adds	r2, r1, r2
 800d088:	9218      	str	r2, [sp, #96]	; 0x60
 800d08a:	001a      	movs	r2, r3
 800d08c:	7812      	ldrb	r2, [r2, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	920f      	str	r2, [sp, #60]	; 0x3c
 800d092:	3a30      	subs	r2, #48	; 0x30
 800d094:	9313      	str	r3, [sp, #76]	; 0x4c
 800d096:	2a09      	cmp	r2, #9
 800d098:	d9f0      	bls.n	800d07c <_svfprintf_r+0x260>
 800d09a:	e730      	b.n	800cefe <_svfprintf_r+0xe2>
 800d09c:	2308      	movs	r3, #8
 800d09e:	e7ac      	b.n	800cffa <_svfprintf_r+0x1de>
 800d0a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2b68      	cmp	r3, #104	; 0x68
 800d0a6:	d105      	bne.n	800d0b4 <_svfprintf_r+0x298>
 800d0a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0ae:	2380      	movs	r3, #128	; 0x80
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	e7a2      	b.n	800cffa <_svfprintf_r+0x1de>
 800d0b4:	2340      	movs	r3, #64	; 0x40
 800d0b6:	e7a0      	b.n	800cffa <_svfprintf_r+0x1de>
 800d0b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b6c      	cmp	r3, #108	; 0x6c
 800d0be:	d104      	bne.n	800d0ca <_svfprintf_r+0x2ae>
 800d0c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0c6:	2320      	movs	r3, #32
 800d0c8:	e797      	b.n	800cffa <_svfprintf_r+0x1de>
 800d0ca:	2310      	movs	r3, #16
 800d0cc:	e795      	b.n	800cffa <_svfprintf_r+0x1de>
 800d0ce:	0021      	movs	r1, r4
 800d0d0:	c904      	ldmia	r1!, {r2}
 800d0d2:	ab3f      	add	r3, sp, #252	; 0xfc
 800d0d4:	910d      	str	r1, [sp, #52]	; 0x34
 800d0d6:	211b      	movs	r1, #27
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	a81e      	add	r0, sp, #120	; 0x78
 800d0de:	1809      	adds	r1, r1, r0
 800d0e0:	700a      	strb	r2, [r1, #0]
 800d0e2:	920c      	str	r2, [sp, #48]	; 0x30
 800d0e4:	3201      	adds	r2, #1
 800d0e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	9308      	str	r3, [sp, #32]
 800d0ec:	0015      	movs	r5, r2
 800d0ee:	9219      	str	r2, [sp, #100]	; 0x64
 800d0f0:	9210      	str	r2, [sp, #64]	; 0x40
 800d0f2:	9211      	str	r2, [sp, #68]	; 0x44
 800d0f4:	e1f1      	b.n	800d4da <_svfprintf_r+0x6be>
 800d0f6:	2310      	movs	r3, #16
 800d0f8:	431e      	orrs	r6, r3
 800d0fa:	06b3      	lsls	r3, r6, #26
 800d0fc:	d531      	bpl.n	800d162 <_svfprintf_r+0x346>
 800d0fe:	2307      	movs	r3, #7
 800d100:	3407      	adds	r4, #7
 800d102:	439c      	bics	r4, r3
 800d104:	0022      	movs	r2, r4
 800d106:	ca18      	ldmia	r2!, {r3, r4}
 800d108:	9306      	str	r3, [sp, #24]
 800d10a:	9407      	str	r4, [sp, #28]
 800d10c:	920d      	str	r2, [sp, #52]	; 0x34
 800d10e:	9a07      	ldr	r2, [sp, #28]
 800d110:	2301      	movs	r3, #1
 800d112:	2a00      	cmp	r2, #0
 800d114:	da0b      	bge.n	800d12e <_svfprintf_r+0x312>
 800d116:	9c06      	ldr	r4, [sp, #24]
 800d118:	9d07      	ldr	r5, [sp, #28]
 800d11a:	2200      	movs	r2, #0
 800d11c:	4261      	negs	r1, r4
 800d11e:	41aa      	sbcs	r2, r5
 800d120:	9106      	str	r1, [sp, #24]
 800d122:	9207      	str	r2, [sp, #28]
 800d124:	221b      	movs	r2, #27
 800d126:	a91e      	add	r1, sp, #120	; 0x78
 800d128:	1852      	adds	r2, r2, r1
 800d12a:	212d      	movs	r1, #45	; 0x2d
 800d12c:	7011      	strb	r1, [r2, #0]
 800d12e:	9907      	ldr	r1, [sp, #28]
 800d130:	9a06      	ldr	r2, [sp, #24]
 800d132:	430a      	orrs	r2, r1
 800d134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d136:	3101      	adds	r1, #1
 800d138:	d101      	bne.n	800d13e <_svfprintf_r+0x322>
 800d13a:	f001 f87b 	bl	800e234 <_svfprintf_r+0x1418>
 800d13e:	2180      	movs	r1, #128	; 0x80
 800d140:	0034      	movs	r4, r6
 800d142:	438c      	bics	r4, r1
 800d144:	2a00      	cmp	r2, #0
 800d146:	d001      	beq.n	800d14c <_svfprintf_r+0x330>
 800d148:	f001 f879 	bl	800e23e <_svfprintf_r+0x1422>
 800d14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d14e:	2a00      	cmp	r2, #0
 800d150:	d101      	bne.n	800d156 <_svfprintf_r+0x33a>
 800d152:	f000 fcef 	bl	800db34 <_svfprintf_r+0xd18>
 800d156:	2b01      	cmp	r3, #1
 800d158:	d001      	beq.n	800d15e <_svfprintf_r+0x342>
 800d15a:	f001 f874 	bl	800e246 <_svfprintf_r+0x142a>
 800d15e:	f000 fc79 	bl	800da54 <_svfprintf_r+0xc38>
 800d162:	0022      	movs	r2, r4
 800d164:	ca08      	ldmia	r2!, {r3}
 800d166:	920d      	str	r2, [sp, #52]	; 0x34
 800d168:	06f2      	lsls	r2, r6, #27
 800d16a:	d503      	bpl.n	800d174 <_svfprintf_r+0x358>
 800d16c:	9306      	str	r3, [sp, #24]
 800d16e:	17db      	asrs	r3, r3, #31
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	e7cc      	b.n	800d10e <_svfprintf_r+0x2f2>
 800d174:	0672      	lsls	r2, r6, #25
 800d176:	d501      	bpl.n	800d17c <_svfprintf_r+0x360>
 800d178:	b21b      	sxth	r3, r3
 800d17a:	e7f7      	b.n	800d16c <_svfprintf_r+0x350>
 800d17c:	05b2      	lsls	r2, r6, #22
 800d17e:	d5f5      	bpl.n	800d16c <_svfprintf_r+0x350>
 800d180:	b25b      	sxtb	r3, r3
 800d182:	e7f3      	b.n	800d16c <_svfprintf_r+0x350>
 800d184:	2307      	movs	r3, #7
 800d186:	3407      	adds	r4, #7
 800d188:	439c      	bics	r4, r3
 800d18a:	0022      	movs	r2, r4
 800d18c:	ca18      	ldmia	r2!, {r3, r4}
 800d18e:	920d      	str	r2, [sp, #52]	; 0x34
 800d190:	2201      	movs	r2, #1
 800d192:	9314      	str	r3, [sp, #80]	; 0x50
 800d194:	9415      	str	r4, [sp, #84]	; 0x54
 800d196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d198:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d19a:	005c      	lsls	r4, r3, #1
 800d19c:	0864      	lsrs	r4, r4, #1
 800d19e:	0028      	movs	r0, r5
 800d1a0:	0021      	movs	r1, r4
 800d1a2:	4b3e      	ldr	r3, [pc, #248]	; (800d29c <_svfprintf_r+0x480>)
 800d1a4:	4252      	negs	r2, r2
 800d1a6:	f7f5 f8a5 	bl	80022f4 <__aeabi_dcmpun>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d126      	bne.n	800d1fc <_svfprintf_r+0x3e0>
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	0028      	movs	r0, r5
 800d1b2:	0021      	movs	r1, r4
 800d1b4:	4b39      	ldr	r3, [pc, #228]	; (800d29c <_svfprintf_r+0x480>)
 800d1b6:	4252      	negs	r2, r2
 800d1b8:	f7f3 f956 	bl	8000468 <__aeabi_dcmple>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d11d      	bne.n	800d1fc <_svfprintf_r+0x3e0>
 800d1c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d1c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f7f3 f944 	bl	8000454 <__aeabi_dcmplt>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d004      	beq.n	800d1da <_svfprintf_r+0x3be>
 800d1d0:	231b      	movs	r3, #27
 800d1d2:	aa1e      	add	r2, sp, #120	; 0x78
 800d1d4:	189b      	adds	r3, r3, r2
 800d1d6:	222d      	movs	r2, #45	; 0x2d
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	4b31      	ldr	r3, [pc, #196]	; (800d2a0 <_svfprintf_r+0x484>)
 800d1dc:	9308      	str	r3, [sp, #32]
 800d1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1e0:	2b47      	cmp	r3, #71	; 0x47
 800d1e2:	dd01      	ble.n	800d1e8 <_svfprintf_r+0x3cc>
 800d1e4:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <_svfprintf_r+0x488>)
 800d1e6:	9308      	str	r3, [sp, #32]
 800d1e8:	2380      	movs	r3, #128	; 0x80
 800d1ea:	439e      	bics	r6, r3
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d1f0:	3303      	adds	r3, #3
 800d1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	9319      	str	r3, [sp, #100]	; 0x64
 800d1f8:	f000 fc78 	bl	800daec <_svfprintf_r+0xcd0>
 800d1fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d200:	0010      	movs	r0, r2
 800d202:	0019      	movs	r1, r3
 800d204:	f7f5 f876 	bl	80022f4 <__aeabi_dcmpun>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d00e      	beq.n	800d22a <_svfprintf_r+0x40e>
 800d20c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da04      	bge.n	800d21c <_svfprintf_r+0x400>
 800d212:	231b      	movs	r3, #27
 800d214:	aa1e      	add	r2, sp, #120	; 0x78
 800d216:	189b      	adds	r3, r3, r2
 800d218:	222d      	movs	r2, #45	; 0x2d
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	4b22      	ldr	r3, [pc, #136]	; (800d2a8 <_svfprintf_r+0x48c>)
 800d21e:	9308      	str	r3, [sp, #32]
 800d220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d222:	2b47      	cmp	r3, #71	; 0x47
 800d224:	dde0      	ble.n	800d1e8 <_svfprintf_r+0x3cc>
 800d226:	4b21      	ldr	r3, [pc, #132]	; (800d2ac <_svfprintf_r+0x490>)
 800d228:	e7dd      	b.n	800d1e6 <_svfprintf_r+0x3ca>
 800d22a:	2320      	movs	r3, #32
 800d22c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d22e:	439a      	bics	r2, r3
 800d230:	9210      	str	r2, [sp, #64]	; 0x40
 800d232:	2a41      	cmp	r2, #65	; 0x41
 800d234:	d123      	bne.n	800d27e <_svfprintf_r+0x462>
 800d236:	2230      	movs	r2, #48	; 0x30
 800d238:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d23a:	ab25      	add	r3, sp, #148	; 0x94
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	3248      	adds	r2, #72	; 0x48
 800d240:	2961      	cmp	r1, #97	; 0x61
 800d242:	d000      	beq.n	800d246 <_svfprintf_r+0x42a>
 800d244:	3a20      	subs	r2, #32
 800d246:	705a      	strb	r2, [r3, #1]
 800d248:	2302      	movs	r3, #2
 800d24a:	431e      	orrs	r6, r3
 800d24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24e:	2b63      	cmp	r3, #99	; 0x63
 800d250:	dd2e      	ble.n	800d2b0 <_svfprintf_r+0x494>
 800d252:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d254:	1c59      	adds	r1, r3, #1
 800d256:	f7fd f969 	bl	800a52c <_malloc_r>
 800d25a:	9008      	str	r0, [sp, #32]
 800d25c:	2800      	cmp	r0, #0
 800d25e:	d000      	beq.n	800d262 <_svfprintf_r+0x446>
 800d260:	e216      	b.n	800d690 <_svfprintf_r+0x874>
 800d262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d264:	899a      	ldrh	r2, [r3, #12]
 800d266:	2340      	movs	r3, #64	; 0x40
 800d268:	4313      	orrs	r3, r2
 800d26a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d26c:	8193      	strh	r3, [r2, #12]
 800d26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d270:	899b      	ldrh	r3, [r3, #12]
 800d272:	065b      	lsls	r3, r3, #25
 800d274:	d400      	bmi.n	800d278 <_svfprintf_r+0x45c>
 800d276:	e5f5      	b.n	800ce64 <_svfprintf_r+0x48>
 800d278:	2301      	movs	r3, #1
 800d27a:	425b      	negs	r3, r3
 800d27c:	e5f1      	b.n	800ce62 <_svfprintf_r+0x46>
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	900c      	str	r0, [sp, #48]	; 0x30
 800d282:	3301      	adds	r3, #1
 800d284:	d100      	bne.n	800d288 <_svfprintf_r+0x46c>
 800d286:	e206      	b.n	800d696 <_svfprintf_r+0x87a>
 800d288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d28a:	2b47      	cmp	r3, #71	; 0x47
 800d28c:	d114      	bne.n	800d2b8 <_svfprintf_r+0x49c>
 800d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d290:	2b00      	cmp	r3, #0
 800d292:	d111      	bne.n	800d2b8 <_svfprintf_r+0x49c>
 800d294:	3301      	adds	r3, #1
 800d296:	9309      	str	r3, [sp, #36]	; 0x24
 800d298:	e00e      	b.n	800d2b8 <_svfprintf_r+0x49c>
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	7fefffff 	.word	0x7fefffff
 800d2a0:	0801447c 	.word	0x0801447c
 800d2a4:	08014480 	.word	0x08014480
 800d2a8:	08014484 	.word	0x08014484
 800d2ac:	08014488 	.word	0x08014488
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d2b4:	ab3f      	add	r3, sp, #252	; 0xfc
 800d2b6:	9308      	str	r3, [sp, #32]
 800d2b8:	2380      	movs	r3, #128	; 0x80
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	4333      	orrs	r3, r6
 800d2be:	931a      	str	r3, [sp, #104]	; 0x68
 800d2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	db00      	blt.n	800d2ca <_svfprintf_r+0x4ae>
 800d2c8:	e1e7      	b.n	800d69a <_svfprintf_r+0x87e>
 800d2ca:	2280      	movs	r2, #128	; 0x80
 800d2cc:	0612      	lsls	r2, r2, #24
 800d2ce:	4694      	mov	ip, r2
 800d2d0:	4463      	add	r3, ip
 800d2d2:	930e      	str	r3, [sp, #56]	; 0x38
 800d2d4:	232d      	movs	r3, #45	; 0x2d
 800d2d6:	9322      	str	r3, [sp, #136]	; 0x88
 800d2d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2da:	2b41      	cmp	r3, #65	; 0x41
 800d2dc:	d000      	beq.n	800d2e0 <_svfprintf_r+0x4c4>
 800d2de:	e1f5      	b.n	800d6cc <_svfprintf_r+0x8b0>
 800d2e0:	0028      	movs	r0, r5
 800d2e2:	aa26      	add	r2, sp, #152	; 0x98
 800d2e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d2e6:	f002 fb73 	bl	800f9d0 <frexp>
 800d2ea:	23ff      	movs	r3, #255	; 0xff
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	059b      	lsls	r3, r3, #22
 800d2f0:	f7f4 f9bc 	bl	800166c <__aeabi_dmul>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	0004      	movs	r4, r0
 800d2fa:	000d      	movs	r5, r1
 800d2fc:	f7f3 f8a4 	bl	8000448 <__aeabi_dcmpeq>
 800d300:	2800      	cmp	r0, #0
 800d302:	d001      	beq.n	800d308 <_svfprintf_r+0x4ec>
 800d304:	2301      	movs	r3, #1
 800d306:	9326      	str	r3, [sp, #152]	; 0x98
 800d308:	4bda      	ldr	r3, [pc, #872]	; (800d674 <_svfprintf_r+0x858>)
 800d30a:	9319      	str	r3, [sp, #100]	; 0x64
 800d30c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d30e:	2b61      	cmp	r3, #97	; 0x61
 800d310:	d001      	beq.n	800d316 <_svfprintf_r+0x4fa>
 800d312:	4bd9      	ldr	r3, [pc, #868]	; (800d678 <_svfprintf_r+0x85c>)
 800d314:	9319      	str	r3, [sp, #100]	; 0x64
 800d316:	9b08      	ldr	r3, [sp, #32]
 800d318:	930e      	str	r3, [sp, #56]	; 0x38
 800d31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31c:	3b01      	subs	r3, #1
 800d31e:	9311      	str	r3, [sp, #68]	; 0x44
 800d320:	2200      	movs	r2, #0
 800d322:	4bd6      	ldr	r3, [pc, #856]	; (800d67c <_svfprintf_r+0x860>)
 800d324:	0020      	movs	r0, r4
 800d326:	0029      	movs	r1, r5
 800d328:	f7f4 f9a0 	bl	800166c <__aeabi_dmul>
 800d32c:	000d      	movs	r5, r1
 800d32e:	0004      	movs	r4, r0
 800d330:	f7f4 fffe 	bl	8002330 <__aeabi_d2iz>
 800d334:	9021      	str	r0, [sp, #132]	; 0x84
 800d336:	f7f5 f831 	bl	800239c <__aeabi_i2d>
 800d33a:	0002      	movs	r2, r0
 800d33c:	000b      	movs	r3, r1
 800d33e:	0020      	movs	r0, r4
 800d340:	0029      	movs	r1, r5
 800d342:	f7f4 fc55 	bl	8001bf0 <__aeabi_dsub>
 800d346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d348:	000d      	movs	r5, r1
 800d34a:	001a      	movs	r2, r3
 800d34c:	3201      	adds	r2, #1
 800d34e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d350:	920e      	str	r2, [sp, #56]	; 0x38
 800d352:	9223      	str	r2, [sp, #140]	; 0x8c
 800d354:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d356:	0004      	movs	r4, r0
 800d358:	5c52      	ldrb	r2, [r2, r1]
 800d35a:	701a      	strb	r2, [r3, #0]
 800d35c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d35e:	9320      	str	r3, [sp, #128]	; 0x80
 800d360:	3301      	adds	r3, #1
 800d362:	d00a      	beq.n	800d37a <_svfprintf_r+0x55e>
 800d364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d366:	2200      	movs	r2, #0
 800d368:	3b01      	subs	r3, #1
 800d36a:	9311      	str	r3, [sp, #68]	; 0x44
 800d36c:	0020      	movs	r0, r4
 800d36e:	2300      	movs	r3, #0
 800d370:	0029      	movs	r1, r5
 800d372:	f7f3 f869 	bl	8000448 <__aeabi_dcmpeq>
 800d376:	2800      	cmp	r0, #0
 800d378:	d0d2      	beq.n	800d320 <_svfprintf_r+0x504>
 800d37a:	2200      	movs	r2, #0
 800d37c:	0020      	movs	r0, r4
 800d37e:	0029      	movs	r1, r5
 800d380:	4bbf      	ldr	r3, [pc, #764]	; (800d680 <_svfprintf_r+0x864>)
 800d382:	f7f3 f87b 	bl	800047c <__aeabi_dcmpgt>
 800d386:	2800      	cmp	r0, #0
 800d388:	d10c      	bne.n	800d3a4 <_svfprintf_r+0x588>
 800d38a:	2200      	movs	r2, #0
 800d38c:	0020      	movs	r0, r4
 800d38e:	0029      	movs	r1, r5
 800d390:	4bbb      	ldr	r3, [pc, #748]	; (800d680 <_svfprintf_r+0x864>)
 800d392:	f7f3 f859 	bl	8000448 <__aeabi_dcmpeq>
 800d396:	2800      	cmp	r0, #0
 800d398:	d100      	bne.n	800d39c <_svfprintf_r+0x580>
 800d39a:	e191      	b.n	800d6c0 <_svfprintf_r+0x8a4>
 800d39c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d39e:	07db      	lsls	r3, r3, #31
 800d3a0:	d400      	bmi.n	800d3a4 <_svfprintf_r+0x588>
 800d3a2:	e18d      	b.n	800d6c0 <_svfprintf_r+0x8a4>
 800d3a4:	2030      	movs	r0, #48	; 0x30
 800d3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3a8:	932a      	str	r3, [sp, #168]	; 0xa8
 800d3aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3ac:	7bdb      	ldrb	r3, [r3, #15]
 800d3ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d3b0:	3a01      	subs	r2, #1
 800d3b2:	922a      	str	r2, [sp, #168]	; 0xa8
 800d3b4:	7811      	ldrb	r1, [r2, #0]
 800d3b6:	4299      	cmp	r1, r3
 800d3b8:	d100      	bne.n	800d3bc <_svfprintf_r+0x5a0>
 800d3ba:	e171      	b.n	800d6a0 <_svfprintf_r+0x884>
 800d3bc:	1c4b      	adds	r3, r1, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2939      	cmp	r1, #57	; 0x39
 800d3c2:	d101      	bne.n	800d3c8 <_svfprintf_r+0x5ac>
 800d3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3c6:	7a9b      	ldrb	r3, [r3, #10]
 800d3c8:	7013      	strb	r3, [r2, #0]
 800d3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3cc:	9a08      	ldr	r2, [sp, #32]
 800d3ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d3d0:	1a9b      	subs	r3, r3, r2
 800d3d2:	930e      	str	r3, [sp, #56]	; 0x38
 800d3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3d6:	2b47      	cmp	r3, #71	; 0x47
 800d3d8:	d000      	beq.n	800d3dc <_svfprintf_r+0x5c0>
 800d3da:	e1c4      	b.n	800d766 <_svfprintf_r+0x94a>
 800d3dc:	1ceb      	adds	r3, r5, #3
 800d3de:	db03      	blt.n	800d3e8 <_svfprintf_r+0x5cc>
 800d3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e2:	42ab      	cmp	r3, r5
 800d3e4:	db00      	blt.n	800d3e8 <_svfprintf_r+0x5cc>
 800d3e6:	e1e6      	b.n	800d7b6 <_svfprintf_r+0x99a>
 800d3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ea:	3b02      	subs	r3, #2
 800d3ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3ee:	223c      	movs	r2, #60	; 0x3c
 800d3f0:	466b      	mov	r3, sp
 800d3f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3f4:	189b      	adds	r3, r3, r2
 800d3f6:	1e6c      	subs	r4, r5, #1
 800d3f8:	3a1c      	subs	r2, #28
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	9426      	str	r4, [sp, #152]	; 0x98
 800d400:	4391      	bics	r1, r2
 800d402:	2941      	cmp	r1, #65	; 0x41
 800d404:	d102      	bne.n	800d40c <_svfprintf_r+0x5f0>
 800d406:	330f      	adds	r3, #15
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	3001      	adds	r0, #1
 800d40c:	a928      	add	r1, sp, #160	; 0xa0
 800d40e:	700b      	strb	r3, [r1, #0]
 800d410:	232b      	movs	r3, #43	; 0x2b
 800d412:	2c00      	cmp	r4, #0
 800d414:	da02      	bge.n	800d41c <_svfprintf_r+0x600>
 800d416:	2401      	movs	r4, #1
 800d418:	3302      	adds	r3, #2
 800d41a:	1b64      	subs	r4, r4, r5
 800d41c:	704b      	strb	r3, [r1, #1]
 800d41e:	2c09      	cmp	r4, #9
 800d420:	dc00      	bgt.n	800d424 <_svfprintf_r+0x608>
 800d422:	e1ba      	b.n	800d79a <_svfprintf_r+0x97e>
 800d424:	2337      	movs	r3, #55	; 0x37
 800d426:	250a      	movs	r5, #10
 800d428:	aa1e      	add	r2, sp, #120	; 0x78
 800d42a:	189b      	adds	r3, r3, r2
 800d42c:	9310      	str	r3, [sp, #64]	; 0x40
 800d42e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d430:	0020      	movs	r0, r4
 800d432:	9309      	str	r3, [sp, #36]	; 0x24
 800d434:	0029      	movs	r1, r5
 800d436:	3b01      	subs	r3, #1
 800d438:	9310      	str	r3, [sp, #64]	; 0x40
 800d43a:	f7f2 ffef 	bl	800041c <__aeabi_idivmod>
 800d43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d440:	3130      	adds	r1, #48	; 0x30
 800d442:	7019      	strb	r1, [r3, #0]
 800d444:	0020      	movs	r0, r4
 800d446:	0029      	movs	r1, r5
 800d448:	9411      	str	r4, [sp, #68]	; 0x44
 800d44a:	f7f2 ff01 	bl	8000250 <__divsi3>
 800d44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d450:	0004      	movs	r4, r0
 800d452:	2b63      	cmp	r3, #99	; 0x63
 800d454:	dceb      	bgt.n	800d42e <_svfprintf_r+0x612>
 800d456:	222a      	movs	r2, #42	; 0x2a
 800d458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45a:	a81e      	add	r0, sp, #120	; 0x78
 800d45c:	1e99      	subs	r1, r3, #2
 800d45e:	1812      	adds	r2, r2, r0
 800d460:	2037      	movs	r0, #55	; 0x37
 800d462:	000b      	movs	r3, r1
 800d464:	3430      	adds	r4, #48	; 0x30
 800d466:	700c      	strb	r4, [r1, #0]
 800d468:	ac1e      	add	r4, sp, #120	; 0x78
 800d46a:	1900      	adds	r0, r0, r4
 800d46c:	4283      	cmp	r3, r0
 800d46e:	d200      	bcs.n	800d472 <_svfprintf_r+0x656>
 800d470:	e18e      	b.n	800d790 <_svfprintf_r+0x974>
 800d472:	2300      	movs	r3, #0
 800d474:	4281      	cmp	r1, r0
 800d476:	d804      	bhi.n	800d482 <_svfprintf_r+0x666>
 800d478:	aa1e      	add	r2, sp, #120	; 0x78
 800d47a:	3339      	adds	r3, #57	; 0x39
 800d47c:	189b      	adds	r3, r3, r2
 800d47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d480:	1a9b      	subs	r3, r3, r2
 800d482:	222a      	movs	r2, #42	; 0x2a
 800d484:	a91e      	add	r1, sp, #120	; 0x78
 800d486:	1852      	adds	r2, r2, r1
 800d488:	18d3      	adds	r3, r2, r3
 800d48a:	aa28      	add	r2, sp, #160	; 0xa0
 800d48c:	1a9b      	subs	r3, r3, r2
 800d48e:	931e      	str	r3, [sp, #120]	; 0x78
 800d490:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d494:	4694      	mov	ip, r2
 800d496:	4463      	add	r3, ip
 800d498:	9309      	str	r3, [sp, #36]	; 0x24
 800d49a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	dc01      	bgt.n	800d4a4 <_svfprintf_r+0x688>
 800d4a0:	07f3      	lsls	r3, r6, #31
 800d4a2:	d504      	bpl.n	800d4ae <_svfprintf_r+0x692>
 800d4a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a8:	4694      	mov	ip, r2
 800d4aa:	4463      	add	r3, ip
 800d4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ae:	2280      	movs	r2, #128	; 0x80
 800d4b0:	4b74      	ldr	r3, [pc, #464]	; (800d684 <_svfprintf_r+0x868>)
 800d4b2:	0052      	lsls	r2, r2, #1
 800d4b4:	4033      	ands	r3, r6
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	001d      	movs	r5, r3
 800d4bc:	921a      	str	r2, [sp, #104]	; 0x68
 800d4be:	9310      	str	r3, [sp, #64]	; 0x40
 800d4c0:	9311      	str	r3, [sp, #68]	; 0x44
 800d4c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d4c6:	9319      	str	r3, [sp, #100]	; 0x64
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d006      	beq.n	800d4da <_svfprintf_r+0x6be>
 800d4cc:	231b      	movs	r3, #27
 800d4ce:	aa1e      	add	r2, sp, #120	; 0x78
 800d4d0:	189b      	adds	r3, r3, r2
 800d4d2:	222d      	movs	r2, #45	; 0x2d
 800d4d4:	701a      	strb	r2, [r3, #0]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	9319      	str	r3, [sp, #100]	; 0x64
 800d4da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4de:	931a      	str	r3, [sp, #104]	; 0x68
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	da00      	bge.n	800d4e6 <_svfprintf_r+0x6ca>
 800d4e4:	921a      	str	r2, [sp, #104]	; 0x68
 800d4e6:	231b      	movs	r3, #27
 800d4e8:	aa1e      	add	r2, sp, #120	; 0x78
 800d4ea:	189b      	adds	r3, r3, r2
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	1e5a      	subs	r2, r3, #1
 800d4f0:	4193      	sbcs	r3, r2
 800d4f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4f4:	18d3      	adds	r3, r2, r3
 800d4f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f8:	0032      	movs	r2, r6
 800d4fa:	2302      	movs	r3, #2
 800d4fc:	401a      	ands	r2, r3
 800d4fe:	9220      	str	r2, [sp, #128]	; 0x80
 800d500:	421e      	tst	r6, r3
 800d502:	d002      	beq.n	800d50a <_svfprintf_r+0x6ee>
 800d504:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d506:	3302      	adds	r3, #2
 800d508:	931a      	str	r3, [sp, #104]	; 0x68
 800d50a:	2384      	movs	r3, #132	; 0x84
 800d50c:	0032      	movs	r2, r6
 800d50e:	401a      	ands	r2, r3
 800d510:	9221      	str	r2, [sp, #132]	; 0x84
 800d512:	421e      	tst	r6, r3
 800d514:	d11f      	bne.n	800d556 <_svfprintf_r+0x73a>
 800d516:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d518:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d51a:	1a9c      	subs	r4, r3, r2
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	dd1a      	ble.n	800d556 <_svfprintf_r+0x73a>
 800d520:	0039      	movs	r1, r7
 800d522:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d524:	4858      	ldr	r0, [pc, #352]	; (800d688 <_svfprintf_r+0x86c>)
 800d526:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d528:	3301      	adds	r3, #1
 800d52a:	3108      	adds	r1, #8
 800d52c:	6038      	str	r0, [r7, #0]
 800d52e:	2c10      	cmp	r4, #16
 800d530:	dd00      	ble.n	800d534 <_svfprintf_r+0x718>
 800d532:	e31c      	b.n	800db6e <_svfprintf_r+0xd52>
 800d534:	607c      	str	r4, [r7, #4]
 800d536:	18a4      	adds	r4, r4, r2
 800d538:	000f      	movs	r7, r1
 800d53a:	942e      	str	r4, [sp, #184]	; 0xb8
 800d53c:	932d      	str	r3, [sp, #180]	; 0xb4
 800d53e:	2b07      	cmp	r3, #7
 800d540:	dd09      	ble.n	800d556 <_svfprintf_r+0x73a>
 800d542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d544:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d546:	aa2c      	add	r2, sp, #176	; 0xb0
 800d548:	f003 fd7e 	bl	8011048 <__ssprint_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d001      	beq.n	800d554 <_svfprintf_r+0x738>
 800d550:	f000 fe43 	bl	800e1da <_svfprintf_r+0x13be>
 800d554:	af2f      	add	r7, sp, #188	; 0xbc
 800d556:	221b      	movs	r2, #27
 800d558:	a91e      	add	r1, sp, #120	; 0x78
 800d55a:	1852      	adds	r2, r2, r1
 800d55c:	7811      	ldrb	r1, [r2, #0]
 800d55e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d560:	2900      	cmp	r1, #0
 800d562:	d014      	beq.n	800d58e <_svfprintf_r+0x772>
 800d564:	603a      	str	r2, [r7, #0]
 800d566:	2201      	movs	r2, #1
 800d568:	189b      	adds	r3, r3, r2
 800d56a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d56c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	189b      	adds	r3, r3, r2
 800d572:	932d      	str	r3, [sp, #180]	; 0xb4
 800d574:	3708      	adds	r7, #8
 800d576:	2b07      	cmp	r3, #7
 800d578:	dd09      	ble.n	800d58e <_svfprintf_r+0x772>
 800d57a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d57c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d57e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d580:	f003 fd62 	bl	8011048 <__ssprint_r>
 800d584:	2800      	cmp	r0, #0
 800d586:	d001      	beq.n	800d58c <_svfprintf_r+0x770>
 800d588:	f000 fe27 	bl	800e1da <_svfprintf_r+0x13be>
 800d58c:	af2f      	add	r7, sp, #188	; 0xbc
 800d58e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d590:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d592:	2a00      	cmp	r2, #0
 800d594:	d015      	beq.n	800d5c2 <_svfprintf_r+0x7a6>
 800d596:	aa25      	add	r2, sp, #148	; 0x94
 800d598:	603a      	str	r2, [r7, #0]
 800d59a:	2202      	movs	r2, #2
 800d59c:	189b      	adds	r3, r3, r2
 800d59e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d5a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	2b07      	cmp	r3, #7
 800d5ac:	dd09      	ble.n	800d5c2 <_svfprintf_r+0x7a6>
 800d5ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5b4:	f003 fd48 	bl	8011048 <__ssprint_r>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d001      	beq.n	800d5c0 <_svfprintf_r+0x7a4>
 800d5bc:	f000 fe0d 	bl	800e1da <_svfprintf_r+0x13be>
 800d5c0:	af2f      	add	r7, sp, #188	; 0xbc
 800d5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5c4:	2b80      	cmp	r3, #128	; 0x80
 800d5c6:	d11f      	bne.n	800d608 <_svfprintf_r+0x7ec>
 800d5c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d5cc:	1a9c      	subs	r4, r3, r2
 800d5ce:	2c00      	cmp	r4, #0
 800d5d0:	dd1a      	ble.n	800d608 <_svfprintf_r+0x7ec>
 800d5d2:	0039      	movs	r1, r7
 800d5d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5d6:	482d      	ldr	r0, [pc, #180]	; (800d68c <_svfprintf_r+0x870>)
 800d5d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d5da:	3301      	adds	r3, #1
 800d5dc:	3108      	adds	r1, #8
 800d5de:	6038      	str	r0, [r7, #0]
 800d5e0:	2c10      	cmp	r4, #16
 800d5e2:	dd00      	ble.n	800d5e6 <_svfprintf_r+0x7ca>
 800d5e4:	e2d6      	b.n	800db94 <_svfprintf_r+0xd78>
 800d5e6:	607c      	str	r4, [r7, #4]
 800d5e8:	18a4      	adds	r4, r4, r2
 800d5ea:	000f      	movs	r7, r1
 800d5ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800d5ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800d5f0:	2b07      	cmp	r3, #7
 800d5f2:	dd09      	ble.n	800d608 <_svfprintf_r+0x7ec>
 800d5f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5fa:	f003 fd25 	bl	8011048 <__ssprint_r>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d001      	beq.n	800d606 <_svfprintf_r+0x7ea>
 800d602:	f000 fdea 	bl	800e1da <_svfprintf_r+0x13be>
 800d606:	af2f      	add	r7, sp, #188	; 0xbc
 800d608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d60c:	1a9c      	subs	r4, r3, r2
 800d60e:	2c00      	cmp	r4, #0
 800d610:	dd1a      	ble.n	800d648 <_svfprintf_r+0x82c>
 800d612:	0039      	movs	r1, r7
 800d614:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d616:	481d      	ldr	r0, [pc, #116]	; (800d68c <_svfprintf_r+0x870>)
 800d618:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d61a:	3301      	adds	r3, #1
 800d61c:	3108      	adds	r1, #8
 800d61e:	6038      	str	r0, [r7, #0]
 800d620:	2c10      	cmp	r4, #16
 800d622:	dd00      	ble.n	800d626 <_svfprintf_r+0x80a>
 800d624:	e2c9      	b.n	800dbba <_svfprintf_r+0xd9e>
 800d626:	18a2      	adds	r2, r4, r2
 800d628:	607c      	str	r4, [r7, #4]
 800d62a:	922e      	str	r2, [sp, #184]	; 0xb8
 800d62c:	000f      	movs	r7, r1
 800d62e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d630:	2b07      	cmp	r3, #7
 800d632:	dd09      	ble.n	800d648 <_svfprintf_r+0x82c>
 800d634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d636:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d638:	aa2c      	add	r2, sp, #176	; 0xb0
 800d63a:	f003 fd05 	bl	8011048 <__ssprint_r>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d001      	beq.n	800d646 <_svfprintf_r+0x82a>
 800d642:	f000 fdca 	bl	800e1da <_svfprintf_r+0x13be>
 800d646:	af2f      	add	r7, sp, #188	; 0xbc
 800d648:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d64a:	9319      	str	r3, [sp, #100]	; 0x64
 800d64c:	05f3      	lsls	r3, r6, #23
 800d64e:	d500      	bpl.n	800d652 <_svfprintf_r+0x836>
 800d650:	e2ce      	b.n	800dbf0 <_svfprintf_r+0xdd4>
 800d652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d654:	9b08      	ldr	r3, [sp, #32]
 800d656:	4694      	mov	ip, r2
 800d658:	603b      	str	r3, [r7, #0]
 800d65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65c:	607b      	str	r3, [r7, #4]
 800d65e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d660:	4463      	add	r3, ip
 800d662:	932e      	str	r3, [sp, #184]	; 0xb8
 800d664:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d666:	3301      	adds	r3, #1
 800d668:	932d      	str	r3, [sp, #180]	; 0xb4
 800d66a:	2b07      	cmp	r3, #7
 800d66c:	dd00      	ble.n	800d670 <_svfprintf_r+0x854>
 800d66e:	e3a3      	b.n	800ddb8 <_svfprintf_r+0xf9c>
 800d670:	3708      	adds	r7, #8
 800d672:	e301      	b.n	800dc78 <_svfprintf_r+0xe5c>
 800d674:	0801448c 	.word	0x0801448c
 800d678:	0801449d 	.word	0x0801449d
 800d67c:	40300000 	.word	0x40300000
 800d680:	3fe00000 	.word	0x3fe00000
 800d684:	fffffbff 	.word	0xfffffbff
 800d688:	080144b0 	.word	0x080144b0
 800d68c:	080144c0 	.word	0x080144c0
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	930c      	str	r3, [sp, #48]	; 0x30
 800d694:	e610      	b.n	800d2b8 <_svfprintf_r+0x49c>
 800d696:	2306      	movs	r3, #6
 800d698:	e5fd      	b.n	800d296 <_svfprintf_r+0x47a>
 800d69a:	930e      	str	r3, [sp, #56]	; 0x38
 800d69c:	2300      	movs	r3, #0
 800d69e:	e61a      	b.n	800d2d6 <_svfprintf_r+0x4ba>
 800d6a0:	7010      	strb	r0, [r2, #0]
 800d6a2:	e684      	b.n	800d3ae <_svfprintf_r+0x592>
 800d6a4:	7018      	strb	r0, [r3, #0]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	1aca      	subs	r2, r1, r3
 800d6aa:	d5fb      	bpl.n	800d6a4 <_svfprintf_r+0x888>
 800d6ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	3201      	adds	r2, #1
 800d6b2:	db01      	blt.n	800d6b8 <_svfprintf_r+0x89c>
 800d6b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6ba:	18d3      	adds	r3, r2, r3
 800d6bc:	9323      	str	r3, [sp, #140]	; 0x8c
 800d6be:	e684      	b.n	800d3ca <_svfprintf_r+0x5ae>
 800d6c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d6c4:	2030      	movs	r0, #48	; 0x30
 800d6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6c8:	1851      	adds	r1, r2, r1
 800d6ca:	e7ed      	b.n	800d6a8 <_svfprintf_r+0x88c>
 800d6cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d6d2:	2a46      	cmp	r2, #70	; 0x46
 800d6d4:	d006      	beq.n	800d6e4 <_svfprintf_r+0x8c8>
 800d6d6:	0014      	movs	r4, r2
 800d6d8:	3c45      	subs	r4, #69	; 0x45
 800d6da:	4262      	negs	r2, r4
 800d6dc:	4154      	adcs	r4, r2
 800d6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	1914      	adds	r4, r2, r4
 800d6e4:	aa2a      	add	r2, sp, #168	; 0xa8
 800d6e6:	9204      	str	r2, [sp, #16]
 800d6e8:	aa27      	add	r2, sp, #156	; 0x9c
 800d6ea:	9203      	str	r2, [sp, #12]
 800d6ec:	aa26      	add	r2, sp, #152	; 0x98
 800d6ee:	9202      	str	r2, [sp, #8]
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	002a      	movs	r2, r5
 800d6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6f8:	9401      	str	r4, [sp, #4]
 800d6fa:	f002 fad7 	bl	800fcac <_dtoa_r>
 800d6fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d700:	9008      	str	r0, [sp, #32]
 800d702:	2b47      	cmp	r3, #71	; 0x47
 800d704:	d103      	bne.n	800d70e <_svfprintf_r+0x8f2>
 800d706:	07f3      	lsls	r3, r6, #31
 800d708:	d401      	bmi.n	800d70e <_svfprintf_r+0x8f2>
 800d70a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d70c:	e65e      	b.n	800d3cc <_svfprintf_r+0x5b0>
 800d70e:	9b08      	ldr	r3, [sp, #32]
 800d710:	191b      	adds	r3, r3, r4
 800d712:	9311      	str	r3, [sp, #68]	; 0x44
 800d714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d716:	2b46      	cmp	r3, #70	; 0x46
 800d718:	d112      	bne.n	800d740 <_svfprintf_r+0x924>
 800d71a:	9b08      	ldr	r3, [sp, #32]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b30      	cmp	r3, #48	; 0x30
 800d720:	d10a      	bne.n	800d738 <_svfprintf_r+0x91c>
 800d722:	2200      	movs	r2, #0
 800d724:	2300      	movs	r3, #0
 800d726:	0028      	movs	r0, r5
 800d728:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d72a:	f7f2 fe8d 	bl	8000448 <__aeabi_dcmpeq>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d102      	bne.n	800d738 <_svfprintf_r+0x91c>
 800d732:	2301      	movs	r3, #1
 800d734:	1b1b      	subs	r3, r3, r4
 800d736:	9326      	str	r3, [sp, #152]	; 0x98
 800d738:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d73c:	18d3      	adds	r3, r2, r3
 800d73e:	9311      	str	r3, [sp, #68]	; 0x44
 800d740:	2200      	movs	r2, #0
 800d742:	2300      	movs	r3, #0
 800d744:	0028      	movs	r0, r5
 800d746:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d748:	f7f2 fe7e 	bl	8000448 <__aeabi_dcmpeq>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d001      	beq.n	800d754 <_svfprintf_r+0x938>
 800d750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d752:	932a      	str	r3, [sp, #168]	; 0xa8
 800d754:	2230      	movs	r2, #48	; 0x30
 800d756:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d758:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d9d5      	bls.n	800d70a <_svfprintf_r+0x8ee>
 800d75e:	1c59      	adds	r1, r3, #1
 800d760:	912a      	str	r1, [sp, #168]	; 0xa8
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	e7f7      	b.n	800d756 <_svfprintf_r+0x93a>
 800d766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d768:	2b46      	cmp	r3, #70	; 0x46
 800d76a:	d000      	beq.n	800d76e <_svfprintf_r+0x952>
 800d76c:	e63f      	b.n	800d3ee <_svfprintf_r+0x5d2>
 800d76e:	2201      	movs	r2, #1
 800d770:	0033      	movs	r3, r6
 800d772:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d774:	4013      	ands	r3, r2
 800d776:	430b      	orrs	r3, r1
 800d778:	2d00      	cmp	r5, #0
 800d77a:	dd2c      	ble.n	800d7d6 <_svfprintf_r+0x9ba>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d046      	beq.n	800d80e <_svfprintf_r+0x9f2>
 800d780:	000a      	movs	r2, r1
 800d782:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d784:	18eb      	adds	r3, r5, r3
 800d786:	18d3      	adds	r3, r2, r3
 800d788:	9309      	str	r3, [sp, #36]	; 0x24
 800d78a:	2366      	movs	r3, #102	; 0x66
 800d78c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d78e:	e030      	b.n	800d7f2 <_svfprintf_r+0x9d6>
 800d790:	781c      	ldrb	r4, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	7014      	strb	r4, [r2, #0]
 800d796:	3201      	adds	r2, #1
 800d798:	e668      	b.n	800d46c <_svfprintf_r+0x650>
 800d79a:	222a      	movs	r2, #42	; 0x2a
 800d79c:	ab1e      	add	r3, sp, #120	; 0x78
 800d79e:	18d2      	adds	r2, r2, r3
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d104      	bne.n	800d7ae <_svfprintf_r+0x992>
 800d7a4:	2330      	movs	r3, #48	; 0x30
 800d7a6:	222b      	movs	r2, #43	; 0x2b
 800d7a8:	708b      	strb	r3, [r1, #2]
 800d7aa:	ab1e      	add	r3, sp, #120	; 0x78
 800d7ac:	18d2      	adds	r2, r2, r3
 800d7ae:	3430      	adds	r4, #48	; 0x30
 800d7b0:	1c53      	adds	r3, r2, #1
 800d7b2:	7014      	strb	r4, [r2, #0]
 800d7b4:	e669      	b.n	800d48a <_svfprintf_r+0x66e>
 800d7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	dd12      	ble.n	800d7e2 <_svfprintf_r+0x9c6>
 800d7bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c0:	4694      	mov	ip, r2
 800d7c2:	4463      	add	r3, ip
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	2367      	movs	r3, #103	; 0x67
 800d7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	dc11      	bgt.n	800d7f2 <_svfprintf_r+0x9d6>
 800d7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d0:	1b5b      	subs	r3, r3, r5
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	e00c      	b.n	800d7f0 <_svfprintf_r+0x9d4>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01b      	beq.n	800d812 <_svfprintf_r+0x9f6>
 800d7da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7de:	3301      	adds	r3, #1
 800d7e0:	e7d1      	b.n	800d786 <_svfprintf_r+0x96a>
 800d7e2:	2367      	movs	r3, #103	; 0x67
 800d7e4:	9509      	str	r5, [sp, #36]	; 0x24
 800d7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7e8:	07f3      	lsls	r3, r6, #31
 800d7ea:	d502      	bpl.n	800d7f2 <_svfprintf_r+0x9d6>
 800d7ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7ee:	18eb      	adds	r3, r5, r3
 800d7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f2:	2380      	movs	r3, #128	; 0x80
 800d7f4:	0032      	movs	r2, r6
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	401a      	ands	r2, r3
 800d7fa:	9211      	str	r2, [sp, #68]	; 0x44
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	9210      	str	r2, [sp, #64]	; 0x40
 800d800:	421e      	tst	r6, r3
 800d802:	d100      	bne.n	800d806 <_svfprintf_r+0x9ea>
 800d804:	e65d      	b.n	800d4c2 <_svfprintf_r+0x6a6>
 800d806:	4295      	cmp	r5, r2
 800d808:	dc25      	bgt.n	800d856 <_svfprintf_r+0xa3a>
 800d80a:	9211      	str	r2, [sp, #68]	; 0x44
 800d80c:	e659      	b.n	800d4c2 <_svfprintf_r+0x6a6>
 800d80e:	9509      	str	r5, [sp, #36]	; 0x24
 800d810:	e7bb      	b.n	800d78a <_svfprintf_r+0x96e>
 800d812:	2366      	movs	r3, #102	; 0x66
 800d814:	9209      	str	r2, [sp, #36]	; 0x24
 800d816:	930f      	str	r3, [sp, #60]	; 0x3c
 800d818:	e7eb      	b.n	800d7f2 <_svfprintf_r+0x9d6>
 800d81a:	42ab      	cmp	r3, r5
 800d81c:	da0e      	bge.n	800d83c <_svfprintf_r+0xa20>
 800d81e:	1aed      	subs	r5, r5, r3
 800d820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d822:	785b      	ldrb	r3, [r3, #1]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d012      	beq.n	800d84e <_svfprintf_r+0xa32>
 800d828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d82a:	3301      	adds	r3, #1
 800d82c:	9311      	str	r3, [sp, #68]	; 0x44
 800d82e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d830:	3301      	adds	r3, #1
 800d832:	9312      	str	r3, [sp, #72]	; 0x48
 800d834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2bff      	cmp	r3, #255	; 0xff
 800d83a:	d1ee      	bne.n	800d81a <_svfprintf_r+0x9fe>
 800d83c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d83e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d840:	189b      	adds	r3, r3, r2
 800d842:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d844:	4353      	muls	r3, r2
 800d846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d848:	189b      	adds	r3, r3, r2
 800d84a:	9309      	str	r3, [sp, #36]	; 0x24
 800d84c:	e639      	b.n	800d4c2 <_svfprintf_r+0x6a6>
 800d84e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d850:	3301      	adds	r3, #1
 800d852:	9310      	str	r3, [sp, #64]	; 0x40
 800d854:	e7ee      	b.n	800d834 <_svfprintf_r+0xa18>
 800d856:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d858:	9311      	str	r3, [sp, #68]	; 0x44
 800d85a:	e7eb      	b.n	800d834 <_svfprintf_r+0xa18>
 800d85c:	1d23      	adds	r3, r4, #4
 800d85e:	930d      	str	r3, [sp, #52]	; 0x34
 800d860:	06b3      	lsls	r3, r6, #26
 800d862:	d509      	bpl.n	800d878 <_svfprintf_r+0xa5c>
 800d864:	6823      	ldr	r3, [r4, #0]
 800d866:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	17d2      	asrs	r2, r2, #31
 800d86c:	605a      	str	r2, [r3, #4]
 800d86e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d870:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d872:	9308      	str	r3, [sp, #32]
 800d874:	f7ff fb0d 	bl	800ce92 <_svfprintf_r+0x76>
 800d878:	06f3      	lsls	r3, r6, #27
 800d87a:	d503      	bpl.n	800d884 <_svfprintf_r+0xa68>
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	e7f4      	b.n	800d86e <_svfprintf_r+0xa52>
 800d884:	0673      	lsls	r3, r6, #25
 800d886:	d503      	bpl.n	800d890 <_svfprintf_r+0xa74>
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d88c:	801a      	strh	r2, [r3, #0]
 800d88e:	e7ee      	b.n	800d86e <_svfprintf_r+0xa52>
 800d890:	05b6      	lsls	r6, r6, #22
 800d892:	d5f3      	bpl.n	800d87c <_svfprintf_r+0xa60>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	e7e8      	b.n	800d86e <_svfprintf_r+0xa52>
 800d89c:	2310      	movs	r3, #16
 800d89e:	431e      	orrs	r6, r3
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	0030      	movs	r0, r6
 800d8a4:	4018      	ands	r0, r3
 800d8a6:	421e      	tst	r6, r3
 800d8a8:	d00f      	beq.n	800d8ca <_svfprintf_r+0xaae>
 800d8aa:	3b19      	subs	r3, #25
 800d8ac:	3407      	adds	r4, #7
 800d8ae:	439c      	bics	r4, r3
 800d8b0:	0022      	movs	r2, r4
 800d8b2:	ca18      	ldmia	r2!, {r3, r4}
 800d8b4:	9306      	str	r3, [sp, #24]
 800d8b6:	9407      	str	r4, [sp, #28]
 800d8b8:	920d      	str	r2, [sp, #52]	; 0x34
 800d8ba:	4bc9      	ldr	r3, [pc, #804]	; (800dbe0 <_svfprintf_r+0xdc4>)
 800d8bc:	401e      	ands	r6, r3
 800d8be:	2300      	movs	r3, #0
 800d8c0:	221b      	movs	r2, #27
 800d8c2:	a91e      	add	r1, sp, #120	; 0x78
 800d8c4:	1852      	adds	r2, r2, r1
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	e430      	b.n	800d12c <_svfprintf_r+0x310>
 800d8ca:	0022      	movs	r2, r4
 800d8cc:	ca08      	ldmia	r2!, {r3}
 800d8ce:	0031      	movs	r1, r6
 800d8d0:	920d      	str	r2, [sp, #52]	; 0x34
 800d8d2:	2210      	movs	r2, #16
 800d8d4:	4011      	ands	r1, r2
 800d8d6:	4216      	tst	r6, r2
 800d8d8:	d002      	beq.n	800d8e0 <_svfprintf_r+0xac4>
 800d8da:	9306      	str	r3, [sp, #24]
 800d8dc:	9007      	str	r0, [sp, #28]
 800d8de:	e7ec      	b.n	800d8ba <_svfprintf_r+0xa9e>
 800d8e0:	2240      	movs	r2, #64	; 0x40
 800d8e2:	0030      	movs	r0, r6
 800d8e4:	4010      	ands	r0, r2
 800d8e6:	4216      	tst	r6, r2
 800d8e8:	d003      	beq.n	800d8f2 <_svfprintf_r+0xad6>
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	9306      	str	r3, [sp, #24]
 800d8ee:	9107      	str	r1, [sp, #28]
 800d8f0:	e7e3      	b.n	800d8ba <_svfprintf_r+0xa9e>
 800d8f2:	2280      	movs	r2, #128	; 0x80
 800d8f4:	0031      	movs	r1, r6
 800d8f6:	0092      	lsls	r2, r2, #2
 800d8f8:	4011      	ands	r1, r2
 800d8fa:	4216      	tst	r6, r2
 800d8fc:	d0f6      	beq.n	800d8ec <_svfprintf_r+0xad0>
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	e7eb      	b.n	800d8da <_svfprintf_r+0xabe>
 800d902:	0023      	movs	r3, r4
 800d904:	cb04      	ldmia	r3!, {r2}
 800d906:	49b7      	ldr	r1, [pc, #732]	; (800dbe4 <_svfprintf_r+0xdc8>)
 800d908:	9206      	str	r2, [sp, #24]
 800d90a:	aa25      	add	r2, sp, #148	; 0x94
 800d90c:	8011      	strh	r1, [r2, #0]
 800d90e:	4ab6      	ldr	r2, [pc, #728]	; (800dbe8 <_svfprintf_r+0xdcc>)
 800d910:	930d      	str	r3, [sp, #52]	; 0x34
 800d912:	2300      	movs	r3, #0
 800d914:	921f      	str	r2, [sp, #124]	; 0x7c
 800d916:	2278      	movs	r2, #120	; 0x78
 800d918:	9307      	str	r3, [sp, #28]
 800d91a:	3302      	adds	r3, #2
 800d91c:	431e      	orrs	r6, r3
 800d91e:	920f      	str	r2, [sp, #60]	; 0x3c
 800d920:	e7ce      	b.n	800d8c0 <_svfprintf_r+0xaa4>
 800d922:	0023      	movs	r3, r4
 800d924:	cb04      	ldmia	r3!, {r2}
 800d926:	2400      	movs	r4, #0
 800d928:	930d      	str	r3, [sp, #52]	; 0x34
 800d92a:	231b      	movs	r3, #27
 800d92c:	9208      	str	r2, [sp, #32]
 800d92e:	aa1e      	add	r2, sp, #120	; 0x78
 800d930:	189b      	adds	r3, r3, r2
 800d932:	701c      	strb	r4, [r3, #0]
 800d934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d936:	3301      	adds	r3, #1
 800d938:	d00e      	beq.n	800d958 <_svfprintf_r+0xb3c>
 800d93a:	0021      	movs	r1, r4
 800d93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93e:	9808      	ldr	r0, [sp, #32]
 800d940:	f002 f83a 	bl	800f9b8 <memchr>
 800d944:	900c      	str	r0, [sp, #48]	; 0x30
 800d946:	42a0      	cmp	r0, r4
 800d948:	d100      	bne.n	800d94c <_svfprintf_r+0xb30>
 800d94a:	e10d      	b.n	800db68 <_svfprintf_r+0xd4c>
 800d94c:	9a08      	ldr	r2, [sp, #32]
 800d94e:	1a83      	subs	r3, r0, r2
 800d950:	9309      	str	r3, [sp, #36]	; 0x24
 800d952:	0023      	movs	r3, r4
 800d954:	940c      	str	r4, [sp, #48]	; 0x30
 800d956:	e44e      	b.n	800d1f6 <_svfprintf_r+0x3da>
 800d958:	9808      	ldr	r0, [sp, #32]
 800d95a:	f7f2 fbd3 	bl	8000104 <strlen>
 800d95e:	9009      	str	r0, [sp, #36]	; 0x24
 800d960:	e7f7      	b.n	800d952 <_svfprintf_r+0xb36>
 800d962:	2310      	movs	r3, #16
 800d964:	431e      	orrs	r6, r3
 800d966:	2320      	movs	r3, #32
 800d968:	0030      	movs	r0, r6
 800d96a:	4018      	ands	r0, r3
 800d96c:	421e      	tst	r6, r3
 800d96e:	d009      	beq.n	800d984 <_svfprintf_r+0xb68>
 800d970:	3b19      	subs	r3, #25
 800d972:	3407      	adds	r4, #7
 800d974:	439c      	bics	r4, r3
 800d976:	0022      	movs	r2, r4
 800d978:	ca18      	ldmia	r2!, {r3, r4}
 800d97a:	9306      	str	r3, [sp, #24]
 800d97c:	9407      	str	r4, [sp, #28]
 800d97e:	920d      	str	r2, [sp, #52]	; 0x34
 800d980:	2301      	movs	r3, #1
 800d982:	e79d      	b.n	800d8c0 <_svfprintf_r+0xaa4>
 800d984:	0023      	movs	r3, r4
 800d986:	cb04      	ldmia	r3!, {r2}
 800d988:	0031      	movs	r1, r6
 800d98a:	930d      	str	r3, [sp, #52]	; 0x34
 800d98c:	2310      	movs	r3, #16
 800d98e:	4019      	ands	r1, r3
 800d990:	421e      	tst	r6, r3
 800d992:	d003      	beq.n	800d99c <_svfprintf_r+0xb80>
 800d994:	9206      	str	r2, [sp, #24]
 800d996:	9007      	str	r0, [sp, #28]
 800d998:	3b0f      	subs	r3, #15
 800d99a:	e791      	b.n	800d8c0 <_svfprintf_r+0xaa4>
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	0030      	movs	r0, r6
 800d9a0:	4018      	ands	r0, r3
 800d9a2:	421e      	tst	r6, r3
 800d9a4:	d003      	beq.n	800d9ae <_svfprintf_r+0xb92>
 800d9a6:	b293      	uxth	r3, r2
 800d9a8:	9306      	str	r3, [sp, #24]
 800d9aa:	9107      	str	r1, [sp, #28]
 800d9ac:	e7e8      	b.n	800d980 <_svfprintf_r+0xb64>
 800d9ae:	2380      	movs	r3, #128	; 0x80
 800d9b0:	0031      	movs	r1, r6
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4019      	ands	r1, r3
 800d9b6:	421e      	tst	r6, r3
 800d9b8:	d003      	beq.n	800d9c2 <_svfprintf_r+0xba6>
 800d9ba:	b2d3      	uxtb	r3, r2
 800d9bc:	9306      	str	r3, [sp, #24]
 800d9be:	9007      	str	r0, [sp, #28]
 800d9c0:	e7de      	b.n	800d980 <_svfprintf_r+0xb64>
 800d9c2:	9206      	str	r2, [sp, #24]
 800d9c4:	e7f1      	b.n	800d9aa <_svfprintf_r+0xb8e>
 800d9c6:	4b89      	ldr	r3, [pc, #548]	; (800dbec <_svfprintf_r+0xdd0>)
 800d9c8:	0030      	movs	r0, r6
 800d9ca:	931f      	str	r3, [sp, #124]	; 0x7c
 800d9cc:	2320      	movs	r3, #32
 800d9ce:	4018      	ands	r0, r3
 800d9d0:	421e      	tst	r6, r3
 800d9d2:	d01a      	beq.n	800da0a <_svfprintf_r+0xbee>
 800d9d4:	3b19      	subs	r3, #25
 800d9d6:	3407      	adds	r4, #7
 800d9d8:	439c      	bics	r4, r3
 800d9da:	0022      	movs	r2, r4
 800d9dc:	ca18      	ldmia	r2!, {r3, r4}
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	9407      	str	r4, [sp, #28]
 800d9e2:	920d      	str	r2, [sp, #52]	; 0x34
 800d9e4:	07f3      	lsls	r3, r6, #31
 800d9e6:	d50a      	bpl.n	800d9fe <_svfprintf_r+0xbe2>
 800d9e8:	9b06      	ldr	r3, [sp, #24]
 800d9ea:	9a07      	ldr	r2, [sp, #28]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	d006      	beq.n	800d9fe <_svfprintf_r+0xbe2>
 800d9f0:	2230      	movs	r2, #48	; 0x30
 800d9f2:	ab25      	add	r3, sp, #148	; 0x94
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9f8:	705a      	strb	r2, [r3, #1]
 800d9fa:	2302      	movs	r3, #2
 800d9fc:	431e      	orrs	r6, r3
 800d9fe:	4b78      	ldr	r3, [pc, #480]	; (800dbe0 <_svfprintf_r+0xdc4>)
 800da00:	401e      	ands	r6, r3
 800da02:	2302      	movs	r3, #2
 800da04:	e75c      	b.n	800d8c0 <_svfprintf_r+0xaa4>
 800da06:	4b78      	ldr	r3, [pc, #480]	; (800dbe8 <_svfprintf_r+0xdcc>)
 800da08:	e7de      	b.n	800d9c8 <_svfprintf_r+0xbac>
 800da0a:	0023      	movs	r3, r4
 800da0c:	cb04      	ldmia	r3!, {r2}
 800da0e:	0031      	movs	r1, r6
 800da10:	930d      	str	r3, [sp, #52]	; 0x34
 800da12:	2310      	movs	r3, #16
 800da14:	4019      	ands	r1, r3
 800da16:	421e      	tst	r6, r3
 800da18:	d002      	beq.n	800da20 <_svfprintf_r+0xc04>
 800da1a:	9206      	str	r2, [sp, #24]
 800da1c:	9007      	str	r0, [sp, #28]
 800da1e:	e7e1      	b.n	800d9e4 <_svfprintf_r+0xbc8>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	0030      	movs	r0, r6
 800da24:	4018      	ands	r0, r3
 800da26:	421e      	tst	r6, r3
 800da28:	d003      	beq.n	800da32 <_svfprintf_r+0xc16>
 800da2a:	b293      	uxth	r3, r2
 800da2c:	9306      	str	r3, [sp, #24]
 800da2e:	9107      	str	r1, [sp, #28]
 800da30:	e7d8      	b.n	800d9e4 <_svfprintf_r+0xbc8>
 800da32:	2380      	movs	r3, #128	; 0x80
 800da34:	0031      	movs	r1, r6
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4019      	ands	r1, r3
 800da3a:	421e      	tst	r6, r3
 800da3c:	d002      	beq.n	800da44 <_svfprintf_r+0xc28>
 800da3e:	b2d3      	uxtb	r3, r2
 800da40:	9306      	str	r3, [sp, #24]
 800da42:	e7eb      	b.n	800da1c <_svfprintf_r+0xc00>
 800da44:	9206      	str	r2, [sp, #24]
 800da46:	e7f2      	b.n	800da2e <_svfprintf_r+0xc12>
 800da48:	9b07      	ldr	r3, [sp, #28]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <_svfprintf_r+0xc48>
 800da4e:	9b06      	ldr	r3, [sp, #24]
 800da50:	2b09      	cmp	r3, #9
 800da52:	d807      	bhi.n	800da64 <_svfprintf_r+0xc48>
 800da54:	23e7      	movs	r3, #231	; 0xe7
 800da56:	aa1e      	add	r2, sp, #120	; 0x78
 800da58:	189b      	adds	r3, r3, r2
 800da5a:	9a06      	ldr	r2, [sp, #24]
 800da5c:	3230      	adds	r2, #48	; 0x30
 800da5e:	701a      	strb	r2, [r3, #0]
 800da60:	f000 fc18 	bl	800e294 <_svfprintf_r+0x1478>
 800da64:	2680      	movs	r6, #128	; 0x80
 800da66:	2300      	movs	r3, #0
 800da68:	00f6      	lsls	r6, r6, #3
 800da6a:	930e      	str	r3, [sp, #56]	; 0x38
 800da6c:	ad58      	add	r5, sp, #352	; 0x160
 800da6e:	4026      	ands	r6, r4
 800da70:	220a      	movs	r2, #10
 800da72:	9806      	ldr	r0, [sp, #24]
 800da74:	9907      	ldr	r1, [sp, #28]
 800da76:	2300      	movs	r3, #0
 800da78:	f7f2 fd14 	bl	80004a4 <__aeabi_uldivmod>
 800da7c:	1e6b      	subs	r3, r5, #1
 800da7e:	3230      	adds	r2, #48	; 0x30
 800da80:	9308      	str	r3, [sp, #32]
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da86:	900c      	str	r0, [sp, #48]	; 0x30
 800da88:	3301      	adds	r3, #1
 800da8a:	9110      	str	r1, [sp, #64]	; 0x40
 800da8c:	930e      	str	r3, [sp, #56]	; 0x38
 800da8e:	2e00      	cmp	r6, #0
 800da90:	d01d      	beq.n	800dace <_svfprintf_r+0xcb2>
 800da92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d118      	bne.n	800dace <_svfprintf_r+0xcb2>
 800da9c:	2aff      	cmp	r2, #255	; 0xff
 800da9e:	d016      	beq.n	800dace <_svfprintf_r+0xcb2>
 800daa0:	9b07      	ldr	r3, [sp, #28]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <_svfprintf_r+0xc90>
 800daa6:	9b06      	ldr	r3, [sp, #24]
 800daa8:	2b09      	cmp	r3, #9
 800daaa:	d910      	bls.n	800dace <_svfprintf_r+0xcb2>
 800daac:	9b08      	ldr	r3, [sp, #32]
 800daae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dab0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	0018      	movs	r0, r3
 800dab6:	9308      	str	r3, [sp, #32]
 800dab8:	f7fd ffd1 	bl	800ba5e <strncpy>
 800dabc:	2200      	movs	r2, #0
 800dabe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dac0:	920e      	str	r2, [sp, #56]	; 0x38
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	1e5a      	subs	r2, r3, #1
 800dac6:	4193      	sbcs	r3, r2
 800dac8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800daca:	18d3      	adds	r3, r2, r3
 800dacc:	9312      	str	r3, [sp, #72]	; 0x48
 800dace:	9b07      	ldr	r3, [sp, #28]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10f      	bne.n	800daf4 <_svfprintf_r+0xcd8>
 800dad4:	9b06      	ldr	r3, [sp, #24]
 800dad6:	2b09      	cmp	r3, #9
 800dad8:	d80c      	bhi.n	800daf4 <_svfprintf_r+0xcd8>
 800dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dadc:	9a08      	ldr	r2, [sp, #32]
 800dade:	9319      	str	r3, [sp, #100]	; 0x64
 800dae0:	ab58      	add	r3, sp, #352	; 0x160
 800dae2:	1a9b      	subs	r3, r3, r2
 800dae4:	9309      	str	r3, [sp, #36]	; 0x24
 800dae6:	2300      	movs	r3, #0
 800dae8:	0026      	movs	r6, r4
 800daea:	930c      	str	r3, [sp, #48]	; 0x30
 800daec:	001d      	movs	r5, r3
 800daee:	9310      	str	r3, [sp, #64]	; 0x40
 800daf0:	9311      	str	r3, [sp, #68]	; 0x44
 800daf2:	e4f2      	b.n	800d4da <_svfprintf_r+0x6be>
 800daf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daf6:	9d08      	ldr	r5, [sp, #32]
 800daf8:	9306      	str	r3, [sp, #24]
 800dafa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dafc:	9307      	str	r3, [sp, #28]
 800dafe:	e7b7      	b.n	800da70 <_svfprintf_r+0xc54>
 800db00:	200f      	movs	r0, #15
 800db02:	ab58      	add	r3, sp, #352	; 0x160
 800db04:	9308      	str	r3, [sp, #32]
 800db06:	9b08      	ldr	r3, [sp, #32]
 800db08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800db0a:	3b01      	subs	r3, #1
 800db0c:	9308      	str	r3, [sp, #32]
 800db0e:	9b06      	ldr	r3, [sp, #24]
 800db10:	4003      	ands	r3, r0
 800db12:	5cd3      	ldrb	r3, [r2, r3]
 800db14:	9a08      	ldr	r2, [sp, #32]
 800db16:	7013      	strb	r3, [r2, #0]
 800db18:	9b07      	ldr	r3, [sp, #28]
 800db1a:	0719      	lsls	r1, r3, #28
 800db1c:	9b06      	ldr	r3, [sp, #24]
 800db1e:	091a      	lsrs	r2, r3, #4
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	4311      	orrs	r1, r2
 800db24:	091b      	lsrs	r3, r3, #4
 800db26:	9307      	str	r3, [sp, #28]
 800db28:	000b      	movs	r3, r1
 800db2a:	9a07      	ldr	r2, [sp, #28]
 800db2c:	9106      	str	r1, [sp, #24]
 800db2e:	4313      	orrs	r3, r2
 800db30:	d1e9      	bne.n	800db06 <_svfprintf_r+0xcea>
 800db32:	e7d2      	b.n	800dada <_svfprintf_r+0xcbe>
 800db34:	aa58      	add	r2, sp, #352	; 0x160
 800db36:	9208      	str	r2, [sp, #32]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1ce      	bne.n	800dada <_svfprintf_r+0xcbe>
 800db3c:	07f6      	lsls	r6, r6, #31
 800db3e:	d5cc      	bpl.n	800dada <_svfprintf_r+0xcbe>
 800db40:	aa1e      	add	r2, sp, #120	; 0x78
 800db42:	33e7      	adds	r3, #231	; 0xe7
 800db44:	189b      	adds	r3, r3, r2
 800db46:	2230      	movs	r2, #48	; 0x30
 800db48:	e789      	b.n	800da5e <_svfprintf_r+0xc42>
 800db4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d100      	bne.n	800db52 <_svfprintf_r+0xd36>
 800db50:	e364      	b.n	800e21c <_svfprintf_r+0x1400>
 800db52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db54:	211b      	movs	r1, #27
 800db56:	ab3f      	add	r3, sp, #252	; 0xfc
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	2200      	movs	r2, #0
 800db5c:	a81e      	add	r0, sp, #120	; 0x78
 800db5e:	1809      	adds	r1, r1, r0
 800db60:	700a      	strb	r2, [r1, #0]
 800db62:	940d      	str	r4, [sp, #52]	; 0x34
 800db64:	f7ff fabd 	bl	800d0e2 <_svfprintf_r+0x2c6>
 800db68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db6a:	f7ff fb44 	bl	800d1f6 <_svfprintf_r+0x3da>
 800db6e:	2010      	movs	r0, #16
 800db70:	1812      	adds	r2, r2, r0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	922e      	str	r2, [sp, #184]	; 0xb8
 800db76:	932d      	str	r3, [sp, #180]	; 0xb4
 800db78:	2b07      	cmp	r3, #7
 800db7a:	dd08      	ble.n	800db8e <_svfprintf_r+0xd72>
 800db7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db80:	aa2c      	add	r2, sp, #176	; 0xb0
 800db82:	f003 fa61 	bl	8011048 <__ssprint_r>
 800db86:	2800      	cmp	r0, #0
 800db88:	d000      	beq.n	800db8c <_svfprintf_r+0xd70>
 800db8a:	e326      	b.n	800e1da <_svfprintf_r+0x13be>
 800db8c:	a92f      	add	r1, sp, #188	; 0xbc
 800db8e:	000f      	movs	r7, r1
 800db90:	3c10      	subs	r4, #16
 800db92:	e4c5      	b.n	800d520 <_svfprintf_r+0x704>
 800db94:	2010      	movs	r0, #16
 800db96:	1812      	adds	r2, r2, r0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	922e      	str	r2, [sp, #184]	; 0xb8
 800db9c:	932d      	str	r3, [sp, #180]	; 0xb4
 800db9e:	2b07      	cmp	r3, #7
 800dba0:	dd08      	ble.n	800dbb4 <_svfprintf_r+0xd98>
 800dba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dba6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dba8:	f003 fa4e 	bl	8011048 <__ssprint_r>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d000      	beq.n	800dbb2 <_svfprintf_r+0xd96>
 800dbb0:	e313      	b.n	800e1da <_svfprintf_r+0x13be>
 800dbb2:	a92f      	add	r1, sp, #188	; 0xbc
 800dbb4:	000f      	movs	r7, r1
 800dbb6:	3c10      	subs	r4, #16
 800dbb8:	e50b      	b.n	800d5d2 <_svfprintf_r+0x7b6>
 800dbba:	2010      	movs	r0, #16
 800dbbc:	1812      	adds	r2, r2, r0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbc2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbc4:	2b07      	cmp	r3, #7
 800dbc6:	dd08      	ble.n	800dbda <_svfprintf_r+0xdbe>
 800dbc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbcc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbce:	f003 fa3b 	bl	8011048 <__ssprint_r>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d000      	beq.n	800dbd8 <_svfprintf_r+0xdbc>
 800dbd6:	e300      	b.n	800e1da <_svfprintf_r+0x13be>
 800dbd8:	a92f      	add	r1, sp, #188	; 0xbc
 800dbda:	000f      	movs	r7, r1
 800dbdc:	3c10      	subs	r4, #16
 800dbde:	e518      	b.n	800d612 <_svfprintf_r+0x7f6>
 800dbe0:	fffffbff 	.word	0xfffffbff
 800dbe4:	00007830 	.word	0x00007830
 800dbe8:	0801448c 	.word	0x0801448c
 800dbec:	0801449d 	.word	0x0801449d
 800dbf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbf2:	2b65      	cmp	r3, #101	; 0x65
 800dbf4:	dc00      	bgt.n	800dbf8 <_svfprintf_r+0xddc>
 800dbf6:	e241      	b.n	800e07c <_svfprintf_r+0x1260>
 800dbf8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dbfa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f7f2 fc22 	bl	8000448 <__aeabi_dcmpeq>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d077      	beq.n	800dcf8 <_svfprintf_r+0xedc>
 800dc08:	4bca      	ldr	r3, [pc, #808]	; (800df34 <_svfprintf_r+0x1118>)
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	607b      	str	r3, [r7, #4]
 800dc10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc12:	3708      	adds	r7, #8
 800dc14:	3301      	adds	r3, #1
 800dc16:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc1e:	2b07      	cmp	r3, #7
 800dc20:	dd08      	ble.n	800dc34 <_svfprintf_r+0xe18>
 800dc22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc26:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc28:	f003 fa0e 	bl	8011048 <__ssprint_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d000      	beq.n	800dc32 <_svfprintf_r+0xe16>
 800dc30:	e2d3      	b.n	800e1da <_svfprintf_r+0x13be>
 800dc32:	af2f      	add	r7, sp, #188	; 0xbc
 800dc34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	db01      	blt.n	800dc40 <_svfprintf_r+0xe24>
 800dc3c:	07f3      	lsls	r3, r6, #31
 800dc3e:	d51b      	bpl.n	800dc78 <_svfprintf_r+0xe5c>
 800dc40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dc42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc44:	603b      	str	r3, [r7, #0]
 800dc46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc48:	607b      	str	r3, [r7, #4]
 800dc4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	189b      	adds	r3, r3, r2
 800dc50:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc54:	3301      	adds	r3, #1
 800dc56:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc58:	2b07      	cmp	r3, #7
 800dc5a:	dd08      	ble.n	800dc6e <_svfprintf_r+0xe52>
 800dc5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc60:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc62:	f003 f9f1 	bl	8011048 <__ssprint_r>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d000      	beq.n	800dc6c <_svfprintf_r+0xe50>
 800dc6a:	e2b6      	b.n	800e1da <_svfprintf_r+0x13be>
 800dc6c:	af2f      	add	r7, sp, #188	; 0xbc
 800dc6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc70:	2510      	movs	r5, #16
 800dc72:	1e5c      	subs	r4, r3, #1
 800dc74:	2c00      	cmp	r4, #0
 800dc76:	dc2e      	bgt.n	800dcd6 <_svfprintf_r+0xeba>
 800dc78:	0776      	lsls	r6, r6, #29
 800dc7a:	d500      	bpl.n	800dc7e <_svfprintf_r+0xe62>
 800dc7c:	e290      	b.n	800e1a0 <_svfprintf_r+0x1384>
 800dc7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dc80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc82:	4293      	cmp	r3, r2
 800dc84:	da00      	bge.n	800dc88 <_svfprintf_r+0xe6c>
 800dc86:	0013      	movs	r3, r2
 800dc88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc8a:	18d3      	adds	r3, r2, r3
 800dc8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <_svfprintf_r+0xe88>
 800dc94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc98:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc9a:	f003 f9d5 	bl	8011048 <__ssprint_r>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d000      	beq.n	800dca4 <_svfprintf_r+0xe88>
 800dca2:	e29a      	b.n	800e1da <_svfprintf_r+0x13be>
 800dca4:	2300      	movs	r3, #0
 800dca6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d000      	beq.n	800dcb0 <_svfprintf_r+0xe94>
 800dcae:	e2b0      	b.n	800e212 <_svfprintf_r+0x13f6>
 800dcb0:	af2f      	add	r7, sp, #188	; 0xbc
 800dcb2:	e5dc      	b.n	800d86e <_svfprintf_r+0xa52>
 800dcb4:	3210      	adds	r2, #16
 800dcb6:	607d      	str	r5, [r7, #4]
 800dcb8:	922e      	str	r2, [sp, #184]	; 0xb8
 800dcba:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcbc:	2b07      	cmp	r3, #7
 800dcbe:	dd08      	ble.n	800dcd2 <_svfprintf_r+0xeb6>
 800dcc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcc6:	f003 f9bf 	bl	8011048 <__ssprint_r>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d000      	beq.n	800dcd0 <_svfprintf_r+0xeb4>
 800dcce:	e284      	b.n	800e1da <_svfprintf_r+0x13be>
 800dcd0:	a92f      	add	r1, sp, #188	; 0xbc
 800dcd2:	000f      	movs	r7, r1
 800dcd4:	3c10      	subs	r4, #16
 800dcd6:	0039      	movs	r1, r7
 800dcd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcda:	4897      	ldr	r0, [pc, #604]	; (800df38 <_svfprintf_r+0x111c>)
 800dcdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dcde:	3301      	adds	r3, #1
 800dce0:	3108      	adds	r1, #8
 800dce2:	6038      	str	r0, [r7, #0]
 800dce4:	2c10      	cmp	r4, #16
 800dce6:	dce5      	bgt.n	800dcb4 <_svfprintf_r+0xe98>
 800dce8:	607c      	str	r4, [r7, #4]
 800dcea:	18a4      	adds	r4, r4, r2
 800dcec:	942e      	str	r4, [sp, #184]	; 0xb8
 800dcee:	000f      	movs	r7, r1
 800dcf0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcf2:	2b07      	cmp	r3, #7
 800dcf4:	ddc0      	ble.n	800dc78 <_svfprintf_r+0xe5c>
 800dcf6:	e05f      	b.n	800ddb8 <_svfprintf_r+0xf9c>
 800dcf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dc78      	bgt.n	800ddf0 <_svfprintf_r+0xfd4>
 800dcfe:	4b8d      	ldr	r3, [pc, #564]	; (800df34 <_svfprintf_r+0x1118>)
 800dd00:	603b      	str	r3, [r7, #0]
 800dd02:	2301      	movs	r3, #1
 800dd04:	607b      	str	r3, [r7, #4]
 800dd06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd08:	3708      	adds	r7, #8
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd10:	3301      	adds	r3, #1
 800dd12:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd14:	2b07      	cmp	r3, #7
 800dd16:	dd08      	ble.n	800dd2a <_svfprintf_r+0xf0e>
 800dd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd1c:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd1e:	f003 f993 	bl	8011048 <__ssprint_r>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d000      	beq.n	800dd28 <_svfprintf_r+0xf0c>
 800dd26:	e258      	b.n	800e1da <_svfprintf_r+0x13be>
 800dd28:	af2f      	add	r7, sp, #188	; 0xbc
 800dd2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dd2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd2e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd30:	430b      	orrs	r3, r1
 800dd32:	2101      	movs	r1, #1
 800dd34:	4031      	ands	r1, r6
 800dd36:	430b      	orrs	r3, r1
 800dd38:	d09e      	beq.n	800dc78 <_svfprintf_r+0xe5c>
 800dd3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd3c:	603b      	str	r3, [r7, #0]
 800dd3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd40:	607b      	str	r3, [r7, #4]
 800dd42:	189a      	adds	r2, r3, r2
 800dd44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd46:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd48:	3301      	adds	r3, #1
 800dd4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	2b07      	cmp	r3, #7
 800dd50:	dd08      	ble.n	800dd64 <_svfprintf_r+0xf48>
 800dd52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd56:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd58:	f003 f976 	bl	8011048 <__ssprint_r>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d000      	beq.n	800dd62 <_svfprintf_r+0xf46>
 800dd60:	e23b      	b.n	800e1da <_svfprintf_r+0x13be>
 800dd62:	af2f      	add	r7, sp, #188	; 0xbc
 800dd64:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dd66:	2c00      	cmp	r4, #0
 800dd68:	da19      	bge.n	800dd9e <_svfprintf_r+0xf82>
 800dd6a:	0038      	movs	r0, r7
 800dd6c:	2510      	movs	r5, #16
 800dd6e:	4264      	negs	r4, r4
 800dd70:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800dd72:	4a71      	ldr	r2, [pc, #452]	; (800df38 <_svfprintf_r+0x111c>)
 800dd74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd76:	3101      	adds	r1, #1
 800dd78:	3708      	adds	r7, #8
 800dd7a:	6002      	str	r2, [r0, #0]
 800dd7c:	2c10      	cmp	r4, #16
 800dd7e:	dc25      	bgt.n	800ddcc <_svfprintf_r+0xfb0>
 800dd80:	6044      	str	r4, [r0, #4]
 800dd82:	18e4      	adds	r4, r4, r3
 800dd84:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd86:	912d      	str	r1, [sp, #180]	; 0xb4
 800dd88:	2907      	cmp	r1, #7
 800dd8a:	dd08      	ble.n	800dd9e <_svfprintf_r+0xf82>
 800dd8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd90:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd92:	f003 f959 	bl	8011048 <__ssprint_r>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d000      	beq.n	800dd9c <_svfprintf_r+0xf80>
 800dd9a:	e21e      	b.n	800e1da <_svfprintf_r+0x13be>
 800dd9c:	af2f      	add	r7, sp, #188	; 0xbc
 800dd9e:	9b08      	ldr	r3, [sp, #32]
 800dda0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dda2:	603b      	str	r3, [r7, #0]
 800dda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda6:	18d2      	adds	r2, r2, r3
 800dda8:	922e      	str	r2, [sp, #184]	; 0xb8
 800ddaa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ddac:	607b      	str	r3, [r7, #4]
 800ddae:	3201      	adds	r2, #1
 800ddb0:	922d      	str	r2, [sp, #180]	; 0xb4
 800ddb2:	2a07      	cmp	r2, #7
 800ddb4:	dc00      	bgt.n	800ddb8 <_svfprintf_r+0xf9c>
 800ddb6:	e45b      	b.n	800d670 <_svfprintf_r+0x854>
 800ddb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddbe:	f003 f943 	bl	8011048 <__ssprint_r>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d000      	beq.n	800ddc8 <_svfprintf_r+0xfac>
 800ddc6:	e208      	b.n	800e1da <_svfprintf_r+0x13be>
 800ddc8:	af2f      	add	r7, sp, #188	; 0xbc
 800ddca:	e755      	b.n	800dc78 <_svfprintf_r+0xe5c>
 800ddcc:	3310      	adds	r3, #16
 800ddce:	6045      	str	r5, [r0, #4]
 800ddd0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddd2:	912d      	str	r1, [sp, #180]	; 0xb4
 800ddd4:	2907      	cmp	r1, #7
 800ddd6:	dd08      	ble.n	800ddea <_svfprintf_r+0xfce>
 800ddd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dddc:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddde:	f003 f933 	bl	8011048 <__ssprint_r>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d000      	beq.n	800dde8 <_svfprintf_r+0xfcc>
 800dde6:	e1f8      	b.n	800e1da <_svfprintf_r+0x13be>
 800dde8:	af2f      	add	r7, sp, #188	; 0xbc
 800ddea:	0038      	movs	r0, r7
 800ddec:	3c10      	subs	r4, #16
 800ddee:	e7bf      	b.n	800dd70 <_svfprintf_r+0xf54>
 800ddf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddf2:	002c      	movs	r4, r5
 800ddf4:	429d      	cmp	r5, r3
 800ddf6:	dd00      	ble.n	800ddfa <_svfprintf_r+0xfde>
 800ddf8:	001c      	movs	r4, r3
 800ddfa:	2c00      	cmp	r4, #0
 800ddfc:	dd14      	ble.n	800de28 <_svfprintf_r+0x100c>
 800ddfe:	9b08      	ldr	r3, [sp, #32]
 800de00:	607c      	str	r4, [r7, #4]
 800de02:	603b      	str	r3, [r7, #0]
 800de04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de06:	3708      	adds	r7, #8
 800de08:	18e3      	adds	r3, r4, r3
 800de0a:	932e      	str	r3, [sp, #184]	; 0xb8
 800de0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de0e:	3301      	adds	r3, #1
 800de10:	932d      	str	r3, [sp, #180]	; 0xb4
 800de12:	2b07      	cmp	r3, #7
 800de14:	dd08      	ble.n	800de28 <_svfprintf_r+0x100c>
 800de16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800de1c:	f003 f914 	bl	8011048 <__ssprint_r>
 800de20:	2800      	cmp	r0, #0
 800de22:	d000      	beq.n	800de26 <_svfprintf_r+0x100a>
 800de24:	e1d9      	b.n	800e1da <_svfprintf_r+0x13be>
 800de26:	af2f      	add	r7, sp, #188	; 0xbc
 800de28:	43e3      	mvns	r3, r4
 800de2a:	17db      	asrs	r3, r3, #31
 800de2c:	401c      	ands	r4, r3
 800de2e:	1b2c      	subs	r4, r5, r4
 800de30:	2c00      	cmp	r4, #0
 800de32:	dd18      	ble.n	800de66 <_svfprintf_r+0x104a>
 800de34:	0039      	movs	r1, r7
 800de36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de38:	483f      	ldr	r0, [pc, #252]	; (800df38 <_svfprintf_r+0x111c>)
 800de3a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de3c:	3301      	adds	r3, #1
 800de3e:	3108      	adds	r1, #8
 800de40:	6038      	str	r0, [r7, #0]
 800de42:	2c10      	cmp	r4, #16
 800de44:	dc7a      	bgt.n	800df3c <_svfprintf_r+0x1120>
 800de46:	607c      	str	r4, [r7, #4]
 800de48:	18a4      	adds	r4, r4, r2
 800de4a:	000f      	movs	r7, r1
 800de4c:	942e      	str	r4, [sp, #184]	; 0xb8
 800de4e:	932d      	str	r3, [sp, #180]	; 0xb4
 800de50:	2b07      	cmp	r3, #7
 800de52:	dd08      	ble.n	800de66 <_svfprintf_r+0x104a>
 800de54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de58:	aa2c      	add	r2, sp, #176	; 0xb0
 800de5a:	f003 f8f5 	bl	8011048 <__ssprint_r>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d000      	beq.n	800de64 <_svfprintf_r+0x1048>
 800de62:	e1ba      	b.n	800e1da <_svfprintf_r+0x13be>
 800de64:	af2f      	add	r7, sp, #188	; 0xbc
 800de66:	9b08      	ldr	r3, [sp, #32]
 800de68:	195d      	adds	r5, r3, r5
 800de6a:	0573      	lsls	r3, r6, #21
 800de6c:	d50b      	bpl.n	800de86 <_svfprintf_r+0x106a>
 800de6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de70:	2b00      	cmp	r3, #0
 800de72:	d176      	bne.n	800df62 <_svfprintf_r+0x1146>
 800de74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	d176      	bne.n	800df68 <_svfprintf_r+0x114c>
 800de7a:	9b08      	ldr	r3, [sp, #32]
 800de7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de7e:	189b      	adds	r3, r3, r2
 800de80:	429d      	cmp	r5, r3
 800de82:	d900      	bls.n	800de86 <_svfprintf_r+0x106a>
 800de84:	001d      	movs	r5, r3
 800de86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de8a:	4293      	cmp	r3, r2
 800de8c:	db01      	blt.n	800de92 <_svfprintf_r+0x1076>
 800de8e:	07f3      	lsls	r3, r6, #31
 800de90:	d516      	bpl.n	800dec0 <_svfprintf_r+0x10a4>
 800de92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800de94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800de9a:	607b      	str	r3, [r7, #4]
 800de9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800de9e:	3708      	adds	r7, #8
 800dea0:	189b      	adds	r3, r3, r2
 800dea2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dea4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dea6:	3301      	adds	r3, #1
 800dea8:	932d      	str	r3, [sp, #180]	; 0xb4
 800deaa:	2b07      	cmp	r3, #7
 800deac:	dd08      	ble.n	800dec0 <_svfprintf_r+0x10a4>
 800deae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deb2:	aa2c      	add	r2, sp, #176	; 0xb0
 800deb4:	f003 f8c8 	bl	8011048 <__ssprint_r>
 800deb8:	2800      	cmp	r0, #0
 800deba:	d000      	beq.n	800debe <_svfprintf_r+0x10a2>
 800debc:	e18d      	b.n	800e1da <_svfprintf_r+0x13be>
 800debe:	af2f      	add	r7, sp, #188	; 0xbc
 800dec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dec2:	9b08      	ldr	r3, [sp, #32]
 800dec4:	4694      	mov	ip, r2
 800dec6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dec8:	4463      	add	r3, ip
 800deca:	1b5b      	subs	r3, r3, r5
 800decc:	1b14      	subs	r4, r2, r4
 800dece:	429c      	cmp	r4, r3
 800ded0:	dd00      	ble.n	800ded4 <_svfprintf_r+0x10b8>
 800ded2:	001c      	movs	r4, r3
 800ded4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ded6:	2c00      	cmp	r4, #0
 800ded8:	dd12      	ble.n	800df00 <_svfprintf_r+0x10e4>
 800deda:	18e3      	adds	r3, r4, r3
 800dedc:	932e      	str	r3, [sp, #184]	; 0xb8
 800dede:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dee0:	603d      	str	r5, [r7, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	607c      	str	r4, [r7, #4]
 800dee6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dee8:	3708      	adds	r7, #8
 800deea:	2b07      	cmp	r3, #7
 800deec:	dd08      	ble.n	800df00 <_svfprintf_r+0x10e4>
 800deee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800def0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800def2:	aa2c      	add	r2, sp, #176	; 0xb0
 800def4:	f003 f8a8 	bl	8011048 <__ssprint_r>
 800def8:	2800      	cmp	r0, #0
 800defa:	d000      	beq.n	800defe <_svfprintf_r+0x10e2>
 800defc:	e16d      	b.n	800e1da <_svfprintf_r+0x13be>
 800defe:	af2f      	add	r7, sp, #188	; 0xbc
 800df00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df04:	2510      	movs	r5, #16
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	43e2      	mvns	r2, r4
 800df0a:	17d2      	asrs	r2, r2, #31
 800df0c:	4014      	ands	r4, r2
 800df0e:	1b1c      	subs	r4, r3, r4
 800df10:	2c00      	cmp	r4, #0
 800df12:	dc00      	bgt.n	800df16 <_svfprintf_r+0x10fa>
 800df14:	e6b0      	b.n	800dc78 <_svfprintf_r+0xe5c>
 800df16:	0039      	movs	r1, r7
 800df18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df1a:	4807      	ldr	r0, [pc, #28]	; (800df38 <_svfprintf_r+0x111c>)
 800df1c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df1e:	3301      	adds	r3, #1
 800df20:	3108      	adds	r1, #8
 800df22:	6038      	str	r0, [r7, #0]
 800df24:	2c10      	cmp	r4, #16
 800df26:	dd00      	ble.n	800df2a <_svfprintf_r+0x110e>
 800df28:	e096      	b.n	800e058 <_svfprintf_r+0x123c>
 800df2a:	1912      	adds	r2, r2, r4
 800df2c:	607c      	str	r4, [r7, #4]
 800df2e:	922e      	str	r2, [sp, #184]	; 0xb8
 800df30:	e6dd      	b.n	800dcee <_svfprintf_r+0xed2>
 800df32:	46c0      	nop			; (mov r8, r8)
 800df34:	080144ae 	.word	0x080144ae
 800df38:	080144c0 	.word	0x080144c0
 800df3c:	2010      	movs	r0, #16
 800df3e:	1812      	adds	r2, r2, r0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	922e      	str	r2, [sp, #184]	; 0xb8
 800df44:	932d      	str	r3, [sp, #180]	; 0xb4
 800df46:	2b07      	cmp	r3, #7
 800df48:	dd08      	ble.n	800df5c <_svfprintf_r+0x1140>
 800df4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df50:	f003 f87a 	bl	8011048 <__ssprint_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	d000      	beq.n	800df5a <_svfprintf_r+0x113e>
 800df58:	e13f      	b.n	800e1da <_svfprintf_r+0x13be>
 800df5a:	a92f      	add	r1, sp, #188	; 0xbc
 800df5c:	000f      	movs	r7, r1
 800df5e:	3c10      	subs	r4, #16
 800df60:	e768      	b.n	800de34 <_svfprintf_r+0x1018>
 800df62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df64:	2b00      	cmp	r3, #0
 800df66:	d05d      	beq.n	800e024 <_svfprintf_r+0x1208>
 800df68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df6a:	3b01      	subs	r3, #1
 800df6c:	9310      	str	r3, [sp, #64]	; 0x40
 800df6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df7a:	3708      	adds	r7, #8
 800df7c:	189b      	adds	r3, r3, r2
 800df7e:	932e      	str	r3, [sp, #184]	; 0xb8
 800df80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df82:	3301      	adds	r3, #1
 800df84:	932d      	str	r3, [sp, #180]	; 0xb4
 800df86:	2b07      	cmp	r3, #7
 800df88:	dd08      	ble.n	800df9c <_svfprintf_r+0x1180>
 800df8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df8e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df90:	f003 f85a 	bl	8011048 <__ssprint_r>
 800df94:	2800      	cmp	r0, #0
 800df96:	d000      	beq.n	800df9a <_svfprintf_r+0x117e>
 800df98:	e11f      	b.n	800e1da <_svfprintf_r+0x13be>
 800df9a:	af2f      	add	r7, sp, #188	; 0xbc
 800df9c:	9b08      	ldr	r3, [sp, #32]
 800df9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfa0:	189c      	adds	r4, r3, r2
 800dfa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfa4:	1b64      	subs	r4, r4, r5
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	429c      	cmp	r4, r3
 800dfaa:	dd00      	ble.n	800dfae <_svfprintf_r+0x1192>
 800dfac:	001c      	movs	r4, r3
 800dfae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfb0:	2c00      	cmp	r4, #0
 800dfb2:	dd12      	ble.n	800dfda <_svfprintf_r+0x11be>
 800dfb4:	18e3      	adds	r3, r4, r3
 800dfb6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfba:	603d      	str	r5, [r7, #0]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	607c      	str	r4, [r7, #4]
 800dfc0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	2b07      	cmp	r3, #7
 800dfc6:	dd08      	ble.n	800dfda <_svfprintf_r+0x11be>
 800dfc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfcc:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfce:	f003 f83b 	bl	8011048 <__ssprint_r>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d000      	beq.n	800dfd8 <_svfprintf_r+0x11bc>
 800dfd6:	e100      	b.n	800e1da <_svfprintf_r+0x13be>
 800dfd8:	af2f      	add	r7, sp, #188	; 0xbc
 800dfda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	43e3      	mvns	r3, r4
 800dfe0:	17db      	asrs	r3, r3, #31
 800dfe2:	401c      	ands	r4, r3
 800dfe4:	1b14      	subs	r4, r2, r4
 800dfe6:	2c00      	cmp	r4, #0
 800dfe8:	dd18      	ble.n	800e01c <_svfprintf_r+0x1200>
 800dfea:	0039      	movs	r1, r7
 800dfec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfee:	48aa      	ldr	r0, [pc, #680]	; (800e298 <_svfprintf_r+0x147c>)
 800dff0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dff2:	3301      	adds	r3, #1
 800dff4:	3108      	adds	r1, #8
 800dff6:	6038      	str	r0, [r7, #0]
 800dff8:	2c10      	cmp	r4, #16
 800dffa:	dc1a      	bgt.n	800e032 <_svfprintf_r+0x1216>
 800dffc:	1912      	adds	r2, r2, r4
 800dffe:	607c      	str	r4, [r7, #4]
 800e000:	922e      	str	r2, [sp, #184]	; 0xb8
 800e002:	000f      	movs	r7, r1
 800e004:	932d      	str	r3, [sp, #180]	; 0xb4
 800e006:	2b07      	cmp	r3, #7
 800e008:	dd08      	ble.n	800e01c <_svfprintf_r+0x1200>
 800e00a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e00c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e00e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e010:	f003 f81a 	bl	8011048 <__ssprint_r>
 800e014:	2800      	cmp	r0, #0
 800e016:	d000      	beq.n	800e01a <_svfprintf_r+0x11fe>
 800e018:	e0df      	b.n	800e1da <_svfprintf_r+0x13be>
 800e01a:	af2f      	add	r7, sp, #188	; 0xbc
 800e01c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	18ed      	adds	r5, r5, r3
 800e022:	e724      	b.n	800de6e <_svfprintf_r+0x1052>
 800e024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e026:	3b01      	subs	r3, #1
 800e028:	9312      	str	r3, [sp, #72]	; 0x48
 800e02a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e02c:	3b01      	subs	r3, #1
 800e02e:	9311      	str	r3, [sp, #68]	; 0x44
 800e030:	e79d      	b.n	800df6e <_svfprintf_r+0x1152>
 800e032:	2010      	movs	r0, #16
 800e034:	1812      	adds	r2, r2, r0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	922e      	str	r2, [sp, #184]	; 0xb8
 800e03a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e03c:	2b07      	cmp	r3, #7
 800e03e:	dd08      	ble.n	800e052 <_svfprintf_r+0x1236>
 800e040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e042:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e044:	aa2c      	add	r2, sp, #176	; 0xb0
 800e046:	f002 ffff 	bl	8011048 <__ssprint_r>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d000      	beq.n	800e050 <_svfprintf_r+0x1234>
 800e04e:	e0c4      	b.n	800e1da <_svfprintf_r+0x13be>
 800e050:	a92f      	add	r1, sp, #188	; 0xbc
 800e052:	000f      	movs	r7, r1
 800e054:	3c10      	subs	r4, #16
 800e056:	e7c8      	b.n	800dfea <_svfprintf_r+0x11ce>
 800e058:	3210      	adds	r2, #16
 800e05a:	607d      	str	r5, [r7, #4]
 800e05c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e05e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e060:	2b07      	cmp	r3, #7
 800e062:	dd08      	ble.n	800e076 <_svfprintf_r+0x125a>
 800e064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e066:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e068:	aa2c      	add	r2, sp, #176	; 0xb0
 800e06a:	f002 ffed 	bl	8011048 <__ssprint_r>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d000      	beq.n	800e074 <_svfprintf_r+0x1258>
 800e072:	e0b2      	b.n	800e1da <_svfprintf_r+0x13be>
 800e074:	a92f      	add	r1, sp, #188	; 0xbc
 800e076:	000f      	movs	r7, r1
 800e078:	3c10      	subs	r4, #16
 800e07a:	e74c      	b.n	800df16 <_svfprintf_r+0x10fa>
 800e07c:	003c      	movs	r4, r7
 800e07e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e080:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e084:	3101      	adds	r1, #1
 800e086:	3301      	adds	r3, #1
 800e088:	3408      	adds	r4, #8
 800e08a:	2a01      	cmp	r2, #1
 800e08c:	dc03      	bgt.n	800e096 <_svfprintf_r+0x127a>
 800e08e:	2201      	movs	r2, #1
 800e090:	4216      	tst	r6, r2
 800e092:	d100      	bne.n	800e096 <_svfprintf_r+0x127a>
 800e094:	e07f      	b.n	800e196 <_svfprintf_r+0x137a>
 800e096:	9a08      	ldr	r2, [sp, #32]
 800e098:	912e      	str	r1, [sp, #184]	; 0xb8
 800e09a:	603a      	str	r2, [r7, #0]
 800e09c:	2201      	movs	r2, #1
 800e09e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0a0:	607a      	str	r2, [r7, #4]
 800e0a2:	2b07      	cmp	r3, #7
 800e0a4:	dd08      	ble.n	800e0b8 <_svfprintf_r+0x129c>
 800e0a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0ac:	f002 ffcc 	bl	8011048 <__ssprint_r>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d000      	beq.n	800e0b6 <_svfprintf_r+0x129a>
 800e0b4:	e091      	b.n	800e1da <_svfprintf_r+0x13be>
 800e0b6:	ac2f      	add	r4, sp, #188	; 0xbc
 800e0b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0c0:	6063      	str	r3, [r4, #4]
 800e0c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0c4:	3408      	adds	r4, #8
 800e0c6:	189b      	adds	r3, r3, r2
 800e0c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0d0:	2b07      	cmp	r3, #7
 800e0d2:	dd07      	ble.n	800e0e4 <_svfprintf_r+0x12c8>
 800e0d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0d8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0da:	f002 ffb5 	bl	8011048 <__ssprint_r>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d17b      	bne.n	800e1da <_svfprintf_r+0x13be>
 800e0e2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e0e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e0ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0f0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e0f2:	1e5d      	subs	r5, r3, #1
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f7f2 f9a7 	bl	8000448 <__aeabi_dcmpeq>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d126      	bne.n	800e14c <_svfprintf_r+0x1330>
 800e0fe:	9b08      	ldr	r3, [sp, #32]
 800e100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e102:	3301      	adds	r3, #1
 800e104:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e106:	6023      	str	r3, [r4, #0]
 800e108:	1e7b      	subs	r3, r7, #1
 800e10a:	3201      	adds	r2, #1
 800e10c:	185b      	adds	r3, r3, r1
 800e10e:	6065      	str	r5, [r4, #4]
 800e110:	932e      	str	r3, [sp, #184]	; 0xb8
 800e112:	922d      	str	r2, [sp, #180]	; 0xb4
 800e114:	3408      	adds	r4, #8
 800e116:	2a07      	cmp	r2, #7
 800e118:	dd07      	ble.n	800e12a <_svfprintf_r+0x130e>
 800e11a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e11c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e11e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e120:	f002 ff92 	bl	8011048 <__ssprint_r>
 800e124:	2800      	cmp	r0, #0
 800e126:	d158      	bne.n	800e1da <_svfprintf_r+0x13be>
 800e128:	ac2f      	add	r4, sp, #188	; 0xbc
 800e12a:	ab28      	add	r3, sp, #160	; 0xa0
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e130:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e132:	6063      	str	r3, [r4, #4]
 800e134:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e136:	189b      	adds	r3, r3, r2
 800e138:	932e      	str	r3, [sp, #184]	; 0xb8
 800e13a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e13c:	3301      	adds	r3, #1
 800e13e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e140:	2b07      	cmp	r3, #7
 800e142:	dd00      	ble.n	800e146 <_svfprintf_r+0x132a>
 800e144:	e638      	b.n	800ddb8 <_svfprintf_r+0xf9c>
 800e146:	3408      	adds	r4, #8
 800e148:	0027      	movs	r7, r4
 800e14a:	e595      	b.n	800dc78 <_svfprintf_r+0xe5c>
 800e14c:	2710      	movs	r7, #16
 800e14e:	2d00      	cmp	r5, #0
 800e150:	ddeb      	ble.n	800e12a <_svfprintf_r+0x130e>
 800e152:	0021      	movs	r1, r4
 800e154:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e156:	4850      	ldr	r0, [pc, #320]	; (800e298 <_svfprintf_r+0x147c>)
 800e158:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e15a:	3301      	adds	r3, #1
 800e15c:	3108      	adds	r1, #8
 800e15e:	6020      	str	r0, [r4, #0]
 800e160:	2d10      	cmp	r5, #16
 800e162:	dc07      	bgt.n	800e174 <_svfprintf_r+0x1358>
 800e164:	6065      	str	r5, [r4, #4]
 800e166:	000c      	movs	r4, r1
 800e168:	18ad      	adds	r5, r5, r2
 800e16a:	952e      	str	r5, [sp, #184]	; 0xb8
 800e16c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e16e:	2b07      	cmp	r3, #7
 800e170:	dddb      	ble.n	800e12a <_svfprintf_r+0x130e>
 800e172:	e7d2      	b.n	800e11a <_svfprintf_r+0x12fe>
 800e174:	3210      	adds	r2, #16
 800e176:	6067      	str	r7, [r4, #4]
 800e178:	922e      	str	r2, [sp, #184]	; 0xb8
 800e17a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e17c:	2b07      	cmp	r3, #7
 800e17e:	dd07      	ble.n	800e190 <_svfprintf_r+0x1374>
 800e180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e182:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e184:	aa2c      	add	r2, sp, #176	; 0xb0
 800e186:	f002 ff5f 	bl	8011048 <__ssprint_r>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d125      	bne.n	800e1da <_svfprintf_r+0x13be>
 800e18e:	a92f      	add	r1, sp, #188	; 0xbc
 800e190:	000c      	movs	r4, r1
 800e192:	3d10      	subs	r5, #16
 800e194:	e7dd      	b.n	800e152 <_svfprintf_r+0x1336>
 800e196:	9808      	ldr	r0, [sp, #32]
 800e198:	912e      	str	r1, [sp, #184]	; 0xb8
 800e19a:	c705      	stmia	r7!, {r0, r2}
 800e19c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e19e:	e7e6      	b.n	800e16e <_svfprintf_r+0x1352>
 800e1a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e1a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1a4:	2510      	movs	r5, #16
 800e1a6:	1a9c      	subs	r4, r3, r2
 800e1a8:	2c00      	cmp	r4, #0
 800e1aa:	dc00      	bgt.n	800e1ae <_svfprintf_r+0x1392>
 800e1ac:	e567      	b.n	800dc7e <_svfprintf_r+0xe62>
 800e1ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1b0:	493a      	ldr	r1, [pc, #232]	; (800e29c <_svfprintf_r+0x1480>)
 800e1b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	6039      	str	r1, [r7, #0]
 800e1b8:	2c10      	cmp	r4, #16
 800e1ba:	dc19      	bgt.n	800e1f0 <_svfprintf_r+0x13d4>
 800e1bc:	607c      	str	r4, [r7, #4]
 800e1be:	18a4      	adds	r4, r4, r2
 800e1c0:	942e      	str	r4, [sp, #184]	; 0xb8
 800e1c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1c4:	2b07      	cmp	r3, #7
 800e1c6:	dc00      	bgt.n	800e1ca <_svfprintf_r+0x13ae>
 800e1c8:	e559      	b.n	800dc7e <_svfprintf_r+0xe62>
 800e1ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1ce:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1d0:	f002 ff3a 	bl	8011048 <__ssprint_r>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d100      	bne.n	800e1da <_svfprintf_r+0x13be>
 800e1d8:	e551      	b.n	800dc7e <_svfprintf_r+0xe62>
 800e1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <_svfprintf_r+0x13c8>
 800e1e0:	f7ff f845 	bl	800d26e <_svfprintf_r+0x452>
 800e1e4:	0019      	movs	r1, r3
 800e1e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1e8:	f7fd fd80 	bl	800bcec <_free_r>
 800e1ec:	f7ff f83f 	bl	800d26e <_svfprintf_r+0x452>
 800e1f0:	3210      	adds	r2, #16
 800e1f2:	607d      	str	r5, [r7, #4]
 800e1f4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e1f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	2b07      	cmp	r3, #7
 800e1fc:	dd07      	ble.n	800e20e <_svfprintf_r+0x13f2>
 800e1fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e200:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e202:	aa2c      	add	r2, sp, #176	; 0xb0
 800e204:	f002 ff20 	bl	8011048 <__ssprint_r>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d1e6      	bne.n	800e1da <_svfprintf_r+0x13be>
 800e20c:	af2f      	add	r7, sp, #188	; 0xbc
 800e20e:	3c10      	subs	r4, #16
 800e210:	e7cd      	b.n	800e1ae <_svfprintf_r+0x1392>
 800e212:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e214:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e216:	f7fd fd69 	bl	800bcec <_free_r>
 800e21a:	e549      	b.n	800dcb0 <_svfprintf_r+0xe94>
 800e21c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <_svfprintf_r+0x140a>
 800e222:	f7ff f824 	bl	800d26e <_svfprintf_r+0x452>
 800e226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e228:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e22a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e22c:	f002 ff0c 	bl	8011048 <__ssprint_r>
 800e230:	f7ff f81d 	bl	800d26e <_svfprintf_r+0x452>
 800e234:	0034      	movs	r4, r6
 800e236:	2a00      	cmp	r2, #0
 800e238:	d101      	bne.n	800e23e <_svfprintf_r+0x1422>
 800e23a:	f7fe ff8c 	bl	800d156 <_svfprintf_r+0x33a>
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d101      	bne.n	800e246 <_svfprintf_r+0x142a>
 800e242:	f7ff fc01 	bl	800da48 <_svfprintf_r+0xc2c>
 800e246:	2b02      	cmp	r3, #2
 800e248:	d100      	bne.n	800e24c <_svfprintf_r+0x1430>
 800e24a:	e459      	b.n	800db00 <_svfprintf_r+0xce4>
 800e24c:	2507      	movs	r5, #7
 800e24e:	ab58      	add	r3, sp, #352	; 0x160
 800e250:	9308      	str	r3, [sp, #32]
 800e252:	9a08      	ldr	r2, [sp, #32]
 800e254:	0013      	movs	r3, r2
 800e256:	3b01      	subs	r3, #1
 800e258:	9308      	str	r3, [sp, #32]
 800e25a:	9b06      	ldr	r3, [sp, #24]
 800e25c:	9908      	ldr	r1, [sp, #32]
 800e25e:	402b      	ands	r3, r5
 800e260:	3330      	adds	r3, #48	; 0x30
 800e262:	700b      	strb	r3, [r1, #0]
 800e264:	9907      	ldr	r1, [sp, #28]
 800e266:	074e      	lsls	r6, r1, #29
 800e268:	9906      	ldr	r1, [sp, #24]
 800e26a:	08c8      	lsrs	r0, r1, #3
 800e26c:	9907      	ldr	r1, [sp, #28]
 800e26e:	4306      	orrs	r6, r0
 800e270:	08c9      	lsrs	r1, r1, #3
 800e272:	9107      	str	r1, [sp, #28]
 800e274:	0031      	movs	r1, r6
 800e276:	9807      	ldr	r0, [sp, #28]
 800e278:	9606      	str	r6, [sp, #24]
 800e27a:	4301      	orrs	r1, r0
 800e27c:	d1e9      	bne.n	800e252 <_svfprintf_r+0x1436>
 800e27e:	07e1      	lsls	r1, r4, #31
 800e280:	d400      	bmi.n	800e284 <_svfprintf_r+0x1468>
 800e282:	e42a      	b.n	800dada <_svfprintf_r+0xcbe>
 800e284:	2b30      	cmp	r3, #48	; 0x30
 800e286:	d100      	bne.n	800e28a <_svfprintf_r+0x146e>
 800e288:	e427      	b.n	800dada <_svfprintf_r+0xcbe>
 800e28a:	2130      	movs	r1, #48	; 0x30
 800e28c:	9b08      	ldr	r3, [sp, #32]
 800e28e:	3b01      	subs	r3, #1
 800e290:	7019      	strb	r1, [r3, #0]
 800e292:	1e93      	subs	r3, r2, #2
 800e294:	9308      	str	r3, [sp, #32]
 800e296:	e420      	b.n	800dada <_svfprintf_r+0xcbe>
 800e298:	080144c0 	.word	0x080144c0
 800e29c:	080144b0 	.word	0x080144b0

0800e2a0 <__ssvfscanf_r>:
 800e2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a2:	4ca7      	ldr	r4, [pc, #668]	; (800e540 <__ssvfscanf_r+0x2a0>)
 800e2a4:	44a5      	add	sp, r4
 800e2a6:	af02      	add	r7, sp, #8
 800e2a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e2aa:	000b      	movs	r3, r1
 800e2ac:	6378      	str	r0, [r7, #52]	; 0x34
 800e2ae:	6479      	str	r1, [r7, #68]	; 0x44
 800e2b0:	61ba      	str	r2, [r7, #24]
 800e2b2:	220c      	movs	r2, #12
 800e2b4:	5e9a      	ldrsh	r2, [r3, r2]
 800e2b6:	2380      	movs	r3, #128	; 0x80
 800e2b8:	019b      	lsls	r3, r3, #6
 800e2ba:	421a      	tst	r2, r3
 800e2bc:	d105      	bne.n	800e2ca <__ssvfscanf_r+0x2a>
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	818b      	strh	r3, [r1, #12]
 800e2c2:	4aa0      	ldr	r2, [pc, #640]	; (800e544 <__ssvfscanf_r+0x2a4>)
 800e2c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	664b      	str	r3, [r1, #100]	; 0x64
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	617b      	str	r3, [r7, #20]
 800e2ce:	643b      	str	r3, [r7, #64]	; 0x40
 800e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	69ba      	ldr	r2, [r7, #24]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	3201      	adds	r2, #1
 800e2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2e2:	61ba      	str	r2, [r7, #24]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d100      	bne.n	800e2ea <__ssvfscanf_r+0x4a>
 800e2e8:	e0d7      	b.n	800e49a <__ssvfscanf_r+0x1fa>
 800e2ea:	2608      	movs	r6, #8
 800e2ec:	2108      	movs	r1, #8
 800e2ee:	4a96      	ldr	r2, [pc, #600]	; (800e548 <__ssvfscanf_r+0x2a8>)
 800e2f0:	5cd2      	ldrb	r2, [r2, r3]
 800e2f2:	4016      	ands	r6, r2
 800e2f4:	420a      	tst	r2, r1
 800e2f6:	d01d      	beq.n	800e334 <__ssvfscanf_r+0x94>
 800e2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dd12      	ble.n	800e326 <__ssvfscanf_r+0x86>
 800e300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e302:	4991      	ldr	r1, [pc, #580]	; (800e548 <__ssvfscanf_r+0x2a8>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	781a      	ldrb	r2, [r3, #0]
 800e308:	5c8a      	ldrb	r2, [r1, r2]
 800e30a:	2108      	movs	r1, #8
 800e30c:	420a      	tst	r2, r1
 800e30e:	d0e3      	beq.n	800e2d8 <__ssvfscanf_r+0x38>
 800e310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e314:	3201      	adds	r2, #1
 800e316:	63ba      	str	r2, [r7, #56]	; 0x38
 800e318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e31a:	3301      	adds	r3, #1
 800e31c:	6852      	ldr	r2, [r2, #4]
 800e31e:	600b      	str	r3, [r1, #0]
 800e320:	3a01      	subs	r2, #1
 800e322:	604a      	str	r2, [r1, #4]
 800e324:	e7e8      	b.n	800e2f8 <__ssvfscanf_r+0x58>
 800e326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e32a:	f002 ff4d 	bl	80111c8 <__ssrefill_r>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d0e6      	beq.n	800e300 <__ssvfscanf_r+0x60>
 800e332:	e7d1      	b.n	800e2d8 <__ssvfscanf_r+0x38>
 800e334:	2b25      	cmp	r3, #37	; 0x25
 800e336:	d165      	bne.n	800e404 <__ssvfscanf_r+0x164>
 800e338:	250a      	movs	r5, #10
 800e33a:	2480      	movs	r4, #128	; 0x80
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e340:	3b16      	subs	r3, #22
 800e342:	69b9      	ldr	r1, [r7, #24]
 800e344:	3101      	adds	r1, #1
 800e346:	61b9      	str	r1, [r7, #24]
 800e348:	7811      	ldrb	r1, [r2, #0]
 800e34a:	0008      	movs	r0, r1
 800e34c:	3825      	subs	r0, #37	; 0x25
 800e34e:	2855      	cmp	r0, #85	; 0x55
 800e350:	d900      	bls.n	800e354 <__ssvfscanf_r+0xb4>
 800e352:	e170      	b.n	800e636 <__ssvfscanf_r+0x396>
 800e354:	f7f1 fee8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e358:	016f0056 	.word	0x016f0056
 800e35c:	016f016f 	.word	0x016f016f
 800e360:	0081016f 	.word	0x0081016f
 800e364:	016f016f 	.word	0x016f016f
 800e368:	016f016f 	.word	0x016f016f
 800e36c:	00b8016f 	.word	0x00b8016f
 800e370:	00b800b8 	.word	0x00b800b8
 800e374:	00b800b8 	.word	0x00b800b8
 800e378:	00b800b8 	.word	0x00b800b8
 800e37c:	00b800b8 	.word	0x00b800b8
 800e380:	016f00b8 	.word	0x016f00b8
 800e384:	016f016f 	.word	0x016f016f
 800e388:	016f016f 	.word	0x016f016f
 800e38c:	016f016f 	.word	0x016f016f
 800e390:	016f00d8 	.word	0x016f00d8
 800e394:	00c1010a 	.word	0x00c1010a
 800e398:	00d800d8 	.word	0x00d800d8
 800e39c:	016f00d8 	.word	0x016f00d8
 800e3a0:	016f016f 	.word	0x016f016f
 800e3a4:	009f016f 	.word	0x009f016f
 800e3a8:	016f016f 	.word	0x016f016f
 800e3ac:	016f00c9 	.word	0x016f00c9
 800e3b0:	016f016f 	.word	0x016f016f
 800e3b4:	016f00f0 	.word	0x016f00f0
 800e3b8:	016f016f 	.word	0x016f016f
 800e3bc:	00d1016f 	.word	0x00d1016f
 800e3c0:	016f016f 	.word	0x016f016f
 800e3c4:	016f00fe 	.word	0x016f00fe
 800e3c8:	016f016f 	.word	0x016f016f
 800e3cc:	016f016f 	.word	0x016f016f
 800e3d0:	016f00d8 	.word	0x016f00d8
 800e3d4:	00c3010c 	.word	0x00c3010c
 800e3d8:	00d800d8 	.word	0x00d800d8
 800e3dc:	009400d8 	.word	0x009400d8
 800e3e0:	009f012f 	.word	0x009f012f
 800e3e4:	0088016f 	.word	0x0088016f
 800e3e8:	011200a9 	.word	0x011200a9
 800e3ec:	011000cb 	.word	0x011000cb
 800e3f0:	016f016f 	.word	0x016f016f
 800e3f4:	00a600f2 	.word	0x00a600f2
 800e3f8:	016f00cf 	.word	0x016f00cf
 800e3fc:	00d1016f 	.word	0x00d1016f
 800e400:	00a6016f 	.word	0x00a6016f
 800e404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dd12      	ble.n	800e432 <__ssvfscanf_r+0x192>
 800e40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3a01      	subs	r2, #1
 800e414:	7819      	ldrb	r1, [r3, #0]
 800e416:	7812      	ldrb	r2, [r2, #0]
 800e418:	4291      	cmp	r1, r2
 800e41a:	d13e      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e41c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e41e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e420:	6852      	ldr	r2, [r2, #4]
 800e422:	3301      	adds	r3, #1
 800e424:	600b      	str	r3, [r1, #0]
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	3a01      	subs	r2, #1
 800e42a:	604a      	str	r2, [r1, #4]
 800e42c:	3301      	adds	r3, #1
 800e42e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e430:	e752      	b.n	800e2d8 <__ssvfscanf_r+0x38>
 800e432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e436:	f002 fec7 	bl	80111c8 <__ssrefill_r>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d0e6      	beq.n	800e40c <__ssvfscanf_r+0x16c>
 800e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <__ssvfscanf_r+0x1ac>
 800e444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e446:	899b      	ldrh	r3, [r3, #12]
 800e448:	065b      	lsls	r3, r3, #25
 800e44a:	d526      	bpl.n	800e49a <__ssvfscanf_r+0x1fa>
 800e44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d000      	beq.n	800e454 <__ssvfscanf_r+0x1b4>
 800e452:	e0f6      	b.n	800e642 <__ssvfscanf_r+0x3a2>
 800e454:	3b01      	subs	r3, #1
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e458:	e104      	b.n	800e664 <__ssvfscanf_r+0x3c4>
 800e45a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e45c:	4332      	orrs	r2, r6
 800e45e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e460:	d11b      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e462:	2610      	movs	r6, #16
 800e464:	69ba      	ldr	r2, [r7, #24]
 800e466:	e76c      	b.n	800e342 <__ssvfscanf_r+0xa2>
 800e468:	421e      	tst	r6, r3
 800e46a:	d116      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e46c:	7851      	ldrb	r1, [r2, #1]
 800e46e:	296c      	cmp	r1, #108	; 0x6c
 800e470:	d103      	bne.n	800e47a <__ssvfscanf_r+0x1da>
 800e472:	3202      	adds	r2, #2
 800e474:	61ba      	str	r2, [r7, #24]
 800e476:	2202      	movs	r2, #2
 800e478:	e000      	b.n	800e47c <__ssvfscanf_r+0x1dc>
 800e47a:	2201      	movs	r2, #1
 800e47c:	4316      	orrs	r6, r2
 800e47e:	e7f1      	b.n	800e464 <__ssvfscanf_r+0x1c4>
 800e480:	421e      	tst	r6, r3
 800e482:	d10a      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e484:	7851      	ldrb	r1, [r2, #1]
 800e486:	2968      	cmp	r1, #104	; 0x68
 800e488:	d103      	bne.n	800e492 <__ssvfscanf_r+0x1f2>
 800e48a:	3202      	adds	r2, #2
 800e48c:	61ba      	str	r2, [r7, #24]
 800e48e:	2208      	movs	r2, #8
 800e490:	e7f4      	b.n	800e47c <__ssvfscanf_r+0x1dc>
 800e492:	2204      	movs	r2, #4
 800e494:	e7f2      	b.n	800e47c <__ssvfscanf_r+0x1dc>
 800e496:	421e      	tst	r6, r3
 800e498:	d0ed      	beq.n	800e476 <__ssvfscanf_r+0x1d6>
 800e49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d000      	beq.n	800e4a2 <__ssvfscanf_r+0x202>
 800e4a0:	e0da      	b.n	800e658 <__ssvfscanf_r+0x3b8>
 800e4a2:	e0df      	b.n	800e664 <__ssvfscanf_r+0x3c4>
 800e4a4:	421e      	tst	r6, r3
 800e4a6:	d0dd      	beq.n	800e464 <__ssvfscanf_r+0x1c4>
 800e4a8:	e7f7      	b.n	800e49a <__ssvfscanf_r+0x1fa>
 800e4aa:	228f      	movs	r2, #143	; 0x8f
 800e4ac:	218f      	movs	r1, #143	; 0x8f
 800e4ae:	4032      	ands	r2, r6
 800e4b0:	420e      	tst	r6, r1
 800e4b2:	d1f2      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e4b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4b6:	2900      	cmp	r1, #0
 800e4b8:	d104      	bne.n	800e4c4 <__ssvfscanf_r+0x224>
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	a902      	add	r1, sp, #8
 800e4be:	6439      	str	r1, [r7, #64]	; 0x40
 800e4c0:	600a      	str	r2, [r1, #0]
 800e4c2:	604a      	str	r2, [r1, #4]
 800e4c4:	4326      	orrs	r6, r4
 800e4c6:	e7cd      	b.n	800e464 <__ssvfscanf_r+0x1c4>
 800e4c8:	228f      	movs	r2, #143	; 0x8f
 800e4ca:	4216      	tst	r6, r2
 800e4cc:	d1e5      	bne.n	800e49a <__ssvfscanf_r+0x1fa>
 800e4ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4d0:	436a      	muls	r2, r5
 800e4d2:	3a30      	subs	r2, #48	; 0x30
 800e4d4:	188a      	adds	r2, r1, r2
 800e4d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4d8:	e7c4      	b.n	800e464 <__ssvfscanf_r+0x1c4>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	431e      	orrs	r6, r3
 800e4de:	4b1b      	ldr	r3, [pc, #108]	; (800e54c <__ssvfscanf_r+0x2ac>)
 800e4e0:	617b      	str	r3, [r7, #20]
 800e4e2:	230a      	movs	r3, #10
 800e4e4:	2403      	movs	r4, #3
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e8:	e00f      	b.n	800e50a <__ssvfscanf_r+0x26a>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	431e      	orrs	r6, r3
 800e4ee:	4b18      	ldr	r3, [pc, #96]	; (800e550 <__ssvfscanf_r+0x2b0>)
 800e4f0:	617b      	str	r3, [r7, #20]
 800e4f2:	2308      	movs	r3, #8
 800e4f4:	e7f6      	b.n	800e4e4 <__ssvfscanf_r+0x244>
 800e4f6:	4b16      	ldr	r3, [pc, #88]	; (800e550 <__ssvfscanf_r+0x2b0>)
 800e4f8:	e7f2      	b.n	800e4e0 <__ssvfscanf_r+0x240>
 800e4fa:	2380      	movs	r3, #128	; 0x80
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	431e      	orrs	r6, r3
 800e500:	4b13      	ldr	r3, [pc, #76]	; (800e550 <__ssvfscanf_r+0x2b0>)
 800e502:	617b      	str	r3, [r7, #20]
 800e504:	2310      	movs	r3, #16
 800e506:	e7ed      	b.n	800e4e4 <__ssvfscanf_r+0x244>
 800e508:	2404      	movs	r4, #4
 800e50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dd55      	ble.n	800e5be <__ssvfscanf_r+0x31e>
 800e512:	0673      	lsls	r3, r6, #25
 800e514:	d407      	bmi.n	800e526 <__ssvfscanf_r+0x286>
 800e516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e518:	490b      	ldr	r1, [pc, #44]	; (800e548 <__ssvfscanf_r+0x2a8>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	781a      	ldrb	r2, [r3, #0]
 800e51e:	5c8a      	ldrb	r2, [r1, r2]
 800e520:	2108      	movs	r1, #8
 800e522:	420a      	tst	r2, r1
 800e524:	d152      	bne.n	800e5cc <__ssvfscanf_r+0x32c>
 800e526:	1e60      	subs	r0, r4, #1
 800e528:	2803      	cmp	r0, #3
 800e52a:	d863      	bhi.n	800e5f4 <__ssvfscanf_r+0x354>
 800e52c:	f7f1 fdfc 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e530:	03bd01da 	.word	0x03bd01da
 800e534:	068a0579 	.word	0x068a0579
 800e538:	2301      	movs	r3, #1
 800e53a:	431e      	orrs	r6, r3
 800e53c:	2402      	movs	r4, #2
 800e53e:	e7e4      	b.n	800e50a <__ssvfscanf_r+0x26a>
 800e540:	fffffd34 	.word	0xfffffd34
 800e544:	ffffdfff 	.word	0xffffdfff
 800e548:	080141a9 	.word	0x080141a9
 800e54c:	0800b6f1 	.word	0x0800b6f1
 800e550:	08010cf9 	.word	0x08010cf9
 800e554:	2248      	movs	r2, #72	; 0x48
 800e556:	2318      	movs	r3, #24
 800e558:	189b      	adds	r3, r3, r2
 800e55a:	19d8      	adds	r0, r3, r7
 800e55c:	69b9      	ldr	r1, [r7, #24]
 800e55e:	f001 f9d7 	bl	800f910 <__sccl>
 800e562:	2340      	movs	r3, #64	; 0x40
 800e564:	2401      	movs	r4, #1
 800e566:	61b8      	str	r0, [r7, #24]
 800e568:	431e      	orrs	r6, r3
 800e56a:	e7ce      	b.n	800e50a <__ssvfscanf_r+0x26a>
 800e56c:	2301      	movs	r3, #1
 800e56e:	431e      	orrs	r6, r3
 800e570:	2340      	movs	r3, #64	; 0x40
 800e572:	2400      	movs	r4, #0
 800e574:	431e      	orrs	r6, r3
 800e576:	e7c8      	b.n	800e50a <__ssvfscanf_r+0x26a>
 800e578:	2388      	movs	r3, #136	; 0x88
 800e57a:	e7bf      	b.n	800e4fc <__ssvfscanf_r+0x25c>
 800e57c:	06f3      	lsls	r3, r6, #27
 800e57e:	d500      	bpl.n	800e582 <__ssvfscanf_r+0x2e2>
 800e580:	e6aa      	b.n	800e2d8 <__ssvfscanf_r+0x38>
 800e582:	2108      	movs	r1, #8
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	cb04      	ldmia	r3!, {r2}
 800e588:	420e      	tst	r6, r1
 800e58a:	d003      	beq.n	800e594 <__ssvfscanf_r+0x2f4>
 800e58c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e58e:	7011      	strb	r1, [r2, #0]
 800e590:	633b      	str	r3, [r7, #48]	; 0x30
 800e592:	e6a1      	b.n	800e2d8 <__ssvfscanf_r+0x38>
 800e594:	0771      	lsls	r1, r6, #29
 800e596:	d502      	bpl.n	800e59e <__ssvfscanf_r+0x2fe>
 800e598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e59a:	8011      	strh	r1, [r2, #0]
 800e59c:	e7f8      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800e59e:	07f1      	lsls	r1, r6, #31
 800e5a0:	d502      	bpl.n	800e5a8 <__ssvfscanf_r+0x308>
 800e5a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5a4:	6011      	str	r1, [r2, #0]
 800e5a6:	e7f3      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800e5a8:	07b6      	lsls	r6, r6, #30
 800e5aa:	d5fa      	bpl.n	800e5a2 <__ssvfscanf_r+0x302>
 800e5ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5ae:	6011      	str	r1, [r2, #0]
 800e5b0:	17c9      	asrs	r1, r1, #31
 800e5b2:	6051      	str	r1, [r2, #4]
 800e5b4:	e7ec      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800e5b6:	4ba2      	ldr	r3, [pc, #648]	; (800e840 <__ssvfscanf_r+0x5a0>)
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e792      	b.n	800e4e4 <__ssvfscanf_r+0x244>
 800e5be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5c2:	f002 fe01 	bl	80111c8 <__ssrefill_r>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d0a3      	beq.n	800e512 <__ssvfscanf_r+0x272>
 800e5ca:	e738      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e5cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5d0:	3201      	adds	r2, #1
 800e5d2:	63ba      	str	r2, [r7, #56]	; 0x38
 800e5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5d6:	6852      	ldr	r2, [r2, #4]
 800e5d8:	3a01      	subs	r2, #1
 800e5da:	604a      	str	r2, [r1, #4]
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	dd02      	ble.n	800e5e6 <__ssvfscanf_r+0x346>
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	600b      	str	r3, [r1, #0]
 800e5e4:	e797      	b.n	800e516 <__ssvfscanf_r+0x276>
 800e5e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5ea:	f002 fded 	bl	80111c8 <__ssrefill_r>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d091      	beq.n	800e516 <__ssvfscanf_r+0x276>
 800e5f2:	e724      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e5f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	d100      	bne.n	800e5fe <__ssvfscanf_r+0x35e>
 800e5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5fe:	2210      	movs	r2, #16
 800e600:	0034      	movs	r4, r6
 800e602:	4032      	ands	r2, r6
 800e604:	623a      	str	r2, [r7, #32]
 800e606:	401c      	ands	r4, r3
 800e608:	421e      	tst	r6, r3
 800e60a:	d100      	bne.n	800e60e <__ssvfscanf_r+0x36e>
 800e60c:	e0f3      	b.n	800e7f6 <__ssvfscanf_r+0x556>
 800e60e:	2a00      	cmp	r2, #0
 800e610:	d000      	beq.n	800e614 <__ssvfscanf_r+0x374>
 800e612:	e0b6      	b.n	800e782 <__ssvfscanf_r+0x4e2>
 800e614:	2080      	movs	r0, #128	; 0x80
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	cb10      	ldmia	r3!, {r4}
 800e61a:	613b      	str	r3, [r7, #16]
 800e61c:	4206      	tst	r6, r0
 800e61e:	d100      	bne.n	800e622 <__ssvfscanf_r+0x382>
 800e620:	e0b7      	b.n	800e792 <__ssvfscanf_r+0x4f2>
 800e622:	2c00      	cmp	r4, #0
 800e624:	d007      	beq.n	800e636 <__ssvfscanf_r+0x396>
 800e626:	f7fb ff6d 	bl	800a504 <malloc>
 800e62a:	6338      	str	r0, [r7, #48]	; 0x30
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d11f      	bne.n	800e670 <__ssvfscanf_r+0x3d0>
 800e630:	2301      	movs	r3, #1
 800e632:	425b      	negs	r3, r3
 800e634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d013      	beq.n	800e664 <__ssvfscanf_r+0x3c4>
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	3301      	adds	r3, #1
 800e640:	d10a      	bne.n	800e658 <__ssvfscanf_r+0x3b8>
 800e642:	2400      	movs	r4, #0
 800e644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e646:	681d      	ldr	r5, [r3, #0]
 800e648:	88db      	ldrh	r3, [r3, #6]
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	dd01      	ble.n	800e652 <__ssvfscanf_r+0x3b2>
 800e64e:	f001 f82a 	bl	800f6a6 <__ssvfscanf_r+0x1406>
 800e652:	2301      	movs	r3, #1
 800e654:	425b      	negs	r3, r3
 800e656:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d001      	beq.n	800e664 <__ssvfscanf_r+0x3c4>
 800e660:	f7fb ff5a 	bl	800a518 <free>
 800e664:	46bd      	mov	sp, r7
 800e666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e668:	23b1      	movs	r3, #177	; 0xb1
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	449d      	add	sp, r3
 800e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e676:	88de      	ldrh	r6, [r3, #6]
 800e678:	889d      	ldrh	r5, [r3, #4]
 800e67a:	42ae      	cmp	r6, r5
 800e67c:	d30e      	bcc.n	800e69c <__ssvfscanf_r+0x3fc>
 800e67e:	4b71      	ldr	r3, [pc, #452]	; (800e844 <__ssvfscanf_r+0x5a4>)
 800e680:	429d      	cmp	r5, r3
 800e682:	d8d5      	bhi.n	800e630 <__ssvfscanf_r+0x390>
 800e684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e686:	3508      	adds	r5, #8
 800e688:	b2ad      	uxth	r5, r5
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	00a9      	lsls	r1, r5, #2
 800e68e:	f002 f901 	bl	8010894 <realloc>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0cc      	beq.n	800e630 <__ssvfscanf_r+0x390>
 800e696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e698:	6018      	str	r0, [r3, #0]
 800e69a:	809d      	strh	r5, [r3, #4]
 800e69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e69e:	1c72      	adds	r2, r6, #1
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	00b6      	lsls	r6, r6, #2
 800e6a4:	50f4      	str	r4, [r6, r3]
 800e6a6:	2320      	movs	r3, #32
 800e6a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6aa:	0026      	movs	r6, r4
 800e6ac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e6ae:	80ca      	strh	r2, [r1, #6]
 800e6b0:	61fb      	str	r3, [r7, #28]
 800e6b2:	2500      	movs	r5, #0
 800e6b4:	f7fd f9fe 	bl	800bab4 <__locale_mb_cur_max>
 800e6b8:	42a8      	cmp	r0, r5
 800e6ba:	d100      	bne.n	800e6be <__ssvfscanf_r+0x41e>
 800e6bc:	e6bf      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e6be:	1c6a      	adds	r2, r5, #1
 800e6c0:	60fa      	str	r2, [r7, #12]
 800e6c2:	228c      	movs	r2, #140	; 0x8c
 800e6c4:	2048      	movs	r0, #72	; 0x48
 800e6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6c8:	0052      	lsls	r2, r2, #1
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	1812      	adds	r2, r2, r0
 800e6ce:	7819      	ldrb	r1, [r3, #0]
 800e6d0:	19d2      	adds	r2, r2, r7
 800e6d2:	5551      	strb	r1, [r2, r5]
 800e6d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6d8:	6852      	ldr	r2, [r2, #4]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	600b      	str	r3, [r1, #0]
 800e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e0:	3a01      	subs	r2, #1
 800e6e2:	604a      	str	r2, [r1, #4]
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d102      	bne.n	800e6ee <__ssvfscanf_r+0x44e>
 800e6e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d007      	beq.n	800e6fe <__ssvfscanf_r+0x45e>
 800e6ee:	2048      	movs	r0, #72	; 0x48
 800e6f0:	2310      	movs	r3, #16
 800e6f2:	181b      	adds	r3, r3, r0
 800e6f4:	2208      	movs	r2, #8
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	19d8      	adds	r0, r3, r7
 800e6fa:	f7fd f997 	bl	800ba2c <memset>
 800e6fe:	2148      	movs	r1, #72	; 0x48
 800e700:	2310      	movs	r3, #16
 800e702:	228c      	movs	r2, #140	; 0x8c
 800e704:	185b      	adds	r3, r3, r1
 800e706:	0052      	lsls	r2, r2, #1
 800e708:	19db      	adds	r3, r3, r7
 800e70a:	1852      	adds	r2, r2, r1
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	0021      	movs	r1, r4
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e714:	19d2      	adds	r2, r2, r7
 800e716:	f002 fc57 	bl	8010fc8 <_mbrtowc_r>
 800e71a:	0003      	movs	r3, r0
 800e71c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e71e:	3301      	adds	r3, #1
 800e720:	d100      	bne.n	800e724 <__ssvfscanf_r+0x484>
 800e722:	e68c      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e724:	2800      	cmp	r0, #0
 800e726:	d139      	bne.n	800e79c <__ssvfscanf_r+0x4fc>
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d100      	bne.n	800e730 <__ssvfscanf_r+0x490>
 800e72e:	6023      	str	r3, [r4, #0]
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	4694      	mov	ip, r2
 800e736:	4463      	add	r3, ip
 800e738:	63bb      	str	r3, [r7, #56]	; 0x38
 800e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d102      	bne.n	800e746 <__ssvfscanf_r+0x4a6>
 800e740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e742:	2b04      	cmp	r3, #4
 800e744:	d002      	beq.n	800e74c <__ssvfscanf_r+0x4ac>
 800e746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e748:	3b01      	subs	r3, #1
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d115      	bne.n	800e77e <__ssvfscanf_r+0x4de>
 800e752:	2e00      	cmp	r6, #0
 800e754:	d012      	beq.n	800e77c <__ssvfscanf_r+0x4dc>
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	69fa      	ldr	r2, [r7, #28]
 800e75a:	1ae5      	subs	r5, r4, r3
 800e75c:	10ab      	asrs	r3, r5, #2
 800e75e:	4293      	cmp	r3, r2
 800e760:	d30c      	bcc.n	800e77c <__ssvfscanf_r+0x4dc>
 800e762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e764:	00d1      	lsls	r1, r2, #3
 800e766:	f002 f895 	bl	8010894 <realloc>
 800e76a:	6338      	str	r0, [r7, #48]	; 0x30
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d100      	bne.n	800e772 <__ssvfscanf_r+0x4d2>
 800e770:	e75e      	b.n	800e630 <__ssvfscanf_r+0x390>
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	1944      	adds	r4, r0, r5
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	6030      	str	r0, [r6, #0]
 800e77a:	61fb      	str	r3, [r7, #28]
 800e77c:	3404      	adds	r4, #4
 800e77e:	2500      	movs	r5, #0
 800e780:	e010      	b.n	800e7a4 <__ssvfscanf_r+0x504>
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	613b      	str	r3, [r7, #16]
 800e786:	2300      	movs	r3, #0
 800e788:	001e      	movs	r6, r3
 800e78a:	001c      	movs	r4, r3
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	633b      	str	r3, [r7, #48]	; 0x30
 800e790:	e78f      	b.n	800e6b2 <__ssvfscanf_r+0x412>
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	001e      	movs	r6, r3
 800e796:	61fb      	str	r3, [r7, #28]
 800e798:	633b      	str	r3, [r7, #48]	; 0x30
 800e79a:	e78a      	b.n	800e6b2 <__ssvfscanf_r+0x412>
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	68fd      	ldr	r5, [r7, #12]
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	d1c5      	bne.n	800e730 <__ssvfscanf_r+0x490>
 800e7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	dc12      	bgt.n	800e7d2 <__ssvfscanf_r+0x532>
 800e7ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7b0:	f002 fd0a 	bl	80111c8 <__ssrefill_r>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d00c      	beq.n	800e7d2 <__ssvfscanf_r+0x532>
 800e7b8:	2d00      	cmp	r5, #0
 800e7ba:	d000      	beq.n	800e7be <__ssvfscanf_r+0x51e>
 800e7bc:	e63f      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	d10c      	bne.n	800e7dc <__ssvfscanf_r+0x53c>
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	425a      	negs	r2, r3
 800e7c6:	4153      	adcs	r3, r2
 800e7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ca:	18d3      	adds	r3, r2, r3
 800e7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	e6de      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800e7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d000      	beq.n	800e7da <__ssvfscanf_r+0x53a>
 800e7d8:	e76c      	b.n	800e6b4 <__ssvfscanf_r+0x414>
 800e7da:	e7f0      	b.n	800e7be <__ssvfscanf_r+0x51e>
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	1ae1      	subs	r1, r4, r3
 800e7e2:	108b      	asrs	r3, r1, #2
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d9ec      	bls.n	800e7c2 <__ssvfscanf_r+0x522>
 800e7e8:	6830      	ldr	r0, [r6, #0]
 800e7ea:	f002 f853 	bl	8010894 <realloc>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0e7      	beq.n	800e7c2 <__ssvfscanf_r+0x522>
 800e7f2:	6030      	str	r0, [r6, #0]
 800e7f4:	e7e5      	b.n	800e7c2 <__ssvfscanf_r+0x522>
 800e7f6:	6a3b      	ldr	r3, [r7, #32]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d025      	beq.n	800e848 <__ssvfscanf_r+0x5a8>
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e804:	6812      	ldr	r2, [r2, #0]
 800e806:	4299      	cmp	r1, r3
 800e808:	dd11      	ble.n	800e82e <__ssvfscanf_r+0x58e>
 800e80a:	1ac9      	subs	r1, r1, r3
 800e80c:	18d2      	adds	r2, r2, r3
 800e80e:	18e4      	adds	r4, r4, r3
 800e810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e812:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e816:	0019      	movs	r1, r3
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	f002 fcd5 	bl	80111c8 <__ssrefill_r>
 800e81e:	2800      	cmp	r0, #0
 800e820:	d0ec      	beq.n	800e7fc <__ssvfscanf_r+0x55c>
 800e822:	2c00      	cmp	r4, #0
 800e824:	d100      	bne.n	800e828 <__ssvfscanf_r+0x588>
 800e826:	e60a      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	191b      	adds	r3, r3, r4
 800e82c:	e5ff      	b.n	800e42e <__ssvfscanf_r+0x18e>
 800e82e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e830:	1a5b      	subs	r3, r3, r1
 800e832:	1864      	adds	r4, r4, r1
 800e834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e836:	604b      	str	r3, [r1, #4]
 800e838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e83a:	18d2      	adds	r2, r2, r3
 800e83c:	600a      	str	r2, [r1, #0]
 800e83e:	e7f3      	b.n	800e828 <__ssvfscanf_r+0x588>
 800e840:	0800b6f1 	.word	0x0800b6f1
 800e844:	0000fff6 	.word	0x0000fff6
 800e848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84a:	0034      	movs	r4, r6
 800e84c:	cb20      	ldmia	r3!, {r5}
 800e84e:	633b      	str	r3, [r7, #48]	; 0x30
 800e850:	2380      	movs	r3, #128	; 0x80
 800e852:	401c      	ands	r4, r3
 800e854:	421e      	tst	r6, r3
 800e856:	d028      	beq.n	800e8aa <__ssvfscanf_r+0x60a>
 800e858:	2d00      	cmp	r5, #0
 800e85a:	d100      	bne.n	800e85e <__ssvfscanf_r+0x5be>
 800e85c:	e61d      	b.n	800e49a <__ssvfscanf_r+0x1fa>
 800e85e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e860:	f7fb fe50 	bl	800a504 <malloc>
 800e864:	6238      	str	r0, [r7, #32]
 800e866:	2800      	cmp	r0, #0
 800e868:	d100      	bne.n	800e86c <__ssvfscanf_r+0x5cc>
 800e86a:	e5ef      	b.n	800e44c <__ssvfscanf_r+0x1ac>
 800e86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e86e:	6028      	str	r0, [r5, #0]
 800e870:	88de      	ldrh	r6, [r3, #6]
 800e872:	889c      	ldrh	r4, [r3, #4]
 800e874:	6818      	ldr	r0, [r3, #0]
 800e876:	42a6      	cmp	r6, r4
 800e878:	d30e      	bcc.n	800e898 <__ssvfscanf_r+0x5f8>
 800e87a:	4bbf      	ldr	r3, [pc, #764]	; (800eb78 <__ssvfscanf_r+0x8d8>)
 800e87c:	429c      	cmp	r4, r3
 800e87e:	d900      	bls.n	800e882 <__ssvfscanf_r+0x5e2>
 800e880:	e6df      	b.n	800e642 <__ssvfscanf_r+0x3a2>
 800e882:	3408      	adds	r4, #8
 800e884:	b2a4      	uxth	r4, r4
 800e886:	00a1      	lsls	r1, r4, #2
 800e888:	f002 f804 	bl	8010894 <realloc>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d100      	bne.n	800e892 <__ssvfscanf_r+0x5f2>
 800e890:	e6d7      	b.n	800e642 <__ssvfscanf_r+0x3a2>
 800e892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e894:	6018      	str	r0, [r3, #0]
 800e896:	809c      	strh	r4, [r3, #4]
 800e898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89a:	1c72      	adds	r2, r6, #1
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8a0:	00b6      	lsls	r6, r6, #2
 800e8a2:	002c      	movs	r4, r5
 800e8a4:	50f5      	str	r5, [r6, r3]
 800e8a6:	6a3d      	ldr	r5, [r7, #32]
 800e8a8:	80ca      	strh	r2, [r1, #6]
 800e8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ac:	0029      	movs	r1, r5
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8b6:	f002 fca6 	bl	8011206 <_sfread_r>
 800e8ba:	1e05      	subs	r5, r0, #0
 800e8bc:	d100      	bne.n	800e8c0 <__ssvfscanf_r+0x620>
 800e8be:	e5be      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e8c0:	2c00      	cmp	r4, #0
 800e8c2:	d009      	beq.n	800e8d8 <__ssvfscanf_r+0x638>
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c6:	4283      	cmp	r3, r0
 800e8c8:	d906      	bls.n	800e8d8 <__ssvfscanf_r+0x638>
 800e8ca:	0001      	movs	r1, r0
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	f001 ffe1 	bl	8010894 <realloc>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d000      	beq.n	800e8d8 <__ssvfscanf_r+0x638>
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	195b      	adds	r3, r3, r5
 800e8dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	e4f8      	b.n	800e2d6 <__ssvfscanf_r+0x36>
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <__ssvfscanf_r+0x64e>
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8ee:	2210      	movs	r2, #16
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	0034      	movs	r4, r6
 800e8f4:	4032      	ands	r2, r6
 800e8f6:	401c      	ands	r4, r3
 800e8f8:	623a      	str	r2, [r7, #32]
 800e8fa:	421e      	tst	r6, r3
 800e8fc:	d100      	bne.n	800e900 <__ssvfscanf_r+0x660>
 800e8fe:	e116      	b.n	800eb2e <__ssvfscanf_r+0x88e>
 800e900:	2a00      	cmp	r2, #0
 800e902:	d000      	beq.n	800e906 <__ssvfscanf_r+0x666>
 800e904:	e0b0      	b.n	800ea68 <__ssvfscanf_r+0x7c8>
 800e906:	2080      	movs	r0, #128	; 0x80
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	cb10      	ldmia	r3!, {r4}
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	4206      	tst	r6, r0
 800e910:	d100      	bne.n	800e914 <__ssvfscanf_r+0x674>
 800e912:	e0b2      	b.n	800ea7a <__ssvfscanf_r+0x7da>
 800e914:	2c00      	cmp	r4, #0
 800e916:	d100      	bne.n	800e91a <__ssvfscanf_r+0x67a>
 800e918:	e68d      	b.n	800e636 <__ssvfscanf_r+0x396>
 800e91a:	f7fb fdf3 	bl	800a504 <malloc>
 800e91e:	6338      	str	r0, [r7, #48]	; 0x30
 800e920:	2800      	cmp	r0, #0
 800e922:	d100      	bne.n	800e926 <__ssvfscanf_r+0x686>
 800e924:	e684      	b.n	800e630 <__ssvfscanf_r+0x390>
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e92c:	88de      	ldrh	r6, [r3, #6]
 800e92e:	889d      	ldrh	r5, [r3, #4]
 800e930:	42ae      	cmp	r6, r5
 800e932:	d310      	bcc.n	800e956 <__ssvfscanf_r+0x6b6>
 800e934:	4b90      	ldr	r3, [pc, #576]	; (800eb78 <__ssvfscanf_r+0x8d8>)
 800e936:	429d      	cmp	r5, r3
 800e938:	d900      	bls.n	800e93c <__ssvfscanf_r+0x69c>
 800e93a:	e679      	b.n	800e630 <__ssvfscanf_r+0x390>
 800e93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e93e:	3508      	adds	r5, #8
 800e940:	b2ad      	uxth	r5, r5
 800e942:	6818      	ldr	r0, [r3, #0]
 800e944:	00a9      	lsls	r1, r5, #2
 800e946:	f001 ffa5 	bl	8010894 <realloc>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d100      	bne.n	800e950 <__ssvfscanf_r+0x6b0>
 800e94e:	e66f      	b.n	800e630 <__ssvfscanf_r+0x390>
 800e950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e952:	6018      	str	r0, [r3, #0]
 800e954:	809d      	strh	r5, [r3, #4]
 800e956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e958:	1c72      	adds	r2, r6, #1
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	00b6      	lsls	r6, r6, #2
 800e95e:	50f4      	str	r4, [r6, r3]
 800e960:	2320      	movs	r3, #32
 800e962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e964:	0026      	movs	r6, r4
 800e966:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e968:	80ca      	strh	r2, [r1, #6]
 800e96a:	613b      	str	r3, [r7, #16]
 800e96c:	2500      	movs	r5, #0
 800e96e:	f7fd f8a1 	bl	800bab4 <__locale_mb_cur_max>
 800e972:	42a8      	cmp	r0, r5
 800e974:	d100      	bne.n	800e978 <__ssvfscanf_r+0x6d8>
 800e976:	e562      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e978:	1c6a      	adds	r2, r5, #1
 800e97a:	61fa      	str	r2, [r7, #28]
 800e97c:	228c      	movs	r2, #140	; 0x8c
 800e97e:	2048      	movs	r0, #72	; 0x48
 800e980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e982:	0052      	lsls	r2, r2, #1
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	1812      	adds	r2, r2, r0
 800e988:	7819      	ldrb	r1, [r3, #0]
 800e98a:	19d2      	adds	r2, r2, r7
 800e98c:	5551      	strb	r1, [r2, r5]
 800e98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e990:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e992:	6852      	ldr	r2, [r2, #4]
 800e994:	3301      	adds	r3, #1
 800e996:	600b      	str	r3, [r1, #0]
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	3a01      	subs	r2, #1
 800e99c:	604a      	str	r2, [r1, #4]
 800e99e:	2b03      	cmp	r3, #3
 800e9a0:	d102      	bne.n	800e9a8 <__ssvfscanf_r+0x708>
 800e9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9a4:	2b04      	cmp	r3, #4
 800e9a6:	d006      	beq.n	800e9b6 <__ssvfscanf_r+0x716>
 800e9a8:	2048      	movs	r0, #72	; 0x48
 800e9aa:	2208      	movs	r2, #8
 800e9ac:	1813      	adds	r3, r2, r0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	19d8      	adds	r0, r3, r7
 800e9b2:	f7fd f83b 	bl	800ba2c <memset>
 800e9b6:	2148      	movs	r1, #72	; 0x48
 800e9b8:	2308      	movs	r3, #8
 800e9ba:	228c      	movs	r2, #140	; 0x8c
 800e9bc:	185b      	adds	r3, r3, r1
 800e9be:	0052      	lsls	r2, r2, #1
 800e9c0:	19db      	adds	r3, r3, r7
 800e9c2:	1852      	adds	r2, r2, r1
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	0021      	movs	r1, r4
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9cc:	19d2      	adds	r2, r2, r7
 800e9ce:	f002 fafb 	bl	8010fc8 <_mbrtowc_r>
 800e9d2:	0003      	movs	r3, r0
 800e9d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	d100      	bne.n	800e9dc <__ssvfscanf_r+0x73c>
 800e9da:	e530      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d151      	bne.n	800ea84 <__ssvfscanf_r+0x7e4>
 800e9e0:	6020      	str	r0, [r4, #0]
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	6825      	ldr	r5, [r4, #0]
 800e9e6:	425b      	negs	r3, r3
 800e9e8:	1c6a      	adds	r2, r5, #1
 800e9ea:	d01a      	beq.n	800ea22 <__ssvfscanf_r+0x782>
 800e9ec:	2048      	movs	r0, #72	; 0x48
 800e9ee:	3311      	adds	r3, #17
 800e9f0:	181b      	adds	r3, r3, r0
 800e9f2:	2208      	movs	r2, #8
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	19d8      	adds	r0, r3, r7
 800e9f8:	f7fd f818 	bl	800ba2c <memset>
 800e9fc:	4b5f      	ldr	r3, [pc, #380]	; (800eb7c <__ssvfscanf_r+0x8dc>)
 800e9fe:	2148      	movs	r1, #72	; 0x48
 800ea00:	33e0      	adds	r3, #224	; 0xe0
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	2310      	movs	r3, #16
 800ea06:	4694      	mov	ip, r2
 800ea08:	185b      	adds	r3, r3, r1
 800ea0a:	002a      	movs	r2, r5
 800ea0c:	19db      	adds	r3, r3, r7
 800ea0e:	4665      	mov	r5, ip
 800ea10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea12:	1879      	adds	r1, r7, r1
 800ea14:	47a8      	blx	r5
 800ea16:	2300      	movs	r3, #0
 800ea18:	2801      	cmp	r0, #1
 800ea1a:	d102      	bne.n	800ea22 <__ssvfscanf_r+0x782>
 800ea1c:	3348      	adds	r3, #72	; 0x48
 800ea1e:	18fb      	adds	r3, r7, r3
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	2218      	movs	r2, #24
 800ea24:	2148      	movs	r1, #72	; 0x48
 800ea26:	1852      	adds	r2, r2, r1
 800ea28:	19d2      	adds	r2, r2, r7
 800ea2a:	5cd3      	ldrb	r3, [r2, r3]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d149      	bne.n	800eac4 <__ssvfscanf_r+0x824>
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d137      	bne.n	800eaa6 <__ssvfscanf_r+0x806>
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d113      	bne.n	800ea64 <__ssvfscanf_r+0x7c4>
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	2e00      	cmp	r6, #0
 800ea40:	d00d      	beq.n	800ea5e <__ssvfscanf_r+0x7be>
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	693a      	ldr	r2, [r7, #16]
 800ea46:	1ae4      	subs	r4, r4, r3
 800ea48:	10a3      	asrs	r3, r4, #2
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d906      	bls.n	800ea5e <__ssvfscanf_r+0x7be>
 800ea50:	6830      	ldr	r0, [r6, #0]
 800ea52:	1d21      	adds	r1, r4, #4
 800ea54:	f001 ff1e 	bl	8010894 <realloc>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d000      	beq.n	800ea5e <__ssvfscanf_r+0x7be>
 800ea5c:	6030      	str	r0, [r6, #0]
 800ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea60:	3301      	adds	r3, #1
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	e593      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	001e      	movs	r6, r3
 800ea70:	613b      	str	r3, [r7, #16]
 800ea72:	633b      	str	r3, [r7, #48]	; 0x30
 800ea74:	334c      	adds	r3, #76	; 0x4c
 800ea76:	18fc      	adds	r4, r7, r3
 800ea78:	e778      	b.n	800e96c <__ssvfscanf_r+0x6cc>
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	001e      	movs	r6, r3
 800ea7e:	613b      	str	r3, [r7, #16]
 800ea80:	633b      	str	r3, [r7, #48]	; 0x30
 800ea82:	e773      	b.n	800e96c <__ssvfscanf_r+0x6cc>
 800ea84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea86:	69fd      	ldr	r5, [r7, #28]
 800ea88:	3302      	adds	r3, #2
 800ea8a:	d1aa      	bne.n	800e9e2 <__ssvfscanf_r+0x742>
 800ea8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	dc47      	bgt.n	800eb24 <__ssvfscanf_r+0x884>
 800ea94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea98:	f002 fb96 	bl	80111c8 <__ssrefill_r>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d041      	beq.n	800eb24 <__ssvfscanf_r+0x884>
 800eaa0:	2d00      	cmp	r5, #0
 800eaa2:	d0c8      	beq.n	800ea36 <__ssvfscanf_r+0x796>
 800eaa4:	e4cb      	b.n	800e43e <__ssvfscanf_r+0x19e>
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	2248      	movs	r2, #72	; 0x48
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	61fb      	str	r3, [r7, #28]
 800eaae:	238c      	movs	r3, #140	; 0x8c
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	189b      	adds	r3, r3, r2
 800eab4:	69fa      	ldr	r2, [r7, #28]
 800eab6:	19db      	adds	r3, r3, r7
 800eab8:	5cd1      	ldrb	r1, [r2, r3]
 800eaba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eabe:	f002 fb47 	bl	8011150 <_sungetc_r>
 800eac2:	e7b5      	b.n	800ea30 <__ssvfscanf_r+0x790>
 800eac4:	69fa      	ldr	r2, [r7, #28]
 800eac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac8:	4694      	mov	ip, r2
 800eaca:	4463      	add	r3, ip
 800eacc:	63bb      	str	r3, [r7, #56]	; 0x38
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	2b03      	cmp	r3, #3
 800ead2:	d102      	bne.n	800eada <__ssvfscanf_r+0x83a>
 800ead4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d002      	beq.n	800eae0 <__ssvfscanf_r+0x840>
 800eada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eadc:	3b01      	subs	r3, #1
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d11a      	bne.n	800eb1c <__ssvfscanf_r+0x87c>
 800eae6:	3404      	adds	r4, #4
 800eae8:	2e00      	cmp	r6, #0
 800eaea:	d019      	beq.n	800eb20 <__ssvfscanf_r+0x880>
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	693a      	ldr	r2, [r7, #16]
 800eaf0:	1ae3      	subs	r3, r4, r3
 800eaf2:	61fb      	str	r3, [r7, #28]
 800eaf4:	6a3d      	ldr	r5, [r7, #32]
 800eaf6:	109b      	asrs	r3, r3, #2
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d3c7      	bcc.n	800ea8c <__ssvfscanf_r+0x7ec>
 800eafc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eafe:	00d1      	lsls	r1, r2, #3
 800eb00:	f001 fec8 	bl	8010894 <realloc>
 800eb04:	6338      	str	r0, [r7, #48]	; 0x30
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d100      	bne.n	800eb0c <__ssvfscanf_r+0x86c>
 800eb0a:	e591      	b.n	800e630 <__ssvfscanf_r+0x390>
 800eb0c:	4684      	mov	ip, r0
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	69fc      	ldr	r4, [r7, #28]
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	4464      	add	r4, ip
 800eb16:	6030      	str	r0, [r6, #0]
 800eb18:	613b      	str	r3, [r7, #16]
 800eb1a:	e7b7      	b.n	800ea8c <__ssvfscanf_r+0x7ec>
 800eb1c:	2500      	movs	r5, #0
 800eb1e:	e7b5      	b.n	800ea8c <__ssvfscanf_r+0x7ec>
 800eb20:	0035      	movs	r5, r6
 800eb22:	e7b3      	b.n	800ea8c <__ssvfscanf_r+0x7ec>
 800eb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d000      	beq.n	800eb2c <__ssvfscanf_r+0x88c>
 800eb2a:	e720      	b.n	800e96e <__ssvfscanf_r+0x6ce>
 800eb2c:	e783      	b.n	800ea36 <__ssvfscanf_r+0x796>
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d025      	beq.n	800eb80 <__ssvfscanf_r+0x8e0>
 800eb34:	2118      	movs	r1, #24
 800eb36:	2048      	movs	r0, #72	; 0x48
 800eb38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb3a:	1809      	adds	r1, r1, r0
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	19c9      	adds	r1, r1, r7
 800eb40:	781a      	ldrb	r2, [r3, #0]
 800eb42:	5c8a      	ldrb	r2, [r1, r2]
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	d103      	bne.n	800eb50 <__ssvfscanf_r+0x8b0>
 800eb48:	2c00      	cmp	r4, #0
 800eb4a:	d000      	beq.n	800eb4e <__ssvfscanf_r+0x8ae>
 800eb4c:	e66c      	b.n	800e828 <__ssvfscanf_r+0x588>
 800eb4e:	e4a4      	b.n	800e49a <__ssvfscanf_r+0x1fa>
 800eb50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb54:	6852      	ldr	r2, [r2, #4]
 800eb56:	3301      	adds	r3, #1
 800eb58:	600b      	str	r3, [r1, #0]
 800eb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5c:	3a01      	subs	r2, #1
 800eb5e:	3401      	adds	r4, #1
 800eb60:	604a      	str	r2, [r1, #4]
 800eb62:	429c      	cmp	r4, r3
 800eb64:	d100      	bne.n	800eb68 <__ssvfscanf_r+0x8c8>
 800eb66:	e65f      	b.n	800e828 <__ssvfscanf_r+0x588>
 800eb68:	2a00      	cmp	r2, #0
 800eb6a:	dce3      	bgt.n	800eb34 <__ssvfscanf_r+0x894>
 800eb6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb6e:	f002 fb2b 	bl	80111c8 <__ssrefill_r>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d0de      	beq.n	800eb34 <__ssvfscanf_r+0x894>
 800eb76:	e657      	b.n	800e828 <__ssvfscanf_r+0x588>
 800eb78:	0000fff6 	.word	0x0000fff6
 800eb7c:	20000444 	.word	0x20000444
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	0032      	movs	r2, r6
 800eb84:	cb20      	ldmia	r3!, {r5}
 800eb86:	61fb      	str	r3, [r7, #28]
 800eb88:	2380      	movs	r3, #128	; 0x80
 800eb8a:	401a      	ands	r2, r3
 800eb8c:	421e      	tst	r6, r3
 800eb8e:	d100      	bne.n	800eb92 <__ssvfscanf_r+0x8f2>
 800eb90:	e086      	b.n	800eca0 <__ssvfscanf_r+0xa00>
 800eb92:	2d00      	cmp	r5, #0
 800eb94:	d100      	bne.n	800eb98 <__ssvfscanf_r+0x8f8>
 800eb96:	e480      	b.n	800e49a <__ssvfscanf_r+0x1fa>
 800eb98:	2020      	movs	r0, #32
 800eb9a:	f7fb fcb3 	bl	800a504 <malloc>
 800eb9e:	6338      	str	r0, [r7, #48]	; 0x30
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d100      	bne.n	800eba6 <__ssvfscanf_r+0x906>
 800eba4:	e452      	b.n	800e44c <__ssvfscanf_r+0x1ac>
 800eba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eba8:	6028      	str	r0, [r5, #0]
 800ebaa:	88de      	ldrh	r6, [r3, #6]
 800ebac:	889c      	ldrh	r4, [r3, #4]
 800ebae:	6818      	ldr	r0, [r3, #0]
 800ebb0:	42a6      	cmp	r6, r4
 800ebb2:	d30e      	bcc.n	800ebd2 <__ssvfscanf_r+0x932>
 800ebb4:	4bc3      	ldr	r3, [pc, #780]	; (800eec4 <__ssvfscanf_r+0xc24>)
 800ebb6:	429c      	cmp	r4, r3
 800ebb8:	d900      	bls.n	800ebbc <__ssvfscanf_r+0x91c>
 800ebba:	e542      	b.n	800e642 <__ssvfscanf_r+0x3a2>
 800ebbc:	3408      	adds	r4, #8
 800ebbe:	b2a4      	uxth	r4, r4
 800ebc0:	00a1      	lsls	r1, r4, #2
 800ebc2:	f001 fe67 	bl	8010894 <realloc>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d100      	bne.n	800ebcc <__ssvfscanf_r+0x92c>
 800ebca:	e53a      	b.n	800e642 <__ssvfscanf_r+0x3a2>
 800ebcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebce:	6018      	str	r0, [r3, #0]
 800ebd0:	809c      	strh	r4, [r3, #4]
 800ebd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebd4:	1c72      	adds	r2, r6, #1
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	00b6      	lsls	r6, r6, #2
 800ebda:	50f5      	str	r5, [r6, r3]
 800ebdc:	2320      	movs	r3, #32
 800ebde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebe0:	002e      	movs	r6, r5
 800ebe2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ebe4:	80ca      	strh	r2, [r1, #6]
 800ebe6:	623b      	str	r3, [r7, #32]
 800ebe8:	002c      	movs	r4, r5
 800ebea:	2118      	movs	r1, #24
 800ebec:	2048      	movs	r0, #72	; 0x48
 800ebee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebf0:	1809      	adds	r1, r1, r0
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	19c9      	adds	r1, r1, r7
 800ebf6:	781a      	ldrb	r2, [r3, #0]
 800ebf8:	5c8a      	ldrb	r2, [r1, r2]
 800ebfa:	2a00      	cmp	r2, #0
 800ebfc:	d101      	bne.n	800ec02 <__ssvfscanf_r+0x962>
 800ebfe:	633d      	str	r5, [r7, #48]	; 0x30
 800ec00:	e031      	b.n	800ec66 <__ssvfscanf_r+0x9c6>
 800ec02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec06:	6852      	ldr	r2, [r2, #4]
 800ec08:	3a01      	subs	r2, #1
 800ec0a:	604a      	str	r2, [r1, #4]
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	600a      	str	r2, [r1, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	1c6a      	adds	r2, r5, #1
 800ec14:	633a      	str	r2, [r7, #48]	; 0x30
 800ec16:	702b      	strb	r3, [r5, #0]
 800ec18:	2e00      	cmp	r6, #0
 800ec1a:	d010      	beq.n	800ec3e <__ssvfscanf_r+0x99e>
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	1b15      	subs	r5, r2, r4
 800ec20:	429d      	cmp	r5, r3
 800ec22:	d30c      	bcc.n	800ec3e <__ssvfscanf_r+0x99e>
 800ec24:	005b      	lsls	r3, r3, #1
 800ec26:	0020      	movs	r0, r4
 800ec28:	0019      	movs	r1, r3
 800ec2a:	623b      	str	r3, [r7, #32]
 800ec2c:	f001 fe32 	bl	8010894 <realloc>
 800ec30:	1e04      	subs	r4, r0, #0
 800ec32:	d101      	bne.n	800ec38 <__ssvfscanf_r+0x998>
 800ec34:	f7ff fc0a 	bl	800e44c <__ssvfscanf_r+0x1ac>
 800ec38:	1943      	adds	r3, r0, r5
 800ec3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ec3c:	6030      	str	r0, [r6, #0]
 800ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec40:	3b01      	subs	r3, #1
 800ec42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00e      	beq.n	800ec66 <__ssvfscanf_r+0x9c6>
 800ec48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dc2a      	bgt.n	800eca6 <__ssvfscanf_r+0xa06>
 800ec50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec54:	f002 fab8 	bl	80111c8 <__ssrefill_r>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d024      	beq.n	800eca6 <__ssvfscanf_r+0xa06>
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	42a3      	cmp	r3, r4
 800ec60:	d101      	bne.n	800ec66 <__ssvfscanf_r+0x9c6>
 800ec62:	f7ff fbec 	bl	800e43e <__ssvfscanf_r+0x19e>
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	1b1d      	subs	r5, r3, r4
 800ec6a:	42a3      	cmp	r3, r4
 800ec6c:	d101      	bne.n	800ec72 <__ssvfscanf_r+0x9d2>
 800ec6e:	f7ff fc14 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800ec72:	2300      	movs	r3, #0
 800ec74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec76:	7013      	strb	r3, [r2, #0]
 800ec78:	429e      	cmp	r6, r3
 800ec7a:	d009      	beq.n	800ec90 <__ssvfscanf_r+0x9f0>
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	1c69      	adds	r1, r5, #1
 800ec80:	428b      	cmp	r3, r1
 800ec82:	d905      	bls.n	800ec90 <__ssvfscanf_r+0x9f0>
 800ec84:	6830      	ldr	r0, [r6, #0]
 800ec86:	f001 fe05 	bl	8010894 <realloc>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d000      	beq.n	800ec90 <__ssvfscanf_r+0x9f0>
 800ec8e:	6030      	str	r0, [r6, #0]
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	3301      	adds	r3, #1
 800ec94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	195b      	adds	r3, r3, r5
 800ec9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	e477      	b.n	800e590 <__ssvfscanf_r+0x2f0>
 800eca0:	0016      	movs	r6, r2
 800eca2:	623a      	str	r2, [r7, #32]
 800eca4:	e7a0      	b.n	800ebe8 <__ssvfscanf_r+0x948>
 800eca6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800eca8:	e79f      	b.n	800ebea <__ssvfscanf_r+0x94a>
 800ecaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <__ssvfscanf_r+0xa14>
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecb4:	2210      	movs	r2, #16
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	0034      	movs	r4, r6
 800ecba:	4032      	ands	r2, r6
 800ecbc:	401c      	ands	r4, r3
 800ecbe:	61fa      	str	r2, [r7, #28]
 800ecc0:	421e      	tst	r6, r3
 800ecc2:	d100      	bne.n	800ecc6 <__ssvfscanf_r+0xa26>
 800ecc4:	e102      	b.n	800eecc <__ssvfscanf_r+0xc2c>
 800ecc6:	2a00      	cmp	r2, #0
 800ecc8:	d000      	beq.n	800eccc <__ssvfscanf_r+0xa2c>
 800ecca:	e09f      	b.n	800ee0c <__ssvfscanf_r+0xb6c>
 800eccc:	2080      	movs	r0, #128	; 0x80
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	cb10      	ldmia	r3!, {r4}
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	4206      	tst	r6, r0
 800ecd6:	d100      	bne.n	800ecda <__ssvfscanf_r+0xa3a>
 800ecd8:	e0a1      	b.n	800ee1e <__ssvfscanf_r+0xb7e>
 800ecda:	2c00      	cmp	r4, #0
 800ecdc:	d100      	bne.n	800ece0 <__ssvfscanf_r+0xa40>
 800ecde:	e4aa      	b.n	800e636 <__ssvfscanf_r+0x396>
 800ece0:	f7fb fc10 	bl	800a504 <malloc>
 800ece4:	6338      	str	r0, [r7, #48]	; 0x30
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d100      	bne.n	800ecec <__ssvfscanf_r+0xa4c>
 800ecea:	e4a1      	b.n	800e630 <__ssvfscanf_r+0x390>
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	6023      	str	r3, [r4, #0]
 800ecf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecf2:	88de      	ldrh	r6, [r3, #6]
 800ecf4:	889d      	ldrh	r5, [r3, #4]
 800ecf6:	42ae      	cmp	r6, r5
 800ecf8:	d310      	bcc.n	800ed1c <__ssvfscanf_r+0xa7c>
 800ecfa:	4b72      	ldr	r3, [pc, #456]	; (800eec4 <__ssvfscanf_r+0xc24>)
 800ecfc:	429d      	cmp	r5, r3
 800ecfe:	d900      	bls.n	800ed02 <__ssvfscanf_r+0xa62>
 800ed00:	e496      	b.n	800e630 <__ssvfscanf_r+0x390>
 800ed02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed04:	3508      	adds	r5, #8
 800ed06:	b2ad      	uxth	r5, r5
 800ed08:	6818      	ldr	r0, [r3, #0]
 800ed0a:	00a9      	lsls	r1, r5, #2
 800ed0c:	f001 fdc2 	bl	8010894 <realloc>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d100      	bne.n	800ed16 <__ssvfscanf_r+0xa76>
 800ed14:	e48c      	b.n	800e630 <__ssvfscanf_r+0x390>
 800ed16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed18:	6018      	str	r0, [r3, #0]
 800ed1a:	809d      	strh	r5, [r3, #4]
 800ed1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1e:	1c72      	adds	r2, r6, #1
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	00b6      	lsls	r6, r6, #2
 800ed24:	50f4      	str	r4, [r6, r3]
 800ed26:	2320      	movs	r3, #32
 800ed28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed2a:	0025      	movs	r5, r4
 800ed2c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ed2e:	80ca      	strh	r2, [r1, #6]
 800ed30:	613b      	str	r3, [r7, #16]
 800ed32:	2300      	movs	r3, #0
 800ed34:	623b      	str	r3, [r7, #32]
 800ed36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed38:	4a63      	ldr	r2, [pc, #396]	; (800eec8 <__ssvfscanf_r+0xc28>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	5cd3      	ldrb	r3, [r2, r3]
 800ed40:	2208      	movs	r2, #8
 800ed42:	4213      	tst	r3, r2
 800ed44:	d149      	bne.n	800edda <__ssvfscanf_r+0xb3a>
 800ed46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d046      	beq.n	800edda <__ssvfscanf_r+0xb3a>
 800ed4c:	f7fc feb2 	bl	800bab4 <__locale_mb_cur_max>
 800ed50:	6a3b      	ldr	r3, [r7, #32]
 800ed52:	4298      	cmp	r0, r3
 800ed54:	d101      	bne.n	800ed5a <__ssvfscanf_r+0xaba>
 800ed56:	f7ff fb72 	bl	800e43e <__ssvfscanf_r+0x19e>
 800ed5a:	6a3a      	ldr	r2, [r7, #32]
 800ed5c:	2048      	movs	r0, #72	; 0x48
 800ed5e:	1c56      	adds	r6, r2, #1
 800ed60:	228c      	movs	r2, #140	; 0x8c
 800ed62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed64:	0052      	lsls	r2, r2, #1
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	1812      	adds	r2, r2, r0
 800ed6a:	7819      	ldrb	r1, [r3, #0]
 800ed6c:	6a38      	ldr	r0, [r7, #32]
 800ed6e:	19d2      	adds	r2, r2, r7
 800ed70:	5411      	strb	r1, [r2, r0]
 800ed72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed76:	6852      	ldr	r2, [r2, #4]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	600b      	str	r3, [r1, #0]
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	3a01      	subs	r2, #1
 800ed80:	604a      	str	r2, [r1, #4]
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d102      	bne.n	800ed8c <__ssvfscanf_r+0xaec>
 800ed86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d007      	beq.n	800ed9c <__ssvfscanf_r+0xafc>
 800ed8c:	2048      	movs	r0, #72	; 0x48
 800ed8e:	2310      	movs	r3, #16
 800ed90:	181b      	adds	r3, r3, r0
 800ed92:	2208      	movs	r2, #8
 800ed94:	2100      	movs	r1, #0
 800ed96:	19d8      	adds	r0, r3, r7
 800ed98:	f7fc fe48 	bl	800ba2c <memset>
 800ed9c:	2148      	movs	r1, #72	; 0x48
 800ed9e:	2310      	movs	r3, #16
 800eda0:	228c      	movs	r2, #140	; 0x8c
 800eda2:	185b      	adds	r3, r3, r1
 800eda4:	0052      	lsls	r2, r2, #1
 800eda6:	19db      	adds	r3, r3, r7
 800eda8:	1852      	adds	r2, r2, r1
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	0021      	movs	r1, r4
 800edae:	0033      	movs	r3, r6
 800edb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edb2:	19d2      	adds	r2, r2, r7
 800edb4:	f002 f908 	bl	8010fc8 <_mbrtowc_r>
 800edb8:	0003      	movs	r3, r0
 800edba:	62b8      	str	r0, [r7, #40]	; 0x28
 800edbc:	3301      	adds	r3, #1
 800edbe:	d101      	bne.n	800edc4 <__ssvfscanf_r+0xb24>
 800edc0:	f7ff fb3d 	bl	800e43e <__ssvfscanf_r+0x19e>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d12f      	bne.n	800ee28 <__ssvfscanf_r+0xb88>
 800edc8:	6020      	str	r0, [r4, #0]
 800edca:	6820      	ldr	r0, [r4, #0]
 800edcc:	f002 f91a 	bl	8011004 <iswspace>
 800edd0:	6238      	str	r0, [r7, #32]
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d04a      	beq.n	800ee6c <__ssvfscanf_r+0xbcc>
 800edd6:	2e00      	cmp	r6, #0
 800edd8:	d13c      	bne.n	800ee54 <__ssvfscanf_r+0xbb4>
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d000      	beq.n	800ede2 <__ssvfscanf_r+0xb42>
 800ede0:	e640      	b.n	800ea64 <__ssvfscanf_r+0x7c4>
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	d100      	bne.n	800edea <__ssvfscanf_r+0xb4a>
 800ede8:	e639      	b.n	800ea5e <__ssvfscanf_r+0x7be>
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	693a      	ldr	r2, [r7, #16]
 800edee:	1ae4      	subs	r4, r4, r3
 800edf0:	10a3      	asrs	r3, r4, #2
 800edf2:	3301      	adds	r3, #1
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d800      	bhi.n	800edfa <__ssvfscanf_r+0xb5a>
 800edf8:	e631      	b.n	800ea5e <__ssvfscanf_r+0x7be>
 800edfa:	6828      	ldr	r0, [r5, #0]
 800edfc:	1d21      	adds	r1, r4, #4
 800edfe:	f001 fd49 	bl	8010894 <realloc>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d100      	bne.n	800ee08 <__ssvfscanf_r+0xb68>
 800ee06:	e62a      	b.n	800ea5e <__ssvfscanf_r+0x7be>
 800ee08:	6028      	str	r0, [r5, #0]
 800ee0a:	e628      	b.n	800ea5e <__ssvfscanf_r+0x7be>
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	2300      	movs	r3, #0
 800ee12:	001d      	movs	r5, r3
 800ee14:	613b      	str	r3, [r7, #16]
 800ee16:	633b      	str	r3, [r7, #48]	; 0x30
 800ee18:	334c      	adds	r3, #76	; 0x4c
 800ee1a:	18fc      	adds	r4, r7, r3
 800ee1c:	e789      	b.n	800ed32 <__ssvfscanf_r+0xa92>
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	001d      	movs	r5, r3
 800ee22:	613b      	str	r3, [r7, #16]
 800ee24:	633b      	str	r3, [r7, #48]	; 0x30
 800ee26:	e784      	b.n	800ed32 <__ssvfscanf_r+0xa92>
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	623e      	str	r6, [r7, #32]
 800ee2c:	3302      	adds	r3, #2
 800ee2e:	d1cc      	bne.n	800edca <__ssvfscanf_r+0xb2a>
 800ee30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dd00      	ble.n	800ee3a <__ssvfscanf_r+0xb9a>
 800ee38:	e77d      	b.n	800ed36 <__ssvfscanf_r+0xa96>
 800ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee3e:	f002 f9c3 	bl	80111c8 <__ssrefill_r>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d100      	bne.n	800ee48 <__ssvfscanf_r+0xba8>
 800ee46:	e776      	b.n	800ed36 <__ssvfscanf_r+0xa96>
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d001      	beq.n	800ee52 <__ssvfscanf_r+0xbb2>
 800ee4e:	f7ff faf6 	bl	800e43e <__ssvfscanf_r+0x19e>
 800ee52:	e7c2      	b.n	800edda <__ssvfscanf_r+0xb3a>
 800ee54:	238c      	movs	r3, #140	; 0x8c
 800ee56:	2248      	movs	r2, #72	; 0x48
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	189b      	adds	r3, r3, r2
 800ee5c:	3e01      	subs	r6, #1
 800ee5e:	19db      	adds	r3, r3, r7
 800ee60:	5cf1      	ldrb	r1, [r6, r3]
 800ee62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee66:	f002 f973 	bl	8011150 <_sungetc_r>
 800ee6a:	e7b4      	b.n	800edd6 <__ssvfscanf_r+0xb36>
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	199b      	adds	r3, r3, r6
 800ee70:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	d102      	bne.n	800ee7e <__ssvfscanf_r+0xbde>
 800ee78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee7a:	2b04      	cmp	r3, #4
 800ee7c:	d002      	beq.n	800ee84 <__ssvfscanf_r+0xbe4>
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee80:	3b01      	subs	r3, #1
 800ee82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1d2      	bne.n	800ee30 <__ssvfscanf_r+0xb90>
 800ee8a:	3404      	adds	r4, #4
 800ee8c:	2d00      	cmp	r5, #0
 800ee8e:	d016      	beq.n	800eebe <__ssvfscanf_r+0xc1e>
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	623a      	str	r2, [r7, #32]
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	1ae6      	subs	r6, r4, r3
 800ee9a:	10b3      	asrs	r3, r6, #2
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d3c7      	bcc.n	800ee30 <__ssvfscanf_r+0xb90>
 800eea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eea2:	00d1      	lsls	r1, r2, #3
 800eea4:	f001 fcf6 	bl	8010894 <realloc>
 800eea8:	6338      	str	r0, [r7, #48]	; 0x30
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d101      	bne.n	800eeb2 <__ssvfscanf_r+0xc12>
 800eeae:	f7ff fbbf 	bl	800e630 <__ssvfscanf_r+0x390>
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	1984      	adds	r4, r0, r6
 800eeb6:	005b      	lsls	r3, r3, #1
 800eeb8:	6028      	str	r0, [r5, #0]
 800eeba:	613b      	str	r3, [r7, #16]
 800eebc:	e7b8      	b.n	800ee30 <__ssvfscanf_r+0xb90>
 800eebe:	623d      	str	r5, [r7, #32]
 800eec0:	e7b6      	b.n	800ee30 <__ssvfscanf_r+0xb90>
 800eec2:	46c0      	nop			; (mov r8, r8)
 800eec4:	0000fff6 	.word	0x0000fff6
 800eec8:	080141a9 	.word	0x080141a9
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d01c      	beq.n	800ef0c <__ssvfscanf_r+0xc6c>
 800eed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed4:	49bf      	ldr	r1, [pc, #764]	; (800f1d4 <__ssvfscanf_r+0xf34>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	781a      	ldrb	r2, [r3, #0]
 800eeda:	5c8a      	ldrb	r2, [r1, r2]
 800eedc:	2108      	movs	r1, #8
 800eede:	420a      	tst	r2, r1
 800eee0:	d000      	beq.n	800eee4 <__ssvfscanf_r+0xc44>
 800eee2:	e4a1      	b.n	800e828 <__ssvfscanf_r+0x588>
 800eee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eee8:	6852      	ldr	r2, [r2, #4]
 800eeea:	3301      	adds	r3, #1
 800eeec:	600b      	str	r3, [r1, #0]
 800eeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef0:	3a01      	subs	r2, #1
 800eef2:	3401      	adds	r4, #1
 800eef4:	604a      	str	r2, [r1, #4]
 800eef6:	429c      	cmp	r4, r3
 800eef8:	d100      	bne.n	800eefc <__ssvfscanf_r+0xc5c>
 800eefa:	e495      	b.n	800e828 <__ssvfscanf_r+0x588>
 800eefc:	2a00      	cmp	r2, #0
 800eefe:	dce8      	bgt.n	800eed2 <__ssvfscanf_r+0xc32>
 800ef00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef02:	f002 f961 	bl	80111c8 <__ssrefill_r>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d0e3      	beq.n	800eed2 <__ssvfscanf_r+0xc32>
 800ef0a:	e48d      	b.n	800e828 <__ssvfscanf_r+0x588>
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	0032      	movs	r2, r6
 800ef10:	cb10      	ldmia	r3!, {r4}
 800ef12:	61fb      	str	r3, [r7, #28]
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	401a      	ands	r2, r3
 800ef18:	421e      	tst	r6, r3
 800ef1a:	d039      	beq.n	800ef90 <__ssvfscanf_r+0xcf0>
 800ef1c:	2c00      	cmp	r4, #0
 800ef1e:	d101      	bne.n	800ef24 <__ssvfscanf_r+0xc84>
 800ef20:	f7ff fabb 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800ef24:	2020      	movs	r0, #32
 800ef26:	f7fb faed 	bl	800a504 <malloc>
 800ef2a:	6338      	str	r0, [r7, #48]	; 0x30
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d101      	bne.n	800ef34 <__ssvfscanf_r+0xc94>
 800ef30:	f7ff fa8c 	bl	800e44c <__ssvfscanf_r+0x1ac>
 800ef34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef36:	6020      	str	r0, [r4, #0]
 800ef38:	88de      	ldrh	r6, [r3, #6]
 800ef3a:	889d      	ldrh	r5, [r3, #4]
 800ef3c:	6818      	ldr	r0, [r3, #0]
 800ef3e:	42ae      	cmp	r6, r5
 800ef40:	d310      	bcc.n	800ef64 <__ssvfscanf_r+0xcc4>
 800ef42:	4ba5      	ldr	r3, [pc, #660]	; (800f1d8 <__ssvfscanf_r+0xf38>)
 800ef44:	429d      	cmp	r5, r3
 800ef46:	d901      	bls.n	800ef4c <__ssvfscanf_r+0xcac>
 800ef48:	f7ff fb7b 	bl	800e642 <__ssvfscanf_r+0x3a2>
 800ef4c:	3508      	adds	r5, #8
 800ef4e:	b2ad      	uxth	r5, r5
 800ef50:	00a9      	lsls	r1, r5, #2
 800ef52:	f001 fc9f 	bl	8010894 <realloc>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d101      	bne.n	800ef5e <__ssvfscanf_r+0xcbe>
 800ef5a:	f7ff fb72 	bl	800e642 <__ssvfscanf_r+0x3a2>
 800ef5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef60:	6018      	str	r0, [r3, #0]
 800ef62:	809d      	strh	r5, [r3, #4]
 800ef64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef66:	1c72      	adds	r2, r6, #1
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	00b6      	lsls	r6, r6, #2
 800ef6c:	50f4      	str	r4, [r6, r3]
 800ef6e:	2320      	movs	r3, #32
 800ef70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef72:	0026      	movs	r6, r4
 800ef74:	80ca      	strh	r2, [r1, #6]
 800ef76:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ef78:	633b      	str	r3, [r7, #48]	; 0x30
 800ef7a:	0025      	movs	r5, r4
 800ef7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef7e:	4995      	ldr	r1, [pc, #596]	; (800f1d4 <__ssvfscanf_r+0xf34>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	781a      	ldrb	r2, [r3, #0]
 800ef84:	5c8a      	ldrb	r2, [r1, r2]
 800ef86:	2108      	movs	r1, #8
 800ef88:	420a      	tst	r2, r1
 800ef8a:	d004      	beq.n	800ef96 <__ssvfscanf_r+0xcf6>
 800ef8c:	623c      	str	r4, [r7, #32]
 800ef8e:	e031      	b.n	800eff4 <__ssvfscanf_r+0xd54>
 800ef90:	0016      	movs	r6, r2
 800ef92:	633a      	str	r2, [r7, #48]	; 0x30
 800ef94:	e7f1      	b.n	800ef7a <__ssvfscanf_r+0xcda>
 800ef96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef9a:	6852      	ldr	r2, [r2, #4]
 800ef9c:	3a01      	subs	r2, #1
 800ef9e:	604a      	str	r2, [r1, #4]
 800efa0:	1c5a      	adds	r2, r3, #1
 800efa2:	600a      	str	r2, [r1, #0]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	1c62      	adds	r2, r4, #1
 800efa8:	623a      	str	r2, [r7, #32]
 800efaa:	7023      	strb	r3, [r4, #0]
 800efac:	2e00      	cmp	r6, #0
 800efae:	d010      	beq.n	800efd2 <__ssvfscanf_r+0xd32>
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	1b54      	subs	r4, r2, r5
 800efb4:	429c      	cmp	r4, r3
 800efb6:	d30c      	bcc.n	800efd2 <__ssvfscanf_r+0xd32>
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	0028      	movs	r0, r5
 800efbc:	0019      	movs	r1, r3
 800efbe:	633b      	str	r3, [r7, #48]	; 0x30
 800efc0:	f001 fc68 	bl	8010894 <realloc>
 800efc4:	1e05      	subs	r5, r0, #0
 800efc6:	d101      	bne.n	800efcc <__ssvfscanf_r+0xd2c>
 800efc8:	f7ff fa40 	bl	800e44c <__ssvfscanf_r+0x1ac>
 800efcc:	1903      	adds	r3, r0, r4
 800efce:	623b      	str	r3, [r7, #32]
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd4:	3b01      	subs	r3, #1
 800efd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00b      	beq.n	800eff4 <__ssvfscanf_r+0xd54>
 800efdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	dd01      	ble.n	800efe8 <__ssvfscanf_r+0xd48>
 800efe4:	6a3c      	ldr	r4, [r7, #32]
 800efe6:	e7c9      	b.n	800ef7c <__ssvfscanf_r+0xcdc>
 800efe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efec:	f002 f8ec 	bl	80111c8 <__ssrefill_r>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d0f7      	beq.n	800efe4 <__ssvfscanf_r+0xd44>
 800eff4:	2300      	movs	r3, #0
 800eff6:	6a3a      	ldr	r2, [r7, #32]
 800eff8:	7013      	strb	r3, [r2, #0]
 800effa:	1b55      	subs	r5, r2, r5
 800effc:	2e00      	cmp	r6, #0
 800effe:	d009      	beq.n	800f014 <__ssvfscanf_r+0xd74>
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	1c69      	adds	r1, r5, #1
 800f004:	428b      	cmp	r3, r1
 800f006:	d905      	bls.n	800f014 <__ssvfscanf_r+0xd74>
 800f008:	6830      	ldr	r0, [r6, #0]
 800f00a:	f001 fc43 	bl	8010894 <realloc>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d000      	beq.n	800f014 <__ssvfscanf_r+0xd74>
 800f012:	6030      	str	r0, [r6, #0]
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	195b      	adds	r3, r3, r5
 800f018:	63bb      	str	r3, [r7, #56]	; 0x38
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	3301      	adds	r3, #1
 800f01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f020:	e63c      	b.n	800ec9c <__ssvfscanf_r+0x9fc>
 800f022:	22ae      	movs	r2, #174	; 0xae
 800f024:	2100      	movs	r1, #0
 800f026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f028:	0052      	lsls	r2, r2, #1
 800f02a:	3b01      	subs	r3, #1
 800f02c:	6239      	str	r1, [r7, #32]
 800f02e:	4293      	cmp	r3, r2
 800f030:	d906      	bls.n	800f040 <__ssvfscanf_r+0xda0>
 800f032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f034:	3b5e      	subs	r3, #94	; 0x5e
 800f036:	3bff      	subs	r3, #255	; 0xff
 800f038:	623b      	str	r3, [r7, #32]
 800f03a:	235e      	movs	r3, #94	; 0x5e
 800f03c:	33ff      	adds	r3, #255	; 0xff
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f040:	24d8      	movs	r4, #216	; 0xd8
 800f042:	2300      	movs	r3, #0
 800f044:	2248      	movs	r2, #72	; 0x48
 800f046:	0124      	lsls	r4, r4, #4
 800f048:	4334      	orrs	r4, r6
 800f04a:	2680      	movs	r6, #128	; 0x80
 800f04c:	61fb      	str	r3, [r7, #28]
 800f04e:	3319      	adds	r3, #25
 800f050:	33ff      	adds	r3, #255	; 0xff
 800f052:	189b      	adds	r3, r3, r2
 800f054:	19dd      	adds	r5, r3, r7
 800f056:	00b6      	lsls	r6, r6, #2
 800f058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	7813      	ldrb	r3, [r2, #0]
 800f05e:	2b39      	cmp	r3, #57	; 0x39
 800f060:	d80f      	bhi.n	800f082 <__ssvfscanf_r+0xde2>
 800f062:	2b2a      	cmp	r3, #42	; 0x2a
 800f064:	d91b      	bls.n	800f09e <__ssvfscanf_r+0xdfe>
 800f066:	0018      	movs	r0, r3
 800f068:	382b      	subs	r0, #43	; 0x2b
 800f06a:	280e      	cmp	r0, #14
 800f06c:	d817      	bhi.n	800f09e <__ssvfscanf_r+0xdfe>
 800f06e:	f7f1 f851 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f072:	168f      	.short	0x168f
 800f074:	5416168f 	.word	0x5416168f
 800f078:	80808080 	.word	0x80808080
 800f07c:	87808080 	.word	0x87808080
 800f080:	87          	.byte	0x87
 800f081:	00          	.byte	0x00
 800f082:	2b66      	cmp	r3, #102	; 0x66
 800f084:	d83a      	bhi.n	800f0fc <__ssvfscanf_r+0xe5c>
 800f086:	2b60      	cmp	r3, #96	; 0x60
 800f088:	d803      	bhi.n	800f092 <__ssvfscanf_r+0xdf2>
 800f08a:	2b46      	cmp	r3, #70	; 0x46
 800f08c:	d805      	bhi.n	800f09a <__ssvfscanf_r+0xdfa>
 800f08e:	2b40      	cmp	r3, #64	; 0x40
 800f090:	d905      	bls.n	800f09e <__ssvfscanf_r+0xdfe>
 800f092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f094:	290a      	cmp	r1, #10
 800f096:	dc71      	bgt.n	800f17c <__ssvfscanf_r+0xedc>
 800f098:	e001      	b.n	800f09e <__ssvfscanf_r+0xdfe>
 800f09a:	2b58      	cmp	r3, #88	; 0x58
 800f09c:	d030      	beq.n	800f100 <__ssvfscanf_r+0xe60>
 800f09e:	05e3      	lsls	r3, r4, #23
 800f0a0:	d515      	bpl.n	800f0ce <__ssvfscanf_r+0xe2e>
 800f0a2:	238c      	movs	r3, #140	; 0x8c
 800f0a4:	2248      	movs	r2, #72	; 0x48
 800f0a6:	005b      	lsls	r3, r3, #1
 800f0a8:	189b      	adds	r3, r3, r2
 800f0aa:	19db      	adds	r3, r3, r7
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	d905      	bls.n	800f0bc <__ssvfscanf_r+0xe1c>
 800f0b0:	3d01      	subs	r5, #1
 800f0b2:	7829      	ldrb	r1, [r5, #0]
 800f0b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0b8:	f002 f84a 	bl	8011150 <_sungetc_r>
 800f0bc:	238c      	movs	r3, #140	; 0x8c
 800f0be:	2248      	movs	r2, #72	; 0x48
 800f0c0:	005b      	lsls	r3, r3, #1
 800f0c2:	189b      	adds	r3, r3, r2
 800f0c4:	19db      	adds	r3, r3, r7
 800f0c6:	429d      	cmp	r5, r3
 800f0c8:	d101      	bne.n	800f0ce <__ssvfscanf_r+0xe2e>
 800f0ca:	f7ff f9e6 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800f0ce:	2310      	movs	r3, #16
 800f0d0:	0022      	movs	r2, r4
 800f0d2:	401a      	ands	r2, r3
 800f0d4:	421c      	tst	r4, r3
 800f0d6:	d171      	bne.n	800f1bc <__ssvfscanf_r+0xf1c>
 800f0d8:	218c      	movs	r1, #140	; 0x8c
 800f0da:	2048      	movs	r0, #72	; 0x48
 800f0dc:	0049      	lsls	r1, r1, #1
 800f0de:	1809      	adds	r1, r1, r0
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	697e      	ldr	r6, [r7, #20]
 800f0e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0e6:	19c9      	adds	r1, r1, r7
 800f0e8:	702a      	strb	r2, [r5, #0]
 800f0ea:	47b0      	blx	r6
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	1d1e      	adds	r6, r3, #4
 800f0f0:	06a3      	lsls	r3, r4, #26
 800f0f2:	d559      	bpl.n	800f1a8 <__ssvfscanf_r+0xf08>
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6018      	str	r0, [r3, #0]
 800f0fa:	e05b      	b.n	800f1b4 <__ssvfscanf_r+0xf14>
 800f0fc:	2b78      	cmp	r3, #120	; 0x78
 800f0fe:	d1ce      	bne.n	800f09e <__ssvfscanf_r+0xdfe>
 800f100:	21c0      	movs	r1, #192	; 0xc0
 800f102:	00c9      	lsls	r1, r1, #3
 800f104:	4021      	ands	r1, r4
 800f106:	42b1      	cmp	r1, r6
 800f108:	d1c9      	bne.n	800f09e <__ssvfscanf_r+0xdfe>
 800f10a:	4934      	ldr	r1, [pc, #208]	; (800f1dc <__ssvfscanf_r+0xf3c>)
 800f10c:	4021      	ands	r1, r4
 800f10e:	24a0      	movs	r4, #160	; 0xa0
 800f110:	00e4      	lsls	r4, r4, #3
 800f112:	430c      	orrs	r4, r1
 800f114:	2110      	movs	r1, #16
 800f116:	6279      	str	r1, [r7, #36]	; 0x24
 800f118:	e00b      	b.n	800f132 <__ssvfscanf_r+0xe92>
 800f11a:	0521      	lsls	r1, r4, #20
 800f11c:	d509      	bpl.n	800f132 <__ssvfscanf_r+0xe92>
 800f11e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f120:	2900      	cmp	r1, #0
 800f122:	d102      	bne.n	800f12a <__ssvfscanf_r+0xe8a>
 800f124:	3108      	adds	r1, #8
 800f126:	4334      	orrs	r4, r6
 800f128:	6279      	str	r1, [r7, #36]	; 0x24
 800f12a:	0561      	lsls	r1, r4, #21
 800f12c:	d504      	bpl.n	800f138 <__ssvfscanf_r+0xe98>
 800f12e:	492c      	ldr	r1, [pc, #176]	; (800f1e0 <__ssvfscanf_r+0xf40>)
 800f130:	400c      	ands	r4, r1
 800f132:	702b      	strb	r3, [r5, #0]
 800f134:	3501      	adds	r5, #1
 800f136:	e00c      	b.n	800f152 <__ssvfscanf_r+0xeb2>
 800f138:	4b2a      	ldr	r3, [pc, #168]	; (800f1e4 <__ssvfscanf_r+0xf44>)
 800f13a:	401c      	ands	r4, r3
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d004      	beq.n	800f14c <__ssvfscanf_r+0xeac>
 800f142:	3b01      	subs	r3, #1
 800f144:	623b      	str	r3, [r7, #32]
 800f146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f148:	3301      	adds	r3, #1
 800f14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	3301      	adds	r3, #1
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f154:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	3b01      	subs	r3, #1
 800f15a:	604b      	str	r3, [r1, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	dd1c      	ble.n	800f19a <__ssvfscanf_r+0xefa>
 800f160:	3201      	adds	r2, #1
 800f162:	600a      	str	r2, [r1, #0]
 800f164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f166:	3b01      	subs	r3, #1
 800f168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d000      	beq.n	800f170 <__ssvfscanf_r+0xed0>
 800f16e:	e773      	b.n	800f058 <__ssvfscanf_r+0xdb8>
 800f170:	e795      	b.n	800f09e <__ssvfscanf_r+0xdfe>
 800f172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f174:	491c      	ldr	r1, [pc, #112]	; (800f1e8 <__ssvfscanf_r+0xf48>)
 800f176:	0040      	lsls	r0, r0, #1
 800f178:	5e41      	ldrsh	r1, [r0, r1]
 800f17a:	6279      	str	r1, [r7, #36]	; 0x24
 800f17c:	491b      	ldr	r1, [pc, #108]	; (800f1ec <__ssvfscanf_r+0xf4c>)
 800f17e:	e7d7      	b.n	800f130 <__ssvfscanf_r+0xe90>
 800f180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f182:	4919      	ldr	r1, [pc, #100]	; (800f1e8 <__ssvfscanf_r+0xf48>)
 800f184:	0040      	lsls	r0, r0, #1
 800f186:	5e41      	ldrsh	r1, [r0, r1]
 800f188:	6279      	str	r1, [r7, #36]	; 0x24
 800f18a:	2908      	cmp	r1, #8
 800f18c:	dcf6      	bgt.n	800f17c <__ssvfscanf_r+0xedc>
 800f18e:	e786      	b.n	800f09e <__ssvfscanf_r+0xdfe>
 800f190:	2180      	movs	r1, #128	; 0x80
 800f192:	420c      	tst	r4, r1
 800f194:	d083      	beq.n	800f09e <__ssvfscanf_r+0xdfe>
 800f196:	438c      	bics	r4, r1
 800f198:	e7cb      	b.n	800f132 <__ssvfscanf_r+0xe92>
 800f19a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f19c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f19e:	f002 f813 	bl	80111c8 <__ssrefill_r>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0de      	beq.n	800f164 <__ssvfscanf_r+0xec4>
 800f1a6:	e77a      	b.n	800f09e <__ssvfscanf_r+0xdfe>
 800f1a8:	2308      	movs	r3, #8
 800f1aa:	421c      	tst	r4, r3
 800f1ac:	d020      	beq.n	800f1f0 <__ssvfscanf_r+0xf50>
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	7018      	strb	r0, [r3, #0]
 800f1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b6:	633e      	str	r6, [r7, #48]	; 0x30
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1bc:	238c      	movs	r3, #140	; 0x8c
 800f1be:	2248      	movs	r2, #72	; 0x48
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	189b      	adds	r3, r3, r2
 800f1c4:	19db      	adds	r3, r3, r7
 800f1c6:	1aed      	subs	r5, r5, r3
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	18ed      	adds	r5, r5, r3
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	195b      	adds	r3, r3, r5
 800f1d0:	f7ff f92d 	bl	800e42e <__ssvfscanf_r+0x18e>
 800f1d4:	080141a9 	.word	0x080141a9
 800f1d8:	0000fff6 	.word	0x0000fff6
 800f1dc:	fffffdff 	.word	0xfffffdff
 800f1e0:	fffffa7f 	.word	0xfffffa7f
 800f1e4:	fffffc7f 	.word	0xfffffc7f
 800f1e8:	080144d6 	.word	0x080144d6
 800f1ec:	fffff47f 	.word	0xfffff47f
 800f1f0:	0763      	lsls	r3, r4, #29
 800f1f2:	d503      	bpl.n	800f1fc <__ssvfscanf_r+0xf5c>
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	8018      	strh	r0, [r3, #0]
 800f1fa:	e7db      	b.n	800f1b4 <__ssvfscanf_r+0xf14>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	0022      	movs	r2, r4
 800f200:	401a      	ands	r2, r3
 800f202:	421c      	tst	r4, r3
 800f204:	d000      	beq.n	800f208 <__ssvfscanf_r+0xf68>
 800f206:	e775      	b.n	800f0f4 <__ssvfscanf_r+0xe54>
 800f208:	07a4      	lsls	r4, r4, #30
 800f20a:	d400      	bmi.n	800f20e <__ssvfscanf_r+0xf6e>
 800f20c:	e772      	b.n	800f0f4 <__ssvfscanf_r+0xe54>
 800f20e:	4ba8      	ldr	r3, [pc, #672]	; (800f4b0 <__ssvfscanf_r+0x1210>)
 800f210:	6979      	ldr	r1, [r7, #20]
 800f212:	4299      	cmp	r1, r3
 800f214:	d10c      	bne.n	800f230 <__ssvfscanf_r+0xf90>
 800f216:	218c      	movs	r1, #140	; 0x8c
 800f218:	2048      	movs	r0, #72	; 0x48
 800f21a:	0049      	lsls	r1, r1, #1
 800f21c:	1809      	adds	r1, r1, r0
 800f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f220:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f222:	19c9      	adds	r1, r1, r7
 800f224:	f001 fecc 	bl	8010fc0 <_strtoull_r>
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	c303      	stmia	r3!, {r0, r1}
 800f22e:	e7c1      	b.n	800f1b4 <__ssvfscanf_r+0xf14>
 800f230:	218c      	movs	r1, #140	; 0x8c
 800f232:	2048      	movs	r0, #72	; 0x48
 800f234:	0049      	lsls	r1, r1, #1
 800f236:	1809      	adds	r1, r1, r0
 800f238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f23c:	19c9      	adds	r1, r1, r7
 800f23e:	f001 fe0d 	bl	8010e5c <_strtoll_r>
 800f242:	e7f1      	b.n	800f228 <__ssvfscanf_r+0xf88>
 800f244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f246:	f000 fb9f 	bl	800f988 <_localeconv_r>
 800f24a:	22ae      	movs	r2, #174	; 0xae
 800f24c:	2100      	movs	r1, #0
 800f24e:	6803      	ldr	r3, [r0, #0]
 800f250:	0052      	lsls	r2, r2, #1
 800f252:	603b      	str	r3, [r7, #0]
 800f254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f256:	60f9      	str	r1, [r7, #12]
 800f258:	3b01      	subs	r3, #1
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d906      	bls.n	800f26c <__ssvfscanf_r+0xfcc>
 800f25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f260:	3b5e      	subs	r3, #94	; 0x5e
 800f262:	3bff      	subs	r3, #255	; 0xff
 800f264:	60fb      	str	r3, [r7, #12]
 800f266:	235e      	movs	r3, #94	; 0x5e
 800f268:	33ff      	adds	r3, #255	; 0xff
 800f26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f26c:	23f0      	movs	r3, #240	; 0xf0
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	431e      	orrs	r6, r3
 800f272:	238c      	movs	r3, #140	; 0x8c
 800f274:	2248      	movs	r2, #72	; 0x48
 800f276:	2400      	movs	r4, #0
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	189b      	adds	r3, r3, r2
 800f27c:	623c      	str	r4, [r7, #32]
 800f27e:	607c      	str	r4, [r7, #4]
 800f280:	60bc      	str	r4, [r7, #8]
 800f282:	61fc      	str	r4, [r7, #28]
 800f284:	613c      	str	r4, [r7, #16]
 800f286:	19dd      	adds	r5, r3, r7
 800f288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	781a      	ldrb	r2, [r3, #0]
 800f28e:	0010      	movs	r0, r2
 800f290:	382b      	subs	r0, #43	; 0x2b
 800f292:	284e      	cmp	r0, #78	; 0x4e
 800f294:	d900      	bls.n	800f298 <__ssvfscanf_r+0xff8>
 800f296:	e133      	b.n	800f500 <__ssvfscanf_r+0x1260>
 800f298:	f7f0 ff46 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f29c:	0132009b 	.word	0x0132009b
 800f2a0:	0132009b 	.word	0x0132009b
 800f2a4:	004f0132 	.word	0x004f0132
 800f2a8:	00720072 	.word	0x00720072
 800f2ac:	00720072 	.word	0x00720072
 800f2b0:	00720072 	.word	0x00720072
 800f2b4:	00720072 	.word	0x00720072
 800f2b8:	01320072 	.word	0x01320072
 800f2bc:	01320132 	.word	0x01320132
 800f2c0:	01320132 	.word	0x01320132
 800f2c4:	01320132 	.word	0x01320132
 800f2c8:	007b00bc 	.word	0x007b00bc
 800f2cc:	007b007b 	.word	0x007b007b
 800f2d0:	00f7012f 	.word	0x00f7012f
 800f2d4:	01320132 	.word	0x01320132
 800f2d8:	013200e3 	.word	0x013200e3
 800f2dc:	01320132 	.word	0x01320132
 800f2e0:	00a00132 	.word	0x00a00132
 800f2e4:	01120132 	.word	0x01120132
 800f2e8:	01320132 	.word	0x01320132
 800f2ec:	01010132 	.word	0x01010132
 800f2f0:	01320132 	.word	0x01320132
 800f2f4:	00820132 	.word	0x00820132
 800f2f8:	01320105 	.word	0x01320105
 800f2fc:	01320132 	.word	0x01320132
 800f300:	01320132 	.word	0x01320132
 800f304:	01320132 	.word	0x01320132
 800f308:	007b00bc 	.word	0x007b00bc
 800f30c:	007b007b 	.word	0x007b007b
 800f310:	00f7012f 	.word	0x00f7012f
 800f314:	01320132 	.word	0x01320132
 800f318:	013200e3 	.word	0x013200e3
 800f31c:	01320132 	.word	0x01320132
 800f320:	00a00132 	.word	0x00a00132
 800f324:	01120132 	.word	0x01120132
 800f328:	01320132 	.word	0x01320132
 800f32c:	01010132 	.word	0x01010132
 800f330:	01320132 	.word	0x01320132
 800f334:	00820132 	.word	0x00820132
 800f338:	0105      	.short	0x0105
 800f33a:	05f1      	lsls	r1, r6, #23
 800f33c:	d520      	bpl.n	800f380 <__ssvfscanf_r+0x10e0>
 800f33e:	2280      	movs	r2, #128	; 0x80
 800f340:	4396      	bics	r6, r2
 800f342:	69fa      	ldr	r2, [r7, #28]
 800f344:	3201      	adds	r2, #1
 800f346:	61fa      	str	r2, [r7, #28]
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	2a00      	cmp	r2, #0
 800f34c:	d004      	beq.n	800f358 <__ssvfscanf_r+0x10b8>
 800f34e:	3a01      	subs	r2, #1
 800f350:	60fa      	str	r2, [r7, #12]
 800f352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f354:	3201      	adds	r2, #1
 800f356:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f35c:	3a01      	subs	r2, #1
 800f35e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f362:	3201      	adds	r2, #1
 800f364:	63ba      	str	r2, [r7, #56]	; 0x38
 800f366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f368:	6852      	ldr	r2, [r2, #4]
 800f36a:	3a01      	subs	r2, #1
 800f36c:	604a      	str	r2, [r1, #4]
 800f36e:	2a00      	cmp	r2, #0
 800f370:	dc00      	bgt.n	800f374 <__ssvfscanf_r+0x10d4>
 800f372:	e0d6      	b.n	800f522 <__ssvfscanf_r+0x1282>
 800f374:	3301      	adds	r3, #1
 800f376:	600b      	str	r3, [r1, #0]
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d184      	bne.n	800f288 <__ssvfscanf_r+0xfe8>
 800f37e:	e057      	b.n	800f430 <__ssvfscanf_r+0x1190>
 800f380:	6a39      	ldr	r1, [r7, #32]
 800f382:	1909      	adds	r1, r1, r4
 800f384:	2900      	cmp	r1, #0
 800f386:	d153      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f388:	494a      	ldr	r1, [pc, #296]	; (800f4b4 <__ssvfscanf_r+0x1214>)
 800f38a:	400e      	ands	r6, r1
 800f38c:	702a      	strb	r2, [r5, #0]
 800f38e:	3501      	adds	r5, #1
 800f390:	e7e2      	b.n	800f358 <__ssvfscanf_r+0x10b8>
 800f392:	0531      	lsls	r1, r6, #20
 800f394:	d54c      	bpl.n	800f430 <__ssvfscanf_r+0x1190>
 800f396:	6a39      	ldr	r1, [r7, #32]
 800f398:	1909      	adds	r1, r1, r4
 800f39a:	2900      	cmp	r1, #0
 800f39c:	d040      	beq.n	800f420 <__ssvfscanf_r+0x1180>
 800f39e:	e047      	b.n	800f430 <__ssvfscanf_r+0x1190>
 800f3a0:	2198      	movs	r1, #152	; 0x98
 800f3a2:	2080      	movs	r0, #128	; 0x80
 800f3a4:	0109      	lsls	r1, r1, #4
 800f3a6:	4031      	ands	r1, r6
 800f3a8:	0040      	lsls	r0, r0, #1
 800f3aa:	4281      	cmp	r1, r0
 800f3ac:	d140      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f3ae:	69f9      	ldr	r1, [r7, #28]
 800f3b0:	2901      	cmp	r1, #1
 800f3b2:	d13d      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f3b4:	2080      	movs	r0, #128	; 0x80
 800f3b6:	4940      	ldr	r1, [pc, #256]	; (800f4b8 <__ssvfscanf_r+0x1218>)
 800f3b8:	0100      	lsls	r0, r0, #4
 800f3ba:	400e      	ands	r6, r1
 800f3bc:	3132      	adds	r1, #50	; 0x32
 800f3be:	31ff      	adds	r1, #255	; 0xff
 800f3c0:	7029      	strb	r1, [r5, #0]
 800f3c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3c4:	4306      	orrs	r6, r0
 800f3c6:	3901      	subs	r1, #1
 800f3c8:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f3ca:	3501      	adds	r5, #1
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	61f9      	str	r1, [r7, #28]
 800f3d0:	e7dc      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f3d2:	2180      	movs	r1, #128	; 0x80
 800f3d4:	420e      	tst	r6, r1
 800f3d6:	d02b      	beq.n	800f430 <__ssvfscanf_r+0x1190>
 800f3d8:	438e      	bics	r6, r1
 800f3da:	e7d7      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f3dc:	6a39      	ldr	r1, [r7, #32]
 800f3de:	2900      	cmp	r1, #0
 800f3e0:	d10d      	bne.n	800f3fe <__ssvfscanf_r+0x115e>
 800f3e2:	69f9      	ldr	r1, [r7, #28]
 800f3e4:	2900      	cmp	r1, #0
 800f3e6:	d10e      	bne.n	800f406 <__ssvfscanf_r+0x1166>
 800f3e8:	21e0      	movs	r1, #224	; 0xe0
 800f3ea:	0030      	movs	r0, r6
 800f3ec:	00c9      	lsls	r1, r1, #3
 800f3ee:	4008      	ands	r0, r1
 800f3f0:	4288      	cmp	r0, r1
 800f3f2:	d108      	bne.n	800f406 <__ssvfscanf_r+0x1166>
 800f3f4:	4931      	ldr	r1, [pc, #196]	; (800f4bc <__ssvfscanf_r+0x121c>)
 800f3f6:	400e      	ands	r6, r1
 800f3f8:	2101      	movs	r1, #1
 800f3fa:	6239      	str	r1, [r7, #32]
 800f3fc:	e7c6      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f3fe:	6a39      	ldr	r1, [r7, #32]
 800f400:	2902      	cmp	r1, #2
 800f402:	d100      	bne.n	800f406 <__ssvfscanf_r+0x1166>
 800f404:	e089      	b.n	800f51a <__ssvfscanf_r+0x127a>
 800f406:	2c01      	cmp	r4, #1
 800f408:	d001      	beq.n	800f40e <__ssvfscanf_r+0x116e>
 800f40a:	2c04      	cmp	r4, #4
 800f40c:	d110      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f40e:	3401      	adds	r4, #1
 800f410:	b2e4      	uxtb	r4, r4
 800f412:	e7bb      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f414:	0531      	lsls	r1, r6, #20
 800f416:	d508      	bpl.n	800f42a <__ssvfscanf_r+0x118a>
 800f418:	6a39      	ldr	r1, [r7, #32]
 800f41a:	1909      	adds	r1, r1, r4
 800f41c:	2900      	cmp	r1, #0
 800f41e:	d104      	bne.n	800f42a <__ssvfscanf_r+0x118a>
 800f420:	4824      	ldr	r0, [pc, #144]	; (800f4b4 <__ssvfscanf_r+0x1214>)
 800f422:	000c      	movs	r4, r1
 800f424:	4006      	ands	r6, r0
 800f426:	6239      	str	r1, [r7, #32]
 800f428:	e7b0      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f42a:	6a39      	ldr	r1, [r7, #32]
 800f42c:	2901      	cmp	r1, #1
 800f42e:	d076      	beq.n	800f51e <__ssvfscanf_r+0x127e>
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <__ssvfscanf_r+0x119a>
 800f436:	4b20      	ldr	r3, [pc, #128]	; (800f4b8 <__ssvfscanf_r+0x1218>)
 800f438:	401e      	ands	r6, r3
 800f43a:	6a3b      	ldr	r3, [r7, #32]
 800f43c:	3b01      	subs	r3, #1
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d877      	bhi.n	800f532 <__ssvfscanf_r+0x1292>
 800f442:	238c      	movs	r3, #140	; 0x8c
 800f444:	2248      	movs	r2, #72	; 0x48
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	189b      	adds	r3, r3, r2
 800f44a:	19db      	adds	r3, r3, r7
 800f44c:	429d      	cmp	r5, r3
 800f44e:	d801      	bhi.n	800f454 <__ssvfscanf_r+0x11b4>
 800f450:	f7ff f823 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800f454:	3d01      	subs	r5, #1
 800f456:	7829      	ldrb	r1, [r5, #0]
 800f458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f45a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f45c:	f001 fe78 	bl	8011150 <_sungetc_r>
 800f460:	e7ef      	b.n	800f442 <__ssvfscanf_r+0x11a2>
 800f462:	2c00      	cmp	r4, #0
 800f464:	d10c      	bne.n	800f480 <__ssvfscanf_r+0x11e0>
 800f466:	69f9      	ldr	r1, [r7, #28]
 800f468:	2900      	cmp	r1, #0
 800f46a:	d1e4      	bne.n	800f436 <__ssvfscanf_r+0x1196>
 800f46c:	21e0      	movs	r1, #224	; 0xe0
 800f46e:	0030      	movs	r0, r6
 800f470:	00c9      	lsls	r1, r1, #3
 800f472:	4008      	ands	r0, r1
 800f474:	4288      	cmp	r0, r1
 800f476:	d1e0      	bne.n	800f43a <__ssvfscanf_r+0x119a>
 800f478:	4910      	ldr	r1, [pc, #64]	; (800f4bc <__ssvfscanf_r+0x121c>)
 800f47a:	3401      	adds	r4, #1
 800f47c:	400e      	ands	r6, r1
 800f47e:	e785      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f480:	20fd      	movs	r0, #253	; 0xfd
 800f482:	1ee1      	subs	r1, r4, #3
 800f484:	4201      	tst	r1, r0
 800f486:	d1d3      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f488:	e7c1      	b.n	800f40e <__ssvfscanf_r+0x116e>
 800f48a:	0531      	lsls	r1, r6, #20
 800f48c:	d503      	bpl.n	800f496 <__ssvfscanf_r+0x11f6>
 800f48e:	6a39      	ldr	r1, [r7, #32]
 800f490:	1909      	adds	r1, r1, r4
 800f492:	2900      	cmp	r1, #0
 800f494:	d0c4      	beq.n	800f420 <__ssvfscanf_r+0x1180>
 800f496:	2c02      	cmp	r4, #2
 800f498:	d1ca      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f49a:	2403      	movs	r4, #3
 800f49c:	e776      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f49e:	2c06      	cmp	r4, #6
 800f4a0:	d1c6      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f4a2:	2407      	movs	r4, #7
 800f4a4:	e772      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f4a6:	2c07      	cmp	r4, #7
 800f4a8:	d1c2      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f4aa:	2408      	movs	r4, #8
 800f4ac:	e76e      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f4ae:	46c0      	nop			; (mov r8, r8)
 800f4b0:	08010cf9 	.word	0x08010cf9
 800f4b4:	fffffe7f 	.word	0xfffffe7f
 800f4b8:	fffffeff 	.word	0xfffffeff
 800f4bc:	fffff87f 	.word	0xfffff87f
 800f4c0:	0531      	lsls	r1, r6, #20
 800f4c2:	d5b5      	bpl.n	800f430 <__ssvfscanf_r+0x1190>
 800f4c4:	21a0      	movs	r1, #160	; 0xa0
 800f4c6:	2080      	movs	r0, #128	; 0x80
 800f4c8:	00c9      	lsls	r1, r1, #3
 800f4ca:	00c0      	lsls	r0, r0, #3
 800f4cc:	4031      	ands	r1, r6
 800f4ce:	4281      	cmp	r1, r0
 800f4d0:	d004      	beq.n	800f4dc <__ssvfscanf_r+0x123c>
 800f4d2:	4206      	tst	r6, r0
 800f4d4:	d0ac      	beq.n	800f430 <__ssvfscanf_r+0x1190>
 800f4d6:	69f9      	ldr	r1, [r7, #28]
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	d0ae      	beq.n	800f43a <__ssvfscanf_r+0x119a>
 800f4dc:	2180      	movs	r1, #128	; 0x80
 800f4de:	0089      	lsls	r1, r1, #2
 800f4e0:	420e      	tst	r6, r1
 800f4e2:	d104      	bne.n	800f4ee <__ssvfscanf_r+0x124e>
 800f4e4:	69f9      	ldr	r1, [r7, #28]
 800f4e6:	6938      	ldr	r0, [r7, #16]
 800f4e8:	607d      	str	r5, [r7, #4]
 800f4ea:	1a09      	subs	r1, r1, r0
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	20c0      	movs	r0, #192	; 0xc0
 800f4f0:	4973      	ldr	r1, [pc, #460]	; (800f6c0 <__ssvfscanf_r+0x1420>)
 800f4f2:	0040      	lsls	r0, r0, #1
 800f4f4:	400e      	ands	r6, r1
 800f4f6:	4306      	orrs	r6, r0
 800f4f8:	e768      	b.n	800f3cc <__ssvfscanf_r+0x112c>
 800f4fa:	0531      	lsls	r1, r6, #20
 800f4fc:	d5e2      	bpl.n	800f4c4 <__ssvfscanf_r+0x1224>
 800f4fe:	e74a      	b.n	800f396 <__ssvfscanf_r+0x10f6>
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	7809      	ldrb	r1, [r1, #0]
 800f504:	4291      	cmp	r1, r2
 800f506:	d193      	bne.n	800f430 <__ssvfscanf_r+0x1190>
 800f508:	2180      	movs	r1, #128	; 0x80
 800f50a:	0089      	lsls	r1, r1, #2
 800f50c:	420e      	tst	r6, r1
 800f50e:	d08f      	beq.n	800f430 <__ssvfscanf_r+0x1190>
 800f510:	496c      	ldr	r1, [pc, #432]	; (800f6c4 <__ssvfscanf_r+0x1424>)
 800f512:	400e      	ands	r6, r1
 800f514:	69f9      	ldr	r1, [r7, #28]
 800f516:	6139      	str	r1, [r7, #16]
 800f518:	e738      	b.n	800f38c <__ssvfscanf_r+0x10ec>
 800f51a:	2103      	movs	r1, #3
 800f51c:	e76d      	b.n	800f3fa <__ssvfscanf_r+0x115a>
 800f51e:	2102      	movs	r1, #2
 800f520:	e76b      	b.n	800f3fa <__ssvfscanf_r+0x115a>
 800f522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f524:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f526:	f001 fe4f 	bl	80111c8 <__ssrefill_r>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	d100      	bne.n	800f530 <__ssvfscanf_r+0x1290>
 800f52e:	e723      	b.n	800f378 <__ssvfscanf_r+0x10d8>
 800f530:	e77e      	b.n	800f430 <__ssvfscanf_r+0x1190>
 800f532:	1e63      	subs	r3, r4, #1
 800f534:	2b06      	cmp	r3, #6
 800f536:	d825      	bhi.n	800f584 <__ssvfscanf_r+0x12e4>
 800f538:	2c02      	cmp	r4, #2
 800f53a:	d837      	bhi.n	800f5ac <__ssvfscanf_r+0x130c>
 800f53c:	238c      	movs	r3, #140	; 0x8c
 800f53e:	2248      	movs	r2, #72	; 0x48
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	189b      	adds	r3, r3, r2
 800f544:	19db      	adds	r3, r3, r7
 800f546:	429d      	cmp	r5, r3
 800f548:	d801      	bhi.n	800f54e <__ssvfscanf_r+0x12ae>
 800f54a:	f7fe ffa6 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800f54e:	3d01      	subs	r5, #1
 800f550:	7829      	ldrb	r1, [r5, #0]
 800f552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f554:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f556:	f001 fdfb 	bl	8011150 <_sungetc_r>
 800f55a:	e7ef      	b.n	800f53c <__ssvfscanf_r+0x129c>
 800f55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f55e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f560:	3b01      	subs	r3, #1
 800f562:	7819      	ldrb	r1, [r3, #0]
 800f564:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f568:	f001 fdf2 	bl	8011150 <_sungetc_r>
 800f56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f56e:	6a3a      	ldr	r2, [r7, #32]
 800f570:	189b      	adds	r3, r3, r2
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b03      	cmp	r3, #3
 800f576:	d8f1      	bhi.n	800f55c <__ssvfscanf_r+0x12bc>
 800f578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57a:	3c03      	subs	r4, #3
 800f57c:	b2e4      	uxtb	r4, r4
 800f57e:	1b1b      	subs	r3, r3, r4
 800f580:	1b2d      	subs	r5, r5, r4
 800f582:	63bb      	str	r3, [r7, #56]	; 0x38
 800f584:	05f3      	lsls	r3, r6, #23
 800f586:	d52f      	bpl.n	800f5e8 <__ssvfscanf_r+0x1348>
 800f588:	0573      	lsls	r3, r6, #21
 800f58a:	d514      	bpl.n	800f5b6 <__ssvfscanf_r+0x1316>
 800f58c:	238c      	movs	r3, #140	; 0x8c
 800f58e:	2248      	movs	r2, #72	; 0x48
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	189b      	adds	r3, r3, r2
 800f594:	19db      	adds	r3, r3, r7
 800f596:	429d      	cmp	r5, r3
 800f598:	d801      	bhi.n	800f59e <__ssvfscanf_r+0x12fe>
 800f59a:	f7fe ff7e 	bl	800e49a <__ssvfscanf_r+0x1fa>
 800f59e:	3d01      	subs	r5, #1
 800f5a0:	7829      	ldrb	r1, [r5, #0]
 800f5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5a6:	f001 fdd3 	bl	8011150 <_sungetc_r>
 800f5aa:	e7ef      	b.n	800f58c <__ssvfscanf_r+0x12ec>
 800f5ac:	1b63      	subs	r3, r4, r5
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f5b2:	623b      	str	r3, [r7, #32]
 800f5b4:	e7da      	b.n	800f56c <__ssvfscanf_r+0x12cc>
 800f5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b8:	1e6c      	subs	r4, r5, #1
 800f5ba:	7821      	ldrb	r1, [r4, #0]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5c0:	2965      	cmp	r1, #101	; 0x65
 800f5c2:	d00a      	beq.n	800f5da <__ssvfscanf_r+0x133a>
 800f5c4:	2945      	cmp	r1, #69	; 0x45
 800f5c6:	d008      	beq.n	800f5da <__ssvfscanf_r+0x133a>
 800f5c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5cc:	f001 fdc0 	bl	8011150 <_sungetc_r>
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	1eac      	subs	r4, r5, #2
 800f5d4:	3b02      	subs	r3, #2
 800f5d6:	7821      	ldrb	r1, [r4, #0]
 800f5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5da:	0025      	movs	r5, r4
 800f5dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5e0:	f001 fdb6 	bl	8011150 <_sungetc_r>
 800f5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	0032      	movs	r2, r6
 800f5ec:	401a      	ands	r2, r3
 800f5ee:	421e      	tst	r6, r3
 800f5f0:	d001      	beq.n	800f5f6 <__ssvfscanf_r+0x1356>
 800f5f2:	f7fe fe71 	bl	800e2d8 <__ssvfscanf_r+0x38>
 800f5f6:	23c0      	movs	r3, #192	; 0xc0
 800f5f8:	2180      	movs	r1, #128	; 0x80
 800f5fa:	00db      	lsls	r3, r3, #3
 800f5fc:	702a      	strb	r2, [r5, #0]
 800f5fe:	4033      	ands	r3, r6
 800f600:	00c9      	lsls	r1, r1, #3
 800f602:	428b      	cmp	r3, r1
 800f604:	d11f      	bne.n	800f646 <__ssvfscanf_r+0x13a6>
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	69fa      	ldr	r2, [r7, #28]
 800f60a:	69f9      	ldr	r1, [r7, #28]
 800f60c:	1a9a      	subs	r2, r3, r2
 800f60e:	428b      	cmp	r3, r1
 800f610:	d125      	bne.n	800f65e <__ssvfscanf_r+0x13be>
 800f612:	238c      	movs	r3, #140	; 0x8c
 800f614:	2148      	movs	r1, #72	; 0x48
 800f616:	005b      	lsls	r3, r3, #1
 800f618:	185b      	adds	r3, r3, r1
 800f61a:	19d9      	adds	r1, r3, r7
 800f61c:	2200      	movs	r2, #0
 800f61e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f620:	f7fb ffca 	bl	800b5b8 <_strtod_r>
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	0004      	movs	r4, r0
 800f628:	3304      	adds	r3, #4
 800f62a:	000d      	movs	r5, r1
 800f62c:	623b      	str	r3, [r7, #32]
 800f62e:	07f3      	lsls	r3, r6, #31
 800f630:	d523      	bpl.n	800f67a <__ssvfscanf_r+0x13da>
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	601c      	str	r4, [r3, #0]
 800f638:	605d      	str	r5, [r3, #4]
 800f63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63c:	3301      	adds	r3, #1
 800f63e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	f7fe ffa5 	bl	800e590 <__ssvfscanf_r+0x2f0>
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d0e2      	beq.n	800f612 <__ssvfscanf_r+0x1372>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f650:	1c59      	adds	r1, r3, #1
 800f652:	230a      	movs	r3, #10
 800f654:	f7fc f84c 	bl	800b6f0 <_strtol_r>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	687d      	ldr	r5, [r7, #4]
 800f65c:	1ac2      	subs	r2, r0, r3
 800f65e:	2148      	movs	r1, #72	; 0x48
 800f660:	4b19      	ldr	r3, [pc, #100]	; (800f6c8 <__ssvfscanf_r+0x1428>)
 800f662:	185b      	adds	r3, r3, r1
 800f664:	19db      	adds	r3, r3, r7
 800f666:	429d      	cmp	r5, r3
 800f668:	d302      	bcc.n	800f670 <__ssvfscanf_r+0x13d0>
 800f66a:	4b18      	ldr	r3, [pc, #96]	; (800f6cc <__ssvfscanf_r+0x142c>)
 800f66c:	185b      	adds	r3, r3, r1
 800f66e:	19dd      	adds	r5, r3, r7
 800f670:	0028      	movs	r0, r5
 800f672:	4917      	ldr	r1, [pc, #92]	; (800f6d0 <__ssvfscanf_r+0x1430>)
 800f674:	f7fc f944 	bl	800b900 <sprintf>
 800f678:	e7cb      	b.n	800f612 <__ssvfscanf_r+0x1372>
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f680:	07b6      	lsls	r6, r6, #30
 800f682:	d4d8      	bmi.n	800f636 <__ssvfscanf_r+0x1396>
 800f684:	0002      	movs	r2, r0
 800f686:	000b      	movs	r3, r1
 800f688:	f7f2 fe34 	bl	80022f4 <__aeabi_dcmpun>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d005      	beq.n	800f69c <__ssvfscanf_r+0x13fc>
 800f690:	4810      	ldr	r0, [pc, #64]	; (800f6d4 <__ssvfscanf_r+0x1434>)
 800f692:	f7fc fabf 	bl	800bc14 <nanf>
 800f696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f698:	6018      	str	r0, [r3, #0]
 800f69a:	e7ce      	b.n	800f63a <__ssvfscanf_r+0x139a>
 800f69c:	0020      	movs	r0, r4
 800f69e:	0029      	movs	r1, r5
 800f6a0:	f7f2 fed2 	bl	8002448 <__aeabi_d2f>
 800f6a4:	e7f7      	b.n	800f696 <__ssvfscanf_r+0x13f6>
 800f6a6:	00a3      	lsls	r3, r4, #2
 800f6a8:	18ed      	adds	r5, r5, r3
 800f6aa:	682b      	ldr	r3, [r5, #0]
 800f6ac:	3401      	adds	r4, #1
 800f6ae:	6818      	ldr	r0, [r3, #0]
 800f6b0:	f7fa ff32 	bl	800a518 <free>
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	682b      	ldr	r3, [r5, #0]
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	f7fe ffc3 	bl	800e644 <__ssvfscanf_r+0x3a4>
 800f6be:	46c0      	nop			; (mov r8, r8)
 800f6c0:	fffff07f 	.word	0xfffff07f
 800f6c4:	fffffd7f 	.word	0xfffffd7f
 800f6c8:	0000026b 	.word	0x0000026b
 800f6cc:	0000026a 	.word	0x0000026a
 800f6d0:	080144d0 	.word	0x080144d0
 800f6d4:	08014533 	.word	0x08014533

0800f6d8 <_fclose_r>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	0005      	movs	r5, r0
 800f6dc:	1e0c      	subs	r4, r1, #0
 800f6de:	d102      	bne.n	800f6e6 <_fclose_r+0xe>
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	0030      	movs	r0, r6
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d004      	beq.n	800f6f4 <_fclose_r+0x1c>
 800f6ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d101      	bne.n	800f6f4 <_fclose_r+0x1c>
 800f6f0:	f7fc f89e 	bl	800b830 <__sinit>
 800f6f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6f6:	07db      	lsls	r3, r3, #31
 800f6f8:	d405      	bmi.n	800f706 <_fclose_r+0x2e>
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	059b      	lsls	r3, r3, #22
 800f6fe:	d402      	bmi.n	800f706 <_fclose_r+0x2e>
 800f700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f702:	f7fc fa6b 	bl	800bbdc <__retarget_lock_acquire_recursive>
 800f706:	220c      	movs	r2, #12
 800f708:	5ea3      	ldrsh	r3, [r4, r2]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d109      	bne.n	800f722 <_fclose_r+0x4a>
 800f70e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f710:	3301      	adds	r3, #1
 800f712:	0016      	movs	r6, r2
 800f714:	401e      	ands	r6, r3
 800f716:	421a      	tst	r2, r3
 800f718:	d1e2      	bne.n	800f6e0 <_fclose_r+0x8>
 800f71a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f71c:	f7fc fa5f 	bl	800bbde <__retarget_lock_release_recursive>
 800f720:	e7df      	b.n	800f6e2 <_fclose_r+0xa>
 800f722:	0021      	movs	r1, r4
 800f724:	0028      	movs	r0, r5
 800f726:	f000 f837 	bl	800f798 <__sflush_r>
 800f72a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f72c:	0006      	movs	r6, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d006      	beq.n	800f740 <_fclose_r+0x68>
 800f732:	0028      	movs	r0, r5
 800f734:	69e1      	ldr	r1, [r4, #28]
 800f736:	4798      	blx	r3
 800f738:	2800      	cmp	r0, #0
 800f73a:	da01      	bge.n	800f740 <_fclose_r+0x68>
 800f73c:	2601      	movs	r6, #1
 800f73e:	4276      	negs	r6, r6
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	061b      	lsls	r3, r3, #24
 800f744:	d503      	bpl.n	800f74e <_fclose_r+0x76>
 800f746:	0028      	movs	r0, r5
 800f748:	6921      	ldr	r1, [r4, #16]
 800f74a:	f7fc facf 	bl	800bcec <_free_r>
 800f74e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f750:	2900      	cmp	r1, #0
 800f752:	d008      	beq.n	800f766 <_fclose_r+0x8e>
 800f754:	0023      	movs	r3, r4
 800f756:	3340      	adds	r3, #64	; 0x40
 800f758:	4299      	cmp	r1, r3
 800f75a:	d002      	beq.n	800f762 <_fclose_r+0x8a>
 800f75c:	0028      	movs	r0, r5
 800f75e:	f7fc fac5 	bl	800bcec <_free_r>
 800f762:	2300      	movs	r3, #0
 800f764:	6323      	str	r3, [r4, #48]	; 0x30
 800f766:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f768:	2900      	cmp	r1, #0
 800f76a:	d004      	beq.n	800f776 <_fclose_r+0x9e>
 800f76c:	0028      	movs	r0, r5
 800f76e:	f7fc fabd 	bl	800bcec <_free_r>
 800f772:	2300      	movs	r3, #0
 800f774:	6463      	str	r3, [r4, #68]	; 0x44
 800f776:	f7fc f84b 	bl	800b810 <__sfp_lock_acquire>
 800f77a:	2300      	movs	r3, #0
 800f77c:	81a3      	strh	r3, [r4, #12]
 800f77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f780:	07db      	lsls	r3, r3, #31
 800f782:	d402      	bmi.n	800f78a <_fclose_r+0xb2>
 800f784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f786:	f7fc fa2a 	bl	800bbde <__retarget_lock_release_recursive>
 800f78a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f78c:	f7fc fa25 	bl	800bbda <__retarget_lock_close_recursive>
 800f790:	f7fc f846 	bl	800b820 <__sfp_lock_release>
 800f794:	e7a5      	b.n	800f6e2 <_fclose_r+0xa>
	...

0800f798 <__sflush_r>:
 800f798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f79a:	230c      	movs	r3, #12
 800f79c:	5eca      	ldrsh	r2, [r1, r3]
 800f79e:	000c      	movs	r4, r1
 800f7a0:	0005      	movs	r5, r0
 800f7a2:	b291      	uxth	r1, r2
 800f7a4:	0713      	lsls	r3, r2, #28
 800f7a6:	d464      	bmi.n	800f872 <__sflush_r+0xda>
 800f7a8:	2380      	movs	r3, #128	; 0x80
 800f7aa:	011b      	lsls	r3, r3, #4
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	6862      	ldr	r2, [r4, #4]
 800f7b0:	81a3      	strh	r3, [r4, #12]
 800f7b2:	2a00      	cmp	r2, #0
 800f7b4:	dc04      	bgt.n	800f7c0 <__sflush_r+0x28>
 800f7b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f7b8:	2a00      	cmp	r2, #0
 800f7ba:	dc01      	bgt.n	800f7c0 <__sflush_r+0x28>
 800f7bc:	2000      	movs	r0, #0
 800f7be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7c0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f7c2:	2f00      	cmp	r7, #0
 800f7c4:	d0fa      	beq.n	800f7bc <__sflush_r+0x24>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2080      	movs	r0, #128	; 0x80
 800f7ca:	682e      	ldr	r6, [r5, #0]
 800f7cc:	602a      	str	r2, [r5, #0]
 800f7ce:	001a      	movs	r2, r3
 800f7d0:	0140      	lsls	r0, r0, #5
 800f7d2:	69e1      	ldr	r1, [r4, #28]
 800f7d4:	4002      	ands	r2, r0
 800f7d6:	4203      	tst	r3, r0
 800f7d8:	d038      	beq.n	800f84c <__sflush_r+0xb4>
 800f7da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	075b      	lsls	r3, r3, #29
 800f7e0:	d506      	bpl.n	800f7f0 <__sflush_r+0x58>
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	1ac0      	subs	r0, r0, r3
 800f7e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <__sflush_r+0x58>
 800f7ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7ee:	1ac0      	subs	r0, r0, r3
 800f7f0:	0002      	movs	r2, r0
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	0028      	movs	r0, r5
 800f7f6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f7f8:	69e1      	ldr	r1, [r4, #28]
 800f7fa:	47b8      	blx	r7
 800f7fc:	89a2      	ldrh	r2, [r4, #12]
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	d106      	bne.n	800f810 <__sflush_r+0x78>
 800f802:	6829      	ldr	r1, [r5, #0]
 800f804:	291d      	cmp	r1, #29
 800f806:	d830      	bhi.n	800f86a <__sflush_r+0xd2>
 800f808:	4b2c      	ldr	r3, [pc, #176]	; (800f8bc <__sflush_r+0x124>)
 800f80a:	410b      	asrs	r3, r1
 800f80c:	07db      	lsls	r3, r3, #31
 800f80e:	d42c      	bmi.n	800f86a <__sflush_r+0xd2>
 800f810:	4b2b      	ldr	r3, [pc, #172]	; (800f8c0 <__sflush_r+0x128>)
 800f812:	4013      	ands	r3, r2
 800f814:	2200      	movs	r2, #0
 800f816:	6062      	str	r2, [r4, #4]
 800f818:	6922      	ldr	r2, [r4, #16]
 800f81a:	b21b      	sxth	r3, r3
 800f81c:	81a3      	strh	r3, [r4, #12]
 800f81e:	6022      	str	r2, [r4, #0]
 800f820:	04db      	lsls	r3, r3, #19
 800f822:	d505      	bpl.n	800f830 <__sflush_r+0x98>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <__sflush_r+0x96>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d100      	bne.n	800f830 <__sflush_r+0x98>
 800f82e:	6520      	str	r0, [r4, #80]	; 0x50
 800f830:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f832:	602e      	str	r6, [r5, #0]
 800f834:	2900      	cmp	r1, #0
 800f836:	d0c1      	beq.n	800f7bc <__sflush_r+0x24>
 800f838:	0023      	movs	r3, r4
 800f83a:	3340      	adds	r3, #64	; 0x40
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d002      	beq.n	800f846 <__sflush_r+0xae>
 800f840:	0028      	movs	r0, r5
 800f842:	f7fc fa53 	bl	800bcec <_free_r>
 800f846:	2000      	movs	r0, #0
 800f848:	6320      	str	r0, [r4, #48]	; 0x30
 800f84a:	e7b8      	b.n	800f7be <__sflush_r+0x26>
 800f84c:	2301      	movs	r3, #1
 800f84e:	0028      	movs	r0, r5
 800f850:	47b8      	blx	r7
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	d1c2      	bne.n	800f7dc <__sflush_r+0x44>
 800f856:	682b      	ldr	r3, [r5, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d0bf      	beq.n	800f7dc <__sflush_r+0x44>
 800f85c:	2b1d      	cmp	r3, #29
 800f85e:	d001      	beq.n	800f864 <__sflush_r+0xcc>
 800f860:	2b16      	cmp	r3, #22
 800f862:	d101      	bne.n	800f868 <__sflush_r+0xd0>
 800f864:	602e      	str	r6, [r5, #0]
 800f866:	e7a9      	b.n	800f7bc <__sflush_r+0x24>
 800f868:	89a2      	ldrh	r2, [r4, #12]
 800f86a:	2340      	movs	r3, #64	; 0x40
 800f86c:	4313      	orrs	r3, r2
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	e7a5      	b.n	800f7be <__sflush_r+0x26>
 800f872:	6926      	ldr	r6, [r4, #16]
 800f874:	2e00      	cmp	r6, #0
 800f876:	d0a1      	beq.n	800f7bc <__sflush_r+0x24>
 800f878:	6827      	ldr	r7, [r4, #0]
 800f87a:	6026      	str	r6, [r4, #0]
 800f87c:	1bbb      	subs	r3, r7, r6
 800f87e:	9301      	str	r3, [sp, #4]
 800f880:	2300      	movs	r3, #0
 800f882:	0789      	lsls	r1, r1, #30
 800f884:	d100      	bne.n	800f888 <__sflush_r+0xf0>
 800f886:	6963      	ldr	r3, [r4, #20]
 800f888:	60a3      	str	r3, [r4, #8]
 800f88a:	9b01      	ldr	r3, [sp, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	dc00      	bgt.n	800f892 <__sflush_r+0xfa>
 800f890:	e794      	b.n	800f7bc <__sflush_r+0x24>
 800f892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f894:	0032      	movs	r2, r6
 800f896:	001f      	movs	r7, r3
 800f898:	0028      	movs	r0, r5
 800f89a:	9b01      	ldr	r3, [sp, #4]
 800f89c:	69e1      	ldr	r1, [r4, #28]
 800f89e:	47b8      	blx	r7
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	dc06      	bgt.n	800f8b2 <__sflush_r+0x11a>
 800f8a4:	2340      	movs	r3, #64	; 0x40
 800f8a6:	2001      	movs	r0, #1
 800f8a8:	89a2      	ldrh	r2, [r4, #12]
 800f8aa:	4240      	negs	r0, r0
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	81a3      	strh	r3, [r4, #12]
 800f8b0:	e785      	b.n	800f7be <__sflush_r+0x26>
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	1836      	adds	r6, r6, r0
 800f8b6:	1a1b      	subs	r3, r3, r0
 800f8b8:	9301      	str	r3, [sp, #4]
 800f8ba:	e7e6      	b.n	800f88a <__sflush_r+0xf2>
 800f8bc:	dfbffffe 	.word	0xdfbffffe
 800f8c0:	fffff7ff 	.word	0xfffff7ff

0800f8c4 <_fflush_r>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	0005      	movs	r5, r0
 800f8c8:	000c      	movs	r4, r1
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d004      	beq.n	800f8d8 <_fflush_r+0x14>
 800f8ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <_fflush_r+0x14>
 800f8d4:	f7fb ffac 	bl	800b830 <__sinit>
 800f8d8:	220c      	movs	r2, #12
 800f8da:	5ea3      	ldrsh	r3, [r4, r2]
 800f8dc:	1e1e      	subs	r6, r3, #0
 800f8de:	d015      	beq.n	800f90c <_fflush_r+0x48>
 800f8e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8e2:	07d2      	lsls	r2, r2, #31
 800f8e4:	d404      	bmi.n	800f8f0 <_fflush_r+0x2c>
 800f8e6:	059b      	lsls	r3, r3, #22
 800f8e8:	d402      	bmi.n	800f8f0 <_fflush_r+0x2c>
 800f8ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ec:	f7fc f976 	bl	800bbdc <__retarget_lock_acquire_recursive>
 800f8f0:	0021      	movs	r1, r4
 800f8f2:	0028      	movs	r0, r5
 800f8f4:	f7ff ff50 	bl	800f798 <__sflush_r>
 800f8f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8fa:	0006      	movs	r6, r0
 800f8fc:	07db      	lsls	r3, r3, #31
 800f8fe:	d405      	bmi.n	800f90c <_fflush_r+0x48>
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	059b      	lsls	r3, r3, #22
 800f904:	d402      	bmi.n	800f90c <_fflush_r+0x48>
 800f906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f908:	f7fc f969 	bl	800bbde <__retarget_lock_release_recursive>
 800f90c:	0030      	movs	r0, r6
 800f90e:	bd70      	pop	{r4, r5, r6, pc}

0800f910 <__sccl>:
 800f910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f912:	780b      	ldrb	r3, [r1, #0]
 800f914:	0004      	movs	r4, r0
 800f916:	2b5e      	cmp	r3, #94	; 0x5e
 800f918:	d019      	beq.n	800f94e <__sccl+0x3e>
 800f91a:	2200      	movs	r2, #0
 800f91c:	1c4d      	adds	r5, r1, #1
 800f91e:	0021      	movs	r1, r4
 800f920:	1c60      	adds	r0, r4, #1
 800f922:	30ff      	adds	r0, #255	; 0xff
 800f924:	700a      	strb	r2, [r1, #0]
 800f926:	3101      	adds	r1, #1
 800f928:	4281      	cmp	r1, r0
 800f92a:	d1fb      	bne.n	800f924 <__sccl+0x14>
 800f92c:	1e68      	subs	r0, r5, #1
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00c      	beq.n	800f94c <__sccl+0x3c>
 800f932:	2101      	movs	r1, #1
 800f934:	262d      	movs	r6, #45	; 0x2d
 800f936:	404a      	eors	r2, r1
 800f938:	0028      	movs	r0, r5
 800f93a:	54e2      	strb	r2, [r4, r3]
 800f93c:	7801      	ldrb	r1, [r0, #0]
 800f93e:	1c45      	adds	r5, r0, #1
 800f940:	292d      	cmp	r1, #45	; 0x2d
 800f942:	d00c      	beq.n	800f95e <__sccl+0x4e>
 800f944:	295d      	cmp	r1, #93	; 0x5d
 800f946:	d01d      	beq.n	800f984 <__sccl+0x74>
 800f948:	2900      	cmp	r1, #0
 800f94a:	d104      	bne.n	800f956 <__sccl+0x46>
 800f94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f94e:	2201      	movs	r2, #1
 800f950:	784b      	ldrb	r3, [r1, #1]
 800f952:	1c8d      	adds	r5, r1, #2
 800f954:	e7e3      	b.n	800f91e <__sccl+0xe>
 800f956:	000b      	movs	r3, r1
 800f958:	e7ee      	b.n	800f938 <__sccl+0x28>
 800f95a:	0033      	movs	r3, r6
 800f95c:	e7ec      	b.n	800f938 <__sccl+0x28>
 800f95e:	7841      	ldrb	r1, [r0, #1]
 800f960:	295d      	cmp	r1, #93	; 0x5d
 800f962:	d0fa      	beq.n	800f95a <__sccl+0x4a>
 800f964:	428b      	cmp	r3, r1
 800f966:	dcf8      	bgt.n	800f95a <__sccl+0x4a>
 800f968:	001d      	movs	r5, r3
 800f96a:	3002      	adds	r0, #2
 800f96c:	3501      	adds	r5, #1
 800f96e:	5562      	strb	r2, [r4, r5]
 800f970:	42a9      	cmp	r1, r5
 800f972:	dcfb      	bgt.n	800f96c <__sccl+0x5c>
 800f974:	2500      	movs	r5, #0
 800f976:	1c5f      	adds	r7, r3, #1
 800f978:	428b      	cmp	r3, r1
 800f97a:	da01      	bge.n	800f980 <__sccl+0x70>
 800f97c:	1acd      	subs	r5, r1, r3
 800f97e:	3d01      	subs	r5, #1
 800f980:	197b      	adds	r3, r7, r5
 800f982:	e7db      	b.n	800f93c <__sccl+0x2c>
 800f984:	0028      	movs	r0, r5
 800f986:	e7e1      	b.n	800f94c <__sccl+0x3c>

0800f988 <_localeconv_r>:
 800f988:	4800      	ldr	r0, [pc, #0]	; (800f98c <_localeconv_r+0x4>)
 800f98a:	4770      	bx	lr
 800f98c:	20000534 	.word	0x20000534

0800f990 <__libc_fini_array>:
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	4c07      	ldr	r4, [pc, #28]	; (800f9b0 <__libc_fini_array+0x20>)
 800f994:	4d07      	ldr	r5, [pc, #28]	; (800f9b4 <__libc_fini_array+0x24>)
 800f996:	1b64      	subs	r4, r4, r5
 800f998:	10a4      	asrs	r4, r4, #2
 800f99a:	2c00      	cmp	r4, #0
 800f99c:	d102      	bne.n	800f9a4 <__libc_fini_array+0x14>
 800f99e:	f002 fdcd 	bl	801253c <_fini>
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}
 800f9a4:	3c01      	subs	r4, #1
 800f9a6:	00a3      	lsls	r3, r4, #2
 800f9a8:	58eb      	ldr	r3, [r5, r3]
 800f9aa:	4798      	blx	r3
 800f9ac:	e7f5      	b.n	800f99a <__libc_fini_array+0xa>
 800f9ae:	46c0      	nop			; (mov r8, r8)
 800f9b0:	080145d0 	.word	0x080145d0
 800f9b4:	080145cc 	.word	0x080145cc

0800f9b8 <memchr>:
 800f9b8:	b2c9      	uxtb	r1, r1
 800f9ba:	1882      	adds	r2, r0, r2
 800f9bc:	4290      	cmp	r0, r2
 800f9be:	d101      	bne.n	800f9c4 <memchr+0xc>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	4770      	bx	lr
 800f9c4:	7803      	ldrb	r3, [r0, #0]
 800f9c6:	428b      	cmp	r3, r1
 800f9c8:	d0fb      	beq.n	800f9c2 <memchr+0xa>
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	e7f6      	b.n	800f9bc <memchr+0x4>
	...

0800f9d0 <frexp>:
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	0014      	movs	r4, r2
 800f9d4:	2500      	movs	r5, #0
 800f9d6:	6025      	str	r5, [r4, #0]
 800f9d8:	4d10      	ldr	r5, [pc, #64]	; (800fa1c <frexp+0x4c>)
 800f9da:	004b      	lsls	r3, r1, #1
 800f9dc:	000a      	movs	r2, r1
 800f9de:	085b      	lsrs	r3, r3, #1
 800f9e0:	42ab      	cmp	r3, r5
 800f9e2:	dc1a      	bgt.n	800fa1a <frexp+0x4a>
 800f9e4:	001d      	movs	r5, r3
 800f9e6:	4305      	orrs	r5, r0
 800f9e8:	d017      	beq.n	800fa1a <frexp+0x4a>
 800f9ea:	4d0d      	ldr	r5, [pc, #52]	; (800fa20 <frexp+0x50>)
 800f9ec:	4229      	tst	r1, r5
 800f9ee:	d109      	bne.n	800fa04 <frexp+0x34>
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <frexp+0x54>)
 800f9f4:	f7f1 fe3a 	bl	800166c <__aeabi_dmul>
 800f9f8:	2536      	movs	r5, #54	; 0x36
 800f9fa:	000a      	movs	r2, r1
 800f9fc:	004b      	lsls	r3, r1, #1
 800f9fe:	426d      	negs	r5, r5
 800fa00:	085b      	lsrs	r3, r3, #1
 800fa02:	6025      	str	r5, [r4, #0]
 800fa04:	4d08      	ldr	r5, [pc, #32]	; (800fa28 <frexp+0x58>)
 800fa06:	151b      	asrs	r3, r3, #20
 800fa08:	195b      	adds	r3, r3, r5
 800fa0a:	6825      	ldr	r5, [r4, #0]
 800fa0c:	18eb      	adds	r3, r5, r3
 800fa0e:	6023      	str	r3, [r4, #0]
 800fa10:	4b06      	ldr	r3, [pc, #24]	; (800fa2c <frexp+0x5c>)
 800fa12:	401a      	ands	r2, r3
 800fa14:	4b06      	ldr	r3, [pc, #24]	; (800fa30 <frexp+0x60>)
 800fa16:	4313      	orrs	r3, r2
 800fa18:	0019      	movs	r1, r3
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	7fefffff 	.word	0x7fefffff
 800fa20:	7ff00000 	.word	0x7ff00000
 800fa24:	43500000 	.word	0x43500000
 800fa28:	fffffc02 	.word	0xfffffc02
 800fa2c:	800fffff 	.word	0x800fffff
 800fa30:	3fe00000 	.word	0x3fe00000

0800fa34 <__register_exitproc>:
 800fa34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa36:	4f1c      	ldr	r7, [pc, #112]	; (800faa8 <__register_exitproc+0x74>)
 800fa38:	0004      	movs	r4, r0
 800fa3a:	6838      	ldr	r0, [r7, #0]
 800fa3c:	0016      	movs	r6, r2
 800fa3e:	9301      	str	r3, [sp, #4]
 800fa40:	9100      	str	r1, [sp, #0]
 800fa42:	f7fc f8cb 	bl	800bbdc <__retarget_lock_acquire_recursive>
 800fa46:	4a19      	ldr	r2, [pc, #100]	; (800faac <__register_exitproc+0x78>)
 800fa48:	6813      	ldr	r3, [r2, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d101      	bne.n	800fa52 <__register_exitproc+0x1e>
 800fa4e:	4b18      	ldr	r3, [pc, #96]	; (800fab0 <__register_exitproc+0x7c>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	685a      	ldr	r2, [r3, #4]
 800fa54:	6838      	ldr	r0, [r7, #0]
 800fa56:	2a1f      	cmp	r2, #31
 800fa58:	dd04      	ble.n	800fa64 <__register_exitproc+0x30>
 800fa5a:	f7fc f8c0 	bl	800bbde <__retarget_lock_release_recursive>
 800fa5e:	2001      	movs	r0, #1
 800fa60:	4240      	negs	r0, r0
 800fa62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa64:	2c00      	cmp	r4, #0
 800fa66:	d014      	beq.n	800fa92 <__register_exitproc+0x5e>
 800fa68:	0091      	lsls	r1, r2, #2
 800fa6a:	1859      	adds	r1, r3, r1
 800fa6c:	000f      	movs	r7, r1
 800fa6e:	3788      	adds	r7, #136	; 0x88
 800fa70:	603e      	str	r6, [r7, #0]
 800fa72:	2701      	movs	r7, #1
 800fa74:	001e      	movs	r6, r3
 800fa76:	4097      	lsls	r7, r2
 800fa78:	3685      	adds	r6, #133	; 0x85
 800fa7a:	36ff      	adds	r6, #255	; 0xff
 800fa7c:	6875      	ldr	r5, [r6, #4]
 800fa7e:	31fc      	adds	r1, #252	; 0xfc
 800fa80:	433d      	orrs	r5, r7
 800fa82:	6075      	str	r5, [r6, #4]
 800fa84:	9d01      	ldr	r5, [sp, #4]
 800fa86:	60cd      	str	r5, [r1, #12]
 800fa88:	2c02      	cmp	r4, #2
 800fa8a:	d102      	bne.n	800fa92 <__register_exitproc+0x5e>
 800fa8c:	68b1      	ldr	r1, [r6, #8]
 800fa8e:	4339      	orrs	r1, r7
 800fa90:	60b1      	str	r1, [r6, #8]
 800fa92:	1c51      	adds	r1, r2, #1
 800fa94:	6059      	str	r1, [r3, #4]
 800fa96:	3202      	adds	r2, #2
 800fa98:	9900      	ldr	r1, [sp, #0]
 800fa9a:	0092      	lsls	r2, r2, #2
 800fa9c:	50d1      	str	r1, [r2, r3]
 800fa9e:	f7fc f89e 	bl	800bbde <__retarget_lock_release_recursive>
 800faa2:	2000      	movs	r0, #0
 800faa4:	e7dd      	b.n	800fa62 <__register_exitproc+0x2e>
 800faa6:	46c0      	nop			; (mov r8, r8)
 800faa8:	200006d4 	.word	0x200006d4
 800faac:	20000d7c 	.word	0x20000d7c
 800fab0:	20000d80 	.word	0x20000d80

0800fab4 <__assert_func>:
 800fab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fab6:	0014      	movs	r4, r2
 800fab8:	001a      	movs	r2, r3
 800faba:	4b09      	ldr	r3, [pc, #36]	; (800fae0 <__assert_func+0x2c>)
 800fabc:	0005      	movs	r5, r0
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	000e      	movs	r6, r1
 800fac2:	68d8      	ldr	r0, [r3, #12]
 800fac4:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <__assert_func+0x30>)
 800fac6:	2c00      	cmp	r4, #0
 800fac8:	d101      	bne.n	800face <__assert_func+0x1a>
 800faca:	4b07      	ldr	r3, [pc, #28]	; (800fae8 <__assert_func+0x34>)
 800facc:	001c      	movs	r4, r3
 800face:	4907      	ldr	r1, [pc, #28]	; (800faec <__assert_func+0x38>)
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	9402      	str	r4, [sp, #8]
 800fad4:	002b      	movs	r3, r5
 800fad6:	9600      	str	r6, [sp, #0]
 800fad8:	f001 faa6 	bl	8011028 <fiprintf>
 800fadc:	f002 fb8e 	bl	80121fc <abort>
 800fae0:	200006d0 	.word	0x200006d0
 800fae4:	080144f8 	.word	0x080144f8
 800fae8:	08014533 	.word	0x08014533
 800faec:	08014505 	.word	0x08014505

0800faf0 <_calloc_r>:
 800faf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf2:	2400      	movs	r4, #0
 800faf4:	0c0b      	lsrs	r3, r1, #16
 800faf6:	0c16      	lsrs	r6, r2, #16
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	d133      	bne.n	800fb64 <_calloc_r+0x74>
 800fafc:	42a6      	cmp	r6, r4
 800fafe:	d121      	bne.n	800fb44 <_calloc_r+0x54>
 800fb00:	b28b      	uxth	r3, r1
 800fb02:	b291      	uxth	r1, r2
 800fb04:	4359      	muls	r1, r3
 800fb06:	f7fa fd11 	bl	800a52c <_malloc_r>
 800fb0a:	1e05      	subs	r5, r0, #0
 800fb0c:	d033      	beq.n	800fb76 <_calloc_r+0x86>
 800fb0e:	0003      	movs	r3, r0
 800fb10:	3b08      	subs	r3, #8
 800fb12:	685a      	ldr	r2, [r3, #4]
 800fb14:	2303      	movs	r3, #3
 800fb16:	439a      	bics	r2, r3
 800fb18:	3a04      	subs	r2, #4
 800fb1a:	2a24      	cmp	r2, #36	; 0x24
 800fb1c:	d832      	bhi.n	800fb84 <_calloc_r+0x94>
 800fb1e:	0003      	movs	r3, r0
 800fb20:	2a13      	cmp	r2, #19
 800fb22:	d90a      	bls.n	800fb3a <_calloc_r+0x4a>
 800fb24:	6004      	str	r4, [r0, #0]
 800fb26:	6044      	str	r4, [r0, #4]
 800fb28:	3308      	adds	r3, #8
 800fb2a:	2a1b      	cmp	r2, #27
 800fb2c:	d905      	bls.n	800fb3a <_calloc_r+0x4a>
 800fb2e:	6084      	str	r4, [r0, #8]
 800fb30:	60c4      	str	r4, [r0, #12]
 800fb32:	2a24      	cmp	r2, #36	; 0x24
 800fb34:	d021      	beq.n	800fb7a <_calloc_r+0x8a>
 800fb36:	0003      	movs	r3, r0
 800fb38:	3310      	adds	r3, #16
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	605a      	str	r2, [r3, #4]
 800fb40:	609a      	str	r2, [r3, #8]
 800fb42:	e018      	b.n	800fb76 <_calloc_r+0x86>
 800fb44:	1c33      	adds	r3, r6, #0
 800fb46:	1c0d      	adds	r5, r1, #0
 800fb48:	b289      	uxth	r1, r1
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	434a      	muls	r2, r1
 800fb4e:	b2ad      	uxth	r5, r5
 800fb50:	b299      	uxth	r1, r3
 800fb52:	4369      	muls	r1, r5
 800fb54:	0c13      	lsrs	r3, r2, #16
 800fb56:	18c9      	adds	r1, r1, r3
 800fb58:	0c0b      	lsrs	r3, r1, #16
 800fb5a:	d107      	bne.n	800fb6c <_calloc_r+0x7c>
 800fb5c:	0409      	lsls	r1, r1, #16
 800fb5e:	b292      	uxth	r2, r2
 800fb60:	4311      	orrs	r1, r2
 800fb62:	e7d0      	b.n	800fb06 <_calloc_r+0x16>
 800fb64:	2e00      	cmp	r6, #0
 800fb66:	d101      	bne.n	800fb6c <_calloc_r+0x7c>
 800fb68:	1c15      	adds	r5, r2, #0
 800fb6a:	e7ed      	b.n	800fb48 <_calloc_r+0x58>
 800fb6c:	f7fc f80a 	bl	800bb84 <__errno>
 800fb70:	230c      	movs	r3, #12
 800fb72:	2500      	movs	r5, #0
 800fb74:	6003      	str	r3, [r0, #0]
 800fb76:	0028      	movs	r0, r5
 800fb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb7a:	0003      	movs	r3, r0
 800fb7c:	6104      	str	r4, [r0, #16]
 800fb7e:	3318      	adds	r3, #24
 800fb80:	6144      	str	r4, [r0, #20]
 800fb82:	e7da      	b.n	800fb3a <_calloc_r+0x4a>
 800fb84:	2100      	movs	r1, #0
 800fb86:	f7fb ff51 	bl	800ba2c <memset>
 800fb8a:	e7f4      	b.n	800fb76 <_calloc_r+0x86>

0800fb8c <quorem>:
 800fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8e:	6902      	ldr	r2, [r0, #16]
 800fb90:	690b      	ldr	r3, [r1, #16]
 800fb92:	b089      	sub	sp, #36	; 0x24
 800fb94:	0007      	movs	r7, r0
 800fb96:	9104      	str	r1, [sp, #16]
 800fb98:	2000      	movs	r0, #0
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	db69      	blt.n	800fc72 <quorem+0xe6>
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	009c      	lsls	r4, r3, #2
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	000b      	movs	r3, r1
 800fba6:	3314      	adds	r3, #20
 800fba8:	9306      	str	r3, [sp, #24]
 800fbaa:	191b      	adds	r3, r3, r4
 800fbac:	9305      	str	r3, [sp, #20]
 800fbae:	003b      	movs	r3, r7
 800fbb0:	3314      	adds	r3, #20
 800fbb2:	9303      	str	r3, [sp, #12]
 800fbb4:	191c      	adds	r4, r3, r4
 800fbb6:	9b05      	ldr	r3, [sp, #20]
 800fbb8:	6826      	ldr	r6, [r4, #0]
 800fbba:	681d      	ldr	r5, [r3, #0]
 800fbbc:	0030      	movs	r0, r6
 800fbbe:	3501      	adds	r5, #1
 800fbc0:	0029      	movs	r1, r5
 800fbc2:	f7f0 fabb 	bl	800013c <__udivsi3>
 800fbc6:	9002      	str	r0, [sp, #8]
 800fbc8:	42ae      	cmp	r6, r5
 800fbca:	d329      	bcc.n	800fc20 <quorem+0x94>
 800fbcc:	9b06      	ldr	r3, [sp, #24]
 800fbce:	2600      	movs	r6, #0
 800fbd0:	469c      	mov	ip, r3
 800fbd2:	9d03      	ldr	r5, [sp, #12]
 800fbd4:	9606      	str	r6, [sp, #24]
 800fbd6:	4662      	mov	r2, ip
 800fbd8:	ca08      	ldmia	r2!, {r3}
 800fbda:	6828      	ldr	r0, [r5, #0]
 800fbdc:	4694      	mov	ip, r2
 800fbde:	9a02      	ldr	r2, [sp, #8]
 800fbe0:	b299      	uxth	r1, r3
 800fbe2:	4351      	muls	r1, r2
 800fbe4:	0c1b      	lsrs	r3, r3, #16
 800fbe6:	4353      	muls	r3, r2
 800fbe8:	1989      	adds	r1, r1, r6
 800fbea:	0c0a      	lsrs	r2, r1, #16
 800fbec:	189b      	adds	r3, r3, r2
 800fbee:	9307      	str	r3, [sp, #28]
 800fbf0:	0c1e      	lsrs	r6, r3, #16
 800fbf2:	9b06      	ldr	r3, [sp, #24]
 800fbf4:	b282      	uxth	r2, r0
 800fbf6:	18d2      	adds	r2, r2, r3
 800fbf8:	466b      	mov	r3, sp
 800fbfa:	b289      	uxth	r1, r1
 800fbfc:	8b9b      	ldrh	r3, [r3, #28]
 800fbfe:	1a52      	subs	r2, r2, r1
 800fc00:	0c01      	lsrs	r1, r0, #16
 800fc02:	1ac9      	subs	r1, r1, r3
 800fc04:	1413      	asrs	r3, r2, #16
 800fc06:	18cb      	adds	r3, r1, r3
 800fc08:	1419      	asrs	r1, r3, #16
 800fc0a:	b292      	uxth	r2, r2
 800fc0c:	041b      	lsls	r3, r3, #16
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	c508      	stmia	r5!, {r3}
 800fc12:	9b05      	ldr	r3, [sp, #20]
 800fc14:	9106      	str	r1, [sp, #24]
 800fc16:	4563      	cmp	r3, ip
 800fc18:	d2dd      	bcs.n	800fbd6 <quorem+0x4a>
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d030      	beq.n	800fc82 <quorem+0xf6>
 800fc20:	0038      	movs	r0, r7
 800fc22:	9904      	ldr	r1, [sp, #16]
 800fc24:	f7fc ff04 	bl	800ca30 <__mcmp>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	db21      	blt.n	800fc70 <quorem+0xe4>
 800fc2c:	0038      	movs	r0, r7
 800fc2e:	2600      	movs	r6, #0
 800fc30:	9b02      	ldr	r3, [sp, #8]
 800fc32:	9c04      	ldr	r4, [sp, #16]
 800fc34:	3301      	adds	r3, #1
 800fc36:	9302      	str	r3, [sp, #8]
 800fc38:	3014      	adds	r0, #20
 800fc3a:	3414      	adds	r4, #20
 800fc3c:	6803      	ldr	r3, [r0, #0]
 800fc3e:	cc02      	ldmia	r4!, {r1}
 800fc40:	b29d      	uxth	r5, r3
 800fc42:	19ad      	adds	r5, r5, r6
 800fc44:	b28a      	uxth	r2, r1
 800fc46:	1aaa      	subs	r2, r5, r2
 800fc48:	0c09      	lsrs	r1, r1, #16
 800fc4a:	0c1b      	lsrs	r3, r3, #16
 800fc4c:	1a5b      	subs	r3, r3, r1
 800fc4e:	1411      	asrs	r1, r2, #16
 800fc50:	185b      	adds	r3, r3, r1
 800fc52:	141e      	asrs	r6, r3, #16
 800fc54:	b292      	uxth	r2, r2
 800fc56:	041b      	lsls	r3, r3, #16
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	c008      	stmia	r0!, {r3}
 800fc5c:	9b05      	ldr	r3, [sp, #20]
 800fc5e:	42a3      	cmp	r3, r4
 800fc60:	d2ec      	bcs.n	800fc3c <quorem+0xb0>
 800fc62:	9b01      	ldr	r3, [sp, #4]
 800fc64:	9a03      	ldr	r2, [sp, #12]
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	18d3      	adds	r3, r2, r3
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	2a00      	cmp	r2, #0
 800fc6e:	d015      	beq.n	800fc9c <quorem+0x110>
 800fc70:	9802      	ldr	r0, [sp, #8]
 800fc72:	b009      	add	sp, #36	; 0x24
 800fc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d106      	bne.n	800fc8a <quorem+0xfe>
 800fc7c:	9b01      	ldr	r3, [sp, #4]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	9301      	str	r3, [sp, #4]
 800fc82:	9b03      	ldr	r3, [sp, #12]
 800fc84:	3c04      	subs	r4, #4
 800fc86:	42a3      	cmp	r3, r4
 800fc88:	d3f5      	bcc.n	800fc76 <quorem+0xea>
 800fc8a:	9b01      	ldr	r3, [sp, #4]
 800fc8c:	613b      	str	r3, [r7, #16]
 800fc8e:	e7c7      	b.n	800fc20 <quorem+0x94>
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	2a00      	cmp	r2, #0
 800fc94:	d106      	bne.n	800fca4 <quorem+0x118>
 800fc96:	9a01      	ldr	r2, [sp, #4]
 800fc98:	3a01      	subs	r2, #1
 800fc9a:	9201      	str	r2, [sp, #4]
 800fc9c:	9a03      	ldr	r2, [sp, #12]
 800fc9e:	3b04      	subs	r3, #4
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d3f5      	bcc.n	800fc90 <quorem+0x104>
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	613b      	str	r3, [r7, #16]
 800fca8:	e7e2      	b.n	800fc70 <quorem+0xe4>
	...

0800fcac <_dtoa_r>:
 800fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcae:	0014      	movs	r4, r2
 800fcb0:	001d      	movs	r5, r3
 800fcb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fcb4:	b09d      	sub	sp, #116	; 0x74
 800fcb6:	9408      	str	r4, [sp, #32]
 800fcb8:	9509      	str	r5, [sp, #36]	; 0x24
 800fcba:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800fcbc:	9004      	str	r0, [sp, #16]
 800fcbe:	2900      	cmp	r1, #0
 800fcc0:	d009      	beq.n	800fcd6 <_dtoa_r+0x2a>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fcc6:	4093      	lsls	r3, r2
 800fcc8:	604a      	str	r2, [r1, #4]
 800fcca:	608b      	str	r3, [r1, #8]
 800fccc:	f7fc fc56 	bl	800c57c <_Bfree>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9a04      	ldr	r2, [sp, #16]
 800fcd4:	6393      	str	r3, [r2, #56]	; 0x38
 800fcd6:	2d00      	cmp	r5, #0
 800fcd8:	da1e      	bge.n	800fd18 <_dtoa_r+0x6c>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	6033      	str	r3, [r6, #0]
 800fcde:	006b      	lsls	r3, r5, #1
 800fce0:	085b      	lsrs	r3, r3, #1
 800fce2:	9309      	str	r3, [sp, #36]	; 0x24
 800fce4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fce6:	4bb5      	ldr	r3, [pc, #724]	; (800ffbc <_dtoa_r+0x310>)
 800fce8:	4ab4      	ldr	r2, [pc, #720]	; (800ffbc <_dtoa_r+0x310>)
 800fcea:	403b      	ands	r3, r7
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d116      	bne.n	800fd1e <_dtoa_r+0x72>
 800fcf0:	4bb3      	ldr	r3, [pc, #716]	; (800ffc0 <_dtoa_r+0x314>)
 800fcf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	033b      	lsls	r3, r7, #12
 800fcf8:	0b1b      	lsrs	r3, r3, #12
 800fcfa:	4323      	orrs	r3, r4
 800fcfc:	d101      	bne.n	800fd02 <_dtoa_r+0x56>
 800fcfe:	f000 fdb2 	bl	8010866 <_dtoa_r+0xbba>
 800fd02:	4bb0      	ldr	r3, [pc, #704]	; (800ffc4 <_dtoa_r+0x318>)
 800fd04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd06:	9306      	str	r3, [sp, #24]
 800fd08:	2a00      	cmp	r2, #0
 800fd0a:	d002      	beq.n	800fd12 <_dtoa_r+0x66>
 800fd0c:	4bae      	ldr	r3, [pc, #696]	; (800ffc8 <_dtoa_r+0x31c>)
 800fd0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd10:	6013      	str	r3, [r2, #0]
 800fd12:	9806      	ldr	r0, [sp, #24]
 800fd14:	b01d      	add	sp, #116	; 0x74
 800fd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd18:	2300      	movs	r3, #0
 800fd1a:	6033      	str	r3, [r6, #0]
 800fd1c:	e7e2      	b.n	800fce4 <_dtoa_r+0x38>
 800fd1e:	9a08      	ldr	r2, [sp, #32]
 800fd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd22:	9210      	str	r2, [sp, #64]	; 0x40
 800fd24:	9311      	str	r3, [sp, #68]	; 0x44
 800fd26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f7f0 fb8b 	bl	8000448 <__aeabi_dcmpeq>
 800fd32:	1e06      	subs	r6, r0, #0
 800fd34:	d009      	beq.n	800fd4a <_dtoa_r+0x9e>
 800fd36:	2301      	movs	r3, #1
 800fd38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	4ba3      	ldr	r3, [pc, #652]	; (800ffcc <_dtoa_r+0x320>)
 800fd3e:	9306      	str	r3, [sp, #24]
 800fd40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0e5      	beq.n	800fd12 <_dtoa_r+0x66>
 800fd46:	4ba2      	ldr	r3, [pc, #648]	; (800ffd0 <_dtoa_r+0x324>)
 800fd48:	e7e1      	b.n	800fd0e <_dtoa_r+0x62>
 800fd4a:	ab1a      	add	r3, sp, #104	; 0x68
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	ab1b      	add	r3, sp, #108	; 0x6c
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	9804      	ldr	r0, [sp, #16]
 800fd54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd58:	f7fc ff86 	bl	800cc68 <__d2b>
 800fd5c:	007a      	lsls	r2, r7, #1
 800fd5e:	9005      	str	r0, [sp, #20]
 800fd60:	0d52      	lsrs	r2, r2, #21
 800fd62:	d100      	bne.n	800fd66 <_dtoa_r+0xba>
 800fd64:	e07b      	b.n	800fe5e <_dtoa_r+0x1b2>
 800fd66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd68:	9617      	str	r6, [sp, #92]	; 0x5c
 800fd6a:	0319      	lsls	r1, r3, #12
 800fd6c:	4b99      	ldr	r3, [pc, #612]	; (800ffd4 <_dtoa_r+0x328>)
 800fd6e:	0b09      	lsrs	r1, r1, #12
 800fd70:	430b      	orrs	r3, r1
 800fd72:	4999      	ldr	r1, [pc, #612]	; (800ffd8 <_dtoa_r+0x32c>)
 800fd74:	1857      	adds	r7, r2, r1
 800fd76:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd78:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd7a:	0019      	movs	r1, r3
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4b97      	ldr	r3, [pc, #604]	; (800ffdc <_dtoa_r+0x330>)
 800fd80:	f7f1 ff36 	bl	8001bf0 <__aeabi_dsub>
 800fd84:	4a96      	ldr	r2, [pc, #600]	; (800ffe0 <_dtoa_r+0x334>)
 800fd86:	4b97      	ldr	r3, [pc, #604]	; (800ffe4 <_dtoa_r+0x338>)
 800fd88:	f7f1 fc70 	bl	800166c <__aeabi_dmul>
 800fd8c:	4a96      	ldr	r2, [pc, #600]	; (800ffe8 <_dtoa_r+0x33c>)
 800fd8e:	4b97      	ldr	r3, [pc, #604]	; (800ffec <_dtoa_r+0x340>)
 800fd90:	f7f0 fd12 	bl	80007b8 <__aeabi_dadd>
 800fd94:	0004      	movs	r4, r0
 800fd96:	0038      	movs	r0, r7
 800fd98:	000d      	movs	r5, r1
 800fd9a:	f7f2 faff 	bl	800239c <__aeabi_i2d>
 800fd9e:	4a94      	ldr	r2, [pc, #592]	; (800fff0 <_dtoa_r+0x344>)
 800fda0:	4b94      	ldr	r3, [pc, #592]	; (800fff4 <_dtoa_r+0x348>)
 800fda2:	f7f1 fc63 	bl	800166c <__aeabi_dmul>
 800fda6:	0002      	movs	r2, r0
 800fda8:	000b      	movs	r3, r1
 800fdaa:	0020      	movs	r0, r4
 800fdac:	0029      	movs	r1, r5
 800fdae:	f7f0 fd03 	bl	80007b8 <__aeabi_dadd>
 800fdb2:	0004      	movs	r4, r0
 800fdb4:	000d      	movs	r5, r1
 800fdb6:	f7f2 fabb 	bl	8002330 <__aeabi_d2iz>
 800fdba:	2200      	movs	r2, #0
 800fdbc:	9003      	str	r0, [sp, #12]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	0020      	movs	r0, r4
 800fdc2:	0029      	movs	r1, r5
 800fdc4:	f7f0 fb46 	bl	8000454 <__aeabi_dcmplt>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d00b      	beq.n	800fde4 <_dtoa_r+0x138>
 800fdcc:	9803      	ldr	r0, [sp, #12]
 800fdce:	f7f2 fae5 	bl	800239c <__aeabi_i2d>
 800fdd2:	002b      	movs	r3, r5
 800fdd4:	0022      	movs	r2, r4
 800fdd6:	f7f0 fb37 	bl	8000448 <__aeabi_dcmpeq>
 800fdda:	4243      	negs	r3, r0
 800fddc:	4158      	adcs	r0, r3
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	1a1b      	subs	r3, r3, r0
 800fde2:	9303      	str	r3, [sp, #12]
 800fde4:	2301      	movs	r3, #1
 800fde6:	9316      	str	r3, [sp, #88]	; 0x58
 800fde8:	9b03      	ldr	r3, [sp, #12]
 800fdea:	2b16      	cmp	r3, #22
 800fdec:	d810      	bhi.n	800fe10 <_dtoa_r+0x164>
 800fdee:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fdf0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fdf2:	9a03      	ldr	r2, [sp, #12]
 800fdf4:	4b80      	ldr	r3, [pc, #512]	; (800fff8 <_dtoa_r+0x34c>)
 800fdf6:	00d2      	lsls	r2, r2, #3
 800fdf8:	189b      	adds	r3, r3, r2
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	f7f0 fb29 	bl	8000454 <__aeabi_dcmplt>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d047      	beq.n	800fe96 <_dtoa_r+0x1ea>
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	9303      	str	r3, [sp, #12]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9316      	str	r3, [sp, #88]	; 0x58
 800fe10:	2200      	movs	r2, #0
 800fe12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe14:	920a      	str	r2, [sp, #40]	; 0x28
 800fe16:	1bdb      	subs	r3, r3, r7
 800fe18:	1e5a      	subs	r2, r3, #1
 800fe1a:	d53e      	bpl.n	800fe9a <_dtoa_r+0x1ee>
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	930a      	str	r3, [sp, #40]	; 0x28
 800fe22:	2300      	movs	r3, #0
 800fe24:	930c      	str	r3, [sp, #48]	; 0x30
 800fe26:	9b03      	ldr	r3, [sp, #12]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	db38      	blt.n	800fe9e <_dtoa_r+0x1f2>
 800fe2c:	9a03      	ldr	r2, [sp, #12]
 800fe2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe30:	4694      	mov	ip, r2
 800fe32:	4463      	add	r3, ip
 800fe34:	930c      	str	r3, [sp, #48]	; 0x30
 800fe36:	2300      	movs	r3, #0
 800fe38:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe3a:	930d      	str	r3, [sp, #52]	; 0x34
 800fe3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe3e:	2401      	movs	r4, #1
 800fe40:	2b09      	cmp	r3, #9
 800fe42:	d867      	bhi.n	800ff14 <_dtoa_r+0x268>
 800fe44:	2b05      	cmp	r3, #5
 800fe46:	dd02      	ble.n	800fe4e <_dtoa_r+0x1a2>
 800fe48:	2400      	movs	r4, #0
 800fe4a:	3b04      	subs	r3, #4
 800fe4c:	9322      	str	r3, [sp, #136]	; 0x88
 800fe4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe50:	1e98      	subs	r0, r3, #2
 800fe52:	2803      	cmp	r0, #3
 800fe54:	d867      	bhi.n	800ff26 <_dtoa_r+0x27a>
 800fe56:	f7f0 f95d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fe5a:	3a2b      	.short	0x3a2b
 800fe5c:	5b38      	.short	0x5b38
 800fe5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fe62:	18f6      	adds	r6, r6, r3
 800fe64:	4b65      	ldr	r3, [pc, #404]	; (800fffc <_dtoa_r+0x350>)
 800fe66:	18f2      	adds	r2, r6, r3
 800fe68:	2a20      	cmp	r2, #32
 800fe6a:	dd0f      	ble.n	800fe8c <_dtoa_r+0x1e0>
 800fe6c:	2340      	movs	r3, #64	; 0x40
 800fe6e:	1a9b      	subs	r3, r3, r2
 800fe70:	409f      	lsls	r7, r3
 800fe72:	4b63      	ldr	r3, [pc, #396]	; (8010000 <_dtoa_r+0x354>)
 800fe74:	0038      	movs	r0, r7
 800fe76:	18f3      	adds	r3, r6, r3
 800fe78:	40dc      	lsrs	r4, r3
 800fe7a:	4320      	orrs	r0, r4
 800fe7c:	f7f2 fabe 	bl	80023fc <__aeabi_ui2d>
 800fe80:	2201      	movs	r2, #1
 800fe82:	4b60      	ldr	r3, [pc, #384]	; (8010004 <_dtoa_r+0x358>)
 800fe84:	1e77      	subs	r7, r6, #1
 800fe86:	18cb      	adds	r3, r1, r3
 800fe88:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe8a:	e776      	b.n	800fd7a <_dtoa_r+0xce>
 800fe8c:	2320      	movs	r3, #32
 800fe8e:	0020      	movs	r0, r4
 800fe90:	1a9b      	subs	r3, r3, r2
 800fe92:	4098      	lsls	r0, r3
 800fe94:	e7f2      	b.n	800fe7c <_dtoa_r+0x1d0>
 800fe96:	9016      	str	r0, [sp, #88]	; 0x58
 800fe98:	e7ba      	b.n	800fe10 <_dtoa_r+0x164>
 800fe9a:	920c      	str	r2, [sp, #48]	; 0x30
 800fe9c:	e7c3      	b.n	800fe26 <_dtoa_r+0x17a>
 800fe9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea0:	9a03      	ldr	r2, [sp, #12]
 800fea2:	1a9b      	subs	r3, r3, r2
 800fea4:	930a      	str	r3, [sp, #40]	; 0x28
 800fea6:	4253      	negs	r3, r2
 800fea8:	930d      	str	r3, [sp, #52]	; 0x34
 800feaa:	2300      	movs	r3, #0
 800feac:	9313      	str	r3, [sp, #76]	; 0x4c
 800feae:	e7c5      	b.n	800fe3c <_dtoa_r+0x190>
 800feb0:	2300      	movs	r3, #0
 800feb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800feb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800feb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800feb8:	9307      	str	r3, [sp, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	dc13      	bgt.n	800fee6 <_dtoa_r+0x23a>
 800febe:	2301      	movs	r3, #1
 800fec0:	001a      	movs	r2, r3
 800fec2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fec4:	9307      	str	r3, [sp, #28]
 800fec6:	9223      	str	r2, [sp, #140]	; 0x8c
 800fec8:	e00d      	b.n	800fee6 <_dtoa_r+0x23a>
 800feca:	2301      	movs	r3, #1
 800fecc:	e7f1      	b.n	800feb2 <_dtoa_r+0x206>
 800fece:	2300      	movs	r3, #0
 800fed0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fed2:	930f      	str	r3, [sp, #60]	; 0x3c
 800fed4:	4694      	mov	ip, r2
 800fed6:	9b03      	ldr	r3, [sp, #12]
 800fed8:	4463      	add	r3, ip
 800feda:	930b      	str	r3, [sp, #44]	; 0x2c
 800fedc:	3301      	adds	r3, #1
 800fede:	9307      	str	r3, [sp, #28]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	dc00      	bgt.n	800fee6 <_dtoa_r+0x23a>
 800fee4:	2301      	movs	r3, #1
 800fee6:	2100      	movs	r1, #0
 800fee8:	2204      	movs	r2, #4
 800feea:	0010      	movs	r0, r2
 800feec:	3014      	adds	r0, #20
 800feee:	4298      	cmp	r0, r3
 800fef0:	d91d      	bls.n	800ff2e <_dtoa_r+0x282>
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	0018      	movs	r0, r3
 800fef6:	63d9      	str	r1, [r3, #60]	; 0x3c
 800fef8:	f7fc fb18 	bl	800c52c <_Balloc>
 800fefc:	9006      	str	r0, [sp, #24]
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d118      	bne.n	800ff34 <_dtoa_r+0x288>
 800ff02:	21b0      	movs	r1, #176	; 0xb0
 800ff04:	4b40      	ldr	r3, [pc, #256]	; (8010008 <_dtoa_r+0x35c>)
 800ff06:	4841      	ldr	r0, [pc, #260]	; (801000c <_dtoa_r+0x360>)
 800ff08:	9a06      	ldr	r2, [sp, #24]
 800ff0a:	31ff      	adds	r1, #255	; 0xff
 800ff0c:	f7ff fdd2 	bl	800fab4 <__assert_func>
 800ff10:	2301      	movs	r3, #1
 800ff12:	e7dd      	b.n	800fed0 <_dtoa_r+0x224>
 800ff14:	2300      	movs	r3, #0
 800ff16:	940f      	str	r4, [sp, #60]	; 0x3c
 800ff18:	9322      	str	r3, [sp, #136]	; 0x88
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff1e:	9307      	str	r3, [sp, #28]
 800ff20:	2200      	movs	r2, #0
 800ff22:	3313      	adds	r3, #19
 800ff24:	e7cf      	b.n	800fec6 <_dtoa_r+0x21a>
 800ff26:	2301      	movs	r3, #1
 800ff28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff2a:	3b02      	subs	r3, #2
 800ff2c:	e7f6      	b.n	800ff1c <_dtoa_r+0x270>
 800ff2e:	3101      	adds	r1, #1
 800ff30:	0052      	lsls	r2, r2, #1
 800ff32:	e7da      	b.n	800feea <_dtoa_r+0x23e>
 800ff34:	9b04      	ldr	r3, [sp, #16]
 800ff36:	9a06      	ldr	r2, [sp, #24]
 800ff38:	639a      	str	r2, [r3, #56]	; 0x38
 800ff3a:	9b07      	ldr	r3, [sp, #28]
 800ff3c:	2b0e      	cmp	r3, #14
 800ff3e:	d900      	bls.n	800ff42 <_dtoa_r+0x296>
 800ff40:	e0e3      	b.n	801010a <_dtoa_r+0x45e>
 800ff42:	2c00      	cmp	r4, #0
 800ff44:	d100      	bne.n	800ff48 <_dtoa_r+0x29c>
 800ff46:	e0e0      	b.n	801010a <_dtoa_r+0x45e>
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	dd62      	ble.n	8010014 <_dtoa_r+0x368>
 800ff4e:	210f      	movs	r1, #15
 800ff50:	9a03      	ldr	r2, [sp, #12]
 800ff52:	4b29      	ldr	r3, [pc, #164]	; (800fff8 <_dtoa_r+0x34c>)
 800ff54:	400a      	ands	r2, r1
 800ff56:	00d2      	lsls	r2, r2, #3
 800ff58:	189b      	adds	r3, r3, r2
 800ff5a:	681e      	ldr	r6, [r3, #0]
 800ff5c:	685f      	ldr	r7, [r3, #4]
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	2402      	movs	r4, #2
 800ff62:	111d      	asrs	r5, r3, #4
 800ff64:	05db      	lsls	r3, r3, #23
 800ff66:	d50a      	bpl.n	800ff7e <_dtoa_r+0x2d2>
 800ff68:	4b29      	ldr	r3, [pc, #164]	; (8010010 <_dtoa_r+0x364>)
 800ff6a:	400d      	ands	r5, r1
 800ff6c:	6a1a      	ldr	r2, [r3, #32]
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff74:	f7f0 ff80 	bl	8000e78 <__aeabi_ddiv>
 800ff78:	9008      	str	r0, [sp, #32]
 800ff7a:	9109      	str	r1, [sp, #36]	; 0x24
 800ff7c:	3401      	adds	r4, #1
 800ff7e:	4b24      	ldr	r3, [pc, #144]	; (8010010 <_dtoa_r+0x364>)
 800ff80:	930e      	str	r3, [sp, #56]	; 0x38
 800ff82:	2d00      	cmp	r5, #0
 800ff84:	d108      	bne.n	800ff98 <_dtoa_r+0x2ec>
 800ff86:	9808      	ldr	r0, [sp, #32]
 800ff88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff8a:	0032      	movs	r2, r6
 800ff8c:	003b      	movs	r3, r7
 800ff8e:	f7f0 ff73 	bl	8000e78 <__aeabi_ddiv>
 800ff92:	9008      	str	r0, [sp, #32]
 800ff94:	9109      	str	r1, [sp, #36]	; 0x24
 800ff96:	e058      	b.n	801004a <_dtoa_r+0x39e>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	421d      	tst	r5, r3
 800ff9c:	d009      	beq.n	800ffb2 <_dtoa_r+0x306>
 800ff9e:	18e4      	adds	r4, r4, r3
 800ffa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffa2:	0030      	movs	r0, r6
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	0039      	movs	r1, r7
 800ffaa:	f7f1 fb5f 	bl	800166c <__aeabi_dmul>
 800ffae:	0006      	movs	r6, r0
 800ffb0:	000f      	movs	r7, r1
 800ffb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffb4:	106d      	asrs	r5, r5, #1
 800ffb6:	3308      	adds	r3, #8
 800ffb8:	e7e2      	b.n	800ff80 <_dtoa_r+0x2d4>
 800ffba:	46c0      	nop			; (mov r8, r8)
 800ffbc:	7ff00000 	.word	0x7ff00000
 800ffc0:	0000270f 	.word	0x0000270f
 800ffc4:	0801453d 	.word	0x0801453d
 800ffc8:	08014540 	.word	0x08014540
 800ffcc:	080144ae 	.word	0x080144ae
 800ffd0:	080144af 	.word	0x080144af
 800ffd4:	3ff00000 	.word	0x3ff00000
 800ffd8:	fffffc01 	.word	0xfffffc01
 800ffdc:	3ff80000 	.word	0x3ff80000
 800ffe0:	636f4361 	.word	0x636f4361
 800ffe4:	3fd287a7 	.word	0x3fd287a7
 800ffe8:	8b60c8b3 	.word	0x8b60c8b3
 800ffec:	3fc68a28 	.word	0x3fc68a28
 800fff0:	509f79fb 	.word	0x509f79fb
 800fff4:	3fd34413 	.word	0x3fd34413
 800fff8:	080143a8 	.word	0x080143a8
 800fffc:	00000432 	.word	0x00000432
 8010000:	00000412 	.word	0x00000412
 8010004:	fe100000 	.word	0xfe100000
 8010008:	080142b1 	.word	0x080142b1
 801000c:	08014541 	.word	0x08014541
 8010010:	08014380 	.word	0x08014380
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	2402      	movs	r4, #2
 8010018:	2b00      	cmp	r3, #0
 801001a:	d016      	beq.n	801004a <_dtoa_r+0x39e>
 801001c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801001e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010020:	220f      	movs	r2, #15
 8010022:	425d      	negs	r5, r3
 8010024:	402a      	ands	r2, r5
 8010026:	4bdd      	ldr	r3, [pc, #884]	; (801039c <_dtoa_r+0x6f0>)
 8010028:	00d2      	lsls	r2, r2, #3
 801002a:	189b      	adds	r3, r3, r2
 801002c:	681a      	ldr	r2, [r3, #0]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	f7f1 fb1c 	bl	800166c <__aeabi_dmul>
 8010034:	2701      	movs	r7, #1
 8010036:	2300      	movs	r3, #0
 8010038:	9008      	str	r0, [sp, #32]
 801003a:	9109      	str	r1, [sp, #36]	; 0x24
 801003c:	4ed8      	ldr	r6, [pc, #864]	; (80103a0 <_dtoa_r+0x6f4>)
 801003e:	112d      	asrs	r5, r5, #4
 8010040:	2d00      	cmp	r5, #0
 8010042:	d000      	beq.n	8010046 <_dtoa_r+0x39a>
 8010044:	e091      	b.n	801016a <_dtoa_r+0x4be>
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1a3      	bne.n	800ff92 <_dtoa_r+0x2e6>
 801004a:	9e08      	ldr	r6, [sp, #32]
 801004c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801004e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010050:	2b00      	cmp	r3, #0
 8010052:	d100      	bne.n	8010056 <_dtoa_r+0x3aa>
 8010054:	e094      	b.n	8010180 <_dtoa_r+0x4d4>
 8010056:	2200      	movs	r2, #0
 8010058:	0030      	movs	r0, r6
 801005a:	0039      	movs	r1, r7
 801005c:	4bd1      	ldr	r3, [pc, #836]	; (80103a4 <_dtoa_r+0x6f8>)
 801005e:	f7f0 f9f9 	bl	8000454 <__aeabi_dcmplt>
 8010062:	2800      	cmp	r0, #0
 8010064:	d100      	bne.n	8010068 <_dtoa_r+0x3bc>
 8010066:	e08b      	b.n	8010180 <_dtoa_r+0x4d4>
 8010068:	9b07      	ldr	r3, [sp, #28]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d100      	bne.n	8010070 <_dtoa_r+0x3c4>
 801006e:	e087      	b.n	8010180 <_dtoa_r+0x4d4>
 8010070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010072:	2b00      	cmp	r3, #0
 8010074:	dd45      	ble.n	8010102 <_dtoa_r+0x456>
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	2200      	movs	r2, #0
 801007a:	3b01      	subs	r3, #1
 801007c:	930e      	str	r3, [sp, #56]	; 0x38
 801007e:	0030      	movs	r0, r6
 8010080:	4bc9      	ldr	r3, [pc, #804]	; (80103a8 <_dtoa_r+0x6fc>)
 8010082:	0039      	movs	r1, r7
 8010084:	f7f1 faf2 	bl	800166c <__aeabi_dmul>
 8010088:	9008      	str	r0, [sp, #32]
 801008a:	9109      	str	r1, [sp, #36]	; 0x24
 801008c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801008e:	3401      	adds	r4, #1
 8010090:	0020      	movs	r0, r4
 8010092:	9e08      	ldr	r6, [sp, #32]
 8010094:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010096:	9312      	str	r3, [sp, #72]	; 0x48
 8010098:	f7f2 f980 	bl	800239c <__aeabi_i2d>
 801009c:	0032      	movs	r2, r6
 801009e:	003b      	movs	r3, r7
 80100a0:	f7f1 fae4 	bl	800166c <__aeabi_dmul>
 80100a4:	2200      	movs	r2, #0
 80100a6:	4bc1      	ldr	r3, [pc, #772]	; (80103ac <_dtoa_r+0x700>)
 80100a8:	f7f0 fb86 	bl	80007b8 <__aeabi_dadd>
 80100ac:	4ac0      	ldr	r2, [pc, #768]	; (80103b0 <_dtoa_r+0x704>)
 80100ae:	9014      	str	r0, [sp, #80]	; 0x50
 80100b0:	9115      	str	r1, [sp, #84]	; 0x54
 80100b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80100b6:	4694      	mov	ip, r2
 80100b8:	9308      	str	r3, [sp, #32]
 80100ba:	9409      	str	r4, [sp, #36]	; 0x24
 80100bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100be:	4463      	add	r3, ip
 80100c0:	9318      	str	r3, [sp, #96]	; 0x60
 80100c2:	9309      	str	r3, [sp, #36]	; 0x24
 80100c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d15e      	bne.n	8010188 <_dtoa_r+0x4dc>
 80100ca:	2200      	movs	r2, #0
 80100cc:	4bb9      	ldr	r3, [pc, #740]	; (80103b4 <_dtoa_r+0x708>)
 80100ce:	0030      	movs	r0, r6
 80100d0:	0039      	movs	r1, r7
 80100d2:	f7f1 fd8d 	bl	8001bf0 <__aeabi_dsub>
 80100d6:	9a08      	ldr	r2, [sp, #32]
 80100d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80100da:	0004      	movs	r4, r0
 80100dc:	000d      	movs	r5, r1
 80100de:	f7f0 f9cd 	bl	800047c <__aeabi_dcmpgt>
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d000      	beq.n	80100e8 <_dtoa_r+0x43c>
 80100e6:	e2b3      	b.n	8010650 <_dtoa_r+0x9a4>
 80100e8:	48b3      	ldr	r0, [pc, #716]	; (80103b8 <_dtoa_r+0x70c>)
 80100ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 80100ec:	4684      	mov	ip, r0
 80100ee:	4461      	add	r1, ip
 80100f0:	000b      	movs	r3, r1
 80100f2:	0020      	movs	r0, r4
 80100f4:	0029      	movs	r1, r5
 80100f6:	9a08      	ldr	r2, [sp, #32]
 80100f8:	f7f0 f9ac 	bl	8000454 <__aeabi_dcmplt>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d000      	beq.n	8010102 <_dtoa_r+0x456>
 8010100:	e2a3      	b.n	801064a <_dtoa_r+0x99e>
 8010102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010104:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010106:	9308      	str	r3, [sp, #32]
 8010108:	9409      	str	r4, [sp, #36]	; 0x24
 801010a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801010c:	2b00      	cmp	r3, #0
 801010e:	da00      	bge.n	8010112 <_dtoa_r+0x466>
 8010110:	e179      	b.n	8010406 <_dtoa_r+0x75a>
 8010112:	9a03      	ldr	r2, [sp, #12]
 8010114:	2a0e      	cmp	r2, #14
 8010116:	dd00      	ble.n	801011a <_dtoa_r+0x46e>
 8010118:	e175      	b.n	8010406 <_dtoa_r+0x75a>
 801011a:	4ba0      	ldr	r3, [pc, #640]	; (801039c <_dtoa_r+0x6f0>)
 801011c:	00d2      	lsls	r2, r2, #3
 801011e:	189b      	adds	r3, r3, r2
 8010120:	681e      	ldr	r6, [r3, #0]
 8010122:	685f      	ldr	r7, [r3, #4]
 8010124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010126:	2b00      	cmp	r3, #0
 8010128:	db00      	blt.n	801012c <_dtoa_r+0x480>
 801012a:	e0e5      	b.n	80102f8 <_dtoa_r+0x64c>
 801012c:	9b07      	ldr	r3, [sp, #28]
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd00      	ble.n	8010134 <_dtoa_r+0x488>
 8010132:	e0e1      	b.n	80102f8 <_dtoa_r+0x64c>
 8010134:	d000      	beq.n	8010138 <_dtoa_r+0x48c>
 8010136:	e288      	b.n	801064a <_dtoa_r+0x99e>
 8010138:	2200      	movs	r2, #0
 801013a:	0030      	movs	r0, r6
 801013c:	0039      	movs	r1, r7
 801013e:	4b9d      	ldr	r3, [pc, #628]	; (80103b4 <_dtoa_r+0x708>)
 8010140:	f7f1 fa94 	bl	800166c <__aeabi_dmul>
 8010144:	9a08      	ldr	r2, [sp, #32]
 8010146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010148:	f7f0 f9a2 	bl	8000490 <__aeabi_dcmpge>
 801014c:	9e07      	ldr	r6, [sp, #28]
 801014e:	0037      	movs	r7, r6
 8010150:	2800      	cmp	r0, #0
 8010152:	d000      	beq.n	8010156 <_dtoa_r+0x4aa>
 8010154:	e25f      	b.n	8010616 <_dtoa_r+0x96a>
 8010156:	9b06      	ldr	r3, [sp, #24]
 8010158:	9a06      	ldr	r2, [sp, #24]
 801015a:	3301      	adds	r3, #1
 801015c:	9308      	str	r3, [sp, #32]
 801015e:	2331      	movs	r3, #49	; 0x31
 8010160:	7013      	strb	r3, [r2, #0]
 8010162:	9b03      	ldr	r3, [sp, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	9303      	str	r3, [sp, #12]
 8010168:	e25a      	b.n	8010620 <_dtoa_r+0x974>
 801016a:	423d      	tst	r5, r7
 801016c:	d005      	beq.n	801017a <_dtoa_r+0x4ce>
 801016e:	6832      	ldr	r2, [r6, #0]
 8010170:	6873      	ldr	r3, [r6, #4]
 8010172:	f7f1 fa7b 	bl	800166c <__aeabi_dmul>
 8010176:	003b      	movs	r3, r7
 8010178:	3401      	adds	r4, #1
 801017a:	106d      	asrs	r5, r5, #1
 801017c:	3608      	adds	r6, #8
 801017e:	e75f      	b.n	8010040 <_dtoa_r+0x394>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	930e      	str	r3, [sp, #56]	; 0x38
 8010184:	9b07      	ldr	r3, [sp, #28]
 8010186:	e783      	b.n	8010090 <_dtoa_r+0x3e4>
 8010188:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801018a:	4b84      	ldr	r3, [pc, #528]	; (801039c <_dtoa_r+0x6f0>)
 801018c:	3a01      	subs	r2, #1
 801018e:	00d2      	lsls	r2, r2, #3
 8010190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010192:	189b      	adds	r3, r3, r2
 8010194:	9c08      	ldr	r4, [sp, #32]
 8010196:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	2900      	cmp	r1, #0
 801019e:	d051      	beq.n	8010244 <_dtoa_r+0x598>
 80101a0:	2000      	movs	r0, #0
 80101a2:	4986      	ldr	r1, [pc, #536]	; (80103bc <_dtoa_r+0x710>)
 80101a4:	f7f0 fe68 	bl	8000e78 <__aeabi_ddiv>
 80101a8:	0022      	movs	r2, r4
 80101aa:	002b      	movs	r3, r5
 80101ac:	f7f1 fd20 	bl	8001bf0 <__aeabi_dsub>
 80101b0:	9a06      	ldr	r2, [sp, #24]
 80101b2:	0004      	movs	r4, r0
 80101b4:	4694      	mov	ip, r2
 80101b6:	000d      	movs	r5, r1
 80101b8:	9b06      	ldr	r3, [sp, #24]
 80101ba:	9314      	str	r3, [sp, #80]	; 0x50
 80101bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101be:	4463      	add	r3, ip
 80101c0:	9318      	str	r3, [sp, #96]	; 0x60
 80101c2:	0039      	movs	r1, r7
 80101c4:	0030      	movs	r0, r6
 80101c6:	f7f2 f8b3 	bl	8002330 <__aeabi_d2iz>
 80101ca:	9012      	str	r0, [sp, #72]	; 0x48
 80101cc:	f7f2 f8e6 	bl	800239c <__aeabi_i2d>
 80101d0:	0002      	movs	r2, r0
 80101d2:	000b      	movs	r3, r1
 80101d4:	0030      	movs	r0, r6
 80101d6:	0039      	movs	r1, r7
 80101d8:	f7f1 fd0a 	bl	8001bf0 <__aeabi_dsub>
 80101dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101e0:	3301      	adds	r3, #1
 80101e2:	9308      	str	r3, [sp, #32]
 80101e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101e6:	0006      	movs	r6, r0
 80101e8:	3330      	adds	r3, #48	; 0x30
 80101ea:	7013      	strb	r3, [r2, #0]
 80101ec:	0022      	movs	r2, r4
 80101ee:	002b      	movs	r3, r5
 80101f0:	000f      	movs	r7, r1
 80101f2:	f7f0 f92f 	bl	8000454 <__aeabi_dcmplt>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d174      	bne.n	80102e4 <_dtoa_r+0x638>
 80101fa:	0032      	movs	r2, r6
 80101fc:	003b      	movs	r3, r7
 80101fe:	2000      	movs	r0, #0
 8010200:	4968      	ldr	r1, [pc, #416]	; (80103a4 <_dtoa_r+0x6f8>)
 8010202:	f7f1 fcf5 	bl	8001bf0 <__aeabi_dsub>
 8010206:	0022      	movs	r2, r4
 8010208:	002b      	movs	r3, r5
 801020a:	f7f0 f923 	bl	8000454 <__aeabi_dcmplt>
 801020e:	2800      	cmp	r0, #0
 8010210:	d000      	beq.n	8010214 <_dtoa_r+0x568>
 8010212:	e0d7      	b.n	80103c4 <_dtoa_r+0x718>
 8010214:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010216:	9a08      	ldr	r2, [sp, #32]
 8010218:	4293      	cmp	r3, r2
 801021a:	d100      	bne.n	801021e <_dtoa_r+0x572>
 801021c:	e771      	b.n	8010102 <_dtoa_r+0x456>
 801021e:	2200      	movs	r2, #0
 8010220:	0020      	movs	r0, r4
 8010222:	0029      	movs	r1, r5
 8010224:	4b60      	ldr	r3, [pc, #384]	; (80103a8 <_dtoa_r+0x6fc>)
 8010226:	f7f1 fa21 	bl	800166c <__aeabi_dmul>
 801022a:	4b5f      	ldr	r3, [pc, #380]	; (80103a8 <_dtoa_r+0x6fc>)
 801022c:	0004      	movs	r4, r0
 801022e:	000d      	movs	r5, r1
 8010230:	0030      	movs	r0, r6
 8010232:	0039      	movs	r1, r7
 8010234:	2200      	movs	r2, #0
 8010236:	f7f1 fa19 	bl	800166c <__aeabi_dmul>
 801023a:	9b08      	ldr	r3, [sp, #32]
 801023c:	0006      	movs	r6, r0
 801023e:	000f      	movs	r7, r1
 8010240:	9314      	str	r3, [sp, #80]	; 0x50
 8010242:	e7be      	b.n	80101c2 <_dtoa_r+0x516>
 8010244:	0020      	movs	r0, r4
 8010246:	0029      	movs	r1, r5
 8010248:	f7f1 fa10 	bl	800166c <__aeabi_dmul>
 801024c:	9a06      	ldr	r2, [sp, #24]
 801024e:	9b06      	ldr	r3, [sp, #24]
 8010250:	4694      	mov	ip, r2
 8010252:	9308      	str	r3, [sp, #32]
 8010254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010256:	9014      	str	r0, [sp, #80]	; 0x50
 8010258:	9115      	str	r1, [sp, #84]	; 0x54
 801025a:	4463      	add	r3, ip
 801025c:	9319      	str	r3, [sp, #100]	; 0x64
 801025e:	0030      	movs	r0, r6
 8010260:	0039      	movs	r1, r7
 8010262:	f7f2 f865 	bl	8002330 <__aeabi_d2iz>
 8010266:	9018      	str	r0, [sp, #96]	; 0x60
 8010268:	f7f2 f898 	bl	800239c <__aeabi_i2d>
 801026c:	0002      	movs	r2, r0
 801026e:	000b      	movs	r3, r1
 8010270:	0030      	movs	r0, r6
 8010272:	0039      	movs	r1, r7
 8010274:	f7f1 fcbc 	bl	8001bf0 <__aeabi_dsub>
 8010278:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801027a:	9b08      	ldr	r3, [sp, #32]
 801027c:	3630      	adds	r6, #48	; 0x30
 801027e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010280:	701e      	strb	r6, [r3, #0]
 8010282:	3301      	adds	r3, #1
 8010284:	0004      	movs	r4, r0
 8010286:	000d      	movs	r5, r1
 8010288:	9308      	str	r3, [sp, #32]
 801028a:	4293      	cmp	r3, r2
 801028c:	d12d      	bne.n	80102ea <_dtoa_r+0x63e>
 801028e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010290:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010292:	9a06      	ldr	r2, [sp, #24]
 8010294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010296:	4694      	mov	ip, r2
 8010298:	4463      	add	r3, ip
 801029a:	2200      	movs	r2, #0
 801029c:	9308      	str	r3, [sp, #32]
 801029e:	4b47      	ldr	r3, [pc, #284]	; (80103bc <_dtoa_r+0x710>)
 80102a0:	f7f0 fa8a 	bl	80007b8 <__aeabi_dadd>
 80102a4:	0002      	movs	r2, r0
 80102a6:	000b      	movs	r3, r1
 80102a8:	0020      	movs	r0, r4
 80102aa:	0029      	movs	r1, r5
 80102ac:	f7f0 f8e6 	bl	800047c <__aeabi_dcmpgt>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d000      	beq.n	80102b6 <_dtoa_r+0x60a>
 80102b4:	e086      	b.n	80103c4 <_dtoa_r+0x718>
 80102b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102ba:	2000      	movs	r0, #0
 80102bc:	493f      	ldr	r1, [pc, #252]	; (80103bc <_dtoa_r+0x710>)
 80102be:	f7f1 fc97 	bl	8001bf0 <__aeabi_dsub>
 80102c2:	0002      	movs	r2, r0
 80102c4:	000b      	movs	r3, r1
 80102c6:	0020      	movs	r0, r4
 80102c8:	0029      	movs	r1, r5
 80102ca:	f7f0 f8c3 	bl	8000454 <__aeabi_dcmplt>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d100      	bne.n	80102d4 <_dtoa_r+0x628>
 80102d2:	e716      	b.n	8010102 <_dtoa_r+0x456>
 80102d4:	9b08      	ldr	r3, [sp, #32]
 80102d6:	001a      	movs	r2, r3
 80102d8:	3a01      	subs	r2, #1
 80102da:	9208      	str	r2, [sp, #32]
 80102dc:	7812      	ldrb	r2, [r2, #0]
 80102de:	2a30      	cmp	r2, #48	; 0x30
 80102e0:	d0f8      	beq.n	80102d4 <_dtoa_r+0x628>
 80102e2:	9308      	str	r3, [sp, #32]
 80102e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102e6:	9303      	str	r3, [sp, #12]
 80102e8:	e046      	b.n	8010378 <_dtoa_r+0x6cc>
 80102ea:	2200      	movs	r2, #0
 80102ec:	4b2e      	ldr	r3, [pc, #184]	; (80103a8 <_dtoa_r+0x6fc>)
 80102ee:	f7f1 f9bd 	bl	800166c <__aeabi_dmul>
 80102f2:	0006      	movs	r6, r0
 80102f4:	000f      	movs	r7, r1
 80102f6:	e7b2      	b.n	801025e <_dtoa_r+0x5b2>
 80102f8:	9b06      	ldr	r3, [sp, #24]
 80102fa:	9a06      	ldr	r2, [sp, #24]
 80102fc:	930a      	str	r3, [sp, #40]	; 0x28
 80102fe:	9b07      	ldr	r3, [sp, #28]
 8010300:	9c08      	ldr	r4, [sp, #32]
 8010302:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010304:	3b01      	subs	r3, #1
 8010306:	189b      	adds	r3, r3, r2
 8010308:	930b      	str	r3, [sp, #44]	; 0x2c
 801030a:	0032      	movs	r2, r6
 801030c:	003b      	movs	r3, r7
 801030e:	0020      	movs	r0, r4
 8010310:	0029      	movs	r1, r5
 8010312:	f7f0 fdb1 	bl	8000e78 <__aeabi_ddiv>
 8010316:	f7f2 f80b 	bl	8002330 <__aeabi_d2iz>
 801031a:	9007      	str	r0, [sp, #28]
 801031c:	f7f2 f83e 	bl	800239c <__aeabi_i2d>
 8010320:	0032      	movs	r2, r6
 8010322:	003b      	movs	r3, r7
 8010324:	f7f1 f9a2 	bl	800166c <__aeabi_dmul>
 8010328:	0002      	movs	r2, r0
 801032a:	000b      	movs	r3, r1
 801032c:	0020      	movs	r0, r4
 801032e:	0029      	movs	r1, r5
 8010330:	f7f1 fc5e 	bl	8001bf0 <__aeabi_dsub>
 8010334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010336:	001a      	movs	r2, r3
 8010338:	3201      	adds	r2, #1
 801033a:	920a      	str	r2, [sp, #40]	; 0x28
 801033c:	9208      	str	r2, [sp, #32]
 801033e:	9a07      	ldr	r2, [sp, #28]
 8010340:	3230      	adds	r2, #48	; 0x30
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010346:	429a      	cmp	r2, r3
 8010348:	d14f      	bne.n	80103ea <_dtoa_r+0x73e>
 801034a:	0002      	movs	r2, r0
 801034c:	000b      	movs	r3, r1
 801034e:	f7f0 fa33 	bl	80007b8 <__aeabi_dadd>
 8010352:	0032      	movs	r2, r6
 8010354:	003b      	movs	r3, r7
 8010356:	0004      	movs	r4, r0
 8010358:	000d      	movs	r5, r1
 801035a:	f7f0 f88f 	bl	800047c <__aeabi_dcmpgt>
 801035e:	2800      	cmp	r0, #0
 8010360:	d12e      	bne.n	80103c0 <_dtoa_r+0x714>
 8010362:	0032      	movs	r2, r6
 8010364:	003b      	movs	r3, r7
 8010366:	0020      	movs	r0, r4
 8010368:	0029      	movs	r1, r5
 801036a:	f7f0 f86d 	bl	8000448 <__aeabi_dcmpeq>
 801036e:	2800      	cmp	r0, #0
 8010370:	d002      	beq.n	8010378 <_dtoa_r+0x6cc>
 8010372:	9b07      	ldr	r3, [sp, #28]
 8010374:	07de      	lsls	r6, r3, #31
 8010376:	d423      	bmi.n	80103c0 <_dtoa_r+0x714>
 8010378:	9905      	ldr	r1, [sp, #20]
 801037a:	9804      	ldr	r0, [sp, #16]
 801037c:	f7fc f8fe 	bl	800c57c <_Bfree>
 8010380:	2300      	movs	r3, #0
 8010382:	9a08      	ldr	r2, [sp, #32]
 8010384:	7013      	strb	r3, [r2, #0]
 8010386:	9b03      	ldr	r3, [sp, #12]
 8010388:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801038a:	3301      	adds	r3, #1
 801038c:	6013      	str	r3, [r2, #0]
 801038e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010390:	2b00      	cmp	r3, #0
 8010392:	d100      	bne.n	8010396 <_dtoa_r+0x6ea>
 8010394:	e4bd      	b.n	800fd12 <_dtoa_r+0x66>
 8010396:	9a08      	ldr	r2, [sp, #32]
 8010398:	601a      	str	r2, [r3, #0]
 801039a:	e4ba      	b.n	800fd12 <_dtoa_r+0x66>
 801039c:	080143a8 	.word	0x080143a8
 80103a0:	08014380 	.word	0x08014380
 80103a4:	3ff00000 	.word	0x3ff00000
 80103a8:	40240000 	.word	0x40240000
 80103ac:	401c0000 	.word	0x401c0000
 80103b0:	fcc00000 	.word	0xfcc00000
 80103b4:	40140000 	.word	0x40140000
 80103b8:	7cc00000 	.word	0x7cc00000
 80103bc:	3fe00000 	.word	0x3fe00000
 80103c0:	9b03      	ldr	r3, [sp, #12]
 80103c2:	930e      	str	r3, [sp, #56]	; 0x38
 80103c4:	9b08      	ldr	r3, [sp, #32]
 80103c6:	9308      	str	r3, [sp, #32]
 80103c8:	3b01      	subs	r3, #1
 80103ca:	781a      	ldrb	r2, [r3, #0]
 80103cc:	2a39      	cmp	r2, #57	; 0x39
 80103ce:	d108      	bne.n	80103e2 <_dtoa_r+0x736>
 80103d0:	9a06      	ldr	r2, [sp, #24]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d1f7      	bne.n	80103c6 <_dtoa_r+0x71a>
 80103d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103d8:	9906      	ldr	r1, [sp, #24]
 80103da:	3201      	adds	r2, #1
 80103dc:	920e      	str	r2, [sp, #56]	; 0x38
 80103de:	2230      	movs	r2, #48	; 0x30
 80103e0:	700a      	strb	r2, [r1, #0]
 80103e2:	781a      	ldrb	r2, [r3, #0]
 80103e4:	3201      	adds	r2, #1
 80103e6:	701a      	strb	r2, [r3, #0]
 80103e8:	e77c      	b.n	80102e4 <_dtoa_r+0x638>
 80103ea:	2200      	movs	r2, #0
 80103ec:	4ba9      	ldr	r3, [pc, #676]	; (8010694 <_dtoa_r+0x9e8>)
 80103ee:	f7f1 f93d 	bl	800166c <__aeabi_dmul>
 80103f2:	2200      	movs	r2, #0
 80103f4:	2300      	movs	r3, #0
 80103f6:	0004      	movs	r4, r0
 80103f8:	000d      	movs	r5, r1
 80103fa:	f7f0 f825 	bl	8000448 <__aeabi_dcmpeq>
 80103fe:	2800      	cmp	r0, #0
 8010400:	d100      	bne.n	8010404 <_dtoa_r+0x758>
 8010402:	e782      	b.n	801030a <_dtoa_r+0x65e>
 8010404:	e7b8      	b.n	8010378 <_dtoa_r+0x6cc>
 8010406:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010408:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801040a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801040c:	2f00      	cmp	r7, #0
 801040e:	d012      	beq.n	8010436 <_dtoa_r+0x78a>
 8010410:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010412:	2a01      	cmp	r2, #1
 8010414:	dc6e      	bgt.n	80104f4 <_dtoa_r+0x848>
 8010416:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010418:	2a00      	cmp	r2, #0
 801041a:	d065      	beq.n	80104e8 <_dtoa_r+0x83c>
 801041c:	4a9e      	ldr	r2, [pc, #632]	; (8010698 <_dtoa_r+0x9ec>)
 801041e:	189b      	adds	r3, r3, r2
 8010420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010422:	2101      	movs	r1, #1
 8010424:	18d2      	adds	r2, r2, r3
 8010426:	920a      	str	r2, [sp, #40]	; 0x28
 8010428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801042a:	9804      	ldr	r0, [sp, #16]
 801042c:	18d3      	adds	r3, r2, r3
 801042e:	930c      	str	r3, [sp, #48]	; 0x30
 8010430:	f7fc f986 	bl	800c740 <__i2b>
 8010434:	0007      	movs	r7, r0
 8010436:	2c00      	cmp	r4, #0
 8010438:	d00e      	beq.n	8010458 <_dtoa_r+0x7ac>
 801043a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801043c:	2b00      	cmp	r3, #0
 801043e:	dd0b      	ble.n	8010458 <_dtoa_r+0x7ac>
 8010440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010442:	0023      	movs	r3, r4
 8010444:	4294      	cmp	r4, r2
 8010446:	dd00      	ble.n	801044a <_dtoa_r+0x79e>
 8010448:	0013      	movs	r3, r2
 801044a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801044c:	1ae4      	subs	r4, r4, r3
 801044e:	1ad2      	subs	r2, r2, r3
 8010450:	920a      	str	r2, [sp, #40]	; 0x28
 8010452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010454:	1ad3      	subs	r3, r2, r3
 8010456:	930c      	str	r3, [sp, #48]	; 0x30
 8010458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801045a:	2b00      	cmp	r3, #0
 801045c:	d01e      	beq.n	801049c <_dtoa_r+0x7f0>
 801045e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010460:	2b00      	cmp	r3, #0
 8010462:	d05c      	beq.n	801051e <_dtoa_r+0x872>
 8010464:	2d00      	cmp	r5, #0
 8010466:	dd10      	ble.n	801048a <_dtoa_r+0x7de>
 8010468:	0039      	movs	r1, r7
 801046a:	002a      	movs	r2, r5
 801046c:	9804      	ldr	r0, [sp, #16]
 801046e:	f7fc fa2f 	bl	800c8d0 <__pow5mult>
 8010472:	9a05      	ldr	r2, [sp, #20]
 8010474:	0001      	movs	r1, r0
 8010476:	0007      	movs	r7, r0
 8010478:	9804      	ldr	r0, [sp, #16]
 801047a:	f7fc f979 	bl	800c770 <__multiply>
 801047e:	0006      	movs	r6, r0
 8010480:	9905      	ldr	r1, [sp, #20]
 8010482:	9804      	ldr	r0, [sp, #16]
 8010484:	f7fc f87a 	bl	800c57c <_Bfree>
 8010488:	9605      	str	r6, [sp, #20]
 801048a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801048c:	1b5a      	subs	r2, r3, r5
 801048e:	42ab      	cmp	r3, r5
 8010490:	d004      	beq.n	801049c <_dtoa_r+0x7f0>
 8010492:	9905      	ldr	r1, [sp, #20]
 8010494:	9804      	ldr	r0, [sp, #16]
 8010496:	f7fc fa1b 	bl	800c8d0 <__pow5mult>
 801049a:	9005      	str	r0, [sp, #20]
 801049c:	2101      	movs	r1, #1
 801049e:	9804      	ldr	r0, [sp, #16]
 80104a0:	f7fc f94e 	bl	800c740 <__i2b>
 80104a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104a6:	0006      	movs	r6, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	dd3a      	ble.n	8010522 <_dtoa_r+0x876>
 80104ac:	001a      	movs	r2, r3
 80104ae:	0001      	movs	r1, r0
 80104b0:	9804      	ldr	r0, [sp, #16]
 80104b2:	f7fc fa0d 	bl	800c8d0 <__pow5mult>
 80104b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104b8:	0006      	movs	r6, r0
 80104ba:	2500      	movs	r5, #0
 80104bc:	2b01      	cmp	r3, #1
 80104be:	dc38      	bgt.n	8010532 <_dtoa_r+0x886>
 80104c0:	2500      	movs	r5, #0
 80104c2:	9b08      	ldr	r3, [sp, #32]
 80104c4:	42ab      	cmp	r3, r5
 80104c6:	d130      	bne.n	801052a <_dtoa_r+0x87e>
 80104c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ca:	031b      	lsls	r3, r3, #12
 80104cc:	42ab      	cmp	r3, r5
 80104ce:	d12c      	bne.n	801052a <_dtoa_r+0x87e>
 80104d0:	4b72      	ldr	r3, [pc, #456]	; (801069c <_dtoa_r+0x9f0>)
 80104d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104d4:	4213      	tst	r3, r2
 80104d6:	d028      	beq.n	801052a <_dtoa_r+0x87e>
 80104d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104da:	3501      	adds	r5, #1
 80104dc:	3301      	adds	r3, #1
 80104de:	930a      	str	r3, [sp, #40]	; 0x28
 80104e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104e2:	3301      	adds	r3, #1
 80104e4:	930c      	str	r3, [sp, #48]	; 0x30
 80104e6:	e020      	b.n	801052a <_dtoa_r+0x87e>
 80104e8:	2336      	movs	r3, #54	; 0x36
 80104ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80104ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80104f0:	1a9b      	subs	r3, r3, r2
 80104f2:	e795      	b.n	8010420 <_dtoa_r+0x774>
 80104f4:	9b07      	ldr	r3, [sp, #28]
 80104f6:	1e5d      	subs	r5, r3, #1
 80104f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104fa:	42ab      	cmp	r3, r5
 80104fc:	db07      	blt.n	801050e <_dtoa_r+0x862>
 80104fe:	1b5d      	subs	r5, r3, r5
 8010500:	9b07      	ldr	r3, [sp, #28]
 8010502:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010504:	2b00      	cmp	r3, #0
 8010506:	da8b      	bge.n	8010420 <_dtoa_r+0x774>
 8010508:	1ae4      	subs	r4, r4, r3
 801050a:	2300      	movs	r3, #0
 801050c:	e788      	b.n	8010420 <_dtoa_r+0x774>
 801050e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010512:	1aeb      	subs	r3, r5, r3
 8010514:	18d3      	adds	r3, r2, r3
 8010516:	950d      	str	r5, [sp, #52]	; 0x34
 8010518:	9313      	str	r3, [sp, #76]	; 0x4c
 801051a:	2500      	movs	r5, #0
 801051c:	e7f0      	b.n	8010500 <_dtoa_r+0x854>
 801051e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010520:	e7b7      	b.n	8010492 <_dtoa_r+0x7e6>
 8010522:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010524:	2500      	movs	r5, #0
 8010526:	2b01      	cmp	r3, #1
 8010528:	ddca      	ble.n	80104c0 <_dtoa_r+0x814>
 801052a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801052c:	2001      	movs	r0, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d008      	beq.n	8010544 <_dtoa_r+0x898>
 8010532:	6933      	ldr	r3, [r6, #16]
 8010534:	3303      	adds	r3, #3
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	18f3      	adds	r3, r6, r3
 801053a:	6858      	ldr	r0, [r3, #4]
 801053c:	f7fc f8b8 	bl	800c6b0 <__hi0bits>
 8010540:	2320      	movs	r3, #32
 8010542:	1a18      	subs	r0, r3, r0
 8010544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010546:	1818      	adds	r0, r3, r0
 8010548:	0002      	movs	r2, r0
 801054a:	231f      	movs	r3, #31
 801054c:	401a      	ands	r2, r3
 801054e:	4218      	tst	r0, r3
 8010550:	d047      	beq.n	80105e2 <_dtoa_r+0x936>
 8010552:	3301      	adds	r3, #1
 8010554:	1a9b      	subs	r3, r3, r2
 8010556:	2b04      	cmp	r3, #4
 8010558:	dd3f      	ble.n	80105da <_dtoa_r+0x92e>
 801055a:	231c      	movs	r3, #28
 801055c:	1a9b      	subs	r3, r3, r2
 801055e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010560:	18e4      	adds	r4, r4, r3
 8010562:	18d2      	adds	r2, r2, r3
 8010564:	920a      	str	r2, [sp, #40]	; 0x28
 8010566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010568:	18d3      	adds	r3, r2, r3
 801056a:	930c      	str	r3, [sp, #48]	; 0x30
 801056c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801056e:	2b00      	cmp	r3, #0
 8010570:	dd05      	ble.n	801057e <_dtoa_r+0x8d2>
 8010572:	001a      	movs	r2, r3
 8010574:	9905      	ldr	r1, [sp, #20]
 8010576:	9804      	ldr	r0, [sp, #16]
 8010578:	f7fc f9ec 	bl	800c954 <__lshift>
 801057c:	9005      	str	r0, [sp, #20]
 801057e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010580:	2b00      	cmp	r3, #0
 8010582:	dd05      	ble.n	8010590 <_dtoa_r+0x8e4>
 8010584:	0031      	movs	r1, r6
 8010586:	001a      	movs	r2, r3
 8010588:	9804      	ldr	r0, [sp, #16]
 801058a:	f7fc f9e3 	bl	800c954 <__lshift>
 801058e:	0006      	movs	r6, r0
 8010590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010592:	2b00      	cmp	r3, #0
 8010594:	d027      	beq.n	80105e6 <_dtoa_r+0x93a>
 8010596:	0031      	movs	r1, r6
 8010598:	9805      	ldr	r0, [sp, #20]
 801059a:	f7fc fa49 	bl	800ca30 <__mcmp>
 801059e:	2800      	cmp	r0, #0
 80105a0:	da21      	bge.n	80105e6 <_dtoa_r+0x93a>
 80105a2:	9b03      	ldr	r3, [sp, #12]
 80105a4:	220a      	movs	r2, #10
 80105a6:	3b01      	subs	r3, #1
 80105a8:	9303      	str	r3, [sp, #12]
 80105aa:	9905      	ldr	r1, [sp, #20]
 80105ac:	2300      	movs	r3, #0
 80105ae:	9804      	ldr	r0, [sp, #16]
 80105b0:	f7fb ffee 	bl	800c590 <__multadd>
 80105b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105b6:	9005      	str	r0, [sp, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d100      	bne.n	80105be <_dtoa_r+0x912>
 80105bc:	e15d      	b.n	801087a <_dtoa_r+0xbce>
 80105be:	2300      	movs	r3, #0
 80105c0:	0039      	movs	r1, r7
 80105c2:	220a      	movs	r2, #10
 80105c4:	9804      	ldr	r0, [sp, #16]
 80105c6:	f7fb ffe3 	bl	800c590 <__multadd>
 80105ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105cc:	0007      	movs	r7, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	dc49      	bgt.n	8010666 <_dtoa_r+0x9ba>
 80105d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	dc0e      	bgt.n	80105f6 <_dtoa_r+0x94a>
 80105d8:	e045      	b.n	8010666 <_dtoa_r+0x9ba>
 80105da:	2b04      	cmp	r3, #4
 80105dc:	d0c6      	beq.n	801056c <_dtoa_r+0x8c0>
 80105de:	331c      	adds	r3, #28
 80105e0:	e7bd      	b.n	801055e <_dtoa_r+0x8b2>
 80105e2:	0013      	movs	r3, r2
 80105e4:	e7fb      	b.n	80105de <_dtoa_r+0x932>
 80105e6:	9b07      	ldr	r3, [sp, #28]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	dc36      	bgt.n	801065a <_dtoa_r+0x9ae>
 80105ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	dd33      	ble.n	801065a <_dtoa_r+0x9ae>
 80105f2:	9b07      	ldr	r3, [sp, #28]
 80105f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80105f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10c      	bne.n	8010616 <_dtoa_r+0x96a>
 80105fc:	0031      	movs	r1, r6
 80105fe:	2205      	movs	r2, #5
 8010600:	9804      	ldr	r0, [sp, #16]
 8010602:	f7fb ffc5 	bl	800c590 <__multadd>
 8010606:	0006      	movs	r6, r0
 8010608:	0001      	movs	r1, r0
 801060a:	9805      	ldr	r0, [sp, #20]
 801060c:	f7fc fa10 	bl	800ca30 <__mcmp>
 8010610:	2800      	cmp	r0, #0
 8010612:	dd00      	ble.n	8010616 <_dtoa_r+0x96a>
 8010614:	e59f      	b.n	8010156 <_dtoa_r+0x4aa>
 8010616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010618:	43db      	mvns	r3, r3
 801061a:	9303      	str	r3, [sp, #12]
 801061c:	9b06      	ldr	r3, [sp, #24]
 801061e:	9308      	str	r3, [sp, #32]
 8010620:	2500      	movs	r5, #0
 8010622:	0031      	movs	r1, r6
 8010624:	9804      	ldr	r0, [sp, #16]
 8010626:	f7fb ffa9 	bl	800c57c <_Bfree>
 801062a:	2f00      	cmp	r7, #0
 801062c:	d100      	bne.n	8010630 <_dtoa_r+0x984>
 801062e:	e6a3      	b.n	8010378 <_dtoa_r+0x6cc>
 8010630:	2d00      	cmp	r5, #0
 8010632:	d005      	beq.n	8010640 <_dtoa_r+0x994>
 8010634:	42bd      	cmp	r5, r7
 8010636:	d003      	beq.n	8010640 <_dtoa_r+0x994>
 8010638:	0029      	movs	r1, r5
 801063a:	9804      	ldr	r0, [sp, #16]
 801063c:	f7fb ff9e 	bl	800c57c <_Bfree>
 8010640:	0039      	movs	r1, r7
 8010642:	9804      	ldr	r0, [sp, #16]
 8010644:	f7fb ff9a 	bl	800c57c <_Bfree>
 8010648:	e696      	b.n	8010378 <_dtoa_r+0x6cc>
 801064a:	2600      	movs	r6, #0
 801064c:	0037      	movs	r7, r6
 801064e:	e7e2      	b.n	8010616 <_dtoa_r+0x96a>
 8010650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010652:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	0037      	movs	r7, r6
 8010658:	e57d      	b.n	8010156 <_dtoa_r+0x4aa>
 801065a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801065c:	2b00      	cmp	r3, #0
 801065e:	d100      	bne.n	8010662 <_dtoa_r+0x9b6>
 8010660:	e0c3      	b.n	80107ea <_dtoa_r+0xb3e>
 8010662:	9b07      	ldr	r3, [sp, #28]
 8010664:	930b      	str	r3, [sp, #44]	; 0x2c
 8010666:	2c00      	cmp	r4, #0
 8010668:	dd05      	ble.n	8010676 <_dtoa_r+0x9ca>
 801066a:	0039      	movs	r1, r7
 801066c:	0022      	movs	r2, r4
 801066e:	9804      	ldr	r0, [sp, #16]
 8010670:	f7fc f970 	bl	800c954 <__lshift>
 8010674:	0007      	movs	r7, r0
 8010676:	0038      	movs	r0, r7
 8010678:	2d00      	cmp	r5, #0
 801067a:	d024      	beq.n	80106c6 <_dtoa_r+0xa1a>
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	9804      	ldr	r0, [sp, #16]
 8010680:	f7fb ff54 	bl	800c52c <_Balloc>
 8010684:	1e04      	subs	r4, r0, #0
 8010686:	d111      	bne.n	80106ac <_dtoa_r+0xa00>
 8010688:	0022      	movs	r2, r4
 801068a:	4b05      	ldr	r3, [pc, #20]	; (80106a0 <_dtoa_r+0x9f4>)
 801068c:	4805      	ldr	r0, [pc, #20]	; (80106a4 <_dtoa_r+0x9f8>)
 801068e:	4906      	ldr	r1, [pc, #24]	; (80106a8 <_dtoa_r+0x9fc>)
 8010690:	e43c      	b.n	800ff0c <_dtoa_r+0x260>
 8010692:	46c0      	nop			; (mov r8, r8)
 8010694:	40240000 	.word	0x40240000
 8010698:	00000433 	.word	0x00000433
 801069c:	7ff00000 	.word	0x7ff00000
 80106a0:	080142b1 	.word	0x080142b1
 80106a4:	08014541 	.word	0x08014541
 80106a8:	000002ef 	.word	0x000002ef
 80106ac:	0039      	movs	r1, r7
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	310c      	adds	r1, #12
 80106b2:	3202      	adds	r2, #2
 80106b4:	0092      	lsls	r2, r2, #2
 80106b6:	300c      	adds	r0, #12
 80106b8:	f7fb fa9d 	bl	800bbf6 <memcpy>
 80106bc:	2201      	movs	r2, #1
 80106be:	0021      	movs	r1, r4
 80106c0:	9804      	ldr	r0, [sp, #16]
 80106c2:	f7fc f947 	bl	800c954 <__lshift>
 80106c6:	9b06      	ldr	r3, [sp, #24]
 80106c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106ca:	9307      	str	r3, [sp, #28]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	189b      	adds	r3, r3, r2
 80106d0:	2201      	movs	r2, #1
 80106d2:	003d      	movs	r5, r7
 80106d4:	0007      	movs	r7, r0
 80106d6:	930e      	str	r3, [sp, #56]	; 0x38
 80106d8:	9b08      	ldr	r3, [sp, #32]
 80106da:	4013      	ands	r3, r2
 80106dc:	930d      	str	r3, [sp, #52]	; 0x34
 80106de:	0031      	movs	r1, r6
 80106e0:	9805      	ldr	r0, [sp, #20]
 80106e2:	f7ff fa53 	bl	800fb8c <quorem>
 80106e6:	0029      	movs	r1, r5
 80106e8:	0004      	movs	r4, r0
 80106ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80106ec:	9805      	ldr	r0, [sp, #20]
 80106ee:	f7fc f99f 	bl	800ca30 <__mcmp>
 80106f2:	003a      	movs	r2, r7
 80106f4:	900c      	str	r0, [sp, #48]	; 0x30
 80106f6:	0031      	movs	r1, r6
 80106f8:	9804      	ldr	r0, [sp, #16]
 80106fa:	f7fc f9b5 	bl	800ca68 <__mdiff>
 80106fe:	2201      	movs	r2, #1
 8010700:	68c3      	ldr	r3, [r0, #12]
 8010702:	3430      	adds	r4, #48	; 0x30
 8010704:	9008      	str	r0, [sp, #32]
 8010706:	920a      	str	r2, [sp, #40]	; 0x28
 8010708:	2b00      	cmp	r3, #0
 801070a:	d104      	bne.n	8010716 <_dtoa_r+0xa6a>
 801070c:	0001      	movs	r1, r0
 801070e:	9805      	ldr	r0, [sp, #20]
 8010710:	f7fc f98e 	bl	800ca30 <__mcmp>
 8010714:	900a      	str	r0, [sp, #40]	; 0x28
 8010716:	9908      	ldr	r1, [sp, #32]
 8010718:	9804      	ldr	r0, [sp, #16]
 801071a:	f7fb ff2f 	bl	800c57c <_Bfree>
 801071e:	9b07      	ldr	r3, [sp, #28]
 8010720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010722:	3301      	adds	r3, #1
 8010724:	9308      	str	r3, [sp, #32]
 8010726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010728:	4313      	orrs	r3, r2
 801072a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801072c:	4313      	orrs	r3, r2
 801072e:	d109      	bne.n	8010744 <_dtoa_r+0xa98>
 8010730:	2c39      	cmp	r4, #57	; 0x39
 8010732:	d022      	beq.n	801077a <_dtoa_r+0xace>
 8010734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010736:	2b00      	cmp	r3, #0
 8010738:	dd01      	ble.n	801073e <_dtoa_r+0xa92>
 801073a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801073c:	3431      	adds	r4, #49	; 0x31
 801073e:	9b07      	ldr	r3, [sp, #28]
 8010740:	701c      	strb	r4, [r3, #0]
 8010742:	e76e      	b.n	8010622 <_dtoa_r+0x976>
 8010744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010746:	2b00      	cmp	r3, #0
 8010748:	db04      	blt.n	8010754 <_dtoa_r+0xaa8>
 801074a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801074c:	4313      	orrs	r3, r2
 801074e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010750:	4313      	orrs	r3, r2
 8010752:	d11e      	bne.n	8010792 <_dtoa_r+0xae6>
 8010754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010756:	2b00      	cmp	r3, #0
 8010758:	ddf1      	ble.n	801073e <_dtoa_r+0xa92>
 801075a:	9905      	ldr	r1, [sp, #20]
 801075c:	2201      	movs	r2, #1
 801075e:	9804      	ldr	r0, [sp, #16]
 8010760:	f7fc f8f8 	bl	800c954 <__lshift>
 8010764:	0031      	movs	r1, r6
 8010766:	9005      	str	r0, [sp, #20]
 8010768:	f7fc f962 	bl	800ca30 <__mcmp>
 801076c:	2800      	cmp	r0, #0
 801076e:	dc02      	bgt.n	8010776 <_dtoa_r+0xaca>
 8010770:	d1e5      	bne.n	801073e <_dtoa_r+0xa92>
 8010772:	07e3      	lsls	r3, r4, #31
 8010774:	d5e3      	bpl.n	801073e <_dtoa_r+0xa92>
 8010776:	2c39      	cmp	r4, #57	; 0x39
 8010778:	d1df      	bne.n	801073a <_dtoa_r+0xa8e>
 801077a:	2339      	movs	r3, #57	; 0x39
 801077c:	9a07      	ldr	r2, [sp, #28]
 801077e:	7013      	strb	r3, [r2, #0]
 8010780:	9b08      	ldr	r3, [sp, #32]
 8010782:	9308      	str	r3, [sp, #32]
 8010784:	3b01      	subs	r3, #1
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	2a39      	cmp	r2, #57	; 0x39
 801078a:	d063      	beq.n	8010854 <_dtoa_r+0xba8>
 801078c:	3201      	adds	r2, #1
 801078e:	701a      	strb	r2, [r3, #0]
 8010790:	e747      	b.n	8010622 <_dtoa_r+0x976>
 8010792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010794:	2b00      	cmp	r3, #0
 8010796:	dd03      	ble.n	80107a0 <_dtoa_r+0xaf4>
 8010798:	2c39      	cmp	r4, #57	; 0x39
 801079a:	d0ee      	beq.n	801077a <_dtoa_r+0xace>
 801079c:	3401      	adds	r4, #1
 801079e:	e7ce      	b.n	801073e <_dtoa_r+0xa92>
 80107a0:	9b07      	ldr	r3, [sp, #28]
 80107a2:	9a07      	ldr	r2, [sp, #28]
 80107a4:	701c      	strb	r4, [r3, #0]
 80107a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d03e      	beq.n	801082a <_dtoa_r+0xb7e>
 80107ac:	2300      	movs	r3, #0
 80107ae:	220a      	movs	r2, #10
 80107b0:	9905      	ldr	r1, [sp, #20]
 80107b2:	9804      	ldr	r0, [sp, #16]
 80107b4:	f7fb feec 	bl	800c590 <__multadd>
 80107b8:	2300      	movs	r3, #0
 80107ba:	9005      	str	r0, [sp, #20]
 80107bc:	220a      	movs	r2, #10
 80107be:	0029      	movs	r1, r5
 80107c0:	9804      	ldr	r0, [sp, #16]
 80107c2:	42bd      	cmp	r5, r7
 80107c4:	d106      	bne.n	80107d4 <_dtoa_r+0xb28>
 80107c6:	f7fb fee3 	bl	800c590 <__multadd>
 80107ca:	0005      	movs	r5, r0
 80107cc:	0007      	movs	r7, r0
 80107ce:	9b08      	ldr	r3, [sp, #32]
 80107d0:	9307      	str	r3, [sp, #28]
 80107d2:	e784      	b.n	80106de <_dtoa_r+0xa32>
 80107d4:	f7fb fedc 	bl	800c590 <__multadd>
 80107d8:	0039      	movs	r1, r7
 80107da:	0005      	movs	r5, r0
 80107dc:	2300      	movs	r3, #0
 80107de:	220a      	movs	r2, #10
 80107e0:	9804      	ldr	r0, [sp, #16]
 80107e2:	f7fb fed5 	bl	800c590 <__multadd>
 80107e6:	0007      	movs	r7, r0
 80107e8:	e7f1      	b.n	80107ce <_dtoa_r+0xb22>
 80107ea:	9b07      	ldr	r3, [sp, #28]
 80107ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80107ee:	2500      	movs	r5, #0
 80107f0:	0031      	movs	r1, r6
 80107f2:	9805      	ldr	r0, [sp, #20]
 80107f4:	f7ff f9ca 	bl	800fb8c <quorem>
 80107f8:	9b06      	ldr	r3, [sp, #24]
 80107fa:	3030      	adds	r0, #48	; 0x30
 80107fc:	5558      	strb	r0, [r3, r5]
 80107fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010800:	3501      	adds	r5, #1
 8010802:	0004      	movs	r4, r0
 8010804:	42ab      	cmp	r3, r5
 8010806:	dd07      	ble.n	8010818 <_dtoa_r+0xb6c>
 8010808:	2300      	movs	r3, #0
 801080a:	220a      	movs	r2, #10
 801080c:	9905      	ldr	r1, [sp, #20]
 801080e:	9804      	ldr	r0, [sp, #16]
 8010810:	f7fb febe 	bl	800c590 <__multadd>
 8010814:	9005      	str	r0, [sp, #20]
 8010816:	e7eb      	b.n	80107f0 <_dtoa_r+0xb44>
 8010818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801081a:	2301      	movs	r3, #1
 801081c:	2a00      	cmp	r2, #0
 801081e:	dd00      	ble.n	8010822 <_dtoa_r+0xb76>
 8010820:	0013      	movs	r3, r2
 8010822:	2500      	movs	r5, #0
 8010824:	9a06      	ldr	r2, [sp, #24]
 8010826:	18d3      	adds	r3, r2, r3
 8010828:	9308      	str	r3, [sp, #32]
 801082a:	9905      	ldr	r1, [sp, #20]
 801082c:	2201      	movs	r2, #1
 801082e:	9804      	ldr	r0, [sp, #16]
 8010830:	f7fc f890 	bl	800c954 <__lshift>
 8010834:	0031      	movs	r1, r6
 8010836:	9005      	str	r0, [sp, #20]
 8010838:	f7fc f8fa 	bl	800ca30 <__mcmp>
 801083c:	2800      	cmp	r0, #0
 801083e:	dc9f      	bgt.n	8010780 <_dtoa_r+0xad4>
 8010840:	d101      	bne.n	8010846 <_dtoa_r+0xb9a>
 8010842:	07e4      	lsls	r4, r4, #31
 8010844:	d49c      	bmi.n	8010780 <_dtoa_r+0xad4>
 8010846:	9b08      	ldr	r3, [sp, #32]
 8010848:	9308      	str	r3, [sp, #32]
 801084a:	3b01      	subs	r3, #1
 801084c:	781a      	ldrb	r2, [r3, #0]
 801084e:	2a30      	cmp	r2, #48	; 0x30
 8010850:	d0fa      	beq.n	8010848 <_dtoa_r+0xb9c>
 8010852:	e6e6      	b.n	8010622 <_dtoa_r+0x976>
 8010854:	9a06      	ldr	r2, [sp, #24]
 8010856:	429a      	cmp	r2, r3
 8010858:	d193      	bne.n	8010782 <_dtoa_r+0xad6>
 801085a:	9b03      	ldr	r3, [sp, #12]
 801085c:	3301      	adds	r3, #1
 801085e:	9303      	str	r3, [sp, #12]
 8010860:	2331      	movs	r3, #49	; 0x31
 8010862:	7013      	strb	r3, [r2, #0]
 8010864:	e6dd      	b.n	8010622 <_dtoa_r+0x976>
 8010866:	4b09      	ldr	r3, [pc, #36]	; (801088c <_dtoa_r+0xbe0>)
 8010868:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801086a:	9306      	str	r3, [sp, #24]
 801086c:	4b08      	ldr	r3, [pc, #32]	; (8010890 <_dtoa_r+0xbe4>)
 801086e:	2a00      	cmp	r2, #0
 8010870:	d001      	beq.n	8010876 <_dtoa_r+0xbca>
 8010872:	f7ff fa4c 	bl	800fd0e <_dtoa_r+0x62>
 8010876:	f7ff fa4c 	bl	800fd12 <_dtoa_r+0x66>
 801087a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801087c:	2b00      	cmp	r3, #0
 801087e:	dcb6      	bgt.n	80107ee <_dtoa_r+0xb42>
 8010880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010882:	2b02      	cmp	r3, #2
 8010884:	dd00      	ble.n	8010888 <_dtoa_r+0xbdc>
 8010886:	e6b6      	b.n	80105f6 <_dtoa_r+0x94a>
 8010888:	e7b1      	b.n	80107ee <_dtoa_r+0xb42>
 801088a:	46c0      	nop			; (mov r8, r8)
 801088c:	08014534 	.word	0x08014534
 8010890:	0801453c 	.word	0x0801453c

08010894 <realloc>:
 8010894:	b510      	push	{r4, lr}
 8010896:	4b03      	ldr	r3, [pc, #12]	; (80108a4 <realloc+0x10>)
 8010898:	000a      	movs	r2, r1
 801089a:	0001      	movs	r1, r0
 801089c:	6818      	ldr	r0, [r3, #0]
 801089e:	f000 f803 	bl	80108a8 <_realloc_r>
 80108a2:	bd10      	pop	{r4, pc}
 80108a4:	200006d0 	.word	0x200006d0

080108a8 <_realloc_r>:
 80108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108aa:	b087      	sub	sp, #28
 80108ac:	1e0c      	subs	r4, r1, #0
 80108ae:	9001      	str	r0, [sp, #4]
 80108b0:	9205      	str	r2, [sp, #20]
 80108b2:	d106      	bne.n	80108c2 <_realloc_r+0x1a>
 80108b4:	0011      	movs	r1, r2
 80108b6:	f7f9 fe39 	bl	800a52c <_malloc_r>
 80108ba:	0007      	movs	r7, r0
 80108bc:	0038      	movs	r0, r7
 80108be:	b007      	add	sp, #28
 80108c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c2:	9801      	ldr	r0, [sp, #4]
 80108c4:	f7fa f846 	bl	800a954 <__malloc_lock>
 80108c8:	0023      	movs	r3, r4
 80108ca:	3b08      	subs	r3, #8
 80108cc:	685f      	ldr	r7, [r3, #4]
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	9b05      	ldr	r3, [sp, #20]
 80108d2:	330b      	adds	r3, #11
 80108d4:	2b16      	cmp	r3, #22
 80108d6:	d908      	bls.n	80108ea <_realloc_r+0x42>
 80108d8:	2207      	movs	r2, #7
 80108da:	4393      	bics	r3, r2
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	d506      	bpl.n	80108ee <_realloc_r+0x46>
 80108e0:	230c      	movs	r3, #12
 80108e2:	9a01      	ldr	r2, [sp, #4]
 80108e4:	2700      	movs	r7, #0
 80108e6:	6013      	str	r3, [r2, #0]
 80108e8:	e7e8      	b.n	80108bc <_realloc_r+0x14>
 80108ea:	2310      	movs	r3, #16
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	9b00      	ldr	r3, [sp, #0]
 80108f0:	9a05      	ldr	r2, [sp, #20]
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d3f4      	bcc.n	80108e0 <_realloc_r+0x38>
 80108f6:	9b04      	ldr	r3, [sp, #16]
 80108f8:	003a      	movs	r2, r7
 80108fa:	9302      	str	r3, [sp, #8]
 80108fc:	2303      	movs	r3, #3
 80108fe:	439a      	bics	r2, r3
 8010900:	9b00      	ldr	r3, [sp, #0]
 8010902:	9203      	str	r2, [sp, #12]
 8010904:	4293      	cmp	r3, r2
 8010906:	dc00      	bgt.n	801090a <_realloc_r+0x62>
 8010908:	e169      	b.n	8010bde <_realloc_r+0x336>
 801090a:	9b04      	ldr	r3, [sp, #16]
 801090c:	48b8      	ldr	r0, [pc, #736]	; (8010bf0 <_realloc_r+0x348>)
 801090e:	189b      	adds	r3, r3, r2
 8010910:	6882      	ldr	r2, [r0, #8]
 8010912:	4694      	mov	ip, r2
 8010914:	685a      	ldr	r2, [r3, #4]
 8010916:	459c      	cmp	ip, r3
 8010918:	d006      	beq.n	8010928 <_realloc_r+0x80>
 801091a:	2501      	movs	r5, #1
 801091c:	0011      	movs	r1, r2
 801091e:	43a9      	bics	r1, r5
 8010920:	1859      	adds	r1, r3, r1
 8010922:	6849      	ldr	r1, [r1, #4]
 8010924:	4229      	tst	r1, r5
 8010926:	d144      	bne.n	80109b2 <_realloc_r+0x10a>
 8010928:	2103      	movs	r1, #3
 801092a:	438a      	bics	r2, r1
 801092c:	9903      	ldr	r1, [sp, #12]
 801092e:	188e      	adds	r6, r1, r2
 8010930:	9900      	ldr	r1, [sp, #0]
 8010932:	459c      	cmp	ip, r3
 8010934:	d117      	bne.n	8010966 <_realloc_r+0xbe>
 8010936:	3110      	adds	r1, #16
 8010938:	42b1      	cmp	r1, r6
 801093a:	dc3c      	bgt.n	80109b6 <_realloc_r+0x10e>
 801093c:	9a00      	ldr	r2, [sp, #0]
 801093e:	2101      	movs	r1, #1
 8010940:	4694      	mov	ip, r2
 8010942:	1ab6      	subs	r6, r6, r2
 8010944:	0022      	movs	r2, r4
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	430e      	orrs	r6, r1
 801094a:	4463      	add	r3, ip
 801094c:	6083      	str	r3, [r0, #8]
 801094e:	3a08      	subs	r2, #8
 8010950:	605e      	str	r6, [r3, #4]
 8010952:	6853      	ldr	r3, [r2, #4]
 8010954:	9801      	ldr	r0, [sp, #4]
 8010956:	400b      	ands	r3, r1
 8010958:	4661      	mov	r1, ip
 801095a:	430b      	orrs	r3, r1
 801095c:	6053      	str	r3, [r2, #4]
 801095e:	f7fa f801 	bl	800a964 <__malloc_unlock>
 8010962:	0027      	movs	r7, r4
 8010964:	e7aa      	b.n	80108bc <_realloc_r+0x14>
 8010966:	42b1      	cmp	r1, r6
 8010968:	dc25      	bgt.n	80109b6 <_realloc_r+0x10e>
 801096a:	68da      	ldr	r2, [r3, #12]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	60da      	str	r2, [r3, #12]
 8010970:	6093      	str	r3, [r2, #8]
 8010972:	9b00      	ldr	r3, [sp, #0]
 8010974:	9a02      	ldr	r2, [sp, #8]
 8010976:	1af4      	subs	r4, r6, r3
 8010978:	9b02      	ldr	r3, [sp, #8]
 801097a:	1992      	adds	r2, r2, r6
 801097c:	6858      	ldr	r0, [r3, #4]
 801097e:	2301      	movs	r3, #1
 8010980:	4018      	ands	r0, r3
 8010982:	2c0f      	cmp	r4, #15
 8010984:	d800      	bhi.n	8010988 <_realloc_r+0xe0>
 8010986:	e12c      	b.n	8010be2 <_realloc_r+0x33a>
 8010988:	9d00      	ldr	r5, [sp, #0]
 801098a:	9902      	ldr	r1, [sp, #8]
 801098c:	4328      	orrs	r0, r5
 801098e:	1949      	adds	r1, r1, r5
 8010990:	9d02      	ldr	r5, [sp, #8]
 8010992:	431c      	orrs	r4, r3
 8010994:	6068      	str	r0, [r5, #4]
 8010996:	604c      	str	r4, [r1, #4]
 8010998:	6850      	ldr	r0, [r2, #4]
 801099a:	3108      	adds	r1, #8
 801099c:	4303      	orrs	r3, r0
 801099e:	6053      	str	r3, [r2, #4]
 80109a0:	9801      	ldr	r0, [sp, #4]
 80109a2:	f7fb f9a3 	bl	800bcec <_free_r>
 80109a6:	9801      	ldr	r0, [sp, #4]
 80109a8:	f7f9 ffdc 	bl	800a964 <__malloc_unlock>
 80109ac:	9f02      	ldr	r7, [sp, #8]
 80109ae:	3708      	adds	r7, #8
 80109b0:	e784      	b.n	80108bc <_realloc_r+0x14>
 80109b2:	2200      	movs	r2, #0
 80109b4:	0013      	movs	r3, r2
 80109b6:	07ff      	lsls	r7, r7, #31
 80109b8:	d500      	bpl.n	80109bc <_realloc_r+0x114>
 80109ba:	e0c6      	b.n	8010b4a <_realloc_r+0x2a2>
 80109bc:	0021      	movs	r1, r4
 80109be:	2003      	movs	r0, #3
 80109c0:	3908      	subs	r1, #8
 80109c2:	680d      	ldr	r5, [r1, #0]
 80109c4:	9904      	ldr	r1, [sp, #16]
 80109c6:	1b4d      	subs	r5, r1, r5
 80109c8:	6869      	ldr	r1, [r5, #4]
 80109ca:	4381      	bics	r1, r0
 80109cc:	9803      	ldr	r0, [sp, #12]
 80109ce:	180f      	adds	r7, r1, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d100      	bne.n	80109d6 <_realloc_r+0x12e>
 80109d4:	e084      	b.n	8010ae0 <_realloc_r+0x238>
 80109d6:	19d6      	adds	r6, r2, r7
 80109d8:	459c      	cmp	ip, r3
 80109da:	d148      	bne.n	8010a6e <_realloc_r+0x1c6>
 80109dc:	9b00      	ldr	r3, [sp, #0]
 80109de:	3310      	adds	r3, #16
 80109e0:	42b3      	cmp	r3, r6
 80109e2:	dc7d      	bgt.n	8010ae0 <_realloc_r+0x238>
 80109e4:	68aa      	ldr	r2, [r5, #8]
 80109e6:	68eb      	ldr	r3, [r5, #12]
 80109e8:	002f      	movs	r7, r5
 80109ea:	60d3      	str	r3, [r2, #12]
 80109ec:	609a      	str	r2, [r3, #8]
 80109ee:	0002      	movs	r2, r0
 80109f0:	3a04      	subs	r2, #4
 80109f2:	3708      	adds	r7, #8
 80109f4:	2a24      	cmp	r2, #36	; 0x24
 80109f6:	d835      	bhi.n	8010a64 <_realloc_r+0x1bc>
 80109f8:	003b      	movs	r3, r7
 80109fa:	2a13      	cmp	r2, #19
 80109fc:	d908      	bls.n	8010a10 <_realloc_r+0x168>
 80109fe:	6823      	ldr	r3, [r4, #0]
 8010a00:	60ab      	str	r3, [r5, #8]
 8010a02:	6863      	ldr	r3, [r4, #4]
 8010a04:	60eb      	str	r3, [r5, #12]
 8010a06:	2a1b      	cmp	r2, #27
 8010a08:	d81a      	bhi.n	8010a40 <_realloc_r+0x198>
 8010a0a:	002b      	movs	r3, r5
 8010a0c:	3408      	adds	r4, #8
 8010a0e:	3310      	adds	r3, #16
 8010a10:	6822      	ldr	r2, [r4, #0]
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	6862      	ldr	r2, [r4, #4]
 8010a16:	605a      	str	r2, [r3, #4]
 8010a18:	68a2      	ldr	r2, [r4, #8]
 8010a1a:	609a      	str	r2, [r3, #8]
 8010a1c:	9b00      	ldr	r3, [sp, #0]
 8010a1e:	4a74      	ldr	r2, [pc, #464]	; (8010bf0 <_realloc_r+0x348>)
 8010a20:	18eb      	adds	r3, r5, r3
 8010a22:	6093      	str	r3, [r2, #8]
 8010a24:	9a00      	ldr	r2, [sp, #0]
 8010a26:	1ab6      	subs	r6, r6, r2
 8010a28:	2201      	movs	r2, #1
 8010a2a:	4316      	orrs	r6, r2
 8010a2c:	605e      	str	r6, [r3, #4]
 8010a2e:	686b      	ldr	r3, [r5, #4]
 8010a30:	4013      	ands	r3, r2
 8010a32:	9a00      	ldr	r2, [sp, #0]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	606b      	str	r3, [r5, #4]
 8010a38:	9801      	ldr	r0, [sp, #4]
 8010a3a:	f7f9 ff93 	bl	800a964 <__malloc_unlock>
 8010a3e:	e73d      	b.n	80108bc <_realloc_r+0x14>
 8010a40:	68a3      	ldr	r3, [r4, #8]
 8010a42:	612b      	str	r3, [r5, #16]
 8010a44:	68e3      	ldr	r3, [r4, #12]
 8010a46:	616b      	str	r3, [r5, #20]
 8010a48:	2a24      	cmp	r2, #36	; 0x24
 8010a4a:	d003      	beq.n	8010a54 <_realloc_r+0x1ac>
 8010a4c:	002b      	movs	r3, r5
 8010a4e:	3410      	adds	r4, #16
 8010a50:	3318      	adds	r3, #24
 8010a52:	e7dd      	b.n	8010a10 <_realloc_r+0x168>
 8010a54:	6923      	ldr	r3, [r4, #16]
 8010a56:	61ab      	str	r3, [r5, #24]
 8010a58:	002b      	movs	r3, r5
 8010a5a:	6962      	ldr	r2, [r4, #20]
 8010a5c:	3320      	adds	r3, #32
 8010a5e:	61ea      	str	r2, [r5, #28]
 8010a60:	3418      	adds	r4, #24
 8010a62:	e7d5      	b.n	8010a10 <_realloc_r+0x168>
 8010a64:	0021      	movs	r1, r4
 8010a66:	0038      	movs	r0, r7
 8010a68:	f001 fbb5 	bl	80121d6 <memmove>
 8010a6c:	e7d6      	b.n	8010a1c <_realloc_r+0x174>
 8010a6e:	9a00      	ldr	r2, [sp, #0]
 8010a70:	42b2      	cmp	r2, r6
 8010a72:	dc35      	bgt.n	8010ae0 <_realloc_r+0x238>
 8010a74:	0028      	movs	r0, r5
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	3008      	adds	r0, #8
 8010a7c:	60da      	str	r2, [r3, #12]
 8010a7e:	6093      	str	r3, [r2, #8]
 8010a80:	68aa      	ldr	r2, [r5, #8]
 8010a82:	68eb      	ldr	r3, [r5, #12]
 8010a84:	60d3      	str	r3, [r2, #12]
 8010a86:	609a      	str	r2, [r3, #8]
 8010a88:	9a03      	ldr	r2, [sp, #12]
 8010a8a:	3a04      	subs	r2, #4
 8010a8c:	2a24      	cmp	r2, #36	; 0x24
 8010a8e:	d823      	bhi.n	8010ad8 <_realloc_r+0x230>
 8010a90:	2a13      	cmp	r2, #19
 8010a92:	d907      	bls.n	8010aa4 <_realloc_r+0x1fc>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	60ab      	str	r3, [r5, #8]
 8010a98:	6863      	ldr	r3, [r4, #4]
 8010a9a:	60eb      	str	r3, [r5, #12]
 8010a9c:	2a1b      	cmp	r2, #27
 8010a9e:	d809      	bhi.n	8010ab4 <_realloc_r+0x20c>
 8010aa0:	3408      	adds	r4, #8
 8010aa2:	3008      	adds	r0, #8
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	6003      	str	r3, [r0, #0]
 8010aa8:	6863      	ldr	r3, [r4, #4]
 8010aaa:	6043      	str	r3, [r0, #4]
 8010aac:	68a3      	ldr	r3, [r4, #8]
 8010aae:	6083      	str	r3, [r0, #8]
 8010ab0:	9502      	str	r5, [sp, #8]
 8010ab2:	e75e      	b.n	8010972 <_realloc_r+0xca>
 8010ab4:	68a3      	ldr	r3, [r4, #8]
 8010ab6:	612b      	str	r3, [r5, #16]
 8010ab8:	68e3      	ldr	r3, [r4, #12]
 8010aba:	616b      	str	r3, [r5, #20]
 8010abc:	2a24      	cmp	r2, #36	; 0x24
 8010abe:	d003      	beq.n	8010ac8 <_realloc_r+0x220>
 8010ac0:	0028      	movs	r0, r5
 8010ac2:	3410      	adds	r4, #16
 8010ac4:	3018      	adds	r0, #24
 8010ac6:	e7ed      	b.n	8010aa4 <_realloc_r+0x1fc>
 8010ac8:	0028      	movs	r0, r5
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	3020      	adds	r0, #32
 8010ace:	61ab      	str	r3, [r5, #24]
 8010ad0:	6963      	ldr	r3, [r4, #20]
 8010ad2:	3418      	adds	r4, #24
 8010ad4:	61eb      	str	r3, [r5, #28]
 8010ad6:	e7e5      	b.n	8010aa4 <_realloc_r+0x1fc>
 8010ad8:	0021      	movs	r1, r4
 8010ada:	f001 fb7c 	bl	80121d6 <memmove>
 8010ade:	e7e7      	b.n	8010ab0 <_realloc_r+0x208>
 8010ae0:	9b00      	ldr	r3, [sp, #0]
 8010ae2:	42bb      	cmp	r3, r7
 8010ae4:	dc31      	bgt.n	8010b4a <_realloc_r+0x2a2>
 8010ae6:	0028      	movs	r0, r5
 8010ae8:	68aa      	ldr	r2, [r5, #8]
 8010aea:	68eb      	ldr	r3, [r5, #12]
 8010aec:	3008      	adds	r0, #8
 8010aee:	60d3      	str	r3, [r2, #12]
 8010af0:	609a      	str	r2, [r3, #8]
 8010af2:	9a03      	ldr	r2, [sp, #12]
 8010af4:	3a04      	subs	r2, #4
 8010af6:	2a24      	cmp	r2, #36	; 0x24
 8010af8:	d823      	bhi.n	8010b42 <_realloc_r+0x29a>
 8010afa:	2a13      	cmp	r2, #19
 8010afc:	d907      	bls.n	8010b0e <_realloc_r+0x266>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	60ab      	str	r3, [r5, #8]
 8010b02:	6863      	ldr	r3, [r4, #4]
 8010b04:	60eb      	str	r3, [r5, #12]
 8010b06:	2a1b      	cmp	r2, #27
 8010b08:	d809      	bhi.n	8010b1e <_realloc_r+0x276>
 8010b0a:	3408      	adds	r4, #8
 8010b0c:	3008      	adds	r0, #8
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	6003      	str	r3, [r0, #0]
 8010b12:	6863      	ldr	r3, [r4, #4]
 8010b14:	6043      	str	r3, [r0, #4]
 8010b16:	68a3      	ldr	r3, [r4, #8]
 8010b18:	6083      	str	r3, [r0, #8]
 8010b1a:	003e      	movs	r6, r7
 8010b1c:	e7c8      	b.n	8010ab0 <_realloc_r+0x208>
 8010b1e:	68a3      	ldr	r3, [r4, #8]
 8010b20:	612b      	str	r3, [r5, #16]
 8010b22:	68e3      	ldr	r3, [r4, #12]
 8010b24:	616b      	str	r3, [r5, #20]
 8010b26:	2a24      	cmp	r2, #36	; 0x24
 8010b28:	d003      	beq.n	8010b32 <_realloc_r+0x28a>
 8010b2a:	0028      	movs	r0, r5
 8010b2c:	3410      	adds	r4, #16
 8010b2e:	3018      	adds	r0, #24
 8010b30:	e7ed      	b.n	8010b0e <_realloc_r+0x266>
 8010b32:	0028      	movs	r0, r5
 8010b34:	6923      	ldr	r3, [r4, #16]
 8010b36:	3020      	adds	r0, #32
 8010b38:	61ab      	str	r3, [r5, #24]
 8010b3a:	6963      	ldr	r3, [r4, #20]
 8010b3c:	3418      	adds	r4, #24
 8010b3e:	61eb      	str	r3, [r5, #28]
 8010b40:	e7e5      	b.n	8010b0e <_realloc_r+0x266>
 8010b42:	0021      	movs	r1, r4
 8010b44:	f001 fb47 	bl	80121d6 <memmove>
 8010b48:	e7e7      	b.n	8010b1a <_realloc_r+0x272>
 8010b4a:	9905      	ldr	r1, [sp, #20]
 8010b4c:	9801      	ldr	r0, [sp, #4]
 8010b4e:	f7f9 fced 	bl	800a52c <_malloc_r>
 8010b52:	1e07      	subs	r7, r0, #0
 8010b54:	d100      	bne.n	8010b58 <_realloc_r+0x2b0>
 8010b56:	e76f      	b.n	8010a38 <_realloc_r+0x190>
 8010b58:	0023      	movs	r3, r4
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	3b08      	subs	r3, #8
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	4393      	bics	r3, r2
 8010b62:	9a04      	ldr	r2, [sp, #16]
 8010b64:	18d3      	adds	r3, r2, r3
 8010b66:	0002      	movs	r2, r0
 8010b68:	3a08      	subs	r2, #8
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d105      	bne.n	8010b7a <_realloc_r+0x2d2>
 8010b6e:	685e      	ldr	r6, [r3, #4]
 8010b70:	2303      	movs	r3, #3
 8010b72:	439e      	bics	r6, r3
 8010b74:	9b03      	ldr	r3, [sp, #12]
 8010b76:	18f6      	adds	r6, r6, r3
 8010b78:	e6fb      	b.n	8010972 <_realloc_r+0xca>
 8010b7a:	9a03      	ldr	r2, [sp, #12]
 8010b7c:	3a04      	subs	r2, #4
 8010b7e:	2a24      	cmp	r2, #36	; 0x24
 8010b80:	d829      	bhi.n	8010bd6 <_realloc_r+0x32e>
 8010b82:	0003      	movs	r3, r0
 8010b84:	0021      	movs	r1, r4
 8010b86:	2a13      	cmp	r2, #19
 8010b88:	d908      	bls.n	8010b9c <_realloc_r+0x2f4>
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	6003      	str	r3, [r0, #0]
 8010b8e:	6863      	ldr	r3, [r4, #4]
 8010b90:	6043      	str	r3, [r0, #4]
 8010b92:	2a1b      	cmp	r2, #27
 8010b94:	d80d      	bhi.n	8010bb2 <_realloc_r+0x30a>
 8010b96:	0003      	movs	r3, r0
 8010b98:	3108      	adds	r1, #8
 8010b9a:	3308      	adds	r3, #8
 8010b9c:	680a      	ldr	r2, [r1, #0]
 8010b9e:	601a      	str	r2, [r3, #0]
 8010ba0:	684a      	ldr	r2, [r1, #4]
 8010ba2:	605a      	str	r2, [r3, #4]
 8010ba4:	688a      	ldr	r2, [r1, #8]
 8010ba6:	609a      	str	r2, [r3, #8]
 8010ba8:	0021      	movs	r1, r4
 8010baa:	9801      	ldr	r0, [sp, #4]
 8010bac:	f7fb f89e 	bl	800bcec <_free_r>
 8010bb0:	e742      	b.n	8010a38 <_realloc_r+0x190>
 8010bb2:	68a3      	ldr	r3, [r4, #8]
 8010bb4:	6083      	str	r3, [r0, #8]
 8010bb6:	68e3      	ldr	r3, [r4, #12]
 8010bb8:	60c3      	str	r3, [r0, #12]
 8010bba:	2a24      	cmp	r2, #36	; 0x24
 8010bbc:	d003      	beq.n	8010bc6 <_realloc_r+0x31e>
 8010bbe:	0003      	movs	r3, r0
 8010bc0:	3110      	adds	r1, #16
 8010bc2:	3310      	adds	r3, #16
 8010bc4:	e7ea      	b.n	8010b9c <_realloc_r+0x2f4>
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	3118      	adds	r1, #24
 8010bca:	6103      	str	r3, [r0, #16]
 8010bcc:	0003      	movs	r3, r0
 8010bce:	6962      	ldr	r2, [r4, #20]
 8010bd0:	3318      	adds	r3, #24
 8010bd2:	6142      	str	r2, [r0, #20]
 8010bd4:	e7e2      	b.n	8010b9c <_realloc_r+0x2f4>
 8010bd6:	0021      	movs	r1, r4
 8010bd8:	f001 fafd 	bl	80121d6 <memmove>
 8010bdc:	e7e4      	b.n	8010ba8 <_realloc_r+0x300>
 8010bde:	9e03      	ldr	r6, [sp, #12]
 8010be0:	e6c7      	b.n	8010972 <_realloc_r+0xca>
 8010be2:	9902      	ldr	r1, [sp, #8]
 8010be4:	4306      	orrs	r6, r0
 8010be6:	604e      	str	r6, [r1, #4]
 8010be8:	6851      	ldr	r1, [r2, #4]
 8010bea:	430b      	orrs	r3, r1
 8010bec:	6053      	str	r3, [r2, #4]
 8010bee:	e6da      	b.n	80109a6 <_realloc_r+0xfe>
 8010bf0:	20000028 	.word	0x20000028

08010bf4 <_strtoul_l.constprop.0>:
 8010bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf6:	b087      	sub	sp, #28
 8010bf8:	9202      	str	r2, [sp, #8]
 8010bfa:	4a3e      	ldr	r2, [pc, #248]	; (8010cf4 <_strtoul_l.constprop.0+0x100>)
 8010bfc:	001e      	movs	r6, r3
 8010bfe:	9101      	str	r1, [sp, #4]
 8010c00:	000b      	movs	r3, r1
 8010c02:	4694      	mov	ip, r2
 8010c04:	2108      	movs	r1, #8
 8010c06:	9005      	str	r0, [sp, #20]
 8010c08:	001a      	movs	r2, r3
 8010c0a:	4660      	mov	r0, ip
 8010c0c:	7814      	ldrb	r4, [r2, #0]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	5d00      	ldrb	r0, [r0, r4]
 8010c12:	001d      	movs	r5, r3
 8010c14:	0007      	movs	r7, r0
 8010c16:	400f      	ands	r7, r1
 8010c18:	4208      	tst	r0, r1
 8010c1a:	d1f5      	bne.n	8010c08 <_strtoul_l.constprop.0+0x14>
 8010c1c:	2c2d      	cmp	r4, #45	; 0x2d
 8010c1e:	d13d      	bne.n	8010c9c <_strtoul_l.constprop.0+0xa8>
 8010c20:	2701      	movs	r7, #1
 8010c22:	781c      	ldrb	r4, [r3, #0]
 8010c24:	1c95      	adds	r5, r2, #2
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	d05f      	beq.n	8010cea <_strtoul_l.constprop.0+0xf6>
 8010c2a:	2e10      	cmp	r6, #16
 8010c2c:	d109      	bne.n	8010c42 <_strtoul_l.constprop.0+0x4e>
 8010c2e:	2c30      	cmp	r4, #48	; 0x30
 8010c30:	d107      	bne.n	8010c42 <_strtoul_l.constprop.0+0x4e>
 8010c32:	2220      	movs	r2, #32
 8010c34:	782b      	ldrb	r3, [r5, #0]
 8010c36:	4393      	bics	r3, r2
 8010c38:	2b58      	cmp	r3, #88	; 0x58
 8010c3a:	d151      	bne.n	8010ce0 <_strtoul_l.constprop.0+0xec>
 8010c3c:	2610      	movs	r6, #16
 8010c3e:	786c      	ldrb	r4, [r5, #1]
 8010c40:	3502      	adds	r5, #2
 8010c42:	2001      	movs	r0, #1
 8010c44:	0031      	movs	r1, r6
 8010c46:	4240      	negs	r0, r0
 8010c48:	f7ef fa78 	bl	800013c <__udivsi3>
 8010c4c:	9003      	str	r0, [sp, #12]
 8010c4e:	2001      	movs	r0, #1
 8010c50:	0031      	movs	r1, r6
 8010c52:	4240      	negs	r0, r0
 8010c54:	f7ef faf8 	bl	8000248 <__aeabi_uidivmod>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	9104      	str	r1, [sp, #16]
 8010c5e:	2101      	movs	r1, #1
 8010c60:	0018      	movs	r0, r3
 8010c62:	4694      	mov	ip, r2
 8010c64:	4249      	negs	r1, r1
 8010c66:	0022      	movs	r2, r4
 8010c68:	3a30      	subs	r2, #48	; 0x30
 8010c6a:	2a09      	cmp	r2, #9
 8010c6c:	d903      	bls.n	8010c76 <_strtoul_l.constprop.0+0x82>
 8010c6e:	3a11      	subs	r2, #17
 8010c70:	2a19      	cmp	r2, #25
 8010c72:	d818      	bhi.n	8010ca6 <_strtoul_l.constprop.0+0xb2>
 8010c74:	320a      	adds	r2, #10
 8010c76:	4296      	cmp	r6, r2
 8010c78:	dd19      	ble.n	8010cae <_strtoul_l.constprop.0+0xba>
 8010c7a:	1c5c      	adds	r4, r3, #1
 8010c7c:	d00b      	beq.n	8010c96 <_strtoul_l.constprop.0+0xa2>
 8010c7e:	9c03      	ldr	r4, [sp, #12]
 8010c80:	000b      	movs	r3, r1
 8010c82:	4284      	cmp	r4, r0
 8010c84:	d307      	bcc.n	8010c96 <_strtoul_l.constprop.0+0xa2>
 8010c86:	d103      	bne.n	8010c90 <_strtoul_l.constprop.0+0x9c>
 8010c88:	9c04      	ldr	r4, [sp, #16]
 8010c8a:	000b      	movs	r3, r1
 8010c8c:	4294      	cmp	r4, r2
 8010c8e:	db02      	blt.n	8010c96 <_strtoul_l.constprop.0+0xa2>
 8010c90:	4663      	mov	r3, ip
 8010c92:	4370      	muls	r0, r6
 8010c94:	1810      	adds	r0, r2, r0
 8010c96:	782c      	ldrb	r4, [r5, #0]
 8010c98:	3501      	adds	r5, #1
 8010c9a:	e7e4      	b.n	8010c66 <_strtoul_l.constprop.0+0x72>
 8010c9c:	2c2b      	cmp	r4, #43	; 0x2b
 8010c9e:	d1c2      	bne.n	8010c26 <_strtoul_l.constprop.0+0x32>
 8010ca0:	781c      	ldrb	r4, [r3, #0]
 8010ca2:	1c95      	adds	r5, r2, #2
 8010ca4:	e7bf      	b.n	8010c26 <_strtoul_l.constprop.0+0x32>
 8010ca6:	0022      	movs	r2, r4
 8010ca8:	3a61      	subs	r2, #97	; 0x61
 8010caa:	2a19      	cmp	r2, #25
 8010cac:	d9e2      	bls.n	8010c74 <_strtoul_l.constprop.0+0x80>
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	d108      	bne.n	8010cc4 <_strtoul_l.constprop.0+0xd0>
 8010cb2:	2222      	movs	r2, #34	; 0x22
 8010cb4:	9905      	ldr	r1, [sp, #20]
 8010cb6:	0018      	movs	r0, r3
 8010cb8:	600a      	str	r2, [r1, #0]
 8010cba:	9a02      	ldr	r2, [sp, #8]
 8010cbc:	2a00      	cmp	r2, #0
 8010cbe:	d109      	bne.n	8010cd4 <_strtoul_l.constprop.0+0xe0>
 8010cc0:	b007      	add	sp, #28
 8010cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cc4:	2f00      	cmp	r7, #0
 8010cc6:	d000      	beq.n	8010cca <_strtoul_l.constprop.0+0xd6>
 8010cc8:	4240      	negs	r0, r0
 8010cca:	9a02      	ldr	r2, [sp, #8]
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	d0f7      	beq.n	8010cc0 <_strtoul_l.constprop.0+0xcc>
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <_strtoul_l.constprop.0+0xe4>
 8010cd4:	1e6b      	subs	r3, r5, #1
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	9b02      	ldr	r3, [sp, #8]
 8010cda:	9a01      	ldr	r2, [sp, #4]
 8010cdc:	601a      	str	r2, [r3, #0]
 8010cde:	e7ef      	b.n	8010cc0 <_strtoul_l.constprop.0+0xcc>
 8010ce0:	2430      	movs	r4, #48	; 0x30
 8010ce2:	2e00      	cmp	r6, #0
 8010ce4:	d1ad      	bne.n	8010c42 <_strtoul_l.constprop.0+0x4e>
 8010ce6:	3608      	adds	r6, #8
 8010ce8:	e7ab      	b.n	8010c42 <_strtoul_l.constprop.0+0x4e>
 8010cea:	2c30      	cmp	r4, #48	; 0x30
 8010cec:	d0a1      	beq.n	8010c32 <_strtoul_l.constprop.0+0x3e>
 8010cee:	260a      	movs	r6, #10
 8010cf0:	e7a7      	b.n	8010c42 <_strtoul_l.constprop.0+0x4e>
 8010cf2:	46c0      	nop			; (mov r8, r8)
 8010cf4:	080141a9 	.word	0x080141a9

08010cf8 <_strtoul_r>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	f7ff ff7b 	bl	8010bf4 <_strtoul_l.constprop.0>
 8010cfe:	bd10      	pop	{r4, pc}

08010d00 <_strtoll_l.constprop.0>:
 8010d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d02:	b08d      	sub	sp, #52	; 0x34
 8010d04:	9203      	str	r2, [sp, #12]
 8010d06:	4a53      	ldr	r2, [pc, #332]	; (8010e54 <_strtoll_l.constprop.0+0x154>)
 8010d08:	001e      	movs	r6, r3
 8010d0a:	9102      	str	r1, [sp, #8]
 8010d0c:	000b      	movs	r3, r1
 8010d0e:	4694      	mov	ip, r2
 8010d10:	2108      	movs	r1, #8
 8010d12:	900a      	str	r0, [sp, #40]	; 0x28
 8010d14:	001a      	movs	r2, r3
 8010d16:	4660      	mov	r0, ip
 8010d18:	7814      	ldrb	r4, [r2, #0]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	5d00      	ldrb	r0, [r0, r4]
 8010d1e:	001d      	movs	r5, r3
 8010d20:	0007      	movs	r7, r0
 8010d22:	400f      	ands	r7, r1
 8010d24:	4208      	tst	r0, r1
 8010d26:	d1f5      	bne.n	8010d14 <_strtoll_l.constprop.0+0x14>
 8010d28:	2c2d      	cmp	r4, #45	; 0x2d
 8010d2a:	d153      	bne.n	8010dd4 <_strtoll_l.constprop.0+0xd4>
 8010d2c:	781c      	ldrb	r4, [r3, #0]
 8010d2e:	2301      	movs	r3, #1
 8010d30:	1c95      	adds	r5, r2, #2
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	2e00      	cmp	r6, #0
 8010d36:	d100      	bne.n	8010d3a <_strtoll_l.constprop.0+0x3a>
 8010d38:	e086      	b.n	8010e48 <_strtoll_l.constprop.0+0x148>
 8010d3a:	2e10      	cmp	r6, #16
 8010d3c:	d10a      	bne.n	8010d54 <_strtoll_l.constprop.0+0x54>
 8010d3e:	2c30      	cmp	r4, #48	; 0x30
 8010d40:	d108      	bne.n	8010d54 <_strtoll_l.constprop.0+0x54>
 8010d42:	2220      	movs	r2, #32
 8010d44:	782b      	ldrb	r3, [r5, #0]
 8010d46:	4393      	bics	r3, r2
 8010d48:	2b58      	cmp	r3, #88	; 0x58
 8010d4a:	d000      	beq.n	8010d4e <_strtoll_l.constprop.0+0x4e>
 8010d4c:	e076      	b.n	8010e3c <_strtoll_l.constprop.0+0x13c>
 8010d4e:	2610      	movs	r6, #16
 8010d50:	786c      	ldrb	r4, [r5, #1]
 8010d52:	3502      	adds	r5, #2
 8010d54:	2001      	movs	r0, #1
 8010d56:	2300      	movs	r3, #0
 8010d58:	493f      	ldr	r1, [pc, #252]	; (8010e58 <_strtoll_l.constprop.0+0x158>)
 8010d5a:	9a01      	ldr	r2, [sp, #4]
 8010d5c:	4240      	negs	r0, r0
 8010d5e:	1812      	adds	r2, r2, r0
 8010d60:	414b      	adcs	r3, r1
 8010d62:	9204      	str	r2, [sp, #16]
 8010d64:	9305      	str	r3, [sp, #20]
 8010d66:	9804      	ldr	r0, [sp, #16]
 8010d68:	9905      	ldr	r1, [sp, #20]
 8010d6a:	17f3      	asrs	r3, r6, #31
 8010d6c:	0032      	movs	r2, r6
 8010d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d70:	f7ef fb98 	bl	80004a4 <__aeabi_uldivmod>
 8010d74:	2300      	movs	r3, #0
 8010d76:	000f      	movs	r7, r1
 8010d78:	9008      	str	r0, [sp, #32]
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d80:	0022      	movs	r2, r4
 8010d82:	3a30      	subs	r2, #48	; 0x30
 8010d84:	2a09      	cmp	r2, #9
 8010d86:	d82b      	bhi.n	8010de0 <_strtoll_l.constprop.0+0xe0>
 8010d88:	0014      	movs	r4, r2
 8010d8a:	42a6      	cmp	r6, r4
 8010d8c:	dd37      	ble.n	8010dfe <_strtoll_l.constprop.0+0xfe>
 8010d8e:	1c5a      	adds	r2, r3, #1
 8010d90:	d01d      	beq.n	8010dce <_strtoll_l.constprop.0+0xce>
 8010d92:	42b9      	cmp	r1, r7
 8010d94:	d830      	bhi.n	8010df8 <_strtoll_l.constprop.0+0xf8>
 8010d96:	d102      	bne.n	8010d9e <_strtoll_l.constprop.0+0x9e>
 8010d98:	9b08      	ldr	r3, [sp, #32]
 8010d9a:	4298      	cmp	r0, r3
 8010d9c:	d82c      	bhi.n	8010df8 <_strtoll_l.constprop.0+0xf8>
 8010d9e:	9b08      	ldr	r3, [sp, #32]
 8010da0:	4283      	cmp	r3, r0
 8010da2:	d106      	bne.n	8010db2 <_strtoll_l.constprop.0+0xb2>
 8010da4:	428f      	cmp	r7, r1
 8010da6:	d104      	bne.n	8010db2 <_strtoll_l.constprop.0+0xb2>
 8010da8:	2301      	movs	r3, #1
 8010daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dac:	425b      	negs	r3, r3
 8010dae:	42a2      	cmp	r2, r4
 8010db0:	db0d      	blt.n	8010dce <_strtoll_l.constprop.0+0xce>
 8010db2:	000b      	movs	r3, r1
 8010db4:	0002      	movs	r2, r0
 8010db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010db8:	0030      	movs	r0, r6
 8010dba:	f7ef fb93 	bl	80004e4 <__aeabi_lmul>
 8010dbe:	17e3      	asrs	r3, r4, #31
 8010dc0:	9406      	str	r4, [sp, #24]
 8010dc2:	9307      	str	r3, [sp, #28]
 8010dc4:	9b06      	ldr	r3, [sp, #24]
 8010dc6:	9c07      	ldr	r4, [sp, #28]
 8010dc8:	18c0      	adds	r0, r0, r3
 8010dca:	4161      	adcs	r1, r4
 8010dcc:	2301      	movs	r3, #1
 8010dce:	782c      	ldrb	r4, [r5, #0]
 8010dd0:	3501      	adds	r5, #1
 8010dd2:	e7d5      	b.n	8010d80 <_strtoll_l.constprop.0+0x80>
 8010dd4:	9701      	str	r7, [sp, #4]
 8010dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8010dd8:	d1ac      	bne.n	8010d34 <_strtoll_l.constprop.0+0x34>
 8010dda:	781c      	ldrb	r4, [r3, #0]
 8010ddc:	1c95      	adds	r5, r2, #2
 8010dde:	e7a9      	b.n	8010d34 <_strtoll_l.constprop.0+0x34>
 8010de0:	0022      	movs	r2, r4
 8010de2:	3a41      	subs	r2, #65	; 0x41
 8010de4:	2a19      	cmp	r2, #25
 8010de6:	d801      	bhi.n	8010dec <_strtoll_l.constprop.0+0xec>
 8010de8:	3c37      	subs	r4, #55	; 0x37
 8010dea:	e7ce      	b.n	8010d8a <_strtoll_l.constprop.0+0x8a>
 8010dec:	0022      	movs	r2, r4
 8010dee:	3a61      	subs	r2, #97	; 0x61
 8010df0:	2a19      	cmp	r2, #25
 8010df2:	d804      	bhi.n	8010dfe <_strtoll_l.constprop.0+0xfe>
 8010df4:	3c57      	subs	r4, #87	; 0x57
 8010df6:	e7c8      	b.n	8010d8a <_strtoll_l.constprop.0+0x8a>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	425b      	negs	r3, r3
 8010dfc:	e7e7      	b.n	8010dce <_strtoll_l.constprop.0+0xce>
 8010dfe:	1c5a      	adds	r2, r3, #1
 8010e00:	d109      	bne.n	8010e16 <_strtoll_l.constprop.0+0x116>
 8010e02:	9804      	ldr	r0, [sp, #16]
 8010e04:	9905      	ldr	r1, [sp, #20]
 8010e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e08:	3323      	adds	r3, #35	; 0x23
 8010e0a:	6013      	str	r3, [r2, #0]
 8010e0c:	9b03      	ldr	r3, [sp, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10e      	bne.n	8010e30 <_strtoll_l.constprop.0+0x130>
 8010e12:	b00d      	add	sp, #52	; 0x34
 8010e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e16:	9a01      	ldr	r2, [sp, #4]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	d004      	beq.n	8010e26 <_strtoll_l.constprop.0+0x126>
 8010e1c:	0006      	movs	r6, r0
 8010e1e:	000f      	movs	r7, r1
 8010e20:	2100      	movs	r1, #0
 8010e22:	4270      	negs	r0, r6
 8010e24:	41b9      	sbcs	r1, r7
 8010e26:	9a03      	ldr	r2, [sp, #12]
 8010e28:	2a00      	cmp	r2, #0
 8010e2a:	d0f2      	beq.n	8010e12 <_strtoll_l.constprop.0+0x112>
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <_strtoll_l.constprop.0+0x134>
 8010e30:	1e6b      	subs	r3, r5, #1
 8010e32:	9302      	str	r3, [sp, #8]
 8010e34:	9b03      	ldr	r3, [sp, #12]
 8010e36:	9a02      	ldr	r2, [sp, #8]
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	e7ea      	b.n	8010e12 <_strtoll_l.constprop.0+0x112>
 8010e3c:	2430      	movs	r4, #48	; 0x30
 8010e3e:	2e00      	cmp	r6, #0
 8010e40:	d000      	beq.n	8010e44 <_strtoll_l.constprop.0+0x144>
 8010e42:	e787      	b.n	8010d54 <_strtoll_l.constprop.0+0x54>
 8010e44:	3608      	adds	r6, #8
 8010e46:	e785      	b.n	8010d54 <_strtoll_l.constprop.0+0x54>
 8010e48:	2c30      	cmp	r4, #48	; 0x30
 8010e4a:	d100      	bne.n	8010e4e <_strtoll_l.constprop.0+0x14e>
 8010e4c:	e779      	b.n	8010d42 <_strtoll_l.constprop.0+0x42>
 8010e4e:	260a      	movs	r6, #10
 8010e50:	e780      	b.n	8010d54 <_strtoll_l.constprop.0+0x54>
 8010e52:	46c0      	nop			; (mov r8, r8)
 8010e54:	080141a9 	.word	0x080141a9
 8010e58:	7fffffff 	.word	0x7fffffff

08010e5c <_strtoll_r>:
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	f7ff ff4f 	bl	8010d00 <_strtoll_l.constprop.0>
 8010e62:	bd10      	pop	{r4, pc}

08010e64 <_strtoull_l.constprop.0>:
 8010e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e66:	b08b      	sub	sp, #44	; 0x2c
 8010e68:	9202      	str	r2, [sp, #8]
 8010e6a:	4a54      	ldr	r2, [pc, #336]	; (8010fbc <_strtoull_l.constprop.0+0x158>)
 8010e6c:	001e      	movs	r6, r3
 8010e6e:	9101      	str	r1, [sp, #4]
 8010e70:	000b      	movs	r3, r1
 8010e72:	4694      	mov	ip, r2
 8010e74:	2108      	movs	r1, #8
 8010e76:	9009      	str	r0, [sp, #36]	; 0x24
 8010e78:	001a      	movs	r2, r3
 8010e7a:	4660      	mov	r0, ip
 8010e7c:	7814      	ldrb	r4, [r2, #0]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	5d00      	ldrb	r0, [r0, r4]
 8010e82:	001d      	movs	r5, r3
 8010e84:	0007      	movs	r7, r0
 8010e86:	400f      	ands	r7, r1
 8010e88:	4208      	tst	r0, r1
 8010e8a:	d1f5      	bne.n	8010e78 <_strtoull_l.constprop.0+0x14>
 8010e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8010e8e:	d154      	bne.n	8010f3a <_strtoull_l.constprop.0+0xd6>
 8010e90:	781c      	ldrb	r4, [r3, #0]
 8010e92:	2301      	movs	r3, #1
 8010e94:	1c95      	adds	r5, r2, #2
 8010e96:	9306      	str	r3, [sp, #24]
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	d100      	bne.n	8010e9e <_strtoull_l.constprop.0+0x3a>
 8010e9c:	e088      	b.n	8010fb0 <_strtoull_l.constprop.0+0x14c>
 8010e9e:	2e10      	cmp	r6, #16
 8010ea0:	d10a      	bne.n	8010eb8 <_strtoull_l.constprop.0+0x54>
 8010ea2:	2c30      	cmp	r4, #48	; 0x30
 8010ea4:	d108      	bne.n	8010eb8 <_strtoull_l.constprop.0+0x54>
 8010ea6:	2220      	movs	r2, #32
 8010ea8:	782b      	ldrb	r3, [r5, #0]
 8010eaa:	4393      	bics	r3, r2
 8010eac:	2b58      	cmp	r3, #88	; 0x58
 8010eae:	d000      	beq.n	8010eb2 <_strtoull_l.constprop.0+0x4e>
 8010eb0:	e078      	b.n	8010fa4 <_strtoull_l.constprop.0+0x140>
 8010eb2:	2610      	movs	r6, #16
 8010eb4:	786c      	ldrb	r4, [r5, #1]
 8010eb6:	3502      	adds	r5, #2
 8010eb8:	17f7      	asrs	r7, r6, #31
 8010eba:	0032      	movs	r2, r6
 8010ebc:	003b      	movs	r3, r7
 8010ebe:	2001      	movs	r0, #1
 8010ec0:	4240      	negs	r0, r0
 8010ec2:	17c1      	asrs	r1, r0, #31
 8010ec4:	f7ef faee 	bl	80004a4 <__aeabi_uldivmod>
 8010ec8:	0032      	movs	r2, r6
 8010eca:	9007      	str	r0, [sp, #28]
 8010ecc:	9103      	str	r1, [sp, #12]
 8010ece:	003b      	movs	r3, r7
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	4240      	negs	r0, r0
 8010ed4:	17c1      	asrs	r1, r0, #31
 8010ed6:	f7ef fae5 	bl	80004a4 <__aeabi_uldivmod>
 8010eda:	2300      	movs	r3, #0
 8010edc:	2000      	movs	r0, #0
 8010ede:	2100      	movs	r1, #0
 8010ee0:	9208      	str	r2, [sp, #32]
 8010ee2:	0022      	movs	r2, r4
 8010ee4:	3a30      	subs	r2, #48	; 0x30
 8010ee6:	2a09      	cmp	r2, #9
 8010ee8:	d82d      	bhi.n	8010f46 <_strtoull_l.constprop.0+0xe2>
 8010eea:	0014      	movs	r4, r2
 8010eec:	42a6      	cmp	r6, r4
 8010eee:	dd39      	ble.n	8010f64 <_strtoull_l.constprop.0+0x100>
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	d01f      	beq.n	8010f34 <_strtoull_l.constprop.0+0xd0>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	4299      	cmp	r1, r3
 8010ef8:	d831      	bhi.n	8010f5e <_strtoull_l.constprop.0+0xfa>
 8010efa:	d102      	bne.n	8010f02 <_strtoull_l.constprop.0+0x9e>
 8010efc:	9b07      	ldr	r3, [sp, #28]
 8010efe:	4298      	cmp	r0, r3
 8010f00:	d82d      	bhi.n	8010f5e <_strtoull_l.constprop.0+0xfa>
 8010f02:	9b07      	ldr	r3, [sp, #28]
 8010f04:	4283      	cmp	r3, r0
 8010f06:	d107      	bne.n	8010f18 <_strtoull_l.constprop.0+0xb4>
 8010f08:	9b03      	ldr	r3, [sp, #12]
 8010f0a:	428b      	cmp	r3, r1
 8010f0c:	d104      	bne.n	8010f18 <_strtoull_l.constprop.0+0xb4>
 8010f0e:	2301      	movs	r3, #1
 8010f10:	9a08      	ldr	r2, [sp, #32]
 8010f12:	425b      	negs	r3, r3
 8010f14:	42a2      	cmp	r2, r4
 8010f16:	db0d      	blt.n	8010f34 <_strtoull_l.constprop.0+0xd0>
 8010f18:	000b      	movs	r3, r1
 8010f1a:	0002      	movs	r2, r0
 8010f1c:	0039      	movs	r1, r7
 8010f1e:	0030      	movs	r0, r6
 8010f20:	f7ef fae0 	bl	80004e4 <__aeabi_lmul>
 8010f24:	17e3      	asrs	r3, r4, #31
 8010f26:	9404      	str	r4, [sp, #16]
 8010f28:	9305      	str	r3, [sp, #20]
 8010f2a:	9b04      	ldr	r3, [sp, #16]
 8010f2c:	9c05      	ldr	r4, [sp, #20]
 8010f2e:	18c0      	adds	r0, r0, r3
 8010f30:	4161      	adcs	r1, r4
 8010f32:	2301      	movs	r3, #1
 8010f34:	782c      	ldrb	r4, [r5, #0]
 8010f36:	3501      	adds	r5, #1
 8010f38:	e7d3      	b.n	8010ee2 <_strtoull_l.constprop.0+0x7e>
 8010f3a:	9706      	str	r7, [sp, #24]
 8010f3c:	2c2b      	cmp	r4, #43	; 0x2b
 8010f3e:	d1ab      	bne.n	8010e98 <_strtoull_l.constprop.0+0x34>
 8010f40:	781c      	ldrb	r4, [r3, #0]
 8010f42:	1c95      	adds	r5, r2, #2
 8010f44:	e7a8      	b.n	8010e98 <_strtoull_l.constprop.0+0x34>
 8010f46:	0022      	movs	r2, r4
 8010f48:	3a41      	subs	r2, #65	; 0x41
 8010f4a:	2a19      	cmp	r2, #25
 8010f4c:	d801      	bhi.n	8010f52 <_strtoull_l.constprop.0+0xee>
 8010f4e:	3c37      	subs	r4, #55	; 0x37
 8010f50:	e7cc      	b.n	8010eec <_strtoull_l.constprop.0+0x88>
 8010f52:	0022      	movs	r2, r4
 8010f54:	3a61      	subs	r2, #97	; 0x61
 8010f56:	2a19      	cmp	r2, #25
 8010f58:	d804      	bhi.n	8010f64 <_strtoull_l.constprop.0+0x100>
 8010f5a:	3c57      	subs	r4, #87	; 0x57
 8010f5c:	e7c6      	b.n	8010eec <_strtoull_l.constprop.0+0x88>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	425b      	negs	r3, r3
 8010f62:	e7e7      	b.n	8010f34 <_strtoull_l.constprop.0+0xd0>
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	d10a      	bne.n	8010f7e <_strtoull_l.constprop.0+0x11a>
 8010f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f6a:	3323      	adds	r3, #35	; 0x23
 8010f6c:	6013      	str	r3, [r2, #0]
 8010f6e:	9b02      	ldr	r3, [sp, #8]
 8010f70:	2001      	movs	r0, #1
 8010f72:	4240      	negs	r0, r0
 8010f74:	17c1      	asrs	r1, r0, #31
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10e      	bne.n	8010f98 <_strtoull_l.constprop.0+0x134>
 8010f7a:	b00b      	add	sp, #44	; 0x2c
 8010f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7e:	9a06      	ldr	r2, [sp, #24]
 8010f80:	2a00      	cmp	r2, #0
 8010f82:	d004      	beq.n	8010f8e <_strtoull_l.constprop.0+0x12a>
 8010f84:	0006      	movs	r6, r0
 8010f86:	000f      	movs	r7, r1
 8010f88:	2100      	movs	r1, #0
 8010f8a:	4270      	negs	r0, r6
 8010f8c:	41b9      	sbcs	r1, r7
 8010f8e:	9a02      	ldr	r2, [sp, #8]
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	d0f2      	beq.n	8010f7a <_strtoull_l.constprop.0+0x116>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <_strtoull_l.constprop.0+0x138>
 8010f98:	1e6b      	subs	r3, r5, #1
 8010f9a:	9301      	str	r3, [sp, #4]
 8010f9c:	9b02      	ldr	r3, [sp, #8]
 8010f9e:	9a01      	ldr	r2, [sp, #4]
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	e7ea      	b.n	8010f7a <_strtoull_l.constprop.0+0x116>
 8010fa4:	2430      	movs	r4, #48	; 0x30
 8010fa6:	2e00      	cmp	r6, #0
 8010fa8:	d000      	beq.n	8010fac <_strtoull_l.constprop.0+0x148>
 8010faa:	e785      	b.n	8010eb8 <_strtoull_l.constprop.0+0x54>
 8010fac:	3608      	adds	r6, #8
 8010fae:	e783      	b.n	8010eb8 <_strtoull_l.constprop.0+0x54>
 8010fb0:	2c30      	cmp	r4, #48	; 0x30
 8010fb2:	d100      	bne.n	8010fb6 <_strtoull_l.constprop.0+0x152>
 8010fb4:	e777      	b.n	8010ea6 <_strtoull_l.constprop.0+0x42>
 8010fb6:	260a      	movs	r6, #10
 8010fb8:	e77e      	b.n	8010eb8 <_strtoull_l.constprop.0+0x54>
 8010fba:	46c0      	nop			; (mov r8, r8)
 8010fbc:	080141a9 	.word	0x080141a9

08010fc0 <_strtoull_r>:
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	f7ff ff4f 	bl	8010e64 <_strtoull_l.constprop.0>
 8010fc6:	bd10      	pop	{r4, pc}

08010fc8 <_mbrtowc_r>:
 8010fc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fca:	0004      	movs	r4, r0
 8010fcc:	0010      	movs	r0, r2
 8010fce:	4a0b      	ldr	r2, [pc, #44]	; (8010ffc <_mbrtowc_r+0x34>)
 8010fd0:	9d06      	ldr	r5, [sp, #24]
 8010fd2:	32e4      	adds	r2, #228	; 0xe4
 8010fd4:	6816      	ldr	r6, [r2, #0]
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d10c      	bne.n	8010ff4 <_mbrtowc_r+0x2c>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	0001      	movs	r1, r0
 8010fde:	4a08      	ldr	r2, [pc, #32]	; (8011000 <_mbrtowc_r+0x38>)
 8010fe0:	9500      	str	r5, [sp, #0]
 8010fe2:	0020      	movs	r0, r4
 8010fe4:	47b0      	blx	r6
 8010fe6:	1c43      	adds	r3, r0, #1
 8010fe8:	d103      	bne.n	8010ff2 <_mbrtowc_r+0x2a>
 8010fea:	2300      	movs	r3, #0
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	338a      	adds	r3, #138	; 0x8a
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010ff4:	0002      	movs	r2, r0
 8010ff6:	9500      	str	r5, [sp, #0]
 8010ff8:	e7f3      	b.n	8010fe2 <_mbrtowc_r+0x1a>
 8010ffa:	46c0      	nop			; (mov r8, r8)
 8010ffc:	20000444 	.word	0x20000444
 8011000:	08014533 	.word	0x08014533

08011004 <iswspace>:
 8011004:	b510      	push	{r4, lr}
 8011006:	2100      	movs	r1, #0
 8011008:	f000 f802 	bl	8011010 <iswspace_l>
 801100c:	bd10      	pop	{r4, pc}
	...

08011010 <iswspace_l>:
 8011010:	0003      	movs	r3, r0
 8011012:	2000      	movs	r0, #0
 8011014:	2bff      	cmp	r3, #255	; 0xff
 8011016:	d803      	bhi.n	8011020 <iswspace_l+0x10>
 8011018:	4a02      	ldr	r2, [pc, #8]	; (8011024 <iswspace_l+0x14>)
 801101a:	5cd0      	ldrb	r0, [r2, r3]
 801101c:	2308      	movs	r3, #8
 801101e:	4018      	ands	r0, r3
 8011020:	4770      	bx	lr
 8011022:	46c0      	nop			; (mov r8, r8)
 8011024:	080141a9 	.word	0x080141a9

08011028 <fiprintf>:
 8011028:	b40e      	push	{r1, r2, r3}
 801102a:	b517      	push	{r0, r1, r2, r4, lr}
 801102c:	4c05      	ldr	r4, [pc, #20]	; (8011044 <fiprintf+0x1c>)
 801102e:	ab05      	add	r3, sp, #20
 8011030:	cb04      	ldmia	r3!, {r2}
 8011032:	0001      	movs	r1, r0
 8011034:	6820      	ldr	r0, [r4, #0]
 8011036:	9301      	str	r3, [sp, #4]
 8011038:	f000 f954 	bl	80112e4 <_vfiprintf_r>
 801103c:	bc1e      	pop	{r1, r2, r3, r4}
 801103e:	bc08      	pop	{r3}
 8011040:	b003      	add	sp, #12
 8011042:	4718      	bx	r3
 8011044:	200006d0 	.word	0x200006d0

08011048 <__ssprint_r>:
 8011048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104a:	6813      	ldr	r3, [r2, #0]
 801104c:	b087      	sub	sp, #28
 801104e:	0017      	movs	r7, r2
 8011050:	9303      	str	r3, [sp, #12]
 8011052:	6893      	ldr	r3, [r2, #8]
 8011054:	2200      	movs	r2, #0
 8011056:	000c      	movs	r4, r1
 8011058:	9005      	str	r0, [sp, #20]
 801105a:	9202      	str	r2, [sp, #8]
 801105c:	9201      	str	r2, [sp, #4]
 801105e:	4293      	cmp	r3, r2
 8011060:	d10d      	bne.n	801107e <__ssprint_r+0x36>
 8011062:	2000      	movs	r0, #0
 8011064:	2300      	movs	r3, #0
 8011066:	607b      	str	r3, [r7, #4]
 8011068:	b007      	add	sp, #28
 801106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	9302      	str	r3, [sp, #8]
 8011072:	9b03      	ldr	r3, [sp, #12]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	9301      	str	r3, [sp, #4]
 8011078:	9b03      	ldr	r3, [sp, #12]
 801107a:	3308      	adds	r3, #8
 801107c:	9303      	str	r3, [sp, #12]
 801107e:	9a01      	ldr	r2, [sp, #4]
 8011080:	68a6      	ldr	r6, [r4, #8]
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	2a00      	cmp	r2, #0
 8011086:	d0f1      	beq.n	801106c <__ssprint_r+0x24>
 8011088:	42b2      	cmp	r2, r6
 801108a:	d32e      	bcc.n	80110ea <__ssprint_r+0xa2>
 801108c:	2190      	movs	r1, #144	; 0x90
 801108e:	89a2      	ldrh	r2, [r4, #12]
 8011090:	00c9      	lsls	r1, r1, #3
 8011092:	420a      	tst	r2, r1
 8011094:	d029      	beq.n	80110ea <__ssprint_r+0xa2>
 8011096:	2003      	movs	r0, #3
 8011098:	6921      	ldr	r1, [r4, #16]
 801109a:	1a5b      	subs	r3, r3, r1
 801109c:	9304      	str	r3, [sp, #16]
 801109e:	6963      	ldr	r3, [r4, #20]
 80110a0:	4343      	muls	r3, r0
 80110a2:	0fdd      	lsrs	r5, r3, #31
 80110a4:	18ed      	adds	r5, r5, r3
 80110a6:	9b04      	ldr	r3, [sp, #16]
 80110a8:	9801      	ldr	r0, [sp, #4]
 80110aa:	3301      	adds	r3, #1
 80110ac:	181b      	adds	r3, r3, r0
 80110ae:	106d      	asrs	r5, r5, #1
 80110b0:	42ab      	cmp	r3, r5
 80110b2:	d900      	bls.n	80110b6 <__ssprint_r+0x6e>
 80110b4:	001d      	movs	r5, r3
 80110b6:	0552      	lsls	r2, r2, #21
 80110b8:	d532      	bpl.n	8011120 <__ssprint_r+0xd8>
 80110ba:	0029      	movs	r1, r5
 80110bc:	9805      	ldr	r0, [sp, #20]
 80110be:	f7f9 fa35 	bl	800a52c <_malloc_r>
 80110c2:	1e06      	subs	r6, r0, #0
 80110c4:	d036      	beq.n	8011134 <__ssprint_r+0xec>
 80110c6:	9a04      	ldr	r2, [sp, #16]
 80110c8:	6921      	ldr	r1, [r4, #16]
 80110ca:	f7fa fd94 	bl	800bbf6 <memcpy>
 80110ce:	89a2      	ldrh	r2, [r4, #12]
 80110d0:	4b1e      	ldr	r3, [pc, #120]	; (801114c <__ssprint_r+0x104>)
 80110d2:	401a      	ands	r2, r3
 80110d4:	2380      	movs	r3, #128	; 0x80
 80110d6:	4313      	orrs	r3, r2
 80110d8:	81a3      	strh	r3, [r4, #12]
 80110da:	9b04      	ldr	r3, [sp, #16]
 80110dc:	6126      	str	r6, [r4, #16]
 80110de:	18f6      	adds	r6, r6, r3
 80110e0:	6026      	str	r6, [r4, #0]
 80110e2:	6165      	str	r5, [r4, #20]
 80110e4:	9e01      	ldr	r6, [sp, #4]
 80110e6:	1aed      	subs	r5, r5, r3
 80110e8:	60a5      	str	r5, [r4, #8]
 80110ea:	9b01      	ldr	r3, [sp, #4]
 80110ec:	429e      	cmp	r6, r3
 80110ee:	d900      	bls.n	80110f2 <__ssprint_r+0xaa>
 80110f0:	001e      	movs	r6, r3
 80110f2:	0032      	movs	r2, r6
 80110f4:	9902      	ldr	r1, [sp, #8]
 80110f6:	6820      	ldr	r0, [r4, #0]
 80110f8:	f001 f86d 	bl	80121d6 <memmove>
 80110fc:	9a01      	ldr	r2, [sp, #4]
 80110fe:	68a3      	ldr	r3, [r4, #8]
 8011100:	4694      	mov	ip, r2
 8011102:	1b9b      	subs	r3, r3, r6
 8011104:	60a3      	str	r3, [r4, #8]
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	199b      	adds	r3, r3, r6
 801110a:	6023      	str	r3, [r4, #0]
 801110c:	9b02      	ldr	r3, [sp, #8]
 801110e:	4463      	add	r3, ip
 8011110:	9302      	str	r3, [sp, #8]
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	1a9b      	subs	r3, r3, r2
 8011116:	60bb      	str	r3, [r7, #8]
 8011118:	d0a3      	beq.n	8011062 <__ssprint_r+0x1a>
 801111a:	2300      	movs	r3, #0
 801111c:	9301      	str	r3, [sp, #4]
 801111e:	e7ae      	b.n	801107e <__ssprint_r+0x36>
 8011120:	002a      	movs	r2, r5
 8011122:	9805      	ldr	r0, [sp, #20]
 8011124:	f7ff fbc0 	bl	80108a8 <_realloc_r>
 8011128:	1e06      	subs	r6, r0, #0
 801112a:	d1d6      	bne.n	80110da <__ssprint_r+0x92>
 801112c:	6921      	ldr	r1, [r4, #16]
 801112e:	9805      	ldr	r0, [sp, #20]
 8011130:	f7fa fddc 	bl	800bcec <_free_r>
 8011134:	230c      	movs	r3, #12
 8011136:	9a05      	ldr	r2, [sp, #20]
 8011138:	2001      	movs	r0, #1
 801113a:	6013      	str	r3, [r2, #0]
 801113c:	89a2      	ldrh	r2, [r4, #12]
 801113e:	3334      	adds	r3, #52	; 0x34
 8011140:	4313      	orrs	r3, r2
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	2300      	movs	r3, #0
 8011146:	4240      	negs	r0, r0
 8011148:	60bb      	str	r3, [r7, #8]
 801114a:	e78b      	b.n	8011064 <__ssprint_r+0x1c>
 801114c:	fffffb7f 	.word	0xfffffb7f

08011150 <_sungetc_r>:
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	0014      	movs	r4, r2
 8011154:	1c4b      	adds	r3, r1, #1
 8011156:	d103      	bne.n	8011160 <_sungetc_r+0x10>
 8011158:	2501      	movs	r5, #1
 801115a:	426d      	negs	r5, r5
 801115c:	0028      	movs	r0, r5
 801115e:	bd70      	pop	{r4, r5, r6, pc}
 8011160:	8993      	ldrh	r3, [r2, #12]
 8011162:	2220      	movs	r2, #32
 8011164:	4393      	bics	r3, r2
 8011166:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011168:	81a3      	strh	r3, [r4, #12]
 801116a:	b2ce      	uxtb	r6, r1
 801116c:	6863      	ldr	r3, [r4, #4]
 801116e:	b2cd      	uxtb	r5, r1
 8011170:	2a00      	cmp	r2, #0
 8011172:	d010      	beq.n	8011196 <_sungetc_r+0x46>
 8011174:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011176:	429a      	cmp	r2, r3
 8011178:	dd07      	ble.n	801118a <_sungetc_r+0x3a>
 801117a:	6823      	ldr	r3, [r4, #0]
 801117c:	3b01      	subs	r3, #1
 801117e:	6023      	str	r3, [r4, #0]
 8011180:	701e      	strb	r6, [r3, #0]
 8011182:	6863      	ldr	r3, [r4, #4]
 8011184:	3301      	adds	r3, #1
 8011186:	6063      	str	r3, [r4, #4]
 8011188:	e7e8      	b.n	801115c <_sungetc_r+0xc>
 801118a:	0021      	movs	r1, r4
 801118c:	f000 ff1a 	bl	8011fc4 <__submore>
 8011190:	2800      	cmp	r0, #0
 8011192:	d0f2      	beq.n	801117a <_sungetc_r+0x2a>
 8011194:	e7e0      	b.n	8011158 <_sungetc_r+0x8>
 8011196:	6921      	ldr	r1, [r4, #16]
 8011198:	6822      	ldr	r2, [r4, #0]
 801119a:	2900      	cmp	r1, #0
 801119c:	d007      	beq.n	80111ae <_sungetc_r+0x5e>
 801119e:	4291      	cmp	r1, r2
 80111a0:	d205      	bcs.n	80111ae <_sungetc_r+0x5e>
 80111a2:	1e51      	subs	r1, r2, #1
 80111a4:	7808      	ldrb	r0, [r1, #0]
 80111a6:	42a8      	cmp	r0, r5
 80111a8:	d101      	bne.n	80111ae <_sungetc_r+0x5e>
 80111aa:	6021      	str	r1, [r4, #0]
 80111ac:	e7ea      	b.n	8011184 <_sungetc_r+0x34>
 80111ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 80111b0:	0023      	movs	r3, r4
 80111b2:	3340      	adds	r3, #64	; 0x40
 80111b4:	6323      	str	r3, [r4, #48]	; 0x30
 80111b6:	2303      	movs	r3, #3
 80111b8:	6363      	str	r3, [r4, #52]	; 0x34
 80111ba:	0023      	movs	r3, r4
 80111bc:	3342      	adds	r3, #66	; 0x42
 80111be:	63a2      	str	r2, [r4, #56]	; 0x38
 80111c0:	701e      	strb	r6, [r3, #0]
 80111c2:	6023      	str	r3, [r4, #0]
 80111c4:	2301      	movs	r3, #1
 80111c6:	e7de      	b.n	8011186 <_sungetc_r+0x36>

080111c8 <__ssrefill_r>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	000c      	movs	r4, r1
 80111cc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80111ce:	2900      	cmp	r1, #0
 80111d0:	d00e      	beq.n	80111f0 <__ssrefill_r+0x28>
 80111d2:	0023      	movs	r3, r4
 80111d4:	3340      	adds	r3, #64	; 0x40
 80111d6:	4299      	cmp	r1, r3
 80111d8:	d001      	beq.n	80111de <__ssrefill_r+0x16>
 80111da:	f7fa fd87 	bl	800bcec <_free_r>
 80111de:	2000      	movs	r0, #0
 80111e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80111e2:	6320      	str	r0, [r4, #48]	; 0x30
 80111e4:	6063      	str	r3, [r4, #4]
 80111e6:	4283      	cmp	r3, r0
 80111e8:	d002      	beq.n	80111f0 <__ssrefill_r+0x28>
 80111ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80111ec:	6023      	str	r3, [r4, #0]
 80111ee:	bd10      	pop	{r4, pc}
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	2001      	movs	r0, #1
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	2300      	movs	r3, #0
 80111f8:	89a2      	ldrh	r2, [r4, #12]
 80111fa:	6063      	str	r3, [r4, #4]
 80111fc:	3320      	adds	r3, #32
 80111fe:	4313      	orrs	r3, r2
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	4240      	negs	r0, r0
 8011204:	e7f3      	b.n	80111ee <__ssrefill_r+0x26>

08011206 <_sfread_r>:
 8011206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011208:	0014      	movs	r4, r2
 801120a:	435c      	muls	r4, r3
 801120c:	b087      	sub	sp, #28
 801120e:	1e26      	subs	r6, r4, #0
 8011210:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011212:	9005      	str	r0, [sp, #20]
 8011214:	9101      	str	r1, [sp, #4]
 8011216:	9202      	str	r2, [sp, #8]
 8011218:	9303      	str	r3, [sp, #12]
 801121a:	d11e      	bne.n	801125a <_sfread_r+0x54>
 801121c:	0020      	movs	r0, r4
 801121e:	b007      	add	sp, #28
 8011220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011222:	003a      	movs	r2, r7
 8011224:	9801      	ldr	r0, [sp, #4]
 8011226:	f7fa fce6 	bl	800bbf6 <memcpy>
 801122a:	682b      	ldr	r3, [r5, #0]
 801122c:	0029      	movs	r1, r5
 801122e:	19db      	adds	r3, r3, r7
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	2300      	movs	r3, #0
 8011234:	606b      	str	r3, [r5, #4]
 8011236:	9b01      	ldr	r3, [sp, #4]
 8011238:	9805      	ldr	r0, [sp, #20]
 801123a:	19db      	adds	r3, r3, r7
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	1bf3      	subs	r3, r6, r7
 8011240:	9304      	str	r3, [sp, #16]
 8011242:	f7ff ffc1 	bl	80111c8 <__ssrefill_r>
 8011246:	2800      	cmp	r0, #0
 8011248:	d006      	beq.n	8011258 <_sfread_r+0x52>
 801124a:	193c      	adds	r4, r7, r4
 801124c:	1ba0      	subs	r0, r4, r6
 801124e:	9902      	ldr	r1, [sp, #8]
 8011250:	f7ee ff74 	bl	800013c <__udivsi3>
 8011254:	0004      	movs	r4, r0
 8011256:	e7e1      	b.n	801121c <_sfread_r+0x16>
 8011258:	9e04      	ldr	r6, [sp, #16]
 801125a:	686f      	ldr	r7, [r5, #4]
 801125c:	6829      	ldr	r1, [r5, #0]
 801125e:	42b7      	cmp	r7, r6
 8011260:	d3df      	bcc.n	8011222 <_sfread_r+0x1c>
 8011262:	0032      	movs	r2, r6
 8011264:	9801      	ldr	r0, [sp, #4]
 8011266:	f7fa fcc6 	bl	800bbf6 <memcpy>
 801126a:	686b      	ldr	r3, [r5, #4]
 801126c:	9c03      	ldr	r4, [sp, #12]
 801126e:	1b9b      	subs	r3, r3, r6
 8011270:	606b      	str	r3, [r5, #4]
 8011272:	682b      	ldr	r3, [r5, #0]
 8011274:	199b      	adds	r3, r3, r6
 8011276:	602b      	str	r3, [r5, #0]
 8011278:	e7d0      	b.n	801121c <_sfread_r+0x16>

0801127a <__sprint_r>:
 801127a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801127c:	6893      	ldr	r3, [r2, #8]
 801127e:	b085      	sub	sp, #20
 8011280:	9001      	str	r0, [sp, #4]
 8011282:	000d      	movs	r5, r1
 8011284:	0014      	movs	r4, r2
 8011286:	1e18      	subs	r0, r3, #0
 8011288:	d018      	beq.n	80112bc <__sprint_r+0x42>
 801128a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801128c:	049b      	lsls	r3, r3, #18
 801128e:	d524      	bpl.n	80112da <__sprint_r+0x60>
 8011290:	6817      	ldr	r7, [r2, #0]
 8011292:	2600      	movs	r6, #0
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	9302      	str	r3, [sp, #8]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	089b      	lsrs	r3, r3, #2
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	9b03      	ldr	r3, [sp, #12]
 80112a2:	42b3      	cmp	r3, r6
 80112a4:	dc0e      	bgt.n	80112c4 <__sprint_r+0x4a>
 80112a6:	2203      	movs	r2, #3
 80112a8:	9b00      	ldr	r3, [sp, #0]
 80112aa:	68a0      	ldr	r0, [r4, #8]
 80112ac:	4393      	bics	r3, r2
 80112ae:	1ac0      	subs	r0, r0, r3
 80112b0:	60a0      	str	r0, [r4, #8]
 80112b2:	3708      	adds	r7, #8
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d1ec      	bne.n	8011292 <__sprint_r+0x18>
 80112b8:	2300      	movs	r3, #0
 80112ba:	60a3      	str	r3, [r4, #8]
 80112bc:	2300      	movs	r3, #0
 80112be:	6063      	str	r3, [r4, #4]
 80112c0:	b005      	add	sp, #20
 80112c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112c4:	9902      	ldr	r1, [sp, #8]
 80112c6:	00b3      	lsls	r3, r6, #2
 80112c8:	58c9      	ldr	r1, [r1, r3]
 80112ca:	002a      	movs	r2, r5
 80112cc:	9801      	ldr	r0, [sp, #4]
 80112ce:	f000 ff59 	bl	8012184 <_fputwc_r>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	d0f0      	beq.n	80112b8 <__sprint_r+0x3e>
 80112d6:	3601      	adds	r6, #1
 80112d8:	e7e2      	b.n	80112a0 <__sprint_r+0x26>
 80112da:	9801      	ldr	r0, [sp, #4]
 80112dc:	f000 fd14 	bl	8011d08 <__sfvwrite_r>
 80112e0:	e7ea      	b.n	80112b8 <__sprint_r+0x3e>
	...

080112e4 <_vfiprintf_r>:
 80112e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112e6:	b0c1      	sub	sp, #260	; 0x104
 80112e8:	001c      	movs	r4, r3
 80112ea:	001f      	movs	r7, r3
 80112ec:	9006      	str	r0, [sp, #24]
 80112ee:	9103      	str	r1, [sp, #12]
 80112f0:	9207      	str	r2, [sp, #28]
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d004      	beq.n	8011300 <_vfiprintf_r+0x1c>
 80112f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <_vfiprintf_r+0x1c>
 80112fc:	f7fa fa98 	bl	800b830 <__sinit>
 8011300:	9b03      	ldr	r3, [sp, #12]
 8011302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011304:	07db      	lsls	r3, r3, #31
 8011306:	d407      	bmi.n	8011318 <_vfiprintf_r+0x34>
 8011308:	9b03      	ldr	r3, [sp, #12]
 801130a:	899b      	ldrh	r3, [r3, #12]
 801130c:	059b      	lsls	r3, r3, #22
 801130e:	d403      	bmi.n	8011318 <_vfiprintf_r+0x34>
 8011310:	9b03      	ldr	r3, [sp, #12]
 8011312:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011314:	f7fa fc62 	bl	800bbdc <__retarget_lock_acquire_recursive>
 8011318:	9b03      	ldr	r3, [sp, #12]
 801131a:	220c      	movs	r2, #12
 801131c:	5e9a      	ldrsh	r2, [r3, r2]
 801131e:	2380      	movs	r3, #128	; 0x80
 8011320:	019b      	lsls	r3, r3, #6
 8011322:	421a      	tst	r2, r3
 8011324:	d107      	bne.n	8011336 <_vfiprintf_r+0x52>
 8011326:	4313      	orrs	r3, r2
 8011328:	9a03      	ldr	r2, [sp, #12]
 801132a:	8193      	strh	r3, [r2, #12]
 801132c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801132e:	4aa3      	ldr	r2, [pc, #652]	; (80115bc <_vfiprintf_r+0x2d8>)
 8011330:	4013      	ands	r3, r2
 8011332:	9a03      	ldr	r2, [sp, #12]
 8011334:	6653      	str	r3, [r2, #100]	; 0x64
 8011336:	9b03      	ldr	r3, [sp, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	071b      	lsls	r3, r3, #28
 801133c:	d503      	bpl.n	8011346 <_vfiprintf_r+0x62>
 801133e:	9b03      	ldr	r3, [sp, #12]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d118      	bne.n	8011378 <_vfiprintf_r+0x94>
 8011346:	9903      	ldr	r1, [sp, #12]
 8011348:	9806      	ldr	r0, [sp, #24]
 801134a:	f000 fe79 	bl	8012040 <__swsetup_r>
 801134e:	2800      	cmp	r0, #0
 8011350:	d012      	beq.n	8011378 <_vfiprintf_r+0x94>
 8011352:	9b03      	ldr	r3, [sp, #12]
 8011354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011356:	07db      	lsls	r3, r3, #31
 8011358:	d505      	bpl.n	8011366 <_vfiprintf_r+0x82>
 801135a:	2301      	movs	r3, #1
 801135c:	425b      	negs	r3, r3
 801135e:	9308      	str	r3, [sp, #32]
 8011360:	9808      	ldr	r0, [sp, #32]
 8011362:	b041      	add	sp, #260	; 0x104
 8011364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011366:	9b03      	ldr	r3, [sp, #12]
 8011368:	899b      	ldrh	r3, [r3, #12]
 801136a:	059b      	lsls	r3, r3, #22
 801136c:	d4f5      	bmi.n	801135a <_vfiprintf_r+0x76>
 801136e:	9b03      	ldr	r3, [sp, #12]
 8011370:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011372:	f7fa fc34 	bl	800bbde <__retarget_lock_release_recursive>
 8011376:	e7f0      	b.n	801135a <_vfiprintf_r+0x76>
 8011378:	221a      	movs	r2, #26
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	899b      	ldrh	r3, [r3, #12]
 801137e:	401a      	ands	r2, r3
 8011380:	2a0a      	cmp	r2, #10
 8011382:	d116      	bne.n	80113b2 <_vfiprintf_r+0xce>
 8011384:	9a03      	ldr	r2, [sp, #12]
 8011386:	210e      	movs	r1, #14
 8011388:	5e52      	ldrsh	r2, [r2, r1]
 801138a:	2a00      	cmp	r2, #0
 801138c:	db11      	blt.n	80113b2 <_vfiprintf_r+0xce>
 801138e:	9a03      	ldr	r2, [sp, #12]
 8011390:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011392:	07d2      	lsls	r2, r2, #31
 8011394:	d405      	bmi.n	80113a2 <_vfiprintf_r+0xbe>
 8011396:	059b      	lsls	r3, r3, #22
 8011398:	d403      	bmi.n	80113a2 <_vfiprintf_r+0xbe>
 801139a:	9b03      	ldr	r3, [sp, #12]
 801139c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801139e:	f7fa fc1e 	bl	800bbde <__retarget_lock_release_recursive>
 80113a2:	0023      	movs	r3, r4
 80113a4:	9a07      	ldr	r2, [sp, #28]
 80113a6:	9903      	ldr	r1, [sp, #12]
 80113a8:	9806      	ldr	r0, [sp, #24]
 80113aa:	f000 fc69 	bl	8011c80 <__sbprintf>
 80113ae:	9008      	str	r0, [sp, #32]
 80113b0:	e7d6      	b.n	8011360 <_vfiprintf_r+0x7c>
 80113b2:	2300      	movs	r3, #0
 80113b4:	ad17      	add	r5, sp, #92	; 0x5c
 80113b6:	9514      	str	r5, [sp, #80]	; 0x50
 80113b8:	9316      	str	r3, [sp, #88]	; 0x58
 80113ba:	9315      	str	r3, [sp, #84]	; 0x54
 80113bc:	930c      	str	r3, [sp, #48]	; 0x30
 80113be:	930d      	str	r3, [sp, #52]	; 0x34
 80113c0:	930e      	str	r3, [sp, #56]	; 0x38
 80113c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80113c4:	9308      	str	r3, [sp, #32]
 80113c6:	9c07      	ldr	r4, [sp, #28]
 80113c8:	7823      	ldrb	r3, [r4, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <_vfiprintf_r+0xf0>
 80113ce:	2b25      	cmp	r3, #37	; 0x25
 80113d0:	d000      	beq.n	80113d4 <_vfiprintf_r+0xf0>
 80113d2:	e08d      	b.n	80114f0 <_vfiprintf_r+0x20c>
 80113d4:	9b07      	ldr	r3, [sp, #28]
 80113d6:	1ae6      	subs	r6, r4, r3
 80113d8:	429c      	cmp	r4, r3
 80113da:	d016      	beq.n	801140a <_vfiprintf_r+0x126>
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80113e0:	606e      	str	r6, [r5, #4]
 80113e2:	199b      	adds	r3, r3, r6
 80113e4:	9316      	str	r3, [sp, #88]	; 0x58
 80113e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113e8:	3508      	adds	r5, #8
 80113ea:	3301      	adds	r3, #1
 80113ec:	9315      	str	r3, [sp, #84]	; 0x54
 80113ee:	2b07      	cmp	r3, #7
 80113f0:	dd08      	ble.n	8011404 <_vfiprintf_r+0x120>
 80113f2:	9903      	ldr	r1, [sp, #12]
 80113f4:	9806      	ldr	r0, [sp, #24]
 80113f6:	aa14      	add	r2, sp, #80	; 0x50
 80113f8:	f7ff ff3f 	bl	801127a <__sprint_r>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d000      	beq.n	8011402 <_vfiprintf_r+0x11e>
 8011400:	e3d9      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011402:	ad17      	add	r5, sp, #92	; 0x5c
 8011404:	9b08      	ldr	r3, [sp, #32]
 8011406:	199b      	adds	r3, r3, r6
 8011408:	9308      	str	r3, [sp, #32]
 801140a:	7823      	ldrb	r3, [r4, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <_vfiprintf_r+0x130>
 8011410:	f000 fbf6 	bl	8011c00 <_vfiprintf_r+0x91c>
 8011414:	2200      	movs	r2, #0
 8011416:	a912      	add	r1, sp, #72	; 0x48
 8011418:	70ca      	strb	r2, [r1, #3]
 801141a:	2101      	movs	r1, #1
 801141c:	1c63      	adds	r3, r4, #1
 801141e:	0014      	movs	r4, r2
 8011420:	4249      	negs	r1, r1
 8011422:	9105      	str	r1, [sp, #20]
 8011424:	9209      	str	r2, [sp, #36]	; 0x24
 8011426:	1c5a      	adds	r2, r3, #1
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	9207      	str	r2, [sp, #28]
 801142c:	0018      	movs	r0, r3
 801142e:	3820      	subs	r0, #32
 8011430:	285a      	cmp	r0, #90	; 0x5a
 8011432:	d900      	bls.n	8011436 <_vfiprintf_r+0x152>
 8011434:	e362      	b.n	8011afc <_vfiprintf_r+0x818>
 8011436:	f7ee fe77 	bl	8000128 <__gnu_thumb1_case_uhi>
 801143a:	0078      	.short	0x0078
 801143c:	03610361 	.word	0x03610361
 8011440:	03610081 	.word	0x03610081
 8011444:	03610361 	.word	0x03610361
 8011448:	0361005d 	.word	0x0361005d
 801144c:	00830361 	.word	0x00830361
 8011450:	0361008b 	.word	0x0361008b
 8011454:	008f0089 	.word	0x008f0089
 8011458:	00ad0361 	.word	0x00ad0361
 801145c:	00af00af 	.word	0x00af00af
 8011460:	00af00af 	.word	0x00af00af
 8011464:	00af00af 	.word	0x00af00af
 8011468:	00af00af 	.word	0x00af00af
 801146c:	036100af 	.word	0x036100af
 8011470:	03610361 	.word	0x03610361
 8011474:	03610361 	.word	0x03610361
 8011478:	03610361 	.word	0x03610361
 801147c:	03610361 	.word	0x03610361
 8011480:	00e600da 	.word	0x00e600da
 8011484:	03610361 	.word	0x03610361
 8011488:	03610361 	.word	0x03610361
 801148c:	03610361 	.word	0x03610361
 8011490:	03610361 	.word	0x03610361
 8011494:	03610361 	.word	0x03610361
 8011498:	03610143 	.word	0x03610143
 801149c:	03610361 	.word	0x03610361
 80114a0:	03610182 	.word	0x03610182
 80114a4:	0361027c 	.word	0x0361027c
 80114a8:	02ae0361 	.word	0x02ae0361
 80114ac:	03610361 	.word	0x03610361
 80114b0:	03610361 	.word	0x03610361
 80114b4:	03610361 	.word	0x03610361
 80114b8:	03610361 	.word	0x03610361
 80114bc:	03610361 	.word	0x03610361
 80114c0:	00e800da 	.word	0x00e800da
 80114c4:	03610361 	.word	0x03610361
 80114c8:	00c30361 	.word	0x00c30361
 80114cc:	00d600e8 	.word	0x00d600e8
 80114d0:	00cf0361 	.word	0x00cf0361
 80114d4:	01260361 	.word	0x01260361
 80114d8:	01740145 	.word	0x01740145
 80114dc:	036100d6 	.word	0x036100d6
 80114e0:	007f0182 	.word	0x007f0182
 80114e4:	0361027e 	.word	0x0361027e
 80114e8:	02cd0361 	.word	0x02cd0361
 80114ec:	007f0361 	.word	0x007f0361
 80114f0:	3401      	adds	r4, #1
 80114f2:	e769      	b.n	80113c8 <_vfiprintf_r+0xe4>
 80114f4:	9806      	ldr	r0, [sp, #24]
 80114f6:	f7fe fa47 	bl	800f988 <_localeconv_r>
 80114fa:	6843      	ldr	r3, [r0, #4]
 80114fc:	0018      	movs	r0, r3
 80114fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011500:	f7ee fe00 	bl	8000104 <strlen>
 8011504:	900e      	str	r0, [sp, #56]	; 0x38
 8011506:	9806      	ldr	r0, [sp, #24]
 8011508:	f7fe fa3e 	bl	800f988 <_localeconv_r>
 801150c:	6883      	ldr	r3, [r0, #8]
 801150e:	930d      	str	r3, [sp, #52]	; 0x34
 8011510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011512:	2b00      	cmp	r3, #0
 8011514:	d010      	beq.n	8011538 <_vfiprintf_r+0x254>
 8011516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011518:	2b00      	cmp	r3, #0
 801151a:	d00d      	beq.n	8011538 <_vfiprintf_r+0x254>
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00a      	beq.n	8011538 <_vfiprintf_r+0x254>
 8011522:	2380      	movs	r3, #128	; 0x80
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	431c      	orrs	r4, r3
 8011528:	e006      	b.n	8011538 <_vfiprintf_r+0x254>
 801152a:	ab12      	add	r3, sp, #72	; 0x48
 801152c:	78da      	ldrb	r2, [r3, #3]
 801152e:	3303      	adds	r3, #3
 8011530:	2a00      	cmp	r2, #0
 8011532:	d101      	bne.n	8011538 <_vfiprintf_r+0x254>
 8011534:	3220      	adds	r2, #32
 8011536:	701a      	strb	r2, [r3, #0]
 8011538:	9b07      	ldr	r3, [sp, #28]
 801153a:	e774      	b.n	8011426 <_vfiprintf_r+0x142>
 801153c:	2301      	movs	r3, #1
 801153e:	e7f2      	b.n	8011526 <_vfiprintf_r+0x242>
 8011540:	cf08      	ldmia	r7!, {r3}
 8011542:	9309      	str	r3, [sp, #36]	; 0x24
 8011544:	2b00      	cmp	r3, #0
 8011546:	daf7      	bge.n	8011538 <_vfiprintf_r+0x254>
 8011548:	425b      	negs	r3, r3
 801154a:	9309      	str	r3, [sp, #36]	; 0x24
 801154c:	2304      	movs	r3, #4
 801154e:	e7ea      	b.n	8011526 <_vfiprintf_r+0x242>
 8011550:	222b      	movs	r2, #43	; 0x2b
 8011552:	ab12      	add	r3, sp, #72	; 0x48
 8011554:	70da      	strb	r2, [r3, #3]
 8011556:	e7ef      	b.n	8011538 <_vfiprintf_r+0x254>
 8011558:	9b07      	ldr	r3, [sp, #28]
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	2b2a      	cmp	r3, #42	; 0x2a
 8011560:	d00f      	beq.n	8011582 <_vfiprintf_r+0x29e>
 8011562:	2100      	movs	r1, #0
 8011564:	9105      	str	r1, [sp, #20]
 8011566:	0019      	movs	r1, r3
 8011568:	3930      	subs	r1, #48	; 0x30
 801156a:	9207      	str	r2, [sp, #28]
 801156c:	2909      	cmp	r1, #9
 801156e:	d900      	bls.n	8011572 <_vfiprintf_r+0x28e>
 8011570:	e75c      	b.n	801142c <_vfiprintf_r+0x148>
 8011572:	200a      	movs	r0, #10
 8011574:	9b05      	ldr	r3, [sp, #20]
 8011576:	4343      	muls	r3, r0
 8011578:	185b      	adds	r3, r3, r1
 801157a:	9305      	str	r3, [sp, #20]
 801157c:	7813      	ldrb	r3, [r2, #0]
 801157e:	3201      	adds	r2, #1
 8011580:	e7f1      	b.n	8011566 <_vfiprintf_r+0x282>
 8011582:	cf08      	ldmia	r7!, {r3}
 8011584:	9305      	str	r3, [sp, #20]
 8011586:	2b00      	cmp	r3, #0
 8011588:	da02      	bge.n	8011590 <_vfiprintf_r+0x2ac>
 801158a:	2301      	movs	r3, #1
 801158c:	425b      	negs	r3, r3
 801158e:	9305      	str	r3, [sp, #20]
 8011590:	9207      	str	r2, [sp, #28]
 8011592:	e7d1      	b.n	8011538 <_vfiprintf_r+0x254>
 8011594:	2380      	movs	r3, #128	; 0x80
 8011596:	e7c6      	b.n	8011526 <_vfiprintf_r+0x242>
 8011598:	2100      	movs	r1, #0
 801159a:	9a07      	ldr	r2, [sp, #28]
 801159c:	9109      	str	r1, [sp, #36]	; 0x24
 801159e:	200a      	movs	r0, #10
 80115a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115a2:	3b30      	subs	r3, #48	; 0x30
 80115a4:	4341      	muls	r1, r0
 80115a6:	185b      	adds	r3, r3, r1
 80115a8:	9309      	str	r3, [sp, #36]	; 0x24
 80115aa:	0013      	movs	r3, r2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	3201      	adds	r2, #1
 80115b0:	0019      	movs	r1, r3
 80115b2:	3930      	subs	r1, #48	; 0x30
 80115b4:	9207      	str	r2, [sp, #28]
 80115b6:	2909      	cmp	r1, #9
 80115b8:	d9f1      	bls.n	801159e <_vfiprintf_r+0x2ba>
 80115ba:	e737      	b.n	801142c <_vfiprintf_r+0x148>
 80115bc:	ffffdfff 	.word	0xffffdfff
 80115c0:	9b07      	ldr	r3, [sp, #28]
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	2b68      	cmp	r3, #104	; 0x68
 80115c6:	d105      	bne.n	80115d4 <_vfiprintf_r+0x2f0>
 80115c8:	9b07      	ldr	r3, [sp, #28]
 80115ca:	3301      	adds	r3, #1
 80115cc:	9307      	str	r3, [sp, #28]
 80115ce:	2380      	movs	r3, #128	; 0x80
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	e7a8      	b.n	8011526 <_vfiprintf_r+0x242>
 80115d4:	2340      	movs	r3, #64	; 0x40
 80115d6:	e7a6      	b.n	8011526 <_vfiprintf_r+0x242>
 80115d8:	9b07      	ldr	r3, [sp, #28]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b6c      	cmp	r3, #108	; 0x6c
 80115de:	d104      	bne.n	80115ea <_vfiprintf_r+0x306>
 80115e0:	9b07      	ldr	r3, [sp, #28]
 80115e2:	3301      	adds	r3, #1
 80115e4:	9307      	str	r3, [sp, #28]
 80115e6:	2320      	movs	r3, #32
 80115e8:	e79d      	b.n	8011526 <_vfiprintf_r+0x242>
 80115ea:	2310      	movs	r3, #16
 80115ec:	e79b      	b.n	8011526 <_vfiprintf_r+0x242>
 80115ee:	003a      	movs	r2, r7
 80115f0:	ca08      	ldmia	r2!, {r3}
 80115f2:	ae27      	add	r6, sp, #156	; 0x9c
 80115f4:	7033      	strb	r3, [r6, #0]
 80115f6:	2300      	movs	r3, #0
 80115f8:	9204      	str	r2, [sp, #16]
 80115fa:	aa12      	add	r2, sp, #72	; 0x48
 80115fc:	70d3      	strb	r3, [r2, #3]
 80115fe:	2201      	movs	r2, #1
 8011600:	930b      	str	r3, [sp, #44]	; 0x2c
 8011602:	9205      	str	r2, [sp, #20]
 8011604:	e0b0      	b.n	8011768 <_vfiprintf_r+0x484>
 8011606:	2310      	movs	r3, #16
 8011608:	431c      	orrs	r4, r3
 801160a:	06a3      	lsls	r3, r4, #26
 801160c:	d52a      	bpl.n	8011664 <_vfiprintf_r+0x380>
 801160e:	2307      	movs	r3, #7
 8011610:	3707      	adds	r7, #7
 8011612:	439f      	bics	r7, r3
 8011614:	0039      	movs	r1, r7
 8011616:	c90c      	ldmia	r1!, {r2, r3}
 8011618:	9200      	str	r2, [sp, #0]
 801161a:	9301      	str	r3, [sp, #4]
 801161c:	9104      	str	r1, [sp, #16]
 801161e:	9a01      	ldr	r2, [sp, #4]
 8011620:	2301      	movs	r3, #1
 8011622:	2a00      	cmp	r2, #0
 8011624:	da09      	bge.n	801163a <_vfiprintf_r+0x356>
 8011626:	9e00      	ldr	r6, [sp, #0]
 8011628:	9f01      	ldr	r7, [sp, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	4271      	negs	r1, r6
 801162e:	41ba      	sbcs	r2, r7
 8011630:	9100      	str	r1, [sp, #0]
 8011632:	9201      	str	r2, [sp, #4]
 8011634:	212d      	movs	r1, #45	; 0x2d
 8011636:	aa12      	add	r2, sp, #72	; 0x48
 8011638:	70d1      	strb	r1, [r2, #3]
 801163a:	9901      	ldr	r1, [sp, #4]
 801163c:	9a00      	ldr	r2, [sp, #0]
 801163e:	430a      	orrs	r2, r1
 8011640:	9905      	ldr	r1, [sp, #20]
 8011642:	3101      	adds	r1, #1
 8011644:	d100      	bne.n	8011648 <_vfiprintf_r+0x364>
 8011646:	e2e9      	b.n	8011c1c <_vfiprintf_r+0x938>
 8011648:	2180      	movs	r1, #128	; 0x80
 801164a:	0027      	movs	r7, r4
 801164c:	438f      	bics	r7, r1
 801164e:	2a00      	cmp	r2, #0
 8011650:	d000      	beq.n	8011654 <_vfiprintf_r+0x370>
 8011652:	e2e7      	b.n	8011c24 <_vfiprintf_r+0x940>
 8011654:	9a05      	ldr	r2, [sp, #20]
 8011656:	2a00      	cmp	r2, #0
 8011658:	d100      	bne.n	801165c <_vfiprintf_r+0x378>
 801165a:	e243      	b.n	8011ae4 <_vfiprintf_r+0x800>
 801165c:	2b01      	cmp	r3, #1
 801165e:	d000      	beq.n	8011662 <_vfiprintf_r+0x37e>
 8011660:	e2e3      	b.n	8011c2a <_vfiprintf_r+0x946>
 8011662:	e1e7      	b.n	8011a34 <_vfiprintf_r+0x750>
 8011664:	003a      	movs	r2, r7
 8011666:	ca08      	ldmia	r2!, {r3}
 8011668:	9204      	str	r2, [sp, #16]
 801166a:	06e2      	lsls	r2, r4, #27
 801166c:	d503      	bpl.n	8011676 <_vfiprintf_r+0x392>
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	17db      	asrs	r3, r3, #31
 8011672:	9301      	str	r3, [sp, #4]
 8011674:	e7d3      	b.n	801161e <_vfiprintf_r+0x33a>
 8011676:	0662      	lsls	r2, r4, #25
 8011678:	d501      	bpl.n	801167e <_vfiprintf_r+0x39a>
 801167a:	b21b      	sxth	r3, r3
 801167c:	e7f7      	b.n	801166e <_vfiprintf_r+0x38a>
 801167e:	05a2      	lsls	r2, r4, #22
 8011680:	d5f5      	bpl.n	801166e <_vfiprintf_r+0x38a>
 8011682:	b25b      	sxtb	r3, r3
 8011684:	e7f3      	b.n	801166e <_vfiprintf_r+0x38a>
 8011686:	1d3b      	adds	r3, r7, #4
 8011688:	9304      	str	r3, [sp, #16]
 801168a:	06a3      	lsls	r3, r4, #26
 801168c:	d506      	bpl.n	801169c <_vfiprintf_r+0x3b8>
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	9a08      	ldr	r2, [sp, #32]
 8011692:	601a      	str	r2, [r3, #0]
 8011694:	17d2      	asrs	r2, r2, #31
 8011696:	605a      	str	r2, [r3, #4]
 8011698:	9f04      	ldr	r7, [sp, #16]
 801169a:	e694      	b.n	80113c6 <_vfiprintf_r+0xe2>
 801169c:	06e3      	lsls	r3, r4, #27
 801169e:	d503      	bpl.n	80116a8 <_vfiprintf_r+0x3c4>
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	9a08      	ldr	r2, [sp, #32]
 80116a4:	601a      	str	r2, [r3, #0]
 80116a6:	e7f7      	b.n	8011698 <_vfiprintf_r+0x3b4>
 80116a8:	0663      	lsls	r3, r4, #25
 80116aa:	d503      	bpl.n	80116b4 <_vfiprintf_r+0x3d0>
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	9a08      	ldr	r2, [sp, #32]
 80116b0:	801a      	strh	r2, [r3, #0]
 80116b2:	e7f1      	b.n	8011698 <_vfiprintf_r+0x3b4>
 80116b4:	05a4      	lsls	r4, r4, #22
 80116b6:	d5f3      	bpl.n	80116a0 <_vfiprintf_r+0x3bc>
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	9a08      	ldr	r2, [sp, #32]
 80116bc:	701a      	strb	r2, [r3, #0]
 80116be:	e7eb      	b.n	8011698 <_vfiprintf_r+0x3b4>
 80116c0:	2310      	movs	r3, #16
 80116c2:	431c      	orrs	r4, r3
 80116c4:	2320      	movs	r3, #32
 80116c6:	0020      	movs	r0, r4
 80116c8:	4018      	ands	r0, r3
 80116ca:	421c      	tst	r4, r3
 80116cc:	d00d      	beq.n	80116ea <_vfiprintf_r+0x406>
 80116ce:	3b19      	subs	r3, #25
 80116d0:	3707      	adds	r7, #7
 80116d2:	439f      	bics	r7, r3
 80116d4:	0039      	movs	r1, r7
 80116d6:	c90c      	ldmia	r1!, {r2, r3}
 80116d8:	9200      	str	r2, [sp, #0]
 80116da:	9301      	str	r3, [sp, #4]
 80116dc:	9104      	str	r1, [sp, #16]
 80116de:	4bcc      	ldr	r3, [pc, #816]	; (8011a10 <_vfiprintf_r+0x72c>)
 80116e0:	401c      	ands	r4, r3
 80116e2:	2300      	movs	r3, #0
 80116e4:	2100      	movs	r1, #0
 80116e6:	aa12      	add	r2, sp, #72	; 0x48
 80116e8:	e7a6      	b.n	8011638 <_vfiprintf_r+0x354>
 80116ea:	003a      	movs	r2, r7
 80116ec:	ca08      	ldmia	r2!, {r3}
 80116ee:	0021      	movs	r1, r4
 80116f0:	9204      	str	r2, [sp, #16]
 80116f2:	2210      	movs	r2, #16
 80116f4:	4011      	ands	r1, r2
 80116f6:	4214      	tst	r4, r2
 80116f8:	d002      	beq.n	8011700 <_vfiprintf_r+0x41c>
 80116fa:	9300      	str	r3, [sp, #0]
 80116fc:	9001      	str	r0, [sp, #4]
 80116fe:	e7ee      	b.n	80116de <_vfiprintf_r+0x3fa>
 8011700:	2240      	movs	r2, #64	; 0x40
 8011702:	0020      	movs	r0, r4
 8011704:	4010      	ands	r0, r2
 8011706:	4214      	tst	r4, r2
 8011708:	d003      	beq.n	8011712 <_vfiprintf_r+0x42e>
 801170a:	b29b      	uxth	r3, r3
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	9101      	str	r1, [sp, #4]
 8011710:	e7e5      	b.n	80116de <_vfiprintf_r+0x3fa>
 8011712:	2280      	movs	r2, #128	; 0x80
 8011714:	0021      	movs	r1, r4
 8011716:	0092      	lsls	r2, r2, #2
 8011718:	4011      	ands	r1, r2
 801171a:	4214      	tst	r4, r2
 801171c:	d0f6      	beq.n	801170c <_vfiprintf_r+0x428>
 801171e:	b2db      	uxtb	r3, r3
 8011720:	e7eb      	b.n	80116fa <_vfiprintf_r+0x416>
 8011722:	003b      	movs	r3, r7
 8011724:	cb04      	ldmia	r3!, {r2}
 8011726:	49bb      	ldr	r1, [pc, #748]	; (8011a14 <_vfiprintf_r+0x730>)
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	2300      	movs	r3, #0
 801172c:	9200      	str	r2, [sp, #0]
 801172e:	aa13      	add	r2, sp, #76	; 0x4c
 8011730:	8011      	strh	r1, [r2, #0]
 8011732:	4ab9      	ldr	r2, [pc, #740]	; (8011a18 <_vfiprintf_r+0x734>)
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	3302      	adds	r3, #2
 8011738:	431c      	orrs	r4, r3
 801173a:	920c      	str	r2, [sp, #48]	; 0x30
 801173c:	e7d2      	b.n	80116e4 <_vfiprintf_r+0x400>
 801173e:	003b      	movs	r3, r7
 8011740:	2700      	movs	r7, #0
 8011742:	cb40      	ldmia	r3!, {r6}
 8011744:	9304      	str	r3, [sp, #16]
 8011746:	ab12      	add	r3, sp, #72	; 0x48
 8011748:	70df      	strb	r7, [r3, #3]
 801174a:	9b05      	ldr	r3, [sp, #20]
 801174c:	3301      	adds	r3, #1
 801174e:	d100      	bne.n	8011752 <_vfiprintf_r+0x46e>
 8011750:	e0ea      	b.n	8011928 <_vfiprintf_r+0x644>
 8011752:	0039      	movs	r1, r7
 8011754:	0030      	movs	r0, r6
 8011756:	9a05      	ldr	r2, [sp, #20]
 8011758:	f7fe f92e 	bl	800f9b8 <memchr>
 801175c:	900b      	str	r0, [sp, #44]	; 0x2c
 801175e:	42b8      	cmp	r0, r7
 8011760:	d002      	beq.n	8011768 <_vfiprintf_r+0x484>
 8011762:	1b83      	subs	r3, r0, r6
 8011764:	9305      	str	r3, [sp, #20]
 8011766:	970b      	str	r7, [sp, #44]	; 0x2c
 8011768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801176a:	9a05      	ldr	r2, [sp, #20]
 801176c:	930a      	str	r3, [sp, #40]	; 0x28
 801176e:	4293      	cmp	r3, r2
 8011770:	da00      	bge.n	8011774 <_vfiprintf_r+0x490>
 8011772:	920a      	str	r2, [sp, #40]	; 0x28
 8011774:	ab12      	add	r3, sp, #72	; 0x48
 8011776:	3303      	adds	r3, #3
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	1e5a      	subs	r2, r3, #1
 801177c:	4193      	sbcs	r3, r2
 801177e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011780:	18d3      	adds	r3, r2, r3
 8011782:	930a      	str	r3, [sp, #40]	; 0x28
 8011784:	0022      	movs	r2, r4
 8011786:	2302      	movs	r3, #2
 8011788:	401a      	ands	r2, r3
 801178a:	9210      	str	r2, [sp, #64]	; 0x40
 801178c:	421c      	tst	r4, r3
 801178e:	d002      	beq.n	8011796 <_vfiprintf_r+0x4b2>
 8011790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011792:	3302      	adds	r3, #2
 8011794:	930a      	str	r3, [sp, #40]	; 0x28
 8011796:	2384      	movs	r3, #132	; 0x84
 8011798:	0022      	movs	r2, r4
 801179a:	401a      	ands	r2, r3
 801179c:	9211      	str	r2, [sp, #68]	; 0x44
 801179e:	421c      	tst	r4, r3
 80117a0:	d11e      	bne.n	80117e0 <_vfiprintf_r+0x4fc>
 80117a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a6:	1a9f      	subs	r7, r3, r2
 80117a8:	2f00      	cmp	r7, #0
 80117aa:	dd19      	ble.n	80117e0 <_vfiprintf_r+0x4fc>
 80117ac:	0029      	movs	r1, r5
 80117ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117b0:	489a      	ldr	r0, [pc, #616]	; (8011a1c <_vfiprintf_r+0x738>)
 80117b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80117b4:	3301      	adds	r3, #1
 80117b6:	3108      	adds	r1, #8
 80117b8:	6028      	str	r0, [r5, #0]
 80117ba:	2f10      	cmp	r7, #16
 80117bc:	dd00      	ble.n	80117c0 <_vfiprintf_r+0x4dc>
 80117be:	e1a7      	b.n	8011b10 <_vfiprintf_r+0x82c>
 80117c0:	606f      	str	r7, [r5, #4]
 80117c2:	18bf      	adds	r7, r7, r2
 80117c4:	000d      	movs	r5, r1
 80117c6:	9716      	str	r7, [sp, #88]	; 0x58
 80117c8:	9315      	str	r3, [sp, #84]	; 0x54
 80117ca:	2b07      	cmp	r3, #7
 80117cc:	dd08      	ble.n	80117e0 <_vfiprintf_r+0x4fc>
 80117ce:	9903      	ldr	r1, [sp, #12]
 80117d0:	9806      	ldr	r0, [sp, #24]
 80117d2:	aa14      	add	r2, sp, #80	; 0x50
 80117d4:	f7ff fd51 	bl	801127a <__sprint_r>
 80117d8:	2800      	cmp	r0, #0
 80117da:	d000      	beq.n	80117de <_vfiprintf_r+0x4fa>
 80117dc:	e1eb      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 80117de:	ad17      	add	r5, sp, #92	; 0x5c
 80117e0:	a912      	add	r1, sp, #72	; 0x48
 80117e2:	78c8      	ldrb	r0, [r1, #3]
 80117e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80117e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117e8:	3103      	adds	r1, #3
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d012      	beq.n	8011814 <_vfiprintf_r+0x530>
 80117ee:	6029      	str	r1, [r5, #0]
 80117f0:	2101      	movs	r1, #1
 80117f2:	3301      	adds	r3, #1
 80117f4:	1852      	adds	r2, r2, r1
 80117f6:	6069      	str	r1, [r5, #4]
 80117f8:	9216      	str	r2, [sp, #88]	; 0x58
 80117fa:	9315      	str	r3, [sp, #84]	; 0x54
 80117fc:	3508      	adds	r5, #8
 80117fe:	2b07      	cmp	r3, #7
 8011800:	dd08      	ble.n	8011814 <_vfiprintf_r+0x530>
 8011802:	9903      	ldr	r1, [sp, #12]
 8011804:	9806      	ldr	r0, [sp, #24]
 8011806:	aa14      	add	r2, sp, #80	; 0x50
 8011808:	f7ff fd37 	bl	801127a <__sprint_r>
 801180c:	2800      	cmp	r0, #0
 801180e:	d000      	beq.n	8011812 <_vfiprintf_r+0x52e>
 8011810:	e1d1      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011812:	ad17      	add	r5, sp, #92	; 0x5c
 8011814:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801181a:	2900      	cmp	r1, #0
 801181c:	d013      	beq.n	8011846 <_vfiprintf_r+0x562>
 801181e:	a913      	add	r1, sp, #76	; 0x4c
 8011820:	6029      	str	r1, [r5, #0]
 8011822:	2102      	movs	r1, #2
 8011824:	3301      	adds	r3, #1
 8011826:	1852      	adds	r2, r2, r1
 8011828:	6069      	str	r1, [r5, #4]
 801182a:	9216      	str	r2, [sp, #88]	; 0x58
 801182c:	9315      	str	r3, [sp, #84]	; 0x54
 801182e:	3508      	adds	r5, #8
 8011830:	2b07      	cmp	r3, #7
 8011832:	dd08      	ble.n	8011846 <_vfiprintf_r+0x562>
 8011834:	9903      	ldr	r1, [sp, #12]
 8011836:	9806      	ldr	r0, [sp, #24]
 8011838:	aa14      	add	r2, sp, #80	; 0x50
 801183a:	f7ff fd1e 	bl	801127a <__sprint_r>
 801183e:	2800      	cmp	r0, #0
 8011840:	d000      	beq.n	8011844 <_vfiprintf_r+0x560>
 8011842:	e1b8      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011844:	ad17      	add	r5, sp, #92	; 0x5c
 8011846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011848:	2b80      	cmp	r3, #128	; 0x80
 801184a:	d11e      	bne.n	801188a <_vfiprintf_r+0x5a6>
 801184c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801184e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011850:	1a9f      	subs	r7, r3, r2
 8011852:	2f00      	cmp	r7, #0
 8011854:	dd19      	ble.n	801188a <_vfiprintf_r+0x5a6>
 8011856:	0029      	movs	r1, r5
 8011858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801185a:	4871      	ldr	r0, [pc, #452]	; (8011a20 <_vfiprintf_r+0x73c>)
 801185c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801185e:	3301      	adds	r3, #1
 8011860:	3108      	adds	r1, #8
 8011862:	6028      	str	r0, [r5, #0]
 8011864:	2f10      	cmp	r7, #16
 8011866:	dd00      	ble.n	801186a <_vfiprintf_r+0x586>
 8011868:	e164      	b.n	8011b34 <_vfiprintf_r+0x850>
 801186a:	606f      	str	r7, [r5, #4]
 801186c:	18bf      	adds	r7, r7, r2
 801186e:	000d      	movs	r5, r1
 8011870:	9716      	str	r7, [sp, #88]	; 0x58
 8011872:	9315      	str	r3, [sp, #84]	; 0x54
 8011874:	2b07      	cmp	r3, #7
 8011876:	dd08      	ble.n	801188a <_vfiprintf_r+0x5a6>
 8011878:	9903      	ldr	r1, [sp, #12]
 801187a:	9806      	ldr	r0, [sp, #24]
 801187c:	aa14      	add	r2, sp, #80	; 0x50
 801187e:	f7ff fcfc 	bl	801127a <__sprint_r>
 8011882:	2800      	cmp	r0, #0
 8011884:	d000      	beq.n	8011888 <_vfiprintf_r+0x5a4>
 8011886:	e196      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011888:	ad17      	add	r5, sp, #92	; 0x5c
 801188a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801188c:	9a05      	ldr	r2, [sp, #20]
 801188e:	1a9f      	subs	r7, r3, r2
 8011890:	2f00      	cmp	r7, #0
 8011892:	dd19      	ble.n	80118c8 <_vfiprintf_r+0x5e4>
 8011894:	0029      	movs	r1, r5
 8011896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011898:	4861      	ldr	r0, [pc, #388]	; (8011a20 <_vfiprintf_r+0x73c>)
 801189a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801189c:	3301      	adds	r3, #1
 801189e:	3108      	adds	r1, #8
 80118a0:	6028      	str	r0, [r5, #0]
 80118a2:	2f10      	cmp	r7, #16
 80118a4:	dd00      	ble.n	80118a8 <_vfiprintf_r+0x5c4>
 80118a6:	e157      	b.n	8011b58 <_vfiprintf_r+0x874>
 80118a8:	606f      	str	r7, [r5, #4]
 80118aa:	18bf      	adds	r7, r7, r2
 80118ac:	000d      	movs	r5, r1
 80118ae:	9716      	str	r7, [sp, #88]	; 0x58
 80118b0:	9315      	str	r3, [sp, #84]	; 0x54
 80118b2:	2b07      	cmp	r3, #7
 80118b4:	dd08      	ble.n	80118c8 <_vfiprintf_r+0x5e4>
 80118b6:	9903      	ldr	r1, [sp, #12]
 80118b8:	9806      	ldr	r0, [sp, #24]
 80118ba:	aa14      	add	r2, sp, #80	; 0x50
 80118bc:	f7ff fcdd 	bl	801127a <__sprint_r>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d000      	beq.n	80118c6 <_vfiprintf_r+0x5e2>
 80118c4:	e177      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 80118c6:	ad17      	add	r5, sp, #92	; 0x5c
 80118c8:	9b05      	ldr	r3, [sp, #20]
 80118ca:	9a05      	ldr	r2, [sp, #20]
 80118cc:	606b      	str	r3, [r5, #4]
 80118ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80118d0:	602e      	str	r6, [r5, #0]
 80118d2:	189b      	adds	r3, r3, r2
 80118d4:	9316      	str	r3, [sp, #88]	; 0x58
 80118d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118d8:	3508      	adds	r5, #8
 80118da:	3301      	adds	r3, #1
 80118dc:	9315      	str	r3, [sp, #84]	; 0x54
 80118de:	2b07      	cmp	r3, #7
 80118e0:	dd08      	ble.n	80118f4 <_vfiprintf_r+0x610>
 80118e2:	9903      	ldr	r1, [sp, #12]
 80118e4:	9806      	ldr	r0, [sp, #24]
 80118e6:	aa14      	add	r2, sp, #80	; 0x50
 80118e8:	f7ff fcc7 	bl	801127a <__sprint_r>
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d000      	beq.n	80118f2 <_vfiprintf_r+0x60e>
 80118f0:	e161      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 80118f2:	ad17      	add	r5, sp, #92	; 0x5c
 80118f4:	0764      	lsls	r4, r4, #29
 80118f6:	d500      	bpl.n	80118fa <_vfiprintf_r+0x616>
 80118f8:	e140      	b.n	8011b7c <_vfiprintf_r+0x898>
 80118fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118fe:	4293      	cmp	r3, r2
 8011900:	da00      	bge.n	8011904 <_vfiprintf_r+0x620>
 8011902:	0013      	movs	r3, r2
 8011904:	9a08      	ldr	r2, [sp, #32]
 8011906:	18d3      	adds	r3, r2, r3
 8011908:	9308      	str	r3, [sp, #32]
 801190a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801190c:	2b00      	cmp	r3, #0
 801190e:	d007      	beq.n	8011920 <_vfiprintf_r+0x63c>
 8011910:	9903      	ldr	r1, [sp, #12]
 8011912:	9806      	ldr	r0, [sp, #24]
 8011914:	aa14      	add	r2, sp, #80	; 0x50
 8011916:	f7ff fcb0 	bl	801127a <__sprint_r>
 801191a:	2800      	cmp	r0, #0
 801191c:	d000      	beq.n	8011920 <_vfiprintf_r+0x63c>
 801191e:	e14a      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011920:	2300      	movs	r3, #0
 8011922:	ad17      	add	r5, sp, #92	; 0x5c
 8011924:	9315      	str	r3, [sp, #84]	; 0x54
 8011926:	e6b7      	b.n	8011698 <_vfiprintf_r+0x3b4>
 8011928:	0030      	movs	r0, r6
 801192a:	f7ee fbeb 	bl	8000104 <strlen>
 801192e:	9005      	str	r0, [sp, #20]
 8011930:	e719      	b.n	8011766 <_vfiprintf_r+0x482>
 8011932:	2310      	movs	r3, #16
 8011934:	431c      	orrs	r4, r3
 8011936:	2320      	movs	r3, #32
 8011938:	0020      	movs	r0, r4
 801193a:	4018      	ands	r0, r3
 801193c:	421c      	tst	r4, r3
 801193e:	d009      	beq.n	8011954 <_vfiprintf_r+0x670>
 8011940:	3b19      	subs	r3, #25
 8011942:	3707      	adds	r7, #7
 8011944:	439f      	bics	r7, r3
 8011946:	0039      	movs	r1, r7
 8011948:	c90c      	ldmia	r1!, {r2, r3}
 801194a:	9200      	str	r2, [sp, #0]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	9104      	str	r1, [sp, #16]
 8011950:	2301      	movs	r3, #1
 8011952:	e6c7      	b.n	80116e4 <_vfiprintf_r+0x400>
 8011954:	003b      	movs	r3, r7
 8011956:	cb04      	ldmia	r3!, {r2}
 8011958:	0021      	movs	r1, r4
 801195a:	9304      	str	r3, [sp, #16]
 801195c:	2310      	movs	r3, #16
 801195e:	4019      	ands	r1, r3
 8011960:	421c      	tst	r4, r3
 8011962:	d003      	beq.n	801196c <_vfiprintf_r+0x688>
 8011964:	9200      	str	r2, [sp, #0]
 8011966:	9001      	str	r0, [sp, #4]
 8011968:	3b0f      	subs	r3, #15
 801196a:	e6bb      	b.n	80116e4 <_vfiprintf_r+0x400>
 801196c:	2340      	movs	r3, #64	; 0x40
 801196e:	0020      	movs	r0, r4
 8011970:	4018      	ands	r0, r3
 8011972:	421c      	tst	r4, r3
 8011974:	d003      	beq.n	801197e <_vfiprintf_r+0x69a>
 8011976:	b293      	uxth	r3, r2
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	9101      	str	r1, [sp, #4]
 801197c:	e7e8      	b.n	8011950 <_vfiprintf_r+0x66c>
 801197e:	2380      	movs	r3, #128	; 0x80
 8011980:	0021      	movs	r1, r4
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4019      	ands	r1, r3
 8011986:	421c      	tst	r4, r3
 8011988:	d003      	beq.n	8011992 <_vfiprintf_r+0x6ae>
 801198a:	b2d3      	uxtb	r3, r2
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	9001      	str	r0, [sp, #4]
 8011990:	e7de      	b.n	8011950 <_vfiprintf_r+0x66c>
 8011992:	9200      	str	r2, [sp, #0]
 8011994:	e7f1      	b.n	801197a <_vfiprintf_r+0x696>
 8011996:	4a23      	ldr	r2, [pc, #140]	; (8011a24 <_vfiprintf_r+0x740>)
 8011998:	0020      	movs	r0, r4
 801199a:	920c      	str	r2, [sp, #48]	; 0x30
 801199c:	2220      	movs	r2, #32
 801199e:	4010      	ands	r0, r2
 80119a0:	4214      	tst	r4, r2
 80119a2:	d019      	beq.n	80119d8 <_vfiprintf_r+0x6f4>
 80119a4:	3a19      	subs	r2, #25
 80119a6:	3707      	adds	r7, #7
 80119a8:	4397      	bics	r7, r2
 80119aa:	0038      	movs	r0, r7
 80119ac:	c806      	ldmia	r0!, {r1, r2}
 80119ae:	9100      	str	r1, [sp, #0]
 80119b0:	9201      	str	r2, [sp, #4]
 80119b2:	9004      	str	r0, [sp, #16]
 80119b4:	07e2      	lsls	r2, r4, #31
 80119b6:	d509      	bpl.n	80119cc <_vfiprintf_r+0x6e8>
 80119b8:	9a00      	ldr	r2, [sp, #0]
 80119ba:	9901      	ldr	r1, [sp, #4]
 80119bc:	430a      	orrs	r2, r1
 80119be:	d005      	beq.n	80119cc <_vfiprintf_r+0x6e8>
 80119c0:	aa13      	add	r2, sp, #76	; 0x4c
 80119c2:	2130      	movs	r1, #48	; 0x30
 80119c4:	7053      	strb	r3, [r2, #1]
 80119c6:	2302      	movs	r3, #2
 80119c8:	7011      	strb	r1, [r2, #0]
 80119ca:	431c      	orrs	r4, r3
 80119cc:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <_vfiprintf_r+0x72c>)
 80119ce:	401c      	ands	r4, r3
 80119d0:	2302      	movs	r3, #2
 80119d2:	e687      	b.n	80116e4 <_vfiprintf_r+0x400>
 80119d4:	4a10      	ldr	r2, [pc, #64]	; (8011a18 <_vfiprintf_r+0x734>)
 80119d6:	e7df      	b.n	8011998 <_vfiprintf_r+0x6b4>
 80119d8:	0039      	movs	r1, r7
 80119da:	c904      	ldmia	r1!, {r2}
 80119dc:	0026      	movs	r6, r4
 80119de:	9104      	str	r1, [sp, #16]
 80119e0:	2110      	movs	r1, #16
 80119e2:	400e      	ands	r6, r1
 80119e4:	420c      	tst	r4, r1
 80119e6:	d002      	beq.n	80119ee <_vfiprintf_r+0x70a>
 80119e8:	9200      	str	r2, [sp, #0]
 80119ea:	9001      	str	r0, [sp, #4]
 80119ec:	e7e2      	b.n	80119b4 <_vfiprintf_r+0x6d0>
 80119ee:	2140      	movs	r1, #64	; 0x40
 80119f0:	0020      	movs	r0, r4
 80119f2:	4008      	ands	r0, r1
 80119f4:	420c      	tst	r4, r1
 80119f6:	d003      	beq.n	8011a00 <_vfiprintf_r+0x71c>
 80119f8:	b292      	uxth	r2, r2
 80119fa:	9200      	str	r2, [sp, #0]
 80119fc:	9601      	str	r6, [sp, #4]
 80119fe:	e7d9      	b.n	80119b4 <_vfiprintf_r+0x6d0>
 8011a00:	2180      	movs	r1, #128	; 0x80
 8011a02:	0026      	movs	r6, r4
 8011a04:	0089      	lsls	r1, r1, #2
 8011a06:	400e      	ands	r6, r1
 8011a08:	420c      	tst	r4, r1
 8011a0a:	d0f6      	beq.n	80119fa <_vfiprintf_r+0x716>
 8011a0c:	b2d2      	uxtb	r2, r2
 8011a0e:	e7eb      	b.n	80119e8 <_vfiprintf_r+0x704>
 8011a10:	fffffbff 	.word	0xfffffbff
 8011a14:	00007830 	.word	0x00007830
 8011a18:	0801448c 	.word	0x0801448c
 8011a1c:	08014599 	.word	0x08014599
 8011a20:	080145a9 	.word	0x080145a9
 8011a24:	0801449d 	.word	0x0801449d
 8011a28:	9b01      	ldr	r3, [sp, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <_vfiprintf_r+0x75e>
 8011a2e:	9b00      	ldr	r3, [sp, #0]
 8011a30:	2b09      	cmp	r3, #9
 8011a32:	d806      	bhi.n	8011a42 <_vfiprintf_r+0x75e>
 8011a34:	26b7      	movs	r6, #183	; 0xb7
 8011a36:	ab12      	add	r3, sp, #72	; 0x48
 8011a38:	18f6      	adds	r6, r6, r3
 8011a3a:	9b00      	ldr	r3, [sp, #0]
 8011a3c:	3330      	adds	r3, #48	; 0x30
 8011a3e:	7033      	strb	r3, [r6, #0]
 8011a40:	e115      	b.n	8011c6e <_vfiprintf_r+0x98a>
 8011a42:	2380      	movs	r3, #128	; 0x80
 8011a44:	2400      	movs	r4, #0
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	403b      	ands	r3, r7
 8011a4a:	ae40      	add	r6, sp, #256	; 0x100
 8011a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8011a4e:	220a      	movs	r2, #10
 8011a50:	9800      	ldr	r0, [sp, #0]
 8011a52:	9901      	ldr	r1, [sp, #4]
 8011a54:	2300      	movs	r3, #0
 8011a56:	f7ee fd25 	bl	80004a4 <__aeabi_uldivmod>
 8011a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a5c:	3e01      	subs	r6, #1
 8011a5e:	3230      	adds	r2, #48	; 0x30
 8011a60:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a62:	9110      	str	r1, [sp, #64]	; 0x40
 8011a64:	7032      	strb	r2, [r6, #0]
 8011a66:	3401      	adds	r4, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d01a      	beq.n	8011aa2 <_vfiprintf_r+0x7be>
 8011a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d116      	bne.n	8011aa2 <_vfiprintf_r+0x7be>
 8011a74:	2cff      	cmp	r4, #255	; 0xff
 8011a76:	d014      	beq.n	8011aa2 <_vfiprintf_r+0x7be>
 8011a78:	9b01      	ldr	r3, [sp, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <_vfiprintf_r+0x7a0>
 8011a7e:	9b00      	ldr	r3, [sp, #0]
 8011a80:	2b09      	cmp	r3, #9
 8011a82:	d90e      	bls.n	8011aa2 <_vfiprintf_r+0x7be>
 8011a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a88:	1af6      	subs	r6, r6, r3
 8011a8a:	001a      	movs	r2, r3
 8011a8c:	0030      	movs	r0, r6
 8011a8e:	f7f9 ffe6 	bl	800ba5e <strncpy>
 8011a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a94:	2400      	movs	r4, #0
 8011a96:	785b      	ldrb	r3, [r3, #1]
 8011a98:	1e5a      	subs	r2, r3, #1
 8011a9a:	4193      	sbcs	r3, r2
 8011a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a9e:	18d3      	adds	r3, r2, r3
 8011aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <_vfiprintf_r+0x7cc>
 8011aa8:	9b00      	ldr	r3, [sp, #0]
 8011aaa:	2b09      	cmp	r3, #9
 8011aac:	d800      	bhi.n	8011ab0 <_vfiprintf_r+0x7cc>
 8011aae:	e0de      	b.n	8011c6e <_vfiprintf_r+0x98a>
 8011ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ab6:	9301      	str	r3, [sp, #4]
 8011ab8:	e7c9      	b.n	8011a4e <_vfiprintf_r+0x76a>
 8011aba:	200f      	movs	r0, #15
 8011abc:	9b00      	ldr	r3, [sp, #0]
 8011abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ac0:	4003      	ands	r3, r0
 8011ac2:	5cd3      	ldrb	r3, [r2, r3]
 8011ac4:	3e01      	subs	r6, #1
 8011ac6:	7033      	strb	r3, [r6, #0]
 8011ac8:	9b01      	ldr	r3, [sp, #4]
 8011aca:	0719      	lsls	r1, r3, #28
 8011acc:	9b00      	ldr	r3, [sp, #0]
 8011ace:	091a      	lsrs	r2, r3, #4
 8011ad0:	9b01      	ldr	r3, [sp, #4]
 8011ad2:	4311      	orrs	r1, r2
 8011ad4:	091b      	lsrs	r3, r3, #4
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	000b      	movs	r3, r1
 8011ada:	9a01      	ldr	r2, [sp, #4]
 8011adc:	9100      	str	r1, [sp, #0]
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	d1ec      	bne.n	8011abc <_vfiprintf_r+0x7d8>
 8011ae2:	e0c4      	b.n	8011c6e <_vfiprintf_r+0x98a>
 8011ae4:	ae40      	add	r6, sp, #256	; 0x100
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d000      	beq.n	8011aec <_vfiprintf_r+0x808>
 8011aea:	e0c0      	b.n	8011c6e <_vfiprintf_r+0x98a>
 8011aec:	07e4      	lsls	r4, r4, #31
 8011aee:	d400      	bmi.n	8011af2 <_vfiprintf_r+0x80e>
 8011af0:	e0bd      	b.n	8011c6e <_vfiprintf_r+0x98a>
 8011af2:	26b7      	movs	r6, #183	; 0xb7
 8011af4:	ab12      	add	r3, sp, #72	; 0x48
 8011af6:	18f6      	adds	r6, r6, r3
 8011af8:	2330      	movs	r3, #48	; 0x30
 8011afa:	e7a0      	b.n	8011a3e <_vfiprintf_r+0x75a>
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d100      	bne.n	8011b02 <_vfiprintf_r+0x81e>
 8011b00:	e07e      	b.n	8011c00 <_vfiprintf_r+0x91c>
 8011b02:	ae27      	add	r6, sp, #156	; 0x9c
 8011b04:	7033      	strb	r3, [r6, #0]
 8011b06:	2300      	movs	r3, #0
 8011b08:	aa12      	add	r2, sp, #72	; 0x48
 8011b0a:	70d3      	strb	r3, [r2, #3]
 8011b0c:	9704      	str	r7, [sp, #16]
 8011b0e:	e576      	b.n	80115fe <_vfiprintf_r+0x31a>
 8011b10:	2010      	movs	r0, #16
 8011b12:	1812      	adds	r2, r2, r0
 8011b14:	6068      	str	r0, [r5, #4]
 8011b16:	9216      	str	r2, [sp, #88]	; 0x58
 8011b18:	9315      	str	r3, [sp, #84]	; 0x54
 8011b1a:	2b07      	cmp	r3, #7
 8011b1c:	dd07      	ble.n	8011b2e <_vfiprintf_r+0x84a>
 8011b1e:	9903      	ldr	r1, [sp, #12]
 8011b20:	9806      	ldr	r0, [sp, #24]
 8011b22:	aa14      	add	r2, sp, #80	; 0x50
 8011b24:	f7ff fba9 	bl	801127a <__sprint_r>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d144      	bne.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011b2c:	a917      	add	r1, sp, #92	; 0x5c
 8011b2e:	000d      	movs	r5, r1
 8011b30:	3f10      	subs	r7, #16
 8011b32:	e63b      	b.n	80117ac <_vfiprintf_r+0x4c8>
 8011b34:	2010      	movs	r0, #16
 8011b36:	1812      	adds	r2, r2, r0
 8011b38:	6068      	str	r0, [r5, #4]
 8011b3a:	9216      	str	r2, [sp, #88]	; 0x58
 8011b3c:	9315      	str	r3, [sp, #84]	; 0x54
 8011b3e:	2b07      	cmp	r3, #7
 8011b40:	dd07      	ble.n	8011b52 <_vfiprintf_r+0x86e>
 8011b42:	9903      	ldr	r1, [sp, #12]
 8011b44:	9806      	ldr	r0, [sp, #24]
 8011b46:	aa14      	add	r2, sp, #80	; 0x50
 8011b48:	f7ff fb97 	bl	801127a <__sprint_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d132      	bne.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011b50:	a917      	add	r1, sp, #92	; 0x5c
 8011b52:	000d      	movs	r5, r1
 8011b54:	3f10      	subs	r7, #16
 8011b56:	e67e      	b.n	8011856 <_vfiprintf_r+0x572>
 8011b58:	2010      	movs	r0, #16
 8011b5a:	1812      	adds	r2, r2, r0
 8011b5c:	6068      	str	r0, [r5, #4]
 8011b5e:	9216      	str	r2, [sp, #88]	; 0x58
 8011b60:	9315      	str	r3, [sp, #84]	; 0x54
 8011b62:	2b07      	cmp	r3, #7
 8011b64:	dd07      	ble.n	8011b76 <_vfiprintf_r+0x892>
 8011b66:	9903      	ldr	r1, [sp, #12]
 8011b68:	9806      	ldr	r0, [sp, #24]
 8011b6a:	aa14      	add	r2, sp, #80	; 0x50
 8011b6c:	f7ff fb85 	bl	801127a <__sprint_r>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d120      	bne.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011b74:	a917      	add	r1, sp, #92	; 0x5c
 8011b76:	000d      	movs	r5, r1
 8011b78:	3f10      	subs	r7, #16
 8011b7a:	e68b      	b.n	8011894 <_vfiprintf_r+0x5b0>
 8011b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b80:	2610      	movs	r6, #16
 8011b82:	1a9c      	subs	r4, r3, r2
 8011b84:	2c00      	cmp	r4, #0
 8011b86:	dc00      	bgt.n	8011b8a <_vfiprintf_r+0x8a6>
 8011b88:	e6b7      	b.n	80118fa <_vfiprintf_r+0x616>
 8011b8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011b8c:	4a3b      	ldr	r2, [pc, #236]	; (8011c7c <_vfiprintf_r+0x998>)
 8011b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011b90:	3101      	adds	r1, #1
 8011b92:	602a      	str	r2, [r5, #0]
 8011b94:	2c10      	cmp	r4, #16
 8011b96:	dc22      	bgt.n	8011bde <_vfiprintf_r+0x8fa>
 8011b98:	606c      	str	r4, [r5, #4]
 8011b9a:	18e4      	adds	r4, r4, r3
 8011b9c:	9416      	str	r4, [sp, #88]	; 0x58
 8011b9e:	9115      	str	r1, [sp, #84]	; 0x54
 8011ba0:	2907      	cmp	r1, #7
 8011ba2:	dc00      	bgt.n	8011ba6 <_vfiprintf_r+0x8c2>
 8011ba4:	e6a9      	b.n	80118fa <_vfiprintf_r+0x616>
 8011ba6:	9903      	ldr	r1, [sp, #12]
 8011ba8:	9806      	ldr	r0, [sp, #24]
 8011baa:	aa14      	add	r2, sp, #80	; 0x50
 8011bac:	f7ff fb65 	bl	801127a <__sprint_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d100      	bne.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011bb4:	e6a1      	b.n	80118fa <_vfiprintf_r+0x616>
 8011bb6:	9b03      	ldr	r3, [sp, #12]
 8011bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bba:	07db      	lsls	r3, r3, #31
 8011bbc:	d407      	bmi.n	8011bce <_vfiprintf_r+0x8ea>
 8011bbe:	9b03      	ldr	r3, [sp, #12]
 8011bc0:	899b      	ldrh	r3, [r3, #12]
 8011bc2:	059b      	lsls	r3, r3, #22
 8011bc4:	d403      	bmi.n	8011bce <_vfiprintf_r+0x8ea>
 8011bc6:	9b03      	ldr	r3, [sp, #12]
 8011bc8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bca:	f7fa f808 	bl	800bbde <__retarget_lock_release_recursive>
 8011bce:	9b03      	ldr	r3, [sp, #12]
 8011bd0:	899b      	ldrh	r3, [r3, #12]
 8011bd2:	065b      	lsls	r3, r3, #25
 8011bd4:	d401      	bmi.n	8011bda <_vfiprintf_r+0x8f6>
 8011bd6:	f7ff fbc3 	bl	8011360 <_vfiprintf_r+0x7c>
 8011bda:	f7ff fbbe 	bl	801135a <_vfiprintf_r+0x76>
 8011bde:	3310      	adds	r3, #16
 8011be0:	606e      	str	r6, [r5, #4]
 8011be2:	9316      	str	r3, [sp, #88]	; 0x58
 8011be4:	9115      	str	r1, [sp, #84]	; 0x54
 8011be6:	3508      	adds	r5, #8
 8011be8:	2907      	cmp	r1, #7
 8011bea:	dd07      	ble.n	8011bfc <_vfiprintf_r+0x918>
 8011bec:	9903      	ldr	r1, [sp, #12]
 8011bee:	9806      	ldr	r0, [sp, #24]
 8011bf0:	aa14      	add	r2, sp, #80	; 0x50
 8011bf2:	f7ff fb42 	bl	801127a <__sprint_r>
 8011bf6:	2800      	cmp	r0, #0
 8011bf8:	d1dd      	bne.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011bfa:	ad17      	add	r5, sp, #92	; 0x5c
 8011bfc:	3c10      	subs	r4, #16
 8011bfe:	e7c4      	b.n	8011b8a <_vfiprintf_r+0x8a6>
 8011c00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d102      	bne.n	8011c0c <_vfiprintf_r+0x928>
 8011c06:	2300      	movs	r3, #0
 8011c08:	9315      	str	r3, [sp, #84]	; 0x54
 8011c0a:	e7d4      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011c0c:	9903      	ldr	r1, [sp, #12]
 8011c0e:	9806      	ldr	r0, [sp, #24]
 8011c10:	aa14      	add	r2, sp, #80	; 0x50
 8011c12:	f7ff fb32 	bl	801127a <__sprint_r>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d0f5      	beq.n	8011c06 <_vfiprintf_r+0x922>
 8011c1a:	e7cc      	b.n	8011bb6 <_vfiprintf_r+0x8d2>
 8011c1c:	0027      	movs	r7, r4
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	d100      	bne.n	8011c24 <_vfiprintf_r+0x940>
 8011c22:	e51b      	b.n	801165c <_vfiprintf_r+0x378>
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d100      	bne.n	8011c2a <_vfiprintf_r+0x946>
 8011c28:	e6fe      	b.n	8011a28 <_vfiprintf_r+0x744>
 8011c2a:	ae40      	add	r6, sp, #256	; 0x100
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d100      	bne.n	8011c32 <_vfiprintf_r+0x94e>
 8011c30:	e743      	b.n	8011aba <_vfiprintf_r+0x7d6>
 8011c32:	2307      	movs	r3, #7
 8011c34:	469c      	mov	ip, r3
 8011c36:	4663      	mov	r3, ip
 8011c38:	9900      	ldr	r1, [sp, #0]
 8011c3a:	0032      	movs	r2, r6
 8011c3c:	400b      	ands	r3, r1
 8011c3e:	9901      	ldr	r1, [sp, #4]
 8011c40:	3e01      	subs	r6, #1
 8011c42:	074c      	lsls	r4, r1, #29
 8011c44:	9900      	ldr	r1, [sp, #0]
 8011c46:	3330      	adds	r3, #48	; 0x30
 8011c48:	08c8      	lsrs	r0, r1, #3
 8011c4a:	9901      	ldr	r1, [sp, #4]
 8011c4c:	4304      	orrs	r4, r0
 8011c4e:	08c9      	lsrs	r1, r1, #3
 8011c50:	9101      	str	r1, [sp, #4]
 8011c52:	0021      	movs	r1, r4
 8011c54:	9801      	ldr	r0, [sp, #4]
 8011c56:	7033      	strb	r3, [r6, #0]
 8011c58:	9400      	str	r4, [sp, #0]
 8011c5a:	4301      	orrs	r1, r0
 8011c5c:	d1eb      	bne.n	8011c36 <_vfiprintf_r+0x952>
 8011c5e:	07f9      	lsls	r1, r7, #31
 8011c60:	d505      	bpl.n	8011c6e <_vfiprintf_r+0x98a>
 8011c62:	2b30      	cmp	r3, #48	; 0x30
 8011c64:	d003      	beq.n	8011c6e <_vfiprintf_r+0x98a>
 8011c66:	2330      	movs	r3, #48	; 0x30
 8011c68:	3e01      	subs	r6, #1
 8011c6a:	7033      	strb	r3, [r6, #0]
 8011c6c:	1e96      	subs	r6, r2, #2
 8011c6e:	9b05      	ldr	r3, [sp, #20]
 8011c70:	003c      	movs	r4, r7
 8011c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c74:	ab40      	add	r3, sp, #256	; 0x100
 8011c76:	1b9b      	subs	r3, r3, r6
 8011c78:	9305      	str	r3, [sp, #20]
 8011c7a:	e575      	b.n	8011768 <_vfiprintf_r+0x484>
 8011c7c:	08014599 	.word	0x08014599

08011c80 <__sbprintf>:
 8011c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c82:	0015      	movs	r5, r2
 8011c84:	2202      	movs	r2, #2
 8011c86:	4c1e      	ldr	r4, [pc, #120]	; (8011d00 <__sbprintf+0x80>)
 8011c88:	001f      	movs	r7, r3
 8011c8a:	898b      	ldrh	r3, [r1, #12]
 8011c8c:	44a5      	add	sp, r4
 8011c8e:	4393      	bics	r3, r2
 8011c90:	466a      	mov	r2, sp
 8011c92:	8193      	strh	r3, [r2, #12]
 8011c94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011c96:	0006      	movs	r6, r0
 8011c98:	9319      	str	r3, [sp, #100]	; 0x64
 8011c9a:	89cb      	ldrh	r3, [r1, #14]
 8011c9c:	a816      	add	r0, sp, #88	; 0x58
 8011c9e:	81d3      	strh	r3, [r2, #14]
 8011ca0:	69cb      	ldr	r3, [r1, #28]
 8011ca2:	000c      	movs	r4, r1
 8011ca4:	9307      	str	r3, [sp, #28]
 8011ca6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8011caa:	ab1a      	add	r3, sp, #104	; 0x68
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	9304      	str	r3, [sp, #16]
 8011cb0:	2380      	movs	r3, #128	; 0x80
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	9302      	str	r3, [sp, #8]
 8011cb6:	9305      	str	r3, [sp, #20]
 8011cb8:	2300      	movs	r3, #0
 8011cba:	9306      	str	r3, [sp, #24]
 8011cbc:	f7f9 ff8c 	bl	800bbd8 <__retarget_lock_init_recursive>
 8011cc0:	002a      	movs	r2, r5
 8011cc2:	003b      	movs	r3, r7
 8011cc4:	4669      	mov	r1, sp
 8011cc6:	0030      	movs	r0, r6
 8011cc8:	f7ff fb0c 	bl	80112e4 <_vfiprintf_r>
 8011ccc:	1e05      	subs	r5, r0, #0
 8011cce:	db07      	blt.n	8011ce0 <__sbprintf+0x60>
 8011cd0:	4669      	mov	r1, sp
 8011cd2:	0030      	movs	r0, r6
 8011cd4:	f7fd fdf6 	bl	800f8c4 <_fflush_r>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d001      	beq.n	8011ce0 <__sbprintf+0x60>
 8011cdc:	2501      	movs	r5, #1
 8011cde:	426d      	negs	r5, r5
 8011ce0:	466b      	mov	r3, sp
 8011ce2:	899a      	ldrh	r2, [r3, #12]
 8011ce4:	2340      	movs	r3, #64	; 0x40
 8011ce6:	421a      	tst	r2, r3
 8011ce8:	d002      	beq.n	8011cf0 <__sbprintf+0x70>
 8011cea:	89a2      	ldrh	r2, [r4, #12]
 8011cec:	4313      	orrs	r3, r2
 8011cee:	81a3      	strh	r3, [r4, #12]
 8011cf0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011cf2:	f7f9 ff72 	bl	800bbda <__retarget_lock_close_recursive>
 8011cf6:	0028      	movs	r0, r5
 8011cf8:	4b02      	ldr	r3, [pc, #8]	; (8011d04 <__sbprintf+0x84>)
 8011cfa:	449d      	add	sp, r3
 8011cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cfe:	46c0      	nop			; (mov r8, r8)
 8011d00:	fffffb94 	.word	0xfffffb94
 8011d04:	0000046c 	.word	0x0000046c

08011d08 <__sfvwrite_r>:
 8011d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d0a:	6893      	ldr	r3, [r2, #8]
 8011d0c:	b087      	sub	sp, #28
 8011d0e:	000c      	movs	r4, r1
 8011d10:	9002      	str	r0, [sp, #8]
 8011d12:	9204      	str	r2, [sp, #16]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d102      	bne.n	8011d1e <__sfvwrite_r+0x16>
 8011d18:	2000      	movs	r0, #0
 8011d1a:	b007      	add	sp, #28
 8011d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d1e:	898b      	ldrh	r3, [r1, #12]
 8011d20:	071b      	lsls	r3, r3, #28
 8011d22:	d557      	bpl.n	8011dd4 <__sfvwrite_r+0xcc>
 8011d24:	690b      	ldr	r3, [r1, #16]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d054      	beq.n	8011dd4 <__sfvwrite_r+0xcc>
 8011d2a:	9b04      	ldr	r3, [sp, #16]
 8011d2c:	2202      	movs	r2, #2
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	89a3      	ldrh	r3, [r4, #12]
 8011d34:	001f      	movs	r7, r3
 8011d36:	4017      	ands	r7, r2
 8011d38:	4213      	tst	r3, r2
 8011d3a:	d171      	bne.n	8011e20 <__sfvwrite_r+0x118>
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	2101      	movs	r1, #1
 8011d40:	401a      	ands	r2, r3
 8011d42:	420b      	tst	r3, r1
 8011d44:	d100      	bne.n	8011d48 <__sfvwrite_r+0x40>
 8011d46:	e0a5      	b.n	8011e94 <__sfvwrite_r+0x18c>
 8011d48:	0038      	movs	r0, r7
 8011d4a:	003e      	movs	r6, r7
 8011d4c:	9703      	str	r7, [sp, #12]
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d100      	bne.n	8011d56 <__sfvwrite_r+0x4e>
 8011d54:	e10b      	b.n	8011f6e <__sfvwrite_r+0x266>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d10a      	bne.n	8011d70 <__sfvwrite_r+0x68>
 8011d5a:	001a      	movs	r2, r3
 8011d5c:	210a      	movs	r1, #10
 8011d5e:	0030      	movs	r0, r6
 8011d60:	f7fd fe2a 	bl	800f9b8 <memchr>
 8011d64:	9b03      	ldr	r3, [sp, #12]
 8011d66:	1c5f      	adds	r7, r3, #1
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d001      	beq.n	8011d70 <__sfvwrite_r+0x68>
 8011d6c:	3001      	adds	r0, #1
 8011d6e:	1b87      	subs	r7, r0, r6
 8011d70:	9b03      	ldr	r3, [sp, #12]
 8011d72:	9705      	str	r7, [sp, #20]
 8011d74:	429f      	cmp	r7, r3
 8011d76:	d900      	bls.n	8011d7a <__sfvwrite_r+0x72>
 8011d78:	9305      	str	r3, [sp, #20]
 8011d7a:	6820      	ldr	r0, [r4, #0]
 8011d7c:	6922      	ldr	r2, [r4, #16]
 8011d7e:	68a5      	ldr	r5, [r4, #8]
 8011d80:	6963      	ldr	r3, [r4, #20]
 8011d82:	4290      	cmp	r0, r2
 8011d84:	d800      	bhi.n	8011d88 <__sfvwrite_r+0x80>
 8011d86:	e0fb      	b.n	8011f80 <__sfvwrite_r+0x278>
 8011d88:	9a05      	ldr	r2, [sp, #20]
 8011d8a:	18ed      	adds	r5, r5, r3
 8011d8c:	42aa      	cmp	r2, r5
 8011d8e:	dc00      	bgt.n	8011d92 <__sfvwrite_r+0x8a>
 8011d90:	e0f6      	b.n	8011f80 <__sfvwrite_r+0x278>
 8011d92:	0031      	movs	r1, r6
 8011d94:	002a      	movs	r2, r5
 8011d96:	f000 fa1e 	bl	80121d6 <memmove>
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	0021      	movs	r1, r4
 8011d9e:	195b      	adds	r3, r3, r5
 8011da0:	9802      	ldr	r0, [sp, #8]
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	f7fd fd8e 	bl	800f8c4 <_fflush_r>
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d16e      	bne.n	8011e8a <__sfvwrite_r+0x182>
 8011dac:	2001      	movs	r0, #1
 8011dae:	1b7f      	subs	r7, r7, r5
 8011db0:	d105      	bne.n	8011dbe <__sfvwrite_r+0xb6>
 8011db2:	0021      	movs	r1, r4
 8011db4:	9802      	ldr	r0, [sp, #8]
 8011db6:	f7fd fd85 	bl	800f8c4 <_fflush_r>
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d165      	bne.n	8011e8a <__sfvwrite_r+0x182>
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	9a04      	ldr	r2, [sp, #16]
 8011dc2:	1b5b      	subs	r3, r3, r5
 8011dc4:	9303      	str	r3, [sp, #12]
 8011dc6:	9b04      	ldr	r3, [sp, #16]
 8011dc8:	1976      	adds	r6, r6, r5
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	1b5b      	subs	r3, r3, r5
 8011dce:	6093      	str	r3, [r2, #8]
 8011dd0:	d1bd      	bne.n	8011d4e <__sfvwrite_r+0x46>
 8011dd2:	e7a1      	b.n	8011d18 <__sfvwrite_r+0x10>
 8011dd4:	0021      	movs	r1, r4
 8011dd6:	9802      	ldr	r0, [sp, #8]
 8011dd8:	f000 f932 	bl	8012040 <__swsetup_r>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d0a4      	beq.n	8011d2a <__sfvwrite_r+0x22>
 8011de0:	2001      	movs	r0, #1
 8011de2:	4240      	negs	r0, r0
 8011de4:	e799      	b.n	8011d1a <__sfvwrite_r+0x12>
 8011de6:	9b01      	ldr	r3, [sp, #4]
 8011de8:	681e      	ldr	r6, [r3, #0]
 8011dea:	685d      	ldr	r5, [r3, #4]
 8011dec:	3308      	adds	r3, #8
 8011dee:	9301      	str	r3, [sp, #4]
 8011df0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011df2:	69e1      	ldr	r1, [r4, #28]
 8011df4:	2d00      	cmp	r5, #0
 8011df6:	d0f6      	beq.n	8011de6 <__sfvwrite_r+0xde>
 8011df8:	4a6e      	ldr	r2, [pc, #440]	; (8011fb4 <__sfvwrite_r+0x2ac>)
 8011dfa:	002b      	movs	r3, r5
 8011dfc:	4295      	cmp	r5, r2
 8011dfe:	d900      	bls.n	8011e02 <__sfvwrite_r+0xfa>
 8011e00:	0013      	movs	r3, r2
 8011e02:	0032      	movs	r2, r6
 8011e04:	9802      	ldr	r0, [sp, #8]
 8011e06:	47b8      	blx	r7
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	dd3e      	ble.n	8011e8a <__sfvwrite_r+0x182>
 8011e0c:	9b04      	ldr	r3, [sp, #16]
 8011e0e:	9a04      	ldr	r2, [sp, #16]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	1836      	adds	r6, r6, r0
 8011e14:	1a1b      	subs	r3, r3, r0
 8011e16:	1a2d      	subs	r5, r5, r0
 8011e18:	6093      	str	r3, [r2, #8]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1e8      	bne.n	8011df0 <__sfvwrite_r+0xe8>
 8011e1e:	e77b      	b.n	8011d18 <__sfvwrite_r+0x10>
 8011e20:	2600      	movs	r6, #0
 8011e22:	0035      	movs	r5, r6
 8011e24:	e7e4      	b.n	8011df0 <__sfvwrite_r+0xe8>
 8011e26:	9b01      	ldr	r3, [sp, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	9303      	str	r3, [sp, #12]
 8011e2c:	9b01      	ldr	r3, [sp, #4]
 8011e2e:	685d      	ldr	r5, [r3, #4]
 8011e30:	3308      	adds	r3, #8
 8011e32:	9301      	str	r3, [sp, #4]
 8011e34:	220c      	movs	r2, #12
 8011e36:	5ea3      	ldrsh	r3, [r4, r2]
 8011e38:	6820      	ldr	r0, [r4, #0]
 8011e3a:	68a6      	ldr	r6, [r4, #8]
 8011e3c:	2d00      	cmp	r5, #0
 8011e3e:	d0f2      	beq.n	8011e26 <__sfvwrite_r+0x11e>
 8011e40:	2180      	movs	r1, #128	; 0x80
 8011e42:	0089      	lsls	r1, r1, #2
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	420b      	tst	r3, r1
 8011e48:	d062      	beq.n	8011f10 <__sfvwrite_r+0x208>
 8011e4a:	42ae      	cmp	r6, r5
 8011e4c:	d837      	bhi.n	8011ebe <__sfvwrite_r+0x1b6>
 8011e4e:	2390      	movs	r3, #144	; 0x90
 8011e50:	00db      	lsls	r3, r3, #3
 8011e52:	421a      	tst	r2, r3
 8011e54:	d033      	beq.n	8011ebe <__sfvwrite_r+0x1b6>
 8011e56:	6921      	ldr	r1, [r4, #16]
 8011e58:	1a43      	subs	r3, r0, r1
 8011e5a:	2003      	movs	r0, #3
 8011e5c:	9305      	str	r3, [sp, #20]
 8011e5e:	6963      	ldr	r3, [r4, #20]
 8011e60:	4343      	muls	r3, r0
 8011e62:	0fdf      	lsrs	r7, r3, #31
 8011e64:	18ff      	adds	r7, r7, r3
 8011e66:	9b05      	ldr	r3, [sp, #20]
 8011e68:	107f      	asrs	r7, r7, #1
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	195b      	adds	r3, r3, r5
 8011e6e:	42bb      	cmp	r3, r7
 8011e70:	d900      	bls.n	8011e74 <__sfvwrite_r+0x16c>
 8011e72:	001f      	movs	r7, r3
 8011e74:	0552      	lsls	r2, r2, #21
 8011e76:	d53c      	bpl.n	8011ef2 <__sfvwrite_r+0x1ea>
 8011e78:	0039      	movs	r1, r7
 8011e7a:	9802      	ldr	r0, [sp, #8]
 8011e7c:	f7f8 fb56 	bl	800a52c <_malloc_r>
 8011e80:	1e06      	subs	r6, r0, #0
 8011e82:	d10a      	bne.n	8011e9a <__sfvwrite_r+0x192>
 8011e84:	230c      	movs	r3, #12
 8011e86:	9a02      	ldr	r2, [sp, #8]
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	2340      	movs	r3, #64	; 0x40
 8011e8c:	89a2      	ldrh	r2, [r4, #12]
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	81a3      	strh	r3, [r4, #12]
 8011e92:	e7a5      	b.n	8011de0 <__sfvwrite_r+0xd8>
 8011e94:	0015      	movs	r5, r2
 8011e96:	9203      	str	r2, [sp, #12]
 8011e98:	e7cc      	b.n	8011e34 <__sfvwrite_r+0x12c>
 8011e9a:	9a05      	ldr	r2, [sp, #20]
 8011e9c:	6921      	ldr	r1, [r4, #16]
 8011e9e:	f7f9 feaa 	bl	800bbf6 <memcpy>
 8011ea2:	89a2      	ldrh	r2, [r4, #12]
 8011ea4:	4b44      	ldr	r3, [pc, #272]	; (8011fb8 <__sfvwrite_r+0x2b0>)
 8011ea6:	401a      	ands	r2, r3
 8011ea8:	2380      	movs	r3, #128	; 0x80
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	81a3      	strh	r3, [r4, #12]
 8011eae:	9b05      	ldr	r3, [sp, #20]
 8011eb0:	6126      	str	r6, [r4, #16]
 8011eb2:	18f6      	adds	r6, r6, r3
 8011eb4:	6026      	str	r6, [r4, #0]
 8011eb6:	002e      	movs	r6, r5
 8011eb8:	6167      	str	r7, [r4, #20]
 8011eba:	1aff      	subs	r7, r7, r3
 8011ebc:	60a7      	str	r7, [r4, #8]
 8011ebe:	002f      	movs	r7, r5
 8011ec0:	42ae      	cmp	r6, r5
 8011ec2:	d900      	bls.n	8011ec6 <__sfvwrite_r+0x1be>
 8011ec4:	002e      	movs	r6, r5
 8011ec6:	0032      	movs	r2, r6
 8011ec8:	9903      	ldr	r1, [sp, #12]
 8011eca:	6820      	ldr	r0, [r4, #0]
 8011ecc:	f000 f983 	bl	80121d6 <memmove>
 8011ed0:	68a3      	ldr	r3, [r4, #8]
 8011ed2:	1b9b      	subs	r3, r3, r6
 8011ed4:	60a3      	str	r3, [r4, #8]
 8011ed6:	6823      	ldr	r3, [r4, #0]
 8011ed8:	199b      	adds	r3, r3, r6
 8011eda:	6023      	str	r3, [r4, #0]
 8011edc:	9b03      	ldr	r3, [sp, #12]
 8011ede:	9a04      	ldr	r2, [sp, #16]
 8011ee0:	19db      	adds	r3, r3, r7
 8011ee2:	9303      	str	r3, [sp, #12]
 8011ee4:	9b04      	ldr	r3, [sp, #16]
 8011ee6:	1bed      	subs	r5, r5, r7
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	1bdb      	subs	r3, r3, r7
 8011eec:	6093      	str	r3, [r2, #8]
 8011eee:	d1a1      	bne.n	8011e34 <__sfvwrite_r+0x12c>
 8011ef0:	e712      	b.n	8011d18 <__sfvwrite_r+0x10>
 8011ef2:	003a      	movs	r2, r7
 8011ef4:	9802      	ldr	r0, [sp, #8]
 8011ef6:	f7fe fcd7 	bl	80108a8 <_realloc_r>
 8011efa:	1e06      	subs	r6, r0, #0
 8011efc:	d1d7      	bne.n	8011eae <__sfvwrite_r+0x1a6>
 8011efe:	6921      	ldr	r1, [r4, #16]
 8011f00:	9802      	ldr	r0, [sp, #8]
 8011f02:	f7f9 fef3 	bl	800bcec <_free_r>
 8011f06:	2280      	movs	r2, #128	; 0x80
 8011f08:	89a3      	ldrh	r3, [r4, #12]
 8011f0a:	4393      	bics	r3, r2
 8011f0c:	81a3      	strh	r3, [r4, #12]
 8011f0e:	e7b9      	b.n	8011e84 <__sfvwrite_r+0x17c>
 8011f10:	6923      	ldr	r3, [r4, #16]
 8011f12:	4283      	cmp	r3, r0
 8011f14:	d302      	bcc.n	8011f1c <__sfvwrite_r+0x214>
 8011f16:	6967      	ldr	r7, [r4, #20]
 8011f18:	42af      	cmp	r7, r5
 8011f1a:	d916      	bls.n	8011f4a <__sfvwrite_r+0x242>
 8011f1c:	42ae      	cmp	r6, r5
 8011f1e:	d900      	bls.n	8011f22 <__sfvwrite_r+0x21a>
 8011f20:	002e      	movs	r6, r5
 8011f22:	0032      	movs	r2, r6
 8011f24:	9903      	ldr	r1, [sp, #12]
 8011f26:	f000 f956 	bl	80121d6 <memmove>
 8011f2a:	68a3      	ldr	r3, [r4, #8]
 8011f2c:	6822      	ldr	r2, [r4, #0]
 8011f2e:	1b9b      	subs	r3, r3, r6
 8011f30:	1992      	adds	r2, r2, r6
 8011f32:	0037      	movs	r7, r6
 8011f34:	60a3      	str	r3, [r4, #8]
 8011f36:	6022      	str	r2, [r4, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1cf      	bne.n	8011edc <__sfvwrite_r+0x1d4>
 8011f3c:	0021      	movs	r1, r4
 8011f3e:	9802      	ldr	r0, [sp, #8]
 8011f40:	f7fd fcc0 	bl	800f8c4 <_fflush_r>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d0c9      	beq.n	8011edc <__sfvwrite_r+0x1d4>
 8011f48:	e79f      	b.n	8011e8a <__sfvwrite_r+0x182>
 8011f4a:	4b1c      	ldr	r3, [pc, #112]	; (8011fbc <__sfvwrite_r+0x2b4>)
 8011f4c:	0028      	movs	r0, r5
 8011f4e:	429d      	cmp	r5, r3
 8011f50:	d900      	bls.n	8011f54 <__sfvwrite_r+0x24c>
 8011f52:	481b      	ldr	r0, [pc, #108]	; (8011fc0 <__sfvwrite_r+0x2b8>)
 8011f54:	0039      	movs	r1, r7
 8011f56:	f7ee f97b 	bl	8000250 <__divsi3>
 8011f5a:	003b      	movs	r3, r7
 8011f5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011f5e:	4343      	muls	r3, r0
 8011f60:	9a03      	ldr	r2, [sp, #12]
 8011f62:	69e1      	ldr	r1, [r4, #28]
 8011f64:	9802      	ldr	r0, [sp, #8]
 8011f66:	47b0      	blx	r6
 8011f68:	1e07      	subs	r7, r0, #0
 8011f6a:	dcb7      	bgt.n	8011edc <__sfvwrite_r+0x1d4>
 8011f6c:	e78d      	b.n	8011e8a <__sfvwrite_r+0x182>
 8011f6e:	9b01      	ldr	r3, [sp, #4]
 8011f70:	2000      	movs	r0, #0
 8011f72:	681e      	ldr	r6, [r3, #0]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	9303      	str	r3, [sp, #12]
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	3308      	adds	r3, #8
 8011f7c:	9301      	str	r3, [sp, #4]
 8011f7e:	e6e6      	b.n	8011d4e <__sfvwrite_r+0x46>
 8011f80:	9a05      	ldr	r2, [sp, #20]
 8011f82:	4293      	cmp	r3, r2
 8011f84:	dc08      	bgt.n	8011f98 <__sfvwrite_r+0x290>
 8011f86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011f88:	0032      	movs	r2, r6
 8011f8a:	69e1      	ldr	r1, [r4, #28]
 8011f8c:	9802      	ldr	r0, [sp, #8]
 8011f8e:	47a8      	blx	r5
 8011f90:	1e05      	subs	r5, r0, #0
 8011f92:	dd00      	ble.n	8011f96 <__sfvwrite_r+0x28e>
 8011f94:	e70a      	b.n	8011dac <__sfvwrite_r+0xa4>
 8011f96:	e778      	b.n	8011e8a <__sfvwrite_r+0x182>
 8011f98:	9a05      	ldr	r2, [sp, #20]
 8011f9a:	0031      	movs	r1, r6
 8011f9c:	f000 f91b 	bl	80121d6 <memmove>
 8011fa0:	9a05      	ldr	r2, [sp, #20]
 8011fa2:	68a3      	ldr	r3, [r4, #8]
 8011fa4:	0015      	movs	r5, r2
 8011fa6:	1a9b      	subs	r3, r3, r2
 8011fa8:	60a3      	str	r3, [r4, #8]
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	189b      	adds	r3, r3, r2
 8011fae:	6023      	str	r3, [r4, #0]
 8011fb0:	e6fc      	b.n	8011dac <__sfvwrite_r+0xa4>
 8011fb2:	46c0      	nop			; (mov r8, r8)
 8011fb4:	7ffffc00 	.word	0x7ffffc00
 8011fb8:	fffffb7f 	.word	0xfffffb7f
 8011fbc:	7ffffffe 	.word	0x7ffffffe
 8011fc0:	7fffffff 	.word	0x7fffffff

08011fc4 <__submore>:
 8011fc4:	000b      	movs	r3, r1
 8011fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8011fca:	3340      	adds	r3, #64	; 0x40
 8011fcc:	000c      	movs	r4, r1
 8011fce:	429d      	cmp	r5, r3
 8011fd0:	d11c      	bne.n	801200c <__submore+0x48>
 8011fd2:	2680      	movs	r6, #128	; 0x80
 8011fd4:	00f6      	lsls	r6, r6, #3
 8011fd6:	0031      	movs	r1, r6
 8011fd8:	f7f8 faa8 	bl	800a52c <_malloc_r>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d102      	bne.n	8011fe6 <__submore+0x22>
 8011fe0:	2001      	movs	r0, #1
 8011fe2:	4240      	negs	r0, r0
 8011fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011fe6:	0023      	movs	r3, r4
 8011fe8:	6320      	str	r0, [r4, #48]	; 0x30
 8011fea:	6366      	str	r6, [r4, #52]	; 0x34
 8011fec:	3342      	adds	r3, #66	; 0x42
 8011fee:	781a      	ldrb	r2, [r3, #0]
 8011ff0:	4b10      	ldr	r3, [pc, #64]	; (8012034 <__submore+0x70>)
 8011ff2:	54c2      	strb	r2, [r0, r3]
 8011ff4:	0023      	movs	r3, r4
 8011ff6:	3341      	adds	r3, #65	; 0x41
 8011ff8:	781a      	ldrb	r2, [r3, #0]
 8011ffa:	4b0f      	ldr	r3, [pc, #60]	; (8012038 <__submore+0x74>)
 8011ffc:	54c2      	strb	r2, [r0, r3]
 8011ffe:	782a      	ldrb	r2, [r5, #0]
 8012000:	4b0e      	ldr	r3, [pc, #56]	; (801203c <__submore+0x78>)
 8012002:	54c2      	strb	r2, [r0, r3]
 8012004:	18c0      	adds	r0, r0, r3
 8012006:	6020      	str	r0, [r4, #0]
 8012008:	2000      	movs	r0, #0
 801200a:	e7eb      	b.n	8011fe4 <__submore+0x20>
 801200c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801200e:	0029      	movs	r1, r5
 8012010:	0073      	lsls	r3, r6, #1
 8012012:	001a      	movs	r2, r3
 8012014:	9301      	str	r3, [sp, #4]
 8012016:	f7fe fc47 	bl	80108a8 <_realloc_r>
 801201a:	1e05      	subs	r5, r0, #0
 801201c:	d0e0      	beq.n	8011fe0 <__submore+0x1c>
 801201e:	1987      	adds	r7, r0, r6
 8012020:	0001      	movs	r1, r0
 8012022:	0032      	movs	r2, r6
 8012024:	0038      	movs	r0, r7
 8012026:	f7f9 fde6 	bl	800bbf6 <memcpy>
 801202a:	9b01      	ldr	r3, [sp, #4]
 801202c:	6027      	str	r7, [r4, #0]
 801202e:	6325      	str	r5, [r4, #48]	; 0x30
 8012030:	6363      	str	r3, [r4, #52]	; 0x34
 8012032:	e7e9      	b.n	8012008 <__submore+0x44>
 8012034:	000003ff 	.word	0x000003ff
 8012038:	000003fe 	.word	0x000003fe
 801203c:	000003fd 	.word	0x000003fd

08012040 <__swsetup_r>:
 8012040:	4b30      	ldr	r3, [pc, #192]	; (8012104 <__swsetup_r+0xc4>)
 8012042:	b570      	push	{r4, r5, r6, lr}
 8012044:	0005      	movs	r5, r0
 8012046:	6818      	ldr	r0, [r3, #0]
 8012048:	000c      	movs	r4, r1
 801204a:	2800      	cmp	r0, #0
 801204c:	d004      	beq.n	8012058 <__swsetup_r+0x18>
 801204e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012050:	2b00      	cmp	r3, #0
 8012052:	d101      	bne.n	8012058 <__swsetup_r+0x18>
 8012054:	f7f9 fbec 	bl	800b830 <__sinit>
 8012058:	230c      	movs	r3, #12
 801205a:	5ee2      	ldrsh	r2, [r4, r3]
 801205c:	b293      	uxth	r3, r2
 801205e:	0711      	lsls	r1, r2, #28
 8012060:	d423      	bmi.n	80120aa <__swsetup_r+0x6a>
 8012062:	06d9      	lsls	r1, r3, #27
 8012064:	d407      	bmi.n	8012076 <__swsetup_r+0x36>
 8012066:	2309      	movs	r3, #9
 8012068:	2001      	movs	r0, #1
 801206a:	602b      	str	r3, [r5, #0]
 801206c:	3337      	adds	r3, #55	; 0x37
 801206e:	4313      	orrs	r3, r2
 8012070:	81a3      	strh	r3, [r4, #12]
 8012072:	4240      	negs	r0, r0
 8012074:	bd70      	pop	{r4, r5, r6, pc}
 8012076:	075b      	lsls	r3, r3, #29
 8012078:	d513      	bpl.n	80120a2 <__swsetup_r+0x62>
 801207a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801207c:	2900      	cmp	r1, #0
 801207e:	d008      	beq.n	8012092 <__swsetup_r+0x52>
 8012080:	0023      	movs	r3, r4
 8012082:	3340      	adds	r3, #64	; 0x40
 8012084:	4299      	cmp	r1, r3
 8012086:	d002      	beq.n	801208e <__swsetup_r+0x4e>
 8012088:	0028      	movs	r0, r5
 801208a:	f7f9 fe2f 	bl	800bcec <_free_r>
 801208e:	2300      	movs	r3, #0
 8012090:	6323      	str	r3, [r4, #48]	; 0x30
 8012092:	2224      	movs	r2, #36	; 0x24
 8012094:	89a3      	ldrh	r3, [r4, #12]
 8012096:	4393      	bics	r3, r2
 8012098:	81a3      	strh	r3, [r4, #12]
 801209a:	2300      	movs	r3, #0
 801209c:	6063      	str	r3, [r4, #4]
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	2308      	movs	r3, #8
 80120a4:	89a2      	ldrh	r2, [r4, #12]
 80120a6:	4313      	orrs	r3, r2
 80120a8:	81a3      	strh	r3, [r4, #12]
 80120aa:	6923      	ldr	r3, [r4, #16]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10b      	bne.n	80120c8 <__swsetup_r+0x88>
 80120b0:	21a0      	movs	r1, #160	; 0xa0
 80120b2:	2280      	movs	r2, #128	; 0x80
 80120b4:	89a3      	ldrh	r3, [r4, #12]
 80120b6:	0089      	lsls	r1, r1, #2
 80120b8:	0092      	lsls	r2, r2, #2
 80120ba:	400b      	ands	r3, r1
 80120bc:	4293      	cmp	r3, r2
 80120be:	d003      	beq.n	80120c8 <__swsetup_r+0x88>
 80120c0:	0021      	movs	r1, r4
 80120c2:	0028      	movs	r0, r5
 80120c4:	f000 f8e8 	bl	8012298 <__smakebuf_r>
 80120c8:	220c      	movs	r2, #12
 80120ca:	5ea3      	ldrsh	r3, [r4, r2]
 80120cc:	2001      	movs	r0, #1
 80120ce:	001a      	movs	r2, r3
 80120d0:	b299      	uxth	r1, r3
 80120d2:	4002      	ands	r2, r0
 80120d4:	4203      	tst	r3, r0
 80120d6:	d00f      	beq.n	80120f8 <__swsetup_r+0xb8>
 80120d8:	2200      	movs	r2, #0
 80120da:	60a2      	str	r2, [r4, #8]
 80120dc:	6962      	ldr	r2, [r4, #20]
 80120de:	4252      	negs	r2, r2
 80120e0:	61a2      	str	r2, [r4, #24]
 80120e2:	2000      	movs	r0, #0
 80120e4:	6922      	ldr	r2, [r4, #16]
 80120e6:	4282      	cmp	r2, r0
 80120e8:	d1c4      	bne.n	8012074 <__swsetup_r+0x34>
 80120ea:	0609      	lsls	r1, r1, #24
 80120ec:	d5c2      	bpl.n	8012074 <__swsetup_r+0x34>
 80120ee:	2240      	movs	r2, #64	; 0x40
 80120f0:	4313      	orrs	r3, r2
 80120f2:	81a3      	strh	r3, [r4, #12]
 80120f4:	3801      	subs	r0, #1
 80120f6:	e7bd      	b.n	8012074 <__swsetup_r+0x34>
 80120f8:	0788      	lsls	r0, r1, #30
 80120fa:	d400      	bmi.n	80120fe <__swsetup_r+0xbe>
 80120fc:	6962      	ldr	r2, [r4, #20]
 80120fe:	60a2      	str	r2, [r4, #8]
 8012100:	e7ef      	b.n	80120e2 <__swsetup_r+0xa2>
 8012102:	46c0      	nop			; (mov r8, r8)
 8012104:	200006d0 	.word	0x200006d0

08012108 <__fputwc>:
 8012108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801210a:	b085      	sub	sp, #20
 801210c:	000e      	movs	r6, r1
 801210e:	0015      	movs	r5, r2
 8012110:	9001      	str	r0, [sp, #4]
 8012112:	f7f9 fccf 	bl	800bab4 <__locale_mb_cur_max>
 8012116:	0004      	movs	r4, r0
 8012118:	2801      	cmp	r0, #1
 801211a:	d119      	bne.n	8012150 <__fputwc+0x48>
 801211c:	1e73      	subs	r3, r6, #1
 801211e:	2bfe      	cmp	r3, #254	; 0xfe
 8012120:	d816      	bhi.n	8012150 <__fputwc+0x48>
 8012122:	ab02      	add	r3, sp, #8
 8012124:	711e      	strb	r6, [r3, #4]
 8012126:	2700      	movs	r7, #0
 8012128:	42a7      	cmp	r7, r4
 801212a:	d020      	beq.n	801216e <__fputwc+0x66>
 801212c:	ab03      	add	r3, sp, #12
 801212e:	5dd9      	ldrb	r1, [r3, r7]
 8012130:	68ab      	ldr	r3, [r5, #8]
 8012132:	3b01      	subs	r3, #1
 8012134:	60ab      	str	r3, [r5, #8]
 8012136:	2b00      	cmp	r3, #0
 8012138:	da04      	bge.n	8012144 <__fputwc+0x3c>
 801213a:	69aa      	ldr	r2, [r5, #24]
 801213c:	4293      	cmp	r3, r2
 801213e:	db19      	blt.n	8012174 <__fputwc+0x6c>
 8012140:	290a      	cmp	r1, #10
 8012142:	d017      	beq.n	8012174 <__fputwc+0x6c>
 8012144:	682b      	ldr	r3, [r5, #0]
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	602a      	str	r2, [r5, #0]
 801214a:	7019      	strb	r1, [r3, #0]
 801214c:	3701      	adds	r7, #1
 801214e:	e7eb      	b.n	8012128 <__fputwc+0x20>
 8012150:	002b      	movs	r3, r5
 8012152:	0032      	movs	r2, r6
 8012154:	9801      	ldr	r0, [sp, #4]
 8012156:	335c      	adds	r3, #92	; 0x5c
 8012158:	a903      	add	r1, sp, #12
 801215a:	f000 f857 	bl	801220c <_wcrtomb_r>
 801215e:	0004      	movs	r4, r0
 8012160:	1c43      	adds	r3, r0, #1
 8012162:	d1e0      	bne.n	8012126 <__fputwc+0x1e>
 8012164:	2340      	movs	r3, #64	; 0x40
 8012166:	0006      	movs	r6, r0
 8012168:	89aa      	ldrh	r2, [r5, #12]
 801216a:	4313      	orrs	r3, r2
 801216c:	81ab      	strh	r3, [r5, #12]
 801216e:	0030      	movs	r0, r6
 8012170:	b005      	add	sp, #20
 8012172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012174:	002a      	movs	r2, r5
 8012176:	9801      	ldr	r0, [sp, #4]
 8012178:	f000 f8cc 	bl	8012314 <__swbuf_r>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d1e5      	bne.n	801214c <__fputwc+0x44>
 8012180:	0006      	movs	r6, r0
 8012182:	e7f4      	b.n	801216e <__fputwc+0x66>

08012184 <_fputwc_r>:
 8012184:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012186:	b570      	push	{r4, r5, r6, lr}
 8012188:	0005      	movs	r5, r0
 801218a:	000e      	movs	r6, r1
 801218c:	0014      	movs	r4, r2
 801218e:	07db      	lsls	r3, r3, #31
 8012190:	d405      	bmi.n	801219e <_fputwc_r+0x1a>
 8012192:	8993      	ldrh	r3, [r2, #12]
 8012194:	059b      	lsls	r3, r3, #22
 8012196:	d402      	bmi.n	801219e <_fputwc_r+0x1a>
 8012198:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801219a:	f7f9 fd1f 	bl	800bbdc <__retarget_lock_acquire_recursive>
 801219e:	230c      	movs	r3, #12
 80121a0:	5ee2      	ldrsh	r2, [r4, r3]
 80121a2:	2380      	movs	r3, #128	; 0x80
 80121a4:	019b      	lsls	r3, r3, #6
 80121a6:	421a      	tst	r2, r3
 80121a8:	d104      	bne.n	80121b4 <_fputwc_r+0x30>
 80121aa:	431a      	orrs	r2, r3
 80121ac:	81a2      	strh	r2, [r4, #12]
 80121ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121b0:	4313      	orrs	r3, r2
 80121b2:	6663      	str	r3, [r4, #100]	; 0x64
 80121b4:	0028      	movs	r0, r5
 80121b6:	0022      	movs	r2, r4
 80121b8:	0031      	movs	r1, r6
 80121ba:	f7ff ffa5 	bl	8012108 <__fputwc>
 80121be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121c0:	0005      	movs	r5, r0
 80121c2:	07db      	lsls	r3, r3, #31
 80121c4:	d405      	bmi.n	80121d2 <_fputwc_r+0x4e>
 80121c6:	89a3      	ldrh	r3, [r4, #12]
 80121c8:	059b      	lsls	r3, r3, #22
 80121ca:	d402      	bmi.n	80121d2 <_fputwc_r+0x4e>
 80121cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121ce:	f7f9 fd06 	bl	800bbde <__retarget_lock_release_recursive>
 80121d2:	0028      	movs	r0, r5
 80121d4:	bd70      	pop	{r4, r5, r6, pc}

080121d6 <memmove>:
 80121d6:	b510      	push	{r4, lr}
 80121d8:	4288      	cmp	r0, r1
 80121da:	d902      	bls.n	80121e2 <memmove+0xc>
 80121dc:	188b      	adds	r3, r1, r2
 80121de:	4298      	cmp	r0, r3
 80121e0:	d303      	bcc.n	80121ea <memmove+0x14>
 80121e2:	2300      	movs	r3, #0
 80121e4:	e007      	b.n	80121f6 <memmove+0x20>
 80121e6:	5c8b      	ldrb	r3, [r1, r2]
 80121e8:	5483      	strb	r3, [r0, r2]
 80121ea:	3a01      	subs	r2, #1
 80121ec:	d2fb      	bcs.n	80121e6 <memmove+0x10>
 80121ee:	bd10      	pop	{r4, pc}
 80121f0:	5ccc      	ldrb	r4, [r1, r3]
 80121f2:	54c4      	strb	r4, [r0, r3]
 80121f4:	3301      	adds	r3, #1
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d1fa      	bne.n	80121f0 <memmove+0x1a>
 80121fa:	e7f8      	b.n	80121ee <memmove+0x18>

080121fc <abort>:
 80121fc:	2006      	movs	r0, #6
 80121fe:	b510      	push	{r4, lr}
 8012200:	f000 f906 	bl	8012410 <raise>
 8012204:	2001      	movs	r0, #1
 8012206:	f7f1 fc9f 	bl	8003b48 <_exit>
	...

0801220c <_wcrtomb_r>:
 801220c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801220e:	001d      	movs	r5, r3
 8012210:	4b09      	ldr	r3, [pc, #36]	; (8012238 <_wcrtomb_r+0x2c>)
 8012212:	0004      	movs	r4, r0
 8012214:	33e0      	adds	r3, #224	; 0xe0
 8012216:	681e      	ldr	r6, [r3, #0]
 8012218:	002b      	movs	r3, r5
 801221a:	2900      	cmp	r1, #0
 801221c:	d101      	bne.n	8012222 <_wcrtomb_r+0x16>
 801221e:	000a      	movs	r2, r1
 8012220:	a901      	add	r1, sp, #4
 8012222:	0020      	movs	r0, r4
 8012224:	47b0      	blx	r6
 8012226:	1c43      	adds	r3, r0, #1
 8012228:	d103      	bne.n	8012232 <_wcrtomb_r+0x26>
 801222a:	2300      	movs	r3, #0
 801222c:	602b      	str	r3, [r5, #0]
 801222e:	338a      	adds	r3, #138	; 0x8a
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	b004      	add	sp, #16
 8012234:	bd70      	pop	{r4, r5, r6, pc}
 8012236:	46c0      	nop			; (mov r8, r8)
 8012238:	20000444 	.word	0x20000444

0801223c <__swhatbuf_r>:
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	000e      	movs	r6, r1
 8012240:	001d      	movs	r5, r3
 8012242:	230e      	movs	r3, #14
 8012244:	5ec9      	ldrsh	r1, [r1, r3]
 8012246:	0014      	movs	r4, r2
 8012248:	b096      	sub	sp, #88	; 0x58
 801224a:	2900      	cmp	r1, #0
 801224c:	da09      	bge.n	8012262 <__swhatbuf_r+0x26>
 801224e:	89b2      	ldrh	r2, [r6, #12]
 8012250:	2380      	movs	r3, #128	; 0x80
 8012252:	0011      	movs	r1, r2
 8012254:	4019      	ands	r1, r3
 8012256:	421a      	tst	r2, r3
 8012258:	d018      	beq.n	801228c <__swhatbuf_r+0x50>
 801225a:	2100      	movs	r1, #0
 801225c:	3b40      	subs	r3, #64	; 0x40
 801225e:	0008      	movs	r0, r1
 8012260:	e010      	b.n	8012284 <__swhatbuf_r+0x48>
 8012262:	466a      	mov	r2, sp
 8012264:	f000 f8de 	bl	8012424 <_fstat_r>
 8012268:	2800      	cmp	r0, #0
 801226a:	dbf0      	blt.n	801224e <__swhatbuf_r+0x12>
 801226c:	23f0      	movs	r3, #240	; 0xf0
 801226e:	9901      	ldr	r1, [sp, #4]
 8012270:	021b      	lsls	r3, r3, #8
 8012272:	4019      	ands	r1, r3
 8012274:	4b07      	ldr	r3, [pc, #28]	; (8012294 <__swhatbuf_r+0x58>)
 8012276:	2080      	movs	r0, #128	; 0x80
 8012278:	18c9      	adds	r1, r1, r3
 801227a:	424b      	negs	r3, r1
 801227c:	4159      	adcs	r1, r3
 801227e:	2380      	movs	r3, #128	; 0x80
 8012280:	0100      	lsls	r0, r0, #4
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	6029      	str	r1, [r5, #0]
 8012286:	6023      	str	r3, [r4, #0]
 8012288:	b016      	add	sp, #88	; 0x58
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	2380      	movs	r3, #128	; 0x80
 801228e:	00db      	lsls	r3, r3, #3
 8012290:	e7e5      	b.n	801225e <__swhatbuf_r+0x22>
 8012292:	46c0      	nop			; (mov r8, r8)
 8012294:	ffffe000 	.word	0xffffe000

08012298 <__smakebuf_r>:
 8012298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801229a:	2602      	movs	r6, #2
 801229c:	898b      	ldrh	r3, [r1, #12]
 801229e:	0005      	movs	r5, r0
 80122a0:	000c      	movs	r4, r1
 80122a2:	4233      	tst	r3, r6
 80122a4:	d006      	beq.n	80122b4 <__smakebuf_r+0x1c>
 80122a6:	0023      	movs	r3, r4
 80122a8:	3343      	adds	r3, #67	; 0x43
 80122aa:	6023      	str	r3, [r4, #0]
 80122ac:	6123      	str	r3, [r4, #16]
 80122ae:	2301      	movs	r3, #1
 80122b0:	6163      	str	r3, [r4, #20]
 80122b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80122b4:	466a      	mov	r2, sp
 80122b6:	ab01      	add	r3, sp, #4
 80122b8:	f7ff ffc0 	bl	801223c <__swhatbuf_r>
 80122bc:	9900      	ldr	r1, [sp, #0]
 80122be:	0007      	movs	r7, r0
 80122c0:	0028      	movs	r0, r5
 80122c2:	f7f8 f933 	bl	800a52c <_malloc_r>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d108      	bne.n	80122dc <__smakebuf_r+0x44>
 80122ca:	220c      	movs	r2, #12
 80122cc:	5ea3      	ldrsh	r3, [r4, r2]
 80122ce:	059a      	lsls	r2, r3, #22
 80122d0:	d4ef      	bmi.n	80122b2 <__smakebuf_r+0x1a>
 80122d2:	2203      	movs	r2, #3
 80122d4:	4393      	bics	r3, r2
 80122d6:	431e      	orrs	r6, r3
 80122d8:	81a6      	strh	r6, [r4, #12]
 80122da:	e7e4      	b.n	80122a6 <__smakebuf_r+0xe>
 80122dc:	2380      	movs	r3, #128	; 0x80
 80122de:	89a2      	ldrh	r2, [r4, #12]
 80122e0:	6020      	str	r0, [r4, #0]
 80122e2:	4313      	orrs	r3, r2
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	9b00      	ldr	r3, [sp, #0]
 80122e8:	6120      	str	r0, [r4, #16]
 80122ea:	6163      	str	r3, [r4, #20]
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00c      	beq.n	801230c <__smakebuf_r+0x74>
 80122f2:	0028      	movs	r0, r5
 80122f4:	230e      	movs	r3, #14
 80122f6:	5ee1      	ldrsh	r1, [r4, r3]
 80122f8:	f000 f8a6 	bl	8012448 <_isatty_r>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d005      	beq.n	801230c <__smakebuf_r+0x74>
 8012300:	2303      	movs	r3, #3
 8012302:	89a2      	ldrh	r2, [r4, #12]
 8012304:	439a      	bics	r2, r3
 8012306:	3b02      	subs	r3, #2
 8012308:	4313      	orrs	r3, r2
 801230a:	81a3      	strh	r3, [r4, #12]
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	433b      	orrs	r3, r7
 8012310:	81a3      	strh	r3, [r4, #12]
 8012312:	e7ce      	b.n	80122b2 <__smakebuf_r+0x1a>

08012314 <__swbuf_r>:
 8012314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012316:	0006      	movs	r6, r0
 8012318:	000d      	movs	r5, r1
 801231a:	0014      	movs	r4, r2
 801231c:	2800      	cmp	r0, #0
 801231e:	d004      	beq.n	801232a <__swbuf_r+0x16>
 8012320:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012322:	2b00      	cmp	r3, #0
 8012324:	d101      	bne.n	801232a <__swbuf_r+0x16>
 8012326:	f7f9 fa83 	bl	800b830 <__sinit>
 801232a:	69a3      	ldr	r3, [r4, #24]
 801232c:	60a3      	str	r3, [r4, #8]
 801232e:	89a3      	ldrh	r3, [r4, #12]
 8012330:	071b      	lsls	r3, r3, #28
 8012332:	d52e      	bpl.n	8012392 <__swbuf_r+0x7e>
 8012334:	6923      	ldr	r3, [r4, #16]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d02b      	beq.n	8012392 <__swbuf_r+0x7e>
 801233a:	230c      	movs	r3, #12
 801233c:	5ee2      	ldrsh	r2, [r4, r3]
 801233e:	2380      	movs	r3, #128	; 0x80
 8012340:	019b      	lsls	r3, r3, #6
 8012342:	b2ef      	uxtb	r7, r5
 8012344:	b2ed      	uxtb	r5, r5
 8012346:	421a      	tst	r2, r3
 8012348:	d02c      	beq.n	80123a4 <__swbuf_r+0x90>
 801234a:	6923      	ldr	r3, [r4, #16]
 801234c:	6820      	ldr	r0, [r4, #0]
 801234e:	1ac0      	subs	r0, r0, r3
 8012350:	6963      	ldr	r3, [r4, #20]
 8012352:	4283      	cmp	r3, r0
 8012354:	dc05      	bgt.n	8012362 <__swbuf_r+0x4e>
 8012356:	0021      	movs	r1, r4
 8012358:	0030      	movs	r0, r6
 801235a:	f7fd fab3 	bl	800f8c4 <_fflush_r>
 801235e:	2800      	cmp	r0, #0
 8012360:	d11d      	bne.n	801239e <__swbuf_r+0x8a>
 8012362:	68a3      	ldr	r3, [r4, #8]
 8012364:	3001      	adds	r0, #1
 8012366:	3b01      	subs	r3, #1
 8012368:	60a3      	str	r3, [r4, #8]
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	1c5a      	adds	r2, r3, #1
 801236e:	6022      	str	r2, [r4, #0]
 8012370:	701f      	strb	r7, [r3, #0]
 8012372:	6963      	ldr	r3, [r4, #20]
 8012374:	4283      	cmp	r3, r0
 8012376:	d004      	beq.n	8012382 <__swbuf_r+0x6e>
 8012378:	89a3      	ldrh	r3, [r4, #12]
 801237a:	07db      	lsls	r3, r3, #31
 801237c:	d507      	bpl.n	801238e <__swbuf_r+0x7a>
 801237e:	2d0a      	cmp	r5, #10
 8012380:	d105      	bne.n	801238e <__swbuf_r+0x7a>
 8012382:	0021      	movs	r1, r4
 8012384:	0030      	movs	r0, r6
 8012386:	f7fd fa9d 	bl	800f8c4 <_fflush_r>
 801238a:	2800      	cmp	r0, #0
 801238c:	d107      	bne.n	801239e <__swbuf_r+0x8a>
 801238e:	0028      	movs	r0, r5
 8012390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012392:	0021      	movs	r1, r4
 8012394:	0030      	movs	r0, r6
 8012396:	f7ff fe53 	bl	8012040 <__swsetup_r>
 801239a:	2800      	cmp	r0, #0
 801239c:	d0cd      	beq.n	801233a <__swbuf_r+0x26>
 801239e:	2501      	movs	r5, #1
 80123a0:	426d      	negs	r5, r5
 80123a2:	e7f4      	b.n	801238e <__swbuf_r+0x7a>
 80123a4:	4313      	orrs	r3, r2
 80123a6:	81a3      	strh	r3, [r4, #12]
 80123a8:	4a02      	ldr	r2, [pc, #8]	; (80123b4 <__swbuf_r+0xa0>)
 80123aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123ac:	4013      	ands	r3, r2
 80123ae:	6663      	str	r3, [r4, #100]	; 0x64
 80123b0:	e7cb      	b.n	801234a <__swbuf_r+0x36>
 80123b2:	46c0      	nop			; (mov r8, r8)
 80123b4:	ffffdfff 	.word	0xffffdfff

080123b8 <_raise_r>:
 80123b8:	b570      	push	{r4, r5, r6, lr}
 80123ba:	0004      	movs	r4, r0
 80123bc:	000d      	movs	r5, r1
 80123be:	291f      	cmp	r1, #31
 80123c0:	d904      	bls.n	80123cc <_raise_r+0x14>
 80123c2:	2316      	movs	r3, #22
 80123c4:	6003      	str	r3, [r0, #0]
 80123c6:	2001      	movs	r0, #1
 80123c8:	4240      	negs	r0, r0
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	0003      	movs	r3, r0
 80123ce:	33fc      	adds	r3, #252	; 0xfc
 80123d0:	69db      	ldr	r3, [r3, #28]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d004      	beq.n	80123e0 <_raise_r+0x28>
 80123d6:	008a      	lsls	r2, r1, #2
 80123d8:	189b      	adds	r3, r3, r2
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	2a00      	cmp	r2, #0
 80123de:	d108      	bne.n	80123f2 <_raise_r+0x3a>
 80123e0:	0020      	movs	r0, r4
 80123e2:	f000 f855 	bl	8012490 <_getpid_r>
 80123e6:	002a      	movs	r2, r5
 80123e8:	0001      	movs	r1, r0
 80123ea:	0020      	movs	r0, r4
 80123ec:	f000 f83e 	bl	801246c <_kill_r>
 80123f0:	e7eb      	b.n	80123ca <_raise_r+0x12>
 80123f2:	2000      	movs	r0, #0
 80123f4:	2a01      	cmp	r2, #1
 80123f6:	d0e8      	beq.n	80123ca <_raise_r+0x12>
 80123f8:	1c51      	adds	r1, r2, #1
 80123fa:	d103      	bne.n	8012404 <_raise_r+0x4c>
 80123fc:	2316      	movs	r3, #22
 80123fe:	3001      	adds	r0, #1
 8012400:	6023      	str	r3, [r4, #0]
 8012402:	e7e2      	b.n	80123ca <_raise_r+0x12>
 8012404:	2400      	movs	r4, #0
 8012406:	0028      	movs	r0, r5
 8012408:	601c      	str	r4, [r3, #0]
 801240a:	4790      	blx	r2
 801240c:	0020      	movs	r0, r4
 801240e:	e7dc      	b.n	80123ca <_raise_r+0x12>

08012410 <raise>:
 8012410:	b510      	push	{r4, lr}
 8012412:	4b03      	ldr	r3, [pc, #12]	; (8012420 <raise+0x10>)
 8012414:	0001      	movs	r1, r0
 8012416:	6818      	ldr	r0, [r3, #0]
 8012418:	f7ff ffce 	bl	80123b8 <_raise_r>
 801241c:	bd10      	pop	{r4, pc}
 801241e:	46c0      	nop			; (mov r8, r8)
 8012420:	200006d0 	.word	0x200006d0

08012424 <_fstat_r>:
 8012424:	2300      	movs	r3, #0
 8012426:	b570      	push	{r4, r5, r6, lr}
 8012428:	4d06      	ldr	r5, [pc, #24]	; (8012444 <_fstat_r+0x20>)
 801242a:	0004      	movs	r4, r0
 801242c:	0008      	movs	r0, r1
 801242e:	0011      	movs	r1, r2
 8012430:	602b      	str	r3, [r5, #0]
 8012432:	f7f1 fbd8 	bl	8003be6 <_fstat>
 8012436:	1c43      	adds	r3, r0, #1
 8012438:	d103      	bne.n	8012442 <_fstat_r+0x1e>
 801243a:	682b      	ldr	r3, [r5, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d000      	beq.n	8012442 <_fstat_r+0x1e>
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	bd70      	pop	{r4, r5, r6, pc}
 8012444:	20000d74 	.word	0x20000d74

08012448 <_isatty_r>:
 8012448:	2300      	movs	r3, #0
 801244a:	b570      	push	{r4, r5, r6, lr}
 801244c:	4d06      	ldr	r5, [pc, #24]	; (8012468 <_isatty_r+0x20>)
 801244e:	0004      	movs	r4, r0
 8012450:	0008      	movs	r0, r1
 8012452:	602b      	str	r3, [r5, #0]
 8012454:	f7f1 fbd5 	bl	8003c02 <_isatty>
 8012458:	1c43      	adds	r3, r0, #1
 801245a:	d103      	bne.n	8012464 <_isatty_r+0x1c>
 801245c:	682b      	ldr	r3, [r5, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d000      	beq.n	8012464 <_isatty_r+0x1c>
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	46c0      	nop			; (mov r8, r8)
 8012468:	20000d74 	.word	0x20000d74

0801246c <_kill_r>:
 801246c:	2300      	movs	r3, #0
 801246e:	b570      	push	{r4, r5, r6, lr}
 8012470:	4d06      	ldr	r5, [pc, #24]	; (801248c <_kill_r+0x20>)
 8012472:	0004      	movs	r4, r0
 8012474:	0008      	movs	r0, r1
 8012476:	0011      	movs	r1, r2
 8012478:	602b      	str	r3, [r5, #0]
 801247a:	f7f1 fb55 	bl	8003b28 <_kill>
 801247e:	1c43      	adds	r3, r0, #1
 8012480:	d103      	bne.n	801248a <_kill_r+0x1e>
 8012482:	682b      	ldr	r3, [r5, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d000      	beq.n	801248a <_kill_r+0x1e>
 8012488:	6023      	str	r3, [r4, #0]
 801248a:	bd70      	pop	{r4, r5, r6, pc}
 801248c:	20000d74 	.word	0x20000d74

08012490 <_getpid_r>:
 8012490:	b510      	push	{r4, lr}
 8012492:	f7f1 fb43 	bl	8003b1c <_getpid>
 8012496:	bd10      	pop	{r4, pc}

08012498 <round>:
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	004a      	lsls	r2, r1, #1
 801249c:	000d      	movs	r5, r1
 801249e:	4920      	ldr	r1, [pc, #128]	; (8012520 <round+0x88>)
 80124a0:	0d52      	lsrs	r2, r2, #21
 80124a2:	1851      	adds	r1, r2, r1
 80124a4:	0006      	movs	r6, r0
 80124a6:	2913      	cmp	r1, #19
 80124a8:	dc18      	bgt.n	80124dc <round+0x44>
 80124aa:	2900      	cmp	r1, #0
 80124ac:	da09      	bge.n	80124c2 <round+0x2a>
 80124ae:	0feb      	lsrs	r3, r5, #31
 80124b0:	2200      	movs	r2, #0
 80124b2:	07db      	lsls	r3, r3, #31
 80124b4:	3101      	adds	r1, #1
 80124b6:	d101      	bne.n	80124bc <round+0x24>
 80124b8:	491a      	ldr	r1, [pc, #104]	; (8012524 <round+0x8c>)
 80124ba:	430b      	orrs	r3, r1
 80124bc:	0019      	movs	r1, r3
 80124be:	0010      	movs	r0, r2
 80124c0:	e017      	b.n	80124f2 <round+0x5a>
 80124c2:	4c19      	ldr	r4, [pc, #100]	; (8012528 <round+0x90>)
 80124c4:	410c      	asrs	r4, r1
 80124c6:	0022      	movs	r2, r4
 80124c8:	402a      	ands	r2, r5
 80124ca:	4302      	orrs	r2, r0
 80124cc:	d013      	beq.n	80124f6 <round+0x5e>
 80124ce:	2280      	movs	r2, #128	; 0x80
 80124d0:	0312      	lsls	r2, r2, #12
 80124d2:	410a      	asrs	r2, r1
 80124d4:	1953      	adds	r3, r2, r5
 80124d6:	43a3      	bics	r3, r4
 80124d8:	2200      	movs	r2, #0
 80124da:	e7ef      	b.n	80124bc <round+0x24>
 80124dc:	2933      	cmp	r1, #51	; 0x33
 80124de:	dd0d      	ble.n	80124fc <round+0x64>
 80124e0:	2380      	movs	r3, #128	; 0x80
 80124e2:	00db      	lsls	r3, r3, #3
 80124e4:	4299      	cmp	r1, r3
 80124e6:	d106      	bne.n	80124f6 <round+0x5e>
 80124e8:	0002      	movs	r2, r0
 80124ea:	002b      	movs	r3, r5
 80124ec:	0029      	movs	r1, r5
 80124ee:	f7ee f963 	bl	80007b8 <__aeabi_dadd>
 80124f2:	0006      	movs	r6, r0
 80124f4:	000d      	movs	r5, r1
 80124f6:	0030      	movs	r0, r6
 80124f8:	0029      	movs	r1, r5
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	4c0b      	ldr	r4, [pc, #44]	; (801252c <round+0x94>)
 80124fe:	1912      	adds	r2, r2, r4
 8012500:	2401      	movs	r4, #1
 8012502:	4264      	negs	r4, r4
 8012504:	40d4      	lsrs	r4, r2
 8012506:	4220      	tst	r0, r4
 8012508:	d0f5      	beq.n	80124f6 <round+0x5e>
 801250a:	2233      	movs	r2, #51	; 0x33
 801250c:	1a51      	subs	r1, r2, r1
 801250e:	3a32      	subs	r2, #50	; 0x32
 8012510:	408a      	lsls	r2, r1
 8012512:	1812      	adds	r2, r2, r0
 8012514:	4282      	cmp	r2, r0
 8012516:	4180      	sbcs	r0, r0
 8012518:	4240      	negs	r0, r0
 801251a:	182b      	adds	r3, r5, r0
 801251c:	43a2      	bics	r2, r4
 801251e:	e7cd      	b.n	80124bc <round+0x24>
 8012520:	fffffc01 	.word	0xfffffc01
 8012524:	3ff00000 	.word	0x3ff00000
 8012528:	000fffff 	.word	0x000fffff
 801252c:	fffffbed 	.word	0xfffffbed

08012530 <_init>:
 8012530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012532:	46c0      	nop			; (mov r8, r8)
 8012534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012536:	bc08      	pop	{r3}
 8012538:	469e      	mov	lr, r3
 801253a:	4770      	bx	lr

0801253c <_fini>:
 801253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253e:	46c0      	nop			; (mov r8, r8)
 8012540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012542:	bc08      	pop	{r3}
 8012544:	469e      	mov	lr, r3
 8012546:	4770      	bx	lr
