
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800f4a8  0800f4a8  0001f4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb4c  0800fb4c  000206c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb4c  0800fb4c  0001fb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb54  0800fb54  000206c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fb54  0800fb54  0001fb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb5c  0800fb5c  0001fb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c8  20000000  0800fb60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200006c8  08010228  000206c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  08010228  00020d50  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b3f  00000000  00000000  00020733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003355  00000000  00000000  00038272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001131  00000000  00000000  0003cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002083a  00000000  00000000  0003dd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6d1  00000000  00000000  0005e553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8c7a  00000000  00000000  00079c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a14  00000000  00000000  001428a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001492b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c8 	.word	0x200006c8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f48c 	.word	0x0800f48c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006cc 	.word	0x200006cc
 8000100:	0800f48c 	.word	0x0800f48c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800f618 	.word	0x0800f618
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 f890 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f83c 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 face 	bl	8002b54 <MX_GPIO_Init>
  MX_RTC_Init();
 80025b8:	f000 f88e 	bl	80026d8 <MX_RTC_Init>
  MX_TIM6_Init();
 80025bc:	f000 f96e 	bl	800289c <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c0:	f000 f92e 	bl	8002820 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c4:	f000 f9a8 	bl	8002918 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025c8:	f000 f9f4 	bl	80029b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025cc:	f000 fa40 	bl	8002a50 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d0:	f000 fa8c 	bl	8002aec <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <main+0x78>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fbbf 	bl	8002d5c <send_debug_logs>
  //HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;

  if ( !is_system_initialized () )
 80025de:	f000 fbed 	bl	8002dbc <is_system_initialized>
 80025e2:	0003      	movs	r3, r0
 80025e4:	001a      	movs	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	4053      	eors	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <main+0x74>
  {
	  my_tim_init () ;
 80025f0:	f000 fc8c 	bl	8002f0c <my_tim_init>
	  my_gnss_sw_on () ;
 80025f4:	f000 fc30 	bl	8002e58 <my_gnss_sw_on>
	  my_tim_start () ;
 80025f8:	f000 fc94 	bl	8002f24 <my_tim_start>
	  //my_gnss_get_utc () ;
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <main+0x7c>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f004 fdb0 	bl	8007164 <my_gnss_acq_coordinates>
	  my_tim_stop () ;
 8002604:	f000 fc9e 	bl	8002f44 <my_tim_stop>
	  my_gnss_sw_off () ;
 8002608:	f000 fc40 	bl	8002e8c <my_gnss_sw_off>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <main+0x80>)
 800260e:	0018      	movs	r0, r3
 8002610:	f004 fe40 	bl	8007294 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <main+0x80>)
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fba0 	bl	8002d5c <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800261c:	e7fe      	b.n	800261c <main+0x74>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000000 	.word	0x20000000
 8002624:	20000a28 	.word	0x20000a28
 8002628:	20000a10 	.word	0x20000a10

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b095      	sub	sp, #84	; 0x54
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	2414      	movs	r4, #20
 8002634:	193b      	adds	r3, r7, r4
 8002636:	0018      	movs	r0, r3
 8002638:	233c      	movs	r3, #60	; 0x3c
 800263a:	001a      	movs	r2, r3
 800263c:	2100      	movs	r1, #0
 800263e:	f006 f9ef 	bl	8008a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	0018      	movs	r0, r3
 8002646:	2310      	movs	r3, #16
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f006 f9e8 	bl	8008a20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	0018      	movs	r0, r3
 8002656:	f001 fc3b 	bl	8003ed0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800265a:	f001 fc2b 	bl	8003eb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <SystemClock_Config+0xa8>)
 8002660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <SystemClock_Config+0xa8>)
 8002664:	2118      	movs	r1, #24
 8002666:	438a      	bics	r2, r1
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800266a:	193b      	adds	r3, r7, r4
 800266c:	2206      	movs	r2, #6
 800266e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002670:	193b      	adds	r3, r7, r4
 8002672:	2201      	movs	r2, #1
 8002674:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002676:	193b      	adds	r3, r7, r4
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0052      	lsls	r2, r2, #1
 800267c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800267e:	193b      	adds	r3, r7, r4
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002684:	193b      	adds	r3, r7, r4
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800268a:	193b      	adds	r3, r7, r4
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002690:	193b      	adds	r3, r7, r4
 8002692:	0018      	movs	r0, r3
 8002694:	f001 fc68 	bl	8003f68 <HAL_RCC_OscConfig>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800269c:	f000 fc84 	bl	8002fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2207      	movs	r2, #7
 80026a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2100      	movs	r1, #0
 80026bc:	0018      	movs	r0, r3
 80026be:	f001 ffb3 	bl	8004628 <HAL_RCC_ClockConfig>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026c6:	f000 fc6f 	bl	8002fa8 <Error_Handler>
  }
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b015      	add	sp, #84	; 0x54
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40021000 	.word	0x40021000

080026d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	; 0x40
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026de:	232c      	movs	r3, #44	; 0x2c
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	0018      	movs	r0, r3
 80026e4:	2314      	movs	r3, #20
 80026e6:	001a      	movs	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f006 f999 	bl	8008a20 <memset>
  RTC_DateTypeDef sDate = {0};
 80026ee:	2328      	movs	r3, #40	; 0x28
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026f6:	003b      	movs	r3, r7
 80026f8:	0018      	movs	r0, r3
 80026fa:	2328      	movs	r3, #40	; 0x28
 80026fc:	001a      	movs	r2, r3
 80026fe:	2100      	movs	r1, #0
 8002700:	f006 f98e 	bl	8008a20 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002704:	4b44      	ldr	r3, [pc, #272]	; (8002818 <MX_RTC_Init+0x140>)
 8002706:	4a45      	ldr	r2, [pc, #276]	; (800281c <MX_RTC_Init+0x144>)
 8002708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800270a:	4b43      	ldr	r3, [pc, #268]	; (8002818 <MX_RTC_Init+0x140>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002710:	4b41      	ldr	r3, [pc, #260]	; (8002818 <MX_RTC_Init+0x140>)
 8002712:	227f      	movs	r2, #127	; 0x7f
 8002714:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <MX_RTC_Init+0x140>)
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800271c:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <MX_RTC_Init+0x140>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <MX_RTC_Init+0x140>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <MX_RTC_Init+0x140>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <MX_RTC_Init+0x140>)
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	05d2      	lsls	r2, r2, #23
 8002734:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <MX_RTC_Init+0x140>)
 8002738:	2200      	movs	r2, #0
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <MX_RTC_Init+0x140>)
 800273e:	0018      	movs	r0, r3
 8002740:	f002 fb58 	bl	8004df4 <HAL_RTC_Init>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002748:	f000 fc2e 	bl	8002fa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002754:	187b      	adds	r3, r7, r1
 8002756:	2200      	movs	r2, #0
 8002758:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2200      	movs	r2, #0
 800275e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002760:	187b      	adds	r3, r7, r1
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002772:	1879      	adds	r1, r7, r1
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <MX_RTC_Init+0x140>)
 8002776:	2201      	movs	r2, #1
 8002778:	0018      	movs	r0, r3
 800277a:	f002 fbdd 	bl	8004f38 <HAL_RTC_SetTime>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002782:	f000 fc11 	bl	8002fa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002786:	2128      	movs	r1, #40	; 0x28
 8002788:	187b      	adds	r3, r7, r1
 800278a:	2206      	movs	r2, #6
 800278c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2201      	movs	r2, #1
 8002798:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2200      	movs	r2, #0
 800279e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027a0:	1879      	adds	r1, r7, r1
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_RTC_Init+0x140>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	0018      	movs	r0, r3
 80027a8:	f002 fcca 	bl	8005140 <HAL_RTC_SetDate>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80027b0:	f000 fbfa 	bl	8002fa8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80027b4:	003b      	movs	r3, r7
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80027ba:	003b      	movs	r3, r7
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80027c0:	003b      	movs	r3, r7
 80027c2:	2200      	movs	r2, #0
 80027c4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027c6:	003b      	movs	r3, r7
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027cc:	003b      	movs	r3, r7
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027d2:	003b      	movs	r3, r7
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027d8:	003b      	movs	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027de:	003b      	movs	r3, r7
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027e4:	003b      	movs	r3, r7
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80027ea:	003b      	movs	r3, r7
 80027ec:	2220      	movs	r2, #32
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80027f2:	003b      	movs	r3, r7
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0052      	lsls	r2, r2, #1
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027fa:	0039      	movs	r1, r7
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_RTC_Init+0x140>)
 80027fe:	2201      	movs	r2, #1
 8002800:	0018      	movs	r0, r3
 8002802:	f002 fd7d 	bl	8005300 <HAL_RTC_SetAlarm_IT>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d001      	beq.n	800280e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800280a:	f000 fbcd 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b010      	add	sp, #64	; 0x40
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	200006e4 	.word	0x200006e4
 800281c:	40002800 	.word	0x40002800

08002820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <MX_SPI1_Init+0x74>)
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <MX_SPI1_Init+0x78>)
 8002828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_SPI1_Init+0x74>)
 800282c:	2282      	movs	r2, #130	; 0x82
 800282e:	0052      	lsls	r2, r2, #1
 8002830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <MX_SPI1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <MX_SPI1_Init+0x74>)
 800283a:	22e0      	movs	r2, #224	; 0xe0
 800283c:	00d2      	lsls	r2, r2, #3
 800283e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MX_SPI1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <MX_SPI1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_SPI1_Init+0x74>)
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <MX_SPI1_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_SPI1_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_SPI1_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <MX_SPI1_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_SPI1_Init+0x74>)
 800286e:	2207      	movs	r2, #7
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MX_SPI1_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_SPI1_Init+0x74>)
 800287a:	2208      	movs	r2, #8
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <MX_SPI1_Init+0x74>)
 8002880:	0018      	movs	r0, r3
 8002882:	f002 ffbd 	bl	8005800 <HAL_SPI_Init>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800288a:	f000 fb8d 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000710 	.word	0x20000710
 8002898:	40013000 	.word	0x40013000

0800289c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	0018      	movs	r0, r3
 80028a6:	230c      	movs	r3, #12
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f006 f8b8 	bl	8008a20 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028b2:	4a16      	ldr	r2, [pc, #88]	; (800290c <MX_TIM6_Init+0x70>)
 80028b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <MX_TIM6_Init+0x74>)
 80028ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <MX_TIM6_Init+0x78>)
 80028c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f003 f84d 	bl	8005970 <HAL_TIM_Base_Init>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028da:	f000 fb65 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <MX_TIM6_Init+0x6c>)
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f003 fae5 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80028fa:	f000 fb55 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000774 	.word	0x20000774
 800290c:	40001000 	.word	0x40001000
 8002910:	00003e7f 	.word	0x00003e7f
 8002914:	000003e7 	.word	0x000003e7

08002918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800291e:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <MX_USART1_UART_Init+0x98>)
 8002920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002924:	22e1      	movs	r2, #225	; 0xe1
 8002926:	0252      	lsls	r2, r2, #9
 8002928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002962:	0018      	movs	r0, r3
 8002964:	f003 fb3a 	bl	8005fdc <HAL_UART_Init>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800296c:	f000 fb1c 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002972:	2100      	movs	r1, #0
 8002974:	0018      	movs	r0, r3
 8002976:	f004 fb15 	bl	8006fa4 <HAL_UARTEx_SetTxFifoThreshold>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800297e:	f000 fb13 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002984:	2100      	movs	r1, #0
 8002986:	0018      	movs	r0, r3
 8002988:	f004 fb4c 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002990:	f000 fb0a 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002996:	0018      	movs	r0, r3
 8002998:	f004 faca 	bl	8006f30 <HAL_UARTEx_DisableFifoMode>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d001      	beq.n	80029a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029a0:	f000 fb02 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	200007c0 	.word	0x200007c0
 80029b0:	40013800 	.word	0x40013800

080029b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b8:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <MX_USART2_UART_Init+0x98>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029c0:	22e1      	movs	r2, #225	; 0xe1
 80029c2:	0292      	lsls	r2, r2, #10
 80029c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029f0:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 80029fe:	0018      	movs	r0, r3
 8002a00:	f003 faec 	bl	8005fdc <HAL_UART_Init>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a08:	f000 face 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	0018      	movs	r0, r3
 8002a12:	f004 fac7 	bl	8006fa4 <HAL_UARTEx_SetTxFifoThreshold>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a1a:	f000 fac5 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	0018      	movs	r0, r3
 8002a24:	f004 fafe 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a2c:	f000 fabc 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <MX_USART2_UART_Init+0x94>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f004 fa7c 	bl	8006f30 <HAL_UARTEx_DisableFifoMode>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a3c:	f000 fab4 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	20000854 	.word	0x20000854
 8002a4c:	40004400 	.word	0x40004400

08002a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <MX_USART3_UART_Init+0x98>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a5c:	2296      	movs	r2, #150	; 0x96
 8002a5e:	0192      	lsls	r2, r2, #6
 8002a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f003 fa9e 	bl	8005fdc <HAL_UART_Init>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa4:	f000 fa80 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002aaa:	2100      	movs	r1, #0
 8002aac:	0018      	movs	r0, r3
 8002aae:	f004 fa79 	bl	8006fa4 <HAL_UARTEx_SetTxFifoThreshold>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ab6:	f000 fa77 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f004 fab0 	bl	8007024 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d001      	beq.n	8002acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f000 fa6e 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <MX_USART3_UART_Init+0x94>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f004 fa2e 	bl	8006f30 <HAL_UARTEx_DisableFifoMode>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d001      	beq.n	8002adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad8:	f000 fa66 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	200008e8 	.word	0x200008e8
 8002ae8:	40004800 	.word	0x40004800

08002aec <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002af2:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <MX_USART5_UART_Init+0x64>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002af8:	22e1      	movs	r2, #225	; 0xe1
 8002afa:	0252      	lsls	r2, r2, #9
 8002afc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <MX_USART5_UART_Init+0x60>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f003 fa50 	bl	8005fdc <HAL_UART_Init>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002b40:	f000 fa32 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	2000097c 	.word	0x2000097c
 8002b50:	40005000 	.word	0x40005000

08002b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b08b      	sub	sp, #44	; 0x2c
 8002b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	2414      	movs	r4, #20
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	0018      	movs	r0, r3
 8002b60:	2314      	movs	r3, #20
 8002b62:	001a      	movs	r2, r3
 8002b64:	2100      	movs	r1, #0
 8002b66:	f005 ff5b 	bl	8008a20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b70:	2104      	movs	r1, #4
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b70      	ldr	r3, [pc, #448]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b86:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b88:	2101      	movs	r1, #1
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba6:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b63      	ldr	r3, [pc, #396]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002bb8:	2108      	movs	r1, #8
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <MX_GPIO_Init+0x1f0>)
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bca:	23a0      	movs	r3, #160	; 0xa0
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f001 f950 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002bd8:	495b      	ldr	r1, [pc, #364]	; (8002d48 <MX_GPIO_Init+0x1f4>)
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f001 f94a 	bl	8003e78 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4858      	ldr	r0, [pc, #352]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	0019      	movs	r1, r3
 8002bee:	f001 f943 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002bf2:	4b57      	ldr	r3, [pc, #348]	; (8002d50 <MX_GPIO_Init+0x1fc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f001 f93d 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2288      	movs	r2, #136	; 0x88
 8002c08:	0352      	lsls	r2, r2, #13
 8002c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002c12:	193a      	adds	r2, r7, r4
 8002c14:	23a0      	movs	r3, #160	; 0xa0
 8002c16:	05db      	lsls	r3, r3, #23
 8002c18:	0011      	movs	r1, r2
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fee8 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2202      	movs	r2, #2
 8002c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c32:	193a      	adds	r2, r7, r4
 8002c34:	23a0      	movs	r3, #160	; 0xa0
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	0011      	movs	r1, r2
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 fed8 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	2210      	movs	r2, #16
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	2201      	movs	r2, #1
 8002c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c58:	193a      	adds	r2, r7, r4
 8002c5a:	23a0      	movs	r3, #160	; 0xa0
 8002c5c:	05db      	lsls	r3, r3, #23
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fec5 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002c66:	193b      	adds	r3, r7, r4
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <MX_GPIO_Init+0x200>)
 8002c6a:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2201      	movs	r2, #1
 8002c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	4a32      	ldr	r2, [pc, #200]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f000 feb3 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002c8a:	0021      	movs	r1, r4
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2288      	movs	r2, #136	; 0x88
 8002c96:	0352      	lsls	r2, r2, #13
 8002c98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	000c      	movs	r4, r1
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f000 fea1 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002cae:	0021      	movs	r1, r4
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0192      	lsls	r2, r2, #6
 8002cb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002cb8:	000c      	movs	r4, r1
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2211      	movs	r2, #17
 8002cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	0010      	movs	r0, r2
 8002cd4:	f000 fe8c 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <MX_GPIO_Init+0x204>)
 8002cdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <MX_GPIO_Init+0x1f8>)
 8002cee:	0019      	movs	r1, r3
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	f000 fe7d 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	2201      	movs	r2, #1
 8002d00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <MX_GPIO_Init+0x1fc>)
 8002d12:	0019      	movs	r1, r3
 8002d14:	0010      	movs	r0, r2
 8002d16:	f000 fe6b 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <MX_GPIO_Init+0x1fc>)
 8002d32:	0019      	movs	r1, r3
 8002d34:	0010      	movs	r0, r2
 8002d36:	f000 fe5b 	bl	80039f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b00b      	add	sp, #44	; 0x2c
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	40021000 	.word	0x40021000
 8002d48:	0000a403 	.word	0x0000a403
 8002d4c:	50000400 	.word	0x50000400
 8002d50:	50000c00 	.word	0x50000c00
 8002d54:	00008c03 	.word	0x00008c03
 8002d58:	00004040 	.word	0x00004040

08002d5c <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7fd f9cc 	bl	8000104 <strlen>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2bfa      	cmp	r3, #250	; 0xfa
 8002d74:	d908      	bls.n	8002d88 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d76:	23fa      	movs	r3, #250	; 0xfa
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <send_debug_logs+0x54>)
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <send_debug_logs+0x58>)
 8002d7e:	222a      	movs	r2, #42	; 0x2a
 8002d80:	f003 f9c2 	bl	8006108 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d84:	23fa      	movs	r3, #250	; 0xfa
 8002d86:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	23fa      	movs	r3, #250	; 0xfa
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4808      	ldr	r0, [pc, #32]	; (8002db4 <send_debug_logs+0x58>)
 8002d94:	f003 f9b8 	bl	8006108 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002d98:	23fa      	movs	r3, #250	; 0xfa
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4906      	ldr	r1, [pc, #24]	; (8002db8 <send_debug_logs+0x5c>)
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <send_debug_logs+0x58>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	f003 f9b1 	bl	8006108 <HAL_UART_Transmit>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	0800f4d0 	.word	0x0800f4d0
 8002db4:	20000854 	.word	0x20000854
 8002db8:	0800f4fc 	.word	0x0800f4fc

08002dbc <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002dc2:	1dbc      	adds	r4, r7, #6
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <is_system_initialized+0x34>)
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 fa64 	bl	8007294 <my_rtc_get_dt_s>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <is_system_initialized+0x34>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7ff ffc2 	bl	8002d5c <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	8819      	ldrh	r1, [r3, #0]
 8002ddc:	23fd      	movs	r3, #253	; 0xfd
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	2300      	movs	r3, #0
 8002de2:	4291      	cmp	r1, r2
 8002de4:	415b      	adcs	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b003      	add	sp, #12
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	20000a10 	.word	0x20000a10

08002df4 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d10e      	bne.n	8002e26 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	4811      	ldr	r0, [pc, #68]	; (8002e54 <my_ant_sw_pos+0x60>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	0019      	movs	r1, r3
 8002e12:	f001 f831 	bl	8003e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	480e      	ldr	r0, [pc, #56]	; (8002e54 <my_ant_sw_pos+0x60>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	0019      	movs	r1, r3
 8002e20:	f001 f82a 	bl	8003e78 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002e24:	e011      	b.n	8002e4a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d10d      	bne.n	8002e4a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <my_ant_sw_pos+0x60>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	0019      	movs	r1, r3
 8002e38:	f001 f81e 	bl	8003e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <my_ant_sw_pos+0x60>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	0019      	movs	r1, r3
 8002e46:	f001 f817 	bl	8003e78 <HAL_GPIO_WritePin>
}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	50000400 	.word	0x50000400

08002e58 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7ff ffc9 	bl	8002df4 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	4808      	ldr	r0, [pc, #32]	; (8002e88 <my_gnss_sw_on+0x30>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	f001 f804 	bl	8003e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <my_gnss_sw_on+0x30>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	0019      	movs	r1, r3
 8002e7a:	f000 fffd 	bl	8003e78 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002e7e:	f7ff fe35 	bl	8002aec <MX_USART5_UART_Init>
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	50000400 	.word	0x50000400

08002e8c <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8002e90:	2002      	movs	r0, #2
 8002e92:	f7ff ffaf 	bl	8002df4 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <my_gnss_sw_off+0x34>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	f000 ffea 	bl	8003e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	019b      	lsls	r3, r3, #6
 8002ea8:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <my_gnss_sw_off+0x34>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	0019      	movs	r1, r3
 8002eae:	f000 ffe3 	bl	8003e78 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( &HUART_GNSS ) ;
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <my_gnss_sw_off+0x38>)
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f003 f8e7 	bl	8006088 <HAL_UART_DeInit>

}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	50000400 	.word	0x50000400
 8002ec4:	2000097c 	.word	0x2000097c

08002ec8 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	000a      	movs	r2, r1
 8002ed2:	1cfb      	adds	r3, r7, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002ed6:	23fa      	movs	r3, #250	; 0xfa
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4809      	ldr	r0, [pc, #36]	; (8002f04 <my_gnss_receive_byte+0x3c>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f003 f9b6 	bl	8006250 <HAL_UART_Receive>
	if ( verbose )
 8002ee4:	1cfb      	adds	r3, r7, #3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002eec:	23fa      	movs	r3, #250	; 0xfa
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <my_gnss_receive_byte+0x40>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f003 f907 	bl	8006108 <HAL_UART_Transmit>
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	2000097c 	.word	0x2000097c
 8002f08:	20000854 	.word	0x20000854

08002f0c <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <my_tim_init+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2202      	movs	r2, #2
 8002f16:	4252      	negs	r2, r2
 8002f18:	611a      	str	r2, [r3, #16]
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000774 	.word	0x20000774

08002f24 <my_tim_start>:

void my_tim_start ()
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <my_tim_start+0x18>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <my_tim_start+0x1c>)
 8002f30:	0018      	movs	r0, r3
 8002f32:	f002 fd75 	bl	8005a20 <HAL_TIM_Base_Start_IT>
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000a40 	.word	0x20000a40
 8002f40:	20000774 	.word	0x20000774

08002f44 <my_tim_stop>:

void my_tim_stop ()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <my_tim_stop+0x14>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 fdca 	bl	8005ae4 <HAL_TIM_Base_Stop_IT>
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000774 	.word	0x20000774

08002f5c <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d111      	bne.n	8002f92 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f78:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	2396      	movs	r3, #150	; 0x96
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d905      	bls.n	8002f92 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff fee7 	bl	8002d5c <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002f8e:	f000 fd1e 	bl	80039ce <HAL_NVIC_SystemReset>
		}
	}
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b002      	add	sp, #8
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40001000 	.word	0x40001000
 8002fa0:	20000a40 	.word	0x20000a40
 8002fa4:	0800f52c 	.word	0x0800f52c

08002fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fac:	b672      	cpsid	i
}
 8002fae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <Error_Handler+0x8>
	...

08002fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_MspInit+0x4c>)
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_MspInit+0x4c>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_MspInit+0x4c>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_MspInit+0x4c>)
 8002fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_MspInit+0x4c>)
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	0549      	lsls	r1, r1, #21
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_MspInit+0x4c>)
 8002fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	055b      	lsls	r3, r3, #21
 8002fe8:	4013      	ands	r3, r2
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 fbf2 	bl	80037dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000

08003004 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b097      	sub	sp, #92	; 0x5c
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800300c:	240c      	movs	r4, #12
 800300e:	193b      	adds	r3, r7, r4
 8003010:	0018      	movs	r0, r3
 8003012:	234c      	movs	r3, #76	; 0x4c
 8003014:	001a      	movs	r2, r3
 8003016:	2100      	movs	r1, #0
 8003018:	f005 fd02 	bl	8008a20 <memset>
  if(hrtc->Instance==RTC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_RTC_MspInit+0x84>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12c      	bne.n	8003080 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003026:	193b      	adds	r3, r7, r4
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0292      	lsls	r2, r2, #10
 800302c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800302e:	193b      	adds	r3, r7, r4
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0052      	lsls	r2, r2, #1
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003036:	193b      	adds	r3, r7, r4
 8003038:	0018      	movs	r0, r3
 800303a:	f001 fc9f 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003042:	f7ff ffb1 	bl	8002fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_RTC_MspInit+0x88>)
 8003048:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_RTC_MspInit+0x88>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	0209      	lsls	r1, r1, #8
 8003050:	430a      	orrs	r2, r1
 8003052:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_RTC_MspInit+0x88>)
 8003056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RTC_MspInit+0x88>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	00c9      	lsls	r1, r1, #3
 800305e:	430a      	orrs	r2, r1
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_RTC_MspInit+0x88>)
 8003064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4013      	ands	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2103      	movs	r1, #3
 8003074:	2002      	movs	r0, #2
 8003076:	f000 fc85 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800307a:	2002      	movs	r0, #2
 800307c:	f000 fc97 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b017      	add	sp, #92	; 0x5c
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	40002800 	.word	0x40002800
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b08b      	sub	sp, #44	; 0x2c
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	2414      	movs	r4, #20
 800309a:	193b      	adds	r3, r7, r4
 800309c:	0018      	movs	r0, r3
 800309e:	2314      	movs	r3, #20
 80030a0:	001a      	movs	r2, r3
 80030a2:	2100      	movs	r1, #0
 80030a4:	f005 fcbc 	bl	8008a20 <memset>
  if(hspi->Instance==SPI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_SPI_MspInit+0x8c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d130      	bne.n	8003114 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	0149      	lsls	r1, r1, #5
 80030bc:	430a      	orrs	r2, r1
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_SPI_MspInit+0x90>)
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	2201      	movs	r2, #1
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80030e6:	0021      	movs	r1, r4
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	22e0      	movs	r2, #224	; 0xe0
 80030ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	2202      	movs	r2, #2
 80030f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2200      	movs	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	187a      	adds	r2, r7, r1
 8003108:	23a0      	movs	r3, #160	; 0xa0
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	0011      	movs	r1, r2
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fc6e 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b00b      	add	sp, #44	; 0x2c
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	40013000 	.word	0x40013000
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_TIM_Base_MspInit+0x44>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_TIM_Base_MspInit+0x48>)
 8003138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_TIM_Base_MspInit+0x48>)
 800313c:	2110      	movs	r1, #16
 800313e:	430a      	orrs	r2, r1
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_TIM_Base_MspInit+0x48>)
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2210      	movs	r2, #16
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2102      	movs	r1, #2
 8003152:	2011      	movs	r0, #17
 8003154:	f000 fc16 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003158:	2011      	movs	r0, #17
 800315a:	f000 fc28 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40001000 	.word	0x40001000
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b0a3      	sub	sp, #140	; 0x8c
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	2374      	movs	r3, #116	; 0x74
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	0018      	movs	r0, r3
 800317e:	2314      	movs	r3, #20
 8003180:	001a      	movs	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	f005 fc4c 	bl	8008a20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003188:	2428      	movs	r4, #40	; 0x28
 800318a:	193b      	adds	r3, r7, r4
 800318c:	0018      	movs	r0, r3
 800318e:	234c      	movs	r3, #76	; 0x4c
 8003190:	001a      	movs	r2, r3
 8003192:	2100      	movs	r1, #0
 8003194:	f005 fc44 	bl	8008a20 <memset>
  if(huart->Instance==USART1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a84      	ldr	r2, [pc, #528]	; (80033b0 <HAL_UART_MspInit+0x240>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d140      	bne.n	8003224 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	0018      	movs	r0, r3
 80031b2:	f001 fbe3 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031ba:	f7ff fef5 	bl	8002fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031be:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	01c9      	lsls	r1, r1, #7
 80031c8:	430a      	orrs	r2, r1
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
 80031cc:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	4013      	ands	r3, r2
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	430a      	orrs	r2, r1
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	2201      	movs	r2, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	623b      	str	r3, [r7, #32]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80031f2:	2174      	movs	r1, #116	; 0x74
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	22c0      	movs	r2, #192	; 0xc0
 80031f8:	00d2      	lsls	r2, r2, #3
 80031fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2202      	movs	r2, #2
 8003200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800320e:	187b      	adds	r3, r7, r1
 8003210:	2201      	movs	r2, #1
 8003212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	187a      	adds	r2, r7, r1
 8003216:	23a0      	movs	r3, #160	; 0xa0
 8003218:	05db      	lsls	r3, r3, #23
 800321a:	0011      	movs	r1, r2
 800321c:	0018      	movs	r0, r3
 800321e:	f000 fbe7 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003222:	e0c0      	b.n	80033a6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <HAL_UART_MspInit+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d140      	bne.n	80032b0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800322e:	2128      	movs	r1, #40	; 0x28
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800323c:	187b      	adds	r3, r7, r1
 800323e:	0018      	movs	r0, r3
 8003240:	f001 fb9c 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003248:	f7ff feae 	bl	8002fa8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_UART_MspInit+0x244>)
 800324e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0289      	lsls	r1, r1, #10
 8003256:	430a      	orrs	r2, r1
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_UART_MspInit+0x244>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	4013      	ands	r3, r2
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003268:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_UART_MspInit+0x244>)
 800326a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326c:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_UART_MspInit+0x244>)
 800326e:	2101      	movs	r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	635a      	str	r2, [r3, #52]	; 0x34
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003280:	2174      	movs	r1, #116	; 0x74
 8003282:	187b      	adds	r3, r7, r1
 8003284:	220c      	movs	r2, #12
 8003286:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2202      	movs	r2, #2
 800328c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2201      	movs	r2, #1
 800329e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	187a      	adds	r2, r7, r1
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	0011      	movs	r1, r2
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fba1 	bl	80039f0 <HAL_GPIO_Init>
}
 80032ae:	e07a      	b.n	80033a6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_UART_MspInit+0x24c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d140      	bne.n	800333c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80032ba:	2128      	movs	r1, #40	; 0x28
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2204      	movs	r2, #4
 80032c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	0018      	movs	r0, r3
 80032cc:	f001 fb56 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 80032d0:	1e03      	subs	r3, r0, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80032d4:	f7ff fe68 	bl	8002fa8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	02c9      	lsls	r1, r1, #11
 80032e2:	430a      	orrs	r2, r1
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80032e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	02db      	lsls	r3, r3, #11
 80032ee:	4013      	ands	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80032f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_UART_MspInit+0x244>)
 80032fa:	2102      	movs	r1, #2
 80032fc:	430a      	orrs	r2, r1
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	2202      	movs	r2, #2
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 800330c:	2174      	movs	r1, #116	; 0x74
 800330e:	187b      	adds	r3, r7, r1
 8003310:	22c0      	movs	r2, #192	; 0xc0
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2202      	movs	r2, #2
 800331a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2204      	movs	r2, #4
 800332c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	187b      	adds	r3, r7, r1
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_UART_MspInit+0x250>)
 8003332:	0019      	movs	r1, r3
 8003334:	0010      	movs	r0, r2
 8003336:	f000 fb5b 	bl	80039f0 <HAL_GPIO_Init>
}
 800333a:	e034      	b.n	80033a6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <HAL_UART_MspInit+0x254>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12f      	bne.n	80033a6 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_UART_MspInit+0x244>)
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0049      	lsls	r1, r1, #1
 8003350:	430a      	orrs	r2, r1
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003368:	2102      	movs	r1, #2
 800336a:	430a      	orrs	r2, r1
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_UART_MspInit+0x244>)
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	2202      	movs	r2, #2
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800337a:	2174      	movs	r1, #116	; 0x74
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2218      	movs	r2, #24
 8003380:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2202      	movs	r2, #2
 8003386:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2200      	movs	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003394:	187b      	adds	r3, r7, r1
 8003396:	2203      	movs	r2, #3
 8003398:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339a:	187b      	adds	r3, r7, r1
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <HAL_UART_MspInit+0x250>)
 800339e:	0019      	movs	r1, r3
 80033a0:	0010      	movs	r0, r2
 80033a2:	f000 fb25 	bl	80039f0 <HAL_GPIO_Init>
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b023      	add	sp, #140	; 0x8c
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40004400 	.word	0x40004400
 80033bc:	40004800 	.word	0x40004800
 80033c0:	50000400 	.word	0x50000400
 80033c4:	40005000 	.word	0x40005000

080033c8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <HAL_UART_MspDeInit+0xa4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10e      	bne.n	80033f8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 80033e0:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_UART_MspDeInit+0xac>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80033e6:	23c0      	movs	r3, #192	; 0xc0
 80033e8:	00da      	lsls	r2, r3, #3
 80033ea:	23a0      	movs	r3, #160	; 0xa0
 80033ec:	05db      	lsls	r3, r3, #23
 80033ee:	0011      	movs	r1, r2
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fc69 	bl	8003cc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80033f6:	e034      	b.n	8003462 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_UART_MspDeInit+0xb0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10c      	bne.n	800341c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 8003404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 8003408:	491c      	ldr	r1, [pc, #112]	; (800347c <HAL_UART_MspDeInit+0xb4>)
 800340a:	400a      	ands	r2, r1
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 800340e:	23a0      	movs	r3, #160	; 0xa0
 8003410:	05db      	lsls	r3, r3, #23
 8003412:	210c      	movs	r1, #12
 8003414:	0018      	movs	r0, r3
 8003416:	f000 fc57 	bl	8003cc8 <HAL_GPIO_DeInit>
}
 800341a:	e022      	b.n	8003462 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_UART_MspDeInit+0xb8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d10d      	bne.n	8003442 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 8003428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 800342c:	4915      	ldr	r1, [pc, #84]	; (8003484 <HAL_UART_MspDeInit+0xbc>)
 800342e:	400a      	ands	r2, r1
 8003430:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003432:	23c0      	movs	r3, #192	; 0xc0
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_UART_MspDeInit+0xc0>)
 8003438:	0019      	movs	r1, r3
 800343a:	0010      	movs	r0, r2
 800343c:	f000 fc44 	bl	8003cc8 <HAL_GPIO_DeInit>
}
 8003440:	e00f      	b.n	8003462 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_UART_MspDeInit+0xc4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10a      	bne.n	8003462 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 800344e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_UART_MspDeInit+0xa8>)
 8003452:	490f      	ldr	r1, [pc, #60]	; (8003490 <HAL_UART_MspDeInit+0xc8>)
 8003454:	400a      	ands	r2, r1
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_UART_MspDeInit+0xc0>)
 800345a:	2118      	movs	r1, #24
 800345c:	0018      	movs	r0, r3
 800345e:	f000 fc33 	bl	8003cc8 <HAL_GPIO_DeInit>
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40013800 	.word	0x40013800
 8003470:	40021000 	.word	0x40021000
 8003474:	ffffbfff 	.word	0xffffbfff
 8003478:	40004400 	.word	0x40004400
 800347c:	fffdffff 	.word	0xfffdffff
 8003480:	40004800 	.word	0x40004800
 8003484:	fffbffff 	.word	0xfffbffff
 8003488:	50000400 	.word	0x50000400
 800348c:	40005000 	.word	0x40005000
 8003490:	fffffeff 	.word	0xfffffeff

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003498:	e7fe      	b.n	8003498 <NMI_Handler+0x4>

0800349a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349e:	e7fe      	b.n	800349e <HardFault_Handler+0x4>

080034a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b8:	f000 f974 	bl	80037a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <RTC_TAMP_IRQHandler+0x14>)
 80034ca:	0018      	movs	r0, r3
 80034cc:	f002 f858 	bl	8005580 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	200006e4 	.word	0x200006e4

080034dc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f002 fb2c 	bl	8005b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	20000774 	.word	0x20000774

080034f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  return 1;
 80034f8:	2301      	movs	r3, #1
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_kill>:

int _kill(int pid, int sig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800350a:	f005 fb35 	bl	8008b78 <__errno>
 800350e:	0003      	movs	r3, r0
 8003510:	2216      	movs	r2, #22
 8003512:	601a      	str	r2, [r3, #0]
  return -1;
 8003514:	2301      	movs	r3, #1
 8003516:	425b      	negs	r3, r3
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <_exit>:

void _exit (int status)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003528:	2301      	movs	r3, #1
 800352a:	425a      	negs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff ffe5 	bl	8003500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003536:	e7fe      	b.n	8003536 <_exit+0x16>

08003538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	e00a      	b.n	8003560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800354a:	e000      	b.n	800354e <_read+0x16>
 800354c:	bf00      	nop
 800354e:	0001      	movs	r1, r0
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	60ba      	str	r2, [r7, #8]
 8003556:	b2ca      	uxtb	r2, r1
 8003558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	dbf0      	blt.n	800354a <_read+0x12>
  }

  return len;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b006      	add	sp, #24
 8003570:	bd80      	pop	{r7, pc}

08003572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e009      	b.n	8003598 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	60ba      	str	r2, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	0018      	movs	r0, r3
 800358e:	e000      	b.n	8003592 <_write+0x20>
 8003590:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3301      	adds	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	dbf1      	blt.n	8003584 <_write+0x12>
  }
  return len;
 80035a0:	687b      	ldr	r3, [r7, #4]
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b006      	add	sp, #24
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_close>:

int _close(int file)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	425b      	negs	r3, r3
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}

080035be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0192      	lsls	r2, r2, #6
 80035ce:	605a      	str	r2, [r3, #4]
  return 0;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}

080035da <_isatty>:

int _isatty(int file)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	0018      	movs	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <_sbrk+0x5c>)
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <_sbrk+0x60>)
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <_sbrk+0x64>)
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <_sbrk+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d207      	bcs.n	8003644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003634:	f005 faa0 	bl	8008b78 <__errno>
 8003638:	0003      	movs	r3, r0
 800363a:	220c      	movs	r2, #12
 800363c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363e:	2301      	movs	r3, #1
 8003640:	425b      	negs	r3, r3
 8003642:	e009      	b.n	8003658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	18d2      	adds	r2, r2, r3
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <_sbrk+0x64>)
 8003654:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b006      	add	sp, #24
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20024000 	.word	0x20024000
 8003664:	00000400 	.word	0x00000400
 8003668:	20000a38 	.word	0x20000a38
 800366c:	20000d50 	.word	0x20000d50

08003670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003680:	f7ff fff6 	bl	8003670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	; (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <LoopForever+0xe>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036aa:	f005 fa6b 	bl	8008b84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036ae:	f7fe ff7b 	bl	80025a8 <main>

080036b2 <LoopForever>:

LoopForever:
  b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   r0, =_estack
 80036b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 80036c0:	0800fb60 	.word	0x0800fb60
  ldr r2, =_sbss
 80036c4:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 80036c8:	20000d50 	.word	0x20000d50

080036cc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_COMP_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_Init+0x3c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Init+0x3c>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	0049      	lsls	r1, r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ea:	2003      	movs	r0, #3
 80036ec:	f000 f810 	bl	8003710 <HAL_InitTick>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d003      	beq.n	80036fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e001      	b.n	8003700 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80036fc:	f7ff fc5a 	bl	8002fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000

08003710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_InitTick+0x88>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02b      	beq.n	8003780 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_InitTick+0x8c>)
 800372a:	681c      	ldr	r4, [r3, #0]
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_InitTick+0x88>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0019      	movs	r1, r3
 8003732:	23fa      	movs	r3, #250	; 0xfa
 8003734:	0098      	lsls	r0, r3, #2
 8003736:	f7fc fd01 	bl	800013c <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	0019      	movs	r1, r3
 800373e:	0020      	movs	r0, r4
 8003740:	f7fc fcfc 	bl	800013c <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f945 	bl	80039d6 <HAL_SYSTICK_Config>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d112      	bne.n	8003776 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d80a      	bhi.n	800376c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	2301      	movs	r3, #1
 800375a:	425b      	negs	r3, r3
 800375c:	2200      	movs	r2, #0
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f910 	bl	8003984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_InitTick+0x90>)
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e00d      	b.n	8003788 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e008      	b.n	8003788 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003776:	230f      	movs	r3, #15
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e003      	b.n	8003788 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003780:	230f      	movs	r3, #15
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003788:	230f      	movs	r3, #15
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b005      	add	sp, #20
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	2000000c 	.word	0x2000000c
 800379c:	20000004 	.word	0x20000004
 80037a0:	20000008 	.word	0x20000008

080037a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_IncTick+0x1c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	001a      	movs	r2, r3
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_IncTick+0x20>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	18d2      	adds	r2, r2, r3
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_IncTick+0x20>)
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	20000a3c 	.word	0x20000a3c

080037c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  return uwTick;
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_GetTick+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000a3c 	.word	0x20000a3c

080037dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a06      	ldr	r2, [pc, #24]	; (8003804 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b002      	add	sp, #8
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	40010000 	.word	0x40010000
 8003804:	fffff9ff 	.word	0xfffff9ff

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	0002      	movs	r2, r0
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b7f      	cmp	r3, #127	; 0x7f
 800381a:	d809      	bhi.n	8003830 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	001a      	movs	r2, r3
 8003822:	231f      	movs	r3, #31
 8003824:	401a      	ands	r2, r3
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_EnableIRQ+0x30>)
 8003828:	2101      	movs	r1, #1
 800382a:	4091      	lsls	r1, r2
 800382c:	000a      	movs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	0002      	movs	r2, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b7f      	cmp	r3, #127	; 0x7f
 8003850:	d828      	bhi.n	80038a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003852:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <__NVIC_SetPriority+0xd4>)
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	33c0      	adds	r3, #192	; 0xc0
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	589b      	ldr	r3, [r3, r2]
 8003862:	1dfa      	adds	r2, r7, #7
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	0011      	movs	r1, r2
 8003868:	2203      	movs	r2, #3
 800386a:	400a      	ands	r2, r1
 800386c:	00d2      	lsls	r2, r2, #3
 800386e:	21ff      	movs	r1, #255	; 0xff
 8003870:	4091      	lsls	r1, r2
 8003872:	000a      	movs	r2, r1
 8003874:	43d2      	mvns	r2, r2
 8003876:	401a      	ands	r2, r3
 8003878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	401a      	ands	r2, r3
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	0018      	movs	r0, r3
 8003888:	2303      	movs	r3, #3
 800388a:	4003      	ands	r3, r0
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003890:	481f      	ldr	r0, [pc, #124]	; (8003910 <__NVIC_SetPriority+0xd4>)
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	b25b      	sxtb	r3, r3
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	430a      	orrs	r2, r1
 800389c:	33c0      	adds	r3, #192	; 0xc0
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038a2:	e031      	b.n	8003908 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <__NVIC_SetPriority+0xd8>)
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	0019      	movs	r1, r3
 80038ac:	230f      	movs	r3, #15
 80038ae:	400b      	ands	r3, r1
 80038b0:	3b08      	subs	r3, #8
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3306      	adds	r3, #6
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	3304      	adds	r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1dfa      	adds	r2, r7, #7
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	0011      	movs	r1, r2
 80038c4:	2203      	movs	r2, #3
 80038c6:	400a      	ands	r2, r1
 80038c8:	00d2      	lsls	r2, r2, #3
 80038ca:	21ff      	movs	r1, #255	; 0xff
 80038cc:	4091      	lsls	r1, r2
 80038ce:	000a      	movs	r2, r1
 80038d0:	43d2      	mvns	r2, r2
 80038d2:	401a      	ands	r2, r3
 80038d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	22ff      	movs	r2, #255	; 0xff
 80038dc:	401a      	ands	r2, r3
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	2303      	movs	r3, #3
 80038e6:	4003      	ands	r3, r0
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <__NVIC_SetPriority+0xd8>)
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001c      	movs	r4, r3
 80038f4:	230f      	movs	r3, #15
 80038f6:	4023      	ands	r3, r4
 80038f8:	3b08      	subs	r3, #8
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	430a      	orrs	r2, r1
 80038fe:	3306      	adds	r3, #6
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	18c3      	adds	r3, r0, r3
 8003904:	3304      	adds	r3, #4
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b003      	add	sp, #12
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800391c:	f3bf 8f4f 	dsb	sy
}
 8003920:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_SystemReset+0x1c>)
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <__NVIC_SystemReset+0x20>)
 8003926:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003928:	f3bf 8f4f 	dsb	sy
}
 800392c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	e7fd      	b.n	800392e <__NVIC_SystemReset+0x16>
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	05fa0004 	.word	0x05fa0004

0800393c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	045b      	lsls	r3, r3, #17
 800394c:	429a      	cmp	r2, r3
 800394e:	d301      	bcc.n	8003954 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003950:	2301      	movs	r3, #1
 8003952:	e010      	b.n	8003976 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <SysTick_Config+0x44>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	3a01      	subs	r2, #1
 800395a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395c:	2301      	movs	r3, #1
 800395e:	425b      	negs	r3, r3
 8003960:	2103      	movs	r1, #3
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff ff6a 	bl	800383c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <SysTick_Config+0x44>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <SysTick_Config+0x44>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	210f      	movs	r1, #15
 8003990:	187b      	adds	r3, r7, r1
 8003992:	1c02      	adds	r2, r0, #0
 8003994:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	187b      	adds	r3, r7, r1
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b25b      	sxtb	r3, r3
 800399e:	0011      	movs	r1, r2
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff ff4b 	bl	800383c <__NVIC_SetPriority>
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	0002      	movs	r2, r0
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff ff21 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80039d2:	f7ff ffa1 	bl	8003918 <__NVIC_SystemReset>

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff ffab 	bl	800393c <SysTick_Config>
 80039e6:	0003      	movs	r3, r0
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fe:	e14d      	b.n	8003c9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4091      	lsls	r1, r2
 8003a0a:	000a      	movs	r2, r1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d100      	bne.n	8003a18 <HAL_GPIO_Init+0x28>
 8003a16:	e13e      	b.n	8003c96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d005      	beq.n	8003a30 <HAL_GPIO_Init+0x40>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d130      	bne.n	8003a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	0013      	movs	r3, r2
 8003a40:	43da      	mvns	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	409a      	lsls	r2, r3
 8003a52:	0013      	movs	r3, r2
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a66:	2201      	movs	r2, #1
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d017      	beq.n	8003ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d123      	bne.n	8003b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	58d3      	ldr	r3, [r2, r3]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2207      	movs	r2, #7
 8003aec:	4013      	ands	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	43da      	mvns	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2107      	movs	r1, #7
 8003b06:	400b      	ands	r3, r1
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	6939      	ldr	r1, [r7, #16]
 8003b20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	43da      	mvns	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	401a      	ands	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	23c0      	movs	r3, #192	; 0xc0
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d100      	bne.n	8003b64 <HAL_GPIO_Init+0x174>
 8003b62:	e098      	b.n	8003c96 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b64:	4a53      	ldr	r2, [pc, #332]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	589b      	ldr	r3, [r3, r2]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2203      	movs	r2, #3
 8003b76:	4013      	ands	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	0013      	movs	r3, r2
 8003b80:	43da      	mvns	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	23a0      	movs	r3, #160	; 0xa0
 8003b8c:	05db      	lsls	r3, r3, #23
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d019      	beq.n	8003bc6 <HAL_GPIO_Init+0x1d6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a48      	ldr	r2, [pc, #288]	; (8003cb8 <HAL_GPIO_Init+0x2c8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0x1d2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a47      	ldr	r2, [pc, #284]	; (8003cbc <HAL_GPIO_Init+0x2cc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00d      	beq.n	8003bbe <HAL_GPIO_Init+0x1ce>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <HAL_GPIO_Init+0x1ca>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a45      	ldr	r2, [pc, #276]	; (8003cc4 <HAL_GPIO_Init+0x2d4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_GPIO_Init+0x1c6>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x1d8>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x1d8>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x1d8>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x1d8>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x1d8>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	2103      	movs	r1, #3
 8003bcc:	400a      	ands	r2, r1
 8003bce:	00d2      	lsls	r2, r2, #3
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003bd8:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3318      	adds	r3, #24
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	035b      	lsls	r3, r3, #13
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	039b      	lsls	r3, r3, #14
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c34:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c3c:	2384      	movs	r3, #132	; 0x84
 8003c3e:	58d3      	ldr	r3, [r2, r3]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c60:	4914      	ldr	r1, [pc, #80]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	58d3      	ldr	r3, [r2, r3]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	4013      	ands	r3, r2
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c8e:	4909      	ldr	r1, [pc, #36]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	40da      	lsrs	r2, r3
 8003ca4:	1e13      	subs	r3, r2, #0
 8003ca6:	d000      	beq.n	8003caa <HAL_GPIO_Init+0x2ba>
 8003ca8:	e6aa      	b.n	8003a00 <HAL_GPIO_Init+0x10>
  }
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b006      	add	sp, #24
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021800 	.word	0x40021800
 8003cb8:	50000400 	.word	0x50000400
 8003cbc:	50000800 	.word	0x50000800
 8003cc0:	50000c00 	.word	0x50000c00
 8003cc4:	50001000 	.word	0x50001000

08003cc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003cd6:	e0ba      	b.n	8003e4e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003cd8:	2201      	movs	r2, #1
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d100      	bne.n	8003cec <HAL_GPIO_DeInit+0x24>
 8003cea:	e0ad      	b.n	8003e48 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003cec:	4a5d      	ldr	r2, [pc, #372]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	589b      	ldr	r3, [r3, r2]
 8003cf8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	220f      	movs	r2, #15
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	23a0      	movs	r3, #160	; 0xa0
 8003d10:	05db      	lsls	r3, r3, #23
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_DeInit+0x82>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a53      	ldr	r2, [pc, #332]	; (8003e68 <HAL_GPIO_DeInit+0x1a0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_DeInit+0x7e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_GPIO_DeInit+0x1a4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_DeInit+0x7a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_GPIO_DeInit+0x1a8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_DeInit+0x76>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_GPIO_DeInit+0x1ac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_DeInit+0x72>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_DeInit+0x84>
 8003d3a:	2305      	movs	r3, #5
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_DeInit+0x84>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_DeInit+0x84>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_DeInit+0x84>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_DeInit+0x84>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	2103      	movs	r1, #3
 8003d50:	400a      	ands	r2, r1
 8003d52:	00d2      	lsls	r2, r2, #3
 8003d54:	4093      	lsls	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d136      	bne.n	8003dca <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d5c:	4a41      	ldr	r2, [pc, #260]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	58d3      	ldr	r3, [r2, r3]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	43d2      	mvns	r2, r2
 8003d66:	493f      	ldr	r1, [pc, #252]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d70:	2384      	movs	r3, #132	; 0x84
 8003d72:	58d3      	ldr	r3, [r2, r3]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	43d2      	mvns	r2, r2
 8003d78:	493a      	ldr	r1, [pc, #232]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2284      	movs	r2, #132	; 0x84
 8003d7e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d80:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d8e:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43d9      	mvns	r1, r3
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4013      	ands	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	220f      	movs	r2, #15
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3318      	adds	r3, #24
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	589a      	ldr	r2, [r3, r2]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	4829      	ldr	r0, [pc, #164]	; (8003e64 <HAL_GPIO_DeInit+0x19c>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2103      	movs	r1, #3
 8003dd4:	4099      	lsls	r1, r3
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3208      	adds	r2, #8
 8003de6:	0092      	lsls	r2, r2, #2
 8003de8:	58d3      	ldr	r3, [r2, r3]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	2107      	movs	r1, #7
 8003dee:	400a      	ands	r2, r1
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	210f      	movs	r1, #15
 8003df4:	4091      	lsls	r1, r2
 8003df6:	000a      	movs	r2, r1
 8003df8:	43d1      	mvns	r1, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	08d2      	lsrs	r2, r2, #3
 8003dfe:	4019      	ands	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3208      	adds	r2, #8
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	0052      	lsls	r2, r2, #1
 8003e10:	2103      	movs	r1, #3
 8003e12:	4091      	lsls	r1, r2
 8003e14:	000a      	movs	r2, r1
 8003e16:	43d2      	mvns	r2, r2
 8003e18:	401a      	ands	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2101      	movs	r1, #1
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4091      	lsls	r1, r2
 8003e28:	000a      	movs	r2, r1
 8003e2a:	43d2      	mvns	r2, r2
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	0052      	lsls	r2, r2, #1
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	4091      	lsls	r1, r2
 8003e3e:	000a      	movs	r2, r1
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	401a      	ands	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	40da      	lsrs	r2, r3
 8003e54:	1e13      	subs	r3, r2, #0
 8003e56:	d000      	beq.n	8003e5a <HAL_GPIO_DeInit+0x192>
 8003e58:	e73e      	b.n	8003cd8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b006      	add	sp, #24
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021800 	.word	0x40021800
 8003e68:	50000400 	.word	0x50000400
 8003e6c:	50000800 	.word	0x50000800
 8003e70:	50000c00 	.word	0x50000c00
 8003e74:	50001000 	.word	0x50001000

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	0008      	movs	r0, r1
 8003e82:	0011      	movs	r1, r2
 8003e84:	1cbb      	adds	r3, r7, #2
 8003e86:	1c02      	adds	r2, r0, #0
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	1c7b      	adds	r3, r7, #1
 8003e8c:	1c0a      	adds	r2, r1, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e90:	1c7b      	adds	r3, r7, #1
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e98:	1cbb      	adds	r3, r7, #2
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ea2:	1cbb      	adds	r3, r7, #2
 8003ea4:	881a      	ldrh	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x18>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	0049      	lsls	r1, r1, #1
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40007000 	.word	0x40007000

08003ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d11f      	bne.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	0013      	movs	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7fc f91a 	bl	800013c <__udivsi3>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f0e:	e008      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	e001      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e009      	b.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0ed      	beq.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	40007000 	.word	0x40007000
 8003f44:	fffff9ff 	.word	0xfffff9ff
 8003f48:	20000004 	.word	0x20000004
 8003f4c:	000f4240 	.word	0x000f4240

08003f50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	23e0      	movs	r3, #224	; 0xe0
 8003f5a:	01db      	lsls	r3, r3, #7
 8003f5c:	4013      	ands	r3, r2
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f000 fb50 	bl	800461c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	4013      	ands	r3, r2
 8003f84:	d100      	bne.n	8003f88 <HAL_RCC_OscConfig+0x20>
 8003f86:	e07c      	b.n	8004082 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f88:	4bc3      	ldr	r3, [pc, #780]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2238      	movs	r2, #56	; 0x38
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f92:	4bc1      	ldr	r3, [pc, #772]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2203      	movs	r2, #3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x40>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d002      	beq.n	8003fae <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fae:	4bba      	ldr	r3, [pc, #744]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d062      	beq.n	8004080 <HAL_RCC_OscConfig+0x118>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d15e      	bne.n	8004080 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e32a      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	025b      	lsls	r3, r3, #9
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x7a>
 8003fd2:	4bb1      	ldr	r3, [pc, #708]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4bb0      	ldr	r3, [pc, #704]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	0249      	lsls	r1, r1, #9
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e020      	b.n	8004024 <HAL_RCC_OscConfig+0xbc>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	23a0      	movs	r3, #160	; 0xa0
 8003fe8:	02db      	lsls	r3, r3, #11
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d10e      	bne.n	800400c <HAL_RCC_OscConfig+0xa4>
 8003fee:	4baa      	ldr	r3, [pc, #680]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4ba9      	ldr	r3, [pc, #676]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	02c9      	lsls	r1, r1, #11
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	4ba6      	ldr	r3, [pc, #664]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4ba5      	ldr	r3, [pc, #660]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	0249      	lsls	r1, r1, #9
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xbc>
 800400c:	4ba2      	ldr	r3, [pc, #648]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4ba1      	ldr	r3, [pc, #644]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004012:	49a2      	ldr	r1, [pc, #648]	; (800429c <HAL_RCC_OscConfig+0x334>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	4b9f      	ldr	r3, [pc, #636]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b9e      	ldr	r3, [pc, #632]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800401e:	49a0      	ldr	r1, [pc, #640]	; (80042a0 <HAL_RCC_OscConfig+0x338>)
 8004020:	400a      	ands	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d014      	beq.n	8004056 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7ff fbcc 	bl	80037c8 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004036:	f7ff fbc7 	bl	80037c8 <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e2e9      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004048:	4b93      	ldr	r3, [pc, #588]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	029b      	lsls	r3, r3, #10
 8004050:	4013      	ands	r3, r2
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0xce>
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7ff fbb7 	bl	80037c8 <HAL_GetTick>
 800405a:	0003      	movs	r3, r0
 800405c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7ff fbb2 	bl	80037c8 <HAL_GetTick>
 8004064:	0002      	movs	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e2d4      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004072:	4b89      	ldr	r3, [pc, #548]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	029b      	lsls	r3, r3, #10
 800407a:	4013      	ands	r3, r2
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0xf8>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2202      	movs	r2, #2
 8004088:	4013      	ands	r3, r2
 800408a:	d100      	bne.n	800408e <HAL_RCC_OscConfig+0x126>
 800408c:	e099      	b.n	80041c2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408e:	4b82      	ldr	r3, [pc, #520]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2238      	movs	r2, #56	; 0x38
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2203      	movs	r2, #3
 800409e:	4013      	ands	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_OscConfig+0x146>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d135      	bne.n	8004120 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	4b78      	ldr	r3, [pc, #480]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4013      	ands	r3, r2
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x164>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e2a7      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a74      	ldr	r2, [pc, #464]	; (80042a4 <HAL_RCC_OscConfig+0x33c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	021a      	lsls	r2, r3, #8
 80040dc:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d112      	bne.n	800410e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040e8:	4b6b      	ldr	r3, [pc, #428]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6e      	ldr	r2, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x340>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	4b68      	ldr	r3, [pc, #416]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0adb      	lsrs	r3, r3, #11
 8004102:	2207      	movs	r2, #7
 8004104:	4013      	ands	r3, r2
 8004106:	4a69      	ldr	r2, [pc, #420]	; (80042ac <HAL_RCC_OscConfig+0x344>)
 8004108:	40da      	lsrs	r2, r3
 800410a:	4b69      	ldr	r3, [pc, #420]	; (80042b0 <HAL_RCC_OscConfig+0x348>)
 800410c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800410e:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <HAL_RCC_OscConfig+0x34c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0018      	movs	r0, r3
 8004114:	f7ff fafc 	bl	8003710 <HAL_InitTick>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d051      	beq.n	80041c0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e27d      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d030      	beq.n	800418a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004128:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x340>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	4b58      	ldr	r3, [pc, #352]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	0049      	lsls	r1, r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7ff fb3d 	bl	80037c8 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7ff fb38 	bl	80037c8 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e25a      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004166:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4013      	ands	r3, r2
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a4b      	ldr	r2, [pc, #300]	; (80042a4 <HAL_RCC_OscConfig+0x33c>)
 8004178:	4013      	ands	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	021a      	lsls	r2, r3, #8
 8004182:	4b45      	ldr	r3, [pc, #276]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	e01b      	b.n	80041c2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004190:	4949      	ldr	r1, [pc, #292]	; (80042b8 <HAL_RCC_OscConfig+0x350>)
 8004192:	400a      	ands	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7ff fb17 	bl	80037c8 <HAL_GetTick>
 800419a:	0003      	movs	r3, r0
 800419c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a0:	f7ff fb12 	bl	80037c8 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e234      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b2:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4013      	ands	r3, r2
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x238>
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2208      	movs	r2, #8
 80041c8:	4013      	ands	r3, r2
 80041ca:	d047      	beq.n	800425c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041cc:	4b32      	ldr	r3, [pc, #200]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2238      	movs	r2, #56	; 0x38
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b18      	cmp	r3, #24
 80041d6:	d10a      	bne.n	80041ee <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041d8:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041dc:	2202      	movs	r2, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d03c      	beq.n	800425c <HAL_RCC_OscConfig+0x2f4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d138      	bne.n	800425c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e216      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041fa:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041fc:	2101      	movs	r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7ff fae1 	bl	80037c8 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420c:	f7ff fadc 	bl	80037c8 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e1fe      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d0f1      	beq.n	800420c <HAL_RCC_OscConfig+0x2a4>
 8004228:	e018      	b.n	800425c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800422c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004230:	2101      	movs	r1, #1
 8004232:	438a      	bics	r2, r1
 8004234:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7ff fac7 	bl	80037c8 <HAL_GetTick>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7ff fac2 	bl	80037c8 <HAL_GetTick>
 8004244:	0002      	movs	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1e4      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	d1f1      	bne.n	8004240 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2204      	movs	r2, #4
 8004262:	4013      	ands	r3, r2
 8004264:	d100      	bne.n	8004268 <HAL_RCC_OscConfig+0x300>
 8004266:	e0c7      	b.n	80043f8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004268:	231f      	movs	r3, #31
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2238      	movs	r2, #56	; 0x38
 8004276:	4013      	ands	r3, r2
 8004278:	2b20      	cmp	r3, #32
 800427a:	d11f      	bne.n	80042bc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d100      	bne.n	8004288 <HAL_RCC_OscConfig+0x320>
 8004286:	e0b7      	b.n	80043f8 <HAL_RCC_OscConfig+0x490>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d000      	beq.n	8004292 <HAL_RCC_OscConfig+0x32a>
 8004290:	e0b2      	b.n	80043f8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e1c2      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	40021000 	.word	0x40021000
 800429c:	fffeffff 	.word	0xfffeffff
 80042a0:	fffbffff 	.word	0xfffbffff
 80042a4:	ffff80ff 	.word	0xffff80ff
 80042a8:	ffffc7ff 	.word	0xffffc7ff
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	20000004 	.word	0x20000004
 80042b4:	20000008 	.word	0x20000008
 80042b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042bc:	4bb5      	ldr	r3, [pc, #724]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80042be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	055b      	lsls	r3, r3, #21
 80042c4:	4013      	ands	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0x364>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x366>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	4bb0      	ldr	r3, [pc, #704]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80042d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d6:	4baf      	ldr	r3, [pc, #700]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	0549      	lsls	r1, r1, #21
 80042dc:	430a      	orrs	r2, r1
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c
 80042e0:	4bac      	ldr	r3, [pc, #688]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80042e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	055b      	lsls	r3, r3, #21
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042ee:	231f      	movs	r3, #31
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f6:	4ba8      	ldr	r3, [pc, #672]	; (8004598 <HAL_RCC_OscConfig+0x630>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d11a      	bne.n	8004338 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004302:	4ba5      	ldr	r3, [pc, #660]	; (8004598 <HAL_RCC_OscConfig+0x630>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4ba4      	ldr	r3, [pc, #656]	; (8004598 <HAL_RCC_OscConfig+0x630>)
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	0049      	lsls	r1, r1, #1
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004310:	f7ff fa5a 	bl	80037c8 <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431a:	f7ff fa55 	bl	80037c8 <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e177      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432c:	4b9a      	ldr	r3, [pc, #616]	; (8004598 <HAL_RCC_OscConfig+0x630>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4013      	ands	r3, r2
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x3e6>
 8004340:	4b94      	ldr	r3, [pc, #592]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004344:	4b93      	ldr	r3, [pc, #588]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004346:	2101      	movs	r1, #1
 8004348:	430a      	orrs	r2, r1
 800434a:	65da      	str	r2, [r3, #92]	; 0x5c
 800434c:	e01c      	b.n	8004388 <HAL_RCC_OscConfig+0x420>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b05      	cmp	r3, #5
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x408>
 8004356:	4b8f      	ldr	r3, [pc, #572]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800435a:	4b8e      	ldr	r3, [pc, #568]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800435c:	2104      	movs	r1, #4
 800435e:	430a      	orrs	r2, r1
 8004360:	65da      	str	r2, [r3, #92]	; 0x5c
 8004362:	4b8c      	ldr	r3, [pc, #560]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004366:	4b8b      	ldr	r3, [pc, #556]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004368:	2101      	movs	r1, #1
 800436a:	430a      	orrs	r2, r1
 800436c:	65da      	str	r2, [r3, #92]	; 0x5c
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0x420>
 8004370:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004374:	4b87      	ldr	r3, [pc, #540]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	65da      	str	r2, [r3, #92]	; 0x5c
 800437c:	4b85      	ldr	r3, [pc, #532]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800437e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004380:	4b84      	ldr	r3, [pc, #528]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004382:	2104      	movs	r1, #4
 8004384:	438a      	bics	r2, r1
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7ff fa1a 	bl	80037c8 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004398:	e009      	b.n	80043ae <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7ff fa15 	bl	80037c8 <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	4a7d      	ldr	r2, [pc, #500]	; (800459c <HAL_RCC_OscConfig+0x634>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e136      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ae:	4b79      	ldr	r3, [pc, #484]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	2202      	movs	r2, #2
 80043b4:	4013      	ands	r3, r2
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x432>
 80043b8:	e013      	b.n	80043e2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7ff fa05 	bl	80037c8 <HAL_GetTick>
 80043be:	0003      	movs	r3, r0
 80043c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c4:	f7ff fa00 	bl	80037c8 <HAL_GetTick>
 80043c8:	0002      	movs	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	4a73      	ldr	r2, [pc, #460]	; (800459c <HAL_RCC_OscConfig+0x634>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e121      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d8:	4b6e      	ldr	r3, [pc, #440]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	2202      	movs	r2, #2
 80043de:	4013      	ands	r3, r2
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043e2:	231f      	movs	r3, #31
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043ec:	4b69      	ldr	r3, [pc, #420]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80043ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80043f2:	496b      	ldr	r1, [pc, #428]	; (80045a0 <HAL_RCC_OscConfig+0x638>)
 80043f4:	400a      	ands	r2, r1
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2220      	movs	r2, #32
 80043fe:	4013      	ands	r3, r2
 8004400:	d039      	beq.n	8004476 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01b      	beq.n	8004442 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800440a:	4b62      	ldr	r3, [pc, #392]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	03c9      	lsls	r1, r1, #15
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7ff f9d6 	bl	80037c8 <HAL_GetTick>
 800441c:	0003      	movs	r3, r0
 800441e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004422:	f7ff f9d1 	bl	80037c8 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0f3      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004434:	4b57      	ldr	r3, [pc, #348]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	4013      	ands	r3, r2
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x4ba>
 8004440:	e019      	b.n	8004476 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004442:	4b54      	ldr	r3, [pc, #336]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004448:	4956      	ldr	r1, [pc, #344]	; (80045a4 <HAL_RCC_OscConfig+0x63c>)
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7ff f9bb 	bl	80037c8 <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004458:	f7ff f9b6 	bl	80037c8 <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0d8      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800446a:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	4013      	ands	r3, r2
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d100      	bne.n	8004480 <HAL_RCC_OscConfig+0x518>
 800447e:	e0cc      	b.n	800461a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004480:	4b44      	ldr	r3, [pc, #272]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2238      	movs	r2, #56	; 0x38
 8004486:	4013      	ands	r3, r2
 8004488:	2b10      	cmp	r3, #16
 800448a:	d100      	bne.n	800448e <HAL_RCC_OscConfig+0x526>
 800448c:	e07b      	b.n	8004586 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d156      	bne.n	8004544 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004496:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800449c:	4942      	ldr	r1, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0x640>)
 800449e:	400a      	ands	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7ff f991 	bl	80037c8 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7ff f98c 	bl	80037c8 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0ae      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044be:	4b35      	ldr	r3, [pc, #212]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	049b      	lsls	r3, r3, #18
 80044c6:	4013      	ands	r3, r2
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4a37      	ldr	r2, [pc, #220]	; (80045ac <HAL_RCC_OscConfig+0x644>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	431a      	orrs	r2, r3
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	0449      	lsls	r1, r1, #17
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800450c:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	0549      	lsls	r1, r1, #21
 8004516:	430a      	orrs	r2, r1
 8004518:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7ff f955 	bl	80037c8 <HAL_GetTick>
 800451e:	0003      	movs	r3, r0
 8004520:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7ff f950 	bl	80037c8 <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e072      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	049b      	lsls	r3, r3, #18
 800453e:	4013      	ands	r3, r2
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x5bc>
 8004542:	e06a      	b.n	800461a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800454a:	4917      	ldr	r1, [pc, #92]	; (80045a8 <HAL_RCC_OscConfig+0x640>)
 800454c:	400a      	ands	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7ff f93a 	bl	80037c8 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455a:	f7ff f935 	bl	80037c8 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e057      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	049b      	lsls	r3, r3, #18
 8004574:	4013      	ands	r3, r2
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800457e:	490c      	ldr	r1, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x648>)
 8004580:	400a      	ands	r2, r1
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e049      	b.n	800461a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d112      	bne.n	80045b4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e044      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	00001388 	.word	0x00001388
 80045a0:	efffffff 	.word	0xefffffff
 80045a4:	ffbfffff 	.word	0xffbfffff
 80045a8:	feffffff 	.word	0xfeffffff
 80045ac:	11c1808c 	.word	0x11c1808c
 80045b0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x6bc>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2203      	movs	r2, #3
 80045be:	401a      	ands	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d126      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2270      	movs	r2, #112	; 0x70
 80045cc:	401a      	ands	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d11f      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	23fe      	movs	r3, #254	; 0xfe
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	401a      	ands	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d116      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	23f8      	movs	r3, #248	; 0xf8
 80045ec:	039b      	lsls	r3, r3, #14
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d10e      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	23e0      	movs	r3, #224	; 0xe0
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	401a      	ands	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	0f5b      	lsrs	r3, r3, #29
 800460c:	075a      	lsls	r2, r3, #29
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b008      	add	sp, #32
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000

08004628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0e9      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2207      	movs	r2, #7
 8004642:	4013      	ands	r3, r2
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d91e      	bls.n	8004688 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2207      	movs	r2, #7
 8004650:	4393      	bics	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800465c:	f7ff f8b4 	bl	80037c8 <HAL_GetTick>
 8004660:	0003      	movs	r3, r0
 8004662:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004664:	e009      	b.n	800467a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004666:	f7ff f8af 	bl	80037c8 <HAL_GetTick>
 800466a:	0002      	movs	r2, r0
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	4a6a      	ldr	r2, [pc, #424]	; (800481c <HAL_RCC_ClockConfig+0x1f4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0ca      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800467a:	4b67      	ldr	r3, [pc, #412]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2207      	movs	r2, #7
 8004680:	4013      	ands	r3, r2
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d1ee      	bne.n	8004666 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2202      	movs	r2, #2
 800468e:	4013      	ands	r3, r2
 8004690:	d015      	beq.n	80046be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	4013      	ands	r3, r2
 800469a:	d006      	beq.n	80046aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800469c:	4b60      	ldr	r3, [pc, #384]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b5f      	ldr	r3, [pc, #380]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80046a2:	21e0      	movs	r1, #224	; 0xe0
 80046a4:	01c9      	lsls	r1, r1, #7
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_RCC_ClockConfig+0x1fc>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b59      	ldr	r3, [pc, #356]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	4013      	ands	r3, r2
 80046c6:	d057      	beq.n	8004778 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	4013      	ands	r3, r2
 80046da:	d12b      	bne.n	8004734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e097      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e8:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	049b      	lsls	r3, r3, #18
 80046f0:	4013      	ands	r3, r2
 80046f2:	d11f      	bne.n	8004734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e08b      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4013      	ands	r3, r2
 800470a:	d113      	bne.n	8004734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e07f      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d106      	bne.n	8004726 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	2202      	movs	r2, #2
 800471e:	4013      	ands	r3, r2
 8004720:	d108      	bne.n	8004734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e074      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e06d      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004734:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2207      	movs	r2, #7
 800473a:	4393      	bics	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004748:	f7ff f83e 	bl	80037c8 <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e009      	b.n	8004766 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7ff f839 	bl	80037c8 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <HAL_RCC_ClockConfig+0x1f4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e054      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2238      	movs	r2, #56	; 0x38
 800476c:	401a      	ands	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ec      	bne.n	8004752 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2207      	movs	r2, #7
 800477e:	4013      	ands	r3, r2
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d21e      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2207      	movs	r2, #7
 800478c:	4393      	bics	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004798:	f7ff f816 	bl	80037c8 <HAL_GetTick>
 800479c:	0003      	movs	r3, r0
 800479e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047a0:	e009      	b.n	80047b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a2:	f7ff f811 	bl	80037c8 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_RCC_ClockConfig+0x1f4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e02c      	b.n	8004810 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2207      	movs	r2, #7
 80047bc:	4013      	ands	r3, r2
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1ee      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2204      	movs	r2, #4
 80047ca:	4013      	ands	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_RCC_ClockConfig+0x200>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	0019      	movs	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047e2:	f000 f829 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80047e6:	0001      	movs	r1, r0
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCC_ClockConfig+0x1f8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	220f      	movs	r2, #15
 80047f0:	401a      	ands	r2, r3
 80047f2:	4b0e      	ldr	r3, [pc, #56]	; (800482c <HAL_RCC_ClockConfig+0x204>)
 80047f4:	0092      	lsls	r2, r2, #2
 80047f6:	58d3      	ldr	r3, [r2, r3]
 80047f8:	221f      	movs	r2, #31
 80047fa:	4013      	ands	r3, r2
 80047fc:	000a      	movs	r2, r1
 80047fe:	40da      	lsrs	r2, r3
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_ClockConfig+0x208>)
 8004802:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_ClockConfig+0x20c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	0018      	movs	r0, r3
 800480a:	f7fe ff81 	bl	8003710 <HAL_InitTick>
 800480e:	0003      	movs	r3, r0
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b004      	add	sp, #16
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40022000 	.word	0x40022000
 800481c:	00001388 	.word	0x00001388
 8004820:	40021000 	.word	0x40021000
 8004824:	fffff0ff 	.word	0xfffff0ff
 8004828:	ffff8fff 	.word	0xffff8fff
 800482c:	0800f658 	.word	0x0800f658
 8004830:	20000004 	.word	0x20000004
 8004834:	20000008 	.word	0x20000008

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2238      	movs	r2, #56	; 0x38
 8004844:	4013      	ands	r3, r2
 8004846:	d10f      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004848:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	0adb      	lsrs	r3, r3, #11
 800484e:	2207      	movs	r2, #7
 8004850:	4013      	ands	r3, r2
 8004852:	2201      	movs	r2, #1
 8004854:	409a      	lsls	r2, r3
 8004856:	0013      	movs	r3, r2
 8004858:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	4835      	ldr	r0, [pc, #212]	; (8004934 <HAL_RCC_GetSysClockFreq+0xfc>)
 800485e:	f7fb fc6d 	bl	800013c <__udivsi3>
 8004862:	0003      	movs	r3, r0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e05d      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004868:	4b31      	ldr	r3, [pc, #196]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2238      	movs	r2, #56	; 0x38
 800486e:	4013      	ands	r3, r2
 8004870:	2b08      	cmp	r3, #8
 8004872:	d102      	bne.n	800487a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004874:	4b30      	ldr	r3, [pc, #192]	; (8004938 <HAL_RCC_GetSysClockFreq+0x100>)
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	e054      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800487a:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2238      	movs	r2, #56	; 0x38
 8004880:	4013      	ands	r3, r2
 8004882:	2b10      	cmp	r3, #16
 8004884:	d138      	bne.n	80048f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2203      	movs	r2, #3
 800488c:	4013      	ands	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	2207      	movs	r2, #7
 8004898:	4013      	ands	r3, r2
 800489a:	3301      	adds	r3, #1
 800489c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4824      	ldr	r0, [pc, #144]	; (8004938 <HAL_RCC_GetSysClockFreq+0x100>)
 80048a8:	f7fb fc48 	bl	800013c <__udivsi3>
 80048ac:	0003      	movs	r3, r0
 80048ae:	0019      	movs	r1, r3
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	227f      	movs	r2, #127	; 0x7f
 80048b8:	4013      	ands	r3, r2
 80048ba:	434b      	muls	r3, r1
 80048bc:	617b      	str	r3, [r7, #20]
        break;
 80048be:	e00d      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	481c      	ldr	r0, [pc, #112]	; (8004934 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048c4:	f7fb fc3a 	bl	800013c <__udivsi3>
 80048c8:	0003      	movs	r3, r0
 80048ca:	0019      	movs	r1, r3
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	227f      	movs	r2, #127	; 0x7f
 80048d4:	4013      	ands	r3, r2
 80048d6:	434b      	muls	r3, r1
 80048d8:	617b      	str	r3, [r7, #20]
        break;
 80048da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0f5b      	lsrs	r3, r3, #29
 80048e2:	2207      	movs	r2, #7
 80048e4:	4013      	ands	r3, r2
 80048e6:	3301      	adds	r3, #1
 80048e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f7fb fc25 	bl	800013c <__udivsi3>
 80048f2:	0003      	movs	r3, r0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e015      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2238      	movs	r2, #56	; 0x38
 80048fe:	4013      	ands	r3, r2
 8004900:	2b20      	cmp	r3, #32
 8004902:	d103      	bne.n	800490c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	e00b      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2238      	movs	r2, #56	; 0x38
 8004912:	4013      	ands	r3, r2
 8004914:	2b18      	cmp	r3, #24
 8004916:	d103      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004918:	23fa      	movs	r3, #250	; 0xfa
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e001      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004924:	693b      	ldr	r3, [r7, #16]
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b006      	add	sp, #24
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	40021000 	.word	0x40021000
 8004934:	00f42400 	.word	0x00f42400
 8004938:	007a1200 	.word	0x007a1200

0800493c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <HAL_RCC_GetHCLKFreq+0x10>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	20000004 	.word	0x20000004

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b5b0      	push	{r4, r5, r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004954:	f7ff fff2 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004958:	0004      	movs	r4, r0
 800495a:	f7ff faf9 	bl	8003f50 <LL_RCC_GetAPB1Prescaler>
 800495e:	0003      	movs	r3, r0
 8004960:	0b1a      	lsrs	r2, r3, #12
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	58d3      	ldr	r3, [r2, r3]
 8004968:	221f      	movs	r2, #31
 800496a:	4013      	ands	r3, r2
 800496c:	40dc      	lsrs	r4, r3
 800496e:	0023      	movs	r3, r4
}
 8004970:	0018      	movs	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	bdb0      	pop	{r4, r5, r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	0800f698 	.word	0x0800f698

0800497c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004984:	2313      	movs	r3, #19
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800498c:	2312      	movs	r3, #18
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	4013      	ands	r3, r2
 800499e:	d100      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80049a0:	e0ad      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2011      	movs	r0, #17
 80049a4:	183b      	adds	r3, r7, r0
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	055b      	lsls	r3, r3, #21
 80049b2:	4013      	ands	r3, r2
 80049b4:	d110      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b44      	ldr	r3, [pc, #272]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ba:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	0549      	lsls	r1, r1, #21
 80049c0:	430a      	orrs	r2, r1
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80049c4:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	055b      	lsls	r3, r3, #21
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	183b      	adds	r3, r7, r0
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	0049      	lsls	r1, r1, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049e6:	f7fe feef 	bl	80037c8 <HAL_GetTick>
 80049ea:	0003      	movs	r3, r0
 80049ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ee:	e00b      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fe feea 	bl	80037c8 <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d904      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80049fe:	2313      	movs	r3, #19
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
        break;
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a08:	4b30      	ldr	r3, [pc, #192]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4013      	ands	r3, r2
 8004a12:	d0ed      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a14:	2313      	movs	r3, #19
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d15e      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a22:	23c0      	movs	r3, #192	; 0xc0
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d014      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	4a24      	ldr	r2, [pc, #144]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0249      	lsls	r1, r1, #9
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a58:	491e      	ldr	r1, [pc, #120]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004a5a:	400a      	ands	r2, r1
 8004a5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2201      	movs	r2, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d016      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe feac 	bl	80037c8 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a74:	e00c      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fe fea7 	bl	80037c8 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d904      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a86:	2313      	movs	r3, #19
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	701a      	strb	r2, [r3, #0]
            break;
 8004a8e:	e004      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a94:	2202      	movs	r2, #2
 8004a96:	4013      	ands	r3, r2
 8004a98:	d0ed      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a9a:	2313      	movs	r3, #19
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ab8:	e016      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aba:	2312      	movs	r3, #18
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2213      	movs	r2, #19
 8004ac0:	18ba      	adds	r2, r7, r2
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e00f      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	fffffcff 	.word	0xfffffcff
 8004ad4:	fffeffff 	.word	0xfffeffff
 8004ad8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	2312      	movs	r3, #18
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2213      	movs	r2, #19
 8004ae2:	18ba      	adds	r2, r7, r2
 8004ae4:	7812      	ldrb	r2, [r2, #0]
 8004ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ae8:	2311      	movs	r3, #17
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af2:	4bb6      	ldr	r3, [pc, #728]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af6:	4bb5      	ldr	r3, [pc, #724]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af8:	49b5      	ldr	r1, [pc, #724]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2201      	movs	r2, #1
 8004b04:	4013      	ands	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b08:	4bb0      	ldr	r3, [pc, #704]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4393      	bics	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4bad      	ldr	r3, [pc, #692]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2202      	movs	r2, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b26:	4ba9      	ldr	r3, [pc, #676]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4ba5      	ldr	r3, [pc, #660]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	4013      	ands	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b44:	4ba1      	ldr	r3, [pc, #644]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	2230      	movs	r2, #48	; 0x30
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	4b9e      	ldr	r3, [pc, #632]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b54:	430a      	orrs	r2, r1
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b62:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	4a9b      	ldr	r2, [pc, #620]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	4b96      	ldr	r3, [pc, #600]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	015b      	lsls	r3, r3, #5
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004b82:	4b92      	ldr	r3, [pc, #584]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	4a94      	ldr	r2, [pc, #592]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	4b8e      	ldr	r3, [pc, #568]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ba2:	4b8a      	ldr	r3, [pc, #552]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	4a8d      	ldr	r2, [pc, #564]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb0:	4b86      	ldr	r3, [pc, #536]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bc2:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	4a86      	ldr	r2, [pc, #536]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4b7e      	ldr	r3, [pc, #504]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be0:	4b7a      	ldr	r3, [pc, #488]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	4a7f      	ldr	r2, [pc, #508]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	4b77      	ldr	r3, [pc, #476]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bfe:	4b73      	ldr	r3, [pc, #460]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	4b6f      	ldr	r3, [pc, #444]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	01db      	lsls	r3, r3, #7
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d015      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c1e:	4b6b      	ldr	r3, [pc, #428]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	0899      	lsrs	r1, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2a:	4b68      	ldr	r3, [pc, #416]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	05db      	lsls	r3, r3, #23
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c3c:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	4b62      	ldr	r3, [pc, #392]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0249      	lsls	r1, r1, #9
 8004c46:	430a      	orrs	r2, r1
 8004c48:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	4013      	ands	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c56:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	0019      	movs	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c66:	430a      	orrs	r2, r1
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	039b      	lsls	r3, r3, #14
 8004c72:	4013      	ands	r3, r2
 8004c74:	d016      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c76:	4b55      	ldr	r3, [pc, #340]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	4a5c      	ldr	r2, [pc, #368]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c84:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c86:	430a      	orrs	r2, r1
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	03db      	lsls	r3, r3, #15
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c96:	4b4d      	ldr	r3, [pc, #308]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	4b4c      	ldr	r3, [pc, #304]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	0449      	lsls	r1, r1, #17
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	03db      	lsls	r3, r3, #15
 8004cac:	4013      	ands	r3, r2
 8004cae:	d016      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004cb0:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	4a4e      	ldr	r2, [pc, #312]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cbe:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	045b      	lsls	r3, r3, #17
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d106      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	0449      	lsls	r1, r1, #17
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d014      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004cea:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	2203      	movs	r2, #3
 8004cf0:	4393      	bics	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d106      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d06:	4b31      	ldr	r3, [pc, #196]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d0c:	2180      	movs	r1, #128	; 0x80
 8004d0e:	0249      	lsls	r1, r1, #9
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	019b      	lsls	r3, r3, #6
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d014      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d20:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	220c      	movs	r2, #12
 8004d26:	4393      	bics	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	0249      	lsls	r1, r1, #9
 8004d46:	430a      	orrs	r2, r1
 8004d48:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	045b      	lsls	r3, r3, #17
 8004d52:	4013      	ands	r3, r2
 8004d54:	d016      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	4a22      	ldr	r2, [pc, #136]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d66:	430a      	orrs	r2, r1
 8004d68:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d106      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d7c:	2180      	movs	r1, #128	; 0x80
 8004d7e:	0449      	lsls	r1, r1, #17
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	049b      	lsls	r3, r3, #18
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d90:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d106      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	0449      	lsls	r1, r1, #17
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004dbe:	2312      	movs	r3, #18
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	efffffff 	.word	0xefffffff
 8004dd4:	fffff3ff 	.word	0xfffff3ff
 8004dd8:	fffffcff 	.word	0xfffffcff
 8004ddc:	fff3ffff 	.word	0xfff3ffff
 8004de0:	ffcfffff 	.word	0xffcfffff
 8004de4:	ffffcfff 	.word	0xffffcfff
 8004de8:	ffff3fff 	.word	0xffff3fff
 8004dec:	ffbfffff 	.word	0xffbfffff
 8004df0:	feffffff 	.word	0xfeffffff

08004df4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d100      	bne.n	8004e0c <HAL_RTC_Init+0x18>
 8004e0a:	e08c      	b.n	8004f26 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2229      	movs	r2, #41	; 0x29
 8004e10:	5c9b      	ldrb	r3, [r3, r2]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2228      	movs	r2, #40	; 0x28
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2288      	movs	r2, #136	; 0x88
 8004e24:	0212      	lsls	r2, r2, #8
 8004e26:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fe f8ea 	bl	8003004 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2229      	movs	r2, #41	; 0x29
 8004e34:	2102      	movs	r1, #2
 8004e36:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d062      	beq.n	8004f0c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	22ca      	movs	r2, #202	; 0xca
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2253      	movs	r2, #83	; 0x53
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004e56:	250f      	movs	r5, #15
 8004e58:	197c      	adds	r4, r7, r5
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 fbfb 	bl	8005658 <RTC_EnterInitMode>
 8004e62:	0003      	movs	r3, r0
 8004e64:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004e66:	0028      	movs	r0, r5
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12c      	bne.n	8004eca <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	492e      	ldr	r1, [pc, #184]	; (8004f34 <HAL_RTC_Init+0x140>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6912      	ldr	r2, [r2, #16]
 8004ea6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	041a      	lsls	r2, r3, #16
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ebc:	183c      	adds	r4, r7, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 fc0b 	bl	80056dc <RTC_ExitInitMode>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004eca:	230f      	movs	r3, #15
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d116      	bne.n	8004f02 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	08d2      	lsrs	r2, r2, #3
 8004ee2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0a:	e003      	b.n	8004f14 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004f14:	230f      	movs	r3, #15
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2229      	movs	r2, #41	; 0x29
 8004f22:	2101      	movs	r1, #1
 8004f24:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004f26:	230f      	movs	r3, #15
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b004      	add	sp, #16
 8004f32:	bdb0      	pop	{r4, r5, r7, pc}
 8004f34:	fb8fffbf 	.word	0xfb8fffbf

08004f38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2228      	movs	r2, #40	; 0x28
 8004f48:	5c9b      	ldrb	r3, [r3, r2]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_RTC_SetTime+0x1a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e092      	b.n	8005078 <HAL_RTC_SetTime+0x140>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2228      	movs	r2, #40	; 0x28
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2229      	movs	r2, #41	; 0x29
 8004f5e:	2102      	movs	r1, #2
 8004f60:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	22ca      	movs	r2, #202	; 0xca
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2253      	movs	r2, #83	; 0x53
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f72:	2513      	movs	r5, #19
 8004f74:	197c      	adds	r4, r7, r5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fb6d 	bl	8005658 <RTC_EnterInitMode>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f82:	197b      	adds	r3, r7, r5
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d162      	bne.n	8005050 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d125      	bne.n	8004fdc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fbdc 	bl	8005764 <RTC_ByteToBcd2>
 8004fac:	0003      	movs	r3, r0
 8004fae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fbd5 	bl	8005764 <RTC_ByteToBcd2>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fbe:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fbcd 	bl	8005764 <RTC_ByteToBcd2>
 8004fca:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fcc:	0022      	movs	r2, r4
 8004fce:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e017      	b.n	800500c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d102      	bne.n	8004fee <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ffa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005000:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	78db      	ldrb	r3, [r3, #3]
 8005006:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	491b      	ldr	r1, [pc, #108]	; (8005080 <HAL_RTC_SetTime+0x148>)
 8005014:	400a      	ands	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4918      	ldr	r1, [pc, #96]	; (8005084 <HAL_RTC_SetTime+0x14c>)
 8005024:	400a      	ands	r2, r1
 8005026:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005040:	2313      	movs	r3, #19
 8005042:	18fc      	adds	r4, r7, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 fb48 	bl	80056dc <RTC_ExitInitMode>
 800504c:	0003      	movs	r3, r0
 800504e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005058:	2313      	movs	r3, #19
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2229      	movs	r2, #41	; 0x29
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2228      	movs	r2, #40	; 0x28
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

  return status;
 8005072:	2313      	movs	r3, #19
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	781b      	ldrb	r3, [r3, #0]
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b006      	add	sp, #24
 800507e:	bdb0      	pop	{r4, r5, r7, pc}
 8005080:	007f7f7f 	.word	0x007f7f7f
 8005084:	fffbffff 	.word	0xfffbffff

08005088 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	045b      	lsls	r3, r3, #17
 80050a6:	0c5a      	lsrs	r2, r3, #17
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_RTC_GetTime+0xb4>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	223f      	movs	r2, #63	; 0x3f
 80050c0:	4013      	ands	r3, r2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	227f      	movs	r2, #127	; 0x7f
 80050d0:	4013      	ands	r3, r2
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	227f      	movs	r2, #127	; 0x7f
 80050de:	4013      	ands	r3, r2
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0d9b      	lsrs	r3, r3, #22
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11a      	bne.n	8005132 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	0018      	movs	r0, r3
 8005102:	f000 fb57 	bl	80057b4 <RTC_Bcd2ToByte>
 8005106:	0003      	movs	r3, r0
 8005108:	001a      	movs	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	0018      	movs	r0, r3
 8005114:	f000 fb4e 	bl	80057b4 <RTC_Bcd2ToByte>
 8005118:	0003      	movs	r3, r0
 800511a:	001a      	movs	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	0018      	movs	r0, r3
 8005126:	f000 fb45 	bl	80057b4 <RTC_Bcd2ToByte>
 800512a:	0003      	movs	r3, r0
 800512c:	001a      	movs	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b006      	add	sp, #24
 800513a:	bd80      	pop	{r7, pc}
 800513c:	007f7f7f 	.word	0x007f7f7f

08005140 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2228      	movs	r2, #40	; 0x28
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_RTC_SetDate+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e07e      	b.n	8005258 <HAL_RTC_SetDate+0x118>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2228      	movs	r2, #40	; 0x28
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2229      	movs	r2, #41	; 0x29
 8005166:	2102      	movs	r1, #2
 8005168:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <HAL_RTC_SetDate+0x4e>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	001a      	movs	r2, r3
 8005176:	2310      	movs	r3, #16
 8005178:	4013      	ands	r3, r2
 800517a:	d008      	beq.n	800518e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2210      	movs	r2, #16
 8005182:	4393      	bics	r3, r2
 8005184:	b2db      	uxtb	r3, r3
 8005186:	330a      	adds	r3, #10
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11c      	bne.n	80051ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	78db      	ldrb	r3, [r3, #3]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 fae3 	bl	8005764 <RTC_ByteToBcd2>
 800519e:	0003      	movs	r3, r0
 80051a0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 fadc 	bl	8005764 <RTC_ByteToBcd2>
 80051ac:	0003      	movs	r3, r0
 80051ae:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051b0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 fad4 	bl	8005764 <RTC_ByteToBcd2>
 80051bc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051be:	0022      	movs	r2, r4
 80051c0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e00e      	b.n	80051ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051da:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	22ca      	movs	r2, #202	; 0xca
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2253      	movs	r2, #83	; 0x53
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051fc:	2513      	movs	r5, #19
 80051fe:	197c      	adds	r4, r7, r5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 fa28 	bl	8005658 <RTC_EnterInitMode>
 8005208:	0003      	movs	r3, r0
 800520a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800520c:	0028      	movs	r0, r5
 800520e:	183b      	adds	r3, r7, r0
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4910      	ldr	r1, [pc, #64]	; (8005260 <HAL_RTC_SetDate+0x120>)
 800521e:	400a      	ands	r2, r1
 8005220:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005222:	183c      	adds	r4, r7, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fa58 	bl	80056dc <RTC_ExitInitMode>
 800522c:	0003      	movs	r3, r0
 800522e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005238:	2313      	movs	r3, #19
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2229      	movs	r2, #41	; 0x29
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2228      	movs	r2, #40	; 0x28
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]

  return status;
 8005252:	2313      	movs	r3, #19
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	781b      	ldrb	r3, [r3, #0]
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b006      	add	sp, #24
 800525e:	bdb0      	pop	{r4, r5, r7, pc}
 8005260:	00ffff3f 	.word	0x00ffff3f

08005264 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_RTC_GetDate+0x98>)
 8005278:	4013      	ands	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	b2db      	uxtb	r3, r3
 800528c:	221f      	movs	r2, #31
 800528e:	4013      	ands	r3, r2
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	223f      	movs	r2, #63	; 0x3f
 800529c:	4013      	ands	r3, r2
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2207      	movs	r2, #7
 80052ac:	4013      	ands	r3, r2
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11a      	bne.n	80052f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	78db      	ldrb	r3, [r3, #3]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 fa78 	bl	80057b4 <RTC_Bcd2ToByte>
 80052c4:	0003      	movs	r3, r0
 80052c6:	001a      	movs	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fa6f 	bl	80057b4 <RTC_Bcd2ToByte>
 80052d6:	0003      	movs	r3, r0
 80052d8:	001a      	movs	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	789b      	ldrb	r3, [r3, #2]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 fa66 	bl	80057b4 <RTC_Bcd2ToByte>
 80052e8:	0003      	movs	r3, r0
 80052ea:	001a      	movs	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b006      	add	sp, #24
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	00ffff3f 	.word	0x00ffff3f

08005300 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2228      	movs	r2, #40	; 0x28
 8005310:	5c9b      	ldrb	r3, [r3, r2]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_RTC_SetAlarm_IT+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e127      	b.n	800556a <HAL_RTC_SetAlarm_IT+0x26a>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2229      	movs	r2, #41	; 0x29
 8005326:	2102      	movs	r1, #2
 8005328:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d136      	bne.n	800539e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	4013      	ands	r3, r2
 800533a:	d102      	bne.n	8005342 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fa0c 	bl	8005764 <RTC_ByteToBcd2>
 800534c:	0003      	movs	r3, r0
 800534e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 fa05 	bl	8005764 <RTC_ByteToBcd2>
 800535a:	0003      	movs	r3, r0
 800535c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800535e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	0018      	movs	r0, r3
 8005366:	f000 f9fd 	bl	8005764 <RTC_ByteToBcd2>
 800536a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800536c:	0022      	movs	r2, r4
 800536e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005376:	431a      	orrs	r2, r3
 8005378:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2220      	movs	r2, #32
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f9ef 	bl	8005764 <RTC_ByteToBcd2>
 8005386:	0003      	movs	r3, r0
 8005388:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800538a:	0022      	movs	r2, r4
 800538c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005392:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005398:	4313      	orrs	r3, r2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e022      	b.n	80053e4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2240      	movs	r2, #64	; 0x40
 80053a6:	4013      	ands	r3, r2
 80053a8:	d102      	bne.n	80053b0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053bc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	78db      	ldrb	r3, [r3, #3]
 80053c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2120      	movs	r1, #32
 80053d0:	5c5b      	ldrb	r3, [r3, r1]
 80053d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	22ca      	movs	r2, #202	; 0xca
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2253      	movs	r2, #83	; 0x53
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	429a      	cmp	r2, r3
 800540a:	d14c      	bne.n	80054a6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4957      	ldr	r1, [pc, #348]	; (8005574 <HAL_RTC_SetAlarm_IT+0x274>)
 8005418:	400a      	ands	r2, r1
 800541a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	430a      	orrs	r2, r1
 800542a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800542c:	f7fe f9cc 	bl	80037c8 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005434:	e016      	b.n	8005464 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005436:	f7fe f9c7 	bl	80037c8 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	23fa      	movs	r3, #250	; 0xfa
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	429a      	cmp	r2, r3
 8005446:	d90d      	bls.n	8005464 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2229      	movs	r2, #41	; 0x29
 8005454:	2103      	movs	r1, #3
 8005456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2228      	movs	r2, #40	; 0x28
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e082      	b.n	800556a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	4013      	ands	r3, r2
 800546e:	d0e2      	beq.n	8005436 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	0049      	lsls	r1, r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	0149      	lsls	r1, r1, #5
 80054a0:	430a      	orrs	r2, r1
 80054a2:	619a      	str	r2, [r3, #24]
 80054a4:	e04b      	b.n	800553e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4931      	ldr	r1, [pc, #196]	; (8005578 <HAL_RTC_SetAlarm_IT+0x278>)
 80054b2:	400a      	ands	r2, r1
 80054b4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2102      	movs	r1, #2
 80054c2:	430a      	orrs	r2, r1
 80054c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80054c6:	f7fe f97f 	bl	80037c8 <HAL_GetTick>
 80054ca:	0003      	movs	r3, r0
 80054cc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80054ce:	e016      	b.n	80054fe <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054d0:	f7fe f97a 	bl	80037c8 <HAL_GetTick>
 80054d4:	0002      	movs	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	23fa      	movs	r3, #250	; 0xfa
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	429a      	cmp	r2, r3
 80054e0:	d90d      	bls.n	80054fe <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	22ff      	movs	r2, #255	; 0xff
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2229      	movs	r2, #41	; 0x29
 80054ee:	2103      	movs	r1, #3
 80054f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2228      	movs	r2, #40	; 0x28
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e035      	b.n	800556a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2202      	movs	r2, #2
 8005506:	4013      	ands	r3, r2
 8005508:	d0e2      	beq.n	80054d0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699a      	ldr	r2, [r3, #24]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0089      	lsls	r1, r1, #2
 8005528:	430a      	orrs	r2, r1
 800552a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	0189      	lsls	r1, r1, #6
 800553a:	430a      	orrs	r2, r1
 800553c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800553e:	4a0f      	ldr	r2, [pc, #60]	; (800557c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	58d3      	ldr	r3, [r2, r3]
 8005544:	490d      	ldr	r1, [pc, #52]	; (800557c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	0312      	lsls	r2, r2, #12
 800554a:	4313      	orrs	r3, r2
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	22ff      	movs	r2, #255	; 0xff
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2229      	movs	r2, #41	; 0x29
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2228      	movs	r2, #40	; 0x28
 8005564:	2100      	movs	r1, #0
 8005566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b009      	add	sp, #36	; 0x24
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	fffffeff 	.word	0xfffffeff
 8005578:	fffffdff 	.word	0xfffffdff
 800557c:	40021800 	.word	0x40021800

08005580 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	015b      	lsls	r3, r3, #5
 8005592:	4013      	ands	r3, r2
 8005594:	d011      	beq.n	80055ba <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	d00b      	beq.n	80055ba <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2101      	movs	r1, #1
 80055ae:	430a      	orrs	r2, r1
 80055b0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 f821 	bl	80055fc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	019b      	lsls	r3, r3, #6
 80055c4:	4013      	ands	r3, r2
 80055c6:	d011      	beq.n	80055ec <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2102      	movs	r1, #2
 80055e0:	430a      	orrs	r2, r1
 80055e2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f901 	bl	80057ee <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2229      	movs	r2, #41	; 0x29
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <HAL_RTC_WaitForSynchro+0x48>)
 800561a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800561c:	f7fe f8d4 	bl	80037c8 <HAL_GetTick>
 8005620:	0003      	movs	r3, r0
 8005622:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005624:	e00a      	b.n	800563c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005626:	f7fe f8cf 	bl	80037c8 <HAL_GetTick>
 800562a:	0002      	movs	r2, r0
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	23fa      	movs	r3, #250	; 0xfa
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	429a      	cmp	r2, r3
 8005636:	d901      	bls.n	800563c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e006      	b.n	800564a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	4013      	ands	r3, r2
 8005646:	d0ee      	beq.n	8005626 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	0001005f 	.word	0x0001005f

08005658 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005660:	230f      	movs	r3, #15
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	4013      	ands	r3, r2
 8005672:	d12c      	bne.n	80056ce <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005684:	f7fe f8a0 	bl	80037c8 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800568c:	e014      	b.n	80056b8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800568e:	f7fe f89b 	bl	80037c8 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	200f      	movs	r0, #15
 800569a:	183b      	adds	r3, r7, r0
 800569c:	1839      	adds	r1, r7, r0
 800569e:	7809      	ldrb	r1, [r1, #0]
 80056a0:	7019      	strb	r1, [r3, #0]
 80056a2:	23fa      	movs	r3, #250	; 0xfa
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d906      	bls.n	80056b8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80056aa:	183b      	adds	r3, r7, r0
 80056ac:	2203      	movs	r2, #3
 80056ae:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2229      	movs	r2, #41	; 0x29
 80056b4:	2103      	movs	r1, #3
 80056b6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2240      	movs	r2, #64	; 0x40
 80056c0:	4013      	ands	r3, r2
 80056c2:	d104      	bne.n	80056ce <RTC_EnterInitMode+0x76>
 80056c4:	230f      	movs	r3, #15
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d1df      	bne.n	800568e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80056ce:	230f      	movs	r3, #15
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b004      	add	sp, #16
 80056da:	bd80      	pop	{r7, pc}

080056dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	240f      	movs	r4, #15
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056f2:	2180      	movs	r1, #128	; 0x80
 80056f4:	438a      	bics	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <RTC_ExitInitMode+0x84>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2220      	movs	r2, #32
 80056fe:	4013      	ands	r3, r2
 8005700:	d10d      	bne.n	800571e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff ff81 	bl	800560c <HAL_RTC_WaitForSynchro>
 800570a:	1e03      	subs	r3, r0, #0
 800570c:	d021      	beq.n	8005752 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2229      	movs	r2, #41	; 0x29
 8005712:	2103      	movs	r1, #3
 8005714:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005716:	193b      	adds	r3, r7, r4
 8005718:	2203      	movs	r2, #3
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e019      	b.n	8005752 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005724:	2120      	movs	r1, #32
 8005726:	438a      	bics	r2, r1
 8005728:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff ff6d 	bl	800560c <HAL_RTC_WaitForSynchro>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d007      	beq.n	8005746 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2229      	movs	r2, #41	; 0x29
 800573a:	2103      	movs	r1, #3
 800573c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800573e:	230f      	movs	r3, #15
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	2203      	movs	r2, #3
 8005744:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <RTC_ExitInitMode+0x84>)
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <RTC_ExitInitMode+0x84>)
 800574c:	2120      	movs	r1, #32
 800574e:	430a      	orrs	r2, r1
 8005750:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005752:	230f      	movs	r3, #15
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	781b      	ldrb	r3, [r3, #0]
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b005      	add	sp, #20
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	40002800 	.word	0x40002800

08005764 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	0002      	movs	r2, r0
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005774:	230b      	movs	r3, #11
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	1dfa      	adds	r2, r7, #7
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800577e:	e008      	b.n	8005792 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005786:	220b      	movs	r2, #11
 8005788:	18bb      	adds	r3, r7, r2
 800578a:	18ba      	adds	r2, r7, r2
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	3a0a      	subs	r2, #10
 8005790:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005792:	210b      	movs	r1, #11
 8005794:	187b      	adds	r3, r7, r1
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b09      	cmp	r3, #9
 800579a:	d8f1      	bhi.n	8005780 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
}
 80057ac:	0018      	movs	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b004      	add	sp, #16
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	0002      	movs	r2, r0
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	001a      	movs	r2, r3
 80057ca:	0013      	movs	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	189b      	adds	r3, r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	1dfb      	adds	r3, r7, #7
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	210f      	movs	r1, #15
 80057de:	400b      	ands	r3, r1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	18d3      	adds	r3, r2, r3
 80057e4:	b2db      	uxtb	r3, r3
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0a8      	b.n	8005964 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	2382      	movs	r3, #130	; 0x82
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	429a      	cmp	r2, r3
 8005824:	d009      	beq.n	800583a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	61da      	str	r2, [r3, #28]
 800582c:	e005      	b.n	800583a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	225d      	movs	r2, #93	; 0x5d
 8005844:	5c9b      	ldrb	r3, [r3, r2]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	225c      	movs	r2, #92	; 0x5c
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0018      	movs	r0, r3
 8005858:	f7fd fc1a 	bl	8003090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	225d      	movs	r2, #93	; 0x5d
 8005860:	2102      	movs	r1, #2
 8005862:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2140      	movs	r1, #64	; 0x40
 8005870:	438a      	bics	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	23e0      	movs	r3, #224	; 0xe0
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e002      	b.n	800588c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	015b      	lsls	r3, r3, #5
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	23f0      	movs	r3, #240	; 0xf0
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	429a      	cmp	r2, r3
 8005896:	d008      	beq.n	80058aa <HAL_SPI_Init+0xaa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	23e0      	movs	r3, #224	; 0xe0
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	2382      	movs	r3, #130	; 0x82
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	401a      	ands	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6899      	ldr	r1, [r3, #8]
 80058b8:	2384      	movs	r3, #132	; 0x84
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	400b      	ands	r3, r1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2102      	movs	r1, #2
 80058c6:	400b      	ands	r3, r1
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	2101      	movs	r1, #1
 80058d0:	400b      	ands	r3, r1
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6999      	ldr	r1, [r3, #24]
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	400b      	ands	r3, r1
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	2138      	movs	r1, #56	; 0x38
 80058e6:	400b      	ands	r3, r1
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	400b      	ands	r3, r1
 80058f2:	431a      	orrs	r2, r3
 80058f4:	0011      	movs	r1, r2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	401a      	ands	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	2204      	movs	r2, #4
 8005910:	401a      	ands	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2110      	movs	r1, #16
 8005918:	400b      	ands	r3, r1
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	2108      	movs	r1, #8
 8005922:	400b      	ands	r3, r1
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	23f0      	movs	r3, #240	; 0xf0
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	400b      	ands	r3, r1
 8005930:	431a      	orrs	r2, r3
 8005932:	0011      	movs	r1, r2
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	015b      	lsls	r3, r3, #5
 800593a:	401a      	ands	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4907      	ldr	r1, [pc, #28]	; (800596c <HAL_SPI_Init+0x16c>)
 8005950:	400a      	ands	r2, r1
 8005952:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	225d      	movs	r2, #93	; 0x5d
 800595e:	2101      	movs	r1, #1
 8005960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}
 800596c:	fffff7ff 	.word	0xfffff7ff

08005970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e04a      	b.n	8005a18 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	223d      	movs	r2, #61	; 0x3d
 8005986:	5c9b      	ldrb	r3, [r3, r2]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	223c      	movs	r2, #60	; 0x3c
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f7fd fbc3 	bl	8003124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	223d      	movs	r2, #61	; 0x3d
 80059a2:	2102      	movs	r1, #2
 80059a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	0019      	movs	r1, r3
 80059b0:	0010      	movs	r0, r2
 80059b2:	f000 f9ed 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2248      	movs	r2, #72	; 0x48
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	223e      	movs	r2, #62	; 0x3e
 80059c2:	2101      	movs	r1, #1
 80059c4:	5499      	strb	r1, [r3, r2]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	223f      	movs	r2, #63	; 0x3f
 80059ca:	2101      	movs	r1, #1
 80059cc:	5499      	strb	r1, [r3, r2]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2240      	movs	r2, #64	; 0x40
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2241      	movs	r2, #65	; 0x41
 80059da:	2101      	movs	r1, #1
 80059dc:	5499      	strb	r1, [r3, r2]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2242      	movs	r2, #66	; 0x42
 80059e2:	2101      	movs	r1, #1
 80059e4:	5499      	strb	r1, [r3, r2]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2243      	movs	r2, #67	; 0x43
 80059ea:	2101      	movs	r1, #1
 80059ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2244      	movs	r2, #68	; 0x44
 80059f2:	2101      	movs	r1, #1
 80059f4:	5499      	strb	r1, [r3, r2]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2245      	movs	r2, #69	; 0x45
 80059fa:	2101      	movs	r1, #1
 80059fc:	5499      	strb	r1, [r3, r2]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2246      	movs	r2, #70	; 0x46
 8005a02:	2101      	movs	r1, #1
 8005a04:	5499      	strb	r1, [r3, r2]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2247      	movs	r2, #71	; 0x47
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	223d      	movs	r2, #61	; 0x3d
 8005a12:	2101      	movs	r1, #1
 8005a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223d      	movs	r2, #61	; 0x3d
 8005a2c:	5c9b      	ldrb	r3, [r3, r2]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e047      	b.n	8005ac8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223d      	movs	r2, #61	; 0x3d
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d014      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	05db      	lsls	r3, r3, #23
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_TIM_Base_Start_IT+0xbc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d116      	bne.n	8005ab2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d016      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	025b      	lsls	r3, r3, #9
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d011      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	e008      	b.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2101      	movs	r1, #1
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b004      	add	sp, #16
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2101      	movs	r1, #1
 8005af8:	438a      	bics	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	4a0d      	ldr	r2, [pc, #52]	; (8005b38 <HAL_TIM_Base_Stop_IT+0x54>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	d10d      	bne.n	8005b24 <HAL_TIM_Base_Stop_IT+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <HAL_TIM_Base_Stop_IT+0x58>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_Base_Stop_IT+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	438a      	bics	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	223d      	movs	r2, #61	; 0x3d
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	0018      	movs	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b002      	add	sp, #8
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	00001111 	.word	0x00001111
 8005b3c:	00000444 	.word	0x00000444

08005b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d021      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2202      	movs	r2, #2
 8005b64:	4013      	ands	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	4252      	negs	r2, r2
 8005b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	4013      	ands	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 f8ea 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e007      	b.n	8005b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 f8dd 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 f8e9 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d01e      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2205      	movs	r2, #5
 8005bba:	4252      	negs	r2, r2
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 f8c3 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005bda:	e007      	b.n	8005bec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 f8b6 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f8c2 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d021      	beq.n	8005c3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2209      	movs	r2, #9
 8005c08:	4252      	negs	r2, r2
 8005c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f89d 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005c26:	e007      	b.n	8005c38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 f890 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 f89c 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2210      	movs	r2, #16
 8005c42:	4013      	ands	r3, r2
 8005c44:	d022      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2210      	movs	r2, #16
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d01e      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2211      	movs	r2, #17
 8005c54:	4252      	negs	r2, r2
 8005c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	23c0      	movs	r3, #192	; 0xc0
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f000 f876 	bl	8005d60 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e007      	b.n	8005c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 f869 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 f875 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4013      	ands	r3, r2
 8005c92:	d00c      	beq.n	8005cae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d008      	beq.n	8005cae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7fd f957 	bl	8002f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d104      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	019b      	lsls	r3, r3, #6
 8005cbc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2280      	movs	r2, #128	; 0x80
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <HAL_TIM_IRQHandler+0x208>)
 8005cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 f972 	bl	8005fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <HAL_TIM_IRQHandler+0x20c>)
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 f969 	bl	8005fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2240      	movs	r2, #64	; 0x40
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d00c      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2240      	movs	r2, #64	; 0x40
 8005d06:	4013      	ands	r3, r2
 8005d08:	d008      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2241      	movs	r2, #65	; 0x41
 8005d10:	4252      	negs	r2, r2
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 f832 	bl	8005d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	4013      	ands	r3, r2
 8005d22:	d00c      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d008      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2221      	movs	r2, #33	; 0x21
 8005d32:	4252      	negs	r2, r2
 8005d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 f937 	bl	8005fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b004      	add	sp, #16
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	ffffdf7f 	.word	0xffffdf7f
 8005d4c:	fffffeff 	.word	0xfffffeff

08005d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b002      	add	sp, #8
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b002      	add	sp, #8
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3f      	ldr	r2, [pc, #252]	; (8005ea0 <TIM_Base_SetConfig+0x110>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00c      	beq.n	8005dc2 <TIM_Base_SetConfig+0x32>
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	05db      	lsls	r3, r3, #23
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d007      	beq.n	8005dc2 <TIM_Base_SetConfig+0x32>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a3b      	ldr	r2, [pc, #236]	; (8005ea4 <TIM_Base_SetConfig+0x114>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_Base_SetConfig+0x32>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ea8 <TIM_Base_SetConfig+0x118>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2270      	movs	r2, #112	; 0x70
 8005dc6:	4393      	bics	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a32      	ldr	r2, [pc, #200]	; (8005ea0 <TIM_Base_SetConfig+0x110>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01c      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	05db      	lsls	r3, r3, #23
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d017      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2e      	ldr	r2, [pc, #184]	; (8005ea4 <TIM_Base_SetConfig+0x114>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <TIM_Base_SetConfig+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	; (8005eac <TIM_Base_SetConfig+0x11c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <TIM_Base_SetConfig+0x120>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2a      	ldr	r2, [pc, #168]	; (8005eb4 <TIM_Base_SetConfig+0x124>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0x86>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <TIM_Base_SetConfig+0x128>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	4393      	bics	r3, r2
 8005e2e:	001a      	movs	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <TIM_Base_SetConfig+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0xde>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <TIM_Base_SetConfig+0x120>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0xde>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <TIM_Base_SetConfig+0x124>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0xde>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <TIM_Base_SetConfig+0x128>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d103      	bne.n	8005e76 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4393      	bics	r3, r2
 8005e90:	001a      	movs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]
  }
}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40002000 	.word	0x40002000
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800
 8005ebc:	fffffcff 	.word	0xfffffcff

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	223c      	movs	r2, #60	; 0x3c
 8005ece:	5c9b      	ldrb	r3, [r3, r2]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e05a      	b.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	223c      	movs	r2, #60	; 0x3c
 8005edc:	2101      	movs	r1, #1
 8005ede:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	223d      	movs	r2, #61	; 0x3d
 8005ee4:	2102      	movs	r1, #2
 8005ee6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a26      	ldr	r2, [pc, #152]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d108      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2270      	movs	r2, #112	; 0x70
 8005f18:	4393      	bics	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d014      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	05db      	lsls	r3, r3, #23
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10c      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2280      	movs	r2, #128	; 0x80
 8005f66:	4393      	bics	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	223d      	movs	r2, #61	; 0x3d
 8005f80:	2101      	movs	r1, #1
 8005f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	223c      	movs	r2, #60	; 0x3c
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b004      	add	sp, #16
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	ff0fffff 	.word	0xff0fffff
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40014000 	.word	0x40014000

08005fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e046      	b.n	800607c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2288      	movs	r2, #136	; 0x88
 8005ff2:	589b      	ldr	r3, [r3, r2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2284      	movs	r2, #132	; 0x84
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	0018      	movs	r0, r3
 8006004:	f7fd f8b4 	bl	8003170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2288      	movs	r2, #136	; 0x88
 800600c:	2124      	movs	r1, #36	; 0x24
 800600e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2101      	movs	r1, #1
 800601c:	438a      	bics	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0018      	movs	r0, r3
 800602c:	f000 fd4c 	bl	8006ac8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f9f2 	bl	800641c <UART_SetConfig>
 8006038:	0003      	movs	r3, r0
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e01c      	b.n	800607c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	490d      	ldr	r1, [pc, #52]	; (8006084 <HAL_UART_Init+0xa8>)
 800604e:	400a      	ands	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	212a      	movs	r1, #42	; 0x2a
 800605e:	438a      	bics	r2, r1
 8006060:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fddb 	bl	8006c30 <UART_CheckIdleState>
 800607a:	0003      	movs	r3, r0
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}
 8006084:	ffffb7ff 	.word	0xffffb7ff

08006088 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e032      	b.n	8006100 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2288      	movs	r2, #136	; 0x88
 800609e:	2124      	movs	r1, #36	; 0x24
 80060a0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2101      	movs	r1, #1
 80060ae:	438a      	bics	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	0018      	movs	r0, r3
 80060ce:	f7fd f97b 	bl	80033c8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2290      	movs	r2, #144	; 0x90
 80060d6:	2100      	movs	r1, #0
 80060d8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2288      	movs	r2, #136	; 0x88
 80060de:	2100      	movs	r1, #0
 80060e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	228c      	movs	r2, #140	; 0x8c
 80060e6:	2100      	movs	r1, #0
 80060e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2284      	movs	r2, #132	; 0x84
 80060fa:	2100      	movs	r1, #0
 80060fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	0018      	movs	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	b002      	add	sp, #8
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	1dbb      	adds	r3, r7, #6
 8006116:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2288      	movs	r2, #136	; 0x88
 800611c:	589b      	ldr	r3, [r3, r2]
 800611e:	2b20      	cmp	r3, #32
 8006120:	d000      	beq.n	8006124 <HAL_UART_Transmit+0x1c>
 8006122:	e090      	b.n	8006246 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_UART_Transmit+0x2a>
 800612a:	1dbb      	adds	r3, r7, #6
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e088      	b.n	8006248 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	015b      	lsls	r3, r3, #5
 800613e:	429a      	cmp	r2, r3
 8006140:	d109      	bne.n	8006156 <HAL_UART_Transmit+0x4e>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2201      	movs	r2, #1
 800614e:	4013      	ands	r3, r2
 8006150:	d001      	beq.n	8006156 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e078      	b.n	8006248 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2290      	movs	r2, #144	; 0x90
 800615a:	2100      	movs	r1, #0
 800615c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2288      	movs	r2, #136	; 0x88
 8006162:	2121      	movs	r1, #33	; 0x21
 8006164:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006166:	f7fd fb2f 	bl	80037c8 <HAL_GetTick>
 800616a:	0003      	movs	r3, r0
 800616c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1dba      	adds	r2, r7, #6
 8006172:	2154      	movs	r1, #84	; 0x54
 8006174:	8812      	ldrh	r2, [r2, #0]
 8006176:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1dba      	adds	r2, r7, #6
 800617c:	2156      	movs	r1, #86	; 0x56
 800617e:	8812      	ldrh	r2, [r2, #0]
 8006180:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	015b      	lsls	r3, r3, #5
 800618a:	429a      	cmp	r2, r3
 800618c:	d108      	bne.n	80061a0 <HAL_UART_Transmit+0x98>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e003      	b.n	80061a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a8:	e030      	b.n	800620c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	0013      	movs	r3, r2
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	f000 fde4 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d005      	beq.n	80061cc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2288      	movs	r2, #136	; 0x88
 80061c4:	2120      	movs	r1, #32
 80061c6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e03d      	b.n	8006248 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	001a      	movs	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	05d2      	lsls	r2, r2, #23
 80061de:	0dd2      	lsrs	r2, r2, #23
 80061e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3302      	adds	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e007      	b.n	80061fa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3301      	adds	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2256      	movs	r2, #86	; 0x56
 80061fe:	5a9b      	ldrh	r3, [r3, r2]
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b299      	uxth	r1, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2256      	movs	r2, #86	; 0x56
 800620a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2256      	movs	r2, #86	; 0x56
 8006210:	5a9b      	ldrh	r3, [r3, r2]
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1c8      	bne.n	80061aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	0013      	movs	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	2140      	movs	r1, #64	; 0x40
 8006226:	f000 fdad 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 800622a:	1e03      	subs	r3, r0, #0
 800622c:	d005      	beq.n	800623a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2288      	movs	r2, #136	; 0x88
 8006232:	2120      	movs	r1, #32
 8006234:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e006      	b.n	8006248 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2288      	movs	r2, #136	; 0x88
 800623e:	2120      	movs	r1, #32
 8006240:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e000      	b.n	8006248 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
  }
}
 8006248:	0018      	movs	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	b008      	add	sp, #32
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	1dbb      	adds	r3, r7, #6
 800625e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	228c      	movs	r2, #140	; 0x8c
 8006264:	589b      	ldr	r3, [r3, r2]
 8006266:	2b20      	cmp	r3, #32
 8006268:	d000      	beq.n	800626c <HAL_UART_Receive+0x1c>
 800626a:	e0d0      	b.n	800640e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_UART_Receive+0x2a>
 8006272:	1dbb      	adds	r3, r7, #6
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0c8      	b.n	8006410 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	015b      	lsls	r3, r3, #5
 8006286:	429a      	cmp	r2, r3
 8006288:	d109      	bne.n	800629e <HAL_UART_Receive+0x4e>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d105      	bne.n	800629e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2201      	movs	r2, #1
 8006296:	4013      	ands	r3, r2
 8006298:	d001      	beq.n	800629e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e0b8      	b.n	8006410 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2290      	movs	r2, #144	; 0x90
 80062a2:	2100      	movs	r1, #0
 80062a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	228c      	movs	r2, #140	; 0x8c
 80062aa:	2122      	movs	r1, #34	; 0x22
 80062ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b4:	f7fd fa88 	bl	80037c8 <HAL_GetTick>
 80062b8:	0003      	movs	r3, r0
 80062ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1dba      	adds	r2, r7, #6
 80062c0:	215c      	movs	r1, #92	; 0x5c
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1dba      	adds	r2, r7, #6
 80062ca:	215e      	movs	r1, #94	; 0x5e
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	015b      	lsls	r3, r3, #5
 80062d8:	429a      	cmp	r2, r3
 80062da:	d10d      	bne.n	80062f8 <HAL_UART_Receive+0xa8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <HAL_UART_Receive+0x9e>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2260      	movs	r2, #96	; 0x60
 80062e8:	494b      	ldr	r1, [pc, #300]	; (8006418 <HAL_UART_Receive+0x1c8>)
 80062ea:	5299      	strh	r1, [r3, r2]
 80062ec:	e02e      	b.n	800634c <HAL_UART_Receive+0xfc>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2260      	movs	r2, #96	; 0x60
 80062f2:	21ff      	movs	r1, #255	; 0xff
 80062f4:	5299      	strh	r1, [r3, r2]
 80062f6:	e029      	b.n	800634c <HAL_UART_Receive+0xfc>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10d      	bne.n	800631c <HAL_UART_Receive+0xcc>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <HAL_UART_Receive+0xc2>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2260      	movs	r2, #96	; 0x60
 800630c:	21ff      	movs	r1, #255	; 0xff
 800630e:	5299      	strh	r1, [r3, r2]
 8006310:	e01c      	b.n	800634c <HAL_UART_Receive+0xfc>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2260      	movs	r2, #96	; 0x60
 8006316:	217f      	movs	r1, #127	; 0x7f
 8006318:	5299      	strh	r1, [r3, r2]
 800631a:	e017      	b.n	800634c <HAL_UART_Receive+0xfc>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	055b      	lsls	r3, r3, #21
 8006324:	429a      	cmp	r2, r3
 8006326:	d10d      	bne.n	8006344 <HAL_UART_Receive+0xf4>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_UART_Receive+0xea>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2260      	movs	r2, #96	; 0x60
 8006334:	217f      	movs	r1, #127	; 0x7f
 8006336:	5299      	strh	r1, [r3, r2]
 8006338:	e008      	b.n	800634c <HAL_UART_Receive+0xfc>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2260      	movs	r2, #96	; 0x60
 800633e:	213f      	movs	r1, #63	; 0x3f
 8006340:	5299      	strh	r1, [r3, r2]
 8006342:	e003      	b.n	800634c <HAL_UART_Receive+0xfc>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2260      	movs	r2, #96	; 0x60
 8006348:	2100      	movs	r1, #0
 800634a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800634c:	2312      	movs	r3, #18
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	2160      	movs	r1, #96	; 0x60
 8006354:	5a52      	ldrh	r2, [r2, r1]
 8006356:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	015b      	lsls	r3, r3, #5
 8006360:	429a      	cmp	r2, r3
 8006362:	d108      	bne.n	8006376 <HAL_UART_Receive+0x126>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e003      	b.n	800637e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800637e:	e03a      	b.n	80063f6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	0013      	movs	r3, r2
 800638a:	2200      	movs	r2, #0
 800638c:	2120      	movs	r1, #32
 800638e:	f000 fcf9 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d005      	beq.n	80063a2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	228c      	movs	r2, #140	; 0x8c
 800639a:	2120      	movs	r1, #32
 800639c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e036      	b.n	8006410 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10e      	bne.n	80063c6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2212      	movs	r2, #18
 80063b2:	18ba      	adds	r2, r7, r2
 80063b4:	8812      	ldrh	r2, [r2, #0]
 80063b6:	4013      	ands	r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	3302      	adds	r3, #2
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00e      	b.n	80063e4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2212      	movs	r2, #18
 80063d0:	18ba      	adds	r2, r7, r2
 80063d2:	8812      	ldrh	r2, [r2, #0]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	4013      	ands	r3, r2
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	225e      	movs	r2, #94	; 0x5e
 80063e8:	5a9b      	ldrh	r3, [r3, r2]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b299      	uxth	r1, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	225e      	movs	r2, #94	; 0x5e
 80063f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	225e      	movs	r2, #94	; 0x5e
 80063fa:	5a9b      	ldrh	r3, [r3, r2]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1be      	bne.n	8006380 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	228c      	movs	r2, #140	; 0x8c
 8006406:	2120      	movs	r1, #32
 8006408:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e000      	b.n	8006410 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800640e:	2302      	movs	r3, #2
  }
}
 8006410:	0018      	movs	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	b008      	add	sp, #32
 8006416:	bd80      	pop	{r7, pc}
 8006418:	000001ff 	.word	0x000001ff

0800641c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800641c:	b5b0      	push	{r4, r5, r7, lr}
 800641e:	b090      	sub	sp, #64	; 0x40
 8006420:	af00      	add	r7, sp, #0
 8006422:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006424:	231a      	movs	r3, #26
 8006426:	2220      	movs	r2, #32
 8006428:	189b      	adds	r3, r3, r2
 800642a:	19db      	adds	r3, r3, r7
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	431a      	orrs	r2, r3
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	431a      	orrs	r2, r3
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	4313      	orrs	r3, r2
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4ac1      	ldr	r2, [pc, #772]	; (8006754 <UART_SetConfig+0x338>)
 8006450:	4013      	ands	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	430b      	orrs	r3, r1
 800645c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4abc      	ldr	r2, [pc, #752]	; (8006758 <UART_SetConfig+0x33c>)
 8006466:	4013      	ands	r3, r2
 8006468:	0018      	movs	r0, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	68d9      	ldr	r1, [r3, #12]
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	0003      	movs	r3, r0
 8006474:	430b      	orrs	r3, r1
 8006476:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4ab6      	ldr	r2, [pc, #728]	; (800675c <UART_SetConfig+0x340>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <UART_SetConfig+0x80>
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4ab4      	ldr	r2, [pc, #720]	; (8006760 <UART_SetConfig+0x344>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006498:	4313      	orrs	r3, r2
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	4ab0      	ldr	r2, [pc, #704]	; (8006764 <UART_SetConfig+0x348>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	0019      	movs	r1, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ae:	430b      	orrs	r3, r1
 80064b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	220f      	movs	r2, #15
 80064ba:	4393      	bics	r3, r2
 80064bc:	0018      	movs	r0, r3
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	0003      	movs	r3, r0
 80064c8:	430b      	orrs	r3, r1
 80064ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4aa5      	ldr	r2, [pc, #660]	; (8006768 <UART_SetConfig+0x34c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d131      	bne.n	800653a <UART_SetConfig+0x11e>
 80064d6:	4ba5      	ldr	r3, [pc, #660]	; (800676c <UART_SetConfig+0x350>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	2203      	movs	r2, #3
 80064dc:	4013      	ands	r3, r2
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d01d      	beq.n	800651e <UART_SetConfig+0x102>
 80064e2:	d823      	bhi.n	800652c <UART_SetConfig+0x110>
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d00c      	beq.n	8006502 <UART_SetConfig+0xe6>
 80064e8:	d820      	bhi.n	800652c <UART_SetConfig+0x110>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <UART_SetConfig+0xd8>
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d00e      	beq.n	8006510 <UART_SetConfig+0xf4>
 80064f2:	e01b      	b.n	800652c <UART_SetConfig+0x110>
 80064f4:	231b      	movs	r3, #27
 80064f6:	2220      	movs	r2, #32
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	19db      	adds	r3, r3, r7
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e154      	b.n	80067ac <UART_SetConfig+0x390>
 8006502:	231b      	movs	r3, #27
 8006504:	2220      	movs	r2, #32
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	2202      	movs	r2, #2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e14d      	b.n	80067ac <UART_SetConfig+0x390>
 8006510:	231b      	movs	r3, #27
 8006512:	2220      	movs	r2, #32
 8006514:	189b      	adds	r3, r3, r2
 8006516:	19db      	adds	r3, r3, r7
 8006518:	2204      	movs	r2, #4
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e146      	b.n	80067ac <UART_SetConfig+0x390>
 800651e:	231b      	movs	r3, #27
 8006520:	2220      	movs	r2, #32
 8006522:	189b      	adds	r3, r3, r2
 8006524:	19db      	adds	r3, r3, r7
 8006526:	2208      	movs	r2, #8
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e13f      	b.n	80067ac <UART_SetConfig+0x390>
 800652c:	231b      	movs	r3, #27
 800652e:	2220      	movs	r2, #32
 8006530:	189b      	adds	r3, r3, r2
 8006532:	19db      	adds	r3, r3, r7
 8006534:	2210      	movs	r2, #16
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e138      	b.n	80067ac <UART_SetConfig+0x390>
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a8c      	ldr	r2, [pc, #560]	; (8006770 <UART_SetConfig+0x354>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d131      	bne.n	80065a8 <UART_SetConfig+0x18c>
 8006544:	4b89      	ldr	r3, [pc, #548]	; (800676c <UART_SetConfig+0x350>)
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	220c      	movs	r2, #12
 800654a:	4013      	ands	r3, r2
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d01d      	beq.n	800658c <UART_SetConfig+0x170>
 8006550:	d823      	bhi.n	800659a <UART_SetConfig+0x17e>
 8006552:	2b08      	cmp	r3, #8
 8006554:	d00c      	beq.n	8006570 <UART_SetConfig+0x154>
 8006556:	d820      	bhi.n	800659a <UART_SetConfig+0x17e>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <UART_SetConfig+0x146>
 800655c:	2b04      	cmp	r3, #4
 800655e:	d00e      	beq.n	800657e <UART_SetConfig+0x162>
 8006560:	e01b      	b.n	800659a <UART_SetConfig+0x17e>
 8006562:	231b      	movs	r3, #27
 8006564:	2220      	movs	r2, #32
 8006566:	189b      	adds	r3, r3, r2
 8006568:	19db      	adds	r3, r3, r7
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e11d      	b.n	80067ac <UART_SetConfig+0x390>
 8006570:	231b      	movs	r3, #27
 8006572:	2220      	movs	r2, #32
 8006574:	189b      	adds	r3, r3, r2
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2202      	movs	r2, #2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e116      	b.n	80067ac <UART_SetConfig+0x390>
 800657e:	231b      	movs	r3, #27
 8006580:	2220      	movs	r2, #32
 8006582:	189b      	adds	r3, r3, r2
 8006584:	19db      	adds	r3, r3, r7
 8006586:	2204      	movs	r2, #4
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e10f      	b.n	80067ac <UART_SetConfig+0x390>
 800658c:	231b      	movs	r3, #27
 800658e:	2220      	movs	r2, #32
 8006590:	189b      	adds	r3, r3, r2
 8006592:	19db      	adds	r3, r3, r7
 8006594:	2208      	movs	r2, #8
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e108      	b.n	80067ac <UART_SetConfig+0x390>
 800659a:	231b      	movs	r3, #27
 800659c:	2220      	movs	r2, #32
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	19db      	adds	r3, r3, r7
 80065a2:	2210      	movs	r2, #16
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e101      	b.n	80067ac <UART_SetConfig+0x390>
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a71      	ldr	r2, [pc, #452]	; (8006774 <UART_SetConfig+0x358>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d131      	bne.n	8006616 <UART_SetConfig+0x1fa>
 80065b2:	4b6e      	ldr	r3, [pc, #440]	; (800676c <UART_SetConfig+0x350>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	2230      	movs	r2, #48	; 0x30
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b30      	cmp	r3, #48	; 0x30
 80065bc:	d01d      	beq.n	80065fa <UART_SetConfig+0x1de>
 80065be:	d823      	bhi.n	8006608 <UART_SetConfig+0x1ec>
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d00c      	beq.n	80065de <UART_SetConfig+0x1c2>
 80065c4:	d820      	bhi.n	8006608 <UART_SetConfig+0x1ec>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <UART_SetConfig+0x1b4>
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d00e      	beq.n	80065ec <UART_SetConfig+0x1d0>
 80065ce:	e01b      	b.n	8006608 <UART_SetConfig+0x1ec>
 80065d0:	231b      	movs	r3, #27
 80065d2:	2220      	movs	r2, #32
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	19db      	adds	r3, r3, r7
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e0e6      	b.n	80067ac <UART_SetConfig+0x390>
 80065de:	231b      	movs	r3, #27
 80065e0:	2220      	movs	r2, #32
 80065e2:	189b      	adds	r3, r3, r2
 80065e4:	19db      	adds	r3, r3, r7
 80065e6:	2202      	movs	r2, #2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e0df      	b.n	80067ac <UART_SetConfig+0x390>
 80065ec:	231b      	movs	r3, #27
 80065ee:	2220      	movs	r2, #32
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	2204      	movs	r2, #4
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e0d8      	b.n	80067ac <UART_SetConfig+0x390>
 80065fa:	231b      	movs	r3, #27
 80065fc:	2220      	movs	r2, #32
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	19db      	adds	r3, r3, r7
 8006602:	2208      	movs	r2, #8
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e0d1      	b.n	80067ac <UART_SetConfig+0x390>
 8006608:	231b      	movs	r3, #27
 800660a:	2220      	movs	r2, #32
 800660c:	189b      	adds	r3, r3, r2
 800660e:	19db      	adds	r3, r3, r7
 8006610:	2210      	movs	r2, #16
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e0ca      	b.n	80067ac <UART_SetConfig+0x390>
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a57      	ldr	r2, [pc, #348]	; (8006778 <UART_SetConfig+0x35c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d106      	bne.n	800662e <UART_SetConfig+0x212>
 8006620:	231b      	movs	r3, #27
 8006622:	2220      	movs	r2, #32
 8006624:	189b      	adds	r3, r3, r2
 8006626:	19db      	adds	r3, r3, r7
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e0be      	b.n	80067ac <UART_SetConfig+0x390>
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a52      	ldr	r2, [pc, #328]	; (800677c <UART_SetConfig+0x360>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d106      	bne.n	8006646 <UART_SetConfig+0x22a>
 8006638:	231b      	movs	r3, #27
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e0b2      	b.n	80067ac <UART_SetConfig+0x390>
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a4d      	ldr	r2, [pc, #308]	; (8006780 <UART_SetConfig+0x364>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d106      	bne.n	800665e <UART_SetConfig+0x242>
 8006650:	231b      	movs	r3, #27
 8006652:	2220      	movs	r2, #32
 8006654:	189b      	adds	r3, r3, r2
 8006656:	19db      	adds	r3, r3, r7
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e0a6      	b.n	80067ac <UART_SetConfig+0x390>
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3e      	ldr	r2, [pc, #248]	; (800675c <UART_SetConfig+0x340>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d13e      	bne.n	80066e6 <UART_SetConfig+0x2ca>
 8006668:	4b40      	ldr	r3, [pc, #256]	; (800676c <UART_SetConfig+0x350>)
 800666a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666c:	23c0      	movs	r3, #192	; 0xc0
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	4013      	ands	r3, r2
 8006672:	22c0      	movs	r2, #192	; 0xc0
 8006674:	0112      	lsls	r2, r2, #4
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <UART_SetConfig+0x2ae>
 800667a:	22c0      	movs	r2, #192	; 0xc0
 800667c:	0112      	lsls	r2, r2, #4
 800667e:	4293      	cmp	r3, r2
 8006680:	d82a      	bhi.n	80066d8 <UART_SetConfig+0x2bc>
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	0112      	lsls	r2, r2, #4
 8006686:	4293      	cmp	r3, r2
 8006688:	d011      	beq.n	80066ae <UART_SetConfig+0x292>
 800668a:	2280      	movs	r2, #128	; 0x80
 800668c:	0112      	lsls	r2, r2, #4
 800668e:	4293      	cmp	r3, r2
 8006690:	d822      	bhi.n	80066d8 <UART_SetConfig+0x2bc>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <UART_SetConfig+0x284>
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	00d2      	lsls	r2, r2, #3
 800669a:	4293      	cmp	r3, r2
 800669c:	d00e      	beq.n	80066bc <UART_SetConfig+0x2a0>
 800669e:	e01b      	b.n	80066d8 <UART_SetConfig+0x2bc>
 80066a0:	231b      	movs	r3, #27
 80066a2:	2220      	movs	r2, #32
 80066a4:	189b      	adds	r3, r3, r2
 80066a6:	19db      	adds	r3, r3, r7
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	e07e      	b.n	80067ac <UART_SetConfig+0x390>
 80066ae:	231b      	movs	r3, #27
 80066b0:	2220      	movs	r2, #32
 80066b2:	189b      	adds	r3, r3, r2
 80066b4:	19db      	adds	r3, r3, r7
 80066b6:	2202      	movs	r2, #2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e077      	b.n	80067ac <UART_SetConfig+0x390>
 80066bc:	231b      	movs	r3, #27
 80066be:	2220      	movs	r2, #32
 80066c0:	189b      	adds	r3, r3, r2
 80066c2:	19db      	adds	r3, r3, r7
 80066c4:	2204      	movs	r2, #4
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	e070      	b.n	80067ac <UART_SetConfig+0x390>
 80066ca:	231b      	movs	r3, #27
 80066cc:	2220      	movs	r2, #32
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	19db      	adds	r3, r3, r7
 80066d2:	2208      	movs	r2, #8
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e069      	b.n	80067ac <UART_SetConfig+0x390>
 80066d8:	231b      	movs	r3, #27
 80066da:	2220      	movs	r2, #32
 80066dc:	189b      	adds	r3, r3, r2
 80066de:	19db      	adds	r3, r3, r7
 80066e0:	2210      	movs	r2, #16
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	e062      	b.n	80067ac <UART_SetConfig+0x390>
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <UART_SetConfig+0x344>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d157      	bne.n	80067a0 <UART_SetConfig+0x384>
 80066f0:	4b1e      	ldr	r3, [pc, #120]	; (800676c <UART_SetConfig+0x350>)
 80066f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f4:	23c0      	movs	r3, #192	; 0xc0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4013      	ands	r3, r2
 80066fa:	22c0      	movs	r2, #192	; 0xc0
 80066fc:	0092      	lsls	r2, r2, #2
 80066fe:	4293      	cmp	r3, r2
 8006700:	d040      	beq.n	8006784 <UART_SetConfig+0x368>
 8006702:	22c0      	movs	r2, #192	; 0xc0
 8006704:	0092      	lsls	r2, r2, #2
 8006706:	4293      	cmp	r3, r2
 8006708:	d843      	bhi.n	8006792 <UART_SetConfig+0x376>
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	0092      	lsls	r2, r2, #2
 800670e:	4293      	cmp	r3, r2
 8006710:	d011      	beq.n	8006736 <UART_SetConfig+0x31a>
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	0092      	lsls	r2, r2, #2
 8006716:	4293      	cmp	r3, r2
 8006718:	d83b      	bhi.n	8006792 <UART_SetConfig+0x376>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <UART_SetConfig+0x30c>
 800671e:	2280      	movs	r2, #128	; 0x80
 8006720:	0052      	lsls	r2, r2, #1
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <UART_SetConfig+0x328>
 8006726:	e034      	b.n	8006792 <UART_SetConfig+0x376>
 8006728:	231b      	movs	r3, #27
 800672a:	2220      	movs	r2, #32
 800672c:	189b      	adds	r3, r3, r2
 800672e:	19db      	adds	r3, r3, r7
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e03a      	b.n	80067ac <UART_SetConfig+0x390>
 8006736:	231b      	movs	r3, #27
 8006738:	2220      	movs	r2, #32
 800673a:	189b      	adds	r3, r3, r2
 800673c:	19db      	adds	r3, r3, r7
 800673e:	2202      	movs	r2, #2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	e033      	b.n	80067ac <UART_SetConfig+0x390>
 8006744:	231b      	movs	r3, #27
 8006746:	2220      	movs	r2, #32
 8006748:	189b      	adds	r3, r3, r2
 800674a:	19db      	adds	r3, r3, r7
 800674c:	2204      	movs	r2, #4
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e02c      	b.n	80067ac <UART_SetConfig+0x390>
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	cfff69f3 	.word	0xcfff69f3
 8006758:	ffffcfff 	.word	0xffffcfff
 800675c:	40008000 	.word	0x40008000
 8006760:	40008400 	.word	0x40008400
 8006764:	11fff4ff 	.word	0x11fff4ff
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	40004c00 	.word	0x40004c00
 800677c:	40005000 	.word	0x40005000
 8006780:	40013c00 	.word	0x40013c00
 8006784:	231b      	movs	r3, #27
 8006786:	2220      	movs	r2, #32
 8006788:	189b      	adds	r3, r3, r2
 800678a:	19db      	adds	r3, r3, r7
 800678c:	2208      	movs	r2, #8
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e00c      	b.n	80067ac <UART_SetConfig+0x390>
 8006792:	231b      	movs	r3, #27
 8006794:	2220      	movs	r2, #32
 8006796:	189b      	adds	r3, r3, r2
 8006798:	19db      	adds	r3, r3, r7
 800679a:	2210      	movs	r2, #16
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e005      	b.n	80067ac <UART_SetConfig+0x390>
 80067a0:	231b      	movs	r3, #27
 80067a2:	2220      	movs	r2, #32
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	19db      	adds	r3, r3, r7
 80067a8:	2210      	movs	r2, #16
 80067aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4ac1      	ldr	r2, [pc, #772]	; (8006ab8 <UART_SetConfig+0x69c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d005      	beq.n	80067c2 <UART_SetConfig+0x3a6>
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4ac0      	ldr	r2, [pc, #768]	; (8006abc <UART_SetConfig+0x6a0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d000      	beq.n	80067c2 <UART_SetConfig+0x3a6>
 80067c0:	e093      	b.n	80068ea <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c2:	231b      	movs	r3, #27
 80067c4:	2220      	movs	r2, #32
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d015      	beq.n	80067fc <UART_SetConfig+0x3e0>
 80067d0:	dc18      	bgt.n	8006804 <UART_SetConfig+0x3e8>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00d      	beq.n	80067f2 <UART_SetConfig+0x3d6>
 80067d6:	dc15      	bgt.n	8006804 <UART_SetConfig+0x3e8>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <UART_SetConfig+0x3c6>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d005      	beq.n	80067ec <UART_SetConfig+0x3d0>
 80067e0:	e010      	b.n	8006804 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e2:	f7fe f8b5 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 80067e6:	0003      	movs	r3, r0
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ea:	e014      	b.n	8006816 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ec:	4bb4      	ldr	r3, [pc, #720]	; (8006ac0 <UART_SetConfig+0x6a4>)
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f0:	e011      	b.n	8006816 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f2:	f7fe f821 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80067f6:	0003      	movs	r3, r0
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067fa:	e00c      	b.n	8006816 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006802:	e008      	b.n	8006816 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006808:	231a      	movs	r3, #26
 800680a:	2220      	movs	r2, #32
 800680c:	189b      	adds	r3, r3, r2
 800680e:	19db      	adds	r3, r3, r7
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
        break;
 8006814:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	2b00      	cmp	r3, #0
 800681a:	d100      	bne.n	800681e <UART_SetConfig+0x402>
 800681c:	e135      	b.n	8006a8a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006822:	4ba8      	ldr	r3, [pc, #672]	; (8006ac4 <UART_SetConfig+0x6a8>)
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	5ad3      	ldrh	r3, [r2, r3]
 8006828:	0019      	movs	r1, r3
 800682a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800682c:	f7f9 fc86 	bl	800013c <__udivsi3>
 8006830:	0003      	movs	r3, r0
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	0013      	movs	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	189b      	adds	r3, r3, r2
 800683e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006840:	429a      	cmp	r2, r3
 8006842:	d305      	bcc.n	8006850 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800684a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684c:	429a      	cmp	r2, r3
 800684e:	d906      	bls.n	800685e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006850:	231a      	movs	r3, #26
 8006852:	2220      	movs	r2, #32
 8006854:	189b      	adds	r3, r3, r2
 8006856:	19db      	adds	r3, r3, r7
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e044      	b.n	80068e8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800686a:	4b96      	ldr	r3, [pc, #600]	; (8006ac4 <UART_SetConfig+0x6a8>)
 800686c:	0052      	lsls	r2, r2, #1
 800686e:	5ad3      	ldrh	r3, [r2, r3]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	69b8      	ldr	r0, [r7, #24]
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	f7f9 fe11 	bl	80004a4 <__aeabi_uldivmod>
 8006882:	0002      	movs	r2, r0
 8006884:	000b      	movs	r3, r1
 8006886:	0e11      	lsrs	r1, r2, #24
 8006888:	021d      	lsls	r5, r3, #8
 800688a:	430d      	orrs	r5, r1
 800688c:	0214      	lsls	r4, r2, #8
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68b8      	ldr	r0, [r7, #8]
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	1900      	adds	r0, r0, r4
 80068a0:	4169      	adcs	r1, r5
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f7f9 fdf8 	bl	80004a4 <__aeabi_uldivmod>
 80068b4:	0002      	movs	r2, r0
 80068b6:	000b      	movs	r3, r1
 80068b8:	0013      	movs	r3, r2
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	23c0      	movs	r3, #192	; 0xc0
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d309      	bcc.n	80068da <UART_SetConfig+0x4be>
 80068c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	035b      	lsls	r3, r3, #13
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d204      	bcs.n	80068da <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e006      	b.n	80068e8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80068da:	231a      	movs	r3, #26
 80068dc:	2220      	movs	r2, #32
 80068de:	189b      	adds	r3, r3, r2
 80068e0:	19db      	adds	r3, r3, r7
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80068e6:	e0d0      	b.n	8006a8a <UART_SetConfig+0x66e>
 80068e8:	e0cf      	b.n	8006a8a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d000      	beq.n	80068f8 <UART_SetConfig+0x4dc>
 80068f6:	e070      	b.n	80069da <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80068f8:	231b      	movs	r3, #27
 80068fa:	2220      	movs	r2, #32
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	19db      	adds	r3, r3, r7
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b08      	cmp	r3, #8
 8006904:	d015      	beq.n	8006932 <UART_SetConfig+0x516>
 8006906:	dc18      	bgt.n	800693a <UART_SetConfig+0x51e>
 8006908:	2b04      	cmp	r3, #4
 800690a:	d00d      	beq.n	8006928 <UART_SetConfig+0x50c>
 800690c:	dc15      	bgt.n	800693a <UART_SetConfig+0x51e>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <UART_SetConfig+0x4fc>
 8006912:	2b02      	cmp	r3, #2
 8006914:	d005      	beq.n	8006922 <UART_SetConfig+0x506>
 8006916:	e010      	b.n	800693a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fe f81a 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 800691c:	0003      	movs	r3, r0
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006920:	e014      	b.n	800694c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006922:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <UART_SetConfig+0x6a4>)
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006926:	e011      	b.n	800694c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006928:	f7fd ff86 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 800692c:	0003      	movs	r3, r0
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006930:	e00c      	b.n	800694c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006938:	e008      	b.n	800694c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800693e:	231a      	movs	r3, #26
 8006940:	2220      	movs	r2, #32
 8006942:	189b      	adds	r3, r3, r2
 8006944:	19db      	adds	r3, r3, r7
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
        break;
 800694a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800694c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694e:	2b00      	cmp	r3, #0
 8006950:	d100      	bne.n	8006954 <UART_SetConfig+0x538>
 8006952:	e09a      	b.n	8006a8a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006958:	4b5a      	ldr	r3, [pc, #360]	; (8006ac4 <UART_SetConfig+0x6a8>)
 800695a:	0052      	lsls	r2, r2, #1
 800695c:	5ad3      	ldrh	r3, [r2, r3]
 800695e:	0019      	movs	r1, r3
 8006960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006962:	f7f9 fbeb 	bl	800013c <__udivsi3>
 8006966:	0003      	movs	r3, r0
 8006968:	005a      	lsls	r2, r3, #1
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	18d2      	adds	r2, r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	0019      	movs	r1, r3
 8006978:	0010      	movs	r0, r2
 800697a:	f7f9 fbdf 	bl	800013c <__udivsi3>
 800697e:	0003      	movs	r3, r0
 8006980:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2b0f      	cmp	r3, #15
 8006986:	d921      	bls.n	80069cc <UART_SetConfig+0x5b0>
 8006988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	025b      	lsls	r3, r3, #9
 800698e:	429a      	cmp	r2, r3
 8006990:	d21c      	bcs.n	80069cc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	b29a      	uxth	r2, r3
 8006996:	200e      	movs	r0, #14
 8006998:	2420      	movs	r4, #32
 800699a:	1903      	adds	r3, r0, r4
 800699c:	19db      	adds	r3, r3, r7
 800699e:	210f      	movs	r1, #15
 80069a0:	438a      	bics	r2, r1
 80069a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2207      	movs	r2, #7
 80069ac:	4013      	ands	r3, r2
 80069ae:	b299      	uxth	r1, r3
 80069b0:	1903      	adds	r3, r0, r4
 80069b2:	19db      	adds	r3, r3, r7
 80069b4:	1902      	adds	r2, r0, r4
 80069b6:	19d2      	adds	r2, r2, r7
 80069b8:	8812      	ldrh	r2, [r2, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	1902      	adds	r2, r0, r4
 80069c4:	19d2      	adds	r2, r2, r7
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	60da      	str	r2, [r3, #12]
 80069ca:	e05e      	b.n	8006a8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80069cc:	231a      	movs	r3, #26
 80069ce:	2220      	movs	r2, #32
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	19db      	adds	r3, r3, r7
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e057      	b.n	8006a8a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069da:	231b      	movs	r3, #27
 80069dc:	2220      	movs	r2, #32
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d015      	beq.n	8006a14 <UART_SetConfig+0x5f8>
 80069e8:	dc18      	bgt.n	8006a1c <UART_SetConfig+0x600>
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d00d      	beq.n	8006a0a <UART_SetConfig+0x5ee>
 80069ee:	dc15      	bgt.n	8006a1c <UART_SetConfig+0x600>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <UART_SetConfig+0x5de>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d005      	beq.n	8006a04 <UART_SetConfig+0x5e8>
 80069f8:	e010      	b.n	8006a1c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fa:	f7fd ffa9 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 80069fe:	0003      	movs	r3, r0
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a02:	e014      	b.n	8006a2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a04:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <UART_SetConfig+0x6a4>)
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a08:	e011      	b.n	8006a2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0a:	f7fd ff15 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a12:	e00c      	b.n	8006a2e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a1a:	e008      	b.n	8006a2e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006a20:	231a      	movs	r3, #26
 8006a22:	2220      	movs	r2, #32
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	19db      	adds	r3, r3, r7
 8006a28:	2201      	movs	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
        break;
 8006a2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d02a      	beq.n	8006a8a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a38:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <UART_SetConfig+0x6a8>)
 8006a3a:	0052      	lsls	r2, r2, #1
 8006a3c:	5ad3      	ldrh	r3, [r2, r3]
 8006a3e:	0019      	movs	r1, r3
 8006a40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a42:	f7f9 fb7b 	bl	800013c <__udivsi3>
 8006a46:	0003      	movs	r3, r0
 8006a48:	001a      	movs	r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	18d2      	adds	r2, r2, r3
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	0019      	movs	r1, r3
 8006a58:	0010      	movs	r0, r2
 8006a5a:	f7f9 fb6f 	bl	800013c <__udivsi3>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b0f      	cmp	r3, #15
 8006a66:	d90a      	bls.n	8006a7e <UART_SetConfig+0x662>
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	2380      	movs	r3, #128	; 0x80
 8006a6c:	025b      	lsls	r3, r3, #9
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d205      	bcs.n	8006a7e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7e:	231a      	movs	r3, #26
 8006a80:	2220      	movs	r2, #32
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	19db      	adds	r3, r3, r7
 8006a86:	2201      	movs	r2, #1
 8006a88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	226a      	movs	r2, #106	; 0x6a
 8006a8e:	2101      	movs	r1, #1
 8006a90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2268      	movs	r2, #104	; 0x68
 8006a96:	2101      	movs	r1, #1
 8006a98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006aa6:	231a      	movs	r3, #26
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	19db      	adds	r3, r3, r7
 8006aae:	781b      	ldrb	r3, [r3, #0]
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b010      	add	sp, #64	; 0x40
 8006ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ab8:	40008000 	.word	0x40008000
 8006abc:	40008400 	.word	0x40008400
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	0800f6b8 	.word	0x0800f6b8

08006ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a4a      	ldr	r2, [pc, #296]	; (8006c0c <UART_AdvFeatureConfig+0x144>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	2201      	movs	r2, #1
 8006af8:	4013      	ands	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4a43      	ldr	r2, [pc, #268]	; (8006c10 <UART_AdvFeatureConfig+0x148>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d00b      	beq.n	8006b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4a3b      	ldr	r2, [pc, #236]	; (8006c14 <UART_AdvFeatureConfig+0x14c>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	0019      	movs	r1, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <UART_AdvFeatureConfig+0x150>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d00b      	beq.n	8006b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <UART_AdvFeatureConfig+0x154>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	2220      	movs	r2, #32
 8006b80:	4013      	ands	r3, r2
 8006b82:	d00b      	beq.n	8006b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <UART_AdvFeatureConfig+0x158>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	0019      	movs	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	2240      	movs	r2, #64	; 0x40
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <UART_AdvFeatureConfig+0x15c>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	035b      	lsls	r3, r3, #13
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d10b      	bne.n	8006be2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <UART_AdvFeatureConfig+0x160>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	0019      	movs	r1, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	2280      	movs	r2, #128	; 0x80
 8006be8:	4013      	ands	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <UART_AdvFeatureConfig+0x164>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	0019      	movs	r1, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }
}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	ffff7fff 	.word	0xffff7fff
 8006c10:	fffdffff 	.word	0xfffdffff
 8006c14:	fffeffff 	.word	0xfffeffff
 8006c18:	fffbffff 	.word	0xfffbffff
 8006c1c:	ffffefff 	.word	0xffffefff
 8006c20:	ffffdfff 	.word	0xffffdfff
 8006c24:	ffefffff 	.word	0xffefffff
 8006c28:	ff9fffff 	.word	0xff9fffff
 8006c2c:	fff7ffff 	.word	0xfff7ffff

08006c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b092      	sub	sp, #72	; 0x48
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2290      	movs	r2, #144	; 0x90
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c40:	f7fc fdc2 	bl	80037c8 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d12d      	bne.n	8006cb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	2280      	movs	r2, #128	; 0x80
 8006c5a:	0391      	lsls	r1, r2, #14
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4a47      	ldr	r2, [pc, #284]	; (8006d7c <UART_CheckIdleState+0x14c>)
 8006c60:	9200      	str	r2, [sp, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f000 f88e 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006c68:	1e03      	subs	r3, r0, #0
 8006c6a:	d022      	beq.n	8006cb2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c76:	2301      	movs	r3, #1
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	f383 8810 	msr	PRIMASK, r3
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	438a      	bics	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2288      	movs	r2, #136	; 0x88
 8006ca2:	2120      	movs	r1, #32
 8006ca4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2284      	movs	r2, #132	; 0x84
 8006caa:	2100      	movs	r1, #0
 8006cac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e060      	b.n	8006d74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d146      	bne.n	8006d4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	03d1      	lsls	r1, r2, #15
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4a2c      	ldr	r2, [pc, #176]	; (8006d7c <UART_CheckIdleState+0x14c>)
 8006cca:	9200      	str	r2, [sp, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f000 f859 	bl	8006d84 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	1e03      	subs	r3, r0, #0
 8006cd4:	d03b      	beq.n	8006d4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cda:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4922      	ldr	r1, [pc, #136]	; (8006d80 <UART_CheckIdleState+0x150>)
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f383 8810 	msr	PRIMASK, r3
}
 8006d06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d08:	f3ef 8310 	mrs	r3, PRIMASK
 8006d0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2101      	movs	r1, #1
 8006d2a:	438a      	bics	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	228c      	movs	r2, #140	; 0x8c
 8006d3e:	2120      	movs	r1, #32
 8006d40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2284      	movs	r2, #132	; 0x84
 8006d46:	2100      	movs	r1, #0
 8006d48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e012      	b.n	8006d74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2288      	movs	r2, #136	; 0x88
 8006d52:	2120      	movs	r1, #32
 8006d54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	228c      	movs	r2, #140	; 0x8c
 8006d5a:	2120      	movs	r1, #32
 8006d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2284      	movs	r2, #132	; 0x84
 8006d6e:	2100      	movs	r1, #0
 8006d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b010      	add	sp, #64	; 0x40
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	01ffffff 	.word	0x01ffffff
 8006d80:	fffffedf 	.word	0xfffffedf

08006d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	1dfb      	adds	r3, r7, #7
 8006d92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d94:	e051      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	d04e      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9c:	f7fc fd14 	bl	80037c8 <HAL_GetTick>
 8006da0:	0002      	movs	r2, r0
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d302      	bcc.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e051      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d03b      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d038      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d035      	beq.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d111      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2208      	movs	r2, #8
 8006de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 f83c 	bl	8006e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2290      	movs	r2, #144	; 0x90
 8006df0:	2108      	movs	r1, #8
 8006df2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2284      	movs	r2, #132	; 0x84
 8006df8:	2100      	movs	r1, #0
 8006dfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e02c      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d112      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2280      	movs	r2, #128	; 0x80
 8006e1a:	0112      	lsls	r2, r2, #4
 8006e1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f81f 	bl	8006e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2290      	movs	r2, #144	; 0x90
 8006e2a:	2120      	movs	r1, #32
 8006e2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2284      	movs	r2, #132	; 0x84
 8006e32:	2100      	movs	r1, #0
 8006e34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e00f      	b.n	8006e5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	4013      	ands	r3, r2
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	425a      	negs	r2, r3
 8006e4a:	4153      	adcs	r3, r2
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	001a      	movs	r2, r3
 8006e50:	1dfb      	adds	r3, r7, #7
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d09e      	beq.n	8006d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08e      	sub	sp, #56	; 0x38
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e70:	617b      	str	r3, [r7, #20]
  return(result);
 8006e72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
 8006e76:	2301      	movs	r3, #1
 8006e78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f383 8810 	msr	PRIMASK, r3
}
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4926      	ldr	r1, [pc, #152]	; (8006f28 <UART_EndRxTransfer+0xc4>)
 8006e8e:	400a      	ands	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f383 8810 	msr	PRIMASK, r3
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	f383 8810 	msr	PRIMASK, r3
}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	491b      	ldr	r1, [pc, #108]	; (8006f2c <UART_EndRxTransfer+0xc8>)
 8006ec0:	400a      	ands	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f383 8810 	msr	PRIMASK, r3
}
 8006ece:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d118      	bne.n	8006f0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8006edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ede:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f383 8810 	msr	PRIMASK, r3
}
 8006eec:	46c0      	nop			; (mov r8, r8)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2110      	movs	r1, #16
 8006efa:	438a      	bics	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f383 8810 	msr	PRIMASK, r3
}
 8006f08:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	228c      	movs	r2, #140	; 0x8c
 8006f0e:	2120      	movs	r1, #32
 8006f10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b00e      	add	sp, #56	; 0x38
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	fffffedf 	.word	0xfffffedf
 8006f2c:	effffffe 	.word	0xeffffffe

08006f30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2284      	movs	r2, #132	; 0x84
 8006f3c:	5c9b      	ldrb	r3, [r3, r2]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e027      	b.n	8006f96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2284      	movs	r2, #132	; 0x84
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2288      	movs	r2, #136	; 0x88
 8006f52:	2124      	movs	r1, #36	; 0x24
 8006f54:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2101      	movs	r1, #1
 8006f6a:	438a      	bics	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a0b      	ldr	r2, [pc, #44]	; (8006fa0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2288      	movs	r2, #136	; 0x88
 8006f88:	2120      	movs	r1, #32
 8006f8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2284      	movs	r2, #132	; 0x84
 8006f90:	2100      	movs	r1, #0
 8006f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	0018      	movs	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b004      	add	sp, #16
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	dfffffff 	.word	0xdfffffff

08006fa4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2284      	movs	r2, #132	; 0x84
 8006fb2:	5c9b      	ldrb	r3, [r3, r2]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e02e      	b.n	800701a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2284      	movs	r2, #132	; 0x84
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2288      	movs	r2, #136	; 0x88
 8006fc8:	2124      	movs	r1, #36	; 0x24
 8006fca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	08d9      	lsrs	r1, r3, #3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 f854 	bl	80070a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2288      	movs	r2, #136	; 0x88
 800700c:	2120      	movs	r1, #32
 800700e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2284      	movs	r2, #132	; 0x84
 8007014:	2100      	movs	r1, #0
 8007016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b004      	add	sp, #16
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2284      	movs	r2, #132	; 0x84
 8007032:	5c9b      	ldrb	r3, [r3, r2]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e02f      	b.n	800709c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2284      	movs	r2, #132	; 0x84
 8007040:	2101      	movs	r1, #1
 8007042:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2288      	movs	r2, #136	; 0x88
 8007048:	2124      	movs	r1, #36	; 0x24
 800704a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2101      	movs	r1, #1
 8007060:	438a      	bics	r2, r1
 8007062:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	4a0e      	ldr	r2, [pc, #56]	; (80070a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800706c:	4013      	ands	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0018      	movs	r0, r3
 800707e:	f000 f813 	bl	80070a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2288      	movs	r2, #136	; 0x88
 800708e:	2120      	movs	r1, #32
 8007090:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2284      	movs	r2, #132	; 0x84
 8007096:	2100      	movs	r1, #0
 8007098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	0018      	movs	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	b004      	add	sp, #16
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	f1ffffff 	.word	0xf1ffffff

080070a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d108      	bne.n	80070ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	226a      	movs	r2, #106	; 0x6a
 80070bc:	2101      	movs	r1, #1
 80070be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2268      	movs	r2, #104	; 0x68
 80070c4:	2101      	movs	r1, #1
 80070c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070c8:	e043      	b.n	8007152 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070ca:	260f      	movs	r6, #15
 80070cc:	19bb      	adds	r3, r7, r6
 80070ce:	2208      	movs	r2, #8
 80070d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070d2:	200e      	movs	r0, #14
 80070d4:	183b      	adds	r3, r7, r0
 80070d6:	2208      	movs	r2, #8
 80070d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	0e5b      	lsrs	r3, r3, #25
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	240d      	movs	r4, #13
 80070e6:	193b      	adds	r3, r7, r4
 80070e8:	2107      	movs	r1, #7
 80070ea:	400a      	ands	r2, r1
 80070ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	0f5b      	lsrs	r3, r3, #29
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	250c      	movs	r5, #12
 80070fa:	197b      	adds	r3, r7, r5
 80070fc:	2107      	movs	r1, #7
 80070fe:	400a      	ands	r2, r1
 8007100:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007102:	183b      	adds	r3, r7, r0
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	197a      	adds	r2, r7, r5
 8007108:	7812      	ldrb	r2, [r2, #0]
 800710a:	4914      	ldr	r1, [pc, #80]	; (800715c <UARTEx_SetNbDataToProcess+0xb4>)
 800710c:	5c8a      	ldrb	r2, [r1, r2]
 800710e:	435a      	muls	r2, r3
 8007110:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007112:	197b      	adds	r3, r7, r5
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <UARTEx_SetNbDataToProcess+0xb8>)
 8007118:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800711a:	0019      	movs	r1, r3
 800711c:	f7f9 f898 	bl	8000250 <__divsi3>
 8007120:	0003      	movs	r3, r0
 8007122:	b299      	uxth	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	226a      	movs	r2, #106	; 0x6a
 8007128:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800712a:	19bb      	adds	r3, r7, r6
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	193a      	adds	r2, r7, r4
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	490a      	ldr	r1, [pc, #40]	; (800715c <UARTEx_SetNbDataToProcess+0xb4>)
 8007134:	5c8a      	ldrb	r2, [r1, r2]
 8007136:	435a      	muls	r2, r3
 8007138:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800713a:	193b      	adds	r3, r7, r4
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <UARTEx_SetNbDataToProcess+0xb8>)
 8007140:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007142:	0019      	movs	r1, r3
 8007144:	f7f9 f884 	bl	8000250 <__divsi3>
 8007148:	0003      	movs	r3, r0
 800714a:	b299      	uxth	r1, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2268      	movs	r2, #104	; 0x68
 8007150:	5299      	strh	r1, [r3, r2]
}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b005      	add	sp, #20
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	0800f6d0 	.word	0x0800f6d0
 8007160:	0800f6d8 	.word	0x0800f6d8

08007164 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8007164:	b5b0      	push	{r4, r5, r7, lr}
 8007166:	b0c4      	sub	sp, #272	; 0x110
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800716c:	2387      	movs	r3, #135	; 0x87
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8007176:	2308      	movs	r3, #8
 8007178:	33ff      	adds	r3, #255	; 0xff
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8007180:	1dfb      	adds	r3, r7, #7
 8007182:	33ff      	adds	r3, #255	; 0xff
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8007188:	2310      	movs	r3, #16
 800718a:	33ff      	adds	r3, #255	; 0xff
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8007192:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <my_gnss_acq_coordinates+0x11c>)
 8007194:	2288      	movs	r2, #136	; 0x88
 8007196:	0052      	lsls	r2, r2, #1
 8007198:	189b      	adds	r3, r3, r2
 800719a:	19db      	adds	r3, r3, r7
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	3304      	adds	r3, #4
 80071a2:	22f6      	movs	r2, #246	; 0xf6
 80071a4:	2100      	movs	r1, #0
 80071a6:	0018      	movs	r0, r3
 80071a8:	f001 fc3a 	bl	8008a20 <memset>

	char* 		nmea_gsv_label = "GSV" ;
 80071ac:	4b35      	ldr	r3, [pc, #212]	; (8007284 <my_gnss_acq_coordinates+0x120>)
 80071ae:	2284      	movs	r2, #132	; 0x84
 80071b0:	0052      	lsls	r2, r2, #1
 80071b2:	18ba      	adds	r2, r7, r2
 80071b4:	6013      	str	r3, [r2, #0]

	while ( tim_seconds < fix_acq_ths )
 80071b6:	e052      	b.n	800725e <my_gnss_acq_coordinates+0xfa>
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 80071b8:	2408      	movs	r4, #8
 80071ba:	34ff      	adds	r4, #255	; 0xff
 80071bc:	193b      	adds	r3, r7, r4
 80071be:	2100      	movs	r1, #0
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7fb fe81 	bl	8002ec8 <my_gnss_receive_byte>
		if ( rx_byte )
 80071c6:	0020      	movs	r0, r4
 80071c8:	183b      	adds	r3, r7, r0
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2410      	movs	r4, #16
 80071ce:	34ff      	adds	r4, #255	; 0xff
 80071d0:	193a      	adds	r2, r7, r4
 80071d2:	1939      	adds	r1, r7, r4
 80071d4:	7809      	ldrb	r1, [r1, #0]
 80071d6:	7011      	strb	r1, [r2, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d040      	beq.n	800725e <my_gnss_acq_coordinates+0xfa>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 80071dc:	1dfa      	adds	r2, r7, #7
 80071de:	32ff      	adds	r2, #255	; 0xff
 80071e0:	250c      	movs	r5, #12
 80071e2:	1979      	adds	r1, r7, r5
 80071e4:	183b      	adds	r3, r7, r0
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 f8d9 	bl	800739e <my_nmea_message>
 80071ec:	0001      	movs	r1, r0
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	193a      	adds	r2, r7, r4
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	2902      	cmp	r1, #2
 80071f8:	d131      	bne.n	800725e <my_gnss_acq_coordinates+0xfa>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80071fa:	197b      	adds	r3, r7, r5
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 f93a 	bl	8007476 <is_my_nmea_checksum_ok>
 8007202:	0003      	movs	r3, r0
 8007204:	0019      	movs	r1, r3
 8007206:	193b      	adds	r3, r7, r4
 8007208:	193a      	adds	r2, r7, r4
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	2900      	cmp	r1, #0
 8007210:	d025      	beq.n	800725e <my_gnss_acq_coordinates+0xfa>
				{
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS )
 8007212:	2384      	movs	r3, #132	; 0x84
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	197b      	adds	r3, r7, r5
 800721c:	0011      	movs	r1, r2
 800721e:	0018      	movs	r0, r3
 8007220:	f001 fc2b 	bl	8008a7a <strstr>
 8007224:	0001      	movs	r1, r0
 8007226:	193b      	adds	r3, r7, r4
 8007228:	193a      	adds	r2, r7, r4
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	2900      	cmp	r1, #0
 8007230:	d015      	beq.n	800725e <my_gnss_acq_coordinates+0xfa>
 8007232:	193b      	adds	r3, r7, r4
 8007234:	193a      	adds	r2, r7, r4
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	193b      	adds	r3, r7, r4
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d80d      	bhi.n	800725e <my_gnss_acq_coordinates+0xfa>
					{
						if ( tim_seconds > min_tns_time_ths )
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <my_gnss_acq_coordinates+0x124>)
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <my_gnss_acq_coordinates+0x128>)
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d80e      	bhi.n	800726c <my_gnss_acq_coordinates+0x108>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800724e:	197b      	adds	r3, r7, r5
 8007250:	0018      	movs	r0, r3
 8007252:	f000 f95b 	bl	800750c <my_nmea_get_gsv_tns>
 8007256:	0003      	movs	r3, r0
 8007258:	001a      	movs	r2, r3
 800725a:	193b      	adds	r3, r7, r4
 800725c:	701a      	strb	r2, [r3, #0]
	while ( tim_seconds < fix_acq_ths )
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <my_gnss_acq_coordinates+0x124>)
 8007260:	881a      	ldrh	r2, [r3, #0]
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <my_gnss_acq_coordinates+0x12c>)
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d3a6      	bcc.n	80071b8 <my_gnss_acq_coordinates+0x54>
 800726a:	e000      	b.n	800726e <my_gnss_acq_coordinates+0x10a>
							break ;
 800726c:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	return r ;
 800726e:	2387      	movs	r3, #135	; 0x87
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	781b      	ldrb	r3, [r3, #0]
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b044      	add	sp, #272	; 0x110
 800727c:	bdb0      	pop	{r4, r5, r7, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	fffffefc 	.word	0xfffffefc
 8007284:	0800f568 	.word	0x0800f568
 8007288:	20000a40 	.word	0x20000a40
 800728c:	20000010 	.word	0x20000010
 8007290:	2000000e 	.word	0x2000000e

08007294 <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	b08d      	sub	sp, #52	; 0x34
 8007298:	af04      	add	r7, sp, #16
 800729a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800729c:	2508      	movs	r5, #8
 800729e:	1979      	adds	r1, r7, r5
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <my_rtc_get_dt_s+0x7c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	0018      	movs	r0, r3
 80072a6:	f7fd feef 	bl	8005088 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80072aa:	241c      	movs	r4, #28
 80072ac:	1939      	adds	r1, r7, r4
 80072ae:	4b18      	ldr	r3, [pc, #96]	; (8007310 <my_rtc_get_dt_s+0x7c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7fd ffd6 	bl	8005264 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 80072b8:	0021      	movs	r1, r4
 80072ba:	187b      	adds	r3, r7, r1
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	22fa      	movs	r2, #250	; 0xfa
 80072c0:	00d2      	lsls	r2, r2, #3
 80072c2:	189a      	adds	r2, r3, r2
 80072c4:	187b      	adds	r3, r7, r1
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	469c      	mov	ip, r3
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	789b      	ldrb	r3, [r3, #2]
 80072ce:	001c      	movs	r4, r3
 80072d0:	0028      	movs	r0, r5
 80072d2:	183b      	adds	r3, r7, r0
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	001d      	movs	r5, r3
 80072d8:	183b      	adds	r3, r7, r0
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	001e      	movs	r6, r3
 80072de:	183b      	adds	r3, r7, r0
 80072e0:	789b      	ldrb	r3, [r3, #2]
 80072e2:	490c      	ldr	r1, [pc, #48]	; (8007314 <my_rtc_get_dt_s+0x80>)
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9602      	str	r6, [sp, #8]
 80072ea:	9501      	str	r5, [sp, #4]
 80072ec:	9400      	str	r4, [sp, #0]
 80072ee:	4663      	mov	r3, ip
 80072f0:	f001 fb00 	bl	80088f4 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 80072f4:	211c      	movs	r1, #28
 80072f6:	187b      	adds	r3, r7, r1
 80072f8:	78db      	ldrb	r3, [r3, #3]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	22fa      	movs	r2, #250	; 0xfa
 80072fe:	00d2      	lsls	r2, r2, #3
 8007300:	4694      	mov	ip, r2
 8007302:	4463      	add	r3, ip
 8007304:	b29b      	uxth	r3, r3
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b009      	add	sp, #36	; 0x24
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	200006e4 	.word	0x200006e4
 8007314:	0800f5b8 	.word	0x0800f5b8

08007318 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	0008      	movs	r0, r1
 8007322:	0011      	movs	r1, r2
 8007324:	1cfb      	adds	r3, r7, #3
 8007326:	1c02      	adds	r2, r0, #0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	1cbb      	adds	r3, r7, #2
 800732c:	1c0a      	adds	r2, r1, #0
 800732e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8007330:	230f      	movs	r3, #15
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8007338:	230e      	movs	r3, #14
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8007340:	e01c      	b.n	800737c <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8007342:	230f      	movs	r3, #15
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	18d3      	adds	r3, r2, r3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	1cfa      	adds	r2, r7, #3
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d105      	bne.n	8007362 <my_find_char_position+0x4a>
			p++ ;
 8007356:	210e      	movs	r1, #14
 8007358:	187b      	adds	r3, r7, r1
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	187b      	adds	r3, r7, r1
 800735e:	3201      	adds	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8007362:	230e      	movs	r3, #14
 8007364:	18fa      	adds	r2, r7, r3
 8007366:	1cbb      	adds	r3, r7, #2
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d00e      	beq.n	800738e <my_find_char_position+0x76>
			break ;
		i++ ;
 8007370:	210f      	movs	r1, #15
 8007372:	187b      	adds	r3, r7, r1
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	187b      	adds	r3, r7, r1
 8007378:	3201      	adds	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800737c:	230f      	movs	r3, #15
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	18d3      	adds	r3, r2, r3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1da      	bne.n	8007342 <my_find_char_position+0x2a>
 800738c:	e000      	b.n	8007390 <my_find_char_position+0x78>
			break ;
 800738e:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8007390:	230f      	movs	r3, #15
 8007392:	18fb      	adds	r3, r7, r3
 8007394:	781b      	ldrb	r3, [r3, #0]
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b004      	add	sp, #16
 800739c:	bd80      	pop	{r7, pc}

0800739e <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b24      	cmp	r3, #36	; 0x24
 80073b0:	d117      	bne.n	80073e2 <my_nmea_message+0x44>
    {
        *i = 0 ;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	b2d1      	uxtb	r1, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	7011      	strb	r1, [r2, #0]
 80073c4:	001a      	movs	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	001a      	movs	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	189b      	adds	r3, r3, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
        return 0 ;
 80073de:	2300      	movs	r3, #0
 80073e0:	e045      	b.n	800746e <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b1f      	cmp	r3, #31
 80073e8:	d907      	bls.n	80073fa <my_nmea_message+0x5c>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b7e      	cmp	r3, #126	; 0x7e
 80073f0:	d803      	bhi.n	80073fa <my_nmea_message+0x5c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <my_nmea_message+0x64>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b0d      	cmp	r3, #13
 8007400:	d114      	bne.n	800742c <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	b2d1      	uxtb	r1, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	7011      	strb	r1, [r2, #0]
 800740e:	001a      	movs	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	189b      	adds	r3, r3, r2
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	001a      	movs	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	189b      	adds	r3, r3, r2
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8007428:	2301      	movs	r3, #1
 800742a:	e020      	b.n	800746e <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b0a      	cmp	r3, #10
 8007432:	d11a      	bne.n	800746a <my_nmea_message+0xcc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d916      	bls.n	800746a <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	3b01      	subs	r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	001a      	movs	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	189b      	adds	r3, r3, r2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b0d      	cmp	r3, #13
 8007456:	d108      	bne.n	800746a <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	001a      	movs	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	189b      	adds	r3, r3, r2
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8007466:	2302      	movs	r3, #2
 8007468:	e001      	b.n	800746e <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800746a:	2301      	movs	r3, #1
 800746c:	425b      	negs	r3, r3
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b004      	add	sp, #16
 8007474:	bd80      	pop	{r7, pc}

08007476 <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 8007476:	b590      	push	{r4, r7, lr}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800747e:	230f      	movs	r3, #15
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8007486:	230e      	movs	r3, #14
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800748e:	e00f      	b.n	80074b0 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8007490:	220e      	movs	r2, #14
 8007492:	18bb      	adds	r3, r7, r2
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	18ba      	adds	r2, r7, r2
 8007498:	1c59      	adds	r1, r3, #1
 800749a:	7011      	strb	r1, [r2, #0]
 800749c:	001a      	movs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	189b      	adds	r3, r3, r2
 80074a2:	7819      	ldrb	r1, [r3, #0]
 80074a4:	220f      	movs	r2, #15
 80074a6:	18bb      	adds	r3, r7, r2
 80074a8:	18ba      	adds	r2, r7, r2
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	404a      	eors	r2, r1
 80074ae:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 80074b0:	210e      	movs	r1, #14
 80074b2:	187b      	adds	r3, r7, r1
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	18d3      	adds	r3, r2, r3
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b2a      	cmp	r3, #42	; 0x2a
 80074be:	d00a      	beq.n	80074d6 <is_my_nmea_checksum_ok+0x60>
 80074c0:	187b      	adds	r3, r7, r1
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	18d3      	adds	r3, r2, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <is_my_nmea_checksum_ok+0x60>
 80074ce:	187b      	adds	r3, r7, r1
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1dc      	bne.n	8007490 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 80074d6:	230f      	movs	r3, #15
 80074d8:	18fb      	adds	r3, r7, r3
 80074da:	781c      	ldrb	r4, [r3, #0]
 80074dc:	210e      	movs	r1, #14
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	187a      	adds	r2, r7, r1
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	3201      	adds	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	187b      	adds	r3, r7, r1
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	18d3      	adds	r3, r2, r3
 80074f0:	2210      	movs	r2, #16
 80074f2:	2100      	movs	r1, #0
 80074f4:	0018      	movs	r0, r3
 80074f6:	f001 f92d 	bl	8008754 <strtol>
 80074fa:	0003      	movs	r3, r0
 80074fc:	1ae3      	subs	r3, r4, r3
 80074fe:	425a      	negs	r2, r3
 8007500:	4153      	adcs	r3, r2
 8007502:	b2db      	uxtb	r3, r3
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b005      	add	sp, #20
 800750a:	bd90      	pop	{r4, r7, pc}

0800750c <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800750c:	b5b0      	push	{r4, r5, r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 8007514:	240e      	movs	r4, #14
 8007516:	193b      	adds	r3, r7, r4
 8007518:	2200      	movs	r2, #0
 800751a:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2203      	movs	r2, #3
 8007520:	212c      	movs	r1, #44	; 0x2c
 8007522:	0018      	movs	r0, r3
 8007524:	f7ff fef8 	bl	8007318 <my_find_char_position>
 8007528:	0003      	movs	r3, r0
 800752a:	001a      	movs	r2, r3
 800752c:	2517      	movs	r5, #23
 800752e:	197b      	adds	r3, r7, r5
 8007530:	3201      	adds	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007534:	2003      	movs	r0, #3
 8007536:	f000 f821 	bl	800757c <malloc>
 800753a:	0003      	movs	r3, r0
 800753c:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800753e:	197b      	adds	r3, r7, r5
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	18d1      	adds	r1, r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2202      	movs	r2, #2
 800754a:	0018      	movs	r0, r3
 800754c:	f001 fa81 	bl	8008a52 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	3302      	adds	r3, #2
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 8007558:	193a      	adds	r2, r7, r4
 800755a:	4907      	ldr	r1, [pc, #28]	; (8007578 <my_nmea_get_gsv_tns+0x6c>)
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	0018      	movs	r0, r3
 8007560:	f001 f9e8 	bl	8008934 <sscanf>
	free ( s ) ;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	0018      	movs	r0, r3
 8007568:	f000 f812 	bl	8007590 <free>
	return tns ;
 800756c:	193b      	adds	r3, r7, r4
 800756e:	881b      	ldrh	r3, [r3, #0]
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b006      	add	sp, #24
 8007576:	bdb0      	pop	{r4, r5, r7, pc}
 8007578:	0800f610 	.word	0x0800f610

0800757c <malloc>:
 800757c:	b510      	push	{r4, lr}
 800757e:	4b03      	ldr	r3, [pc, #12]	; (800758c <malloc+0x10>)
 8007580:	0001      	movs	r1, r0
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	f000 f80e 	bl	80075a4 <_malloc_r>
 8007588:	bd10      	pop	{r4, pc}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	200006c0 	.word	0x200006c0

08007590 <free>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <free+0x10>)
 8007594:	0001      	movs	r1, r0
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	f001 fba2 	bl	8008ce0 <_free_r>
 800759c:	bd10      	pop	{r4, pc}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	200006c0 	.word	0x200006c0

080075a4 <_malloc_r>:
 80075a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a6:	000d      	movs	r5, r1
 80075a8:	b087      	sub	sp, #28
 80075aa:	350b      	adds	r5, #11
 80075ac:	9001      	str	r0, [sp, #4]
 80075ae:	2d16      	cmp	r5, #22
 80075b0:	d908      	bls.n	80075c4 <_malloc_r+0x20>
 80075b2:	2207      	movs	r2, #7
 80075b4:	4395      	bics	r5, r2
 80075b6:	d506      	bpl.n	80075c6 <_malloc_r+0x22>
 80075b8:	230c      	movs	r3, #12
 80075ba:	9a01      	ldr	r2, [sp, #4]
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	2000      	movs	r0, #0
 80075c0:	b007      	add	sp, #28
 80075c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c4:	2510      	movs	r5, #16
 80075c6:	42a9      	cmp	r1, r5
 80075c8:	d8f6      	bhi.n	80075b8 <_malloc_r+0x14>
 80075ca:	9801      	ldr	r0, [sp, #4]
 80075cc:	f000 f9fe 	bl	80079cc <__malloc_lock>
 80075d0:	23fc      	movs	r3, #252	; 0xfc
 80075d2:	4ebe      	ldr	r6, [pc, #760]	; (80078cc <_malloc_r+0x328>)
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	429d      	cmp	r5, r3
 80075d8:	d219      	bcs.n	800760e <_malloc_r+0x6a>
 80075da:	002a      	movs	r2, r5
 80075dc:	3208      	adds	r2, #8
 80075de:	18b2      	adds	r2, r6, r2
 80075e0:	0011      	movs	r1, r2
 80075e2:	6854      	ldr	r4, [r2, #4]
 80075e4:	3908      	subs	r1, #8
 80075e6:	08eb      	lsrs	r3, r5, #3
 80075e8:	428c      	cmp	r4, r1
 80075ea:	d103      	bne.n	80075f4 <_malloc_r+0x50>
 80075ec:	68d4      	ldr	r4, [r2, #12]
 80075ee:	3302      	adds	r3, #2
 80075f0:	42a2      	cmp	r2, r4
 80075f2:	d022      	beq.n	800763a <_malloc_r+0x96>
 80075f4:	2203      	movs	r2, #3
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	68a1      	ldr	r1, [r4, #8]
 80075fa:	4393      	bics	r3, r2
 80075fc:	68e2      	ldr	r2, [r4, #12]
 80075fe:	18e3      	adds	r3, r4, r3
 8007600:	60ca      	str	r2, [r1, #12]
 8007602:	6091      	str	r1, [r2, #8]
 8007604:	2201      	movs	r2, #1
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	e02a      	b.n	8007664 <_malloc_r+0xc0>
 800760e:	233f      	movs	r3, #63	; 0x3f
 8007610:	0a6a      	lsrs	r2, r5, #9
 8007612:	d003      	beq.n	800761c <_malloc_r+0x78>
 8007614:	2a04      	cmp	r2, #4
 8007616:	d82b      	bhi.n	8007670 <_malloc_r+0xcc>
 8007618:	09ab      	lsrs	r3, r5, #6
 800761a:	3338      	adds	r3, #56	; 0x38
 800761c:	2203      	movs	r2, #3
 800761e:	4694      	mov	ip, r2
 8007620:	00d9      	lsls	r1, r3, #3
 8007622:	1989      	adds	r1, r1, r6
 8007624:	68cc      	ldr	r4, [r1, #12]
 8007626:	428c      	cmp	r4, r1
 8007628:	d006      	beq.n	8007638 <_malloc_r+0x94>
 800762a:	4660      	mov	r0, ip
 800762c:	6862      	ldr	r2, [r4, #4]
 800762e:	4382      	bics	r2, r0
 8007630:	1b57      	subs	r7, r2, r5
 8007632:	2f0f      	cmp	r7, #15
 8007634:	dd34      	ble.n	80076a0 <_malloc_r+0xfc>
 8007636:	3b01      	subs	r3, #1
 8007638:	3301      	adds	r3, #1
 800763a:	6934      	ldr	r4, [r6, #16]
 800763c:	49a4      	ldr	r1, [pc, #656]	; (80078d0 <_malloc_r+0x32c>)
 800763e:	428c      	cmp	r4, r1
 8007640:	d055      	beq.n	80076ee <_malloc_r+0x14a>
 8007642:	2003      	movs	r0, #3
 8007644:	6862      	ldr	r2, [r4, #4]
 8007646:	4382      	bics	r2, r0
 8007648:	1b50      	subs	r0, r2, r5
 800764a:	280f      	cmp	r0, #15
 800764c:	dd36      	ble.n	80076bc <_malloc_r+0x118>
 800764e:	2301      	movs	r3, #1
 8007650:	1967      	adds	r7, r4, r5
 8007652:	431d      	orrs	r5, r3
 8007654:	4303      	orrs	r3, r0
 8007656:	6065      	str	r5, [r4, #4]
 8007658:	6177      	str	r7, [r6, #20]
 800765a:	6137      	str	r7, [r6, #16]
 800765c:	60f9      	str	r1, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	50a0      	str	r0, [r4, r2]
 8007664:	9801      	ldr	r0, [sp, #4]
 8007666:	f000 f9b9 	bl	80079dc <__malloc_unlock>
 800766a:	0020      	movs	r0, r4
 800766c:	3008      	adds	r0, #8
 800766e:	e7a7      	b.n	80075c0 <_malloc_r+0x1c>
 8007670:	2a14      	cmp	r2, #20
 8007672:	d802      	bhi.n	800767a <_malloc_r+0xd6>
 8007674:	0013      	movs	r3, r2
 8007676:	335b      	adds	r3, #91	; 0x5b
 8007678:	e7d0      	b.n	800761c <_malloc_r+0x78>
 800767a:	2a54      	cmp	r2, #84	; 0x54
 800767c:	d802      	bhi.n	8007684 <_malloc_r+0xe0>
 800767e:	0b2b      	lsrs	r3, r5, #12
 8007680:	336e      	adds	r3, #110	; 0x6e
 8007682:	e7cb      	b.n	800761c <_malloc_r+0x78>
 8007684:	23aa      	movs	r3, #170	; 0xaa
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	429a      	cmp	r2, r3
 800768a:	d802      	bhi.n	8007692 <_malloc_r+0xee>
 800768c:	0beb      	lsrs	r3, r5, #15
 800768e:	3377      	adds	r3, #119	; 0x77
 8007690:	e7c4      	b.n	800761c <_malloc_r+0x78>
 8007692:	4990      	ldr	r1, [pc, #576]	; (80078d4 <_malloc_r+0x330>)
 8007694:	237e      	movs	r3, #126	; 0x7e
 8007696:	428a      	cmp	r2, r1
 8007698:	d8c0      	bhi.n	800761c <_malloc_r+0x78>
 800769a:	0cab      	lsrs	r3, r5, #18
 800769c:	337c      	adds	r3, #124	; 0x7c
 800769e:	e7bd      	b.n	800761c <_malloc_r+0x78>
 80076a0:	68e0      	ldr	r0, [r4, #12]
 80076a2:	2f00      	cmp	r7, #0
 80076a4:	db08      	blt.n	80076b8 <_malloc_r+0x114>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	60d8      	str	r0, [r3, #12]
 80076aa:	6083      	str	r3, [r0, #8]
 80076ac:	2301      	movs	r3, #1
 80076ae:	18a2      	adds	r2, r4, r2
 80076b0:	6851      	ldr	r1, [r2, #4]
 80076b2:	430b      	orrs	r3, r1
 80076b4:	6053      	str	r3, [r2, #4]
 80076b6:	e7d5      	b.n	8007664 <_malloc_r+0xc0>
 80076b8:	0004      	movs	r4, r0
 80076ba:	e7b4      	b.n	8007626 <_malloc_r+0x82>
 80076bc:	6171      	str	r1, [r6, #20]
 80076be:	6131      	str	r1, [r6, #16]
 80076c0:	2800      	cmp	r0, #0
 80076c2:	daf3      	bge.n	80076ac <_malloc_r+0x108>
 80076c4:	6871      	ldr	r1, [r6, #4]
 80076c6:	468c      	mov	ip, r1
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	0089      	lsls	r1, r1, #2
 80076cc:	428a      	cmp	r2, r1
 80076ce:	d300      	bcc.n	80076d2 <_malloc_r+0x12e>
 80076d0:	e08c      	b.n	80077ec <_malloc_r+0x248>
 80076d2:	08d1      	lsrs	r1, r2, #3
 80076d4:	0950      	lsrs	r0, r2, #5
 80076d6:	2201      	movs	r2, #1
 80076d8:	4082      	lsls	r2, r0
 80076da:	4660      	mov	r0, ip
 80076dc:	4302      	orrs	r2, r0
 80076de:	6072      	str	r2, [r6, #4]
 80076e0:	00ca      	lsls	r2, r1, #3
 80076e2:	1992      	adds	r2, r2, r6
 80076e4:	6891      	ldr	r1, [r2, #8]
 80076e6:	60e2      	str	r2, [r4, #12]
 80076e8:	60a1      	str	r1, [r4, #8]
 80076ea:	6094      	str	r4, [r2, #8]
 80076ec:	60cc      	str	r4, [r1, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	4876      	ldr	r0, [pc, #472]	; (80078cc <_malloc_r+0x328>)
 80076f2:	1099      	asrs	r1, r3, #2
 80076f4:	408a      	lsls	r2, r1
 80076f6:	6841      	ldr	r1, [r0, #4]
 80076f8:	4291      	cmp	r1, r2
 80076fa:	d328      	bcc.n	800774e <_malloc_r+0x1aa>
 80076fc:	420a      	tst	r2, r1
 80076fe:	d105      	bne.n	800770c <_malloc_r+0x168>
 8007700:	2403      	movs	r4, #3
 8007702:	43a3      	bics	r3, r4
 8007704:	0052      	lsls	r2, r2, #1
 8007706:	3304      	adds	r3, #4
 8007708:	420a      	tst	r2, r1
 800770a:	d0fb      	beq.n	8007704 <_malloc_r+0x160>
 800770c:	496f      	ldr	r1, [pc, #444]	; (80078cc <_malloc_r+0x328>)
 800770e:	9104      	str	r1, [sp, #16]
 8007710:	00d9      	lsls	r1, r3, #3
 8007712:	1841      	adds	r1, r0, r1
 8007714:	468c      	mov	ip, r1
 8007716:	000f      	movs	r7, r1
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	68fc      	ldr	r4, [r7, #12]
 800771c:	42bc      	cmp	r4, r7
 800771e:	d000      	beq.n	8007722 <_malloc_r+0x17e>
 8007720:	e09b      	b.n	800785a <_malloc_r+0x2b6>
 8007722:	2403      	movs	r4, #3
 8007724:	9902      	ldr	r1, [sp, #8]
 8007726:	3708      	adds	r7, #8
 8007728:	3101      	adds	r1, #1
 800772a:	9102      	str	r1, [sp, #8]
 800772c:	4221      	tst	r1, r4
 800772e:	d1f4      	bne.n	800771a <_malloc_r+0x176>
 8007730:	2103      	movs	r1, #3
 8007732:	420b      	tst	r3, r1
 8007734:	d000      	beq.n	8007738 <_malloc_r+0x194>
 8007736:	e0b7      	b.n	80078a8 <_malloc_r+0x304>
 8007738:	6843      	ldr	r3, [r0, #4]
 800773a:	4393      	bics	r3, r2
 800773c:	6043      	str	r3, [r0, #4]
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	0052      	lsls	r2, r2, #1
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	4291      	cmp	r1, r2
 8007746:	d302      	bcc.n	800774e <_malloc_r+0x1aa>
 8007748:	2a00      	cmp	r2, #0
 800774a:	d000      	beq.n	800774e <_malloc_r+0x1aa>
 800774c:	e0bb      	b.n	80078c6 <_malloc_r+0x322>
 800774e:	2203      	movs	r2, #3
 8007750:	6883      	ldr	r3, [r0, #8]
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	4393      	bics	r3, r2
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	42ab      	cmp	r3, r5
 800775c:	d303      	bcc.n	8007766 <_malloc_r+0x1c2>
 800775e:	1b59      	subs	r1, r3, r5
 8007760:	290f      	cmp	r1, #15
 8007762:	dd00      	ble.n	8007766 <_malloc_r+0x1c2>
 8007764:	e123      	b.n	80079ae <_malloc_r+0x40a>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	9a03      	ldr	r2, [sp, #12]
 800776a:	2008      	movs	r0, #8
 800776c:	189e      	adds	r6, r3, r2
 800776e:	4b5a      	ldr	r3, [pc, #360]	; (80078d8 <_malloc_r+0x334>)
 8007770:	681f      	ldr	r7, [r3, #0]
 8007772:	f001 fa2f 	bl	8008bd4 <sysconf>
 8007776:	4b59      	ldr	r3, [pc, #356]	; (80078dc <_malloc_r+0x338>)
 8007778:	3710      	adds	r7, #16
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	197f      	adds	r7, r7, r5
 800777e:	9004      	str	r0, [sp, #16]
 8007780:	3301      	adds	r3, #1
 8007782:	d003      	beq.n	800778c <_malloc_r+0x1e8>
 8007784:	1e7b      	subs	r3, r7, #1
 8007786:	181b      	adds	r3, r3, r0
 8007788:	4247      	negs	r7, r0
 800778a:	401f      	ands	r7, r3
 800778c:	0039      	movs	r1, r7
 800778e:	9801      	ldr	r0, [sp, #4]
 8007790:	f001 f9cc 	bl	8008b2c <_sbrk_r>
 8007794:	0004      	movs	r4, r0
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d100      	bne.n	800779c <_malloc_r+0x1f8>
 800779a:	e0de      	b.n	800795a <_malloc_r+0x3b6>
 800779c:	4286      	cmp	r6, r0
 800779e:	d904      	bls.n	80077aa <_malloc_r+0x206>
 80077a0:	4b4a      	ldr	r3, [pc, #296]	; (80078cc <_malloc_r+0x328>)
 80077a2:	9a02      	ldr	r2, [sp, #8]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d000      	beq.n	80077aa <_malloc_r+0x206>
 80077a8:	e0d7      	b.n	800795a <_malloc_r+0x3b6>
 80077aa:	4a4d      	ldr	r2, [pc, #308]	; (80078e0 <_malloc_r+0x33c>)
 80077ac:	6813      	ldr	r3, [r2, #0]
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	9a04      	ldr	r2, [sp, #16]
 80077b4:	3a01      	subs	r2, #1
 80077b6:	42a6      	cmp	r6, r4
 80077b8:	d000      	beq.n	80077bc <_malloc_r+0x218>
 80077ba:	e097      	b.n	80078ec <_malloc_r+0x348>
 80077bc:	4216      	tst	r6, r2
 80077be:	d000      	beq.n	80077c2 <_malloc_r+0x21e>
 80077c0:	e094      	b.n	80078ec <_malloc_r+0x348>
 80077c2:	4b42      	ldr	r3, [pc, #264]	; (80078cc <_malloc_r+0x328>)
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	19df      	adds	r7, r3, r7
 80077ca:	2301      	movs	r3, #1
 80077cc:	433b      	orrs	r3, r7
 80077ce:	6053      	str	r3, [r2, #4]
 80077d0:	4b43      	ldr	r3, [pc, #268]	; (80078e0 <_malloc_r+0x33c>)
 80077d2:	4a44      	ldr	r2, [pc, #272]	; (80078e4 <_malloc_r+0x340>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6811      	ldr	r1, [r2, #0]
 80077d8:	428b      	cmp	r3, r1
 80077da:	d900      	bls.n	80077de <_malloc_r+0x23a>
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	4a42      	ldr	r2, [pc, #264]	; (80078e8 <_malloc_r+0x344>)
 80077e0:	6811      	ldr	r1, [r2, #0]
 80077e2:	428b      	cmp	r3, r1
 80077e4:	d800      	bhi.n	80077e8 <_malloc_r+0x244>
 80077e6:	e0b8      	b.n	800795a <_malloc_r+0x3b6>
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e0b6      	b.n	800795a <_malloc_r+0x3b6>
 80077ec:	0a50      	lsrs	r0, r2, #9
 80077ee:	2804      	cmp	r0, #4
 80077f0:	d811      	bhi.n	8007816 <_malloc_r+0x272>
 80077f2:	0991      	lsrs	r1, r2, #6
 80077f4:	3138      	adds	r1, #56	; 0x38
 80077f6:	00cf      	lsls	r7, r1, #3
 80077f8:	19bf      	adds	r7, r7, r6
 80077fa:	68b8      	ldr	r0, [r7, #8]
 80077fc:	4287      	cmp	r7, r0
 80077fe:	d125      	bne.n	800784c <_malloc_r+0x2a8>
 8007800:	2201      	movs	r2, #1
 8007802:	1089      	asrs	r1, r1, #2
 8007804:	408a      	lsls	r2, r1
 8007806:	4661      	mov	r1, ip
 8007808:	430a      	orrs	r2, r1
 800780a:	6072      	str	r2, [r6, #4]
 800780c:	60e7      	str	r7, [r4, #12]
 800780e:	60a0      	str	r0, [r4, #8]
 8007810:	60bc      	str	r4, [r7, #8]
 8007812:	60c4      	str	r4, [r0, #12]
 8007814:	e76b      	b.n	80076ee <_malloc_r+0x14a>
 8007816:	2814      	cmp	r0, #20
 8007818:	d802      	bhi.n	8007820 <_malloc_r+0x27c>
 800781a:	0001      	movs	r1, r0
 800781c:	315b      	adds	r1, #91	; 0x5b
 800781e:	e7ea      	b.n	80077f6 <_malloc_r+0x252>
 8007820:	2854      	cmp	r0, #84	; 0x54
 8007822:	d802      	bhi.n	800782a <_malloc_r+0x286>
 8007824:	0b11      	lsrs	r1, r2, #12
 8007826:	316e      	adds	r1, #110	; 0x6e
 8007828:	e7e5      	b.n	80077f6 <_malloc_r+0x252>
 800782a:	21aa      	movs	r1, #170	; 0xaa
 800782c:	0049      	lsls	r1, r1, #1
 800782e:	4288      	cmp	r0, r1
 8007830:	d802      	bhi.n	8007838 <_malloc_r+0x294>
 8007832:	0bd1      	lsrs	r1, r2, #15
 8007834:	3177      	adds	r1, #119	; 0x77
 8007836:	e7de      	b.n	80077f6 <_malloc_r+0x252>
 8007838:	4f26      	ldr	r7, [pc, #152]	; (80078d4 <_malloc_r+0x330>)
 800783a:	217e      	movs	r1, #126	; 0x7e
 800783c:	42b8      	cmp	r0, r7
 800783e:	d8da      	bhi.n	80077f6 <_malloc_r+0x252>
 8007840:	0c91      	lsrs	r1, r2, #18
 8007842:	317c      	adds	r1, #124	; 0x7c
 8007844:	e7d7      	b.n	80077f6 <_malloc_r+0x252>
 8007846:	6880      	ldr	r0, [r0, #8]
 8007848:	4287      	cmp	r7, r0
 800784a:	d004      	beq.n	8007856 <_malloc_r+0x2b2>
 800784c:	2603      	movs	r6, #3
 800784e:	6841      	ldr	r1, [r0, #4]
 8007850:	43b1      	bics	r1, r6
 8007852:	4291      	cmp	r1, r2
 8007854:	d8f7      	bhi.n	8007846 <_malloc_r+0x2a2>
 8007856:	68c7      	ldr	r7, [r0, #12]
 8007858:	e7d8      	b.n	800780c <_malloc_r+0x268>
 800785a:	2603      	movs	r6, #3
 800785c:	6861      	ldr	r1, [r4, #4]
 800785e:	43b1      	bics	r1, r6
 8007860:	9103      	str	r1, [sp, #12]
 8007862:	68e6      	ldr	r6, [r4, #12]
 8007864:	1b49      	subs	r1, r1, r5
 8007866:	290f      	cmp	r1, #15
 8007868:	dd10      	ble.n	800788c <_malloc_r+0x2e8>
 800786a:	2201      	movs	r2, #1
 800786c:	1963      	adds	r3, r4, r5
 800786e:	4315      	orrs	r5, r2
 8007870:	6065      	str	r5, [r4, #4]
 8007872:	68a5      	ldr	r5, [r4, #8]
 8007874:	430a      	orrs	r2, r1
 8007876:	60ee      	str	r6, [r5, #12]
 8007878:	60b5      	str	r5, [r6, #8]
 800787a:	6143      	str	r3, [r0, #20]
 800787c:	6103      	str	r3, [r0, #16]
 800787e:	4814      	ldr	r0, [pc, #80]	; (80078d0 <_malloc_r+0x32c>)
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	60d8      	str	r0, [r3, #12]
 8007884:	6098      	str	r0, [r3, #8]
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	50e1      	str	r1, [r4, r3]
 800788a:	e6eb      	b.n	8007664 <_malloc_r+0xc0>
 800788c:	2900      	cmp	r1, #0
 800788e:	db09      	blt.n	80078a4 <_malloc_r+0x300>
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	18e1      	adds	r1, r4, r3
 8007894:	2301      	movs	r3, #1
 8007896:	684a      	ldr	r2, [r1, #4]
 8007898:	4313      	orrs	r3, r2
 800789a:	604b      	str	r3, [r1, #4]
 800789c:	68a3      	ldr	r3, [r4, #8]
 800789e:	60de      	str	r6, [r3, #12]
 80078a0:	60b3      	str	r3, [r6, #8]
 80078a2:	e6df      	b.n	8007664 <_malloc_r+0xc0>
 80078a4:	0034      	movs	r4, r6
 80078a6:	e739      	b.n	800771c <_malloc_r+0x178>
 80078a8:	2108      	movs	r1, #8
 80078aa:	4249      	negs	r1, r1
 80078ac:	448c      	add	ip, r1
 80078ae:	4661      	mov	r1, ip
 80078b0:	6889      	ldr	r1, [r1, #8]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4561      	cmp	r1, ip
 80078b6:	d100      	bne.n	80078ba <_malloc_r+0x316>
 80078b8:	e73a      	b.n	8007730 <_malloc_r+0x18c>
 80078ba:	e740      	b.n	800773e <_malloc_r+0x19a>
 80078bc:	3304      	adds	r3, #4
 80078be:	0052      	lsls	r2, r2, #1
 80078c0:	420a      	tst	r2, r1
 80078c2:	d0fb      	beq.n	80078bc <_malloc_r+0x318>
 80078c4:	e724      	b.n	8007710 <_malloc_r+0x16c>
 80078c6:	9b02      	ldr	r3, [sp, #8]
 80078c8:	e7fa      	b.n	80078c0 <_malloc_r+0x31c>
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	20000014 	.word	0x20000014
 80078d0:	2000001c 	.word	0x2000001c
 80078d4:	00000554 	.word	0x00000554
 80078d8:	20000a74 	.word	0x20000a74
 80078dc:	2000041c 	.word	0x2000041c
 80078e0:	20000a44 	.word	0x20000a44
 80078e4:	20000a6c 	.word	0x20000a6c
 80078e8:	20000a70 	.word	0x20000a70
 80078ec:	4934      	ldr	r1, [pc, #208]	; (80079c0 <_malloc_r+0x41c>)
 80078ee:	6808      	ldr	r0, [r1, #0]
 80078f0:	3001      	adds	r0, #1
 80078f2:	d140      	bne.n	8007976 <_malloc_r+0x3d2>
 80078f4:	600c      	str	r4, [r1, #0]
 80078f6:	2107      	movs	r1, #7
 80078f8:	0026      	movs	r6, r4
 80078fa:	2300      	movs	r3, #0
 80078fc:	400e      	ands	r6, r1
 80078fe:	420c      	tst	r4, r1
 8007900:	d002      	beq.n	8007908 <_malloc_r+0x364>
 8007902:	3308      	adds	r3, #8
 8007904:	1b9b      	subs	r3, r3, r6
 8007906:	18e4      	adds	r4, r4, r3
 8007908:	19e1      	adds	r1, r4, r7
 800790a:	9105      	str	r1, [sp, #20]
 800790c:	9f05      	ldr	r7, [sp, #20]
 800790e:	9904      	ldr	r1, [sp, #16]
 8007910:	4017      	ands	r7, r2
 8007912:	18cb      	adds	r3, r1, r3
 8007914:	1bdf      	subs	r7, r3, r7
 8007916:	4017      	ands	r7, r2
 8007918:	0039      	movs	r1, r7
 800791a:	9801      	ldr	r0, [sp, #4]
 800791c:	f001 f906 	bl	8008b2c <_sbrk_r>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d107      	bne.n	8007934 <_malloc_r+0x390>
 8007924:	1e37      	subs	r7, r6, #0
 8007926:	9805      	ldr	r0, [sp, #20]
 8007928:	d004      	beq.n	8007934 <_malloc_r+0x390>
 800792a:	0030      	movs	r0, r6
 800792c:	2700      	movs	r7, #0
 800792e:	9b05      	ldr	r3, [sp, #20]
 8007930:	3808      	subs	r0, #8
 8007932:	1818      	adds	r0, r3, r0
 8007934:	4a23      	ldr	r2, [pc, #140]	; (80079c4 <_malloc_r+0x420>)
 8007936:	1b00      	subs	r0, r0, r4
 8007938:	6813      	ldr	r3, [r2, #0]
 800793a:	19c0      	adds	r0, r0, r7
 800793c:	19db      	adds	r3, r3, r7
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <_malloc_r+0x424>)
 8007944:	9902      	ldr	r1, [sp, #8]
 8007946:	4310      	orrs	r0, r2
 8007948:	609c      	str	r4, [r3, #8]
 800794a:	6060      	str	r0, [r4, #4]
 800794c:	4299      	cmp	r1, r3
 800794e:	d100      	bne.n	8007952 <_malloc_r+0x3ae>
 8007950:	e73e      	b.n	80077d0 <_malloc_r+0x22c>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d813      	bhi.n	8007980 <_malloc_r+0x3dc>
 8007958:	6062      	str	r2, [r4, #4]
 800795a:	2203      	movs	r2, #3
 800795c:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <_malloc_r+0x424>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4393      	bics	r3, r2
 8007964:	1b59      	subs	r1, r3, r5
 8007966:	42ab      	cmp	r3, r5
 8007968:	d301      	bcc.n	800796e <_malloc_r+0x3ca>
 800796a:	290f      	cmp	r1, #15
 800796c:	dc1f      	bgt.n	80079ae <_malloc_r+0x40a>
 800796e:	9801      	ldr	r0, [sp, #4]
 8007970:	f000 f834 	bl	80079dc <__malloc_unlock>
 8007974:	e623      	b.n	80075be <_malloc_r+0x1a>
 8007976:	4913      	ldr	r1, [pc, #76]	; (80079c4 <_malloc_r+0x420>)
 8007978:	1ba6      	subs	r6, r4, r6
 800797a:	18f6      	adds	r6, r6, r3
 800797c:	600e      	str	r6, [r1, #0]
 800797e:	e7ba      	b.n	80078f6 <_malloc_r+0x352>
 8007980:	2107      	movs	r1, #7
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	3b0c      	subs	r3, #12
 8007986:	438b      	bics	r3, r1
 8007988:	9902      	ldr	r1, [sp, #8]
 800798a:	6849      	ldr	r1, [r1, #4]
 800798c:	400a      	ands	r2, r1
 800798e:	9902      	ldr	r1, [sp, #8]
 8007990:	431a      	orrs	r2, r3
 8007992:	604a      	str	r2, [r1, #4]
 8007994:	18ca      	adds	r2, r1, r3
 8007996:	2105      	movs	r1, #5
 8007998:	6051      	str	r1, [r2, #4]
 800799a:	6091      	str	r1, [r2, #8]
 800799c:	2b0f      	cmp	r3, #15
 800799e:	d800      	bhi.n	80079a2 <_malloc_r+0x3fe>
 80079a0:	e716      	b.n	80077d0 <_malloc_r+0x22c>
 80079a2:	9902      	ldr	r1, [sp, #8]
 80079a4:	9801      	ldr	r0, [sp, #4]
 80079a6:	3108      	adds	r1, #8
 80079a8:	f001 f99a 	bl	8008ce0 <_free_r>
 80079ac:	e710      	b.n	80077d0 <_malloc_r+0x22c>
 80079ae:	2201      	movs	r2, #1
 80079b0:	0013      	movs	r3, r2
 80079b2:	4805      	ldr	r0, [pc, #20]	; (80079c8 <_malloc_r+0x424>)
 80079b4:	432b      	orrs	r3, r5
 80079b6:	6884      	ldr	r4, [r0, #8]
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	1963      	adds	r3, r4, r5
 80079bc:	6083      	str	r3, [r0, #8]
 80079be:	e623      	b.n	8007608 <_malloc_r+0x64>
 80079c0:	2000041c 	.word	0x2000041c
 80079c4:	20000a44 	.word	0x20000a44
 80079c8:	20000014 	.word	0x20000014

080079cc <__malloc_lock>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	4802      	ldr	r0, [pc, #8]	; (80079d8 <__malloc_lock+0xc>)
 80079d0:	f001 f8fe 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	20000bb9 	.word	0x20000bb9

080079dc <__malloc_unlock>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4802      	ldr	r0, [pc, #8]	; (80079e8 <__malloc_unlock+0xc>)
 80079e0:	f001 f8f7 	bl	8008bd2 <__retarget_lock_release_recursive>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	20000bb9 	.word	0x20000bb9

080079ec <sulp>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	0016      	movs	r6, r2
 80079f0:	000d      	movs	r5, r1
 80079f2:	f002 f8cb 	bl	8009b8c <__ulp>
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	d00d      	beq.n	8007a16 <sulp+0x2a>
 80079fa:	236b      	movs	r3, #107	; 0x6b
 80079fc:	006a      	lsls	r2, r5, #1
 80079fe:	0d52      	lsrs	r2, r2, #21
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd07      	ble.n	8007a16 <sulp+0x2a>
 8007a06:	2400      	movs	r4, #0
 8007a08:	4a03      	ldr	r2, [pc, #12]	; (8007a18 <sulp+0x2c>)
 8007a0a:	051b      	lsls	r3, r3, #20
 8007a0c:	189d      	adds	r5, r3, r2
 8007a0e:	002b      	movs	r3, r5
 8007a10:	0022      	movs	r2, r4
 8007a12:	f7f9 fe2b 	bl	800166c <__aeabi_dmul>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	3ff00000 	.word	0x3ff00000

08007a1c <_strtod_l>:
 8007a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1e:	b0a1      	sub	sp, #132	; 0x84
 8007a20:	9219      	str	r2, [sp, #100]	; 0x64
 8007a22:	2200      	movs	r2, #0
 8007a24:	2600      	movs	r6, #0
 8007a26:	2700      	movs	r7, #0
 8007a28:	9004      	str	r0, [sp, #16]
 8007a2a:	9107      	str	r1, [sp, #28]
 8007a2c:	921c      	str	r2, [sp, #112]	; 0x70
 8007a2e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007a30:	780a      	ldrb	r2, [r1, #0]
 8007a32:	2a2b      	cmp	r2, #43	; 0x2b
 8007a34:	d055      	beq.n	8007ae2 <_strtod_l+0xc6>
 8007a36:	d841      	bhi.n	8007abc <_strtod_l+0xa0>
 8007a38:	2a0d      	cmp	r2, #13
 8007a3a:	d83b      	bhi.n	8007ab4 <_strtod_l+0x98>
 8007a3c:	2a08      	cmp	r2, #8
 8007a3e:	d83b      	bhi.n	8007ab8 <_strtod_l+0x9c>
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d044      	beq.n	8007ace <_strtod_l+0xb2>
 8007a44:	2200      	movs	r2, #0
 8007a46:	920f      	str	r2, [sp, #60]	; 0x3c
 8007a48:	2100      	movs	r1, #0
 8007a4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a4e:	782a      	ldrb	r2, [r5, #0]
 8007a50:	2a30      	cmp	r2, #48	; 0x30
 8007a52:	d000      	beq.n	8007a56 <_strtod_l+0x3a>
 8007a54:	e085      	b.n	8007b62 <_strtod_l+0x146>
 8007a56:	786a      	ldrb	r2, [r5, #1]
 8007a58:	3120      	adds	r1, #32
 8007a5a:	438a      	bics	r2, r1
 8007a5c:	2a58      	cmp	r2, #88	; 0x58
 8007a5e:	d000      	beq.n	8007a62 <_strtod_l+0x46>
 8007a60:	e075      	b.n	8007b4e <_strtod_l+0x132>
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a66:	4a97      	ldr	r2, [pc, #604]	; (8007cc4 <_strtod_l+0x2a8>)
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	ab1c      	add	r3, sp, #112	; 0x70
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	9804      	ldr	r0, [sp, #16]
 8007a70:	ab1d      	add	r3, sp, #116	; 0x74
 8007a72:	a91b      	add	r1, sp, #108	; 0x6c
 8007a74:	f001 fa50 	bl	8008f18 <__gethex>
 8007a78:	230f      	movs	r3, #15
 8007a7a:	0002      	movs	r2, r0
 8007a7c:	401a      	ands	r2, r3
 8007a7e:	0004      	movs	r4, r0
 8007a80:	9205      	str	r2, [sp, #20]
 8007a82:	4218      	tst	r0, r3
 8007a84:	d005      	beq.n	8007a92 <_strtod_l+0x76>
 8007a86:	2a06      	cmp	r2, #6
 8007a88:	d12d      	bne.n	8007ae6 <_strtod_l+0xca>
 8007a8a:	1c6b      	adds	r3, r5, #1
 8007a8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a8e:	2300      	movs	r3, #0
 8007a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <_strtod_l+0x82>
 8007a98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01b      	beq.n	8007adc <_strtod_l+0xc0>
 8007aa4:	2380      	movs	r3, #128	; 0x80
 8007aa6:	0032      	movs	r2, r6
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	18fb      	adds	r3, r7, r3
 8007aac:	0010      	movs	r0, r2
 8007aae:	0019      	movs	r1, r3
 8007ab0:	b021      	add	sp, #132	; 0x84
 8007ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab4:	2a20      	cmp	r2, #32
 8007ab6:	d1c5      	bne.n	8007a44 <_strtod_l+0x28>
 8007ab8:	3101      	adds	r1, #1
 8007aba:	e7b8      	b.n	8007a2e <_strtod_l+0x12>
 8007abc:	2a2d      	cmp	r2, #45	; 0x2d
 8007abe:	d1c1      	bne.n	8007a44 <_strtod_l+0x28>
 8007ac0:	3a2c      	subs	r2, #44	; 0x2c
 8007ac2:	920f      	str	r2, [sp, #60]	; 0x3c
 8007ac4:	1c4a      	adds	r2, r1, #1
 8007ac6:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ac8:	784a      	ldrb	r2, [r1, #1]
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1bc      	bne.n	8007a48 <_strtod_l+0x2c>
 8007ace:	9b07      	ldr	r3, [sp, #28]
 8007ad0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1dd      	bne.n	8007a98 <_strtod_l+0x7c>
 8007adc:	0032      	movs	r2, r6
 8007ade:	003b      	movs	r3, r7
 8007ae0:	e7e4      	b.n	8007aac <_strtod_l+0x90>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	e7ed      	b.n	8007ac2 <_strtod_l+0xa6>
 8007ae6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	d007      	beq.n	8007afc <_strtod_l+0xe0>
 8007aec:	2135      	movs	r1, #53	; 0x35
 8007aee:	a81e      	add	r0, sp, #120	; 0x78
 8007af0:	f002 f93d 	bl	8009d6e <__copybits>
 8007af4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007af6:	9804      	ldr	r0, [sp, #16]
 8007af8:	f001 fd3a 	bl	8009570 <_Bfree>
 8007afc:	9805      	ldr	r0, [sp, #20]
 8007afe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b00:	3801      	subs	r0, #1
 8007b02:	2804      	cmp	r0, #4
 8007b04:	d806      	bhi.n	8007b14 <_strtod_l+0xf8>
 8007b06:	f7f8 fb05 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007b0a:	0312      	.short	0x0312
 8007b0c:	1e1c      	.short	0x1e1c
 8007b0e:	12          	.byte	0x12
 8007b0f:	00          	.byte	0x00
 8007b10:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007b12:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007b14:	05e4      	lsls	r4, r4, #23
 8007b16:	d502      	bpl.n	8007b1e <_strtod_l+0x102>
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	431f      	orrs	r7, r3
 8007b1e:	4b6a      	ldr	r3, [pc, #424]	; (8007cc8 <_strtod_l+0x2ac>)
 8007b20:	423b      	tst	r3, r7
 8007b22:	d1b6      	bne.n	8007a92 <_strtod_l+0x76>
 8007b24:	f001 f828 	bl	8008b78 <__errno>
 8007b28:	2322      	movs	r3, #34	; 0x22
 8007b2a:	6003      	str	r3, [r0, #0]
 8007b2c:	e7b1      	b.n	8007a92 <_strtod_l+0x76>
 8007b2e:	4967      	ldr	r1, [pc, #412]	; (8007ccc <_strtod_l+0x2b0>)
 8007b30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b32:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007b34:	400a      	ands	r2, r1
 8007b36:	4966      	ldr	r1, [pc, #408]	; (8007cd0 <_strtod_l+0x2b4>)
 8007b38:	185b      	adds	r3, r3, r1
 8007b3a:	051b      	lsls	r3, r3, #20
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	0017      	movs	r7, r2
 8007b40:	e7e8      	b.n	8007b14 <_strtod_l+0xf8>
 8007b42:	4f61      	ldr	r7, [pc, #388]	; (8007cc8 <_strtod_l+0x2ac>)
 8007b44:	e7e6      	b.n	8007b14 <_strtod_l+0xf8>
 8007b46:	2601      	movs	r6, #1
 8007b48:	4f62      	ldr	r7, [pc, #392]	; (8007cd4 <_strtod_l+0x2b8>)
 8007b4a:	4276      	negs	r6, r6
 8007b4c:	e7e2      	b.n	8007b14 <_strtod_l+0xf8>
 8007b4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b30      	cmp	r3, #48	; 0x30
 8007b58:	d0f9      	beq.n	8007b4e <_strtod_l+0x132>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d099      	beq.n	8007a92 <_strtod_l+0x76>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	9309      	str	r3, [sp, #36]	; 0x24
 8007b62:	2500      	movs	r5, #0
 8007b64:	220a      	movs	r2, #10
 8007b66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b68:	950d      	str	r5, [sp, #52]	; 0x34
 8007b6a:	9310      	str	r3, [sp, #64]	; 0x40
 8007b6c:	9508      	str	r5, [sp, #32]
 8007b6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007b70:	7804      	ldrb	r4, [r0, #0]
 8007b72:	0023      	movs	r3, r4
 8007b74:	3b30      	subs	r3, #48	; 0x30
 8007b76:	b2d9      	uxtb	r1, r3
 8007b78:	2909      	cmp	r1, #9
 8007b7a:	d927      	bls.n	8007bcc <_strtod_l+0x1b0>
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4956      	ldr	r1, [pc, #344]	; (8007cd8 <_strtod_l+0x2bc>)
 8007b80:	f000 ff56 	bl	8008a30 <strncmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d031      	beq.n	8007bec <_strtod_l+0x1d0>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	0023      	movs	r3, r4
 8007b8c:	4684      	mov	ip, r0
 8007b8e:	9a08      	ldr	r2, [sp, #32]
 8007b90:	900c      	str	r0, [sp, #48]	; 0x30
 8007b92:	9205      	str	r2, [sp, #20]
 8007b94:	2220      	movs	r2, #32
 8007b96:	0019      	movs	r1, r3
 8007b98:	4391      	bics	r1, r2
 8007b9a:	000a      	movs	r2, r1
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	9106      	str	r1, [sp, #24]
 8007ba0:	2a45      	cmp	r2, #69	; 0x45
 8007ba2:	d000      	beq.n	8007ba6 <_strtod_l+0x18a>
 8007ba4:	e0c2      	b.n	8007d2c <_strtod_l+0x310>
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007baa:	4303      	orrs	r3, r0
 8007bac:	4313      	orrs	r3, r2
 8007bae:	428b      	cmp	r3, r1
 8007bb0:	d08d      	beq.n	8007ace <_strtod_l+0xb2>
 8007bb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b2b      	cmp	r3, #43	; 0x2b
 8007bc0:	d071      	beq.n	8007ca6 <_strtod_l+0x28a>
 8007bc2:	000c      	movs	r4, r1
 8007bc4:	2b2d      	cmp	r3, #45	; 0x2d
 8007bc6:	d174      	bne.n	8007cb2 <_strtod_l+0x296>
 8007bc8:	2401      	movs	r4, #1
 8007bca:	e06d      	b.n	8007ca8 <_strtod_l+0x28c>
 8007bcc:	9908      	ldr	r1, [sp, #32]
 8007bce:	2908      	cmp	r1, #8
 8007bd0:	dc09      	bgt.n	8007be6 <_strtod_l+0x1ca>
 8007bd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007bd4:	4351      	muls	r1, r2
 8007bd6:	185b      	adds	r3, r3, r1
 8007bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	3001      	adds	r0, #1
 8007bde:	3301      	adds	r3, #1
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	901b      	str	r0, [sp, #108]	; 0x6c
 8007be4:	e7c3      	b.n	8007b6e <_strtod_l+0x152>
 8007be6:	4355      	muls	r5, r2
 8007be8:	195d      	adds	r5, r3, r5
 8007bea:	e7f6      	b.n	8007bda <_strtod_l+0x1be>
 8007bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007bf2:	9a08      	ldr	r2, [sp, #32]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d03a      	beq.n	8007c70 <_strtod_l+0x254>
 8007bfa:	900c      	str	r0, [sp, #48]	; 0x30
 8007bfc:	9205      	str	r2, [sp, #20]
 8007bfe:	001a      	movs	r2, r3
 8007c00:	3a30      	subs	r2, #48	; 0x30
 8007c02:	2a09      	cmp	r2, #9
 8007c04:	d912      	bls.n	8007c2c <_strtod_l+0x210>
 8007c06:	2201      	movs	r2, #1
 8007c08:	4694      	mov	ip, r2
 8007c0a:	e7c3      	b.n	8007b94 <_strtod_l+0x178>
 8007c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c0e:	3001      	adds	r0, #1
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b30      	cmp	r3, #48	; 0x30
 8007c18:	d0f8      	beq.n	8007c0c <_strtod_l+0x1f0>
 8007c1a:	001a      	movs	r2, r3
 8007c1c:	3a31      	subs	r2, #49	; 0x31
 8007c1e:	2a08      	cmp	r2, #8
 8007c20:	d83c      	bhi.n	8007c9c <_strtod_l+0x280>
 8007c22:	900c      	str	r0, [sp, #48]	; 0x30
 8007c24:	2000      	movs	r0, #0
 8007c26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c28:	9005      	str	r0, [sp, #20]
 8007c2a:	9210      	str	r2, [sp, #64]	; 0x40
 8007c2c:	001a      	movs	r2, r3
 8007c2e:	1c41      	adds	r1, r0, #1
 8007c30:	3a30      	subs	r2, #48	; 0x30
 8007c32:	2b30      	cmp	r3, #48	; 0x30
 8007c34:	d016      	beq.n	8007c64 <_strtod_l+0x248>
 8007c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c38:	185b      	adds	r3, r3, r1
 8007c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c3c:	9b05      	ldr	r3, [sp, #20]
 8007c3e:	210a      	movs	r1, #10
 8007c40:	469c      	mov	ip, r3
 8007c42:	4484      	add	ip, r0
 8007c44:	4563      	cmp	r3, ip
 8007c46:	d115      	bne.n	8007c74 <_strtod_l+0x258>
 8007c48:	9905      	ldr	r1, [sp, #20]
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	3101      	adds	r1, #1
 8007c4e:	1809      	adds	r1, r1, r0
 8007c50:	181b      	adds	r3, r3, r0
 8007c52:	9105      	str	r1, [sp, #20]
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	dc19      	bgt.n	8007c8c <_strtod_l+0x270>
 8007c58:	230a      	movs	r3, #10
 8007c5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c5c:	434b      	muls	r3, r1
 8007c5e:	2100      	movs	r1, #0
 8007c60:	18d3      	adds	r3, r2, r3
 8007c62:	930d      	str	r3, [sp, #52]	; 0x34
 8007c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c66:	0008      	movs	r0, r1
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	e7c6      	b.n	8007bfe <_strtod_l+0x1e2>
 8007c70:	9808      	ldr	r0, [sp, #32]
 8007c72:	e7d0      	b.n	8007c16 <_strtod_l+0x1fa>
 8007c74:	1c5c      	adds	r4, r3, #1
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	dc04      	bgt.n	8007c84 <_strtod_l+0x268>
 8007c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7c:	434b      	muls	r3, r1
 8007c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c80:	0023      	movs	r3, r4
 8007c82:	e7df      	b.n	8007c44 <_strtod_l+0x228>
 8007c84:	2c10      	cmp	r4, #16
 8007c86:	dcfb      	bgt.n	8007c80 <_strtod_l+0x264>
 8007c88:	434d      	muls	r5, r1
 8007c8a:	e7f9      	b.n	8007c80 <_strtod_l+0x264>
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	dce7      	bgt.n	8007c64 <_strtod_l+0x248>
 8007c94:	230a      	movs	r3, #10
 8007c96:	435d      	muls	r5, r3
 8007c98:	1955      	adds	r5, r2, r5
 8007c9a:	e7e3      	b.n	8007c64 <_strtod_l+0x248>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	920c      	str	r2, [sp, #48]	; 0x30
 8007ca0:	9205      	str	r2, [sp, #20]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	e7b0      	b.n	8007c08 <_strtod_l+0x1ec>
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	9b07      	ldr	r3, [sp, #28]
 8007caa:	3302      	adds	r3, #2
 8007cac:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cae:	9b07      	ldr	r3, [sp, #28]
 8007cb0:	789b      	ldrb	r3, [r3, #2]
 8007cb2:	001a      	movs	r2, r3
 8007cb4:	3a30      	subs	r2, #48	; 0x30
 8007cb6:	2a09      	cmp	r2, #9
 8007cb8:	d914      	bls.n	8007ce4 <_strtod_l+0x2c8>
 8007cba:	9a07      	ldr	r2, [sp, #28]
 8007cbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e033      	b.n	8007d2a <_strtod_l+0x30e>
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	0800f6e4 	.word	0x0800f6e4
 8007cc8:	7ff00000 	.word	0x7ff00000
 8007ccc:	ffefffff 	.word	0xffefffff
 8007cd0:	00000433 	.word	0x00000433
 8007cd4:	7fffffff 	.word	0x7fffffff
 8007cd8:	0800f6e0 	.word	0x0800f6e0
 8007cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d0f9      	beq.n	8007cdc <_strtod_l+0x2c0>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	9206      	str	r2, [sp, #24]
 8007cec:	001a      	movs	r2, r3
 8007cee:	3a31      	subs	r2, #49	; 0x31
 8007cf0:	2a08      	cmp	r2, #8
 8007cf2:	d81b      	bhi.n	8007d2c <_strtod_l+0x310>
 8007cf4:	3b30      	subs	r3, #48	; 0x30
 8007cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	001a      	movs	r2, r3
 8007d06:	3a30      	subs	r2, #48	; 0x30
 8007d08:	2a09      	cmp	r2, #9
 8007d0a:	d93a      	bls.n	8007d82 <_strtod_l+0x366>
 8007d0c:	9a06      	ldr	r2, [sp, #24]
 8007d0e:	1a8a      	subs	r2, r1, r2
 8007d10:	49b2      	ldr	r1, [pc, #712]	; (8007fdc <_strtod_l+0x5c0>)
 8007d12:	9106      	str	r1, [sp, #24]
 8007d14:	2a08      	cmp	r2, #8
 8007d16:	dc04      	bgt.n	8007d22 <_strtod_l+0x306>
 8007d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d1a:	9206      	str	r2, [sp, #24]
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	dd00      	ble.n	8007d22 <_strtod_l+0x306>
 8007d20:	9106      	str	r1, [sp, #24]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d002      	beq.n	8007d2c <_strtod_l+0x310>
 8007d26:	9a06      	ldr	r2, [sp, #24]
 8007d28:	4252      	negs	r2, r2
 8007d2a:	9206      	str	r2, [sp, #24]
 8007d2c:	9a05      	ldr	r2, [sp, #20]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d14d      	bne.n	8007dce <_strtod_l+0x3b2>
 8007d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d34:	4310      	orrs	r0, r2
 8007d36:	d000      	beq.n	8007d3a <_strtod_l+0x31e>
 8007d38:	e6ab      	b.n	8007a92 <_strtod_l+0x76>
 8007d3a:	4662      	mov	r2, ip
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d000      	beq.n	8007d42 <_strtod_l+0x326>
 8007d40:	e6c5      	b.n	8007ace <_strtod_l+0xb2>
 8007d42:	2b69      	cmp	r3, #105	; 0x69
 8007d44:	d027      	beq.n	8007d96 <_strtod_l+0x37a>
 8007d46:	dc23      	bgt.n	8007d90 <_strtod_l+0x374>
 8007d48:	2b49      	cmp	r3, #73	; 0x49
 8007d4a:	d024      	beq.n	8007d96 <_strtod_l+0x37a>
 8007d4c:	2b4e      	cmp	r3, #78	; 0x4e
 8007d4e:	d000      	beq.n	8007d52 <_strtod_l+0x336>
 8007d50:	e6bd      	b.n	8007ace <_strtod_l+0xb2>
 8007d52:	49a3      	ldr	r1, [pc, #652]	; (8007fe0 <_strtod_l+0x5c4>)
 8007d54:	a81b      	add	r0, sp, #108	; 0x6c
 8007d56:	f001 fb15 	bl	8009384 <__match>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d100      	bne.n	8007d60 <_strtod_l+0x344>
 8007d5e:	e6b6      	b.n	8007ace <_strtod_l+0xb2>
 8007d60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b28      	cmp	r3, #40	; 0x28
 8007d66:	d12c      	bne.n	8007dc2 <_strtod_l+0x3a6>
 8007d68:	499e      	ldr	r1, [pc, #632]	; (8007fe4 <_strtod_l+0x5c8>)
 8007d6a:	aa1e      	add	r2, sp, #120	; 0x78
 8007d6c:	a81b      	add	r0, sp, #108	; 0x6c
 8007d6e:	f001 fb1d 	bl	80093ac <__hexnan>
 8007d72:	2805      	cmp	r0, #5
 8007d74:	d125      	bne.n	8007dc2 <_strtod_l+0x3a6>
 8007d76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d78:	4a9b      	ldr	r2, [pc, #620]	; (8007fe8 <_strtod_l+0x5cc>)
 8007d7a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	0017      	movs	r7, r2
 8007d80:	e687      	b.n	8007a92 <_strtod_l+0x76>
 8007d82:	220a      	movs	r2, #10
 8007d84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007d86:	434a      	muls	r2, r1
 8007d88:	18d2      	adds	r2, r2, r3
 8007d8a:	3a30      	subs	r2, #48	; 0x30
 8007d8c:	920e      	str	r2, [sp, #56]	; 0x38
 8007d8e:	e7b5      	b.n	8007cfc <_strtod_l+0x2e0>
 8007d90:	2b6e      	cmp	r3, #110	; 0x6e
 8007d92:	d0de      	beq.n	8007d52 <_strtod_l+0x336>
 8007d94:	e69b      	b.n	8007ace <_strtod_l+0xb2>
 8007d96:	4995      	ldr	r1, [pc, #596]	; (8007fec <_strtod_l+0x5d0>)
 8007d98:	a81b      	add	r0, sp, #108	; 0x6c
 8007d9a:	f001 faf3 	bl	8009384 <__match>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d100      	bne.n	8007da4 <_strtod_l+0x388>
 8007da2:	e694      	b.n	8007ace <_strtod_l+0xb2>
 8007da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007da6:	4992      	ldr	r1, [pc, #584]	; (8007ff0 <_strtod_l+0x5d4>)
 8007da8:	3b01      	subs	r3, #1
 8007daa:	a81b      	add	r0, sp, #108	; 0x6c
 8007dac:	931b      	str	r3, [sp, #108]	; 0x6c
 8007dae:	f001 fae9 	bl	8009384 <__match>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d102      	bne.n	8007dbc <_strtod_l+0x3a0>
 8007db6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db8:	3301      	adds	r3, #1
 8007dba:	931b      	str	r3, [sp, #108]	; 0x6c
 8007dbc:	2600      	movs	r6, #0
 8007dbe:	4f8a      	ldr	r7, [pc, #552]	; (8007fe8 <_strtod_l+0x5cc>)
 8007dc0:	e667      	b.n	8007a92 <_strtod_l+0x76>
 8007dc2:	488c      	ldr	r0, [pc, #560]	; (8007ff4 <_strtod_l+0x5d8>)
 8007dc4:	f000 ff1a 	bl	8008bfc <nan>
 8007dc8:	0006      	movs	r6, r0
 8007dca:	000f      	movs	r7, r1
 8007dcc:	e661      	b.n	8007a92 <_strtod_l+0x76>
 8007dce:	9b06      	ldr	r3, [sp, #24]
 8007dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	9b08      	ldr	r3, [sp, #32]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <_strtod_l+0x3c4>
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	9308      	str	r3, [sp, #32]
 8007de0:	9c05      	ldr	r4, [sp, #20]
 8007de2:	2c10      	cmp	r4, #16
 8007de4:	dd00      	ble.n	8007de8 <_strtod_l+0x3cc>
 8007de6:	2410      	movs	r4, #16
 8007de8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007dea:	f7fa fb07 	bl	80023fc <__aeabi_ui2d>
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	0006      	movs	r6, r0
 8007df2:	000f      	movs	r7, r1
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	dd15      	ble.n	8007e24 <_strtod_l+0x408>
 8007df8:	0022      	movs	r2, r4
 8007dfa:	4b7f      	ldr	r3, [pc, #508]	; (8007ff8 <_strtod_l+0x5dc>)
 8007dfc:	3a09      	subs	r2, #9
 8007dfe:	00d2      	lsls	r2, r2, #3
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f7f9 fc31 	bl	800166c <__aeabi_dmul>
 8007e0a:	0006      	movs	r6, r0
 8007e0c:	0028      	movs	r0, r5
 8007e0e:	000f      	movs	r7, r1
 8007e10:	f7fa faf4 	bl	80023fc <__aeabi_ui2d>
 8007e14:	0002      	movs	r2, r0
 8007e16:	000b      	movs	r3, r1
 8007e18:	0030      	movs	r0, r6
 8007e1a:	0039      	movs	r1, r7
 8007e1c:	f7f8 fccc 	bl	80007b8 <__aeabi_dadd>
 8007e20:	0006      	movs	r6, r0
 8007e22:	000f      	movs	r7, r1
 8007e24:	9b05      	ldr	r3, [sp, #20]
 8007e26:	2b0f      	cmp	r3, #15
 8007e28:	dc39      	bgt.n	8007e9e <_strtod_l+0x482>
 8007e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d100      	bne.n	8007e32 <_strtod_l+0x416>
 8007e30:	e62f      	b.n	8007a92 <_strtod_l+0x76>
 8007e32:	dd24      	ble.n	8007e7e <_strtod_l+0x462>
 8007e34:	2b16      	cmp	r3, #22
 8007e36:	dc09      	bgt.n	8007e4c <_strtod_l+0x430>
 8007e38:	496f      	ldr	r1, [pc, #444]	; (8007ff8 <_strtod_l+0x5dc>)
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	18c9      	adds	r1, r1, r3
 8007e3e:	0032      	movs	r2, r6
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	6849      	ldr	r1, [r1, #4]
 8007e44:	003b      	movs	r3, r7
 8007e46:	f7f9 fc11 	bl	800166c <__aeabi_dmul>
 8007e4a:	e7bd      	b.n	8007dc8 <_strtod_l+0x3ac>
 8007e4c:	2325      	movs	r3, #37	; 0x25
 8007e4e:	9a05      	ldr	r2, [sp, #20]
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e54:	4293      	cmp	r3, r2
 8007e56:	db22      	blt.n	8007e9e <_strtod_l+0x482>
 8007e58:	240f      	movs	r4, #15
 8007e5a:	9b05      	ldr	r3, [sp, #20]
 8007e5c:	4d66      	ldr	r5, [pc, #408]	; (8007ff8 <_strtod_l+0x5dc>)
 8007e5e:	1ae4      	subs	r4, r4, r3
 8007e60:	00e1      	lsls	r1, r4, #3
 8007e62:	1869      	adds	r1, r5, r1
 8007e64:	0032      	movs	r2, r6
 8007e66:	6808      	ldr	r0, [r1, #0]
 8007e68:	6849      	ldr	r1, [r1, #4]
 8007e6a:	003b      	movs	r3, r7
 8007e6c:	f7f9 fbfe 	bl	800166c <__aeabi_dmul>
 8007e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e72:	1b1c      	subs	r4, r3, r4
 8007e74:	00e4      	lsls	r4, r4, #3
 8007e76:	192d      	adds	r5, r5, r4
 8007e78:	682a      	ldr	r2, [r5, #0]
 8007e7a:	686b      	ldr	r3, [r5, #4]
 8007e7c:	e7e3      	b.n	8007e46 <_strtod_l+0x42a>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	3316      	adds	r3, #22
 8007e82:	db0c      	blt.n	8007e9e <_strtod_l+0x482>
 8007e84:	9906      	ldr	r1, [sp, #24]
 8007e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e88:	4b5b      	ldr	r3, [pc, #364]	; (8007ff8 <_strtod_l+0x5dc>)
 8007e8a:	1a52      	subs	r2, r2, r1
 8007e8c:	00d2      	lsls	r2, r2, #3
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	0030      	movs	r0, r6
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	0039      	movs	r1, r7
 8007e98:	f7f8 ffee 	bl	8000e78 <__aeabi_ddiv>
 8007e9c:	e794      	b.n	8007dc8 <_strtod_l+0x3ac>
 8007e9e:	9b05      	ldr	r3, [sp, #20]
 8007ea0:	1b1c      	subs	r4, r3, r4
 8007ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea4:	18e4      	adds	r4, r4, r3
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	dd72      	ble.n	8007f90 <_strtod_l+0x574>
 8007eaa:	220f      	movs	r2, #15
 8007eac:	0023      	movs	r3, r4
 8007eae:	4013      	ands	r3, r2
 8007eb0:	4214      	tst	r4, r2
 8007eb2:	d00a      	beq.n	8007eca <_strtod_l+0x4ae>
 8007eb4:	4950      	ldr	r1, [pc, #320]	; (8007ff8 <_strtod_l+0x5dc>)
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	18c9      	adds	r1, r1, r3
 8007eba:	0032      	movs	r2, r6
 8007ebc:	6808      	ldr	r0, [r1, #0]
 8007ebe:	6849      	ldr	r1, [r1, #4]
 8007ec0:	003b      	movs	r3, r7
 8007ec2:	f7f9 fbd3 	bl	800166c <__aeabi_dmul>
 8007ec6:	0006      	movs	r6, r0
 8007ec8:	000f      	movs	r7, r1
 8007eca:	230f      	movs	r3, #15
 8007ecc:	439c      	bics	r4, r3
 8007ece:	d04a      	beq.n	8007f66 <_strtod_l+0x54a>
 8007ed0:	3326      	adds	r3, #38	; 0x26
 8007ed2:	33ff      	adds	r3, #255	; 0xff
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	dd22      	ble.n	8007f1e <_strtod_l+0x502>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	9306      	str	r3, [sp, #24]
 8007ede:	930d      	str	r3, [sp, #52]	; 0x34
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	2322      	movs	r3, #34	; 0x22
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	9a04      	ldr	r2, [sp, #16]
 8007ee8:	4f3f      	ldr	r7, [pc, #252]	; (8007fe8 <_strtod_l+0x5cc>)
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eee:	42b3      	cmp	r3, r6
 8007ef0:	d100      	bne.n	8007ef4 <_strtod_l+0x4d8>
 8007ef2:	e5ce      	b.n	8007a92 <_strtod_l+0x76>
 8007ef4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ef6:	9804      	ldr	r0, [sp, #16]
 8007ef8:	f001 fb3a 	bl	8009570 <_Bfree>
 8007efc:	9908      	ldr	r1, [sp, #32]
 8007efe:	9804      	ldr	r0, [sp, #16]
 8007f00:	f001 fb36 	bl	8009570 <_Bfree>
 8007f04:	9906      	ldr	r1, [sp, #24]
 8007f06:	9804      	ldr	r0, [sp, #16]
 8007f08:	f001 fb32 	bl	8009570 <_Bfree>
 8007f0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f0e:	9804      	ldr	r0, [sp, #16]
 8007f10:	f001 fb2e 	bl	8009570 <_Bfree>
 8007f14:	9905      	ldr	r1, [sp, #20]
 8007f16:	9804      	ldr	r0, [sp, #16]
 8007f18:	f001 fb2a 	bl	8009570 <_Bfree>
 8007f1c:	e5b9      	b.n	8007a92 <_strtod_l+0x76>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	0030      	movs	r0, r6
 8007f22:	0039      	movs	r1, r7
 8007f24:	4d35      	ldr	r5, [pc, #212]	; (8007ffc <_strtod_l+0x5e0>)
 8007f26:	1124      	asrs	r4, r4, #4
 8007f28:	9307      	str	r3, [sp, #28]
 8007f2a:	2c01      	cmp	r4, #1
 8007f2c:	dc1e      	bgt.n	8007f6c <_strtod_l+0x550>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <_strtod_l+0x51a>
 8007f32:	0006      	movs	r6, r0
 8007f34:	000f      	movs	r7, r1
 8007f36:	4b32      	ldr	r3, [pc, #200]	; (8008000 <_strtod_l+0x5e4>)
 8007f38:	9a07      	ldr	r2, [sp, #28]
 8007f3a:	18ff      	adds	r7, r7, r3
 8007f3c:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <_strtod_l+0x5e0>)
 8007f3e:	00d2      	lsls	r2, r2, #3
 8007f40:	189d      	adds	r5, r3, r2
 8007f42:	6828      	ldr	r0, [r5, #0]
 8007f44:	6869      	ldr	r1, [r5, #4]
 8007f46:	0032      	movs	r2, r6
 8007f48:	003b      	movs	r3, r7
 8007f4a:	f7f9 fb8f 	bl	800166c <__aeabi_dmul>
 8007f4e:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <_strtod_l+0x5cc>)
 8007f50:	4a2c      	ldr	r2, [pc, #176]	; (8008004 <_strtod_l+0x5e8>)
 8007f52:	0006      	movs	r6, r0
 8007f54:	400b      	ands	r3, r1
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d8be      	bhi.n	8007ed8 <_strtod_l+0x4bc>
 8007f5a:	4a2b      	ldr	r2, [pc, #172]	; (8008008 <_strtod_l+0x5ec>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d913      	bls.n	8007f88 <_strtod_l+0x56c>
 8007f60:	2601      	movs	r6, #1
 8007f62:	4f2a      	ldr	r7, [pc, #168]	; (800800c <_strtod_l+0x5f0>)
 8007f64:	4276      	negs	r6, r6
 8007f66:	2300      	movs	r3, #0
 8007f68:	9307      	str	r3, [sp, #28]
 8007f6a:	e088      	b.n	800807e <_strtod_l+0x662>
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4214      	tst	r4, r2
 8007f70:	d004      	beq.n	8007f7c <_strtod_l+0x560>
 8007f72:	682a      	ldr	r2, [r5, #0]
 8007f74:	686b      	ldr	r3, [r5, #4]
 8007f76:	f7f9 fb79 	bl	800166c <__aeabi_dmul>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	9a07      	ldr	r2, [sp, #28]
 8007f7e:	1064      	asrs	r4, r4, #1
 8007f80:	3201      	adds	r2, #1
 8007f82:	9207      	str	r2, [sp, #28]
 8007f84:	3508      	adds	r5, #8
 8007f86:	e7d0      	b.n	8007f2a <_strtod_l+0x50e>
 8007f88:	23d4      	movs	r3, #212	; 0xd4
 8007f8a:	049b      	lsls	r3, r3, #18
 8007f8c:	18cf      	adds	r7, r1, r3
 8007f8e:	e7ea      	b.n	8007f66 <_strtod_l+0x54a>
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	d0e8      	beq.n	8007f66 <_strtod_l+0x54a>
 8007f94:	4264      	negs	r4, r4
 8007f96:	230f      	movs	r3, #15
 8007f98:	0022      	movs	r2, r4
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	421c      	tst	r4, r3
 8007f9e:	d00a      	beq.n	8007fb6 <_strtod_l+0x59a>
 8007fa0:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <_strtod_l+0x5dc>)
 8007fa2:	00d2      	lsls	r2, r2, #3
 8007fa4:	189b      	adds	r3, r3, r2
 8007fa6:	0030      	movs	r0, r6
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	0039      	movs	r1, r7
 8007fae:	f7f8 ff63 	bl	8000e78 <__aeabi_ddiv>
 8007fb2:	0006      	movs	r6, r0
 8007fb4:	000f      	movs	r7, r1
 8007fb6:	1124      	asrs	r4, r4, #4
 8007fb8:	d0d5      	beq.n	8007f66 <_strtod_l+0x54a>
 8007fba:	2c1f      	cmp	r4, #31
 8007fbc:	dd28      	ble.n	8008010 <_strtod_l+0x5f4>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9305      	str	r3, [sp, #20]
 8007fc2:	9306      	str	r3, [sp, #24]
 8007fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8007fc6:	9308      	str	r3, [sp, #32]
 8007fc8:	2322      	movs	r3, #34	; 0x22
 8007fca:	9a04      	ldr	r2, [sp, #16]
 8007fcc:	2600      	movs	r6, #0
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd2:	2700      	movs	r7, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d18d      	bne.n	8007ef4 <_strtod_l+0x4d8>
 8007fd8:	e55b      	b.n	8007a92 <_strtod_l+0x76>
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	00004e1f 	.word	0x00004e1f
 8007fe0:	0800fa19 	.word	0x0800fa19
 8007fe4:	0800f6f8 	.word	0x0800f6f8
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	0800fa11 	.word	0x0800fa11
 8007ff0:	0800fac7 	.word	0x0800fac7
 8007ff4:	0800fac3 	.word	0x0800fac3
 8007ff8:	0800f938 	.word	0x0800f938
 8007ffc:	0800f910 	.word	0x0800f910
 8008000:	fcb00000 	.word	0xfcb00000
 8008004:	7ca00000 	.word	0x7ca00000
 8008008:	7c900000 	.word	0x7c900000
 800800c:	7fefffff 	.word	0x7fefffff
 8008010:	2310      	movs	r3, #16
 8008012:	0022      	movs	r2, r4
 8008014:	401a      	ands	r2, r3
 8008016:	9207      	str	r2, [sp, #28]
 8008018:	421c      	tst	r4, r3
 800801a:	d001      	beq.n	8008020 <_strtod_l+0x604>
 800801c:	335a      	adds	r3, #90	; 0x5a
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	0030      	movs	r0, r6
 8008022:	0039      	movs	r1, r7
 8008024:	2300      	movs	r3, #0
 8008026:	4dc4      	ldr	r5, [pc, #784]	; (8008338 <_strtod_l+0x91c>)
 8008028:	2201      	movs	r2, #1
 800802a:	4214      	tst	r4, r2
 800802c:	d004      	beq.n	8008038 <_strtod_l+0x61c>
 800802e:	682a      	ldr	r2, [r5, #0]
 8008030:	686b      	ldr	r3, [r5, #4]
 8008032:	f7f9 fb1b 	bl	800166c <__aeabi_dmul>
 8008036:	2301      	movs	r3, #1
 8008038:	1064      	asrs	r4, r4, #1
 800803a:	3508      	adds	r5, #8
 800803c:	2c00      	cmp	r4, #0
 800803e:	d1f3      	bne.n	8008028 <_strtod_l+0x60c>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <_strtod_l+0x62c>
 8008044:	0006      	movs	r6, r0
 8008046:	000f      	movs	r7, r1
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00f      	beq.n	800806e <_strtod_l+0x652>
 800804e:	236b      	movs	r3, #107	; 0x6b
 8008050:	007a      	lsls	r2, r7, #1
 8008052:	0d52      	lsrs	r2, r2, #21
 8008054:	0039      	movs	r1, r7
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd08      	ble.n	800806e <_strtod_l+0x652>
 800805c:	2b1f      	cmp	r3, #31
 800805e:	dc00      	bgt.n	8008062 <_strtod_l+0x646>
 8008060:	e121      	b.n	80082a6 <_strtod_l+0x88a>
 8008062:	2600      	movs	r6, #0
 8008064:	2b34      	cmp	r3, #52	; 0x34
 8008066:	dc00      	bgt.n	800806a <_strtod_l+0x64e>
 8008068:	e116      	b.n	8008298 <_strtod_l+0x87c>
 800806a:	27dc      	movs	r7, #220	; 0xdc
 800806c:	04bf      	lsls	r7, r7, #18
 800806e:	2200      	movs	r2, #0
 8008070:	2300      	movs	r3, #0
 8008072:	0030      	movs	r0, r6
 8008074:	0039      	movs	r1, r7
 8008076:	f7f8 f9e7 	bl	8000448 <__aeabi_dcmpeq>
 800807a:	2800      	cmp	r0, #0
 800807c:	d19f      	bne.n	8007fbe <_strtod_l+0x5a2>
 800807e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008080:	9a08      	ldr	r2, [sp, #32]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008086:	9b05      	ldr	r3, [sp, #20]
 8008088:	9804      	ldr	r0, [sp, #16]
 800808a:	f001 fabf 	bl	800960c <__s2b>
 800808e:	900d      	str	r0, [sp, #52]	; 0x34
 8008090:	2800      	cmp	r0, #0
 8008092:	d100      	bne.n	8008096 <_strtod_l+0x67a>
 8008094:	e720      	b.n	8007ed8 <_strtod_l+0x4bc>
 8008096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008098:	9906      	ldr	r1, [sp, #24]
 800809a:	17da      	asrs	r2, r3, #31
 800809c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809e:	1a5b      	subs	r3, r3, r1
 80080a0:	401a      	ands	r2, r3
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	9215      	str	r2, [sp, #84]	; 0x54
 80080a6:	43db      	mvns	r3, r3
 80080a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080aa:	17db      	asrs	r3, r3, #31
 80080ac:	401a      	ands	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	9218      	str	r2, [sp, #96]	; 0x60
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	9306      	str	r3, [sp, #24]
 80080b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b8:	9804      	ldr	r0, [sp, #16]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	f001 fa30 	bl	8009520 <_Balloc>
 80080c0:	9008      	str	r0, [sp, #32]
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d100      	bne.n	80080c8 <_strtod_l+0x6ac>
 80080c6:	e70c      	b.n	8007ee2 <_strtod_l+0x4c6>
 80080c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ca:	300c      	adds	r0, #12
 80080cc:	0019      	movs	r1, r3
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	310c      	adds	r1, #12
 80080d2:	3202      	adds	r2, #2
 80080d4:	0092      	lsls	r2, r2, #2
 80080d6:	f000 fd88 	bl	8008bea <memcpy>
 80080da:	ab1e      	add	r3, sp, #120	; 0x78
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	ab1d      	add	r3, sp, #116	; 0x74
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	0032      	movs	r2, r6
 80080e4:	003b      	movs	r3, r7
 80080e6:	9804      	ldr	r0, [sp, #16]
 80080e8:	9610      	str	r6, [sp, #64]	; 0x40
 80080ea:	9711      	str	r7, [sp, #68]	; 0x44
 80080ec:	f001 fdb6 	bl	8009c5c <__d2b>
 80080f0:	901c      	str	r0, [sp, #112]	; 0x70
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d100      	bne.n	80080f8 <_strtod_l+0x6dc>
 80080f6:	e6f4      	b.n	8007ee2 <_strtod_l+0x4c6>
 80080f8:	2101      	movs	r1, #1
 80080fa:	9804      	ldr	r0, [sp, #16]
 80080fc:	f001 fb1a 	bl	8009734 <__i2b>
 8008100:	9006      	str	r0, [sp, #24]
 8008102:	2800      	cmp	r0, #0
 8008104:	d100      	bne.n	8008108 <_strtod_l+0x6ec>
 8008106:	e6ec      	b.n	8007ee2 <_strtod_l+0x4c6>
 8008108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800810a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800810c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800810e:	1ad4      	subs	r4, r2, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	db01      	blt.n	8008118 <_strtod_l+0x6fc>
 8008114:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008116:	195d      	adds	r5, r3, r5
 8008118:	9907      	ldr	r1, [sp, #28]
 800811a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800811c:	1a5b      	subs	r3, r3, r1
 800811e:	2136      	movs	r1, #54	; 0x36
 8008120:	189b      	adds	r3, r3, r2
 8008122:	1a8a      	subs	r2, r1, r2
 8008124:	4985      	ldr	r1, [pc, #532]	; (800833c <_strtod_l+0x920>)
 8008126:	2001      	movs	r0, #1
 8008128:	468c      	mov	ip, r1
 800812a:	2100      	movs	r1, #0
 800812c:	3b01      	subs	r3, #1
 800812e:	9114      	str	r1, [sp, #80]	; 0x50
 8008130:	9012      	str	r0, [sp, #72]	; 0x48
 8008132:	4563      	cmp	r3, ip
 8008134:	da07      	bge.n	8008146 <_strtod_l+0x72a>
 8008136:	4661      	mov	r1, ip
 8008138:	1ac9      	subs	r1, r1, r3
 800813a:	1a52      	subs	r2, r2, r1
 800813c:	291f      	cmp	r1, #31
 800813e:	dd00      	ble.n	8008142 <_strtod_l+0x726>
 8008140:	e0b6      	b.n	80082b0 <_strtod_l+0x894>
 8008142:	4088      	lsls	r0, r1
 8008144:	9012      	str	r0, [sp, #72]	; 0x48
 8008146:	18ab      	adds	r3, r5, r2
 8008148:	930c      	str	r3, [sp, #48]	; 0x30
 800814a:	18a4      	adds	r4, r4, r2
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008150:	191c      	adds	r4, r3, r4
 8008152:	002b      	movs	r3, r5
 8008154:	4295      	cmp	r5, r2
 8008156:	dd00      	ble.n	800815a <_strtod_l+0x73e>
 8008158:	0013      	movs	r3, r2
 800815a:	42a3      	cmp	r3, r4
 800815c:	dd00      	ble.n	8008160 <_strtod_l+0x744>
 800815e:	0023      	movs	r3, r4
 8008160:	2b00      	cmp	r3, #0
 8008162:	dd04      	ble.n	800816e <_strtod_l+0x752>
 8008164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008166:	1ae4      	subs	r4, r4, r3
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	920c      	str	r2, [sp, #48]	; 0x30
 800816c:	1aed      	subs	r5, r5, r3
 800816e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd17      	ble.n	80081a4 <_strtod_l+0x788>
 8008174:	001a      	movs	r2, r3
 8008176:	9906      	ldr	r1, [sp, #24]
 8008178:	9804      	ldr	r0, [sp, #16]
 800817a:	f001 fba3 	bl	80098c4 <__pow5mult>
 800817e:	9006      	str	r0, [sp, #24]
 8008180:	2800      	cmp	r0, #0
 8008182:	d100      	bne.n	8008186 <_strtod_l+0x76a>
 8008184:	e6ad      	b.n	8007ee2 <_strtod_l+0x4c6>
 8008186:	0001      	movs	r1, r0
 8008188:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800818a:	9804      	ldr	r0, [sp, #16]
 800818c:	f001 faea 	bl	8009764 <__multiply>
 8008190:	900e      	str	r0, [sp, #56]	; 0x38
 8008192:	2800      	cmp	r0, #0
 8008194:	d100      	bne.n	8008198 <_strtod_l+0x77c>
 8008196:	e6a4      	b.n	8007ee2 <_strtod_l+0x4c6>
 8008198:	991c      	ldr	r1, [sp, #112]	; 0x70
 800819a:	9804      	ldr	r0, [sp, #16]
 800819c:	f001 f9e8 	bl	8009570 <_Bfree>
 80081a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a2:	931c      	str	r3, [sp, #112]	; 0x70
 80081a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dd00      	ble.n	80081ac <_strtod_l+0x790>
 80081aa:	e087      	b.n	80082bc <_strtod_l+0x8a0>
 80081ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd08      	ble.n	80081c4 <_strtod_l+0x7a8>
 80081b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	9804      	ldr	r0, [sp, #16]
 80081b8:	f001 fb84 	bl	80098c4 <__pow5mult>
 80081bc:	9008      	str	r0, [sp, #32]
 80081be:	2800      	cmp	r0, #0
 80081c0:	d100      	bne.n	80081c4 <_strtod_l+0x7a8>
 80081c2:	e68e      	b.n	8007ee2 <_strtod_l+0x4c6>
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	dd08      	ble.n	80081da <_strtod_l+0x7be>
 80081c8:	0022      	movs	r2, r4
 80081ca:	9908      	ldr	r1, [sp, #32]
 80081cc:	9804      	ldr	r0, [sp, #16]
 80081ce:	f001 fbbb 	bl	8009948 <__lshift>
 80081d2:	9008      	str	r0, [sp, #32]
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d100      	bne.n	80081da <_strtod_l+0x7be>
 80081d8:	e683      	b.n	8007ee2 <_strtod_l+0x4c6>
 80081da:	2d00      	cmp	r5, #0
 80081dc:	dd08      	ble.n	80081f0 <_strtod_l+0x7d4>
 80081de:	002a      	movs	r2, r5
 80081e0:	9906      	ldr	r1, [sp, #24]
 80081e2:	9804      	ldr	r0, [sp, #16]
 80081e4:	f001 fbb0 	bl	8009948 <__lshift>
 80081e8:	9006      	str	r0, [sp, #24]
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d100      	bne.n	80081f0 <_strtod_l+0x7d4>
 80081ee:	e678      	b.n	8007ee2 <_strtod_l+0x4c6>
 80081f0:	9a08      	ldr	r2, [sp, #32]
 80081f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081f4:	9804      	ldr	r0, [sp, #16]
 80081f6:	f001 fc31 	bl	8009a5c <__mdiff>
 80081fa:	9005      	str	r0, [sp, #20]
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d100      	bne.n	8008202 <_strtod_l+0x7e6>
 8008200:	e66f      	b.n	8007ee2 <_strtod_l+0x4c6>
 8008202:	2200      	movs	r2, #0
 8008204:	68c3      	ldr	r3, [r0, #12]
 8008206:	9906      	ldr	r1, [sp, #24]
 8008208:	60c2      	str	r2, [r0, #12]
 800820a:	930c      	str	r3, [sp, #48]	; 0x30
 800820c:	f001 fc0a 	bl	8009a24 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	da5d      	bge.n	80082d0 <_strtod_l+0x8b4>
 8008214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008216:	4333      	orrs	r3, r6
 8008218:	d000      	beq.n	800821c <_strtod_l+0x800>
 800821a:	e088      	b.n	800832e <_strtod_l+0x912>
 800821c:	033b      	lsls	r3, r7, #12
 800821e:	d000      	beq.n	8008222 <_strtod_l+0x806>
 8008220:	e085      	b.n	800832e <_strtod_l+0x912>
 8008222:	22d6      	movs	r2, #214	; 0xd6
 8008224:	4b46      	ldr	r3, [pc, #280]	; (8008340 <_strtod_l+0x924>)
 8008226:	04d2      	lsls	r2, r2, #19
 8008228:	403b      	ands	r3, r7
 800822a:	4293      	cmp	r3, r2
 800822c:	d97f      	bls.n	800832e <_strtod_l+0x912>
 800822e:	9b05      	ldr	r3, [sp, #20]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <_strtod_l+0x822>
 8008236:	9b05      	ldr	r3, [sp, #20]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b01      	cmp	r3, #1
 800823c:	dd77      	ble.n	800832e <_strtod_l+0x912>
 800823e:	9905      	ldr	r1, [sp, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	9804      	ldr	r0, [sp, #16]
 8008244:	f001 fb80 	bl	8009948 <__lshift>
 8008248:	9906      	ldr	r1, [sp, #24]
 800824a:	9005      	str	r0, [sp, #20]
 800824c:	f001 fbea 	bl	8009a24 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	dd6c      	ble.n	800832e <_strtod_l+0x912>
 8008254:	9907      	ldr	r1, [sp, #28]
 8008256:	003b      	movs	r3, r7
 8008258:	4a39      	ldr	r2, [pc, #228]	; (8008340 <_strtod_l+0x924>)
 800825a:	2900      	cmp	r1, #0
 800825c:	d100      	bne.n	8008260 <_strtod_l+0x844>
 800825e:	e094      	b.n	800838a <_strtod_l+0x96e>
 8008260:	0011      	movs	r1, r2
 8008262:	20d6      	movs	r0, #214	; 0xd6
 8008264:	4039      	ands	r1, r7
 8008266:	04c0      	lsls	r0, r0, #19
 8008268:	4281      	cmp	r1, r0
 800826a:	dd00      	ble.n	800826e <_strtod_l+0x852>
 800826c:	e08d      	b.n	800838a <_strtod_l+0x96e>
 800826e:	23dc      	movs	r3, #220	; 0xdc
 8008270:	049b      	lsls	r3, r3, #18
 8008272:	4299      	cmp	r1, r3
 8008274:	dc00      	bgt.n	8008278 <_strtod_l+0x85c>
 8008276:	e6a7      	b.n	8007fc8 <_strtod_l+0x5ac>
 8008278:	0030      	movs	r0, r6
 800827a:	0039      	movs	r1, r7
 800827c:	4b31      	ldr	r3, [pc, #196]	; (8008344 <_strtod_l+0x928>)
 800827e:	2200      	movs	r2, #0
 8008280:	f7f9 f9f4 	bl	800166c <__aeabi_dmul>
 8008284:	4b2e      	ldr	r3, [pc, #184]	; (8008340 <_strtod_l+0x924>)
 8008286:	0006      	movs	r6, r0
 8008288:	000f      	movs	r7, r1
 800828a:	420b      	tst	r3, r1
 800828c:	d000      	beq.n	8008290 <_strtod_l+0x874>
 800828e:	e631      	b.n	8007ef4 <_strtod_l+0x4d8>
 8008290:	2322      	movs	r3, #34	; 0x22
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	e62d      	b.n	8007ef4 <_strtod_l+0x4d8>
 8008298:	234b      	movs	r3, #75	; 0x4b
 800829a:	1a9a      	subs	r2, r3, r2
 800829c:	3b4c      	subs	r3, #76	; 0x4c
 800829e:	4093      	lsls	r3, r2
 80082a0:	4019      	ands	r1, r3
 80082a2:	000f      	movs	r7, r1
 80082a4:	e6e3      	b.n	800806e <_strtod_l+0x652>
 80082a6:	2201      	movs	r2, #1
 80082a8:	4252      	negs	r2, r2
 80082aa:	409a      	lsls	r2, r3
 80082ac:	4016      	ands	r6, r2
 80082ae:	e6de      	b.n	800806e <_strtod_l+0x652>
 80082b0:	4925      	ldr	r1, [pc, #148]	; (8008348 <_strtod_l+0x92c>)
 80082b2:	1acb      	subs	r3, r1, r3
 80082b4:	0001      	movs	r1, r0
 80082b6:	4099      	lsls	r1, r3
 80082b8:	9114      	str	r1, [sp, #80]	; 0x50
 80082ba:	e743      	b.n	8008144 <_strtod_l+0x728>
 80082bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082c0:	9804      	ldr	r0, [sp, #16]
 80082c2:	f001 fb41 	bl	8009948 <__lshift>
 80082c6:	901c      	str	r0, [sp, #112]	; 0x70
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d000      	beq.n	80082ce <_strtod_l+0x8b2>
 80082cc:	e76e      	b.n	80081ac <_strtod_l+0x790>
 80082ce:	e608      	b.n	8007ee2 <_strtod_l+0x4c6>
 80082d0:	970e      	str	r7, [sp, #56]	; 0x38
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d177      	bne.n	80083c6 <_strtod_l+0x9aa>
 80082d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082d8:	033b      	lsls	r3, r7, #12
 80082da:	0b1b      	lsrs	r3, r3, #12
 80082dc:	2a00      	cmp	r2, #0
 80082de:	d039      	beq.n	8008354 <_strtod_l+0x938>
 80082e0:	4a1a      	ldr	r2, [pc, #104]	; (800834c <_strtod_l+0x930>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d139      	bne.n	800835a <_strtod_l+0x93e>
 80082e6:	2101      	movs	r1, #1
 80082e8:	9b07      	ldr	r3, [sp, #28]
 80082ea:	4249      	negs	r1, r1
 80082ec:	0032      	movs	r2, r6
 80082ee:	0008      	movs	r0, r1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <_strtod_l+0x8f0>
 80082f4:	24d4      	movs	r4, #212	; 0xd4
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <_strtod_l+0x924>)
 80082f8:	0008      	movs	r0, r1
 80082fa:	403b      	ands	r3, r7
 80082fc:	04e4      	lsls	r4, r4, #19
 80082fe:	42a3      	cmp	r3, r4
 8008300:	d804      	bhi.n	800830c <_strtod_l+0x8f0>
 8008302:	306c      	adds	r0, #108	; 0x6c
 8008304:	0d1b      	lsrs	r3, r3, #20
 8008306:	1ac3      	subs	r3, r0, r3
 8008308:	4099      	lsls	r1, r3
 800830a:	0008      	movs	r0, r1
 800830c:	4282      	cmp	r2, r0
 800830e:	d124      	bne.n	800835a <_strtod_l+0x93e>
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <_strtod_l+0x934>)
 8008312:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008314:	4299      	cmp	r1, r3
 8008316:	d102      	bne.n	800831e <_strtod_l+0x902>
 8008318:	3201      	adds	r2, #1
 800831a:	d100      	bne.n	800831e <_strtod_l+0x902>
 800831c:	e5e1      	b.n	8007ee2 <_strtod_l+0x4c6>
 800831e:	4b08      	ldr	r3, [pc, #32]	; (8008340 <_strtod_l+0x924>)
 8008320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008322:	2600      	movs	r6, #0
 8008324:	401a      	ands	r2, r3
 8008326:	0013      	movs	r3, r2
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	0352      	lsls	r2, r2, #13
 800832c:	189f      	adds	r7, r3, r2
 800832e:	9b07      	ldr	r3, [sp, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1a1      	bne.n	8008278 <_strtod_l+0x85c>
 8008334:	e5de      	b.n	8007ef4 <_strtod_l+0x4d8>
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	0800f710 	.word	0x0800f710
 800833c:	fffffc02 	.word	0xfffffc02
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	39500000 	.word	0x39500000
 8008348:	fffffbe2 	.word	0xfffffbe2
 800834c:	000fffff 	.word	0x000fffff
 8008350:	7fefffff 	.word	0x7fefffff
 8008354:	4333      	orrs	r3, r6
 8008356:	d100      	bne.n	800835a <_strtod_l+0x93e>
 8008358:	e77c      	b.n	8008254 <_strtod_l+0x838>
 800835a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01d      	beq.n	800839c <_strtod_l+0x980>
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008364:	4213      	tst	r3, r2
 8008366:	d0e2      	beq.n	800832e <_strtod_l+0x912>
 8008368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800836a:	0030      	movs	r0, r6
 800836c:	0039      	movs	r1, r7
 800836e:	9a07      	ldr	r2, [sp, #28]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d017      	beq.n	80083a4 <_strtod_l+0x988>
 8008374:	f7ff fb3a 	bl	80079ec <sulp>
 8008378:	0002      	movs	r2, r0
 800837a:	000b      	movs	r3, r1
 800837c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800837e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008380:	f7f8 fa1a 	bl	80007b8 <__aeabi_dadd>
 8008384:	0006      	movs	r6, r0
 8008386:	000f      	movs	r7, r1
 8008388:	e7d1      	b.n	800832e <_strtod_l+0x912>
 800838a:	2601      	movs	r6, #1
 800838c:	4013      	ands	r3, r2
 800838e:	4a98      	ldr	r2, [pc, #608]	; (80085f0 <_strtod_l+0xbd4>)
 8008390:	4276      	negs	r6, r6
 8008392:	189b      	adds	r3, r3, r2
 8008394:	4a97      	ldr	r2, [pc, #604]	; (80085f4 <_strtod_l+0xbd8>)
 8008396:	431a      	orrs	r2, r3
 8008398:	0017      	movs	r7, r2
 800839a:	e7c8      	b.n	800832e <_strtod_l+0x912>
 800839c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800839e:	4233      	tst	r3, r6
 80083a0:	d0c5      	beq.n	800832e <_strtod_l+0x912>
 80083a2:	e7e1      	b.n	8008368 <_strtod_l+0x94c>
 80083a4:	f7ff fb22 	bl	80079ec <sulp>
 80083a8:	0002      	movs	r2, r0
 80083aa:	000b      	movs	r3, r1
 80083ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083b0:	f7f9 fc1e 	bl	8001bf0 <__aeabi_dsub>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	0006      	movs	r6, r0
 80083ba:	000f      	movs	r7, r1
 80083bc:	f7f8 f844 	bl	8000448 <__aeabi_dcmpeq>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d0b4      	beq.n	800832e <_strtod_l+0x912>
 80083c4:	e600      	b.n	8007fc8 <_strtod_l+0x5ac>
 80083c6:	9906      	ldr	r1, [sp, #24]
 80083c8:	9805      	ldr	r0, [sp, #20]
 80083ca:	f001 fca7 	bl	8009d1c <__ratio>
 80083ce:	2380      	movs	r3, #128	; 0x80
 80083d0:	2200      	movs	r2, #0
 80083d2:	05db      	lsls	r3, r3, #23
 80083d4:	0004      	movs	r4, r0
 80083d6:	000d      	movs	r5, r1
 80083d8:	f7f8 f846 	bl	8000468 <__aeabi_dcmple>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d06d      	beq.n	80084bc <_strtod_l+0xaa0>
 80083e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d000      	beq.n	80083e8 <_strtod_l+0x9cc>
 80083e6:	e07e      	b.n	80084e6 <_strtod_l+0xaca>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d158      	bne.n	800849e <_strtod_l+0xa82>
 80083ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	d000      	beq.n	80083f4 <_strtod_l+0x9d8>
 80083f2:	e07f      	b.n	80084f4 <_strtod_l+0xad8>
 80083f4:	2200      	movs	r2, #0
 80083f6:	0020      	movs	r0, r4
 80083f8:	0029      	movs	r1, r5
 80083fa:	4b7f      	ldr	r3, [pc, #508]	; (80085f8 <_strtod_l+0xbdc>)
 80083fc:	f7f8 f82a 	bl	8000454 <__aeabi_dcmplt>
 8008400:	2800      	cmp	r0, #0
 8008402:	d158      	bne.n	80084b6 <_strtod_l+0xa9a>
 8008404:	0020      	movs	r0, r4
 8008406:	0029      	movs	r1, r5
 8008408:	2200      	movs	r2, #0
 800840a:	4b7c      	ldr	r3, [pc, #496]	; (80085fc <_strtod_l+0xbe0>)
 800840c:	f7f9 f92e 	bl	800166c <__aeabi_dmul>
 8008410:	0004      	movs	r4, r0
 8008412:	000d      	movs	r5, r1
 8008414:	2380      	movs	r3, #128	; 0x80
 8008416:	061b      	lsls	r3, r3, #24
 8008418:	940a      	str	r4, [sp, #40]	; 0x28
 800841a:	18eb      	adds	r3, r5, r3
 800841c:	930b      	str	r3, [sp, #44]	; 0x2c
 800841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	9212      	str	r2, [sp, #72]	; 0x48
 8008424:	9313      	str	r3, [sp, #76]	; 0x4c
 8008426:	4a76      	ldr	r2, [pc, #472]	; (8008600 <_strtod_l+0xbe4>)
 8008428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800842a:	4013      	ands	r3, r2
 800842c:	9314      	str	r3, [sp, #80]	; 0x50
 800842e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008430:	4b74      	ldr	r3, [pc, #464]	; (8008604 <_strtod_l+0xbe8>)
 8008432:	429a      	cmp	r2, r3
 8008434:	d000      	beq.n	8008438 <_strtod_l+0xa1c>
 8008436:	e091      	b.n	800855c <_strtod_l+0xb40>
 8008438:	4a73      	ldr	r2, [pc, #460]	; (8008608 <_strtod_l+0xbec>)
 800843a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800843c:	4694      	mov	ip, r2
 800843e:	4463      	add	r3, ip
 8008440:	001f      	movs	r7, r3
 8008442:	0030      	movs	r0, r6
 8008444:	0019      	movs	r1, r3
 8008446:	f001 fba1 	bl	8009b8c <__ulp>
 800844a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844e:	f7f9 f90d 	bl	800166c <__aeabi_dmul>
 8008452:	0032      	movs	r2, r6
 8008454:	003b      	movs	r3, r7
 8008456:	f7f8 f9af 	bl	80007b8 <__aeabi_dadd>
 800845a:	4a69      	ldr	r2, [pc, #420]	; (8008600 <_strtod_l+0xbe4>)
 800845c:	4b6b      	ldr	r3, [pc, #428]	; (800860c <_strtod_l+0xbf0>)
 800845e:	0006      	movs	r6, r0
 8008460:	400a      	ands	r2, r1
 8008462:	429a      	cmp	r2, r3
 8008464:	d949      	bls.n	80084fa <_strtod_l+0xade>
 8008466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008468:	4b69      	ldr	r3, [pc, #420]	; (8008610 <_strtod_l+0xbf4>)
 800846a:	429a      	cmp	r2, r3
 800846c:	d103      	bne.n	8008476 <_strtod_l+0xa5a>
 800846e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008470:	3301      	adds	r3, #1
 8008472:	d100      	bne.n	8008476 <_strtod_l+0xa5a>
 8008474:	e535      	b.n	8007ee2 <_strtod_l+0x4c6>
 8008476:	2601      	movs	r6, #1
 8008478:	4f65      	ldr	r7, [pc, #404]	; (8008610 <_strtod_l+0xbf4>)
 800847a:	4276      	negs	r6, r6
 800847c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800847e:	9804      	ldr	r0, [sp, #16]
 8008480:	f001 f876 	bl	8009570 <_Bfree>
 8008484:	9908      	ldr	r1, [sp, #32]
 8008486:	9804      	ldr	r0, [sp, #16]
 8008488:	f001 f872 	bl	8009570 <_Bfree>
 800848c:	9906      	ldr	r1, [sp, #24]
 800848e:	9804      	ldr	r0, [sp, #16]
 8008490:	f001 f86e 	bl	8009570 <_Bfree>
 8008494:	9905      	ldr	r1, [sp, #20]
 8008496:	9804      	ldr	r0, [sp, #16]
 8008498:	f001 f86a 	bl	8009570 <_Bfree>
 800849c:	e60b      	b.n	80080b6 <_strtod_l+0x69a>
 800849e:	2e01      	cmp	r6, #1
 80084a0:	d103      	bne.n	80084aa <_strtod_l+0xa8e>
 80084a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d100      	bne.n	80084aa <_strtod_l+0xa8e>
 80084a8:	e58e      	b.n	8007fc8 <_strtod_l+0x5ac>
 80084aa:	2300      	movs	r3, #0
 80084ac:	4c59      	ldr	r4, [pc, #356]	; (8008614 <_strtod_l+0xbf8>)
 80084ae:	930a      	str	r3, [sp, #40]	; 0x28
 80084b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80084b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80084b4:	e01c      	b.n	80084f0 <_strtod_l+0xad4>
 80084b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80084b8:	4d50      	ldr	r5, [pc, #320]	; (80085fc <_strtod_l+0xbe0>)
 80084ba:	e7ab      	b.n	8008414 <_strtod_l+0x9f8>
 80084bc:	2200      	movs	r2, #0
 80084be:	0020      	movs	r0, r4
 80084c0:	0029      	movs	r1, r5
 80084c2:	4b4e      	ldr	r3, [pc, #312]	; (80085fc <_strtod_l+0xbe0>)
 80084c4:	f7f9 f8d2 	bl	800166c <__aeabi_dmul>
 80084c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ca:	0004      	movs	r4, r0
 80084cc:	000b      	movs	r3, r1
 80084ce:	000d      	movs	r5, r1
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d104      	bne.n	80084de <_strtod_l+0xac2>
 80084d4:	2280      	movs	r2, #128	; 0x80
 80084d6:	0612      	lsls	r2, r2, #24
 80084d8:	900a      	str	r0, [sp, #40]	; 0x28
 80084da:	188b      	adds	r3, r1, r2
 80084dc:	e79e      	b.n	800841c <_strtod_l+0xa00>
 80084de:	0002      	movs	r2, r0
 80084e0:	920a      	str	r2, [sp, #40]	; 0x28
 80084e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e4:	e79b      	b.n	800841e <_strtod_l+0xa02>
 80084e6:	2300      	movs	r3, #0
 80084e8:	4c43      	ldr	r4, [pc, #268]	; (80085f8 <_strtod_l+0xbdc>)
 80084ea:	930a      	str	r3, [sp, #40]	; 0x28
 80084ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80084ee:	2400      	movs	r4, #0
 80084f0:	4d41      	ldr	r5, [pc, #260]	; (80085f8 <_strtod_l+0xbdc>)
 80084f2:	e794      	b.n	800841e <_strtod_l+0xa02>
 80084f4:	2300      	movs	r3, #0
 80084f6:	4c47      	ldr	r4, [pc, #284]	; (8008614 <_strtod_l+0xbf8>)
 80084f8:	e7f7      	b.n	80084ea <_strtod_l+0xace>
 80084fa:	23d4      	movs	r3, #212	; 0xd4
 80084fc:	049b      	lsls	r3, r3, #18
 80084fe:	18cf      	adds	r7, r1, r3
 8008500:	9b07      	ldr	r3, [sp, #28]
 8008502:	970e      	str	r7, [sp, #56]	; 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1b9      	bne.n	800847c <_strtod_l+0xa60>
 8008508:	4b3d      	ldr	r3, [pc, #244]	; (8008600 <_strtod_l+0xbe4>)
 800850a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800850c:	403b      	ands	r3, r7
 800850e:	429a      	cmp	r2, r3
 8008510:	d1b4      	bne.n	800847c <_strtod_l+0xa60>
 8008512:	0020      	movs	r0, r4
 8008514:	0029      	movs	r1, r5
 8008516:	f7f8 f831 	bl	800057c <__aeabi_d2lz>
 800851a:	f7f8 f86b 	bl	80005f4 <__aeabi_l2d>
 800851e:	0002      	movs	r2, r0
 8008520:	000b      	movs	r3, r1
 8008522:	0020      	movs	r0, r4
 8008524:	0029      	movs	r1, r5
 8008526:	f7f9 fb63 	bl	8001bf0 <__aeabi_dsub>
 800852a:	033b      	lsls	r3, r7, #12
 800852c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800852e:	0b1b      	lsrs	r3, r3, #12
 8008530:	4333      	orrs	r3, r6
 8008532:	4313      	orrs	r3, r2
 8008534:	0004      	movs	r4, r0
 8008536:	000d      	movs	r5, r1
 8008538:	4a37      	ldr	r2, [pc, #220]	; (8008618 <_strtod_l+0xbfc>)
 800853a:	2b00      	cmp	r3, #0
 800853c:	d054      	beq.n	80085e8 <_strtod_l+0xbcc>
 800853e:	4b37      	ldr	r3, [pc, #220]	; (800861c <_strtod_l+0xc00>)
 8008540:	f7f7 ff88 	bl	8000454 <__aeabi_dcmplt>
 8008544:	2800      	cmp	r0, #0
 8008546:	d000      	beq.n	800854a <_strtod_l+0xb2e>
 8008548:	e4d4      	b.n	8007ef4 <_strtod_l+0x4d8>
 800854a:	0020      	movs	r0, r4
 800854c:	0029      	movs	r1, r5
 800854e:	4a34      	ldr	r2, [pc, #208]	; (8008620 <_strtod_l+0xc04>)
 8008550:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <_strtod_l+0xbe0>)
 8008552:	f7f7 ff93 	bl	800047c <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d090      	beq.n	800847c <_strtod_l+0xa60>
 800855a:	e4cb      	b.n	8007ef4 <_strtod_l+0x4d8>
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d02b      	beq.n	80085ba <_strtod_l+0xb9e>
 8008562:	23d4      	movs	r3, #212	; 0xd4
 8008564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008566:	04db      	lsls	r3, r3, #19
 8008568:	429a      	cmp	r2, r3
 800856a:	d826      	bhi.n	80085ba <_strtod_l+0xb9e>
 800856c:	0020      	movs	r0, r4
 800856e:	0029      	movs	r1, r5
 8008570:	4a2c      	ldr	r2, [pc, #176]	; (8008624 <_strtod_l+0xc08>)
 8008572:	4b2d      	ldr	r3, [pc, #180]	; (8008628 <_strtod_l+0xc0c>)
 8008574:	f7f7 ff78 	bl	8000468 <__aeabi_dcmple>
 8008578:	2800      	cmp	r0, #0
 800857a:	d017      	beq.n	80085ac <_strtod_l+0xb90>
 800857c:	0020      	movs	r0, r4
 800857e:	0029      	movs	r1, r5
 8008580:	f7f7 ffde 	bl	8000540 <__aeabi_d2uiz>
 8008584:	2800      	cmp	r0, #0
 8008586:	d100      	bne.n	800858a <_strtod_l+0xb6e>
 8008588:	3001      	adds	r0, #1
 800858a:	f7f9 ff37 	bl	80023fc <__aeabi_ui2d>
 800858e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008590:	0004      	movs	r4, r0
 8008592:	000b      	movs	r3, r1
 8008594:	000d      	movs	r5, r1
 8008596:	2a00      	cmp	r2, #0
 8008598:	d122      	bne.n	80085e0 <_strtod_l+0xbc4>
 800859a:	2280      	movs	r2, #128	; 0x80
 800859c:	0612      	lsls	r2, r2, #24
 800859e:	188b      	adds	r3, r1, r2
 80085a0:	9016      	str	r0, [sp, #88]	; 0x58
 80085a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80085a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085a8:	9212      	str	r2, [sp, #72]	; 0x48
 80085aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80085ac:	22d6      	movs	r2, #214	; 0xd6
 80085ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085b0:	04d2      	lsls	r2, r2, #19
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80085ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80085bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80085c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80085c2:	f001 fae3 	bl	8009b8c <__ulp>
 80085c6:	0002      	movs	r2, r0
 80085c8:	000b      	movs	r3, r1
 80085ca:	0030      	movs	r0, r6
 80085cc:	0039      	movs	r1, r7
 80085ce:	f7f9 f84d 	bl	800166c <__aeabi_dmul>
 80085d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085d6:	f7f8 f8ef 	bl	80007b8 <__aeabi_dadd>
 80085da:	0006      	movs	r6, r0
 80085dc:	000f      	movs	r7, r1
 80085de:	e78f      	b.n	8008500 <_strtod_l+0xae4>
 80085e0:	0002      	movs	r2, r0
 80085e2:	9216      	str	r2, [sp, #88]	; 0x58
 80085e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80085e6:	e7dd      	b.n	80085a4 <_strtod_l+0xb88>
 80085e8:	4b10      	ldr	r3, [pc, #64]	; (800862c <_strtod_l+0xc10>)
 80085ea:	f7f7 ff33 	bl	8000454 <__aeabi_dcmplt>
 80085ee:	e7b2      	b.n	8008556 <_strtod_l+0xb3a>
 80085f0:	fff00000 	.word	0xfff00000
 80085f4:	000fffff 	.word	0x000fffff
 80085f8:	3ff00000 	.word	0x3ff00000
 80085fc:	3fe00000 	.word	0x3fe00000
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	7fe00000 	.word	0x7fe00000
 8008608:	fcb00000 	.word	0xfcb00000
 800860c:	7c9fffff 	.word	0x7c9fffff
 8008610:	7fefffff 	.word	0x7fefffff
 8008614:	bff00000 	.word	0xbff00000
 8008618:	94a03595 	.word	0x94a03595
 800861c:	3fdfffff 	.word	0x3fdfffff
 8008620:	35afe535 	.word	0x35afe535
 8008624:	ffc00000 	.word	0xffc00000
 8008628:	41dfffff 	.word	0x41dfffff
 800862c:	3fcfffff 	.word	0x3fcfffff

08008630 <_strtod_r>:
 8008630:	b510      	push	{r4, lr}
 8008632:	4b02      	ldr	r3, [pc, #8]	; (800863c <_strtod_r+0xc>)
 8008634:	f7ff f9f2 	bl	8007a1c <_strtod_l>
 8008638:	bd10      	pop	{r4, pc}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	20000430 	.word	0x20000430

08008640 <_strtol_l.constprop.0>:
 8008640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008642:	b087      	sub	sp, #28
 8008644:	001e      	movs	r6, r3
 8008646:	9005      	str	r0, [sp, #20]
 8008648:	9101      	str	r1, [sp, #4]
 800864a:	9202      	str	r2, [sp, #8]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d048      	beq.n	80086e2 <_strtol_l.constprop.0+0xa2>
 8008650:	000b      	movs	r3, r1
 8008652:	2e24      	cmp	r6, #36	; 0x24
 8008654:	d845      	bhi.n	80086e2 <_strtol_l.constprop.0+0xa2>
 8008656:	4a3b      	ldr	r2, [pc, #236]	; (8008744 <_strtol_l.constprop.0+0x104>)
 8008658:	2108      	movs	r1, #8
 800865a:	4694      	mov	ip, r2
 800865c:	001a      	movs	r2, r3
 800865e:	4660      	mov	r0, ip
 8008660:	7814      	ldrb	r4, [r2, #0]
 8008662:	3301      	adds	r3, #1
 8008664:	5d00      	ldrb	r0, [r0, r4]
 8008666:	001d      	movs	r5, r3
 8008668:	0007      	movs	r7, r0
 800866a:	400f      	ands	r7, r1
 800866c:	4208      	tst	r0, r1
 800866e:	d1f5      	bne.n	800865c <_strtol_l.constprop.0+0x1c>
 8008670:	2c2d      	cmp	r4, #45	; 0x2d
 8008672:	d13d      	bne.n	80086f0 <_strtol_l.constprop.0+0xb0>
 8008674:	2701      	movs	r7, #1
 8008676:	781c      	ldrb	r4, [r3, #0]
 8008678:	1c95      	adds	r5, r2, #2
 800867a:	2e00      	cmp	r6, #0
 800867c:	d05e      	beq.n	800873c <_strtol_l.constprop.0+0xfc>
 800867e:	2e10      	cmp	r6, #16
 8008680:	d109      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008682:	2c30      	cmp	r4, #48	; 0x30
 8008684:	d107      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008686:	2220      	movs	r2, #32
 8008688:	782b      	ldrb	r3, [r5, #0]
 800868a:	4393      	bics	r3, r2
 800868c:	2b58      	cmp	r3, #88	; 0x58
 800868e:	d150      	bne.n	8008732 <_strtol_l.constprop.0+0xf2>
 8008690:	2610      	movs	r6, #16
 8008692:	786c      	ldrb	r4, [r5, #1]
 8008694:	3502      	adds	r5, #2
 8008696:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <_strtol_l.constprop.0+0x108>)
 8008698:	0031      	movs	r1, r6
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	0018      	movs	r0, r3
 800869e:	9303      	str	r3, [sp, #12]
 80086a0:	f7f7 fdd2 	bl	8000248 <__aeabi_uidivmod>
 80086a4:	2200      	movs	r2, #0
 80086a6:	9104      	str	r1, [sp, #16]
 80086a8:	2101      	movs	r1, #1
 80086aa:	4684      	mov	ip, r0
 80086ac:	0010      	movs	r0, r2
 80086ae:	4249      	negs	r1, r1
 80086b0:	0023      	movs	r3, r4
 80086b2:	3b30      	subs	r3, #48	; 0x30
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d903      	bls.n	80086c0 <_strtol_l.constprop.0+0x80>
 80086b8:	3b11      	subs	r3, #17
 80086ba:	2b19      	cmp	r3, #25
 80086bc:	d81d      	bhi.n	80086fa <_strtol_l.constprop.0+0xba>
 80086be:	330a      	adds	r3, #10
 80086c0:	429e      	cmp	r6, r3
 80086c2:	dd1e      	ble.n	8008702 <_strtol_l.constprop.0+0xc2>
 80086c4:	1c54      	adds	r4, r2, #1
 80086c6:	d009      	beq.n	80086dc <_strtol_l.constprop.0+0x9c>
 80086c8:	000a      	movs	r2, r1
 80086ca:	4584      	cmp	ip, r0
 80086cc:	d306      	bcc.n	80086dc <_strtol_l.constprop.0+0x9c>
 80086ce:	d102      	bne.n	80086d6 <_strtol_l.constprop.0+0x96>
 80086d0:	9c04      	ldr	r4, [sp, #16]
 80086d2:	429c      	cmp	r4, r3
 80086d4:	db02      	blt.n	80086dc <_strtol_l.constprop.0+0x9c>
 80086d6:	2201      	movs	r2, #1
 80086d8:	4370      	muls	r0, r6
 80086da:	1818      	adds	r0, r3, r0
 80086dc:	782c      	ldrb	r4, [r5, #0]
 80086de:	3501      	adds	r5, #1
 80086e0:	e7e6      	b.n	80086b0 <_strtol_l.constprop.0+0x70>
 80086e2:	f000 fa49 	bl	8008b78 <__errno>
 80086e6:	2316      	movs	r3, #22
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	b007      	add	sp, #28
 80086ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f0:	2c2b      	cmp	r4, #43	; 0x2b
 80086f2:	d1c2      	bne.n	800867a <_strtol_l.constprop.0+0x3a>
 80086f4:	781c      	ldrb	r4, [r3, #0]
 80086f6:	1c95      	adds	r5, r2, #2
 80086f8:	e7bf      	b.n	800867a <_strtol_l.constprop.0+0x3a>
 80086fa:	0023      	movs	r3, r4
 80086fc:	3b61      	subs	r3, #97	; 0x61
 80086fe:	2b19      	cmp	r3, #25
 8008700:	d9dd      	bls.n	80086be <_strtol_l.constprop.0+0x7e>
 8008702:	1c53      	adds	r3, r2, #1
 8008704:	d109      	bne.n	800871a <_strtol_l.constprop.0+0xda>
 8008706:	2322      	movs	r3, #34	; 0x22
 8008708:	9a05      	ldr	r2, [sp, #20]
 800870a:	9803      	ldr	r0, [sp, #12]
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	9b02      	ldr	r3, [sp, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0eb      	beq.n	80086ec <_strtol_l.constprop.0+0xac>
 8008714:	1e6b      	subs	r3, r5, #1
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	e007      	b.n	800872a <_strtol_l.constprop.0+0xea>
 800871a:	2f00      	cmp	r7, #0
 800871c:	d000      	beq.n	8008720 <_strtol_l.constprop.0+0xe0>
 800871e:	4240      	negs	r0, r0
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0e2      	beq.n	80086ec <_strtol_l.constprop.0+0xac>
 8008726:	2a00      	cmp	r2, #0
 8008728:	d1f4      	bne.n	8008714 <_strtol_l.constprop.0+0xd4>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	9a01      	ldr	r2, [sp, #4]
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e7dc      	b.n	80086ec <_strtol_l.constprop.0+0xac>
 8008732:	2430      	movs	r4, #48	; 0x30
 8008734:	2e00      	cmp	r6, #0
 8008736:	d1ae      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008738:	3608      	adds	r6, #8
 800873a:	e7ac      	b.n	8008696 <_strtol_l.constprop.0+0x56>
 800873c:	2c30      	cmp	r4, #48	; 0x30
 800873e:	d0a2      	beq.n	8008686 <_strtol_l.constprop.0+0x46>
 8008740:	260a      	movs	r6, #10
 8008742:	e7a8      	b.n	8008696 <_strtol_l.constprop.0+0x56>
 8008744:	0800f739 	.word	0x0800f739
 8008748:	7fffffff 	.word	0x7fffffff

0800874c <_strtol_r>:
 800874c:	b510      	push	{r4, lr}
 800874e:	f7ff ff77 	bl	8008640 <_strtol_l.constprop.0>
 8008752:	bd10      	pop	{r4, pc}

08008754 <strtol>:
 8008754:	b510      	push	{r4, lr}
 8008756:	4c04      	ldr	r4, [pc, #16]	; (8008768 <strtol+0x14>)
 8008758:	0013      	movs	r3, r2
 800875a:	000a      	movs	r2, r1
 800875c:	0001      	movs	r1, r0
 800875e:	6820      	ldr	r0, [r4, #0]
 8008760:	f7ff ff6e 	bl	8008640 <_strtol_l.constprop.0>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	200006c0 	.word	0x200006c0

0800876c <std>:
 800876c:	2300      	movs	r3, #0
 800876e:	b510      	push	{r4, lr}
 8008770:	0004      	movs	r4, r0
 8008772:	6003      	str	r3, [r0, #0]
 8008774:	6043      	str	r3, [r0, #4]
 8008776:	6083      	str	r3, [r0, #8]
 8008778:	8181      	strh	r1, [r0, #12]
 800877a:	6643      	str	r3, [r0, #100]	; 0x64
 800877c:	81c2      	strh	r2, [r0, #14]
 800877e:	6103      	str	r3, [r0, #16]
 8008780:	6143      	str	r3, [r0, #20]
 8008782:	6183      	str	r3, [r0, #24]
 8008784:	0019      	movs	r1, r3
 8008786:	2208      	movs	r2, #8
 8008788:	305c      	adds	r0, #92	; 0x5c
 800878a:	f000 f949 	bl	8008a20 <memset>
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <std+0x50>)
 8008790:	61e4      	str	r4, [r4, #28]
 8008792:	6223      	str	r3, [r4, #32]
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <std+0x54>)
 8008796:	6263      	str	r3, [r4, #36]	; 0x24
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <std+0x58>)
 800879a:	62a3      	str	r3, [r4, #40]	; 0x28
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <std+0x5c>)
 800879e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <std+0x60>)
 80087a2:	429c      	cmp	r4, r3
 80087a4:	d005      	beq.n	80087b2 <std+0x46>
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <std+0x64>)
 80087a8:	429c      	cmp	r4, r3
 80087aa:	d002      	beq.n	80087b2 <std+0x46>
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <std+0x68>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d103      	bne.n	80087ba <std+0x4e>
 80087b2:	0020      	movs	r0, r4
 80087b4:	3058      	adds	r0, #88	; 0x58
 80087b6:	f000 fa09 	bl	8008bcc <__retarget_lock_init_recursive>
 80087ba:	bd10      	pop	{r4, pc}
 80087bc:	08008985 	.word	0x08008985
 80087c0:	080089b1 	.word	0x080089b1
 80087c4:	080089e9 	.word	0x080089e9
 80087c8:	08008a15 	.word	0x08008a15
 80087cc:	20000a78 	.word	0x20000a78
 80087d0:	20000ae0 	.word	0x20000ae0
 80087d4:	20000b48 	.word	0x20000b48

080087d8 <stdio_exit_handler>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4a03      	ldr	r2, [pc, #12]	; (80087e8 <stdio_exit_handler+0x10>)
 80087dc:	4903      	ldr	r1, [pc, #12]	; (80087ec <stdio_exit_handler+0x14>)
 80087de:	4804      	ldr	r0, [pc, #16]	; (80087f0 <stdio_exit_handler+0x18>)
 80087e0:	f000 f86c 	bl	80088bc <_fwalk_sglue>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	20000424 	.word	0x20000424
 80087ec:	0800c6cd 	.word	0x0800c6cd
 80087f0:	200005a0 	.word	0x200005a0

080087f4 <cleanup_stdio>:
 80087f4:	6841      	ldr	r1, [r0, #4]
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <cleanup_stdio+0x30>)
 80087f8:	b510      	push	{r4, lr}
 80087fa:	0004      	movs	r4, r0
 80087fc:	4299      	cmp	r1, r3
 80087fe:	d001      	beq.n	8008804 <cleanup_stdio+0x10>
 8008800:	f003 ff64 	bl	800c6cc <_fclose_r>
 8008804:	68a1      	ldr	r1, [r4, #8]
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <cleanup_stdio+0x34>)
 8008808:	4299      	cmp	r1, r3
 800880a:	d002      	beq.n	8008812 <cleanup_stdio+0x1e>
 800880c:	0020      	movs	r0, r4
 800880e:	f003 ff5d 	bl	800c6cc <_fclose_r>
 8008812:	68e1      	ldr	r1, [r4, #12]
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <cleanup_stdio+0x38>)
 8008816:	4299      	cmp	r1, r3
 8008818:	d002      	beq.n	8008820 <cleanup_stdio+0x2c>
 800881a:	0020      	movs	r0, r4
 800881c:	f003 ff56 	bl	800c6cc <_fclose_r>
 8008820:	bd10      	pop	{r4, pc}
 8008822:	46c0      	nop			; (mov r8, r8)
 8008824:	20000a78 	.word	0x20000a78
 8008828:	20000ae0 	.word	0x20000ae0
 800882c:	20000b48 	.word	0x20000b48

08008830 <global_stdio_init.part.0>:
 8008830:	b510      	push	{r4, lr}
 8008832:	4b09      	ldr	r3, [pc, #36]	; (8008858 <global_stdio_init.part.0+0x28>)
 8008834:	4a09      	ldr	r2, [pc, #36]	; (800885c <global_stdio_init.part.0+0x2c>)
 8008836:	2104      	movs	r1, #4
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	4809      	ldr	r0, [pc, #36]	; (8008860 <global_stdio_init.part.0+0x30>)
 800883c:	2200      	movs	r2, #0
 800883e:	f7ff ff95 	bl	800876c <std>
 8008842:	2201      	movs	r2, #1
 8008844:	2109      	movs	r1, #9
 8008846:	4807      	ldr	r0, [pc, #28]	; (8008864 <global_stdio_init.part.0+0x34>)
 8008848:	f7ff ff90 	bl	800876c <std>
 800884c:	2202      	movs	r2, #2
 800884e:	2112      	movs	r1, #18
 8008850:	4805      	ldr	r0, [pc, #20]	; (8008868 <global_stdio_init.part.0+0x38>)
 8008852:	f7ff ff8b 	bl	800876c <std>
 8008856:	bd10      	pop	{r4, pc}
 8008858:	20000bb0 	.word	0x20000bb0
 800885c:	080087d9 	.word	0x080087d9
 8008860:	20000a78 	.word	0x20000a78
 8008864:	20000ae0 	.word	0x20000ae0
 8008868:	20000b48 	.word	0x20000b48

0800886c <__sfp_lock_acquire>:
 800886c:	b510      	push	{r4, lr}
 800886e:	4802      	ldr	r0, [pc, #8]	; (8008878 <__sfp_lock_acquire+0xc>)
 8008870:	f000 f9ae 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 8008874:	bd10      	pop	{r4, pc}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	20000bba 	.word	0x20000bba

0800887c <__sfp_lock_release>:
 800887c:	b510      	push	{r4, lr}
 800887e:	4802      	ldr	r0, [pc, #8]	; (8008888 <__sfp_lock_release+0xc>)
 8008880:	f000 f9a7 	bl	8008bd2 <__retarget_lock_release_recursive>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	20000bba 	.word	0x20000bba

0800888c <__sinit>:
 800888c:	b510      	push	{r4, lr}
 800888e:	0004      	movs	r4, r0
 8008890:	f7ff ffec 	bl	800886c <__sfp_lock_acquire>
 8008894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <__sinit+0x14>
 800889a:	f7ff ffef 	bl	800887c <__sfp_lock_release>
 800889e:	bd10      	pop	{r4, pc}
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <__sinit+0x28>)
 80088a2:	6363      	str	r3, [r4, #52]	; 0x34
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <__sinit+0x2c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f6      	bne.n	800889a <__sinit+0xe>
 80088ac:	f7ff ffc0 	bl	8008830 <global_stdio_init.part.0>
 80088b0:	e7f3      	b.n	800889a <__sinit+0xe>
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	080087f5 	.word	0x080087f5
 80088b8:	20000bb0 	.word	0x20000bb0

080088bc <_fwalk_sglue>:
 80088bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088be:	0014      	movs	r4, r2
 80088c0:	2600      	movs	r6, #0
 80088c2:	9000      	str	r0, [sp, #0]
 80088c4:	9101      	str	r1, [sp, #4]
 80088c6:	68a5      	ldr	r5, [r4, #8]
 80088c8:	6867      	ldr	r7, [r4, #4]
 80088ca:	3f01      	subs	r7, #1
 80088cc:	d504      	bpl.n	80088d8 <_fwalk_sglue+0x1c>
 80088ce:	6824      	ldr	r4, [r4, #0]
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	d1f8      	bne.n	80088c6 <_fwalk_sglue+0xa>
 80088d4:	0030      	movs	r0, r6
 80088d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088d8:	89ab      	ldrh	r3, [r5, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d908      	bls.n	80088f0 <_fwalk_sglue+0x34>
 80088de:	220e      	movs	r2, #14
 80088e0:	5eab      	ldrsh	r3, [r5, r2]
 80088e2:	3301      	adds	r3, #1
 80088e4:	d004      	beq.n	80088f0 <_fwalk_sglue+0x34>
 80088e6:	0029      	movs	r1, r5
 80088e8:	9800      	ldr	r0, [sp, #0]
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	4798      	blx	r3
 80088ee:	4306      	orrs	r6, r0
 80088f0:	3568      	adds	r5, #104	; 0x68
 80088f2:	e7ea      	b.n	80088ca <_fwalk_sglue+0xe>

080088f4 <sprintf>:
 80088f4:	b40e      	push	{r1, r2, r3}
 80088f6:	b500      	push	{lr}
 80088f8:	490b      	ldr	r1, [pc, #44]	; (8008928 <sprintf+0x34>)
 80088fa:	b09c      	sub	sp, #112	; 0x70
 80088fc:	ab1d      	add	r3, sp, #116	; 0x74
 80088fe:	9002      	str	r0, [sp, #8]
 8008900:	9006      	str	r0, [sp, #24]
 8008902:	9107      	str	r1, [sp, #28]
 8008904:	9104      	str	r1, [sp, #16]
 8008906:	4809      	ldr	r0, [pc, #36]	; (800892c <sprintf+0x38>)
 8008908:	4909      	ldr	r1, [pc, #36]	; (8008930 <sprintf+0x3c>)
 800890a:	cb04      	ldmia	r3!, {r2}
 800890c:	9105      	str	r1, [sp, #20]
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	a902      	add	r1, sp, #8
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f001 fa7c 	bl	8009e10 <_svfprintf_r>
 8008918:	2200      	movs	r2, #0
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	b01c      	add	sp, #112	; 0x70
 8008920:	bc08      	pop	{r3}
 8008922:	b003      	add	sp, #12
 8008924:	4718      	bx	r3
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	7fffffff 	.word	0x7fffffff
 800892c:	200006c0 	.word	0x200006c0
 8008930:	ffff0208 	.word	0xffff0208

08008934 <sscanf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b530      	push	{r4, r5, lr}
 8008938:	2381      	movs	r3, #129	; 0x81
 800893a:	b09c      	sub	sp, #112	; 0x70
 800893c:	466a      	mov	r2, sp
 800893e:	ac1f      	add	r4, sp, #124	; 0x7c
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	cc20      	ldmia	r4!, {r5}
 8008944:	8293      	strh	r3, [r2, #20]
 8008946:	9002      	str	r0, [sp, #8]
 8008948:	9006      	str	r0, [sp, #24]
 800894a:	f7f7 fbdb 	bl	8000104 <strlen>
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <sscanf+0x48>)
 8008950:	466a      	mov	r2, sp
 8008952:	930a      	str	r3, [sp, #40]	; 0x28
 8008954:	2300      	movs	r3, #0
 8008956:	9003      	str	r0, [sp, #12]
 8008958:	9007      	str	r0, [sp, #28]
 800895a:	4809      	ldr	r0, [pc, #36]	; (8008980 <sscanf+0x4c>)
 800895c:	930e      	str	r3, [sp, #56]	; 0x38
 800895e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008960:	3b01      	subs	r3, #1
 8008962:	82d3      	strh	r3, [r2, #22]
 8008964:	a902      	add	r1, sp, #8
 8008966:	0023      	movs	r3, r4
 8008968:	002a      	movs	r2, r5
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9401      	str	r4, [sp, #4]
 800896e:	f002 fc91 	bl	800b294 <__ssvfscanf_r>
 8008972:	b01c      	add	sp, #112	; 0x70
 8008974:	bc30      	pop	{r4, r5}
 8008976:	bc08      	pop	{r3}
 8008978:	b003      	add	sp, #12
 800897a:	4718      	bx	r3
 800897c:	080089ad 	.word	0x080089ad
 8008980:	200006c0 	.word	0x200006c0

08008984 <__sread>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	000c      	movs	r4, r1
 8008988:	250e      	movs	r5, #14
 800898a:	5f49      	ldrsh	r1, [r1, r5]
 800898c:	f000 f8ba 	bl	8008b04 <_read_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	db03      	blt.n	800899c <__sread+0x18>
 8008994:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008996:	181b      	adds	r3, r3, r0
 8008998:	6523      	str	r3, [r4, #80]	; 0x50
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	4a02      	ldr	r2, [pc, #8]	; (80089a8 <__sread+0x24>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	e7f9      	b.n	800899a <__sread+0x16>
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	ffffefff 	.word	0xffffefff

080089ac <__seofread>:
 80089ac:	2000      	movs	r0, #0
 80089ae:	4770      	bx	lr

080089b0 <__swrite>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	001f      	movs	r7, r3
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	0005      	movs	r5, r0
 80089b8:	000c      	movs	r4, r1
 80089ba:	0016      	movs	r6, r2
 80089bc:	05db      	lsls	r3, r3, #23
 80089be:	d505      	bpl.n	80089cc <__swrite+0x1c>
 80089c0:	230e      	movs	r3, #14
 80089c2:	5ec9      	ldrsh	r1, [r1, r3]
 80089c4:	2200      	movs	r2, #0
 80089c6:	2302      	movs	r3, #2
 80089c8:	f000 f888 	bl	8008adc <_lseek_r>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <__swrite+0x34>)
 80089d0:	0028      	movs	r0, r5
 80089d2:	4013      	ands	r3, r2
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	0032      	movs	r2, r6
 80089d8:	230e      	movs	r3, #14
 80089da:	5ee1      	ldrsh	r1, [r4, r3]
 80089dc:	003b      	movs	r3, r7
 80089de:	f000 f8b7 	bl	8008b50 <_write_r>
 80089e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e4:	ffffefff 	.word	0xffffefff

080089e8 <__sseek>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	000c      	movs	r4, r1
 80089ec:	250e      	movs	r5, #14
 80089ee:	5f49      	ldrsh	r1, [r1, r5]
 80089f0:	f000 f874 	bl	8008adc <_lseek_r>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	1c42      	adds	r2, r0, #1
 80089f8:	d103      	bne.n	8008a02 <__sseek+0x1a>
 80089fa:	4a05      	ldr	r2, [pc, #20]	; (8008a10 <__sseek+0x28>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	2280      	movs	r2, #128	; 0x80
 8008a04:	0152      	lsls	r2, r2, #5
 8008a06:	4313      	orrs	r3, r2
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	6520      	str	r0, [r4, #80]	; 0x50
 8008a0c:	e7f8      	b.n	8008a00 <__sseek+0x18>
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	ffffefff 	.word	0xffffefff

08008a14 <__sclose>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	230e      	movs	r3, #14
 8008a18:	5ec9      	ldrsh	r1, [r1, r3]
 8008a1a:	f000 f84d 	bl	8008ab8 <_close_r>
 8008a1e:	bd10      	pop	{r4, pc}

08008a20 <memset>:
 8008a20:	0003      	movs	r3, r0
 8008a22:	1882      	adds	r2, r0, r2
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <memset+0xa>
 8008a28:	4770      	bx	lr
 8008a2a:	7019      	strb	r1, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	e7f9      	b.n	8008a24 <memset+0x4>

08008a30 <strncmp>:
 8008a30:	b530      	push	{r4, r5, lr}
 8008a32:	0005      	movs	r5, r0
 8008a34:	1e10      	subs	r0, r2, #0
 8008a36:	d00b      	beq.n	8008a50 <strncmp+0x20>
 8008a38:	2400      	movs	r4, #0
 8008a3a:	3a01      	subs	r2, #1
 8008a3c:	5d2b      	ldrb	r3, [r5, r4]
 8008a3e:	5d08      	ldrb	r0, [r1, r4]
 8008a40:	4283      	cmp	r3, r0
 8008a42:	d104      	bne.n	8008a4e <strncmp+0x1e>
 8008a44:	42a2      	cmp	r2, r4
 8008a46:	d002      	beq.n	8008a4e <strncmp+0x1e>
 8008a48:	3401      	adds	r4, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f6      	bne.n	8008a3c <strncmp+0xc>
 8008a4e:	1a18      	subs	r0, r3, r0
 8008a50:	bd30      	pop	{r4, r5, pc}

08008a52 <strncpy>:
 8008a52:	0003      	movs	r3, r0
 8008a54:	b530      	push	{r4, r5, lr}
 8008a56:	001d      	movs	r5, r3
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d006      	beq.n	8008a6a <strncpy+0x18>
 8008a5c:	780c      	ldrb	r4, [r1, #0]
 8008a5e:	3a01      	subs	r2, #1
 8008a60:	3301      	adds	r3, #1
 8008a62:	702c      	strb	r4, [r5, #0]
 8008a64:	3101      	adds	r1, #1
 8008a66:	2c00      	cmp	r4, #0
 8008a68:	d1f5      	bne.n	8008a56 <strncpy+0x4>
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	189a      	adds	r2, r3, r2
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d100      	bne.n	8008a74 <strncpy+0x22>
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	7019      	strb	r1, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	e7f9      	b.n	8008a6e <strncpy+0x1c>

08008a7a <strstr>:
 8008a7a:	780a      	ldrb	r2, [r1, #0]
 8008a7c:	b530      	push	{r4, r5, lr}
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	d10c      	bne.n	8008a9c <strstr+0x22>
 8008a82:	bd30      	pop	{r4, r5, pc}
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d108      	bne.n	8008a9a <strstr+0x20>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	5ccc      	ldrb	r4, [r1, r3]
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	d0f8      	beq.n	8008a82 <strstr+0x8>
 8008a90:	5cc5      	ldrb	r5, [r0, r3]
 8008a92:	42a5      	cmp	r5, r4
 8008a94:	d101      	bne.n	8008a9a <strstr+0x20>
 8008a96:	3301      	adds	r3, #1
 8008a98:	e7f7      	b.n	8008a8a <strstr+0x10>
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	7803      	ldrb	r3, [r0, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f0      	bne.n	8008a84 <strstr+0xa>
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	e7ed      	b.n	8008a82 <strstr+0x8>
	...

08008aa8 <__locale_mb_cur_max>:
 8008aa8:	2294      	movs	r2, #148	; 0x94
 8008aaa:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <__locale_mb_cur_max+0xc>)
 8008aac:	0052      	lsls	r2, r2, #1
 8008aae:	5c98      	ldrb	r0, [r3, r2]
 8008ab0:	4770      	bx	lr
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	20000430 	.word	0x20000430

08008ab8 <_close_r>:
 8008ab8:	2300      	movs	r3, #0
 8008aba:	b570      	push	{r4, r5, r6, lr}
 8008abc:	4d06      	ldr	r5, [pc, #24]	; (8008ad8 <_close_r+0x20>)
 8008abe:	0004      	movs	r4, r0
 8008ac0:	0008      	movs	r0, r1
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	f7fa fd71 	bl	80035aa <_close>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d103      	bne.n	8008ad4 <_close_r+0x1c>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d000      	beq.n	8008ad4 <_close_r+0x1c>
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	20000bb4 	.word	0x20000bb4

08008adc <_lseek_r>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	0004      	movs	r4, r0
 8008ae0:	0008      	movs	r0, r1
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	001a      	movs	r2, r3
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4d05      	ldr	r5, [pc, #20]	; (8008b00 <_lseek_r+0x24>)
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7fa fd7e 	bl	80035ec <_lseek>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d103      	bne.n	8008afc <_lseek_r+0x20>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d000      	beq.n	8008afc <_lseek_r+0x20>
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	20000bb4 	.word	0x20000bb4

08008b04 <_read_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	0004      	movs	r4, r0
 8008b08:	0008      	movs	r0, r1
 8008b0a:	0011      	movs	r1, r2
 8008b0c:	001a      	movs	r2, r3
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4d05      	ldr	r5, [pc, #20]	; (8008b28 <_read_r+0x24>)
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7fa fd10 	bl	8003538 <_read>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d103      	bne.n	8008b24 <_read_r+0x20>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d000      	beq.n	8008b24 <_read_r+0x20>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd70      	pop	{r4, r5, r6, pc}
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	20000bb4 	.word	0x20000bb4

08008b2c <_sbrk_r>:
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	4d06      	ldr	r5, [pc, #24]	; (8008b4c <_sbrk_r+0x20>)
 8008b32:	0004      	movs	r4, r0
 8008b34:	0008      	movs	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7fa fd64 	bl	8003604 <_sbrk>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d103      	bne.n	8008b48 <_sbrk_r+0x1c>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d000      	beq.n	8008b48 <_sbrk_r+0x1c>
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	46c0      	nop			; (mov r8, r8)
 8008b4c:	20000bb4 	.word	0x20000bb4

08008b50 <_write_r>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	0004      	movs	r4, r0
 8008b54:	0008      	movs	r0, r1
 8008b56:	0011      	movs	r1, r2
 8008b58:	001a      	movs	r2, r3
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4d05      	ldr	r5, [pc, #20]	; (8008b74 <_write_r+0x24>)
 8008b5e:	602b      	str	r3, [r5, #0]
 8008b60:	f7fa fd07 	bl	8003572 <_write>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d103      	bne.n	8008b70 <_write_r+0x20>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d000      	beq.n	8008b70 <_write_r+0x20>
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	20000bb4 	.word	0x20000bb4

08008b78 <__errno>:
 8008b78:	4b01      	ldr	r3, [pc, #4]	; (8008b80 <__errno+0x8>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	4770      	bx	lr
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	200006c0 	.word	0x200006c0

08008b84 <__libc_init_array>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	2600      	movs	r6, #0
 8008b88:	4c0c      	ldr	r4, [pc, #48]	; (8008bbc <__libc_init_array+0x38>)
 8008b8a:	4d0d      	ldr	r5, [pc, #52]	; (8008bc0 <__libc_init_array+0x3c>)
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	d109      	bne.n	8008ba8 <__libc_init_array+0x24>
 8008b94:	2600      	movs	r6, #0
 8008b96:	f006 fc79 	bl	800f48c <_init>
 8008b9a:	4c0a      	ldr	r4, [pc, #40]	; (8008bc4 <__libc_init_array+0x40>)
 8008b9c:	4d0a      	ldr	r5, [pc, #40]	; (8008bc8 <__libc_init_array+0x44>)
 8008b9e:	1b64      	subs	r4, r4, r5
 8008ba0:	10a4      	asrs	r4, r4, #2
 8008ba2:	42a6      	cmp	r6, r4
 8008ba4:	d105      	bne.n	8008bb2 <__libc_init_array+0x2e>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	00b3      	lsls	r3, r6, #2
 8008baa:	58eb      	ldr	r3, [r5, r3]
 8008bac:	4798      	blx	r3
 8008bae:	3601      	adds	r6, #1
 8008bb0:	e7ee      	b.n	8008b90 <__libc_init_array+0xc>
 8008bb2:	00b3      	lsls	r3, r6, #2
 8008bb4:	58eb      	ldr	r3, [r5, r3]
 8008bb6:	4798      	blx	r3
 8008bb8:	3601      	adds	r6, #1
 8008bba:	e7f2      	b.n	8008ba2 <__libc_init_array+0x1e>
 8008bbc:	0800fb54 	.word	0x0800fb54
 8008bc0:	0800fb54 	.word	0x0800fb54
 8008bc4:	0800fb5c 	.word	0x0800fb5c
 8008bc8:	0800fb54 	.word	0x0800fb54

08008bcc <__retarget_lock_init_recursive>:
 8008bcc:	4770      	bx	lr

08008bce <__retarget_lock_close_recursive>:
 8008bce:	4770      	bx	lr

08008bd0 <__retarget_lock_acquire_recursive>:
 8008bd0:	4770      	bx	lr

08008bd2 <__retarget_lock_release_recursive>:
 8008bd2:	4770      	bx	lr

08008bd4 <sysconf>:
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	2808      	cmp	r0, #8
 8008bda:	d004      	beq.n	8008be6 <sysconf+0x12>
 8008bdc:	f7ff ffcc 	bl	8008b78 <__errno>
 8008be0:	2316      	movs	r3, #22
 8008be2:	6003      	str	r3, [r0, #0]
 8008be4:	3b17      	subs	r3, #23
 8008be6:	0018      	movs	r0, r3
 8008be8:	bd10      	pop	{r4, pc}

08008bea <memcpy>:
 8008bea:	2300      	movs	r3, #0
 8008bec:	b510      	push	{r4, lr}
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xa>
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	5ccc      	ldrb	r4, [r1, r3]
 8008bf6:	54c4      	strb	r4, [r0, r3]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	e7f8      	b.n	8008bee <memcpy+0x4>

08008bfc <nan>:
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	4901      	ldr	r1, [pc, #4]	; (8008c04 <nan+0x8>)
 8008c00:	4770      	bx	lr
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	7ff80000 	.word	0x7ff80000

08008c08 <nanf>:
 8008c08:	4800      	ldr	r0, [pc, #0]	; (8008c0c <nanf+0x4>)
 8008c0a:	4770      	bx	lr
 8008c0c:	7fc00000 	.word	0x7fc00000

08008c10 <register_fini>:
 8008c10:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <register_fini+0x10>)
 8008c12:	b510      	push	{r4, lr}
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <register_fini+0xe>
 8008c18:	4802      	ldr	r0, [pc, #8]	; (8008c24 <register_fini+0x14>)
 8008c1a:	f000 f805 	bl	8008c28 <atexit>
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	00000000 	.word	0x00000000
 8008c24:	0800c985 	.word	0x0800c985

08008c28 <atexit>:
 8008c28:	2300      	movs	r3, #0
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	0001      	movs	r1, r0
 8008c2e:	001a      	movs	r2, r3
 8008c30:	0018      	movs	r0, r3
 8008c32:	f003 fef9 	bl	800ca28 <__register_exitproc>
 8008c36:	bd10      	pop	{r4, pc}

08008c38 <_malloc_trim_r>:
 8008c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c3a:	0004      	movs	r4, r0
 8008c3c:	2008      	movs	r0, #8
 8008c3e:	000d      	movs	r5, r1
 8008c40:	f7ff ffc8 	bl	8008bd4 <sysconf>
 8008c44:	0006      	movs	r6, r0
 8008c46:	0020      	movs	r0, r4
 8008c48:	f7fe fec0 	bl	80079cc <__malloc_lock>
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	4f21      	ldr	r7, [pc, #132]	; (8008cd4 <_malloc_trim_r+0x9c>)
 8008c50:	0031      	movs	r1, r6
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	4393      	bics	r3, r2
 8008c58:	1b58      	subs	r0, r3, r5
 8008c5a:	3811      	subs	r0, #17
 8008c5c:	1980      	adds	r0, r0, r6
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f7f7 fa6c 	bl	800013c <__udivsi3>
 8008c64:	1e45      	subs	r5, r0, #1
 8008c66:	4375      	muls	r5, r6
 8008c68:	42ae      	cmp	r6, r5
 8008c6a:	dd04      	ble.n	8008c76 <_malloc_trim_r+0x3e>
 8008c6c:	0020      	movs	r0, r4
 8008c6e:	f7fe feb5 	bl	80079dc <__malloc_unlock>
 8008c72:	2000      	movs	r0, #0
 8008c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c76:	2100      	movs	r1, #0
 8008c78:	0020      	movs	r0, r4
 8008c7a:	f7ff ff57 	bl	8008b2c <_sbrk_r>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	4298      	cmp	r0, r3
 8008c86:	d1f1      	bne.n	8008c6c <_malloc_trim_r+0x34>
 8008c88:	0020      	movs	r0, r4
 8008c8a:	4269      	negs	r1, r5
 8008c8c:	f7ff ff4e 	bl	8008b2c <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d110      	bne.n	8008cb6 <_malloc_trim_r+0x7e>
 8008c94:	2100      	movs	r1, #0
 8008c96:	0020      	movs	r0, r4
 8008c98:	f7ff ff48 	bl	8008b2c <_sbrk_r>
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	1a81      	subs	r1, r0, r2
 8008ca0:	290f      	cmp	r1, #15
 8008ca2:	dde3      	ble.n	8008c6c <_malloc_trim_r+0x34>
 8008ca4:	4d0c      	ldr	r5, [pc, #48]	; (8008cd8 <_malloc_trim_r+0xa0>)
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <_malloc_trim_r+0xa4>)
 8008ca8:	682d      	ldr	r5, [r5, #0]
 8008caa:	1b40      	subs	r0, r0, r5
 8008cac:	6018      	str	r0, [r3, #0]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6053      	str	r3, [r2, #4]
 8008cb4:	e7da      	b.n	8008c6c <_malloc_trim_r+0x34>
 8008cb6:	2601      	movs	r6, #1
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	1b5b      	subs	r3, r3, r5
 8008cbe:	4333      	orrs	r3, r6
 8008cc0:	6053      	str	r3, [r2, #4]
 8008cc2:	4a06      	ldr	r2, [pc, #24]	; (8008cdc <_malloc_trim_r+0xa4>)
 8008cc4:	0020      	movs	r0, r4
 8008cc6:	6813      	ldr	r3, [r2, #0]
 8008cc8:	1b5b      	subs	r3, r3, r5
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	f7fe fe86 	bl	80079dc <__malloc_unlock>
 8008cd0:	0030      	movs	r0, r6
 8008cd2:	e7cf      	b.n	8008c74 <_malloc_trim_r+0x3c>
 8008cd4:	20000014 	.word	0x20000014
 8008cd8:	2000041c 	.word	0x2000041c
 8008cdc:	20000a44 	.word	0x20000a44

08008ce0 <_free_r>:
 8008ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ce2:	1e0d      	subs	r5, r1, #0
 8008ce4:	9001      	str	r0, [sp, #4]
 8008ce6:	d02d      	beq.n	8008d44 <_free_r+0x64>
 8008ce8:	f7fe fe70 	bl	80079cc <__malloc_lock>
 8008cec:	2301      	movs	r3, #1
 8008cee:	0029      	movs	r1, r5
 8008cf0:	469c      	mov	ip, r3
 8008cf2:	3908      	subs	r1, #8
 8008cf4:	684f      	ldr	r7, [r1, #4]
 8008cf6:	4662      	mov	r2, ip
 8008cf8:	003b      	movs	r3, r7
 8008cfa:	4664      	mov	r4, ip
 8008cfc:	4393      	bics	r3, r2
 8008cfe:	18c8      	adds	r0, r1, r3
 8008d00:	6845      	ldr	r5, [r0, #4]
 8008d02:	3202      	adds	r2, #2
 8008d04:	4395      	bics	r5, r2
 8008d06:	4a4a      	ldr	r2, [pc, #296]	; (8008e30 <_free_r+0x150>)
 8008d08:	4027      	ands	r7, r4
 8008d0a:	6896      	ldr	r6, [r2, #8]
 8008d0c:	4286      	cmp	r6, r0
 8008d0e:	d11a      	bne.n	8008d46 <_free_r+0x66>
 8008d10:	195b      	adds	r3, r3, r5
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	d106      	bne.n	8008d24 <_free_r+0x44>
 8008d16:	6808      	ldr	r0, [r1, #0]
 8008d18:	1a09      	subs	r1, r1, r0
 8008d1a:	688d      	ldr	r5, [r1, #8]
 8008d1c:	181b      	adds	r3, r3, r0
 8008d1e:	68c8      	ldr	r0, [r1, #12]
 8008d20:	60e8      	str	r0, [r5, #12]
 8008d22:	6085      	str	r5, [r0, #8]
 8008d24:	2001      	movs	r0, #1
 8008d26:	4318      	orrs	r0, r3
 8008d28:	6048      	str	r0, [r1, #4]
 8008d2a:	6091      	str	r1, [r2, #8]
 8008d2c:	4a41      	ldr	r2, [pc, #260]	; (8008e34 <_free_r+0x154>)
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d804      	bhi.n	8008d3e <_free_r+0x5e>
 8008d34:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <_free_r+0x158>)
 8008d36:	9801      	ldr	r0, [sp, #4]
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	f7ff ff7d 	bl	8008c38 <_malloc_trim_r>
 8008d3e:	9801      	ldr	r0, [sp, #4]
 8008d40:	f7fe fe4c 	bl	80079dc <__malloc_unlock>
 8008d44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008d46:	2600      	movs	r6, #0
 8008d48:	6045      	str	r5, [r0, #4]
 8008d4a:	42b7      	cmp	r7, r6
 8008d4c:	d109      	bne.n	8008d62 <_free_r+0x82>
 8008d4e:	680f      	ldr	r7, [r1, #0]
 8008d50:	4c3a      	ldr	r4, [pc, #232]	; (8008e3c <_free_r+0x15c>)
 8008d52:	1bc9      	subs	r1, r1, r7
 8008d54:	19db      	adds	r3, r3, r7
 8008d56:	688f      	ldr	r7, [r1, #8]
 8008d58:	42a7      	cmp	r7, r4
 8008d5a:	d02c      	beq.n	8008db6 <_free_r+0xd6>
 8008d5c:	68cc      	ldr	r4, [r1, #12]
 8008d5e:	60fc      	str	r4, [r7, #12]
 8008d60:	60a7      	str	r7, [r4, #8]
 8008d62:	1947      	adds	r7, r0, r5
 8008d64:	687c      	ldr	r4, [r7, #4]
 8008d66:	2701      	movs	r7, #1
 8008d68:	423c      	tst	r4, r7
 8008d6a:	d10b      	bne.n	8008d84 <_free_r+0xa4>
 8008d6c:	195b      	adds	r3, r3, r5
 8008d6e:	6885      	ldr	r5, [r0, #8]
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	d122      	bne.n	8008dba <_free_r+0xda>
 8008d74:	4c31      	ldr	r4, [pc, #196]	; (8008e3c <_free_r+0x15c>)
 8008d76:	42a5      	cmp	r5, r4
 8008d78:	d11f      	bne.n	8008dba <_free_r+0xda>
 8008d7a:	003e      	movs	r6, r7
 8008d7c:	6151      	str	r1, [r2, #20]
 8008d7e:	6111      	str	r1, [r2, #16]
 8008d80:	60cd      	str	r5, [r1, #12]
 8008d82:	608d      	str	r5, [r1, #8]
 8008d84:	2501      	movs	r5, #1
 8008d86:	0028      	movs	r0, r5
 8008d88:	4318      	orrs	r0, r3
 8008d8a:	6048      	str	r0, [r1, #4]
 8008d8c:	50cb      	str	r3, [r1, r3]
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d1d5      	bne.n	8008d3e <_free_r+0x5e>
 8008d92:	2080      	movs	r0, #128	; 0x80
 8008d94:	0080      	lsls	r0, r0, #2
 8008d96:	4283      	cmp	r3, r0
 8008d98:	d213      	bcs.n	8008dc2 <_free_r+0xe2>
 8008d9a:	08d8      	lsrs	r0, r3, #3
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	409d      	lsls	r5, r3
 8008da0:	6853      	ldr	r3, [r2, #4]
 8008da2:	431d      	orrs	r5, r3
 8008da4:	00c3      	lsls	r3, r0, #3
 8008da6:	189b      	adds	r3, r3, r2
 8008da8:	6055      	str	r5, [r2, #4]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	60cb      	str	r3, [r1, #12]
 8008dae:	608a      	str	r2, [r1, #8]
 8008db0:	6099      	str	r1, [r3, #8]
 8008db2:	60d1      	str	r1, [r2, #12]
 8008db4:	e7c3      	b.n	8008d3e <_free_r+0x5e>
 8008db6:	4666      	mov	r6, ip
 8008db8:	e7d3      	b.n	8008d62 <_free_r+0x82>
 8008dba:	68c0      	ldr	r0, [r0, #12]
 8008dbc:	60e8      	str	r0, [r5, #12]
 8008dbe:	6085      	str	r5, [r0, #8]
 8008dc0:	e7e0      	b.n	8008d84 <_free_r+0xa4>
 8008dc2:	0a5d      	lsrs	r5, r3, #9
 8008dc4:	2d04      	cmp	r5, #4
 8008dc6:	d812      	bhi.n	8008dee <_free_r+0x10e>
 8008dc8:	0998      	lsrs	r0, r3, #6
 8008dca:	3038      	adds	r0, #56	; 0x38
 8008dcc:	00c6      	lsls	r6, r0, #3
 8008dce:	18b6      	adds	r6, r6, r2
 8008dd0:	68b5      	ldr	r5, [r6, #8]
 8008dd2:	2703      	movs	r7, #3
 8008dd4:	42ae      	cmp	r6, r5
 8008dd6:	d125      	bne.n	8008e24 <_free_r+0x144>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	1080      	asrs	r0, r0, #2
 8008ddc:	4083      	lsls	r3, r0
 8008dde:	6850      	ldr	r0, [r2, #4]
 8008de0:	4303      	orrs	r3, r0
 8008de2:	6053      	str	r3, [r2, #4]
 8008de4:	60ce      	str	r6, [r1, #12]
 8008de6:	608d      	str	r5, [r1, #8]
 8008de8:	60b1      	str	r1, [r6, #8]
 8008dea:	60e9      	str	r1, [r5, #12]
 8008dec:	e7a7      	b.n	8008d3e <_free_r+0x5e>
 8008dee:	2d14      	cmp	r5, #20
 8008df0:	d802      	bhi.n	8008df8 <_free_r+0x118>
 8008df2:	0028      	movs	r0, r5
 8008df4:	305b      	adds	r0, #91	; 0x5b
 8008df6:	e7e9      	b.n	8008dcc <_free_r+0xec>
 8008df8:	2d54      	cmp	r5, #84	; 0x54
 8008dfa:	d802      	bhi.n	8008e02 <_free_r+0x122>
 8008dfc:	0b18      	lsrs	r0, r3, #12
 8008dfe:	306e      	adds	r0, #110	; 0x6e
 8008e00:	e7e4      	b.n	8008dcc <_free_r+0xec>
 8008e02:	20aa      	movs	r0, #170	; 0xaa
 8008e04:	0040      	lsls	r0, r0, #1
 8008e06:	4285      	cmp	r5, r0
 8008e08:	d802      	bhi.n	8008e10 <_free_r+0x130>
 8008e0a:	0bd8      	lsrs	r0, r3, #15
 8008e0c:	3077      	adds	r0, #119	; 0x77
 8008e0e:	e7dd      	b.n	8008dcc <_free_r+0xec>
 8008e10:	4e0b      	ldr	r6, [pc, #44]	; (8008e40 <_free_r+0x160>)
 8008e12:	207e      	movs	r0, #126	; 0x7e
 8008e14:	42b5      	cmp	r5, r6
 8008e16:	d8d9      	bhi.n	8008dcc <_free_r+0xec>
 8008e18:	0c98      	lsrs	r0, r3, #18
 8008e1a:	307c      	adds	r0, #124	; 0x7c
 8008e1c:	e7d6      	b.n	8008dcc <_free_r+0xec>
 8008e1e:	68ad      	ldr	r5, [r5, #8]
 8008e20:	42ae      	cmp	r6, r5
 8008e22:	d003      	beq.n	8008e2c <_free_r+0x14c>
 8008e24:	686a      	ldr	r2, [r5, #4]
 8008e26:	43ba      	bics	r2, r7
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d8f8      	bhi.n	8008e1e <_free_r+0x13e>
 8008e2c:	68ee      	ldr	r6, [r5, #12]
 8008e2e:	e7d9      	b.n	8008de4 <_free_r+0x104>
 8008e30:	20000014 	.word	0x20000014
 8008e34:	20000420 	.word	0x20000420
 8008e38:	20000a74 	.word	0x20000a74
 8008e3c:	2000001c 	.word	0x2000001c
 8008e40:	00000554 	.word	0x00000554

08008e44 <rshift>:
 8008e44:	0002      	movs	r2, r0
 8008e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e48:	6904      	ldr	r4, [r0, #16]
 8008e4a:	114b      	asrs	r3, r1, #5
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	3214      	adds	r2, #20
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	114d      	asrs	r5, r1, #5
 8008e54:	0013      	movs	r3, r2
 8008e56:	42ac      	cmp	r4, r5
 8008e58:	dd32      	ble.n	8008ec0 <rshift+0x7c>
 8008e5a:	261f      	movs	r6, #31
 8008e5c:	000f      	movs	r7, r1
 8008e5e:	114b      	asrs	r3, r1, #5
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	00a5      	lsls	r5, r4, #2
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	4037      	ands	r7, r6
 8008e68:	1955      	adds	r5, r2, r5
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	9701      	str	r7, [sp, #4]
 8008e6e:	4231      	tst	r1, r6
 8008e70:	d10d      	bne.n	8008e8e <rshift+0x4a>
 8008e72:	0016      	movs	r6, r2
 8008e74:	0019      	movs	r1, r3
 8008e76:	428d      	cmp	r5, r1
 8008e78:	d836      	bhi.n	8008ee8 <rshift+0xa4>
 8008e7a:	9900      	ldr	r1, [sp, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	3903      	subs	r1, #3
 8008e80:	428d      	cmp	r5, r1
 8008e82:	d302      	bcc.n	8008e8a <rshift+0x46>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	1ae4      	subs	r4, r4, r3
 8008e88:	00a3      	lsls	r3, r4, #2
 8008e8a:	18d3      	adds	r3, r2, r3
 8008e8c:	e018      	b.n	8008ec0 <rshift+0x7c>
 8008e8e:	2120      	movs	r1, #32
 8008e90:	9e01      	ldr	r6, [sp, #4]
 8008e92:	9f01      	ldr	r7, [sp, #4]
 8008e94:	1b89      	subs	r1, r1, r6
 8008e96:	9e00      	ldr	r6, [sp, #0]
 8008e98:	9103      	str	r1, [sp, #12]
 8008e9a:	ce02      	ldmia	r6!, {r1}
 8008e9c:	4694      	mov	ip, r2
 8008e9e:	40f9      	lsrs	r1, r7
 8008ea0:	42b5      	cmp	r5, r6
 8008ea2:	d816      	bhi.n	8008ed2 <rshift+0x8e>
 8008ea4:	9e00      	ldr	r6, [sp, #0]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	42b5      	cmp	r5, r6
 8008eac:	d303      	bcc.n	8008eb6 <rshift+0x72>
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	1ae3      	subs	r3, r4, r3
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	18d3      	adds	r3, r2, r3
 8008eb8:	6019      	str	r1, [r3, #0]
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	d000      	beq.n	8008ec0 <rshift+0x7c>
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	1a99      	subs	r1, r3, r2
 8008ec2:	1089      	asrs	r1, r1, #2
 8008ec4:	6101      	str	r1, [r0, #16]
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d101      	bne.n	8008ece <rshift+0x8a>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6143      	str	r3, [r0, #20]
 8008ece:	b005      	add	sp, #20
 8008ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed2:	6837      	ldr	r7, [r6, #0]
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	409f      	lsls	r7, r3
 8008ed8:	430f      	orrs	r7, r1
 8008eda:	4661      	mov	r1, ip
 8008edc:	c180      	stmia	r1!, {r7}
 8008ede:	468c      	mov	ip, r1
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	ce02      	ldmia	r6!, {r1}
 8008ee4:	40d9      	lsrs	r1, r3
 8008ee6:	e7db      	b.n	8008ea0 <rshift+0x5c>
 8008ee8:	c980      	ldmia	r1!, {r7}
 8008eea:	c680      	stmia	r6!, {r7}
 8008eec:	e7c3      	b.n	8008e76 <rshift+0x32>

08008eee <__hexdig_fun>:
 8008eee:	0002      	movs	r2, r0
 8008ef0:	3a30      	subs	r2, #48	; 0x30
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	2a09      	cmp	r2, #9
 8008ef6:	d802      	bhi.n	8008efe <__hexdig_fun+0x10>
 8008ef8:	3b20      	subs	r3, #32
 8008efa:	b2d8      	uxtb	r0, r3
 8008efc:	4770      	bx	lr
 8008efe:	0002      	movs	r2, r0
 8008f00:	3a61      	subs	r2, #97	; 0x61
 8008f02:	2a05      	cmp	r2, #5
 8008f04:	d801      	bhi.n	8008f0a <__hexdig_fun+0x1c>
 8008f06:	3b47      	subs	r3, #71	; 0x47
 8008f08:	e7f7      	b.n	8008efa <__hexdig_fun+0xc>
 8008f0a:	001a      	movs	r2, r3
 8008f0c:	3a41      	subs	r2, #65	; 0x41
 8008f0e:	2000      	movs	r0, #0
 8008f10:	2a05      	cmp	r2, #5
 8008f12:	d8f3      	bhi.n	8008efc <__hexdig_fun+0xe>
 8008f14:	3b27      	subs	r3, #39	; 0x27
 8008f16:	e7f0      	b.n	8008efa <__hexdig_fun+0xc>

08008f18 <__gethex>:
 8008f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1a:	b089      	sub	sp, #36	; 0x24
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	2302      	movs	r3, #2
 8008f20:	9201      	str	r2, [sp, #4]
 8008f22:	680a      	ldr	r2, [r1, #0]
 8008f24:	425b      	negs	r3, r3
 8008f26:	9003      	str	r0, [sp, #12]
 8008f28:	9106      	str	r1, [sp, #24]
 8008f2a:	1c96      	adds	r6, r2, #2
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	199a      	adds	r2, r3, r6
 8008f30:	9600      	str	r6, [sp, #0]
 8008f32:	9205      	str	r2, [sp, #20]
 8008f34:	9a00      	ldr	r2, [sp, #0]
 8008f36:	3601      	adds	r6, #1
 8008f38:	7810      	ldrb	r0, [r2, #0]
 8008f3a:	2830      	cmp	r0, #48	; 0x30
 8008f3c:	d0f7      	beq.n	8008f2e <__gethex+0x16>
 8008f3e:	f7ff ffd6 	bl	8008eee <__hexdig_fun>
 8008f42:	2300      	movs	r3, #0
 8008f44:	001d      	movs	r5, r3
 8008f46:	9302      	str	r3, [sp, #8]
 8008f48:	4298      	cmp	r0, r3
 8008f4a:	d11d      	bne.n	8008f88 <__gethex+0x70>
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	49a6      	ldr	r1, [pc, #664]	; (80091e8 <__gethex+0x2d0>)
 8008f50:	9800      	ldr	r0, [sp, #0]
 8008f52:	f7ff fd6d 	bl	8008a30 <strncmp>
 8008f56:	0007      	movs	r7, r0
 8008f58:	42a8      	cmp	r0, r5
 8008f5a:	d169      	bne.n	8009030 <__gethex+0x118>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	0034      	movs	r4, r6
 8008f60:	7858      	ldrb	r0, [r3, #1]
 8008f62:	f7ff ffc4 	bl	8008eee <__hexdig_fun>
 8008f66:	2301      	movs	r3, #1
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	42a8      	cmp	r0, r5
 8008f6c:	d02f      	beq.n	8008fce <__gethex+0xb6>
 8008f6e:	9600      	str	r6, [sp, #0]
 8008f70:	9b00      	ldr	r3, [sp, #0]
 8008f72:	7818      	ldrb	r0, [r3, #0]
 8008f74:	2830      	cmp	r0, #48	; 0x30
 8008f76:	d009      	beq.n	8008f8c <__gethex+0x74>
 8008f78:	f7ff ffb9 	bl	8008eee <__hexdig_fun>
 8008f7c:	4242      	negs	r2, r0
 8008f7e:	4142      	adcs	r2, r0
 8008f80:	2301      	movs	r3, #1
 8008f82:	0035      	movs	r5, r6
 8008f84:	9202      	str	r2, [sp, #8]
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	9c00      	ldr	r4, [sp, #0]
 8008f8a:	e004      	b.n	8008f96 <__gethex+0x7e>
 8008f8c:	9b00      	ldr	r3, [sp, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	e7ed      	b.n	8008f70 <__gethex+0x58>
 8008f94:	3401      	adds	r4, #1
 8008f96:	7820      	ldrb	r0, [r4, #0]
 8008f98:	f7ff ffa9 	bl	8008eee <__hexdig_fun>
 8008f9c:	1e07      	subs	r7, r0, #0
 8008f9e:	d1f9      	bne.n	8008f94 <__gethex+0x7c>
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	0020      	movs	r0, r4
 8008fa4:	4990      	ldr	r1, [pc, #576]	; (80091e8 <__gethex+0x2d0>)
 8008fa6:	f7ff fd43 	bl	8008a30 <strncmp>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d10d      	bne.n	8008fca <__gethex+0xb2>
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	d106      	bne.n	8008fc0 <__gethex+0xa8>
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	0025      	movs	r5, r4
 8008fb6:	7820      	ldrb	r0, [r4, #0]
 8008fb8:	f7ff ff99 	bl	8008eee <__hexdig_fun>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d102      	bne.n	8008fc6 <__gethex+0xae>
 8008fc0:	1b2d      	subs	r5, r5, r4
 8008fc2:	00af      	lsls	r7, r5, #2
 8008fc4:	e003      	b.n	8008fce <__gethex+0xb6>
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	e7f5      	b.n	8008fb6 <__gethex+0x9e>
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	d1f8      	bne.n	8008fc0 <__gethex+0xa8>
 8008fce:	2220      	movs	r2, #32
 8008fd0:	7823      	ldrb	r3, [r4, #0]
 8008fd2:	0026      	movs	r6, r4
 8008fd4:	4393      	bics	r3, r2
 8008fd6:	2b50      	cmp	r3, #80	; 0x50
 8008fd8:	d11d      	bne.n	8009016 <__gethex+0xfe>
 8008fda:	7863      	ldrb	r3, [r4, #1]
 8008fdc:	2b2b      	cmp	r3, #43	; 0x2b
 8008fde:	d02c      	beq.n	800903a <__gethex+0x122>
 8008fe0:	2b2d      	cmp	r3, #45	; 0x2d
 8008fe2:	d02e      	beq.n	8009042 <__gethex+0x12a>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	1c66      	adds	r6, r4, #1
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	7830      	ldrb	r0, [r6, #0]
 8008fec:	f7ff ff7f 	bl	8008eee <__hexdig_fun>
 8008ff0:	1e43      	subs	r3, r0, #1
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b18      	cmp	r3, #24
 8008ff6:	d82b      	bhi.n	8009050 <__gethex+0x138>
 8008ff8:	3810      	subs	r0, #16
 8008ffa:	0005      	movs	r5, r0
 8008ffc:	7870      	ldrb	r0, [r6, #1]
 8008ffe:	f7ff ff76 	bl	8008eee <__hexdig_fun>
 8009002:	1e43      	subs	r3, r0, #1
 8009004:	b2db      	uxtb	r3, r3
 8009006:	3601      	adds	r6, #1
 8009008:	2b18      	cmp	r3, #24
 800900a:	d91c      	bls.n	8009046 <__gethex+0x12e>
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d000      	beq.n	8009014 <__gethex+0xfc>
 8009012:	426d      	negs	r5, r5
 8009014:	197f      	adds	r7, r7, r5
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	601e      	str	r6, [r3, #0]
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d019      	beq.n	8009054 <__gethex+0x13c>
 8009020:	2600      	movs	r6, #0
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	42b3      	cmp	r3, r6
 8009026:	d100      	bne.n	800902a <__gethex+0x112>
 8009028:	3606      	adds	r6, #6
 800902a:	0030      	movs	r0, r6
 800902c:	b009      	add	sp, #36	; 0x24
 800902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009030:	2301      	movs	r3, #1
 8009032:	2700      	movs	r7, #0
 8009034:	9c00      	ldr	r4, [sp, #0]
 8009036:	9302      	str	r3, [sp, #8]
 8009038:	e7c9      	b.n	8008fce <__gethex+0xb6>
 800903a:	2300      	movs	r3, #0
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	1ca6      	adds	r6, r4, #2
 8009040:	e7d3      	b.n	8008fea <__gethex+0xd2>
 8009042:	2301      	movs	r3, #1
 8009044:	e7fa      	b.n	800903c <__gethex+0x124>
 8009046:	230a      	movs	r3, #10
 8009048:	435d      	muls	r5, r3
 800904a:	182d      	adds	r5, r5, r0
 800904c:	3d10      	subs	r5, #16
 800904e:	e7d5      	b.n	8008ffc <__gethex+0xe4>
 8009050:	0026      	movs	r6, r4
 8009052:	e7e0      	b.n	8009016 <__gethex+0xfe>
 8009054:	9b00      	ldr	r3, [sp, #0]
 8009056:	9902      	ldr	r1, [sp, #8]
 8009058:	1ae3      	subs	r3, r4, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	2b07      	cmp	r3, #7
 800905e:	dc0a      	bgt.n	8009076 <__gethex+0x15e>
 8009060:	9803      	ldr	r0, [sp, #12]
 8009062:	f000 fa5d 	bl	8009520 <_Balloc>
 8009066:	1e05      	subs	r5, r0, #0
 8009068:	d108      	bne.n	800907c <__gethex+0x164>
 800906a:	002a      	movs	r2, r5
 800906c:	21e4      	movs	r1, #228	; 0xe4
 800906e:	4b5f      	ldr	r3, [pc, #380]	; (80091ec <__gethex+0x2d4>)
 8009070:	485f      	ldr	r0, [pc, #380]	; (80091f0 <__gethex+0x2d8>)
 8009072:	f003 fd19 	bl	800caa8 <__assert_func>
 8009076:	3101      	adds	r1, #1
 8009078:	105b      	asrs	r3, r3, #1
 800907a:	e7ef      	b.n	800905c <__gethex+0x144>
 800907c:	0003      	movs	r3, r0
 800907e:	3314      	adds	r3, #20
 8009080:	9302      	str	r3, [sp, #8]
 8009082:	9305      	str	r3, [sp, #20]
 8009084:	2300      	movs	r3, #0
 8009086:	001e      	movs	r6, r3
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	9b00      	ldr	r3, [sp, #0]
 800908c:	42a3      	cmp	r3, r4
 800908e:	d33f      	bcc.n	8009110 <__gethex+0x1f8>
 8009090:	9c05      	ldr	r4, [sp, #20]
 8009092:	9b02      	ldr	r3, [sp, #8]
 8009094:	c440      	stmia	r4!, {r6}
 8009096:	1ae4      	subs	r4, r4, r3
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	0030      	movs	r0, r6
 800909c:	612c      	str	r4, [r5, #16]
 800909e:	f000 fb01 	bl	80096a4 <__hi0bits>
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	0164      	lsls	r4, r4, #5
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	1a26      	subs	r6, r4, r0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	429e      	cmp	r6, r3
 80090ae:	dd51      	ble.n	8009154 <__gethex+0x23c>
 80090b0:	1af6      	subs	r6, r6, r3
 80090b2:	0031      	movs	r1, r6
 80090b4:	0028      	movs	r0, r5
 80090b6:	f000 fe7b 	bl	8009db0 <__any_on>
 80090ba:	1e04      	subs	r4, r0, #0
 80090bc:	d016      	beq.n	80090ec <__gethex+0x1d4>
 80090be:	2401      	movs	r4, #1
 80090c0:	231f      	movs	r3, #31
 80090c2:	0020      	movs	r0, r4
 80090c4:	1e72      	subs	r2, r6, #1
 80090c6:	4013      	ands	r3, r2
 80090c8:	4098      	lsls	r0, r3
 80090ca:	0003      	movs	r3, r0
 80090cc:	1151      	asrs	r1, r2, #5
 80090ce:	9802      	ldr	r0, [sp, #8]
 80090d0:	0089      	lsls	r1, r1, #2
 80090d2:	5809      	ldr	r1, [r1, r0]
 80090d4:	4219      	tst	r1, r3
 80090d6:	d009      	beq.n	80090ec <__gethex+0x1d4>
 80090d8:	42a2      	cmp	r2, r4
 80090da:	dd06      	ble.n	80090ea <__gethex+0x1d2>
 80090dc:	0028      	movs	r0, r5
 80090de:	1eb1      	subs	r1, r6, #2
 80090e0:	f000 fe66 	bl	8009db0 <__any_on>
 80090e4:	3402      	adds	r4, #2
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d100      	bne.n	80090ec <__gethex+0x1d4>
 80090ea:	2402      	movs	r4, #2
 80090ec:	0031      	movs	r1, r6
 80090ee:	0028      	movs	r0, r5
 80090f0:	f7ff fea8 	bl	8008e44 <rshift>
 80090f4:	19bf      	adds	r7, r7, r6
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	42bb      	cmp	r3, r7
 80090fc:	da3a      	bge.n	8009174 <__gethex+0x25c>
 80090fe:	0029      	movs	r1, r5
 8009100:	9803      	ldr	r0, [sp, #12]
 8009102:	f000 fa35 	bl	8009570 <_Bfree>
 8009106:	2300      	movs	r3, #0
 8009108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800910a:	26a3      	movs	r6, #163	; 0xa3
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	e78c      	b.n	800902a <__gethex+0x112>
 8009110:	3c01      	subs	r4, #1
 8009112:	7823      	ldrb	r3, [r4, #0]
 8009114:	2b2e      	cmp	r3, #46	; 0x2e
 8009116:	d012      	beq.n	800913e <__gethex+0x226>
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	2b20      	cmp	r3, #32
 800911c:	d104      	bne.n	8009128 <__gethex+0x210>
 800911e:	9b05      	ldr	r3, [sp, #20]
 8009120:	c340      	stmia	r3!, {r6}
 8009122:	2600      	movs	r6, #0
 8009124:	9305      	str	r3, [sp, #20]
 8009126:	9604      	str	r6, [sp, #16]
 8009128:	7820      	ldrb	r0, [r4, #0]
 800912a:	f7ff fee0 	bl	8008eee <__hexdig_fun>
 800912e:	230f      	movs	r3, #15
 8009130:	4018      	ands	r0, r3
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4098      	lsls	r0, r3
 8009136:	3304      	adds	r3, #4
 8009138:	4306      	orrs	r6, r0
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	e7a5      	b.n	800908a <__gethex+0x172>
 800913e:	9b00      	ldr	r3, [sp, #0]
 8009140:	42a3      	cmp	r3, r4
 8009142:	d8e9      	bhi.n	8009118 <__gethex+0x200>
 8009144:	2201      	movs	r2, #1
 8009146:	0020      	movs	r0, r4
 8009148:	4927      	ldr	r1, [pc, #156]	; (80091e8 <__gethex+0x2d0>)
 800914a:	f7ff fc71 	bl	8008a30 <strncmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	d1e2      	bne.n	8009118 <__gethex+0x200>
 8009152:	e79a      	b.n	800908a <__gethex+0x172>
 8009154:	9b00      	ldr	r3, [sp, #0]
 8009156:	2400      	movs	r4, #0
 8009158:	429e      	cmp	r6, r3
 800915a:	dacc      	bge.n	80090f6 <__gethex+0x1de>
 800915c:	1b9e      	subs	r6, r3, r6
 800915e:	0029      	movs	r1, r5
 8009160:	0032      	movs	r2, r6
 8009162:	9803      	ldr	r0, [sp, #12]
 8009164:	f000 fbf0 	bl	8009948 <__lshift>
 8009168:	0003      	movs	r3, r0
 800916a:	3314      	adds	r3, #20
 800916c:	0005      	movs	r5, r0
 800916e:	1bbf      	subs	r7, r7, r6
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	e7c0      	b.n	80090f6 <__gethex+0x1de>
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	685e      	ldr	r6, [r3, #4]
 8009178:	42be      	cmp	r6, r7
 800917a:	dd70      	ble.n	800925e <__gethex+0x346>
 800917c:	9b00      	ldr	r3, [sp, #0]
 800917e:	1bf6      	subs	r6, r6, r7
 8009180:	42b3      	cmp	r3, r6
 8009182:	dc37      	bgt.n	80091f4 <__gethex+0x2dc>
 8009184:	9b01      	ldr	r3, [sp, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d024      	beq.n	80091d6 <__gethex+0x2be>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d026      	beq.n	80091de <__gethex+0x2c6>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d117      	bne.n	80091c4 <__gethex+0x2ac>
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	42b3      	cmp	r3, r6
 8009198:	d114      	bne.n	80091c4 <__gethex+0x2ac>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d10b      	bne.n	80091b6 <__gethex+0x29e>
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	9a07      	ldr	r2, [sp, #28]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2662      	movs	r6, #98	; 0x62
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	2301      	movs	r3, #1
 80091aa:	9a02      	ldr	r2, [sp, #8]
 80091ac:	612b      	str	r3, [r5, #16]
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b2:	601d      	str	r5, [r3, #0]
 80091b4:	e739      	b.n	800902a <__gethex+0x112>
 80091b6:	9900      	ldr	r1, [sp, #0]
 80091b8:	0028      	movs	r0, r5
 80091ba:	3901      	subs	r1, #1
 80091bc:	f000 fdf8 	bl	8009db0 <__any_on>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d1ec      	bne.n	800919e <__gethex+0x286>
 80091c4:	0029      	movs	r1, r5
 80091c6:	9803      	ldr	r0, [sp, #12]
 80091c8:	f000 f9d2 	bl	8009570 <_Bfree>
 80091cc:	2300      	movs	r3, #0
 80091ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d0:	2650      	movs	r6, #80	; 0x50
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	e729      	b.n	800902a <__gethex+0x112>
 80091d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f3      	bne.n	80091c4 <__gethex+0x2ac>
 80091dc:	e7df      	b.n	800919e <__gethex+0x286>
 80091de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1dc      	bne.n	800919e <__gethex+0x286>
 80091e4:	e7ee      	b.n	80091c4 <__gethex+0x2ac>
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	0800f6e0 	.word	0x0800f6e0
 80091ec:	0800f841 	.word	0x0800f841
 80091f0:	0800f852 	.word	0x0800f852
 80091f4:	1e77      	subs	r7, r6, #1
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d12f      	bne.n	800925a <__gethex+0x342>
 80091fa:	2f00      	cmp	r7, #0
 80091fc:	d004      	beq.n	8009208 <__gethex+0x2f0>
 80091fe:	0039      	movs	r1, r7
 8009200:	0028      	movs	r0, r5
 8009202:	f000 fdd5 	bl	8009db0 <__any_on>
 8009206:	0004      	movs	r4, r0
 8009208:	231f      	movs	r3, #31
 800920a:	117a      	asrs	r2, r7, #5
 800920c:	401f      	ands	r7, r3
 800920e:	3b1e      	subs	r3, #30
 8009210:	40bb      	lsls	r3, r7
 8009212:	9902      	ldr	r1, [sp, #8]
 8009214:	0092      	lsls	r2, r2, #2
 8009216:	5852      	ldr	r2, [r2, r1]
 8009218:	421a      	tst	r2, r3
 800921a:	d001      	beq.n	8009220 <__gethex+0x308>
 800921c:	2302      	movs	r3, #2
 800921e:	431c      	orrs	r4, r3
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	0031      	movs	r1, r6
 8009224:	1b9b      	subs	r3, r3, r6
 8009226:	2602      	movs	r6, #2
 8009228:	0028      	movs	r0, r5
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	f7ff fe0a 	bl	8008e44 <rshift>
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	685f      	ldr	r7, [r3, #4]
 8009234:	2c00      	cmp	r4, #0
 8009236:	d041      	beq.n	80092bc <__gethex+0x3a4>
 8009238:	9b01      	ldr	r3, [sp, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d010      	beq.n	8009262 <__gethex+0x34a>
 8009240:	2b03      	cmp	r3, #3
 8009242:	d012      	beq.n	800926a <__gethex+0x352>
 8009244:	2b01      	cmp	r3, #1
 8009246:	d106      	bne.n	8009256 <__gethex+0x33e>
 8009248:	07a2      	lsls	r2, r4, #30
 800924a:	d504      	bpl.n	8009256 <__gethex+0x33e>
 800924c:	9a02      	ldr	r2, [sp, #8]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	4314      	orrs	r4, r2
 8009252:	421c      	tst	r4, r3
 8009254:	d10c      	bne.n	8009270 <__gethex+0x358>
 8009256:	2310      	movs	r3, #16
 8009258:	e02f      	b.n	80092ba <__gethex+0x3a2>
 800925a:	2401      	movs	r4, #1
 800925c:	e7d4      	b.n	8009208 <__gethex+0x2f0>
 800925e:	2601      	movs	r6, #1
 8009260:	e7e8      	b.n	8009234 <__gethex+0x31c>
 8009262:	2301      	movs	r3, #1
 8009264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	930f      	str	r3, [sp, #60]	; 0x3c
 800926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f2      	beq.n	8009256 <__gethex+0x33e>
 8009270:	692b      	ldr	r3, [r5, #16]
 8009272:	2000      	movs	r0, #0
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	002b      	movs	r3, r5
 800927c:	9a04      	ldr	r2, [sp, #16]
 800927e:	3314      	adds	r3, #20
 8009280:	1899      	adds	r1, r3, r2
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	1c54      	adds	r4, r2, #1
 8009286:	d01e      	beq.n	80092c6 <__gethex+0x3ae>
 8009288:	3201      	adds	r2, #1
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	002b      	movs	r3, r5
 800928e:	3314      	adds	r3, #20
 8009290:	2e02      	cmp	r6, #2
 8009292:	d141      	bne.n	8009318 <__gethex+0x400>
 8009294:	9a01      	ldr	r2, [sp, #4]
 8009296:	9900      	ldr	r1, [sp, #0]
 8009298:	6812      	ldr	r2, [r2, #0]
 800929a:	3a01      	subs	r2, #1
 800929c:	428a      	cmp	r2, r1
 800929e:	d10b      	bne.n	80092b8 <__gethex+0x3a0>
 80092a0:	221f      	movs	r2, #31
 80092a2:	9800      	ldr	r0, [sp, #0]
 80092a4:	1149      	asrs	r1, r1, #5
 80092a6:	4002      	ands	r2, r0
 80092a8:	2001      	movs	r0, #1
 80092aa:	0004      	movs	r4, r0
 80092ac:	4094      	lsls	r4, r2
 80092ae:	0089      	lsls	r1, r1, #2
 80092b0:	58cb      	ldr	r3, [r1, r3]
 80092b2:	4223      	tst	r3, r4
 80092b4:	d000      	beq.n	80092b8 <__gethex+0x3a0>
 80092b6:	2601      	movs	r6, #1
 80092b8:	2320      	movs	r3, #32
 80092ba:	431e      	orrs	r6, r3
 80092bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	9b07      	ldr	r3, [sp, #28]
 80092c2:	601f      	str	r7, [r3, #0]
 80092c4:	e6b1      	b.n	800902a <__gethex+0x112>
 80092c6:	c301      	stmia	r3!, {r0}
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d8da      	bhi.n	8009282 <__gethex+0x36a>
 80092cc:	68ab      	ldr	r3, [r5, #8]
 80092ce:	9a02      	ldr	r2, [sp, #8]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	db18      	blt.n	8009306 <__gethex+0x3ee>
 80092d4:	6869      	ldr	r1, [r5, #4]
 80092d6:	9803      	ldr	r0, [sp, #12]
 80092d8:	3101      	adds	r1, #1
 80092da:	f000 f921 	bl	8009520 <_Balloc>
 80092de:	1e04      	subs	r4, r0, #0
 80092e0:	d104      	bne.n	80092ec <__gethex+0x3d4>
 80092e2:	0022      	movs	r2, r4
 80092e4:	2184      	movs	r1, #132	; 0x84
 80092e6:	4b1c      	ldr	r3, [pc, #112]	; (8009358 <__gethex+0x440>)
 80092e8:	481c      	ldr	r0, [pc, #112]	; (800935c <__gethex+0x444>)
 80092ea:	e6c2      	b.n	8009072 <__gethex+0x15a>
 80092ec:	0029      	movs	r1, r5
 80092ee:	692a      	ldr	r2, [r5, #16]
 80092f0:	310c      	adds	r1, #12
 80092f2:	3202      	adds	r2, #2
 80092f4:	0092      	lsls	r2, r2, #2
 80092f6:	300c      	adds	r0, #12
 80092f8:	f7ff fc77 	bl	8008bea <memcpy>
 80092fc:	0029      	movs	r1, r5
 80092fe:	9803      	ldr	r0, [sp, #12]
 8009300:	f000 f936 	bl	8009570 <_Bfree>
 8009304:	0025      	movs	r5, r4
 8009306:	692b      	ldr	r3, [r5, #16]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	612a      	str	r2, [r5, #16]
 800930c:	2201      	movs	r2, #1
 800930e:	3304      	adds	r3, #4
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	18eb      	adds	r3, r5, r3
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	e7b9      	b.n	800928c <__gethex+0x374>
 8009318:	692a      	ldr	r2, [r5, #16]
 800931a:	9902      	ldr	r1, [sp, #8]
 800931c:	428a      	cmp	r2, r1
 800931e:	dd09      	ble.n	8009334 <__gethex+0x41c>
 8009320:	2101      	movs	r1, #1
 8009322:	0028      	movs	r0, r5
 8009324:	f7ff fd8e 	bl	8008e44 <rshift>
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	3701      	adds	r7, #1
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	42bb      	cmp	r3, r7
 8009330:	dac1      	bge.n	80092b6 <__gethex+0x39e>
 8009332:	e6e4      	b.n	80090fe <__gethex+0x1e6>
 8009334:	221f      	movs	r2, #31
 8009336:	9c00      	ldr	r4, [sp, #0]
 8009338:	9900      	ldr	r1, [sp, #0]
 800933a:	2601      	movs	r6, #1
 800933c:	4014      	ands	r4, r2
 800933e:	4211      	tst	r1, r2
 8009340:	d0ba      	beq.n	80092b8 <__gethex+0x3a0>
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	189b      	adds	r3, r3, r2
 8009346:	3b04      	subs	r3, #4
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f000 f9ab 	bl	80096a4 <__hi0bits>
 800934e:	2320      	movs	r3, #32
 8009350:	1b1b      	subs	r3, r3, r4
 8009352:	4298      	cmp	r0, r3
 8009354:	dbe4      	blt.n	8009320 <__gethex+0x408>
 8009356:	e7af      	b.n	80092b8 <__gethex+0x3a0>
 8009358:	0800f841 	.word	0x0800f841
 800935c:	0800f852 	.word	0x0800f852

08009360 <L_shift>:
 8009360:	2308      	movs	r3, #8
 8009362:	b570      	push	{r4, r5, r6, lr}
 8009364:	2520      	movs	r5, #32
 8009366:	1a9a      	subs	r2, r3, r2
 8009368:	0092      	lsls	r2, r2, #2
 800936a:	1aad      	subs	r5, r5, r2
 800936c:	6843      	ldr	r3, [r0, #4]
 800936e:	6804      	ldr	r4, [r0, #0]
 8009370:	001e      	movs	r6, r3
 8009372:	40ae      	lsls	r6, r5
 8009374:	40d3      	lsrs	r3, r2
 8009376:	4334      	orrs	r4, r6
 8009378:	6004      	str	r4, [r0, #0]
 800937a:	6043      	str	r3, [r0, #4]
 800937c:	3004      	adds	r0, #4
 800937e:	4288      	cmp	r0, r1
 8009380:	d3f4      	bcc.n	800936c <L_shift+0xc>
 8009382:	bd70      	pop	{r4, r5, r6, pc}

08009384 <__match>:
 8009384:	b530      	push	{r4, r5, lr}
 8009386:	6803      	ldr	r3, [r0, #0]
 8009388:	780c      	ldrb	r4, [r1, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	2c00      	cmp	r4, #0
 800938e:	d102      	bne.n	8009396 <__match+0x12>
 8009390:	6003      	str	r3, [r0, #0]
 8009392:	2001      	movs	r0, #1
 8009394:	bd30      	pop	{r4, r5, pc}
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	0015      	movs	r5, r2
 800939a:	3d41      	subs	r5, #65	; 0x41
 800939c:	2d19      	cmp	r5, #25
 800939e:	d800      	bhi.n	80093a2 <__match+0x1e>
 80093a0:	3220      	adds	r2, #32
 80093a2:	3101      	adds	r1, #1
 80093a4:	42a2      	cmp	r2, r4
 80093a6:	d0ef      	beq.n	8009388 <__match+0x4>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7f3      	b.n	8009394 <__match+0x10>

080093ac <__hexnan>:
 80093ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ae:	680b      	ldr	r3, [r1, #0]
 80093b0:	b08b      	sub	sp, #44	; 0x2c
 80093b2:	9201      	str	r2, [sp, #4]
 80093b4:	9901      	ldr	r1, [sp, #4]
 80093b6:	115a      	asrs	r2, r3, #5
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	188a      	adds	r2, r1, r2
 80093bc:	9202      	str	r2, [sp, #8]
 80093be:	0019      	movs	r1, r3
 80093c0:	221f      	movs	r2, #31
 80093c2:	4011      	ands	r1, r2
 80093c4:	9008      	str	r0, [sp, #32]
 80093c6:	9106      	str	r1, [sp, #24]
 80093c8:	4213      	tst	r3, r2
 80093ca:	d002      	beq.n	80093d2 <__hexnan+0x26>
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	3304      	adds	r3, #4
 80093d0:	9302      	str	r3, [sp, #8]
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	2500      	movs	r5, #0
 80093d6:	1f1f      	subs	r7, r3, #4
 80093d8:	003e      	movs	r6, r7
 80093da:	003c      	movs	r4, r7
 80093dc:	9b08      	ldr	r3, [sp, #32]
 80093de:	603d      	str	r5, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9507      	str	r5, [sp, #28]
 80093e4:	9305      	str	r3, [sp, #20]
 80093e6:	9503      	str	r5, [sp, #12]
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	3301      	adds	r3, #1
 80093ec:	9309      	str	r3, [sp, #36]	; 0x24
 80093ee:	9b05      	ldr	r3, [sp, #20]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d028      	beq.n	800944a <__hexnan+0x9e>
 80093f8:	9804      	ldr	r0, [sp, #16]
 80093fa:	f7ff fd78 	bl	8008eee <__hexdig_fun>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d154      	bne.n	80094ac <__hexnan+0x100>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	2b20      	cmp	r3, #32
 8009406:	d819      	bhi.n	800943c <__hexnan+0x90>
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	9a07      	ldr	r2, [sp, #28]
 800940c:	4293      	cmp	r3, r2
 800940e:	dd12      	ble.n	8009436 <__hexnan+0x8a>
 8009410:	42b4      	cmp	r4, r6
 8009412:	d206      	bcs.n	8009422 <__hexnan+0x76>
 8009414:	2d07      	cmp	r5, #7
 8009416:	dc04      	bgt.n	8009422 <__hexnan+0x76>
 8009418:	002a      	movs	r2, r5
 800941a:	0031      	movs	r1, r6
 800941c:	0020      	movs	r0, r4
 800941e:	f7ff ff9f 	bl	8009360 <L_shift>
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	2508      	movs	r5, #8
 8009426:	429c      	cmp	r4, r3
 8009428:	d905      	bls.n	8009436 <__hexnan+0x8a>
 800942a:	1f26      	subs	r6, r4, #4
 800942c:	2500      	movs	r5, #0
 800942e:	0034      	movs	r4, r6
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	6035      	str	r5, [r6, #0]
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	e7d5      	b.n	80093e8 <__hexnan+0x3c>
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	2b29      	cmp	r3, #41	; 0x29
 8009440:	d159      	bne.n	80094f6 <__hexnan+0x14a>
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	9a08      	ldr	r2, [sp, #32]
 8009446:	3302      	adds	r3, #2
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d052      	beq.n	80094f6 <__hexnan+0x14a>
 8009450:	42b4      	cmp	r4, r6
 8009452:	d206      	bcs.n	8009462 <__hexnan+0xb6>
 8009454:	2d07      	cmp	r5, #7
 8009456:	dc04      	bgt.n	8009462 <__hexnan+0xb6>
 8009458:	002a      	movs	r2, r5
 800945a:	0031      	movs	r1, r6
 800945c:	0020      	movs	r0, r4
 800945e:	f7ff ff7f 	bl	8009360 <L_shift>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	429c      	cmp	r4, r3
 8009466:	d935      	bls.n	80094d4 <__hexnan+0x128>
 8009468:	001a      	movs	r2, r3
 800946a:	0023      	movs	r3, r4
 800946c:	cb02      	ldmia	r3!, {r1}
 800946e:	c202      	stmia	r2!, {r1}
 8009470:	429f      	cmp	r7, r3
 8009472:	d2fb      	bcs.n	800946c <__hexnan+0xc0>
 8009474:	9b02      	ldr	r3, [sp, #8]
 8009476:	1c62      	adds	r2, r4, #1
 8009478:	1ed9      	subs	r1, r3, #3
 800947a:	2304      	movs	r3, #4
 800947c:	4291      	cmp	r1, r2
 800947e:	d305      	bcc.n	800948c <__hexnan+0xe0>
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	3b04      	subs	r3, #4
 8009484:	1b1b      	subs	r3, r3, r4
 8009486:	089b      	lsrs	r3, r3, #2
 8009488:	3301      	adds	r3, #1
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	9a01      	ldr	r2, [sp, #4]
 800948e:	18d3      	adds	r3, r2, r3
 8009490:	2200      	movs	r2, #0
 8009492:	c304      	stmia	r3!, {r2}
 8009494:	429f      	cmp	r7, r3
 8009496:	d2fc      	bcs.n	8009492 <__hexnan+0xe6>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <__hexnan+0xfc>
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	429f      	cmp	r7, r3
 80094a2:	d126      	bne.n	80094f2 <__hexnan+0x146>
 80094a4:	2301      	movs	r3, #1
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	2005      	movs	r0, #5
 80094aa:	e025      	b.n	80094f8 <__hexnan+0x14c>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	3501      	adds	r5, #1
 80094b0:	3301      	adds	r3, #1
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	2d08      	cmp	r5, #8
 80094b6:	dd06      	ble.n	80094c6 <__hexnan+0x11a>
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	429c      	cmp	r4, r3
 80094bc:	d9bb      	bls.n	8009436 <__hexnan+0x8a>
 80094be:	2300      	movs	r3, #0
 80094c0:	2501      	movs	r5, #1
 80094c2:	3c04      	subs	r4, #4
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	220f      	movs	r2, #15
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	4010      	ands	r0, r2
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	4303      	orrs	r3, r0
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	e7b0      	b.n	8009436 <__hexnan+0x8a>
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0de      	beq.n	8009498 <__hexnan+0xec>
 80094da:	2320      	movs	r3, #32
 80094dc:	9a06      	ldr	r2, [sp, #24]
 80094de:	9902      	ldr	r1, [sp, #8]
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	2201      	movs	r2, #1
 80094e4:	4252      	negs	r2, r2
 80094e6:	40da      	lsrs	r2, r3
 80094e8:	3904      	subs	r1, #4
 80094ea:	680b      	ldr	r3, [r1, #0]
 80094ec:	4013      	ands	r3, r2
 80094ee:	600b      	str	r3, [r1, #0]
 80094f0:	e7d2      	b.n	8009498 <__hexnan+0xec>
 80094f2:	3f04      	subs	r7, #4
 80094f4:	e7d0      	b.n	8009498 <__hexnan+0xec>
 80094f6:	2004      	movs	r0, #4
 80094f8:	b00b      	add	sp, #44	; 0x2c
 80094fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094fc <__ascii_mbtowc>:
 80094fc:	b082      	sub	sp, #8
 80094fe:	2900      	cmp	r1, #0
 8009500:	d100      	bne.n	8009504 <__ascii_mbtowc+0x8>
 8009502:	a901      	add	r1, sp, #4
 8009504:	1e10      	subs	r0, r2, #0
 8009506:	d006      	beq.n	8009516 <__ascii_mbtowc+0x1a>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <__ascii_mbtowc+0x1e>
 800950c:	7813      	ldrb	r3, [r2, #0]
 800950e:	600b      	str	r3, [r1, #0]
 8009510:	7810      	ldrb	r0, [r2, #0]
 8009512:	1e43      	subs	r3, r0, #1
 8009514:	4198      	sbcs	r0, r3
 8009516:	b002      	add	sp, #8
 8009518:	4770      	bx	lr
 800951a:	2002      	movs	r0, #2
 800951c:	4240      	negs	r0, r0
 800951e:	e7fa      	b.n	8009516 <__ascii_mbtowc+0x1a>

08009520 <_Balloc>:
 8009520:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	0006      	movs	r6, r0
 8009526:	000c      	movs	r4, r1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d012      	beq.n	8009552 <_Balloc+0x32>
 800952c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800952e:	00a2      	lsls	r2, r4, #2
 8009530:	189b      	adds	r3, r3, r2
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	2800      	cmp	r0, #0
 8009536:	d115      	bne.n	8009564 <_Balloc+0x44>
 8009538:	2101      	movs	r1, #1
 800953a:	000d      	movs	r5, r1
 800953c:	40a5      	lsls	r5, r4
 800953e:	1d6a      	adds	r2, r5, #5
 8009540:	0030      	movs	r0, r6
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	f003 face 	bl	800cae4 <_calloc_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	d009      	beq.n	8009560 <_Balloc+0x40>
 800954c:	6044      	str	r4, [r0, #4]
 800954e:	6085      	str	r5, [r0, #8]
 8009550:	e00a      	b.n	8009568 <_Balloc+0x48>
 8009552:	2221      	movs	r2, #33	; 0x21
 8009554:	2104      	movs	r1, #4
 8009556:	f003 fac5 	bl	800cae4 <_calloc_r>
 800955a:	6470      	str	r0, [r6, #68]	; 0x44
 800955c:	2800      	cmp	r0, #0
 800955e:	d1e5      	bne.n	800952c <_Balloc+0xc>
 8009560:	2000      	movs	r0, #0
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	6802      	ldr	r2, [r0, #0]
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	2300      	movs	r3, #0
 800956a:	6103      	str	r3, [r0, #16]
 800956c:	60c3      	str	r3, [r0, #12]
 800956e:	e7f8      	b.n	8009562 <_Balloc+0x42>

08009570 <_Bfree>:
 8009570:	2900      	cmp	r1, #0
 8009572:	d006      	beq.n	8009582 <_Bfree+0x12>
 8009574:	684a      	ldr	r2, [r1, #4]
 8009576:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	189b      	adds	r3, r3, r2
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	600a      	str	r2, [r1, #0]
 8009580:	6019      	str	r1, [r3, #0]
 8009582:	4770      	bx	lr

08009584 <__multadd>:
 8009584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009586:	000e      	movs	r6, r1
 8009588:	9001      	str	r0, [sp, #4]
 800958a:	000c      	movs	r4, r1
 800958c:	001d      	movs	r5, r3
 800958e:	2000      	movs	r0, #0
 8009590:	690f      	ldr	r7, [r1, #16]
 8009592:	3614      	adds	r6, #20
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	3001      	adds	r0, #1
 8009598:	b299      	uxth	r1, r3
 800959a:	4351      	muls	r1, r2
 800959c:	0c1b      	lsrs	r3, r3, #16
 800959e:	4353      	muls	r3, r2
 80095a0:	1949      	adds	r1, r1, r5
 80095a2:	0c0d      	lsrs	r5, r1, #16
 80095a4:	195b      	adds	r3, r3, r5
 80095a6:	0c1d      	lsrs	r5, r3, #16
 80095a8:	b289      	uxth	r1, r1
 80095aa:	041b      	lsls	r3, r3, #16
 80095ac:	185b      	adds	r3, r3, r1
 80095ae:	c608      	stmia	r6!, {r3}
 80095b0:	4287      	cmp	r7, r0
 80095b2:	dcef      	bgt.n	8009594 <__multadd+0x10>
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	d022      	beq.n	80095fe <__multadd+0x7a>
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	42bb      	cmp	r3, r7
 80095bc:	dc19      	bgt.n	80095f2 <__multadd+0x6e>
 80095be:	6861      	ldr	r1, [r4, #4]
 80095c0:	9801      	ldr	r0, [sp, #4]
 80095c2:	3101      	adds	r1, #1
 80095c4:	f7ff ffac 	bl	8009520 <_Balloc>
 80095c8:	1e06      	subs	r6, r0, #0
 80095ca:	d105      	bne.n	80095d8 <__multadd+0x54>
 80095cc:	0032      	movs	r2, r6
 80095ce:	21ba      	movs	r1, #186	; 0xba
 80095d0:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <__multadd+0x80>)
 80095d2:	480d      	ldr	r0, [pc, #52]	; (8009608 <__multadd+0x84>)
 80095d4:	f003 fa68 	bl	800caa8 <__assert_func>
 80095d8:	0021      	movs	r1, r4
 80095da:	6922      	ldr	r2, [r4, #16]
 80095dc:	310c      	adds	r1, #12
 80095de:	3202      	adds	r2, #2
 80095e0:	0092      	lsls	r2, r2, #2
 80095e2:	300c      	adds	r0, #12
 80095e4:	f7ff fb01 	bl	8008bea <memcpy>
 80095e8:	0021      	movs	r1, r4
 80095ea:	9801      	ldr	r0, [sp, #4]
 80095ec:	f7ff ffc0 	bl	8009570 <_Bfree>
 80095f0:	0034      	movs	r4, r6
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	18e3      	adds	r3, r4, r3
 80095f8:	605d      	str	r5, [r3, #4]
 80095fa:	1c7b      	adds	r3, r7, #1
 80095fc:	6123      	str	r3, [r4, #16]
 80095fe:	0020      	movs	r0, r4
 8009600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	0800f841 	.word	0x0800f841
 8009608:	0800f8b2 	.word	0x0800f8b2

0800960c <__s2b>:
 800960c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960e:	0006      	movs	r6, r0
 8009610:	0018      	movs	r0, r3
 8009612:	000c      	movs	r4, r1
 8009614:	3008      	adds	r0, #8
 8009616:	2109      	movs	r1, #9
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	0015      	movs	r5, r2
 800961c:	f7f6 fe18 	bl	8000250 <__divsi3>
 8009620:	2301      	movs	r3, #1
 8009622:	2100      	movs	r1, #0
 8009624:	4283      	cmp	r3, r0
 8009626:	db0a      	blt.n	800963e <__s2b+0x32>
 8009628:	0030      	movs	r0, r6
 800962a:	f7ff ff79 	bl	8009520 <_Balloc>
 800962e:	1e01      	subs	r1, r0, #0
 8009630:	d108      	bne.n	8009644 <__s2b+0x38>
 8009632:	000a      	movs	r2, r1
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <__s2b+0x90>)
 8009636:	481a      	ldr	r0, [pc, #104]	; (80096a0 <__s2b+0x94>)
 8009638:	31d3      	adds	r1, #211	; 0xd3
 800963a:	f003 fa35 	bl	800caa8 <__assert_func>
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	3101      	adds	r1, #1
 8009642:	e7ef      	b.n	8009624 <__s2b+0x18>
 8009644:	9b08      	ldr	r3, [sp, #32]
 8009646:	6143      	str	r3, [r0, #20]
 8009648:	2301      	movs	r3, #1
 800964a:	6103      	str	r3, [r0, #16]
 800964c:	2d09      	cmp	r5, #9
 800964e:	dd18      	ble.n	8009682 <__s2b+0x76>
 8009650:	0023      	movs	r3, r4
 8009652:	3309      	adds	r3, #9
 8009654:	001f      	movs	r7, r3
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	1964      	adds	r4, r4, r5
 800965a:	783b      	ldrb	r3, [r7, #0]
 800965c:	220a      	movs	r2, #10
 800965e:	0030      	movs	r0, r6
 8009660:	3b30      	subs	r3, #48	; 0x30
 8009662:	f7ff ff8f 	bl	8009584 <__multadd>
 8009666:	3701      	adds	r7, #1
 8009668:	0001      	movs	r1, r0
 800966a:	42a7      	cmp	r7, r4
 800966c:	d1f5      	bne.n	800965a <__s2b+0x4e>
 800966e:	002c      	movs	r4, r5
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	3c08      	subs	r4, #8
 8009674:	191c      	adds	r4, r3, r4
 8009676:	002f      	movs	r7, r5
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	429f      	cmp	r7, r3
 800967c:	db04      	blt.n	8009688 <__s2b+0x7c>
 800967e:	0008      	movs	r0, r1
 8009680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009682:	2509      	movs	r5, #9
 8009684:	340a      	adds	r4, #10
 8009686:	e7f6      	b.n	8009676 <__s2b+0x6a>
 8009688:	1b63      	subs	r3, r4, r5
 800968a:	5ddb      	ldrb	r3, [r3, r7]
 800968c:	220a      	movs	r2, #10
 800968e:	0030      	movs	r0, r6
 8009690:	3b30      	subs	r3, #48	; 0x30
 8009692:	f7ff ff77 	bl	8009584 <__multadd>
 8009696:	3701      	adds	r7, #1
 8009698:	0001      	movs	r1, r0
 800969a:	e7ed      	b.n	8009678 <__s2b+0x6c>
 800969c:	0800f841 	.word	0x0800f841
 80096a0:	0800f8b2 	.word	0x0800f8b2

080096a4 <__hi0bits>:
 80096a4:	0003      	movs	r3, r0
 80096a6:	0c02      	lsrs	r2, r0, #16
 80096a8:	2000      	movs	r0, #0
 80096aa:	4282      	cmp	r2, r0
 80096ac:	d101      	bne.n	80096b2 <__hi0bits+0xe>
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	3010      	adds	r0, #16
 80096b2:	0e1a      	lsrs	r2, r3, #24
 80096b4:	d101      	bne.n	80096ba <__hi0bits+0x16>
 80096b6:	3008      	adds	r0, #8
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	0f1a      	lsrs	r2, r3, #28
 80096bc:	d101      	bne.n	80096c2 <__hi0bits+0x1e>
 80096be:	3004      	adds	r0, #4
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	0f9a      	lsrs	r2, r3, #30
 80096c4:	d101      	bne.n	80096ca <__hi0bits+0x26>
 80096c6:	3002      	adds	r0, #2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db03      	blt.n	80096d6 <__hi0bits+0x32>
 80096ce:	3001      	adds	r0, #1
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	d400      	bmi.n	80096d6 <__hi0bits+0x32>
 80096d4:	2020      	movs	r0, #32
 80096d6:	4770      	bx	lr

080096d8 <__lo0bits>:
 80096d8:	6803      	ldr	r3, [r0, #0]
 80096da:	0001      	movs	r1, r0
 80096dc:	2207      	movs	r2, #7
 80096de:	0018      	movs	r0, r3
 80096e0:	4010      	ands	r0, r2
 80096e2:	4213      	tst	r3, r2
 80096e4:	d00d      	beq.n	8009702 <__lo0bits+0x2a>
 80096e6:	3a06      	subs	r2, #6
 80096e8:	2000      	movs	r0, #0
 80096ea:	4213      	tst	r3, r2
 80096ec:	d105      	bne.n	80096fa <__lo0bits+0x22>
 80096ee:	3002      	adds	r0, #2
 80096f0:	4203      	tst	r3, r0
 80096f2:	d003      	beq.n	80096fc <__lo0bits+0x24>
 80096f4:	40d3      	lsrs	r3, r2
 80096f6:	0010      	movs	r0, r2
 80096f8:	600b      	str	r3, [r1, #0]
 80096fa:	4770      	bx	lr
 80096fc:	089b      	lsrs	r3, r3, #2
 80096fe:	600b      	str	r3, [r1, #0]
 8009700:	e7fb      	b.n	80096fa <__lo0bits+0x22>
 8009702:	b29a      	uxth	r2, r3
 8009704:	2a00      	cmp	r2, #0
 8009706:	d101      	bne.n	800970c <__lo0bits+0x34>
 8009708:	2010      	movs	r0, #16
 800970a:	0c1b      	lsrs	r3, r3, #16
 800970c:	b2da      	uxtb	r2, r3
 800970e:	2a00      	cmp	r2, #0
 8009710:	d101      	bne.n	8009716 <__lo0bits+0x3e>
 8009712:	3008      	adds	r0, #8
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	071a      	lsls	r2, r3, #28
 8009718:	d101      	bne.n	800971e <__lo0bits+0x46>
 800971a:	3004      	adds	r0, #4
 800971c:	091b      	lsrs	r3, r3, #4
 800971e:	079a      	lsls	r2, r3, #30
 8009720:	d101      	bne.n	8009726 <__lo0bits+0x4e>
 8009722:	3002      	adds	r0, #2
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	07da      	lsls	r2, r3, #31
 8009728:	d4e9      	bmi.n	80096fe <__lo0bits+0x26>
 800972a:	3001      	adds	r0, #1
 800972c:	085b      	lsrs	r3, r3, #1
 800972e:	d1e6      	bne.n	80096fe <__lo0bits+0x26>
 8009730:	2020      	movs	r0, #32
 8009732:	e7e2      	b.n	80096fa <__lo0bits+0x22>

08009734 <__i2b>:
 8009734:	b510      	push	{r4, lr}
 8009736:	000c      	movs	r4, r1
 8009738:	2101      	movs	r1, #1
 800973a:	f7ff fef1 	bl	8009520 <_Balloc>
 800973e:	2800      	cmp	r0, #0
 8009740:	d107      	bne.n	8009752 <__i2b+0x1e>
 8009742:	2146      	movs	r1, #70	; 0x46
 8009744:	4c05      	ldr	r4, [pc, #20]	; (800975c <__i2b+0x28>)
 8009746:	0002      	movs	r2, r0
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <__i2b+0x2c>)
 800974a:	0020      	movs	r0, r4
 800974c:	31ff      	adds	r1, #255	; 0xff
 800974e:	f003 f9ab 	bl	800caa8 <__assert_func>
 8009752:	2301      	movs	r3, #1
 8009754:	6144      	str	r4, [r0, #20]
 8009756:	6103      	str	r3, [r0, #16]
 8009758:	bd10      	pop	{r4, pc}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	0800f8b2 	.word	0x0800f8b2
 8009760:	0800f841 	.word	0x0800f841

08009764 <__multiply>:
 8009764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009766:	0015      	movs	r5, r2
 8009768:	690a      	ldr	r2, [r1, #16]
 800976a:	692b      	ldr	r3, [r5, #16]
 800976c:	000c      	movs	r4, r1
 800976e:	b08b      	sub	sp, #44	; 0x2c
 8009770:	429a      	cmp	r2, r3
 8009772:	da01      	bge.n	8009778 <__multiply+0x14>
 8009774:	002c      	movs	r4, r5
 8009776:	000d      	movs	r5, r1
 8009778:	6927      	ldr	r7, [r4, #16]
 800977a:	692e      	ldr	r6, [r5, #16]
 800977c:	6861      	ldr	r1, [r4, #4]
 800977e:	19bb      	adds	r3, r7, r6
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	19ba      	adds	r2, r7, r6
 8009786:	4293      	cmp	r3, r2
 8009788:	da00      	bge.n	800978c <__multiply+0x28>
 800978a:	3101      	adds	r1, #1
 800978c:	f7ff fec8 	bl	8009520 <_Balloc>
 8009790:	9002      	str	r0, [sp, #8]
 8009792:	2800      	cmp	r0, #0
 8009794:	d106      	bne.n	80097a4 <__multiply+0x40>
 8009796:	21b1      	movs	r1, #177	; 0xb1
 8009798:	4b48      	ldr	r3, [pc, #288]	; (80098bc <__multiply+0x158>)
 800979a:	4849      	ldr	r0, [pc, #292]	; (80098c0 <__multiply+0x15c>)
 800979c:	9a02      	ldr	r2, [sp, #8]
 800979e:	0049      	lsls	r1, r1, #1
 80097a0:	f003 f982 	bl	800caa8 <__assert_func>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	3314      	adds	r3, #20
 80097aa:	469c      	mov	ip, r3
 80097ac:	19bb      	adds	r3, r7, r6
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4463      	add	r3, ip
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	4663      	mov	r3, ip
 80097b6:	9904      	ldr	r1, [sp, #16]
 80097b8:	428b      	cmp	r3, r1
 80097ba:	d32a      	bcc.n	8009812 <__multiply+0xae>
 80097bc:	0023      	movs	r3, r4
 80097be:	00bf      	lsls	r7, r7, #2
 80097c0:	3314      	adds	r3, #20
 80097c2:	3514      	adds	r5, #20
 80097c4:	9308      	str	r3, [sp, #32]
 80097c6:	00b6      	lsls	r6, r6, #2
 80097c8:	19db      	adds	r3, r3, r7
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	19ab      	adds	r3, r5, r6
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	2304      	movs	r3, #4
 80097d2:	9306      	str	r3, [sp, #24]
 80097d4:	0023      	movs	r3, r4
 80097d6:	9a05      	ldr	r2, [sp, #20]
 80097d8:	3315      	adds	r3, #21
 80097da:	9501      	str	r5, [sp, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d305      	bcc.n	80097ec <__multiply+0x88>
 80097e0:	1b13      	subs	r3, r2, r4
 80097e2:	3b15      	subs	r3, #21
 80097e4:	089b      	lsrs	r3, r3, #2
 80097e6:	3301      	adds	r3, #1
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	9306      	str	r3, [sp, #24]
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d310      	bcc.n	8009816 <__multiply+0xb2>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dd05      	ble.n	8009806 <__multiply+0xa2>
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	3b04      	subs	r3, #4
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d056      	beq.n	80098b4 <__multiply+0x150>
 8009806:	9b02      	ldr	r3, [sp, #8]
 8009808:	9a03      	ldr	r2, [sp, #12]
 800980a:	0018      	movs	r0, r3
 800980c:	611a      	str	r2, [r3, #16]
 800980e:	b00b      	add	sp, #44	; 0x2c
 8009810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009812:	c304      	stmia	r3!, {r2}
 8009814:	e7cf      	b.n	80097b6 <__multiply+0x52>
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	b280      	uxth	r0, r0
 800981c:	2800      	cmp	r0, #0
 800981e:	d01e      	beq.n	800985e <__multiply+0xfa>
 8009820:	4667      	mov	r7, ip
 8009822:	2500      	movs	r5, #0
 8009824:	9e08      	ldr	r6, [sp, #32]
 8009826:	ce02      	ldmia	r6!, {r1}
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	9307      	str	r3, [sp, #28]
 800982c:	b28b      	uxth	r3, r1
 800982e:	4343      	muls	r3, r0
 8009830:	001a      	movs	r2, r3
 8009832:	466b      	mov	r3, sp
 8009834:	8b9b      	ldrh	r3, [r3, #28]
 8009836:	18d3      	adds	r3, r2, r3
 8009838:	195b      	adds	r3, r3, r5
 800983a:	0c0d      	lsrs	r5, r1, #16
 800983c:	4345      	muls	r5, r0
 800983e:	9a07      	ldr	r2, [sp, #28]
 8009840:	0c11      	lsrs	r1, r2, #16
 8009842:	1869      	adds	r1, r5, r1
 8009844:	0c1a      	lsrs	r2, r3, #16
 8009846:	188a      	adds	r2, r1, r2
 8009848:	b29b      	uxth	r3, r3
 800984a:	0c15      	lsrs	r5, r2, #16
 800984c:	0412      	lsls	r2, r2, #16
 800984e:	431a      	orrs	r2, r3
 8009850:	9b05      	ldr	r3, [sp, #20]
 8009852:	c704      	stmia	r7!, {r2}
 8009854:	42b3      	cmp	r3, r6
 8009856:	d8e6      	bhi.n	8009826 <__multiply+0xc2>
 8009858:	4663      	mov	r3, ip
 800985a:	9a06      	ldr	r2, [sp, #24]
 800985c:	509d      	str	r5, [r3, r2]
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	0c00      	lsrs	r0, r0, #16
 8009864:	d020      	beq.n	80098a8 <__multiply+0x144>
 8009866:	4663      	mov	r3, ip
 8009868:	0025      	movs	r5, r4
 800986a:	4661      	mov	r1, ip
 800986c:	2700      	movs	r7, #0
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3514      	adds	r5, #20
 8009872:	682a      	ldr	r2, [r5, #0]
 8009874:	680e      	ldr	r6, [r1, #0]
 8009876:	b292      	uxth	r2, r2
 8009878:	4342      	muls	r2, r0
 800987a:	0c36      	lsrs	r6, r6, #16
 800987c:	1992      	adds	r2, r2, r6
 800987e:	19d2      	adds	r2, r2, r7
 8009880:	0416      	lsls	r6, r2, #16
 8009882:	b29b      	uxth	r3, r3
 8009884:	431e      	orrs	r6, r3
 8009886:	600e      	str	r6, [r1, #0]
 8009888:	cd40      	ldmia	r5!, {r6}
 800988a:	684b      	ldr	r3, [r1, #4]
 800988c:	0c36      	lsrs	r6, r6, #16
 800988e:	4346      	muls	r6, r0
 8009890:	b29b      	uxth	r3, r3
 8009892:	0c12      	lsrs	r2, r2, #16
 8009894:	18f3      	adds	r3, r6, r3
 8009896:	189b      	adds	r3, r3, r2
 8009898:	9a05      	ldr	r2, [sp, #20]
 800989a:	0c1f      	lsrs	r7, r3, #16
 800989c:	3104      	adds	r1, #4
 800989e:	42aa      	cmp	r2, r5
 80098a0:	d8e7      	bhi.n	8009872 <__multiply+0x10e>
 80098a2:	4662      	mov	r2, ip
 80098a4:	9906      	ldr	r1, [sp, #24]
 80098a6:	5053      	str	r3, [r2, r1]
 80098a8:	9b01      	ldr	r3, [sp, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	2304      	movs	r3, #4
 80098b0:	449c      	add	ip, r3
 80098b2:	e79b      	b.n	80097ec <__multiply+0x88>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	e79b      	b.n	80097f4 <__multiply+0x90>
 80098bc:	0800f841 	.word	0x0800f841
 80098c0:	0800f8b2 	.word	0x0800f8b2

080098c4 <__pow5mult>:
 80098c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c6:	2303      	movs	r3, #3
 80098c8:	0015      	movs	r5, r2
 80098ca:	0007      	movs	r7, r0
 80098cc:	000e      	movs	r6, r1
 80098ce:	401a      	ands	r2, r3
 80098d0:	421d      	tst	r5, r3
 80098d2:	d008      	beq.n	80098e6 <__pow5mult+0x22>
 80098d4:	491a      	ldr	r1, [pc, #104]	; (8009940 <__pow5mult+0x7c>)
 80098d6:	3a01      	subs	r2, #1
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	5852      	ldr	r2, [r2, r1]
 80098dc:	2300      	movs	r3, #0
 80098de:	0031      	movs	r1, r6
 80098e0:	f7ff fe50 	bl	8009584 <__multadd>
 80098e4:	0006      	movs	r6, r0
 80098e6:	10ad      	asrs	r5, r5, #2
 80098e8:	d027      	beq.n	800993a <__pow5mult+0x76>
 80098ea:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80098ec:	2c00      	cmp	r4, #0
 80098ee:	d107      	bne.n	8009900 <__pow5mult+0x3c>
 80098f0:	0038      	movs	r0, r7
 80098f2:	4914      	ldr	r1, [pc, #80]	; (8009944 <__pow5mult+0x80>)
 80098f4:	f7ff ff1e 	bl	8009734 <__i2b>
 80098f8:	2300      	movs	r3, #0
 80098fa:	0004      	movs	r4, r0
 80098fc:	6438      	str	r0, [r7, #64]	; 0x40
 80098fe:	6003      	str	r3, [r0, #0]
 8009900:	2301      	movs	r3, #1
 8009902:	421d      	tst	r5, r3
 8009904:	d00a      	beq.n	800991c <__pow5mult+0x58>
 8009906:	0031      	movs	r1, r6
 8009908:	0022      	movs	r2, r4
 800990a:	0038      	movs	r0, r7
 800990c:	f7ff ff2a 	bl	8009764 <__multiply>
 8009910:	0031      	movs	r1, r6
 8009912:	9001      	str	r0, [sp, #4]
 8009914:	0038      	movs	r0, r7
 8009916:	f7ff fe2b 	bl	8009570 <_Bfree>
 800991a:	9e01      	ldr	r6, [sp, #4]
 800991c:	106d      	asrs	r5, r5, #1
 800991e:	d00c      	beq.n	800993a <__pow5mult+0x76>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	2800      	cmp	r0, #0
 8009924:	d107      	bne.n	8009936 <__pow5mult+0x72>
 8009926:	0022      	movs	r2, r4
 8009928:	0021      	movs	r1, r4
 800992a:	0038      	movs	r0, r7
 800992c:	f7ff ff1a 	bl	8009764 <__multiply>
 8009930:	2300      	movs	r3, #0
 8009932:	6020      	str	r0, [r4, #0]
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	0004      	movs	r4, r0
 8009938:	e7e2      	b.n	8009900 <__pow5mult+0x3c>
 800993a:	0030      	movs	r0, r6
 800993c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	0800fa00 	.word	0x0800fa00
 8009944:	00000271 	.word	0x00000271

08009948 <__lshift>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	000c      	movs	r4, r1
 800994c:	0017      	movs	r7, r2
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	1155      	asrs	r5, r2, #5
 8009952:	b087      	sub	sp, #28
 8009954:	18eb      	adds	r3, r5, r3
 8009956:	9302      	str	r3, [sp, #8]
 8009958:	3301      	adds	r3, #1
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	6849      	ldr	r1, [r1, #4]
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	9004      	str	r0, [sp, #16]
 8009962:	9a01      	ldr	r2, [sp, #4]
 8009964:	4293      	cmp	r3, r2
 8009966:	db10      	blt.n	800998a <__lshift+0x42>
 8009968:	9804      	ldr	r0, [sp, #16]
 800996a:	f7ff fdd9 	bl	8009520 <_Balloc>
 800996e:	2300      	movs	r3, #0
 8009970:	0002      	movs	r2, r0
 8009972:	0006      	movs	r6, r0
 8009974:	0019      	movs	r1, r3
 8009976:	3214      	adds	r2, #20
 8009978:	4298      	cmp	r0, r3
 800997a:	d10c      	bne.n	8009996 <__lshift+0x4e>
 800997c:	31df      	adds	r1, #223	; 0xdf
 800997e:	0032      	movs	r2, r6
 8009980:	4b26      	ldr	r3, [pc, #152]	; (8009a1c <__lshift+0xd4>)
 8009982:	4827      	ldr	r0, [pc, #156]	; (8009a20 <__lshift+0xd8>)
 8009984:	31ff      	adds	r1, #255	; 0xff
 8009986:	f003 f88f 	bl	800caa8 <__assert_func>
 800998a:	3101      	adds	r1, #1
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	e7e8      	b.n	8009962 <__lshift+0x1a>
 8009990:	0098      	lsls	r0, r3, #2
 8009992:	5011      	str	r1, [r2, r0]
 8009994:	3301      	adds	r3, #1
 8009996:	42ab      	cmp	r3, r5
 8009998:	dbfa      	blt.n	8009990 <__lshift+0x48>
 800999a:	43eb      	mvns	r3, r5
 800999c:	17db      	asrs	r3, r3, #31
 800999e:	401d      	ands	r5, r3
 80099a0:	211f      	movs	r1, #31
 80099a2:	0023      	movs	r3, r4
 80099a4:	0038      	movs	r0, r7
 80099a6:	00ad      	lsls	r5, r5, #2
 80099a8:	1955      	adds	r5, r2, r5
 80099aa:	6922      	ldr	r2, [r4, #16]
 80099ac:	3314      	adds	r3, #20
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	4008      	ands	r0, r1
 80099b2:	4684      	mov	ip, r0
 80099b4:	189a      	adds	r2, r3, r2
 80099b6:	420f      	tst	r7, r1
 80099b8:	d02a      	beq.n	8009a10 <__lshift+0xc8>
 80099ba:	3101      	adds	r1, #1
 80099bc:	1a09      	subs	r1, r1, r0
 80099be:	9105      	str	r1, [sp, #20]
 80099c0:	2100      	movs	r1, #0
 80099c2:	9503      	str	r5, [sp, #12]
 80099c4:	4667      	mov	r7, ip
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	40b8      	lsls	r0, r7
 80099ca:	4308      	orrs	r0, r1
 80099cc:	9903      	ldr	r1, [sp, #12]
 80099ce:	c101      	stmia	r1!, {r0}
 80099d0:	9103      	str	r1, [sp, #12]
 80099d2:	9805      	ldr	r0, [sp, #20]
 80099d4:	cb02      	ldmia	r3!, {r1}
 80099d6:	40c1      	lsrs	r1, r0
 80099d8:	429a      	cmp	r2, r3
 80099da:	d8f3      	bhi.n	80099c4 <__lshift+0x7c>
 80099dc:	0020      	movs	r0, r4
 80099de:	3015      	adds	r0, #21
 80099e0:	2304      	movs	r3, #4
 80099e2:	4282      	cmp	r2, r0
 80099e4:	d304      	bcc.n	80099f0 <__lshift+0xa8>
 80099e6:	1b13      	subs	r3, r2, r4
 80099e8:	3b15      	subs	r3, #21
 80099ea:	089b      	lsrs	r3, r3, #2
 80099ec:	3301      	adds	r3, #1
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	50e9      	str	r1, [r5, r3]
 80099f2:	2900      	cmp	r1, #0
 80099f4:	d002      	beq.n	80099fc <__lshift+0xb4>
 80099f6:	9b02      	ldr	r3, [sp, #8]
 80099f8:	3302      	adds	r3, #2
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	9804      	ldr	r0, [sp, #16]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	0021      	movs	r1, r4
 8009a04:	6133      	str	r3, [r6, #16]
 8009a06:	f7ff fdb3 	bl	8009570 <_Bfree>
 8009a0a:	0030      	movs	r0, r6
 8009a0c:	b007      	add	sp, #28
 8009a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a10:	cb02      	ldmia	r3!, {r1}
 8009a12:	c502      	stmia	r5!, {r1}
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d8fb      	bhi.n	8009a10 <__lshift+0xc8>
 8009a18:	e7f0      	b.n	80099fc <__lshift+0xb4>
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	0800f841 	.word	0x0800f841
 8009a20:	0800f8b2 	.word	0x0800f8b2

08009a24 <__mcmp>:
 8009a24:	b530      	push	{r4, r5, lr}
 8009a26:	690b      	ldr	r3, [r1, #16]
 8009a28:	6904      	ldr	r4, [r0, #16]
 8009a2a:	0002      	movs	r2, r0
 8009a2c:	1ae0      	subs	r0, r4, r3
 8009a2e:	429c      	cmp	r4, r3
 8009a30:	d10e      	bne.n	8009a50 <__mcmp+0x2c>
 8009a32:	3214      	adds	r2, #20
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	3114      	adds	r1, #20
 8009a38:	0014      	movs	r4, r2
 8009a3a:	18c9      	adds	r1, r1, r3
 8009a3c:	18d2      	adds	r2, r2, r3
 8009a3e:	3a04      	subs	r2, #4
 8009a40:	3904      	subs	r1, #4
 8009a42:	6815      	ldr	r5, [r2, #0]
 8009a44:	680b      	ldr	r3, [r1, #0]
 8009a46:	429d      	cmp	r5, r3
 8009a48:	d003      	beq.n	8009a52 <__mcmp+0x2e>
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	429d      	cmp	r5, r3
 8009a4e:	d303      	bcc.n	8009a58 <__mcmp+0x34>
 8009a50:	bd30      	pop	{r4, r5, pc}
 8009a52:	4294      	cmp	r4, r2
 8009a54:	d3f3      	bcc.n	8009a3e <__mcmp+0x1a>
 8009a56:	e7fb      	b.n	8009a50 <__mcmp+0x2c>
 8009a58:	4240      	negs	r0, r0
 8009a5a:	e7f9      	b.n	8009a50 <__mcmp+0x2c>

08009a5c <__mdiff>:
 8009a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a5e:	000e      	movs	r6, r1
 8009a60:	0007      	movs	r7, r0
 8009a62:	0011      	movs	r1, r2
 8009a64:	0030      	movs	r0, r6
 8009a66:	b087      	sub	sp, #28
 8009a68:	0014      	movs	r4, r2
 8009a6a:	f7ff ffdb 	bl	8009a24 <__mcmp>
 8009a6e:	1e05      	subs	r5, r0, #0
 8009a70:	d110      	bne.n	8009a94 <__mdiff+0x38>
 8009a72:	0001      	movs	r1, r0
 8009a74:	0038      	movs	r0, r7
 8009a76:	f7ff fd53 	bl	8009520 <_Balloc>
 8009a7a:	1e02      	subs	r2, r0, #0
 8009a7c:	d104      	bne.n	8009a88 <__mdiff+0x2c>
 8009a7e:	4b3f      	ldr	r3, [pc, #252]	; (8009b7c <__mdiff+0x120>)
 8009a80:	483f      	ldr	r0, [pc, #252]	; (8009b80 <__mdiff+0x124>)
 8009a82:	4940      	ldr	r1, [pc, #256]	; (8009b84 <__mdiff+0x128>)
 8009a84:	f003 f810 	bl	800caa8 <__assert_func>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	6145      	str	r5, [r0, #20]
 8009a8c:	6103      	str	r3, [r0, #16]
 8009a8e:	0010      	movs	r0, r2
 8009a90:	b007      	add	sp, #28
 8009a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a94:	2301      	movs	r3, #1
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	db04      	blt.n	8009aa6 <__mdiff+0x4a>
 8009a9c:	0023      	movs	r3, r4
 8009a9e:	0034      	movs	r4, r6
 8009aa0:	001e      	movs	r6, r3
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	0038      	movs	r0, r7
 8009aa8:	6861      	ldr	r1, [r4, #4]
 8009aaa:	f7ff fd39 	bl	8009520 <_Balloc>
 8009aae:	1e02      	subs	r2, r0, #0
 8009ab0:	d103      	bne.n	8009aba <__mdiff+0x5e>
 8009ab2:	4b32      	ldr	r3, [pc, #200]	; (8009b7c <__mdiff+0x120>)
 8009ab4:	4832      	ldr	r0, [pc, #200]	; (8009b80 <__mdiff+0x124>)
 8009ab6:	4934      	ldr	r1, [pc, #208]	; (8009b88 <__mdiff+0x12c>)
 8009ab8:	e7e4      	b.n	8009a84 <__mdiff+0x28>
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	2700      	movs	r7, #0
 8009abe:	60c3      	str	r3, [r0, #12]
 8009ac0:	6920      	ldr	r0, [r4, #16]
 8009ac2:	3414      	adds	r4, #20
 8009ac4:	0083      	lsls	r3, r0, #2
 8009ac6:	18e3      	adds	r3, r4, r3
 8009ac8:	0021      	movs	r1, r4
 8009aca:	9401      	str	r4, [sp, #4]
 8009acc:	0034      	movs	r4, r6
 8009ace:	9302      	str	r3, [sp, #8]
 8009ad0:	6933      	ldr	r3, [r6, #16]
 8009ad2:	3414      	adds	r4, #20
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	18e3      	adds	r3, r4, r3
 8009ad8:	9303      	str	r3, [sp, #12]
 8009ada:	0013      	movs	r3, r2
 8009adc:	3314      	adds	r3, #20
 8009ade:	469c      	mov	ip, r3
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	9104      	str	r1, [sp, #16]
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	cc02      	ldmia	r4!, {r1}
 8009ae8:	cb20      	ldmia	r3!, {r5}
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	b2ab      	uxth	r3, r5
 8009aee:	19df      	adds	r7, r3, r7
 8009af0:	b28b      	uxth	r3, r1
 8009af2:	1afb      	subs	r3, r7, r3
 8009af4:	0c09      	lsrs	r1, r1, #16
 8009af6:	0c2d      	lsrs	r5, r5, #16
 8009af8:	1a6d      	subs	r5, r5, r1
 8009afa:	1419      	asrs	r1, r3, #16
 8009afc:	1869      	adds	r1, r5, r1
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	140f      	asrs	r7, r1, #16
 8009b02:	0409      	lsls	r1, r1, #16
 8009b04:	4319      	orrs	r1, r3
 8009b06:	4663      	mov	r3, ip
 8009b08:	c302      	stmia	r3!, {r1}
 8009b0a:	469c      	mov	ip, r3
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	d8e8      	bhi.n	8009ae4 <__mdiff+0x88>
 8009b12:	0031      	movs	r1, r6
 8009b14:	9c03      	ldr	r4, [sp, #12]
 8009b16:	3115      	adds	r1, #21
 8009b18:	2304      	movs	r3, #4
 8009b1a:	428c      	cmp	r4, r1
 8009b1c:	d304      	bcc.n	8009b28 <__mdiff+0xcc>
 8009b1e:	1ba3      	subs	r3, r4, r6
 8009b20:	3b15      	subs	r3, #21
 8009b22:	089b      	lsrs	r3, r3, #2
 8009b24:	3301      	adds	r3, #1
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	18cd      	adds	r5, r1, r3
 8009b2c:	9905      	ldr	r1, [sp, #20]
 8009b2e:	002e      	movs	r6, r5
 8009b30:	18cb      	adds	r3, r1, r3
 8009b32:	469c      	mov	ip, r3
 8009b34:	9902      	ldr	r1, [sp, #8]
 8009b36:	428e      	cmp	r6, r1
 8009b38:	d310      	bcc.n	8009b5c <__mdiff+0x100>
 8009b3a:	9e02      	ldr	r6, [sp, #8]
 8009b3c:	1ee9      	subs	r1, r5, #3
 8009b3e:	2400      	movs	r4, #0
 8009b40:	428e      	cmp	r6, r1
 8009b42:	d304      	bcc.n	8009b4e <__mdiff+0xf2>
 8009b44:	0031      	movs	r1, r6
 8009b46:	3103      	adds	r1, #3
 8009b48:	1b49      	subs	r1, r1, r5
 8009b4a:	0889      	lsrs	r1, r1, #2
 8009b4c:	008c      	lsls	r4, r1, #2
 8009b4e:	191b      	adds	r3, r3, r4
 8009b50:	3b04      	subs	r3, #4
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	d00f      	beq.n	8009b78 <__mdiff+0x11c>
 8009b58:	6110      	str	r0, [r2, #16]
 8009b5a:	e798      	b.n	8009a8e <__mdiff+0x32>
 8009b5c:	ce02      	ldmia	r6!, {r1}
 8009b5e:	b28c      	uxth	r4, r1
 8009b60:	19e4      	adds	r4, r4, r7
 8009b62:	0c0f      	lsrs	r7, r1, #16
 8009b64:	1421      	asrs	r1, r4, #16
 8009b66:	1879      	adds	r1, r7, r1
 8009b68:	b2a4      	uxth	r4, r4
 8009b6a:	140f      	asrs	r7, r1, #16
 8009b6c:	0409      	lsls	r1, r1, #16
 8009b6e:	4321      	orrs	r1, r4
 8009b70:	4664      	mov	r4, ip
 8009b72:	c402      	stmia	r4!, {r1}
 8009b74:	46a4      	mov	ip, r4
 8009b76:	e7dd      	b.n	8009b34 <__mdiff+0xd8>
 8009b78:	3801      	subs	r0, #1
 8009b7a:	e7e9      	b.n	8009b50 <__mdiff+0xf4>
 8009b7c:	0800f841 	.word	0x0800f841
 8009b80:	0800f8b2 	.word	0x0800f8b2
 8009b84:	00000237 	.word	0x00000237
 8009b88:	00000245 	.word	0x00000245

08009b8c <__ulp>:
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <__ulp+0x30>)
 8009b90:	4019      	ands	r1, r3
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <__ulp+0x34>)
 8009b94:	18c9      	adds	r1, r1, r3
 8009b96:	4281      	cmp	r1, r0
 8009b98:	dc06      	bgt.n	8009ba8 <__ulp+0x1c>
 8009b9a:	4249      	negs	r1, r1
 8009b9c:	150b      	asrs	r3, r1, #20
 8009b9e:	2b13      	cmp	r3, #19
 8009ba0:	dc03      	bgt.n	8009baa <__ulp+0x1e>
 8009ba2:	2180      	movs	r1, #128	; 0x80
 8009ba4:	0309      	lsls	r1, r1, #12
 8009ba6:	4119      	asrs	r1, r3
 8009ba8:	4770      	bx	lr
 8009baa:	3b14      	subs	r3, #20
 8009bac:	2001      	movs	r0, #1
 8009bae:	2b1e      	cmp	r3, #30
 8009bb0:	dc02      	bgt.n	8009bb8 <__ulp+0x2c>
 8009bb2:	2080      	movs	r0, #128	; 0x80
 8009bb4:	0600      	lsls	r0, r0, #24
 8009bb6:	40d8      	lsrs	r0, r3
 8009bb8:	2100      	movs	r1, #0
 8009bba:	e7f5      	b.n	8009ba8 <__ulp+0x1c>
 8009bbc:	7ff00000 	.word	0x7ff00000
 8009bc0:	fcc00000 	.word	0xfcc00000

08009bc4 <__b2d>:
 8009bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bc6:	0006      	movs	r6, r0
 8009bc8:	6903      	ldr	r3, [r0, #16]
 8009bca:	3614      	adds	r6, #20
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	18f3      	adds	r3, r6, r3
 8009bd0:	1f1d      	subs	r5, r3, #4
 8009bd2:	682c      	ldr	r4, [r5, #0]
 8009bd4:	000f      	movs	r7, r1
 8009bd6:	0020      	movs	r0, r4
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	f7ff fd63 	bl	80096a4 <__hi0bits>
 8009bde:	2220      	movs	r2, #32
 8009be0:	1a12      	subs	r2, r2, r0
 8009be2:	603a      	str	r2, [r7, #0]
 8009be4:	0003      	movs	r3, r0
 8009be6:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <__b2d+0x94>)
 8009be8:	280a      	cmp	r0, #10
 8009bea:	dc15      	bgt.n	8009c18 <__b2d+0x54>
 8009bec:	210b      	movs	r1, #11
 8009bee:	0027      	movs	r7, r4
 8009bf0:	1a09      	subs	r1, r1, r0
 8009bf2:	40cf      	lsrs	r7, r1
 8009bf4:	433a      	orrs	r2, r7
 8009bf6:	468c      	mov	ip, r1
 8009bf8:	0011      	movs	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	42ae      	cmp	r6, r5
 8009bfe:	d202      	bcs.n	8009c06 <__b2d+0x42>
 8009c00:	9a01      	ldr	r2, [sp, #4]
 8009c02:	3a08      	subs	r2, #8
 8009c04:	6812      	ldr	r2, [r2, #0]
 8009c06:	3315      	adds	r3, #21
 8009c08:	409c      	lsls	r4, r3
 8009c0a:	4663      	mov	r3, ip
 8009c0c:	0027      	movs	r7, r4
 8009c0e:	40da      	lsrs	r2, r3
 8009c10:	4317      	orrs	r7, r2
 8009c12:	0038      	movs	r0, r7
 8009c14:	b003      	add	sp, #12
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c18:	2700      	movs	r7, #0
 8009c1a:	42ae      	cmp	r6, r5
 8009c1c:	d202      	bcs.n	8009c24 <__b2d+0x60>
 8009c1e:	9d01      	ldr	r5, [sp, #4]
 8009c20:	3d08      	subs	r5, #8
 8009c22:	682f      	ldr	r7, [r5, #0]
 8009c24:	210b      	movs	r1, #11
 8009c26:	4249      	negs	r1, r1
 8009c28:	468c      	mov	ip, r1
 8009c2a:	449c      	add	ip, r3
 8009c2c:	2b0b      	cmp	r3, #11
 8009c2e:	d010      	beq.n	8009c52 <__b2d+0x8e>
 8009c30:	4661      	mov	r1, ip
 8009c32:	2320      	movs	r3, #32
 8009c34:	408c      	lsls	r4, r1
 8009c36:	1a5b      	subs	r3, r3, r1
 8009c38:	0039      	movs	r1, r7
 8009c3a:	40d9      	lsrs	r1, r3
 8009c3c:	430c      	orrs	r4, r1
 8009c3e:	4322      	orrs	r2, r4
 8009c40:	0011      	movs	r1, r2
 8009c42:	2200      	movs	r2, #0
 8009c44:	42b5      	cmp	r5, r6
 8009c46:	d901      	bls.n	8009c4c <__b2d+0x88>
 8009c48:	3d04      	subs	r5, #4
 8009c4a:	682a      	ldr	r2, [r5, #0]
 8009c4c:	4664      	mov	r4, ip
 8009c4e:	40a7      	lsls	r7, r4
 8009c50:	e7dd      	b.n	8009c0e <__b2d+0x4a>
 8009c52:	4322      	orrs	r2, r4
 8009c54:	0011      	movs	r1, r2
 8009c56:	e7dc      	b.n	8009c12 <__b2d+0x4e>
 8009c58:	3ff00000 	.word	0x3ff00000

08009c5c <__d2b>:
 8009c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5e:	2101      	movs	r1, #1
 8009c60:	0014      	movs	r4, r2
 8009c62:	001d      	movs	r5, r3
 8009c64:	9f08      	ldr	r7, [sp, #32]
 8009c66:	f7ff fc5b 	bl	8009520 <_Balloc>
 8009c6a:	1e06      	subs	r6, r0, #0
 8009c6c:	d105      	bne.n	8009c7a <__d2b+0x1e>
 8009c6e:	0032      	movs	r2, r6
 8009c70:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <__d2b+0xa8>)
 8009c72:	4825      	ldr	r0, [pc, #148]	; (8009d08 <__d2b+0xac>)
 8009c74:	4925      	ldr	r1, [pc, #148]	; (8009d0c <__d2b+0xb0>)
 8009c76:	f002 ff17 	bl	800caa8 <__assert_func>
 8009c7a:	032b      	lsls	r3, r5, #12
 8009c7c:	006d      	lsls	r5, r5, #1
 8009c7e:	0b1b      	lsrs	r3, r3, #12
 8009c80:	0d6d      	lsrs	r5, r5, #21
 8009c82:	d125      	bne.n	8009cd0 <__d2b+0x74>
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	2c00      	cmp	r4, #0
 8009c88:	d028      	beq.n	8009cdc <__d2b+0x80>
 8009c8a:	4668      	mov	r0, sp
 8009c8c:	9400      	str	r4, [sp, #0]
 8009c8e:	f7ff fd23 	bl	80096d8 <__lo0bits>
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	9900      	ldr	r1, [sp, #0]
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d01e      	beq.n	8009cd8 <__d2b+0x7c>
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	001c      	movs	r4, r3
 8009c9e:	1a12      	subs	r2, r2, r0
 8009ca0:	4094      	lsls	r4, r2
 8009ca2:	0022      	movs	r2, r4
 8009ca4:	40c3      	lsrs	r3, r0
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	6172      	str	r2, [r6, #20]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	9c01      	ldr	r4, [sp, #4]
 8009cae:	61b4      	str	r4, [r6, #24]
 8009cb0:	1e63      	subs	r3, r4, #1
 8009cb2:	419c      	sbcs	r4, r3
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	6134      	str	r4, [r6, #16]
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	d017      	beq.n	8009cec <__d2b+0x90>
 8009cbc:	2435      	movs	r4, #53	; 0x35
 8009cbe:	4b14      	ldr	r3, [pc, #80]	; (8009d10 <__d2b+0xb4>)
 8009cc0:	18ed      	adds	r5, r5, r3
 8009cc2:	182d      	adds	r5, r5, r0
 8009cc4:	603d      	str	r5, [r7, #0]
 8009cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc8:	1a24      	subs	r4, r4, r0
 8009cca:	601c      	str	r4, [r3, #0]
 8009ccc:	0030      	movs	r0, r6
 8009cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cd0:	2280      	movs	r2, #128	; 0x80
 8009cd2:	0352      	lsls	r2, r2, #13
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	e7d5      	b.n	8009c84 <__d2b+0x28>
 8009cd8:	6171      	str	r1, [r6, #20]
 8009cda:	e7e7      	b.n	8009cac <__d2b+0x50>
 8009cdc:	a801      	add	r0, sp, #4
 8009cde:	f7ff fcfb 	bl	80096d8 <__lo0bits>
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	2401      	movs	r4, #1
 8009ce6:	6173      	str	r3, [r6, #20]
 8009ce8:	3020      	adds	r0, #32
 8009cea:	e7e4      	b.n	8009cb6 <__d2b+0x5a>
 8009cec:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <__d2b+0xb8>)
 8009cee:	18c0      	adds	r0, r0, r3
 8009cf0:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <__d2b+0xbc>)
 8009cf2:	6038      	str	r0, [r7, #0]
 8009cf4:	18e3      	adds	r3, r4, r3
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	18f3      	adds	r3, r6, r3
 8009cfa:	6958      	ldr	r0, [r3, #20]
 8009cfc:	f7ff fcd2 	bl	80096a4 <__hi0bits>
 8009d00:	0164      	lsls	r4, r4, #5
 8009d02:	e7e0      	b.n	8009cc6 <__d2b+0x6a>
 8009d04:	0800f841 	.word	0x0800f841
 8009d08:	0800f8b2 	.word	0x0800f8b2
 8009d0c:	0000030f 	.word	0x0000030f
 8009d10:	fffffbcd 	.word	0xfffffbcd
 8009d14:	fffffbce 	.word	0xfffffbce
 8009d18:	3fffffff 	.word	0x3fffffff

08009d1c <__ratio>:
 8009d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	000f      	movs	r7, r1
 8009d22:	a904      	add	r1, sp, #16
 8009d24:	0006      	movs	r6, r0
 8009d26:	f7ff ff4d 	bl	8009bc4 <__b2d>
 8009d2a:	9000      	str	r0, [sp, #0]
 8009d2c:	9101      	str	r1, [sp, #4]
 8009d2e:	9c00      	ldr	r4, [sp, #0]
 8009d30:	9d01      	ldr	r5, [sp, #4]
 8009d32:	0038      	movs	r0, r7
 8009d34:	a905      	add	r1, sp, #20
 8009d36:	f7ff ff45 	bl	8009bc4 <__b2d>
 8009d3a:	9002      	str	r0, [sp, #8]
 8009d3c:	9103      	str	r1, [sp, #12]
 8009d3e:	9a02      	ldr	r2, [sp, #8]
 8009d40:	9b03      	ldr	r3, [sp, #12]
 8009d42:	6930      	ldr	r0, [r6, #16]
 8009d44:	6939      	ldr	r1, [r7, #16]
 8009d46:	9e04      	ldr	r6, [sp, #16]
 8009d48:	1a40      	subs	r0, r0, r1
 8009d4a:	9905      	ldr	r1, [sp, #20]
 8009d4c:	0140      	lsls	r0, r0, #5
 8009d4e:	1a71      	subs	r1, r6, r1
 8009d50:	1841      	adds	r1, r0, r1
 8009d52:	0508      	lsls	r0, r1, #20
 8009d54:	2900      	cmp	r1, #0
 8009d56:	dd07      	ble.n	8009d68 <__ratio+0x4c>
 8009d58:	9901      	ldr	r1, [sp, #4]
 8009d5a:	1845      	adds	r5, r0, r1
 8009d5c:	0020      	movs	r0, r4
 8009d5e:	0029      	movs	r1, r5
 8009d60:	f7f7 f88a 	bl	8000e78 <__aeabi_ddiv>
 8009d64:	b007      	add	sp, #28
 8009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d68:	9903      	ldr	r1, [sp, #12]
 8009d6a:	1a0b      	subs	r3, r1, r0
 8009d6c:	e7f6      	b.n	8009d5c <__ratio+0x40>

08009d6e <__copybits>:
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	0014      	movs	r4, r2
 8009d72:	0005      	movs	r5, r0
 8009d74:	3901      	subs	r1, #1
 8009d76:	6913      	ldr	r3, [r2, #16]
 8009d78:	1149      	asrs	r1, r1, #5
 8009d7a:	3101      	adds	r1, #1
 8009d7c:	0089      	lsls	r1, r1, #2
 8009d7e:	3414      	adds	r4, #20
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	1841      	adds	r1, r0, r1
 8009d84:	18e3      	adds	r3, r4, r3
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	d80d      	bhi.n	8009da6 <__copybits+0x38>
 8009d8a:	0014      	movs	r4, r2
 8009d8c:	3411      	adds	r4, #17
 8009d8e:	2500      	movs	r5, #0
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d803      	bhi.n	8009d9c <__copybits+0x2e>
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	3b11      	subs	r3, #17
 8009d98:	089b      	lsrs	r3, r3, #2
 8009d9a:	009d      	lsls	r5, r3, #2
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	1940      	adds	r0, r0, r5
 8009da0:	4281      	cmp	r1, r0
 8009da2:	d803      	bhi.n	8009dac <__copybits+0x3e>
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
 8009da6:	cc40      	ldmia	r4!, {r6}
 8009da8:	c540      	stmia	r5!, {r6}
 8009daa:	e7ec      	b.n	8009d86 <__copybits+0x18>
 8009dac:	c008      	stmia	r0!, {r3}
 8009dae:	e7f7      	b.n	8009da0 <__copybits+0x32>

08009db0 <__any_on>:
 8009db0:	0002      	movs	r2, r0
 8009db2:	6900      	ldr	r0, [r0, #16]
 8009db4:	b510      	push	{r4, lr}
 8009db6:	3214      	adds	r2, #20
 8009db8:	114b      	asrs	r3, r1, #5
 8009dba:	4298      	cmp	r0, r3
 8009dbc:	db13      	blt.n	8009de6 <__any_on+0x36>
 8009dbe:	dd0c      	ble.n	8009dda <__any_on+0x2a>
 8009dc0:	241f      	movs	r4, #31
 8009dc2:	0008      	movs	r0, r1
 8009dc4:	4020      	ands	r0, r4
 8009dc6:	4221      	tst	r1, r4
 8009dc8:	d007      	beq.n	8009dda <__any_on+0x2a>
 8009dca:	0099      	lsls	r1, r3, #2
 8009dcc:	588c      	ldr	r4, [r1, r2]
 8009dce:	0021      	movs	r1, r4
 8009dd0:	40c1      	lsrs	r1, r0
 8009dd2:	4081      	lsls	r1, r0
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	428c      	cmp	r4, r1
 8009dd8:	d104      	bne.n	8009de4 <__any_on+0x34>
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	18d3      	adds	r3, r2, r3
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d803      	bhi.n	8009dea <__any_on+0x3a>
 8009de2:	2000      	movs	r0, #0
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	0003      	movs	r3, r0
 8009de8:	e7f7      	b.n	8009dda <__any_on+0x2a>
 8009dea:	3b04      	subs	r3, #4
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d0f5      	beq.n	8009dde <__any_on+0x2e>
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7f6      	b.n	8009de4 <__any_on+0x34>

08009df6 <__ascii_wctomb>:
 8009df6:	0003      	movs	r3, r0
 8009df8:	1e08      	subs	r0, r1, #0
 8009dfa:	d005      	beq.n	8009e08 <__ascii_wctomb+0x12>
 8009dfc:	2aff      	cmp	r2, #255	; 0xff
 8009dfe:	d904      	bls.n	8009e0a <__ascii_wctomb+0x14>
 8009e00:	228a      	movs	r2, #138	; 0x8a
 8009e02:	2001      	movs	r0, #1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	4240      	negs	r0, r0
 8009e08:	4770      	bx	lr
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	700a      	strb	r2, [r1, #0]
 8009e0e:	e7fb      	b.n	8009e08 <__ascii_wctomb+0x12>

08009e10 <_svfprintf_r>:
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b0d9      	sub	sp, #356	; 0x164
 8009e14:	001c      	movs	r4, r3
 8009e16:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e18:	9208      	str	r2, [sp, #32]
 8009e1a:	900a      	str	r0, [sp, #40]	; 0x28
 8009e1c:	f002 fdae 	bl	800c97c <_localeconv_r>
 8009e20:	6803      	ldr	r3, [r0, #0]
 8009e22:	0018      	movs	r0, r3
 8009e24:	931c      	str	r3, [sp, #112]	; 0x70
 8009e26:	f7f6 f96d 	bl	8000104 <strlen>
 8009e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2c:	9016      	str	r0, [sp, #88]	; 0x58
 8009e2e:	899b      	ldrh	r3, [r3, #12]
 8009e30:	061b      	lsls	r3, r3, #24
 8009e32:	d517      	bpl.n	8009e64 <_svfprintf_r+0x54>
 8009e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d113      	bne.n	8009e64 <_svfprintf_r+0x54>
 8009e3c:	2140      	movs	r1, #64	; 0x40
 8009e3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e40:	f7fd fbb0 	bl	80075a4 <_malloc_r>
 8009e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e46:	6018      	str	r0, [r3, #0]
 8009e48:	6118      	str	r0, [r3, #16]
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d107      	bne.n	8009e5e <_svfprintf_r+0x4e>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	3b0d      	subs	r3, #13
 8009e56:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009e5a:	b059      	add	sp, #356	; 0x164
 8009e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e5e:	2340      	movs	r3, #64	; 0x40
 8009e60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e62:	6153      	str	r3, [r2, #20]
 8009e64:	2300      	movs	r3, #0
 8009e66:	2200      	movs	r2, #0
 8009e68:	932e      	str	r3, [sp, #184]	; 0xb8
 8009e6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e6e:	2300      	movs	r3, #0
 8009e70:	9214      	str	r2, [sp, #80]	; 0x50
 8009e72:	9315      	str	r3, [sp, #84]	; 0x54
 8009e74:	2300      	movs	r3, #0
 8009e76:	af2f      	add	r7, sp, #188	; 0xbc
 8009e78:	972c      	str	r7, [sp, #176]	; 0xb0
 8009e7a:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e7c:	931e      	str	r3, [sp, #120]	; 0x78
 8009e7e:	9312      	str	r3, [sp, #72]	; 0x48
 8009e80:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e82:	931d      	str	r3, [sp, #116]	; 0x74
 8009e84:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e86:	9d08      	ldr	r5, [sp, #32]
 8009e88:	782b      	ldrb	r3, [r5, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <_svfprintf_r+0x84>
 8009e8e:	2b25      	cmp	r3, #37	; 0x25
 8009e90:	d000      	beq.n	8009e94 <_svfprintf_r+0x84>
 8009e92:	e091      	b.n	8009fb8 <_svfprintf_r+0x1a8>
 8009e94:	9b08      	ldr	r3, [sp, #32]
 8009e96:	1aee      	subs	r6, r5, r3
 8009e98:	429d      	cmp	r5, r3
 8009e9a:	d016      	beq.n	8009eca <_svfprintf_r+0xba>
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009ea0:	607e      	str	r6, [r7, #4]
 8009ea2:	199b      	adds	r3, r3, r6
 8009ea4:	932e      	str	r3, [sp, #184]	; 0xb8
 8009ea6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	3301      	adds	r3, #1
 8009eac:	932d      	str	r3, [sp, #180]	; 0xb4
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	dd08      	ble.n	8009ec4 <_svfprintf_r+0xb4>
 8009eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009eb6:	aa2c      	add	r2, sp, #176	; 0xb0
 8009eb8:	f004 f8c0 	bl	800e03c <__ssprint_r>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d000      	beq.n	8009ec2 <_svfprintf_r+0xb2>
 8009ec0:	e1cf      	b.n	800a262 <_svfprintf_r+0x452>
 8009ec2:	af2f      	add	r7, sp, #188	; 0xbc
 8009ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ec6:	199b      	adds	r3, r3, r6
 8009ec8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009eca:	782b      	ldrb	r3, [r5, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <_svfprintf_r+0xc4>
 8009ed0:	f001 f99e 	bl	800b210 <_svfprintf_r+0x1400>
 8009ed4:	221b      	movs	r2, #27
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	a91e      	add	r1, sp, #120	; 0x78
 8009eda:	1852      	adds	r2, r2, r1
 8009edc:	7013      	strb	r3, [r2, #0]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	001e      	movs	r6, r3
 8009ee2:	4252      	negs	r2, r2
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee8:	9318      	str	r3, [sp, #96]	; 0x60
 8009eea:	1c6b      	adds	r3, r5, #1
 8009eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8009eee:	782b      	ldrb	r3, [r5, #0]
 8009ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009ef4:	3820      	subs	r0, #32
 8009ef6:	285a      	cmp	r0, #90	; 0x5a
 8009ef8:	d901      	bls.n	8009efe <_svfprintf_r+0xee>
 8009efa:	f000 fe20 	bl	800ab3e <_svfprintf_r+0xd2e>
 8009efe:	f7f6 f913 	bl	8000128 <__gnu_thumb1_case_uhi>
 8009f02:	0078      	.short	0x0078
 8009f04:	061e061e 	.word	0x061e061e
 8009f08:	061e0082 	.word	0x061e0082
 8009f0c:	061e061e 	.word	0x061e061e
 8009f10:	061e005d 	.word	0x061e005d
 8009f14:	0084061e 	.word	0x0084061e
 8009f18:	061e008c 	.word	0x061e008c
 8009f1c:	0091008a 	.word	0x0091008a
 8009f20:	00b2061e 	.word	0x00b2061e
 8009f24:	00b400b4 	.word	0x00b400b4
 8009f28:	00b400b4 	.word	0x00b400b4
 8009f2c:	00b400b4 	.word	0x00b400b4
 8009f30:	00b400b4 	.word	0x00b400b4
 8009f34:	061e00b4 	.word	0x061e00b4
 8009f38:	061e061e 	.word	0x061e061e
 8009f3c:	061e061e 	.word	0x061e061e
 8009f40:	061e061e 	.word	0x061e061e
 8009f44:	061e013b 	.word	0x061e013b
 8009f48:	00f400e0 	.word	0x00f400e0
 8009f4c:	013b013b 	.word	0x013b013b
 8009f50:	061e013b 	.word	0x061e013b
 8009f54:	061e061e 	.word	0x061e061e
 8009f58:	00c7061e 	.word	0x00c7061e
 8009f5c:	061e061e 	.word	0x061e061e
 8009f60:	061e04c7 	.word	0x061e04c7
 8009f64:	061e061e 	.word	0x061e061e
 8009f68:	061e050a 	.word	0x061e050a
 8009f6c:	061e052a 	.word	0x061e052a
 8009f70:	055c061e 	.word	0x055c061e
 8009f74:	061e061e 	.word	0x061e061e
 8009f78:	061e061e 	.word	0x061e061e
 8009f7c:	061e061e 	.word	0x061e061e
 8009f80:	061e061e 	.word	0x061e061e
 8009f84:	061e013b 	.word	0x061e013b
 8009f88:	00f600e0 	.word	0x00f600e0
 8009f8c:	013b013b 	.word	0x013b013b
 8009f90:	00c9013b 	.word	0x00c9013b
 8009f94:	00dc00f6 	.word	0x00dc00f6
 8009f98:	00d5061e 	.word	0x00d5061e
 8009f9c:	04a7061e 	.word	0x04a7061e
 8009fa0:	04fa04c9 	.word	0x04fa04c9
 8009fa4:	061e00dc 	.word	0x061e00dc
 8009fa8:	0080050a 	.word	0x0080050a
 8009fac:	061e052c 	.word	0x061e052c
 8009fb0:	057c061e 	.word	0x057c061e
 8009fb4:	0080061e 	.word	0x0080061e
 8009fb8:	3501      	adds	r5, #1
 8009fba:	e765      	b.n	8009e88 <_svfprintf_r+0x78>
 8009fbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fbe:	f002 fcdd 	bl	800c97c <_localeconv_r>
 8009fc2:	6843      	ldr	r3, [r0, #4]
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	931d      	str	r3, [sp, #116]	; 0x74
 8009fc8:	f7f6 f89c 	bl	8000104 <strlen>
 8009fcc:	901b      	str	r0, [sp, #108]	; 0x6c
 8009fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fd0:	f002 fcd4 	bl	800c97c <_localeconv_r>
 8009fd4:	6883      	ldr	r3, [r0, #8]
 8009fd6:	9312      	str	r3, [sp, #72]	; 0x48
 8009fd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d011      	beq.n	800a002 <_svfprintf_r+0x1f2>
 8009fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00e      	beq.n	800a002 <_svfprintf_r+0x1f2>
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <_svfprintf_r+0x1f2>
 8009fea:	2380      	movs	r3, #128	; 0x80
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	431e      	orrs	r6, r3
 8009ff0:	e007      	b.n	800a002 <_svfprintf_r+0x1f2>
 8009ff2:	231b      	movs	r3, #27
 8009ff4:	aa1e      	add	r2, sp, #120	; 0x78
 8009ff6:	189b      	adds	r3, r3, r2
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	2a00      	cmp	r2, #0
 8009ffc:	d101      	bne.n	800a002 <_svfprintf_r+0x1f2>
 8009ffe:	3220      	adds	r2, #32
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a004:	e771      	b.n	8009eea <_svfprintf_r+0xda>
 800a006:	2301      	movs	r3, #1
 800a008:	e7f1      	b.n	8009fee <_svfprintf_r+0x1de>
 800a00a:	cc08      	ldmia	r4!, {r3}
 800a00c:	9318      	str	r3, [sp, #96]	; 0x60
 800a00e:	2b00      	cmp	r3, #0
 800a010:	daf7      	bge.n	800a002 <_svfprintf_r+0x1f2>
 800a012:	425b      	negs	r3, r3
 800a014:	9318      	str	r3, [sp, #96]	; 0x60
 800a016:	2304      	movs	r3, #4
 800a018:	e7e9      	b.n	8009fee <_svfprintf_r+0x1de>
 800a01a:	231b      	movs	r3, #27
 800a01c:	aa1e      	add	r2, sp, #120	; 0x78
 800a01e:	189b      	adds	r3, r3, r2
 800a020:	222b      	movs	r2, #43	; 0x2b
 800a022:	e7ed      	b.n	800a000 <_svfprintf_r+0x1f0>
 800a024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a028:	7812      	ldrb	r2, [r2, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a02e:	2a2a      	cmp	r2, #42	; 0x2a
 800a030:	d010      	beq.n	800a054 <_svfprintf_r+0x244>
 800a032:	2200      	movs	r2, #0
 800a034:	9209      	str	r2, [sp, #36]	; 0x24
 800a036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a038:	9313      	str	r3, [sp, #76]	; 0x4c
 800a03a:	3a30      	subs	r2, #48	; 0x30
 800a03c:	2a09      	cmp	r2, #9
 800a03e:	d900      	bls.n	800a042 <_svfprintf_r+0x232>
 800a040:	e757      	b.n	8009ef2 <_svfprintf_r+0xe2>
 800a042:	200a      	movs	r0, #10
 800a044:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a046:	4341      	muls	r1, r0
 800a048:	188a      	adds	r2, r1, r2
 800a04a:	9209      	str	r2, [sp, #36]	; 0x24
 800a04c:	781a      	ldrb	r2, [r3, #0]
 800a04e:	3301      	adds	r3, #1
 800a050:	920f      	str	r2, [sp, #60]	; 0x3c
 800a052:	e7f0      	b.n	800a036 <_svfprintf_r+0x226>
 800a054:	cc04      	ldmia	r4!, {r2}
 800a056:	9209      	str	r2, [sp, #36]	; 0x24
 800a058:	2a00      	cmp	r2, #0
 800a05a:	da02      	bge.n	800a062 <_svfprintf_r+0x252>
 800a05c:	2201      	movs	r2, #1
 800a05e:	4252      	negs	r2, r2
 800a060:	9209      	str	r2, [sp, #36]	; 0x24
 800a062:	9313      	str	r3, [sp, #76]	; 0x4c
 800a064:	e7cd      	b.n	800a002 <_svfprintf_r+0x1f2>
 800a066:	2380      	movs	r3, #128	; 0x80
 800a068:	e7c1      	b.n	8009fee <_svfprintf_r+0x1de>
 800a06a:	2200      	movs	r2, #0
 800a06c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a06e:	9218      	str	r2, [sp, #96]	; 0x60
 800a070:	210a      	movs	r1, #10
 800a072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a074:	434a      	muls	r2, r1
 800a076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a078:	3930      	subs	r1, #48	; 0x30
 800a07a:	188a      	adds	r2, r1, r2
 800a07c:	9218      	str	r2, [sp, #96]	; 0x60
 800a07e:	001a      	movs	r2, r3
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	920f      	str	r2, [sp, #60]	; 0x3c
 800a086:	3a30      	subs	r2, #48	; 0x30
 800a088:	9313      	str	r3, [sp, #76]	; 0x4c
 800a08a:	2a09      	cmp	r2, #9
 800a08c:	d9f0      	bls.n	800a070 <_svfprintf_r+0x260>
 800a08e:	e730      	b.n	8009ef2 <_svfprintf_r+0xe2>
 800a090:	2308      	movs	r3, #8
 800a092:	e7ac      	b.n	8009fee <_svfprintf_r+0x1de>
 800a094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b68      	cmp	r3, #104	; 0x68
 800a09a:	d105      	bne.n	800a0a8 <_svfprintf_r+0x298>
 800a09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a09e:	3301      	adds	r3, #1
 800a0a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0a2:	2380      	movs	r3, #128	; 0x80
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	e7a2      	b.n	8009fee <_svfprintf_r+0x1de>
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	e7a0      	b.n	8009fee <_svfprintf_r+0x1de>
 800a0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b6c      	cmp	r3, #108	; 0x6c
 800a0b2:	d104      	bne.n	800a0be <_svfprintf_r+0x2ae>
 800a0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	e797      	b.n	8009fee <_svfprintf_r+0x1de>
 800a0be:	2310      	movs	r3, #16
 800a0c0:	e795      	b.n	8009fee <_svfprintf_r+0x1de>
 800a0c2:	0021      	movs	r1, r4
 800a0c4:	c904      	ldmia	r1!, {r2}
 800a0c6:	ab3f      	add	r3, sp, #252	; 0xfc
 800a0c8:	910d      	str	r1, [sp, #52]	; 0x34
 800a0ca:	211b      	movs	r1, #27
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	a81e      	add	r0, sp, #120	; 0x78
 800a0d2:	1809      	adds	r1, r1, r0
 800a0d4:	700a      	strb	r2, [r1, #0]
 800a0d6:	920c      	str	r2, [sp, #48]	; 0x30
 800a0d8:	3201      	adds	r2, #1
 800a0da:	9209      	str	r2, [sp, #36]	; 0x24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	9308      	str	r3, [sp, #32]
 800a0e0:	0015      	movs	r5, r2
 800a0e2:	9219      	str	r2, [sp, #100]	; 0x64
 800a0e4:	9210      	str	r2, [sp, #64]	; 0x40
 800a0e6:	9211      	str	r2, [sp, #68]	; 0x44
 800a0e8:	e1f1      	b.n	800a4ce <_svfprintf_r+0x6be>
 800a0ea:	2310      	movs	r3, #16
 800a0ec:	431e      	orrs	r6, r3
 800a0ee:	06b3      	lsls	r3, r6, #26
 800a0f0:	d531      	bpl.n	800a156 <_svfprintf_r+0x346>
 800a0f2:	2307      	movs	r3, #7
 800a0f4:	3407      	adds	r4, #7
 800a0f6:	439c      	bics	r4, r3
 800a0f8:	0022      	movs	r2, r4
 800a0fa:	ca18      	ldmia	r2!, {r3, r4}
 800a0fc:	9306      	str	r3, [sp, #24]
 800a0fe:	9407      	str	r4, [sp, #28]
 800a100:	920d      	str	r2, [sp, #52]	; 0x34
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	2301      	movs	r3, #1
 800a106:	2a00      	cmp	r2, #0
 800a108:	da0b      	bge.n	800a122 <_svfprintf_r+0x312>
 800a10a:	9c06      	ldr	r4, [sp, #24]
 800a10c:	9d07      	ldr	r5, [sp, #28]
 800a10e:	2200      	movs	r2, #0
 800a110:	4261      	negs	r1, r4
 800a112:	41aa      	sbcs	r2, r5
 800a114:	9106      	str	r1, [sp, #24]
 800a116:	9207      	str	r2, [sp, #28]
 800a118:	221b      	movs	r2, #27
 800a11a:	a91e      	add	r1, sp, #120	; 0x78
 800a11c:	1852      	adds	r2, r2, r1
 800a11e:	212d      	movs	r1, #45	; 0x2d
 800a120:	7011      	strb	r1, [r2, #0]
 800a122:	9907      	ldr	r1, [sp, #28]
 800a124:	9a06      	ldr	r2, [sp, #24]
 800a126:	430a      	orrs	r2, r1
 800a128:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a12a:	3101      	adds	r1, #1
 800a12c:	d101      	bne.n	800a132 <_svfprintf_r+0x322>
 800a12e:	f001 f87b 	bl	800b228 <_svfprintf_r+0x1418>
 800a132:	2180      	movs	r1, #128	; 0x80
 800a134:	0034      	movs	r4, r6
 800a136:	438c      	bics	r4, r1
 800a138:	2a00      	cmp	r2, #0
 800a13a:	d001      	beq.n	800a140 <_svfprintf_r+0x330>
 800a13c:	f001 f879 	bl	800b232 <_svfprintf_r+0x1422>
 800a140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a142:	2a00      	cmp	r2, #0
 800a144:	d101      	bne.n	800a14a <_svfprintf_r+0x33a>
 800a146:	f000 fcef 	bl	800ab28 <_svfprintf_r+0xd18>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <_svfprintf_r+0x342>
 800a14e:	f001 f874 	bl	800b23a <_svfprintf_r+0x142a>
 800a152:	f000 fc79 	bl	800aa48 <_svfprintf_r+0xc38>
 800a156:	0022      	movs	r2, r4
 800a158:	ca08      	ldmia	r2!, {r3}
 800a15a:	920d      	str	r2, [sp, #52]	; 0x34
 800a15c:	06f2      	lsls	r2, r6, #27
 800a15e:	d503      	bpl.n	800a168 <_svfprintf_r+0x358>
 800a160:	9306      	str	r3, [sp, #24]
 800a162:	17db      	asrs	r3, r3, #31
 800a164:	9307      	str	r3, [sp, #28]
 800a166:	e7cc      	b.n	800a102 <_svfprintf_r+0x2f2>
 800a168:	0672      	lsls	r2, r6, #25
 800a16a:	d501      	bpl.n	800a170 <_svfprintf_r+0x360>
 800a16c:	b21b      	sxth	r3, r3
 800a16e:	e7f7      	b.n	800a160 <_svfprintf_r+0x350>
 800a170:	05b2      	lsls	r2, r6, #22
 800a172:	d5f5      	bpl.n	800a160 <_svfprintf_r+0x350>
 800a174:	b25b      	sxtb	r3, r3
 800a176:	e7f3      	b.n	800a160 <_svfprintf_r+0x350>
 800a178:	2307      	movs	r3, #7
 800a17a:	3407      	adds	r4, #7
 800a17c:	439c      	bics	r4, r3
 800a17e:	0022      	movs	r2, r4
 800a180:	ca18      	ldmia	r2!, {r3, r4}
 800a182:	920d      	str	r2, [sp, #52]	; 0x34
 800a184:	2201      	movs	r2, #1
 800a186:	9314      	str	r3, [sp, #80]	; 0x50
 800a188:	9415      	str	r4, [sp, #84]	; 0x54
 800a18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a18c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a18e:	005c      	lsls	r4, r3, #1
 800a190:	0864      	lsrs	r4, r4, #1
 800a192:	0028      	movs	r0, r5
 800a194:	0021      	movs	r1, r4
 800a196:	4b3e      	ldr	r3, [pc, #248]	; (800a290 <_svfprintf_r+0x480>)
 800a198:	4252      	negs	r2, r2
 800a19a:	f7f8 f8ab 	bl	80022f4 <__aeabi_dcmpun>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d126      	bne.n	800a1f0 <_svfprintf_r+0x3e0>
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	0028      	movs	r0, r5
 800a1a6:	0021      	movs	r1, r4
 800a1a8:	4b39      	ldr	r3, [pc, #228]	; (800a290 <_svfprintf_r+0x480>)
 800a1aa:	4252      	negs	r2, r2
 800a1ac:	f7f6 f95c 	bl	8000468 <__aeabi_dcmple>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d11d      	bne.n	800a1f0 <_svfprintf_r+0x3e0>
 800a1b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a1b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f7f6 f94a 	bl	8000454 <__aeabi_dcmplt>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d004      	beq.n	800a1ce <_svfprintf_r+0x3be>
 800a1c4:	231b      	movs	r3, #27
 800a1c6:	aa1e      	add	r2, sp, #120	; 0x78
 800a1c8:	189b      	adds	r3, r3, r2
 800a1ca:	222d      	movs	r2, #45	; 0x2d
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	4b31      	ldr	r3, [pc, #196]	; (800a294 <_svfprintf_r+0x484>)
 800a1d0:	9308      	str	r3, [sp, #32]
 800a1d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d4:	2b47      	cmp	r3, #71	; 0x47
 800a1d6:	dd01      	ble.n	800a1dc <_svfprintf_r+0x3cc>
 800a1d8:	4b2f      	ldr	r3, [pc, #188]	; (800a298 <_svfprintf_r+0x488>)
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	439e      	bics	r6, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1e4:	3303      	adds	r3, #3
 800a1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9319      	str	r3, [sp, #100]	; 0x64
 800a1ec:	f000 fc78 	bl	800aae0 <_svfprintf_r+0xcd0>
 800a1f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1f4:	0010      	movs	r0, r2
 800a1f6:	0019      	movs	r1, r3
 800a1f8:	f7f8 f87c 	bl	80022f4 <__aeabi_dcmpun>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d00e      	beq.n	800a21e <_svfprintf_r+0x40e>
 800a200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a202:	2b00      	cmp	r3, #0
 800a204:	da04      	bge.n	800a210 <_svfprintf_r+0x400>
 800a206:	231b      	movs	r3, #27
 800a208:	aa1e      	add	r2, sp, #120	; 0x78
 800a20a:	189b      	adds	r3, r3, r2
 800a20c:	222d      	movs	r2, #45	; 0x2d
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	4b22      	ldr	r3, [pc, #136]	; (800a29c <_svfprintf_r+0x48c>)
 800a212:	9308      	str	r3, [sp, #32]
 800a214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a216:	2b47      	cmp	r3, #71	; 0x47
 800a218:	dde0      	ble.n	800a1dc <_svfprintf_r+0x3cc>
 800a21a:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <_svfprintf_r+0x490>)
 800a21c:	e7dd      	b.n	800a1da <_svfprintf_r+0x3ca>
 800a21e:	2320      	movs	r3, #32
 800a220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a222:	439a      	bics	r2, r3
 800a224:	9210      	str	r2, [sp, #64]	; 0x40
 800a226:	2a41      	cmp	r2, #65	; 0x41
 800a228:	d123      	bne.n	800a272 <_svfprintf_r+0x462>
 800a22a:	2230      	movs	r2, #48	; 0x30
 800a22c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a22e:	ab25      	add	r3, sp, #148	; 0x94
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	3248      	adds	r2, #72	; 0x48
 800a234:	2961      	cmp	r1, #97	; 0x61
 800a236:	d000      	beq.n	800a23a <_svfprintf_r+0x42a>
 800a238:	3a20      	subs	r2, #32
 800a23a:	705a      	strb	r2, [r3, #1]
 800a23c:	2302      	movs	r3, #2
 800a23e:	431e      	orrs	r6, r3
 800a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a242:	2b63      	cmp	r3, #99	; 0x63
 800a244:	dd2e      	ble.n	800a2a4 <_svfprintf_r+0x494>
 800a246:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	f7fd f9ab 	bl	80075a4 <_malloc_r>
 800a24e:	9008      	str	r0, [sp, #32]
 800a250:	2800      	cmp	r0, #0
 800a252:	d000      	beq.n	800a256 <_svfprintf_r+0x446>
 800a254:	e216      	b.n	800a684 <_svfprintf_r+0x874>
 800a256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a258:	899a      	ldrh	r2, [r3, #12]
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	4313      	orrs	r3, r2
 800a25e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a260:	8193      	strh	r3, [r2, #12]
 800a262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a264:	899b      	ldrh	r3, [r3, #12]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	d400      	bmi.n	800a26c <_svfprintf_r+0x45c>
 800a26a:	e5f5      	b.n	8009e58 <_svfprintf_r+0x48>
 800a26c:	2301      	movs	r3, #1
 800a26e:	425b      	negs	r3, r3
 800a270:	e5f1      	b.n	8009e56 <_svfprintf_r+0x46>
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	900c      	str	r0, [sp, #48]	; 0x30
 800a276:	3301      	adds	r3, #1
 800a278:	d100      	bne.n	800a27c <_svfprintf_r+0x46c>
 800a27a:	e206      	b.n	800a68a <_svfprintf_r+0x87a>
 800a27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a27e:	2b47      	cmp	r3, #71	; 0x47
 800a280:	d114      	bne.n	800a2ac <_svfprintf_r+0x49c>
 800a282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	d111      	bne.n	800a2ac <_svfprintf_r+0x49c>
 800a288:	3301      	adds	r3, #1
 800a28a:	9309      	str	r3, [sp, #36]	; 0x24
 800a28c:	e00e      	b.n	800a2ac <_svfprintf_r+0x49c>
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	7fefffff 	.word	0x7fefffff
 800a294:	0800fa0c 	.word	0x0800fa0c
 800a298:	0800fa10 	.word	0x0800fa10
 800a29c:	0800fa14 	.word	0x0800fa14
 800a2a0:	0800fa18 	.word	0x0800fa18
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a8:	ab3f      	add	r3, sp, #252	; 0xfc
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	4333      	orrs	r3, r6
 800a2b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	db00      	blt.n	800a2be <_svfprintf_r+0x4ae>
 800a2bc:	e1e7      	b.n	800a68e <_svfprintf_r+0x87e>
 800a2be:	2280      	movs	r2, #128	; 0x80
 800a2c0:	0612      	lsls	r2, r2, #24
 800a2c2:	4694      	mov	ip, r2
 800a2c4:	4463      	add	r3, ip
 800a2c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a2c8:	232d      	movs	r3, #45	; 0x2d
 800a2ca:	9322      	str	r3, [sp, #136]	; 0x88
 800a2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2ce:	2b41      	cmp	r3, #65	; 0x41
 800a2d0:	d000      	beq.n	800a2d4 <_svfprintf_r+0x4c4>
 800a2d2:	e1f5      	b.n	800a6c0 <_svfprintf_r+0x8b0>
 800a2d4:	0028      	movs	r0, r5
 800a2d6:	aa26      	add	r2, sp, #152	; 0x98
 800a2d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2da:	f002 fb73 	bl	800c9c4 <frexp>
 800a2de:	23ff      	movs	r3, #255	; 0xff
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	059b      	lsls	r3, r3, #22
 800a2e4:	f7f7 f9c2 	bl	800166c <__aeabi_dmul>
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	0004      	movs	r4, r0
 800a2ee:	000d      	movs	r5, r1
 800a2f0:	f7f6 f8aa 	bl	8000448 <__aeabi_dcmpeq>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d001      	beq.n	800a2fc <_svfprintf_r+0x4ec>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	9326      	str	r3, [sp, #152]	; 0x98
 800a2fc:	4bda      	ldr	r3, [pc, #872]	; (800a668 <_svfprintf_r+0x858>)
 800a2fe:	9319      	str	r3, [sp, #100]	; 0x64
 800a300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a302:	2b61      	cmp	r3, #97	; 0x61
 800a304:	d001      	beq.n	800a30a <_svfprintf_r+0x4fa>
 800a306:	4bd9      	ldr	r3, [pc, #868]	; (800a66c <_svfprintf_r+0x85c>)
 800a308:	9319      	str	r3, [sp, #100]	; 0x64
 800a30a:	9b08      	ldr	r3, [sp, #32]
 800a30c:	930e      	str	r3, [sp, #56]	; 0x38
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	3b01      	subs	r3, #1
 800a312:	9311      	str	r3, [sp, #68]	; 0x44
 800a314:	2200      	movs	r2, #0
 800a316:	4bd6      	ldr	r3, [pc, #856]	; (800a670 <_svfprintf_r+0x860>)
 800a318:	0020      	movs	r0, r4
 800a31a:	0029      	movs	r1, r5
 800a31c:	f7f7 f9a6 	bl	800166c <__aeabi_dmul>
 800a320:	000d      	movs	r5, r1
 800a322:	0004      	movs	r4, r0
 800a324:	f7f8 f804 	bl	8002330 <__aeabi_d2iz>
 800a328:	9021      	str	r0, [sp, #132]	; 0x84
 800a32a:	f7f8 f837 	bl	800239c <__aeabi_i2d>
 800a32e:	0002      	movs	r2, r0
 800a330:	000b      	movs	r3, r1
 800a332:	0020      	movs	r0, r4
 800a334:	0029      	movs	r1, r5
 800a336:	f7f7 fc5b 	bl	8001bf0 <__aeabi_dsub>
 800a33a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a33c:	000d      	movs	r5, r1
 800a33e:	001a      	movs	r2, r3
 800a340:	3201      	adds	r2, #1
 800a342:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a344:	920e      	str	r2, [sp, #56]	; 0x38
 800a346:	9223      	str	r2, [sp, #140]	; 0x8c
 800a348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a34a:	0004      	movs	r4, r0
 800a34c:	5c52      	ldrb	r2, [r2, r1]
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a352:	9320      	str	r3, [sp, #128]	; 0x80
 800a354:	3301      	adds	r3, #1
 800a356:	d00a      	beq.n	800a36e <_svfprintf_r+0x55e>
 800a358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a35a:	2200      	movs	r2, #0
 800a35c:	3b01      	subs	r3, #1
 800a35e:	9311      	str	r3, [sp, #68]	; 0x44
 800a360:	0020      	movs	r0, r4
 800a362:	2300      	movs	r3, #0
 800a364:	0029      	movs	r1, r5
 800a366:	f7f6 f86f 	bl	8000448 <__aeabi_dcmpeq>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d0d2      	beq.n	800a314 <_svfprintf_r+0x504>
 800a36e:	2200      	movs	r2, #0
 800a370:	0020      	movs	r0, r4
 800a372:	0029      	movs	r1, r5
 800a374:	4bbf      	ldr	r3, [pc, #764]	; (800a674 <_svfprintf_r+0x864>)
 800a376:	f7f6 f881 	bl	800047c <__aeabi_dcmpgt>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d10c      	bne.n	800a398 <_svfprintf_r+0x588>
 800a37e:	2200      	movs	r2, #0
 800a380:	0020      	movs	r0, r4
 800a382:	0029      	movs	r1, r5
 800a384:	4bbb      	ldr	r3, [pc, #748]	; (800a674 <_svfprintf_r+0x864>)
 800a386:	f7f6 f85f 	bl	8000448 <__aeabi_dcmpeq>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d100      	bne.n	800a390 <_svfprintf_r+0x580>
 800a38e:	e191      	b.n	800a6b4 <_svfprintf_r+0x8a4>
 800a390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a392:	07db      	lsls	r3, r3, #31
 800a394:	d400      	bmi.n	800a398 <_svfprintf_r+0x588>
 800a396:	e18d      	b.n	800a6b4 <_svfprintf_r+0x8a4>
 800a398:	2030      	movs	r0, #48	; 0x30
 800a39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39c:	932a      	str	r3, [sp, #168]	; 0xa8
 800a39e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3a0:	7bdb      	ldrb	r3, [r3, #15]
 800a3a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a3a4:	3a01      	subs	r2, #1
 800a3a6:	922a      	str	r2, [sp, #168]	; 0xa8
 800a3a8:	7811      	ldrb	r1, [r2, #0]
 800a3aa:	4299      	cmp	r1, r3
 800a3ac:	d100      	bne.n	800a3b0 <_svfprintf_r+0x5a0>
 800a3ae:	e171      	b.n	800a694 <_svfprintf_r+0x884>
 800a3b0:	1c4b      	adds	r3, r1, #1
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2939      	cmp	r1, #57	; 0x39
 800a3b6:	d101      	bne.n	800a3bc <_svfprintf_r+0x5ac>
 800a3b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3ba:	7a9b      	ldrb	r3, [r3, #10]
 800a3bc:	7013      	strb	r3, [r2, #0]
 800a3be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3c0:	9a08      	ldr	r2, [sp, #32]
 800a3c2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ca:	2b47      	cmp	r3, #71	; 0x47
 800a3cc:	d000      	beq.n	800a3d0 <_svfprintf_r+0x5c0>
 800a3ce:	e1c4      	b.n	800a75a <_svfprintf_r+0x94a>
 800a3d0:	1ceb      	adds	r3, r5, #3
 800a3d2:	db03      	blt.n	800a3dc <_svfprintf_r+0x5cc>
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	42ab      	cmp	r3, r5
 800a3d8:	db00      	blt.n	800a3dc <_svfprintf_r+0x5cc>
 800a3da:	e1e6      	b.n	800a7aa <_svfprintf_r+0x99a>
 800a3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3de:	3b02      	subs	r3, #2
 800a3e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e2:	223c      	movs	r2, #60	; 0x3c
 800a3e4:	466b      	mov	r3, sp
 800a3e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3e8:	189b      	adds	r3, r3, r2
 800a3ea:	1e6c      	subs	r4, r5, #1
 800a3ec:	3a1c      	subs	r2, #28
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	9426      	str	r4, [sp, #152]	; 0x98
 800a3f4:	4391      	bics	r1, r2
 800a3f6:	2941      	cmp	r1, #65	; 0x41
 800a3f8:	d102      	bne.n	800a400 <_svfprintf_r+0x5f0>
 800a3fa:	330f      	adds	r3, #15
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	3001      	adds	r0, #1
 800a400:	a928      	add	r1, sp, #160	; 0xa0
 800a402:	700b      	strb	r3, [r1, #0]
 800a404:	232b      	movs	r3, #43	; 0x2b
 800a406:	2c00      	cmp	r4, #0
 800a408:	da02      	bge.n	800a410 <_svfprintf_r+0x600>
 800a40a:	2401      	movs	r4, #1
 800a40c:	3302      	adds	r3, #2
 800a40e:	1b64      	subs	r4, r4, r5
 800a410:	704b      	strb	r3, [r1, #1]
 800a412:	2c09      	cmp	r4, #9
 800a414:	dc00      	bgt.n	800a418 <_svfprintf_r+0x608>
 800a416:	e1ba      	b.n	800a78e <_svfprintf_r+0x97e>
 800a418:	2337      	movs	r3, #55	; 0x37
 800a41a:	250a      	movs	r5, #10
 800a41c:	aa1e      	add	r2, sp, #120	; 0x78
 800a41e:	189b      	adds	r3, r3, r2
 800a420:	9310      	str	r3, [sp, #64]	; 0x40
 800a422:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a424:	0020      	movs	r0, r4
 800a426:	9309      	str	r3, [sp, #36]	; 0x24
 800a428:	0029      	movs	r1, r5
 800a42a:	3b01      	subs	r3, #1
 800a42c:	9310      	str	r3, [sp, #64]	; 0x40
 800a42e:	f7f5 fff5 	bl	800041c <__aeabi_idivmod>
 800a432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a434:	3130      	adds	r1, #48	; 0x30
 800a436:	7019      	strb	r1, [r3, #0]
 800a438:	0020      	movs	r0, r4
 800a43a:	0029      	movs	r1, r5
 800a43c:	9411      	str	r4, [sp, #68]	; 0x44
 800a43e:	f7f5 ff07 	bl	8000250 <__divsi3>
 800a442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a444:	0004      	movs	r4, r0
 800a446:	2b63      	cmp	r3, #99	; 0x63
 800a448:	dceb      	bgt.n	800a422 <_svfprintf_r+0x612>
 800a44a:	222a      	movs	r2, #42	; 0x2a
 800a44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a44e:	a81e      	add	r0, sp, #120	; 0x78
 800a450:	1e99      	subs	r1, r3, #2
 800a452:	1812      	adds	r2, r2, r0
 800a454:	2037      	movs	r0, #55	; 0x37
 800a456:	000b      	movs	r3, r1
 800a458:	3430      	adds	r4, #48	; 0x30
 800a45a:	700c      	strb	r4, [r1, #0]
 800a45c:	ac1e      	add	r4, sp, #120	; 0x78
 800a45e:	1900      	adds	r0, r0, r4
 800a460:	4283      	cmp	r3, r0
 800a462:	d200      	bcs.n	800a466 <_svfprintf_r+0x656>
 800a464:	e18e      	b.n	800a784 <_svfprintf_r+0x974>
 800a466:	2300      	movs	r3, #0
 800a468:	4281      	cmp	r1, r0
 800a46a:	d804      	bhi.n	800a476 <_svfprintf_r+0x666>
 800a46c:	aa1e      	add	r2, sp, #120	; 0x78
 800a46e:	3339      	adds	r3, #57	; 0x39
 800a470:	189b      	adds	r3, r3, r2
 800a472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	222a      	movs	r2, #42	; 0x2a
 800a478:	a91e      	add	r1, sp, #120	; 0x78
 800a47a:	1852      	adds	r2, r2, r1
 800a47c:	18d3      	adds	r3, r2, r3
 800a47e:	aa28      	add	r2, sp, #160	; 0xa0
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	931e      	str	r3, [sp, #120]	; 0x78
 800a484:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a488:	4694      	mov	ip, r2
 800a48a:	4463      	add	r3, ip
 800a48c:	9309      	str	r3, [sp, #36]	; 0x24
 800a48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a490:	2b01      	cmp	r3, #1
 800a492:	dc01      	bgt.n	800a498 <_svfprintf_r+0x688>
 800a494:	07f3      	lsls	r3, r6, #31
 800a496:	d504      	bpl.n	800a4a2 <_svfprintf_r+0x692>
 800a498:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	4694      	mov	ip, r2
 800a49e:	4463      	add	r3, ip
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	2280      	movs	r2, #128	; 0x80
 800a4a4:	4b74      	ldr	r3, [pc, #464]	; (800a678 <_svfprintf_r+0x868>)
 800a4a6:	0052      	lsls	r2, r2, #1
 800a4a8:	4033      	ands	r3, r6
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	001d      	movs	r5, r3
 800a4b0:	921a      	str	r2, [sp, #104]	; 0x68
 800a4b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4b4:	9311      	str	r3, [sp, #68]	; 0x44
 800a4b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4b8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a4ba:	9319      	str	r3, [sp, #100]	; 0x64
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d006      	beq.n	800a4ce <_svfprintf_r+0x6be>
 800a4c0:	231b      	movs	r3, #27
 800a4c2:	aa1e      	add	r2, sp, #120	; 0x78
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	222d      	movs	r2, #45	; 0x2d
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9319      	str	r3, [sp, #100]	; 0x64
 800a4ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	da00      	bge.n	800a4da <_svfprintf_r+0x6ca>
 800a4d8:	921a      	str	r2, [sp, #104]	; 0x68
 800a4da:	231b      	movs	r3, #27
 800a4dc:	aa1e      	add	r2, sp, #120	; 0x78
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	1e5a      	subs	r2, r3, #1
 800a4e4:	4193      	sbcs	r3, r2
 800a4e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4e8:	18d3      	adds	r3, r2, r3
 800a4ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ec:	0032      	movs	r2, r6
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	401a      	ands	r2, r3
 800a4f2:	9220      	str	r2, [sp, #128]	; 0x80
 800a4f4:	421e      	tst	r6, r3
 800a4f6:	d002      	beq.n	800a4fe <_svfprintf_r+0x6ee>
 800a4f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4fe:	2384      	movs	r3, #132	; 0x84
 800a500:	0032      	movs	r2, r6
 800a502:	401a      	ands	r2, r3
 800a504:	9221      	str	r2, [sp, #132]	; 0x84
 800a506:	421e      	tst	r6, r3
 800a508:	d11f      	bne.n	800a54a <_svfprintf_r+0x73a>
 800a50a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a50c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a50e:	1a9c      	subs	r4, r3, r2
 800a510:	2c00      	cmp	r4, #0
 800a512:	dd1a      	ble.n	800a54a <_svfprintf_r+0x73a>
 800a514:	0039      	movs	r1, r7
 800a516:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a518:	4858      	ldr	r0, [pc, #352]	; (800a67c <_svfprintf_r+0x86c>)
 800a51a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a51c:	3301      	adds	r3, #1
 800a51e:	3108      	adds	r1, #8
 800a520:	6038      	str	r0, [r7, #0]
 800a522:	2c10      	cmp	r4, #16
 800a524:	dd00      	ble.n	800a528 <_svfprintf_r+0x718>
 800a526:	e31c      	b.n	800ab62 <_svfprintf_r+0xd52>
 800a528:	607c      	str	r4, [r7, #4]
 800a52a:	18a4      	adds	r4, r4, r2
 800a52c:	000f      	movs	r7, r1
 800a52e:	942e      	str	r4, [sp, #184]	; 0xb8
 800a530:	932d      	str	r3, [sp, #180]	; 0xb4
 800a532:	2b07      	cmp	r3, #7
 800a534:	dd09      	ble.n	800a54a <_svfprintf_r+0x73a>
 800a536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a538:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a53a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a53c:	f003 fd7e 	bl	800e03c <__ssprint_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d001      	beq.n	800a548 <_svfprintf_r+0x738>
 800a544:	f000 fe43 	bl	800b1ce <_svfprintf_r+0x13be>
 800a548:	af2f      	add	r7, sp, #188	; 0xbc
 800a54a:	221b      	movs	r2, #27
 800a54c:	a91e      	add	r1, sp, #120	; 0x78
 800a54e:	1852      	adds	r2, r2, r1
 800a550:	7811      	ldrb	r1, [r2, #0]
 800a552:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a554:	2900      	cmp	r1, #0
 800a556:	d014      	beq.n	800a582 <_svfprintf_r+0x772>
 800a558:	603a      	str	r2, [r7, #0]
 800a55a:	2201      	movs	r2, #1
 800a55c:	189b      	adds	r3, r3, r2
 800a55e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a560:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	189b      	adds	r3, r3, r2
 800a566:	932d      	str	r3, [sp, #180]	; 0xb4
 800a568:	3708      	adds	r7, #8
 800a56a:	2b07      	cmp	r3, #7
 800a56c:	dd09      	ble.n	800a582 <_svfprintf_r+0x772>
 800a56e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a570:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a572:	aa2c      	add	r2, sp, #176	; 0xb0
 800a574:	f003 fd62 	bl	800e03c <__ssprint_r>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d001      	beq.n	800a580 <_svfprintf_r+0x770>
 800a57c:	f000 fe27 	bl	800b1ce <_svfprintf_r+0x13be>
 800a580:	af2f      	add	r7, sp, #188	; 0xbc
 800a582:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a584:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a586:	2a00      	cmp	r2, #0
 800a588:	d015      	beq.n	800a5b6 <_svfprintf_r+0x7a6>
 800a58a:	aa25      	add	r2, sp, #148	; 0x94
 800a58c:	603a      	str	r2, [r7, #0]
 800a58e:	2202      	movs	r2, #2
 800a590:	189b      	adds	r3, r3, r2
 800a592:	932e      	str	r3, [sp, #184]	; 0xb8
 800a594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	3301      	adds	r3, #1
 800a59a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a59c:	3708      	adds	r7, #8
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	dd09      	ble.n	800a5b6 <_svfprintf_r+0x7a6>
 800a5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5a6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a5a8:	f003 fd48 	bl	800e03c <__ssprint_r>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d001      	beq.n	800a5b4 <_svfprintf_r+0x7a4>
 800a5b0:	f000 fe0d 	bl	800b1ce <_svfprintf_r+0x13be>
 800a5b4:	af2f      	add	r7, sp, #188	; 0xbc
 800a5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b8:	2b80      	cmp	r3, #128	; 0x80
 800a5ba:	d11f      	bne.n	800a5fc <_svfprintf_r+0x7ec>
 800a5bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a5be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a5c0:	1a9c      	subs	r4, r3, r2
 800a5c2:	2c00      	cmp	r4, #0
 800a5c4:	dd1a      	ble.n	800a5fc <_svfprintf_r+0x7ec>
 800a5c6:	0039      	movs	r1, r7
 800a5c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5ca:	482d      	ldr	r0, [pc, #180]	; (800a680 <_svfprintf_r+0x870>)
 800a5cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	3108      	adds	r1, #8
 800a5d2:	6038      	str	r0, [r7, #0]
 800a5d4:	2c10      	cmp	r4, #16
 800a5d6:	dd00      	ble.n	800a5da <_svfprintf_r+0x7ca>
 800a5d8:	e2d6      	b.n	800ab88 <_svfprintf_r+0xd78>
 800a5da:	607c      	str	r4, [r7, #4]
 800a5dc:	18a4      	adds	r4, r4, r2
 800a5de:	000f      	movs	r7, r1
 800a5e0:	942e      	str	r4, [sp, #184]	; 0xb8
 800a5e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	dd09      	ble.n	800a5fc <_svfprintf_r+0x7ec>
 800a5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5ec:	aa2c      	add	r2, sp, #176	; 0xb0
 800a5ee:	f003 fd25 	bl	800e03c <__ssprint_r>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d001      	beq.n	800a5fa <_svfprintf_r+0x7ea>
 800a5f6:	f000 fdea 	bl	800b1ce <_svfprintf_r+0x13be>
 800a5fa:	af2f      	add	r7, sp, #188	; 0xbc
 800a5fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a600:	1a9c      	subs	r4, r3, r2
 800a602:	2c00      	cmp	r4, #0
 800a604:	dd1a      	ble.n	800a63c <_svfprintf_r+0x82c>
 800a606:	0039      	movs	r1, r7
 800a608:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a60a:	481d      	ldr	r0, [pc, #116]	; (800a680 <_svfprintf_r+0x870>)
 800a60c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a60e:	3301      	adds	r3, #1
 800a610:	3108      	adds	r1, #8
 800a612:	6038      	str	r0, [r7, #0]
 800a614:	2c10      	cmp	r4, #16
 800a616:	dd00      	ble.n	800a61a <_svfprintf_r+0x80a>
 800a618:	e2c9      	b.n	800abae <_svfprintf_r+0xd9e>
 800a61a:	18a2      	adds	r2, r4, r2
 800a61c:	607c      	str	r4, [r7, #4]
 800a61e:	922e      	str	r2, [sp, #184]	; 0xb8
 800a620:	000f      	movs	r7, r1
 800a622:	932d      	str	r3, [sp, #180]	; 0xb4
 800a624:	2b07      	cmp	r3, #7
 800a626:	dd09      	ble.n	800a63c <_svfprintf_r+0x82c>
 800a628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a62a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a62c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a62e:	f003 fd05 	bl	800e03c <__ssprint_r>
 800a632:	2800      	cmp	r0, #0
 800a634:	d001      	beq.n	800a63a <_svfprintf_r+0x82a>
 800a636:	f000 fdca 	bl	800b1ce <_svfprintf_r+0x13be>
 800a63a:	af2f      	add	r7, sp, #188	; 0xbc
 800a63c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a63e:	9319      	str	r3, [sp, #100]	; 0x64
 800a640:	05f3      	lsls	r3, r6, #23
 800a642:	d500      	bpl.n	800a646 <_svfprintf_r+0x836>
 800a644:	e2ce      	b.n	800abe4 <_svfprintf_r+0xdd4>
 800a646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a648:	9b08      	ldr	r3, [sp, #32]
 800a64a:	4694      	mov	ip, r2
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a650:	607b      	str	r3, [r7, #4]
 800a652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a654:	4463      	add	r3, ip
 800a656:	932e      	str	r3, [sp, #184]	; 0xb8
 800a658:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a65a:	3301      	adds	r3, #1
 800a65c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a65e:	2b07      	cmp	r3, #7
 800a660:	dd00      	ble.n	800a664 <_svfprintf_r+0x854>
 800a662:	e3a3      	b.n	800adac <_svfprintf_r+0xf9c>
 800a664:	3708      	adds	r7, #8
 800a666:	e301      	b.n	800ac6c <_svfprintf_r+0xe5c>
 800a668:	0800fa1c 	.word	0x0800fa1c
 800a66c:	0800fa2d 	.word	0x0800fa2d
 800a670:	40300000 	.word	0x40300000
 800a674:	3fe00000 	.word	0x3fe00000
 800a678:	fffffbff 	.word	0xfffffbff
 800a67c:	0800fa40 	.word	0x0800fa40
 800a680:	0800fa50 	.word	0x0800fa50
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	930c      	str	r3, [sp, #48]	; 0x30
 800a688:	e610      	b.n	800a2ac <_svfprintf_r+0x49c>
 800a68a:	2306      	movs	r3, #6
 800a68c:	e5fd      	b.n	800a28a <_svfprintf_r+0x47a>
 800a68e:	930e      	str	r3, [sp, #56]	; 0x38
 800a690:	2300      	movs	r3, #0
 800a692:	e61a      	b.n	800a2ca <_svfprintf_r+0x4ba>
 800a694:	7010      	strb	r0, [r2, #0]
 800a696:	e684      	b.n	800a3a2 <_svfprintf_r+0x592>
 800a698:	7018      	strb	r0, [r3, #0]
 800a69a:	3301      	adds	r3, #1
 800a69c:	1aca      	subs	r2, r1, r3
 800a69e:	d5fb      	bpl.n	800a698 <_svfprintf_r+0x888>
 800a6a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	3201      	adds	r2, #1
 800a6a6:	db01      	blt.n	800a6ac <_svfprintf_r+0x89c>
 800a6a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6ae:	18d3      	adds	r3, r2, r3
 800a6b0:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6b2:	e684      	b.n	800a3be <_svfprintf_r+0x5ae>
 800a6b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6b6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a6b8:	2030      	movs	r0, #48	; 0x30
 800a6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6bc:	1851      	adds	r1, r2, r1
 800a6be:	e7ed      	b.n	800a69c <_svfprintf_r+0x88c>
 800a6c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a6c6:	2a46      	cmp	r2, #70	; 0x46
 800a6c8:	d006      	beq.n	800a6d8 <_svfprintf_r+0x8c8>
 800a6ca:	0014      	movs	r4, r2
 800a6cc:	3c45      	subs	r4, #69	; 0x45
 800a6ce:	4262      	negs	r2, r4
 800a6d0:	4154      	adcs	r4, r2
 800a6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	1914      	adds	r4, r2, r4
 800a6d8:	aa2a      	add	r2, sp, #168	; 0xa8
 800a6da:	9204      	str	r2, [sp, #16]
 800a6dc:	aa27      	add	r2, sp, #156	; 0x9c
 800a6de:	9203      	str	r2, [sp, #12]
 800a6e0:	aa26      	add	r2, sp, #152	; 0x98
 800a6e2:	9202      	str	r2, [sp, #8]
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	002a      	movs	r2, r5
 800a6e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6ec:	9401      	str	r4, [sp, #4]
 800a6ee:	f002 fad7 	bl	800cca0 <_dtoa_r>
 800a6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6f4:	9008      	str	r0, [sp, #32]
 800a6f6:	2b47      	cmp	r3, #71	; 0x47
 800a6f8:	d103      	bne.n	800a702 <_svfprintf_r+0x8f2>
 800a6fa:	07f3      	lsls	r3, r6, #31
 800a6fc:	d401      	bmi.n	800a702 <_svfprintf_r+0x8f2>
 800a6fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a700:	e65e      	b.n	800a3c0 <_svfprintf_r+0x5b0>
 800a702:	9b08      	ldr	r3, [sp, #32]
 800a704:	191b      	adds	r3, r3, r4
 800a706:	9311      	str	r3, [sp, #68]	; 0x44
 800a708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a70a:	2b46      	cmp	r3, #70	; 0x46
 800a70c:	d112      	bne.n	800a734 <_svfprintf_r+0x924>
 800a70e:	9b08      	ldr	r3, [sp, #32]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b30      	cmp	r3, #48	; 0x30
 800a714:	d10a      	bne.n	800a72c <_svfprintf_r+0x91c>
 800a716:	2200      	movs	r2, #0
 800a718:	2300      	movs	r3, #0
 800a71a:	0028      	movs	r0, r5
 800a71c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a71e:	f7f5 fe93 	bl	8000448 <__aeabi_dcmpeq>
 800a722:	2800      	cmp	r0, #0
 800a724:	d102      	bne.n	800a72c <_svfprintf_r+0x91c>
 800a726:	2301      	movs	r3, #1
 800a728:	1b1b      	subs	r3, r3, r4
 800a72a:	9326      	str	r3, [sp, #152]	; 0x98
 800a72c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a72e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a730:	18d3      	adds	r3, r2, r3
 800a732:	9311      	str	r3, [sp, #68]	; 0x44
 800a734:	2200      	movs	r2, #0
 800a736:	2300      	movs	r3, #0
 800a738:	0028      	movs	r0, r5
 800a73a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a73c:	f7f5 fe84 	bl	8000448 <__aeabi_dcmpeq>
 800a740:	2800      	cmp	r0, #0
 800a742:	d001      	beq.n	800a748 <_svfprintf_r+0x938>
 800a744:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a746:	932a      	str	r3, [sp, #168]	; 0xa8
 800a748:	2230      	movs	r2, #48	; 0x30
 800a74a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a74c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a74e:	4299      	cmp	r1, r3
 800a750:	d9d5      	bls.n	800a6fe <_svfprintf_r+0x8ee>
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	912a      	str	r1, [sp, #168]	; 0xa8
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	e7f7      	b.n	800a74a <_svfprintf_r+0x93a>
 800a75a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a75c:	2b46      	cmp	r3, #70	; 0x46
 800a75e:	d000      	beq.n	800a762 <_svfprintf_r+0x952>
 800a760:	e63f      	b.n	800a3e2 <_svfprintf_r+0x5d2>
 800a762:	2201      	movs	r2, #1
 800a764:	0033      	movs	r3, r6
 800a766:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a768:	4013      	ands	r3, r2
 800a76a:	430b      	orrs	r3, r1
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	dd2c      	ble.n	800a7ca <_svfprintf_r+0x9ba>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d046      	beq.n	800a802 <_svfprintf_r+0x9f2>
 800a774:	000a      	movs	r2, r1
 800a776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a778:	18eb      	adds	r3, r5, r3
 800a77a:	18d3      	adds	r3, r2, r3
 800a77c:	9309      	str	r3, [sp, #36]	; 0x24
 800a77e:	2366      	movs	r3, #102	; 0x66
 800a780:	930f      	str	r3, [sp, #60]	; 0x3c
 800a782:	e030      	b.n	800a7e6 <_svfprintf_r+0x9d6>
 800a784:	781c      	ldrb	r4, [r3, #0]
 800a786:	3301      	adds	r3, #1
 800a788:	7014      	strb	r4, [r2, #0]
 800a78a:	3201      	adds	r2, #1
 800a78c:	e668      	b.n	800a460 <_svfprintf_r+0x650>
 800a78e:	222a      	movs	r2, #42	; 0x2a
 800a790:	ab1e      	add	r3, sp, #120	; 0x78
 800a792:	18d2      	adds	r2, r2, r3
 800a794:	2800      	cmp	r0, #0
 800a796:	d104      	bne.n	800a7a2 <_svfprintf_r+0x992>
 800a798:	2330      	movs	r3, #48	; 0x30
 800a79a:	222b      	movs	r2, #43	; 0x2b
 800a79c:	708b      	strb	r3, [r1, #2]
 800a79e:	ab1e      	add	r3, sp, #120	; 0x78
 800a7a0:	18d2      	adds	r2, r2, r3
 800a7a2:	3430      	adds	r4, #48	; 0x30
 800a7a4:	1c53      	adds	r3, r2, #1
 800a7a6:	7014      	strb	r4, [r2, #0]
 800a7a8:	e669      	b.n	800a47e <_svfprintf_r+0x66e>
 800a7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ac:	42ab      	cmp	r3, r5
 800a7ae:	dd12      	ble.n	800a7d6 <_svfprintf_r+0x9c6>
 800a7b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7b4:	4694      	mov	ip, r2
 800a7b6:	4463      	add	r3, ip
 800a7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ba:	2367      	movs	r3, #103	; 0x67
 800a7bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	dc11      	bgt.n	800a7e6 <_svfprintf_r+0x9d6>
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	1b5b      	subs	r3, r3, r5
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	e00c      	b.n	800a7e4 <_svfprintf_r+0x9d4>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01b      	beq.n	800a806 <_svfprintf_r+0x9f6>
 800a7ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	e7d1      	b.n	800a77a <_svfprintf_r+0x96a>
 800a7d6:	2367      	movs	r3, #103	; 0x67
 800a7d8:	9509      	str	r5, [sp, #36]	; 0x24
 800a7da:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7dc:	07f3      	lsls	r3, r6, #31
 800a7de:	d502      	bpl.n	800a7e6 <_svfprintf_r+0x9d6>
 800a7e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7e2:	18eb      	adds	r3, r5, r3
 800a7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e6:	2380      	movs	r3, #128	; 0x80
 800a7e8:	0032      	movs	r2, r6
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	401a      	ands	r2, r3
 800a7ee:	9211      	str	r2, [sp, #68]	; 0x44
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	9210      	str	r2, [sp, #64]	; 0x40
 800a7f4:	421e      	tst	r6, r3
 800a7f6:	d100      	bne.n	800a7fa <_svfprintf_r+0x9ea>
 800a7f8:	e65d      	b.n	800a4b6 <_svfprintf_r+0x6a6>
 800a7fa:	4295      	cmp	r5, r2
 800a7fc:	dc25      	bgt.n	800a84a <_svfprintf_r+0xa3a>
 800a7fe:	9211      	str	r2, [sp, #68]	; 0x44
 800a800:	e659      	b.n	800a4b6 <_svfprintf_r+0x6a6>
 800a802:	9509      	str	r5, [sp, #36]	; 0x24
 800a804:	e7bb      	b.n	800a77e <_svfprintf_r+0x96e>
 800a806:	2366      	movs	r3, #102	; 0x66
 800a808:	9209      	str	r2, [sp, #36]	; 0x24
 800a80a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a80c:	e7eb      	b.n	800a7e6 <_svfprintf_r+0x9d6>
 800a80e:	42ab      	cmp	r3, r5
 800a810:	da0e      	bge.n	800a830 <_svfprintf_r+0xa20>
 800a812:	1aed      	subs	r5, r5, r3
 800a814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a816:	785b      	ldrb	r3, [r3, #1]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d012      	beq.n	800a842 <_svfprintf_r+0xa32>
 800a81c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a81e:	3301      	adds	r3, #1
 800a820:	9311      	str	r3, [sp, #68]	; 0x44
 800a822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a824:	3301      	adds	r3, #1
 800a826:	9312      	str	r3, [sp, #72]	; 0x48
 800a828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2bff      	cmp	r3, #255	; 0xff
 800a82e:	d1ee      	bne.n	800a80e <_svfprintf_r+0x9fe>
 800a830:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a834:	189b      	adds	r3, r3, r2
 800a836:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a838:	4353      	muls	r3, r2
 800a83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a83c:	189b      	adds	r3, r3, r2
 800a83e:	9309      	str	r3, [sp, #36]	; 0x24
 800a840:	e639      	b.n	800a4b6 <_svfprintf_r+0x6a6>
 800a842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a844:	3301      	adds	r3, #1
 800a846:	9310      	str	r3, [sp, #64]	; 0x40
 800a848:	e7ee      	b.n	800a828 <_svfprintf_r+0xa18>
 800a84a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a84c:	9311      	str	r3, [sp, #68]	; 0x44
 800a84e:	e7eb      	b.n	800a828 <_svfprintf_r+0xa18>
 800a850:	1d23      	adds	r3, r4, #4
 800a852:	930d      	str	r3, [sp, #52]	; 0x34
 800a854:	06b3      	lsls	r3, r6, #26
 800a856:	d509      	bpl.n	800a86c <_svfprintf_r+0xa5c>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	17d2      	asrs	r2, r2, #31
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a864:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	f7ff fb0d 	bl	8009e86 <_svfprintf_r+0x76>
 800a86c:	06f3      	lsls	r3, r6, #27
 800a86e:	d503      	bpl.n	800a878 <_svfprintf_r+0xa68>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e7f4      	b.n	800a862 <_svfprintf_r+0xa52>
 800a878:	0673      	lsls	r3, r6, #25
 800a87a:	d503      	bpl.n	800a884 <_svfprintf_r+0xa74>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a880:	801a      	strh	r2, [r3, #0]
 800a882:	e7ee      	b.n	800a862 <_svfprintf_r+0xa52>
 800a884:	05b6      	lsls	r6, r6, #22
 800a886:	d5f3      	bpl.n	800a870 <_svfprintf_r+0xa60>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	e7e8      	b.n	800a862 <_svfprintf_r+0xa52>
 800a890:	2310      	movs	r3, #16
 800a892:	431e      	orrs	r6, r3
 800a894:	2320      	movs	r3, #32
 800a896:	0030      	movs	r0, r6
 800a898:	4018      	ands	r0, r3
 800a89a:	421e      	tst	r6, r3
 800a89c:	d00f      	beq.n	800a8be <_svfprintf_r+0xaae>
 800a89e:	3b19      	subs	r3, #25
 800a8a0:	3407      	adds	r4, #7
 800a8a2:	439c      	bics	r4, r3
 800a8a4:	0022      	movs	r2, r4
 800a8a6:	ca18      	ldmia	r2!, {r3, r4}
 800a8a8:	9306      	str	r3, [sp, #24]
 800a8aa:	9407      	str	r4, [sp, #28]
 800a8ac:	920d      	str	r2, [sp, #52]	; 0x34
 800a8ae:	4bc9      	ldr	r3, [pc, #804]	; (800abd4 <_svfprintf_r+0xdc4>)
 800a8b0:	401e      	ands	r6, r3
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	221b      	movs	r2, #27
 800a8b6:	a91e      	add	r1, sp, #120	; 0x78
 800a8b8:	1852      	adds	r2, r2, r1
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	e430      	b.n	800a120 <_svfprintf_r+0x310>
 800a8be:	0022      	movs	r2, r4
 800a8c0:	ca08      	ldmia	r2!, {r3}
 800a8c2:	0031      	movs	r1, r6
 800a8c4:	920d      	str	r2, [sp, #52]	; 0x34
 800a8c6:	2210      	movs	r2, #16
 800a8c8:	4011      	ands	r1, r2
 800a8ca:	4216      	tst	r6, r2
 800a8cc:	d002      	beq.n	800a8d4 <_svfprintf_r+0xac4>
 800a8ce:	9306      	str	r3, [sp, #24]
 800a8d0:	9007      	str	r0, [sp, #28]
 800a8d2:	e7ec      	b.n	800a8ae <_svfprintf_r+0xa9e>
 800a8d4:	2240      	movs	r2, #64	; 0x40
 800a8d6:	0030      	movs	r0, r6
 800a8d8:	4010      	ands	r0, r2
 800a8da:	4216      	tst	r6, r2
 800a8dc:	d003      	beq.n	800a8e6 <_svfprintf_r+0xad6>
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	9306      	str	r3, [sp, #24]
 800a8e2:	9107      	str	r1, [sp, #28]
 800a8e4:	e7e3      	b.n	800a8ae <_svfprintf_r+0xa9e>
 800a8e6:	2280      	movs	r2, #128	; 0x80
 800a8e8:	0031      	movs	r1, r6
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	4011      	ands	r1, r2
 800a8ee:	4216      	tst	r6, r2
 800a8f0:	d0f6      	beq.n	800a8e0 <_svfprintf_r+0xad0>
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	e7eb      	b.n	800a8ce <_svfprintf_r+0xabe>
 800a8f6:	0023      	movs	r3, r4
 800a8f8:	cb04      	ldmia	r3!, {r2}
 800a8fa:	49b7      	ldr	r1, [pc, #732]	; (800abd8 <_svfprintf_r+0xdc8>)
 800a8fc:	9206      	str	r2, [sp, #24]
 800a8fe:	aa25      	add	r2, sp, #148	; 0x94
 800a900:	8011      	strh	r1, [r2, #0]
 800a902:	4ab6      	ldr	r2, [pc, #728]	; (800abdc <_svfprintf_r+0xdcc>)
 800a904:	930d      	str	r3, [sp, #52]	; 0x34
 800a906:	2300      	movs	r3, #0
 800a908:	921f      	str	r2, [sp, #124]	; 0x7c
 800a90a:	2278      	movs	r2, #120	; 0x78
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	3302      	adds	r3, #2
 800a910:	431e      	orrs	r6, r3
 800a912:	920f      	str	r2, [sp, #60]	; 0x3c
 800a914:	e7ce      	b.n	800a8b4 <_svfprintf_r+0xaa4>
 800a916:	0023      	movs	r3, r4
 800a918:	cb04      	ldmia	r3!, {r2}
 800a91a:	2400      	movs	r4, #0
 800a91c:	930d      	str	r3, [sp, #52]	; 0x34
 800a91e:	231b      	movs	r3, #27
 800a920:	9208      	str	r2, [sp, #32]
 800a922:	aa1e      	add	r2, sp, #120	; 0x78
 800a924:	189b      	adds	r3, r3, r2
 800a926:	701c      	strb	r4, [r3, #0]
 800a928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92a:	3301      	adds	r3, #1
 800a92c:	d00e      	beq.n	800a94c <_svfprintf_r+0xb3c>
 800a92e:	0021      	movs	r1, r4
 800a930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a932:	9808      	ldr	r0, [sp, #32]
 800a934:	f002 f83a 	bl	800c9ac <memchr>
 800a938:	900c      	str	r0, [sp, #48]	; 0x30
 800a93a:	42a0      	cmp	r0, r4
 800a93c:	d100      	bne.n	800a940 <_svfprintf_r+0xb30>
 800a93e:	e10d      	b.n	800ab5c <_svfprintf_r+0xd4c>
 800a940:	9a08      	ldr	r2, [sp, #32]
 800a942:	1a83      	subs	r3, r0, r2
 800a944:	9309      	str	r3, [sp, #36]	; 0x24
 800a946:	0023      	movs	r3, r4
 800a948:	940c      	str	r4, [sp, #48]	; 0x30
 800a94a:	e44e      	b.n	800a1ea <_svfprintf_r+0x3da>
 800a94c:	9808      	ldr	r0, [sp, #32]
 800a94e:	f7f5 fbd9 	bl	8000104 <strlen>
 800a952:	9009      	str	r0, [sp, #36]	; 0x24
 800a954:	e7f7      	b.n	800a946 <_svfprintf_r+0xb36>
 800a956:	2310      	movs	r3, #16
 800a958:	431e      	orrs	r6, r3
 800a95a:	2320      	movs	r3, #32
 800a95c:	0030      	movs	r0, r6
 800a95e:	4018      	ands	r0, r3
 800a960:	421e      	tst	r6, r3
 800a962:	d009      	beq.n	800a978 <_svfprintf_r+0xb68>
 800a964:	3b19      	subs	r3, #25
 800a966:	3407      	adds	r4, #7
 800a968:	439c      	bics	r4, r3
 800a96a:	0022      	movs	r2, r4
 800a96c:	ca18      	ldmia	r2!, {r3, r4}
 800a96e:	9306      	str	r3, [sp, #24]
 800a970:	9407      	str	r4, [sp, #28]
 800a972:	920d      	str	r2, [sp, #52]	; 0x34
 800a974:	2301      	movs	r3, #1
 800a976:	e79d      	b.n	800a8b4 <_svfprintf_r+0xaa4>
 800a978:	0023      	movs	r3, r4
 800a97a:	cb04      	ldmia	r3!, {r2}
 800a97c:	0031      	movs	r1, r6
 800a97e:	930d      	str	r3, [sp, #52]	; 0x34
 800a980:	2310      	movs	r3, #16
 800a982:	4019      	ands	r1, r3
 800a984:	421e      	tst	r6, r3
 800a986:	d003      	beq.n	800a990 <_svfprintf_r+0xb80>
 800a988:	9206      	str	r2, [sp, #24]
 800a98a:	9007      	str	r0, [sp, #28]
 800a98c:	3b0f      	subs	r3, #15
 800a98e:	e791      	b.n	800a8b4 <_svfprintf_r+0xaa4>
 800a990:	2340      	movs	r3, #64	; 0x40
 800a992:	0030      	movs	r0, r6
 800a994:	4018      	ands	r0, r3
 800a996:	421e      	tst	r6, r3
 800a998:	d003      	beq.n	800a9a2 <_svfprintf_r+0xb92>
 800a99a:	b293      	uxth	r3, r2
 800a99c:	9306      	str	r3, [sp, #24]
 800a99e:	9107      	str	r1, [sp, #28]
 800a9a0:	e7e8      	b.n	800a974 <_svfprintf_r+0xb64>
 800a9a2:	2380      	movs	r3, #128	; 0x80
 800a9a4:	0031      	movs	r1, r6
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4019      	ands	r1, r3
 800a9aa:	421e      	tst	r6, r3
 800a9ac:	d003      	beq.n	800a9b6 <_svfprintf_r+0xba6>
 800a9ae:	b2d3      	uxtb	r3, r2
 800a9b0:	9306      	str	r3, [sp, #24]
 800a9b2:	9007      	str	r0, [sp, #28]
 800a9b4:	e7de      	b.n	800a974 <_svfprintf_r+0xb64>
 800a9b6:	9206      	str	r2, [sp, #24]
 800a9b8:	e7f1      	b.n	800a99e <_svfprintf_r+0xb8e>
 800a9ba:	4b89      	ldr	r3, [pc, #548]	; (800abe0 <_svfprintf_r+0xdd0>)
 800a9bc:	0030      	movs	r0, r6
 800a9be:	931f      	str	r3, [sp, #124]	; 0x7c
 800a9c0:	2320      	movs	r3, #32
 800a9c2:	4018      	ands	r0, r3
 800a9c4:	421e      	tst	r6, r3
 800a9c6:	d01a      	beq.n	800a9fe <_svfprintf_r+0xbee>
 800a9c8:	3b19      	subs	r3, #25
 800a9ca:	3407      	adds	r4, #7
 800a9cc:	439c      	bics	r4, r3
 800a9ce:	0022      	movs	r2, r4
 800a9d0:	ca18      	ldmia	r2!, {r3, r4}
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	9407      	str	r4, [sp, #28]
 800a9d6:	920d      	str	r2, [sp, #52]	; 0x34
 800a9d8:	07f3      	lsls	r3, r6, #31
 800a9da:	d50a      	bpl.n	800a9f2 <_svfprintf_r+0xbe2>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	9a07      	ldr	r2, [sp, #28]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	d006      	beq.n	800a9f2 <_svfprintf_r+0xbe2>
 800a9e4:	2230      	movs	r2, #48	; 0x30
 800a9e6:	ab25      	add	r3, sp, #148	; 0x94
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9ec:	705a      	strb	r2, [r3, #1]
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	431e      	orrs	r6, r3
 800a9f2:	4b78      	ldr	r3, [pc, #480]	; (800abd4 <_svfprintf_r+0xdc4>)
 800a9f4:	401e      	ands	r6, r3
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	e75c      	b.n	800a8b4 <_svfprintf_r+0xaa4>
 800a9fa:	4b78      	ldr	r3, [pc, #480]	; (800abdc <_svfprintf_r+0xdcc>)
 800a9fc:	e7de      	b.n	800a9bc <_svfprintf_r+0xbac>
 800a9fe:	0023      	movs	r3, r4
 800aa00:	cb04      	ldmia	r3!, {r2}
 800aa02:	0031      	movs	r1, r6
 800aa04:	930d      	str	r3, [sp, #52]	; 0x34
 800aa06:	2310      	movs	r3, #16
 800aa08:	4019      	ands	r1, r3
 800aa0a:	421e      	tst	r6, r3
 800aa0c:	d002      	beq.n	800aa14 <_svfprintf_r+0xc04>
 800aa0e:	9206      	str	r2, [sp, #24]
 800aa10:	9007      	str	r0, [sp, #28]
 800aa12:	e7e1      	b.n	800a9d8 <_svfprintf_r+0xbc8>
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	0030      	movs	r0, r6
 800aa18:	4018      	ands	r0, r3
 800aa1a:	421e      	tst	r6, r3
 800aa1c:	d003      	beq.n	800aa26 <_svfprintf_r+0xc16>
 800aa1e:	b293      	uxth	r3, r2
 800aa20:	9306      	str	r3, [sp, #24]
 800aa22:	9107      	str	r1, [sp, #28]
 800aa24:	e7d8      	b.n	800a9d8 <_svfprintf_r+0xbc8>
 800aa26:	2380      	movs	r3, #128	; 0x80
 800aa28:	0031      	movs	r1, r6
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4019      	ands	r1, r3
 800aa2e:	421e      	tst	r6, r3
 800aa30:	d002      	beq.n	800aa38 <_svfprintf_r+0xc28>
 800aa32:	b2d3      	uxtb	r3, r2
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	e7eb      	b.n	800aa10 <_svfprintf_r+0xc00>
 800aa38:	9206      	str	r2, [sp, #24]
 800aa3a:	e7f2      	b.n	800aa22 <_svfprintf_r+0xc12>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <_svfprintf_r+0xc48>
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d807      	bhi.n	800aa58 <_svfprintf_r+0xc48>
 800aa48:	23e7      	movs	r3, #231	; 0xe7
 800aa4a:	aa1e      	add	r2, sp, #120	; 0x78
 800aa4c:	189b      	adds	r3, r3, r2
 800aa4e:	9a06      	ldr	r2, [sp, #24]
 800aa50:	3230      	adds	r2, #48	; 0x30
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	f000 fc18 	bl	800b288 <_svfprintf_r+0x1478>
 800aa58:	2680      	movs	r6, #128	; 0x80
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	00f6      	lsls	r6, r6, #3
 800aa5e:	930e      	str	r3, [sp, #56]	; 0x38
 800aa60:	ad58      	add	r5, sp, #352	; 0x160
 800aa62:	4026      	ands	r6, r4
 800aa64:	220a      	movs	r2, #10
 800aa66:	9806      	ldr	r0, [sp, #24]
 800aa68:	9907      	ldr	r1, [sp, #28]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f7f5 fd1a 	bl	80004a4 <__aeabi_uldivmod>
 800aa70:	1e6b      	subs	r3, r5, #1
 800aa72:	3230      	adds	r2, #48	; 0x30
 800aa74:	9308      	str	r3, [sp, #32]
 800aa76:	701a      	strb	r2, [r3, #0]
 800aa78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa7a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	9110      	str	r1, [sp, #64]	; 0x40
 800aa80:	930e      	str	r3, [sp, #56]	; 0x38
 800aa82:	2e00      	cmp	r6, #0
 800aa84:	d01d      	beq.n	800aac2 <_svfprintf_r+0xcb2>
 800aa86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d118      	bne.n	800aac2 <_svfprintf_r+0xcb2>
 800aa90:	2aff      	cmp	r2, #255	; 0xff
 800aa92:	d016      	beq.n	800aac2 <_svfprintf_r+0xcb2>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <_svfprintf_r+0xc90>
 800aa9a:	9b06      	ldr	r3, [sp, #24]
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d910      	bls.n	800aac2 <_svfprintf_r+0xcb2>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aaa4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800aaa6:	1a9b      	subs	r3, r3, r2
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	9308      	str	r3, [sp, #32]
 800aaac:	f7fd ffd1 	bl	8008a52 <strncpy>
 800aab0:	2200      	movs	r2, #0
 800aab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aab4:	920e      	str	r2, [sp, #56]	; 0x38
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	1e5a      	subs	r2, r3, #1
 800aaba:	4193      	sbcs	r3, r2
 800aabc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aabe:	18d3      	adds	r3, r2, r3
 800aac0:	9312      	str	r3, [sp, #72]	; 0x48
 800aac2:	9b07      	ldr	r3, [sp, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10f      	bne.n	800aae8 <_svfprintf_r+0xcd8>
 800aac8:	9b06      	ldr	r3, [sp, #24]
 800aaca:	2b09      	cmp	r3, #9
 800aacc:	d80c      	bhi.n	800aae8 <_svfprintf_r+0xcd8>
 800aace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad0:	9a08      	ldr	r2, [sp, #32]
 800aad2:	9319      	str	r3, [sp, #100]	; 0x64
 800aad4:	ab58      	add	r3, sp, #352	; 0x160
 800aad6:	1a9b      	subs	r3, r3, r2
 800aad8:	9309      	str	r3, [sp, #36]	; 0x24
 800aada:	2300      	movs	r3, #0
 800aadc:	0026      	movs	r6, r4
 800aade:	930c      	str	r3, [sp, #48]	; 0x30
 800aae0:	001d      	movs	r5, r3
 800aae2:	9310      	str	r3, [sp, #64]	; 0x40
 800aae4:	9311      	str	r3, [sp, #68]	; 0x44
 800aae6:	e4f2      	b.n	800a4ce <_svfprintf_r+0x6be>
 800aae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaea:	9d08      	ldr	r5, [sp, #32]
 800aaec:	9306      	str	r3, [sp, #24]
 800aaee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaf0:	9307      	str	r3, [sp, #28]
 800aaf2:	e7b7      	b.n	800aa64 <_svfprintf_r+0xc54>
 800aaf4:	200f      	movs	r0, #15
 800aaf6:	ab58      	add	r3, sp, #352	; 0x160
 800aaf8:	9308      	str	r3, [sp, #32]
 800aafa:	9b08      	ldr	r3, [sp, #32]
 800aafc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aafe:	3b01      	subs	r3, #1
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	4003      	ands	r3, r0
 800ab06:	5cd3      	ldrb	r3, [r2, r3]
 800ab08:	9a08      	ldr	r2, [sp, #32]
 800ab0a:	7013      	strb	r3, [r2, #0]
 800ab0c:	9b07      	ldr	r3, [sp, #28]
 800ab0e:	0719      	lsls	r1, r3, #28
 800ab10:	9b06      	ldr	r3, [sp, #24]
 800ab12:	091a      	lsrs	r2, r3, #4
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	4311      	orrs	r1, r2
 800ab18:	091b      	lsrs	r3, r3, #4
 800ab1a:	9307      	str	r3, [sp, #28]
 800ab1c:	000b      	movs	r3, r1
 800ab1e:	9a07      	ldr	r2, [sp, #28]
 800ab20:	9106      	str	r1, [sp, #24]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d1e9      	bne.n	800aafa <_svfprintf_r+0xcea>
 800ab26:	e7d2      	b.n	800aace <_svfprintf_r+0xcbe>
 800ab28:	aa58      	add	r2, sp, #352	; 0x160
 800ab2a:	9208      	str	r2, [sp, #32]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1ce      	bne.n	800aace <_svfprintf_r+0xcbe>
 800ab30:	07f6      	lsls	r6, r6, #31
 800ab32:	d5cc      	bpl.n	800aace <_svfprintf_r+0xcbe>
 800ab34:	aa1e      	add	r2, sp, #120	; 0x78
 800ab36:	33e7      	adds	r3, #231	; 0xe7
 800ab38:	189b      	adds	r3, r3, r2
 800ab3a:	2230      	movs	r2, #48	; 0x30
 800ab3c:	e789      	b.n	800aa52 <_svfprintf_r+0xc42>
 800ab3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d100      	bne.n	800ab46 <_svfprintf_r+0xd36>
 800ab44:	e364      	b.n	800b210 <_svfprintf_r+0x1400>
 800ab46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab48:	211b      	movs	r1, #27
 800ab4a:	ab3f      	add	r3, sp, #252	; 0xfc
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	a81e      	add	r0, sp, #120	; 0x78
 800ab52:	1809      	adds	r1, r1, r0
 800ab54:	700a      	strb	r2, [r1, #0]
 800ab56:	940d      	str	r4, [sp, #52]	; 0x34
 800ab58:	f7ff fabd 	bl	800a0d6 <_svfprintf_r+0x2c6>
 800ab5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab5e:	f7ff fb44 	bl	800a1ea <_svfprintf_r+0x3da>
 800ab62:	2010      	movs	r0, #16
 800ab64:	1812      	adds	r2, r2, r0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	922e      	str	r2, [sp, #184]	; 0xb8
 800ab6a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab6c:	2b07      	cmp	r3, #7
 800ab6e:	dd08      	ble.n	800ab82 <_svfprintf_r+0xd72>
 800ab70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab74:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab76:	f003 fa61 	bl	800e03c <__ssprint_r>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d000      	beq.n	800ab80 <_svfprintf_r+0xd70>
 800ab7e:	e326      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ab80:	a92f      	add	r1, sp, #188	; 0xbc
 800ab82:	000f      	movs	r7, r1
 800ab84:	3c10      	subs	r4, #16
 800ab86:	e4c5      	b.n	800a514 <_svfprintf_r+0x704>
 800ab88:	2010      	movs	r0, #16
 800ab8a:	1812      	adds	r2, r2, r0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	922e      	str	r2, [sp, #184]	; 0xb8
 800ab90:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab92:	2b07      	cmp	r3, #7
 800ab94:	dd08      	ble.n	800aba8 <_svfprintf_r+0xd98>
 800ab96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab98:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab9a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab9c:	f003 fa4e 	bl	800e03c <__ssprint_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d000      	beq.n	800aba6 <_svfprintf_r+0xd96>
 800aba4:	e313      	b.n	800b1ce <_svfprintf_r+0x13be>
 800aba6:	a92f      	add	r1, sp, #188	; 0xbc
 800aba8:	000f      	movs	r7, r1
 800abaa:	3c10      	subs	r4, #16
 800abac:	e50b      	b.n	800a5c6 <_svfprintf_r+0x7b6>
 800abae:	2010      	movs	r0, #16
 800abb0:	1812      	adds	r2, r2, r0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	922e      	str	r2, [sp, #184]	; 0xb8
 800abb6:	932d      	str	r3, [sp, #180]	; 0xb4
 800abb8:	2b07      	cmp	r3, #7
 800abba:	dd08      	ble.n	800abce <_svfprintf_r+0xdbe>
 800abbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800abc2:	f003 fa3b 	bl	800e03c <__ssprint_r>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d000      	beq.n	800abcc <_svfprintf_r+0xdbc>
 800abca:	e300      	b.n	800b1ce <_svfprintf_r+0x13be>
 800abcc:	a92f      	add	r1, sp, #188	; 0xbc
 800abce:	000f      	movs	r7, r1
 800abd0:	3c10      	subs	r4, #16
 800abd2:	e518      	b.n	800a606 <_svfprintf_r+0x7f6>
 800abd4:	fffffbff 	.word	0xfffffbff
 800abd8:	00007830 	.word	0x00007830
 800abdc:	0800fa1c 	.word	0x0800fa1c
 800abe0:	0800fa2d 	.word	0x0800fa2d
 800abe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abe6:	2b65      	cmp	r3, #101	; 0x65
 800abe8:	dc00      	bgt.n	800abec <_svfprintf_r+0xddc>
 800abea:	e241      	b.n	800b070 <_svfprintf_r+0x1260>
 800abec:	9814      	ldr	r0, [sp, #80]	; 0x50
 800abee:	9915      	ldr	r1, [sp, #84]	; 0x54
 800abf0:	2200      	movs	r2, #0
 800abf2:	2300      	movs	r3, #0
 800abf4:	f7f5 fc28 	bl	8000448 <__aeabi_dcmpeq>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d077      	beq.n	800acec <_svfprintf_r+0xedc>
 800abfc:	4bca      	ldr	r3, [pc, #808]	; (800af28 <_svfprintf_r+0x1118>)
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	2301      	movs	r3, #1
 800ac02:	607b      	str	r3, [r7, #4]
 800ac04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac06:	3708      	adds	r7, #8
 800ac08:	3301      	adds	r3, #1
 800ac0a:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac0e:	3301      	adds	r3, #1
 800ac10:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac12:	2b07      	cmp	r3, #7
 800ac14:	dd08      	ble.n	800ac28 <_svfprintf_r+0xe18>
 800ac16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac1c:	f003 fa0e 	bl	800e03c <__ssprint_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d000      	beq.n	800ac26 <_svfprintf_r+0xe16>
 800ac24:	e2d3      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ac26:	af2f      	add	r7, sp, #188	; 0xbc
 800ac28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	db01      	blt.n	800ac34 <_svfprintf_r+0xe24>
 800ac30:	07f3      	lsls	r3, r6, #31
 800ac32:	d51b      	bpl.n	800ac6c <_svfprintf_r+0xe5c>
 800ac34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ac36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ac40:	3708      	adds	r7, #8
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac48:	3301      	adds	r3, #1
 800ac4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac4c:	2b07      	cmp	r3, #7
 800ac4e:	dd08      	ble.n	800ac62 <_svfprintf_r+0xe52>
 800ac50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac54:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac56:	f003 f9f1 	bl	800e03c <__ssprint_r>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d000      	beq.n	800ac60 <_svfprintf_r+0xe50>
 800ac5e:	e2b6      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ac60:	af2f      	add	r7, sp, #188	; 0xbc
 800ac62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac64:	2510      	movs	r5, #16
 800ac66:	1e5c      	subs	r4, r3, #1
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	dc2e      	bgt.n	800acca <_svfprintf_r+0xeba>
 800ac6c:	0776      	lsls	r6, r6, #29
 800ac6e:	d500      	bpl.n	800ac72 <_svfprintf_r+0xe62>
 800ac70:	e290      	b.n	800b194 <_svfprintf_r+0x1384>
 800ac72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ac74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac76:	4293      	cmp	r3, r2
 800ac78:	da00      	bge.n	800ac7c <_svfprintf_r+0xe6c>
 800ac7a:	0013      	movs	r3, r2
 800ac7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac7e:	18d3      	adds	r3, r2, r3
 800ac80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d007      	beq.n	800ac98 <_svfprintf_r+0xe88>
 800ac88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac8e:	f003 f9d5 	bl	800e03c <__ssprint_r>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d000      	beq.n	800ac98 <_svfprintf_r+0xe88>
 800ac96:	e29a      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d000      	beq.n	800aca4 <_svfprintf_r+0xe94>
 800aca2:	e2b0      	b.n	800b206 <_svfprintf_r+0x13f6>
 800aca4:	af2f      	add	r7, sp, #188	; 0xbc
 800aca6:	e5dc      	b.n	800a862 <_svfprintf_r+0xa52>
 800aca8:	3210      	adds	r2, #16
 800acaa:	607d      	str	r5, [r7, #4]
 800acac:	922e      	str	r2, [sp, #184]	; 0xb8
 800acae:	932d      	str	r3, [sp, #180]	; 0xb4
 800acb0:	2b07      	cmp	r3, #7
 800acb2:	dd08      	ble.n	800acc6 <_svfprintf_r+0xeb6>
 800acb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acb8:	aa2c      	add	r2, sp, #176	; 0xb0
 800acba:	f003 f9bf 	bl	800e03c <__ssprint_r>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d000      	beq.n	800acc4 <_svfprintf_r+0xeb4>
 800acc2:	e284      	b.n	800b1ce <_svfprintf_r+0x13be>
 800acc4:	a92f      	add	r1, sp, #188	; 0xbc
 800acc6:	000f      	movs	r7, r1
 800acc8:	3c10      	subs	r4, #16
 800acca:	0039      	movs	r1, r7
 800accc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800acce:	4897      	ldr	r0, [pc, #604]	; (800af2c <_svfprintf_r+0x111c>)
 800acd0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800acd2:	3301      	adds	r3, #1
 800acd4:	3108      	adds	r1, #8
 800acd6:	6038      	str	r0, [r7, #0]
 800acd8:	2c10      	cmp	r4, #16
 800acda:	dce5      	bgt.n	800aca8 <_svfprintf_r+0xe98>
 800acdc:	607c      	str	r4, [r7, #4]
 800acde:	18a4      	adds	r4, r4, r2
 800ace0:	942e      	str	r4, [sp, #184]	; 0xb8
 800ace2:	000f      	movs	r7, r1
 800ace4:	932d      	str	r3, [sp, #180]	; 0xb4
 800ace6:	2b07      	cmp	r3, #7
 800ace8:	ddc0      	ble.n	800ac6c <_svfprintf_r+0xe5c>
 800acea:	e05f      	b.n	800adac <_svfprintf_r+0xf9c>
 800acec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dc78      	bgt.n	800ade4 <_svfprintf_r+0xfd4>
 800acf2:	4b8d      	ldr	r3, [pc, #564]	; (800af28 <_svfprintf_r+0x1118>)
 800acf4:	603b      	str	r3, [r7, #0]
 800acf6:	2301      	movs	r3, #1
 800acf8:	607b      	str	r3, [r7, #4]
 800acfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acfc:	3708      	adds	r7, #8
 800acfe:	3301      	adds	r3, #1
 800ad00:	932e      	str	r3, [sp, #184]	; 0xb8
 800ad02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad04:	3301      	adds	r3, #1
 800ad06:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad08:	2b07      	cmp	r3, #7
 800ad0a:	dd08      	ble.n	800ad1e <_svfprintf_r+0xf0e>
 800ad0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad10:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad12:	f003 f993 	bl	800e03c <__ssprint_r>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d000      	beq.n	800ad1c <_svfprintf_r+0xf0c>
 800ad1a:	e258      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ad1c:	af2f      	add	r7, sp, #188	; 0xbc
 800ad1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad22:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ad24:	430b      	orrs	r3, r1
 800ad26:	2101      	movs	r1, #1
 800ad28:	4031      	ands	r1, r6
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	d09e      	beq.n	800ac6c <_svfprintf_r+0xe5c>
 800ad2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad30:	603b      	str	r3, [r7, #0]
 800ad32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	189a      	adds	r2, r3, r2
 800ad38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad3a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad40:	3708      	adds	r7, #8
 800ad42:	2b07      	cmp	r3, #7
 800ad44:	dd08      	ble.n	800ad58 <_svfprintf_r+0xf48>
 800ad46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad4c:	f003 f976 	bl	800e03c <__ssprint_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d000      	beq.n	800ad56 <_svfprintf_r+0xf46>
 800ad54:	e23b      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ad56:	af2f      	add	r7, sp, #188	; 0xbc
 800ad58:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	da19      	bge.n	800ad92 <_svfprintf_r+0xf82>
 800ad5e:	0038      	movs	r0, r7
 800ad60:	2510      	movs	r5, #16
 800ad62:	4264      	negs	r4, r4
 800ad64:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ad66:	4a71      	ldr	r2, [pc, #452]	; (800af2c <_svfprintf_r+0x111c>)
 800ad68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad6a:	3101      	adds	r1, #1
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	6002      	str	r2, [r0, #0]
 800ad70:	2c10      	cmp	r4, #16
 800ad72:	dc25      	bgt.n	800adc0 <_svfprintf_r+0xfb0>
 800ad74:	6044      	str	r4, [r0, #4]
 800ad76:	18e4      	adds	r4, r4, r3
 800ad78:	942e      	str	r4, [sp, #184]	; 0xb8
 800ad7a:	912d      	str	r1, [sp, #180]	; 0xb4
 800ad7c:	2907      	cmp	r1, #7
 800ad7e:	dd08      	ble.n	800ad92 <_svfprintf_r+0xf82>
 800ad80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad84:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad86:	f003 f959 	bl	800e03c <__ssprint_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d000      	beq.n	800ad90 <_svfprintf_r+0xf80>
 800ad8e:	e21e      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ad90:	af2f      	add	r7, sp, #188	; 0xbc
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad9a:	18d2      	adds	r2, r2, r3
 800ad9c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad9e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ada0:	607b      	str	r3, [r7, #4]
 800ada2:	3201      	adds	r2, #1
 800ada4:	922d      	str	r2, [sp, #180]	; 0xb4
 800ada6:	2a07      	cmp	r2, #7
 800ada8:	dc00      	bgt.n	800adac <_svfprintf_r+0xf9c>
 800adaa:	e45b      	b.n	800a664 <_svfprintf_r+0x854>
 800adac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adb0:	aa2c      	add	r2, sp, #176	; 0xb0
 800adb2:	f003 f943 	bl	800e03c <__ssprint_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d000      	beq.n	800adbc <_svfprintf_r+0xfac>
 800adba:	e208      	b.n	800b1ce <_svfprintf_r+0x13be>
 800adbc:	af2f      	add	r7, sp, #188	; 0xbc
 800adbe:	e755      	b.n	800ac6c <_svfprintf_r+0xe5c>
 800adc0:	3310      	adds	r3, #16
 800adc2:	6045      	str	r5, [r0, #4]
 800adc4:	932e      	str	r3, [sp, #184]	; 0xb8
 800adc6:	912d      	str	r1, [sp, #180]	; 0xb4
 800adc8:	2907      	cmp	r1, #7
 800adca:	dd08      	ble.n	800adde <_svfprintf_r+0xfce>
 800adcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800add0:	aa2c      	add	r2, sp, #176	; 0xb0
 800add2:	f003 f933 	bl	800e03c <__ssprint_r>
 800add6:	2800      	cmp	r0, #0
 800add8:	d000      	beq.n	800addc <_svfprintf_r+0xfcc>
 800adda:	e1f8      	b.n	800b1ce <_svfprintf_r+0x13be>
 800addc:	af2f      	add	r7, sp, #188	; 0xbc
 800adde:	0038      	movs	r0, r7
 800ade0:	3c10      	subs	r4, #16
 800ade2:	e7bf      	b.n	800ad64 <_svfprintf_r+0xf54>
 800ade4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade6:	002c      	movs	r4, r5
 800ade8:	429d      	cmp	r5, r3
 800adea:	dd00      	ble.n	800adee <_svfprintf_r+0xfde>
 800adec:	001c      	movs	r4, r3
 800adee:	2c00      	cmp	r4, #0
 800adf0:	dd14      	ble.n	800ae1c <_svfprintf_r+0x100c>
 800adf2:	9b08      	ldr	r3, [sp, #32]
 800adf4:	607c      	str	r4, [r7, #4]
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adfa:	3708      	adds	r7, #8
 800adfc:	18e3      	adds	r3, r4, r3
 800adfe:	932e      	str	r3, [sp, #184]	; 0xb8
 800ae00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae02:	3301      	adds	r3, #1
 800ae04:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae06:	2b07      	cmp	r3, #7
 800ae08:	dd08      	ble.n	800ae1c <_svfprintf_r+0x100c>
 800ae0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae0e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae10:	f003 f914 	bl	800e03c <__ssprint_r>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d000      	beq.n	800ae1a <_svfprintf_r+0x100a>
 800ae18:	e1d9      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ae1a:	af2f      	add	r7, sp, #188	; 0xbc
 800ae1c:	43e3      	mvns	r3, r4
 800ae1e:	17db      	asrs	r3, r3, #31
 800ae20:	401c      	ands	r4, r3
 800ae22:	1b2c      	subs	r4, r5, r4
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	dd18      	ble.n	800ae5a <_svfprintf_r+0x104a>
 800ae28:	0039      	movs	r1, r7
 800ae2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae2c:	483f      	ldr	r0, [pc, #252]	; (800af2c <_svfprintf_r+0x111c>)
 800ae2e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae30:	3301      	adds	r3, #1
 800ae32:	3108      	adds	r1, #8
 800ae34:	6038      	str	r0, [r7, #0]
 800ae36:	2c10      	cmp	r4, #16
 800ae38:	dc7a      	bgt.n	800af30 <_svfprintf_r+0x1120>
 800ae3a:	607c      	str	r4, [r7, #4]
 800ae3c:	18a4      	adds	r4, r4, r2
 800ae3e:	000f      	movs	r7, r1
 800ae40:	942e      	str	r4, [sp, #184]	; 0xb8
 800ae42:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae44:	2b07      	cmp	r3, #7
 800ae46:	dd08      	ble.n	800ae5a <_svfprintf_r+0x104a>
 800ae48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae4e:	f003 f8f5 	bl	800e03c <__ssprint_r>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d000      	beq.n	800ae58 <_svfprintf_r+0x1048>
 800ae56:	e1ba      	b.n	800b1ce <_svfprintf_r+0x13be>
 800ae58:	af2f      	add	r7, sp, #188	; 0xbc
 800ae5a:	9b08      	ldr	r3, [sp, #32]
 800ae5c:	195d      	adds	r5, r3, r5
 800ae5e:	0573      	lsls	r3, r6, #21
 800ae60:	d50b      	bpl.n	800ae7a <_svfprintf_r+0x106a>
 800ae62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d176      	bne.n	800af56 <_svfprintf_r+0x1146>
 800ae68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d176      	bne.n	800af5c <_svfprintf_r+0x114c>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae72:	189b      	adds	r3, r3, r2
 800ae74:	429d      	cmp	r5, r3
 800ae76:	d900      	bls.n	800ae7a <_svfprintf_r+0x106a>
 800ae78:	001d      	movs	r5, r3
 800ae7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	db01      	blt.n	800ae86 <_svfprintf_r+0x1076>
 800ae82:	07f3      	lsls	r3, r6, #31
 800ae84:	d516      	bpl.n	800aeb4 <_svfprintf_r+0x10a4>
 800ae86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ae92:	3708      	adds	r7, #8
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	932e      	str	r3, [sp, #184]	; 0xb8
 800ae98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae9e:	2b07      	cmp	r3, #7
 800aea0:	dd08      	ble.n	800aeb4 <_svfprintf_r+0x10a4>
 800aea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aea6:	aa2c      	add	r2, sp, #176	; 0xb0
 800aea8:	f003 f8c8 	bl	800e03c <__ssprint_r>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d000      	beq.n	800aeb2 <_svfprintf_r+0x10a2>
 800aeb0:	e18d      	b.n	800b1ce <_svfprintf_r+0x13be>
 800aeb2:	af2f      	add	r7, sp, #188	; 0xbc
 800aeb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeb6:	9b08      	ldr	r3, [sp, #32]
 800aeb8:	4694      	mov	ip, r2
 800aeba:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800aebc:	4463      	add	r3, ip
 800aebe:	1b5b      	subs	r3, r3, r5
 800aec0:	1b14      	subs	r4, r2, r4
 800aec2:	429c      	cmp	r4, r3
 800aec4:	dd00      	ble.n	800aec8 <_svfprintf_r+0x10b8>
 800aec6:	001c      	movs	r4, r3
 800aec8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	dd12      	ble.n	800aef4 <_svfprintf_r+0x10e4>
 800aece:	18e3      	adds	r3, r4, r3
 800aed0:	932e      	str	r3, [sp, #184]	; 0xb8
 800aed2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aed4:	603d      	str	r5, [r7, #0]
 800aed6:	3301      	adds	r3, #1
 800aed8:	607c      	str	r4, [r7, #4]
 800aeda:	932d      	str	r3, [sp, #180]	; 0xb4
 800aedc:	3708      	adds	r7, #8
 800aede:	2b07      	cmp	r3, #7
 800aee0:	dd08      	ble.n	800aef4 <_svfprintf_r+0x10e4>
 800aee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aee6:	aa2c      	add	r2, sp, #176	; 0xb0
 800aee8:	f003 f8a8 	bl	800e03c <__ssprint_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d000      	beq.n	800aef2 <_svfprintf_r+0x10e2>
 800aef0:	e16d      	b.n	800b1ce <_svfprintf_r+0x13be>
 800aef2:	af2f      	add	r7, sp, #188	; 0xbc
 800aef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aef6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aef8:	2510      	movs	r5, #16
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	43e2      	mvns	r2, r4
 800aefe:	17d2      	asrs	r2, r2, #31
 800af00:	4014      	ands	r4, r2
 800af02:	1b1c      	subs	r4, r3, r4
 800af04:	2c00      	cmp	r4, #0
 800af06:	dc00      	bgt.n	800af0a <_svfprintf_r+0x10fa>
 800af08:	e6b0      	b.n	800ac6c <_svfprintf_r+0xe5c>
 800af0a:	0039      	movs	r1, r7
 800af0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af0e:	4807      	ldr	r0, [pc, #28]	; (800af2c <_svfprintf_r+0x111c>)
 800af10:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800af12:	3301      	adds	r3, #1
 800af14:	3108      	adds	r1, #8
 800af16:	6038      	str	r0, [r7, #0]
 800af18:	2c10      	cmp	r4, #16
 800af1a:	dd00      	ble.n	800af1e <_svfprintf_r+0x110e>
 800af1c:	e096      	b.n	800b04c <_svfprintf_r+0x123c>
 800af1e:	1912      	adds	r2, r2, r4
 800af20:	607c      	str	r4, [r7, #4]
 800af22:	922e      	str	r2, [sp, #184]	; 0xb8
 800af24:	e6dd      	b.n	800ace2 <_svfprintf_r+0xed2>
 800af26:	46c0      	nop			; (mov r8, r8)
 800af28:	0800fa3e 	.word	0x0800fa3e
 800af2c:	0800fa50 	.word	0x0800fa50
 800af30:	2010      	movs	r0, #16
 800af32:	1812      	adds	r2, r2, r0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	922e      	str	r2, [sp, #184]	; 0xb8
 800af38:	932d      	str	r3, [sp, #180]	; 0xb4
 800af3a:	2b07      	cmp	r3, #7
 800af3c:	dd08      	ble.n	800af50 <_svfprintf_r+0x1140>
 800af3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af42:	aa2c      	add	r2, sp, #176	; 0xb0
 800af44:	f003 f87a 	bl	800e03c <__ssprint_r>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d000      	beq.n	800af4e <_svfprintf_r+0x113e>
 800af4c:	e13f      	b.n	800b1ce <_svfprintf_r+0x13be>
 800af4e:	a92f      	add	r1, sp, #188	; 0xbc
 800af50:	000f      	movs	r7, r1
 800af52:	3c10      	subs	r4, #16
 800af54:	e768      	b.n	800ae28 <_svfprintf_r+0x1018>
 800af56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d05d      	beq.n	800b018 <_svfprintf_r+0x1208>
 800af5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af5e:	3b01      	subs	r3, #1
 800af60:	9310      	str	r3, [sp, #64]	; 0x40
 800af62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af6a:	607b      	str	r3, [r7, #4]
 800af6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af6e:	3708      	adds	r7, #8
 800af70:	189b      	adds	r3, r3, r2
 800af72:	932e      	str	r3, [sp, #184]	; 0xb8
 800af74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af76:	3301      	adds	r3, #1
 800af78:	932d      	str	r3, [sp, #180]	; 0xb4
 800af7a:	2b07      	cmp	r3, #7
 800af7c:	dd08      	ble.n	800af90 <_svfprintf_r+0x1180>
 800af7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af82:	aa2c      	add	r2, sp, #176	; 0xb0
 800af84:	f003 f85a 	bl	800e03c <__ssprint_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d000      	beq.n	800af8e <_svfprintf_r+0x117e>
 800af8c:	e11f      	b.n	800b1ce <_svfprintf_r+0x13be>
 800af8e:	af2f      	add	r7, sp, #188	; 0xbc
 800af90:	9b08      	ldr	r3, [sp, #32]
 800af92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af94:	189c      	adds	r4, r3, r2
 800af96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af98:	1b64      	subs	r4, r4, r5
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	429c      	cmp	r4, r3
 800af9e:	dd00      	ble.n	800afa2 <_svfprintf_r+0x1192>
 800afa0:	001c      	movs	r4, r3
 800afa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	dd12      	ble.n	800afce <_svfprintf_r+0x11be>
 800afa8:	18e3      	adds	r3, r4, r3
 800afaa:	932e      	str	r3, [sp, #184]	; 0xb8
 800afac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afae:	603d      	str	r5, [r7, #0]
 800afb0:	3301      	adds	r3, #1
 800afb2:	607c      	str	r4, [r7, #4]
 800afb4:	932d      	str	r3, [sp, #180]	; 0xb4
 800afb6:	3708      	adds	r7, #8
 800afb8:	2b07      	cmp	r3, #7
 800afba:	dd08      	ble.n	800afce <_svfprintf_r+0x11be>
 800afbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800afc2:	f003 f83b 	bl	800e03c <__ssprint_r>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d000      	beq.n	800afcc <_svfprintf_r+0x11bc>
 800afca:	e100      	b.n	800b1ce <_svfprintf_r+0x13be>
 800afcc:	af2f      	add	r7, sp, #188	; 0xbc
 800afce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	43e3      	mvns	r3, r4
 800afd4:	17db      	asrs	r3, r3, #31
 800afd6:	401c      	ands	r4, r3
 800afd8:	1b14      	subs	r4, r2, r4
 800afda:	2c00      	cmp	r4, #0
 800afdc:	dd18      	ble.n	800b010 <_svfprintf_r+0x1200>
 800afde:	0039      	movs	r1, r7
 800afe0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afe2:	48aa      	ldr	r0, [pc, #680]	; (800b28c <_svfprintf_r+0x147c>)
 800afe4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800afe6:	3301      	adds	r3, #1
 800afe8:	3108      	adds	r1, #8
 800afea:	6038      	str	r0, [r7, #0]
 800afec:	2c10      	cmp	r4, #16
 800afee:	dc1a      	bgt.n	800b026 <_svfprintf_r+0x1216>
 800aff0:	1912      	adds	r2, r2, r4
 800aff2:	607c      	str	r4, [r7, #4]
 800aff4:	922e      	str	r2, [sp, #184]	; 0xb8
 800aff6:	000f      	movs	r7, r1
 800aff8:	932d      	str	r3, [sp, #180]	; 0xb4
 800affa:	2b07      	cmp	r3, #7
 800affc:	dd08      	ble.n	800b010 <_svfprintf_r+0x1200>
 800affe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b000:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b002:	aa2c      	add	r2, sp, #176	; 0xb0
 800b004:	f003 f81a 	bl	800e03c <__ssprint_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d000      	beq.n	800b00e <_svfprintf_r+0x11fe>
 800b00c:	e0df      	b.n	800b1ce <_svfprintf_r+0x13be>
 800b00e:	af2f      	add	r7, sp, #188	; 0xbc
 800b010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	18ed      	adds	r5, r5, r3
 800b016:	e724      	b.n	800ae62 <_svfprintf_r+0x1052>
 800b018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b01a:	3b01      	subs	r3, #1
 800b01c:	9312      	str	r3, [sp, #72]	; 0x48
 800b01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b020:	3b01      	subs	r3, #1
 800b022:	9311      	str	r3, [sp, #68]	; 0x44
 800b024:	e79d      	b.n	800af62 <_svfprintf_r+0x1152>
 800b026:	2010      	movs	r0, #16
 800b028:	1812      	adds	r2, r2, r0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	922e      	str	r2, [sp, #184]	; 0xb8
 800b02e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b030:	2b07      	cmp	r3, #7
 800b032:	dd08      	ble.n	800b046 <_svfprintf_r+0x1236>
 800b034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b036:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b038:	aa2c      	add	r2, sp, #176	; 0xb0
 800b03a:	f002 ffff 	bl	800e03c <__ssprint_r>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d000      	beq.n	800b044 <_svfprintf_r+0x1234>
 800b042:	e0c4      	b.n	800b1ce <_svfprintf_r+0x13be>
 800b044:	a92f      	add	r1, sp, #188	; 0xbc
 800b046:	000f      	movs	r7, r1
 800b048:	3c10      	subs	r4, #16
 800b04a:	e7c8      	b.n	800afde <_svfprintf_r+0x11ce>
 800b04c:	3210      	adds	r2, #16
 800b04e:	607d      	str	r5, [r7, #4]
 800b050:	922e      	str	r2, [sp, #184]	; 0xb8
 800b052:	932d      	str	r3, [sp, #180]	; 0xb4
 800b054:	2b07      	cmp	r3, #7
 800b056:	dd08      	ble.n	800b06a <_svfprintf_r+0x125a>
 800b058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b05a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b05c:	aa2c      	add	r2, sp, #176	; 0xb0
 800b05e:	f002 ffed 	bl	800e03c <__ssprint_r>
 800b062:	2800      	cmp	r0, #0
 800b064:	d000      	beq.n	800b068 <_svfprintf_r+0x1258>
 800b066:	e0b2      	b.n	800b1ce <_svfprintf_r+0x13be>
 800b068:	a92f      	add	r1, sp, #188	; 0xbc
 800b06a:	000f      	movs	r7, r1
 800b06c:	3c10      	subs	r4, #16
 800b06e:	e74c      	b.n	800af0a <_svfprintf_r+0x10fa>
 800b070:	003c      	movs	r4, r7
 800b072:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b074:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b078:	3101      	adds	r1, #1
 800b07a:	3301      	adds	r3, #1
 800b07c:	3408      	adds	r4, #8
 800b07e:	2a01      	cmp	r2, #1
 800b080:	dc03      	bgt.n	800b08a <_svfprintf_r+0x127a>
 800b082:	2201      	movs	r2, #1
 800b084:	4216      	tst	r6, r2
 800b086:	d100      	bne.n	800b08a <_svfprintf_r+0x127a>
 800b088:	e07f      	b.n	800b18a <_svfprintf_r+0x137a>
 800b08a:	9a08      	ldr	r2, [sp, #32]
 800b08c:	912e      	str	r1, [sp, #184]	; 0xb8
 800b08e:	603a      	str	r2, [r7, #0]
 800b090:	2201      	movs	r2, #1
 800b092:	932d      	str	r3, [sp, #180]	; 0xb4
 800b094:	607a      	str	r2, [r7, #4]
 800b096:	2b07      	cmp	r3, #7
 800b098:	dd08      	ble.n	800b0ac <_svfprintf_r+0x129c>
 800b09a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b09c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b09e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0a0:	f002 ffcc 	bl	800e03c <__ssprint_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d000      	beq.n	800b0aa <_svfprintf_r+0x129a>
 800b0a8:	e091      	b.n	800b1ce <_svfprintf_r+0x13be>
 800b0aa:	ac2f      	add	r4, sp, #188	; 0xbc
 800b0ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b0ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0b4:	6063      	str	r3, [r4, #4]
 800b0b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b0b8:	3408      	adds	r4, #8
 800b0ba:	189b      	adds	r3, r3, r2
 800b0bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800b0be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b0c4:	2b07      	cmp	r3, #7
 800b0c6:	dd07      	ble.n	800b0d8 <_svfprintf_r+0x12c8>
 800b0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0ce:	f002 ffb5 	bl	800e03c <__ssprint_r>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d17b      	bne.n	800b1ce <_svfprintf_r+0x13be>
 800b0d6:	ac2f      	add	r4, sp, #188	; 0xbc
 800b0d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b0da:	2200      	movs	r2, #0
 800b0dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b0de:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0e4:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b0e6:	1e5d      	subs	r5, r3, #1
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f7f5 f9ad 	bl	8000448 <__aeabi_dcmpeq>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d126      	bne.n	800b140 <_svfprintf_r+0x1330>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	1e7b      	subs	r3, r7, #1
 800b0fe:	3201      	adds	r2, #1
 800b100:	185b      	adds	r3, r3, r1
 800b102:	6065      	str	r5, [r4, #4]
 800b104:	932e      	str	r3, [sp, #184]	; 0xb8
 800b106:	922d      	str	r2, [sp, #180]	; 0xb4
 800b108:	3408      	adds	r4, #8
 800b10a:	2a07      	cmp	r2, #7
 800b10c:	dd07      	ble.n	800b11e <_svfprintf_r+0x130e>
 800b10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b110:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b112:	aa2c      	add	r2, sp, #176	; 0xb0
 800b114:	f002 ff92 	bl	800e03c <__ssprint_r>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d158      	bne.n	800b1ce <_svfprintf_r+0x13be>
 800b11c:	ac2f      	add	r4, sp, #188	; 0xbc
 800b11e:	ab28      	add	r3, sp, #160	; 0xa0
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b124:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b126:	6063      	str	r3, [r4, #4]
 800b128:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b12a:	189b      	adds	r3, r3, r2
 800b12c:	932e      	str	r3, [sp, #184]	; 0xb8
 800b12e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b130:	3301      	adds	r3, #1
 800b132:	932d      	str	r3, [sp, #180]	; 0xb4
 800b134:	2b07      	cmp	r3, #7
 800b136:	dd00      	ble.n	800b13a <_svfprintf_r+0x132a>
 800b138:	e638      	b.n	800adac <_svfprintf_r+0xf9c>
 800b13a:	3408      	adds	r4, #8
 800b13c:	0027      	movs	r7, r4
 800b13e:	e595      	b.n	800ac6c <_svfprintf_r+0xe5c>
 800b140:	2710      	movs	r7, #16
 800b142:	2d00      	cmp	r5, #0
 800b144:	ddeb      	ble.n	800b11e <_svfprintf_r+0x130e>
 800b146:	0021      	movs	r1, r4
 800b148:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b14a:	4850      	ldr	r0, [pc, #320]	; (800b28c <_svfprintf_r+0x147c>)
 800b14c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b14e:	3301      	adds	r3, #1
 800b150:	3108      	adds	r1, #8
 800b152:	6020      	str	r0, [r4, #0]
 800b154:	2d10      	cmp	r5, #16
 800b156:	dc07      	bgt.n	800b168 <_svfprintf_r+0x1358>
 800b158:	6065      	str	r5, [r4, #4]
 800b15a:	000c      	movs	r4, r1
 800b15c:	18ad      	adds	r5, r5, r2
 800b15e:	952e      	str	r5, [sp, #184]	; 0xb8
 800b160:	932d      	str	r3, [sp, #180]	; 0xb4
 800b162:	2b07      	cmp	r3, #7
 800b164:	dddb      	ble.n	800b11e <_svfprintf_r+0x130e>
 800b166:	e7d2      	b.n	800b10e <_svfprintf_r+0x12fe>
 800b168:	3210      	adds	r2, #16
 800b16a:	6067      	str	r7, [r4, #4]
 800b16c:	922e      	str	r2, [sp, #184]	; 0xb8
 800b16e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b170:	2b07      	cmp	r3, #7
 800b172:	dd07      	ble.n	800b184 <_svfprintf_r+0x1374>
 800b174:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b178:	aa2c      	add	r2, sp, #176	; 0xb0
 800b17a:	f002 ff5f 	bl	800e03c <__ssprint_r>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d125      	bne.n	800b1ce <_svfprintf_r+0x13be>
 800b182:	a92f      	add	r1, sp, #188	; 0xbc
 800b184:	000c      	movs	r4, r1
 800b186:	3d10      	subs	r5, #16
 800b188:	e7dd      	b.n	800b146 <_svfprintf_r+0x1336>
 800b18a:	9808      	ldr	r0, [sp, #32]
 800b18c:	912e      	str	r1, [sp, #184]	; 0xb8
 800b18e:	c705      	stmia	r7!, {r0, r2}
 800b190:	932d      	str	r3, [sp, #180]	; 0xb4
 800b192:	e7e6      	b.n	800b162 <_svfprintf_r+0x1352>
 800b194:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b198:	2510      	movs	r5, #16
 800b19a:	1a9c      	subs	r4, r3, r2
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	dc00      	bgt.n	800b1a2 <_svfprintf_r+0x1392>
 800b1a0:	e567      	b.n	800ac72 <_svfprintf_r+0xe62>
 800b1a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b1a4:	493a      	ldr	r1, [pc, #232]	; (800b290 <_svfprintf_r+0x1480>)
 800b1a6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	6039      	str	r1, [r7, #0]
 800b1ac:	2c10      	cmp	r4, #16
 800b1ae:	dc19      	bgt.n	800b1e4 <_svfprintf_r+0x13d4>
 800b1b0:	607c      	str	r4, [r7, #4]
 800b1b2:	18a4      	adds	r4, r4, r2
 800b1b4:	942e      	str	r4, [sp, #184]	; 0xb8
 800b1b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1b8:	2b07      	cmp	r3, #7
 800b1ba:	dc00      	bgt.n	800b1be <_svfprintf_r+0x13ae>
 800b1bc:	e559      	b.n	800ac72 <_svfprintf_r+0xe62>
 800b1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1c2:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1c4:	f002 ff3a 	bl	800e03c <__ssprint_r>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d100      	bne.n	800b1ce <_svfprintf_r+0x13be>
 800b1cc:	e551      	b.n	800ac72 <_svfprintf_r+0xe62>
 800b1ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <_svfprintf_r+0x13c8>
 800b1d4:	f7ff f845 	bl	800a262 <_svfprintf_r+0x452>
 800b1d8:	0019      	movs	r1, r3
 800b1da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1dc:	f7fd fd80 	bl	8008ce0 <_free_r>
 800b1e0:	f7ff f83f 	bl	800a262 <_svfprintf_r+0x452>
 800b1e4:	3210      	adds	r2, #16
 800b1e6:	607d      	str	r5, [r7, #4]
 800b1e8:	922e      	str	r2, [sp, #184]	; 0xb8
 800b1ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	2b07      	cmp	r3, #7
 800b1f0:	dd07      	ble.n	800b202 <_svfprintf_r+0x13f2>
 800b1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1f8:	f002 ff20 	bl	800e03c <__ssprint_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d1e6      	bne.n	800b1ce <_svfprintf_r+0x13be>
 800b200:	af2f      	add	r7, sp, #188	; 0xbc
 800b202:	3c10      	subs	r4, #16
 800b204:	e7cd      	b.n	800b1a2 <_svfprintf_r+0x1392>
 800b206:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b208:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b20a:	f7fd fd69 	bl	8008ce0 <_free_r>
 800b20e:	e549      	b.n	800aca4 <_svfprintf_r+0xe94>
 800b210:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <_svfprintf_r+0x140a>
 800b216:	f7ff f824 	bl	800a262 <_svfprintf_r+0x452>
 800b21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b21c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b21e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b220:	f002 ff0c 	bl	800e03c <__ssprint_r>
 800b224:	f7ff f81d 	bl	800a262 <_svfprintf_r+0x452>
 800b228:	0034      	movs	r4, r6
 800b22a:	2a00      	cmp	r2, #0
 800b22c:	d101      	bne.n	800b232 <_svfprintf_r+0x1422>
 800b22e:	f7fe ff8c 	bl	800a14a <_svfprintf_r+0x33a>
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <_svfprintf_r+0x142a>
 800b236:	f7ff fc01 	bl	800aa3c <_svfprintf_r+0xc2c>
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d100      	bne.n	800b240 <_svfprintf_r+0x1430>
 800b23e:	e459      	b.n	800aaf4 <_svfprintf_r+0xce4>
 800b240:	2507      	movs	r5, #7
 800b242:	ab58      	add	r3, sp, #352	; 0x160
 800b244:	9308      	str	r3, [sp, #32]
 800b246:	9a08      	ldr	r2, [sp, #32]
 800b248:	0013      	movs	r3, r2
 800b24a:	3b01      	subs	r3, #1
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	9b06      	ldr	r3, [sp, #24]
 800b250:	9908      	ldr	r1, [sp, #32]
 800b252:	402b      	ands	r3, r5
 800b254:	3330      	adds	r3, #48	; 0x30
 800b256:	700b      	strb	r3, [r1, #0]
 800b258:	9907      	ldr	r1, [sp, #28]
 800b25a:	074e      	lsls	r6, r1, #29
 800b25c:	9906      	ldr	r1, [sp, #24]
 800b25e:	08c8      	lsrs	r0, r1, #3
 800b260:	9907      	ldr	r1, [sp, #28]
 800b262:	4306      	orrs	r6, r0
 800b264:	08c9      	lsrs	r1, r1, #3
 800b266:	9107      	str	r1, [sp, #28]
 800b268:	0031      	movs	r1, r6
 800b26a:	9807      	ldr	r0, [sp, #28]
 800b26c:	9606      	str	r6, [sp, #24]
 800b26e:	4301      	orrs	r1, r0
 800b270:	d1e9      	bne.n	800b246 <_svfprintf_r+0x1436>
 800b272:	07e1      	lsls	r1, r4, #31
 800b274:	d400      	bmi.n	800b278 <_svfprintf_r+0x1468>
 800b276:	e42a      	b.n	800aace <_svfprintf_r+0xcbe>
 800b278:	2b30      	cmp	r3, #48	; 0x30
 800b27a:	d100      	bne.n	800b27e <_svfprintf_r+0x146e>
 800b27c:	e427      	b.n	800aace <_svfprintf_r+0xcbe>
 800b27e:	2130      	movs	r1, #48	; 0x30
 800b280:	9b08      	ldr	r3, [sp, #32]
 800b282:	3b01      	subs	r3, #1
 800b284:	7019      	strb	r1, [r3, #0]
 800b286:	1e93      	subs	r3, r2, #2
 800b288:	9308      	str	r3, [sp, #32]
 800b28a:	e420      	b.n	800aace <_svfprintf_r+0xcbe>
 800b28c:	0800fa50 	.word	0x0800fa50
 800b290:	0800fa40 	.word	0x0800fa40

0800b294 <__ssvfscanf_r>:
 800b294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b296:	4ca7      	ldr	r4, [pc, #668]	; (800b534 <__ssvfscanf_r+0x2a0>)
 800b298:	44a5      	add	sp, r4
 800b29a:	af02      	add	r7, sp, #8
 800b29c:	633b      	str	r3, [r7, #48]	; 0x30
 800b29e:	000b      	movs	r3, r1
 800b2a0:	6378      	str	r0, [r7, #52]	; 0x34
 800b2a2:	6479      	str	r1, [r7, #68]	; 0x44
 800b2a4:	61ba      	str	r2, [r7, #24]
 800b2a6:	220c      	movs	r2, #12
 800b2a8:	5e9a      	ldrsh	r2, [r3, r2]
 800b2aa:	2380      	movs	r3, #128	; 0x80
 800b2ac:	019b      	lsls	r3, r3, #6
 800b2ae:	421a      	tst	r2, r3
 800b2b0:	d105      	bne.n	800b2be <__ssvfscanf_r+0x2a>
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	818b      	strh	r3, [r1, #12]
 800b2b6:	4aa0      	ldr	r2, [pc, #640]	; (800b538 <__ssvfscanf_r+0x2a4>)
 800b2b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	664b      	str	r3, [r1, #100]	; 0x64
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	3201      	adds	r2, #1
 800b2d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2d6:	61ba      	str	r2, [r7, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d100      	bne.n	800b2de <__ssvfscanf_r+0x4a>
 800b2dc:	e0d7      	b.n	800b48e <__ssvfscanf_r+0x1fa>
 800b2de:	2608      	movs	r6, #8
 800b2e0:	2108      	movs	r1, #8
 800b2e2:	4a96      	ldr	r2, [pc, #600]	; (800b53c <__ssvfscanf_r+0x2a8>)
 800b2e4:	5cd2      	ldrb	r2, [r2, r3]
 800b2e6:	4016      	ands	r6, r2
 800b2e8:	420a      	tst	r2, r1
 800b2ea:	d01d      	beq.n	800b328 <__ssvfscanf_r+0x94>
 800b2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dd12      	ble.n	800b31a <__ssvfscanf_r+0x86>
 800b2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f6:	4991      	ldr	r1, [pc, #580]	; (800b53c <__ssvfscanf_r+0x2a8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	781a      	ldrb	r2, [r3, #0]
 800b2fc:	5c8a      	ldrb	r2, [r1, r2]
 800b2fe:	2108      	movs	r1, #8
 800b300:	420a      	tst	r2, r1
 800b302:	d0e3      	beq.n	800b2cc <__ssvfscanf_r+0x38>
 800b304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b308:	3201      	adds	r2, #1
 800b30a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b30c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b30e:	3301      	adds	r3, #1
 800b310:	6852      	ldr	r2, [r2, #4]
 800b312:	600b      	str	r3, [r1, #0]
 800b314:	3a01      	subs	r2, #1
 800b316:	604a      	str	r2, [r1, #4]
 800b318:	e7e8      	b.n	800b2ec <__ssvfscanf_r+0x58>
 800b31a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b31c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b31e:	f002 ff4d 	bl	800e1bc <__ssrefill_r>
 800b322:	2800      	cmp	r0, #0
 800b324:	d0e6      	beq.n	800b2f4 <__ssvfscanf_r+0x60>
 800b326:	e7d1      	b.n	800b2cc <__ssvfscanf_r+0x38>
 800b328:	2b25      	cmp	r3, #37	; 0x25
 800b32a:	d165      	bne.n	800b3f8 <__ssvfscanf_r+0x164>
 800b32c:	250a      	movs	r5, #10
 800b32e:	2480      	movs	r4, #128	; 0x80
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b334:	3b16      	subs	r3, #22
 800b336:	69b9      	ldr	r1, [r7, #24]
 800b338:	3101      	adds	r1, #1
 800b33a:	61b9      	str	r1, [r7, #24]
 800b33c:	7811      	ldrb	r1, [r2, #0]
 800b33e:	0008      	movs	r0, r1
 800b340:	3825      	subs	r0, #37	; 0x25
 800b342:	2855      	cmp	r0, #85	; 0x55
 800b344:	d900      	bls.n	800b348 <__ssvfscanf_r+0xb4>
 800b346:	e170      	b.n	800b62a <__ssvfscanf_r+0x396>
 800b348:	f7f4 feee 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b34c:	016f0056 	.word	0x016f0056
 800b350:	016f016f 	.word	0x016f016f
 800b354:	0081016f 	.word	0x0081016f
 800b358:	016f016f 	.word	0x016f016f
 800b35c:	016f016f 	.word	0x016f016f
 800b360:	00b8016f 	.word	0x00b8016f
 800b364:	00b800b8 	.word	0x00b800b8
 800b368:	00b800b8 	.word	0x00b800b8
 800b36c:	00b800b8 	.word	0x00b800b8
 800b370:	00b800b8 	.word	0x00b800b8
 800b374:	016f00b8 	.word	0x016f00b8
 800b378:	016f016f 	.word	0x016f016f
 800b37c:	016f016f 	.word	0x016f016f
 800b380:	016f016f 	.word	0x016f016f
 800b384:	016f00d8 	.word	0x016f00d8
 800b388:	00c1010a 	.word	0x00c1010a
 800b38c:	00d800d8 	.word	0x00d800d8
 800b390:	016f00d8 	.word	0x016f00d8
 800b394:	016f016f 	.word	0x016f016f
 800b398:	009f016f 	.word	0x009f016f
 800b39c:	016f016f 	.word	0x016f016f
 800b3a0:	016f00c9 	.word	0x016f00c9
 800b3a4:	016f016f 	.word	0x016f016f
 800b3a8:	016f00f0 	.word	0x016f00f0
 800b3ac:	016f016f 	.word	0x016f016f
 800b3b0:	00d1016f 	.word	0x00d1016f
 800b3b4:	016f016f 	.word	0x016f016f
 800b3b8:	016f00fe 	.word	0x016f00fe
 800b3bc:	016f016f 	.word	0x016f016f
 800b3c0:	016f016f 	.word	0x016f016f
 800b3c4:	016f00d8 	.word	0x016f00d8
 800b3c8:	00c3010c 	.word	0x00c3010c
 800b3cc:	00d800d8 	.word	0x00d800d8
 800b3d0:	009400d8 	.word	0x009400d8
 800b3d4:	009f012f 	.word	0x009f012f
 800b3d8:	0088016f 	.word	0x0088016f
 800b3dc:	011200a9 	.word	0x011200a9
 800b3e0:	011000cb 	.word	0x011000cb
 800b3e4:	016f016f 	.word	0x016f016f
 800b3e8:	00a600f2 	.word	0x00a600f2
 800b3ec:	016f00cf 	.word	0x016f00cf
 800b3f0:	00d1016f 	.word	0x00d1016f
 800b3f4:	00a6016f 	.word	0x00a6016f
 800b3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dd12      	ble.n	800b426 <__ssvfscanf_r+0x192>
 800b400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3a01      	subs	r2, #1
 800b408:	7819      	ldrb	r1, [r3, #0]
 800b40a:	7812      	ldrb	r2, [r2, #0]
 800b40c:	4291      	cmp	r1, r2
 800b40e:	d13e      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b414:	6852      	ldr	r2, [r2, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	600b      	str	r3, [r1, #0]
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	3a01      	subs	r2, #1
 800b41e:	604a      	str	r2, [r1, #4]
 800b420:	3301      	adds	r3, #1
 800b422:	63bb      	str	r3, [r7, #56]	; 0x38
 800b424:	e752      	b.n	800b2cc <__ssvfscanf_r+0x38>
 800b426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b428:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b42a:	f002 fec7 	bl	800e1bc <__ssrefill_r>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0e6      	beq.n	800b400 <__ssvfscanf_r+0x16c>
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <__ssvfscanf_r+0x1ac>
 800b438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43a:	899b      	ldrh	r3, [r3, #12]
 800b43c:	065b      	lsls	r3, r3, #25
 800b43e:	d526      	bpl.n	800b48e <__ssvfscanf_r+0x1fa>
 800b440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b442:	2b00      	cmp	r3, #0
 800b444:	d000      	beq.n	800b448 <__ssvfscanf_r+0x1b4>
 800b446:	e0f6      	b.n	800b636 <__ssvfscanf_r+0x3a2>
 800b448:	3b01      	subs	r3, #1
 800b44a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b44c:	e104      	b.n	800b658 <__ssvfscanf_r+0x3c4>
 800b44e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b450:	4332      	orrs	r2, r6
 800b452:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b454:	d11b      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b456:	2610      	movs	r6, #16
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	e76c      	b.n	800b336 <__ssvfscanf_r+0xa2>
 800b45c:	421e      	tst	r6, r3
 800b45e:	d116      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b460:	7851      	ldrb	r1, [r2, #1]
 800b462:	296c      	cmp	r1, #108	; 0x6c
 800b464:	d103      	bne.n	800b46e <__ssvfscanf_r+0x1da>
 800b466:	3202      	adds	r2, #2
 800b468:	61ba      	str	r2, [r7, #24]
 800b46a:	2202      	movs	r2, #2
 800b46c:	e000      	b.n	800b470 <__ssvfscanf_r+0x1dc>
 800b46e:	2201      	movs	r2, #1
 800b470:	4316      	orrs	r6, r2
 800b472:	e7f1      	b.n	800b458 <__ssvfscanf_r+0x1c4>
 800b474:	421e      	tst	r6, r3
 800b476:	d10a      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b478:	7851      	ldrb	r1, [r2, #1]
 800b47a:	2968      	cmp	r1, #104	; 0x68
 800b47c:	d103      	bne.n	800b486 <__ssvfscanf_r+0x1f2>
 800b47e:	3202      	adds	r2, #2
 800b480:	61ba      	str	r2, [r7, #24]
 800b482:	2208      	movs	r2, #8
 800b484:	e7f4      	b.n	800b470 <__ssvfscanf_r+0x1dc>
 800b486:	2204      	movs	r2, #4
 800b488:	e7f2      	b.n	800b470 <__ssvfscanf_r+0x1dc>
 800b48a:	421e      	tst	r6, r3
 800b48c:	d0ed      	beq.n	800b46a <__ssvfscanf_r+0x1d6>
 800b48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b490:	2b00      	cmp	r3, #0
 800b492:	d000      	beq.n	800b496 <__ssvfscanf_r+0x202>
 800b494:	e0da      	b.n	800b64c <__ssvfscanf_r+0x3b8>
 800b496:	e0df      	b.n	800b658 <__ssvfscanf_r+0x3c4>
 800b498:	421e      	tst	r6, r3
 800b49a:	d0dd      	beq.n	800b458 <__ssvfscanf_r+0x1c4>
 800b49c:	e7f7      	b.n	800b48e <__ssvfscanf_r+0x1fa>
 800b49e:	228f      	movs	r2, #143	; 0x8f
 800b4a0:	218f      	movs	r1, #143	; 0x8f
 800b4a2:	4032      	ands	r2, r6
 800b4a4:	420e      	tst	r6, r1
 800b4a6:	d1f2      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b4a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4aa:	2900      	cmp	r1, #0
 800b4ac:	d104      	bne.n	800b4b8 <__ssvfscanf_r+0x224>
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	a902      	add	r1, sp, #8
 800b4b2:	6439      	str	r1, [r7, #64]	; 0x40
 800b4b4:	600a      	str	r2, [r1, #0]
 800b4b6:	604a      	str	r2, [r1, #4]
 800b4b8:	4326      	orrs	r6, r4
 800b4ba:	e7cd      	b.n	800b458 <__ssvfscanf_r+0x1c4>
 800b4bc:	228f      	movs	r2, #143	; 0x8f
 800b4be:	4216      	tst	r6, r2
 800b4c0:	d1e5      	bne.n	800b48e <__ssvfscanf_r+0x1fa>
 800b4c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4c4:	436a      	muls	r2, r5
 800b4c6:	3a30      	subs	r2, #48	; 0x30
 800b4c8:	188a      	adds	r2, r1, r2
 800b4ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b4cc:	e7c4      	b.n	800b458 <__ssvfscanf_r+0x1c4>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	431e      	orrs	r6, r3
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <__ssvfscanf_r+0x2ac>)
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	230a      	movs	r3, #10
 800b4d8:	2403      	movs	r4, #3
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
 800b4dc:	e00f      	b.n	800b4fe <__ssvfscanf_r+0x26a>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	431e      	orrs	r6, r3
 800b4e2:	4b18      	ldr	r3, [pc, #96]	; (800b544 <__ssvfscanf_r+0x2b0>)
 800b4e4:	617b      	str	r3, [r7, #20]
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	e7f6      	b.n	800b4d8 <__ssvfscanf_r+0x244>
 800b4ea:	4b16      	ldr	r3, [pc, #88]	; (800b544 <__ssvfscanf_r+0x2b0>)
 800b4ec:	e7f2      	b.n	800b4d4 <__ssvfscanf_r+0x240>
 800b4ee:	2380      	movs	r3, #128	; 0x80
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	431e      	orrs	r6, r3
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <__ssvfscanf_r+0x2b0>)
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	e7ed      	b.n	800b4d8 <__ssvfscanf_r+0x244>
 800b4fc:	2404      	movs	r4, #4
 800b4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	dd55      	ble.n	800b5b2 <__ssvfscanf_r+0x31e>
 800b506:	0673      	lsls	r3, r6, #25
 800b508:	d407      	bmi.n	800b51a <__ssvfscanf_r+0x286>
 800b50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b50c:	490b      	ldr	r1, [pc, #44]	; (800b53c <__ssvfscanf_r+0x2a8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	781a      	ldrb	r2, [r3, #0]
 800b512:	5c8a      	ldrb	r2, [r1, r2]
 800b514:	2108      	movs	r1, #8
 800b516:	420a      	tst	r2, r1
 800b518:	d152      	bne.n	800b5c0 <__ssvfscanf_r+0x32c>
 800b51a:	1e60      	subs	r0, r4, #1
 800b51c:	2803      	cmp	r0, #3
 800b51e:	d863      	bhi.n	800b5e8 <__ssvfscanf_r+0x354>
 800b520:	f7f4 fe02 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b524:	03bd01da 	.word	0x03bd01da
 800b528:	068a0579 	.word	0x068a0579
 800b52c:	2301      	movs	r3, #1
 800b52e:	431e      	orrs	r6, r3
 800b530:	2402      	movs	r4, #2
 800b532:	e7e4      	b.n	800b4fe <__ssvfscanf_r+0x26a>
 800b534:	fffffd34 	.word	0xfffffd34
 800b538:	ffffdfff 	.word	0xffffdfff
 800b53c:	0800f739 	.word	0x0800f739
 800b540:	0800874d 	.word	0x0800874d
 800b544:	0800dced 	.word	0x0800dced
 800b548:	2248      	movs	r2, #72	; 0x48
 800b54a:	2318      	movs	r3, #24
 800b54c:	189b      	adds	r3, r3, r2
 800b54e:	19d8      	adds	r0, r3, r7
 800b550:	69b9      	ldr	r1, [r7, #24]
 800b552:	f001 f9d7 	bl	800c904 <__sccl>
 800b556:	2340      	movs	r3, #64	; 0x40
 800b558:	2401      	movs	r4, #1
 800b55a:	61b8      	str	r0, [r7, #24]
 800b55c:	431e      	orrs	r6, r3
 800b55e:	e7ce      	b.n	800b4fe <__ssvfscanf_r+0x26a>
 800b560:	2301      	movs	r3, #1
 800b562:	431e      	orrs	r6, r3
 800b564:	2340      	movs	r3, #64	; 0x40
 800b566:	2400      	movs	r4, #0
 800b568:	431e      	orrs	r6, r3
 800b56a:	e7c8      	b.n	800b4fe <__ssvfscanf_r+0x26a>
 800b56c:	2388      	movs	r3, #136	; 0x88
 800b56e:	e7bf      	b.n	800b4f0 <__ssvfscanf_r+0x25c>
 800b570:	06f3      	lsls	r3, r6, #27
 800b572:	d500      	bpl.n	800b576 <__ssvfscanf_r+0x2e2>
 800b574:	e6aa      	b.n	800b2cc <__ssvfscanf_r+0x38>
 800b576:	2108      	movs	r1, #8
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	cb04      	ldmia	r3!, {r2}
 800b57c:	420e      	tst	r6, r1
 800b57e:	d003      	beq.n	800b588 <__ssvfscanf_r+0x2f4>
 800b580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b582:	7011      	strb	r1, [r2, #0]
 800b584:	633b      	str	r3, [r7, #48]	; 0x30
 800b586:	e6a1      	b.n	800b2cc <__ssvfscanf_r+0x38>
 800b588:	0771      	lsls	r1, r6, #29
 800b58a:	d502      	bpl.n	800b592 <__ssvfscanf_r+0x2fe>
 800b58c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b58e:	8011      	strh	r1, [r2, #0]
 800b590:	e7f8      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800b592:	07f1      	lsls	r1, r6, #31
 800b594:	d502      	bpl.n	800b59c <__ssvfscanf_r+0x308>
 800b596:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b598:	6011      	str	r1, [r2, #0]
 800b59a:	e7f3      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800b59c:	07b6      	lsls	r6, r6, #30
 800b59e:	d5fa      	bpl.n	800b596 <__ssvfscanf_r+0x302>
 800b5a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5a2:	6011      	str	r1, [r2, #0]
 800b5a4:	17c9      	asrs	r1, r1, #31
 800b5a6:	6051      	str	r1, [r2, #4]
 800b5a8:	e7ec      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800b5aa:	4ba2      	ldr	r3, [pc, #648]	; (800b834 <__ssvfscanf_r+0x5a0>)
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e792      	b.n	800b4d8 <__ssvfscanf_r+0x244>
 800b5b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5b6:	f002 fe01 	bl	800e1bc <__ssrefill_r>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d0a3      	beq.n	800b506 <__ssvfscanf_r+0x272>
 800b5be:	e738      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5c4:	3201      	adds	r2, #1
 800b5c6:	63ba      	str	r2, [r7, #56]	; 0x38
 800b5c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5ca:	6852      	ldr	r2, [r2, #4]
 800b5cc:	3a01      	subs	r2, #1
 800b5ce:	604a      	str	r2, [r1, #4]
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	dd02      	ble.n	800b5da <__ssvfscanf_r+0x346>
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	600b      	str	r3, [r1, #0]
 800b5d8:	e797      	b.n	800b50a <__ssvfscanf_r+0x276>
 800b5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5de:	f002 fded 	bl	800e1bc <__ssrefill_r>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d091      	beq.n	800b50a <__ssvfscanf_r+0x276>
 800b5e6:	e724      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b5e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	d100      	bne.n	800b5f2 <__ssvfscanf_r+0x35e>
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5f2:	2210      	movs	r2, #16
 800b5f4:	0034      	movs	r4, r6
 800b5f6:	4032      	ands	r2, r6
 800b5f8:	623a      	str	r2, [r7, #32]
 800b5fa:	401c      	ands	r4, r3
 800b5fc:	421e      	tst	r6, r3
 800b5fe:	d100      	bne.n	800b602 <__ssvfscanf_r+0x36e>
 800b600:	e0f3      	b.n	800b7ea <__ssvfscanf_r+0x556>
 800b602:	2a00      	cmp	r2, #0
 800b604:	d000      	beq.n	800b608 <__ssvfscanf_r+0x374>
 800b606:	e0b6      	b.n	800b776 <__ssvfscanf_r+0x4e2>
 800b608:	2080      	movs	r0, #128	; 0x80
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	cb10      	ldmia	r3!, {r4}
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	4206      	tst	r6, r0
 800b612:	d100      	bne.n	800b616 <__ssvfscanf_r+0x382>
 800b614:	e0b7      	b.n	800b786 <__ssvfscanf_r+0x4f2>
 800b616:	2c00      	cmp	r4, #0
 800b618:	d007      	beq.n	800b62a <__ssvfscanf_r+0x396>
 800b61a:	f7fb ffaf 	bl	800757c <malloc>
 800b61e:	6338      	str	r0, [r7, #48]	; 0x30
 800b620:	2800      	cmp	r0, #0
 800b622:	d11f      	bne.n	800b664 <__ssvfscanf_r+0x3d0>
 800b624:	2301      	movs	r3, #1
 800b626:	425b      	negs	r3, r3
 800b628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d013      	beq.n	800b658 <__ssvfscanf_r+0x3c4>
 800b630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b632:	3301      	adds	r3, #1
 800b634:	d10a      	bne.n	800b64c <__ssvfscanf_r+0x3b8>
 800b636:	2400      	movs	r4, #0
 800b638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63a:	681d      	ldr	r5, [r3, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	42a3      	cmp	r3, r4
 800b640:	dd01      	ble.n	800b646 <__ssvfscanf_r+0x3b2>
 800b642:	f001 f82a 	bl	800c69a <__ssvfscanf_r+0x1406>
 800b646:	2301      	movs	r3, #1
 800b648:	425b      	negs	r3, r3
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	2800      	cmp	r0, #0
 800b652:	d001      	beq.n	800b658 <__ssvfscanf_r+0x3c4>
 800b654:	f7fb ff9c 	bl	8007590 <free>
 800b658:	46bd      	mov	sp, r7
 800b65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b65c:	23b1      	movs	r3, #177	; 0xb1
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	449d      	add	sp, r3
 800b662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66a:	88de      	ldrh	r6, [r3, #6]
 800b66c:	889d      	ldrh	r5, [r3, #4]
 800b66e:	42ae      	cmp	r6, r5
 800b670:	d30e      	bcc.n	800b690 <__ssvfscanf_r+0x3fc>
 800b672:	4b71      	ldr	r3, [pc, #452]	; (800b838 <__ssvfscanf_r+0x5a4>)
 800b674:	429d      	cmp	r5, r3
 800b676:	d8d5      	bhi.n	800b624 <__ssvfscanf_r+0x390>
 800b678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67a:	3508      	adds	r5, #8
 800b67c:	b2ad      	uxth	r5, r5
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	00a9      	lsls	r1, r5, #2
 800b682:	f002 f901 	bl	800d888 <realloc>
 800b686:	2800      	cmp	r0, #0
 800b688:	d0cc      	beq.n	800b624 <__ssvfscanf_r+0x390>
 800b68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b68c:	6018      	str	r0, [r3, #0]
 800b68e:	809d      	strh	r5, [r3, #4]
 800b690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b692:	1c72      	adds	r2, r6, #1
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	00b6      	lsls	r6, r6, #2
 800b698:	50f4      	str	r4, [r6, r3]
 800b69a:	2320      	movs	r3, #32
 800b69c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b69e:	0026      	movs	r6, r4
 800b6a0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b6a2:	80ca      	strh	r2, [r1, #6]
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	f7fd f9fe 	bl	8008aa8 <__locale_mb_cur_max>
 800b6ac:	42a8      	cmp	r0, r5
 800b6ae:	d100      	bne.n	800b6b2 <__ssvfscanf_r+0x41e>
 800b6b0:	e6bf      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b6b2:	1c6a      	adds	r2, r5, #1
 800b6b4:	60fa      	str	r2, [r7, #12]
 800b6b6:	228c      	movs	r2, #140	; 0x8c
 800b6b8:	2048      	movs	r0, #72	; 0x48
 800b6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6bc:	0052      	lsls	r2, r2, #1
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	1812      	adds	r2, r2, r0
 800b6c2:	7819      	ldrb	r1, [r3, #0]
 800b6c4:	19d2      	adds	r2, r2, r7
 800b6c6:	5551      	strb	r1, [r2, r5]
 800b6c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6cc:	6852      	ldr	r2, [r2, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	600b      	str	r3, [r1, #0]
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	604a      	str	r2, [r1, #4]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d102      	bne.n	800b6e2 <__ssvfscanf_r+0x44e>
 800b6dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d007      	beq.n	800b6f2 <__ssvfscanf_r+0x45e>
 800b6e2:	2048      	movs	r0, #72	; 0x48
 800b6e4:	2310      	movs	r3, #16
 800b6e6:	181b      	adds	r3, r3, r0
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	19d8      	adds	r0, r3, r7
 800b6ee:	f7fd f997 	bl	8008a20 <memset>
 800b6f2:	2148      	movs	r1, #72	; 0x48
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	228c      	movs	r2, #140	; 0x8c
 800b6f8:	185b      	adds	r3, r3, r1
 800b6fa:	0052      	lsls	r2, r2, #1
 800b6fc:	19db      	adds	r3, r3, r7
 800b6fe:	1852      	adds	r2, r2, r1
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	0021      	movs	r1, r4
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b708:	19d2      	adds	r2, r2, r7
 800b70a:	f002 fc57 	bl	800dfbc <_mbrtowc_r>
 800b70e:	0003      	movs	r3, r0
 800b710:	62b8      	str	r0, [r7, #40]	; 0x28
 800b712:	3301      	adds	r3, #1
 800b714:	d100      	bne.n	800b718 <__ssvfscanf_r+0x484>
 800b716:	e68c      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d139      	bne.n	800b790 <__ssvfscanf_r+0x4fc>
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d100      	bne.n	800b724 <__ssvfscanf_r+0x490>
 800b722:	6023      	str	r3, [r4, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	4694      	mov	ip, r2
 800b72a:	4463      	add	r3, ip
 800b72c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	2b03      	cmp	r3, #3
 800b732:	d102      	bne.n	800b73a <__ssvfscanf_r+0x4a6>
 800b734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b736:	2b04      	cmp	r3, #4
 800b738:	d002      	beq.n	800b740 <__ssvfscanf_r+0x4ac>
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	3b01      	subs	r3, #1
 800b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d115      	bne.n	800b772 <__ssvfscanf_r+0x4de>
 800b746:	2e00      	cmp	r6, #0
 800b748:	d012      	beq.n	800b770 <__ssvfscanf_r+0x4dc>
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	69fa      	ldr	r2, [r7, #28]
 800b74e:	1ae5      	subs	r5, r4, r3
 800b750:	10ab      	asrs	r3, r5, #2
 800b752:	4293      	cmp	r3, r2
 800b754:	d30c      	bcc.n	800b770 <__ssvfscanf_r+0x4dc>
 800b756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b758:	00d1      	lsls	r1, r2, #3
 800b75a:	f002 f895 	bl	800d888 <realloc>
 800b75e:	6338      	str	r0, [r7, #48]	; 0x30
 800b760:	2800      	cmp	r0, #0
 800b762:	d100      	bne.n	800b766 <__ssvfscanf_r+0x4d2>
 800b764:	e75e      	b.n	800b624 <__ssvfscanf_r+0x390>
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	1944      	adds	r4, r0, r5
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	6030      	str	r0, [r6, #0]
 800b76e:	61fb      	str	r3, [r7, #28]
 800b770:	3404      	adds	r4, #4
 800b772:	2500      	movs	r5, #0
 800b774:	e010      	b.n	800b798 <__ssvfscanf_r+0x504>
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	613b      	str	r3, [r7, #16]
 800b77a:	2300      	movs	r3, #0
 800b77c:	001e      	movs	r6, r3
 800b77e:	001c      	movs	r4, r3
 800b780:	61fb      	str	r3, [r7, #28]
 800b782:	633b      	str	r3, [r7, #48]	; 0x30
 800b784:	e78f      	b.n	800b6a6 <__ssvfscanf_r+0x412>
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	001e      	movs	r6, r3
 800b78a:	61fb      	str	r3, [r7, #28]
 800b78c:	633b      	str	r3, [r7, #48]	; 0x30
 800b78e:	e78a      	b.n	800b6a6 <__ssvfscanf_r+0x412>
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	68fd      	ldr	r5, [r7, #12]
 800b794:	3302      	adds	r3, #2
 800b796:	d1c5      	bne.n	800b724 <__ssvfscanf_r+0x490>
 800b798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dc12      	bgt.n	800b7c6 <__ssvfscanf_r+0x532>
 800b7a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7a4:	f002 fd0a 	bl	800e1bc <__ssrefill_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d00c      	beq.n	800b7c6 <__ssvfscanf_r+0x532>
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	d000      	beq.n	800b7b2 <__ssvfscanf_r+0x51e>
 800b7b0:	e63f      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d10c      	bne.n	800b7d0 <__ssvfscanf_r+0x53c>
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	425a      	negs	r2, r3
 800b7ba:	4153      	adcs	r3, r2
 800b7bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7be:	18d3      	adds	r3, r2, r3
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	e6de      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d000      	beq.n	800b7ce <__ssvfscanf_r+0x53a>
 800b7cc:	e76c      	b.n	800b6a8 <__ssvfscanf_r+0x414>
 800b7ce:	e7f0      	b.n	800b7b2 <__ssvfscanf_r+0x51e>
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	69fa      	ldr	r2, [r7, #28]
 800b7d4:	1ae1      	subs	r1, r4, r3
 800b7d6:	108b      	asrs	r3, r1, #2
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d9ec      	bls.n	800b7b6 <__ssvfscanf_r+0x522>
 800b7dc:	6830      	ldr	r0, [r6, #0]
 800b7de:	f002 f853 	bl	800d888 <realloc>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d0e7      	beq.n	800b7b6 <__ssvfscanf_r+0x522>
 800b7e6:	6030      	str	r0, [r6, #0]
 800b7e8:	e7e5      	b.n	800b7b6 <__ssvfscanf_r+0x522>
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d025      	beq.n	800b83c <__ssvfscanf_r+0x5a8>
 800b7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	dd11      	ble.n	800b822 <__ssvfscanf_r+0x58e>
 800b7fe:	1ac9      	subs	r1, r1, r3
 800b800:	18d2      	adds	r2, r2, r3
 800b802:	18e4      	adds	r4, r4, r3
 800b804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b806:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b808:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b80a:	0019      	movs	r1, r3
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	f002 fcd5 	bl	800e1bc <__ssrefill_r>
 800b812:	2800      	cmp	r0, #0
 800b814:	d0ec      	beq.n	800b7f0 <__ssvfscanf_r+0x55c>
 800b816:	2c00      	cmp	r4, #0
 800b818:	d100      	bne.n	800b81c <__ssvfscanf_r+0x588>
 800b81a:	e60a      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	191b      	adds	r3, r3, r4
 800b820:	e5ff      	b.n	800b422 <__ssvfscanf_r+0x18e>
 800b822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b824:	1a5b      	subs	r3, r3, r1
 800b826:	1864      	adds	r4, r4, r1
 800b828:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b82a:	604b      	str	r3, [r1, #4]
 800b82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b82e:	18d2      	adds	r2, r2, r3
 800b830:	600a      	str	r2, [r1, #0]
 800b832:	e7f3      	b.n	800b81c <__ssvfscanf_r+0x588>
 800b834:	0800874d 	.word	0x0800874d
 800b838:	0000fff6 	.word	0x0000fff6
 800b83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83e:	0034      	movs	r4, r6
 800b840:	cb20      	ldmia	r3!, {r5}
 800b842:	633b      	str	r3, [r7, #48]	; 0x30
 800b844:	2380      	movs	r3, #128	; 0x80
 800b846:	401c      	ands	r4, r3
 800b848:	421e      	tst	r6, r3
 800b84a:	d028      	beq.n	800b89e <__ssvfscanf_r+0x60a>
 800b84c:	2d00      	cmp	r5, #0
 800b84e:	d100      	bne.n	800b852 <__ssvfscanf_r+0x5be>
 800b850:	e61d      	b.n	800b48e <__ssvfscanf_r+0x1fa>
 800b852:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b854:	f7fb fe92 	bl	800757c <malloc>
 800b858:	6238      	str	r0, [r7, #32]
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d100      	bne.n	800b860 <__ssvfscanf_r+0x5cc>
 800b85e:	e5ef      	b.n	800b440 <__ssvfscanf_r+0x1ac>
 800b860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b862:	6028      	str	r0, [r5, #0]
 800b864:	88de      	ldrh	r6, [r3, #6]
 800b866:	889c      	ldrh	r4, [r3, #4]
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	42a6      	cmp	r6, r4
 800b86c:	d30e      	bcc.n	800b88c <__ssvfscanf_r+0x5f8>
 800b86e:	4bbf      	ldr	r3, [pc, #764]	; (800bb6c <__ssvfscanf_r+0x8d8>)
 800b870:	429c      	cmp	r4, r3
 800b872:	d900      	bls.n	800b876 <__ssvfscanf_r+0x5e2>
 800b874:	e6df      	b.n	800b636 <__ssvfscanf_r+0x3a2>
 800b876:	3408      	adds	r4, #8
 800b878:	b2a4      	uxth	r4, r4
 800b87a:	00a1      	lsls	r1, r4, #2
 800b87c:	f002 f804 	bl	800d888 <realloc>
 800b880:	2800      	cmp	r0, #0
 800b882:	d100      	bne.n	800b886 <__ssvfscanf_r+0x5f2>
 800b884:	e6d7      	b.n	800b636 <__ssvfscanf_r+0x3a2>
 800b886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b888:	6018      	str	r0, [r3, #0]
 800b88a:	809c      	strh	r4, [r3, #4]
 800b88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b88e:	1c72      	adds	r2, r6, #1
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b894:	00b6      	lsls	r6, r6, #2
 800b896:	002c      	movs	r4, r5
 800b898:	50f5      	str	r5, [r6, r3]
 800b89a:	6a3d      	ldr	r5, [r7, #32]
 800b89c:	80ca      	strh	r2, [r1, #6]
 800b89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a0:	0029      	movs	r1, r5
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8aa:	f002 fca6 	bl	800e1fa <_sfread_r>
 800b8ae:	1e05      	subs	r5, r0, #0
 800b8b0:	d100      	bne.n	800b8b4 <__ssvfscanf_r+0x620>
 800b8b2:	e5be      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b8b4:	2c00      	cmp	r4, #0
 800b8b6:	d009      	beq.n	800b8cc <__ssvfscanf_r+0x638>
 800b8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ba:	4283      	cmp	r3, r0
 800b8bc:	d906      	bls.n	800b8cc <__ssvfscanf_r+0x638>
 800b8be:	0001      	movs	r1, r0
 800b8c0:	6820      	ldr	r0, [r4, #0]
 800b8c2:	f001 ffe1 	bl	800d888 <realloc>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d000      	beq.n	800b8cc <__ssvfscanf_r+0x638>
 800b8ca:	6020      	str	r0, [r4, #0]
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	195b      	adds	r3, r3, r5
 800b8d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	e4f8      	b.n	800b2ca <__ssvfscanf_r+0x36>
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <__ssvfscanf_r+0x64e>
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e2:	2210      	movs	r2, #16
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	0034      	movs	r4, r6
 800b8e8:	4032      	ands	r2, r6
 800b8ea:	401c      	ands	r4, r3
 800b8ec:	623a      	str	r2, [r7, #32]
 800b8ee:	421e      	tst	r6, r3
 800b8f0:	d100      	bne.n	800b8f4 <__ssvfscanf_r+0x660>
 800b8f2:	e116      	b.n	800bb22 <__ssvfscanf_r+0x88e>
 800b8f4:	2a00      	cmp	r2, #0
 800b8f6:	d000      	beq.n	800b8fa <__ssvfscanf_r+0x666>
 800b8f8:	e0b0      	b.n	800ba5c <__ssvfscanf_r+0x7c8>
 800b8fa:	2080      	movs	r0, #128	; 0x80
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	cb10      	ldmia	r3!, {r4}
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	4206      	tst	r6, r0
 800b904:	d100      	bne.n	800b908 <__ssvfscanf_r+0x674>
 800b906:	e0b2      	b.n	800ba6e <__ssvfscanf_r+0x7da>
 800b908:	2c00      	cmp	r4, #0
 800b90a:	d100      	bne.n	800b90e <__ssvfscanf_r+0x67a>
 800b90c:	e68d      	b.n	800b62a <__ssvfscanf_r+0x396>
 800b90e:	f7fb fe35 	bl	800757c <malloc>
 800b912:	6338      	str	r0, [r7, #48]	; 0x30
 800b914:	2800      	cmp	r0, #0
 800b916:	d100      	bne.n	800b91a <__ssvfscanf_r+0x686>
 800b918:	e684      	b.n	800b624 <__ssvfscanf_r+0x390>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b920:	88de      	ldrh	r6, [r3, #6]
 800b922:	889d      	ldrh	r5, [r3, #4]
 800b924:	42ae      	cmp	r6, r5
 800b926:	d310      	bcc.n	800b94a <__ssvfscanf_r+0x6b6>
 800b928:	4b90      	ldr	r3, [pc, #576]	; (800bb6c <__ssvfscanf_r+0x8d8>)
 800b92a:	429d      	cmp	r5, r3
 800b92c:	d900      	bls.n	800b930 <__ssvfscanf_r+0x69c>
 800b92e:	e679      	b.n	800b624 <__ssvfscanf_r+0x390>
 800b930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b932:	3508      	adds	r5, #8
 800b934:	b2ad      	uxth	r5, r5
 800b936:	6818      	ldr	r0, [r3, #0]
 800b938:	00a9      	lsls	r1, r5, #2
 800b93a:	f001 ffa5 	bl	800d888 <realloc>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d100      	bne.n	800b944 <__ssvfscanf_r+0x6b0>
 800b942:	e66f      	b.n	800b624 <__ssvfscanf_r+0x390>
 800b944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b946:	6018      	str	r0, [r3, #0]
 800b948:	809d      	strh	r5, [r3, #4]
 800b94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b94c:	1c72      	adds	r2, r6, #1
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	00b6      	lsls	r6, r6, #2
 800b952:	50f4      	str	r4, [r6, r3]
 800b954:	2320      	movs	r3, #32
 800b956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b958:	0026      	movs	r6, r4
 800b95a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b95c:	80ca      	strh	r2, [r1, #6]
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	2500      	movs	r5, #0
 800b962:	f7fd f8a1 	bl	8008aa8 <__locale_mb_cur_max>
 800b966:	42a8      	cmp	r0, r5
 800b968:	d100      	bne.n	800b96c <__ssvfscanf_r+0x6d8>
 800b96a:	e562      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b96c:	1c6a      	adds	r2, r5, #1
 800b96e:	61fa      	str	r2, [r7, #28]
 800b970:	228c      	movs	r2, #140	; 0x8c
 800b972:	2048      	movs	r0, #72	; 0x48
 800b974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b976:	0052      	lsls	r2, r2, #1
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	1812      	adds	r2, r2, r0
 800b97c:	7819      	ldrb	r1, [r3, #0]
 800b97e:	19d2      	adds	r2, r2, r7
 800b980:	5551      	strb	r1, [r2, r5]
 800b982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b984:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b986:	6852      	ldr	r2, [r2, #4]
 800b988:	3301      	adds	r3, #1
 800b98a:	600b      	str	r3, [r1, #0]
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	3a01      	subs	r2, #1
 800b990:	604a      	str	r2, [r1, #4]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d102      	bne.n	800b99c <__ssvfscanf_r+0x708>
 800b996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d006      	beq.n	800b9aa <__ssvfscanf_r+0x716>
 800b99c:	2048      	movs	r0, #72	; 0x48
 800b99e:	2208      	movs	r2, #8
 800b9a0:	1813      	adds	r3, r2, r0
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	19d8      	adds	r0, r3, r7
 800b9a6:	f7fd f83b 	bl	8008a20 <memset>
 800b9aa:	2148      	movs	r1, #72	; 0x48
 800b9ac:	2308      	movs	r3, #8
 800b9ae:	228c      	movs	r2, #140	; 0x8c
 800b9b0:	185b      	adds	r3, r3, r1
 800b9b2:	0052      	lsls	r2, r2, #1
 800b9b4:	19db      	adds	r3, r3, r7
 800b9b6:	1852      	adds	r2, r2, r1
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	0021      	movs	r1, r4
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9c0:	19d2      	adds	r2, r2, r7
 800b9c2:	f002 fafb 	bl	800dfbc <_mbrtowc_r>
 800b9c6:	0003      	movs	r3, r0
 800b9c8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	d100      	bne.n	800b9d0 <__ssvfscanf_r+0x73c>
 800b9ce:	e530      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d151      	bne.n	800ba78 <__ssvfscanf_r+0x7e4>
 800b9d4:	6020      	str	r0, [r4, #0]
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	6825      	ldr	r5, [r4, #0]
 800b9da:	425b      	negs	r3, r3
 800b9dc:	1c6a      	adds	r2, r5, #1
 800b9de:	d01a      	beq.n	800ba16 <__ssvfscanf_r+0x782>
 800b9e0:	2048      	movs	r0, #72	; 0x48
 800b9e2:	3311      	adds	r3, #17
 800b9e4:	181b      	adds	r3, r3, r0
 800b9e6:	2208      	movs	r2, #8
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	19d8      	adds	r0, r3, r7
 800b9ec:	f7fd f818 	bl	8008a20 <memset>
 800b9f0:	4b5f      	ldr	r3, [pc, #380]	; (800bb70 <__ssvfscanf_r+0x8dc>)
 800b9f2:	2148      	movs	r1, #72	; 0x48
 800b9f4:	33e0      	adds	r3, #224	; 0xe0
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	2310      	movs	r3, #16
 800b9fa:	4694      	mov	ip, r2
 800b9fc:	185b      	adds	r3, r3, r1
 800b9fe:	002a      	movs	r2, r5
 800ba00:	19db      	adds	r3, r3, r7
 800ba02:	4665      	mov	r5, ip
 800ba04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba06:	1879      	adds	r1, r7, r1
 800ba08:	47a8      	blx	r5
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	2801      	cmp	r0, #1
 800ba0e:	d102      	bne.n	800ba16 <__ssvfscanf_r+0x782>
 800ba10:	3348      	adds	r3, #72	; 0x48
 800ba12:	18fb      	adds	r3, r7, r3
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2218      	movs	r2, #24
 800ba18:	2148      	movs	r1, #72	; 0x48
 800ba1a:	1852      	adds	r2, r2, r1
 800ba1c:	19d2      	adds	r2, r2, r7
 800ba1e:	5cd3      	ldrb	r3, [r2, r3]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d149      	bne.n	800bab8 <__ssvfscanf_r+0x824>
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d137      	bne.n	800ba9a <__ssvfscanf_r+0x806>
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d113      	bne.n	800ba58 <__ssvfscanf_r+0x7c4>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	2e00      	cmp	r6, #0
 800ba34:	d00d      	beq.n	800ba52 <__ssvfscanf_r+0x7be>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	1ae4      	subs	r4, r4, r3
 800ba3c:	10a3      	asrs	r3, r4, #2
 800ba3e:	3301      	adds	r3, #1
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d906      	bls.n	800ba52 <__ssvfscanf_r+0x7be>
 800ba44:	6830      	ldr	r0, [r6, #0]
 800ba46:	1d21      	adds	r1, r4, #4
 800ba48:	f001 ff1e 	bl	800d888 <realloc>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d000      	beq.n	800ba52 <__ssvfscanf_r+0x7be>
 800ba50:	6030      	str	r0, [r6, #0]
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	3301      	adds	r3, #1
 800ba56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	e593      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	2300      	movs	r3, #0
 800ba62:	001e      	movs	r6, r3
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	633b      	str	r3, [r7, #48]	; 0x30
 800ba68:	334c      	adds	r3, #76	; 0x4c
 800ba6a:	18fc      	adds	r4, r7, r3
 800ba6c:	e778      	b.n	800b960 <__ssvfscanf_r+0x6cc>
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	001e      	movs	r6, r3
 800ba72:	613b      	str	r3, [r7, #16]
 800ba74:	633b      	str	r3, [r7, #48]	; 0x30
 800ba76:	e773      	b.n	800b960 <__ssvfscanf_r+0x6cc>
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	69fd      	ldr	r5, [r7, #28]
 800ba7c:	3302      	adds	r3, #2
 800ba7e:	d1aa      	bne.n	800b9d6 <__ssvfscanf_r+0x742>
 800ba80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dc47      	bgt.n	800bb18 <__ssvfscanf_r+0x884>
 800ba88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba8c:	f002 fb96 	bl	800e1bc <__ssrefill_r>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d041      	beq.n	800bb18 <__ssvfscanf_r+0x884>
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	d0c8      	beq.n	800ba2a <__ssvfscanf_r+0x796>
 800ba98:	e4cb      	b.n	800b432 <__ssvfscanf_r+0x19e>
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	2248      	movs	r2, #72	; 0x48
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	238c      	movs	r3, #140	; 0x8c
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	189b      	adds	r3, r3, r2
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	19db      	adds	r3, r3, r7
 800baac:	5cd1      	ldrb	r1, [r2, r3]
 800baae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab2:	f002 fb47 	bl	800e144 <_sungetc_r>
 800bab6:	e7b5      	b.n	800ba24 <__ssvfscanf_r+0x790>
 800bab8:	69fa      	ldr	r2, [r7, #28]
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	4694      	mov	ip, r2
 800babe:	4463      	add	r3, ip
 800bac0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	d102      	bne.n	800bace <__ssvfscanf_r+0x83a>
 800bac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baca:	2b04      	cmp	r3, #4
 800bacc:	d002      	beq.n	800bad4 <__ssvfscanf_r+0x840>
 800bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad0:	3b01      	subs	r3, #1
 800bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d11a      	bne.n	800bb10 <__ssvfscanf_r+0x87c>
 800bada:	3404      	adds	r4, #4
 800badc:	2e00      	cmp	r6, #0
 800bade:	d019      	beq.n	800bb14 <__ssvfscanf_r+0x880>
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	1ae3      	subs	r3, r4, r3
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	6a3d      	ldr	r5, [r7, #32]
 800baea:	109b      	asrs	r3, r3, #2
 800baec:	4293      	cmp	r3, r2
 800baee:	d3c7      	bcc.n	800ba80 <__ssvfscanf_r+0x7ec>
 800baf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf2:	00d1      	lsls	r1, r2, #3
 800baf4:	f001 fec8 	bl	800d888 <realloc>
 800baf8:	6338      	str	r0, [r7, #48]	; 0x30
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d100      	bne.n	800bb00 <__ssvfscanf_r+0x86c>
 800bafe:	e591      	b.n	800b624 <__ssvfscanf_r+0x390>
 800bb00:	4684      	mov	ip, r0
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	69fc      	ldr	r4, [r7, #28]
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	4464      	add	r4, ip
 800bb0a:	6030      	str	r0, [r6, #0]
 800bb0c:	613b      	str	r3, [r7, #16]
 800bb0e:	e7b7      	b.n	800ba80 <__ssvfscanf_r+0x7ec>
 800bb10:	2500      	movs	r5, #0
 800bb12:	e7b5      	b.n	800ba80 <__ssvfscanf_r+0x7ec>
 800bb14:	0035      	movs	r5, r6
 800bb16:	e7b3      	b.n	800ba80 <__ssvfscanf_r+0x7ec>
 800bb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d000      	beq.n	800bb20 <__ssvfscanf_r+0x88c>
 800bb1e:	e720      	b.n	800b962 <__ssvfscanf_r+0x6ce>
 800bb20:	e783      	b.n	800ba2a <__ssvfscanf_r+0x796>
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d025      	beq.n	800bb74 <__ssvfscanf_r+0x8e0>
 800bb28:	2118      	movs	r1, #24
 800bb2a:	2048      	movs	r0, #72	; 0x48
 800bb2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb2e:	1809      	adds	r1, r1, r0
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	19c9      	adds	r1, r1, r7
 800bb34:	781a      	ldrb	r2, [r3, #0]
 800bb36:	5c8a      	ldrb	r2, [r1, r2]
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	d103      	bne.n	800bb44 <__ssvfscanf_r+0x8b0>
 800bb3c:	2c00      	cmp	r4, #0
 800bb3e:	d000      	beq.n	800bb42 <__ssvfscanf_r+0x8ae>
 800bb40:	e66c      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bb42:	e4a4      	b.n	800b48e <__ssvfscanf_r+0x1fa>
 800bb44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb48:	6852      	ldr	r2, [r2, #4]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	600b      	str	r3, [r1, #0]
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	3a01      	subs	r2, #1
 800bb52:	3401      	adds	r4, #1
 800bb54:	604a      	str	r2, [r1, #4]
 800bb56:	429c      	cmp	r4, r3
 800bb58:	d100      	bne.n	800bb5c <__ssvfscanf_r+0x8c8>
 800bb5a:	e65f      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	dce3      	bgt.n	800bb28 <__ssvfscanf_r+0x894>
 800bb60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb62:	f002 fb2b 	bl	800e1bc <__ssrefill_r>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d0de      	beq.n	800bb28 <__ssvfscanf_r+0x894>
 800bb6a:	e657      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bb6c:	0000fff6 	.word	0x0000fff6
 800bb70:	20000430 	.word	0x20000430
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	0032      	movs	r2, r6
 800bb78:	cb20      	ldmia	r3!, {r5}
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	2380      	movs	r3, #128	; 0x80
 800bb7e:	401a      	ands	r2, r3
 800bb80:	421e      	tst	r6, r3
 800bb82:	d100      	bne.n	800bb86 <__ssvfscanf_r+0x8f2>
 800bb84:	e086      	b.n	800bc94 <__ssvfscanf_r+0xa00>
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	d100      	bne.n	800bb8c <__ssvfscanf_r+0x8f8>
 800bb8a:	e480      	b.n	800b48e <__ssvfscanf_r+0x1fa>
 800bb8c:	2020      	movs	r0, #32
 800bb8e:	f7fb fcf5 	bl	800757c <malloc>
 800bb92:	6338      	str	r0, [r7, #48]	; 0x30
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d100      	bne.n	800bb9a <__ssvfscanf_r+0x906>
 800bb98:	e452      	b.n	800b440 <__ssvfscanf_r+0x1ac>
 800bb9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb9c:	6028      	str	r0, [r5, #0]
 800bb9e:	88de      	ldrh	r6, [r3, #6]
 800bba0:	889c      	ldrh	r4, [r3, #4]
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	42a6      	cmp	r6, r4
 800bba6:	d30e      	bcc.n	800bbc6 <__ssvfscanf_r+0x932>
 800bba8:	4bc3      	ldr	r3, [pc, #780]	; (800beb8 <__ssvfscanf_r+0xc24>)
 800bbaa:	429c      	cmp	r4, r3
 800bbac:	d900      	bls.n	800bbb0 <__ssvfscanf_r+0x91c>
 800bbae:	e542      	b.n	800b636 <__ssvfscanf_r+0x3a2>
 800bbb0:	3408      	adds	r4, #8
 800bbb2:	b2a4      	uxth	r4, r4
 800bbb4:	00a1      	lsls	r1, r4, #2
 800bbb6:	f001 fe67 	bl	800d888 <realloc>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d100      	bne.n	800bbc0 <__ssvfscanf_r+0x92c>
 800bbbe:	e53a      	b.n	800b636 <__ssvfscanf_r+0x3a2>
 800bbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc2:	6018      	str	r0, [r3, #0]
 800bbc4:	809c      	strh	r4, [r3, #4]
 800bbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc8:	1c72      	adds	r2, r6, #1
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	00b6      	lsls	r6, r6, #2
 800bbce:	50f5      	str	r5, [r6, r3]
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbd4:	002e      	movs	r6, r5
 800bbd6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bbd8:	80ca      	strh	r2, [r1, #6]
 800bbda:	623b      	str	r3, [r7, #32]
 800bbdc:	002c      	movs	r4, r5
 800bbde:	2118      	movs	r1, #24
 800bbe0:	2048      	movs	r0, #72	; 0x48
 800bbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe4:	1809      	adds	r1, r1, r0
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	19c9      	adds	r1, r1, r7
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	5c8a      	ldrb	r2, [r1, r2]
 800bbee:	2a00      	cmp	r2, #0
 800bbf0:	d101      	bne.n	800bbf6 <__ssvfscanf_r+0x962>
 800bbf2:	633d      	str	r5, [r7, #48]	; 0x30
 800bbf4:	e031      	b.n	800bc5a <__ssvfscanf_r+0x9c6>
 800bbf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbfa:	6852      	ldr	r2, [r2, #4]
 800bbfc:	3a01      	subs	r2, #1
 800bbfe:	604a      	str	r2, [r1, #4]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	600a      	str	r2, [r1, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	1c6a      	adds	r2, r5, #1
 800bc08:	633a      	str	r2, [r7, #48]	; 0x30
 800bc0a:	702b      	strb	r3, [r5, #0]
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	d010      	beq.n	800bc32 <__ssvfscanf_r+0x99e>
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	1b15      	subs	r5, r2, r4
 800bc14:	429d      	cmp	r5, r3
 800bc16:	d30c      	bcc.n	800bc32 <__ssvfscanf_r+0x99e>
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	623b      	str	r3, [r7, #32]
 800bc20:	f001 fe32 	bl	800d888 <realloc>
 800bc24:	1e04      	subs	r4, r0, #0
 800bc26:	d101      	bne.n	800bc2c <__ssvfscanf_r+0x998>
 800bc28:	f7ff fc0a 	bl	800b440 <__ssvfscanf_r+0x1ac>
 800bc2c:	1943      	adds	r3, r0, r5
 800bc2e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc30:	6030      	str	r0, [r6, #0]
 800bc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc34:	3b01      	subs	r3, #1
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <__ssvfscanf_r+0x9c6>
 800bc3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dc2a      	bgt.n	800bc9a <__ssvfscanf_r+0xa06>
 800bc44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc48:	f002 fab8 	bl	800e1bc <__ssrefill_r>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d024      	beq.n	800bc9a <__ssvfscanf_r+0xa06>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	d101      	bne.n	800bc5a <__ssvfscanf_r+0x9c6>
 800bc56:	f7ff fbec 	bl	800b432 <__ssvfscanf_r+0x19e>
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	1b1d      	subs	r5, r3, r4
 800bc5e:	42a3      	cmp	r3, r4
 800bc60:	d101      	bne.n	800bc66 <__ssvfscanf_r+0x9d2>
 800bc62:	f7ff fc14 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800bc66:	2300      	movs	r3, #0
 800bc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc6a:	7013      	strb	r3, [r2, #0]
 800bc6c:	429e      	cmp	r6, r3
 800bc6e:	d009      	beq.n	800bc84 <__ssvfscanf_r+0x9f0>
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	1c69      	adds	r1, r5, #1
 800bc74:	428b      	cmp	r3, r1
 800bc76:	d905      	bls.n	800bc84 <__ssvfscanf_r+0x9f0>
 800bc78:	6830      	ldr	r0, [r6, #0]
 800bc7a:	f001 fe05 	bl	800d888 <realloc>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d000      	beq.n	800bc84 <__ssvfscanf_r+0x9f0>
 800bc82:	6030      	str	r0, [r6, #0]
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	3301      	adds	r3, #1
 800bc88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	195b      	adds	r3, r3, r5
 800bc8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	e477      	b.n	800b584 <__ssvfscanf_r+0x2f0>
 800bc94:	0016      	movs	r6, r2
 800bc96:	623a      	str	r2, [r7, #32]
 800bc98:	e7a0      	b.n	800bbdc <__ssvfscanf_r+0x948>
 800bc9a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bc9c:	e79f      	b.n	800bbde <__ssvfscanf_r+0x94a>
 800bc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <__ssvfscanf_r+0xa14>
 800bca4:	3b01      	subs	r3, #1
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca8:	2210      	movs	r2, #16
 800bcaa:	2301      	movs	r3, #1
 800bcac:	0034      	movs	r4, r6
 800bcae:	4032      	ands	r2, r6
 800bcb0:	401c      	ands	r4, r3
 800bcb2:	61fa      	str	r2, [r7, #28]
 800bcb4:	421e      	tst	r6, r3
 800bcb6:	d100      	bne.n	800bcba <__ssvfscanf_r+0xa26>
 800bcb8:	e102      	b.n	800bec0 <__ssvfscanf_r+0xc2c>
 800bcba:	2a00      	cmp	r2, #0
 800bcbc:	d000      	beq.n	800bcc0 <__ssvfscanf_r+0xa2c>
 800bcbe:	e09f      	b.n	800be00 <__ssvfscanf_r+0xb6c>
 800bcc0:	2080      	movs	r0, #128	; 0x80
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	cb10      	ldmia	r3!, {r4}
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	4206      	tst	r6, r0
 800bcca:	d100      	bne.n	800bcce <__ssvfscanf_r+0xa3a>
 800bccc:	e0a1      	b.n	800be12 <__ssvfscanf_r+0xb7e>
 800bcce:	2c00      	cmp	r4, #0
 800bcd0:	d100      	bne.n	800bcd4 <__ssvfscanf_r+0xa40>
 800bcd2:	e4aa      	b.n	800b62a <__ssvfscanf_r+0x396>
 800bcd4:	f7fb fc52 	bl	800757c <malloc>
 800bcd8:	6338      	str	r0, [r7, #48]	; 0x30
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d100      	bne.n	800bce0 <__ssvfscanf_r+0xa4c>
 800bcde:	e4a1      	b.n	800b624 <__ssvfscanf_r+0x390>
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	88de      	ldrh	r6, [r3, #6]
 800bce8:	889d      	ldrh	r5, [r3, #4]
 800bcea:	42ae      	cmp	r6, r5
 800bcec:	d310      	bcc.n	800bd10 <__ssvfscanf_r+0xa7c>
 800bcee:	4b72      	ldr	r3, [pc, #456]	; (800beb8 <__ssvfscanf_r+0xc24>)
 800bcf0:	429d      	cmp	r5, r3
 800bcf2:	d900      	bls.n	800bcf6 <__ssvfscanf_r+0xa62>
 800bcf4:	e496      	b.n	800b624 <__ssvfscanf_r+0x390>
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf8:	3508      	adds	r5, #8
 800bcfa:	b2ad      	uxth	r5, r5
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	00a9      	lsls	r1, r5, #2
 800bd00:	f001 fdc2 	bl	800d888 <realloc>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d100      	bne.n	800bd0a <__ssvfscanf_r+0xa76>
 800bd08:	e48c      	b.n	800b624 <__ssvfscanf_r+0x390>
 800bd0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0c:	6018      	str	r0, [r3, #0]
 800bd0e:	809d      	strh	r5, [r3, #4]
 800bd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd12:	1c72      	adds	r2, r6, #1
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	00b6      	lsls	r6, r6, #2
 800bd18:	50f4      	str	r4, [r6, r3]
 800bd1a:	2320      	movs	r3, #32
 800bd1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd1e:	0025      	movs	r5, r4
 800bd20:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bd22:	80ca      	strh	r2, [r1, #6]
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	2300      	movs	r3, #0
 800bd28:	623b      	str	r3, [r7, #32]
 800bd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd2c:	4a63      	ldr	r2, [pc, #396]	; (800bebc <__ssvfscanf_r+0xc28>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	5cd3      	ldrb	r3, [r2, r3]
 800bd34:	2208      	movs	r2, #8
 800bd36:	4213      	tst	r3, r2
 800bd38:	d149      	bne.n	800bdce <__ssvfscanf_r+0xb3a>
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d046      	beq.n	800bdce <__ssvfscanf_r+0xb3a>
 800bd40:	f7fc feb2 	bl	8008aa8 <__locale_mb_cur_max>
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	4298      	cmp	r0, r3
 800bd48:	d101      	bne.n	800bd4e <__ssvfscanf_r+0xaba>
 800bd4a:	f7ff fb72 	bl	800b432 <__ssvfscanf_r+0x19e>
 800bd4e:	6a3a      	ldr	r2, [r7, #32]
 800bd50:	2048      	movs	r0, #72	; 0x48
 800bd52:	1c56      	adds	r6, r2, #1
 800bd54:	228c      	movs	r2, #140	; 0x8c
 800bd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd58:	0052      	lsls	r2, r2, #1
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	1812      	adds	r2, r2, r0
 800bd5e:	7819      	ldrb	r1, [r3, #0]
 800bd60:	6a38      	ldr	r0, [r7, #32]
 800bd62:	19d2      	adds	r2, r2, r7
 800bd64:	5411      	strb	r1, [r2, r0]
 800bd66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd6a:	6852      	ldr	r2, [r2, #4]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	600b      	str	r3, [r1, #0]
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	3a01      	subs	r2, #1
 800bd74:	604a      	str	r2, [r1, #4]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d102      	bne.n	800bd80 <__ssvfscanf_r+0xaec>
 800bd7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd7c:	2b04      	cmp	r3, #4
 800bd7e:	d007      	beq.n	800bd90 <__ssvfscanf_r+0xafc>
 800bd80:	2048      	movs	r0, #72	; 0x48
 800bd82:	2310      	movs	r3, #16
 800bd84:	181b      	adds	r3, r3, r0
 800bd86:	2208      	movs	r2, #8
 800bd88:	2100      	movs	r1, #0
 800bd8a:	19d8      	adds	r0, r3, r7
 800bd8c:	f7fc fe48 	bl	8008a20 <memset>
 800bd90:	2148      	movs	r1, #72	; 0x48
 800bd92:	2310      	movs	r3, #16
 800bd94:	228c      	movs	r2, #140	; 0x8c
 800bd96:	185b      	adds	r3, r3, r1
 800bd98:	0052      	lsls	r2, r2, #1
 800bd9a:	19db      	adds	r3, r3, r7
 800bd9c:	1852      	adds	r2, r2, r1
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	0021      	movs	r1, r4
 800bda2:	0033      	movs	r3, r6
 800bda4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bda6:	19d2      	adds	r2, r2, r7
 800bda8:	f002 f908 	bl	800dfbc <_mbrtowc_r>
 800bdac:	0003      	movs	r3, r0
 800bdae:	62b8      	str	r0, [r7, #40]	; 0x28
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	d101      	bne.n	800bdb8 <__ssvfscanf_r+0xb24>
 800bdb4:	f7ff fb3d 	bl	800b432 <__ssvfscanf_r+0x19e>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d12f      	bne.n	800be1c <__ssvfscanf_r+0xb88>
 800bdbc:	6020      	str	r0, [r4, #0]
 800bdbe:	6820      	ldr	r0, [r4, #0]
 800bdc0:	f002 f91a 	bl	800dff8 <iswspace>
 800bdc4:	6238      	str	r0, [r7, #32]
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d04a      	beq.n	800be60 <__ssvfscanf_r+0xbcc>
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	d13c      	bne.n	800be48 <__ssvfscanf_r+0xbb4>
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d000      	beq.n	800bdd6 <__ssvfscanf_r+0xb42>
 800bdd4:	e640      	b.n	800ba58 <__ssvfscanf_r+0x7c4>
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	2d00      	cmp	r5, #0
 800bdda:	d100      	bne.n	800bdde <__ssvfscanf_r+0xb4a>
 800bddc:	e639      	b.n	800ba52 <__ssvfscanf_r+0x7be>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	1ae4      	subs	r4, r4, r3
 800bde4:	10a3      	asrs	r3, r4, #2
 800bde6:	3301      	adds	r3, #1
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d800      	bhi.n	800bdee <__ssvfscanf_r+0xb5a>
 800bdec:	e631      	b.n	800ba52 <__ssvfscanf_r+0x7be>
 800bdee:	6828      	ldr	r0, [r5, #0]
 800bdf0:	1d21      	adds	r1, r4, #4
 800bdf2:	f001 fd49 	bl	800d888 <realloc>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d100      	bne.n	800bdfc <__ssvfscanf_r+0xb68>
 800bdfa:	e62a      	b.n	800ba52 <__ssvfscanf_r+0x7be>
 800bdfc:	6028      	str	r0, [r5, #0]
 800bdfe:	e628      	b.n	800ba52 <__ssvfscanf_r+0x7be>
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	2300      	movs	r3, #0
 800be06:	001d      	movs	r5, r3
 800be08:	613b      	str	r3, [r7, #16]
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30
 800be0c:	334c      	adds	r3, #76	; 0x4c
 800be0e:	18fc      	adds	r4, r7, r3
 800be10:	e789      	b.n	800bd26 <__ssvfscanf_r+0xa92>
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	001d      	movs	r5, r3
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	633b      	str	r3, [r7, #48]	; 0x30
 800be1a:	e784      	b.n	800bd26 <__ssvfscanf_r+0xa92>
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	623e      	str	r6, [r7, #32]
 800be20:	3302      	adds	r3, #2
 800be22:	d1cc      	bne.n	800bdbe <__ssvfscanf_r+0xb2a>
 800be24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dd00      	ble.n	800be2e <__ssvfscanf_r+0xb9a>
 800be2c:	e77d      	b.n	800bd2a <__ssvfscanf_r+0xa96>
 800be2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be32:	f002 f9c3 	bl	800e1bc <__ssrefill_r>
 800be36:	2800      	cmp	r0, #0
 800be38:	d100      	bne.n	800be3c <__ssvfscanf_r+0xba8>
 800be3a:	e776      	b.n	800bd2a <__ssvfscanf_r+0xa96>
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <__ssvfscanf_r+0xbb2>
 800be42:	f7ff faf6 	bl	800b432 <__ssvfscanf_r+0x19e>
 800be46:	e7c2      	b.n	800bdce <__ssvfscanf_r+0xb3a>
 800be48:	238c      	movs	r3, #140	; 0x8c
 800be4a:	2248      	movs	r2, #72	; 0x48
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	189b      	adds	r3, r3, r2
 800be50:	3e01      	subs	r6, #1
 800be52:	19db      	adds	r3, r3, r7
 800be54:	5cf1      	ldrb	r1, [r6, r3]
 800be56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be5a:	f002 f973 	bl	800e144 <_sungetc_r>
 800be5e:	e7b4      	b.n	800bdca <__ssvfscanf_r+0xb36>
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	199b      	adds	r3, r3, r6
 800be64:	63bb      	str	r3, [r7, #56]	; 0x38
 800be66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d102      	bne.n	800be72 <__ssvfscanf_r+0xbde>
 800be6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d002      	beq.n	800be78 <__ssvfscanf_r+0xbe4>
 800be72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be74:	3b01      	subs	r3, #1
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1d2      	bne.n	800be24 <__ssvfscanf_r+0xb90>
 800be7e:	3404      	adds	r4, #4
 800be80:	2d00      	cmp	r5, #0
 800be82:	d016      	beq.n	800beb2 <__ssvfscanf_r+0xc1e>
 800be84:	69fa      	ldr	r2, [r7, #28]
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	623a      	str	r2, [r7, #32]
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	1ae6      	subs	r6, r4, r3
 800be8e:	10b3      	asrs	r3, r6, #2
 800be90:	4293      	cmp	r3, r2
 800be92:	d3c7      	bcc.n	800be24 <__ssvfscanf_r+0xb90>
 800be94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be96:	00d1      	lsls	r1, r2, #3
 800be98:	f001 fcf6 	bl	800d888 <realloc>
 800be9c:	6338      	str	r0, [r7, #48]	; 0x30
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d101      	bne.n	800bea6 <__ssvfscanf_r+0xc12>
 800bea2:	f7ff fbbf 	bl	800b624 <__ssvfscanf_r+0x390>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1984      	adds	r4, r0, r6
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	6028      	str	r0, [r5, #0]
 800beae:	613b      	str	r3, [r7, #16]
 800beb0:	e7b8      	b.n	800be24 <__ssvfscanf_r+0xb90>
 800beb2:	623d      	str	r5, [r7, #32]
 800beb4:	e7b6      	b.n	800be24 <__ssvfscanf_r+0xb90>
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	0000fff6 	.word	0x0000fff6
 800bebc:	0800f739 	.word	0x0800f739
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01c      	beq.n	800bf00 <__ssvfscanf_r+0xc6c>
 800bec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec8:	49bf      	ldr	r1, [pc, #764]	; (800c1c8 <__ssvfscanf_r+0xf34>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	781a      	ldrb	r2, [r3, #0]
 800bece:	5c8a      	ldrb	r2, [r1, r2]
 800bed0:	2108      	movs	r1, #8
 800bed2:	420a      	tst	r2, r1
 800bed4:	d000      	beq.n	800bed8 <__ssvfscanf_r+0xc44>
 800bed6:	e4a1      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bedc:	6852      	ldr	r2, [r2, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	600b      	str	r3, [r1, #0]
 800bee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee4:	3a01      	subs	r2, #1
 800bee6:	3401      	adds	r4, #1
 800bee8:	604a      	str	r2, [r1, #4]
 800beea:	429c      	cmp	r4, r3
 800beec:	d100      	bne.n	800bef0 <__ssvfscanf_r+0xc5c>
 800beee:	e495      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	dce8      	bgt.n	800bec6 <__ssvfscanf_r+0xc32>
 800bef4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bef6:	f002 f961 	bl	800e1bc <__ssrefill_r>
 800befa:	2800      	cmp	r0, #0
 800befc:	d0e3      	beq.n	800bec6 <__ssvfscanf_r+0xc32>
 800befe:	e48d      	b.n	800b81c <__ssvfscanf_r+0x588>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	0032      	movs	r2, r6
 800bf04:	cb10      	ldmia	r3!, {r4}
 800bf06:	61fb      	str	r3, [r7, #28]
 800bf08:	2380      	movs	r3, #128	; 0x80
 800bf0a:	401a      	ands	r2, r3
 800bf0c:	421e      	tst	r6, r3
 800bf0e:	d039      	beq.n	800bf84 <__ssvfscanf_r+0xcf0>
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	d101      	bne.n	800bf18 <__ssvfscanf_r+0xc84>
 800bf14:	f7ff fabb 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800bf18:	2020      	movs	r0, #32
 800bf1a:	f7fb fb2f 	bl	800757c <malloc>
 800bf1e:	6338      	str	r0, [r7, #48]	; 0x30
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d101      	bne.n	800bf28 <__ssvfscanf_r+0xc94>
 800bf24:	f7ff fa8c 	bl	800b440 <__ssvfscanf_r+0x1ac>
 800bf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2a:	6020      	str	r0, [r4, #0]
 800bf2c:	88de      	ldrh	r6, [r3, #6]
 800bf2e:	889d      	ldrh	r5, [r3, #4]
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	42ae      	cmp	r6, r5
 800bf34:	d310      	bcc.n	800bf58 <__ssvfscanf_r+0xcc4>
 800bf36:	4ba5      	ldr	r3, [pc, #660]	; (800c1cc <__ssvfscanf_r+0xf38>)
 800bf38:	429d      	cmp	r5, r3
 800bf3a:	d901      	bls.n	800bf40 <__ssvfscanf_r+0xcac>
 800bf3c:	f7ff fb7b 	bl	800b636 <__ssvfscanf_r+0x3a2>
 800bf40:	3508      	adds	r5, #8
 800bf42:	b2ad      	uxth	r5, r5
 800bf44:	00a9      	lsls	r1, r5, #2
 800bf46:	f001 fc9f 	bl	800d888 <realloc>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d101      	bne.n	800bf52 <__ssvfscanf_r+0xcbe>
 800bf4e:	f7ff fb72 	bl	800b636 <__ssvfscanf_r+0x3a2>
 800bf52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf54:	6018      	str	r0, [r3, #0]
 800bf56:	809d      	strh	r5, [r3, #4]
 800bf58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf5a:	1c72      	adds	r2, r6, #1
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	00b6      	lsls	r6, r6, #2
 800bf60:	50f4      	str	r4, [r6, r3]
 800bf62:	2320      	movs	r3, #32
 800bf64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf66:	0026      	movs	r6, r4
 800bf68:	80ca      	strh	r2, [r1, #6]
 800bf6a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bf6c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf6e:	0025      	movs	r5, r4
 800bf70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf72:	4995      	ldr	r1, [pc, #596]	; (800c1c8 <__ssvfscanf_r+0xf34>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	781a      	ldrb	r2, [r3, #0]
 800bf78:	5c8a      	ldrb	r2, [r1, r2]
 800bf7a:	2108      	movs	r1, #8
 800bf7c:	420a      	tst	r2, r1
 800bf7e:	d004      	beq.n	800bf8a <__ssvfscanf_r+0xcf6>
 800bf80:	623c      	str	r4, [r7, #32]
 800bf82:	e031      	b.n	800bfe8 <__ssvfscanf_r+0xd54>
 800bf84:	0016      	movs	r6, r2
 800bf86:	633a      	str	r2, [r7, #48]	; 0x30
 800bf88:	e7f1      	b.n	800bf6e <__ssvfscanf_r+0xcda>
 800bf8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf8e:	6852      	ldr	r2, [r2, #4]
 800bf90:	3a01      	subs	r2, #1
 800bf92:	604a      	str	r2, [r1, #4]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	600a      	str	r2, [r1, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	1c62      	adds	r2, r4, #1
 800bf9c:	623a      	str	r2, [r7, #32]
 800bf9e:	7023      	strb	r3, [r4, #0]
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	d010      	beq.n	800bfc6 <__ssvfscanf_r+0xd32>
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	1b54      	subs	r4, r2, r5
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	d30c      	bcc.n	800bfc6 <__ssvfscanf_r+0xd32>
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	0028      	movs	r0, r5
 800bfb0:	0019      	movs	r1, r3
 800bfb2:	633b      	str	r3, [r7, #48]	; 0x30
 800bfb4:	f001 fc68 	bl	800d888 <realloc>
 800bfb8:	1e05      	subs	r5, r0, #0
 800bfba:	d101      	bne.n	800bfc0 <__ssvfscanf_r+0xd2c>
 800bfbc:	f7ff fa40 	bl	800b440 <__ssvfscanf_r+0x1ac>
 800bfc0:	1903      	adds	r3, r0, r4
 800bfc2:	623b      	str	r3, [r7, #32]
 800bfc4:	6030      	str	r0, [r6, #0]
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <__ssvfscanf_r+0xd54>
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dd01      	ble.n	800bfdc <__ssvfscanf_r+0xd48>
 800bfd8:	6a3c      	ldr	r4, [r7, #32]
 800bfda:	e7c9      	b.n	800bf70 <__ssvfscanf_r+0xcdc>
 800bfdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfe0:	f002 f8ec 	bl	800e1bc <__ssrefill_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d0f7      	beq.n	800bfd8 <__ssvfscanf_r+0xd44>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	6a3a      	ldr	r2, [r7, #32]
 800bfec:	7013      	strb	r3, [r2, #0]
 800bfee:	1b55      	subs	r5, r2, r5
 800bff0:	2e00      	cmp	r6, #0
 800bff2:	d009      	beq.n	800c008 <__ssvfscanf_r+0xd74>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	1c69      	adds	r1, r5, #1
 800bff8:	428b      	cmp	r3, r1
 800bffa:	d905      	bls.n	800c008 <__ssvfscanf_r+0xd74>
 800bffc:	6830      	ldr	r0, [r6, #0]
 800bffe:	f001 fc43 	bl	800d888 <realloc>
 800c002:	2800      	cmp	r0, #0
 800c004:	d000      	beq.n	800c008 <__ssvfscanf_r+0xd74>
 800c006:	6030      	str	r0, [r6, #0]
 800c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00a:	195b      	adds	r3, r3, r5
 800c00c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	3301      	adds	r3, #1
 800c012:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c014:	e63c      	b.n	800bc90 <__ssvfscanf_r+0x9fc>
 800c016:	22ae      	movs	r2, #174	; 0xae
 800c018:	2100      	movs	r1, #0
 800c01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01c:	0052      	lsls	r2, r2, #1
 800c01e:	3b01      	subs	r3, #1
 800c020:	6239      	str	r1, [r7, #32]
 800c022:	4293      	cmp	r3, r2
 800c024:	d906      	bls.n	800c034 <__ssvfscanf_r+0xda0>
 800c026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c028:	3b5e      	subs	r3, #94	; 0x5e
 800c02a:	3bff      	subs	r3, #255	; 0xff
 800c02c:	623b      	str	r3, [r7, #32]
 800c02e:	235e      	movs	r3, #94	; 0x5e
 800c030:	33ff      	adds	r3, #255	; 0xff
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c034:	24d8      	movs	r4, #216	; 0xd8
 800c036:	2300      	movs	r3, #0
 800c038:	2248      	movs	r2, #72	; 0x48
 800c03a:	0124      	lsls	r4, r4, #4
 800c03c:	4334      	orrs	r4, r6
 800c03e:	2680      	movs	r6, #128	; 0x80
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	3319      	adds	r3, #25
 800c044:	33ff      	adds	r3, #255	; 0xff
 800c046:	189b      	adds	r3, r3, r2
 800c048:	19dd      	adds	r5, r3, r7
 800c04a:	00b6      	lsls	r6, r6, #2
 800c04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	7813      	ldrb	r3, [r2, #0]
 800c052:	2b39      	cmp	r3, #57	; 0x39
 800c054:	d80f      	bhi.n	800c076 <__ssvfscanf_r+0xde2>
 800c056:	2b2a      	cmp	r3, #42	; 0x2a
 800c058:	d91b      	bls.n	800c092 <__ssvfscanf_r+0xdfe>
 800c05a:	0018      	movs	r0, r3
 800c05c:	382b      	subs	r0, #43	; 0x2b
 800c05e:	280e      	cmp	r0, #14
 800c060:	d817      	bhi.n	800c092 <__ssvfscanf_r+0xdfe>
 800c062:	f7f4 f857 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c066:	168f      	.short	0x168f
 800c068:	5416168f 	.word	0x5416168f
 800c06c:	80808080 	.word	0x80808080
 800c070:	87808080 	.word	0x87808080
 800c074:	87          	.byte	0x87
 800c075:	00          	.byte	0x00
 800c076:	2b66      	cmp	r3, #102	; 0x66
 800c078:	d83a      	bhi.n	800c0f0 <__ssvfscanf_r+0xe5c>
 800c07a:	2b60      	cmp	r3, #96	; 0x60
 800c07c:	d803      	bhi.n	800c086 <__ssvfscanf_r+0xdf2>
 800c07e:	2b46      	cmp	r3, #70	; 0x46
 800c080:	d805      	bhi.n	800c08e <__ssvfscanf_r+0xdfa>
 800c082:	2b40      	cmp	r3, #64	; 0x40
 800c084:	d905      	bls.n	800c092 <__ssvfscanf_r+0xdfe>
 800c086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c088:	290a      	cmp	r1, #10
 800c08a:	dc71      	bgt.n	800c170 <__ssvfscanf_r+0xedc>
 800c08c:	e001      	b.n	800c092 <__ssvfscanf_r+0xdfe>
 800c08e:	2b58      	cmp	r3, #88	; 0x58
 800c090:	d030      	beq.n	800c0f4 <__ssvfscanf_r+0xe60>
 800c092:	05e3      	lsls	r3, r4, #23
 800c094:	d515      	bpl.n	800c0c2 <__ssvfscanf_r+0xe2e>
 800c096:	238c      	movs	r3, #140	; 0x8c
 800c098:	2248      	movs	r2, #72	; 0x48
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	189b      	adds	r3, r3, r2
 800c09e:	19db      	adds	r3, r3, r7
 800c0a0:	429d      	cmp	r5, r3
 800c0a2:	d905      	bls.n	800c0b0 <__ssvfscanf_r+0xe1c>
 800c0a4:	3d01      	subs	r5, #1
 800c0a6:	7829      	ldrb	r1, [r5, #0]
 800c0a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c0ac:	f002 f84a 	bl	800e144 <_sungetc_r>
 800c0b0:	238c      	movs	r3, #140	; 0x8c
 800c0b2:	2248      	movs	r2, #72	; 0x48
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	189b      	adds	r3, r3, r2
 800c0b8:	19db      	adds	r3, r3, r7
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	d101      	bne.n	800c0c2 <__ssvfscanf_r+0xe2e>
 800c0be:	f7ff f9e6 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800c0c2:	2310      	movs	r3, #16
 800c0c4:	0022      	movs	r2, r4
 800c0c6:	401a      	ands	r2, r3
 800c0c8:	421c      	tst	r4, r3
 800c0ca:	d171      	bne.n	800c1b0 <__ssvfscanf_r+0xf1c>
 800c0cc:	218c      	movs	r1, #140	; 0x8c
 800c0ce:	2048      	movs	r0, #72	; 0x48
 800c0d0:	0049      	lsls	r1, r1, #1
 800c0d2:	1809      	adds	r1, r1, r0
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	697e      	ldr	r6, [r7, #20]
 800c0d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c0da:	19c9      	adds	r1, r1, r7
 800c0dc:	702a      	strb	r2, [r5, #0]
 800c0de:	47b0      	blx	r6
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	1d1e      	adds	r6, r3, #4
 800c0e4:	06a3      	lsls	r3, r4, #26
 800c0e6:	d559      	bpl.n	800c19c <__ssvfscanf_r+0xf08>
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6018      	str	r0, [r3, #0]
 800c0ee:	e05b      	b.n	800c1a8 <__ssvfscanf_r+0xf14>
 800c0f0:	2b78      	cmp	r3, #120	; 0x78
 800c0f2:	d1ce      	bne.n	800c092 <__ssvfscanf_r+0xdfe>
 800c0f4:	21c0      	movs	r1, #192	; 0xc0
 800c0f6:	00c9      	lsls	r1, r1, #3
 800c0f8:	4021      	ands	r1, r4
 800c0fa:	42b1      	cmp	r1, r6
 800c0fc:	d1c9      	bne.n	800c092 <__ssvfscanf_r+0xdfe>
 800c0fe:	4934      	ldr	r1, [pc, #208]	; (800c1d0 <__ssvfscanf_r+0xf3c>)
 800c100:	4021      	ands	r1, r4
 800c102:	24a0      	movs	r4, #160	; 0xa0
 800c104:	00e4      	lsls	r4, r4, #3
 800c106:	430c      	orrs	r4, r1
 800c108:	2110      	movs	r1, #16
 800c10a:	6279      	str	r1, [r7, #36]	; 0x24
 800c10c:	e00b      	b.n	800c126 <__ssvfscanf_r+0xe92>
 800c10e:	0521      	lsls	r1, r4, #20
 800c110:	d509      	bpl.n	800c126 <__ssvfscanf_r+0xe92>
 800c112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c114:	2900      	cmp	r1, #0
 800c116:	d102      	bne.n	800c11e <__ssvfscanf_r+0xe8a>
 800c118:	3108      	adds	r1, #8
 800c11a:	4334      	orrs	r4, r6
 800c11c:	6279      	str	r1, [r7, #36]	; 0x24
 800c11e:	0561      	lsls	r1, r4, #21
 800c120:	d504      	bpl.n	800c12c <__ssvfscanf_r+0xe98>
 800c122:	492c      	ldr	r1, [pc, #176]	; (800c1d4 <__ssvfscanf_r+0xf40>)
 800c124:	400c      	ands	r4, r1
 800c126:	702b      	strb	r3, [r5, #0]
 800c128:	3501      	adds	r5, #1
 800c12a:	e00c      	b.n	800c146 <__ssvfscanf_r+0xeb2>
 800c12c:	4b2a      	ldr	r3, [pc, #168]	; (800c1d8 <__ssvfscanf_r+0xf44>)
 800c12e:	401c      	ands	r4, r3
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <__ssvfscanf_r+0xeac>
 800c136:	3b01      	subs	r3, #1
 800c138:	623b      	str	r3, [r7, #32]
 800c13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13c:	3301      	adds	r3, #1
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	3301      	adds	r3, #1
 800c144:	61fb      	str	r3, [r7, #28]
 800c146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	604b      	str	r3, [r1, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd1c      	ble.n	800c18e <__ssvfscanf_r+0xefa>
 800c154:	3201      	adds	r2, #1
 800c156:	600a      	str	r2, [r1, #0]
 800c158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15a:	3b01      	subs	r3, #1
 800c15c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d000      	beq.n	800c164 <__ssvfscanf_r+0xed0>
 800c162:	e773      	b.n	800c04c <__ssvfscanf_r+0xdb8>
 800c164:	e795      	b.n	800c092 <__ssvfscanf_r+0xdfe>
 800c166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c168:	491c      	ldr	r1, [pc, #112]	; (800c1dc <__ssvfscanf_r+0xf48>)
 800c16a:	0040      	lsls	r0, r0, #1
 800c16c:	5e41      	ldrsh	r1, [r0, r1]
 800c16e:	6279      	str	r1, [r7, #36]	; 0x24
 800c170:	491b      	ldr	r1, [pc, #108]	; (800c1e0 <__ssvfscanf_r+0xf4c>)
 800c172:	e7d7      	b.n	800c124 <__ssvfscanf_r+0xe90>
 800c174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c176:	4919      	ldr	r1, [pc, #100]	; (800c1dc <__ssvfscanf_r+0xf48>)
 800c178:	0040      	lsls	r0, r0, #1
 800c17a:	5e41      	ldrsh	r1, [r0, r1]
 800c17c:	6279      	str	r1, [r7, #36]	; 0x24
 800c17e:	2908      	cmp	r1, #8
 800c180:	dcf6      	bgt.n	800c170 <__ssvfscanf_r+0xedc>
 800c182:	e786      	b.n	800c092 <__ssvfscanf_r+0xdfe>
 800c184:	2180      	movs	r1, #128	; 0x80
 800c186:	420c      	tst	r4, r1
 800c188:	d083      	beq.n	800c092 <__ssvfscanf_r+0xdfe>
 800c18a:	438c      	bics	r4, r1
 800c18c:	e7cb      	b.n	800c126 <__ssvfscanf_r+0xe92>
 800c18e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c190:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c192:	f002 f813 	bl	800e1bc <__ssrefill_r>
 800c196:	2800      	cmp	r0, #0
 800c198:	d0de      	beq.n	800c158 <__ssvfscanf_r+0xec4>
 800c19a:	e77a      	b.n	800c092 <__ssvfscanf_r+0xdfe>
 800c19c:	2308      	movs	r3, #8
 800c19e:	421c      	tst	r4, r3
 800c1a0:	d020      	beq.n	800c1e4 <__ssvfscanf_r+0xf50>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	7018      	strb	r0, [r3, #0]
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	633e      	str	r6, [r7, #48]	; 0x30
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1b0:	238c      	movs	r3, #140	; 0x8c
 800c1b2:	2248      	movs	r2, #72	; 0x48
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	19db      	adds	r3, r3, r7
 800c1ba:	1aed      	subs	r5, r5, r3
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	18ed      	adds	r5, r5, r3
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	195b      	adds	r3, r3, r5
 800c1c4:	f7ff f92d 	bl	800b422 <__ssvfscanf_r+0x18e>
 800c1c8:	0800f739 	.word	0x0800f739
 800c1cc:	0000fff6 	.word	0x0000fff6
 800c1d0:	fffffdff 	.word	0xfffffdff
 800c1d4:	fffffa7f 	.word	0xfffffa7f
 800c1d8:	fffffc7f 	.word	0xfffffc7f
 800c1dc:	0800fa66 	.word	0x0800fa66
 800c1e0:	fffff47f 	.word	0xfffff47f
 800c1e4:	0763      	lsls	r3, r4, #29
 800c1e6:	d503      	bpl.n	800c1f0 <__ssvfscanf_r+0xf5c>
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	8018      	strh	r0, [r3, #0]
 800c1ee:	e7db      	b.n	800c1a8 <__ssvfscanf_r+0xf14>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	0022      	movs	r2, r4
 800c1f4:	401a      	ands	r2, r3
 800c1f6:	421c      	tst	r4, r3
 800c1f8:	d000      	beq.n	800c1fc <__ssvfscanf_r+0xf68>
 800c1fa:	e775      	b.n	800c0e8 <__ssvfscanf_r+0xe54>
 800c1fc:	07a4      	lsls	r4, r4, #30
 800c1fe:	d400      	bmi.n	800c202 <__ssvfscanf_r+0xf6e>
 800c200:	e772      	b.n	800c0e8 <__ssvfscanf_r+0xe54>
 800c202:	4ba8      	ldr	r3, [pc, #672]	; (800c4a4 <__ssvfscanf_r+0x1210>)
 800c204:	6979      	ldr	r1, [r7, #20]
 800c206:	4299      	cmp	r1, r3
 800c208:	d10c      	bne.n	800c224 <__ssvfscanf_r+0xf90>
 800c20a:	218c      	movs	r1, #140	; 0x8c
 800c20c:	2048      	movs	r0, #72	; 0x48
 800c20e:	0049      	lsls	r1, r1, #1
 800c210:	1809      	adds	r1, r1, r0
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c216:	19c9      	adds	r1, r1, r7
 800c218:	f001 fecc 	bl	800dfb4 <_strtoull_r>
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	c303      	stmia	r3!, {r0, r1}
 800c222:	e7c1      	b.n	800c1a8 <__ssvfscanf_r+0xf14>
 800c224:	218c      	movs	r1, #140	; 0x8c
 800c226:	2048      	movs	r0, #72	; 0x48
 800c228:	0049      	lsls	r1, r1, #1
 800c22a:	1809      	adds	r1, r1, r0
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c230:	19c9      	adds	r1, r1, r7
 800c232:	f001 fe0d 	bl	800de50 <_strtoll_r>
 800c236:	e7f1      	b.n	800c21c <__ssvfscanf_r+0xf88>
 800c238:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c23a:	f000 fb9f 	bl	800c97c <_localeconv_r>
 800c23e:	22ae      	movs	r2, #174	; 0xae
 800c240:	2100      	movs	r1, #0
 800c242:	6803      	ldr	r3, [r0, #0]
 800c244:	0052      	lsls	r2, r2, #1
 800c246:	603b      	str	r3, [r7, #0]
 800c248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24a:	60f9      	str	r1, [r7, #12]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	4293      	cmp	r3, r2
 800c250:	d906      	bls.n	800c260 <__ssvfscanf_r+0xfcc>
 800c252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c254:	3b5e      	subs	r3, #94	; 0x5e
 800c256:	3bff      	subs	r3, #255	; 0xff
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	235e      	movs	r3, #94	; 0x5e
 800c25c:	33ff      	adds	r3, #255	; 0xff
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c260:	23f0      	movs	r3, #240	; 0xf0
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	431e      	orrs	r6, r3
 800c266:	238c      	movs	r3, #140	; 0x8c
 800c268:	2248      	movs	r2, #72	; 0x48
 800c26a:	2400      	movs	r4, #0
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	189b      	adds	r3, r3, r2
 800c270:	623c      	str	r4, [r7, #32]
 800c272:	607c      	str	r4, [r7, #4]
 800c274:	60bc      	str	r4, [r7, #8]
 800c276:	61fc      	str	r4, [r7, #28]
 800c278:	613c      	str	r4, [r7, #16]
 800c27a:	19dd      	adds	r5, r3, r7
 800c27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	781a      	ldrb	r2, [r3, #0]
 800c282:	0010      	movs	r0, r2
 800c284:	382b      	subs	r0, #43	; 0x2b
 800c286:	284e      	cmp	r0, #78	; 0x4e
 800c288:	d900      	bls.n	800c28c <__ssvfscanf_r+0xff8>
 800c28a:	e133      	b.n	800c4f4 <__ssvfscanf_r+0x1260>
 800c28c:	f7f3 ff4c 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c290:	0132009b 	.word	0x0132009b
 800c294:	0132009b 	.word	0x0132009b
 800c298:	004f0132 	.word	0x004f0132
 800c29c:	00720072 	.word	0x00720072
 800c2a0:	00720072 	.word	0x00720072
 800c2a4:	00720072 	.word	0x00720072
 800c2a8:	00720072 	.word	0x00720072
 800c2ac:	01320072 	.word	0x01320072
 800c2b0:	01320132 	.word	0x01320132
 800c2b4:	01320132 	.word	0x01320132
 800c2b8:	01320132 	.word	0x01320132
 800c2bc:	007b00bc 	.word	0x007b00bc
 800c2c0:	007b007b 	.word	0x007b007b
 800c2c4:	00f7012f 	.word	0x00f7012f
 800c2c8:	01320132 	.word	0x01320132
 800c2cc:	013200e3 	.word	0x013200e3
 800c2d0:	01320132 	.word	0x01320132
 800c2d4:	00a00132 	.word	0x00a00132
 800c2d8:	01120132 	.word	0x01120132
 800c2dc:	01320132 	.word	0x01320132
 800c2e0:	01010132 	.word	0x01010132
 800c2e4:	01320132 	.word	0x01320132
 800c2e8:	00820132 	.word	0x00820132
 800c2ec:	01320105 	.word	0x01320105
 800c2f0:	01320132 	.word	0x01320132
 800c2f4:	01320132 	.word	0x01320132
 800c2f8:	01320132 	.word	0x01320132
 800c2fc:	007b00bc 	.word	0x007b00bc
 800c300:	007b007b 	.word	0x007b007b
 800c304:	00f7012f 	.word	0x00f7012f
 800c308:	01320132 	.word	0x01320132
 800c30c:	013200e3 	.word	0x013200e3
 800c310:	01320132 	.word	0x01320132
 800c314:	00a00132 	.word	0x00a00132
 800c318:	01120132 	.word	0x01120132
 800c31c:	01320132 	.word	0x01320132
 800c320:	01010132 	.word	0x01010132
 800c324:	01320132 	.word	0x01320132
 800c328:	00820132 	.word	0x00820132
 800c32c:	0105      	.short	0x0105
 800c32e:	05f1      	lsls	r1, r6, #23
 800c330:	d520      	bpl.n	800c374 <__ssvfscanf_r+0x10e0>
 800c332:	2280      	movs	r2, #128	; 0x80
 800c334:	4396      	bics	r6, r2
 800c336:	69fa      	ldr	r2, [r7, #28]
 800c338:	3201      	adds	r2, #1
 800c33a:	61fa      	str	r2, [r7, #28]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	2a00      	cmp	r2, #0
 800c340:	d004      	beq.n	800c34c <__ssvfscanf_r+0x10b8>
 800c342:	3a01      	subs	r2, #1
 800c344:	60fa      	str	r2, [r7, #12]
 800c346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c348:	3201      	adds	r2, #1
 800c34a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c34c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c34e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c350:	3a01      	subs	r2, #1
 800c352:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c356:	3201      	adds	r2, #1
 800c358:	63ba      	str	r2, [r7, #56]	; 0x38
 800c35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c35c:	6852      	ldr	r2, [r2, #4]
 800c35e:	3a01      	subs	r2, #1
 800c360:	604a      	str	r2, [r1, #4]
 800c362:	2a00      	cmp	r2, #0
 800c364:	dc00      	bgt.n	800c368 <__ssvfscanf_r+0x10d4>
 800c366:	e0d6      	b.n	800c516 <__ssvfscanf_r+0x1282>
 800c368:	3301      	adds	r3, #1
 800c36a:	600b      	str	r3, [r1, #0]
 800c36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d184      	bne.n	800c27c <__ssvfscanf_r+0xfe8>
 800c372:	e057      	b.n	800c424 <__ssvfscanf_r+0x1190>
 800c374:	6a39      	ldr	r1, [r7, #32]
 800c376:	1909      	adds	r1, r1, r4
 800c378:	2900      	cmp	r1, #0
 800c37a:	d153      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c37c:	494a      	ldr	r1, [pc, #296]	; (800c4a8 <__ssvfscanf_r+0x1214>)
 800c37e:	400e      	ands	r6, r1
 800c380:	702a      	strb	r2, [r5, #0]
 800c382:	3501      	adds	r5, #1
 800c384:	e7e2      	b.n	800c34c <__ssvfscanf_r+0x10b8>
 800c386:	0531      	lsls	r1, r6, #20
 800c388:	d54c      	bpl.n	800c424 <__ssvfscanf_r+0x1190>
 800c38a:	6a39      	ldr	r1, [r7, #32]
 800c38c:	1909      	adds	r1, r1, r4
 800c38e:	2900      	cmp	r1, #0
 800c390:	d040      	beq.n	800c414 <__ssvfscanf_r+0x1180>
 800c392:	e047      	b.n	800c424 <__ssvfscanf_r+0x1190>
 800c394:	2198      	movs	r1, #152	; 0x98
 800c396:	2080      	movs	r0, #128	; 0x80
 800c398:	0109      	lsls	r1, r1, #4
 800c39a:	4031      	ands	r1, r6
 800c39c:	0040      	lsls	r0, r0, #1
 800c39e:	4281      	cmp	r1, r0
 800c3a0:	d140      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c3a2:	69f9      	ldr	r1, [r7, #28]
 800c3a4:	2901      	cmp	r1, #1
 800c3a6:	d13d      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c3a8:	2080      	movs	r0, #128	; 0x80
 800c3aa:	4940      	ldr	r1, [pc, #256]	; (800c4ac <__ssvfscanf_r+0x1218>)
 800c3ac:	0100      	lsls	r0, r0, #4
 800c3ae:	400e      	ands	r6, r1
 800c3b0:	3132      	adds	r1, #50	; 0x32
 800c3b2:	31ff      	adds	r1, #255	; 0xff
 800c3b4:	7029      	strb	r1, [r5, #0]
 800c3b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3b8:	4306      	orrs	r6, r0
 800c3ba:	3901      	subs	r1, #1
 800c3bc:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c3be:	3501      	adds	r5, #1
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	61f9      	str	r1, [r7, #28]
 800c3c4:	e7dc      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c3c6:	2180      	movs	r1, #128	; 0x80
 800c3c8:	420e      	tst	r6, r1
 800c3ca:	d02b      	beq.n	800c424 <__ssvfscanf_r+0x1190>
 800c3cc:	438e      	bics	r6, r1
 800c3ce:	e7d7      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c3d0:	6a39      	ldr	r1, [r7, #32]
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	d10d      	bne.n	800c3f2 <__ssvfscanf_r+0x115e>
 800c3d6:	69f9      	ldr	r1, [r7, #28]
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d10e      	bne.n	800c3fa <__ssvfscanf_r+0x1166>
 800c3dc:	21e0      	movs	r1, #224	; 0xe0
 800c3de:	0030      	movs	r0, r6
 800c3e0:	00c9      	lsls	r1, r1, #3
 800c3e2:	4008      	ands	r0, r1
 800c3e4:	4288      	cmp	r0, r1
 800c3e6:	d108      	bne.n	800c3fa <__ssvfscanf_r+0x1166>
 800c3e8:	4931      	ldr	r1, [pc, #196]	; (800c4b0 <__ssvfscanf_r+0x121c>)
 800c3ea:	400e      	ands	r6, r1
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	6239      	str	r1, [r7, #32]
 800c3f0:	e7c6      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c3f2:	6a39      	ldr	r1, [r7, #32]
 800c3f4:	2902      	cmp	r1, #2
 800c3f6:	d100      	bne.n	800c3fa <__ssvfscanf_r+0x1166>
 800c3f8:	e089      	b.n	800c50e <__ssvfscanf_r+0x127a>
 800c3fa:	2c01      	cmp	r4, #1
 800c3fc:	d001      	beq.n	800c402 <__ssvfscanf_r+0x116e>
 800c3fe:	2c04      	cmp	r4, #4
 800c400:	d110      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c402:	3401      	adds	r4, #1
 800c404:	b2e4      	uxtb	r4, r4
 800c406:	e7bb      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c408:	0531      	lsls	r1, r6, #20
 800c40a:	d508      	bpl.n	800c41e <__ssvfscanf_r+0x118a>
 800c40c:	6a39      	ldr	r1, [r7, #32]
 800c40e:	1909      	adds	r1, r1, r4
 800c410:	2900      	cmp	r1, #0
 800c412:	d104      	bne.n	800c41e <__ssvfscanf_r+0x118a>
 800c414:	4824      	ldr	r0, [pc, #144]	; (800c4a8 <__ssvfscanf_r+0x1214>)
 800c416:	000c      	movs	r4, r1
 800c418:	4006      	ands	r6, r0
 800c41a:	6239      	str	r1, [r7, #32]
 800c41c:	e7b0      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c41e:	6a39      	ldr	r1, [r7, #32]
 800c420:	2901      	cmp	r1, #1
 800c422:	d076      	beq.n	800c512 <__ssvfscanf_r+0x127e>
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <__ssvfscanf_r+0x119a>
 800c42a:	4b20      	ldr	r3, [pc, #128]	; (800c4ac <__ssvfscanf_r+0x1218>)
 800c42c:	401e      	ands	r6, r3
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	3b01      	subs	r3, #1
 800c432:	2b01      	cmp	r3, #1
 800c434:	d877      	bhi.n	800c526 <__ssvfscanf_r+0x1292>
 800c436:	238c      	movs	r3, #140	; 0x8c
 800c438:	2248      	movs	r2, #72	; 0x48
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	189b      	adds	r3, r3, r2
 800c43e:	19db      	adds	r3, r3, r7
 800c440:	429d      	cmp	r5, r3
 800c442:	d801      	bhi.n	800c448 <__ssvfscanf_r+0x11b4>
 800c444:	f7ff f823 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800c448:	3d01      	subs	r5, #1
 800c44a:	7829      	ldrb	r1, [r5, #0]
 800c44c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c44e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c450:	f001 fe78 	bl	800e144 <_sungetc_r>
 800c454:	e7ef      	b.n	800c436 <__ssvfscanf_r+0x11a2>
 800c456:	2c00      	cmp	r4, #0
 800c458:	d10c      	bne.n	800c474 <__ssvfscanf_r+0x11e0>
 800c45a:	69f9      	ldr	r1, [r7, #28]
 800c45c:	2900      	cmp	r1, #0
 800c45e:	d1e4      	bne.n	800c42a <__ssvfscanf_r+0x1196>
 800c460:	21e0      	movs	r1, #224	; 0xe0
 800c462:	0030      	movs	r0, r6
 800c464:	00c9      	lsls	r1, r1, #3
 800c466:	4008      	ands	r0, r1
 800c468:	4288      	cmp	r0, r1
 800c46a:	d1e0      	bne.n	800c42e <__ssvfscanf_r+0x119a>
 800c46c:	4910      	ldr	r1, [pc, #64]	; (800c4b0 <__ssvfscanf_r+0x121c>)
 800c46e:	3401      	adds	r4, #1
 800c470:	400e      	ands	r6, r1
 800c472:	e785      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c474:	20fd      	movs	r0, #253	; 0xfd
 800c476:	1ee1      	subs	r1, r4, #3
 800c478:	4201      	tst	r1, r0
 800c47a:	d1d3      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c47c:	e7c1      	b.n	800c402 <__ssvfscanf_r+0x116e>
 800c47e:	0531      	lsls	r1, r6, #20
 800c480:	d503      	bpl.n	800c48a <__ssvfscanf_r+0x11f6>
 800c482:	6a39      	ldr	r1, [r7, #32]
 800c484:	1909      	adds	r1, r1, r4
 800c486:	2900      	cmp	r1, #0
 800c488:	d0c4      	beq.n	800c414 <__ssvfscanf_r+0x1180>
 800c48a:	2c02      	cmp	r4, #2
 800c48c:	d1ca      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c48e:	2403      	movs	r4, #3
 800c490:	e776      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c492:	2c06      	cmp	r4, #6
 800c494:	d1c6      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c496:	2407      	movs	r4, #7
 800c498:	e772      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c49a:	2c07      	cmp	r4, #7
 800c49c:	d1c2      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c49e:	2408      	movs	r4, #8
 800c4a0:	e76e      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c4a2:	46c0      	nop			; (mov r8, r8)
 800c4a4:	0800dced 	.word	0x0800dced
 800c4a8:	fffffe7f 	.word	0xfffffe7f
 800c4ac:	fffffeff 	.word	0xfffffeff
 800c4b0:	fffff87f 	.word	0xfffff87f
 800c4b4:	0531      	lsls	r1, r6, #20
 800c4b6:	d5b5      	bpl.n	800c424 <__ssvfscanf_r+0x1190>
 800c4b8:	21a0      	movs	r1, #160	; 0xa0
 800c4ba:	2080      	movs	r0, #128	; 0x80
 800c4bc:	00c9      	lsls	r1, r1, #3
 800c4be:	00c0      	lsls	r0, r0, #3
 800c4c0:	4031      	ands	r1, r6
 800c4c2:	4281      	cmp	r1, r0
 800c4c4:	d004      	beq.n	800c4d0 <__ssvfscanf_r+0x123c>
 800c4c6:	4206      	tst	r6, r0
 800c4c8:	d0ac      	beq.n	800c424 <__ssvfscanf_r+0x1190>
 800c4ca:	69f9      	ldr	r1, [r7, #28]
 800c4cc:	2900      	cmp	r1, #0
 800c4ce:	d0ae      	beq.n	800c42e <__ssvfscanf_r+0x119a>
 800c4d0:	2180      	movs	r1, #128	; 0x80
 800c4d2:	0089      	lsls	r1, r1, #2
 800c4d4:	420e      	tst	r6, r1
 800c4d6:	d104      	bne.n	800c4e2 <__ssvfscanf_r+0x124e>
 800c4d8:	69f9      	ldr	r1, [r7, #28]
 800c4da:	6938      	ldr	r0, [r7, #16]
 800c4dc:	607d      	str	r5, [r7, #4]
 800c4de:	1a09      	subs	r1, r1, r0
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	20c0      	movs	r0, #192	; 0xc0
 800c4e4:	4973      	ldr	r1, [pc, #460]	; (800c6b4 <__ssvfscanf_r+0x1420>)
 800c4e6:	0040      	lsls	r0, r0, #1
 800c4e8:	400e      	ands	r6, r1
 800c4ea:	4306      	orrs	r6, r0
 800c4ec:	e768      	b.n	800c3c0 <__ssvfscanf_r+0x112c>
 800c4ee:	0531      	lsls	r1, r6, #20
 800c4f0:	d5e2      	bpl.n	800c4b8 <__ssvfscanf_r+0x1224>
 800c4f2:	e74a      	b.n	800c38a <__ssvfscanf_r+0x10f6>
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	7809      	ldrb	r1, [r1, #0]
 800c4f8:	4291      	cmp	r1, r2
 800c4fa:	d193      	bne.n	800c424 <__ssvfscanf_r+0x1190>
 800c4fc:	2180      	movs	r1, #128	; 0x80
 800c4fe:	0089      	lsls	r1, r1, #2
 800c500:	420e      	tst	r6, r1
 800c502:	d08f      	beq.n	800c424 <__ssvfscanf_r+0x1190>
 800c504:	496c      	ldr	r1, [pc, #432]	; (800c6b8 <__ssvfscanf_r+0x1424>)
 800c506:	400e      	ands	r6, r1
 800c508:	69f9      	ldr	r1, [r7, #28]
 800c50a:	6139      	str	r1, [r7, #16]
 800c50c:	e738      	b.n	800c380 <__ssvfscanf_r+0x10ec>
 800c50e:	2103      	movs	r1, #3
 800c510:	e76d      	b.n	800c3ee <__ssvfscanf_r+0x115a>
 800c512:	2102      	movs	r1, #2
 800c514:	e76b      	b.n	800c3ee <__ssvfscanf_r+0x115a>
 800c516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c518:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c51a:	f001 fe4f 	bl	800e1bc <__ssrefill_r>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d100      	bne.n	800c524 <__ssvfscanf_r+0x1290>
 800c522:	e723      	b.n	800c36c <__ssvfscanf_r+0x10d8>
 800c524:	e77e      	b.n	800c424 <__ssvfscanf_r+0x1190>
 800c526:	1e63      	subs	r3, r4, #1
 800c528:	2b06      	cmp	r3, #6
 800c52a:	d825      	bhi.n	800c578 <__ssvfscanf_r+0x12e4>
 800c52c:	2c02      	cmp	r4, #2
 800c52e:	d837      	bhi.n	800c5a0 <__ssvfscanf_r+0x130c>
 800c530:	238c      	movs	r3, #140	; 0x8c
 800c532:	2248      	movs	r2, #72	; 0x48
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	189b      	adds	r3, r3, r2
 800c538:	19db      	adds	r3, r3, r7
 800c53a:	429d      	cmp	r5, r3
 800c53c:	d801      	bhi.n	800c542 <__ssvfscanf_r+0x12ae>
 800c53e:	f7fe ffa6 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800c542:	3d01      	subs	r5, #1
 800c544:	7829      	ldrb	r1, [r5, #0]
 800c546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c548:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c54a:	f001 fdfb 	bl	800e144 <_sungetc_r>
 800c54e:	e7ef      	b.n	800c530 <__ssvfscanf_r+0x129c>
 800c550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c554:	3b01      	subs	r3, #1
 800c556:	7819      	ldrb	r1, [r3, #0]
 800c558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c55c:	f001 fdf2 	bl	800e144 <_sungetc_r>
 800c560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c562:	6a3a      	ldr	r2, [r7, #32]
 800c564:	189b      	adds	r3, r3, r2
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d8f1      	bhi.n	800c550 <__ssvfscanf_r+0x12bc>
 800c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56e:	3c03      	subs	r4, #3
 800c570:	b2e4      	uxtb	r4, r4
 800c572:	1b1b      	subs	r3, r3, r4
 800c574:	1b2d      	subs	r5, r5, r4
 800c576:	63bb      	str	r3, [r7, #56]	; 0x38
 800c578:	05f3      	lsls	r3, r6, #23
 800c57a:	d52f      	bpl.n	800c5dc <__ssvfscanf_r+0x1348>
 800c57c:	0573      	lsls	r3, r6, #21
 800c57e:	d514      	bpl.n	800c5aa <__ssvfscanf_r+0x1316>
 800c580:	238c      	movs	r3, #140	; 0x8c
 800c582:	2248      	movs	r2, #72	; 0x48
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	189b      	adds	r3, r3, r2
 800c588:	19db      	adds	r3, r3, r7
 800c58a:	429d      	cmp	r5, r3
 800c58c:	d801      	bhi.n	800c592 <__ssvfscanf_r+0x12fe>
 800c58e:	f7fe ff7e 	bl	800b48e <__ssvfscanf_r+0x1fa>
 800c592:	3d01      	subs	r5, #1
 800c594:	7829      	ldrb	r1, [r5, #0]
 800c596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c598:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c59a:	f001 fdd3 	bl	800e144 <_sungetc_r>
 800c59e:	e7ef      	b.n	800c580 <__ssvfscanf_r+0x12ec>
 800c5a0:	1b63      	subs	r3, r4, r5
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	63fd      	str	r5, [r7, #60]	; 0x3c
 800c5a6:	623b      	str	r3, [r7, #32]
 800c5a8:	e7da      	b.n	800c560 <__ssvfscanf_r+0x12cc>
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	1e6c      	subs	r4, r5, #1
 800c5ae:	7821      	ldrb	r1, [r4, #0]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b4:	2965      	cmp	r1, #101	; 0x65
 800c5b6:	d00a      	beq.n	800c5ce <__ssvfscanf_r+0x133a>
 800c5b8:	2945      	cmp	r1, #69	; 0x45
 800c5ba:	d008      	beq.n	800c5ce <__ssvfscanf_r+0x133a>
 800c5bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5c0:	f001 fdc0 	bl	800e144 <_sungetc_r>
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	1eac      	subs	r4, r5, #2
 800c5c8:	3b02      	subs	r3, #2
 800c5ca:	7821      	ldrb	r1, [r4, #0]
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ce:	0025      	movs	r5, r4
 800c5d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5d4:	f001 fdb6 	bl	800e144 <_sungetc_r>
 800c5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5dc:	2310      	movs	r3, #16
 800c5de:	0032      	movs	r2, r6
 800c5e0:	401a      	ands	r2, r3
 800c5e2:	421e      	tst	r6, r3
 800c5e4:	d001      	beq.n	800c5ea <__ssvfscanf_r+0x1356>
 800c5e6:	f7fe fe71 	bl	800b2cc <__ssvfscanf_r+0x38>
 800c5ea:	23c0      	movs	r3, #192	; 0xc0
 800c5ec:	2180      	movs	r1, #128	; 0x80
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	702a      	strb	r2, [r5, #0]
 800c5f2:	4033      	ands	r3, r6
 800c5f4:	00c9      	lsls	r1, r1, #3
 800c5f6:	428b      	cmp	r3, r1
 800c5f8:	d11f      	bne.n	800c63a <__ssvfscanf_r+0x13a6>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	69fa      	ldr	r2, [r7, #28]
 800c5fe:	69f9      	ldr	r1, [r7, #28]
 800c600:	1a9a      	subs	r2, r3, r2
 800c602:	428b      	cmp	r3, r1
 800c604:	d125      	bne.n	800c652 <__ssvfscanf_r+0x13be>
 800c606:	238c      	movs	r3, #140	; 0x8c
 800c608:	2148      	movs	r1, #72	; 0x48
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	185b      	adds	r3, r3, r1
 800c60e:	19d9      	adds	r1, r3, r7
 800c610:	2200      	movs	r2, #0
 800c612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c614:	f7fc f80c 	bl	8008630 <_strtod_r>
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	0004      	movs	r4, r0
 800c61c:	3304      	adds	r3, #4
 800c61e:	000d      	movs	r5, r1
 800c620:	623b      	str	r3, [r7, #32]
 800c622:	07f3      	lsls	r3, r6, #31
 800c624:	d523      	bpl.n	800c66e <__ssvfscanf_r+0x13da>
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	601c      	str	r4, [r3, #0]
 800c62c:	605d      	str	r5, [r3, #4]
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	3301      	adds	r3, #1
 800c632:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	f7fe ffa5 	bl	800b584 <__ssvfscanf_r+0x2f0>
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d0e2      	beq.n	800c606 <__ssvfscanf_r+0x1372>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c644:	1c59      	adds	r1, r3, #1
 800c646:	230a      	movs	r3, #10
 800c648:	f7fc f880 	bl	800874c <_strtol_r>
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	687d      	ldr	r5, [r7, #4]
 800c650:	1ac2      	subs	r2, r0, r3
 800c652:	2148      	movs	r1, #72	; 0x48
 800c654:	4b19      	ldr	r3, [pc, #100]	; (800c6bc <__ssvfscanf_r+0x1428>)
 800c656:	185b      	adds	r3, r3, r1
 800c658:	19db      	adds	r3, r3, r7
 800c65a:	429d      	cmp	r5, r3
 800c65c:	d302      	bcc.n	800c664 <__ssvfscanf_r+0x13d0>
 800c65e:	4b18      	ldr	r3, [pc, #96]	; (800c6c0 <__ssvfscanf_r+0x142c>)
 800c660:	185b      	adds	r3, r3, r1
 800c662:	19dd      	adds	r5, r3, r7
 800c664:	0028      	movs	r0, r5
 800c666:	4917      	ldr	r1, [pc, #92]	; (800c6c4 <__ssvfscanf_r+0x1430>)
 800c668:	f7fc f944 	bl	80088f4 <sprintf>
 800c66c:	e7cb      	b.n	800c606 <__ssvfscanf_r+0x1372>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c674:	07b6      	lsls	r6, r6, #30
 800c676:	d4d8      	bmi.n	800c62a <__ssvfscanf_r+0x1396>
 800c678:	0002      	movs	r2, r0
 800c67a:	000b      	movs	r3, r1
 800c67c:	f7f5 fe3a 	bl	80022f4 <__aeabi_dcmpun>
 800c680:	2800      	cmp	r0, #0
 800c682:	d005      	beq.n	800c690 <__ssvfscanf_r+0x13fc>
 800c684:	4810      	ldr	r0, [pc, #64]	; (800c6c8 <__ssvfscanf_r+0x1434>)
 800c686:	f7fc fabf 	bl	8008c08 <nanf>
 800c68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68c:	6018      	str	r0, [r3, #0]
 800c68e:	e7ce      	b.n	800c62e <__ssvfscanf_r+0x139a>
 800c690:	0020      	movs	r0, r4
 800c692:	0029      	movs	r1, r5
 800c694:	f7f5 fed8 	bl	8002448 <__aeabi_d2f>
 800c698:	e7f7      	b.n	800c68a <__ssvfscanf_r+0x13f6>
 800c69a:	00a3      	lsls	r3, r4, #2
 800c69c:	18ed      	adds	r5, r5, r3
 800c69e:	682b      	ldr	r3, [r5, #0]
 800c6a0:	3401      	adds	r4, #1
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	f7fa ff74 	bl	8007590 <free>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	682b      	ldr	r3, [r5, #0]
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	f7fe ffc3 	bl	800b638 <__ssvfscanf_r+0x3a4>
 800c6b2:	46c0      	nop			; (mov r8, r8)
 800c6b4:	fffff07f 	.word	0xfffff07f
 800c6b8:	fffffd7f 	.word	0xfffffd7f
 800c6bc:	0000026b 	.word	0x0000026b
 800c6c0:	0000026a 	.word	0x0000026a
 800c6c4:	0800fa60 	.word	0x0800fa60
 800c6c8:	0800fac3 	.word	0x0800fac3

0800c6cc <_fclose_r>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	0005      	movs	r5, r0
 800c6d0:	1e0c      	subs	r4, r1, #0
 800c6d2:	d102      	bne.n	800c6da <_fclose_r+0xe>
 800c6d4:	2600      	movs	r6, #0
 800c6d6:	0030      	movs	r0, r6
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d004      	beq.n	800c6e8 <_fclose_r+0x1c>
 800c6de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d101      	bne.n	800c6e8 <_fclose_r+0x1c>
 800c6e4:	f7fc f8d2 	bl	800888c <__sinit>
 800c6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ea:	07db      	lsls	r3, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_fclose_r+0x2e>
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	059b      	lsls	r3, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_fclose_r+0x2e>
 800c6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6f6:	f7fc fa6b 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800c6fa:	220c      	movs	r2, #12
 800c6fc:	5ea3      	ldrsh	r3, [r4, r2]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <_fclose_r+0x4a>
 800c702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c704:	3301      	adds	r3, #1
 800c706:	0016      	movs	r6, r2
 800c708:	401e      	ands	r6, r3
 800c70a:	421a      	tst	r2, r3
 800c70c:	d1e2      	bne.n	800c6d4 <_fclose_r+0x8>
 800c70e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c710:	f7fc fa5f 	bl	8008bd2 <__retarget_lock_release_recursive>
 800c714:	e7df      	b.n	800c6d6 <_fclose_r+0xa>
 800c716:	0021      	movs	r1, r4
 800c718:	0028      	movs	r0, r5
 800c71a:	f000 f837 	bl	800c78c <__sflush_r>
 800c71e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c720:	0006      	movs	r6, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d006      	beq.n	800c734 <_fclose_r+0x68>
 800c726:	0028      	movs	r0, r5
 800c728:	69e1      	ldr	r1, [r4, #28]
 800c72a:	4798      	blx	r3
 800c72c:	2800      	cmp	r0, #0
 800c72e:	da01      	bge.n	800c734 <_fclose_r+0x68>
 800c730:	2601      	movs	r6, #1
 800c732:	4276      	negs	r6, r6
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	061b      	lsls	r3, r3, #24
 800c738:	d503      	bpl.n	800c742 <_fclose_r+0x76>
 800c73a:	0028      	movs	r0, r5
 800c73c:	6921      	ldr	r1, [r4, #16]
 800c73e:	f7fc facf 	bl	8008ce0 <_free_r>
 800c742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c744:	2900      	cmp	r1, #0
 800c746:	d008      	beq.n	800c75a <_fclose_r+0x8e>
 800c748:	0023      	movs	r3, r4
 800c74a:	3340      	adds	r3, #64	; 0x40
 800c74c:	4299      	cmp	r1, r3
 800c74e:	d002      	beq.n	800c756 <_fclose_r+0x8a>
 800c750:	0028      	movs	r0, r5
 800c752:	f7fc fac5 	bl	8008ce0 <_free_r>
 800c756:	2300      	movs	r3, #0
 800c758:	6323      	str	r3, [r4, #48]	; 0x30
 800c75a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c75c:	2900      	cmp	r1, #0
 800c75e:	d004      	beq.n	800c76a <_fclose_r+0x9e>
 800c760:	0028      	movs	r0, r5
 800c762:	f7fc fabd 	bl	8008ce0 <_free_r>
 800c766:	2300      	movs	r3, #0
 800c768:	6463      	str	r3, [r4, #68]	; 0x44
 800c76a:	f7fc f87f 	bl	800886c <__sfp_lock_acquire>
 800c76e:	2300      	movs	r3, #0
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c774:	07db      	lsls	r3, r3, #31
 800c776:	d402      	bmi.n	800c77e <_fclose_r+0xb2>
 800c778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c77a:	f7fc fa2a 	bl	8008bd2 <__retarget_lock_release_recursive>
 800c77e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c780:	f7fc fa25 	bl	8008bce <__retarget_lock_close_recursive>
 800c784:	f7fc f87a 	bl	800887c <__sfp_lock_release>
 800c788:	e7a5      	b.n	800c6d6 <_fclose_r+0xa>
	...

0800c78c <__sflush_r>:
 800c78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c78e:	230c      	movs	r3, #12
 800c790:	5eca      	ldrsh	r2, [r1, r3]
 800c792:	000c      	movs	r4, r1
 800c794:	0005      	movs	r5, r0
 800c796:	b291      	uxth	r1, r2
 800c798:	0713      	lsls	r3, r2, #28
 800c79a:	d464      	bmi.n	800c866 <__sflush_r+0xda>
 800c79c:	2380      	movs	r3, #128	; 0x80
 800c79e:	011b      	lsls	r3, r3, #4
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	6862      	ldr	r2, [r4, #4]
 800c7a4:	81a3      	strh	r3, [r4, #12]
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	dc04      	bgt.n	800c7b4 <__sflush_r+0x28>
 800c7aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	dc01      	bgt.n	800c7b4 <__sflush_r+0x28>
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c7b6:	2f00      	cmp	r7, #0
 800c7b8:	d0fa      	beq.n	800c7b0 <__sflush_r+0x24>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2080      	movs	r0, #128	; 0x80
 800c7be:	682e      	ldr	r6, [r5, #0]
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	0140      	lsls	r0, r0, #5
 800c7c6:	69e1      	ldr	r1, [r4, #28]
 800c7c8:	4002      	ands	r2, r0
 800c7ca:	4203      	tst	r3, r0
 800c7cc:	d038      	beq.n	800c840 <__sflush_r+0xb4>
 800c7ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	075b      	lsls	r3, r3, #29
 800c7d4:	d506      	bpl.n	800c7e4 <__sflush_r+0x58>
 800c7d6:	6863      	ldr	r3, [r4, #4]
 800c7d8:	1ac0      	subs	r0, r0, r3
 800c7da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <__sflush_r+0x58>
 800c7e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7e2:	1ac0      	subs	r0, r0, r3
 800c7e4:	0002      	movs	r2, r0
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	0028      	movs	r0, r5
 800c7ea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c7ec:	69e1      	ldr	r1, [r4, #28]
 800c7ee:	47b8      	blx	r7
 800c7f0:	89a2      	ldrh	r2, [r4, #12]
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d106      	bne.n	800c804 <__sflush_r+0x78>
 800c7f6:	6829      	ldr	r1, [r5, #0]
 800c7f8:	291d      	cmp	r1, #29
 800c7fa:	d830      	bhi.n	800c85e <__sflush_r+0xd2>
 800c7fc:	4b2c      	ldr	r3, [pc, #176]	; (800c8b0 <__sflush_r+0x124>)
 800c7fe:	410b      	asrs	r3, r1
 800c800:	07db      	lsls	r3, r3, #31
 800c802:	d42c      	bmi.n	800c85e <__sflush_r+0xd2>
 800c804:	4b2b      	ldr	r3, [pc, #172]	; (800c8b4 <__sflush_r+0x128>)
 800c806:	4013      	ands	r3, r2
 800c808:	2200      	movs	r2, #0
 800c80a:	6062      	str	r2, [r4, #4]
 800c80c:	6922      	ldr	r2, [r4, #16]
 800c80e:	b21b      	sxth	r3, r3
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	6022      	str	r2, [r4, #0]
 800c814:	04db      	lsls	r3, r3, #19
 800c816:	d505      	bpl.n	800c824 <__sflush_r+0x98>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <__sflush_r+0x96>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d100      	bne.n	800c824 <__sflush_r+0x98>
 800c822:	6520      	str	r0, [r4, #80]	; 0x50
 800c824:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c826:	602e      	str	r6, [r5, #0]
 800c828:	2900      	cmp	r1, #0
 800c82a:	d0c1      	beq.n	800c7b0 <__sflush_r+0x24>
 800c82c:	0023      	movs	r3, r4
 800c82e:	3340      	adds	r3, #64	; 0x40
 800c830:	4299      	cmp	r1, r3
 800c832:	d002      	beq.n	800c83a <__sflush_r+0xae>
 800c834:	0028      	movs	r0, r5
 800c836:	f7fc fa53 	bl	8008ce0 <_free_r>
 800c83a:	2000      	movs	r0, #0
 800c83c:	6320      	str	r0, [r4, #48]	; 0x30
 800c83e:	e7b8      	b.n	800c7b2 <__sflush_r+0x26>
 800c840:	2301      	movs	r3, #1
 800c842:	0028      	movs	r0, r5
 800c844:	47b8      	blx	r7
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	d1c2      	bne.n	800c7d0 <__sflush_r+0x44>
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0bf      	beq.n	800c7d0 <__sflush_r+0x44>
 800c850:	2b1d      	cmp	r3, #29
 800c852:	d001      	beq.n	800c858 <__sflush_r+0xcc>
 800c854:	2b16      	cmp	r3, #22
 800c856:	d101      	bne.n	800c85c <__sflush_r+0xd0>
 800c858:	602e      	str	r6, [r5, #0]
 800c85a:	e7a9      	b.n	800c7b0 <__sflush_r+0x24>
 800c85c:	89a2      	ldrh	r2, [r4, #12]
 800c85e:	2340      	movs	r3, #64	; 0x40
 800c860:	4313      	orrs	r3, r2
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	e7a5      	b.n	800c7b2 <__sflush_r+0x26>
 800c866:	6926      	ldr	r6, [r4, #16]
 800c868:	2e00      	cmp	r6, #0
 800c86a:	d0a1      	beq.n	800c7b0 <__sflush_r+0x24>
 800c86c:	6827      	ldr	r7, [r4, #0]
 800c86e:	6026      	str	r6, [r4, #0]
 800c870:	1bbb      	subs	r3, r7, r6
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	2300      	movs	r3, #0
 800c876:	0789      	lsls	r1, r1, #30
 800c878:	d100      	bne.n	800c87c <__sflush_r+0xf0>
 800c87a:	6963      	ldr	r3, [r4, #20]
 800c87c:	60a3      	str	r3, [r4, #8]
 800c87e:	9b01      	ldr	r3, [sp, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	dc00      	bgt.n	800c886 <__sflush_r+0xfa>
 800c884:	e794      	b.n	800c7b0 <__sflush_r+0x24>
 800c886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c888:	0032      	movs	r2, r6
 800c88a:	001f      	movs	r7, r3
 800c88c:	0028      	movs	r0, r5
 800c88e:	9b01      	ldr	r3, [sp, #4]
 800c890:	69e1      	ldr	r1, [r4, #28]
 800c892:	47b8      	blx	r7
 800c894:	2800      	cmp	r0, #0
 800c896:	dc06      	bgt.n	800c8a6 <__sflush_r+0x11a>
 800c898:	2340      	movs	r3, #64	; 0x40
 800c89a:	2001      	movs	r0, #1
 800c89c:	89a2      	ldrh	r2, [r4, #12]
 800c89e:	4240      	negs	r0, r0
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	81a3      	strh	r3, [r4, #12]
 800c8a4:	e785      	b.n	800c7b2 <__sflush_r+0x26>
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	1836      	adds	r6, r6, r0
 800c8aa:	1a1b      	subs	r3, r3, r0
 800c8ac:	9301      	str	r3, [sp, #4]
 800c8ae:	e7e6      	b.n	800c87e <__sflush_r+0xf2>
 800c8b0:	dfbffffe 	.word	0xdfbffffe
 800c8b4:	fffff7ff 	.word	0xfffff7ff

0800c8b8 <_fflush_r>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	0005      	movs	r5, r0
 800c8bc:	000c      	movs	r4, r1
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d004      	beq.n	800c8cc <_fflush_r+0x14>
 800c8c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d101      	bne.n	800c8cc <_fflush_r+0x14>
 800c8c8:	f7fb ffe0 	bl	800888c <__sinit>
 800c8cc:	220c      	movs	r2, #12
 800c8ce:	5ea3      	ldrsh	r3, [r4, r2]
 800c8d0:	1e1e      	subs	r6, r3, #0
 800c8d2:	d015      	beq.n	800c900 <_fflush_r+0x48>
 800c8d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8d6:	07d2      	lsls	r2, r2, #31
 800c8d8:	d404      	bmi.n	800c8e4 <_fflush_r+0x2c>
 800c8da:	059b      	lsls	r3, r3, #22
 800c8dc:	d402      	bmi.n	800c8e4 <_fflush_r+0x2c>
 800c8de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e0:	f7fc f976 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800c8e4:	0021      	movs	r1, r4
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	f7ff ff50 	bl	800c78c <__sflush_r>
 800c8ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8ee:	0006      	movs	r6, r0
 800c8f0:	07db      	lsls	r3, r3, #31
 800c8f2:	d405      	bmi.n	800c900 <_fflush_r+0x48>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	059b      	lsls	r3, r3, #22
 800c8f8:	d402      	bmi.n	800c900 <_fflush_r+0x48>
 800c8fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8fc:	f7fc f969 	bl	8008bd2 <__retarget_lock_release_recursive>
 800c900:	0030      	movs	r0, r6
 800c902:	bd70      	pop	{r4, r5, r6, pc}

0800c904 <__sccl>:
 800c904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c906:	780b      	ldrb	r3, [r1, #0]
 800c908:	0004      	movs	r4, r0
 800c90a:	2b5e      	cmp	r3, #94	; 0x5e
 800c90c:	d019      	beq.n	800c942 <__sccl+0x3e>
 800c90e:	2200      	movs	r2, #0
 800c910:	1c4d      	adds	r5, r1, #1
 800c912:	0021      	movs	r1, r4
 800c914:	1c60      	adds	r0, r4, #1
 800c916:	30ff      	adds	r0, #255	; 0xff
 800c918:	700a      	strb	r2, [r1, #0]
 800c91a:	3101      	adds	r1, #1
 800c91c:	4281      	cmp	r1, r0
 800c91e:	d1fb      	bne.n	800c918 <__sccl+0x14>
 800c920:	1e68      	subs	r0, r5, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00c      	beq.n	800c940 <__sccl+0x3c>
 800c926:	2101      	movs	r1, #1
 800c928:	262d      	movs	r6, #45	; 0x2d
 800c92a:	404a      	eors	r2, r1
 800c92c:	0028      	movs	r0, r5
 800c92e:	54e2      	strb	r2, [r4, r3]
 800c930:	7801      	ldrb	r1, [r0, #0]
 800c932:	1c45      	adds	r5, r0, #1
 800c934:	292d      	cmp	r1, #45	; 0x2d
 800c936:	d00c      	beq.n	800c952 <__sccl+0x4e>
 800c938:	295d      	cmp	r1, #93	; 0x5d
 800c93a:	d01d      	beq.n	800c978 <__sccl+0x74>
 800c93c:	2900      	cmp	r1, #0
 800c93e:	d104      	bne.n	800c94a <__sccl+0x46>
 800c940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c942:	2201      	movs	r2, #1
 800c944:	784b      	ldrb	r3, [r1, #1]
 800c946:	1c8d      	adds	r5, r1, #2
 800c948:	e7e3      	b.n	800c912 <__sccl+0xe>
 800c94a:	000b      	movs	r3, r1
 800c94c:	e7ee      	b.n	800c92c <__sccl+0x28>
 800c94e:	0033      	movs	r3, r6
 800c950:	e7ec      	b.n	800c92c <__sccl+0x28>
 800c952:	7841      	ldrb	r1, [r0, #1]
 800c954:	295d      	cmp	r1, #93	; 0x5d
 800c956:	d0fa      	beq.n	800c94e <__sccl+0x4a>
 800c958:	428b      	cmp	r3, r1
 800c95a:	dcf8      	bgt.n	800c94e <__sccl+0x4a>
 800c95c:	001d      	movs	r5, r3
 800c95e:	3002      	adds	r0, #2
 800c960:	3501      	adds	r5, #1
 800c962:	5562      	strb	r2, [r4, r5]
 800c964:	42a9      	cmp	r1, r5
 800c966:	dcfb      	bgt.n	800c960 <__sccl+0x5c>
 800c968:	2500      	movs	r5, #0
 800c96a:	1c5f      	adds	r7, r3, #1
 800c96c:	428b      	cmp	r3, r1
 800c96e:	da01      	bge.n	800c974 <__sccl+0x70>
 800c970:	1acd      	subs	r5, r1, r3
 800c972:	3d01      	subs	r5, #1
 800c974:	197b      	adds	r3, r7, r5
 800c976:	e7db      	b.n	800c930 <__sccl+0x2c>
 800c978:	0028      	movs	r0, r5
 800c97a:	e7e1      	b.n	800c940 <__sccl+0x3c>

0800c97c <_localeconv_r>:
 800c97c:	4800      	ldr	r0, [pc, #0]	; (800c980 <_localeconv_r+0x4>)
 800c97e:	4770      	bx	lr
 800c980:	20000520 	.word	0x20000520

0800c984 <__libc_fini_array>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	4c07      	ldr	r4, [pc, #28]	; (800c9a4 <__libc_fini_array+0x20>)
 800c988:	4d07      	ldr	r5, [pc, #28]	; (800c9a8 <__libc_fini_array+0x24>)
 800c98a:	1b64      	subs	r4, r4, r5
 800c98c:	10a4      	asrs	r4, r4, #2
 800c98e:	2c00      	cmp	r4, #0
 800c990:	d102      	bne.n	800c998 <__libc_fini_array+0x14>
 800c992:	f002 fd81 	bl	800f498 <_fini>
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	3c01      	subs	r4, #1
 800c99a:	00a3      	lsls	r3, r4, #2
 800c99c:	58eb      	ldr	r3, [r5, r3]
 800c99e:	4798      	blx	r3
 800c9a0:	e7f5      	b.n	800c98e <__libc_fini_array+0xa>
 800c9a2:	46c0      	nop			; (mov r8, r8)
 800c9a4:	0800fb60 	.word	0x0800fb60
 800c9a8:	0800fb5c 	.word	0x0800fb5c

0800c9ac <memchr>:
 800c9ac:	b2c9      	uxtb	r1, r1
 800c9ae:	1882      	adds	r2, r0, r2
 800c9b0:	4290      	cmp	r0, r2
 800c9b2:	d101      	bne.n	800c9b8 <memchr+0xc>
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	4770      	bx	lr
 800c9b8:	7803      	ldrb	r3, [r0, #0]
 800c9ba:	428b      	cmp	r3, r1
 800c9bc:	d0fb      	beq.n	800c9b6 <memchr+0xa>
 800c9be:	3001      	adds	r0, #1
 800c9c0:	e7f6      	b.n	800c9b0 <memchr+0x4>
	...

0800c9c4 <frexp>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	0014      	movs	r4, r2
 800c9c8:	2500      	movs	r5, #0
 800c9ca:	6025      	str	r5, [r4, #0]
 800c9cc:	4d10      	ldr	r5, [pc, #64]	; (800ca10 <frexp+0x4c>)
 800c9ce:	004b      	lsls	r3, r1, #1
 800c9d0:	000a      	movs	r2, r1
 800c9d2:	085b      	lsrs	r3, r3, #1
 800c9d4:	42ab      	cmp	r3, r5
 800c9d6:	dc1a      	bgt.n	800ca0e <frexp+0x4a>
 800c9d8:	001d      	movs	r5, r3
 800c9da:	4305      	orrs	r5, r0
 800c9dc:	d017      	beq.n	800ca0e <frexp+0x4a>
 800c9de:	4d0d      	ldr	r5, [pc, #52]	; (800ca14 <frexp+0x50>)
 800c9e0:	4229      	tst	r1, r5
 800c9e2:	d109      	bne.n	800c9f8 <frexp+0x34>
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <frexp+0x54>)
 800c9e8:	f7f4 fe40 	bl	800166c <__aeabi_dmul>
 800c9ec:	2536      	movs	r5, #54	; 0x36
 800c9ee:	000a      	movs	r2, r1
 800c9f0:	004b      	lsls	r3, r1, #1
 800c9f2:	426d      	negs	r5, r5
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	6025      	str	r5, [r4, #0]
 800c9f8:	4d08      	ldr	r5, [pc, #32]	; (800ca1c <frexp+0x58>)
 800c9fa:	151b      	asrs	r3, r3, #20
 800c9fc:	195b      	adds	r3, r3, r5
 800c9fe:	6825      	ldr	r5, [r4, #0]
 800ca00:	18eb      	adds	r3, r5, r3
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <frexp+0x5c>)
 800ca06:	401a      	ands	r2, r3
 800ca08:	4b06      	ldr	r3, [pc, #24]	; (800ca24 <frexp+0x60>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	0019      	movs	r1, r3
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	7fefffff 	.word	0x7fefffff
 800ca14:	7ff00000 	.word	0x7ff00000
 800ca18:	43500000 	.word	0x43500000
 800ca1c:	fffffc02 	.word	0xfffffc02
 800ca20:	800fffff 	.word	0x800fffff
 800ca24:	3fe00000 	.word	0x3fe00000

0800ca28 <__register_exitproc>:
 800ca28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca2a:	4f1c      	ldr	r7, [pc, #112]	; (800ca9c <__register_exitproc+0x74>)
 800ca2c:	0004      	movs	r4, r0
 800ca2e:	6838      	ldr	r0, [r7, #0]
 800ca30:	0016      	movs	r6, r2
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	9100      	str	r1, [sp, #0]
 800ca36:	f7fc f8cb 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800ca3a:	4a19      	ldr	r2, [pc, #100]	; (800caa0 <__register_exitproc+0x78>)
 800ca3c:	6813      	ldr	r3, [r2, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d101      	bne.n	800ca46 <__register_exitproc+0x1e>
 800ca42:	4b18      	ldr	r3, [pc, #96]	; (800caa4 <__register_exitproc+0x7c>)
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	6838      	ldr	r0, [r7, #0]
 800ca4a:	2a1f      	cmp	r2, #31
 800ca4c:	dd04      	ble.n	800ca58 <__register_exitproc+0x30>
 800ca4e:	f7fc f8c0 	bl	8008bd2 <__retarget_lock_release_recursive>
 800ca52:	2001      	movs	r0, #1
 800ca54:	4240      	negs	r0, r0
 800ca56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca58:	2c00      	cmp	r4, #0
 800ca5a:	d014      	beq.n	800ca86 <__register_exitproc+0x5e>
 800ca5c:	0091      	lsls	r1, r2, #2
 800ca5e:	1859      	adds	r1, r3, r1
 800ca60:	000f      	movs	r7, r1
 800ca62:	3788      	adds	r7, #136	; 0x88
 800ca64:	603e      	str	r6, [r7, #0]
 800ca66:	2701      	movs	r7, #1
 800ca68:	001e      	movs	r6, r3
 800ca6a:	4097      	lsls	r7, r2
 800ca6c:	3685      	adds	r6, #133	; 0x85
 800ca6e:	36ff      	adds	r6, #255	; 0xff
 800ca70:	6875      	ldr	r5, [r6, #4]
 800ca72:	31fc      	adds	r1, #252	; 0xfc
 800ca74:	433d      	orrs	r5, r7
 800ca76:	6075      	str	r5, [r6, #4]
 800ca78:	9d01      	ldr	r5, [sp, #4]
 800ca7a:	60cd      	str	r5, [r1, #12]
 800ca7c:	2c02      	cmp	r4, #2
 800ca7e:	d102      	bne.n	800ca86 <__register_exitproc+0x5e>
 800ca80:	68b1      	ldr	r1, [r6, #8]
 800ca82:	4339      	orrs	r1, r7
 800ca84:	60b1      	str	r1, [r6, #8]
 800ca86:	1c51      	adds	r1, r2, #1
 800ca88:	6059      	str	r1, [r3, #4]
 800ca8a:	3202      	adds	r2, #2
 800ca8c:	9900      	ldr	r1, [sp, #0]
 800ca8e:	0092      	lsls	r2, r2, #2
 800ca90:	50d1      	str	r1, [r2, r3]
 800ca92:	f7fc f89e 	bl	8008bd2 <__retarget_lock_release_recursive>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e7dd      	b.n	800ca56 <__register_exitproc+0x2e>
 800ca9a:	46c0      	nop			; (mov r8, r8)
 800ca9c:	200006c4 	.word	0x200006c4
 800caa0:	20000bbc 	.word	0x20000bbc
 800caa4:	20000bc0 	.word	0x20000bc0

0800caa8 <__assert_func>:
 800caa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800caaa:	0014      	movs	r4, r2
 800caac:	001a      	movs	r2, r3
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__assert_func+0x2c>)
 800cab0:	0005      	movs	r5, r0
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	000e      	movs	r6, r1
 800cab6:	68d8      	ldr	r0, [r3, #12]
 800cab8:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <__assert_func+0x30>)
 800caba:	2c00      	cmp	r4, #0
 800cabc:	d101      	bne.n	800cac2 <__assert_func+0x1a>
 800cabe:	4b07      	ldr	r3, [pc, #28]	; (800cadc <__assert_func+0x34>)
 800cac0:	001c      	movs	r4, r3
 800cac2:	4907      	ldr	r1, [pc, #28]	; (800cae0 <__assert_func+0x38>)
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	9402      	str	r4, [sp, #8]
 800cac8:	002b      	movs	r3, r5
 800caca:	9600      	str	r6, [sp, #0]
 800cacc:	f001 faa6 	bl	800e01c <fiprintf>
 800cad0:	f002 fb8e 	bl	800f1f0 <abort>
 800cad4:	200006c0 	.word	0x200006c0
 800cad8:	0800fa88 	.word	0x0800fa88
 800cadc:	0800fac3 	.word	0x0800fac3
 800cae0:	0800fa95 	.word	0x0800fa95

0800cae4 <_calloc_r>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	2400      	movs	r4, #0
 800cae8:	0c0b      	lsrs	r3, r1, #16
 800caea:	0c16      	lsrs	r6, r2, #16
 800caec:	42a3      	cmp	r3, r4
 800caee:	d133      	bne.n	800cb58 <_calloc_r+0x74>
 800caf0:	42a6      	cmp	r6, r4
 800caf2:	d121      	bne.n	800cb38 <_calloc_r+0x54>
 800caf4:	b28b      	uxth	r3, r1
 800caf6:	b291      	uxth	r1, r2
 800caf8:	4359      	muls	r1, r3
 800cafa:	f7fa fd53 	bl	80075a4 <_malloc_r>
 800cafe:	1e05      	subs	r5, r0, #0
 800cb00:	d033      	beq.n	800cb6a <_calloc_r+0x86>
 800cb02:	0003      	movs	r3, r0
 800cb04:	3b08      	subs	r3, #8
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	2303      	movs	r3, #3
 800cb0a:	439a      	bics	r2, r3
 800cb0c:	3a04      	subs	r2, #4
 800cb0e:	2a24      	cmp	r2, #36	; 0x24
 800cb10:	d832      	bhi.n	800cb78 <_calloc_r+0x94>
 800cb12:	0003      	movs	r3, r0
 800cb14:	2a13      	cmp	r2, #19
 800cb16:	d90a      	bls.n	800cb2e <_calloc_r+0x4a>
 800cb18:	6004      	str	r4, [r0, #0]
 800cb1a:	6044      	str	r4, [r0, #4]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	2a1b      	cmp	r2, #27
 800cb20:	d905      	bls.n	800cb2e <_calloc_r+0x4a>
 800cb22:	6084      	str	r4, [r0, #8]
 800cb24:	60c4      	str	r4, [r0, #12]
 800cb26:	2a24      	cmp	r2, #36	; 0x24
 800cb28:	d021      	beq.n	800cb6e <_calloc_r+0x8a>
 800cb2a:	0003      	movs	r3, r0
 800cb2c:	3310      	adds	r3, #16
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	605a      	str	r2, [r3, #4]
 800cb34:	609a      	str	r2, [r3, #8]
 800cb36:	e018      	b.n	800cb6a <_calloc_r+0x86>
 800cb38:	1c33      	adds	r3, r6, #0
 800cb3a:	1c0d      	adds	r5, r1, #0
 800cb3c:	b289      	uxth	r1, r1
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	434a      	muls	r2, r1
 800cb42:	b2ad      	uxth	r5, r5
 800cb44:	b299      	uxth	r1, r3
 800cb46:	4369      	muls	r1, r5
 800cb48:	0c13      	lsrs	r3, r2, #16
 800cb4a:	18c9      	adds	r1, r1, r3
 800cb4c:	0c0b      	lsrs	r3, r1, #16
 800cb4e:	d107      	bne.n	800cb60 <_calloc_r+0x7c>
 800cb50:	0409      	lsls	r1, r1, #16
 800cb52:	b292      	uxth	r2, r2
 800cb54:	4311      	orrs	r1, r2
 800cb56:	e7d0      	b.n	800cafa <_calloc_r+0x16>
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	d101      	bne.n	800cb60 <_calloc_r+0x7c>
 800cb5c:	1c15      	adds	r5, r2, #0
 800cb5e:	e7ed      	b.n	800cb3c <_calloc_r+0x58>
 800cb60:	f7fc f80a 	bl	8008b78 <__errno>
 800cb64:	230c      	movs	r3, #12
 800cb66:	2500      	movs	r5, #0
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	0028      	movs	r0, r5
 800cb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb6e:	0003      	movs	r3, r0
 800cb70:	6104      	str	r4, [r0, #16]
 800cb72:	3318      	adds	r3, #24
 800cb74:	6144      	str	r4, [r0, #20]
 800cb76:	e7da      	b.n	800cb2e <_calloc_r+0x4a>
 800cb78:	2100      	movs	r1, #0
 800cb7a:	f7fb ff51 	bl	8008a20 <memset>
 800cb7e:	e7f4      	b.n	800cb6a <_calloc_r+0x86>

0800cb80 <quorem>:
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	6902      	ldr	r2, [r0, #16]
 800cb84:	690b      	ldr	r3, [r1, #16]
 800cb86:	b089      	sub	sp, #36	; 0x24
 800cb88:	0007      	movs	r7, r0
 800cb8a:	9104      	str	r1, [sp, #16]
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	db69      	blt.n	800cc66 <quorem+0xe6>
 800cb92:	3b01      	subs	r3, #1
 800cb94:	009c      	lsls	r4, r3, #2
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	000b      	movs	r3, r1
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	9306      	str	r3, [sp, #24]
 800cb9e:	191b      	adds	r3, r3, r4
 800cba0:	9305      	str	r3, [sp, #20]
 800cba2:	003b      	movs	r3, r7
 800cba4:	3314      	adds	r3, #20
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	191c      	adds	r4, r3, r4
 800cbaa:	9b05      	ldr	r3, [sp, #20]
 800cbac:	6826      	ldr	r6, [r4, #0]
 800cbae:	681d      	ldr	r5, [r3, #0]
 800cbb0:	0030      	movs	r0, r6
 800cbb2:	3501      	adds	r5, #1
 800cbb4:	0029      	movs	r1, r5
 800cbb6:	f7f3 fac1 	bl	800013c <__udivsi3>
 800cbba:	9002      	str	r0, [sp, #8]
 800cbbc:	42ae      	cmp	r6, r5
 800cbbe:	d329      	bcc.n	800cc14 <quorem+0x94>
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	2600      	movs	r6, #0
 800cbc4:	469c      	mov	ip, r3
 800cbc6:	9d03      	ldr	r5, [sp, #12]
 800cbc8:	9606      	str	r6, [sp, #24]
 800cbca:	4662      	mov	r2, ip
 800cbcc:	ca08      	ldmia	r2!, {r3}
 800cbce:	6828      	ldr	r0, [r5, #0]
 800cbd0:	4694      	mov	ip, r2
 800cbd2:	9a02      	ldr	r2, [sp, #8]
 800cbd4:	b299      	uxth	r1, r3
 800cbd6:	4351      	muls	r1, r2
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	4353      	muls	r3, r2
 800cbdc:	1989      	adds	r1, r1, r6
 800cbde:	0c0a      	lsrs	r2, r1, #16
 800cbe0:	189b      	adds	r3, r3, r2
 800cbe2:	9307      	str	r3, [sp, #28]
 800cbe4:	0c1e      	lsrs	r6, r3, #16
 800cbe6:	9b06      	ldr	r3, [sp, #24]
 800cbe8:	b282      	uxth	r2, r0
 800cbea:	18d2      	adds	r2, r2, r3
 800cbec:	466b      	mov	r3, sp
 800cbee:	b289      	uxth	r1, r1
 800cbf0:	8b9b      	ldrh	r3, [r3, #28]
 800cbf2:	1a52      	subs	r2, r2, r1
 800cbf4:	0c01      	lsrs	r1, r0, #16
 800cbf6:	1ac9      	subs	r1, r1, r3
 800cbf8:	1413      	asrs	r3, r2, #16
 800cbfa:	18cb      	adds	r3, r1, r3
 800cbfc:	1419      	asrs	r1, r3, #16
 800cbfe:	b292      	uxth	r2, r2
 800cc00:	041b      	lsls	r3, r3, #16
 800cc02:	4313      	orrs	r3, r2
 800cc04:	c508      	stmia	r5!, {r3}
 800cc06:	9b05      	ldr	r3, [sp, #20]
 800cc08:	9106      	str	r1, [sp, #24]
 800cc0a:	4563      	cmp	r3, ip
 800cc0c:	d2dd      	bcs.n	800cbca <quorem+0x4a>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d030      	beq.n	800cc76 <quorem+0xf6>
 800cc14:	0038      	movs	r0, r7
 800cc16:	9904      	ldr	r1, [sp, #16]
 800cc18:	f7fc ff04 	bl	8009a24 <__mcmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	db21      	blt.n	800cc64 <quorem+0xe4>
 800cc20:	0038      	movs	r0, r7
 800cc22:	2600      	movs	r6, #0
 800cc24:	9b02      	ldr	r3, [sp, #8]
 800cc26:	9c04      	ldr	r4, [sp, #16]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	3014      	adds	r0, #20
 800cc2e:	3414      	adds	r4, #20
 800cc30:	6803      	ldr	r3, [r0, #0]
 800cc32:	cc02      	ldmia	r4!, {r1}
 800cc34:	b29d      	uxth	r5, r3
 800cc36:	19ad      	adds	r5, r5, r6
 800cc38:	b28a      	uxth	r2, r1
 800cc3a:	1aaa      	subs	r2, r5, r2
 800cc3c:	0c09      	lsrs	r1, r1, #16
 800cc3e:	0c1b      	lsrs	r3, r3, #16
 800cc40:	1a5b      	subs	r3, r3, r1
 800cc42:	1411      	asrs	r1, r2, #16
 800cc44:	185b      	adds	r3, r3, r1
 800cc46:	141e      	asrs	r6, r3, #16
 800cc48:	b292      	uxth	r2, r2
 800cc4a:	041b      	lsls	r3, r3, #16
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	c008      	stmia	r0!, {r3}
 800cc50:	9b05      	ldr	r3, [sp, #20]
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	d2ec      	bcs.n	800cc30 <quorem+0xb0>
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	9a03      	ldr	r2, [sp, #12]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	18d3      	adds	r3, r2, r3
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	d015      	beq.n	800cc90 <quorem+0x110>
 800cc64:	9802      	ldr	r0, [sp, #8]
 800cc66:	b009      	add	sp, #36	; 0x24
 800cc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <quorem+0xfe>
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	3c04      	subs	r4, #4
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	d3f5      	bcc.n	800cc6a <quorem+0xea>
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	613b      	str	r3, [r7, #16]
 800cc82:	e7c7      	b.n	800cc14 <quorem+0x94>
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	d106      	bne.n	800cc98 <quorem+0x118>
 800cc8a:	9a01      	ldr	r2, [sp, #4]
 800cc8c:	3a01      	subs	r2, #1
 800cc8e:	9201      	str	r2, [sp, #4]
 800cc90:	9a03      	ldr	r2, [sp, #12]
 800cc92:	3b04      	subs	r3, #4
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d3f5      	bcc.n	800cc84 <quorem+0x104>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	613b      	str	r3, [r7, #16]
 800cc9c:	e7e2      	b.n	800cc64 <quorem+0xe4>
	...

0800cca0 <_dtoa_r>:
 800cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cca2:	0014      	movs	r4, r2
 800cca4:	001d      	movs	r5, r3
 800cca6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800cca8:	b09d      	sub	sp, #116	; 0x74
 800ccaa:	9408      	str	r4, [sp, #32]
 800ccac:	9509      	str	r5, [sp, #36]	; 0x24
 800ccae:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ccb0:	9004      	str	r0, [sp, #16]
 800ccb2:	2900      	cmp	r1, #0
 800ccb4:	d009      	beq.n	800ccca <_dtoa_r+0x2a>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ccba:	4093      	lsls	r3, r2
 800ccbc:	604a      	str	r2, [r1, #4]
 800ccbe:	608b      	str	r3, [r1, #8]
 800ccc0:	f7fc fc56 	bl	8009570 <_Bfree>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9a04      	ldr	r2, [sp, #16]
 800ccc8:	6393      	str	r3, [r2, #56]	; 0x38
 800ccca:	2d00      	cmp	r5, #0
 800cccc:	da1e      	bge.n	800cd0c <_dtoa_r+0x6c>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	006b      	lsls	r3, r5, #1
 800ccd4:	085b      	lsrs	r3, r3, #1
 800ccd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ccda:	4bb5      	ldr	r3, [pc, #724]	; (800cfb0 <_dtoa_r+0x310>)
 800ccdc:	4ab4      	ldr	r2, [pc, #720]	; (800cfb0 <_dtoa_r+0x310>)
 800ccde:	403b      	ands	r3, r7
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d116      	bne.n	800cd12 <_dtoa_r+0x72>
 800cce4:	4bb3      	ldr	r3, [pc, #716]	; (800cfb4 <_dtoa_r+0x314>)
 800cce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	033b      	lsls	r3, r7, #12
 800ccec:	0b1b      	lsrs	r3, r3, #12
 800ccee:	4323      	orrs	r3, r4
 800ccf0:	d101      	bne.n	800ccf6 <_dtoa_r+0x56>
 800ccf2:	f000 fdb2 	bl	800d85a <_dtoa_r+0xbba>
 800ccf6:	4bb0      	ldr	r3, [pc, #704]	; (800cfb8 <_dtoa_r+0x318>)
 800ccf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ccfa:	9306      	str	r3, [sp, #24]
 800ccfc:	2a00      	cmp	r2, #0
 800ccfe:	d002      	beq.n	800cd06 <_dtoa_r+0x66>
 800cd00:	4bae      	ldr	r3, [pc, #696]	; (800cfbc <_dtoa_r+0x31c>)
 800cd02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cd04:	6013      	str	r3, [r2, #0]
 800cd06:	9806      	ldr	r0, [sp, #24]
 800cd08:	b01d      	add	sp, #116	; 0x74
 800cd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	6033      	str	r3, [r6, #0]
 800cd10:	e7e2      	b.n	800ccd8 <_dtoa_r+0x38>
 800cd12:	9a08      	ldr	r2, [sp, #32]
 800cd14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd16:	9210      	str	r2, [sp, #64]	; 0x40
 800cd18:	9311      	str	r3, [sp, #68]	; 0x44
 800cd1a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd1e:	2200      	movs	r2, #0
 800cd20:	2300      	movs	r3, #0
 800cd22:	f7f3 fb91 	bl	8000448 <__aeabi_dcmpeq>
 800cd26:	1e06      	subs	r6, r0, #0
 800cd28:	d009      	beq.n	800cd3e <_dtoa_r+0x9e>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	4ba3      	ldr	r3, [pc, #652]	; (800cfc0 <_dtoa_r+0x320>)
 800cd32:	9306      	str	r3, [sp, #24]
 800cd34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0e5      	beq.n	800cd06 <_dtoa_r+0x66>
 800cd3a:	4ba2      	ldr	r3, [pc, #648]	; (800cfc4 <_dtoa_r+0x324>)
 800cd3c:	e7e1      	b.n	800cd02 <_dtoa_r+0x62>
 800cd3e:	ab1a      	add	r3, sp, #104	; 0x68
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	ab1b      	add	r3, sp, #108	; 0x6c
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	9804      	ldr	r0, [sp, #16]
 800cd48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd4c:	f7fc ff86 	bl	8009c5c <__d2b>
 800cd50:	007a      	lsls	r2, r7, #1
 800cd52:	9005      	str	r0, [sp, #20]
 800cd54:	0d52      	lsrs	r2, r2, #21
 800cd56:	d100      	bne.n	800cd5a <_dtoa_r+0xba>
 800cd58:	e07b      	b.n	800ce52 <_dtoa_r+0x1b2>
 800cd5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd5c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd5e:	0319      	lsls	r1, r3, #12
 800cd60:	4b99      	ldr	r3, [pc, #612]	; (800cfc8 <_dtoa_r+0x328>)
 800cd62:	0b09      	lsrs	r1, r1, #12
 800cd64:	430b      	orrs	r3, r1
 800cd66:	4999      	ldr	r1, [pc, #612]	; (800cfcc <_dtoa_r+0x32c>)
 800cd68:	1857      	adds	r7, r2, r1
 800cd6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd6e:	0019      	movs	r1, r3
 800cd70:	2200      	movs	r2, #0
 800cd72:	4b97      	ldr	r3, [pc, #604]	; (800cfd0 <_dtoa_r+0x330>)
 800cd74:	f7f4 ff3c 	bl	8001bf0 <__aeabi_dsub>
 800cd78:	4a96      	ldr	r2, [pc, #600]	; (800cfd4 <_dtoa_r+0x334>)
 800cd7a:	4b97      	ldr	r3, [pc, #604]	; (800cfd8 <_dtoa_r+0x338>)
 800cd7c:	f7f4 fc76 	bl	800166c <__aeabi_dmul>
 800cd80:	4a96      	ldr	r2, [pc, #600]	; (800cfdc <_dtoa_r+0x33c>)
 800cd82:	4b97      	ldr	r3, [pc, #604]	; (800cfe0 <_dtoa_r+0x340>)
 800cd84:	f7f3 fd18 	bl	80007b8 <__aeabi_dadd>
 800cd88:	0004      	movs	r4, r0
 800cd8a:	0038      	movs	r0, r7
 800cd8c:	000d      	movs	r5, r1
 800cd8e:	f7f5 fb05 	bl	800239c <__aeabi_i2d>
 800cd92:	4a94      	ldr	r2, [pc, #592]	; (800cfe4 <_dtoa_r+0x344>)
 800cd94:	4b94      	ldr	r3, [pc, #592]	; (800cfe8 <_dtoa_r+0x348>)
 800cd96:	f7f4 fc69 	bl	800166c <__aeabi_dmul>
 800cd9a:	0002      	movs	r2, r0
 800cd9c:	000b      	movs	r3, r1
 800cd9e:	0020      	movs	r0, r4
 800cda0:	0029      	movs	r1, r5
 800cda2:	f7f3 fd09 	bl	80007b8 <__aeabi_dadd>
 800cda6:	0004      	movs	r4, r0
 800cda8:	000d      	movs	r5, r1
 800cdaa:	f7f5 fac1 	bl	8002330 <__aeabi_d2iz>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	9003      	str	r0, [sp, #12]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	0020      	movs	r0, r4
 800cdb6:	0029      	movs	r1, r5
 800cdb8:	f7f3 fb4c 	bl	8000454 <__aeabi_dcmplt>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d00b      	beq.n	800cdd8 <_dtoa_r+0x138>
 800cdc0:	9803      	ldr	r0, [sp, #12]
 800cdc2:	f7f5 faeb 	bl	800239c <__aeabi_i2d>
 800cdc6:	002b      	movs	r3, r5
 800cdc8:	0022      	movs	r2, r4
 800cdca:	f7f3 fb3d 	bl	8000448 <__aeabi_dcmpeq>
 800cdce:	4243      	negs	r3, r0
 800cdd0:	4158      	adcs	r0, r3
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	1a1b      	subs	r3, r3, r0
 800cdd6:	9303      	str	r3, [sp, #12]
 800cdd8:	2301      	movs	r3, #1
 800cdda:	9316      	str	r3, [sp, #88]	; 0x58
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	2b16      	cmp	r3, #22
 800cde0:	d810      	bhi.n	800ce04 <_dtoa_r+0x164>
 800cde2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cde4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cde6:	9a03      	ldr	r2, [sp, #12]
 800cde8:	4b80      	ldr	r3, [pc, #512]	; (800cfec <_dtoa_r+0x34c>)
 800cdea:	00d2      	lsls	r2, r2, #3
 800cdec:	189b      	adds	r3, r3, r2
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f7f3 fb2f 	bl	8000454 <__aeabi_dcmplt>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d047      	beq.n	800ce8a <_dtoa_r+0x1ea>
 800cdfa:	9b03      	ldr	r3, [sp, #12]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	9303      	str	r3, [sp, #12]
 800ce00:	2300      	movs	r3, #0
 800ce02:	9316      	str	r3, [sp, #88]	; 0x58
 800ce04:	2200      	movs	r2, #0
 800ce06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ce08:	920a      	str	r2, [sp, #40]	; 0x28
 800ce0a:	1bdb      	subs	r3, r3, r7
 800ce0c:	1e5a      	subs	r2, r3, #1
 800ce0e:	d53e      	bpl.n	800ce8e <_dtoa_r+0x1ee>
 800ce10:	2201      	movs	r2, #1
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	930a      	str	r3, [sp, #40]	; 0x28
 800ce16:	2300      	movs	r3, #0
 800ce18:	930c      	str	r3, [sp, #48]	; 0x30
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	db38      	blt.n	800ce92 <_dtoa_r+0x1f2>
 800ce20:	9a03      	ldr	r2, [sp, #12]
 800ce22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce24:	4694      	mov	ip, r2
 800ce26:	4463      	add	r3, ip
 800ce28:	930c      	str	r3, [sp, #48]	; 0x30
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ce2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ce30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce32:	2401      	movs	r4, #1
 800ce34:	2b09      	cmp	r3, #9
 800ce36:	d867      	bhi.n	800cf08 <_dtoa_r+0x268>
 800ce38:	2b05      	cmp	r3, #5
 800ce3a:	dd02      	ble.n	800ce42 <_dtoa_r+0x1a2>
 800ce3c:	2400      	movs	r4, #0
 800ce3e:	3b04      	subs	r3, #4
 800ce40:	9322      	str	r3, [sp, #136]	; 0x88
 800ce42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce44:	1e98      	subs	r0, r3, #2
 800ce46:	2803      	cmp	r0, #3
 800ce48:	d867      	bhi.n	800cf1a <_dtoa_r+0x27a>
 800ce4a:	f7f3 f963 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ce4e:	3a2b      	.short	0x3a2b
 800ce50:	5b38      	.short	0x5b38
 800ce52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce54:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ce56:	18f6      	adds	r6, r6, r3
 800ce58:	4b65      	ldr	r3, [pc, #404]	; (800cff0 <_dtoa_r+0x350>)
 800ce5a:	18f2      	adds	r2, r6, r3
 800ce5c:	2a20      	cmp	r2, #32
 800ce5e:	dd0f      	ble.n	800ce80 <_dtoa_r+0x1e0>
 800ce60:	2340      	movs	r3, #64	; 0x40
 800ce62:	1a9b      	subs	r3, r3, r2
 800ce64:	409f      	lsls	r7, r3
 800ce66:	4b63      	ldr	r3, [pc, #396]	; (800cff4 <_dtoa_r+0x354>)
 800ce68:	0038      	movs	r0, r7
 800ce6a:	18f3      	adds	r3, r6, r3
 800ce6c:	40dc      	lsrs	r4, r3
 800ce6e:	4320      	orrs	r0, r4
 800ce70:	f7f5 fac4 	bl	80023fc <__aeabi_ui2d>
 800ce74:	2201      	movs	r2, #1
 800ce76:	4b60      	ldr	r3, [pc, #384]	; (800cff8 <_dtoa_r+0x358>)
 800ce78:	1e77      	subs	r7, r6, #1
 800ce7a:	18cb      	adds	r3, r1, r3
 800ce7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce7e:	e776      	b.n	800cd6e <_dtoa_r+0xce>
 800ce80:	2320      	movs	r3, #32
 800ce82:	0020      	movs	r0, r4
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	4098      	lsls	r0, r3
 800ce88:	e7f2      	b.n	800ce70 <_dtoa_r+0x1d0>
 800ce8a:	9016      	str	r0, [sp, #88]	; 0x58
 800ce8c:	e7ba      	b.n	800ce04 <_dtoa_r+0x164>
 800ce8e:	920c      	str	r2, [sp, #48]	; 0x30
 800ce90:	e7c3      	b.n	800ce1a <_dtoa_r+0x17a>
 800ce92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce94:	9a03      	ldr	r2, [sp, #12]
 800ce96:	1a9b      	subs	r3, r3, r2
 800ce98:	930a      	str	r3, [sp, #40]	; 0x28
 800ce9a:	4253      	negs	r3, r2
 800ce9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce9e:	2300      	movs	r3, #0
 800cea0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cea2:	e7c5      	b.n	800ce30 <_dtoa_r+0x190>
 800cea4:	2300      	movs	r3, #0
 800cea6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ceaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	dc13      	bgt.n	800ceda <_dtoa_r+0x23a>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	001a      	movs	r2, r3
 800ceb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceb8:	9307      	str	r3, [sp, #28]
 800ceba:	9223      	str	r2, [sp, #140]	; 0x8c
 800cebc:	e00d      	b.n	800ceda <_dtoa_r+0x23a>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e7f1      	b.n	800cea6 <_dtoa_r+0x206>
 800cec2:	2300      	movs	r3, #0
 800cec4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cec6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cec8:	4694      	mov	ip, r2
 800ceca:	9b03      	ldr	r3, [sp, #12]
 800cecc:	4463      	add	r3, ip
 800cece:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced0:	3301      	adds	r3, #1
 800ced2:	9307      	str	r3, [sp, #28]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	dc00      	bgt.n	800ceda <_dtoa_r+0x23a>
 800ced8:	2301      	movs	r3, #1
 800ceda:	2100      	movs	r1, #0
 800cedc:	2204      	movs	r2, #4
 800cede:	0010      	movs	r0, r2
 800cee0:	3014      	adds	r0, #20
 800cee2:	4298      	cmp	r0, r3
 800cee4:	d91d      	bls.n	800cf22 <_dtoa_r+0x282>
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	0018      	movs	r0, r3
 800ceea:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ceec:	f7fc fb18 	bl	8009520 <_Balloc>
 800cef0:	9006      	str	r0, [sp, #24]
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d118      	bne.n	800cf28 <_dtoa_r+0x288>
 800cef6:	21b0      	movs	r1, #176	; 0xb0
 800cef8:	4b40      	ldr	r3, [pc, #256]	; (800cffc <_dtoa_r+0x35c>)
 800cefa:	4841      	ldr	r0, [pc, #260]	; (800d000 <_dtoa_r+0x360>)
 800cefc:	9a06      	ldr	r2, [sp, #24]
 800cefe:	31ff      	adds	r1, #255	; 0xff
 800cf00:	f7ff fdd2 	bl	800caa8 <__assert_func>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e7dd      	b.n	800cec4 <_dtoa_r+0x224>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	940f      	str	r4, [sp, #60]	; 0x3c
 800cf0c:	9322      	str	r3, [sp, #136]	; 0x88
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf12:	9307      	str	r3, [sp, #28]
 800cf14:	2200      	movs	r2, #0
 800cf16:	3313      	adds	r3, #19
 800cf18:	e7cf      	b.n	800ceba <_dtoa_r+0x21a>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf1e:	3b02      	subs	r3, #2
 800cf20:	e7f6      	b.n	800cf10 <_dtoa_r+0x270>
 800cf22:	3101      	adds	r1, #1
 800cf24:	0052      	lsls	r2, r2, #1
 800cf26:	e7da      	b.n	800cede <_dtoa_r+0x23e>
 800cf28:	9b04      	ldr	r3, [sp, #16]
 800cf2a:	9a06      	ldr	r2, [sp, #24]
 800cf2c:	639a      	str	r2, [r3, #56]	; 0x38
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	2b0e      	cmp	r3, #14
 800cf32:	d900      	bls.n	800cf36 <_dtoa_r+0x296>
 800cf34:	e0e3      	b.n	800d0fe <_dtoa_r+0x45e>
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	d100      	bne.n	800cf3c <_dtoa_r+0x29c>
 800cf3a:	e0e0      	b.n	800d0fe <_dtoa_r+0x45e>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dd62      	ble.n	800d008 <_dtoa_r+0x368>
 800cf42:	210f      	movs	r1, #15
 800cf44:	9a03      	ldr	r2, [sp, #12]
 800cf46:	4b29      	ldr	r3, [pc, #164]	; (800cfec <_dtoa_r+0x34c>)
 800cf48:	400a      	ands	r2, r1
 800cf4a:	00d2      	lsls	r2, r2, #3
 800cf4c:	189b      	adds	r3, r3, r2
 800cf4e:	681e      	ldr	r6, [r3, #0]
 800cf50:	685f      	ldr	r7, [r3, #4]
 800cf52:	9b03      	ldr	r3, [sp, #12]
 800cf54:	2402      	movs	r4, #2
 800cf56:	111d      	asrs	r5, r3, #4
 800cf58:	05db      	lsls	r3, r3, #23
 800cf5a:	d50a      	bpl.n	800cf72 <_dtoa_r+0x2d2>
 800cf5c:	4b29      	ldr	r3, [pc, #164]	; (800d004 <_dtoa_r+0x364>)
 800cf5e:	400d      	ands	r5, r1
 800cf60:	6a1a      	ldr	r2, [r3, #32]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf68:	f7f3 ff86 	bl	8000e78 <__aeabi_ddiv>
 800cf6c:	9008      	str	r0, [sp, #32]
 800cf6e:	9109      	str	r1, [sp, #36]	; 0x24
 800cf70:	3401      	adds	r4, #1
 800cf72:	4b24      	ldr	r3, [pc, #144]	; (800d004 <_dtoa_r+0x364>)
 800cf74:	930e      	str	r3, [sp, #56]	; 0x38
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	d108      	bne.n	800cf8c <_dtoa_r+0x2ec>
 800cf7a:	9808      	ldr	r0, [sp, #32]
 800cf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf7e:	0032      	movs	r2, r6
 800cf80:	003b      	movs	r3, r7
 800cf82:	f7f3 ff79 	bl	8000e78 <__aeabi_ddiv>
 800cf86:	9008      	str	r0, [sp, #32]
 800cf88:	9109      	str	r1, [sp, #36]	; 0x24
 800cf8a:	e058      	b.n	800d03e <_dtoa_r+0x39e>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	421d      	tst	r5, r3
 800cf90:	d009      	beq.n	800cfa6 <_dtoa_r+0x306>
 800cf92:	18e4      	adds	r4, r4, r3
 800cf94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf96:	0030      	movs	r0, r6
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	0039      	movs	r1, r7
 800cf9e:	f7f4 fb65 	bl	800166c <__aeabi_dmul>
 800cfa2:	0006      	movs	r6, r0
 800cfa4:	000f      	movs	r7, r1
 800cfa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfa8:	106d      	asrs	r5, r5, #1
 800cfaa:	3308      	adds	r3, #8
 800cfac:	e7e2      	b.n	800cf74 <_dtoa_r+0x2d4>
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	0000270f 	.word	0x0000270f
 800cfb8:	0800facd 	.word	0x0800facd
 800cfbc:	0800fad0 	.word	0x0800fad0
 800cfc0:	0800fa3e 	.word	0x0800fa3e
 800cfc4:	0800fa3f 	.word	0x0800fa3f
 800cfc8:	3ff00000 	.word	0x3ff00000
 800cfcc:	fffffc01 	.word	0xfffffc01
 800cfd0:	3ff80000 	.word	0x3ff80000
 800cfd4:	636f4361 	.word	0x636f4361
 800cfd8:	3fd287a7 	.word	0x3fd287a7
 800cfdc:	8b60c8b3 	.word	0x8b60c8b3
 800cfe0:	3fc68a28 	.word	0x3fc68a28
 800cfe4:	509f79fb 	.word	0x509f79fb
 800cfe8:	3fd34413 	.word	0x3fd34413
 800cfec:	0800f938 	.word	0x0800f938
 800cff0:	00000432 	.word	0x00000432
 800cff4:	00000412 	.word	0x00000412
 800cff8:	fe100000 	.word	0xfe100000
 800cffc:	0800f841 	.word	0x0800f841
 800d000:	0800fad1 	.word	0x0800fad1
 800d004:	0800f910 	.word	0x0800f910
 800d008:	9b03      	ldr	r3, [sp, #12]
 800d00a:	2402      	movs	r4, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d016      	beq.n	800d03e <_dtoa_r+0x39e>
 800d010:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d012:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d014:	220f      	movs	r2, #15
 800d016:	425d      	negs	r5, r3
 800d018:	402a      	ands	r2, r5
 800d01a:	4bdd      	ldr	r3, [pc, #884]	; (800d390 <_dtoa_r+0x6f0>)
 800d01c:	00d2      	lsls	r2, r2, #3
 800d01e:	189b      	adds	r3, r3, r2
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	f7f4 fb22 	bl	800166c <__aeabi_dmul>
 800d028:	2701      	movs	r7, #1
 800d02a:	2300      	movs	r3, #0
 800d02c:	9008      	str	r0, [sp, #32]
 800d02e:	9109      	str	r1, [sp, #36]	; 0x24
 800d030:	4ed8      	ldr	r6, [pc, #864]	; (800d394 <_dtoa_r+0x6f4>)
 800d032:	112d      	asrs	r5, r5, #4
 800d034:	2d00      	cmp	r5, #0
 800d036:	d000      	beq.n	800d03a <_dtoa_r+0x39a>
 800d038:	e091      	b.n	800d15e <_dtoa_r+0x4be>
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1a3      	bne.n	800cf86 <_dtoa_r+0x2e6>
 800d03e:	9e08      	ldr	r6, [sp, #32]
 800d040:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d042:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d044:	2b00      	cmp	r3, #0
 800d046:	d100      	bne.n	800d04a <_dtoa_r+0x3aa>
 800d048:	e094      	b.n	800d174 <_dtoa_r+0x4d4>
 800d04a:	2200      	movs	r2, #0
 800d04c:	0030      	movs	r0, r6
 800d04e:	0039      	movs	r1, r7
 800d050:	4bd1      	ldr	r3, [pc, #836]	; (800d398 <_dtoa_r+0x6f8>)
 800d052:	f7f3 f9ff 	bl	8000454 <__aeabi_dcmplt>
 800d056:	2800      	cmp	r0, #0
 800d058:	d100      	bne.n	800d05c <_dtoa_r+0x3bc>
 800d05a:	e08b      	b.n	800d174 <_dtoa_r+0x4d4>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d100      	bne.n	800d064 <_dtoa_r+0x3c4>
 800d062:	e087      	b.n	800d174 <_dtoa_r+0x4d4>
 800d064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd45      	ble.n	800d0f6 <_dtoa_r+0x456>
 800d06a:	9b03      	ldr	r3, [sp, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	3b01      	subs	r3, #1
 800d070:	930e      	str	r3, [sp, #56]	; 0x38
 800d072:	0030      	movs	r0, r6
 800d074:	4bc9      	ldr	r3, [pc, #804]	; (800d39c <_dtoa_r+0x6fc>)
 800d076:	0039      	movs	r1, r7
 800d078:	f7f4 faf8 	bl	800166c <__aeabi_dmul>
 800d07c:	9008      	str	r0, [sp, #32]
 800d07e:	9109      	str	r1, [sp, #36]	; 0x24
 800d080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d082:	3401      	adds	r4, #1
 800d084:	0020      	movs	r0, r4
 800d086:	9e08      	ldr	r6, [sp, #32]
 800d088:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d08a:	9312      	str	r3, [sp, #72]	; 0x48
 800d08c:	f7f5 f986 	bl	800239c <__aeabi_i2d>
 800d090:	0032      	movs	r2, r6
 800d092:	003b      	movs	r3, r7
 800d094:	f7f4 faea 	bl	800166c <__aeabi_dmul>
 800d098:	2200      	movs	r2, #0
 800d09a:	4bc1      	ldr	r3, [pc, #772]	; (800d3a0 <_dtoa_r+0x700>)
 800d09c:	f7f3 fb8c 	bl	80007b8 <__aeabi_dadd>
 800d0a0:	4ac0      	ldr	r2, [pc, #768]	; (800d3a4 <_dtoa_r+0x704>)
 800d0a2:	9014      	str	r0, [sp, #80]	; 0x50
 800d0a4:	9115      	str	r1, [sp, #84]	; 0x54
 800d0a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800d0aa:	4694      	mov	ip, r2
 800d0ac:	9308      	str	r3, [sp, #32]
 800d0ae:	9409      	str	r4, [sp, #36]	; 0x24
 800d0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0b2:	4463      	add	r3, ip
 800d0b4:	9318      	str	r3, [sp, #96]	; 0x60
 800d0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d15e      	bne.n	800d17c <_dtoa_r+0x4dc>
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4bb9      	ldr	r3, [pc, #740]	; (800d3a8 <_dtoa_r+0x708>)
 800d0c2:	0030      	movs	r0, r6
 800d0c4:	0039      	movs	r1, r7
 800d0c6:	f7f4 fd93 	bl	8001bf0 <__aeabi_dsub>
 800d0ca:	9a08      	ldr	r2, [sp, #32]
 800d0cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d0ce:	0004      	movs	r4, r0
 800d0d0:	000d      	movs	r5, r1
 800d0d2:	f7f3 f9d3 	bl	800047c <__aeabi_dcmpgt>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d000      	beq.n	800d0dc <_dtoa_r+0x43c>
 800d0da:	e2b3      	b.n	800d644 <_dtoa_r+0x9a4>
 800d0dc:	48b3      	ldr	r0, [pc, #716]	; (800d3ac <_dtoa_r+0x70c>)
 800d0de:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d0e0:	4684      	mov	ip, r0
 800d0e2:	4461      	add	r1, ip
 800d0e4:	000b      	movs	r3, r1
 800d0e6:	0020      	movs	r0, r4
 800d0e8:	0029      	movs	r1, r5
 800d0ea:	9a08      	ldr	r2, [sp, #32]
 800d0ec:	f7f3 f9b2 	bl	8000454 <__aeabi_dcmplt>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d000      	beq.n	800d0f6 <_dtoa_r+0x456>
 800d0f4:	e2a3      	b.n	800d63e <_dtoa_r+0x99e>
 800d0f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d0fa:	9308      	str	r3, [sp, #32]
 800d0fc:	9409      	str	r4, [sp, #36]	; 0x24
 800d0fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d100:	2b00      	cmp	r3, #0
 800d102:	da00      	bge.n	800d106 <_dtoa_r+0x466>
 800d104:	e179      	b.n	800d3fa <_dtoa_r+0x75a>
 800d106:	9a03      	ldr	r2, [sp, #12]
 800d108:	2a0e      	cmp	r2, #14
 800d10a:	dd00      	ble.n	800d10e <_dtoa_r+0x46e>
 800d10c:	e175      	b.n	800d3fa <_dtoa_r+0x75a>
 800d10e:	4ba0      	ldr	r3, [pc, #640]	; (800d390 <_dtoa_r+0x6f0>)
 800d110:	00d2      	lsls	r2, r2, #3
 800d112:	189b      	adds	r3, r3, r2
 800d114:	681e      	ldr	r6, [r3, #0]
 800d116:	685f      	ldr	r7, [r3, #4]
 800d118:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	db00      	blt.n	800d120 <_dtoa_r+0x480>
 800d11e:	e0e5      	b.n	800d2ec <_dtoa_r+0x64c>
 800d120:	9b07      	ldr	r3, [sp, #28]
 800d122:	2b00      	cmp	r3, #0
 800d124:	dd00      	ble.n	800d128 <_dtoa_r+0x488>
 800d126:	e0e1      	b.n	800d2ec <_dtoa_r+0x64c>
 800d128:	d000      	beq.n	800d12c <_dtoa_r+0x48c>
 800d12a:	e288      	b.n	800d63e <_dtoa_r+0x99e>
 800d12c:	2200      	movs	r2, #0
 800d12e:	0030      	movs	r0, r6
 800d130:	0039      	movs	r1, r7
 800d132:	4b9d      	ldr	r3, [pc, #628]	; (800d3a8 <_dtoa_r+0x708>)
 800d134:	f7f4 fa9a 	bl	800166c <__aeabi_dmul>
 800d138:	9a08      	ldr	r2, [sp, #32]
 800d13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13c:	f7f3 f9a8 	bl	8000490 <__aeabi_dcmpge>
 800d140:	9e07      	ldr	r6, [sp, #28]
 800d142:	0037      	movs	r7, r6
 800d144:	2800      	cmp	r0, #0
 800d146:	d000      	beq.n	800d14a <_dtoa_r+0x4aa>
 800d148:	e25f      	b.n	800d60a <_dtoa_r+0x96a>
 800d14a:	9b06      	ldr	r3, [sp, #24]
 800d14c:	9a06      	ldr	r2, [sp, #24]
 800d14e:	3301      	adds	r3, #1
 800d150:	9308      	str	r3, [sp, #32]
 800d152:	2331      	movs	r3, #49	; 0x31
 800d154:	7013      	strb	r3, [r2, #0]
 800d156:	9b03      	ldr	r3, [sp, #12]
 800d158:	3301      	adds	r3, #1
 800d15a:	9303      	str	r3, [sp, #12]
 800d15c:	e25a      	b.n	800d614 <_dtoa_r+0x974>
 800d15e:	423d      	tst	r5, r7
 800d160:	d005      	beq.n	800d16e <_dtoa_r+0x4ce>
 800d162:	6832      	ldr	r2, [r6, #0]
 800d164:	6873      	ldr	r3, [r6, #4]
 800d166:	f7f4 fa81 	bl	800166c <__aeabi_dmul>
 800d16a:	003b      	movs	r3, r7
 800d16c:	3401      	adds	r4, #1
 800d16e:	106d      	asrs	r5, r5, #1
 800d170:	3608      	adds	r6, #8
 800d172:	e75f      	b.n	800d034 <_dtoa_r+0x394>
 800d174:	9b03      	ldr	r3, [sp, #12]
 800d176:	930e      	str	r3, [sp, #56]	; 0x38
 800d178:	9b07      	ldr	r3, [sp, #28]
 800d17a:	e783      	b.n	800d084 <_dtoa_r+0x3e4>
 800d17c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d17e:	4b84      	ldr	r3, [pc, #528]	; (800d390 <_dtoa_r+0x6f0>)
 800d180:	3a01      	subs	r2, #1
 800d182:	00d2      	lsls	r2, r2, #3
 800d184:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d186:	189b      	adds	r3, r3, r2
 800d188:	9c08      	ldr	r4, [sp, #32]
 800d18a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	2900      	cmp	r1, #0
 800d192:	d051      	beq.n	800d238 <_dtoa_r+0x598>
 800d194:	2000      	movs	r0, #0
 800d196:	4986      	ldr	r1, [pc, #536]	; (800d3b0 <_dtoa_r+0x710>)
 800d198:	f7f3 fe6e 	bl	8000e78 <__aeabi_ddiv>
 800d19c:	0022      	movs	r2, r4
 800d19e:	002b      	movs	r3, r5
 800d1a0:	f7f4 fd26 	bl	8001bf0 <__aeabi_dsub>
 800d1a4:	9a06      	ldr	r2, [sp, #24]
 800d1a6:	0004      	movs	r4, r0
 800d1a8:	4694      	mov	ip, r2
 800d1aa:	000d      	movs	r5, r1
 800d1ac:	9b06      	ldr	r3, [sp, #24]
 800d1ae:	9314      	str	r3, [sp, #80]	; 0x50
 800d1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1b2:	4463      	add	r3, ip
 800d1b4:	9318      	str	r3, [sp, #96]	; 0x60
 800d1b6:	0039      	movs	r1, r7
 800d1b8:	0030      	movs	r0, r6
 800d1ba:	f7f5 f8b9 	bl	8002330 <__aeabi_d2iz>
 800d1be:	9012      	str	r0, [sp, #72]	; 0x48
 800d1c0:	f7f5 f8ec 	bl	800239c <__aeabi_i2d>
 800d1c4:	0002      	movs	r2, r0
 800d1c6:	000b      	movs	r3, r1
 800d1c8:	0030      	movs	r0, r6
 800d1ca:	0039      	movs	r1, r7
 800d1cc:	f7f4 fd10 	bl	8001bf0 <__aeabi_dsub>
 800d1d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	9308      	str	r3, [sp, #32]
 800d1d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1da:	0006      	movs	r6, r0
 800d1dc:	3330      	adds	r3, #48	; 0x30
 800d1de:	7013      	strb	r3, [r2, #0]
 800d1e0:	0022      	movs	r2, r4
 800d1e2:	002b      	movs	r3, r5
 800d1e4:	000f      	movs	r7, r1
 800d1e6:	f7f3 f935 	bl	8000454 <__aeabi_dcmplt>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d174      	bne.n	800d2d8 <_dtoa_r+0x638>
 800d1ee:	0032      	movs	r2, r6
 800d1f0:	003b      	movs	r3, r7
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	4968      	ldr	r1, [pc, #416]	; (800d398 <_dtoa_r+0x6f8>)
 800d1f6:	f7f4 fcfb 	bl	8001bf0 <__aeabi_dsub>
 800d1fa:	0022      	movs	r2, r4
 800d1fc:	002b      	movs	r3, r5
 800d1fe:	f7f3 f929 	bl	8000454 <__aeabi_dcmplt>
 800d202:	2800      	cmp	r0, #0
 800d204:	d000      	beq.n	800d208 <_dtoa_r+0x568>
 800d206:	e0d7      	b.n	800d3b8 <_dtoa_r+0x718>
 800d208:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d20a:	9a08      	ldr	r2, [sp, #32]
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d100      	bne.n	800d212 <_dtoa_r+0x572>
 800d210:	e771      	b.n	800d0f6 <_dtoa_r+0x456>
 800d212:	2200      	movs	r2, #0
 800d214:	0020      	movs	r0, r4
 800d216:	0029      	movs	r1, r5
 800d218:	4b60      	ldr	r3, [pc, #384]	; (800d39c <_dtoa_r+0x6fc>)
 800d21a:	f7f4 fa27 	bl	800166c <__aeabi_dmul>
 800d21e:	4b5f      	ldr	r3, [pc, #380]	; (800d39c <_dtoa_r+0x6fc>)
 800d220:	0004      	movs	r4, r0
 800d222:	000d      	movs	r5, r1
 800d224:	0030      	movs	r0, r6
 800d226:	0039      	movs	r1, r7
 800d228:	2200      	movs	r2, #0
 800d22a:	f7f4 fa1f 	bl	800166c <__aeabi_dmul>
 800d22e:	9b08      	ldr	r3, [sp, #32]
 800d230:	0006      	movs	r6, r0
 800d232:	000f      	movs	r7, r1
 800d234:	9314      	str	r3, [sp, #80]	; 0x50
 800d236:	e7be      	b.n	800d1b6 <_dtoa_r+0x516>
 800d238:	0020      	movs	r0, r4
 800d23a:	0029      	movs	r1, r5
 800d23c:	f7f4 fa16 	bl	800166c <__aeabi_dmul>
 800d240:	9a06      	ldr	r2, [sp, #24]
 800d242:	9b06      	ldr	r3, [sp, #24]
 800d244:	4694      	mov	ip, r2
 800d246:	9308      	str	r3, [sp, #32]
 800d248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d24a:	9014      	str	r0, [sp, #80]	; 0x50
 800d24c:	9115      	str	r1, [sp, #84]	; 0x54
 800d24e:	4463      	add	r3, ip
 800d250:	9319      	str	r3, [sp, #100]	; 0x64
 800d252:	0030      	movs	r0, r6
 800d254:	0039      	movs	r1, r7
 800d256:	f7f5 f86b 	bl	8002330 <__aeabi_d2iz>
 800d25a:	9018      	str	r0, [sp, #96]	; 0x60
 800d25c:	f7f5 f89e 	bl	800239c <__aeabi_i2d>
 800d260:	0002      	movs	r2, r0
 800d262:	000b      	movs	r3, r1
 800d264:	0030      	movs	r0, r6
 800d266:	0039      	movs	r1, r7
 800d268:	f7f4 fcc2 	bl	8001bf0 <__aeabi_dsub>
 800d26c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d26e:	9b08      	ldr	r3, [sp, #32]
 800d270:	3630      	adds	r6, #48	; 0x30
 800d272:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d274:	701e      	strb	r6, [r3, #0]
 800d276:	3301      	adds	r3, #1
 800d278:	0004      	movs	r4, r0
 800d27a:	000d      	movs	r5, r1
 800d27c:	9308      	str	r3, [sp, #32]
 800d27e:	4293      	cmp	r3, r2
 800d280:	d12d      	bne.n	800d2de <_dtoa_r+0x63e>
 800d282:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d284:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d286:	9a06      	ldr	r2, [sp, #24]
 800d288:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d28a:	4694      	mov	ip, r2
 800d28c:	4463      	add	r3, ip
 800d28e:	2200      	movs	r2, #0
 800d290:	9308      	str	r3, [sp, #32]
 800d292:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <_dtoa_r+0x710>)
 800d294:	f7f3 fa90 	bl	80007b8 <__aeabi_dadd>
 800d298:	0002      	movs	r2, r0
 800d29a:	000b      	movs	r3, r1
 800d29c:	0020      	movs	r0, r4
 800d29e:	0029      	movs	r1, r5
 800d2a0:	f7f3 f8ec 	bl	800047c <__aeabi_dcmpgt>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d000      	beq.n	800d2aa <_dtoa_r+0x60a>
 800d2a8:	e086      	b.n	800d3b8 <_dtoa_r+0x718>
 800d2aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	493f      	ldr	r1, [pc, #252]	; (800d3b0 <_dtoa_r+0x710>)
 800d2b2:	f7f4 fc9d 	bl	8001bf0 <__aeabi_dsub>
 800d2b6:	0002      	movs	r2, r0
 800d2b8:	000b      	movs	r3, r1
 800d2ba:	0020      	movs	r0, r4
 800d2bc:	0029      	movs	r1, r5
 800d2be:	f7f3 f8c9 	bl	8000454 <__aeabi_dcmplt>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d100      	bne.n	800d2c8 <_dtoa_r+0x628>
 800d2c6:	e716      	b.n	800d0f6 <_dtoa_r+0x456>
 800d2c8:	9b08      	ldr	r3, [sp, #32]
 800d2ca:	001a      	movs	r2, r3
 800d2cc:	3a01      	subs	r2, #1
 800d2ce:	9208      	str	r2, [sp, #32]
 800d2d0:	7812      	ldrb	r2, [r2, #0]
 800d2d2:	2a30      	cmp	r2, #48	; 0x30
 800d2d4:	d0f8      	beq.n	800d2c8 <_dtoa_r+0x628>
 800d2d6:	9308      	str	r3, [sp, #32]
 800d2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2da:	9303      	str	r3, [sp, #12]
 800d2dc:	e046      	b.n	800d36c <_dtoa_r+0x6cc>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	4b2e      	ldr	r3, [pc, #184]	; (800d39c <_dtoa_r+0x6fc>)
 800d2e2:	f7f4 f9c3 	bl	800166c <__aeabi_dmul>
 800d2e6:	0006      	movs	r6, r0
 800d2e8:	000f      	movs	r7, r1
 800d2ea:	e7b2      	b.n	800d252 <_dtoa_r+0x5b2>
 800d2ec:	9b06      	ldr	r3, [sp, #24]
 800d2ee:	9a06      	ldr	r2, [sp, #24]
 800d2f0:	930a      	str	r3, [sp, #40]	; 0x28
 800d2f2:	9b07      	ldr	r3, [sp, #28]
 800d2f4:	9c08      	ldr	r4, [sp, #32]
 800d2f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	189b      	adds	r3, r3, r2
 800d2fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2fe:	0032      	movs	r2, r6
 800d300:	003b      	movs	r3, r7
 800d302:	0020      	movs	r0, r4
 800d304:	0029      	movs	r1, r5
 800d306:	f7f3 fdb7 	bl	8000e78 <__aeabi_ddiv>
 800d30a:	f7f5 f811 	bl	8002330 <__aeabi_d2iz>
 800d30e:	9007      	str	r0, [sp, #28]
 800d310:	f7f5 f844 	bl	800239c <__aeabi_i2d>
 800d314:	0032      	movs	r2, r6
 800d316:	003b      	movs	r3, r7
 800d318:	f7f4 f9a8 	bl	800166c <__aeabi_dmul>
 800d31c:	0002      	movs	r2, r0
 800d31e:	000b      	movs	r3, r1
 800d320:	0020      	movs	r0, r4
 800d322:	0029      	movs	r1, r5
 800d324:	f7f4 fc64 	bl	8001bf0 <__aeabi_dsub>
 800d328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d32a:	001a      	movs	r2, r3
 800d32c:	3201      	adds	r2, #1
 800d32e:	920a      	str	r2, [sp, #40]	; 0x28
 800d330:	9208      	str	r2, [sp, #32]
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	3230      	adds	r2, #48	; 0x30
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d14f      	bne.n	800d3de <_dtoa_r+0x73e>
 800d33e:	0002      	movs	r2, r0
 800d340:	000b      	movs	r3, r1
 800d342:	f7f3 fa39 	bl	80007b8 <__aeabi_dadd>
 800d346:	0032      	movs	r2, r6
 800d348:	003b      	movs	r3, r7
 800d34a:	0004      	movs	r4, r0
 800d34c:	000d      	movs	r5, r1
 800d34e:	f7f3 f895 	bl	800047c <__aeabi_dcmpgt>
 800d352:	2800      	cmp	r0, #0
 800d354:	d12e      	bne.n	800d3b4 <_dtoa_r+0x714>
 800d356:	0032      	movs	r2, r6
 800d358:	003b      	movs	r3, r7
 800d35a:	0020      	movs	r0, r4
 800d35c:	0029      	movs	r1, r5
 800d35e:	f7f3 f873 	bl	8000448 <__aeabi_dcmpeq>
 800d362:	2800      	cmp	r0, #0
 800d364:	d002      	beq.n	800d36c <_dtoa_r+0x6cc>
 800d366:	9b07      	ldr	r3, [sp, #28]
 800d368:	07de      	lsls	r6, r3, #31
 800d36a:	d423      	bmi.n	800d3b4 <_dtoa_r+0x714>
 800d36c:	9905      	ldr	r1, [sp, #20]
 800d36e:	9804      	ldr	r0, [sp, #16]
 800d370:	f7fc f8fe 	bl	8009570 <_Bfree>
 800d374:	2300      	movs	r3, #0
 800d376:	9a08      	ldr	r2, [sp, #32]
 800d378:	7013      	strb	r3, [r2, #0]
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d37e:	3301      	adds	r3, #1
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d384:	2b00      	cmp	r3, #0
 800d386:	d100      	bne.n	800d38a <_dtoa_r+0x6ea>
 800d388:	e4bd      	b.n	800cd06 <_dtoa_r+0x66>
 800d38a:	9a08      	ldr	r2, [sp, #32]
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	e4ba      	b.n	800cd06 <_dtoa_r+0x66>
 800d390:	0800f938 	.word	0x0800f938
 800d394:	0800f910 	.word	0x0800f910
 800d398:	3ff00000 	.word	0x3ff00000
 800d39c:	40240000 	.word	0x40240000
 800d3a0:	401c0000 	.word	0x401c0000
 800d3a4:	fcc00000 	.word	0xfcc00000
 800d3a8:	40140000 	.word	0x40140000
 800d3ac:	7cc00000 	.word	0x7cc00000
 800d3b0:	3fe00000 	.word	0x3fe00000
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	930e      	str	r3, [sp, #56]	; 0x38
 800d3b8:	9b08      	ldr	r3, [sp, #32]
 800d3ba:	9308      	str	r3, [sp, #32]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	781a      	ldrb	r2, [r3, #0]
 800d3c0:	2a39      	cmp	r2, #57	; 0x39
 800d3c2:	d108      	bne.n	800d3d6 <_dtoa_r+0x736>
 800d3c4:	9a06      	ldr	r2, [sp, #24]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d1f7      	bne.n	800d3ba <_dtoa_r+0x71a>
 800d3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3cc:	9906      	ldr	r1, [sp, #24]
 800d3ce:	3201      	adds	r2, #1
 800d3d0:	920e      	str	r2, [sp, #56]	; 0x38
 800d3d2:	2230      	movs	r2, #48	; 0x30
 800d3d4:	700a      	strb	r2, [r1, #0]
 800d3d6:	781a      	ldrb	r2, [r3, #0]
 800d3d8:	3201      	adds	r2, #1
 800d3da:	701a      	strb	r2, [r3, #0]
 800d3dc:	e77c      	b.n	800d2d8 <_dtoa_r+0x638>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	4ba9      	ldr	r3, [pc, #676]	; (800d688 <_dtoa_r+0x9e8>)
 800d3e2:	f7f4 f943 	bl	800166c <__aeabi_dmul>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	0004      	movs	r4, r0
 800d3ec:	000d      	movs	r5, r1
 800d3ee:	f7f3 f82b 	bl	8000448 <__aeabi_dcmpeq>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d100      	bne.n	800d3f8 <_dtoa_r+0x758>
 800d3f6:	e782      	b.n	800d2fe <_dtoa_r+0x65e>
 800d3f8:	e7b8      	b.n	800d36c <_dtoa_r+0x6cc>
 800d3fa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d3fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d3fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d400:	2f00      	cmp	r7, #0
 800d402:	d012      	beq.n	800d42a <_dtoa_r+0x78a>
 800d404:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d406:	2a01      	cmp	r2, #1
 800d408:	dc6e      	bgt.n	800d4e8 <_dtoa_r+0x848>
 800d40a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d40c:	2a00      	cmp	r2, #0
 800d40e:	d065      	beq.n	800d4dc <_dtoa_r+0x83c>
 800d410:	4a9e      	ldr	r2, [pc, #632]	; (800d68c <_dtoa_r+0x9ec>)
 800d412:	189b      	adds	r3, r3, r2
 800d414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d416:	2101      	movs	r1, #1
 800d418:	18d2      	adds	r2, r2, r3
 800d41a:	920a      	str	r2, [sp, #40]	; 0x28
 800d41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d41e:	9804      	ldr	r0, [sp, #16]
 800d420:	18d3      	adds	r3, r2, r3
 800d422:	930c      	str	r3, [sp, #48]	; 0x30
 800d424:	f7fc f986 	bl	8009734 <__i2b>
 800d428:	0007      	movs	r7, r0
 800d42a:	2c00      	cmp	r4, #0
 800d42c:	d00e      	beq.n	800d44c <_dtoa_r+0x7ac>
 800d42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d430:	2b00      	cmp	r3, #0
 800d432:	dd0b      	ble.n	800d44c <_dtoa_r+0x7ac>
 800d434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d436:	0023      	movs	r3, r4
 800d438:	4294      	cmp	r4, r2
 800d43a:	dd00      	ble.n	800d43e <_dtoa_r+0x79e>
 800d43c:	0013      	movs	r3, r2
 800d43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d440:	1ae4      	subs	r4, r4, r3
 800d442:	1ad2      	subs	r2, r2, r3
 800d444:	920a      	str	r2, [sp, #40]	; 0x28
 800d446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	930c      	str	r3, [sp, #48]	; 0x30
 800d44c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d01e      	beq.n	800d490 <_dtoa_r+0x7f0>
 800d452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d454:	2b00      	cmp	r3, #0
 800d456:	d05c      	beq.n	800d512 <_dtoa_r+0x872>
 800d458:	2d00      	cmp	r5, #0
 800d45a:	dd10      	ble.n	800d47e <_dtoa_r+0x7de>
 800d45c:	0039      	movs	r1, r7
 800d45e:	002a      	movs	r2, r5
 800d460:	9804      	ldr	r0, [sp, #16]
 800d462:	f7fc fa2f 	bl	80098c4 <__pow5mult>
 800d466:	9a05      	ldr	r2, [sp, #20]
 800d468:	0001      	movs	r1, r0
 800d46a:	0007      	movs	r7, r0
 800d46c:	9804      	ldr	r0, [sp, #16]
 800d46e:	f7fc f979 	bl	8009764 <__multiply>
 800d472:	0006      	movs	r6, r0
 800d474:	9905      	ldr	r1, [sp, #20]
 800d476:	9804      	ldr	r0, [sp, #16]
 800d478:	f7fc f87a 	bl	8009570 <_Bfree>
 800d47c:	9605      	str	r6, [sp, #20]
 800d47e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d480:	1b5a      	subs	r2, r3, r5
 800d482:	42ab      	cmp	r3, r5
 800d484:	d004      	beq.n	800d490 <_dtoa_r+0x7f0>
 800d486:	9905      	ldr	r1, [sp, #20]
 800d488:	9804      	ldr	r0, [sp, #16]
 800d48a:	f7fc fa1b 	bl	80098c4 <__pow5mult>
 800d48e:	9005      	str	r0, [sp, #20]
 800d490:	2101      	movs	r1, #1
 800d492:	9804      	ldr	r0, [sp, #16]
 800d494:	f7fc f94e 	bl	8009734 <__i2b>
 800d498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d49a:	0006      	movs	r6, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	dd3a      	ble.n	800d516 <_dtoa_r+0x876>
 800d4a0:	001a      	movs	r2, r3
 800d4a2:	0001      	movs	r1, r0
 800d4a4:	9804      	ldr	r0, [sp, #16]
 800d4a6:	f7fc fa0d 	bl	80098c4 <__pow5mult>
 800d4aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4ac:	0006      	movs	r6, r0
 800d4ae:	2500      	movs	r5, #0
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	dc38      	bgt.n	800d526 <_dtoa_r+0x886>
 800d4b4:	2500      	movs	r5, #0
 800d4b6:	9b08      	ldr	r3, [sp, #32]
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	d130      	bne.n	800d51e <_dtoa_r+0x87e>
 800d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4be:	031b      	lsls	r3, r3, #12
 800d4c0:	42ab      	cmp	r3, r5
 800d4c2:	d12c      	bne.n	800d51e <_dtoa_r+0x87e>
 800d4c4:	4b72      	ldr	r3, [pc, #456]	; (800d690 <_dtoa_r+0x9f0>)
 800d4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c8:	4213      	tst	r3, r2
 800d4ca:	d028      	beq.n	800d51e <_dtoa_r+0x87e>
 800d4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ce:	3501      	adds	r5, #1
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	930c      	str	r3, [sp, #48]	; 0x30
 800d4da:	e020      	b.n	800d51e <_dtoa_r+0x87e>
 800d4dc:	2336      	movs	r3, #54	; 0x36
 800d4de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d4e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	e795      	b.n	800d414 <_dtoa_r+0x774>
 800d4e8:	9b07      	ldr	r3, [sp, #28]
 800d4ea:	1e5d      	subs	r5, r3, #1
 800d4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ee:	42ab      	cmp	r3, r5
 800d4f0:	db07      	blt.n	800d502 <_dtoa_r+0x862>
 800d4f2:	1b5d      	subs	r5, r3, r5
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	da8b      	bge.n	800d414 <_dtoa_r+0x774>
 800d4fc:	1ae4      	subs	r4, r4, r3
 800d4fe:	2300      	movs	r3, #0
 800d500:	e788      	b.n	800d414 <_dtoa_r+0x774>
 800d502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d506:	1aeb      	subs	r3, r5, r3
 800d508:	18d3      	adds	r3, r2, r3
 800d50a:	950d      	str	r5, [sp, #52]	; 0x34
 800d50c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d50e:	2500      	movs	r5, #0
 800d510:	e7f0      	b.n	800d4f4 <_dtoa_r+0x854>
 800d512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d514:	e7b7      	b.n	800d486 <_dtoa_r+0x7e6>
 800d516:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d518:	2500      	movs	r5, #0
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	ddca      	ble.n	800d4b4 <_dtoa_r+0x814>
 800d51e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d520:	2001      	movs	r0, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d008      	beq.n	800d538 <_dtoa_r+0x898>
 800d526:	6933      	ldr	r3, [r6, #16]
 800d528:	3303      	adds	r3, #3
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	18f3      	adds	r3, r6, r3
 800d52e:	6858      	ldr	r0, [r3, #4]
 800d530:	f7fc f8b8 	bl	80096a4 <__hi0bits>
 800d534:	2320      	movs	r3, #32
 800d536:	1a18      	subs	r0, r3, r0
 800d538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d53a:	1818      	adds	r0, r3, r0
 800d53c:	0002      	movs	r2, r0
 800d53e:	231f      	movs	r3, #31
 800d540:	401a      	ands	r2, r3
 800d542:	4218      	tst	r0, r3
 800d544:	d047      	beq.n	800d5d6 <_dtoa_r+0x936>
 800d546:	3301      	adds	r3, #1
 800d548:	1a9b      	subs	r3, r3, r2
 800d54a:	2b04      	cmp	r3, #4
 800d54c:	dd3f      	ble.n	800d5ce <_dtoa_r+0x92e>
 800d54e:	231c      	movs	r3, #28
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d554:	18e4      	adds	r4, r4, r3
 800d556:	18d2      	adds	r2, r2, r3
 800d558:	920a      	str	r2, [sp, #40]	; 0x28
 800d55a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d55c:	18d3      	adds	r3, r2, r3
 800d55e:	930c      	str	r3, [sp, #48]	; 0x30
 800d560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d562:	2b00      	cmp	r3, #0
 800d564:	dd05      	ble.n	800d572 <_dtoa_r+0x8d2>
 800d566:	001a      	movs	r2, r3
 800d568:	9905      	ldr	r1, [sp, #20]
 800d56a:	9804      	ldr	r0, [sp, #16]
 800d56c:	f7fc f9ec 	bl	8009948 <__lshift>
 800d570:	9005      	str	r0, [sp, #20]
 800d572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d574:	2b00      	cmp	r3, #0
 800d576:	dd05      	ble.n	800d584 <_dtoa_r+0x8e4>
 800d578:	0031      	movs	r1, r6
 800d57a:	001a      	movs	r2, r3
 800d57c:	9804      	ldr	r0, [sp, #16]
 800d57e:	f7fc f9e3 	bl	8009948 <__lshift>
 800d582:	0006      	movs	r6, r0
 800d584:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d586:	2b00      	cmp	r3, #0
 800d588:	d027      	beq.n	800d5da <_dtoa_r+0x93a>
 800d58a:	0031      	movs	r1, r6
 800d58c:	9805      	ldr	r0, [sp, #20]
 800d58e:	f7fc fa49 	bl	8009a24 <__mcmp>
 800d592:	2800      	cmp	r0, #0
 800d594:	da21      	bge.n	800d5da <_dtoa_r+0x93a>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	220a      	movs	r2, #10
 800d59a:	3b01      	subs	r3, #1
 800d59c:	9303      	str	r3, [sp, #12]
 800d59e:	9905      	ldr	r1, [sp, #20]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	9804      	ldr	r0, [sp, #16]
 800d5a4:	f7fb ffee 	bl	8009584 <__multadd>
 800d5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5aa:	9005      	str	r0, [sp, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d100      	bne.n	800d5b2 <_dtoa_r+0x912>
 800d5b0:	e15d      	b.n	800d86e <_dtoa_r+0xbce>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	0039      	movs	r1, r7
 800d5b6:	220a      	movs	r2, #10
 800d5b8:	9804      	ldr	r0, [sp, #16]
 800d5ba:	f7fb ffe3 	bl	8009584 <__multadd>
 800d5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5c0:	0007      	movs	r7, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	dc49      	bgt.n	800d65a <_dtoa_r+0x9ba>
 800d5c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	dc0e      	bgt.n	800d5ea <_dtoa_r+0x94a>
 800d5cc:	e045      	b.n	800d65a <_dtoa_r+0x9ba>
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d0c6      	beq.n	800d560 <_dtoa_r+0x8c0>
 800d5d2:	331c      	adds	r3, #28
 800d5d4:	e7bd      	b.n	800d552 <_dtoa_r+0x8b2>
 800d5d6:	0013      	movs	r3, r2
 800d5d8:	e7fb      	b.n	800d5d2 <_dtoa_r+0x932>
 800d5da:	9b07      	ldr	r3, [sp, #28]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dc36      	bgt.n	800d64e <_dtoa_r+0x9ae>
 800d5e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	dd33      	ble.n	800d64e <_dtoa_r+0x9ae>
 800d5e6:	9b07      	ldr	r3, [sp, #28]
 800d5e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10c      	bne.n	800d60a <_dtoa_r+0x96a>
 800d5f0:	0031      	movs	r1, r6
 800d5f2:	2205      	movs	r2, #5
 800d5f4:	9804      	ldr	r0, [sp, #16]
 800d5f6:	f7fb ffc5 	bl	8009584 <__multadd>
 800d5fa:	0006      	movs	r6, r0
 800d5fc:	0001      	movs	r1, r0
 800d5fe:	9805      	ldr	r0, [sp, #20]
 800d600:	f7fc fa10 	bl	8009a24 <__mcmp>
 800d604:	2800      	cmp	r0, #0
 800d606:	dd00      	ble.n	800d60a <_dtoa_r+0x96a>
 800d608:	e59f      	b.n	800d14a <_dtoa_r+0x4aa>
 800d60a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d60c:	43db      	mvns	r3, r3
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	9b06      	ldr	r3, [sp, #24]
 800d612:	9308      	str	r3, [sp, #32]
 800d614:	2500      	movs	r5, #0
 800d616:	0031      	movs	r1, r6
 800d618:	9804      	ldr	r0, [sp, #16]
 800d61a:	f7fb ffa9 	bl	8009570 <_Bfree>
 800d61e:	2f00      	cmp	r7, #0
 800d620:	d100      	bne.n	800d624 <_dtoa_r+0x984>
 800d622:	e6a3      	b.n	800d36c <_dtoa_r+0x6cc>
 800d624:	2d00      	cmp	r5, #0
 800d626:	d005      	beq.n	800d634 <_dtoa_r+0x994>
 800d628:	42bd      	cmp	r5, r7
 800d62a:	d003      	beq.n	800d634 <_dtoa_r+0x994>
 800d62c:	0029      	movs	r1, r5
 800d62e:	9804      	ldr	r0, [sp, #16]
 800d630:	f7fb ff9e 	bl	8009570 <_Bfree>
 800d634:	0039      	movs	r1, r7
 800d636:	9804      	ldr	r0, [sp, #16]
 800d638:	f7fb ff9a 	bl	8009570 <_Bfree>
 800d63c:	e696      	b.n	800d36c <_dtoa_r+0x6cc>
 800d63e:	2600      	movs	r6, #0
 800d640:	0037      	movs	r7, r6
 800d642:	e7e2      	b.n	800d60a <_dtoa_r+0x96a>
 800d644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d646:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d648:	9303      	str	r3, [sp, #12]
 800d64a:	0037      	movs	r7, r6
 800d64c:	e57d      	b.n	800d14a <_dtoa_r+0x4aa>
 800d64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d100      	bne.n	800d656 <_dtoa_r+0x9b6>
 800d654:	e0c3      	b.n	800d7de <_dtoa_r+0xb3e>
 800d656:	9b07      	ldr	r3, [sp, #28]
 800d658:	930b      	str	r3, [sp, #44]	; 0x2c
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	dd05      	ble.n	800d66a <_dtoa_r+0x9ca>
 800d65e:	0039      	movs	r1, r7
 800d660:	0022      	movs	r2, r4
 800d662:	9804      	ldr	r0, [sp, #16]
 800d664:	f7fc f970 	bl	8009948 <__lshift>
 800d668:	0007      	movs	r7, r0
 800d66a:	0038      	movs	r0, r7
 800d66c:	2d00      	cmp	r5, #0
 800d66e:	d024      	beq.n	800d6ba <_dtoa_r+0xa1a>
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	9804      	ldr	r0, [sp, #16]
 800d674:	f7fb ff54 	bl	8009520 <_Balloc>
 800d678:	1e04      	subs	r4, r0, #0
 800d67a:	d111      	bne.n	800d6a0 <_dtoa_r+0xa00>
 800d67c:	0022      	movs	r2, r4
 800d67e:	4b05      	ldr	r3, [pc, #20]	; (800d694 <_dtoa_r+0x9f4>)
 800d680:	4805      	ldr	r0, [pc, #20]	; (800d698 <_dtoa_r+0x9f8>)
 800d682:	4906      	ldr	r1, [pc, #24]	; (800d69c <_dtoa_r+0x9fc>)
 800d684:	e43c      	b.n	800cf00 <_dtoa_r+0x260>
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	40240000 	.word	0x40240000
 800d68c:	00000433 	.word	0x00000433
 800d690:	7ff00000 	.word	0x7ff00000
 800d694:	0800f841 	.word	0x0800f841
 800d698:	0800fad1 	.word	0x0800fad1
 800d69c:	000002ef 	.word	0x000002ef
 800d6a0:	0039      	movs	r1, r7
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	310c      	adds	r1, #12
 800d6a6:	3202      	adds	r2, #2
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	300c      	adds	r0, #12
 800d6ac:	f7fb fa9d 	bl	8008bea <memcpy>
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	0021      	movs	r1, r4
 800d6b4:	9804      	ldr	r0, [sp, #16]
 800d6b6:	f7fc f947 	bl	8009948 <__lshift>
 800d6ba:	9b06      	ldr	r3, [sp, #24]
 800d6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	189b      	adds	r3, r3, r2
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	003d      	movs	r5, r7
 800d6c8:	0007      	movs	r7, r0
 800d6ca:	930e      	str	r3, [sp, #56]	; 0x38
 800d6cc:	9b08      	ldr	r3, [sp, #32]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	930d      	str	r3, [sp, #52]	; 0x34
 800d6d2:	0031      	movs	r1, r6
 800d6d4:	9805      	ldr	r0, [sp, #20]
 800d6d6:	f7ff fa53 	bl	800cb80 <quorem>
 800d6da:	0029      	movs	r1, r5
 800d6dc:	0004      	movs	r4, r0
 800d6de:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6e0:	9805      	ldr	r0, [sp, #20]
 800d6e2:	f7fc f99f 	bl	8009a24 <__mcmp>
 800d6e6:	003a      	movs	r2, r7
 800d6e8:	900c      	str	r0, [sp, #48]	; 0x30
 800d6ea:	0031      	movs	r1, r6
 800d6ec:	9804      	ldr	r0, [sp, #16]
 800d6ee:	f7fc f9b5 	bl	8009a5c <__mdiff>
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	68c3      	ldr	r3, [r0, #12]
 800d6f6:	3430      	adds	r4, #48	; 0x30
 800d6f8:	9008      	str	r0, [sp, #32]
 800d6fa:	920a      	str	r2, [sp, #40]	; 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d104      	bne.n	800d70a <_dtoa_r+0xa6a>
 800d700:	0001      	movs	r1, r0
 800d702:	9805      	ldr	r0, [sp, #20]
 800d704:	f7fc f98e 	bl	8009a24 <__mcmp>
 800d708:	900a      	str	r0, [sp, #40]	; 0x28
 800d70a:	9908      	ldr	r1, [sp, #32]
 800d70c:	9804      	ldr	r0, [sp, #16]
 800d70e:	f7fb ff2f 	bl	8009570 <_Bfree>
 800d712:	9b07      	ldr	r3, [sp, #28]
 800d714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d716:	3301      	adds	r3, #1
 800d718:	9308      	str	r3, [sp, #32]
 800d71a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d71c:	4313      	orrs	r3, r2
 800d71e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d720:	4313      	orrs	r3, r2
 800d722:	d109      	bne.n	800d738 <_dtoa_r+0xa98>
 800d724:	2c39      	cmp	r4, #57	; 0x39
 800d726:	d022      	beq.n	800d76e <_dtoa_r+0xace>
 800d728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	dd01      	ble.n	800d732 <_dtoa_r+0xa92>
 800d72e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d730:	3431      	adds	r4, #49	; 0x31
 800d732:	9b07      	ldr	r3, [sp, #28]
 800d734:	701c      	strb	r4, [r3, #0]
 800d736:	e76e      	b.n	800d616 <_dtoa_r+0x976>
 800d738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	db04      	blt.n	800d748 <_dtoa_r+0xaa8>
 800d73e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d740:	4313      	orrs	r3, r2
 800d742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d744:	4313      	orrs	r3, r2
 800d746:	d11e      	bne.n	800d786 <_dtoa_r+0xae6>
 800d748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	ddf1      	ble.n	800d732 <_dtoa_r+0xa92>
 800d74e:	9905      	ldr	r1, [sp, #20]
 800d750:	2201      	movs	r2, #1
 800d752:	9804      	ldr	r0, [sp, #16]
 800d754:	f7fc f8f8 	bl	8009948 <__lshift>
 800d758:	0031      	movs	r1, r6
 800d75a:	9005      	str	r0, [sp, #20]
 800d75c:	f7fc f962 	bl	8009a24 <__mcmp>
 800d760:	2800      	cmp	r0, #0
 800d762:	dc02      	bgt.n	800d76a <_dtoa_r+0xaca>
 800d764:	d1e5      	bne.n	800d732 <_dtoa_r+0xa92>
 800d766:	07e3      	lsls	r3, r4, #31
 800d768:	d5e3      	bpl.n	800d732 <_dtoa_r+0xa92>
 800d76a:	2c39      	cmp	r4, #57	; 0x39
 800d76c:	d1df      	bne.n	800d72e <_dtoa_r+0xa8e>
 800d76e:	2339      	movs	r3, #57	; 0x39
 800d770:	9a07      	ldr	r2, [sp, #28]
 800d772:	7013      	strb	r3, [r2, #0]
 800d774:	9b08      	ldr	r3, [sp, #32]
 800d776:	9308      	str	r3, [sp, #32]
 800d778:	3b01      	subs	r3, #1
 800d77a:	781a      	ldrb	r2, [r3, #0]
 800d77c:	2a39      	cmp	r2, #57	; 0x39
 800d77e:	d063      	beq.n	800d848 <_dtoa_r+0xba8>
 800d780:	3201      	adds	r2, #1
 800d782:	701a      	strb	r2, [r3, #0]
 800d784:	e747      	b.n	800d616 <_dtoa_r+0x976>
 800d786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dd03      	ble.n	800d794 <_dtoa_r+0xaf4>
 800d78c:	2c39      	cmp	r4, #57	; 0x39
 800d78e:	d0ee      	beq.n	800d76e <_dtoa_r+0xace>
 800d790:	3401      	adds	r4, #1
 800d792:	e7ce      	b.n	800d732 <_dtoa_r+0xa92>
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	9a07      	ldr	r2, [sp, #28]
 800d798:	701c      	strb	r4, [r3, #0]
 800d79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d03e      	beq.n	800d81e <_dtoa_r+0xb7e>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	220a      	movs	r2, #10
 800d7a4:	9905      	ldr	r1, [sp, #20]
 800d7a6:	9804      	ldr	r0, [sp, #16]
 800d7a8:	f7fb feec 	bl	8009584 <__multadd>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9005      	str	r0, [sp, #20]
 800d7b0:	220a      	movs	r2, #10
 800d7b2:	0029      	movs	r1, r5
 800d7b4:	9804      	ldr	r0, [sp, #16]
 800d7b6:	42bd      	cmp	r5, r7
 800d7b8:	d106      	bne.n	800d7c8 <_dtoa_r+0xb28>
 800d7ba:	f7fb fee3 	bl	8009584 <__multadd>
 800d7be:	0005      	movs	r5, r0
 800d7c0:	0007      	movs	r7, r0
 800d7c2:	9b08      	ldr	r3, [sp, #32]
 800d7c4:	9307      	str	r3, [sp, #28]
 800d7c6:	e784      	b.n	800d6d2 <_dtoa_r+0xa32>
 800d7c8:	f7fb fedc 	bl	8009584 <__multadd>
 800d7cc:	0039      	movs	r1, r7
 800d7ce:	0005      	movs	r5, r0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	220a      	movs	r2, #10
 800d7d4:	9804      	ldr	r0, [sp, #16]
 800d7d6:	f7fb fed5 	bl	8009584 <__multadd>
 800d7da:	0007      	movs	r7, r0
 800d7dc:	e7f1      	b.n	800d7c2 <_dtoa_r+0xb22>
 800d7de:	9b07      	ldr	r3, [sp, #28]
 800d7e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7e2:	2500      	movs	r5, #0
 800d7e4:	0031      	movs	r1, r6
 800d7e6:	9805      	ldr	r0, [sp, #20]
 800d7e8:	f7ff f9ca 	bl	800cb80 <quorem>
 800d7ec:	9b06      	ldr	r3, [sp, #24]
 800d7ee:	3030      	adds	r0, #48	; 0x30
 800d7f0:	5558      	strb	r0, [r3, r5]
 800d7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f4:	3501      	adds	r5, #1
 800d7f6:	0004      	movs	r4, r0
 800d7f8:	42ab      	cmp	r3, r5
 800d7fa:	dd07      	ble.n	800d80c <_dtoa_r+0xb6c>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	220a      	movs	r2, #10
 800d800:	9905      	ldr	r1, [sp, #20]
 800d802:	9804      	ldr	r0, [sp, #16]
 800d804:	f7fb febe 	bl	8009584 <__multadd>
 800d808:	9005      	str	r0, [sp, #20]
 800d80a:	e7eb      	b.n	800d7e4 <_dtoa_r+0xb44>
 800d80c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d80e:	2301      	movs	r3, #1
 800d810:	2a00      	cmp	r2, #0
 800d812:	dd00      	ble.n	800d816 <_dtoa_r+0xb76>
 800d814:	0013      	movs	r3, r2
 800d816:	2500      	movs	r5, #0
 800d818:	9a06      	ldr	r2, [sp, #24]
 800d81a:	18d3      	adds	r3, r2, r3
 800d81c:	9308      	str	r3, [sp, #32]
 800d81e:	9905      	ldr	r1, [sp, #20]
 800d820:	2201      	movs	r2, #1
 800d822:	9804      	ldr	r0, [sp, #16]
 800d824:	f7fc f890 	bl	8009948 <__lshift>
 800d828:	0031      	movs	r1, r6
 800d82a:	9005      	str	r0, [sp, #20]
 800d82c:	f7fc f8fa 	bl	8009a24 <__mcmp>
 800d830:	2800      	cmp	r0, #0
 800d832:	dc9f      	bgt.n	800d774 <_dtoa_r+0xad4>
 800d834:	d101      	bne.n	800d83a <_dtoa_r+0xb9a>
 800d836:	07e4      	lsls	r4, r4, #31
 800d838:	d49c      	bmi.n	800d774 <_dtoa_r+0xad4>
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	9308      	str	r3, [sp, #32]
 800d83e:	3b01      	subs	r3, #1
 800d840:	781a      	ldrb	r2, [r3, #0]
 800d842:	2a30      	cmp	r2, #48	; 0x30
 800d844:	d0fa      	beq.n	800d83c <_dtoa_r+0xb9c>
 800d846:	e6e6      	b.n	800d616 <_dtoa_r+0x976>
 800d848:	9a06      	ldr	r2, [sp, #24]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d193      	bne.n	800d776 <_dtoa_r+0xad6>
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	3301      	adds	r3, #1
 800d852:	9303      	str	r3, [sp, #12]
 800d854:	2331      	movs	r3, #49	; 0x31
 800d856:	7013      	strb	r3, [r2, #0]
 800d858:	e6dd      	b.n	800d616 <_dtoa_r+0x976>
 800d85a:	4b09      	ldr	r3, [pc, #36]	; (800d880 <_dtoa_r+0xbe0>)
 800d85c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d85e:	9306      	str	r3, [sp, #24]
 800d860:	4b08      	ldr	r3, [pc, #32]	; (800d884 <_dtoa_r+0xbe4>)
 800d862:	2a00      	cmp	r2, #0
 800d864:	d001      	beq.n	800d86a <_dtoa_r+0xbca>
 800d866:	f7ff fa4c 	bl	800cd02 <_dtoa_r+0x62>
 800d86a:	f7ff fa4c 	bl	800cd06 <_dtoa_r+0x66>
 800d86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d870:	2b00      	cmp	r3, #0
 800d872:	dcb6      	bgt.n	800d7e2 <_dtoa_r+0xb42>
 800d874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d876:	2b02      	cmp	r3, #2
 800d878:	dd00      	ble.n	800d87c <_dtoa_r+0xbdc>
 800d87a:	e6b6      	b.n	800d5ea <_dtoa_r+0x94a>
 800d87c:	e7b1      	b.n	800d7e2 <_dtoa_r+0xb42>
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	0800fac4 	.word	0x0800fac4
 800d884:	0800facc 	.word	0x0800facc

0800d888 <realloc>:
 800d888:	b510      	push	{r4, lr}
 800d88a:	4b03      	ldr	r3, [pc, #12]	; (800d898 <realloc+0x10>)
 800d88c:	000a      	movs	r2, r1
 800d88e:	0001      	movs	r1, r0
 800d890:	6818      	ldr	r0, [r3, #0]
 800d892:	f000 f803 	bl	800d89c <_realloc_r>
 800d896:	bd10      	pop	{r4, pc}
 800d898:	200006c0 	.word	0x200006c0

0800d89c <_realloc_r>:
 800d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89e:	b087      	sub	sp, #28
 800d8a0:	1e0c      	subs	r4, r1, #0
 800d8a2:	9001      	str	r0, [sp, #4]
 800d8a4:	9205      	str	r2, [sp, #20]
 800d8a6:	d106      	bne.n	800d8b6 <_realloc_r+0x1a>
 800d8a8:	0011      	movs	r1, r2
 800d8aa:	f7f9 fe7b 	bl	80075a4 <_malloc_r>
 800d8ae:	0007      	movs	r7, r0
 800d8b0:	0038      	movs	r0, r7
 800d8b2:	b007      	add	sp, #28
 800d8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b6:	9801      	ldr	r0, [sp, #4]
 800d8b8:	f7fa f888 	bl	80079cc <__malloc_lock>
 800d8bc:	0023      	movs	r3, r4
 800d8be:	3b08      	subs	r3, #8
 800d8c0:	685f      	ldr	r7, [r3, #4]
 800d8c2:	9304      	str	r3, [sp, #16]
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	330b      	adds	r3, #11
 800d8c8:	2b16      	cmp	r3, #22
 800d8ca:	d908      	bls.n	800d8de <_realloc_r+0x42>
 800d8cc:	2207      	movs	r2, #7
 800d8ce:	4393      	bics	r3, r2
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	d506      	bpl.n	800d8e2 <_realloc_r+0x46>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	9a01      	ldr	r2, [sp, #4]
 800d8d8:	2700      	movs	r7, #0
 800d8da:	6013      	str	r3, [r2, #0]
 800d8dc:	e7e8      	b.n	800d8b0 <_realloc_r+0x14>
 800d8de:	2310      	movs	r3, #16
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	9a05      	ldr	r2, [sp, #20]
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d3f4      	bcc.n	800d8d4 <_realloc_r+0x38>
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	003a      	movs	r2, r7
 800d8ee:	9302      	str	r3, [sp, #8]
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	439a      	bics	r2, r3
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	9203      	str	r2, [sp, #12]
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	dc00      	bgt.n	800d8fe <_realloc_r+0x62>
 800d8fc:	e169      	b.n	800dbd2 <_realloc_r+0x336>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	48b8      	ldr	r0, [pc, #736]	; (800dbe4 <_realloc_r+0x348>)
 800d902:	189b      	adds	r3, r3, r2
 800d904:	6882      	ldr	r2, [r0, #8]
 800d906:	4694      	mov	ip, r2
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	459c      	cmp	ip, r3
 800d90c:	d006      	beq.n	800d91c <_realloc_r+0x80>
 800d90e:	2501      	movs	r5, #1
 800d910:	0011      	movs	r1, r2
 800d912:	43a9      	bics	r1, r5
 800d914:	1859      	adds	r1, r3, r1
 800d916:	6849      	ldr	r1, [r1, #4]
 800d918:	4229      	tst	r1, r5
 800d91a:	d144      	bne.n	800d9a6 <_realloc_r+0x10a>
 800d91c:	2103      	movs	r1, #3
 800d91e:	438a      	bics	r2, r1
 800d920:	9903      	ldr	r1, [sp, #12]
 800d922:	188e      	adds	r6, r1, r2
 800d924:	9900      	ldr	r1, [sp, #0]
 800d926:	459c      	cmp	ip, r3
 800d928:	d117      	bne.n	800d95a <_realloc_r+0xbe>
 800d92a:	3110      	adds	r1, #16
 800d92c:	42b1      	cmp	r1, r6
 800d92e:	dc3c      	bgt.n	800d9aa <_realloc_r+0x10e>
 800d930:	9a00      	ldr	r2, [sp, #0]
 800d932:	2101      	movs	r1, #1
 800d934:	4694      	mov	ip, r2
 800d936:	1ab6      	subs	r6, r6, r2
 800d938:	0022      	movs	r2, r4
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	430e      	orrs	r6, r1
 800d93e:	4463      	add	r3, ip
 800d940:	6083      	str	r3, [r0, #8]
 800d942:	3a08      	subs	r2, #8
 800d944:	605e      	str	r6, [r3, #4]
 800d946:	6853      	ldr	r3, [r2, #4]
 800d948:	9801      	ldr	r0, [sp, #4]
 800d94a:	400b      	ands	r3, r1
 800d94c:	4661      	mov	r1, ip
 800d94e:	430b      	orrs	r3, r1
 800d950:	6053      	str	r3, [r2, #4]
 800d952:	f7fa f843 	bl	80079dc <__malloc_unlock>
 800d956:	0027      	movs	r7, r4
 800d958:	e7aa      	b.n	800d8b0 <_realloc_r+0x14>
 800d95a:	42b1      	cmp	r1, r6
 800d95c:	dc25      	bgt.n	800d9aa <_realloc_r+0x10e>
 800d95e:	68da      	ldr	r2, [r3, #12]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	60da      	str	r2, [r3, #12]
 800d964:	6093      	str	r3, [r2, #8]
 800d966:	9b00      	ldr	r3, [sp, #0]
 800d968:	9a02      	ldr	r2, [sp, #8]
 800d96a:	1af4      	subs	r4, r6, r3
 800d96c:	9b02      	ldr	r3, [sp, #8]
 800d96e:	1992      	adds	r2, r2, r6
 800d970:	6858      	ldr	r0, [r3, #4]
 800d972:	2301      	movs	r3, #1
 800d974:	4018      	ands	r0, r3
 800d976:	2c0f      	cmp	r4, #15
 800d978:	d800      	bhi.n	800d97c <_realloc_r+0xe0>
 800d97a:	e12c      	b.n	800dbd6 <_realloc_r+0x33a>
 800d97c:	9d00      	ldr	r5, [sp, #0]
 800d97e:	9902      	ldr	r1, [sp, #8]
 800d980:	4328      	orrs	r0, r5
 800d982:	1949      	adds	r1, r1, r5
 800d984:	9d02      	ldr	r5, [sp, #8]
 800d986:	431c      	orrs	r4, r3
 800d988:	6068      	str	r0, [r5, #4]
 800d98a:	604c      	str	r4, [r1, #4]
 800d98c:	6850      	ldr	r0, [r2, #4]
 800d98e:	3108      	adds	r1, #8
 800d990:	4303      	orrs	r3, r0
 800d992:	6053      	str	r3, [r2, #4]
 800d994:	9801      	ldr	r0, [sp, #4]
 800d996:	f7fb f9a3 	bl	8008ce0 <_free_r>
 800d99a:	9801      	ldr	r0, [sp, #4]
 800d99c:	f7fa f81e 	bl	80079dc <__malloc_unlock>
 800d9a0:	9f02      	ldr	r7, [sp, #8]
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	e784      	b.n	800d8b0 <_realloc_r+0x14>
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	0013      	movs	r3, r2
 800d9aa:	07ff      	lsls	r7, r7, #31
 800d9ac:	d500      	bpl.n	800d9b0 <_realloc_r+0x114>
 800d9ae:	e0c6      	b.n	800db3e <_realloc_r+0x2a2>
 800d9b0:	0021      	movs	r1, r4
 800d9b2:	2003      	movs	r0, #3
 800d9b4:	3908      	subs	r1, #8
 800d9b6:	680d      	ldr	r5, [r1, #0]
 800d9b8:	9904      	ldr	r1, [sp, #16]
 800d9ba:	1b4d      	subs	r5, r1, r5
 800d9bc:	6869      	ldr	r1, [r5, #4]
 800d9be:	4381      	bics	r1, r0
 800d9c0:	9803      	ldr	r0, [sp, #12]
 800d9c2:	180f      	adds	r7, r1, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d100      	bne.n	800d9ca <_realloc_r+0x12e>
 800d9c8:	e084      	b.n	800dad4 <_realloc_r+0x238>
 800d9ca:	19d6      	adds	r6, r2, r7
 800d9cc:	459c      	cmp	ip, r3
 800d9ce:	d148      	bne.n	800da62 <_realloc_r+0x1c6>
 800d9d0:	9b00      	ldr	r3, [sp, #0]
 800d9d2:	3310      	adds	r3, #16
 800d9d4:	42b3      	cmp	r3, r6
 800d9d6:	dc7d      	bgt.n	800dad4 <_realloc_r+0x238>
 800d9d8:	68aa      	ldr	r2, [r5, #8]
 800d9da:	68eb      	ldr	r3, [r5, #12]
 800d9dc:	002f      	movs	r7, r5
 800d9de:	60d3      	str	r3, [r2, #12]
 800d9e0:	609a      	str	r2, [r3, #8]
 800d9e2:	0002      	movs	r2, r0
 800d9e4:	3a04      	subs	r2, #4
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	2a24      	cmp	r2, #36	; 0x24
 800d9ea:	d835      	bhi.n	800da58 <_realloc_r+0x1bc>
 800d9ec:	003b      	movs	r3, r7
 800d9ee:	2a13      	cmp	r2, #19
 800d9f0:	d908      	bls.n	800da04 <_realloc_r+0x168>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	60ab      	str	r3, [r5, #8]
 800d9f6:	6863      	ldr	r3, [r4, #4]
 800d9f8:	60eb      	str	r3, [r5, #12]
 800d9fa:	2a1b      	cmp	r2, #27
 800d9fc:	d81a      	bhi.n	800da34 <_realloc_r+0x198>
 800d9fe:	002b      	movs	r3, r5
 800da00:	3408      	adds	r4, #8
 800da02:	3310      	adds	r3, #16
 800da04:	6822      	ldr	r2, [r4, #0]
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	6862      	ldr	r2, [r4, #4]
 800da0a:	605a      	str	r2, [r3, #4]
 800da0c:	68a2      	ldr	r2, [r4, #8]
 800da0e:	609a      	str	r2, [r3, #8]
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	4a74      	ldr	r2, [pc, #464]	; (800dbe4 <_realloc_r+0x348>)
 800da14:	18eb      	adds	r3, r5, r3
 800da16:	6093      	str	r3, [r2, #8]
 800da18:	9a00      	ldr	r2, [sp, #0]
 800da1a:	1ab6      	subs	r6, r6, r2
 800da1c:	2201      	movs	r2, #1
 800da1e:	4316      	orrs	r6, r2
 800da20:	605e      	str	r6, [r3, #4]
 800da22:	686b      	ldr	r3, [r5, #4]
 800da24:	4013      	ands	r3, r2
 800da26:	9a00      	ldr	r2, [sp, #0]
 800da28:	4313      	orrs	r3, r2
 800da2a:	606b      	str	r3, [r5, #4]
 800da2c:	9801      	ldr	r0, [sp, #4]
 800da2e:	f7f9 ffd5 	bl	80079dc <__malloc_unlock>
 800da32:	e73d      	b.n	800d8b0 <_realloc_r+0x14>
 800da34:	68a3      	ldr	r3, [r4, #8]
 800da36:	612b      	str	r3, [r5, #16]
 800da38:	68e3      	ldr	r3, [r4, #12]
 800da3a:	616b      	str	r3, [r5, #20]
 800da3c:	2a24      	cmp	r2, #36	; 0x24
 800da3e:	d003      	beq.n	800da48 <_realloc_r+0x1ac>
 800da40:	002b      	movs	r3, r5
 800da42:	3410      	adds	r4, #16
 800da44:	3318      	adds	r3, #24
 800da46:	e7dd      	b.n	800da04 <_realloc_r+0x168>
 800da48:	6923      	ldr	r3, [r4, #16]
 800da4a:	61ab      	str	r3, [r5, #24]
 800da4c:	002b      	movs	r3, r5
 800da4e:	6962      	ldr	r2, [r4, #20]
 800da50:	3320      	adds	r3, #32
 800da52:	61ea      	str	r2, [r5, #28]
 800da54:	3418      	adds	r4, #24
 800da56:	e7d5      	b.n	800da04 <_realloc_r+0x168>
 800da58:	0021      	movs	r1, r4
 800da5a:	0038      	movs	r0, r7
 800da5c:	f001 fbb5 	bl	800f1ca <memmove>
 800da60:	e7d6      	b.n	800da10 <_realloc_r+0x174>
 800da62:	9a00      	ldr	r2, [sp, #0]
 800da64:	42b2      	cmp	r2, r6
 800da66:	dc35      	bgt.n	800dad4 <_realloc_r+0x238>
 800da68:	0028      	movs	r0, r5
 800da6a:	68da      	ldr	r2, [r3, #12]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	3008      	adds	r0, #8
 800da70:	60da      	str	r2, [r3, #12]
 800da72:	6093      	str	r3, [r2, #8]
 800da74:	68aa      	ldr	r2, [r5, #8]
 800da76:	68eb      	ldr	r3, [r5, #12]
 800da78:	60d3      	str	r3, [r2, #12]
 800da7a:	609a      	str	r2, [r3, #8]
 800da7c:	9a03      	ldr	r2, [sp, #12]
 800da7e:	3a04      	subs	r2, #4
 800da80:	2a24      	cmp	r2, #36	; 0x24
 800da82:	d823      	bhi.n	800dacc <_realloc_r+0x230>
 800da84:	2a13      	cmp	r2, #19
 800da86:	d907      	bls.n	800da98 <_realloc_r+0x1fc>
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	60ab      	str	r3, [r5, #8]
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	60eb      	str	r3, [r5, #12]
 800da90:	2a1b      	cmp	r2, #27
 800da92:	d809      	bhi.n	800daa8 <_realloc_r+0x20c>
 800da94:	3408      	adds	r4, #8
 800da96:	3008      	adds	r0, #8
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	6003      	str	r3, [r0, #0]
 800da9c:	6863      	ldr	r3, [r4, #4]
 800da9e:	6043      	str	r3, [r0, #4]
 800daa0:	68a3      	ldr	r3, [r4, #8]
 800daa2:	6083      	str	r3, [r0, #8]
 800daa4:	9502      	str	r5, [sp, #8]
 800daa6:	e75e      	b.n	800d966 <_realloc_r+0xca>
 800daa8:	68a3      	ldr	r3, [r4, #8]
 800daaa:	612b      	str	r3, [r5, #16]
 800daac:	68e3      	ldr	r3, [r4, #12]
 800daae:	616b      	str	r3, [r5, #20]
 800dab0:	2a24      	cmp	r2, #36	; 0x24
 800dab2:	d003      	beq.n	800dabc <_realloc_r+0x220>
 800dab4:	0028      	movs	r0, r5
 800dab6:	3410      	adds	r4, #16
 800dab8:	3018      	adds	r0, #24
 800daba:	e7ed      	b.n	800da98 <_realloc_r+0x1fc>
 800dabc:	0028      	movs	r0, r5
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	3020      	adds	r0, #32
 800dac2:	61ab      	str	r3, [r5, #24]
 800dac4:	6963      	ldr	r3, [r4, #20]
 800dac6:	3418      	adds	r4, #24
 800dac8:	61eb      	str	r3, [r5, #28]
 800daca:	e7e5      	b.n	800da98 <_realloc_r+0x1fc>
 800dacc:	0021      	movs	r1, r4
 800dace:	f001 fb7c 	bl	800f1ca <memmove>
 800dad2:	e7e7      	b.n	800daa4 <_realloc_r+0x208>
 800dad4:	9b00      	ldr	r3, [sp, #0]
 800dad6:	42bb      	cmp	r3, r7
 800dad8:	dc31      	bgt.n	800db3e <_realloc_r+0x2a2>
 800dada:	0028      	movs	r0, r5
 800dadc:	68aa      	ldr	r2, [r5, #8]
 800dade:	68eb      	ldr	r3, [r5, #12]
 800dae0:	3008      	adds	r0, #8
 800dae2:	60d3      	str	r3, [r2, #12]
 800dae4:	609a      	str	r2, [r3, #8]
 800dae6:	9a03      	ldr	r2, [sp, #12]
 800dae8:	3a04      	subs	r2, #4
 800daea:	2a24      	cmp	r2, #36	; 0x24
 800daec:	d823      	bhi.n	800db36 <_realloc_r+0x29a>
 800daee:	2a13      	cmp	r2, #19
 800daf0:	d907      	bls.n	800db02 <_realloc_r+0x266>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	60ab      	str	r3, [r5, #8]
 800daf6:	6863      	ldr	r3, [r4, #4]
 800daf8:	60eb      	str	r3, [r5, #12]
 800dafa:	2a1b      	cmp	r2, #27
 800dafc:	d809      	bhi.n	800db12 <_realloc_r+0x276>
 800dafe:	3408      	adds	r4, #8
 800db00:	3008      	adds	r0, #8
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	6003      	str	r3, [r0, #0]
 800db06:	6863      	ldr	r3, [r4, #4]
 800db08:	6043      	str	r3, [r0, #4]
 800db0a:	68a3      	ldr	r3, [r4, #8]
 800db0c:	6083      	str	r3, [r0, #8]
 800db0e:	003e      	movs	r6, r7
 800db10:	e7c8      	b.n	800daa4 <_realloc_r+0x208>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	612b      	str	r3, [r5, #16]
 800db16:	68e3      	ldr	r3, [r4, #12]
 800db18:	616b      	str	r3, [r5, #20]
 800db1a:	2a24      	cmp	r2, #36	; 0x24
 800db1c:	d003      	beq.n	800db26 <_realloc_r+0x28a>
 800db1e:	0028      	movs	r0, r5
 800db20:	3410      	adds	r4, #16
 800db22:	3018      	adds	r0, #24
 800db24:	e7ed      	b.n	800db02 <_realloc_r+0x266>
 800db26:	0028      	movs	r0, r5
 800db28:	6923      	ldr	r3, [r4, #16]
 800db2a:	3020      	adds	r0, #32
 800db2c:	61ab      	str	r3, [r5, #24]
 800db2e:	6963      	ldr	r3, [r4, #20]
 800db30:	3418      	adds	r4, #24
 800db32:	61eb      	str	r3, [r5, #28]
 800db34:	e7e5      	b.n	800db02 <_realloc_r+0x266>
 800db36:	0021      	movs	r1, r4
 800db38:	f001 fb47 	bl	800f1ca <memmove>
 800db3c:	e7e7      	b.n	800db0e <_realloc_r+0x272>
 800db3e:	9905      	ldr	r1, [sp, #20]
 800db40:	9801      	ldr	r0, [sp, #4]
 800db42:	f7f9 fd2f 	bl	80075a4 <_malloc_r>
 800db46:	1e07      	subs	r7, r0, #0
 800db48:	d100      	bne.n	800db4c <_realloc_r+0x2b0>
 800db4a:	e76f      	b.n	800da2c <_realloc_r+0x190>
 800db4c:	0023      	movs	r3, r4
 800db4e:	2201      	movs	r2, #1
 800db50:	3b08      	subs	r3, #8
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4393      	bics	r3, r2
 800db56:	9a04      	ldr	r2, [sp, #16]
 800db58:	18d3      	adds	r3, r2, r3
 800db5a:	0002      	movs	r2, r0
 800db5c:	3a08      	subs	r2, #8
 800db5e:	4293      	cmp	r3, r2
 800db60:	d105      	bne.n	800db6e <_realloc_r+0x2d2>
 800db62:	685e      	ldr	r6, [r3, #4]
 800db64:	2303      	movs	r3, #3
 800db66:	439e      	bics	r6, r3
 800db68:	9b03      	ldr	r3, [sp, #12]
 800db6a:	18f6      	adds	r6, r6, r3
 800db6c:	e6fb      	b.n	800d966 <_realloc_r+0xca>
 800db6e:	9a03      	ldr	r2, [sp, #12]
 800db70:	3a04      	subs	r2, #4
 800db72:	2a24      	cmp	r2, #36	; 0x24
 800db74:	d829      	bhi.n	800dbca <_realloc_r+0x32e>
 800db76:	0003      	movs	r3, r0
 800db78:	0021      	movs	r1, r4
 800db7a:	2a13      	cmp	r2, #19
 800db7c:	d908      	bls.n	800db90 <_realloc_r+0x2f4>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	6003      	str	r3, [r0, #0]
 800db82:	6863      	ldr	r3, [r4, #4]
 800db84:	6043      	str	r3, [r0, #4]
 800db86:	2a1b      	cmp	r2, #27
 800db88:	d80d      	bhi.n	800dba6 <_realloc_r+0x30a>
 800db8a:	0003      	movs	r3, r0
 800db8c:	3108      	adds	r1, #8
 800db8e:	3308      	adds	r3, #8
 800db90:	680a      	ldr	r2, [r1, #0]
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	684a      	ldr	r2, [r1, #4]
 800db96:	605a      	str	r2, [r3, #4]
 800db98:	688a      	ldr	r2, [r1, #8]
 800db9a:	609a      	str	r2, [r3, #8]
 800db9c:	0021      	movs	r1, r4
 800db9e:	9801      	ldr	r0, [sp, #4]
 800dba0:	f7fb f89e 	bl	8008ce0 <_free_r>
 800dba4:	e742      	b.n	800da2c <_realloc_r+0x190>
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	6083      	str	r3, [r0, #8]
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	60c3      	str	r3, [r0, #12]
 800dbae:	2a24      	cmp	r2, #36	; 0x24
 800dbb0:	d003      	beq.n	800dbba <_realloc_r+0x31e>
 800dbb2:	0003      	movs	r3, r0
 800dbb4:	3110      	adds	r1, #16
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	e7ea      	b.n	800db90 <_realloc_r+0x2f4>
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	3118      	adds	r1, #24
 800dbbe:	6103      	str	r3, [r0, #16]
 800dbc0:	0003      	movs	r3, r0
 800dbc2:	6962      	ldr	r2, [r4, #20]
 800dbc4:	3318      	adds	r3, #24
 800dbc6:	6142      	str	r2, [r0, #20]
 800dbc8:	e7e2      	b.n	800db90 <_realloc_r+0x2f4>
 800dbca:	0021      	movs	r1, r4
 800dbcc:	f001 fafd 	bl	800f1ca <memmove>
 800dbd0:	e7e4      	b.n	800db9c <_realloc_r+0x300>
 800dbd2:	9e03      	ldr	r6, [sp, #12]
 800dbd4:	e6c7      	b.n	800d966 <_realloc_r+0xca>
 800dbd6:	9902      	ldr	r1, [sp, #8]
 800dbd8:	4306      	orrs	r6, r0
 800dbda:	604e      	str	r6, [r1, #4]
 800dbdc:	6851      	ldr	r1, [r2, #4]
 800dbde:	430b      	orrs	r3, r1
 800dbe0:	6053      	str	r3, [r2, #4]
 800dbe2:	e6da      	b.n	800d99a <_realloc_r+0xfe>
 800dbe4:	20000014 	.word	0x20000014

0800dbe8 <_strtoul_l.constprop.0>:
 800dbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbea:	b087      	sub	sp, #28
 800dbec:	9202      	str	r2, [sp, #8]
 800dbee:	4a3e      	ldr	r2, [pc, #248]	; (800dce8 <_strtoul_l.constprop.0+0x100>)
 800dbf0:	001e      	movs	r6, r3
 800dbf2:	9101      	str	r1, [sp, #4]
 800dbf4:	000b      	movs	r3, r1
 800dbf6:	4694      	mov	ip, r2
 800dbf8:	2108      	movs	r1, #8
 800dbfa:	9005      	str	r0, [sp, #20]
 800dbfc:	001a      	movs	r2, r3
 800dbfe:	4660      	mov	r0, ip
 800dc00:	7814      	ldrb	r4, [r2, #0]
 800dc02:	3301      	adds	r3, #1
 800dc04:	5d00      	ldrb	r0, [r0, r4]
 800dc06:	001d      	movs	r5, r3
 800dc08:	0007      	movs	r7, r0
 800dc0a:	400f      	ands	r7, r1
 800dc0c:	4208      	tst	r0, r1
 800dc0e:	d1f5      	bne.n	800dbfc <_strtoul_l.constprop.0+0x14>
 800dc10:	2c2d      	cmp	r4, #45	; 0x2d
 800dc12:	d13d      	bne.n	800dc90 <_strtoul_l.constprop.0+0xa8>
 800dc14:	2701      	movs	r7, #1
 800dc16:	781c      	ldrb	r4, [r3, #0]
 800dc18:	1c95      	adds	r5, r2, #2
 800dc1a:	2e00      	cmp	r6, #0
 800dc1c:	d05f      	beq.n	800dcde <_strtoul_l.constprop.0+0xf6>
 800dc1e:	2e10      	cmp	r6, #16
 800dc20:	d109      	bne.n	800dc36 <_strtoul_l.constprop.0+0x4e>
 800dc22:	2c30      	cmp	r4, #48	; 0x30
 800dc24:	d107      	bne.n	800dc36 <_strtoul_l.constprop.0+0x4e>
 800dc26:	2220      	movs	r2, #32
 800dc28:	782b      	ldrb	r3, [r5, #0]
 800dc2a:	4393      	bics	r3, r2
 800dc2c:	2b58      	cmp	r3, #88	; 0x58
 800dc2e:	d151      	bne.n	800dcd4 <_strtoul_l.constprop.0+0xec>
 800dc30:	2610      	movs	r6, #16
 800dc32:	786c      	ldrb	r4, [r5, #1]
 800dc34:	3502      	adds	r5, #2
 800dc36:	2001      	movs	r0, #1
 800dc38:	0031      	movs	r1, r6
 800dc3a:	4240      	negs	r0, r0
 800dc3c:	f7f2 fa7e 	bl	800013c <__udivsi3>
 800dc40:	9003      	str	r0, [sp, #12]
 800dc42:	2001      	movs	r0, #1
 800dc44:	0031      	movs	r1, r6
 800dc46:	4240      	negs	r0, r0
 800dc48:	f7f2 fafe 	bl	8000248 <__aeabi_uidivmod>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	2201      	movs	r2, #1
 800dc50:	9104      	str	r1, [sp, #16]
 800dc52:	2101      	movs	r1, #1
 800dc54:	0018      	movs	r0, r3
 800dc56:	4694      	mov	ip, r2
 800dc58:	4249      	negs	r1, r1
 800dc5a:	0022      	movs	r2, r4
 800dc5c:	3a30      	subs	r2, #48	; 0x30
 800dc5e:	2a09      	cmp	r2, #9
 800dc60:	d903      	bls.n	800dc6a <_strtoul_l.constprop.0+0x82>
 800dc62:	3a11      	subs	r2, #17
 800dc64:	2a19      	cmp	r2, #25
 800dc66:	d818      	bhi.n	800dc9a <_strtoul_l.constprop.0+0xb2>
 800dc68:	320a      	adds	r2, #10
 800dc6a:	4296      	cmp	r6, r2
 800dc6c:	dd19      	ble.n	800dca2 <_strtoul_l.constprop.0+0xba>
 800dc6e:	1c5c      	adds	r4, r3, #1
 800dc70:	d00b      	beq.n	800dc8a <_strtoul_l.constprop.0+0xa2>
 800dc72:	9c03      	ldr	r4, [sp, #12]
 800dc74:	000b      	movs	r3, r1
 800dc76:	4284      	cmp	r4, r0
 800dc78:	d307      	bcc.n	800dc8a <_strtoul_l.constprop.0+0xa2>
 800dc7a:	d103      	bne.n	800dc84 <_strtoul_l.constprop.0+0x9c>
 800dc7c:	9c04      	ldr	r4, [sp, #16]
 800dc7e:	000b      	movs	r3, r1
 800dc80:	4294      	cmp	r4, r2
 800dc82:	db02      	blt.n	800dc8a <_strtoul_l.constprop.0+0xa2>
 800dc84:	4663      	mov	r3, ip
 800dc86:	4370      	muls	r0, r6
 800dc88:	1810      	adds	r0, r2, r0
 800dc8a:	782c      	ldrb	r4, [r5, #0]
 800dc8c:	3501      	adds	r5, #1
 800dc8e:	e7e4      	b.n	800dc5a <_strtoul_l.constprop.0+0x72>
 800dc90:	2c2b      	cmp	r4, #43	; 0x2b
 800dc92:	d1c2      	bne.n	800dc1a <_strtoul_l.constprop.0+0x32>
 800dc94:	781c      	ldrb	r4, [r3, #0]
 800dc96:	1c95      	adds	r5, r2, #2
 800dc98:	e7bf      	b.n	800dc1a <_strtoul_l.constprop.0+0x32>
 800dc9a:	0022      	movs	r2, r4
 800dc9c:	3a61      	subs	r2, #97	; 0x61
 800dc9e:	2a19      	cmp	r2, #25
 800dca0:	d9e2      	bls.n	800dc68 <_strtoul_l.constprop.0+0x80>
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	d108      	bne.n	800dcb8 <_strtoul_l.constprop.0+0xd0>
 800dca6:	2222      	movs	r2, #34	; 0x22
 800dca8:	9905      	ldr	r1, [sp, #20]
 800dcaa:	0018      	movs	r0, r3
 800dcac:	600a      	str	r2, [r1, #0]
 800dcae:	9a02      	ldr	r2, [sp, #8]
 800dcb0:	2a00      	cmp	r2, #0
 800dcb2:	d109      	bne.n	800dcc8 <_strtoul_l.constprop.0+0xe0>
 800dcb4:	b007      	add	sp, #28
 800dcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb8:	2f00      	cmp	r7, #0
 800dcba:	d000      	beq.n	800dcbe <_strtoul_l.constprop.0+0xd6>
 800dcbc:	4240      	negs	r0, r0
 800dcbe:	9a02      	ldr	r2, [sp, #8]
 800dcc0:	2a00      	cmp	r2, #0
 800dcc2:	d0f7      	beq.n	800dcb4 <_strtoul_l.constprop.0+0xcc>
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <_strtoul_l.constprop.0+0xe4>
 800dcc8:	1e6b      	subs	r3, r5, #1
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	9b02      	ldr	r3, [sp, #8]
 800dcce:	9a01      	ldr	r2, [sp, #4]
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	e7ef      	b.n	800dcb4 <_strtoul_l.constprop.0+0xcc>
 800dcd4:	2430      	movs	r4, #48	; 0x30
 800dcd6:	2e00      	cmp	r6, #0
 800dcd8:	d1ad      	bne.n	800dc36 <_strtoul_l.constprop.0+0x4e>
 800dcda:	3608      	adds	r6, #8
 800dcdc:	e7ab      	b.n	800dc36 <_strtoul_l.constprop.0+0x4e>
 800dcde:	2c30      	cmp	r4, #48	; 0x30
 800dce0:	d0a1      	beq.n	800dc26 <_strtoul_l.constprop.0+0x3e>
 800dce2:	260a      	movs	r6, #10
 800dce4:	e7a7      	b.n	800dc36 <_strtoul_l.constprop.0+0x4e>
 800dce6:	46c0      	nop			; (mov r8, r8)
 800dce8:	0800f739 	.word	0x0800f739

0800dcec <_strtoul_r>:
 800dcec:	b510      	push	{r4, lr}
 800dcee:	f7ff ff7b 	bl	800dbe8 <_strtoul_l.constprop.0>
 800dcf2:	bd10      	pop	{r4, pc}

0800dcf4 <_strtoll_l.constprop.0>:
 800dcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf6:	b08d      	sub	sp, #52	; 0x34
 800dcf8:	9203      	str	r2, [sp, #12]
 800dcfa:	4a53      	ldr	r2, [pc, #332]	; (800de48 <_strtoll_l.constprop.0+0x154>)
 800dcfc:	001e      	movs	r6, r3
 800dcfe:	9102      	str	r1, [sp, #8]
 800dd00:	000b      	movs	r3, r1
 800dd02:	4694      	mov	ip, r2
 800dd04:	2108      	movs	r1, #8
 800dd06:	900a      	str	r0, [sp, #40]	; 0x28
 800dd08:	001a      	movs	r2, r3
 800dd0a:	4660      	mov	r0, ip
 800dd0c:	7814      	ldrb	r4, [r2, #0]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	5d00      	ldrb	r0, [r0, r4]
 800dd12:	001d      	movs	r5, r3
 800dd14:	0007      	movs	r7, r0
 800dd16:	400f      	ands	r7, r1
 800dd18:	4208      	tst	r0, r1
 800dd1a:	d1f5      	bne.n	800dd08 <_strtoll_l.constprop.0+0x14>
 800dd1c:	2c2d      	cmp	r4, #45	; 0x2d
 800dd1e:	d153      	bne.n	800ddc8 <_strtoll_l.constprop.0+0xd4>
 800dd20:	781c      	ldrb	r4, [r3, #0]
 800dd22:	2301      	movs	r3, #1
 800dd24:	1c95      	adds	r5, r2, #2
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	2e00      	cmp	r6, #0
 800dd2a:	d100      	bne.n	800dd2e <_strtoll_l.constprop.0+0x3a>
 800dd2c:	e086      	b.n	800de3c <_strtoll_l.constprop.0+0x148>
 800dd2e:	2e10      	cmp	r6, #16
 800dd30:	d10a      	bne.n	800dd48 <_strtoll_l.constprop.0+0x54>
 800dd32:	2c30      	cmp	r4, #48	; 0x30
 800dd34:	d108      	bne.n	800dd48 <_strtoll_l.constprop.0+0x54>
 800dd36:	2220      	movs	r2, #32
 800dd38:	782b      	ldrb	r3, [r5, #0]
 800dd3a:	4393      	bics	r3, r2
 800dd3c:	2b58      	cmp	r3, #88	; 0x58
 800dd3e:	d000      	beq.n	800dd42 <_strtoll_l.constprop.0+0x4e>
 800dd40:	e076      	b.n	800de30 <_strtoll_l.constprop.0+0x13c>
 800dd42:	2610      	movs	r6, #16
 800dd44:	786c      	ldrb	r4, [r5, #1]
 800dd46:	3502      	adds	r5, #2
 800dd48:	2001      	movs	r0, #1
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	493f      	ldr	r1, [pc, #252]	; (800de4c <_strtoll_l.constprop.0+0x158>)
 800dd4e:	9a01      	ldr	r2, [sp, #4]
 800dd50:	4240      	negs	r0, r0
 800dd52:	1812      	adds	r2, r2, r0
 800dd54:	414b      	adcs	r3, r1
 800dd56:	9204      	str	r2, [sp, #16]
 800dd58:	9305      	str	r3, [sp, #20]
 800dd5a:	9804      	ldr	r0, [sp, #16]
 800dd5c:	9905      	ldr	r1, [sp, #20]
 800dd5e:	17f3      	asrs	r3, r6, #31
 800dd60:	0032      	movs	r2, r6
 800dd62:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd64:	f7f2 fb9e 	bl	80004a4 <__aeabi_uldivmod>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	000f      	movs	r7, r1
 800dd6c:	9008      	str	r0, [sp, #32]
 800dd6e:	2100      	movs	r1, #0
 800dd70:	2000      	movs	r0, #0
 800dd72:	9209      	str	r2, [sp, #36]	; 0x24
 800dd74:	0022      	movs	r2, r4
 800dd76:	3a30      	subs	r2, #48	; 0x30
 800dd78:	2a09      	cmp	r2, #9
 800dd7a:	d82b      	bhi.n	800ddd4 <_strtoll_l.constprop.0+0xe0>
 800dd7c:	0014      	movs	r4, r2
 800dd7e:	42a6      	cmp	r6, r4
 800dd80:	dd37      	ble.n	800ddf2 <_strtoll_l.constprop.0+0xfe>
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	d01d      	beq.n	800ddc2 <_strtoll_l.constprop.0+0xce>
 800dd86:	42b9      	cmp	r1, r7
 800dd88:	d830      	bhi.n	800ddec <_strtoll_l.constprop.0+0xf8>
 800dd8a:	d102      	bne.n	800dd92 <_strtoll_l.constprop.0+0x9e>
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	4298      	cmp	r0, r3
 800dd90:	d82c      	bhi.n	800ddec <_strtoll_l.constprop.0+0xf8>
 800dd92:	9b08      	ldr	r3, [sp, #32]
 800dd94:	4283      	cmp	r3, r0
 800dd96:	d106      	bne.n	800dda6 <_strtoll_l.constprop.0+0xb2>
 800dd98:	428f      	cmp	r7, r1
 800dd9a:	d104      	bne.n	800dda6 <_strtoll_l.constprop.0+0xb2>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda0:	425b      	negs	r3, r3
 800dda2:	42a2      	cmp	r2, r4
 800dda4:	db0d      	blt.n	800ddc2 <_strtoll_l.constprop.0+0xce>
 800dda6:	000b      	movs	r3, r1
 800dda8:	0002      	movs	r2, r0
 800ddaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddac:	0030      	movs	r0, r6
 800ddae:	f7f2 fb99 	bl	80004e4 <__aeabi_lmul>
 800ddb2:	17e3      	asrs	r3, r4, #31
 800ddb4:	9406      	str	r4, [sp, #24]
 800ddb6:	9307      	str	r3, [sp, #28]
 800ddb8:	9b06      	ldr	r3, [sp, #24]
 800ddba:	9c07      	ldr	r4, [sp, #28]
 800ddbc:	18c0      	adds	r0, r0, r3
 800ddbe:	4161      	adcs	r1, r4
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	782c      	ldrb	r4, [r5, #0]
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	e7d5      	b.n	800dd74 <_strtoll_l.constprop.0+0x80>
 800ddc8:	9701      	str	r7, [sp, #4]
 800ddca:	2c2b      	cmp	r4, #43	; 0x2b
 800ddcc:	d1ac      	bne.n	800dd28 <_strtoll_l.constprop.0+0x34>
 800ddce:	781c      	ldrb	r4, [r3, #0]
 800ddd0:	1c95      	adds	r5, r2, #2
 800ddd2:	e7a9      	b.n	800dd28 <_strtoll_l.constprop.0+0x34>
 800ddd4:	0022      	movs	r2, r4
 800ddd6:	3a41      	subs	r2, #65	; 0x41
 800ddd8:	2a19      	cmp	r2, #25
 800ddda:	d801      	bhi.n	800dde0 <_strtoll_l.constprop.0+0xec>
 800dddc:	3c37      	subs	r4, #55	; 0x37
 800ddde:	e7ce      	b.n	800dd7e <_strtoll_l.constprop.0+0x8a>
 800dde0:	0022      	movs	r2, r4
 800dde2:	3a61      	subs	r2, #97	; 0x61
 800dde4:	2a19      	cmp	r2, #25
 800dde6:	d804      	bhi.n	800ddf2 <_strtoll_l.constprop.0+0xfe>
 800dde8:	3c57      	subs	r4, #87	; 0x57
 800ddea:	e7c8      	b.n	800dd7e <_strtoll_l.constprop.0+0x8a>
 800ddec:	2301      	movs	r3, #1
 800ddee:	425b      	negs	r3, r3
 800ddf0:	e7e7      	b.n	800ddc2 <_strtoll_l.constprop.0+0xce>
 800ddf2:	1c5a      	adds	r2, r3, #1
 800ddf4:	d109      	bne.n	800de0a <_strtoll_l.constprop.0+0x116>
 800ddf6:	9804      	ldr	r0, [sp, #16]
 800ddf8:	9905      	ldr	r1, [sp, #20]
 800ddfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddfc:	3323      	adds	r3, #35	; 0x23
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	9b03      	ldr	r3, [sp, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10e      	bne.n	800de24 <_strtoll_l.constprop.0+0x130>
 800de06:	b00d      	add	sp, #52	; 0x34
 800de08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0a:	9a01      	ldr	r2, [sp, #4]
 800de0c:	2a00      	cmp	r2, #0
 800de0e:	d004      	beq.n	800de1a <_strtoll_l.constprop.0+0x126>
 800de10:	0006      	movs	r6, r0
 800de12:	000f      	movs	r7, r1
 800de14:	2100      	movs	r1, #0
 800de16:	4270      	negs	r0, r6
 800de18:	41b9      	sbcs	r1, r7
 800de1a:	9a03      	ldr	r2, [sp, #12]
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	d0f2      	beq.n	800de06 <_strtoll_l.constprop.0+0x112>
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <_strtoll_l.constprop.0+0x134>
 800de24:	1e6b      	subs	r3, r5, #1
 800de26:	9302      	str	r3, [sp, #8]
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	9a02      	ldr	r2, [sp, #8]
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	e7ea      	b.n	800de06 <_strtoll_l.constprop.0+0x112>
 800de30:	2430      	movs	r4, #48	; 0x30
 800de32:	2e00      	cmp	r6, #0
 800de34:	d000      	beq.n	800de38 <_strtoll_l.constprop.0+0x144>
 800de36:	e787      	b.n	800dd48 <_strtoll_l.constprop.0+0x54>
 800de38:	3608      	adds	r6, #8
 800de3a:	e785      	b.n	800dd48 <_strtoll_l.constprop.0+0x54>
 800de3c:	2c30      	cmp	r4, #48	; 0x30
 800de3e:	d100      	bne.n	800de42 <_strtoll_l.constprop.0+0x14e>
 800de40:	e779      	b.n	800dd36 <_strtoll_l.constprop.0+0x42>
 800de42:	260a      	movs	r6, #10
 800de44:	e780      	b.n	800dd48 <_strtoll_l.constprop.0+0x54>
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	0800f739 	.word	0x0800f739
 800de4c:	7fffffff 	.word	0x7fffffff

0800de50 <_strtoll_r>:
 800de50:	b510      	push	{r4, lr}
 800de52:	f7ff ff4f 	bl	800dcf4 <_strtoll_l.constprop.0>
 800de56:	bd10      	pop	{r4, pc}

0800de58 <_strtoull_l.constprop.0>:
 800de58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5a:	b08b      	sub	sp, #44	; 0x2c
 800de5c:	9202      	str	r2, [sp, #8]
 800de5e:	4a54      	ldr	r2, [pc, #336]	; (800dfb0 <_strtoull_l.constprop.0+0x158>)
 800de60:	001e      	movs	r6, r3
 800de62:	9101      	str	r1, [sp, #4]
 800de64:	000b      	movs	r3, r1
 800de66:	4694      	mov	ip, r2
 800de68:	2108      	movs	r1, #8
 800de6a:	9009      	str	r0, [sp, #36]	; 0x24
 800de6c:	001a      	movs	r2, r3
 800de6e:	4660      	mov	r0, ip
 800de70:	7814      	ldrb	r4, [r2, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	5d00      	ldrb	r0, [r0, r4]
 800de76:	001d      	movs	r5, r3
 800de78:	0007      	movs	r7, r0
 800de7a:	400f      	ands	r7, r1
 800de7c:	4208      	tst	r0, r1
 800de7e:	d1f5      	bne.n	800de6c <_strtoull_l.constprop.0+0x14>
 800de80:	2c2d      	cmp	r4, #45	; 0x2d
 800de82:	d154      	bne.n	800df2e <_strtoull_l.constprop.0+0xd6>
 800de84:	781c      	ldrb	r4, [r3, #0]
 800de86:	2301      	movs	r3, #1
 800de88:	1c95      	adds	r5, r2, #2
 800de8a:	9306      	str	r3, [sp, #24]
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	d100      	bne.n	800de92 <_strtoull_l.constprop.0+0x3a>
 800de90:	e088      	b.n	800dfa4 <_strtoull_l.constprop.0+0x14c>
 800de92:	2e10      	cmp	r6, #16
 800de94:	d10a      	bne.n	800deac <_strtoull_l.constprop.0+0x54>
 800de96:	2c30      	cmp	r4, #48	; 0x30
 800de98:	d108      	bne.n	800deac <_strtoull_l.constprop.0+0x54>
 800de9a:	2220      	movs	r2, #32
 800de9c:	782b      	ldrb	r3, [r5, #0]
 800de9e:	4393      	bics	r3, r2
 800dea0:	2b58      	cmp	r3, #88	; 0x58
 800dea2:	d000      	beq.n	800dea6 <_strtoull_l.constprop.0+0x4e>
 800dea4:	e078      	b.n	800df98 <_strtoull_l.constprop.0+0x140>
 800dea6:	2610      	movs	r6, #16
 800dea8:	786c      	ldrb	r4, [r5, #1]
 800deaa:	3502      	adds	r5, #2
 800deac:	17f7      	asrs	r7, r6, #31
 800deae:	0032      	movs	r2, r6
 800deb0:	003b      	movs	r3, r7
 800deb2:	2001      	movs	r0, #1
 800deb4:	4240      	negs	r0, r0
 800deb6:	17c1      	asrs	r1, r0, #31
 800deb8:	f7f2 faf4 	bl	80004a4 <__aeabi_uldivmod>
 800debc:	0032      	movs	r2, r6
 800debe:	9007      	str	r0, [sp, #28]
 800dec0:	9103      	str	r1, [sp, #12]
 800dec2:	003b      	movs	r3, r7
 800dec4:	2001      	movs	r0, #1
 800dec6:	4240      	negs	r0, r0
 800dec8:	17c1      	asrs	r1, r0, #31
 800deca:	f7f2 faeb 	bl	80004a4 <__aeabi_uldivmod>
 800dece:	2300      	movs	r3, #0
 800ded0:	2000      	movs	r0, #0
 800ded2:	2100      	movs	r1, #0
 800ded4:	9208      	str	r2, [sp, #32]
 800ded6:	0022      	movs	r2, r4
 800ded8:	3a30      	subs	r2, #48	; 0x30
 800deda:	2a09      	cmp	r2, #9
 800dedc:	d82d      	bhi.n	800df3a <_strtoull_l.constprop.0+0xe2>
 800dede:	0014      	movs	r4, r2
 800dee0:	42a6      	cmp	r6, r4
 800dee2:	dd39      	ble.n	800df58 <_strtoull_l.constprop.0+0x100>
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	d01f      	beq.n	800df28 <_strtoull_l.constprop.0+0xd0>
 800dee8:	9b03      	ldr	r3, [sp, #12]
 800deea:	4299      	cmp	r1, r3
 800deec:	d831      	bhi.n	800df52 <_strtoull_l.constprop.0+0xfa>
 800deee:	d102      	bne.n	800def6 <_strtoull_l.constprop.0+0x9e>
 800def0:	9b07      	ldr	r3, [sp, #28]
 800def2:	4298      	cmp	r0, r3
 800def4:	d82d      	bhi.n	800df52 <_strtoull_l.constprop.0+0xfa>
 800def6:	9b07      	ldr	r3, [sp, #28]
 800def8:	4283      	cmp	r3, r0
 800defa:	d107      	bne.n	800df0c <_strtoull_l.constprop.0+0xb4>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	428b      	cmp	r3, r1
 800df00:	d104      	bne.n	800df0c <_strtoull_l.constprop.0+0xb4>
 800df02:	2301      	movs	r3, #1
 800df04:	9a08      	ldr	r2, [sp, #32]
 800df06:	425b      	negs	r3, r3
 800df08:	42a2      	cmp	r2, r4
 800df0a:	db0d      	blt.n	800df28 <_strtoull_l.constprop.0+0xd0>
 800df0c:	000b      	movs	r3, r1
 800df0e:	0002      	movs	r2, r0
 800df10:	0039      	movs	r1, r7
 800df12:	0030      	movs	r0, r6
 800df14:	f7f2 fae6 	bl	80004e4 <__aeabi_lmul>
 800df18:	17e3      	asrs	r3, r4, #31
 800df1a:	9404      	str	r4, [sp, #16]
 800df1c:	9305      	str	r3, [sp, #20]
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	9c05      	ldr	r4, [sp, #20]
 800df22:	18c0      	adds	r0, r0, r3
 800df24:	4161      	adcs	r1, r4
 800df26:	2301      	movs	r3, #1
 800df28:	782c      	ldrb	r4, [r5, #0]
 800df2a:	3501      	adds	r5, #1
 800df2c:	e7d3      	b.n	800ded6 <_strtoull_l.constprop.0+0x7e>
 800df2e:	9706      	str	r7, [sp, #24]
 800df30:	2c2b      	cmp	r4, #43	; 0x2b
 800df32:	d1ab      	bne.n	800de8c <_strtoull_l.constprop.0+0x34>
 800df34:	781c      	ldrb	r4, [r3, #0]
 800df36:	1c95      	adds	r5, r2, #2
 800df38:	e7a8      	b.n	800de8c <_strtoull_l.constprop.0+0x34>
 800df3a:	0022      	movs	r2, r4
 800df3c:	3a41      	subs	r2, #65	; 0x41
 800df3e:	2a19      	cmp	r2, #25
 800df40:	d801      	bhi.n	800df46 <_strtoull_l.constprop.0+0xee>
 800df42:	3c37      	subs	r4, #55	; 0x37
 800df44:	e7cc      	b.n	800dee0 <_strtoull_l.constprop.0+0x88>
 800df46:	0022      	movs	r2, r4
 800df48:	3a61      	subs	r2, #97	; 0x61
 800df4a:	2a19      	cmp	r2, #25
 800df4c:	d804      	bhi.n	800df58 <_strtoull_l.constprop.0+0x100>
 800df4e:	3c57      	subs	r4, #87	; 0x57
 800df50:	e7c6      	b.n	800dee0 <_strtoull_l.constprop.0+0x88>
 800df52:	2301      	movs	r3, #1
 800df54:	425b      	negs	r3, r3
 800df56:	e7e7      	b.n	800df28 <_strtoull_l.constprop.0+0xd0>
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	d10a      	bne.n	800df72 <_strtoull_l.constprop.0+0x11a>
 800df5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df5e:	3323      	adds	r3, #35	; 0x23
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	9b02      	ldr	r3, [sp, #8]
 800df64:	2001      	movs	r0, #1
 800df66:	4240      	negs	r0, r0
 800df68:	17c1      	asrs	r1, r0, #31
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10e      	bne.n	800df8c <_strtoull_l.constprop.0+0x134>
 800df6e:	b00b      	add	sp, #44	; 0x2c
 800df70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df72:	9a06      	ldr	r2, [sp, #24]
 800df74:	2a00      	cmp	r2, #0
 800df76:	d004      	beq.n	800df82 <_strtoull_l.constprop.0+0x12a>
 800df78:	0006      	movs	r6, r0
 800df7a:	000f      	movs	r7, r1
 800df7c:	2100      	movs	r1, #0
 800df7e:	4270      	negs	r0, r6
 800df80:	41b9      	sbcs	r1, r7
 800df82:	9a02      	ldr	r2, [sp, #8]
 800df84:	2a00      	cmp	r2, #0
 800df86:	d0f2      	beq.n	800df6e <_strtoull_l.constprop.0+0x116>
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <_strtoull_l.constprop.0+0x138>
 800df8c:	1e6b      	subs	r3, r5, #1
 800df8e:	9301      	str	r3, [sp, #4]
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	9a01      	ldr	r2, [sp, #4]
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	e7ea      	b.n	800df6e <_strtoull_l.constprop.0+0x116>
 800df98:	2430      	movs	r4, #48	; 0x30
 800df9a:	2e00      	cmp	r6, #0
 800df9c:	d000      	beq.n	800dfa0 <_strtoull_l.constprop.0+0x148>
 800df9e:	e785      	b.n	800deac <_strtoull_l.constprop.0+0x54>
 800dfa0:	3608      	adds	r6, #8
 800dfa2:	e783      	b.n	800deac <_strtoull_l.constprop.0+0x54>
 800dfa4:	2c30      	cmp	r4, #48	; 0x30
 800dfa6:	d100      	bne.n	800dfaa <_strtoull_l.constprop.0+0x152>
 800dfa8:	e777      	b.n	800de9a <_strtoull_l.constprop.0+0x42>
 800dfaa:	260a      	movs	r6, #10
 800dfac:	e77e      	b.n	800deac <_strtoull_l.constprop.0+0x54>
 800dfae:	46c0      	nop			; (mov r8, r8)
 800dfb0:	0800f739 	.word	0x0800f739

0800dfb4 <_strtoull_r>:
 800dfb4:	b510      	push	{r4, lr}
 800dfb6:	f7ff ff4f 	bl	800de58 <_strtoull_l.constprop.0>
 800dfba:	bd10      	pop	{r4, pc}

0800dfbc <_mbrtowc_r>:
 800dfbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfbe:	0004      	movs	r4, r0
 800dfc0:	0010      	movs	r0, r2
 800dfc2:	4a0b      	ldr	r2, [pc, #44]	; (800dff0 <_mbrtowc_r+0x34>)
 800dfc4:	9d06      	ldr	r5, [sp, #24]
 800dfc6:	32e4      	adds	r2, #228	; 0xe4
 800dfc8:	6816      	ldr	r6, [r2, #0]
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d10c      	bne.n	800dfe8 <_mbrtowc_r+0x2c>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	0001      	movs	r1, r0
 800dfd2:	4a08      	ldr	r2, [pc, #32]	; (800dff4 <_mbrtowc_r+0x38>)
 800dfd4:	9500      	str	r5, [sp, #0]
 800dfd6:	0020      	movs	r0, r4
 800dfd8:	47b0      	blx	r6
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d103      	bne.n	800dfe6 <_mbrtowc_r+0x2a>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	338a      	adds	r3, #138	; 0x8a
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800dfe8:	0002      	movs	r2, r0
 800dfea:	9500      	str	r5, [sp, #0]
 800dfec:	e7f3      	b.n	800dfd6 <_mbrtowc_r+0x1a>
 800dfee:	46c0      	nop			; (mov r8, r8)
 800dff0:	20000430 	.word	0x20000430
 800dff4:	0800fac3 	.word	0x0800fac3

0800dff8 <iswspace>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	2100      	movs	r1, #0
 800dffc:	f000 f802 	bl	800e004 <iswspace_l>
 800e000:	bd10      	pop	{r4, pc}
	...

0800e004 <iswspace_l>:
 800e004:	0003      	movs	r3, r0
 800e006:	2000      	movs	r0, #0
 800e008:	2bff      	cmp	r3, #255	; 0xff
 800e00a:	d803      	bhi.n	800e014 <iswspace_l+0x10>
 800e00c:	4a02      	ldr	r2, [pc, #8]	; (800e018 <iswspace_l+0x14>)
 800e00e:	5cd0      	ldrb	r0, [r2, r3]
 800e010:	2308      	movs	r3, #8
 800e012:	4018      	ands	r0, r3
 800e014:	4770      	bx	lr
 800e016:	46c0      	nop			; (mov r8, r8)
 800e018:	0800f739 	.word	0x0800f739

0800e01c <fiprintf>:
 800e01c:	b40e      	push	{r1, r2, r3}
 800e01e:	b517      	push	{r0, r1, r2, r4, lr}
 800e020:	4c05      	ldr	r4, [pc, #20]	; (800e038 <fiprintf+0x1c>)
 800e022:	ab05      	add	r3, sp, #20
 800e024:	cb04      	ldmia	r3!, {r2}
 800e026:	0001      	movs	r1, r0
 800e028:	6820      	ldr	r0, [r4, #0]
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	f000 f954 	bl	800e2d8 <_vfiprintf_r>
 800e030:	bc1e      	pop	{r1, r2, r3, r4}
 800e032:	bc08      	pop	{r3}
 800e034:	b003      	add	sp, #12
 800e036:	4718      	bx	r3
 800e038:	200006c0 	.word	0x200006c0

0800e03c <__ssprint_r>:
 800e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e03e:	6813      	ldr	r3, [r2, #0]
 800e040:	b087      	sub	sp, #28
 800e042:	0017      	movs	r7, r2
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	6893      	ldr	r3, [r2, #8]
 800e048:	2200      	movs	r2, #0
 800e04a:	000c      	movs	r4, r1
 800e04c:	9005      	str	r0, [sp, #20]
 800e04e:	9202      	str	r2, [sp, #8]
 800e050:	9201      	str	r2, [sp, #4]
 800e052:	4293      	cmp	r3, r2
 800e054:	d10d      	bne.n	800e072 <__ssprint_r+0x36>
 800e056:	2000      	movs	r0, #0
 800e058:	2300      	movs	r3, #0
 800e05a:	607b      	str	r3, [r7, #4]
 800e05c:	b007      	add	sp, #28
 800e05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	9302      	str	r3, [sp, #8]
 800e066:	9b03      	ldr	r3, [sp, #12]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	9301      	str	r3, [sp, #4]
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	3308      	adds	r3, #8
 800e070:	9303      	str	r3, [sp, #12]
 800e072:	9a01      	ldr	r2, [sp, #4]
 800e074:	68a6      	ldr	r6, [r4, #8]
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	2a00      	cmp	r2, #0
 800e07a:	d0f1      	beq.n	800e060 <__ssprint_r+0x24>
 800e07c:	42b2      	cmp	r2, r6
 800e07e:	d32e      	bcc.n	800e0de <__ssprint_r+0xa2>
 800e080:	2190      	movs	r1, #144	; 0x90
 800e082:	89a2      	ldrh	r2, [r4, #12]
 800e084:	00c9      	lsls	r1, r1, #3
 800e086:	420a      	tst	r2, r1
 800e088:	d029      	beq.n	800e0de <__ssprint_r+0xa2>
 800e08a:	2003      	movs	r0, #3
 800e08c:	6921      	ldr	r1, [r4, #16]
 800e08e:	1a5b      	subs	r3, r3, r1
 800e090:	9304      	str	r3, [sp, #16]
 800e092:	6963      	ldr	r3, [r4, #20]
 800e094:	4343      	muls	r3, r0
 800e096:	0fdd      	lsrs	r5, r3, #31
 800e098:	18ed      	adds	r5, r5, r3
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	9801      	ldr	r0, [sp, #4]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	181b      	adds	r3, r3, r0
 800e0a2:	106d      	asrs	r5, r5, #1
 800e0a4:	42ab      	cmp	r3, r5
 800e0a6:	d900      	bls.n	800e0aa <__ssprint_r+0x6e>
 800e0a8:	001d      	movs	r5, r3
 800e0aa:	0552      	lsls	r2, r2, #21
 800e0ac:	d532      	bpl.n	800e114 <__ssprint_r+0xd8>
 800e0ae:	0029      	movs	r1, r5
 800e0b0:	9805      	ldr	r0, [sp, #20]
 800e0b2:	f7f9 fa77 	bl	80075a4 <_malloc_r>
 800e0b6:	1e06      	subs	r6, r0, #0
 800e0b8:	d036      	beq.n	800e128 <__ssprint_r+0xec>
 800e0ba:	9a04      	ldr	r2, [sp, #16]
 800e0bc:	6921      	ldr	r1, [r4, #16]
 800e0be:	f7fa fd94 	bl	8008bea <memcpy>
 800e0c2:	89a2      	ldrh	r2, [r4, #12]
 800e0c4:	4b1e      	ldr	r3, [pc, #120]	; (800e140 <__ssprint_r+0x104>)
 800e0c6:	401a      	ands	r2, r3
 800e0c8:	2380      	movs	r3, #128	; 0x80
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	81a3      	strh	r3, [r4, #12]
 800e0ce:	9b04      	ldr	r3, [sp, #16]
 800e0d0:	6126      	str	r6, [r4, #16]
 800e0d2:	18f6      	adds	r6, r6, r3
 800e0d4:	6026      	str	r6, [r4, #0]
 800e0d6:	6165      	str	r5, [r4, #20]
 800e0d8:	9e01      	ldr	r6, [sp, #4]
 800e0da:	1aed      	subs	r5, r5, r3
 800e0dc:	60a5      	str	r5, [r4, #8]
 800e0de:	9b01      	ldr	r3, [sp, #4]
 800e0e0:	429e      	cmp	r6, r3
 800e0e2:	d900      	bls.n	800e0e6 <__ssprint_r+0xaa>
 800e0e4:	001e      	movs	r6, r3
 800e0e6:	0032      	movs	r2, r6
 800e0e8:	9902      	ldr	r1, [sp, #8]
 800e0ea:	6820      	ldr	r0, [r4, #0]
 800e0ec:	f001 f86d 	bl	800f1ca <memmove>
 800e0f0:	9a01      	ldr	r2, [sp, #4]
 800e0f2:	68a3      	ldr	r3, [r4, #8]
 800e0f4:	4694      	mov	ip, r2
 800e0f6:	1b9b      	subs	r3, r3, r6
 800e0f8:	60a3      	str	r3, [r4, #8]
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	199b      	adds	r3, r3, r6
 800e0fe:	6023      	str	r3, [r4, #0]
 800e100:	9b02      	ldr	r3, [sp, #8]
 800e102:	4463      	add	r3, ip
 800e104:	9302      	str	r3, [sp, #8]
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	1a9b      	subs	r3, r3, r2
 800e10a:	60bb      	str	r3, [r7, #8]
 800e10c:	d0a3      	beq.n	800e056 <__ssprint_r+0x1a>
 800e10e:	2300      	movs	r3, #0
 800e110:	9301      	str	r3, [sp, #4]
 800e112:	e7ae      	b.n	800e072 <__ssprint_r+0x36>
 800e114:	002a      	movs	r2, r5
 800e116:	9805      	ldr	r0, [sp, #20]
 800e118:	f7ff fbc0 	bl	800d89c <_realloc_r>
 800e11c:	1e06      	subs	r6, r0, #0
 800e11e:	d1d6      	bne.n	800e0ce <__ssprint_r+0x92>
 800e120:	6921      	ldr	r1, [r4, #16]
 800e122:	9805      	ldr	r0, [sp, #20]
 800e124:	f7fa fddc 	bl	8008ce0 <_free_r>
 800e128:	230c      	movs	r3, #12
 800e12a:	9a05      	ldr	r2, [sp, #20]
 800e12c:	2001      	movs	r0, #1
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	89a2      	ldrh	r2, [r4, #12]
 800e132:	3334      	adds	r3, #52	; 0x34
 800e134:	4313      	orrs	r3, r2
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	2300      	movs	r3, #0
 800e13a:	4240      	negs	r0, r0
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	e78b      	b.n	800e058 <__ssprint_r+0x1c>
 800e140:	fffffb7f 	.word	0xfffffb7f

0800e144 <_sungetc_r>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	0014      	movs	r4, r2
 800e148:	1c4b      	adds	r3, r1, #1
 800e14a:	d103      	bne.n	800e154 <_sungetc_r+0x10>
 800e14c:	2501      	movs	r5, #1
 800e14e:	426d      	negs	r5, r5
 800e150:	0028      	movs	r0, r5
 800e152:	bd70      	pop	{r4, r5, r6, pc}
 800e154:	8993      	ldrh	r3, [r2, #12]
 800e156:	2220      	movs	r2, #32
 800e158:	4393      	bics	r3, r2
 800e15a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e15c:	81a3      	strh	r3, [r4, #12]
 800e15e:	b2ce      	uxtb	r6, r1
 800e160:	6863      	ldr	r3, [r4, #4]
 800e162:	b2cd      	uxtb	r5, r1
 800e164:	2a00      	cmp	r2, #0
 800e166:	d010      	beq.n	800e18a <_sungetc_r+0x46>
 800e168:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e16a:	429a      	cmp	r2, r3
 800e16c:	dd07      	ble.n	800e17e <_sungetc_r+0x3a>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	3b01      	subs	r3, #1
 800e172:	6023      	str	r3, [r4, #0]
 800e174:	701e      	strb	r6, [r3, #0]
 800e176:	6863      	ldr	r3, [r4, #4]
 800e178:	3301      	adds	r3, #1
 800e17a:	6063      	str	r3, [r4, #4]
 800e17c:	e7e8      	b.n	800e150 <_sungetc_r+0xc>
 800e17e:	0021      	movs	r1, r4
 800e180:	f000 ff1a 	bl	800efb8 <__submore>
 800e184:	2800      	cmp	r0, #0
 800e186:	d0f2      	beq.n	800e16e <_sungetc_r+0x2a>
 800e188:	e7e0      	b.n	800e14c <_sungetc_r+0x8>
 800e18a:	6921      	ldr	r1, [r4, #16]
 800e18c:	6822      	ldr	r2, [r4, #0]
 800e18e:	2900      	cmp	r1, #0
 800e190:	d007      	beq.n	800e1a2 <_sungetc_r+0x5e>
 800e192:	4291      	cmp	r1, r2
 800e194:	d205      	bcs.n	800e1a2 <_sungetc_r+0x5e>
 800e196:	1e51      	subs	r1, r2, #1
 800e198:	7808      	ldrb	r0, [r1, #0]
 800e19a:	42a8      	cmp	r0, r5
 800e19c:	d101      	bne.n	800e1a2 <_sungetc_r+0x5e>
 800e19e:	6021      	str	r1, [r4, #0]
 800e1a0:	e7ea      	b.n	800e178 <_sungetc_r+0x34>
 800e1a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e1a4:	0023      	movs	r3, r4
 800e1a6:	3340      	adds	r3, #64	; 0x40
 800e1a8:	6323      	str	r3, [r4, #48]	; 0x30
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	6363      	str	r3, [r4, #52]	; 0x34
 800e1ae:	0023      	movs	r3, r4
 800e1b0:	3342      	adds	r3, #66	; 0x42
 800e1b2:	63a2      	str	r2, [r4, #56]	; 0x38
 800e1b4:	701e      	strb	r6, [r3, #0]
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e7de      	b.n	800e17a <_sungetc_r+0x36>

0800e1bc <__ssrefill_r>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	000c      	movs	r4, r1
 800e1c0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d00e      	beq.n	800e1e4 <__ssrefill_r+0x28>
 800e1c6:	0023      	movs	r3, r4
 800e1c8:	3340      	adds	r3, #64	; 0x40
 800e1ca:	4299      	cmp	r1, r3
 800e1cc:	d001      	beq.n	800e1d2 <__ssrefill_r+0x16>
 800e1ce:	f7fa fd87 	bl	8008ce0 <_free_r>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e1d6:	6320      	str	r0, [r4, #48]	; 0x30
 800e1d8:	6063      	str	r3, [r4, #4]
 800e1da:	4283      	cmp	r3, r0
 800e1dc:	d002      	beq.n	800e1e4 <__ssrefill_r+0x28>
 800e1de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd10      	pop	{r4, pc}
 800e1e4:	6923      	ldr	r3, [r4, #16]
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	89a2      	ldrh	r2, [r4, #12]
 800e1ee:	6063      	str	r3, [r4, #4]
 800e1f0:	3320      	adds	r3, #32
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	4240      	negs	r0, r0
 800e1f8:	e7f3      	b.n	800e1e2 <__ssrefill_r+0x26>

0800e1fa <_sfread_r>:
 800e1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1fc:	0014      	movs	r4, r2
 800e1fe:	435c      	muls	r4, r3
 800e200:	b087      	sub	sp, #28
 800e202:	1e26      	subs	r6, r4, #0
 800e204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e206:	9005      	str	r0, [sp, #20]
 800e208:	9101      	str	r1, [sp, #4]
 800e20a:	9202      	str	r2, [sp, #8]
 800e20c:	9303      	str	r3, [sp, #12]
 800e20e:	d11e      	bne.n	800e24e <_sfread_r+0x54>
 800e210:	0020      	movs	r0, r4
 800e212:	b007      	add	sp, #28
 800e214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e216:	003a      	movs	r2, r7
 800e218:	9801      	ldr	r0, [sp, #4]
 800e21a:	f7fa fce6 	bl	8008bea <memcpy>
 800e21e:	682b      	ldr	r3, [r5, #0]
 800e220:	0029      	movs	r1, r5
 800e222:	19db      	adds	r3, r3, r7
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	2300      	movs	r3, #0
 800e228:	606b      	str	r3, [r5, #4]
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	9805      	ldr	r0, [sp, #20]
 800e22e:	19db      	adds	r3, r3, r7
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	1bf3      	subs	r3, r6, r7
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	f7ff ffc1 	bl	800e1bc <__ssrefill_r>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d006      	beq.n	800e24c <_sfread_r+0x52>
 800e23e:	193c      	adds	r4, r7, r4
 800e240:	1ba0      	subs	r0, r4, r6
 800e242:	9902      	ldr	r1, [sp, #8]
 800e244:	f7f1 ff7a 	bl	800013c <__udivsi3>
 800e248:	0004      	movs	r4, r0
 800e24a:	e7e1      	b.n	800e210 <_sfread_r+0x16>
 800e24c:	9e04      	ldr	r6, [sp, #16]
 800e24e:	686f      	ldr	r7, [r5, #4]
 800e250:	6829      	ldr	r1, [r5, #0]
 800e252:	42b7      	cmp	r7, r6
 800e254:	d3df      	bcc.n	800e216 <_sfread_r+0x1c>
 800e256:	0032      	movs	r2, r6
 800e258:	9801      	ldr	r0, [sp, #4]
 800e25a:	f7fa fcc6 	bl	8008bea <memcpy>
 800e25e:	686b      	ldr	r3, [r5, #4]
 800e260:	9c03      	ldr	r4, [sp, #12]
 800e262:	1b9b      	subs	r3, r3, r6
 800e264:	606b      	str	r3, [r5, #4]
 800e266:	682b      	ldr	r3, [r5, #0]
 800e268:	199b      	adds	r3, r3, r6
 800e26a:	602b      	str	r3, [r5, #0]
 800e26c:	e7d0      	b.n	800e210 <_sfread_r+0x16>

0800e26e <__sprint_r>:
 800e26e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e270:	6893      	ldr	r3, [r2, #8]
 800e272:	b085      	sub	sp, #20
 800e274:	9001      	str	r0, [sp, #4]
 800e276:	000d      	movs	r5, r1
 800e278:	0014      	movs	r4, r2
 800e27a:	1e18      	subs	r0, r3, #0
 800e27c:	d018      	beq.n	800e2b0 <__sprint_r+0x42>
 800e27e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e280:	049b      	lsls	r3, r3, #18
 800e282:	d524      	bpl.n	800e2ce <__sprint_r+0x60>
 800e284:	6817      	ldr	r7, [r2, #0]
 800e286:	2600      	movs	r6, #0
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	9302      	str	r3, [sp, #8]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	089b      	lsrs	r3, r3, #2
 800e292:	9303      	str	r3, [sp, #12]
 800e294:	9b03      	ldr	r3, [sp, #12]
 800e296:	42b3      	cmp	r3, r6
 800e298:	dc0e      	bgt.n	800e2b8 <__sprint_r+0x4a>
 800e29a:	2203      	movs	r2, #3
 800e29c:	9b00      	ldr	r3, [sp, #0]
 800e29e:	68a0      	ldr	r0, [r4, #8]
 800e2a0:	4393      	bics	r3, r2
 800e2a2:	1ac0      	subs	r0, r0, r3
 800e2a4:	60a0      	str	r0, [r4, #8]
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d1ec      	bne.n	800e286 <__sprint_r+0x18>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	60a3      	str	r3, [r4, #8]
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	6063      	str	r3, [r4, #4]
 800e2b4:	b005      	add	sp, #20
 800e2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2b8:	9902      	ldr	r1, [sp, #8]
 800e2ba:	00b3      	lsls	r3, r6, #2
 800e2bc:	58c9      	ldr	r1, [r1, r3]
 800e2be:	002a      	movs	r2, r5
 800e2c0:	9801      	ldr	r0, [sp, #4]
 800e2c2:	f000 ff59 	bl	800f178 <_fputwc_r>
 800e2c6:	1c43      	adds	r3, r0, #1
 800e2c8:	d0f0      	beq.n	800e2ac <__sprint_r+0x3e>
 800e2ca:	3601      	adds	r6, #1
 800e2cc:	e7e2      	b.n	800e294 <__sprint_r+0x26>
 800e2ce:	9801      	ldr	r0, [sp, #4]
 800e2d0:	f000 fd14 	bl	800ecfc <__sfvwrite_r>
 800e2d4:	e7ea      	b.n	800e2ac <__sprint_r+0x3e>
	...

0800e2d8 <_vfiprintf_r>:
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	b0c1      	sub	sp, #260	; 0x104
 800e2dc:	001c      	movs	r4, r3
 800e2de:	001f      	movs	r7, r3
 800e2e0:	9006      	str	r0, [sp, #24]
 800e2e2:	9103      	str	r1, [sp, #12]
 800e2e4:	9207      	str	r2, [sp, #28]
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d004      	beq.n	800e2f4 <_vfiprintf_r+0x1c>
 800e2ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d101      	bne.n	800e2f4 <_vfiprintf_r+0x1c>
 800e2f0:	f7fa facc 	bl	800888c <__sinit>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f8:	07db      	lsls	r3, r3, #31
 800e2fa:	d407      	bmi.n	800e30c <_vfiprintf_r+0x34>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	899b      	ldrh	r3, [r3, #12]
 800e300:	059b      	lsls	r3, r3, #22
 800e302:	d403      	bmi.n	800e30c <_vfiprintf_r+0x34>
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e308:	f7fa fc62 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	220c      	movs	r2, #12
 800e310:	5e9a      	ldrsh	r2, [r3, r2]
 800e312:	2380      	movs	r3, #128	; 0x80
 800e314:	019b      	lsls	r3, r3, #6
 800e316:	421a      	tst	r2, r3
 800e318:	d107      	bne.n	800e32a <_vfiprintf_r+0x52>
 800e31a:	4313      	orrs	r3, r2
 800e31c:	9a03      	ldr	r2, [sp, #12]
 800e31e:	8193      	strh	r3, [r2, #12]
 800e320:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e322:	4aa3      	ldr	r2, [pc, #652]	; (800e5b0 <_vfiprintf_r+0x2d8>)
 800e324:	4013      	ands	r3, r2
 800e326:	9a03      	ldr	r2, [sp, #12]
 800e328:	6653      	str	r3, [r2, #100]	; 0x64
 800e32a:	9b03      	ldr	r3, [sp, #12]
 800e32c:	899b      	ldrh	r3, [r3, #12]
 800e32e:	071b      	lsls	r3, r3, #28
 800e330:	d503      	bpl.n	800e33a <_vfiprintf_r+0x62>
 800e332:	9b03      	ldr	r3, [sp, #12]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d118      	bne.n	800e36c <_vfiprintf_r+0x94>
 800e33a:	9903      	ldr	r1, [sp, #12]
 800e33c:	9806      	ldr	r0, [sp, #24]
 800e33e:	f000 fe79 	bl	800f034 <__swsetup_r>
 800e342:	2800      	cmp	r0, #0
 800e344:	d012      	beq.n	800e36c <_vfiprintf_r+0x94>
 800e346:	9b03      	ldr	r3, [sp, #12]
 800e348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34a:	07db      	lsls	r3, r3, #31
 800e34c:	d505      	bpl.n	800e35a <_vfiprintf_r+0x82>
 800e34e:	2301      	movs	r3, #1
 800e350:	425b      	negs	r3, r3
 800e352:	9308      	str	r3, [sp, #32]
 800e354:	9808      	ldr	r0, [sp, #32]
 800e356:	b041      	add	sp, #260	; 0x104
 800e358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	899b      	ldrh	r3, [r3, #12]
 800e35e:	059b      	lsls	r3, r3, #22
 800e360:	d4f5      	bmi.n	800e34e <_vfiprintf_r+0x76>
 800e362:	9b03      	ldr	r3, [sp, #12]
 800e364:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e366:	f7fa fc34 	bl	8008bd2 <__retarget_lock_release_recursive>
 800e36a:	e7f0      	b.n	800e34e <_vfiprintf_r+0x76>
 800e36c:	221a      	movs	r2, #26
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	899b      	ldrh	r3, [r3, #12]
 800e372:	401a      	ands	r2, r3
 800e374:	2a0a      	cmp	r2, #10
 800e376:	d116      	bne.n	800e3a6 <_vfiprintf_r+0xce>
 800e378:	9a03      	ldr	r2, [sp, #12]
 800e37a:	210e      	movs	r1, #14
 800e37c:	5e52      	ldrsh	r2, [r2, r1]
 800e37e:	2a00      	cmp	r2, #0
 800e380:	db11      	blt.n	800e3a6 <_vfiprintf_r+0xce>
 800e382:	9a03      	ldr	r2, [sp, #12]
 800e384:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e386:	07d2      	lsls	r2, r2, #31
 800e388:	d405      	bmi.n	800e396 <_vfiprintf_r+0xbe>
 800e38a:	059b      	lsls	r3, r3, #22
 800e38c:	d403      	bmi.n	800e396 <_vfiprintf_r+0xbe>
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e392:	f7fa fc1e 	bl	8008bd2 <__retarget_lock_release_recursive>
 800e396:	0023      	movs	r3, r4
 800e398:	9a07      	ldr	r2, [sp, #28]
 800e39a:	9903      	ldr	r1, [sp, #12]
 800e39c:	9806      	ldr	r0, [sp, #24]
 800e39e:	f000 fc69 	bl	800ec74 <__sbprintf>
 800e3a2:	9008      	str	r0, [sp, #32]
 800e3a4:	e7d6      	b.n	800e354 <_vfiprintf_r+0x7c>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	ad17      	add	r5, sp, #92	; 0x5c
 800e3aa:	9514      	str	r5, [sp, #80]	; 0x50
 800e3ac:	9316      	str	r3, [sp, #88]	; 0x58
 800e3ae:	9315      	str	r3, [sp, #84]	; 0x54
 800e3b0:	930c      	str	r3, [sp, #48]	; 0x30
 800e3b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3b4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3b8:	9308      	str	r3, [sp, #32]
 800e3ba:	9c07      	ldr	r4, [sp, #28]
 800e3bc:	7823      	ldrb	r3, [r4, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d002      	beq.n	800e3c8 <_vfiprintf_r+0xf0>
 800e3c2:	2b25      	cmp	r3, #37	; 0x25
 800e3c4:	d000      	beq.n	800e3c8 <_vfiprintf_r+0xf0>
 800e3c6:	e08d      	b.n	800e4e4 <_vfiprintf_r+0x20c>
 800e3c8:	9b07      	ldr	r3, [sp, #28]
 800e3ca:	1ae6      	subs	r6, r4, r3
 800e3cc:	429c      	cmp	r4, r3
 800e3ce:	d016      	beq.n	800e3fe <_vfiprintf_r+0x126>
 800e3d0:	602b      	str	r3, [r5, #0]
 800e3d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e3d4:	606e      	str	r6, [r5, #4]
 800e3d6:	199b      	adds	r3, r3, r6
 800e3d8:	9316      	str	r3, [sp, #88]	; 0x58
 800e3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3dc:	3508      	adds	r5, #8
 800e3de:	3301      	adds	r3, #1
 800e3e0:	9315      	str	r3, [sp, #84]	; 0x54
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	dd08      	ble.n	800e3f8 <_vfiprintf_r+0x120>
 800e3e6:	9903      	ldr	r1, [sp, #12]
 800e3e8:	9806      	ldr	r0, [sp, #24]
 800e3ea:	aa14      	add	r2, sp, #80	; 0x50
 800e3ec:	f7ff ff3f 	bl	800e26e <__sprint_r>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d000      	beq.n	800e3f6 <_vfiprintf_r+0x11e>
 800e3f4:	e3d9      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e3f6:	ad17      	add	r5, sp, #92	; 0x5c
 800e3f8:	9b08      	ldr	r3, [sp, #32]
 800e3fa:	199b      	adds	r3, r3, r6
 800e3fc:	9308      	str	r3, [sp, #32]
 800e3fe:	7823      	ldrb	r3, [r4, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <_vfiprintf_r+0x130>
 800e404:	f000 fbf6 	bl	800ebf4 <_vfiprintf_r+0x91c>
 800e408:	2200      	movs	r2, #0
 800e40a:	a912      	add	r1, sp, #72	; 0x48
 800e40c:	70ca      	strb	r2, [r1, #3]
 800e40e:	2101      	movs	r1, #1
 800e410:	1c63      	adds	r3, r4, #1
 800e412:	0014      	movs	r4, r2
 800e414:	4249      	negs	r1, r1
 800e416:	9105      	str	r1, [sp, #20]
 800e418:	9209      	str	r2, [sp, #36]	; 0x24
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	9207      	str	r2, [sp, #28]
 800e420:	0018      	movs	r0, r3
 800e422:	3820      	subs	r0, #32
 800e424:	285a      	cmp	r0, #90	; 0x5a
 800e426:	d900      	bls.n	800e42a <_vfiprintf_r+0x152>
 800e428:	e362      	b.n	800eaf0 <_vfiprintf_r+0x818>
 800e42a:	f7f1 fe7d 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e42e:	0078      	.short	0x0078
 800e430:	03610361 	.word	0x03610361
 800e434:	03610081 	.word	0x03610081
 800e438:	03610361 	.word	0x03610361
 800e43c:	0361005d 	.word	0x0361005d
 800e440:	00830361 	.word	0x00830361
 800e444:	0361008b 	.word	0x0361008b
 800e448:	008f0089 	.word	0x008f0089
 800e44c:	00ad0361 	.word	0x00ad0361
 800e450:	00af00af 	.word	0x00af00af
 800e454:	00af00af 	.word	0x00af00af
 800e458:	00af00af 	.word	0x00af00af
 800e45c:	00af00af 	.word	0x00af00af
 800e460:	036100af 	.word	0x036100af
 800e464:	03610361 	.word	0x03610361
 800e468:	03610361 	.word	0x03610361
 800e46c:	03610361 	.word	0x03610361
 800e470:	03610361 	.word	0x03610361
 800e474:	00e600da 	.word	0x00e600da
 800e478:	03610361 	.word	0x03610361
 800e47c:	03610361 	.word	0x03610361
 800e480:	03610361 	.word	0x03610361
 800e484:	03610361 	.word	0x03610361
 800e488:	03610361 	.word	0x03610361
 800e48c:	03610143 	.word	0x03610143
 800e490:	03610361 	.word	0x03610361
 800e494:	03610182 	.word	0x03610182
 800e498:	0361027c 	.word	0x0361027c
 800e49c:	02ae0361 	.word	0x02ae0361
 800e4a0:	03610361 	.word	0x03610361
 800e4a4:	03610361 	.word	0x03610361
 800e4a8:	03610361 	.word	0x03610361
 800e4ac:	03610361 	.word	0x03610361
 800e4b0:	03610361 	.word	0x03610361
 800e4b4:	00e800da 	.word	0x00e800da
 800e4b8:	03610361 	.word	0x03610361
 800e4bc:	00c30361 	.word	0x00c30361
 800e4c0:	00d600e8 	.word	0x00d600e8
 800e4c4:	00cf0361 	.word	0x00cf0361
 800e4c8:	01260361 	.word	0x01260361
 800e4cc:	01740145 	.word	0x01740145
 800e4d0:	036100d6 	.word	0x036100d6
 800e4d4:	007f0182 	.word	0x007f0182
 800e4d8:	0361027e 	.word	0x0361027e
 800e4dc:	02cd0361 	.word	0x02cd0361
 800e4e0:	007f0361 	.word	0x007f0361
 800e4e4:	3401      	adds	r4, #1
 800e4e6:	e769      	b.n	800e3bc <_vfiprintf_r+0xe4>
 800e4e8:	9806      	ldr	r0, [sp, #24]
 800e4ea:	f7fe fa47 	bl	800c97c <_localeconv_r>
 800e4ee:	6843      	ldr	r3, [r0, #4]
 800e4f0:	0018      	movs	r0, r3
 800e4f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4f4:	f7f1 fe06 	bl	8000104 <strlen>
 800e4f8:	900e      	str	r0, [sp, #56]	; 0x38
 800e4fa:	9806      	ldr	r0, [sp, #24]
 800e4fc:	f7fe fa3e 	bl	800c97c <_localeconv_r>
 800e500:	6883      	ldr	r3, [r0, #8]
 800e502:	930d      	str	r3, [sp, #52]	; 0x34
 800e504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e506:	2b00      	cmp	r3, #0
 800e508:	d010      	beq.n	800e52c <_vfiprintf_r+0x254>
 800e50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00d      	beq.n	800e52c <_vfiprintf_r+0x254>
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <_vfiprintf_r+0x254>
 800e516:	2380      	movs	r3, #128	; 0x80
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	431c      	orrs	r4, r3
 800e51c:	e006      	b.n	800e52c <_vfiprintf_r+0x254>
 800e51e:	ab12      	add	r3, sp, #72	; 0x48
 800e520:	78da      	ldrb	r2, [r3, #3]
 800e522:	3303      	adds	r3, #3
 800e524:	2a00      	cmp	r2, #0
 800e526:	d101      	bne.n	800e52c <_vfiprintf_r+0x254>
 800e528:	3220      	adds	r2, #32
 800e52a:	701a      	strb	r2, [r3, #0]
 800e52c:	9b07      	ldr	r3, [sp, #28]
 800e52e:	e774      	b.n	800e41a <_vfiprintf_r+0x142>
 800e530:	2301      	movs	r3, #1
 800e532:	e7f2      	b.n	800e51a <_vfiprintf_r+0x242>
 800e534:	cf08      	ldmia	r7!, {r3}
 800e536:	9309      	str	r3, [sp, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	daf7      	bge.n	800e52c <_vfiprintf_r+0x254>
 800e53c:	425b      	negs	r3, r3
 800e53e:	9309      	str	r3, [sp, #36]	; 0x24
 800e540:	2304      	movs	r3, #4
 800e542:	e7ea      	b.n	800e51a <_vfiprintf_r+0x242>
 800e544:	222b      	movs	r2, #43	; 0x2b
 800e546:	ab12      	add	r3, sp, #72	; 0x48
 800e548:	70da      	strb	r2, [r3, #3]
 800e54a:	e7ef      	b.n	800e52c <_vfiprintf_r+0x254>
 800e54c:	9b07      	ldr	r3, [sp, #28]
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b2a      	cmp	r3, #42	; 0x2a
 800e554:	d00f      	beq.n	800e576 <_vfiprintf_r+0x29e>
 800e556:	2100      	movs	r1, #0
 800e558:	9105      	str	r1, [sp, #20]
 800e55a:	0019      	movs	r1, r3
 800e55c:	3930      	subs	r1, #48	; 0x30
 800e55e:	9207      	str	r2, [sp, #28]
 800e560:	2909      	cmp	r1, #9
 800e562:	d900      	bls.n	800e566 <_vfiprintf_r+0x28e>
 800e564:	e75c      	b.n	800e420 <_vfiprintf_r+0x148>
 800e566:	200a      	movs	r0, #10
 800e568:	9b05      	ldr	r3, [sp, #20]
 800e56a:	4343      	muls	r3, r0
 800e56c:	185b      	adds	r3, r3, r1
 800e56e:	9305      	str	r3, [sp, #20]
 800e570:	7813      	ldrb	r3, [r2, #0]
 800e572:	3201      	adds	r2, #1
 800e574:	e7f1      	b.n	800e55a <_vfiprintf_r+0x282>
 800e576:	cf08      	ldmia	r7!, {r3}
 800e578:	9305      	str	r3, [sp, #20]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	da02      	bge.n	800e584 <_vfiprintf_r+0x2ac>
 800e57e:	2301      	movs	r3, #1
 800e580:	425b      	negs	r3, r3
 800e582:	9305      	str	r3, [sp, #20]
 800e584:	9207      	str	r2, [sp, #28]
 800e586:	e7d1      	b.n	800e52c <_vfiprintf_r+0x254>
 800e588:	2380      	movs	r3, #128	; 0x80
 800e58a:	e7c6      	b.n	800e51a <_vfiprintf_r+0x242>
 800e58c:	2100      	movs	r1, #0
 800e58e:	9a07      	ldr	r2, [sp, #28]
 800e590:	9109      	str	r1, [sp, #36]	; 0x24
 800e592:	200a      	movs	r0, #10
 800e594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e596:	3b30      	subs	r3, #48	; 0x30
 800e598:	4341      	muls	r1, r0
 800e59a:	185b      	adds	r3, r3, r1
 800e59c:	9309      	str	r3, [sp, #36]	; 0x24
 800e59e:	0013      	movs	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	3201      	adds	r2, #1
 800e5a4:	0019      	movs	r1, r3
 800e5a6:	3930      	subs	r1, #48	; 0x30
 800e5a8:	9207      	str	r2, [sp, #28]
 800e5aa:	2909      	cmp	r1, #9
 800e5ac:	d9f1      	bls.n	800e592 <_vfiprintf_r+0x2ba>
 800e5ae:	e737      	b.n	800e420 <_vfiprintf_r+0x148>
 800e5b0:	ffffdfff 	.word	0xffffdfff
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b68      	cmp	r3, #104	; 0x68
 800e5ba:	d105      	bne.n	800e5c8 <_vfiprintf_r+0x2f0>
 800e5bc:	9b07      	ldr	r3, [sp, #28]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	9307      	str	r3, [sp, #28]
 800e5c2:	2380      	movs	r3, #128	; 0x80
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	e7a8      	b.n	800e51a <_vfiprintf_r+0x242>
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	e7a6      	b.n	800e51a <_vfiprintf_r+0x242>
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b6c      	cmp	r3, #108	; 0x6c
 800e5d2:	d104      	bne.n	800e5de <_vfiprintf_r+0x306>
 800e5d4:	9b07      	ldr	r3, [sp, #28]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	9307      	str	r3, [sp, #28]
 800e5da:	2320      	movs	r3, #32
 800e5dc:	e79d      	b.n	800e51a <_vfiprintf_r+0x242>
 800e5de:	2310      	movs	r3, #16
 800e5e0:	e79b      	b.n	800e51a <_vfiprintf_r+0x242>
 800e5e2:	003a      	movs	r2, r7
 800e5e4:	ca08      	ldmia	r2!, {r3}
 800e5e6:	ae27      	add	r6, sp, #156	; 0x9c
 800e5e8:	7033      	strb	r3, [r6, #0]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	9204      	str	r2, [sp, #16]
 800e5ee:	aa12      	add	r2, sp, #72	; 0x48
 800e5f0:	70d3      	strb	r3, [r2, #3]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5f6:	9205      	str	r2, [sp, #20]
 800e5f8:	e0b0      	b.n	800e75c <_vfiprintf_r+0x484>
 800e5fa:	2310      	movs	r3, #16
 800e5fc:	431c      	orrs	r4, r3
 800e5fe:	06a3      	lsls	r3, r4, #26
 800e600:	d52a      	bpl.n	800e658 <_vfiprintf_r+0x380>
 800e602:	2307      	movs	r3, #7
 800e604:	3707      	adds	r7, #7
 800e606:	439f      	bics	r7, r3
 800e608:	0039      	movs	r1, r7
 800e60a:	c90c      	ldmia	r1!, {r2, r3}
 800e60c:	9200      	str	r2, [sp, #0]
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	9104      	str	r1, [sp, #16]
 800e612:	9a01      	ldr	r2, [sp, #4]
 800e614:	2301      	movs	r3, #1
 800e616:	2a00      	cmp	r2, #0
 800e618:	da09      	bge.n	800e62e <_vfiprintf_r+0x356>
 800e61a:	9e00      	ldr	r6, [sp, #0]
 800e61c:	9f01      	ldr	r7, [sp, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	4271      	negs	r1, r6
 800e622:	41ba      	sbcs	r2, r7
 800e624:	9100      	str	r1, [sp, #0]
 800e626:	9201      	str	r2, [sp, #4]
 800e628:	212d      	movs	r1, #45	; 0x2d
 800e62a:	aa12      	add	r2, sp, #72	; 0x48
 800e62c:	70d1      	strb	r1, [r2, #3]
 800e62e:	9901      	ldr	r1, [sp, #4]
 800e630:	9a00      	ldr	r2, [sp, #0]
 800e632:	430a      	orrs	r2, r1
 800e634:	9905      	ldr	r1, [sp, #20]
 800e636:	3101      	adds	r1, #1
 800e638:	d100      	bne.n	800e63c <_vfiprintf_r+0x364>
 800e63a:	e2e9      	b.n	800ec10 <_vfiprintf_r+0x938>
 800e63c:	2180      	movs	r1, #128	; 0x80
 800e63e:	0027      	movs	r7, r4
 800e640:	438f      	bics	r7, r1
 800e642:	2a00      	cmp	r2, #0
 800e644:	d000      	beq.n	800e648 <_vfiprintf_r+0x370>
 800e646:	e2e7      	b.n	800ec18 <_vfiprintf_r+0x940>
 800e648:	9a05      	ldr	r2, [sp, #20]
 800e64a:	2a00      	cmp	r2, #0
 800e64c:	d100      	bne.n	800e650 <_vfiprintf_r+0x378>
 800e64e:	e243      	b.n	800ead8 <_vfiprintf_r+0x800>
 800e650:	2b01      	cmp	r3, #1
 800e652:	d000      	beq.n	800e656 <_vfiprintf_r+0x37e>
 800e654:	e2e3      	b.n	800ec1e <_vfiprintf_r+0x946>
 800e656:	e1e7      	b.n	800ea28 <_vfiprintf_r+0x750>
 800e658:	003a      	movs	r2, r7
 800e65a:	ca08      	ldmia	r2!, {r3}
 800e65c:	9204      	str	r2, [sp, #16]
 800e65e:	06e2      	lsls	r2, r4, #27
 800e660:	d503      	bpl.n	800e66a <_vfiprintf_r+0x392>
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	17db      	asrs	r3, r3, #31
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	e7d3      	b.n	800e612 <_vfiprintf_r+0x33a>
 800e66a:	0662      	lsls	r2, r4, #25
 800e66c:	d501      	bpl.n	800e672 <_vfiprintf_r+0x39a>
 800e66e:	b21b      	sxth	r3, r3
 800e670:	e7f7      	b.n	800e662 <_vfiprintf_r+0x38a>
 800e672:	05a2      	lsls	r2, r4, #22
 800e674:	d5f5      	bpl.n	800e662 <_vfiprintf_r+0x38a>
 800e676:	b25b      	sxtb	r3, r3
 800e678:	e7f3      	b.n	800e662 <_vfiprintf_r+0x38a>
 800e67a:	1d3b      	adds	r3, r7, #4
 800e67c:	9304      	str	r3, [sp, #16]
 800e67e:	06a3      	lsls	r3, r4, #26
 800e680:	d506      	bpl.n	800e690 <_vfiprintf_r+0x3b8>
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	9a08      	ldr	r2, [sp, #32]
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	17d2      	asrs	r2, r2, #31
 800e68a:	605a      	str	r2, [r3, #4]
 800e68c:	9f04      	ldr	r7, [sp, #16]
 800e68e:	e694      	b.n	800e3ba <_vfiprintf_r+0xe2>
 800e690:	06e3      	lsls	r3, r4, #27
 800e692:	d503      	bpl.n	800e69c <_vfiprintf_r+0x3c4>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	9a08      	ldr	r2, [sp, #32]
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	e7f7      	b.n	800e68c <_vfiprintf_r+0x3b4>
 800e69c:	0663      	lsls	r3, r4, #25
 800e69e:	d503      	bpl.n	800e6a8 <_vfiprintf_r+0x3d0>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	9a08      	ldr	r2, [sp, #32]
 800e6a4:	801a      	strh	r2, [r3, #0]
 800e6a6:	e7f1      	b.n	800e68c <_vfiprintf_r+0x3b4>
 800e6a8:	05a4      	lsls	r4, r4, #22
 800e6aa:	d5f3      	bpl.n	800e694 <_vfiprintf_r+0x3bc>
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	9a08      	ldr	r2, [sp, #32]
 800e6b0:	701a      	strb	r2, [r3, #0]
 800e6b2:	e7eb      	b.n	800e68c <_vfiprintf_r+0x3b4>
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	431c      	orrs	r4, r3
 800e6b8:	2320      	movs	r3, #32
 800e6ba:	0020      	movs	r0, r4
 800e6bc:	4018      	ands	r0, r3
 800e6be:	421c      	tst	r4, r3
 800e6c0:	d00d      	beq.n	800e6de <_vfiprintf_r+0x406>
 800e6c2:	3b19      	subs	r3, #25
 800e6c4:	3707      	adds	r7, #7
 800e6c6:	439f      	bics	r7, r3
 800e6c8:	0039      	movs	r1, r7
 800e6ca:	c90c      	ldmia	r1!, {r2, r3}
 800e6cc:	9200      	str	r2, [sp, #0]
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	9104      	str	r1, [sp, #16]
 800e6d2:	4bcc      	ldr	r3, [pc, #816]	; (800ea04 <_vfiprintf_r+0x72c>)
 800e6d4:	401c      	ands	r4, r3
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	2100      	movs	r1, #0
 800e6da:	aa12      	add	r2, sp, #72	; 0x48
 800e6dc:	e7a6      	b.n	800e62c <_vfiprintf_r+0x354>
 800e6de:	003a      	movs	r2, r7
 800e6e0:	ca08      	ldmia	r2!, {r3}
 800e6e2:	0021      	movs	r1, r4
 800e6e4:	9204      	str	r2, [sp, #16]
 800e6e6:	2210      	movs	r2, #16
 800e6e8:	4011      	ands	r1, r2
 800e6ea:	4214      	tst	r4, r2
 800e6ec:	d002      	beq.n	800e6f4 <_vfiprintf_r+0x41c>
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	9001      	str	r0, [sp, #4]
 800e6f2:	e7ee      	b.n	800e6d2 <_vfiprintf_r+0x3fa>
 800e6f4:	2240      	movs	r2, #64	; 0x40
 800e6f6:	0020      	movs	r0, r4
 800e6f8:	4010      	ands	r0, r2
 800e6fa:	4214      	tst	r4, r2
 800e6fc:	d003      	beq.n	800e706 <_vfiprintf_r+0x42e>
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	9101      	str	r1, [sp, #4]
 800e704:	e7e5      	b.n	800e6d2 <_vfiprintf_r+0x3fa>
 800e706:	2280      	movs	r2, #128	; 0x80
 800e708:	0021      	movs	r1, r4
 800e70a:	0092      	lsls	r2, r2, #2
 800e70c:	4011      	ands	r1, r2
 800e70e:	4214      	tst	r4, r2
 800e710:	d0f6      	beq.n	800e700 <_vfiprintf_r+0x428>
 800e712:	b2db      	uxtb	r3, r3
 800e714:	e7eb      	b.n	800e6ee <_vfiprintf_r+0x416>
 800e716:	003b      	movs	r3, r7
 800e718:	cb04      	ldmia	r3!, {r2}
 800e71a:	49bb      	ldr	r1, [pc, #748]	; (800ea08 <_vfiprintf_r+0x730>)
 800e71c:	9304      	str	r3, [sp, #16]
 800e71e:	2300      	movs	r3, #0
 800e720:	9200      	str	r2, [sp, #0]
 800e722:	aa13      	add	r2, sp, #76	; 0x4c
 800e724:	8011      	strh	r1, [r2, #0]
 800e726:	4ab9      	ldr	r2, [pc, #740]	; (800ea0c <_vfiprintf_r+0x734>)
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	3302      	adds	r3, #2
 800e72c:	431c      	orrs	r4, r3
 800e72e:	920c      	str	r2, [sp, #48]	; 0x30
 800e730:	e7d2      	b.n	800e6d8 <_vfiprintf_r+0x400>
 800e732:	003b      	movs	r3, r7
 800e734:	2700      	movs	r7, #0
 800e736:	cb40      	ldmia	r3!, {r6}
 800e738:	9304      	str	r3, [sp, #16]
 800e73a:	ab12      	add	r3, sp, #72	; 0x48
 800e73c:	70df      	strb	r7, [r3, #3]
 800e73e:	9b05      	ldr	r3, [sp, #20]
 800e740:	3301      	adds	r3, #1
 800e742:	d100      	bne.n	800e746 <_vfiprintf_r+0x46e>
 800e744:	e0ea      	b.n	800e91c <_vfiprintf_r+0x644>
 800e746:	0039      	movs	r1, r7
 800e748:	0030      	movs	r0, r6
 800e74a:	9a05      	ldr	r2, [sp, #20]
 800e74c:	f7fe f92e 	bl	800c9ac <memchr>
 800e750:	900b      	str	r0, [sp, #44]	; 0x2c
 800e752:	42b8      	cmp	r0, r7
 800e754:	d002      	beq.n	800e75c <_vfiprintf_r+0x484>
 800e756:	1b83      	subs	r3, r0, r6
 800e758:	9305      	str	r3, [sp, #20]
 800e75a:	970b      	str	r7, [sp, #44]	; 0x2c
 800e75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e75e:	9a05      	ldr	r2, [sp, #20]
 800e760:	930a      	str	r3, [sp, #40]	; 0x28
 800e762:	4293      	cmp	r3, r2
 800e764:	da00      	bge.n	800e768 <_vfiprintf_r+0x490>
 800e766:	920a      	str	r2, [sp, #40]	; 0x28
 800e768:	ab12      	add	r3, sp, #72	; 0x48
 800e76a:	3303      	adds	r3, #3
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	1e5a      	subs	r2, r3, #1
 800e770:	4193      	sbcs	r3, r2
 800e772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e774:	18d3      	adds	r3, r2, r3
 800e776:	930a      	str	r3, [sp, #40]	; 0x28
 800e778:	0022      	movs	r2, r4
 800e77a:	2302      	movs	r3, #2
 800e77c:	401a      	ands	r2, r3
 800e77e:	9210      	str	r2, [sp, #64]	; 0x40
 800e780:	421c      	tst	r4, r3
 800e782:	d002      	beq.n	800e78a <_vfiprintf_r+0x4b2>
 800e784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e786:	3302      	adds	r3, #2
 800e788:	930a      	str	r3, [sp, #40]	; 0x28
 800e78a:	2384      	movs	r3, #132	; 0x84
 800e78c:	0022      	movs	r2, r4
 800e78e:	401a      	ands	r2, r3
 800e790:	9211      	str	r2, [sp, #68]	; 0x44
 800e792:	421c      	tst	r4, r3
 800e794:	d11e      	bne.n	800e7d4 <_vfiprintf_r+0x4fc>
 800e796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e79a:	1a9f      	subs	r7, r3, r2
 800e79c:	2f00      	cmp	r7, #0
 800e79e:	dd19      	ble.n	800e7d4 <_vfiprintf_r+0x4fc>
 800e7a0:	0029      	movs	r1, r5
 800e7a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7a4:	489a      	ldr	r0, [pc, #616]	; (800ea10 <_vfiprintf_r+0x738>)
 800e7a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	3108      	adds	r1, #8
 800e7ac:	6028      	str	r0, [r5, #0]
 800e7ae:	2f10      	cmp	r7, #16
 800e7b0:	dd00      	ble.n	800e7b4 <_vfiprintf_r+0x4dc>
 800e7b2:	e1a7      	b.n	800eb04 <_vfiprintf_r+0x82c>
 800e7b4:	606f      	str	r7, [r5, #4]
 800e7b6:	18bf      	adds	r7, r7, r2
 800e7b8:	000d      	movs	r5, r1
 800e7ba:	9716      	str	r7, [sp, #88]	; 0x58
 800e7bc:	9315      	str	r3, [sp, #84]	; 0x54
 800e7be:	2b07      	cmp	r3, #7
 800e7c0:	dd08      	ble.n	800e7d4 <_vfiprintf_r+0x4fc>
 800e7c2:	9903      	ldr	r1, [sp, #12]
 800e7c4:	9806      	ldr	r0, [sp, #24]
 800e7c6:	aa14      	add	r2, sp, #80	; 0x50
 800e7c8:	f7ff fd51 	bl	800e26e <__sprint_r>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d000      	beq.n	800e7d2 <_vfiprintf_r+0x4fa>
 800e7d0:	e1eb      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e7d2:	ad17      	add	r5, sp, #92	; 0x5c
 800e7d4:	a912      	add	r1, sp, #72	; 0x48
 800e7d6:	78c8      	ldrb	r0, [r1, #3]
 800e7d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7dc:	3103      	adds	r1, #3
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d012      	beq.n	800e808 <_vfiprintf_r+0x530>
 800e7e2:	6029      	str	r1, [r5, #0]
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	1852      	adds	r2, r2, r1
 800e7ea:	6069      	str	r1, [r5, #4]
 800e7ec:	9216      	str	r2, [sp, #88]	; 0x58
 800e7ee:	9315      	str	r3, [sp, #84]	; 0x54
 800e7f0:	3508      	adds	r5, #8
 800e7f2:	2b07      	cmp	r3, #7
 800e7f4:	dd08      	ble.n	800e808 <_vfiprintf_r+0x530>
 800e7f6:	9903      	ldr	r1, [sp, #12]
 800e7f8:	9806      	ldr	r0, [sp, #24]
 800e7fa:	aa14      	add	r2, sp, #80	; 0x50
 800e7fc:	f7ff fd37 	bl	800e26e <__sprint_r>
 800e800:	2800      	cmp	r0, #0
 800e802:	d000      	beq.n	800e806 <_vfiprintf_r+0x52e>
 800e804:	e1d1      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e806:	ad17      	add	r5, sp, #92	; 0x5c
 800e808:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e80a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e80e:	2900      	cmp	r1, #0
 800e810:	d013      	beq.n	800e83a <_vfiprintf_r+0x562>
 800e812:	a913      	add	r1, sp, #76	; 0x4c
 800e814:	6029      	str	r1, [r5, #0]
 800e816:	2102      	movs	r1, #2
 800e818:	3301      	adds	r3, #1
 800e81a:	1852      	adds	r2, r2, r1
 800e81c:	6069      	str	r1, [r5, #4]
 800e81e:	9216      	str	r2, [sp, #88]	; 0x58
 800e820:	9315      	str	r3, [sp, #84]	; 0x54
 800e822:	3508      	adds	r5, #8
 800e824:	2b07      	cmp	r3, #7
 800e826:	dd08      	ble.n	800e83a <_vfiprintf_r+0x562>
 800e828:	9903      	ldr	r1, [sp, #12]
 800e82a:	9806      	ldr	r0, [sp, #24]
 800e82c:	aa14      	add	r2, sp, #80	; 0x50
 800e82e:	f7ff fd1e 	bl	800e26e <__sprint_r>
 800e832:	2800      	cmp	r0, #0
 800e834:	d000      	beq.n	800e838 <_vfiprintf_r+0x560>
 800e836:	e1b8      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e838:	ad17      	add	r5, sp, #92	; 0x5c
 800e83a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e83c:	2b80      	cmp	r3, #128	; 0x80
 800e83e:	d11e      	bne.n	800e87e <_vfiprintf_r+0x5a6>
 800e840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e844:	1a9f      	subs	r7, r3, r2
 800e846:	2f00      	cmp	r7, #0
 800e848:	dd19      	ble.n	800e87e <_vfiprintf_r+0x5a6>
 800e84a:	0029      	movs	r1, r5
 800e84c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e84e:	4871      	ldr	r0, [pc, #452]	; (800ea14 <_vfiprintf_r+0x73c>)
 800e850:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e852:	3301      	adds	r3, #1
 800e854:	3108      	adds	r1, #8
 800e856:	6028      	str	r0, [r5, #0]
 800e858:	2f10      	cmp	r7, #16
 800e85a:	dd00      	ble.n	800e85e <_vfiprintf_r+0x586>
 800e85c:	e164      	b.n	800eb28 <_vfiprintf_r+0x850>
 800e85e:	606f      	str	r7, [r5, #4]
 800e860:	18bf      	adds	r7, r7, r2
 800e862:	000d      	movs	r5, r1
 800e864:	9716      	str	r7, [sp, #88]	; 0x58
 800e866:	9315      	str	r3, [sp, #84]	; 0x54
 800e868:	2b07      	cmp	r3, #7
 800e86a:	dd08      	ble.n	800e87e <_vfiprintf_r+0x5a6>
 800e86c:	9903      	ldr	r1, [sp, #12]
 800e86e:	9806      	ldr	r0, [sp, #24]
 800e870:	aa14      	add	r2, sp, #80	; 0x50
 800e872:	f7ff fcfc 	bl	800e26e <__sprint_r>
 800e876:	2800      	cmp	r0, #0
 800e878:	d000      	beq.n	800e87c <_vfiprintf_r+0x5a4>
 800e87a:	e196      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e87c:	ad17      	add	r5, sp, #92	; 0x5c
 800e87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e880:	9a05      	ldr	r2, [sp, #20]
 800e882:	1a9f      	subs	r7, r3, r2
 800e884:	2f00      	cmp	r7, #0
 800e886:	dd19      	ble.n	800e8bc <_vfiprintf_r+0x5e4>
 800e888:	0029      	movs	r1, r5
 800e88a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e88c:	4861      	ldr	r0, [pc, #388]	; (800ea14 <_vfiprintf_r+0x73c>)
 800e88e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e890:	3301      	adds	r3, #1
 800e892:	3108      	adds	r1, #8
 800e894:	6028      	str	r0, [r5, #0]
 800e896:	2f10      	cmp	r7, #16
 800e898:	dd00      	ble.n	800e89c <_vfiprintf_r+0x5c4>
 800e89a:	e157      	b.n	800eb4c <_vfiprintf_r+0x874>
 800e89c:	606f      	str	r7, [r5, #4]
 800e89e:	18bf      	adds	r7, r7, r2
 800e8a0:	000d      	movs	r5, r1
 800e8a2:	9716      	str	r7, [sp, #88]	; 0x58
 800e8a4:	9315      	str	r3, [sp, #84]	; 0x54
 800e8a6:	2b07      	cmp	r3, #7
 800e8a8:	dd08      	ble.n	800e8bc <_vfiprintf_r+0x5e4>
 800e8aa:	9903      	ldr	r1, [sp, #12]
 800e8ac:	9806      	ldr	r0, [sp, #24]
 800e8ae:	aa14      	add	r2, sp, #80	; 0x50
 800e8b0:	f7ff fcdd 	bl	800e26e <__sprint_r>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	d000      	beq.n	800e8ba <_vfiprintf_r+0x5e2>
 800e8b8:	e177      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e8ba:	ad17      	add	r5, sp, #92	; 0x5c
 800e8bc:	9b05      	ldr	r3, [sp, #20]
 800e8be:	9a05      	ldr	r2, [sp, #20]
 800e8c0:	606b      	str	r3, [r5, #4]
 800e8c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8c4:	602e      	str	r6, [r5, #0]
 800e8c6:	189b      	adds	r3, r3, r2
 800e8c8:	9316      	str	r3, [sp, #88]	; 0x58
 800e8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8cc:	3508      	adds	r5, #8
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	9315      	str	r3, [sp, #84]	; 0x54
 800e8d2:	2b07      	cmp	r3, #7
 800e8d4:	dd08      	ble.n	800e8e8 <_vfiprintf_r+0x610>
 800e8d6:	9903      	ldr	r1, [sp, #12]
 800e8d8:	9806      	ldr	r0, [sp, #24]
 800e8da:	aa14      	add	r2, sp, #80	; 0x50
 800e8dc:	f7ff fcc7 	bl	800e26e <__sprint_r>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d000      	beq.n	800e8e6 <_vfiprintf_r+0x60e>
 800e8e4:	e161      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e8e6:	ad17      	add	r5, sp, #92	; 0x5c
 800e8e8:	0764      	lsls	r4, r4, #29
 800e8ea:	d500      	bpl.n	800e8ee <_vfiprintf_r+0x616>
 800e8ec:	e140      	b.n	800eb70 <_vfiprintf_r+0x898>
 800e8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	da00      	bge.n	800e8f8 <_vfiprintf_r+0x620>
 800e8f6:	0013      	movs	r3, r2
 800e8f8:	9a08      	ldr	r2, [sp, #32]
 800e8fa:	18d3      	adds	r3, r2, r3
 800e8fc:	9308      	str	r3, [sp, #32]
 800e8fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <_vfiprintf_r+0x63c>
 800e904:	9903      	ldr	r1, [sp, #12]
 800e906:	9806      	ldr	r0, [sp, #24]
 800e908:	aa14      	add	r2, sp, #80	; 0x50
 800e90a:	f7ff fcb0 	bl	800e26e <__sprint_r>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d000      	beq.n	800e914 <_vfiprintf_r+0x63c>
 800e912:	e14a      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800e914:	2300      	movs	r3, #0
 800e916:	ad17      	add	r5, sp, #92	; 0x5c
 800e918:	9315      	str	r3, [sp, #84]	; 0x54
 800e91a:	e6b7      	b.n	800e68c <_vfiprintf_r+0x3b4>
 800e91c:	0030      	movs	r0, r6
 800e91e:	f7f1 fbf1 	bl	8000104 <strlen>
 800e922:	9005      	str	r0, [sp, #20]
 800e924:	e719      	b.n	800e75a <_vfiprintf_r+0x482>
 800e926:	2310      	movs	r3, #16
 800e928:	431c      	orrs	r4, r3
 800e92a:	2320      	movs	r3, #32
 800e92c:	0020      	movs	r0, r4
 800e92e:	4018      	ands	r0, r3
 800e930:	421c      	tst	r4, r3
 800e932:	d009      	beq.n	800e948 <_vfiprintf_r+0x670>
 800e934:	3b19      	subs	r3, #25
 800e936:	3707      	adds	r7, #7
 800e938:	439f      	bics	r7, r3
 800e93a:	0039      	movs	r1, r7
 800e93c:	c90c      	ldmia	r1!, {r2, r3}
 800e93e:	9200      	str	r2, [sp, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	9104      	str	r1, [sp, #16]
 800e944:	2301      	movs	r3, #1
 800e946:	e6c7      	b.n	800e6d8 <_vfiprintf_r+0x400>
 800e948:	003b      	movs	r3, r7
 800e94a:	cb04      	ldmia	r3!, {r2}
 800e94c:	0021      	movs	r1, r4
 800e94e:	9304      	str	r3, [sp, #16]
 800e950:	2310      	movs	r3, #16
 800e952:	4019      	ands	r1, r3
 800e954:	421c      	tst	r4, r3
 800e956:	d003      	beq.n	800e960 <_vfiprintf_r+0x688>
 800e958:	9200      	str	r2, [sp, #0]
 800e95a:	9001      	str	r0, [sp, #4]
 800e95c:	3b0f      	subs	r3, #15
 800e95e:	e6bb      	b.n	800e6d8 <_vfiprintf_r+0x400>
 800e960:	2340      	movs	r3, #64	; 0x40
 800e962:	0020      	movs	r0, r4
 800e964:	4018      	ands	r0, r3
 800e966:	421c      	tst	r4, r3
 800e968:	d003      	beq.n	800e972 <_vfiprintf_r+0x69a>
 800e96a:	b293      	uxth	r3, r2
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	9101      	str	r1, [sp, #4]
 800e970:	e7e8      	b.n	800e944 <_vfiprintf_r+0x66c>
 800e972:	2380      	movs	r3, #128	; 0x80
 800e974:	0021      	movs	r1, r4
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	4019      	ands	r1, r3
 800e97a:	421c      	tst	r4, r3
 800e97c:	d003      	beq.n	800e986 <_vfiprintf_r+0x6ae>
 800e97e:	b2d3      	uxtb	r3, r2
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	9001      	str	r0, [sp, #4]
 800e984:	e7de      	b.n	800e944 <_vfiprintf_r+0x66c>
 800e986:	9200      	str	r2, [sp, #0]
 800e988:	e7f1      	b.n	800e96e <_vfiprintf_r+0x696>
 800e98a:	4a23      	ldr	r2, [pc, #140]	; (800ea18 <_vfiprintf_r+0x740>)
 800e98c:	0020      	movs	r0, r4
 800e98e:	920c      	str	r2, [sp, #48]	; 0x30
 800e990:	2220      	movs	r2, #32
 800e992:	4010      	ands	r0, r2
 800e994:	4214      	tst	r4, r2
 800e996:	d019      	beq.n	800e9cc <_vfiprintf_r+0x6f4>
 800e998:	3a19      	subs	r2, #25
 800e99a:	3707      	adds	r7, #7
 800e99c:	4397      	bics	r7, r2
 800e99e:	0038      	movs	r0, r7
 800e9a0:	c806      	ldmia	r0!, {r1, r2}
 800e9a2:	9100      	str	r1, [sp, #0]
 800e9a4:	9201      	str	r2, [sp, #4]
 800e9a6:	9004      	str	r0, [sp, #16]
 800e9a8:	07e2      	lsls	r2, r4, #31
 800e9aa:	d509      	bpl.n	800e9c0 <_vfiprintf_r+0x6e8>
 800e9ac:	9a00      	ldr	r2, [sp, #0]
 800e9ae:	9901      	ldr	r1, [sp, #4]
 800e9b0:	430a      	orrs	r2, r1
 800e9b2:	d005      	beq.n	800e9c0 <_vfiprintf_r+0x6e8>
 800e9b4:	aa13      	add	r2, sp, #76	; 0x4c
 800e9b6:	2130      	movs	r1, #48	; 0x30
 800e9b8:	7053      	strb	r3, [r2, #1]
 800e9ba:	2302      	movs	r3, #2
 800e9bc:	7011      	strb	r1, [r2, #0]
 800e9be:	431c      	orrs	r4, r3
 800e9c0:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <_vfiprintf_r+0x72c>)
 800e9c2:	401c      	ands	r4, r3
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	e687      	b.n	800e6d8 <_vfiprintf_r+0x400>
 800e9c8:	4a10      	ldr	r2, [pc, #64]	; (800ea0c <_vfiprintf_r+0x734>)
 800e9ca:	e7df      	b.n	800e98c <_vfiprintf_r+0x6b4>
 800e9cc:	0039      	movs	r1, r7
 800e9ce:	c904      	ldmia	r1!, {r2}
 800e9d0:	0026      	movs	r6, r4
 800e9d2:	9104      	str	r1, [sp, #16]
 800e9d4:	2110      	movs	r1, #16
 800e9d6:	400e      	ands	r6, r1
 800e9d8:	420c      	tst	r4, r1
 800e9da:	d002      	beq.n	800e9e2 <_vfiprintf_r+0x70a>
 800e9dc:	9200      	str	r2, [sp, #0]
 800e9de:	9001      	str	r0, [sp, #4]
 800e9e0:	e7e2      	b.n	800e9a8 <_vfiprintf_r+0x6d0>
 800e9e2:	2140      	movs	r1, #64	; 0x40
 800e9e4:	0020      	movs	r0, r4
 800e9e6:	4008      	ands	r0, r1
 800e9e8:	420c      	tst	r4, r1
 800e9ea:	d003      	beq.n	800e9f4 <_vfiprintf_r+0x71c>
 800e9ec:	b292      	uxth	r2, r2
 800e9ee:	9200      	str	r2, [sp, #0]
 800e9f0:	9601      	str	r6, [sp, #4]
 800e9f2:	e7d9      	b.n	800e9a8 <_vfiprintf_r+0x6d0>
 800e9f4:	2180      	movs	r1, #128	; 0x80
 800e9f6:	0026      	movs	r6, r4
 800e9f8:	0089      	lsls	r1, r1, #2
 800e9fa:	400e      	ands	r6, r1
 800e9fc:	420c      	tst	r4, r1
 800e9fe:	d0f6      	beq.n	800e9ee <_vfiprintf_r+0x716>
 800ea00:	b2d2      	uxtb	r2, r2
 800ea02:	e7eb      	b.n	800e9dc <_vfiprintf_r+0x704>
 800ea04:	fffffbff 	.word	0xfffffbff
 800ea08:	00007830 	.word	0x00007830
 800ea0c:	0800fa1c 	.word	0x0800fa1c
 800ea10:	0800fb29 	.word	0x0800fb29
 800ea14:	0800fb39 	.word	0x0800fb39
 800ea18:	0800fa2d 	.word	0x0800fa2d
 800ea1c:	9b01      	ldr	r3, [sp, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d109      	bne.n	800ea36 <_vfiprintf_r+0x75e>
 800ea22:	9b00      	ldr	r3, [sp, #0]
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	d806      	bhi.n	800ea36 <_vfiprintf_r+0x75e>
 800ea28:	26b7      	movs	r6, #183	; 0xb7
 800ea2a:	ab12      	add	r3, sp, #72	; 0x48
 800ea2c:	18f6      	adds	r6, r6, r3
 800ea2e:	9b00      	ldr	r3, [sp, #0]
 800ea30:	3330      	adds	r3, #48	; 0x30
 800ea32:	7033      	strb	r3, [r6, #0]
 800ea34:	e115      	b.n	800ec62 <_vfiprintf_r+0x98a>
 800ea36:	2380      	movs	r3, #128	; 0x80
 800ea38:	2400      	movs	r4, #0
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	403b      	ands	r3, r7
 800ea3e:	ae40      	add	r6, sp, #256	; 0x100
 800ea40:	930a      	str	r3, [sp, #40]	; 0x28
 800ea42:	220a      	movs	r2, #10
 800ea44:	9800      	ldr	r0, [sp, #0]
 800ea46:	9901      	ldr	r1, [sp, #4]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f7f1 fd2b 	bl	80004a4 <__aeabi_uldivmod>
 800ea4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea50:	3e01      	subs	r6, #1
 800ea52:	3230      	adds	r2, #48	; 0x30
 800ea54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea56:	9110      	str	r1, [sp, #64]	; 0x40
 800ea58:	7032      	strb	r2, [r6, #0]
 800ea5a:	3401      	adds	r4, #1
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d01a      	beq.n	800ea96 <_vfiprintf_r+0x7be>
 800ea60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	42a3      	cmp	r3, r4
 800ea66:	d116      	bne.n	800ea96 <_vfiprintf_r+0x7be>
 800ea68:	2cff      	cmp	r4, #255	; 0xff
 800ea6a:	d014      	beq.n	800ea96 <_vfiprintf_r+0x7be>
 800ea6c:	9b01      	ldr	r3, [sp, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <_vfiprintf_r+0x7a0>
 800ea72:	9b00      	ldr	r3, [sp, #0]
 800ea74:	2b09      	cmp	r3, #9
 800ea76:	d90e      	bls.n	800ea96 <_vfiprintf_r+0x7be>
 800ea78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea7c:	1af6      	subs	r6, r6, r3
 800ea7e:	001a      	movs	r2, r3
 800ea80:	0030      	movs	r0, r6
 800ea82:	f7f9 ffe6 	bl	8008a52 <strncpy>
 800ea86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea88:	2400      	movs	r4, #0
 800ea8a:	785b      	ldrb	r3, [r3, #1]
 800ea8c:	1e5a      	subs	r2, r3, #1
 800ea8e:	4193      	sbcs	r3, r2
 800ea90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea92:	18d3      	adds	r3, r2, r3
 800ea94:	930d      	str	r3, [sp, #52]	; 0x34
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <_vfiprintf_r+0x7cc>
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	2b09      	cmp	r3, #9
 800eaa0:	d800      	bhi.n	800eaa4 <_vfiprintf_r+0x7cc>
 800eaa2:	e0de      	b.n	800ec62 <_vfiprintf_r+0x98a>
 800eaa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaaa:	9301      	str	r3, [sp, #4]
 800eaac:	e7c9      	b.n	800ea42 <_vfiprintf_r+0x76a>
 800eaae:	200f      	movs	r0, #15
 800eab0:	9b00      	ldr	r3, [sp, #0]
 800eab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eab4:	4003      	ands	r3, r0
 800eab6:	5cd3      	ldrb	r3, [r2, r3]
 800eab8:	3e01      	subs	r6, #1
 800eaba:	7033      	strb	r3, [r6, #0]
 800eabc:	9b01      	ldr	r3, [sp, #4]
 800eabe:	0719      	lsls	r1, r3, #28
 800eac0:	9b00      	ldr	r3, [sp, #0]
 800eac2:	091a      	lsrs	r2, r3, #4
 800eac4:	9b01      	ldr	r3, [sp, #4]
 800eac6:	4311      	orrs	r1, r2
 800eac8:	091b      	lsrs	r3, r3, #4
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	000b      	movs	r3, r1
 800eace:	9a01      	ldr	r2, [sp, #4]
 800ead0:	9100      	str	r1, [sp, #0]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	d1ec      	bne.n	800eab0 <_vfiprintf_r+0x7d8>
 800ead6:	e0c4      	b.n	800ec62 <_vfiprintf_r+0x98a>
 800ead8:	ae40      	add	r6, sp, #256	; 0x100
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d000      	beq.n	800eae0 <_vfiprintf_r+0x808>
 800eade:	e0c0      	b.n	800ec62 <_vfiprintf_r+0x98a>
 800eae0:	07e4      	lsls	r4, r4, #31
 800eae2:	d400      	bmi.n	800eae6 <_vfiprintf_r+0x80e>
 800eae4:	e0bd      	b.n	800ec62 <_vfiprintf_r+0x98a>
 800eae6:	26b7      	movs	r6, #183	; 0xb7
 800eae8:	ab12      	add	r3, sp, #72	; 0x48
 800eaea:	18f6      	adds	r6, r6, r3
 800eaec:	2330      	movs	r3, #48	; 0x30
 800eaee:	e7a0      	b.n	800ea32 <_vfiprintf_r+0x75a>
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d100      	bne.n	800eaf6 <_vfiprintf_r+0x81e>
 800eaf4:	e07e      	b.n	800ebf4 <_vfiprintf_r+0x91c>
 800eaf6:	ae27      	add	r6, sp, #156	; 0x9c
 800eaf8:	7033      	strb	r3, [r6, #0]
 800eafa:	2300      	movs	r3, #0
 800eafc:	aa12      	add	r2, sp, #72	; 0x48
 800eafe:	70d3      	strb	r3, [r2, #3]
 800eb00:	9704      	str	r7, [sp, #16]
 800eb02:	e576      	b.n	800e5f2 <_vfiprintf_r+0x31a>
 800eb04:	2010      	movs	r0, #16
 800eb06:	1812      	adds	r2, r2, r0
 800eb08:	6068      	str	r0, [r5, #4]
 800eb0a:	9216      	str	r2, [sp, #88]	; 0x58
 800eb0c:	9315      	str	r3, [sp, #84]	; 0x54
 800eb0e:	2b07      	cmp	r3, #7
 800eb10:	dd07      	ble.n	800eb22 <_vfiprintf_r+0x84a>
 800eb12:	9903      	ldr	r1, [sp, #12]
 800eb14:	9806      	ldr	r0, [sp, #24]
 800eb16:	aa14      	add	r2, sp, #80	; 0x50
 800eb18:	f7ff fba9 	bl	800e26e <__sprint_r>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d144      	bne.n	800ebaa <_vfiprintf_r+0x8d2>
 800eb20:	a917      	add	r1, sp, #92	; 0x5c
 800eb22:	000d      	movs	r5, r1
 800eb24:	3f10      	subs	r7, #16
 800eb26:	e63b      	b.n	800e7a0 <_vfiprintf_r+0x4c8>
 800eb28:	2010      	movs	r0, #16
 800eb2a:	1812      	adds	r2, r2, r0
 800eb2c:	6068      	str	r0, [r5, #4]
 800eb2e:	9216      	str	r2, [sp, #88]	; 0x58
 800eb30:	9315      	str	r3, [sp, #84]	; 0x54
 800eb32:	2b07      	cmp	r3, #7
 800eb34:	dd07      	ble.n	800eb46 <_vfiprintf_r+0x86e>
 800eb36:	9903      	ldr	r1, [sp, #12]
 800eb38:	9806      	ldr	r0, [sp, #24]
 800eb3a:	aa14      	add	r2, sp, #80	; 0x50
 800eb3c:	f7ff fb97 	bl	800e26e <__sprint_r>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d132      	bne.n	800ebaa <_vfiprintf_r+0x8d2>
 800eb44:	a917      	add	r1, sp, #92	; 0x5c
 800eb46:	000d      	movs	r5, r1
 800eb48:	3f10      	subs	r7, #16
 800eb4a:	e67e      	b.n	800e84a <_vfiprintf_r+0x572>
 800eb4c:	2010      	movs	r0, #16
 800eb4e:	1812      	adds	r2, r2, r0
 800eb50:	6068      	str	r0, [r5, #4]
 800eb52:	9216      	str	r2, [sp, #88]	; 0x58
 800eb54:	9315      	str	r3, [sp, #84]	; 0x54
 800eb56:	2b07      	cmp	r3, #7
 800eb58:	dd07      	ble.n	800eb6a <_vfiprintf_r+0x892>
 800eb5a:	9903      	ldr	r1, [sp, #12]
 800eb5c:	9806      	ldr	r0, [sp, #24]
 800eb5e:	aa14      	add	r2, sp, #80	; 0x50
 800eb60:	f7ff fb85 	bl	800e26e <__sprint_r>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d120      	bne.n	800ebaa <_vfiprintf_r+0x8d2>
 800eb68:	a917      	add	r1, sp, #92	; 0x5c
 800eb6a:	000d      	movs	r5, r1
 800eb6c:	3f10      	subs	r7, #16
 800eb6e:	e68b      	b.n	800e888 <_vfiprintf_r+0x5b0>
 800eb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb74:	2610      	movs	r6, #16
 800eb76:	1a9c      	subs	r4, r3, r2
 800eb78:	2c00      	cmp	r4, #0
 800eb7a:	dc00      	bgt.n	800eb7e <_vfiprintf_r+0x8a6>
 800eb7c:	e6b7      	b.n	800e8ee <_vfiprintf_r+0x616>
 800eb7e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eb80:	4a3b      	ldr	r2, [pc, #236]	; (800ec70 <_vfiprintf_r+0x998>)
 800eb82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eb84:	3101      	adds	r1, #1
 800eb86:	602a      	str	r2, [r5, #0]
 800eb88:	2c10      	cmp	r4, #16
 800eb8a:	dc22      	bgt.n	800ebd2 <_vfiprintf_r+0x8fa>
 800eb8c:	606c      	str	r4, [r5, #4]
 800eb8e:	18e4      	adds	r4, r4, r3
 800eb90:	9416      	str	r4, [sp, #88]	; 0x58
 800eb92:	9115      	str	r1, [sp, #84]	; 0x54
 800eb94:	2907      	cmp	r1, #7
 800eb96:	dc00      	bgt.n	800eb9a <_vfiprintf_r+0x8c2>
 800eb98:	e6a9      	b.n	800e8ee <_vfiprintf_r+0x616>
 800eb9a:	9903      	ldr	r1, [sp, #12]
 800eb9c:	9806      	ldr	r0, [sp, #24]
 800eb9e:	aa14      	add	r2, sp, #80	; 0x50
 800eba0:	f7ff fb65 	bl	800e26e <__sprint_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d100      	bne.n	800ebaa <_vfiprintf_r+0x8d2>
 800eba8:	e6a1      	b.n	800e8ee <_vfiprintf_r+0x616>
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebae:	07db      	lsls	r3, r3, #31
 800ebb0:	d407      	bmi.n	800ebc2 <_vfiprintf_r+0x8ea>
 800ebb2:	9b03      	ldr	r3, [sp, #12]
 800ebb4:	899b      	ldrh	r3, [r3, #12]
 800ebb6:	059b      	lsls	r3, r3, #22
 800ebb8:	d403      	bmi.n	800ebc2 <_vfiprintf_r+0x8ea>
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ebbe:	f7fa f808 	bl	8008bd2 <__retarget_lock_release_recursive>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	899b      	ldrh	r3, [r3, #12]
 800ebc6:	065b      	lsls	r3, r3, #25
 800ebc8:	d401      	bmi.n	800ebce <_vfiprintf_r+0x8f6>
 800ebca:	f7ff fbc3 	bl	800e354 <_vfiprintf_r+0x7c>
 800ebce:	f7ff fbbe 	bl	800e34e <_vfiprintf_r+0x76>
 800ebd2:	3310      	adds	r3, #16
 800ebd4:	606e      	str	r6, [r5, #4]
 800ebd6:	9316      	str	r3, [sp, #88]	; 0x58
 800ebd8:	9115      	str	r1, [sp, #84]	; 0x54
 800ebda:	3508      	adds	r5, #8
 800ebdc:	2907      	cmp	r1, #7
 800ebde:	dd07      	ble.n	800ebf0 <_vfiprintf_r+0x918>
 800ebe0:	9903      	ldr	r1, [sp, #12]
 800ebe2:	9806      	ldr	r0, [sp, #24]
 800ebe4:	aa14      	add	r2, sp, #80	; 0x50
 800ebe6:	f7ff fb42 	bl	800e26e <__sprint_r>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d1dd      	bne.n	800ebaa <_vfiprintf_r+0x8d2>
 800ebee:	ad17      	add	r5, sp, #92	; 0x5c
 800ebf0:	3c10      	subs	r4, #16
 800ebf2:	e7c4      	b.n	800eb7e <_vfiprintf_r+0x8a6>
 800ebf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d102      	bne.n	800ec00 <_vfiprintf_r+0x928>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9315      	str	r3, [sp, #84]	; 0x54
 800ebfe:	e7d4      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800ec00:	9903      	ldr	r1, [sp, #12]
 800ec02:	9806      	ldr	r0, [sp, #24]
 800ec04:	aa14      	add	r2, sp, #80	; 0x50
 800ec06:	f7ff fb32 	bl	800e26e <__sprint_r>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d0f5      	beq.n	800ebfa <_vfiprintf_r+0x922>
 800ec0e:	e7cc      	b.n	800ebaa <_vfiprintf_r+0x8d2>
 800ec10:	0027      	movs	r7, r4
 800ec12:	2a00      	cmp	r2, #0
 800ec14:	d100      	bne.n	800ec18 <_vfiprintf_r+0x940>
 800ec16:	e51b      	b.n	800e650 <_vfiprintf_r+0x378>
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d100      	bne.n	800ec1e <_vfiprintf_r+0x946>
 800ec1c:	e6fe      	b.n	800ea1c <_vfiprintf_r+0x744>
 800ec1e:	ae40      	add	r6, sp, #256	; 0x100
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d100      	bne.n	800ec26 <_vfiprintf_r+0x94e>
 800ec24:	e743      	b.n	800eaae <_vfiprintf_r+0x7d6>
 800ec26:	2307      	movs	r3, #7
 800ec28:	469c      	mov	ip, r3
 800ec2a:	4663      	mov	r3, ip
 800ec2c:	9900      	ldr	r1, [sp, #0]
 800ec2e:	0032      	movs	r2, r6
 800ec30:	400b      	ands	r3, r1
 800ec32:	9901      	ldr	r1, [sp, #4]
 800ec34:	3e01      	subs	r6, #1
 800ec36:	074c      	lsls	r4, r1, #29
 800ec38:	9900      	ldr	r1, [sp, #0]
 800ec3a:	3330      	adds	r3, #48	; 0x30
 800ec3c:	08c8      	lsrs	r0, r1, #3
 800ec3e:	9901      	ldr	r1, [sp, #4]
 800ec40:	4304      	orrs	r4, r0
 800ec42:	08c9      	lsrs	r1, r1, #3
 800ec44:	9101      	str	r1, [sp, #4]
 800ec46:	0021      	movs	r1, r4
 800ec48:	9801      	ldr	r0, [sp, #4]
 800ec4a:	7033      	strb	r3, [r6, #0]
 800ec4c:	9400      	str	r4, [sp, #0]
 800ec4e:	4301      	orrs	r1, r0
 800ec50:	d1eb      	bne.n	800ec2a <_vfiprintf_r+0x952>
 800ec52:	07f9      	lsls	r1, r7, #31
 800ec54:	d505      	bpl.n	800ec62 <_vfiprintf_r+0x98a>
 800ec56:	2b30      	cmp	r3, #48	; 0x30
 800ec58:	d003      	beq.n	800ec62 <_vfiprintf_r+0x98a>
 800ec5a:	2330      	movs	r3, #48	; 0x30
 800ec5c:	3e01      	subs	r6, #1
 800ec5e:	7033      	strb	r3, [r6, #0]
 800ec60:	1e96      	subs	r6, r2, #2
 800ec62:	9b05      	ldr	r3, [sp, #20]
 800ec64:	003c      	movs	r4, r7
 800ec66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec68:	ab40      	add	r3, sp, #256	; 0x100
 800ec6a:	1b9b      	subs	r3, r3, r6
 800ec6c:	9305      	str	r3, [sp, #20]
 800ec6e:	e575      	b.n	800e75c <_vfiprintf_r+0x484>
 800ec70:	0800fb29 	.word	0x0800fb29

0800ec74 <__sbprintf>:
 800ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec76:	0015      	movs	r5, r2
 800ec78:	2202      	movs	r2, #2
 800ec7a:	4c1e      	ldr	r4, [pc, #120]	; (800ecf4 <__sbprintf+0x80>)
 800ec7c:	001f      	movs	r7, r3
 800ec7e:	898b      	ldrh	r3, [r1, #12]
 800ec80:	44a5      	add	sp, r4
 800ec82:	4393      	bics	r3, r2
 800ec84:	466a      	mov	r2, sp
 800ec86:	8193      	strh	r3, [r2, #12]
 800ec88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ec8a:	0006      	movs	r6, r0
 800ec8c:	9319      	str	r3, [sp, #100]	; 0x64
 800ec8e:	89cb      	ldrh	r3, [r1, #14]
 800ec90:	a816      	add	r0, sp, #88	; 0x58
 800ec92:	81d3      	strh	r3, [r2, #14]
 800ec94:	69cb      	ldr	r3, [r1, #28]
 800ec96:	000c      	movs	r4, r1
 800ec98:	9307      	str	r3, [sp, #28]
 800ec9a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800ec9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec9e:	ab1a      	add	r3, sp, #104	; 0x68
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	9304      	str	r3, [sp, #16]
 800eca4:	2380      	movs	r3, #128	; 0x80
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	9302      	str	r3, [sp, #8]
 800ecaa:	9305      	str	r3, [sp, #20]
 800ecac:	2300      	movs	r3, #0
 800ecae:	9306      	str	r3, [sp, #24]
 800ecb0:	f7f9 ff8c 	bl	8008bcc <__retarget_lock_init_recursive>
 800ecb4:	002a      	movs	r2, r5
 800ecb6:	003b      	movs	r3, r7
 800ecb8:	4669      	mov	r1, sp
 800ecba:	0030      	movs	r0, r6
 800ecbc:	f7ff fb0c 	bl	800e2d8 <_vfiprintf_r>
 800ecc0:	1e05      	subs	r5, r0, #0
 800ecc2:	db07      	blt.n	800ecd4 <__sbprintf+0x60>
 800ecc4:	4669      	mov	r1, sp
 800ecc6:	0030      	movs	r0, r6
 800ecc8:	f7fd fdf6 	bl	800c8b8 <_fflush_r>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d001      	beq.n	800ecd4 <__sbprintf+0x60>
 800ecd0:	2501      	movs	r5, #1
 800ecd2:	426d      	negs	r5, r5
 800ecd4:	466b      	mov	r3, sp
 800ecd6:	899a      	ldrh	r2, [r3, #12]
 800ecd8:	2340      	movs	r3, #64	; 0x40
 800ecda:	421a      	tst	r2, r3
 800ecdc:	d002      	beq.n	800ece4 <__sbprintf+0x70>
 800ecde:	89a2      	ldrh	r2, [r4, #12]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ece6:	f7f9 ff72 	bl	8008bce <__retarget_lock_close_recursive>
 800ecea:	0028      	movs	r0, r5
 800ecec:	4b02      	ldr	r3, [pc, #8]	; (800ecf8 <__sbprintf+0x84>)
 800ecee:	449d      	add	sp, r3
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf2:	46c0      	nop			; (mov r8, r8)
 800ecf4:	fffffb94 	.word	0xfffffb94
 800ecf8:	0000046c 	.word	0x0000046c

0800ecfc <__sfvwrite_r>:
 800ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfe:	6893      	ldr	r3, [r2, #8]
 800ed00:	b087      	sub	sp, #28
 800ed02:	000c      	movs	r4, r1
 800ed04:	9002      	str	r0, [sp, #8]
 800ed06:	9204      	str	r2, [sp, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <__sfvwrite_r+0x16>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	b007      	add	sp, #28
 800ed10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed12:	898b      	ldrh	r3, [r1, #12]
 800ed14:	071b      	lsls	r3, r3, #28
 800ed16:	d557      	bpl.n	800edc8 <__sfvwrite_r+0xcc>
 800ed18:	690b      	ldr	r3, [r1, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d054      	beq.n	800edc8 <__sfvwrite_r+0xcc>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	2202      	movs	r2, #2
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	001f      	movs	r7, r3
 800ed2a:	4017      	ands	r7, r2
 800ed2c:	4213      	tst	r3, r2
 800ed2e:	d171      	bne.n	800ee14 <__sfvwrite_r+0x118>
 800ed30:	2201      	movs	r2, #1
 800ed32:	2101      	movs	r1, #1
 800ed34:	401a      	ands	r2, r3
 800ed36:	420b      	tst	r3, r1
 800ed38:	d100      	bne.n	800ed3c <__sfvwrite_r+0x40>
 800ed3a:	e0a5      	b.n	800ee88 <__sfvwrite_r+0x18c>
 800ed3c:	0038      	movs	r0, r7
 800ed3e:	003e      	movs	r6, r7
 800ed40:	9703      	str	r7, [sp, #12]
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d100      	bne.n	800ed4a <__sfvwrite_r+0x4e>
 800ed48:	e10b      	b.n	800ef62 <__sfvwrite_r+0x266>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d10a      	bne.n	800ed64 <__sfvwrite_r+0x68>
 800ed4e:	001a      	movs	r2, r3
 800ed50:	210a      	movs	r1, #10
 800ed52:	0030      	movs	r0, r6
 800ed54:	f7fd fe2a 	bl	800c9ac <memchr>
 800ed58:	9b03      	ldr	r3, [sp, #12]
 800ed5a:	1c5f      	adds	r7, r3, #1
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d001      	beq.n	800ed64 <__sfvwrite_r+0x68>
 800ed60:	3001      	adds	r0, #1
 800ed62:	1b87      	subs	r7, r0, r6
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	9705      	str	r7, [sp, #20]
 800ed68:	429f      	cmp	r7, r3
 800ed6a:	d900      	bls.n	800ed6e <__sfvwrite_r+0x72>
 800ed6c:	9305      	str	r3, [sp, #20]
 800ed6e:	6820      	ldr	r0, [r4, #0]
 800ed70:	6922      	ldr	r2, [r4, #16]
 800ed72:	68a5      	ldr	r5, [r4, #8]
 800ed74:	6963      	ldr	r3, [r4, #20]
 800ed76:	4290      	cmp	r0, r2
 800ed78:	d800      	bhi.n	800ed7c <__sfvwrite_r+0x80>
 800ed7a:	e0fb      	b.n	800ef74 <__sfvwrite_r+0x278>
 800ed7c:	9a05      	ldr	r2, [sp, #20]
 800ed7e:	18ed      	adds	r5, r5, r3
 800ed80:	42aa      	cmp	r2, r5
 800ed82:	dc00      	bgt.n	800ed86 <__sfvwrite_r+0x8a>
 800ed84:	e0f6      	b.n	800ef74 <__sfvwrite_r+0x278>
 800ed86:	0031      	movs	r1, r6
 800ed88:	002a      	movs	r2, r5
 800ed8a:	f000 fa1e 	bl	800f1ca <memmove>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	0021      	movs	r1, r4
 800ed92:	195b      	adds	r3, r3, r5
 800ed94:	9802      	ldr	r0, [sp, #8]
 800ed96:	6023      	str	r3, [r4, #0]
 800ed98:	f7fd fd8e 	bl	800c8b8 <_fflush_r>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d16e      	bne.n	800ee7e <__sfvwrite_r+0x182>
 800eda0:	2001      	movs	r0, #1
 800eda2:	1b7f      	subs	r7, r7, r5
 800eda4:	d105      	bne.n	800edb2 <__sfvwrite_r+0xb6>
 800eda6:	0021      	movs	r1, r4
 800eda8:	9802      	ldr	r0, [sp, #8]
 800edaa:	f7fd fd85 	bl	800c8b8 <_fflush_r>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d165      	bne.n	800ee7e <__sfvwrite_r+0x182>
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	9a04      	ldr	r2, [sp, #16]
 800edb6:	1b5b      	subs	r3, r3, r5
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	9b04      	ldr	r3, [sp, #16]
 800edbc:	1976      	adds	r6, r6, r5
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	1b5b      	subs	r3, r3, r5
 800edc2:	6093      	str	r3, [r2, #8]
 800edc4:	d1bd      	bne.n	800ed42 <__sfvwrite_r+0x46>
 800edc6:	e7a1      	b.n	800ed0c <__sfvwrite_r+0x10>
 800edc8:	0021      	movs	r1, r4
 800edca:	9802      	ldr	r0, [sp, #8]
 800edcc:	f000 f932 	bl	800f034 <__swsetup_r>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d0a4      	beq.n	800ed1e <__sfvwrite_r+0x22>
 800edd4:	2001      	movs	r0, #1
 800edd6:	4240      	negs	r0, r0
 800edd8:	e799      	b.n	800ed0e <__sfvwrite_r+0x12>
 800edda:	9b01      	ldr	r3, [sp, #4]
 800eddc:	681e      	ldr	r6, [r3, #0]
 800edde:	685d      	ldr	r5, [r3, #4]
 800ede0:	3308      	adds	r3, #8
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ede6:	69e1      	ldr	r1, [r4, #28]
 800ede8:	2d00      	cmp	r5, #0
 800edea:	d0f6      	beq.n	800edda <__sfvwrite_r+0xde>
 800edec:	4a6e      	ldr	r2, [pc, #440]	; (800efa8 <__sfvwrite_r+0x2ac>)
 800edee:	002b      	movs	r3, r5
 800edf0:	4295      	cmp	r5, r2
 800edf2:	d900      	bls.n	800edf6 <__sfvwrite_r+0xfa>
 800edf4:	0013      	movs	r3, r2
 800edf6:	0032      	movs	r2, r6
 800edf8:	9802      	ldr	r0, [sp, #8]
 800edfa:	47b8      	blx	r7
 800edfc:	2800      	cmp	r0, #0
 800edfe:	dd3e      	ble.n	800ee7e <__sfvwrite_r+0x182>
 800ee00:	9b04      	ldr	r3, [sp, #16]
 800ee02:	9a04      	ldr	r2, [sp, #16]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	1836      	adds	r6, r6, r0
 800ee08:	1a1b      	subs	r3, r3, r0
 800ee0a:	1a2d      	subs	r5, r5, r0
 800ee0c:	6093      	str	r3, [r2, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1e8      	bne.n	800ede4 <__sfvwrite_r+0xe8>
 800ee12:	e77b      	b.n	800ed0c <__sfvwrite_r+0x10>
 800ee14:	2600      	movs	r6, #0
 800ee16:	0035      	movs	r5, r6
 800ee18:	e7e4      	b.n	800ede4 <__sfvwrite_r+0xe8>
 800ee1a:	9b01      	ldr	r3, [sp, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	9303      	str	r3, [sp, #12]
 800ee20:	9b01      	ldr	r3, [sp, #4]
 800ee22:	685d      	ldr	r5, [r3, #4]
 800ee24:	3308      	adds	r3, #8
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	220c      	movs	r2, #12
 800ee2a:	5ea3      	ldrsh	r3, [r4, r2]
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	68a6      	ldr	r6, [r4, #8]
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	d0f2      	beq.n	800ee1a <__sfvwrite_r+0x11e>
 800ee34:	2180      	movs	r1, #128	; 0x80
 800ee36:	0089      	lsls	r1, r1, #2
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	420b      	tst	r3, r1
 800ee3c:	d062      	beq.n	800ef04 <__sfvwrite_r+0x208>
 800ee3e:	42ae      	cmp	r6, r5
 800ee40:	d837      	bhi.n	800eeb2 <__sfvwrite_r+0x1b6>
 800ee42:	2390      	movs	r3, #144	; 0x90
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	421a      	tst	r2, r3
 800ee48:	d033      	beq.n	800eeb2 <__sfvwrite_r+0x1b6>
 800ee4a:	6921      	ldr	r1, [r4, #16]
 800ee4c:	1a43      	subs	r3, r0, r1
 800ee4e:	2003      	movs	r0, #3
 800ee50:	9305      	str	r3, [sp, #20]
 800ee52:	6963      	ldr	r3, [r4, #20]
 800ee54:	4343      	muls	r3, r0
 800ee56:	0fdf      	lsrs	r7, r3, #31
 800ee58:	18ff      	adds	r7, r7, r3
 800ee5a:	9b05      	ldr	r3, [sp, #20]
 800ee5c:	107f      	asrs	r7, r7, #1
 800ee5e:	3301      	adds	r3, #1
 800ee60:	195b      	adds	r3, r3, r5
 800ee62:	42bb      	cmp	r3, r7
 800ee64:	d900      	bls.n	800ee68 <__sfvwrite_r+0x16c>
 800ee66:	001f      	movs	r7, r3
 800ee68:	0552      	lsls	r2, r2, #21
 800ee6a:	d53c      	bpl.n	800eee6 <__sfvwrite_r+0x1ea>
 800ee6c:	0039      	movs	r1, r7
 800ee6e:	9802      	ldr	r0, [sp, #8]
 800ee70:	f7f8 fb98 	bl	80075a4 <_malloc_r>
 800ee74:	1e06      	subs	r6, r0, #0
 800ee76:	d10a      	bne.n	800ee8e <__sfvwrite_r+0x192>
 800ee78:	230c      	movs	r3, #12
 800ee7a:	9a02      	ldr	r2, [sp, #8]
 800ee7c:	6013      	str	r3, [r2, #0]
 800ee7e:	2340      	movs	r3, #64	; 0x40
 800ee80:	89a2      	ldrh	r2, [r4, #12]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	81a3      	strh	r3, [r4, #12]
 800ee86:	e7a5      	b.n	800edd4 <__sfvwrite_r+0xd8>
 800ee88:	0015      	movs	r5, r2
 800ee8a:	9203      	str	r2, [sp, #12]
 800ee8c:	e7cc      	b.n	800ee28 <__sfvwrite_r+0x12c>
 800ee8e:	9a05      	ldr	r2, [sp, #20]
 800ee90:	6921      	ldr	r1, [r4, #16]
 800ee92:	f7f9 feaa 	bl	8008bea <memcpy>
 800ee96:	89a2      	ldrh	r2, [r4, #12]
 800ee98:	4b44      	ldr	r3, [pc, #272]	; (800efac <__sfvwrite_r+0x2b0>)
 800ee9a:	401a      	ands	r2, r3
 800ee9c:	2380      	movs	r3, #128	; 0x80
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	81a3      	strh	r3, [r4, #12]
 800eea2:	9b05      	ldr	r3, [sp, #20]
 800eea4:	6126      	str	r6, [r4, #16]
 800eea6:	18f6      	adds	r6, r6, r3
 800eea8:	6026      	str	r6, [r4, #0]
 800eeaa:	002e      	movs	r6, r5
 800eeac:	6167      	str	r7, [r4, #20]
 800eeae:	1aff      	subs	r7, r7, r3
 800eeb0:	60a7      	str	r7, [r4, #8]
 800eeb2:	002f      	movs	r7, r5
 800eeb4:	42ae      	cmp	r6, r5
 800eeb6:	d900      	bls.n	800eeba <__sfvwrite_r+0x1be>
 800eeb8:	002e      	movs	r6, r5
 800eeba:	0032      	movs	r2, r6
 800eebc:	9903      	ldr	r1, [sp, #12]
 800eebe:	6820      	ldr	r0, [r4, #0]
 800eec0:	f000 f983 	bl	800f1ca <memmove>
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	1b9b      	subs	r3, r3, r6
 800eec8:	60a3      	str	r3, [r4, #8]
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	199b      	adds	r3, r3, r6
 800eece:	6023      	str	r3, [r4, #0]
 800eed0:	9b03      	ldr	r3, [sp, #12]
 800eed2:	9a04      	ldr	r2, [sp, #16]
 800eed4:	19db      	adds	r3, r3, r7
 800eed6:	9303      	str	r3, [sp, #12]
 800eed8:	9b04      	ldr	r3, [sp, #16]
 800eeda:	1bed      	subs	r5, r5, r7
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	1bdb      	subs	r3, r3, r7
 800eee0:	6093      	str	r3, [r2, #8]
 800eee2:	d1a1      	bne.n	800ee28 <__sfvwrite_r+0x12c>
 800eee4:	e712      	b.n	800ed0c <__sfvwrite_r+0x10>
 800eee6:	003a      	movs	r2, r7
 800eee8:	9802      	ldr	r0, [sp, #8]
 800eeea:	f7fe fcd7 	bl	800d89c <_realloc_r>
 800eeee:	1e06      	subs	r6, r0, #0
 800eef0:	d1d7      	bne.n	800eea2 <__sfvwrite_r+0x1a6>
 800eef2:	6921      	ldr	r1, [r4, #16]
 800eef4:	9802      	ldr	r0, [sp, #8]
 800eef6:	f7f9 fef3 	bl	8008ce0 <_free_r>
 800eefa:	2280      	movs	r2, #128	; 0x80
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	4393      	bics	r3, r2
 800ef00:	81a3      	strh	r3, [r4, #12]
 800ef02:	e7b9      	b.n	800ee78 <__sfvwrite_r+0x17c>
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	4283      	cmp	r3, r0
 800ef08:	d302      	bcc.n	800ef10 <__sfvwrite_r+0x214>
 800ef0a:	6967      	ldr	r7, [r4, #20]
 800ef0c:	42af      	cmp	r7, r5
 800ef0e:	d916      	bls.n	800ef3e <__sfvwrite_r+0x242>
 800ef10:	42ae      	cmp	r6, r5
 800ef12:	d900      	bls.n	800ef16 <__sfvwrite_r+0x21a>
 800ef14:	002e      	movs	r6, r5
 800ef16:	0032      	movs	r2, r6
 800ef18:	9903      	ldr	r1, [sp, #12]
 800ef1a:	f000 f956 	bl	800f1ca <memmove>
 800ef1e:	68a3      	ldr	r3, [r4, #8]
 800ef20:	6822      	ldr	r2, [r4, #0]
 800ef22:	1b9b      	subs	r3, r3, r6
 800ef24:	1992      	adds	r2, r2, r6
 800ef26:	0037      	movs	r7, r6
 800ef28:	60a3      	str	r3, [r4, #8]
 800ef2a:	6022      	str	r2, [r4, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1cf      	bne.n	800eed0 <__sfvwrite_r+0x1d4>
 800ef30:	0021      	movs	r1, r4
 800ef32:	9802      	ldr	r0, [sp, #8]
 800ef34:	f7fd fcc0 	bl	800c8b8 <_fflush_r>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d0c9      	beq.n	800eed0 <__sfvwrite_r+0x1d4>
 800ef3c:	e79f      	b.n	800ee7e <__sfvwrite_r+0x182>
 800ef3e:	4b1c      	ldr	r3, [pc, #112]	; (800efb0 <__sfvwrite_r+0x2b4>)
 800ef40:	0028      	movs	r0, r5
 800ef42:	429d      	cmp	r5, r3
 800ef44:	d900      	bls.n	800ef48 <__sfvwrite_r+0x24c>
 800ef46:	481b      	ldr	r0, [pc, #108]	; (800efb4 <__sfvwrite_r+0x2b8>)
 800ef48:	0039      	movs	r1, r7
 800ef4a:	f7f1 f981 	bl	8000250 <__divsi3>
 800ef4e:	003b      	movs	r3, r7
 800ef50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef52:	4343      	muls	r3, r0
 800ef54:	9a03      	ldr	r2, [sp, #12]
 800ef56:	69e1      	ldr	r1, [r4, #28]
 800ef58:	9802      	ldr	r0, [sp, #8]
 800ef5a:	47b0      	blx	r6
 800ef5c:	1e07      	subs	r7, r0, #0
 800ef5e:	dcb7      	bgt.n	800eed0 <__sfvwrite_r+0x1d4>
 800ef60:	e78d      	b.n	800ee7e <__sfvwrite_r+0x182>
 800ef62:	9b01      	ldr	r3, [sp, #4]
 800ef64:	2000      	movs	r0, #0
 800ef66:	681e      	ldr	r6, [r3, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	9303      	str	r3, [sp, #12]
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	e6e6      	b.n	800ed42 <__sfvwrite_r+0x46>
 800ef74:	9a05      	ldr	r2, [sp, #20]
 800ef76:	4293      	cmp	r3, r2
 800ef78:	dc08      	bgt.n	800ef8c <__sfvwrite_r+0x290>
 800ef7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ef7c:	0032      	movs	r2, r6
 800ef7e:	69e1      	ldr	r1, [r4, #28]
 800ef80:	9802      	ldr	r0, [sp, #8]
 800ef82:	47a8      	blx	r5
 800ef84:	1e05      	subs	r5, r0, #0
 800ef86:	dd00      	ble.n	800ef8a <__sfvwrite_r+0x28e>
 800ef88:	e70a      	b.n	800eda0 <__sfvwrite_r+0xa4>
 800ef8a:	e778      	b.n	800ee7e <__sfvwrite_r+0x182>
 800ef8c:	9a05      	ldr	r2, [sp, #20]
 800ef8e:	0031      	movs	r1, r6
 800ef90:	f000 f91b 	bl	800f1ca <memmove>
 800ef94:	9a05      	ldr	r2, [sp, #20]
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	0015      	movs	r5, r2
 800ef9a:	1a9b      	subs	r3, r3, r2
 800ef9c:	60a3      	str	r3, [r4, #8]
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	189b      	adds	r3, r3, r2
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	e6fc      	b.n	800eda0 <__sfvwrite_r+0xa4>
 800efa6:	46c0      	nop			; (mov r8, r8)
 800efa8:	7ffffc00 	.word	0x7ffffc00
 800efac:	fffffb7f 	.word	0xfffffb7f
 800efb0:	7ffffffe 	.word	0x7ffffffe
 800efb4:	7fffffff 	.word	0x7fffffff

0800efb8 <__submore>:
 800efb8:	000b      	movs	r3, r1
 800efba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efbc:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800efbe:	3340      	adds	r3, #64	; 0x40
 800efc0:	000c      	movs	r4, r1
 800efc2:	429d      	cmp	r5, r3
 800efc4:	d11c      	bne.n	800f000 <__submore+0x48>
 800efc6:	2680      	movs	r6, #128	; 0x80
 800efc8:	00f6      	lsls	r6, r6, #3
 800efca:	0031      	movs	r1, r6
 800efcc:	f7f8 faea 	bl	80075a4 <_malloc_r>
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d102      	bne.n	800efda <__submore+0x22>
 800efd4:	2001      	movs	r0, #1
 800efd6:	4240      	negs	r0, r0
 800efd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efda:	0023      	movs	r3, r4
 800efdc:	6320      	str	r0, [r4, #48]	; 0x30
 800efde:	6366      	str	r6, [r4, #52]	; 0x34
 800efe0:	3342      	adds	r3, #66	; 0x42
 800efe2:	781a      	ldrb	r2, [r3, #0]
 800efe4:	4b10      	ldr	r3, [pc, #64]	; (800f028 <__submore+0x70>)
 800efe6:	54c2      	strb	r2, [r0, r3]
 800efe8:	0023      	movs	r3, r4
 800efea:	3341      	adds	r3, #65	; 0x41
 800efec:	781a      	ldrb	r2, [r3, #0]
 800efee:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <__submore+0x74>)
 800eff0:	54c2      	strb	r2, [r0, r3]
 800eff2:	782a      	ldrb	r2, [r5, #0]
 800eff4:	4b0e      	ldr	r3, [pc, #56]	; (800f030 <__submore+0x78>)
 800eff6:	54c2      	strb	r2, [r0, r3]
 800eff8:	18c0      	adds	r0, r0, r3
 800effa:	6020      	str	r0, [r4, #0]
 800effc:	2000      	movs	r0, #0
 800effe:	e7eb      	b.n	800efd8 <__submore+0x20>
 800f000:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800f002:	0029      	movs	r1, r5
 800f004:	0073      	lsls	r3, r6, #1
 800f006:	001a      	movs	r2, r3
 800f008:	9301      	str	r3, [sp, #4]
 800f00a:	f7fe fc47 	bl	800d89c <_realloc_r>
 800f00e:	1e05      	subs	r5, r0, #0
 800f010:	d0e0      	beq.n	800efd4 <__submore+0x1c>
 800f012:	1987      	adds	r7, r0, r6
 800f014:	0001      	movs	r1, r0
 800f016:	0032      	movs	r2, r6
 800f018:	0038      	movs	r0, r7
 800f01a:	f7f9 fde6 	bl	8008bea <memcpy>
 800f01e:	9b01      	ldr	r3, [sp, #4]
 800f020:	6027      	str	r7, [r4, #0]
 800f022:	6325      	str	r5, [r4, #48]	; 0x30
 800f024:	6363      	str	r3, [r4, #52]	; 0x34
 800f026:	e7e9      	b.n	800effc <__submore+0x44>
 800f028:	000003ff 	.word	0x000003ff
 800f02c:	000003fe 	.word	0x000003fe
 800f030:	000003fd 	.word	0x000003fd

0800f034 <__swsetup_r>:
 800f034:	4b30      	ldr	r3, [pc, #192]	; (800f0f8 <__swsetup_r+0xc4>)
 800f036:	b570      	push	{r4, r5, r6, lr}
 800f038:	0005      	movs	r5, r0
 800f03a:	6818      	ldr	r0, [r3, #0]
 800f03c:	000c      	movs	r4, r1
 800f03e:	2800      	cmp	r0, #0
 800f040:	d004      	beq.n	800f04c <__swsetup_r+0x18>
 800f042:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f044:	2b00      	cmp	r3, #0
 800f046:	d101      	bne.n	800f04c <__swsetup_r+0x18>
 800f048:	f7f9 fc20 	bl	800888c <__sinit>
 800f04c:	230c      	movs	r3, #12
 800f04e:	5ee2      	ldrsh	r2, [r4, r3]
 800f050:	b293      	uxth	r3, r2
 800f052:	0711      	lsls	r1, r2, #28
 800f054:	d423      	bmi.n	800f09e <__swsetup_r+0x6a>
 800f056:	06d9      	lsls	r1, r3, #27
 800f058:	d407      	bmi.n	800f06a <__swsetup_r+0x36>
 800f05a:	2309      	movs	r3, #9
 800f05c:	2001      	movs	r0, #1
 800f05e:	602b      	str	r3, [r5, #0]
 800f060:	3337      	adds	r3, #55	; 0x37
 800f062:	4313      	orrs	r3, r2
 800f064:	81a3      	strh	r3, [r4, #12]
 800f066:	4240      	negs	r0, r0
 800f068:	bd70      	pop	{r4, r5, r6, pc}
 800f06a:	075b      	lsls	r3, r3, #29
 800f06c:	d513      	bpl.n	800f096 <__swsetup_r+0x62>
 800f06e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f070:	2900      	cmp	r1, #0
 800f072:	d008      	beq.n	800f086 <__swsetup_r+0x52>
 800f074:	0023      	movs	r3, r4
 800f076:	3340      	adds	r3, #64	; 0x40
 800f078:	4299      	cmp	r1, r3
 800f07a:	d002      	beq.n	800f082 <__swsetup_r+0x4e>
 800f07c:	0028      	movs	r0, r5
 800f07e:	f7f9 fe2f 	bl	8008ce0 <_free_r>
 800f082:	2300      	movs	r3, #0
 800f084:	6323      	str	r3, [r4, #48]	; 0x30
 800f086:	2224      	movs	r2, #36	; 0x24
 800f088:	89a3      	ldrh	r3, [r4, #12]
 800f08a:	4393      	bics	r3, r2
 800f08c:	81a3      	strh	r3, [r4, #12]
 800f08e:	2300      	movs	r3, #0
 800f090:	6063      	str	r3, [r4, #4]
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	2308      	movs	r3, #8
 800f098:	89a2      	ldrh	r2, [r4, #12]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	6923      	ldr	r3, [r4, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10b      	bne.n	800f0bc <__swsetup_r+0x88>
 800f0a4:	21a0      	movs	r1, #160	; 0xa0
 800f0a6:	2280      	movs	r2, #128	; 0x80
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	0089      	lsls	r1, r1, #2
 800f0ac:	0092      	lsls	r2, r2, #2
 800f0ae:	400b      	ands	r3, r1
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d003      	beq.n	800f0bc <__swsetup_r+0x88>
 800f0b4:	0021      	movs	r1, r4
 800f0b6:	0028      	movs	r0, r5
 800f0b8:	f000 f8e8 	bl	800f28c <__smakebuf_r>
 800f0bc:	220c      	movs	r2, #12
 800f0be:	5ea3      	ldrsh	r3, [r4, r2]
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	001a      	movs	r2, r3
 800f0c4:	b299      	uxth	r1, r3
 800f0c6:	4002      	ands	r2, r0
 800f0c8:	4203      	tst	r3, r0
 800f0ca:	d00f      	beq.n	800f0ec <__swsetup_r+0xb8>
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	60a2      	str	r2, [r4, #8]
 800f0d0:	6962      	ldr	r2, [r4, #20]
 800f0d2:	4252      	negs	r2, r2
 800f0d4:	61a2      	str	r2, [r4, #24]
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	6922      	ldr	r2, [r4, #16]
 800f0da:	4282      	cmp	r2, r0
 800f0dc:	d1c4      	bne.n	800f068 <__swsetup_r+0x34>
 800f0de:	0609      	lsls	r1, r1, #24
 800f0e0:	d5c2      	bpl.n	800f068 <__swsetup_r+0x34>
 800f0e2:	2240      	movs	r2, #64	; 0x40
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	3801      	subs	r0, #1
 800f0ea:	e7bd      	b.n	800f068 <__swsetup_r+0x34>
 800f0ec:	0788      	lsls	r0, r1, #30
 800f0ee:	d400      	bmi.n	800f0f2 <__swsetup_r+0xbe>
 800f0f0:	6962      	ldr	r2, [r4, #20]
 800f0f2:	60a2      	str	r2, [r4, #8]
 800f0f4:	e7ef      	b.n	800f0d6 <__swsetup_r+0xa2>
 800f0f6:	46c0      	nop			; (mov r8, r8)
 800f0f8:	200006c0 	.word	0x200006c0

0800f0fc <__fputwc>:
 800f0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0fe:	b085      	sub	sp, #20
 800f100:	000e      	movs	r6, r1
 800f102:	0015      	movs	r5, r2
 800f104:	9001      	str	r0, [sp, #4]
 800f106:	f7f9 fccf 	bl	8008aa8 <__locale_mb_cur_max>
 800f10a:	0004      	movs	r4, r0
 800f10c:	2801      	cmp	r0, #1
 800f10e:	d119      	bne.n	800f144 <__fputwc+0x48>
 800f110:	1e73      	subs	r3, r6, #1
 800f112:	2bfe      	cmp	r3, #254	; 0xfe
 800f114:	d816      	bhi.n	800f144 <__fputwc+0x48>
 800f116:	ab02      	add	r3, sp, #8
 800f118:	711e      	strb	r6, [r3, #4]
 800f11a:	2700      	movs	r7, #0
 800f11c:	42a7      	cmp	r7, r4
 800f11e:	d020      	beq.n	800f162 <__fputwc+0x66>
 800f120:	ab03      	add	r3, sp, #12
 800f122:	5dd9      	ldrb	r1, [r3, r7]
 800f124:	68ab      	ldr	r3, [r5, #8]
 800f126:	3b01      	subs	r3, #1
 800f128:	60ab      	str	r3, [r5, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da04      	bge.n	800f138 <__fputwc+0x3c>
 800f12e:	69aa      	ldr	r2, [r5, #24]
 800f130:	4293      	cmp	r3, r2
 800f132:	db19      	blt.n	800f168 <__fputwc+0x6c>
 800f134:	290a      	cmp	r1, #10
 800f136:	d017      	beq.n	800f168 <__fputwc+0x6c>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	1c5a      	adds	r2, r3, #1
 800f13c:	602a      	str	r2, [r5, #0]
 800f13e:	7019      	strb	r1, [r3, #0]
 800f140:	3701      	adds	r7, #1
 800f142:	e7eb      	b.n	800f11c <__fputwc+0x20>
 800f144:	002b      	movs	r3, r5
 800f146:	0032      	movs	r2, r6
 800f148:	9801      	ldr	r0, [sp, #4]
 800f14a:	335c      	adds	r3, #92	; 0x5c
 800f14c:	a903      	add	r1, sp, #12
 800f14e:	f000 f857 	bl	800f200 <_wcrtomb_r>
 800f152:	0004      	movs	r4, r0
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d1e0      	bne.n	800f11a <__fputwc+0x1e>
 800f158:	2340      	movs	r3, #64	; 0x40
 800f15a:	0006      	movs	r6, r0
 800f15c:	89aa      	ldrh	r2, [r5, #12]
 800f15e:	4313      	orrs	r3, r2
 800f160:	81ab      	strh	r3, [r5, #12]
 800f162:	0030      	movs	r0, r6
 800f164:	b005      	add	sp, #20
 800f166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f168:	002a      	movs	r2, r5
 800f16a:	9801      	ldr	r0, [sp, #4]
 800f16c:	f000 f8cc 	bl	800f308 <__swbuf_r>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d1e5      	bne.n	800f140 <__fputwc+0x44>
 800f174:	0006      	movs	r6, r0
 800f176:	e7f4      	b.n	800f162 <__fputwc+0x66>

0800f178 <_fputwc_r>:
 800f178:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f17a:	b570      	push	{r4, r5, r6, lr}
 800f17c:	0005      	movs	r5, r0
 800f17e:	000e      	movs	r6, r1
 800f180:	0014      	movs	r4, r2
 800f182:	07db      	lsls	r3, r3, #31
 800f184:	d405      	bmi.n	800f192 <_fputwc_r+0x1a>
 800f186:	8993      	ldrh	r3, [r2, #12]
 800f188:	059b      	lsls	r3, r3, #22
 800f18a:	d402      	bmi.n	800f192 <_fputwc_r+0x1a>
 800f18c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f18e:	f7f9 fd1f 	bl	8008bd0 <__retarget_lock_acquire_recursive>
 800f192:	230c      	movs	r3, #12
 800f194:	5ee2      	ldrsh	r2, [r4, r3]
 800f196:	2380      	movs	r3, #128	; 0x80
 800f198:	019b      	lsls	r3, r3, #6
 800f19a:	421a      	tst	r2, r3
 800f19c:	d104      	bne.n	800f1a8 <_fputwc_r+0x30>
 800f19e:	431a      	orrs	r2, r3
 800f1a0:	81a2      	strh	r2, [r4, #12]
 800f1a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	6663      	str	r3, [r4, #100]	; 0x64
 800f1a8:	0028      	movs	r0, r5
 800f1aa:	0022      	movs	r2, r4
 800f1ac:	0031      	movs	r1, r6
 800f1ae:	f7ff ffa5 	bl	800f0fc <__fputwc>
 800f1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b4:	0005      	movs	r5, r0
 800f1b6:	07db      	lsls	r3, r3, #31
 800f1b8:	d405      	bmi.n	800f1c6 <_fputwc_r+0x4e>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	059b      	lsls	r3, r3, #22
 800f1be:	d402      	bmi.n	800f1c6 <_fputwc_r+0x4e>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c2:	f7f9 fd06 	bl	8008bd2 <__retarget_lock_release_recursive>
 800f1c6:	0028      	movs	r0, r5
 800f1c8:	bd70      	pop	{r4, r5, r6, pc}

0800f1ca <memmove>:
 800f1ca:	b510      	push	{r4, lr}
 800f1cc:	4288      	cmp	r0, r1
 800f1ce:	d902      	bls.n	800f1d6 <memmove+0xc>
 800f1d0:	188b      	adds	r3, r1, r2
 800f1d2:	4298      	cmp	r0, r3
 800f1d4:	d303      	bcc.n	800f1de <memmove+0x14>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e007      	b.n	800f1ea <memmove+0x20>
 800f1da:	5c8b      	ldrb	r3, [r1, r2]
 800f1dc:	5483      	strb	r3, [r0, r2]
 800f1de:	3a01      	subs	r2, #1
 800f1e0:	d2fb      	bcs.n	800f1da <memmove+0x10>
 800f1e2:	bd10      	pop	{r4, pc}
 800f1e4:	5ccc      	ldrb	r4, [r1, r3]
 800f1e6:	54c4      	strb	r4, [r0, r3]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d1fa      	bne.n	800f1e4 <memmove+0x1a>
 800f1ee:	e7f8      	b.n	800f1e2 <memmove+0x18>

0800f1f0 <abort>:
 800f1f0:	2006      	movs	r0, #6
 800f1f2:	b510      	push	{r4, lr}
 800f1f4:	f000 f906 	bl	800f404 <raise>
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	f7f4 f991 	bl	8003520 <_exit>
	...

0800f200 <_wcrtomb_r>:
 800f200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f202:	001d      	movs	r5, r3
 800f204:	4b09      	ldr	r3, [pc, #36]	; (800f22c <_wcrtomb_r+0x2c>)
 800f206:	0004      	movs	r4, r0
 800f208:	33e0      	adds	r3, #224	; 0xe0
 800f20a:	681e      	ldr	r6, [r3, #0]
 800f20c:	002b      	movs	r3, r5
 800f20e:	2900      	cmp	r1, #0
 800f210:	d101      	bne.n	800f216 <_wcrtomb_r+0x16>
 800f212:	000a      	movs	r2, r1
 800f214:	a901      	add	r1, sp, #4
 800f216:	0020      	movs	r0, r4
 800f218:	47b0      	blx	r6
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	d103      	bne.n	800f226 <_wcrtomb_r+0x26>
 800f21e:	2300      	movs	r3, #0
 800f220:	602b      	str	r3, [r5, #0]
 800f222:	338a      	adds	r3, #138	; 0x8a
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	b004      	add	sp, #16
 800f228:	bd70      	pop	{r4, r5, r6, pc}
 800f22a:	46c0      	nop			; (mov r8, r8)
 800f22c:	20000430 	.word	0x20000430

0800f230 <__swhatbuf_r>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	000e      	movs	r6, r1
 800f234:	001d      	movs	r5, r3
 800f236:	230e      	movs	r3, #14
 800f238:	5ec9      	ldrsh	r1, [r1, r3]
 800f23a:	0014      	movs	r4, r2
 800f23c:	b096      	sub	sp, #88	; 0x58
 800f23e:	2900      	cmp	r1, #0
 800f240:	da09      	bge.n	800f256 <__swhatbuf_r+0x26>
 800f242:	89b2      	ldrh	r2, [r6, #12]
 800f244:	2380      	movs	r3, #128	; 0x80
 800f246:	0011      	movs	r1, r2
 800f248:	4019      	ands	r1, r3
 800f24a:	421a      	tst	r2, r3
 800f24c:	d018      	beq.n	800f280 <__swhatbuf_r+0x50>
 800f24e:	2100      	movs	r1, #0
 800f250:	3b40      	subs	r3, #64	; 0x40
 800f252:	0008      	movs	r0, r1
 800f254:	e010      	b.n	800f278 <__swhatbuf_r+0x48>
 800f256:	466a      	mov	r2, sp
 800f258:	f000 f8de 	bl	800f418 <_fstat_r>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	dbf0      	blt.n	800f242 <__swhatbuf_r+0x12>
 800f260:	23f0      	movs	r3, #240	; 0xf0
 800f262:	9901      	ldr	r1, [sp, #4]
 800f264:	021b      	lsls	r3, r3, #8
 800f266:	4019      	ands	r1, r3
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <__swhatbuf_r+0x58>)
 800f26a:	2080      	movs	r0, #128	; 0x80
 800f26c:	18c9      	adds	r1, r1, r3
 800f26e:	424b      	negs	r3, r1
 800f270:	4159      	adcs	r1, r3
 800f272:	2380      	movs	r3, #128	; 0x80
 800f274:	0100      	lsls	r0, r0, #4
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	6029      	str	r1, [r5, #0]
 800f27a:	6023      	str	r3, [r4, #0]
 800f27c:	b016      	add	sp, #88	; 0x58
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	2380      	movs	r3, #128	; 0x80
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	e7e5      	b.n	800f252 <__swhatbuf_r+0x22>
 800f286:	46c0      	nop			; (mov r8, r8)
 800f288:	ffffe000 	.word	0xffffe000

0800f28c <__smakebuf_r>:
 800f28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f28e:	2602      	movs	r6, #2
 800f290:	898b      	ldrh	r3, [r1, #12]
 800f292:	0005      	movs	r5, r0
 800f294:	000c      	movs	r4, r1
 800f296:	4233      	tst	r3, r6
 800f298:	d006      	beq.n	800f2a8 <__smakebuf_r+0x1c>
 800f29a:	0023      	movs	r3, r4
 800f29c:	3343      	adds	r3, #67	; 0x43
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	6123      	str	r3, [r4, #16]
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	6163      	str	r3, [r4, #20]
 800f2a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f2a8:	466a      	mov	r2, sp
 800f2aa:	ab01      	add	r3, sp, #4
 800f2ac:	f7ff ffc0 	bl	800f230 <__swhatbuf_r>
 800f2b0:	9900      	ldr	r1, [sp, #0]
 800f2b2:	0007      	movs	r7, r0
 800f2b4:	0028      	movs	r0, r5
 800f2b6:	f7f8 f975 	bl	80075a4 <_malloc_r>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d108      	bne.n	800f2d0 <__smakebuf_r+0x44>
 800f2be:	220c      	movs	r2, #12
 800f2c0:	5ea3      	ldrsh	r3, [r4, r2]
 800f2c2:	059a      	lsls	r2, r3, #22
 800f2c4:	d4ef      	bmi.n	800f2a6 <__smakebuf_r+0x1a>
 800f2c6:	2203      	movs	r2, #3
 800f2c8:	4393      	bics	r3, r2
 800f2ca:	431e      	orrs	r6, r3
 800f2cc:	81a6      	strh	r6, [r4, #12]
 800f2ce:	e7e4      	b.n	800f29a <__smakebuf_r+0xe>
 800f2d0:	2380      	movs	r3, #128	; 0x80
 800f2d2:	89a2      	ldrh	r2, [r4, #12]
 800f2d4:	6020      	str	r0, [r4, #0]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	81a3      	strh	r3, [r4, #12]
 800f2da:	9b00      	ldr	r3, [sp, #0]
 800f2dc:	6120      	str	r0, [r4, #16]
 800f2de:	6163      	str	r3, [r4, #20]
 800f2e0:	9b01      	ldr	r3, [sp, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00c      	beq.n	800f300 <__smakebuf_r+0x74>
 800f2e6:	0028      	movs	r0, r5
 800f2e8:	230e      	movs	r3, #14
 800f2ea:	5ee1      	ldrsh	r1, [r4, r3]
 800f2ec:	f000 f8a6 	bl	800f43c <_isatty_r>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d005      	beq.n	800f300 <__smakebuf_r+0x74>
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	89a2      	ldrh	r2, [r4, #12]
 800f2f8:	439a      	bics	r2, r3
 800f2fa:	3b02      	subs	r3, #2
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	81a3      	strh	r3, [r4, #12]
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	433b      	orrs	r3, r7
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	e7ce      	b.n	800f2a6 <__smakebuf_r+0x1a>

0800f308 <__swbuf_r>:
 800f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30a:	0006      	movs	r6, r0
 800f30c:	000d      	movs	r5, r1
 800f30e:	0014      	movs	r4, r2
 800f310:	2800      	cmp	r0, #0
 800f312:	d004      	beq.n	800f31e <__swbuf_r+0x16>
 800f314:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <__swbuf_r+0x16>
 800f31a:	f7f9 fab7 	bl	800888c <__sinit>
 800f31e:	69a3      	ldr	r3, [r4, #24]
 800f320:	60a3      	str	r3, [r4, #8]
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	071b      	lsls	r3, r3, #28
 800f326:	d52e      	bpl.n	800f386 <__swbuf_r+0x7e>
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d02b      	beq.n	800f386 <__swbuf_r+0x7e>
 800f32e:	230c      	movs	r3, #12
 800f330:	5ee2      	ldrsh	r2, [r4, r3]
 800f332:	2380      	movs	r3, #128	; 0x80
 800f334:	019b      	lsls	r3, r3, #6
 800f336:	b2ef      	uxtb	r7, r5
 800f338:	b2ed      	uxtb	r5, r5
 800f33a:	421a      	tst	r2, r3
 800f33c:	d02c      	beq.n	800f398 <__swbuf_r+0x90>
 800f33e:	6923      	ldr	r3, [r4, #16]
 800f340:	6820      	ldr	r0, [r4, #0]
 800f342:	1ac0      	subs	r0, r0, r3
 800f344:	6963      	ldr	r3, [r4, #20]
 800f346:	4283      	cmp	r3, r0
 800f348:	dc05      	bgt.n	800f356 <__swbuf_r+0x4e>
 800f34a:	0021      	movs	r1, r4
 800f34c:	0030      	movs	r0, r6
 800f34e:	f7fd fab3 	bl	800c8b8 <_fflush_r>
 800f352:	2800      	cmp	r0, #0
 800f354:	d11d      	bne.n	800f392 <__swbuf_r+0x8a>
 800f356:	68a3      	ldr	r3, [r4, #8]
 800f358:	3001      	adds	r0, #1
 800f35a:	3b01      	subs	r3, #1
 800f35c:	60a3      	str	r3, [r4, #8]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	1c5a      	adds	r2, r3, #1
 800f362:	6022      	str	r2, [r4, #0]
 800f364:	701f      	strb	r7, [r3, #0]
 800f366:	6963      	ldr	r3, [r4, #20]
 800f368:	4283      	cmp	r3, r0
 800f36a:	d004      	beq.n	800f376 <__swbuf_r+0x6e>
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	07db      	lsls	r3, r3, #31
 800f370:	d507      	bpl.n	800f382 <__swbuf_r+0x7a>
 800f372:	2d0a      	cmp	r5, #10
 800f374:	d105      	bne.n	800f382 <__swbuf_r+0x7a>
 800f376:	0021      	movs	r1, r4
 800f378:	0030      	movs	r0, r6
 800f37a:	f7fd fa9d 	bl	800c8b8 <_fflush_r>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d107      	bne.n	800f392 <__swbuf_r+0x8a>
 800f382:	0028      	movs	r0, r5
 800f384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f386:	0021      	movs	r1, r4
 800f388:	0030      	movs	r0, r6
 800f38a:	f7ff fe53 	bl	800f034 <__swsetup_r>
 800f38e:	2800      	cmp	r0, #0
 800f390:	d0cd      	beq.n	800f32e <__swbuf_r+0x26>
 800f392:	2501      	movs	r5, #1
 800f394:	426d      	negs	r5, r5
 800f396:	e7f4      	b.n	800f382 <__swbuf_r+0x7a>
 800f398:	4313      	orrs	r3, r2
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	4a02      	ldr	r2, [pc, #8]	; (800f3a8 <__swbuf_r+0xa0>)
 800f39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	6663      	str	r3, [r4, #100]	; 0x64
 800f3a4:	e7cb      	b.n	800f33e <__swbuf_r+0x36>
 800f3a6:	46c0      	nop			; (mov r8, r8)
 800f3a8:	ffffdfff 	.word	0xffffdfff

0800f3ac <_raise_r>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	0004      	movs	r4, r0
 800f3b0:	000d      	movs	r5, r1
 800f3b2:	291f      	cmp	r1, #31
 800f3b4:	d904      	bls.n	800f3c0 <_raise_r+0x14>
 800f3b6:	2316      	movs	r3, #22
 800f3b8:	6003      	str	r3, [r0, #0]
 800f3ba:	2001      	movs	r0, #1
 800f3bc:	4240      	negs	r0, r0
 800f3be:	bd70      	pop	{r4, r5, r6, pc}
 800f3c0:	0003      	movs	r3, r0
 800f3c2:	33fc      	adds	r3, #252	; 0xfc
 800f3c4:	69db      	ldr	r3, [r3, #28]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d004      	beq.n	800f3d4 <_raise_r+0x28>
 800f3ca:	008a      	lsls	r2, r1, #2
 800f3cc:	189b      	adds	r3, r3, r2
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	2a00      	cmp	r2, #0
 800f3d2:	d108      	bne.n	800f3e6 <_raise_r+0x3a>
 800f3d4:	0020      	movs	r0, r4
 800f3d6:	f000 f855 	bl	800f484 <_getpid_r>
 800f3da:	002a      	movs	r2, r5
 800f3dc:	0001      	movs	r1, r0
 800f3de:	0020      	movs	r0, r4
 800f3e0:	f000 f83e 	bl	800f460 <_kill_r>
 800f3e4:	e7eb      	b.n	800f3be <_raise_r+0x12>
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	2a01      	cmp	r2, #1
 800f3ea:	d0e8      	beq.n	800f3be <_raise_r+0x12>
 800f3ec:	1c51      	adds	r1, r2, #1
 800f3ee:	d103      	bne.n	800f3f8 <_raise_r+0x4c>
 800f3f0:	2316      	movs	r3, #22
 800f3f2:	3001      	adds	r0, #1
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	e7e2      	b.n	800f3be <_raise_r+0x12>
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	0028      	movs	r0, r5
 800f3fc:	601c      	str	r4, [r3, #0]
 800f3fe:	4790      	blx	r2
 800f400:	0020      	movs	r0, r4
 800f402:	e7dc      	b.n	800f3be <_raise_r+0x12>

0800f404 <raise>:
 800f404:	b510      	push	{r4, lr}
 800f406:	4b03      	ldr	r3, [pc, #12]	; (800f414 <raise+0x10>)
 800f408:	0001      	movs	r1, r0
 800f40a:	6818      	ldr	r0, [r3, #0]
 800f40c:	f7ff ffce 	bl	800f3ac <_raise_r>
 800f410:	bd10      	pop	{r4, pc}
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	200006c0 	.word	0x200006c0

0800f418 <_fstat_r>:
 800f418:	2300      	movs	r3, #0
 800f41a:	b570      	push	{r4, r5, r6, lr}
 800f41c:	4d06      	ldr	r5, [pc, #24]	; (800f438 <_fstat_r+0x20>)
 800f41e:	0004      	movs	r4, r0
 800f420:	0008      	movs	r0, r1
 800f422:	0011      	movs	r1, r2
 800f424:	602b      	str	r3, [r5, #0]
 800f426:	f7f4 f8ca 	bl	80035be <_fstat>
 800f42a:	1c43      	adds	r3, r0, #1
 800f42c:	d103      	bne.n	800f436 <_fstat_r+0x1e>
 800f42e:	682b      	ldr	r3, [r5, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d000      	beq.n	800f436 <_fstat_r+0x1e>
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	20000bb4 	.word	0x20000bb4

0800f43c <_isatty_r>:
 800f43c:	2300      	movs	r3, #0
 800f43e:	b570      	push	{r4, r5, r6, lr}
 800f440:	4d06      	ldr	r5, [pc, #24]	; (800f45c <_isatty_r+0x20>)
 800f442:	0004      	movs	r4, r0
 800f444:	0008      	movs	r0, r1
 800f446:	602b      	str	r3, [r5, #0]
 800f448:	f7f4 f8c7 	bl	80035da <_isatty>
 800f44c:	1c43      	adds	r3, r0, #1
 800f44e:	d103      	bne.n	800f458 <_isatty_r+0x1c>
 800f450:	682b      	ldr	r3, [r5, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d000      	beq.n	800f458 <_isatty_r+0x1c>
 800f456:	6023      	str	r3, [r4, #0]
 800f458:	bd70      	pop	{r4, r5, r6, pc}
 800f45a:	46c0      	nop			; (mov r8, r8)
 800f45c:	20000bb4 	.word	0x20000bb4

0800f460 <_kill_r>:
 800f460:	2300      	movs	r3, #0
 800f462:	b570      	push	{r4, r5, r6, lr}
 800f464:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_kill_r+0x20>)
 800f466:	0004      	movs	r4, r0
 800f468:	0008      	movs	r0, r1
 800f46a:	0011      	movs	r1, r2
 800f46c:	602b      	str	r3, [r5, #0]
 800f46e:	f7f4 f847 	bl	8003500 <_kill>
 800f472:	1c43      	adds	r3, r0, #1
 800f474:	d103      	bne.n	800f47e <_kill_r+0x1e>
 800f476:	682b      	ldr	r3, [r5, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d000      	beq.n	800f47e <_kill_r+0x1e>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd70      	pop	{r4, r5, r6, pc}
 800f480:	20000bb4 	.word	0x20000bb4

0800f484 <_getpid_r>:
 800f484:	b510      	push	{r4, lr}
 800f486:	f7f4 f835 	bl	80034f4 <_getpid>
 800f48a:	bd10      	pop	{r4, pc}

0800f48c <_init>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	46c0      	nop			; (mov r8, r8)
 800f490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f492:	bc08      	pop	{r3}
 800f494:	469e      	mov	lr, r3
 800f496:	4770      	bx	lr

0800f498 <_fini>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	46c0      	nop			; (mov r8, r8)
 800f49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f49e:	bc08      	pop	{r3}
 800f4a0:	469e      	mov	lr, r3
 800f4a2:	4770      	bx	lr
